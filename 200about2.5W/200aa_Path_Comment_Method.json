[{
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.resumeProcesses",
	"Comment": "resumes the specified suspended automatic scaling processes, or all suspended process, for the specified autoscaling group.for more information, see suspending andresuming scaling processes in the amazon ec2 auto scaling user guide.",
	"Method": "ResumeProcessesResult resumeProcesses(ResumeProcessesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeResumeProcesses(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.StartQueryExecutionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryString() != null)\r\n        sb.append(\"QueryString: \").append(getQueryString()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken()).append(\",\");\r\n    if (getQueryExecutionContext() != null)\r\n        sb.append(\"QueryExecutionContext: \").append(getQueryExecutionContext()).append(\",\");\r\n    if (getResultConfiguration() != null)\r\n        sb.append(\"ResultConfiguration: \").append(getResultConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateDocumentationPartResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getProperties() != null)\r\n        sb.append(\"Properties: \").append(getProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.RouteRef.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getRouteName() != null)\r\n        sb.append(\"RouteName: \").append(getRouteName()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftConverter.getColumnParent",
	"Comment": "construct a hector columnparent based on the information in the query andthe type of column family being queried.",
	"Method": "ColumnParent getColumnParent(ColumnFamily<?, ?> columnFamily,ColumnPath<?> path){\r\n    ColumnParent cp = new ColumnParent();\r\n    cp.setColumn_family(columnFamily.getName());\r\n    if (path != null) {\r\n        Iterator<ByteBuffer> columns = path.iterator();\r\n        if (columnFamily.getType() == ColumnType.SUPER && columns.hasNext()) {\r\n            cp.setSuper_column(columns.next());\r\n        }\r\n    }\r\n    return cp;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetIntegrationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getUri() != null)\r\n        sb.append(\"Uri: \").append(getUri()).append(\",\");\r\n    if (getConnectionType() != null)\r\n        sb.append(\"ConnectionType: \").append(getConnectionType()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getCredentials() != null)\r\n        sb.append(\"Credentials: \").append(getCredentials()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestTemplates() != null)\r\n        sb.append(\"RequestTemplates: \").append(getRequestTemplates()).append(\",\");\r\n    if (getPassthroughBehavior() != null)\r\n        sb.append(\"PassthroughBehavior: \").append(getPassthroughBehavior()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling()).append(\",\");\r\n    if (getTimeoutInMillis() != null)\r\n        sb.append(\"TimeoutInMillis: \").append(getTimeoutInMillis()).append(\",\");\r\n    if (getCacheNamespace() != null)\r\n        sb.append(\"CacheNamespace: \").append(getCacheNamespace()).append(\",\");\r\n    if (getCacheKeyParameters() != null)\r\n        sb.append(\"CacheKeyParameters: \").append(getCacheKeyParameters()).append(\",\");\r\n    if (getIntegrationResponses() != null)\r\n        sb.append(\"IntegrationResponses: \").append(getIntegrationResponses());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.Interval.isInInterval",
	"Comment": "returns true if the specified object is between the end\tpoints of this interval.",
	"Method": "boolean isInInterval(C o){\r\n    if (null == lower || null == upper) {\r\n        return false;\r\n    }\r\n    boolean in = true;\r\n    if (isLowerInclusive()) {\r\n        in = lower.compareTo(o) <= 0;\r\n    } else {\r\n        in = lower.compareTo(o) < 0;\r\n    }\r\n    if (in) {\r\n        if (isUpperInclusive()) {\r\n            in = upper.compareTo(o) >= 0;\r\n        } else {\r\n            in = upper.compareTo(o) > 0;\r\n        }\r\n    }\r\n    return in;\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftUtils.setPropertiesFromThrift",
	"Comment": "quick and dirty implementation that converts thrift ddl to a properties object by flatteningthe parameters",
	"Method": "void setPropertiesFromThrift(String prefix,Properties properties,org.apache.thrift.TBase entity){\r\n    Field field = entity.getClass().getDeclaredField(\"metaDataMap\");\r\n    Map<org.apache.thrift.TFieldIdEnum, org.apache.thrift.meta_data.FieldMetaData> fields = (Map<org.apache.thrift.TFieldIdEnum, FieldMetaData>) field.get(entity);\r\n    for (Entry<org.apache.thrift.TFieldIdEnum, FieldMetaData> f : fields.entrySet()) {\r\n        ThriftTypes type = ThriftTypes.values()[f.getValue().valueMetaData.type];\r\n        Object value = entity.getFieldValue(f.getKey());\r\n        if (value == null)\r\n            continue;\r\n        switch(type) {\r\n            case VOID:\r\n                break;\r\n            case BOOL:\r\n            case BYTE:\r\n            case DOUBLE:\r\n            case I16:\r\n            case I32:\r\n            case I64:\r\n            case STRING:\r\n            case ENUM:\r\n                if (value instanceof byte[]) {\r\n                    properties.put(prefix + f.getKey().getFieldName(), Base64.encodeBase64String((byte[]) value));\r\n                } else if (value instanceof ByteBuffer) {\r\n                    properties.put(prefix + f.getKey().getFieldName(), base64Encode((ByteBuffer) value));\r\n                } else {\r\n                    properties.put(prefix + f.getKey().getFieldName(), value.toString());\r\n                }\r\n                break;\r\n            case MAP:\r\n                {\r\n                    String newPrefix = prefix + f.getKey().getFieldName() + \".\";\r\n                    org.apache.thrift.meta_data.MapMetaData meta = (org.apache.thrift.meta_data.MapMetaData) f.getValue().valueMetaData;\r\n                    if (!meta.keyMetaData.isStruct() && !meta.keyMetaData.isContainer()) {\r\n                        Map<Object, Object> map = (Map<Object, Object>) value;\r\n                        for (Entry<Object, Object> entry : map.entrySet()) {\r\n                            properties.put(newPrefix + entry.getKey(), entry.getValue().toString());\r\n                        }\r\n                    } else {\r\n                        LOG.error(String.format(\"Unable to serializer field '%s' key type '%s' not supported\", f.getKey().getFieldName(), meta.keyMetaData.getTypedefName()));\r\n                    }\r\n                    break;\r\n                }\r\n            case LIST:\r\n                {\r\n                    String newPrefix = prefix + f.getKey().getFieldName() + \".\";\r\n                    List<Object> list = (List<Object>) value;\r\n                    org.apache.thrift.meta_data.ListMetaData listMeta = (org.apache.thrift.meta_data.ListMetaData) f.getValue().valueMetaData;\r\n                    for (Object entry : list) {\r\n                        String id;\r\n                        if (entry instanceof CfDef) {\r\n                            id = ((CfDef) entry).name;\r\n                        } else if (entry instanceof ColumnDef) {\r\n                            ByteBuffer name = ((ColumnDef) entry).name;\r\n                            id = base64Encode(name);\r\n                        } else {\r\n                            LOG.error(\"Don't know how to convert to properties \" + listMeta.elemMetaData.getTypedefName());\r\n                            continue;\r\n                        }\r\n                        if (listMeta.elemMetaData.isStruct()) {\r\n                            setPropertiesFromThrift(newPrefix + id + \".\", properties, (org.apache.thrift.TBase) entry);\r\n                        } else {\r\n                            properties.put(newPrefix + id, entry);\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            case STRUCT:\r\n                {\r\n                    setPropertiesFromThrift(prefix + f.getKey().getFieldName() + \".\", properties, (org.apache.thrift.TBase) value);\r\n                    break;\r\n                }\r\n            case SET:\r\n            default:\r\n                LOG.error(\"Unhandled value : \" + f.getKey().getFieldName() + \" \" + type);\r\n                break;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultTrack.compareLongitude",
	"Comment": "compares position relative to a given longitude value if\tthe nodes of this track are of type defaultmapentity,\totherwise returns zero.",
	"Method": "int compareLongitude(float lon){\r\n    DefaultMapEntity node = getTrkPt(0);\r\n    if (node != null) {\r\n        int result = node.compareLongitude(lon);\r\n        for (int i = 1; i < trkpts.size(); i++) if (result != getTrkPt(i).compareLongitude(lon))\r\n            return 0;\r\n        return result;\r\n    } else {\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDeploymentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.SdkConfigurationProperty.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getFriendlyName() != null)\r\n        sb.append(\"FriendlyName: \").append(getFriendlyName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRequired() != null)\r\n        sb.append(\"Required: \").append(getRequired()).append(\",\");\r\n    if (getDefaultValue() != null)\r\n        sb.append(\"DefaultValue: \").append(getDefaultValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualRouterSpec.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNames() != null)\r\n        sb.append(\"ServiceNames: \").append(getServiceNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.AgentAppFrame.getMessageLogger",
	"Comment": "returns a logger which displays messages in a message log pane.",
	"Method": "MessageLoggerPanel getMessageLogger(){\r\n    return messageLogger;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateUsageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getStartDate() != null)\r\n        sb.append(\"StartDate: \").append(getStartDate()).append(\",\");\r\n    if (getEndDate() != null)\r\n        sb.append(\"EndDate: \").append(getEndDate()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteImageBuilderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.ColumnInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCatalogName() != null)\r\n        sb.append(\"CatalogName: \").append(getCatalogName()).append(\",\");\r\n    if (getSchemaName() != null)\r\n        sb.append(\"SchemaName: \").append(getSchemaName()).append(\",\");\r\n    if (getTableName() != null)\r\n        sb.append(\"TableName: \").append(getTableName()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getLabel() != null)\r\n        sb.append(\"Label: \").append(getLabel()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getPrecision() != null)\r\n        sb.append(\"Precision: \").append(getPrecision()).append(\",\");\r\n    if (getScale() != null)\r\n        sb.append(\"Scale: \").append(getScale()).append(\",\");\r\n    if (getNullable() != null)\r\n        sb.append(\"Nullable: \").append(getNullable()).append(\",\");\r\n    if (getCaseSensitive() != null)\r\n        sb.append(\"CaseSensitive: \").append(getCaseSensitive());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteVpcLinkResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutMethodResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseModels() != null)\r\n        sb.append(\"ResponseModels: \").append(getResponseModels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearch.removeFromFrontier",
	"Comment": "removes the node at the head of the frontier, adds the corresponding\tstate to the explored set, and returns the node. leading nodes of already\texplored states are dropped. so the resulting node state will always be\tunexplored yet.",
	"Method": "Node<S, A> removeFromFrontier(){\r\n    cleanUpFrontier();\r\n    Node<S, A> result = frontier.remove();\r\n    explored.add(result.getState());\r\n    updateMetrics(frontier.size());\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ApplicationSettingsResponse.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getSettingsGroup() != null)\r\n        sb.append(\"SettingsGroup: \").append(getSettingsGroup()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DetachLoadBalancerTargetGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.model.ColumnPath.getLast",
	"Comment": "returns the last element in the path. this is usually the column namebeing queried or modified.",
	"Method": "ByteBuffer getLast(){\r\n    return path.get(path.size() - 1);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeMetricCollectionTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeLaunchConfigurationsAsync",
	"Comment": "simplified method form for invoking the describelaunchconfigurations operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync(DescribeLaunchConfigurationsRequest request,java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync,DescribeLaunchConfigurationsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeLaunchConfigurationsRequest, DescribeLaunchConfigurationsResult> asyncHandler,java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync,java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync,com.amazonaws.handlers.AsyncHandler<DescribeLaunchConfigurationsRequest, DescribeLaunchConfigurationsResult> asyncHandler){\r\n    return describeLaunchConfigurationsAsync(new DescribeLaunchConfigurationsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetResourcesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getEmbed() != null)\r\n        sb.append(\"Embed: \").append(getEmbed());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAdjustmentTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.attachInstances",
	"Comment": "attaches one or more ec2 instances to the specified auto scaling group.when you attach instances, amazon ec2 auto scaling increases the desired capacity of the group by the number ofinstances being attached. if the number of instances being attached plus the desired capacity of the groupexceeds the maximum size of the group, the operation fails.if there is a classic load balancer attached to your auto scaling group, the instances are also registered withthe load balancer. if there are target groups attached to your auto scaling group, the instances are alsoregistered with the target groups.for more information, see attach ec2 instances to yourauto scaling group in the amazon ec2 auto scaling user guide.",
	"Method": "AttachInstancesResult attachInstances(AttachInstancesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAttachInstances(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.attachLoadBalancerTargetGroups",
	"Comment": "attaches one or more target groups to the specified auto scaling group.to describe the target groups for an auto scaling group, use describeloadbalancertargetgroups. to detachthe target group from the auto scaling group, use detachloadbalancertargetgroups.for more information, see attach a load balancerto your auto scaling group in the amazon ec2 auto scaling user guide.",
	"Method": "AttachLoadBalancerTargetGroupsResult attachLoadBalancerTargetGroups(AttachLoadBalancerTargetGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAttachLoadBalancerTargetGroups(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteMethodResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.MetricCollectionType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetric() != null)\r\n        sb.append(\"Metric: \").append(getMetric());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.BatchDisassociateUserStackRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserStackAssociations() != null)\r\n        sb.append(\"UserStackAssociations: \").append(getUserStackAssociations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchUsersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getSortCriteria() != null)\r\n        sb.append(\"SortCriteria: \").append(getSortCriteria());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.MixedRadixNumber.setCurrentValueFor",
	"Comment": "sets the value of the mixed radix number with the specified array of\tnumerals and the current array of radices.",
	"Method": "void setCurrentValueFor(int[] radixValues){\r\n    this.value = getCurrentValueFor(radixValues);\r\n    System.arraycopy(radixValues, 0, this.currentNumeralValue, 0, radixValues.length);\r\n    recalculate = false;\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.UpdateVirtualRouterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.AbstractThriftMutationBatchImpl.isEmpty",
	"Comment": "checks whether the mutation object contains rows. while the map maycontain row keys the row keys may not contain any mutations.",
	"Method": "boolean isEmpty(){\r\n    return mutationMap.isEmpty();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Contact.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(getFirstName()).append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(getLastName()).append(\",\");\r\n    if (getPhoneNumber() != null)\r\n        sb.append(\"PhoneNumber: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.environment.map.ExtendableMap.getPosition",
	"Comment": "returns the position of the specified location as with respect to an\torthogonal coordinate system.",
	"Method": "Point2D getPosition(String loc){\r\n    return locationPositions.get(loc);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListVirtualRoutersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getVirtualRouters() != null)\r\n        sb.append(\"VirtualRouters: \").append(getVirtualRouters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationPartsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.viewer.MapPaneCtrl.zoom",
	"Comment": "multiples the current scale with the specified factor and adjusts theview so that the objects shown at the specified view focus keep at theirposition.",
	"Method": "void zoom(float factor,int focusX,int focusY){\r\n    getTransformer().zoom(factor, focusX, focusY);\r\n    update();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.putScalingPolicy",
	"Comment": "creates or updates a policy for an auto scaling group. to update an existing policy, use the existing policy nameand set the parameters to change. any existing parameter not changed in an update to an existing policy is notchanged in this update request.if you exceed your maximum limit of step adjustments, which by default is 20 per region, the call fails. forinformation about updating this limit, see aws service limits in theamazon web services general reference.",
	"Method": "PutScalingPolicyResult putScalingPolicy(PutScalingPolicyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutScalingPolicy(request);\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.setScreenWidthInCentimeter",
	"Comment": "provides the true width of the screen to the transformer. this is\tnecessary to get correct scale values.",
	"Method": "void setScreenWidthInCentimeter(double cm){\r\n    double dotsPerCm = Toolkit.getDefaultToolkit().getScreenSize().getWidth() / cm;\r\n    getTransformer().setScreenResolution((int) (dotsPerCm * 2.54));\r\n    viewChanged(MapViewEvent.Type.ZOOM);\r\n}"
}, {
	"Path": "com.netflix.astyanax.cql.reads.CFRowRangeQueryGen.addWhereClauseForRowRange",
	"Comment": "private helper for constructing the where clause for row ranges",
	"Method": "Where addWhereClauseForRowRange(String keyAlias,Select select,RowRange<?> rowRange){\r\n    Where where = null;\r\n    boolean keyIsPresent = false;\r\n    boolean tokenIsPresent = false;\r\n    if (rowRange.getStartKey() != null || rowRange.getEndKey() != null) {\r\n        keyIsPresent = true;\r\n    }\r\n    if (rowRange.getStartToken() != null || rowRange.getEndToken() != null) {\r\n        tokenIsPresent = true;\r\n    }\r\n    if (keyIsPresent && tokenIsPresent) {\r\n        throw new RuntimeException(\"Cannot provide both token and keys for range query\");\r\n    }\r\n    if (keyIsPresent) {\r\n        if (rowRange.getStartKey() != null && rowRange.getEndKey() != null) {\r\n            where = select.where(gte(keyAlias, BIND_MARKER)).and(lte(keyAlias, BIND_MARKER));\r\n        } else if (rowRange.getStartKey() != null) {\r\n            where = select.where(gte(keyAlias, BIND_MARKER));\r\n        } else if (rowRange.getEndKey() != null) {\r\n            where = select.where(lte(keyAlias, BIND_MARKER));\r\n        }\r\n    } else if (tokenIsPresent) {\r\n        String tokenOfKey = \"token(\" + keyAlias + \")\";\r\n        if (rowRange.getStartToken() != null && rowRange.getEndToken() != null) {\r\n            where = select.where(gte(tokenOfKey, BIND_MARKER)).and(lte(tokenOfKey, BIND_MARKER));\r\n        } else if (rowRange.getStartToken() != null) {\r\n            where = select.where(gte(tokenOfKey, BIND_MARKER));\r\n        } else if (rowRange.getEndToken() != null) {\r\n            where = select.where(lte(tokenOfKey, BIND_MARKER));\r\n        }\r\n    } else {\r\n        where = select.where();\r\n    }\r\n    if (rowRange.getCount() > 0) {\r\n    }\r\n    return where;\r\n}"
}, {
	"Path": "aimax.osm.data.Position.selectNearest",
	"Comment": "returns the node from nodes which is nearest to this\tposition. if a filter is given, only those nodes are inspected, which are\tpart of a way accepted by the filter.",
	"Method": "MapNode selectNearest(Collection<MapNode> nodes,MapWayFilter filter){\r\n    MapNode result = null;\r\n    double dist = Double.MAX_VALUE;\r\n    double newDist;\r\n    for (MapNode node : nodes) {\r\n        newDist = getDistKM(node);\r\n        boolean found = (newDist < dist);\r\n        if (found && filter != null) {\r\n            found = false;\r\n            for (WayRef ref : node.getWayRefs()) {\r\n                if (filter.isAccepted(ref.getWay()))\r\n                    found = true;\r\n            }\r\n        }\r\n        if (found) {\r\n            result = node;\r\n            dist = newDist;\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteAppResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApp() != null)\r\n        sb.append(\"App: \").append(getApp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DisassociateFleetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.SetInstanceHealthRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getHealthStatus() != null)\r\n        sb.append(\"HealthStatus: \").append(getHealthStatus()).append(\",\");\r\n    if (getShouldRespectGracePeriod() != null)\r\n        sb.append(\"ShouldRespectGracePeriod: \").append(getShouldRespectGracePeriod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListMeshesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateApiKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getGenerateDistinctId() != null)\r\n        sb.append(\"GenerateDistinctId: \").append(getGenerateDistinctId()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getStageKeys() != null)\r\n        sb.append(\"StageKeys: \").append(getStageKeys()).append(\",\");\r\n    if (getCustomerId() != null)\r\n        sb.append(\"CustomerId: \").append(getCustomerId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.mdp.search.ValueIteration.valueIteration",
	"Comment": "the value iteration algorithm for calculating the utility of states.",
	"Method": "Map<S, Double> valueIteration(MarkovDecisionProcess<S, A> mdp,double epsilon){\r\n    Map<S, Double> U = Util.create(mdp.states(), new Double(0));\r\n    Map<S, Double> Udelta = Util.create(mdp.states(), new Double(0));\r\n    double delta = 0;\r\n    double minDelta = epsilon * (1 - gamma) / gamma;\r\n    do {\r\n        U.putAll(Udelta);\r\n        delta = 0;\r\n        for (S s : mdp.states()) {\r\n            Set<A> actions = mdp.actions(s);\r\n            double aMax = 0;\r\n            if (actions.size() > 0) {\r\n                aMax = Double.NEGATIVE_INFINITY;\r\n            }\r\n            for (A a : actions) {\r\n                double aSum = 0;\r\n                for (S sDelta : mdp.states()) {\r\n                    aSum += mdp.transitionProbability(sDelta, s, a) * U.get(sDelta);\r\n                }\r\n                if (aSum > aMax) {\r\n                    aMax = aSum;\r\n                }\r\n            }\r\n            Udelta.put(s, mdp.reward(s) + gamma * aMax);\r\n            double aDiff = Math.abs(Udelta.get(s) - U.get(s));\r\n            if (aDiff > delta) {\r\n                delta = aDiff;\r\n            }\r\n        }\r\n    } while (delta > minDelta);\r\n    return U;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDomainNameResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchDevicesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevices() != null)\r\n        sb.append(\"Devices: \").append(getDevices()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getTotalCount() != null)\r\n        sb.append(\"TotalCount: \").append(getTotalCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.RelationalDatabaseDataSourceConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRelationalDatabaseSourceType() != null)\r\n        sb.append(\"RelationalDatabaseSourceType: \").append(getRelationalDatabaseSourceType()).append(\",\");\r\n    if (getRdsHttpEndpointConfig() != null)\r\n        sb.append(\"RdsHttpEndpointConfig: \").append(getRdsHttpEndpointConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetStagesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.getQueryResults",
	"Comment": "returns the results of a single query execution specified by queryexecutionid. this request does notexecute the query but returns results. use startqueryexecution to run a query.",
	"Method": "GetQueryResultsResult getQueryResults(GetQueryResultsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetQueryResults(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListResolversResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResolvers() != null)\r\n        sb.append(\"Resolvers: \").append(getResolvers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.fol.kb.data.Chain.getContrapositives",
	"Comment": "a contrapositive of a chain is a permutation in which a different literal\tis placed at the front. the contrapositives of a chain are logically\tequivalent to the original chain.",
	"Method": "List<Chain> getContrapositives(){\r\n    List<Chain> contrapositives = new ArrayList<Chain>();\r\n    List<Literal> lits = new ArrayList<Literal>();\r\n    for (int i = 1; i < literals.size(); i++) {\r\n        lits.clear();\r\n        lits.add(literals.get(i));\r\n        lits.addAll(literals.subList(0, i));\r\n        lits.addAll(literals.subList(i + 1, literals.size()));\r\n        Chain cont = new Chain(lits);\r\n        cont.setProofStep(new ProofStepChainContrapositive(cont, this));\r\n        contrapositives.add(cont);\r\n    }\r\n    return contrapositives;\r\n}"
}, {
	"Path": "aima.core.search.agent.ProblemSolvingAgent.tryWithAnotherGoal",
	"Comment": "primitive operation, which decides after a search for a plan failed,\twhether to stop the whole task with a failure, or to go on with\tformulating another goal. this implementation always returns false. if\tthe agent defines local goals to reach an externally specified global\tgoal, it might be interesting, not to stop when the first local goal\tturns out to be unreachable.",
	"Method": "boolean tryWithAnotherGoal(){\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetIntegrationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ConferencePreference.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDefaultConferenceProviderArn() != null)\r\n        sb.append(\"DefaultConferenceProviderArn: \").append(getDefaultConferenceProviderArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.csp.CSP.getNeighbor",
	"Comment": "returns for binary constraints the other variable from the scope.",
	"Method": "VAR getNeighbor(VAR var,Constraint<VAR, VAL> constraint){\r\n    List<VAR> scope = constraint.getScope();\r\n    if (scope.size() == 2) {\r\n        if (var.equals(scope.get(0)))\r\n            return scope.get(1);\r\n        else if (var.equals(scope.get(1)))\r\n            return scope.get(0);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.describeDirectoryConfigs",
	"Comment": "retrieves a list that describes one or more specified directory config objects for appstream 2.0, if the namesfor these objects are provided. otherwise, all directory config objects in the account are described. theseobjects include the information required to join streaming instances to an active directory domain.although the response syntax in this topic includes the account password, this password is not returned in theactual response.",
	"Method": "DescribeDirectoryConfigsResult describeDirectoryConfigs(DescribeDirectoryConfigsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDirectoryConfigs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.PutScheduledActionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.CreateDomainAssociationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getEnableAutoSubDomain() != null)\r\n        sb.append(\"EnableAutoSubDomain: \").append(getEnableAutoSubDomain()).append(\",\");\r\n    if (getSubDomainSettings() != null)\r\n        sb.append(\"SubDomainSettings: \").append(getSubDomainSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.inductive.CrossValidation.hasConverged",
	"Comment": "this method checks if the training has converged.training is assumed to converge if the error comes below a certain minimum error.",
	"Method": "boolean hasConverged(double errT){\r\n    return errT < minErrT;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AssociateSkillGroupWithRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateDocumentationPartRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getProperties() != null)\r\n        sb.append(\"Properties: \").append(getProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.FlushStageAuthorizersCacheRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gps.NmeaReader.readFromStream",
	"Comment": "reads characters from the stream and informs all interested\tlisteners about received nmea messages. should be called\twhen new data is available on the input stream.",
	"Method": "void readFromStream(boolean onlyNextMessage){\r\n    try {\r\n        int newData;\r\n        char mybyte;\r\n        while ((newData = inputStream.read()) != -1) {\r\n            mybyte = (char) newData;\r\n            if (mybyte == '$' && buffer.length() > 5) {\r\n                if (buffer.charAt(0) == '$') {\r\n                    String message = buffer.toString();\r\n                    for (NmeaMessageListener listener : listeners) listener.messageReceived(message);\r\n                }\r\n                messageReceived = true;\r\n                buffer.delete(0, buffer.length());\r\n                buffer.append(mybyte);\r\n                if (onlyNextMessage)\r\n                    break;\r\n            } else {\r\n                buffer.append(mybyte);\r\n            }\r\n        }\r\n    } catch (IOException ex) {\r\n        System.err.println(ex);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.AWSAmplifyClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewFrame.initSidebar",
	"Comment": "defines the functionality of the sidebar by adding components to it.\toverride to customize!",
	"Method": "void initSidebar(){\r\n    FindPanel findPane = new FindPanel(view);\r\n    getMap().addMapDataEventListener(findPane);\r\n    sidebar.addTab(\"Find\", findPane);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ImageStateChangeReason.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCode() != null)\r\n        sb.append(\"Code: \").append(getCode()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.KnowledgeBase.tellAll",
	"Comment": "each time the agent program is called, it tells the knowledge base what\tit perceives.",
	"Method": "void tellAll(String[] percepts){\r\n    for (String percept : percepts) {\r\n        tell(percept);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateDeploymentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getStageDescription() != null)\r\n        sb.append(\"StageDescription: \").append(getStageDescription()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCacheClusterEnabled() != null)\r\n        sb.append(\"CacheClusterEnabled: \").append(getCacheClusterEnabled()).append(\",\");\r\n    if (getCacheClusterSize() != null)\r\n        sb.append(\"CacheClusterSize: \").append(getCacheClusterSize()).append(\",\");\r\n    if (getVariables() != null)\r\n        sb.append(\"Variables: \").append(getVariables()).append(\",\");\r\n    if (getCanarySettings() != null)\r\n        sb.append(\"CanarySettings: \").append(getCanarySettings()).append(\",\");\r\n    if (getTracingEnabled() != null)\r\n        sb.append(\"TracingEnabled: \").append(getTracingEnabled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLoadBalancersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoadBalancers() != null)\r\n        sb.append(\"LoadBalancers: \").append(getLoadBalancers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateGraphqlApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGraphqlApi() != null)\r\n        sb.append(\"GraphqlApi: \").append(getGraphqlApi());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.mdp.search.PolicyIteration.initialPolicyVector",
	"Comment": "create a policy vector indexed by state, initially random.",
	"Method": "Map<S, A> initialPolicyVector(MarkovDecisionProcess<S, A> mdp){\r\n    Map<S, A> pi = new LinkedHashMap<S, A>();\r\n    List<A> actions = new ArrayList<A>();\r\n    for (S s : mdp.states()) {\r\n        actions.clear();\r\n        actions.addAll(mdp.actions(s));\r\n        if (actions.size() > 0) {\r\n            pi.put(s, Util.selectRandomlyFromList(actions));\r\n        }\r\n    }\r\n    return pi;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeNotificationConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNotificationConfigurations() != null)\r\n        sb.append(\"NotificationConfigurations: \").append(getNotificationConfigurations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.Datum.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVarCharValue() != null)\r\n        sb.append(\"VarCharValue: \").append(getVarCharValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListDeviceEventsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceEvents() != null)\r\n        sb.append(\"DeviceEvents: \").append(getDeviceEvents()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewFrame.initToolbar",
	"Comment": "defines the functionality of the toolbar by adding components to it.\toverride to customize!",
	"Method": "void initToolbar(){\r\n    toolbar.setFloatable(false);\r\n    loadButton = new JButton(\"Load\");\r\n    loadButton.setToolTipText(\"Load Map (<ctrl> bounding box mode, <shift> overview mode)\");\r\n    loadButton.addActionListener(this);\r\n    toolbar.add(loadButton);\r\n    saveButton = new JButton(\"Save\");\r\n    saveButton.setToolTipText(\"Save Visible Map\");\r\n    saveButton.addActionListener(this);\r\n    toolbar.add(saveButton);\r\n    statisticsButton = new JButton(\"Statistics\");\r\n    statisticsButton.setToolTipText(\"Show Map Statistics\");\r\n    statisticsButton.addActionListener(this);\r\n    toolbar.add(statisticsButton);\r\n    sidebarCheckBox = new JCheckBox(\"Sidebar\");\r\n    sidebarCheckBox.addActionListener(this);\r\n    sidebarCheckBox.setSelected(false);\r\n    showSidebar(false);\r\n    toolbar.add(sidebarCheckBox);\r\n    InfoField infoField = new InfoField(view, getMap());\r\n    view.addMapViewEventListener(infoField.getMapViewEventListener());\r\n    getMap().addMapDataEventListener(infoField.getMapDataEventListener());\r\n    toolbar.add(infoField);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.agent.impl.ObjectWithDynamicAttributes.copy",
	"Comment": "creates and returns a copy of this objectwithdynamicattributes",
	"Method": "ObjectWithDynamicAttributes copy(){\r\n    ObjectWithDynamicAttributes copy = null;\r\n    try {\r\n        copy = getClass().newInstance();\r\n        copy.attributes.putAll(attributes);\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n    }\r\n    return copy;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListSkillsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillSummaries() != null)\r\n        sb.append(\"SkillSummaries: \").append(getSkillSummaries()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.ScheduledAction.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduledActionName() != null)\r\n        sb.append(\"ScheduledActionName: \").append(getScheduledActionName()).append(\",\");\r\n    if (getScheduledActionARN() != null)\r\n        sb.append(\"ScheduledActionARN: \").append(getScheduledActionARN()).append(\",\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getSchedule() != null)\r\n        sb.append(\"Schedule: \").append(getSchedule()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getScalableTargetAction() != null)\r\n        sb.append(\"ScalableTargetAction: \").append(getScalableTargetAction()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.UpdateDomainAssociationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainAssociation() != null)\r\n        sb.append(\"DomainAssociation: \").append(getDomainAssociation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateMethodResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseModels() != null)\r\n        sb.append(\"ResponseModels: \").append(getResponseModels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.deleteLaunchConfiguration",
	"Comment": "deletes the specified launch configuration.the launch configuration must not be attached to an auto scaling group. when this call completes, the launchconfiguration is no longer available for use.",
	"Method": "DeleteLaunchConfigurationResult deleteLaunchConfiguration(DeleteLaunchConfigurationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteLaunchConfiguration(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutScheduledUpdateGroupActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getScheduledActionName() != null)\r\n        sb.append(\"ScheduledActionName: \").append(getScheduledActionName()).append(\",\");\r\n    if (getTime() != null)\r\n        sb.append(\"Time: \").append(getTime()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getRecurrence() != null)\r\n        sb.append(\"Recurrence: \").append(getRecurrence()).append(\",\");\r\n    if (getMinSize() != null)\r\n        sb.append(\"MinSize: \").append(getMinSize()).append(\",\");\r\n    if (getMaxSize() != null)\r\n        sb.append(\"MaxSize: \").append(getMaxSize()).append(\",\");\r\n    if (getDesiredCapacity() != null)\r\n        sb.append(\"DesiredCapacity: \").append(getDesiredCapacity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.map.MapAgentView.adjustTransformation",
	"Comment": "adjusts offsets and scale so that the whole map fits on the view without\tscrolling.",
	"Method": "void adjustTransformation(){\r\n    Map map = getMapEnv().getMap();\r\n    List<String> locs = map.getLocations();\r\n    double minX = Double.POSITIVE_INFINITY;\r\n    double minY = Double.POSITIVE_INFINITY;\r\n    double maxX = Double.NEGATIVE_INFINITY;\r\n    double maxY = Double.NEGATIVE_INFINITY;\r\n    for (String loc : locs) {\r\n        Point2D xy = map.getPosition(loc);\r\n        if (xy.getX() < minX)\r\n            minX = xy.getX();\r\n        if (xy.getY() < minY)\r\n            minY = xy.getY();\r\n        if (xy.getX() > maxX)\r\n            maxX = xy.getX();\r\n        if (xy.getY() > maxY)\r\n            maxY = xy.getY();\r\n    }\r\n    this.setBorder(20, 20, 20, 100);\r\n    adjustTransformation(minX, minY, maxX, maxY);\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.TransformMatrix2D.rotate",
	"Comment": "produces a transformation matrix representing a rotation operation around the origin of the coordinate system.",
	"Method": "TransformMatrix2D rotate(double alpha){\r\n    final double sin = Math.sin(alpha);\r\n    final double cos = Math.cos(alpha);\r\n    return new TransformMatrix2D(cos, sin, -sin, cos, 0.0d, 0.0d);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.putConferencePreference",
	"Comment": "sets the conference preferences on a specific conference provider at the account level.",
	"Method": "PutConferencePreferenceResult putConferencePreference(PutConferencePreferenceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutConferencePreference(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getKeyId() != null)\r\n        sb.append(\"KeyId: \").append(getKeyId()).append(\",\");\r\n    if (getStartDate() != null)\r\n        sb.append(\"StartDate: \").append(getStartDate()).append(\",\");\r\n    if (getEndDate() != null)\r\n        sb.append(\"EndDate: \").append(getEndDate()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeLifecycleHookTypesAsync",
	"Comment": "simplified method form for invoking the describelifecyclehooktypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync(DescribeLifecycleHookTypesRequest request,java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync,DescribeLifecycleHookTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeLifecycleHookTypesRequest, DescribeLifecycleHookTypesResult> asyncHandler,java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync,java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeLifecycleHookTypesRequest, DescribeLifecycleHookTypesResult> asyncHandler){\r\n    return describeLifecycleHookTypesAsync(new DescribeLifecycleHookTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.queue.Message.setPriority",
	"Comment": "setting priority will not work correctly with a future trigger time due to internal data model implementations.",
	"Method": "Message setPriority(byte priority){\r\n    this.priority = priority;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ResumeProcessesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.putRoomSkillParameter",
	"Comment": "updates room skill parameter details by room, skill, and parameter key id. not all skills have a room skillparameter.",
	"Method": "PutRoomSkillParameterResult putRoomSkillParameter(PutRoomSkillParameterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutRoomSkillParameter(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetDataSourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListBranchesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetConferenceProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferenceProvider() != null)\r\n        sb.append(\"ConferenceProvider: \").append(getConferenceProvider());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftKeyspaceImpl.precheckSchemaAgreement",
	"Comment": "do a quick check to see if there is a schema disagreement.this is done as an extra precautionto reduce the chances of putting the cluster into a bad state.this will not gurantee however, that by the time a schema change is made the cluster will be in the same state.",
	"Method": "void precheckSchemaAgreement(Client client){\r\n    Map<String, List<String>> schemas = client.describe_schema_versions();\r\n    if (schemas.size() > 1) {\r\n        throw new SchemaDisagreementException(\"Can't change schema due to pending schema agreement\");\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeMetricCollectionTypesAsync",
	"Comment": "simplified method form for invoking the describemetriccollectiontypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync(DescribeMetricCollectionTypesRequest request,java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync,DescribeMetricCollectionTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeMetricCollectionTypesRequest, DescribeMetricCollectionTypesResult> asyncHandler,java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync,java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeMetricCollectionTypesRequest, DescribeMetricCollectionTypesResult> asyncHandler){\r\n    return describeMetricCollectionTypesAsync(new DescribeMetricCollectionTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.describeStacks",
	"Comment": "retrieves a list that describes one or more specified stacks, if the stack names are provided. otherwise, allstacks in the account are described.",
	"Method": "DescribeStacksResult describeStacks(DescribeStacksRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeStacks(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.BasePathMapping.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath()).append(\",\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchContactsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getSortCriteria() != null)\r\n        sb.append(\"SortCriteria: \").append(getSortCriteria()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.DomainValidation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getValidationEmails() != null)\r\n        sb.append(\"ValidationEmails: \").append(getValidationEmails()).append(\",\");\r\n    if (getValidationDomain() != null)\r\n        sb.append(\"ValidationDomain: \").append(getValidationDomain()).append(\",\");\r\n    if (getValidationStatus() != null)\r\n        sb.append(\"ValidationStatus: \").append(getValidationStatus()).append(\",\");\r\n    if (getResourceRecord() != null)\r\n        sb.append(\"ResourceRecord: \").append(getResourceRecord()).append(\",\");\r\n    if (getValidationMethod() != null)\r\n        sb.append(\"ValidationMethod: \").append(getValidationMethod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetIntegrationResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getSelectionPattern() != null)\r\n        sb.append(\"SelectionPattern: \").append(getSelectionPattern()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.RestoreCertificateAuthorityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.ImportCertificateAuthorityCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate()).append(\",\");\r\n    if (getCertificateChain() != null)\r\n        sb.append(\"CertificateChain: \").append(getCertificateChain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.BatchDeleteScheduledActionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFailedScheduledActions() != null)\r\n        sb.append(\"FailedScheduledActions: \").append(getFailedScheduledActions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.NodeElementProcessor.processTag",
	"Comment": "this is called by child element processors when a tag object is\tencountered.",
	"Method": "void processTag(Tag tag){\r\n    String key = tag.getKey();\r\n    String value = tag.getValue();\r\n    if (key.equals(\"name\")) {\r\n        nodeName = value;\r\n    } else {\r\n        EntityAttribute att = EntityAttributeManager.instance().intern(new EntityAttribute(key, value));\r\n        if (att != null)\r\n            nodeAttributes.add(att);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.UpdateAppRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getIamServiceRoleArn() != null)\r\n        sb.append(\"IamServiceRoleArn: \").append(getIamServiceRoleArn()).append(\",\");\r\n    if (getEnvironmentVariables() != null)\r\n        sb.append(\"EnvironmentVariables: \").append(getEnvironmentVariables()).append(\",\");\r\n    if (getEnableBranchAutoBuild() != null)\r\n        sb.append(\"EnableBranchAutoBuild: \").append(getEnableBranchAutoBuild()).append(\",\");\r\n    if (getEnableBasicAuth() != null)\r\n        sb.append(\"EnableBasicAuth: \").append(getEnableBasicAuth()).append(\",\");\r\n    if (getBasicAuthCredentials() != null)\r\n        sb.append(\"BasicAuthCredentials: \").append(getBasicAuthCredentials()).append(\",\");\r\n    if (getCustomRules() != null)\r\n        sb.append(\"CustomRules: \").append(getCustomRules()).append(\",\");\r\n    if (getBuildSpec() != null)\r\n        sb.append(\"BuildSpec: \").append(getBuildSpec());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.PutScheduledActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getSchedule() != null)\r\n        sb.append(\"Schedule: \").append(getSchedule()).append(\",\");\r\n    if (getScheduledActionName() != null)\r\n        sb.append(\"ScheduledActionName: \").append(getScheduledActionName()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getScalableTargetAction() != null)\r\n        sb.append(\"ScalableTargetAction: \").append(getScalableTargetAction());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateBasePathMappingRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath()).append(\",\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.QueryExecutionStatistics.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEngineExecutionTimeInMillis() != null)\r\n        sb.append(\"EngineExecutionTimeInMillis: \").append(getEngineExecutionTimeInMillis()).append(\",\");\r\n    if (getDataScannedInBytes() != null)\r\n        sb.append(\"DataScannedInBytes: \").append(getDataScannedInBytes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getParentId() != null)\r\n        sb.append(\"ParentId: \").append(getParentId()).append(\",\");\r\n    if (getPathPart() != null)\r\n        sb.append(\"PathPart: \").append(getPathPart());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SendInvitationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserArn() != null)\r\n        sb.append(\"UserArn: \").append(getUserArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeveloperInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeveloperName() != null)\r\n        sb.append(\"DeveloperName: \").append(getDeveloperName()).append(\",\");\r\n    if (getPrivacyPolicy() != null)\r\n        sb.append(\"PrivacyPolicy: \").append(getPrivacyPolicy()).append(\",\");\r\n    if (getEmail() != null)\r\n        sb.append(\"Email: \").append(getEmail()).append(\",\");\r\n    if (getUrl() != null)\r\n        sb.append(\"Url: \").append(getUrl());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutNotificationConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getTopicARN() != null)\r\n        sb.append(\"TopicARN: \").append(getTopicARN()).append(\",\");\r\n    if (getNotificationTypes() != null)\r\n        sb.append(\"NotificationTypes: \").append(getNotificationTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.parsing.ast.Sentence.accept",
	"Comment": "allow a plvisitor to walk over the abstract syntax tree represented by this\tsentence.",
	"Method": "R accept(PLVisitor<A, R> plv,A arg){\r\n    R result = null;\r\n    if (isPropositionSymbol()) {\r\n        result = plv.visitPropositionSymbol((PropositionSymbol) this, arg);\r\n    } else if (isUnarySentence()) {\r\n        result = plv.visitUnarySentence((ComplexSentence) this, arg);\r\n    } else if (isBinarySentence()) {\r\n        result = plv.visitBinarySentence((ComplexSentence) this, arg);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ThrottleSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBurstLimit() != null)\r\n        sb.append(\"BurstLimit: \").append(getBurstLimit()).append(\",\");\r\n    if (getRateLimit() != null)\r\n        sb.append(\"RateLimit: \").append(getRateLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StartImageBuilderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImageBuilder() != null)\r\n        sb.append(\"ImageBuilder: \").append(getImageBuilder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListFunctionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DataSource.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDataSourceArn() != null)\r\n        sb.append(\"DataSourceArn: \").append(getDataSourceArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getServiceRoleArn() != null)\r\n        sb.append(\"ServiceRoleArn: \").append(getServiceRoleArn()).append(\",\");\r\n    if (getDynamodbConfig() != null)\r\n        sb.append(\"DynamodbConfig: \").append(getDynamodbConfig()).append(\",\");\r\n    if (getLambdaConfig() != null)\r\n        sb.append(\"LambdaConfig: \").append(getLambdaConfig()).append(\",\");\r\n    if (getElasticsearchConfig() != null)\r\n        sb.append(\"ElasticsearchConfig: \").append(getElasticsearchConfig()).append(\",\");\r\n    if (getHttpConfig() != null)\r\n        sb.append(\"HttpConfig: \").append(getHttpConfig()).append(\",\");\r\n    if (getRelationalDatabaseConfig() != null)\r\n        sb.append(\"RelationalDatabaseConfig: \").append(getRelationalDatabaseConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.common.Parser.match",
	"Comment": "consume the given match symbol if it matches the current input token. if\tit does not match throws a parserexception detailing the match error.",
	"Method": "void match(String toMatchSymbol){\r\n    if (lookAhead(1).getText().equals(toMatchSymbol)) {\r\n        consume();\r\n    } else {\r\n        throw new ParserException(\"Parser: Syntax error detected at match. Expected \" + toMatchSymbol + \" but got \" + lookAhead(1).getText(), lookAhead(1));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.createStack",
	"Comment": "creates a stack to start streaming applications to users. a stack consists of an associated fleet, user accesspolicies, and storage configurations.",
	"Method": "CreateStackResult createStack(CreateStackRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateStack(request);\r\n}"
}, {
	"Path": "aima.core.agent.impl.ObjectWithDynamicAttributes.getAttribute",
	"Comment": "returns the value of the specified attribute key, or null if the\tattribute was not found.",
	"Method": "Object getAttribute(Object key){\r\n    return attributes.get(key);\r\n}"
}, {
	"Path": "aima.core.environment.map.ExtendableMap.clearLinks",
	"Comment": "clears all connections but keeps location position informations.",
	"Method": "void clearLinks(){\r\n    links.clear();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchRoomsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getSortCriteria() != null)\r\n        sb.append(\"SortCriteria: \").append(getSortCriteria());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UserData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserArn() != null)\r\n        sb.append(\"UserArn: \").append(getUserArn()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(getFirstName()).append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(getLastName()).append(\",\");\r\n    if (getEmail() != null)\r\n        sb.append(\"Email: \").append(getEmail()).append(\",\");\r\n    if (getEnrollmentStatus() != null)\r\n        sb.append(\"EnrollmentStatus: \").append(getEnrollmentStatus()).append(\",\");\r\n    if (getEnrollmentId() != null)\r\n        sb.append(\"EnrollmentId: \").append(getEnrollmentId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteImagePermissionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getSharedAccountId() != null)\r\n        sb.append(\"SharedAccountId: \").append(getSharedAccountId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.GetNamedQueryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQuery() != null)\r\n        sb.append(\"NamedQuery: \").append(getNamedQuery());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListConferenceProvidersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferenceProviders() != null)\r\n        sb.append(\"ConferenceProviders: \").append(getConferenceProviders()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateDirectoryConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryConfig() != null)\r\n        sb.append(\"DirectoryConfig: \").append(getDirectoryConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.NodeElementProcessor.getChild",
	"Comment": "retrieves the appropriate child element processor for the newly\tencountered nested element.",
	"Method": "ElementProcessor getChild(String uri,String localName,String qName){\r\n    if (!skipElement)\r\n        if (ELEMENT_NAME_TAG.equals(qName))\r\n            return tagElementProcessor;\r\n    return super.getChild(uri, localName, qName);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.Application.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getIconURL() != null)\r\n        sb.append(\"IconURL: \").append(getIconURL()).append(\",\");\r\n    if (getLaunchPath() != null)\r\n        sb.append(\"LaunchPath: \").append(getLaunchPath()).append(\",\");\r\n    if (getLaunchParameters() != null)\r\n        sb.append(\"LaunchParameters: \").append(getLaunchParameters()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getMetadata() != null)\r\n        sb.append(\"Metadata: \").append(getMetadata());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.EntityAttributeManager.ignoreAttKeys",
	"Comment": "advises the manager to ignore attributes with certain keys.",
	"Method": "void ignoreAttKeys(String[] attKeys,boolean ignorePathKeys){\r\n    ignoredAttKeys.clear();\r\n    for (String key : attKeys) ignoredAttKeys.add(key);\r\n    this.ignorePathKeys = ignorePathKeys;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ImportDocumentationPartsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getMode() != null)\r\n        sb.append(\"Mode: \").append(getMode()).append(\",\");\r\n    if (getFailOnWarnings() != null)\r\n        sb.append(\"FailOnWarnings: \").append(getFailOnWarnings()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ExpireSessionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSessionId() != null)\r\n        sb.append(\"SessionId: \").append(getSessionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDomainNamesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.fillReleaseMutation",
	"Comment": "fill a mutation that will release the locks. this may be used from aseparate recipe to release multiple locks.",
	"Method": "void fillReleaseMutation(MutationBatch m,boolean excludeCurrentLock){\r\n    ColumnListMutation<C> row = m.withRow(columnFamily, key);\r\n    for (C c : locksToDelete) {\r\n        row.deleteColumn(c);\r\n    }\r\n    if (!excludeCurrentLock && lockColumn != null)\r\n        row.deleteColumn(lockColumn);\r\n    locksToDelete.clear();\r\n    lockColumn = null;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetContactResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContact() != null)\r\n        sb.append(\"Contact: \").append(getContact());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DynamodbDataSourceConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTableName() != null)\r\n        sb.append(\"TableName: \").append(getTableName()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion()).append(\",\");\r\n    if (getUseCallerCredentials() != null)\r\n        sb.append(\"UseCallerCredentials: \").append(getUseCallerCredentials());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.Util.generateRandomFloatBetween",
	"Comment": "generates a random float between two limits. both limits are inclusive.",
	"Method": "float generateRandomFloatBetween(float lowerLimit,float upperLimit){\r\n    return lowerLimit + ((upperLimit - lowerLimit) * random.nextFloat());\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.SetDesiredCapacityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.neural.NNDataSet.createExamplesFromDataSet",
	"Comment": "method called by clients to set up data set and make it ready for\tprocessing",
	"Method": "void createExamplesFromDataSet(DataSet ds,Numerizer numerizer){\r\n    createNormalizedDataFromDataSet(ds, numerizer);\r\n    setTargetColumns();\r\n    createExamples();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.TransformMatrix2D.inverse",
	"Comment": "calculates the inverse of this transformation matrix.\tsee wolfram mathworld for more information.",
	"Method": "TransformMatrix2D inverse(){\r\n    if (this == UNITY_MATRIX)\r\n        return UNITY_MATRIX;\r\n    final double determinant = determinant();\r\n    if (determinant == 0.0d)\r\n        return null;\r\n    return new TransformMatrix2D(d / determinant, -b / determinant, -c / determinant, a / determinant, (c * f - d * e) / determinant, (b * e - a * f) / determinant);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.createSkillGroup",
	"Comment": "creates a skill group with a specified name and description.",
	"Method": "CreateSkillGroupResult createSkillGroup(CreateSkillGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateSkillGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.datastructure.Table.get",
	"Comment": "returns the value to which the specified row and column is mapped in this\ttable.",
	"Method": "ValueType get(RowHeaderType r,ColumnHeaderType c){\r\n    Hashtable<ColumnHeaderType, ValueType> rowValues = rows.get(r);\r\n    return rowValues == null ? null : rowValues.get(c);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AssociateDeviceWithRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteUsagePlanRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.local.Individual.incDescendants",
	"Comment": "should be called by the genetic algorithm whenever the individual is\tselected to produce a descendant.",
	"Method": "void incDescendants(){\r\n    descendants++;\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.fillLockMutation",
	"Comment": "fill a mutation with the lock column. this may be used when the mutationis executed externally but should be used with extreme caution to ensurethe lock is properly released",
	"Method": "C fillLockMutation(MutationBatch m,Long time,Integer ttl){\r\n    if (lockColumn != null) {\r\n        if (!lockColumn.equals(columnStrategy.generateLockColumn()))\r\n            throw new IllegalStateException(\"Can't change prefix or lockId after acquiring the lock\");\r\n    } else {\r\n        lockColumn = columnStrategy.generateLockColumn();\r\n    }\r\n    Long timeoutValue = (time == null) ? new Long(0) : time + TimeUnit.MICROSECONDS.convert(timeout, timeoutUnits);\r\n    m.withRow(columnFamily, key).putColumn(lockColumn, generateTimeoutValue(timeoutValue), ttl);\r\n    return lockColumn;\r\n}"
}, {
	"Path": "aima.core.search.csp.inference.DomainLog.compactify",
	"Comment": "can be called after all domain information has been collected to reduce\tstorage consumption.",
	"Method": "DomainLog<VAR, VAL> compactify(){\r\n    affectedVariables = null;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfileName() != null)\r\n        sb.append(\"ProfileName: \").append(getProfileName()).append(\",\");\r\n    if (getTimezone() != null)\r\n        sb.append(\"Timezone: \").append(getTimezone()).append(\",\");\r\n    if (getAddress() != null)\r\n        sb.append(\"Address: \").append(getAddress()).append(\",\");\r\n    if (getDistanceUnit() != null)\r\n        sb.append(\"DistanceUnit: \").append(getDistanceUnit()).append(\",\");\r\n    if (getTemperatureUnit() != null)\r\n        sb.append(\"TemperatureUnit: \").append(getTemperatureUnit()).append(\",\");\r\n    if (getWakeWord() != null)\r\n        sb.append(\"WakeWord: \").append(getWakeWord()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken()).append(\",\");\r\n    if (getSetupModeDisabled() != null)\r\n        sb.append(\"SetupModeDisabled: \").append(getSetupModeDisabled()).append(\",\");\r\n    if (getMaxVolumeLimit() != null)\r\n        sb.append(\"MaxVolumeLimit: \").append(getMaxVolumeLimit()).append(\",\");\r\n    if (getPSTNEnabled() != null)\r\n        sb.append(\"PSTNEnabled: \").append(getPSTNEnabled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetRequestValidatorsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteIntegrationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetClientCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeAutoScalingGroupsAsync",
	"Comment": "simplified method form for invoking the describeautoscalinggroups operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync(DescribeAutoScalingGroupsRequest request,java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync,DescribeAutoScalingGroupsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingGroupsRequest, DescribeAutoScalingGroupsResult> asyncHandler,java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync,java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingGroupsRequest, DescribeAutoScalingGroupsResult> asyncHandler){\r\n    return describeAutoScalingGroupsAsync(new DescribeAutoScalingGroupsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateDirectoryConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryName() != null)\r\n        sb.append(\"DirectoryName: \").append(getDirectoryName()).append(\",\");\r\n    if (getOrganizationalUnitDistinguishedNames() != null)\r\n        sb.append(\"OrganizationalUnitDistinguishedNames: \").append(getOrganizationalUnitDistinguishedNames()).append(\",\");\r\n    if (getServiceAccountCredentials() != null)\r\n        sb.append(\"ServiceAccountCredentials: \").append(getServiceAccountCredentials());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.describeCertificate",
	"Comment": "returns detailed metadata about the specified acm certificate.",
	"Method": "DescribeCertificateResult describeCertificate(DescribeCertificateRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeCertificate(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.PutSkillAuthorizationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthorizationResult() != null)\r\n        sb.append(\"AuthorizationResult: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId()).append(\",\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteGraphqlApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeImageBuildersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNames() != null)\r\n        sb.append(\"Names: \").append(getNames()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.ListTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetSdkTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.AgentAppFrame.getEnvView",
	"Comment": "returns the environment view which is currently used to display the\tagents in their environment.",
	"Method": "AgentAppEnvironmentView getEnvView(){\r\n    return envView;\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultMap.applyClassifierAndUpdateTree",
	"Comment": "applies the current entity classifier to all currently maintained map\tentities and creates a new entity tree with all relevant ways and points\tof interest.",
	"Method": "void applyClassifierAndUpdateTree(BoundingBox bb){\r\n    entityTree = new KDTree(bb, 8000, 60);\r\n    for (MapWay way : ways.values()) updateEntityViewInfo(way, true);\r\n    for (MapNode poi : pois) updateEntityViewInfo(poi, true);\r\n    for (MapNode marker : markers) updateEntityViewInfo(marker, false);\r\n    for (Track track : tracks) updateEntityViewInfo(track, false);\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.AnglePanel.deleteAngle",
	"Comment": "deletes the selected angle and updates all relevant gui components.",
	"Method": "void deleteAngle(){\r\n    if (angles == null)\r\n        return;\r\n    if (angles.length == 1) {\r\n        angles = null;\r\n        jTFChangeAngle.setText(\"\");\r\n        angleModel.removeValueAt(0);\r\n        jLAngleCount.setText(JL_NUMBER_OF_ANGLES_TEXT + \"0\");\r\n        btnDeleteAngle.setEnabled(false);\r\n    } else {\r\n        double[] tmpAngles = new double[angles.length - 1];\r\n        for (int i = 0; i < angles.length - 1; i++) {\r\n            if (i >= selectedAngleIndex) {\r\n                tmpAngles[i] = angles[i + 1];\r\n            } else {\r\n                tmpAngles[i] = angles[i];\r\n            }\r\n        }\r\n        angles = tmpAngles;\r\n        angleModel.removeValueAt(selectedAngleIndex);\r\n        selectedAngleIndex = 0;\r\n        jTFChangeAngle.setText(angles[selectedAngleIndex] + \"?\");\r\n        jLAngleCount.setText(\"Count of Angles: \" + angles.length);\r\n    }\r\n    repaint();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeviceStatusDetail.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCode() != null)\r\n        sb.append(\"Code: \").append(getCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.terminateInstanceInAutoScalingGroup",
	"Comment": "terminates the specified instance and optionally adjusts the desired group size.this call simply makes a termination request. the instance is not terminated immediately.",
	"Method": "TerminateInstanceInAutoScalingGroupResult terminateInstanceInAutoScalingGroup(TerminateInstanceInAutoScalingGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeTerminateInstanceInAutoScalingGroup(request);\r\n}"
}, {
	"Path": "aima.core.search.csp.FlexibleBacktrackingSolver.setAll",
	"Comment": "selects mrv&deg for variable selection, lcv for domain ordering and ac3 as inference method.",
	"Method": "FlexibleBacktrackingSolver<VAR, VAL> setAll(){\r\n    set(CspHeuristics.mrvDeg()).set(CspHeuristics.lcv()).set(new AC3Strategy());\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.batchAssociateUserStack",
	"Comment": "associates the specified users with the specified stacks. users in a user pool cannot be assigned to stacks withfleets that are joined to an active directory domain.",
	"Method": "BatchAssociateUserStackResult batchAssociateUserStack(BatchAssociateUserStackRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchAssociateUserStack(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.updateBusinessReportSchedule",
	"Comment": "updates the configuration of the report delivery schedule with the specified schedule arn.",
	"Method": "UpdateBusinessReportScheduleResult updateBusinessReportSchedule(UpdateBusinessReportScheduleRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateBusinessReportSchedule(request);\r\n}"
}, {
	"Path": "aimax.osm.data.Position.getCourseTo",
	"Comment": "computes a simple approximation of the compass course from this position\tto the specified node.",
	"Method": "int getCourseTo(MapNode node){\r\n    double lonCorr = Math.cos(Math.PI / 360.0 * (lat + node.getLat()));\r\n    double latDist = node.getLat() - lat;\r\n    double lonDist = lonCorr * (node.getLon() - lon);\r\n    int course = (int) (180.0 / Math.PI * Math.atan2(lonDist, latDist));\r\n    if (course <= 0)\r\n        course += 360;\r\n    return course;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getModelTemplate",
	"Comment": "generates a sample mapping template that can be used to transform a payload into the structure of a model.",
	"Method": "GetModelTemplateResult getModelTemplate(GetModelTemplateRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetModelTemplate(request);\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RouteFindingAgentOsmApp.createParameters",
	"Comment": "defines the parameters to be shown in the simulation pane tool bar.",
	"Method": "List<Parameter> createParameters(){\r\n    Parameter p1 = new Parameter(PARAM_WAY_SELECTION, \"Use any way\", \"Travel by car\", \"Travel by bicycle\");\r\n    Parameter p2 = new Parameter(PARAM_SEARCH, (Object[]) SearchFactory.getInstance().getSearchStrategyNames());\r\n    p2.setDefaultValueIndex(5);\r\n    Parameter p3 = new Parameter(PARAM_Q_SEARCH_IMPL, (Object[]) SearchFactory.getInstance().getQSearchImplNames());\r\n    p3.setDefaultValueIndex(1);\r\n    p3.setDependency(PARAM_SEARCH, \"Depth First\", \"Breadth First\", \"Uniform Cost\", \"Greedy Best First\", \"A*\");\r\n    Parameter p4 = new Parameter(PARAM_HEURISTIC, \"0\", \"SLD\");\r\n    p4.setDefaultValueIndex(1);\r\n    p4.setDependency(PARAM_SEARCH, \"Greedy Best First\", \"A*\", \"Recursive Best First\", \"Recursive Best First No Loops\", \"Hill Climbing\");\r\n    return Arrays.asList(p1, p2, p3, p4);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobSummaries() != null)\r\n        sb.append(\"JobSummaries: \").append(getJobSummaries()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.simple.SimpleRangeReading.setSensorRange",
	"Comment": "sets the sensor range that the virtual robot can measure at most.",
	"Method": "void setSensorRange(double sensorRange){\r\n    SENSOR_RANGE = sensorRange;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PredefinedMetricSpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPredefinedMetricType() != null)\r\n        sb.append(\"PredefinedMetricType: \").append(getPredefinedMetricType()).append(\",\");\r\n    if (getResourceLabel() != null)\r\n        sb.append(\"ResourceLabel: \").append(getResourceLabel());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateAddressBookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.fol.inference.InferenceResultPrinter.printInferenceResult",
	"Comment": "utility method for outputting inferenceresults in a formatted textual\trepresentation.",
	"Method": "String printInferenceResult(InferenceResult ir){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"InferenceResult.isTrue=\" + ir.isTrue());\r\n    sb.append(\"\\n\");\r\n    sb.append(\"InferenceResult.isPossiblyFalse=\" + ir.isPossiblyFalse());\r\n    sb.append(\"\\n\");\r\n    sb.append(\"InferenceResult.isUnknownDueToTimeout=\" + ir.isUnknownDueToTimeout());\r\n    sb.append(\"\\n\");\r\n    sb.append(\"InferenceResult.isPartialResultDueToTimeout=\" + ir.isPartialResultDueToTimeout());\r\n    sb.append(\"\\n\");\r\n    sb.append(\"InferenceResult.#Proofs=\" + ir.getProofs().size());\r\n    sb.append(\"\\n\");\r\n    int proofNo = 0;\r\n    for (Proof p : ir.getProofs()) {\r\n        proofNo++;\r\n        sb.append(\"InferenceResult.Proof#\" + proofNo + \"=\\n\" + ProofPrinter.printProof(p));\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.StageKey.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeFleetsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFleets() != null)\r\n        sb.append(\"Fleets: \").append(getFleets()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.map.MapAgentView.paintComponent",
	"Comment": "clears the panel, displays the map, the current agent locations, and the\ttrack of the first agent.",
	"Method": "void paintComponent(java.awt.Graphics g){\r\n    super.paintComponent(g);\r\n    if (env != null) {\r\n        Map map = getMapEnv().getMap();\r\n        if (!map.getLocations().isEmpty()) {\r\n            updateTracks();\r\n            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;\r\n            adjustTransformation();\r\n            paintMap(g2);\r\n            for (Agent a : env.getAgents()) paintTrack(g2, a);\r\n            for (String loc : map.getLocations()) paintLoc(g2, loc);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.NamedQuery.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDatabase() != null)\r\n        sb.append(\"Database: \").append(getDatabase()).append(\",\");\r\n    if (getQueryString() != null)\r\n        sb.append(\"QueryString: \").append(getQueryString()).append(\",\");\r\n    if (getNamedQueryId() != null)\r\n        sb.append(\"NamedQueryId: \").append(getNamedQueryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteResolverRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getFieldName() != null)\r\n        sb.append(\"FieldName: \").append(getFieldName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.visitors.ConvertToDNF.convert",
	"Comment": "returns the specified sentence in its logically equivalent disjunction\tnormal form.",
	"Method": "Sentence convert(Sentence s){\r\n    Sentence result = null;\r\n    Sentence nnfSentence = ConvertToNNF.convert(s);\r\n    Sentence dnfSentence = DistributeAndOverOr.distribute(nnfSentence);\r\n    result = dnfSentence;\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetAuthorizersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.AWSAmplifyClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsamplify using the current builder configuration.",
	"Method": "AWSAmplify build(AwsSyncClientParams params){\r\n    return new AWSAmplifyClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.StartSchemaCreationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getDefinition() != null)\r\n        sb.append(\"Definition: \").append(getDefinition());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.test.core.experiment.logic.propositional.algorithms.WalkSATExperiment.testWalkSat",
	"Comment": "not really a junit testcase but written as one to allow easy execution",
	"Method": "void testWalkSat(){\r\n    WalkSAT walkSAT = new WalkSAT();\r\n    Model m = walkSAT.walkSAT(ConvertToConjunctionOfClauses.convert(parser.parse(\"A & B\")).getClauses(), 0.5, 1000);\r\n    if (m == null) {\r\n        System.out.println(\"failure\");\r\n    } else {\r\n        m.print();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazonautoscalingasync using the current builder configuration.",
	"Method": "AmazonAutoScalingAsync build(AwsAsyncClientParams params){\r\n    return new AmazonAutoScalingAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.Branch.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBranchArn() != null)\r\n        sb.append(\"BranchArn: \").append(getBranchArn()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getEnableNotification() != null)\r\n        sb.append(\"EnableNotification: \").append(getEnableNotification()).append(\",\");\r\n    if (getCreateTime() != null)\r\n        sb.append(\"CreateTime: \").append(getCreateTime()).append(\",\");\r\n    if (getUpdateTime() != null)\r\n        sb.append(\"UpdateTime: \").append(getUpdateTime()).append(\",\");\r\n    if (getEnvironmentVariables() != null)\r\n        sb.append(\"EnvironmentVariables: \").append(getEnvironmentVariables()).append(\",\");\r\n    if (getEnableAutoBuild() != null)\r\n        sb.append(\"EnableAutoBuild: \").append(getEnableAutoBuild()).append(\",\");\r\n    if (getCustomDomains() != null)\r\n        sb.append(\"CustomDomains: \").append(getCustomDomains()).append(\",\");\r\n    if (getFramework() != null)\r\n        sb.append(\"Framework: \").append(getFramework()).append(\",\");\r\n    if (getActiveJobId() != null)\r\n        sb.append(\"ActiveJobId: \").append(getActiveJobId()).append(\",\");\r\n    if (getTotalNumberOfJobs() != null)\r\n        sb.append(\"TotalNumberOfJobs: \").append(getTotalNumberOfJobs()).append(\",\");\r\n    if (getEnableBasicAuth() != null)\r\n        sb.append(\"EnableBasicAuth: \").append(getEnableBasicAuth()).append(\",\");\r\n    if (getThumbnailUrl() != null)\r\n        sb.append(\"ThumbnailUrl: \").append(getThumbnailUrl()).append(\",\");\r\n    if (getBasicAuthCredentials() != null)\r\n        sb.append(\"BasicAuthCredentials: \").append(getBasicAuthCredentials()).append(\",\");\r\n    if (getBuildSpec() != null)\r\n        sb.append(\"BuildSpec: \").append(getBuildSpec()).append(\",\");\r\n    if (getTtl() != null)\r\n        sb.append(\"Ttl: \").append(getTtl());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AddressBookData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.AgentAppFrame.selectionChanged",
	"Comment": "tells the controller to prepare simulation and updates enabled state.",
	"Method": "void selectionChanged(String changedSelector){\r\n    if (controller != null) {\r\n        controller.prepare(changedSelector);\r\n        updateEnabledState();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.RevokeCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getCertificateSerial() != null)\r\n        sb.append(\"CertificateSerial: \").append(getCertificateSerial()).append(\",\");\r\n    if (getRevocationReason() != null)\r\n        sb.append(\"RevocationReason: \").append(getRevocationReason());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.CreateNamedQueryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQueryId() != null)\r\n        sb.append(\"NamedQueryId: \").append(getNamedQueryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.FlushStageCacheRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Category.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCategoryId() != null)\r\n        sb.append(\"CategoryId: \").append(getCategoryId()).append(\",\");\r\n    if (getCategoryName() != null)\r\n        sb.append(\"CategoryName: \").append(getCategoryName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DirectoryConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryName() != null)\r\n        sb.append(\"DirectoryName: \").append(getDirectoryName()).append(\",\");\r\n    if (getOrganizationalUnitDistinguishedNames() != null)\r\n        sb.append(\"OrganizationalUnitDistinguishedNames: \").append(getOrganizationalUnitDistinguishedNames()).append(\",\");\r\n    if (getServiceAccountCredentials() != null)\r\n        sb.append(\"ServiceAccountCredentials: \").append(getServiceAccountCredentials()).append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.Listener.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHealthCheck() != null)\r\n        sb.append(\"HealthCheck: \").append(getHealthCheck()).append(\",\");\r\n    if (getPortMapping() != null)\r\n        sb.append(\"PortMapping: \").append(getPortMapping());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.searchRooms",
	"Comment": "searches rooms and lists the ones that meet a set of filter and sort criteria.",
	"Method": "SearchRoomsResult searchRooms(SearchRoomsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSearchRooms(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.RemoveTagsFromCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.describeSessions",
	"Comment": "retrieves a list that describes the streaming sessions for a specified stack and fleet. if a user id is providedfor the stack and fleet, only streaming sessions for that user are described. if an authentication type is notprovided, the default is to authenticate users using a streaming url.",
	"Method": "DescribeSessionsResult describeSessions(DescribeSessionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeSessions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.updateDirectoryConfig",
	"Comment": "updates the specified directory config object in appstream 2.0. this object includes the information required tojoin streaming instances to an active directory domain.",
	"Method": "UpdateDirectoryConfigResult updateDirectoryConfig(UpdateDirectoryConfigRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateDirectoryConfig(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SkillGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getSkillGroupName() != null)\r\n        sb.append(\"SkillGroupName: \").append(getSkillGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.SimpleHostConnectionPool.waitForConnection",
	"Comment": "internal method to wait for a connection from the available connectionpool.",
	"Method": "Connection<CL> waitForConnection(int timeout){\r\n    Connection<CL> connection = null;\r\n    long startTime = System.currentTimeMillis();\r\n    try {\r\n        blockedThreads.incrementAndGet();\r\n        connection = availableConnections.poll(timeout, TimeUnit.MILLISECONDS);\r\n        if (connection != null)\r\n            return connection;\r\n        throw new PoolTimeoutException(\"Timed out waiting for connection\").setHost(getHost()).setLatency(System.currentTimeMillis() - startTime);\r\n    } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n        throw new InterruptedOperationException(\"Thread interrupted waiting for connection\").setHost(getHost()).setLatency(System.currentTimeMillis() - startTime);\r\n    } finally {\r\n        blockedThreads.decrementAndGet();\r\n    }\r\n}"
}, {
	"Path": "aima.core.probability.util.ProbUtil.expectedSizeOfCategoricalDistribution",
	"Comment": "calculated the expected size of a categoricaldistribution for the\tprovided random variables.",
	"Method": "int expectedSizeOfCategoricalDistribution(RandomVariable vars){\r\n    return expectedSizeOfProbabilityTable(vars);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetAppRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualNodeStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationPartResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getProperties() != null)\r\n        sb.append(\"Properties: \").append(getProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getUsagePlanKeys",
	"Comment": "gets all the usage plan keys representing the api keys added to a specified usage plan.",
	"Method": "GetUsagePlanKeysResult getUsagePlanKeys(GetUsagePlanKeysRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetUsagePlanKeys(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateStageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCacheClusterEnabled() != null)\r\n        sb.append(\"CacheClusterEnabled: \").append(getCacheClusterEnabled()).append(\",\");\r\n    if (getCacheClusterSize() != null)\r\n        sb.append(\"CacheClusterSize: \").append(getCacheClusterSize()).append(\",\");\r\n    if (getVariables() != null)\r\n        sb.append(\"Variables: \").append(getVariables()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion()).append(\",\");\r\n    if (getCanarySettings() != null)\r\n        sb.append(\"CanarySettings: \").append(getCanarySettings()).append(\",\");\r\n    if (getTracingEnabled() != null)\r\n        sb.append(\"TracingEnabled: \").append(getTracingEnabled()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateStackResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStack() != null)\r\n        sb.append(\"Stack: \").append(getStack());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.waiters.DescribeCertificateFunction.apply",
	"Comment": "makes a call to the operation specified by the waiter by taking the corresponding request and returns thecorresponding result",
	"Method": "DescribeCertificateResult apply(DescribeCertificateRequest describeCertificateRequest){\r\n    return client.describeCertificate(describeCertificateRequest);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteApiKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.failOnStaleLock",
	"Comment": "when set to true the operation will fail if a stale lock is detected",
	"Method": "OneStepDistributedRowLock<K, C> failOnStaleLock(boolean failOnStaleLock){\r\n    this.failOnStaleLock = failOnStaleLock;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteRequestValidatorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.UpdateBranchRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getFramework() != null)\r\n        sb.append(\"Framework: \").append(getFramework()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage()).append(\",\");\r\n    if (getEnableNotification() != null)\r\n        sb.append(\"EnableNotification: \").append(getEnableNotification()).append(\",\");\r\n    if (getEnableAutoBuild() != null)\r\n        sb.append(\"EnableAutoBuild: \").append(getEnableAutoBuild()).append(\",\");\r\n    if (getEnvironmentVariables() != null)\r\n        sb.append(\"EnvironmentVariables: \").append(getEnvironmentVariables()).append(\",\");\r\n    if (getBasicAuthCredentials() != null)\r\n        sb.append(\"BasicAuthCredentials: \").append(getBasicAuthCredentials()).append(\",\");\r\n    if (getEnableBasicAuth() != null)\r\n        sb.append(\"EnableBasicAuth: \").append(getEnableBasicAuth()).append(\",\");\r\n    if (getBuildSpec() != null)\r\n        sb.append(\"BuildSpec: \").append(getBuildSpec()).append(\",\");\r\n    if (getTtl() != null)\r\n        sb.append(\"Ttl: \").append(getTtl());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetAuthorizerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getProviderARNs() != null)\r\n        sb.append(\"ProviderARNs: \").append(getProviderARNs()).append(\",\");\r\n    if (getAuthType() != null)\r\n        sb.append(\"AuthType: \").append(getAuthType()).append(\",\");\r\n    if (getAuthorizerUri() != null)\r\n        sb.append(\"AuthorizerUri: \").append(getAuthorizerUri()).append(\",\");\r\n    if (getAuthorizerCredentials() != null)\r\n        sb.append(\"AuthorizerCredentials: \").append(getAuthorizerCredentials()).append(\",\");\r\n    if (getIdentitySource() != null)\r\n        sb.append(\"IdentitySource: \").append(getIdentitySource()).append(\",\");\r\n    if (getIdentityValidationExpression() != null)\r\n        sb.append(\"IdentityValidationExpression: \").append(getIdentityValidationExpression()).append(\",\");\r\n    if (getAuthorizerResultTtlInSeconds() != null)\r\n        sb.append(\"AuthorizerResultTtlInSeconds: \").append(getAuthorizerResultTtlInSeconds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ResourceError.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage()).append(\",\");\r\n    if (getErrorTimestamp() != null)\r\n        sb.append(\"ErrorTimestamp: \").append(getErrorTimestamp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.environment.cellworld.CellWorld.removeCell",
	"Comment": "remove the cell at the specified location from this cell world. this\tallows you to introduce barriers into different location.",
	"Method": "void removeCell(int x,int y){\r\n    Map<Integer, Cell<C>> xCol = cellLookup.get(x);\r\n    if (null != xCol) {\r\n        cells.remove(xCol.remove(y));\r\n    }\r\n}"
}, {
	"Path": "aimax.osm.data.MapWayAttFilter.createCarWayFilter",
	"Comment": "creates a way filter which passes any way suitable for traveling by car.",
	"Method": "MapWayAttFilter createCarWayFilter(){\r\n    MapWayAttFilter filter = new MapWayAttFilter(\"highway\");\r\n    filter.setAccepted(\"motorway\");\r\n    filter.setAccepted(\"motorway_link\");\r\n    filter.setAccepted(\"trunk\");\r\n    filter.setAccepted(\"trunk_link\");\r\n    filter.setAccepted(\"primary\");\r\n    filter.setAccepted(\"primary_link\");\r\n    filter.setAccepted(\"secondary\");\r\n    filter.setAccepted(\"tertiary\");\r\n    filter.setAccepted(\"road\");\r\n    filter.setAccepted(\"residential\");\r\n    filter.setAccepted(\"living_street\");\r\n    filter.setAccepted(\"service\");\r\n    filter.setAccepted(\"unclassified\");\r\n    return filter;\r\n}"
}, {
	"Path": "aima.core.util.math.Vector.indexHavingMaxValue",
	"Comment": "returns the index at which the maximum value in this vector is located.",
	"Method": "int indexHavingMaxValue(){\r\n    if (size() <= 0) {\r\n        throw new RuntimeException(\"can't perform this op on empty vector\");\r\n    }\r\n    int res = 0;\r\n    for (int i = 0; i < size(); i++) {\r\n        if (getValue(i) > getValue(res)) {\r\n            res = i;\r\n        }\r\n    }\r\n    return res;\r\n}"
}, {
	"Path": "com.ihongqiqu.util.LogUtils.printCallHierarchy",
	"Comment": "print the array of stack trace elements of this method in black.",
	"Method": "void printCallHierarchy(){\r\n    if (Log.VERBOSE > DEBUG_LEVEL) {\r\n        String tag = getClassName();\r\n        String method = callMethodAndLine();\r\n        String hierarchy = getCallHierarchy();\r\n        Log.v(tag, method + hierarchy);\r\n        if (DEBUG_SYSOUT) {\r\n            System.out.println(tag + \"  \" + method + hierarchy);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteApiKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.PutConferencePreferenceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferencePreference() != null)\r\n        sb.append(\"ConferencePreference: \").append(getConferencePreference());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.UpdateAppResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApp() != null)\r\n        sb.append(\"App: \").append(getApp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLifecycleHooksRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLifecycleHookNames() != null)\r\n        sb.append(\"LifecycleHookNames: \").append(getLifecycleHookNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.UpdateCertificateOptionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.ScalableTargetAction.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMinCapacity() != null)\r\n        sb.append(\"MinCapacity: \").append(getMinCapacity()).append(\",\");\r\n    if (getMaxCapacity() != null)\r\n        sb.append(\"MaxCapacity: \").append(getMaxCapacity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListRoutesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getRoutes() != null)\r\n        sb.append(\"Routes: \").append(getRoutes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeAdjustmentTypesAsync",
	"Comment": "simplified method form for invoking the describeadjustmenttypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync(DescribeAdjustmentTypesRequest request,java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync,DescribeAdjustmentTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAdjustmentTypesRequest, DescribeAdjustmentTypesResult> asyncHandler,java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync,java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeAdjustmentTypesRequest, DescribeAdjustmentTypesResult> asyncHandler){\r\n    return describeAdjustmentTypesAsync(new DescribeAdjustmentTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DeleteScheduledActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getScheduledActionName() != null)\r\n        sb.append(\"ScheduledActionName: \").append(getScheduledActionName()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetVpcLinksRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.uniqueness.DedicatedMultiRowUniquenessConstraint.withTtl",
	"Comment": "ttl to use for the uniquness operation. this is the ttl for the columnsto expire in the event of a client crash before the uniqueness can becommitted",
	"Method": "DedicatedMultiRowUniquenessConstraint<C> withTtl(Integer ttl){\r\n    this.ttl = ttl;\r\n    return this;\r\n}"
}, {
	"Path": "aima.core.environment.map.ExtendableMap.getDistance",
	"Comment": "returns the travel distance between the two specified locations if they\tare linked by a connection and null otherwise.",
	"Method": "Double getDistance(String fromLocation,String toLocation){\r\n    return links.get(fromLocation, toLocation);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.FleetError.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ImageBuilderStateChangeReason.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCode() != null)\r\n        sb.append(\"Code: \").append(getCode()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateStackRequest.isDeleteStorageConnectors",
	"Comment": "deletes the storage connectors currently enabled for the stack.",
	"Method": "Boolean isDeleteStorageConnectors(){\r\n    return this.deleteStorageConnectors;\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.DeleteCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.TransformMatrix2D.scale",
	"Comment": "produces a transformation matrix representing a scaling operation.",
	"Method": "TransformMatrix2D scale(double x,double y){\r\n    return new TransformMatrix2D(x, 0.0d, 0.0d, y, 0.0d, 0.0d);\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.release",
	"Comment": "release the lock by releasing this and any other stale lock columns",
	"Method": "void release(){\r\n    if (!locksToDelete.isEmpty() || getLockColumn() != null) {\r\n        MutationBatch m = keyspace.prepareMutationBatch().setConsistencyLevel(consistencyLevel);\r\n        fillReleaseMutation(m, false);\r\n        m.execute();\r\n    }\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RoutePlannerOsmApp.calculateRoute",
	"Comment": "starts route generation after the calculate button has been pressed.",
	"Method": "void calculateRoute(){\r\n    OsmMap map = mapPaneCtrl.getMap();\r\n    List<Position> positions = routeCalculator.calculateRoute(map.getMarkers(), map, taskCombo.getSelectionModel().getSelectedIndex());\r\n    mapPaneCtrl.getMap().createTrack(\"Route\", positions);\r\n    statusLabel.setText(getTrackInfo(mapPaneCtrl.getMap().getTrack(\"Route\")));\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateVpcLinkRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpcLinkId() != null)\r\n        sb.append(\"VpcLinkId: \").append(getVpcLinkId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.util.TimeUUIDUtils.uuid",
	"Comment": "converts a bytebuffer containing a uuid into a java.util.uuid",
	"Method": "UUID uuid(byte[] uuid,int offset,UUID uuid,ByteBuffer bb){\r\n    bb = bb.slice();\r\n    return new UUID(bb.getLong(), bb.getLong());\r\n}"
}, {
	"Path": "aimax.osm.data.MapWayAttFilter.createOverlandTrafficWayFilter",
	"Comment": "creates a way filter which passes any way suitable for traveling by car.",
	"Method": "MapWayAttFilter createOverlandTrafficWayFilter(){\r\n    MapWayAttFilter filter = new MapWayAttFilter(\"highway\");\r\n    filter.setAccepted(\"motorway\");\r\n    filter.setAccepted(\"motorway_link\");\r\n    filter.setAccepted(\"trunk\");\r\n    filter.setAccepted(\"trunk_link\");\r\n    filter.setAccepted(\"primary\");\r\n    filter.setAccepted(\"primary_link\");\r\n    return filter;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.createLaunchConfiguration",
	"Comment": "creates a launch configuration.if you exceed your maximum limit of launch configurations, the call fails. for information about viewing thislimit, see describeaccountlimits. for information about updating this limit, see auto scaling limits in theamazon ec2 auto scaling user guide.for more information, see launch configurations inthe amazon ec2 auto scaling user guide.",
	"Method": "CreateLaunchConfigurationResult createLaunchConfiguration(CreateLaunchConfigurationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateLaunchConfiguration(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ProductionBranch.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLastDeployTime() != null)\r\n        sb.append(\"LastDeployTime: \").append(getLastDeployTime()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getThumbnailUrl() != null)\r\n        sb.append(\"ThumbnailUrl: \").append(getThumbnailUrl()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetIntegrationResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.Image.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getBaseImageArn() != null)\r\n        sb.append(\"BaseImageArn: \").append(getBaseImageArn()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getVisibility() != null)\r\n        sb.append(\"Visibility: \").append(getVisibility()).append(\",\");\r\n    if (getImageBuilderSupported() != null)\r\n        sb.append(\"ImageBuilderSupported: \").append(getImageBuilderSupported()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getStateChangeReason() != null)\r\n        sb.append(\"StateChangeReason: \").append(getStateChangeReason()).append(\",\");\r\n    if (getApplications() != null)\r\n        sb.append(\"Applications: \").append(getApplications()).append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime()).append(\",\");\r\n    if (getPublicBaseImageReleasedDate() != null)\r\n        sb.append(\"PublicBaseImageReleasedDate: \").append(getPublicBaseImageReleasedDate()).append(\",\");\r\n    if (getAppstreamAgentVersion() != null)\r\n        sb.append(\"AppstreamAgentVersion: \").append(getAppstreamAgentVersion()).append(\",\");\r\n    if (getImagePermissions() != null)\r\n        sb.append(\"ImagePermissions: \").append(getImagePermissions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.util.ProbUtil.getEventValuesForParents",
	"Comment": "get the parent values for the random variable xi from the provided event.",
	"Method": "Object[] getEventValuesForParents(Node Xi,Map<RandomVariable, Object> event){\r\n    Object[] parentValues = new Object[Xi.getParents().size()];\r\n    int i = 0;\r\n    for (Node pn : Xi.getParents()) {\r\n        parentValues[i] = event.get(pn.getRandomVariable());\r\n        i++;\r\n    }\r\n    return parentValues;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListDomainAssociationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainAssociations() != null)\r\n        sb.append(\"DomainAssociations: \").append(getDomainAssociations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.ScalingPolicy.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyARN() != null)\r\n        sb.append(\"PolicyARN: \").append(getPolicyARN()).append(\",\");\r\n    if (getPolicyName() != null)\r\n        sb.append(\"PolicyName: \").append(getPolicyName()).append(\",\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getPolicyType() != null)\r\n        sb.append(\"PolicyType: \").append(getPolicyType()).append(\",\");\r\n    if (getStepScalingPolicyConfiguration() != null)\r\n        sb.append(\"StepScalingPolicyConfiguration: \").append(getStepScalingPolicyConfiguration()).append(\",\");\r\n    if (getTargetTrackingScalingPolicyConfiguration() != null)\r\n        sb.append(\"TargetTrackingScalingPolicyConfiguration: \").append(getTargetTrackingScalingPolicyConfiguration()).append(\",\");\r\n    if (getAlarms() != null)\r\n        sb.append(\"Alarms: \").append(getAlarms()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.PutConferencePreferenceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteScheduledActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getScheduledActionName() != null)\r\n        sb.append(\"ScheduledActionName: \").append(getScheduledActionName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.agent.impl.ObjectWithDynamicAttributes.removeAttribute",
	"Comment": "removes the attribute with the specified key from this\tobjectwithdynamicattributes.",
	"Method": "void removeAttribute(Object key){\r\n    attributes.remove(key);\r\n}"
}, {
	"Path": "com.kodedu.component.CellUtils.defaultStringConverter",
	"Comment": "simple method to provide a stringconverter implementation in various cellimplementations.",
	"Method": "StringConverter<T> defaultStringConverter(){\r\n    return (StringConverter<T>) defaultStringConverter;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.SubDomainSetting.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPrefix() != null)\r\n        sb.append(\"Prefix: \").append(getPrefix()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.CreateLaunchConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.sortHub",
	"Comment": "organize the list of pages according to their descending hub scores.",
	"Method": "void sortHub(List<Page> result){\r\n    Collections.sort(result, new Comparator<Page>() {\r\n        public int compare(Page p1, Page p2) {\r\n            return p1.hub < p2.hub ? -1 : p1.hub > p2.hub ? 1 : secondaryOrderSort(p1, p2);\r\n        }\r\n        public int secondaryOrderSort(Page p1, Page p2) {\r\n            return p1.getLocation().compareToIgnoreCase(p2.getLocation()) < 1 ? -1 : p1.getLocation().compareToIgnoreCase(p2.getLocation()) > 1 ? 1 : 0;\r\n        }\r\n    });\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.sortHub",
	"Comment": "organize the list of pages according to their descending hub scores.",
	"Method": "void sortHub(List<Page> result){\r\n    return p1.hub < p2.hub ? -1 : p1.hub > p2.hub ? 1 : secondaryOrderSort(p1, p2);\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.sortHub",
	"Comment": "organize the list of pages according to their descending hub scores.",
	"Method": "void sortHub(List<Page> result){\r\n    return p1.getLocation().compareToIgnoreCase(p2.getLocation()) < 1 ? -1 : p1.getLocation().compareToIgnoreCase(p2.getLocation()) > 1 ? 1 : 0;\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awscertificatemanagerasync using the current builder configuration.",
	"Method": "AWSCertificateManagerAsync build(AwsAsyncClientParams params){\r\n    return new AWSCertificateManagerAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeLoadBalancers",
	"Comment": "describes the load balancers for the specified auto scaling group.this operation describes only classic load balancers. if you have application load balancers, usedescribeloadbalancertargetgroups instead.",
	"Method": "DescribeLoadBalancersResult describeLoadBalancers(DescribeLoadBalancersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLoadBalancers(request);\r\n}"
}, {
	"Path": "aima.core.search.framework.SearchUtils.getSequenceOfActions",
	"Comment": "returns the list of actions which corresponds to the complete path to the\tgiven node. the list is empty, if the node is the root node of the search\ttree.",
	"Method": "List<A> getSequenceOfActions(Node<S, A> node){\r\n    List<A> actions = new LinkedList();\r\n    while (!node.isRootNode()) {\r\n        actions.add(0, node.getAction());\r\n        node = node.getParent();\r\n    }\r\n    return actions;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DisassociateFleetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFleetName() != null)\r\n        sb.append(\"FleetName: \").append(getFleetName()).append(\",\");\r\n    if (getStackName() != null)\r\n        sb.append(\"StackName: \").append(getStackName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.csp.Assignment.isConsistent",
	"Comment": "returns true if this assignment does not violate any constraints ofconstraints.",
	"Method": "boolean isConsistent(List<Constraint<VAR, VAL>> constraints){\r\n    for (Constraint<VAR, VAL> cons : constraints) if (!cons.isSatisfiedWith(this))\r\n        return false;\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetMethodRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.ihongqiqu.util.HanziToPinyin.get",
	"Comment": "convert the input to a array of tokens. the sequence of ascii or unknowncharacters without space will be put into a token, one hanzi characterwhich has pinyin will be treated as a token.if these is no china collator, the empty token array is returned.",
	"Method": "ArrayList<Token> get(String input){\r\n    ArrayList<Token> tokens = new ArrayList<Token>();\r\n    if (!mHasChinaCollator || TextUtils.isEmpty(input)) {\r\n        return tokens;\r\n    }\r\n    final int inputLength = input.length();\r\n    final StringBuilder sb = new StringBuilder();\r\n    int tokenType = Token.LATIN;\r\n    for (int i = 0; i < inputLength; i++) {\r\n        final char character = input.charAt(i);\r\n        if (character == ' ') {\r\n            if (sb.length() > 0) {\r\n                addToken(sb, tokens, tokenType);\r\n            }\r\n        } else if (character < 256) {\r\n            if (tokenType != Token.LATIN && sb.length() > 0) {\r\n                addToken(sb, tokens, tokenType);\r\n            }\r\n            tokenType = Token.LATIN;\r\n            sb.append(character);\r\n        } else if (character < FIRST_UNIHAN) {\r\n            if (tokenType != Token.UNKNOWN && sb.length() > 0) {\r\n                addToken(sb, tokens, tokenType);\r\n            }\r\n            tokenType = Token.UNKNOWN;\r\n            sb.append(character);\r\n        } else {\r\n            Token t = getToken(character);\r\n            if (t.type == Token.PINYIN) {\r\n                if (sb.length() > 0) {\r\n                    addToken(sb, tokens, tokenType);\r\n                }\r\n                tokens.add(t);\r\n                tokenType = Token.PINYIN;\r\n            } else {\r\n                if (tokenType != t.type && sb.length() > 0) {\r\n                    addToken(sb, tokens, tokenType);\r\n                }\r\n                tokenType = t.type;\r\n                sb.append(character);\r\n            }\r\n        }\r\n    }\r\n    if (sb.length() > 0) {\r\n        addToken(sb, tokens, tokenType);\r\n    }\r\n    return tokens;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.GetCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateDeviceFromRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getParentId() != null)\r\n        sb.append(\"ParentId: \").append(getParentId()).append(\",\");\r\n    if (getPathPart() != null)\r\n        sb.append(\"PathPart: \").append(getPathPart()).append(\",\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getResourceMethods() != null)\r\n        sb.append(\"ResourceMethods: \").append(getResourceMethods());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.withDataColumns",
	"Comment": "if true the first read will also fetch all the columns in the row as opposed to just the lock columns.",
	"Method": "ColumnPrefixDistributedRowLock<K> withDataColumns(boolean flag){\r\n    this.readDataColumns = flag;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PatchOperation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOp() != null)\r\n        sb.append(\"Op: \").append(getOp()).append(\",\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getFrom() != null)\r\n        sb.append(\"From: \").append(getFrom());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RejectSkillRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateRestApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ConferenceProvider.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getIPDialIn() != null)\r\n        sb.append(\"IPDialIn: \").append(getIPDialIn()).append(\",\");\r\n    if (getPSTNDialIn() != null)\r\n        sb.append(\"PSTNDialIn: \").append(getPSTNDialIn()).append(\",\");\r\n    if (getMeetingSetting() != null)\r\n        sb.append(\"MeetingSetting: \").append(getMeetingSetting());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.reinforcement.example.CellWorldEnvironmentState.getPerceptFor",
	"Comment": "get a percept for an agent, representing what it senses within the cell\tworld environment.",
	"Method": "CellWorldPercept getPerceptFor(Agent anAgent){\r\n    return agentLocations.get(anAgent);\r\n}"
}, {
	"Path": "aima.test.core.unit.nlp.parse.GrammarTest.testUpdateVarsAndTerminals",
	"Comment": "test that grammar class correctly updates its \tlist of variables and terminals when a new rule is added",
	"Method": "void testUpdateVarsAndTerminals(){\r\n    g.addRule(new Rule(new ArrayList<String>(Arrays.asList(\"Z\")), new ArrayList<String>(Arrays.asList(\"z\", \"Z\")), (float) 0.50));\r\n    assertTrue(g.terminals.contains(\"z\") && !g.terminals.contains(\"Z\"));\r\n    assertTrue(g.vars.contains(\"Z\") && !g.vars.contains(\"z\"));\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.getAveDelta",
	"Comment": "determine how much values in a list are changing. useful for detecting\tconvergence of data values.",
	"Method": "double getAveDelta(double[] curr,double[] prev){\r\n    double aveDelta = 0;\r\n    assert (curr.length == prev.length);\r\n    for (int j = 0; j < curr.length; j++) {\r\n        aveDelta += Math.abs(curr[j] - prev[j]);\r\n    }\r\n    aveDelta /= curr.length;\r\n    return aveDelta;\r\n}"
}, {
	"Path": "com.ihongqiqu.util.FileUtils.deleteFile",
	"Comment": "delete file or directoryif path is null or empty, return trueif path not exist, return trueif path exist, delete recursion. return true",
	"Method": "boolean deleteFile(File file,boolean deleteFile,String path){\r\n    if (TextUtils.isEmpty(path)) {\r\n        return true;\r\n    }\r\n    File file = new File(path);\r\n    if (!file.exists()) {\r\n        return true;\r\n    }\r\n    if (file.isFile()) {\r\n        return file.delete();\r\n    }\r\n    if (!file.isDirectory()) {\r\n        return false;\r\n    }\r\n    for (File f : file.listFiles()) {\r\n        if (f.isFile()) {\r\n            f.delete();\r\n        } else if (f.isDirectory()) {\r\n            deleteFile(f.getAbsolutePath());\r\n        }\r\n    }\r\n    return file.delete();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.importRestApi",
	"Comment": "a feature of the api gateway control service for creating a new api from an external api definition file.",
	"Method": "ImportRestApiResult importRestApi(ImportRestApiRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeImportRestApi(request);\r\n}"
}, {
	"Path": "aima.core.environment.cellworld.CellWorld.result",
	"Comment": "determine what cell would be moved into if the specified action is\tperformed in the specified cell. normally, this will be the cell adjacent\tin the appropriate direction. however, if there is no cell in the\tadjacent direction of the action then the outcome of the action is to\tstay in the same cell as the action was performed in.",
	"Method": "Cell<C> result(Cell<C> s,CellWorldAction a){\r\n    Cell<C> sDelta = getCellAt(a.getXResult(s.getX()), a.getYResult(s.getY()));\r\n    if (null == sDelta) {\r\n        sDelta = s;\r\n    }\r\n    return sDelta;\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ListCertificatesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateStatuses() != null)\r\n        sb.append(\"CertificateStatuses: \").append(getCertificateStatuses()).append(\",\");\r\n    if (getIncludes() != null)\r\n        sb.append(\"Includes: \").append(getIncludes()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxItems() != null)\r\n        sb.append(\"MaxItems: \").append(getMaxItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.deleteImagePermissions",
	"Comment": "deletes permissions for the specified private image. after you delete permissions for an image, aws accounts towhich you previously granted these permissions can no longer use the image.",
	"Method": "DeleteImagePermissionsResult deleteImagePermissions(DeleteImagePermissionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteImagePermissions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateApiKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getExpires() != null)\r\n        sb.append(\"Expires: \").append(getExpires());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RevokeInvitationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.StartDeviceSyncRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getFeatures() != null)\r\n        sb.append(\"Features: \").append(getFeatures());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetSdkTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.datastructure.LabeledGraph.set",
	"Comment": "adds a directed labeled edge to the graph. the end points of the edge are\tspecified by vertex labels. new vertices are automatically identified and\tadded to the graph.",
	"Method": "void set(VertexLabelType from,VertexLabelType to,EdgeLabelType el){\r\n    Hashtable<VertexLabelType, EdgeLabelType> localEdgeLookup = checkForNewVertex(from);\r\n    localEdgeLookup.put(to, el);\r\n    checkForNewVertex(to);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.Job.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSummary() != null)\r\n        sb.append(\"Summary: \").append(getSummary()).append(\",\");\r\n    if (getSteps() != null)\r\n        sb.append(\"Steps: \").append(getSteps());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.Settings.buildGui",
	"Comment": "builds the gui for all registered settings.\tall registered settings will become visible in the gui.",
	"Method": "void buildGui(){\r\n    gui.buildPanels();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.RestApi.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings()).append(\",\");\r\n    if (getBinaryMediaTypes() != null)\r\n        sb.append(\"BinaryMediaTypes: \").append(getBinaryMediaTypes()).append(\",\");\r\n    if (getMinimumCompressionSize() != null)\r\n        sb.append(\"MinimumCompressionSize: \").append(getMinimumCompressionSize()).append(\",\");\r\n    if (getApiKeySource() != null)\r\n        sb.append(\"ApiKeySource: \").append(getApiKeySource()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration()).append(\",\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLifecycleHookTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.DescribeCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.createAuthorizer",
	"Comment": "adds a new authorizer resource to an existing restapi resource.aws cli",
	"Method": "CreateAuthorizerResult createAuthorizer(CreateAuthorizerRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateAuthorizer(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutRestApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings()).append(\",\");\r\n    if (getBinaryMediaTypes() != null)\r\n        sb.append(\"BinaryMediaTypes: \").append(getBinaryMediaTypes()).append(\",\");\r\n    if (getMinimumCompressionSize() != null)\r\n        sb.append(\"MinimumCompressionSize: \").append(getMinimumCompressionSize()).append(\",\");\r\n    if (getApiKeySource() != null)\r\n        sb.append(\"ApiKeySource: \").append(getApiKeySource()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration()).append(\",\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.deletePolicy",
	"Comment": "deletes the specified auto scaling policy.deleting a policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has anassociated action.",
	"Method": "DeletePolicyResult deletePolicy(DeletePolicyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeletePolicy(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Sort.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetRoomSkillParameterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomSkillParameter() != null)\r\n        sb.append(\"RoomSkillParameter: \").append(getRoomSkillParameter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateGatewayResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getDefaultResponse() != null)\r\n        sb.append(\"DefaultResponse: \").append(getDefaultResponse());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.listAssociatedFleets",
	"Comment": "retrieves the name of the fleet that is associated with the specified stack.",
	"Method": "ListAssociatedFleetsResult listAssociatedFleets(ListAssociatedFleetsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListAssociatedFleets(request);\r\n}"
}, {
	"Path": "com.netflix.astyanax.cql.writes.AbstractMutationBatchImpl.isEmpty",
	"Comment": "checks whether the mutation object contains rows. while the map may\tcontain row keys the row keys may not contain any mutations.",
	"Method": "boolean isEmpty(){\r\n    return mutationMap.isEmpty();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.ExtendedRouteFindingAgentOsmApp.initialize",
	"Comment": "the method is called after each parameter selection change. this\timplementation clears visited states of the last simulation run, prepares\tthe map for different kinds of vehicles and clears the currently\tdisplayed track.",
	"Method": "void initialize(){\r\n    visitedStates.clear();\r\n    super.initialize();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetApiKeysResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SkillDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProductDescription() != null)\r\n        sb.append(\"ProductDescription: \").append(getProductDescription()).append(\",\");\r\n    if (getInvocationPhrase() != null)\r\n        sb.append(\"InvocationPhrase: \").append(getInvocationPhrase()).append(\",\");\r\n    if (getReleaseDate() != null)\r\n        sb.append(\"ReleaseDate: \").append(getReleaseDate()).append(\",\");\r\n    if (getEndUserLicenseAgreement() != null)\r\n        sb.append(\"EndUserLicenseAgreement: \").append(getEndUserLicenseAgreement()).append(\",\");\r\n    if (getGenericKeywords() != null)\r\n        sb.append(\"GenericKeywords: \").append(getGenericKeywords()).append(\",\");\r\n    if (getBulletPoints() != null)\r\n        sb.append(\"BulletPoints: \").append(getBulletPoints()).append(\",\");\r\n    if (getNewInThisVersionBulletPoints() != null)\r\n        sb.append(\"NewInThisVersionBulletPoints: \").append(getNewInThisVersionBulletPoints()).append(\",\");\r\n    if (getSkillTypes() != null)\r\n        sb.append(\"SkillTypes: \").append(getSkillTypes()).append(\",\");\r\n    if (getReviews() != null)\r\n        sb.append(\"Reviews: \").append(getReviews()).append(\",\");\r\n    if (getDeveloperInfo() != null)\r\n        sb.append(\"DeveloperInfo: \").append(getDeveloperInfo());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.ihongqiqu.util.FileUtils.isFileExist",
	"Comment": "indicates if this file represents a file on the underlying file system.",
	"Method": "boolean isFileExist(String filePath){\r\n    if (TextUtils.isEmpty(filePath)) {\r\n        return false;\r\n    }\r\n    File file = new File(filePath);\r\n    return (file.exists() && file.isFile());\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.RequestCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getValidationMethod() != null)\r\n        sb.append(\"ValidationMethod: \").append(getValidationMethod()).append(\",\");\r\n    if (getSubjectAlternativeNames() != null)\r\n        sb.append(\"SubjectAlternativeNames: \").append(getSubjectAlternativeNames()).append(\",\");\r\n    if (getIdempotencyToken() != null)\r\n        sb.append(\"IdempotencyToken: \").append(getIdempotencyToken()).append(\",\");\r\n    if (getDomainValidationOptions() != null)\r\n        sb.append(\"DomainValidationOptions: \").append(getDomainValidationOptions()).append(\",\");\r\n    if (getOptions() != null)\r\n        sb.append(\"Options: \").append(getOptions()).append(\",\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.AbstractHostPartitionConnectionPool.addHost",
	"Comment": "add host to the system. may need to rebuild the partition map of the system",
	"Method": "boolean addHost(Host host,boolean refresh){\r\n    if (hosts.containsKey(host)) {\r\n        Host existingHost = hosts.get(host).getHost();\r\n        if (existingHost.getTokenRanges().size() != host.getTokenRanges().size()) {\r\n            existingHost.setTokenRanges(host.getTokenRanges());\r\n            return true;\r\n        }\r\n        ArrayList<TokenRange> currentTokens = Lists.newArrayList(existingHost.getTokenRanges());\r\n        ArrayList<TokenRange> newTokens = Lists.newArrayList(host.getTokenRanges());\r\n        Collections.sort(currentTokens, compareByStartToken);\r\n        Collections.sort(newTokens, compareByStartToken);\r\n        for (int i = 0; i < currentTokens.size(); i++) {\r\n            if (!currentTokens.get(i).getStartToken().equals(newTokens.get(i).getStartToken()) || !currentTokens.get(i).getEndToken().equals(newTokens.get(i).getEndToken())) {\r\n                return false;\r\n            }\r\n        }\r\n        existingHost.setTokenRanges(host.getTokenRanges());\r\n        return true;\r\n    } else {\r\n        HostConnectionPool<CL> pool = newHostConnectionPool(host, factory, config);\r\n        if (null == hosts.putIfAbsent(host, pool)) {\r\n            try {\r\n                monitor.onHostAdded(host, pool);\r\n                if (refresh) {\r\n                    topology.addPool(pool);\r\n                    rebuildPartitions();\r\n                }\r\n                pool.primeConnections(config.getInitConnsPerHost());\r\n            } catch (Exception e) {\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getRoomName() != null)\r\n        sb.append(\"RoomName: \").append(getRoomName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getProviderCalendarId() != null)\r\n        sb.append(\"ProviderCalendarId: \").append(getProviderCalendarId()).append(\",\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.AWSAmplifyAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsamplifyasync using the current builder configuration.",
	"Method": "AWSAmplifyAsync build(AwsAsyncClientParams params){\r\n    return new AWSAmplifyAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.AwsIamConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSigningRegion() != null)\r\n        sb.append(\"SigningRegion: \").append(getSigningRegion()).append(\",\");\r\n    if (getSigningServiceName() != null)\r\n        sb.append(\"SigningServiceName: \").append(getSigningServiceName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewFrame.initMapAndClassifier",
	"Comment": "creates the map, provides it to the view, and creates a corresponding\tentity classifier which is used by default when reading maps.",
	"Method": "void initMapAndClassifier(){\r\n    view.setMap(new DefaultMap());\r\n    viewInfo = new MapStyleFactory().createDefaultClassifier();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StartFleetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.fillReleaseMutation",
	"Comment": "fill a mutation that will release the locks. this may be used from aseparate recipe to release multiple locks.",
	"Method": "void fillReleaseMutation(MutationBatch m,boolean excludeCurrentLock){\r\n    ColumnListMutation<String> row = m.withRow(columnFamily, key);\r\n    for (String c : locksToDelete) {\r\n        row.deleteColumn(c);\r\n    }\r\n    if (!excludeCurrentLock && lockColumn != null)\r\n        row.deleteColumn(lockColumn);\r\n    locksToDelete.clear();\r\n    lockColumn = null;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DeleteScalingPolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualRouterData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getMetadata() != null)\r\n        sb.append(\"Metadata: \").append(getMetadata()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.DeleteNamedQueryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQueryId() != null)\r\n        sb.append(\"NamedQueryId: \").append(getNamedQueryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateStreamingURLResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStreamingURL() != null)\r\n        sb.append(\"StreamingURL: \").append(getStreamingURL()).append(\",\");\r\n    if (getExpires() != null)\r\n        sb.append(\"Expires: \").append(getExpires());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteContactResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.RdsHttpEndpointConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion()).append(\",\");\r\n    if (getDbClusterIdentifier() != null)\r\n        sb.append(\"DbClusterIdentifier: \").append(getDbClusterIdentifier()).append(\",\");\r\n    if (getDatabaseName() != null)\r\n        sb.append(\"DatabaseName: \").append(getDatabaseName()).append(\",\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema()).append(\",\");\r\n    if (getAwsSecretStoreArn() != null)\r\n        sb.append(\"AwsSecretStoreArn: \").append(getAwsSecretStoreArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateMethodRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.StartDeviceSyncResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAutoScalingNotificationTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingNotificationTypes() != null)\r\n        sb.append(\"AutoScalingNotificationTypes: \").append(getAutoScalingNotificationTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getForceDelete() != null)\r\n        sb.append(\"ForceDelete: \").append(getForceDelete());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Room.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getRoomName() != null)\r\n        sb.append(\"RoomName: \").append(getRoomName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getProviderCalendarId() != null)\r\n        sb.append(\"ProviderCalendarId: \").append(getProviderCalendarId()).append(\",\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroups() != null)\r\n        sb.append(\"AutoScalingGroups: \").append(getAutoScalingGroups()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetAddressBookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.failOnStaleLock",
	"Comment": "when set to true the operation will fail if a stale lock is detected",
	"Method": "ColumnPrefixDistributedRowLock<K> failOnStaleLock(boolean failOnStaleLock){\r\n    this.failOnStaleLock = failOnStaleLock;\r\n    return this;\r\n}"
}, {
	"Path": "aimax.osm.data.impl.KDTree.visitEntities",
	"Comment": "enables to iterate across all contained entities within a given region\tin an intelligent manner. only tree nodes, which have a chance to\tmeet the location requirement are visited.",
	"Method": "void visitEntities(EntityVisitor visitor,BoundingBox vbox,float scale){\r\n    if (!entities.isEmpty()) {\r\n        if (!isSorted) {\r\n            Collections.sort(entities, new EntityComparator());\r\n            isSorted = true;\r\n        }\r\n        VisibilityTest vtest = new VisibilityTest(bb, vbox);\r\n        for (DefaultMapEntity entity : entities) {\r\n            if (entity.getViewInfo().getMinVisibleScale() > scale)\r\n                break;\r\n            if (vtest.isVisible(entity))\r\n                entity.accept(visitor);\r\n        }\r\n    }\r\n    if (children != null) {\r\n        float vMin = (splitAtLat ? vbox.getLatMin() : vbox.getLonMin());\r\n        float vMax = (splitAtLat ? vbox.getLatMax() : vbox.getLonMax());\r\n        if (vMin <= splitValue)\r\n            children[0].visitEntities(visitor, vbox, scale);\r\n        if (vMax >= splitValue)\r\n            children[1].visitEntities(visitor, vbox, scale);\r\n    }\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.simple.VirtualRobot.performMove",
	"Comment": "lets the robot perform a move.\tas it is hard for a virtual robot to see which of its movements is valid without additional functionality in the map class,\ta randomly new pose on the map is selected. the rotation and the vector to the pose form the move.",
	"Method": "SimpleMove performMove(){\r\n    SimplePose newPose;\r\n    Vector2D vector;\r\n    do {\r\n        newPose = map.randomPose();\r\n        vector = pose.getPosition().vec(newPose.getPosition());\r\n    } while (vector.length() > maxMoveDistance || vector.length() < minMoveDistance);\r\n    final double vectorAngle = vector.angleTo(Vector2D.X_VECTOR);\r\n    final double firstRotation = vectorAngle - pose.getHeading();\r\n    final double lastRotation = newPose.getHeading() - vectorAngle;\r\n    pose = newPose;\r\n    return new SimpleMove(firstRotation, vector.length(), lastRotation);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.EnterStandbyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActivities() != null)\r\n        sb.append(\"Activities: \").append(getActivities());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.BatchGetNamedQueryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQueryIds() != null)\r\n        sb.append(\"NamedQueryIds: \").append(getNamedQueryIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.AddTagsToCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RevokeInvitationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserArn() != null)\r\n        sb.append(\"UserArn: \").append(getUserArn()).append(\",\");\r\n    if (getEnrollmentId() != null)\r\n        sb.append(\"EnrollmentId: \").append(getEnrollmentId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ComputeCapacityStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDesired() != null)\r\n        sb.append(\"Desired: \").append(getDesired()).append(\",\");\r\n    if (getRunning() != null)\r\n        sb.append(\"Running: \").append(getRunning()).append(\",\");\r\n    if (getInUse() != null)\r\n        sb.append(\"InUse: \").append(getInUse()).append(\",\");\r\n    if (getAvailable() != null)\r\n        sb.append(\"Available: \").append(getAvailable());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DeregisterScalableTargetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.environment.connectfour.ConnectFourAIPlayer.orderActions",
	"Comment": "orders actions with respect to the number of potential win positions\twhich profit from the action.",
	"Method": "List<Integer> orderActions(ConnectFourState state,List<Integer> actions,String player,int depth){\r\n    List<Integer> result = actions;\r\n    if (depth == 0) {\r\n        List<ActionValuePair<Integer>> actionEstimates = new ArrayList(actions.size());\r\n        for (Integer action : actions) actionEstimates.add(ActionValuePair.createFor(action, state.analyzePotentialWinPositions(action)));\r\n        Collections.sort(actionEstimates);\r\n        result = new ArrayList();\r\n        for (ActionValuePair<Integer> pair : actionEstimates) result.add(pair.getAction());\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateRestApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings()).append(\",\");\r\n    if (getBinaryMediaTypes() != null)\r\n        sb.append(\"BinaryMediaTypes: \").append(getBinaryMediaTypes()).append(\",\");\r\n    if (getMinimumCompressionSize() != null)\r\n        sb.append(\"MinimumCompressionSize: \").append(getMinimumCompressionSize()).append(\",\");\r\n    if (getApiKeySource() != null)\r\n        sb.append(\"ApiKeySource: \").append(getApiKeySource()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration()).append(\",\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ListCertificatesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getCertificateSummaryList() != null)\r\n        sb.append(\"CertificateSummaryList: \").append(getCertificateSummaryList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ListAssociatedFleetsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNames() != null)\r\n        sb.append(\"Names: \").append(getNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.OsmHandler.error",
	"Comment": "called by the sax parser when an error occurs. used by this class to\treport the current position in the file.",
	"Method": "void error(SAXParseException e){\r\n    LOG.severe(\"Unable to parse xml file.  publicId=(\" + documentLocator.getPublicId() + \"), systemId=(\" + documentLocator.getSystemId() + \"), lineNumber=\" + documentLocator.getLineNumber() + \", columnNumber=\" + documentLocator.getColumnNumber() + \".\");\r\n    super.error(e);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UntagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateRouteRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getRouteName() != null)\r\n        sb.append(\"RouteName: \").append(getRouteName()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserArn() != null)\r\n        sb.append(\"UserArn: \").append(getUserArn()).append(\",\");\r\n    if (getEnrollmentId() != null)\r\n        sb.append(\"EnrollmentId: \").append(getEnrollmentId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RoomData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getRoomName() != null)\r\n        sb.append(\"RoomName: \").append(getRoomName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getProviderCalendarId() != null)\r\n        sb.append(\"ProviderCalendarId: \").append(getProviderCalendarId()).append(\",\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn()).append(\",\");\r\n    if (getProfileName() != null)\r\n        sb.append(\"ProfileName: \").append(getProfileName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListVirtualNodesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getVirtualNodes() != null)\r\n        sb.append(\"VirtualNodes: \").append(getVirtualNodes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDocumentationVersionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListResolversByFunctionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResolvers() != null)\r\n        sb.append(\"Resolvers: \").append(getResolvers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationVersionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.CompleteLifecycleActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHookName() != null)\r\n        sb.append(\"LifecycleHookName: \").append(getLifecycleHookName()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLifecycleActionToken() != null)\r\n        sb.append(\"LifecycleActionToken: \").append(getLifecycleActionToken()).append(\",\");\r\n    if (getLifecycleActionResult() != null)\r\n        sb.append(\"LifecycleActionResult: \").append(getLifecycleActionResult()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RouteFindingAgentOsmApp.createEnvironment",
	"Comment": "factory method which creates a new environment based on the current\tparameter settings.",
	"Method": "MapEnvironment createEnvironment(){\r\n    return new MapEnvironment(map);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazonalexaforbusiness using the current builder configuration.",
	"Method": "AmazonAlexaForBusiness build(AwsSyncClientParams params){\r\n    return new AmazonAlexaForBusinessClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetBasePathMappingRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.ihongqiqu.util.FileUtils.writeFile",
	"Comment": "write file, the string list will be written to the begin of the file",
	"Method": "boolean writeFile(String filePath,String content,boolean append,boolean writeFile,String filePath,List<String> contentList,boolean append,boolean writeFile,String filePath,String content,boolean writeFile,String filePath,List<String> contentList,boolean writeFile,String filePath,InputStream stream,boolean writeFile,String filePath,InputStream stream,boolean append,boolean writeFile,File file,InputStream stream,boolean writeFile,File file,InputStream stream,boolean append){\r\n    OutputStream o = null;\r\n    try {\r\n        makeDirs(file.getAbsolutePath());\r\n        o = new FileOutputStream(file, append);\r\n        byte[] data = new byte[1024];\r\n        int length = -1;\r\n        while ((length = stream.read(data)) != -1) {\r\n            o.write(data, 0, length);\r\n        }\r\n        o.flush();\r\n        return true;\r\n    } catch (FileNotFoundException e) {\r\n        throw new RuntimeException(\"FileNotFoundException occurred. \", e);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(\"IOException occurred. \", e);\r\n    } finally {\r\n        if (o != null) {\r\n            try {\r\n                o.close();\r\n                stream.close();\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(\"IOException occurred. \", e);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateAuthorizerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getProviderARNs() != null)\r\n        sb.append(\"ProviderARNs: \").append(getProviderARNs()).append(\",\");\r\n    if (getAuthType() != null)\r\n        sb.append(\"AuthType: \").append(getAuthType()).append(\",\");\r\n    if (getAuthorizerUri() != null)\r\n        sb.append(\"AuthorizerUri: \").append(getAuthorizerUri()).append(\",\");\r\n    if (getAuthorizerCredentials() != null)\r\n        sb.append(\"AuthorizerCredentials: \").append(getAuthorizerCredentials()).append(\",\");\r\n    if (getIdentitySource() != null)\r\n        sb.append(\"IdentitySource: \").append(getIdentitySource()).append(\",\");\r\n    if (getIdentityValidationExpression() != null)\r\n        sb.append(\"IdentityValidationExpression: \").append(getIdentityValidationExpression()).append(\",\");\r\n    if (getAuthorizerResultTtlInSeconds() != null)\r\n        sb.append(\"AuthorizerResultTtlInSeconds: \").append(getAuthorizerResultTtlInSeconds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateAccountRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.paintComponent",
	"Comment": "shows a graphical representation of the provided map data.",
	"Method": "void paintComponent(Graphics g){\r\n    if (image == null || image.getWidth(null) != getWidth() || image.getHeight(null) != getHeight()) {\r\n        isImageUpToDate = false;\r\n    }\r\n    if (!isImageUpToDate)\r\n        updateOffScreenImage();\r\n    g.drawImage(image, 0, 0, this);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeAutoScalingGroupsAsync",
	"Comment": "simplified method form for invoking the describeautoscalinggroups operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync(DescribeAutoScalingGroupsRequest request,java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync,DescribeAutoScalingGroupsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingGroupsRequest, DescribeAutoScalingGroupsResult> asyncHandler,java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync,java.util.concurrent.Future<DescribeAutoScalingGroupsResult> describeAutoScalingGroupsAsync,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingGroupsRequest, DescribeAutoScalingGroupsResult> asyncHandler){\r\n    return describeAutoScalingGroupsAsync(new DescribeAutoScalingGroupsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeScheduledActionsAsync",
	"Comment": "simplified method form for invoking the describescheduledactions operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync(DescribeScheduledActionsRequest request,java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync,DescribeScheduledActionsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeScheduledActionsRequest, DescribeScheduledActionsResult> asyncHandler,java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync,java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync,com.amazonaws.handlers.AsyncHandler<DescribeScheduledActionsRequest, DescribeScheduledActionsResult> asyncHandler){\r\n    return describeScheduledActionsAsync(new DescribeScheduledActionsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.CreateCertificateAuthorityAuditReportResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuditReportId() != null)\r\n        sb.append(\"AuditReportId: \").append(getAuditReportId()).append(\",\");\r\n    if (getS3Key() != null)\r\n        sb.append(\"S3Key: \").append(getS3Key());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateRequestValidatorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getRequestValidatorId() != null)\r\n        sb.append(\"RequestValidatorId: \").append(getRequestValidatorId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.viewer.CoordTransformer.getDotsPerUnit",
	"Comment": "returns a factor for converting logical symbol size units into screen dots.",
	"Method": "float getDotsPerUnit(){\r\n    return dotsPerInch / unitsPerInch;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.UntagCertificateAuthorityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDeploymentsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RoomSkillParameter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterKey() != null)\r\n        sb.append(\"ParameterKey: \").append(getParameterKey()).append(\",\");\r\n    if (getParameterValue() != null)\r\n        sb.append(\"ParameterValue: \").append(getParameterValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.SetInstanceHealthResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateFleetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getImageName() != null)\r\n        sb.append(\"ImageName: \").append(getImageName()).append(\",\");\r\n    if (getImageArn() != null)\r\n        sb.append(\"ImageArn: \").append(getImageArn()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getFleetType() != null)\r\n        sb.append(\"FleetType: \").append(getFleetType()).append(\",\");\r\n    if (getComputeCapacity() != null)\r\n        sb.append(\"ComputeCapacity: \").append(getComputeCapacity()).append(\",\");\r\n    if (getVpcConfig() != null)\r\n        sb.append(\"VpcConfig: \").append(getVpcConfig()).append(\",\");\r\n    if (getMaxUserDurationInSeconds() != null)\r\n        sb.append(\"MaxUserDurationInSeconds: \").append(getMaxUserDurationInSeconds()).append(\",\");\r\n    if (getDisconnectTimeoutInSeconds() != null)\r\n        sb.append(\"DisconnectTimeoutInSeconds: \").append(getDisconnectTimeoutInSeconds()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getEnableDefaultInternetAccess() != null)\r\n        sb.append(\"EnableDefaultInternetAccess: \").append(getEnableDefaultInternetAccess()).append(\",\");\r\n    if (getDomainJoinInfo() != null)\r\n        sb.append(\"DomainJoinInfo: \").append(getDomainJoinInfo());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.impl.KDTree.insertEntity",
	"Comment": "adds an entity at the right position in the tree and extends\tthe tree if necessary. it is assumed that the entity contains\tview information.",
	"Method": "void insertEntity(DefaultMapEntity entity){\r\n    if (children == null) {\r\n        entities.add(entity);\r\n        isSorted = false;\r\n        if (entities.size() > maxEntities && depth < maxDepth) {\r\n            computeSplitValues();\r\n            BoundingBox c1bb;\r\n            BoundingBox c2bb;\r\n            if (splitAtLat) {\r\n                c1bb = new BoundingBox(bb.getLatMin(), bb.getLonMin(), splitValue, bb.getLonMax());\r\n                c2bb = new BoundingBox(splitValue, bb.getLonMin(), bb.getLatMax(), bb.getLonMax());\r\n            } else {\r\n                c1bb = new BoundingBox(bb.getLatMin(), bb.getLonMin(), bb.getLatMax(), splitValue);\r\n                c2bb = new BoundingBox(bb.getLatMin(), splitValue, bb.getLatMax(), bb.getLonMax());\r\n            }\r\n            children = new KDTree[2];\r\n            children[0] = new KDTree(c1bb, maxEntities, maxDepth, depth + 1);\r\n            children[1] = new KDTree(c2bb, maxEntities, maxDepth, depth + 1);\r\n            List<DefaultMapEntity> tmp = entities;\r\n            entities = new ArrayList<DefaultMapEntity>();\r\n            for (DefaultMapEntity ne : tmp) insertEntity(ne);\r\n        }\r\n    } else {\r\n        int cr = (splitAtLat ? entity.compareLatitude(splitValue) : entity.compareLongitude(splitValue));\r\n        if (cr < 0)\r\n            children[0].insertEntity(entity);\r\n        else if (cr > 0)\r\n            children[1].insertEntity(entity);\r\n        else {\r\n            entities.add(entity);\r\n            isSorted = false;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutIntegrationResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getSelectionPattern() != null)\r\n        sb.append(\"SelectionPattern: \").append(getSelectionPattern()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.StopQueryExecutionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionId() != null)\r\n        sb.append(\"QueryExecutionId: \").append(getQueryExecutionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.uniqueness.ColumnPrefixUniquenessConstraint.withUniqueId",
	"Comment": "specify the unique value to use for the column name when doing the uniquenessconstraint.in many cases this will be a timeuuid that is used as the rowkey to store the actual data for the unique key tracked in this columnfamily.",
	"Method": "ColumnPrefixUniquenessConstraint<K> withUniqueId(String unique){\r\n    lock.withLockId(unique);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobSummary() != null)\r\n        sb.append(\"JobSummary: \").append(getJobSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.Fleet.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getImageName() != null)\r\n        sb.append(\"ImageName: \").append(getImageName()).append(\",\");\r\n    if (getImageArn() != null)\r\n        sb.append(\"ImageArn: \").append(getImageArn()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getFleetType() != null)\r\n        sb.append(\"FleetType: \").append(getFleetType()).append(\",\");\r\n    if (getComputeCapacityStatus() != null)\r\n        sb.append(\"ComputeCapacityStatus: \").append(getComputeCapacityStatus()).append(\",\");\r\n    if (getMaxUserDurationInSeconds() != null)\r\n        sb.append(\"MaxUserDurationInSeconds: \").append(getMaxUserDurationInSeconds()).append(\",\");\r\n    if (getDisconnectTimeoutInSeconds() != null)\r\n        sb.append(\"DisconnectTimeoutInSeconds: \").append(getDisconnectTimeoutInSeconds()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getVpcConfig() != null)\r\n        sb.append(\"VpcConfig: \").append(getVpcConfig()).append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime()).append(\",\");\r\n    if (getFleetErrors() != null)\r\n        sb.append(\"FleetErrors: \").append(getFleetErrors()).append(\",\");\r\n    if (getEnableDefaultInternetAccess() != null)\r\n        sb.append(\"EnableDefaultInternetAccess: \").append(getEnableDefaultInternetAccess()).append(\",\");\r\n    if (getDomainJoinInfo() != null)\r\n        sb.append(\"DomainJoinInfo: \").append(getDomainJoinInfo());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.RestoreCertificateAuthorityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetModelTemplateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getModelName() != null)\r\n        sb.append(\"ModelName: \").append(getModelName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.mdp.search.PolicyIteration.policyIteration",
	"Comment": "the policy iteration algorithm for calculating an optimal policy.",
	"Method": "Policy<S, A> policyIteration(MarkovDecisionProcess<S, A> mdp){\r\n    Map<S, Double> U = Util.create(mdp.states(), new Double(0));\r\n    Map<S, A> pi = initialPolicyVector(mdp);\r\n    boolean unchanged;\r\n    do {\r\n        U = policyEvaluation.evaluate(pi, U, mdp);\r\n        unchanged = true;\r\n        for (S s : mdp.states()) {\r\n            double aMax = Double.NEGATIVE_INFINITY, piVal = 0;\r\n            A aArgmax = pi.get(s);\r\n            for (A a : mdp.actions(s)) {\r\n                double aSum = 0;\r\n                for (S sDelta : mdp.states()) {\r\n                    aSum += mdp.transitionProbability(sDelta, s, a) * U.get(sDelta);\r\n                }\r\n                if (aSum > aMax) {\r\n                    aMax = aSum;\r\n                    aArgmax = a;\r\n                }\r\n                if (a.equals(pi.get(s))) {\r\n                    piVal = aSum;\r\n                }\r\n            }\r\n            if (aMax > piVal) {\r\n                pi.put(s, aArgmax);\r\n                unchanged = false;\r\n            }\r\n        }\r\n    } while (!unchanged);\r\n    return new LookupPolicy<S, A>(pi);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetGraphqlApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGraphqlApi() != null)\r\n        sb.append(\"GraphqlApi: \").append(getGraphqlApi());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.AuthorizationConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthorizationType() != null)\r\n        sb.append(\"AuthorizationType: \").append(getAuthorizationType()).append(\",\");\r\n    if (getAwsIamConfig() != null)\r\n        sb.append(\"AwsIamConfig: \").append(getAwsIamConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.local.GeneticAlgorithm.nextGeneration",
	"Comment": "primitive operation which is responsible for creating the next\tgeneration. override to get progress information!",
	"Method": "List<Individual<A>> nextGeneration(List<Individual<A>> population,FitnessFunction<A> fitnessFn){\r\n    List<Individual<A>> newPopulation = new ArrayList<Individual<A>>(population.size());\r\n    for (int i = 0; i < population.size(); i++) {\r\n        Individual<A> x = randomSelection(population, fitnessFn);\r\n        Individual<A> y = randomSelection(population, fitnessFn);\r\n        Individual<A> child = reproduce(x, y);\r\n        if (random.nextDouble() <= mutationProbability) {\r\n            child = mutate(child);\r\n        }\r\n        newPopulation.add(child);\r\n    }\r\n    notifyProgressTrackers(getIterations(), population);\r\n    return newPopulation;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateAuthorizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getProviderARNs() != null)\r\n        sb.append(\"ProviderARNs: \").append(getProviderARNs()).append(\",\");\r\n    if (getAuthType() != null)\r\n        sb.append(\"AuthType: \").append(getAuthType()).append(\",\");\r\n    if (getAuthorizerUri() != null)\r\n        sb.append(\"AuthorizerUri: \").append(getAuthorizerUri()).append(\",\");\r\n    if (getAuthorizerCredentials() != null)\r\n        sb.append(\"AuthorizerCredentials: \").append(getAuthorizerCredentials()).append(\",\");\r\n    if (getIdentitySource() != null)\r\n        sb.append(\"IdentitySource: \").append(getIdentitySource()).append(\",\");\r\n    if (getIdentityValidationExpression() != null)\r\n        sb.append(\"IdentityValidationExpression: \").append(getIdentityValidationExpression()).append(\",\");\r\n    if (getAuthorizerResultTtlInSeconds() != null)\r\n        sb.append(\"AuthorizerResultTtlInSeconds: \").append(getAuthorizerResultTtlInSeconds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteModelRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getModelName() != null)\r\n        sb.append(\"ModelName: \").append(getModelName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.MetricGranularityType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGranularity() != null)\r\n        sb.append(\"Granularity: \").append(getGranularity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAClient.getCertificate",
	"Comment": "retrieves a certificate from your private ca. the arn of the certificate is returned when you call theissuecertificate operation. you must specify both the arn of your private ca and the arn of the issuedcertificate when calling the getcertificate operation. you can retrieve the certificate if it is in theissued state. you can call the createcertificateauthorityauditreport operation to create a reportthat contains information about all of the certificates issued and revoked by your private ca.",
	"Method": "GetCertificateResult getCertificate(GetCertificateRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetCertificate(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.detachLoadBalancersAsync",
	"Comment": "simplified method form for invoking the detachloadbalancers operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync(DetachLoadBalancersRequest request,java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync,DetachLoadBalancersRequest request,com.amazonaws.handlers.AsyncHandler<DetachLoadBalancersRequest, DetachLoadBalancersResult> asyncHandler,java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync,java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync,com.amazonaws.handlers.AsyncHandler<DetachLoadBalancersRequest, DetachLoadBalancersResult> asyncHandler){\r\n    return detachLoadBalancersAsync(new DetachLoadBalancersRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.expireLockAfter",
	"Comment": "time for failed locks. under normal circumstances the lock column will bedeleted. if not then this lock column will remain and the row will remainlocked. the lock will expire after this timeout.",
	"Method": "OneStepDistributedRowLock<K, C> expireLockAfter(long timeout,TimeUnit unit){\r\n    this.timeout = timeout;\r\n    this.timeoutUnits = unit;\r\n    return this;\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.HostConnectionPoolPartition.setPools",
	"Comment": "sets all pools for this partition. removes old partitions and adds newone.",
	"Method": "boolean setPools(Collection<HostConnectionPool<CL>> newPools){\r\n    Set<HostConnectionPool<CL>> toRemove = Sets.newHashSet(this.pools);\r\n    boolean didChange = false;\r\n    for (HostConnectionPool<CL> pool : newPools) {\r\n        if (this.pools.add(pool))\r\n            didChange = true;\r\n        toRemove.remove(pool);\r\n    }\r\n    for (HostConnectionPool<CL> pool : toRemove) {\r\n        if (this.pools.remove(pool))\r\n            didChange = true;\r\n    }\r\n    if (didChange)\r\n        refresh();\r\n    return didChange;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteDirectoryConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryName() != null)\r\n        sb.append(\"DirectoryName: \").append(getDirectoryName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListFunctionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFunctions() != null)\r\n        sb.append(\"Functions: \").append(getFunctions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateDomainNameRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getCertificateName() != null)\r\n        sb.append(\"CertificateName: \").append(getCertificateName()).append(\",\");\r\n    if (getCertificateBody() != null)\r\n        sb.append(\"CertificateBody: \").append(getCertificateBody()).append(\",\");\r\n    if (getCertificatePrivateKey() != null)\r\n        sb.append(\"CertificatePrivateKey: \").append(getCertificatePrivateKey()).append(\",\");\r\n    if (getCertificateChain() != null)\r\n        sb.append(\"CertificateChain: \").append(getCertificateChain()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getRegionalCertificateName() != null)\r\n        sb.append(\"RegionalCertificateName: \").append(getRegionalCertificateName()).append(\",\");\r\n    if (getRegionalCertificateArn() != null)\r\n        sb.append(\"RegionalCertificateArn: \").append(getRegionalCertificateArn()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteFunctionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getFunctionId() != null)\r\n        sb.append(\"FunctionId: \").append(getFunctionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.MeetingSetting.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRequirePin() != null)\r\n        sb.append(\"RequirePin: \").append(getRequirePin());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.deleteBusinessReportSchedule",
	"Comment": "deletes the recurring report delivery schedule with the specified schedule arn.",
	"Method": "DeleteBusinessReportScheduleResult deleteBusinessReportSchedule(DeleteBusinessReportScheduleRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteBusinessReportSchedule(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDocumentationVersionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListGraphqlApisResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGraphqlApis() != null)\r\n        sb.append(\"GraphqlApis: \").append(getGraphqlApis()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "aima.core.logic.planning.hierarchicalsearch.HierarchicalSearchAlgorithm.refinements",
	"Comment": "the refinements function returns a set of action sequences,one for each refinement of the hla whose preconditions aresatisfied by the specified state, outcome.",
	"Method": "List<List<ActionSchema>> refinements(ActionSchema hla,State outcome){\r\n    List<List<ActionSchema>> result = new ArrayList();\r\n    for (List<ActionSchema> refinement : ((HighLevelAction) hla).getRefinements()) {\r\n        if (refinement.size() > 0) {\r\n            if (outcome.isApplicable(refinement.get(0)))\r\n                result.add(refinement);\r\n        } else\r\n            result.add(refinement);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncClient.createFunction",
	"Comment": "creates a function object.a function is a reusable entity. multiple functions can be used to compose the resolver logic.",
	"Method": "CreateFunctionResult createFunction(CreateFunctionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateFunction(request);\r\n}"
}, {
	"Path": "aimax.osm.routing.RouteCalculator.createHeuristicFunction",
	"Comment": "factory method, responsible for heuristic function creation.",
	"Method": "ToDoubleFunction<Node<MapNode, OsmMoveAction>> createHeuristicFunction(MapNode[] pNodes,int taskSelection){\r\n    return new OsmSldHeuristicFunction(pNodes[1]);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateVpcLinkResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTargetArns() != null)\r\n        sb.append(\"TargetArns: \").append(getTargetArns()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStatusMessage() != null)\r\n        sb.append(\"StatusMessage: \").append(getStatusMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAClient.listCertificateAuthorities",
	"Comment": "lists the private certificate authorities that you created by using the createcertificateauthorityoperation.",
	"Method": "ListCertificateAuthoritiesResult listCertificateAuthorities(ListCertificateAuthoritiesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListCertificateAuthorities(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.getCenterPosition",
	"Comment": "returns the world coordinates, which are currently shown in the center.",
	"Method": "Position getCenterPosition(){\r\n    float lat = getTransformer().lat(getHeight() / 2);\r\n    float lon = getTransformer().lon(getWidth() / 2);\r\n    return new Position(lat, lon);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DetachLoadBalancersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StorageConnector.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectorType() != null)\r\n        sb.append(\"ConnectorType: \").append(getConnectorType()).append(\",\");\r\n    if (getResourceIdentifier() != null)\r\n        sb.append(\"ResourceIdentifier: \").append(getResourceIdentifier()).append(\",\");\r\n    if (getDomains() != null)\r\n        sb.append(\"Domains: \").append(getDomains());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.fol.kb.FOLKnowledgeBaseFactory.createABCDEqualityAndSubstitutionKnowledgeBase",
	"Comment": "slide 16,17, and 18 for where this test example was taken from.",
	"Method": "FOLKnowledgeBase createABCDEqualityAndSubstitutionKnowledgeBase(InferenceProcedure infp,boolean includeEqualityAxioms){\r\n    FOLDomain domain = new FOLDomain();\r\n    domain.addConstant(\"A\");\r\n    domain.addConstant(\"B\");\r\n    domain.addConstant(\"C\");\r\n    domain.addConstant(\"D\");\r\n    domain.addPredicate(\"P\");\r\n    domain.addFunction(\"F\");\r\n    FOLKnowledgeBase kb = new FOLKnowledgeBase(domain, infp);\r\n    kb.tell(\"F(A) = B\");\r\n    kb.tell(\"F(B) = A\");\r\n    kb.tell(\"C = D\");\r\n    kb.tell(\"P(A)\");\r\n    kb.tell(\"P(C)\");\r\n    if (includeEqualityAxioms) {\r\n        kb.tell(\"x = x\");\r\n        kb.tell(\"(x = y => y = x)\");\r\n        kb.tell(\"((x = y AND y = z) => x = z)\");\r\n        kb.tell(\"((x = y AND F(y) = z) => F(x) = z)\");\r\n        kb.tell(\"((x = y AND P(y)) => P(x))\");\r\n    }\r\n    return kb;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.kodedu.controller.CacheResource.copy",
	"Comment": "copy the given byte range of the given input to the given output.",
	"Method": "void copy(CacheData input,OutputStream output,long start,long length){\r\n    byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\r\n    int read;\r\n    if (input.length() == length) {\r\n        while ((read = input.read(buffer)) > 0) {\r\n            output.write(buffer, 0, read);\r\n        }\r\n    } else {\r\n        input.seek(start);\r\n        long toRead = length;\r\n        while ((read = input.read(buffer)) > 0) {\r\n            if ((toRead -= read) > 0) {\r\n                output.write(buffer, 0, read);\r\n            } else {\r\n                output.write(buffer, 0, (int) toRead + read);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.SimpleHostConnectionPool.markAsDown",
	"Comment": "mark the host as down. no new connections will be created from this host.connections currently in use will be allowed to continue processing.",
	"Method": "void markAsDown(ConnectionException reason){\r\n    if (isReconnecting.compareAndSet(false, true)) {\r\n        markedDownCount.incrementAndGet();\r\n        if (reason != null && !(reason instanceof TimeoutException)) {\r\n            discardIdleConnections();\r\n        }\r\n        listener.onHostDown(this);\r\n        monitor.onHostDown(getHost(), reason);\r\n        retryContext.begin();\r\n        try {\r\n            long delay = retryContext.getNextDelay();\r\n            executor.schedule(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Thread.currentThread().setName(\"RetryService : \" + host.getName());\r\n                    try {\r\n                        if (activeCount.get() == 0)\r\n                            reconnect();\r\n                        try {\r\n                            retryContext.success();\r\n                            if (isReconnecting.compareAndSet(true, false)) {\r\n                                monitor.onHostReactivated(host, SimpleHostConnectionPool.this);\r\n                                listener.onHostUp(SimpleHostConnectionPool.this);\r\n                            }\r\n                        } catch (Throwable t) {\r\n                            LOG.error(\"Error reconnecting client\", t);\r\n                        }\r\n                        return;\r\n                    } catch (Throwable t) {\r\n                    }\r\n                    if (!isShutdown()) {\r\n                        long delay = retryContext.getNextDelay();\r\n                        executor.schedule(this, delay, TimeUnit.MILLISECONDS);\r\n                    }\r\n                }\r\n            }, delay, TimeUnit.MILLISECONDS);\r\n        } catch (Exception e) {\r\n            LOG.error(\"Failed to schedule retry task for \" + host.getHostName(), e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.SimpleHostConnectionPool.markAsDown",
	"Comment": "mark the host as down. no new connections will be created from this host.connections currently in use will be allowed to continue processing.",
	"Method": "void markAsDown(ConnectionException reason){\r\n    Thread.currentThread().setName(\"RetryService : \" + host.getName());\r\n    try {\r\n        if (activeCount.get() == 0)\r\n            reconnect();\r\n        try {\r\n            retryContext.success();\r\n            if (isReconnecting.compareAndSet(true, false)) {\r\n                monitor.onHostReactivated(host, SimpleHostConnectionPool.this);\r\n                listener.onHostUp(SimpleHostConnectionPool.this);\r\n            }\r\n        } catch (Throwable t) {\r\n            LOG.error(\"Error reconnecting client\", t);\r\n        }\r\n        return;\r\n    } catch (Throwable t) {\r\n    }\r\n    if (!isShutdown()) {\r\n        long delay = retryContext.getNextDelay();\r\n        executor.schedule(this, delay, TimeUnit.MILLISECONDS);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeFleetsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNames() != null)\r\n        sb.append(\"Names: \").append(getNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.deleteNamedQuery",
	"Comment": "deletes a named query.for code samples using the aws sdk for java, see examples and code samples in theamazon athena user guide.",
	"Method": "DeleteNamedQueryResult deleteNamedQuery(DeleteNamedQueryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteNamedQuery(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLaunchConfigurations() != null)\r\n        sb.append(\"LaunchConfigurations: \").append(getLaunchConfigurations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetMethodResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getAuthorizationType() != null)\r\n        sb.append(\"AuthorizationType: \").append(getAuthorizationType()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId()).append(\",\");\r\n    if (getApiKeyRequired() != null)\r\n        sb.append(\"ApiKeyRequired: \").append(getApiKeyRequired()).append(\",\");\r\n    if (getRequestValidatorId() != null)\r\n        sb.append(\"RequestValidatorId: \").append(getRequestValidatorId()).append(\",\");\r\n    if (getOperationName() != null)\r\n        sb.append(\"OperationName: \").append(getOperationName()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestModels() != null)\r\n        sb.append(\"RequestModels: \").append(getRequestModels()).append(\",\");\r\n    if (getMethodResponses() != null)\r\n        sb.append(\"MethodResponses: \").append(getMethodResponses()).append(\",\");\r\n    if (getMethodIntegration() != null)\r\n        sb.append(\"MethodIntegration: \").append(getMethodIntegration()).append(\",\");\r\n    if (getAuthorizationScopes() != null)\r\n        sb.append(\"AuthorizationScopes: \").append(getAuthorizationScopes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteBasePathMappingResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Filter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetStageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListSmartHomeAppliancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSmartHomeAppliances() != null)\r\n        sb.append(\"SmartHomeAppliances: \").append(getSmartHomeAppliances()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.uniqueness.MultiRowUniquenessConstraint.withColumnPrefix",
	"Comment": "specify the prefix that uniquely distinguishes the lock columns from datacolumns",
	"Method": "MultiRowUniquenessConstraint withColumnPrefix(String prefix){\r\n    this.prefix = prefix;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gps.GpsLocator.messageReceived",
	"Comment": "parses the position data currently in buffer, updates the\tthe current position and informs all interested listeners.",
	"Method": "void messageReceived(String message){\r\n    if (message.startsWith(\"$GPGGA\")) {\r\n        String[] mparts = message.split(\",\");\r\n        if (mparts.length != 15)\r\n            return;\r\n        boolean posOK = true;\r\n        float lat;\r\n        float lon;\r\n        if (mparts[6].equals(\"0\"))\r\n            posOK = false;\r\n        float deg = Float.parseFloat(mparts[2].substring(0, 2));\r\n        float min = Float.parseFloat(mparts[2].substring(2));\r\n        lat = deg + min / 60.0f;\r\n        if (mparts[3].equals(\"S\"))\r\n            lat = -lat;\r\n        deg = Float.parseFloat(mparts[4].substring(0, 3));\r\n        min = Float.parseFloat(mparts[4].substring(3));\r\n        lon = deg + min / 60.0f;\r\n        if (mparts[5].equals(\"W\"))\r\n            lon = -lon;\r\n        currPosition = new GpsFix(posOK, lat, lon);\r\n        for (GpsPositionListener listener : listeners) listener.positionUpdated(currPosition);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DeregisterScalableTargetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ResolveRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getRoomName() != null)\r\n        sb.append(\"RoomName: \").append(getRoomName()).append(\",\");\r\n    if (getRoomSkillParameters() != null)\r\n        sb.append(\"RoomSkillParameters: \").append(getRoomSkillParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.Util.rest",
	"Comment": "get a sublist of all of the elements in the list except for first.",
	"Method": "List<T> rest(List<T> l){\r\n    return l.subList(1, l.size());\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.viewer.MapPaneCtrl.showMapEntityInfoDialog",
	"Comment": "finds the visible entity next to the specified view coordinates and showsinformations about it.",
	"Method": "void showMapEntityInfoDialog(MapEntity entity,boolean debug){\r\n    List<MapEntity> entities = new ArrayList();\r\n    if (entity.getName() != null || entity.getAttributes().length > 0 || debug)\r\n        entities.add(entity);\r\n    if (entity instanceof MapNode) {\r\n        MapNode mNode = (MapNode) entity;\r\n        for (WayRef ref : mNode.getWayRefs()) {\r\n            MapEntity me = ref.getWay();\r\n            if (me.getName() != null || me.getAttributes().length > 0 || debug)\r\n                entities.add(me);\r\n        }\r\n    }\r\n    for (MapEntity me : entities) {\r\n        String header = (me.getName() != null) ? me.getName() : \"\";\r\n        StringBuilder content = new StringBuilder();\r\n        if (debug)\r\n            header += \" (\" + ((me instanceof MapNode) ? \"Node \" : \"Way \") + me.getId() + \")\";\r\n        if (me instanceof MapNode) {\r\n            content.append(\"Lat: \").append(((MapNode) me).getLat()).append(\" Lon: \").append(((MapNode) me).getLon()).append(\" \");\r\n        }\r\n        if (me.getAttributes().length > 0) {\r\n            EntityAttribute[] atts = me.getAttributes();\r\n            content.append(\"Attributs: \");\r\n            for (EntityAttribute att : atts) {\r\n                content.append(att.getKey()).append(\"=\").append(att.getValue()).append(\" \");\r\n            }\r\n        }\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(\"Map Entity Info\");\r\n        alert.setHeaderText(header);\r\n        alert.setContentText(content.toString());\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n        if (!result.isPresent())\r\n            break;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDomainNameRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.IntegrationResponse.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getSelectionPattern() != null)\r\n        sb.append(\"SelectionPattern: \").append(getSelectionPattern()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlansRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getKeyId() != null)\r\n        sb.append(\"KeyId: \").append(getKeyId()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeMetricCollectionTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetrics() != null)\r\n        sb.append(\"Metrics: \").append(getMetrics()).append(\",\");\r\n    if (getGranularities() != null)\r\n        sb.append(\"Granularities: \").append(getGranularities());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateIntegrationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getUri() != null)\r\n        sb.append(\"Uri: \").append(getUri()).append(\",\");\r\n    if (getConnectionType() != null)\r\n        sb.append(\"ConnectionType: \").append(getConnectionType()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getCredentials() != null)\r\n        sb.append(\"Credentials: \").append(getCredentials()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestTemplates() != null)\r\n        sb.append(\"RequestTemplates: \").append(getRequestTemplates()).append(\",\");\r\n    if (getPassthroughBehavior() != null)\r\n        sb.append(\"PassthroughBehavior: \").append(getPassthroughBehavior()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling()).append(\",\");\r\n    if (getTimeoutInMillis() != null)\r\n        sb.append(\"TimeoutInMillis: \").append(getTimeoutInMillis()).append(\",\");\r\n    if (getCacheNamespace() != null)\r\n        sb.append(\"CacheNamespace: \").append(getCacheNamespace()).append(\",\");\r\n    if (getCacheKeyParameters() != null)\r\n        sb.append(\"CacheKeyParameters: \").append(getCacheKeyParameters()).append(\",\");\r\n    if (getIntegrationResponses() != null)\r\n        sb.append(\"IntegrationResponses: \").append(getIntegrationResponses());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateStackResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStack() != null)\r\n        sb.append(\"Stack: \").append(getStack());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetAuthorizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.deleteVirtualRouter",
	"Comment": "deletes an existing virtual router.you must delete any routes associated with the virtual router before you can delete the router itself.",
	"Method": "DeleteVirtualRouterResult deleteVirtualRouter(DeleteVirtualRouterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteVirtualRouter(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetGatewayResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getDefaultResponse() != null)\r\n        sb.append(\"DefaultResponse: \").append(getDefaultResponse());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.Settings.registerSpecialSetting",
	"Comment": "registers a special setting identified by a given key. this special setting will be displayed in the gui.\tafter it has been registered the settings that were stored before are loaded into the fragment.",
	"Method": "void registerSpecialSetting(String key,SpecialSetting fragment){\r\n    specials.put(key, fragment);\r\n    order.add(key);\r\n    fragment.loadSettings(values);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateFleetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImageName() != null)\r\n        sb.append(\"ImageName: \").append(getImageName()).append(\",\");\r\n    if (getImageArn() != null)\r\n        sb.append(\"ImageArn: \").append(getImageArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getComputeCapacity() != null)\r\n        sb.append(\"ComputeCapacity: \").append(getComputeCapacity()).append(\",\");\r\n    if (getVpcConfig() != null)\r\n        sb.append(\"VpcConfig: \").append(getVpcConfig()).append(\",\");\r\n    if (getMaxUserDurationInSeconds() != null)\r\n        sb.append(\"MaxUserDurationInSeconds: \").append(getMaxUserDurationInSeconds()).append(\",\");\r\n    if (getDisconnectTimeoutInSeconds() != null)\r\n        sb.append(\"DisconnectTimeoutInSeconds: \").append(getDisconnectTimeoutInSeconds()).append(\",\");\r\n    if (getDeleteVpcConfig() != null)\r\n        sb.append(\"DeleteVpcConfig: \").append(getDeleteVpcConfig()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getEnableDefaultInternetAccess() != null)\r\n        sb.append(\"EnableDefaultInternetAccess: \").append(getEnableDefaultInternetAccess()).append(\",\");\r\n    if (getDomainJoinInfo() != null)\r\n        sb.append(\"DomainJoinInfo: \").append(getDomainJoinInfo()).append(\",\");\r\n    if (getAttributesToDelete() != null)\r\n        sb.append(\"AttributesToDelete: \").append(getAttributesToDelete());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateStreamingURLRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStackName() != null)\r\n        sb.append(\"StackName: \").append(getStackName()).append(\",\");\r\n    if (getFleetName() != null)\r\n        sb.append(\"FleetName: \").append(getFleetName()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getApplicationId() != null)\r\n        sb.append(\"ApplicationId: \").append(getApplicationId()).append(\",\");\r\n    if (getValidity() != null)\r\n        sb.append(\"Validity: \").append(getValidity()).append(\",\");\r\n    if (getSessionContext() != null)\r\n        sb.append(\"SessionContext: \").append(getSessionContext());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.StartSmartHomeApplianceDiscoveryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeSessionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStackName() != null)\r\n        sb.append(\"StackName: \").append(getStackName()).append(\",\");\r\n    if (getFleetName() != null)\r\n        sb.append(\"FleetName: \").append(getFleetName()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetIntrospectionSchemaResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateDocumentationVersionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.deregisterScalableTarget",
	"Comment": "deregisters a scalable target.deregistering a scalable target deletes the scaling policies that are associated with it.to create a scalable target or update an existing one, see registerscalabletarget.",
	"Method": "DeregisterScalableTargetResult deregisterScalableTarget(DeregisterScalableTargetRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeregisterScalableTarget(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateMeshResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMesh() != null)\r\n        sb.append(\"Mesh: \").append(getMesh());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RejectSkillResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDeploymentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getEmbed() != null)\r\n        sb.append(\"Embed: \").append(getEmbed());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.ihongqiqu.util.RandomUtils.shuffle",
	"Comment": "shuffling algorithm, randomly permutes the specified int array",
	"Method": "boolean shuffle(Object[] objArray,boolean shuffle,Object[] objArray,int shuffleCount,int[] shuffle,int[] intArray,int[] shuffle,int[] intArray,int shuffleCount){\r\n    int length;\r\n    if (intArray == null || shuffleCount < 0 || (length = intArray.length) < shuffleCount) {\r\n        return null;\r\n    }\r\n    int[] out = new int[shuffleCount];\r\n    for (int i = 1; i <= shuffleCount; i++) {\r\n        int random = getRandom(length - i);\r\n        out[i - 1] = intArray[random];\r\n        int temp = intArray[length - i];\r\n        intArray[length - i] = intArray[random];\r\n        intArray[random] = temp;\r\n    }\r\n    return out;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetRequestValidatorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getRequestValidatorId() != null)\r\n        sb.append(\"RequestValidatorId: \").append(getRequestValidatorId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.csp.CSP.removeValueFromDomain",
	"Comment": "replaces the domain of the specified variable by new domain, whichcontains all values of the old domain except the specified value.",
	"Method": "boolean removeValueFromDomain(VAR var,VAL value){\r\n    Domain<VAL> currDomain = getDomain(var);\r\n    List<VAL> values = new ArrayList(currDomain.size());\r\n    for (VAL v : currDomain) if (!v.equals(value))\r\n        values.add(v);\r\n    if (values.size() < currDomain.size()) {\r\n        setDomain(var, new Domain(values));\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "aimax.osm.reader.OsmReader.createFileStream",
	"Comment": "factory method, responsible for creating an input stream for a\tspecified file.",
	"Method": "InputStream createFileStream(File file){\r\n    return new FileInputStream(file);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.CreateCertificateAuthorityAuditReportRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName()).append(\",\");\r\n    if (getAuditReportResponseFormat() != null)\r\n        sb.append(\"AuditReportResponseFormat: \").append(getAuditReportResponseFormat());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.HostConnectionPoolPartition.isSorted",
	"Comment": "if true the the hosts are sorted by order of priority where the first host gives the best performance",
	"Method": "boolean isSorted(){\r\n    return prioritize.get();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.parsing.ast.PropositionSymbol.isPropositionSymbolIdentifierPart",
	"Comment": "determine if the given character is part of a proposition symbol.",
	"Method": "boolean isPropositionSymbolIdentifierPart(char ch){\r\n    return Character.isJavaIdentifierPart(ch);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.NodeExpander.expand",
	"Comment": "returns the children obtained from expanding the specified node in the\tspecified problem.",
	"Method": "List<Node<S, A>> expand(Node<S, A> node,Problem<S, A> problem){\r\n    List<Node<S, A>> successors = new ArrayList();\r\n    for (A action : problem.getActions(node.getState())) {\r\n        S successorState = problem.getResult(node.getState(), action);\r\n        double stepCost = problem.getStepCosts(node.getState(), action, successorState);\r\n        successors.add(createNode(successorState, node, action, stepCost));\r\n    }\r\n    notifyNodeListeners(node);\r\n    return successors;\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListDataSourcesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.BatchDeleteScheduledActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getScheduledActionNames() != null)\r\n        sb.append(\"ScheduledActionNames: \").append(getScheduledActionNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteRoomSkillParameterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId()).append(\",\");\r\n    if (getParameterKey() != null)\r\n        sb.append(\"ParameterKey: \").append(getParameterKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncClient.listResolversByFunction",
	"Comment": "list the resolvers that are associated with a specific function.",
	"Method": "ListResolversByFunctionResult listResolversByFunction(ListResolversByFunctionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListResolversByFunction(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CanarySettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPercentTraffic() != null)\r\n        sb.append(\"PercentTraffic: \").append(getPercentTraffic()).append(\",\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getStageVariableOverrides() != null)\r\n        sb.append(\"StageVariableOverrides: \").append(getStageVariableOverrides()).append(\",\");\r\n    if (getUseStageCache() != null)\r\n        sb.append(\"UseStageCache: \").append(getUseStageCache());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomName() != null)\r\n        sb.append(\"RoomName: \").append(getRoomName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn()).append(\",\");\r\n    if (getProviderCalendarId() != null)\r\n        sb.append(\"ProviderCalendarId: \").append(getProviderCalendarId()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.GetCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.getCertificate",
	"Comment": "retrieves a certificate specified by an arn and its certificate chain . the chain is an ordered list ofcertificates that contains the end entity certificate, intermediate certificates of subordinate cas, and the rootcertificate in that order. the certificate and certificate chain are base64 encoded. if you want to decode thecertificate to see the individual fields, you can use openssl.",
	"Method": "GetCertificateResult getCertificate(GetCertificateRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetCertificate(request);\r\n}"
}, {
	"Path": "com.netflix.astyanax.cql.JavaDriverConnectionPoolMonitorImpl.getNumOpenConnections",
	"Comment": "returns the total number of currently opened connections to cassandra hosts.",
	"Method": "long getNumOpenConnections(){\r\n    return cluster.get().getMetrics().getOpenConnections().getValue();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.RemoveTagsFromCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.MetricDimension.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.informed.RecursiveBestFirstSearch.updateMetrics",
	"Comment": "increases the maximum recursive depth if the specified depth is greaterthan the current maximum.",
	"Method": "void updateMetrics(int recursiveDepth){\r\n    int maxRdepth = metrics.getInt(METRIC_MAX_RECURSIVE_DEPTH);\r\n    if (recursiveDepth > maxRdepth) {\r\n        metrics.set(METRIC_MAX_RECURSIVE_DEPTH, recursiveDepth);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationPartsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getNameQuery() != null)\r\n        sb.append(\"NameQuery: \").append(getNameQuery()).append(\",\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getLocationStatus() != null)\r\n        sb.append(\"LocationStatus: \").append(getLocationStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetModelResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.MetricDimension.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.deleteImage",
	"Comment": "deletes the specified image. you cannot delete an image when it is in use. after you delete an image, you cannotprovision new capacity using the image.",
	"Method": "DeleteImageResult deleteImage(DeleteImageRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteImage(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateConferenceProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferenceProviderName() != null)\r\n        sb.append(\"ConferenceProviderName: \").append(getConferenceProviderName()).append(\",\");\r\n    if (getConferenceProviderType() != null)\r\n        sb.append(\"ConferenceProviderType: \").append(getConferenceProviderType()).append(\",\");\r\n    if (getIPDialIn() != null)\r\n        sb.append(\"IPDialIn: \").append(getIPDialIn()).append(\",\");\r\n    if (getPSTNDialIn() != null)\r\n        sb.append(\"PSTNDialIn: \").append(getPSTNDialIn()).append(\",\");\r\n    if (getMeetingSetting() != null)\r\n        sb.append(\"MeetingSetting: \").append(getMeetingSetting()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListBranchesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBranches() != null)\r\n        sb.append(\"Branches: \").append(getBranches()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.planning.GraphPlanAlgorithm.initialPlanningGraph",
	"Comment": "this method initialises the planning graph for a particular problem.",
	"Method": "Graph initialPlanningGraph(Problem problem){\r\n    Level initialLevel = new Level(null, problem);\r\n    return new Graph(problem, initialLevel);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.detachLoadBalancers",
	"Comment": "detaches one or more classic load balancers from the specified auto scaling group.this operation detaches only classic load balancers. if you have application load balancers, usedetachloadbalancertargetgroups instead.when you detach a load balancer, it enters the removing state while deregistering the instances inthe group. when all instances are deregistered, then you can no longer describe the load balancer usingdescribeloadbalancers. the instances remain running.",
	"Method": "DetachLoadBalancersResult detachLoadBalancers(DetachLoadBalancersRequest request,DetachLoadBalancersResult detachLoadBalancers){\r\n    return detachLoadBalancers(new DetachLoadBalancersRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.SharedImagePermissions.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedAccountId() != null)\r\n        sb.append(\"SharedAccountId: \").append(getSharedAccountId()).append(\",\");\r\n    if (getImagePermissions() != null)\r\n        sb.append(\"ImagePermissions: \").append(getImagePermissions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateStackRequest.withDeleteStorageConnectors",
	"Comment": "deletes the storage connectors currently enabled for the stack.",
	"Method": "UpdateStackRequest withDeleteStorageConnectors(Boolean deleteStorageConnectors){\r\n    setDeleteStorageConnectors(deleteStorageConnectors);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.TestInvokeMethodRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getPathWithQueryString() != null)\r\n        sb.append(\"PathWithQueryString: \").append(getPathWithQueryString()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody()).append(\",\");\r\n    if (getHeaders() != null)\r\n        sb.append(\"Headers: \").append(getHeaders()).append(\",\");\r\n    if (getMultiValueHeaders() != null)\r\n        sb.append(\"MultiValueHeaders: \").append(getMultiValueHeaders()).append(\",\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getStageVariables() != null)\r\n        sb.append(\"StageVariables: \").append(getStageVariables());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteMethodResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateUsagePlanKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getKeyId() != null)\r\n        sb.append(\"KeyId: \").append(getKeyId()).append(\",\");\r\n    if (getKeyType() != null)\r\n        sb.append(\"KeyType: \").append(getKeyType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateTypeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeScheduledActionsAsync",
	"Comment": "simplified method form for invoking the describescheduledactions operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync(DescribeScheduledActionsRequest request,java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync,DescribeScheduledActionsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeScheduledActionsRequest, DescribeScheduledActionsResult> asyncHandler,java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync,java.util.concurrent.Future<DescribeScheduledActionsResult> describeScheduledActionsAsync,com.amazonaws.handlers.AsyncHandler<DescribeScheduledActionsRequest, DescribeScheduledActionsResult> asyncHandler){\r\n    return describeScheduledActionsAsync(new DescribeScheduledActionsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateBusinessReportScheduleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduleArn() != null)\r\n        sb.append(\"ScheduleArn: \").append(getScheduleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteAuthorizerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetFunctionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getFunctionId() != null)\r\n        sb.append(\"FunctionId: \").append(getFunctionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.uninformed.DepthLimitedSearch.findActions",
	"Comment": "returns a list of actions to reach the goal if a goal was found, or empty.\tthe list itself can be empty if the initial state is a goal state.",
	"Method": "Optional<List<A>> findActions(Problem<S, A> p){\r\n    nodeExpander.useParentLinks(true);\r\n    Optional<Node<S, A>> node = findNode(p);\r\n    return !isCutoffResult(node) ? SearchUtils.toActions(node) : Optional.empty();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.VacuumView.getAgent",
	"Comment": "checks whether an agent is currently at the specified location and\treturns one of them if any.",
	"Method": "Agent getAgent(Object location){\r\n    VacuumEnvironment e = getVacuumEnv();\r\n    for (Agent a : e.getAgents()) if (location.equals(e.getAgentLocation(a)))\r\n        return a;\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.TagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.CreateCertificateAuthorityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.searchProfiles",
	"Comment": "searches room profiles and lists the ones that meet a set of filter criteria.",
	"Method": "SearchProfilesResult searchProfiles(SearchProfilesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSearchProfiles(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeTagsAsync",
	"Comment": "simplified method form for invoking the describetags operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync(DescribeTagsRequest request,java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync,DescribeTagsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeTagsRequest, DescribeTagsResult> asyncHandler,java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync,java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync,com.amazonaws.handlers.AsyncHandler<DescribeTagsRequest, DescribeTagsResult> asyncHandler){\r\n    return describeTagsAsync(new DescribeTagsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteRestApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.LoadBalancerTargetGroupState.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoadBalancerTargetGroupARN() != null)\r\n        sb.append(\"LoadBalancerTargetGroupARN: \").append(getLoadBalancerTargetGroupARN()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.testInvokeMethod",
	"Comment": "simulate the execution of a method in your restapi with headers, parameters, and an incomingrequest body.",
	"Method": "TestInvokeMethodResult testInvokeMethod(TestInvokeMethodRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeTestInvokeMethod(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getEmbed() != null)\r\n        sb.append(\"Embed: \").append(getEmbed());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(getFirstName()).append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(getLastName()).append(\",\");\r\n    if (getEmail() != null)\r\n        sb.append(\"Email: \").append(getEmail()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.BoundingBox.getNorthSouthDistKM",
	"Comment": "returns the distance between latmax and latmin in kilometers.",
	"Method": "float getNorthSouthDistKM(){\r\n    return (float) Position.getDistKM(latMax, lonMin, latMin, lonMin);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.AddTagsToCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.nondeterministic.NondeterministicProblem.getActions",
	"Comment": "returns the description of the possible actions available to the agent.",
	"Method": "List<A> getActions(S state){\r\n    return actionsFn.apply(state);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteScheduledActionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.AbstractHostPartitionConnectionPool.rebuildPartitions",
	"Comment": "called every time a host is added, removed or is marked as down",
	"Method": "void rebuildPartitions(){\r\n    topology.refresh();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteRequestValidatorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getRequestValidatorId() != null)\r\n        sb.append(\"RequestValidatorId: \").append(getRequestValidatorId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.zeapo.pwdstore.autofill.AutofillFragment.onStart",
	"Comment": "need to the onclick here for buttons to dismiss dialog only when wanted",
	"Method": "void onStart(){\r\n    super.onStart();\r\n    AlertDialog ad = (AlertDialog) getDialog();\r\n    if (ad != null) {\r\n        Button positiveButton = ad.getButton(Dialog.BUTTON_POSITIVE);\r\n        positiveButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                AutofillPreferenceActivity callingActivity = (AutofillPreferenceActivity) getActivity();\r\n                Dialog dialog = getDialog();\r\n                SharedPreferences prefs;\r\n                if (!isWeb) {\r\n                    prefs = getActivity().getApplicationContext().getSharedPreferences(\"autofill\", Context.MODE_PRIVATE);\r\n                } else {\r\n                    prefs = getActivity().getApplicationContext().getSharedPreferences(\"autofill_web\", Context.MODE_PRIVATE);\r\n                }\r\n                SharedPreferences.Editor editor = prefs.edit();\r\n                String packageName = getArguments().getString(\"packageName\", \"\");\r\n                if (isWeb) {\r\n                    EditText webURL = (EditText) dialog.findViewById(R.id.webURL);\r\n                    packageName = webURL.getText().toString();\r\n                    if (packageName.equals(\"\")) {\r\n                        webURL.setError(\"URL cannot be blank\");\r\n                        return;\r\n                    }\r\n                    String oldPackageName = getArguments().getString(\"packageName\", \"\");\r\n                    if (!oldPackageName.equals(packageName) && prefs.getAll().containsKey(packageName)) {\r\n                        webURL.setError(\"URL already exists\");\r\n                        return;\r\n                    }\r\n                }\r\n                RadioGroup radioGroup = (RadioGroup) dialog.findViewById(R.id.autofill_radiogroup);\r\n                switch(radioGroup.getCheckedRadioButtonId()) {\r\n                    case R.id.use_default:\r\n                        if (!isWeb) {\r\n                            editor.remove(packageName);\r\n                        } else {\r\n                            editor.putString(packageName, \"\");\r\n                        }\r\n                        break;\r\n                    case R.id.first:\r\n                        editor.putString(packageName, \"/first\");\r\n                        break;\r\n                    case R.id.never:\r\n                        editor.putString(packageName, \"/never\");\r\n                        break;\r\n                    default:\r\n                        StringBuilder paths = new StringBuilder();\r\n                        for (int i = 0; i < adapter.getCount(); i++) {\r\n                            paths.append(adapter.getItem(i));\r\n                            if (i != adapter.getCount()) {\r\n                                paths.append(\"\\n\");\r\n                            }\r\n                        }\r\n                        editor.putString(packageName, paths.toString());\r\n                }\r\n                editor.apply();\r\n                if (callingActivity.recyclerAdapter != null) {\r\n                    int position;\r\n                    if (!isWeb) {\r\n                        String appName = getArguments().getString(\"appName\", \"\");\r\n                        position = callingActivity.recyclerAdapter.getPosition(appName);\r\n                        callingActivity.recyclerAdapter.notifyItemChanged(position);\r\n                    } else {\r\n                        position = callingActivity.recyclerAdapter.getPosition(packageName);\r\n                        String oldPackageName = getArguments().getString(\"packageName\", \"\");\r\n                        if (oldPackageName.equals(packageName)) {\r\n                            callingActivity.recyclerAdapter.notifyItemChanged(position);\r\n                        } else if (oldPackageName.equals(\"\")) {\r\n                            callingActivity.recyclerAdapter.addWebsite(packageName);\r\n                        } else {\r\n                            editor.remove(oldPackageName);\r\n                            callingActivity.recyclerAdapter.updateWebsite(oldPackageName, packageName);\r\n                        }\r\n                    }\r\n                }\r\n                dismiss();\r\n            }\r\n        });\r\n    }\r\n}"
}, {
	"Path": "com.zeapo.pwdstore.autofill.AutofillFragment.onStart",
	"Comment": "need to the onclick here for buttons to dismiss dialog only when wanted",
	"Method": "void onStart(){\r\n    AutofillPreferenceActivity callingActivity = (AutofillPreferenceActivity) getActivity();\r\n    Dialog dialog = getDialog();\r\n    SharedPreferences prefs;\r\n    if (!isWeb) {\r\n        prefs = getActivity().getApplicationContext().getSharedPreferences(\"autofill\", Context.MODE_PRIVATE);\r\n    } else {\r\n        prefs = getActivity().getApplicationContext().getSharedPreferences(\"autofill_web\", Context.MODE_PRIVATE);\r\n    }\r\n    SharedPreferences.Editor editor = prefs.edit();\r\n    String packageName = getArguments().getString(\"packageName\", \"\");\r\n    if (isWeb) {\r\n        EditText webURL = (EditText) dialog.findViewById(R.id.webURL);\r\n        packageName = webURL.getText().toString();\r\n        if (packageName.equals(\"\")) {\r\n            webURL.setError(\"URL cannot be blank\");\r\n            return;\r\n        }\r\n        String oldPackageName = getArguments().getString(\"packageName\", \"\");\r\n        if (!oldPackageName.equals(packageName) && prefs.getAll().containsKey(packageName)) {\r\n            webURL.setError(\"URL already exists\");\r\n            return;\r\n        }\r\n    }\r\n    RadioGroup radioGroup = (RadioGroup) dialog.findViewById(R.id.autofill_radiogroup);\r\n    switch(radioGroup.getCheckedRadioButtonId()) {\r\n        case R.id.use_default:\r\n            if (!isWeb) {\r\n                editor.remove(packageName);\r\n            } else {\r\n                editor.putString(packageName, \"\");\r\n            }\r\n            break;\r\n        case R.id.first:\r\n            editor.putString(packageName, \"/first\");\r\n            break;\r\n        case R.id.never:\r\n            editor.putString(packageName, \"/never\");\r\n            break;\r\n        default:\r\n            StringBuilder paths = new StringBuilder();\r\n            for (int i = 0; i < adapter.getCount(); i++) {\r\n                paths.append(adapter.getItem(i));\r\n                if (i != adapter.getCount()) {\r\n                    paths.append(\"\\n\");\r\n                }\r\n            }\r\n            editor.putString(packageName, paths.toString());\r\n    }\r\n    editor.apply();\r\n    if (callingActivity.recyclerAdapter != null) {\r\n        int position;\r\n        if (!isWeb) {\r\n            String appName = getArguments().getString(\"appName\", \"\");\r\n            position = callingActivity.recyclerAdapter.getPosition(appName);\r\n            callingActivity.recyclerAdapter.notifyItemChanged(position);\r\n        } else {\r\n            position = callingActivity.recyclerAdapter.getPosition(packageName);\r\n            String oldPackageName = getArguments().getString(\"packageName\", \"\");\r\n            if (oldPackageName.equals(packageName)) {\r\n                callingActivity.recyclerAdapter.notifyItemChanged(position);\r\n            } else if (oldPackageName.equals(\"\")) {\r\n                callingActivity.recyclerAdapter.addWebsite(packageName);\r\n            } else {\r\n                editor.remove(oldPackageName);\r\n                callingActivity.recyclerAdapter.updateWebsite(oldPackageName, packageName);\r\n            }\r\n        }\r\n    }\r\n    dismiss();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDeploymentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describePoliciesAsync",
	"Comment": "simplified method form for invoking the describepolicies operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync(DescribePoliciesRequest request,java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync,DescribePoliciesRequest request,com.amazonaws.handlers.AsyncHandler<DescribePoliciesRequest, DescribePoliciesResult> asyncHandler,java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync,java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync,com.amazonaws.handlers.AsyncHandler<DescribePoliciesRequest, DescribePoliciesResult> asyncHandler){\r\n    return describePoliciesAsync(new DescribePoliciesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.searchAddressBooks",
	"Comment": "searches address books and lists the ones that meet a set of filter and sort criteria.",
	"Method": "SearchAddressBooksResult searchAddressBooks(SearchAddressBooksRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSearchAddressBooks(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.PredefinedMetricSpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPredefinedMetricType() != null)\r\n        sb.append(\"PredefinedMetricType: \").append(getPredefinedMetricType()).append(\",\");\r\n    if (getResourceLabel() != null)\r\n        sb.append(\"ResourceLabel: \").append(getResourceLabel());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.StartJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobSummary() != null)\r\n        sb.append(\"JobSummary: \").append(getJobSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.kodedu.controller.CacheResource.matches",
	"Comment": "returns true if the given match header matches the given value.",
	"Method": "boolean matches(String matchHeader,String toMatch){\r\n    String[] matchValues = matchHeader.split(\"\\\\s*,\\\\s*\");\r\n    Arrays.sort(matchValues);\r\n    return Arrays.binarySearch(matchValues, toMatch) > -1 || Arrays.binarySearch(matchValues, \"*\") > -1;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.LaunchTemplateSpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLaunchTemplateId() != null)\r\n        sb.append(\"LaunchTemplateId: \").append(getLaunchTemplateId()).append(\",\");\r\n    if (getLaunchTemplateName() != null)\r\n        sb.append(\"LaunchTemplateName: \").append(getLaunchTemplateName()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.RecordLifecycleActionHeartbeatResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UsagePlanKey.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateMethodResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearchBFS.removeFromFrontier",
	"Comment": "removes the node at the head of the frontier, adds the corresponding\tstate to the explored set, and returns the node.",
	"Method": "Node<S, A> removeFromFrontier(){\r\n    Node<S, A> result = frontier.remove();\r\n    explored.add(result.getState());\r\n    frontierStates.remove(result.getState());\r\n    updateMetrics(frontier.size());\r\n    return result;\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RouteFindingAgentOsmApp.createAgent",
	"Comment": "factory method which creates a new agent based on the current parameter\tsettings.",
	"Method": "Agent createAgent(List<String> locations){\r\n    ToDoubleFunction<Node<String, MoveToAction>> heuristic;\r\n    if (taskPaneCtrl.getParamValueIndex(PARAM_HEURISTIC) == 0)\r\n        heuristic = node -> 0.0;\r\n    else\r\n        heuristic = MapFunctions.createSLDHeuristicFunction(locations.get(1), map);\r\n    SearchForActions<String, MoveToAction> search = SearchFactory.getInstance().createSearch(taskPaneCtrl.getParamValueIndex(PARAM_SEARCH), taskPaneCtrl.getParamValueIndex(PARAM_Q_SEARCH_IMPL), heuristic);\r\n    return new MapAgent(map, search, locations.get(1), envViewCtrl::notify);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DescribeVirtualRouterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.CartesianPlot2D.isPointInsideShape",
	"Comment": "checks whether the given point is inside any of the shapes of the plot.",
	"Method": "boolean isPointInsideShape(Point2D point){\r\n    for (int i = 0; i < shapes.size(); i++) {\r\n        if (boundaries.get(i).isInside(point)) {\r\n            if (shapes.get(i).isInside(point)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetApiKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getCustomerId() != null)\r\n        sb.append(\"CustomerId: \").append(getCustomerId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getLastUpdatedDate() != null)\r\n        sb.append(\"LastUpdatedDate: \").append(getLastUpdatedDate()).append(\",\");\r\n    if (getStageKeys() != null)\r\n        sb.append(\"StageKeys: \").append(getStageKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateContactResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDocumentationVersionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPopup.show",
	"Comment": "this implementation assumes, that invoker is of type\tmapviewpane.",
	"Method": "void show(Component invoker,int x,int y){\r\n    pane = (MapViewPane) invoker;\r\n    this.x = x;\r\n    this.y = y;\r\n    debugMenuItem.setState(pane.isDebugModeEnabled());\r\n    super.show(invoker, x, y);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.EncryptionConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEncryptionOption() != null)\r\n        sb.append(\"EncryptionOption: \").append(getEncryptionOption()).append(\",\");\r\n    if (getKmsKey() != null)\r\n        sb.append(\"KmsKey: \").append(getKmsKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.entitystore.CompositeColumnEntityMapper.setField",
	"Comment": "set the collection field using the provided column list of embedded entities",
	"Method": "boolean setField(Object entity,ColumnList<ByteBuffer> columns){\r\n    List<Object> list = getOrCreateField(entity);\r\n    for (com.netflix.astyanax.model.Column<ByteBuffer> c : columns) {\r\n        list.add(fromColumn(c));\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeAutoScalingInstancesAsync",
	"Comment": "simplified method form for invoking the describeautoscalinginstances operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync(DescribeAutoScalingInstancesRequest request,java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync,DescribeAutoScalingInstancesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingInstancesRequest, DescribeAutoScalingInstancesResult> asyncHandler,java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync,java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingInstancesRequest, DescribeAutoScalingInstancesResult> asyncHandler){\r\n    return describeAutoScalingInstancesAsync(new DescribeAutoScalingInstancesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.netflix.astyanax.mapping.FakeKeyspaceBean.getCountry",
	"Comment": "return the iso 3166 country code to force on the current request context",
	"Method": "String getCountry(){\r\n    return country;\r\n}"
}, {
	"Path": "aima.core.search.csp.FlexibleBacktrackingSolver.orderDomainValues",
	"Comment": "primitive operation, ordering the domain values of the specified variable.",
	"Method": "Iterable<VAL> orderDomainValues(CSP<VAR, VAL> csp,Assignment<VAR, VAL> assignment,VAR var){\r\n    if (valSelectionStrategy != null)\r\n        return valSelectionStrategy.apply(csp, assignment, var);\r\n    else\r\n        return csp.getDomain(var);\r\n}"
}, {
	"Path": "aimax.osm.reader.DummyElementProcessor.getChild",
	"Comment": "this implementation returns itself and increments an internal counter.\tthe corresponding getparent method decrements the counter and when it\treaches zero returns the true parent of this instance.",
	"Method": "ElementProcessor getChild(String uri,String localName,String qName){\r\n    nestedElementCount++;\r\n    return this;\r\n}"
}, {
	"Path": "aima.gui.swing.framework.SimpleAgentApp.createEnvironmentView",
	"Comment": "factory method, responsible for creating the environment view.",
	"Method": "AgentAppEnvironmentView createEnvironmentView(){\r\n    return new EmptyEnvironmentView();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationPartRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDocumentationPartId() != null)\r\n        sb.append(\"DocumentationPartId: \").append(getDocumentationPartId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualNodeSpec.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBackends() != null)\r\n        sb.append(\"Backends: \").append(getBackends()).append(\",\");\r\n    if (getListeners() != null)\r\n        sb.append(\"Listeners: \").append(getListeners()).append(\",\");\r\n    if (getServiceDiscovery() != null)\r\n        sb.append(\"ServiceDiscovery: \").append(getServiceDiscovery());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetRequestValidatorsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.inference.PLResolution.setDiscardTautologies",
	"Comment": "determine whether or not the algorithm should discard tautological\tclauses during processing.",
	"Method": "void setDiscardTautologies(boolean discardTautologies){\r\n    this.discardTautologies = discardTautologies;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.detachInstances",
	"Comment": "removes one or more instances from the specified auto scaling group.after the instances are detached, you can manage them independent of the auto scaling group.if you do not specify the option to decrement the desired capacity, amazon ec2 auto scaling launches instances toreplace the ones that are detached.if there is a classic load balancer attached to the auto scaling group, the instances are deregistered from theload balancer. if there are target groups attached to the auto scaling group, the instances are deregistered fromthe target groups.for more information, see detach ec2 instances fromyour auto scaling group in the amazon ec2 auto scaling user guide.",
	"Method": "DetachInstancesResult detachInstances(DetachInstancesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDetachInstances(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ExitStandbyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActivities() != null)\r\n        sb.append(\"Activities: \").append(getActivities());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteStackResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearchBFS.findNode",
	"Comment": "clears the set of explored states and calls the search implementation of\tquesearch",
	"Method": "Optional<Node<S, A>> findNode(Problem<S, A> problem,Queue<Node<S, A>> frontier){\r\n    explored.clear();\r\n    frontierStates.clear();\r\n    return super.findNode(problem, frontier);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.HttpDataSourceConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint()).append(\",\");\r\n    if (getAuthorizationConfig() != null)\r\n        sb.append(\"AuthorizationConfig: \").append(getAuthorizationConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeAutoScalingNotificationTypesAsync",
	"Comment": "simplified method form for invoking the describeautoscalingnotificationtypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync(DescribeAutoScalingNotificationTypesRequest request,java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync,DescribeAutoScalingNotificationTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingNotificationTypesRequest, DescribeAutoScalingNotificationTypesResult> asyncHandler,java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync,java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingNotificationTypesRequest, DescribeAutoScalingNotificationTypesResult> asyncHandler){\r\n    return describeAutoScalingNotificationTypesAsync(new DescribeAutoScalingNotificationTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetRequestValidatorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValidateRequestBody() != null)\r\n        sb.append(\"ValidateRequestBody: \").append(getValidateRequestBody()).append(\",\");\r\n    if (getValidateRequestParameters() != null)\r\n        sb.append(\"ValidateRequestParameters: \").append(getValidateRequestParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeImageBuildersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImageBuilders() != null)\r\n        sb.append(\"ImageBuilders: \").append(getImageBuilders()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazonathenaasync using the current builder configuration.",
	"Method": "AmazonAthenaAsync build(AwsAsyncClientParams params){\r\n    return new AmazonAthenaAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.AWSAmplifyClient.getDomainAssociation",
	"Comment": "retrieves domain info that corresponds to an appid and domainname.",
	"Method": "GetDomainAssociationResult getDomainAssociation(GetDomainAssociationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetDomainAssociation(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.updateUsage",
	"Comment": "grants a temporary extension to the remaining quota of a usage plan associated with a specified api key.",
	"Method": "UpdateUsageResult updateUsage(UpdateUsageRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateUsage(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.TagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateResolverRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getFieldName() != null)\r\n        sb.append(\"FieldName: \").append(getFieldName()).append(\",\");\r\n    if (getDataSourceName() != null)\r\n        sb.append(\"DataSourceName: \").append(getDataSourceName()).append(\",\");\r\n    if (getRequestMappingTemplate() != null)\r\n        sb.append(\"RequestMappingTemplate: \").append(getRequestMappingTemplate()).append(\",\");\r\n    if (getResponseMappingTemplate() != null)\r\n        sb.append(\"ResponseMappingTemplate: \").append(getResponseMappingTemplate()).append(\",\");\r\n    if (getKind() != null)\r\n        sb.append(\"Kind: \").append(getKind()).append(\",\");\r\n    if (getPipelineConfig() != null)\r\n        sb.append(\"PipelineConfig: \").append(getPipelineConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeAccountLimitsAsync",
	"Comment": "simplified method form for invoking the describeaccountlimits operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync(DescribeAccountLimitsRequest request,java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync,DescribeAccountLimitsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAccountLimitsRequest, DescribeAccountLimitsResult> asyncHandler,java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync,java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync,com.amazonaws.handlers.AsyncHandler<DescribeAccountLimitsRequest, DescribeAccountLimitsResult> asyncHandler){\r\n    return describeAccountLimitsAsync(new DescribeAccountLimitsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftKeyspaceImpl.toThriftColumnFamilyDefinition",
	"Comment": "convert a map of options to an internal thrift column family definition",
	"Method": "ThriftColumnFamilyDefinitionImpl toThriftColumnFamilyDefinition(Map<String, Object> options,ColumnFamily columnFamily){\r\n    ThriftColumnFamilyDefinitionImpl def = new ThriftColumnFamilyDefinitionImpl();\r\n    Map<String, Object> internalOptions = Maps.newHashMap();\r\n    if (options != null)\r\n        internalOptions.putAll(options);\r\n    internalOptions.put(\"keyspace\", getKeyspaceName());\r\n    if (columnFamily != null) {\r\n        internalOptions.put(\"name\", columnFamily.getName());\r\n        if (!internalOptions.containsKey(\"comparator_type\"))\r\n            internalOptions.put(\"comparator_type\", columnFamily.getColumnSerializer().getComparatorType().getTypeName());\r\n        if (!internalOptions.containsKey(\"key_validation_class\"))\r\n            internalOptions.put(\"key_validation_class\", columnFamily.getKeySerializer().getComparatorType().getTypeName());\r\n        if (columnFamily.getDefaultValueSerializer() != null && !internalOptions.containsKey(\"default_validation_class\"))\r\n            internalOptions.put(\"default_validation_class\", columnFamily.getDefaultValueSerializer().getComparatorType().getTypeName());\r\n    }\r\n    def.setFields(internalOptions);\r\n    return def;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UntagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.updateVirtualRouter",
	"Comment": "updates an existing virtual router in a specified service mesh.",
	"Method": "UpdateVirtualRouterResult updateVirtualRouter(UpdateVirtualRouterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateVirtualRouter(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.CreateAutoScalingGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateSkillFromSkillGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteContactRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListConferenceProvidersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ImportApiKeysResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIds() != null)\r\n        sb.append(\"Ids: \").append(getIds()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateUsagePlanResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getApiStages() != null)\r\n        sb.append(\"ApiStages: \").append(getApiStages()).append(\",\");\r\n    if (getThrottle() != null)\r\n        sb.append(\"Throttle: \").append(getThrottle()).append(\",\");\r\n    if (getQuota() != null)\r\n        sb.append(\"Quota: \").append(getQuota()).append(\",\");\r\n    if (getProductCode() != null)\r\n        sb.append(\"ProductCode: \").append(getProductCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteAppRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.ExtendedRouteFindingAgentOsmApp.createAgent",
	"Comment": "factory method which creates a new agent based on the current parameter\tsettings. the agent is provided with a heuristic function factory to\tadapt to different goals. a node listener is used to visualize search space exploration.",
	"Method": "Agent createAgent(List<String> locations){\r\n    SearchForActions<String, MoveToAction> search = SearchFactory.getInstance().createSearch(taskPaneCtrl.getParamValueIndex(PARAM_SEARCH), taskPaneCtrl.getParamValueIndex(PARAM_Q_SEARCH_IMPL), state -> 0.0);\r\n    search.addNodeListener(node -> visitedStates.add(node.getState()));\r\n    visitedStates.clear();\r\n    Function<String, ToDoubleFunction<Node<String, MoveToAction>>> hFnFactory;\r\n    if (taskPaneCtrl.getParamValueIndex(PARAM_HEURISTIC) == 0)\r\n        hFnFactory = goal -> (node -> 0.0);\r\n    else\r\n        hFnFactory = goal -> MapFunctions.createSLDHeuristicFunction(goal, map);\r\n    return new MapAgent(map, search, locations.subList(1, locations.size()), envViewCtrl::notify, hFnFactory);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.startSmartHomeApplianceDiscovery",
	"Comment": "initiates the discovery of any smart home appliances associated with the room.",
	"Method": "StartSmartHomeApplianceDiscoveryResult startSmartHomeApplianceDiscovery(StartSmartHomeApplianceDiscoveryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartSmartHomeApplianceDiscovery(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AssociateSkillGroupWithRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateDirectoryConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryName() != null)\r\n        sb.append(\"DirectoryName: \").append(getDirectoryName()).append(\",\");\r\n    if (getOrganizationalUnitDistinguishedNames() != null)\r\n        sb.append(\"OrganizationalUnitDistinguishedNames: \").append(getOrganizationalUnitDistinguishedNames()).append(\",\");\r\n    if (getServiceAccountCredentials() != null)\r\n        sb.append(\"ServiceAccountCredentials: \").append(getServiceAccountCredentials());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.EnableUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ServiceAccountCredentials.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountName() != null)\r\n        sb.append(\"AccountName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAccountPassword() != null)\r\n        sb.append(\"AccountPassword: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.GetCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate()).append(\",\");\r\n    if (getCertificateChain() != null)\r\n        sb.append(\"CertificateChain: \").append(getCertificateChain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.fireMapViewEvent",
	"Comment": "informs all interested listener about view events such as mouse events\tand data changes.",
	"Method": "void fireMapViewEvent(MapViewEvent e){\r\n    for (MapViewEventListener listener : eventListeners) listener.eventHappened(e);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.updateImagePermissions",
	"Comment": "adds or updates permissions for the specified private image.",
	"Method": "UpdateImagePermissionsResult updateImagePermissions(UpdateImagePermissionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateImagePermissions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsapplicationautoscalingasync using the current builderconfiguration.",
	"Method": "AWSApplicationAutoScalingAsync build(AwsAsyncClientParams params){\r\n    return new AWSApplicationAutoScalingAsyncClient(params);\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.BidirectionalSearch.setReverseActionTestEnabled",
	"Comment": "enables a check for all actions offered by the reverse problem whether\tthere exists a corresponding action of the original problem. default\tvalue is true.",
	"Method": "void setReverseActionTestEnabled(boolean b){\r\n    isReverseActionTestEnabled = b;\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.waiters.AWSCertificateManagerWaiters.certificateValidated",
	"Comment": "builds a certificatevalidated waiter by using custom parameters waiterparameters and other parameters defined inthe waiters specification, and then polls until it determines whether the resource entered the desired state ornot, where polling criteria is bound by either default polling strategy or custom polling strategy.",
	"Method": "Waiter<DescribeCertificateRequest> certificateValidated(){\r\n    return new WaiterBuilder<DescribeCertificateRequest, DescribeCertificateResult>().withSdkFunction(new DescribeCertificateFunction(client)).withAcceptors(new CertificateValidated.IsSUCCESSMatcher(), new CertificateValidated.IsPENDING_VALIDATIONMatcher(), new CertificateValidated.IsFAILEDMatcher(), new CertificateValidated.IsResourceNotFoundExceptionMatcher()).withDefaultPollingStrategy(new PollingStrategy(new MaxAttemptsRetryStrategy(40), new FixedDelayStrategy(60))).withExecutorService(executorService).build();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateDataSourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getServiceRoleArn() != null)\r\n        sb.append(\"ServiceRoleArn: \").append(getServiceRoleArn()).append(\",\");\r\n    if (getDynamodbConfig() != null)\r\n        sb.append(\"DynamodbConfig: \").append(getDynamodbConfig()).append(\",\");\r\n    if (getLambdaConfig() != null)\r\n        sb.append(\"LambdaConfig: \").append(getLambdaConfig()).append(\",\");\r\n    if (getElasticsearchConfig() != null)\r\n        sb.append(\"ElasticsearchConfig: \").append(getElasticsearchConfig()).append(\",\");\r\n    if (getHttpConfig() != null)\r\n        sb.append(\"HttpConfig: \").append(getHttpConfig()).append(\",\");\r\n    if (getRelationalDatabaseConfig() != null)\r\n        sb.append(\"RelationalDatabaseConfig: \").append(getRelationalDatabaseConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.kodedu.animation.GifSequenceWriter.close",
	"Comment": "close this gifsequencewriter object. this does not close the underlyingstream, just finishes off the gif.",
	"Method": "void close(){\r\n    gifWriter.endWriteSequence();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.QueueSearch.setEarlyGoalTest",
	"Comment": "enables optimization for fifo queue based search, especially breadth\tfirst search.",
	"Method": "void setEarlyGoalTest(boolean b){\r\n    earlyGoalTest = b;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ExitStandbyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceIds() != null)\r\n        sb.append(\"InstanceIds: \").append(getInstanceIds()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeImagesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImages() != null)\r\n        sb.append(\"Images: \").append(getImages()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListRoutesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlanKeysResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ApplicationSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getSettingsGroup() != null)\r\n        sb.append(\"SettingsGroup: \").append(getSettingsGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.ListQueryExecutionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeScalingProcessTypesAsync",
	"Comment": "simplified method form for invoking the describescalingprocesstypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync(DescribeScalingProcessTypesRequest request,java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync,DescribeScalingProcessTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeScalingProcessTypesRequest, DescribeScalingProcessTypesResult> asyncHandler,java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync,java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeScalingProcessTypesRequest, DescribeScalingProcessTypesResult> asyncHandler){\r\n    return describeScalingProcessTypesAsync(new DescribeScalingProcessTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetAddressBookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBook() != null)\r\n        sb.append(\"AddressBook: \").append(getAddressBook());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultMap.getWayNodes",
	"Comment": "reduces the level of detail by selecting some of the given nodes.",
	"Method": "List<MapNode> getWayNodes(MapWay way,float scale){\r\n    List<MapNode> wayNodes = way.getNodes();\r\n    int zoomLevel;\r\n    if (scale <= 1f / 10000000)\r\n        zoomLevel = 3;\r\n    else if (scale <= 1f / 750000)\r\n        zoomLevel = 2;\r\n    else if (scale <= 1f / 350000)\r\n        zoomLevel = 1;\r\n    else\r\n        zoomLevel = 0;\r\n    if (zoomLevel > 0) {\r\n        int size = wayNodes.size();\r\n        List<MapNode> result = new ArrayList<MapNode>(size / zoomLevel + 2);\r\n        int i = 0;\r\n        for (MapNode node : wayNodes) {\r\n            if (i == 0 || i == size - 1 || node.getId() % (4 * zoomLevel) == 0)\r\n                result.add(node);\r\n            i++;\r\n        }\r\n        if (wayNodes.get(0) == wayNodes.get(size - 1) && result.size() < 4)\r\n            result.clear();\r\n        return result;\r\n    } else {\r\n        return Collections.unmodifiableList(wayNodes);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DeleteVirtualRouterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualRouter() != null)\r\n        sb.append(\"VirtualRouter: \").append(getVirtualRouter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateConferenceProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferenceProviderArn() != null)\r\n        sb.append(\"ConferenceProviderArn: \").append(getConferenceProviderArn()).append(\",\");\r\n    if (getConferenceProviderType() != null)\r\n        sb.append(\"ConferenceProviderType: \").append(getConferenceProviderType()).append(\",\");\r\n    if (getIPDialIn() != null)\r\n        sb.append(\"IPDialIn: \").append(getIPDialIn()).append(\",\");\r\n    if (getPSTNDialIn() != null)\r\n        sb.append(\"PSTNDialIn: \").append(getPSTNDialIn()).append(\",\");\r\n    if (getMeetingSetting() != null)\r\n        sb.append(\"MeetingSetting: \").append(getMeetingSetting());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.AWSAmplifyClient.stopJob",
	"Comment": "stop a job that is in progress, for an amplify branch, part of amplify app.",
	"Method": "StopJobResult stopJob(StopJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStopJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribePoliciesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getPolicyNames() != null)\r\n        sb.append(\"PolicyNames: \").append(getPolicyNames()).append(\",\");\r\n    if (getPolicyTypes() != null)\r\n        sb.append(\"PolicyTypes: \").append(getPolicyTypes()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AttachInstancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.getMaxAuthority",
	"Comment": "return from a set of pages the page with the greatest authority value",
	"Method": "Page getMaxAuthority(List<Page> result){\r\n    Page maxAuthority = null;\r\n    for (Page currPage : result) {\r\n        if (maxAuthority == null || currPage.authority > maxAuthority.authority)\r\n            maxAuthority = currPage;\r\n    }\r\n    return maxAuthority;\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.StartSchemaCreationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateVirtualNodeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualNode() != null)\r\n        sb.append(\"VirtualNode: \").append(getVirtualNode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetSkillGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroup() != null)\r\n        sb.append(\"SkillGroup: \").append(getSkillGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.simple.SimpleRangeReading.setBadDelta",
	"Comment": "sets the delta between two range readings, above which a weight of zero is calculated.",
	"Method": "void setBadDelta(double badDelta){\r\n    BAD_DELTA = badDelta;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ClientCertificate.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPemEncodedCertificate() != null)\r\n        sb.append(\"PemEncodedCertificate: \").append(getPemEncodedCertificate()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getExpirationDate() != null)\r\n        sb.append(\"ExpirationDate: \").append(getExpirationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.releaseWithMutation",
	"Comment": "release using the provided mutation.use this when you want to commit actual datawhen releasing the lock",
	"Method": "void releaseWithMutation(MutationBatch m,boolean releaseWithMutation,MutationBatch m,boolean force){\r\n    long elapsed = System.currentTimeMillis() - acquireTime;\r\n    boolean isStale = false;\r\n    if (timeout > 0 && elapsed > TimeUnit.MILLISECONDS.convert(timeout, this.timeoutUnits)) {\r\n        isStale = true;\r\n        if (!force) {\r\n            throw new StaleLockException(\"Lock for '\" + getKey() + \"' became stale\");\r\n        }\r\n    }\r\n    m.setConsistencyLevel(consistencyLevel);\r\n    fillReleaseMutation(m, false);\r\n    m.execute();\r\n    return isStale;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateConferenceProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferenceProviderArn() != null)\r\n        sb.append(\"ConferenceProviderArn: \").append(getConferenceProviderArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetDomainAssociationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainAssociation() != null)\r\n        sb.append(\"DomainAssociation: \").append(getDomainAssociation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateApiKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiKey() != null)\r\n        sb.append(\"ApiKey: \").append(getApiKey()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.GetCertificateAuthorityCsrRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateDirectoryConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryConfig() != null)\r\n        sb.append(\"DirectoryConfig: \").append(getDirectoryConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.Settings.updateGuiSetting",
	"Comment": "updates the value for a given key in the gui from the stored values.",
	"Method": "void updateGuiSetting(String key){\r\n    gui.revertSetting(key);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetModelRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getModelName() != null)\r\n        sb.append(\"ModelName: \").append(getModelName()).append(\",\");\r\n    if (getFlatten() != null)\r\n        sb.append(\"Flatten: \").append(getFlatten());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.BusinessReportSchedule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduleArn() != null)\r\n        sb.append(\"ScheduleArn: \").append(getScheduleArn()).append(\",\");\r\n    if (getScheduleName() != null)\r\n        sb.append(\"ScheduleName: \").append(getScheduleName()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName()).append(\",\");\r\n    if (getS3KeyPrefix() != null)\r\n        sb.append(\"S3KeyPrefix: \").append(getS3KeyPrefix()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat()).append(\",\");\r\n    if (getContentRange() != null)\r\n        sb.append(\"ContentRange: \").append(getContentRange()).append(\",\");\r\n    if (getRecurrence() != null)\r\n        sb.append(\"Recurrence: \").append(getRecurrence()).append(\",\");\r\n    if (getLastBusinessReport() != null)\r\n        sb.append(\"LastBusinessReport: \").append(getLastBusinessReport());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.describeImagePermissions",
	"Comment": "retrieves a list that describes the permissions for shared aws account ids on a private image that you own.",
	"Method": "DescribeImagePermissionsResult describeImagePermissions(DescribeImagePermissionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeImagePermissions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.CreateCertificateAuthorityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityConfiguration() != null)\r\n        sb.append(\"CertificateAuthorityConfiguration: \").append(getCertificateAuthorityConfiguration()).append(\",\");\r\n    if (getRevocationConfiguration() != null)\r\n        sb.append(\"RevocationConfiguration: \").append(getRevocationConfiguration()).append(\",\");\r\n    if (getCertificateAuthorityType() != null)\r\n        sb.append(\"CertificateAuthorityType: \").append(getCertificateAuthorityType()).append(\",\");\r\n    if (getIdempotencyToken() != null)\r\n        sb.append(\"IdempotencyToken: \").append(getIdempotencyToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.StartSmartHomeApplianceDiscoveryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GenerateClientCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetSchemaCreationStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.ListCertificateAuthoritiesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorities() != null)\r\n        sb.append(\"CertificateAuthorities: \").append(getCertificateAuthorities()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.fx.framework.MessagePaneCtrl.getPrintStream",
	"Comment": "provides a print stream which can be used to redirect standard output\tstreams.",
	"Method": "PrintStream getPrintStream(){\r\n    return new PrintStream(new TextAreaOutputStream());\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteConferenceProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.map.MapAgentView.agentActed",
	"Comment": "reacts on environment changes and updates the agent tracks. the command\tis always send to the message logger as string.",
	"Method": "void agentActed(Agent agent,Percept percept,Action command,Environment source){\r\n    MapEnvironment mEnv = getMapEnv();\r\n    String msg = \"\";\r\n    if (mEnv.getAgents().size() > 1)\r\n        msg = \"A\" + mEnv.getAgents().indexOf(agent) + \": \";\r\n    notify(msg + command.toString());\r\n    updateTracks();\r\n    repaint();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateIntegrationResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getSelectionPattern() != null)\r\n        sb.append(\"SelectionPattern: \").append(getSelectionPattern()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.adjustToFit",
	"Comment": "initiates a reset of all coordinate transformation parameters.",
	"Method": "void adjustToFit(){\r\n    isAdjusted = false;\r\n    viewChanged(MapViewEvent.Type.ADJUST);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.EnableUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceIds() != null)\r\n        sb.append(\"InstanceIds: \").append(getInstanceIds()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.RouteStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.WeightedTarget.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualNode() != null)\r\n        sb.append(\"VirtualNode: \").append(getVirtualNode()).append(\",\");\r\n    if (getWeight() != null)\r\n        sb.append(\"Weight: \").append(getWeight());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.Node.getPathCost",
	"Comment": "returns the cost of the path from the initial state to this node as\tindicated by the parent pointers.",
	"Method": "double getPathCost(){\r\n    return pathCost;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AttachInstancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceIds() != null)\r\n        sb.append(\"InstanceIds: \").append(getInstanceIds()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Profile.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn()).append(\",\");\r\n    if (getProfileName() != null)\r\n        sb.append(\"ProfileName: \").append(getProfileName()).append(\",\");\r\n    if (getIsDefault() != null)\r\n        sb.append(\"IsDefault: \").append(getIsDefault()).append(\",\");\r\n    if (getAddress() != null)\r\n        sb.append(\"Address: \").append(getAddress()).append(\",\");\r\n    if (getTimezone() != null)\r\n        sb.append(\"Timezone: \").append(getTimezone()).append(\",\");\r\n    if (getDistanceUnit() != null)\r\n        sb.append(\"DistanceUnit: \").append(getDistanceUnit()).append(\",\");\r\n    if (getTemperatureUnit() != null)\r\n        sb.append(\"TemperatureUnit: \").append(getTemperatureUnit()).append(\",\");\r\n    if (getWakeWord() != null)\r\n        sb.append(\"WakeWord: \").append(getWakeWord()).append(\",\");\r\n    if (getSetupModeDisabled() != null)\r\n        sb.append(\"SetupModeDisabled: \").append(getSetupModeDisabled()).append(\",\");\r\n    if (getMaxVolumeLimit() != null)\r\n        sb.append(\"MaxVolumeLimit: \").append(getMaxVolumeLimit()).append(\",\");\r\n    if (getPSTNEnabled() != null)\r\n        sb.append(\"PSTNEnabled: \").append(getPSTNEnabled()).append(\",\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetBasePathMappingResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath()).append(\",\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.DescribeCertificateAuthorityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthority() != null)\r\n        sb.append(\"CertificateAuthority: \").append(getCertificateAuthority());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.agent.impl.ObjectWithDynamicAttributes.setAttribute",
	"Comment": "associates the specified value with the specified attribute key. if the\tobjectwithdynamicattributes previously contained a mapping for the\tattribute key, the old value is replaced.",
	"Method": "void setAttribute(Object key,Object value){\r\n    attributes.put(key, value);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.resolveRoom",
	"Comment": "determines the details for the room from which a skill request was invoked. this operation is used by skilldevelopers.",
	"Method": "ResolveRoomResult resolveRoom(ResolveRoomRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeResolveRoom(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteAddressBookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.MessageLoggerPanel.getPrintStream",
	"Comment": "provides a print stream which can be used to redirect standard output\tstreams.",
	"Method": "PrintStream getPrintStream(){\r\n    return new PrintStream(new TextAreaOutputStream());\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.UpdateRouteResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoute() != null)\r\n        sb.append(\"Route: \").append(getRoute());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.environment.connectfour.ConnectFourAIPlayer.eval",
	"Comment": "modifies the super implementation by making safe winner values even more\tattractive if depth is small.",
	"Method": "double eval(ConnectFourState state,String player){\r\n    double value = super.eval(state, player);\r\n    if (hasSafeWinner(value)) {\r\n        if (value > (utilMin + utilMax) / 2)\r\n            value -= state.getMoves() / 1000.0;\r\n        else\r\n            value += state.getMoves() / 1000.0;\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "aimax.osm.data.impl.KDTree.setUnsorted",
	"Comment": "must be called after classification of entities has been changed.",
	"Method": "void setUnsorted(){\r\n    isSorted = false;\r\n    if (children != null) {\r\n        children[0].setUnsorted();\r\n        children[1].setUnsorted();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateGatewayResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.TargetTrackingScalingPolicyConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTargetValue() != null)\r\n        sb.append(\"TargetValue: \").append(getTargetValue()).append(\",\");\r\n    if (getPredefinedMetricSpecification() != null)\r\n        sb.append(\"PredefinedMetricSpecification: \").append(getPredefinedMetricSpecification()).append(\",\");\r\n    if (getCustomizedMetricSpecification() != null)\r\n        sb.append(\"CustomizedMetricSpecification: \").append(getCustomizedMetricSpecification()).append(\",\");\r\n    if (getScaleOutCooldown() != null)\r\n        sb.append(\"ScaleOutCooldown: \").append(getScaleOutCooldown()).append(\",\");\r\n    if (getScaleInCooldown() != null)\r\n        sb.append(\"ScaleInCooldown: \").append(getScaleInCooldown()).append(\",\");\r\n    if (getDisableScaleIn() != null)\r\n        sb.append(\"DisableScaleIn: \").append(getDisableScaleIn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAClient.listTags",
	"Comment": "lists the tags, if any, that are associated with your private ca. tags are labels that you can use to identifyand organize your cas. each tag consists of a key and an optional value. call the tagcertificateauthorityoperation to add one or more tags to your ca. call the untagcertificateauthority operation to remove tags.",
	"Method": "ListTagsResult listTags(ListTagsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListTags(request);\r\n}"
}, {
	"Path": "aimax.osm.viewer.MapStyleFactory.createNightViewClassifier",
	"Comment": "demonstrates, how an entity classifier for view information objects can\tbe customized.",
	"Method": "EntityClassifier<EntityViewInfo> createNightViewClassifier(){\r\n    EntityClassifier<EntityViewInfo> result = createDefaultClassifier();\r\n    result.replaceRule(\"highway\", \"path\", createWayInfo(1f / 100000, 1f / 3500, 38, UColor.YELLOW.darker(), 1));\r\n    result.replaceRule(\"highway\", \"track\", createWayInfo(1f / 60000, 1f / 3500, 37, UColor.YELLOW.darker(), 1));\r\n    result.replaceRule(\"place\", \"city\", createPoiInfo(1e-9f, 1f / 3500000, 30, UColor.WHITE, null, false));\r\n    result.replaceRule(\"place\", \"town\", createPoiInfo(1e-9f, 1f / 350000, 29, UColor.WHITE, null, false));\r\n    result.replaceRule(\"place\", \"village\", createPoiInfo(1e-9f, 1f / 100000, 29, UColor.GRAY, null, false));\r\n    result.replaceRule(\"place\", null, createPoiInfo(1e-9f, 1f / 35000, 28, UColor.GRAY, null, false));\r\n    result.replaceRule(\"marker\", \"yes\", createPoiInfo(1e-9f, 1e-9f, 0, UColor.YELLOW, new PinIcon(12, UColor.YELLOW, UColor.YELLOW), false));\r\n    result.replaceRule(\"track_type\", null, createTrackInfo(UColor.WHITE));\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.RequestCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateContactFromAddressBookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn()).append(\",\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteDataSourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateApiKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getCustomerId() != null)\r\n        sb.append(\"CustomerId: \").append(getCustomerId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getLastUpdatedDate() != null)\r\n        sb.append(\"LastUpdatedDate: \").append(getLastUpdatedDate()).append(\",\");\r\n    if (getStageKeys() != null)\r\n        sb.append(\"StageKeys: \").append(getStageKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DisableUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UntagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.nondeterministic.Plan.getAction",
	"Comment": "returns the corresponding action for the given action step.",
	"Method": "A getAction(int step){\r\n    return actionSteps.get(step);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteApiKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiKey() != null)\r\n        sb.append(\"ApiKey: \").append(getApiKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteSkillGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describePolicies",
	"Comment": "describes the policies for the specified auto scaling group.",
	"Method": "DescribePoliciesResult describePolicies(DescribePoliciesRequest request,DescribePoliciesResult describePolicies){\r\n    return describePolicies(new DescribePoliciesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.updateCertificateOptions",
	"Comment": "updates a certificate. currently, you can use this function to specify whether to opt in to or out of recordingyour certificate in a certificate transparency log. for more information, seeoptingout of certificate transparency logging.",
	"Method": "UpdateCertificateOptionsResult updateCertificateOptions(UpdateCertificateOptionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateCertificateOptions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.setDesiredCapacity",
	"Comment": "sets the size of the specified auto scaling group.for more information about desired capacity, see what is amazon ec2 autoscaling? in the amazon ec2 auto scaling user guide.",
	"Method": "SetDesiredCapacityResult setDesiredCapacity(SetDesiredCapacityRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSetDesiredCapacity(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeUsersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsers() != null)\r\n        sb.append(\"Users: \").append(getUsers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.PutRoomSkillParameterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetApiKeysRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNameQuery() != null)\r\n        sb.append(\"NameQuery: \").append(getNameQuery()).append(\",\");\r\n    if (getCustomerId() != null)\r\n        sb.append(\"CustomerId: \").append(getCustomerId()).append(\",\");\r\n    if (getIncludeValues() != null)\r\n        sb.append(\"IncludeValues: \").append(getIncludeValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.local.HillClimbingSearch.getLastSearchState",
	"Comment": "returns the last state from which the hill climbing search found thelocal maximum.",
	"Method": "S getLastSearchState(){\r\n    return lastState;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "aima.core.robotics.MonteCarloLocalization.generateCloud",
	"Comment": "this method is the initialization phase of the algorithm. it has to be called to generate a set of samples of count n.",
	"Method": "Set<P> generateCloud(int N){\r\n    Set<P> samples = new LinkedHashSet<P>();\r\n    Integer[] indexes = new Integer[N];\r\n    for (int i = 0; i < N; i++) {\r\n        samples.add(map.randomPose());\r\n        indexes[i] = i;\r\n    }\r\n    sampleIndexes = new RandVar(SAMPLE_INDEXES_NAME, new FiniteIntegerDomain(indexes));\r\n    return samples;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.ListCertificateAuthoritiesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.TestInvokeAuthorizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId()).append(\",\");\r\n    if (getHeaders() != null)\r\n        sb.append(\"Headers: \").append(getHeaders()).append(\",\");\r\n    if (getMultiValueHeaders() != null)\r\n        sb.append(\"MultiValueHeaders: \").append(getMultiValueHeaders()).append(\",\");\r\n    if (getPathWithQueryString() != null)\r\n        sb.append(\"PathWithQueryString: \").append(getPathWithQueryString()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody()).append(\",\");\r\n    if (getStageVariables() != null)\r\n        sb.append(\"StageVariables: \").append(getStageVariables()).append(\",\");\r\n    if (getAdditionalContext() != null)\r\n        sb.append(\"AdditionalContext: \").append(getAdditionalContext());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.RevocationConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCrlConfiguration() != null)\r\n        sb.append(\"CrlConfiguration: \").append(getCrlConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribePoliciesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScalingPolicies() != null)\r\n        sb.append(\"ScalingPolicies: \").append(getScalingPolicies()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.csp.inference.DomainLog.storeDomainFor",
	"Comment": "stores the specified domain for the specified variable if a domain has\tnot yet been stored for the variable.",
	"Method": "void storeDomainFor(VAR var,Domain<VAL> domain){\r\n    if (!affectedVariables.contains(var)) {\r\n        savedDomains.add(new Pair(var, domain));\r\n        affectedVariables.add(var);\r\n    }\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.Point2D.getX",
	"Comment": "returns the x coordinate of this point2d in\tdouble precision.",
	"Method": "double getX(){\r\n    return x;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.suspendProcesses",
	"Comment": "suspends the specified automatic scaling processes, or all processes, for the specified auto scaling group.if you suspend either the launch or terminate process types, it can prevent otherprocess types from functioning properly.to resume processes that have been suspended, use resumeprocesses.for more information, see suspending andresuming scaling processes in the amazon ec2 auto scaling user guide.",
	"Method": "SuspendProcessesResult suspendProcesses(SuspendProcessesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSuspendProcesses(request);\r\n}"
}, {
	"Path": "aima.gui.util.SearchFactory.getInstance",
	"Comment": "provides access to the factory. implemented with lazy instantiation.",
	"Method": "SearchFactory getInstance(){\r\n    if (instance == null)\r\n        instance = new SearchFactory();\r\n    return instance;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.IPDialIn.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint()).append(\",\");\r\n    if (getCommsProtocol() != null)\r\n        sb.append(\"CommsProtocol: \").append(getCommsProtocol());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateFleetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFleet() != null)\r\n        sb.append(\"Fleet: \").append(getFleet());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.common.Parser.loadNextTokenFromInput",
	"Comment": "loads the next token into the lookahead buffer if the end of the stream\thas not already been reached.",
	"Method": "void loadNextTokenFromInput(){\r\n    boolean eoiEncountered = false;\r\n    for (int i = 0; i < lookAheadBufferSize - 1; i++) {\r\n        lookAheadBuffer[i] = lookAheadBuffer[i + 1];\r\n        if (isEndOfInput(lookAheadBuffer[i])) {\r\n            eoiEncountered = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!eoiEncountered) {\r\n        lookAheadBuffer[lookAheadBufferSize - 1] = getLexer().nextToken();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StartImageBuilderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getAppstreamAgentVersion() != null)\r\n        sb.append(\"AppstreamAgentVersion: \").append(getAppstreamAgentVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.Point2D.getY",
	"Comment": "returns the y coordinate of this point2d in\tdouble precision.",
	"Method": "double getY(){\r\n    return y;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.disableMetricsCollection",
	"Comment": "disables group metrics for the specified auto scaling group.",
	"Method": "DisableMetricsCollectionResult disableMetricsCollection(DisableMetricsCollectionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDisableMetricsCollection(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StackError.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.fol.inference.proof.ProofPrinter.printProof",
	"Comment": "utility method for outputting proofs in a formatted textual\trepresentation.",
	"Method": "String printProof(Proof proof){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"Proof, Answer Bindings: \");\r\n    sb.append(proof.getAnswerBindings());\r\n    sb.append(\"\\n\");\r\n    List<ProofStep> steps = proof.getSteps();\r\n    int maxStepWidth = \"Step\".length();\r\n    int maxProofWidth = \"Proof\".length();\r\n    int maxJustificationWidth = \"Justification\".length();\r\n    for (ProofStep step : steps) {\r\n        String sn = \"\" + step.getStepNumber();\r\n        if (sn.length() > maxStepWidth) {\r\n            maxStepWidth = sn.length();\r\n        }\r\n        if (step.getProof().length() > maxProofWidth) {\r\n            maxProofWidth = step.getProof().length();\r\n        }\r\n        if (step.getJustification().length() > maxJustificationWidth) {\r\n            maxJustificationWidth = step.getJustification().length();\r\n        }\r\n    }\r\n    maxStepWidth += 1;\r\n    maxProofWidth += 1;\r\n    maxJustificationWidth += 1;\r\n    String f = \"|%-\" + maxStepWidth + \"s| %-\" + maxProofWidth + \"s|%-\" + maxJustificationWidth + \"s|\\n\";\r\n    int barWidth = 5 + maxStepWidth + maxProofWidth + maxJustificationWidth;\r\n    StringBuilder bar = new StringBuilder();\r\n    for (int i = 0; i < barWidth; i++) {\r\n        bar.append(\"-\");\r\n    }\r\n    bar.append(\"\\n\");\r\n    sb.append(bar);\r\n    sb.append(String.format(f, \"Step\", \"Proof\", \"Justification\"));\r\n    sb.append(bar);\r\n    for (ProofStep step : steps) {\r\n        sb.append(String.format(f, \"\" + step.getStepNumber(), step.getProof(), step.getJustification()));\r\n    }\r\n    sb.append(bar);\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RegisterAVSDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.TransformMatrix2D.determinant",
	"Comment": "calculates the determinant of this transformation matrix.",
	"Method": "double determinant(){\r\n    return a * d - b * c;\r\n}"
}, {
	"Path": "aima.core.search.csp.AbstractBacktrackingSolver.backtrack",
	"Comment": "template method, which can be configured by overriding the threeprimitive operations below.",
	"Method": "Assignment<VAR, VAL> backtrack(CSP<VAR, VAL> csp,Assignment<VAR, VAL> assignment){\r\n    Assignment<VAR, VAL> result = null;\r\n    if (assignment.isComplete(csp.getVariables()) || Tasks.currIsCancelled()) {\r\n        result = assignment;\r\n    } else {\r\n        VAR var = selectUnassignedVariable(csp, assignment);\r\n        for (VAL value : orderDomainValues(csp, assignment, var)) {\r\n            assignment.add(var, value);\r\n            fireStateChanged(csp, assignment, var);\r\n            if (assignment.isConsistent(csp.getConstraints(var))) {\r\n                InferenceLog<VAR, VAL> log = inference(csp, assignment, var);\r\n                if (!log.isEmpty())\r\n                    fireStateChanged(csp, null, null);\r\n                if (!log.inconsistencyFound()) {\r\n                    result = backtrack(csp, assignment);\r\n                    if (result != null)\r\n                        break;\r\n                }\r\n                log.undo(csp);\r\n            }\r\n            assignment.remove(var);\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazonalexaforbusinessasync using the current builder configuration.",
	"Method": "AmazonAlexaForBusinessAsync build(AwsAsyncClientParams params){\r\n    return new AmazonAlexaForBusinessAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.Row.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getData() != null)\r\n        sb.append(\"Data: \").append(getData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.EnterStandbyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceIds() != null)\r\n        sb.append(\"InstanceIds: \").append(getInstanceIds()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getShouldDecrementDesiredCapacity() != null)\r\n        sb.append(\"ShouldDecrementDesiredCapacity: \").append(getShouldDecrementDesiredCapacity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.readLockColumns",
	"Comment": "return a mapping of existing lock columns and their expiration times",
	"Method": "Map<C, Long> readLockColumns(Map<C, Long> readLockColumns,boolean readDataColumns){\r\n    Map<C, Long> result = Maps.newLinkedHashMap();\r\n    if (readDataColumns) {\r\n        columns = new OrderedColumnMap<C>();\r\n        ColumnList<C> lockResult = keyspace.prepareQuery(columnFamily).setConsistencyLevel(consistencyLevel).getKey(key).execute().getResult();\r\n        for (Column<C> c : lockResult) {\r\n            if (columnStrategy.isLockColumn(c.getName()))\r\n                result.put(c.getName(), readTimeoutValue(c));\r\n            else\r\n                columns.add(c);\r\n        }\r\n    } else {\r\n        ColumnList<C> lockResult = keyspace.prepareQuery(columnFamily).setConsistencyLevel(consistencyLevel).getKey(key).withColumnRange(columnStrategy.getLockColumnRange()).execute().getResult();\r\n        for (Column<C> c : lockResult) {\r\n            result.put(c.getName(), readTimeoutValue(c));\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.FunctionConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFunctionId() != null)\r\n        sb.append(\"FunctionId: \").append(getFunctionId()).append(\",\");\r\n    if (getFunctionArn() != null)\r\n        sb.append(\"FunctionArn: \").append(getFunctionArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDataSourceName() != null)\r\n        sb.append(\"DataSourceName: \").append(getDataSourceName()).append(\",\");\r\n    if (getRequestMappingTemplate() != null)\r\n        sb.append(\"RequestMappingTemplate: \").append(getRequestMappingTemplate()).append(\",\");\r\n    if (getResponseMappingTemplate() != null)\r\n        sb.append(\"ResponseMappingTemplate: \").append(getResponseMappingTemplate()).append(\",\");\r\n    if (getFunctionVersion() != null)\r\n        sb.append(\"FunctionVersion: \").append(getFunctionVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutScalingPolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getPolicyName() != null)\r\n        sb.append(\"PolicyName: \").append(getPolicyName()).append(\",\");\r\n    if (getPolicyType() != null)\r\n        sb.append(\"PolicyType: \").append(getPolicyType()).append(\",\");\r\n    if (getAdjustmentType() != null)\r\n        sb.append(\"AdjustmentType: \").append(getAdjustmentType()).append(\",\");\r\n    if (getMinAdjustmentStep() != null)\r\n        sb.append(\"MinAdjustmentStep: \").append(getMinAdjustmentStep()).append(\",\");\r\n    if (getMinAdjustmentMagnitude() != null)\r\n        sb.append(\"MinAdjustmentMagnitude: \").append(getMinAdjustmentMagnitude()).append(\",\");\r\n    if (getScalingAdjustment() != null)\r\n        sb.append(\"ScalingAdjustment: \").append(getScalingAdjustment()).append(\",\");\r\n    if (getCooldown() != null)\r\n        sb.append(\"Cooldown: \").append(getCooldown()).append(\",\");\r\n    if (getMetricAggregationType() != null)\r\n        sb.append(\"MetricAggregationType: \").append(getMetricAggregationType()).append(\",\");\r\n    if (getStepAdjustments() != null)\r\n        sb.append(\"StepAdjustments: \").append(getStepAdjustments()).append(\",\");\r\n    if (getEstimatedInstanceWarmup() != null)\r\n        sb.append(\"EstimatedInstanceWarmup: \").append(getEstimatedInstanceWarmup()).append(\",\");\r\n    if (getTargetTrackingConfiguration() != null)\r\n        sb.append(\"TargetTrackingConfiguration: \").append(getTargetTrackingConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.BlockDeviceMapping.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualName() != null)\r\n        sb.append(\"VirtualName: \").append(getVirtualName()).append(\",\");\r\n    if (getDeviceName() != null)\r\n        sb.append(\"DeviceName: \").append(getDeviceName()).append(\",\");\r\n    if (getEbs() != null)\r\n        sb.append(\"Ebs: \").append(getEbs()).append(\",\");\r\n    if (getNoDevice() != null)\r\n        sb.append(\"NoDevice: \").append(getNoDevice());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateSkillGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.MeshData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getMetadata() != null)\r\n        sb.append(\"Metadata: \").append(getMetadata()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateApiKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiKey() != null)\r\n        sb.append(\"ApiKey: \").append(getApiKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDeploymentsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ImageBuilder.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getImageArn() != null)\r\n        sb.append(\"ImageArn: \").append(getImageArn()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getVpcConfig() != null)\r\n        sb.append(\"VpcConfig: \").append(getVpcConfig()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getStateChangeReason() != null)\r\n        sb.append(\"StateChangeReason: \").append(getStateChangeReason()).append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime()).append(\",\");\r\n    if (getEnableDefaultInternetAccess() != null)\r\n        sb.append(\"EnableDefaultInternetAccess: \").append(getEnableDefaultInternetAccess()).append(\",\");\r\n    if (getDomainJoinInfo() != null)\r\n        sb.append(\"DomainJoinInfo: \").append(getDomainJoinInfo()).append(\",\");\r\n    if (getImageBuilderErrors() != null)\r\n        sb.append(\"ImageBuilderErrors: \").append(getImageBuilderErrors()).append(\",\");\r\n    if (getAppstreamAgentVersion() != null)\r\n        sb.append(\"AppstreamAgentVersion: \").append(getAppstreamAgentVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultMap.getWays",
	"Comment": "returns all map ways which intersect the specified bounding box.",
	"Method": "Collection<MapWay> getWays(BoundingBox bb){\r\n    List<MapWay> result = new ArrayList<MapWay>();\r\n    for (MapWay way : ways.values()) if (way.computeBoundingBox().intersectsWith(bb))\r\n        result.add(way);\r\n    return result;\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearch.isFrontierEmpty",
	"Comment": "pops nodes of already explored states from the head of the frontier\tand checks whether there are still some nodes left.",
	"Method": "boolean isFrontierEmpty(){\r\n    cleanUpFrontier();\r\n    updateMetrics(frontier.size());\r\n    return frontier.isEmpty();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.adjustToCenter",
	"Comment": "puts a position given in world coordinates into the center of the view.",
	"Method": "void adjustToCenter(double lat,double lon){\r\n    int dx = getWidth() / 2 - getTransformer().x(lon);\r\n    int dy = getHeight() / 2 - getTransformer().y(lat);\r\n    adjust(dx, dy);\r\n}"
}, {
	"Path": "aimax.osm.data.BoundingBox.adjust",
	"Comment": "makes sure, that all given nodes are within the box and extends the\tbounds if necessary.",
	"Method": "void adjust(Collection<MapNode> nodes){\r\n    for (MapNode node : nodes) {\r\n        if (Float.isNaN(latMin)) {\r\n            latMin = latMax = node.getLat();\r\n            lonMin = lonMax = node.getLon();\r\n        } else if (node.hasPosition()) {\r\n            if (node.getLat() < latMin)\r\n                latMin = node.getLat();\r\n            else if (node.getLat() > latMax)\r\n                latMax = node.getLat();\r\n            if (node.getLon() < lonMin)\r\n                lonMin = node.getLon();\r\n            else if (node.getLon() > lonMax)\r\n                lonMax = node.getLon();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.DomainValidationOption.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getValidationDomain() != null)\r\n        sb.append(\"ValidationDomain: \").append(getValidationDomain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GenerateClientCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPemEncodedCertificate() != null)\r\n        sb.append(\"PemEncodedCertificate: \").append(getPemEncodedCertificate()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getExpirationDate() != null)\r\n        sb.append(\"ExpirationDate: \").append(getExpirationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.reader.AllRowsReader.startTasks",
	"Comment": "submit all the callables to the executor by synchronize their execution so they all startafter the have all been submitted.",
	"Method": "List<Future<Boolean>> startTasks(ExecutorService executor,List<Callable<Boolean>> callables){\r\n    List<Future<Boolean>> tasks = Lists.newArrayList();\r\n    for (Callable<Boolean> callable : callables) {\r\n        tasks.add(executor.submit(callable));\r\n    }\r\n    return tasks;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateAddressBookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.BidirectionalSearch.isFrontierEmpty",
	"Comment": "pops nodes of already explored states from the head of the frontier and\tchecks whether there are still some nodes left.",
	"Method": "boolean isFrontierEmpty(){\r\n    cleanUpFrontier();\r\n    updateMetrics(frontier.size());\r\n    return frontier.isEmpty();\r\n}"
}, {
	"Path": "aima.core.search.local.SimulatedAnnealingSearch.getLastSearchState",
	"Comment": "returns the last state from which the simulated annealing search found a\tsolution state.",
	"Method": "Object getLastSearchState(){\r\n    return lastState;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateRequestValidatorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValidateRequestBody() != null)\r\n        sb.append(\"ValidateRequestBody: \").append(getValidateRequestBody()).append(\",\");\r\n    if (getValidateRequestParameters() != null)\r\n        sb.append(\"ValidateRequestParameters: \").append(getValidateRequestParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.BidirectionalSearch.cleanUpFrontier",
	"Comment": "helper method which removes nodes of already explored states from the\thead of the frontier.",
	"Method": "void cleanUpFrontier(){\r\n    while (!frontier.isEmpty() && isExplored(frontier.element())) frontier.remove();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateDomainNameResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getCertificateName() != null)\r\n        sb.append(\"CertificateName: \").append(getCertificateName()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getCertificateUploadDate() != null)\r\n        sb.append(\"CertificateUploadDate: \").append(getCertificateUploadDate()).append(\",\");\r\n    if (getRegionalDomainName() != null)\r\n        sb.append(\"RegionalDomainName: \").append(getRegionalDomainName()).append(\",\");\r\n    if (getRegionalHostedZoneId() != null)\r\n        sb.append(\"RegionalHostedZoneId: \").append(getRegionalHostedZoneId()).append(\",\");\r\n    if (getRegionalCertificateName() != null)\r\n        sb.append(\"RegionalCertificateName: \").append(getRegionalCertificateName()).append(\",\");\r\n    if (getRegionalCertificateArn() != null)\r\n        sb.append(\"RegionalCertificateArn: \").append(getRegionalCertificateArn()).append(\",\");\r\n    if (getDistributionDomainName() != null)\r\n        sb.append(\"DistributionDomainName: \").append(getDistributionDomainName()).append(\",\");\r\n    if (getDistributionHostedZoneId() != null)\r\n        sb.append(\"DistributionHostedZoneId: \").append(getDistributionHostedZoneId()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.csp.FlexibleBacktrackingSolver.solve",
	"Comment": "applies an initial inference step and then calls the super class implementation.",
	"Method": "Optional<Assignment<VAR, VAL>> solve(CSP<VAR, VAL> csp){\r\n    if (inferenceStrategy != null) {\r\n        csp = csp.copyDomains();\r\n        InferenceLog log = inferenceStrategy.apply(csp);\r\n        if (!log.isEmpty()) {\r\n            fireStateChanged(csp, null, null);\r\n            if (log.inconsistencyFound())\r\n                return Optional.empty();\r\n        }\r\n    }\r\n    return super.solve(csp);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazonapigateway using the current builder configuration.",
	"Method": "AmazonApiGateway build(AwsSyncClientParams params){\r\n    return new AmazonApiGatewayClient(params);\r\n}"
}, {
	"Path": "aima.gui.fx.framework.Parameter.setDependency",
	"Comment": "indicates that this parameter is only relevant, if one of the specified\tvalues has been assigned to another parameter.",
	"Method": "void setDependency(String paramName,String values){\r\n    dependsOnParam = paramName;\r\n    dependsOnValues = Arrays.asList(values);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetSdkTypeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getFriendlyName() != null)\r\n        sb.append(\"FriendlyName: \").append(getFriendlyName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getConfigurationProperties() != null)\r\n        sb.append(\"ConfigurationProperties: \").append(getConfigurationProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeStacksRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNames() != null)\r\n        sb.append(\"Names: \").append(getNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateIntegrationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.VpcConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds()).append(\",\");\r\n    if (getSecurityGroupIds() != null)\r\n        sb.append(\"SecurityGroupIds: \").append(getSecurityGroupIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListSkillsStoreCategoriesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCategoryList() != null)\r\n        sb.append(\"CategoryList: \").append(getCategoryList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.routing.MapAdapter.getWayNode",
	"Comment": "returns the osm way node corresponding to the given location string.",
	"Method": "MapNode getWayNode(String id){\r\n    MapNode result = null;\r\n    try {\r\n        result = osmMap.getNode(Long.parseLong(id));\r\n    } catch (NumberFormatException e) {\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.LaunchConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLaunchConfigurationName() != null)\r\n        sb.append(\"LaunchConfigurationName: \").append(getLaunchConfigurationName()).append(\",\");\r\n    if (getLaunchConfigurationARN() != null)\r\n        sb.append(\"LaunchConfigurationARN: \").append(getLaunchConfigurationARN()).append(\",\");\r\n    if (getImageId() != null)\r\n        sb.append(\"ImageId: \").append(getImageId()).append(\",\");\r\n    if (getKeyName() != null)\r\n        sb.append(\"KeyName: \").append(getKeyName()).append(\",\");\r\n    if (getSecurityGroups() != null)\r\n        sb.append(\"SecurityGroups: \").append(getSecurityGroups()).append(\",\");\r\n    if (getClassicLinkVPCId() != null)\r\n        sb.append(\"ClassicLinkVPCId: \").append(getClassicLinkVPCId()).append(\",\");\r\n    if (getClassicLinkVPCSecurityGroups() != null)\r\n        sb.append(\"ClassicLinkVPCSecurityGroups: \").append(getClassicLinkVPCSecurityGroups()).append(\",\");\r\n    if (getUserData() != null)\r\n        sb.append(\"UserData: \").append(getUserData()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getKernelId() != null)\r\n        sb.append(\"KernelId: \").append(getKernelId()).append(\",\");\r\n    if (getRamdiskId() != null)\r\n        sb.append(\"RamdiskId: \").append(getRamdiskId()).append(\",\");\r\n    if (getBlockDeviceMappings() != null)\r\n        sb.append(\"BlockDeviceMappings: \").append(getBlockDeviceMappings()).append(\",\");\r\n    if (getInstanceMonitoring() != null)\r\n        sb.append(\"InstanceMonitoring: \").append(getInstanceMonitoring()).append(\",\");\r\n    if (getSpotPrice() != null)\r\n        sb.append(\"SpotPrice: \").append(getSpotPrice()).append(\",\");\r\n    if (getIamInstanceProfile() != null)\r\n        sb.append(\"IamInstanceProfile: \").append(getIamInstanceProfile()).append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime()).append(\",\");\r\n    if (getEbsOptimized() != null)\r\n        sb.append(\"EbsOptimized: \").append(getEbsOptimized()).append(\",\");\r\n    if (getAssociatePublicIpAddress() != null)\r\n        sb.append(\"AssociatePublicIpAddress: \").append(getAssociatePublicIpAddress()).append(\",\");\r\n    if (getPlacementTenancy() != null)\r\n        sb.append(\"PlacementTenancy: \").append(getPlacementTenancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateStackRequest.getDeleteStorageConnectors",
	"Comment": "deletes the storage connectors currently enabled for the stack.",
	"Method": "Boolean getDeleteStorageConnectors(){\r\n    return this.deleteStorageConnectors;\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateDataSourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDataSource() != null)\r\n        sb.append(\"DataSource: \").append(getDataSource());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetResolverResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResolver() != null)\r\n        sb.append(\"Resolver: \").append(getResolver());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describePoliciesAsync",
	"Comment": "simplified method form for invoking the describepolicies operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync(DescribePoliciesRequest request,java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync,DescribePoliciesRequest request,com.amazonaws.handlers.AsyncHandler<DescribePoliciesRequest, DescribePoliciesResult> asyncHandler,java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync,java.util.concurrent.Future<DescribePoliciesResult> describePoliciesAsync,com.amazonaws.handlers.AsyncHandler<DescribePoliciesRequest, DescribePoliciesResult> asyncHandler){\r\n    return describePoliciesAsync(new DescribePoliciesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.CertificateAuthorityConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKeyAlgorithm() != null)\r\n        sb.append(\"KeyAlgorithm: \").append(getKeyAlgorithm()).append(\",\");\r\n    if (getSigningAlgorithm() != null)\r\n        sb.append(\"SigningAlgorithm: \").append(getSigningAlgorithm()).append(\",\");\r\n    if (getSubject() != null)\r\n        sb.append(\"Subject: \").append(getSubject());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeNotificationConfigurationsAsync",
	"Comment": "simplified method form for invoking the describenotificationconfigurations operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync(DescribeNotificationConfigurationsRequest request,java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync,DescribeNotificationConfigurationsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeNotificationConfigurationsRequest, DescribeNotificationConfigurationsResult> asyncHandler,java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync,java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync,com.amazonaws.handlers.AsyncHandler<DescribeNotificationConfigurationsRequest, DescribeNotificationConfigurationsResult> asyncHandler){\r\n    return describeNotificationConfigurationsAsync(new DescribeNotificationConfigurationsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.createDeployment",
	"Comment": "creates a deployment resource, which makes a specified restapi callable over the internet.",
	"Method": "CreateDeploymentResult createDeployment(CreateDeploymentRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDeployment(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetStageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCacheClusterEnabled() != null)\r\n        sb.append(\"CacheClusterEnabled: \").append(getCacheClusterEnabled()).append(\",\");\r\n    if (getCacheClusterSize() != null)\r\n        sb.append(\"CacheClusterSize: \").append(getCacheClusterSize()).append(\",\");\r\n    if (getCacheClusterStatus() != null)\r\n        sb.append(\"CacheClusterStatus: \").append(getCacheClusterStatus()).append(\",\");\r\n    if (getMethodSettings() != null)\r\n        sb.append(\"MethodSettings: \").append(getMethodSettings()).append(\",\");\r\n    if (getVariables() != null)\r\n        sb.append(\"Variables: \").append(getVariables()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion()).append(\",\");\r\n    if (getAccessLogSettings() != null)\r\n        sb.append(\"AccessLogSettings: \").append(getAccessLogSettings()).append(\",\");\r\n    if (getCanarySettings() != null)\r\n        sb.append(\"CanarySettings: \").append(getCanarySettings()).append(\",\");\r\n    if (getTracingEnabled() != null)\r\n        sb.append(\"TracingEnabled: \").append(getTracingEnabled()).append(\",\");\r\n    if (getWebAclArn() != null)\r\n        sb.append(\"WebAclArn: \").append(getWebAclArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getLastUpdatedDate() != null)\r\n        sb.append(\"LastUpdatedDate: \").append(getLastUpdatedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.deleteAutoScalingGroup",
	"Comment": "deletes the specified auto scaling group.if the group has instances or scaling activities in progress, you must specify the option to force the deletionin order for it to succeed.if the group has policies, deleting the group deletes the policies, the underlying alarm actions, and any alarmthat no longer has an associated action.to remove instances from the auto scaling group before deleting it, call detachinstances with the list ofinstances and the option to decrement the desired capacity. this ensures that amazon ec2 auto scaling does notlaunch replacement instances.to terminate all instances before deleting the auto scaling group, call updateautoscalinggroup and set theminimum size and desired capacity of the auto scaling group to zero.",
	"Method": "DeleteAutoScalingGroupResult deleteAutoScalingGroup(DeleteAutoScalingGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteAutoScalingGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.putScheduledUpdateGroupAction",
	"Comment": "creates or updates a scheduled scaling action for an auto scaling group. if you leave a parameter unspecifiedwhen updating a scheduled scaling action, the corresponding value remains unchanged.for more information, see scheduled scaling in theamazon ec2 auto scaling user guide.",
	"Method": "PutScheduledUpdateGroupActionResult putScheduledUpdateGroupAction(PutScheduledUpdateGroupActionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutScheduledUpdateGroupAction(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ForgetSmartHomeAppliancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteFleetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "aima.core.robotics.impl.map.MclCartesianPlot2D.getAreaBoundaries",
	"Comment": "returns an iterator over the boundaries of the area polygons.",
	"Method": "Iterator<Rect2D> getAreaBoundaries(){\r\n    return areas.getBoundaries();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ListAssociatedStacksRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFleetName() != null)\r\n        sb.append(\"FleetName: \").append(getFleetName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AssociateContactWithAddressBookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateModelRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetFunctionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFunctionConfiguration() != null)\r\n        sb.append(\"FunctionConfiguration: \").append(getFunctionConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.entitystore.CompositeEntityMapper.getComparatorType",
	"Comment": "return the cassandra comparator type for this composite structure",
	"Method": "String getComparatorType(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"CompositeType(\");\r\n    sb.append(StringUtils.join(Collections2.transform(components, new Function<FieldMapper<?>, String>() {\r\n        public String apply(FieldMapper<?> input) {\r\n            return input.serializer.getComparatorType().getTypeName();\r\n        }\r\n    }), \",\"));\r\n    sb.append(\")\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.entitystore.CompositeEntityMapper.getComparatorType",
	"Comment": "return the cassandra comparator type for this composite structure",
	"Method": "String getComparatorType(){\r\n    return input.serializer.getComparatorType().getTypeName();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.Session.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getStackName() != null)\r\n        sb.append(\"StackName: \").append(getStackName()).append(\",\");\r\n    if (getFleetName() != null)\r\n        sb.append(\"FleetName: \").append(getFleetName()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType()).append(\",\");\r\n    if (getNetworkAccessConfiguration() != null)\r\n        sb.append(\"NetworkAccessConfiguration: \").append(getNetworkAccessConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteTypeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.StopJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetRestApisResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateImagePermissionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StartFleetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.util.GuiBase.setUIColors",
	"Comment": "sets the default background and foreground colors for all elements of the application to provide a uniform look and feel.",
	"Method": "void setUIColors(){\r\n    UIManager.put(\"OptionPane.background\", BACKGROUND_COLOR);\r\n    UIManager.put(\"ScrollPane.background\", BACKGROUND_COLOR);\r\n    UIManager.put(\"Panel.background\", BACKGROUND_COLOR);\r\n    UIManager.put(\"Slider.background\", BACKGROUND_COLOR);\r\n    UIManager.put(\"OptionPane.messageForeground\", TEXT_COLOR);\r\n    UIManager.put(\"Label.foreground\", TEXT_COLOR);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateVirtualNodeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getVirtualNodeName() != null)\r\n        sb.append(\"VirtualNodeName: \").append(getVirtualNodeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ExecutePolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteMethodRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.ReverseIndexQuery.setShardPageSize",
	"Comment": "set the number columns to read from each shard when paginating.",
	"Method": "ReverseIndexQuery<K, C, V> setShardPageSize(int size){\r\n    this.columnLimit = size;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.BatchAssociateUserStackRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserStackAssociations() != null)\r\n        sb.append(\"UserStackAssociations: \").append(getUserStackAssociations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getResources",
	"Comment": "lists information about a collection of resource resources.",
	"Method": "GetResourcesResult getResources(GetResourcesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetResources(request);\r\n}"
}, {
	"Path": "aimax.osm.reader.OsmHandler.setDocumentLocator",
	"Comment": "sets the document locator which is used to report the position in the\tfile when errors occur.",
	"Method": "void setDocumentLocator(Locator documentLocator){\r\n    this.documentLocator = documentLocator;\r\n}"
}, {
	"Path": "aima.core.search.adversarial.IterativeDeepeningAlphaBetaSearch.isSignificantlyBetter",
	"Comment": "primitive operation which is used to stop iterative deepening search insituations where a clear best action exists. this implementation returnsalways false.",
	"Method": "boolean isSignificantlyBetter(double newUtility,double utility){\r\n    return false;\r\n}"
}, {
	"Path": "aima.core.probability.util.ProbUtil.checkValidRandomVariableName",
	"Comment": "check if name provided is valid for use as the name of a randomvariable.",
	"Method": "void checkValidRandomVariableName(String name){\r\n    if (!LEGAL_RAND_VAR_NAME_PATTERN.matcher(name).matches()) {\r\n        throw new IllegalArgumentException(\"Name of RandomVariable must be specified and contain no leading, trailing or embedded spaces or special characters.\");\r\n    }\r\n    if (!LEGAL_LEADING_CHAR_RAND_VAR_NAME_PATTERN.matcher(name).matches()) {\r\n        throw new IllegalArgumentException(\"Name must start with a leading upper case letter.\");\r\n    }\r\n}"
}, {
	"Path": "aima.core.util.FrequencyCounter.probabilityOf",
	"Comment": "returns the count to which the specified key is mapped in this frequency\tcounter, divided by the total of all counts.",
	"Method": "double probabilityOf(T key){\r\n    Integer value = getCount(key);\r\n    if (0 == total || 0 == value.intValue()) {\r\n        return 0.0;\r\n    } else {\r\n        return value.doubleValue() / total;\r\n    }\r\n}"
}, {
	"Path": "aima.core.search.csp.Assignment.isSolution",
	"Comment": "returns true if this assignment is consistent as well as complete withrespect to the given csp.",
	"Method": "boolean isSolution(CSP<VAR, VAL> csp){\r\n    return isConsistent(csp.getConstraints()) && isComplete(csp.getVariables());\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.CertificateOptions.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateTransparencyLoggingPreference() != null)\r\n        sb.append(\"CertificateTransparencyLoggingPreference: \").append(getCertificateTransparencyLoggingPreference());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.GetQueryExecutionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecution() != null)\r\n        sb.append(\"QueryExecution: \").append(getQueryExecution());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.expandPages",
	"Comment": "adds pages that are linked to or is linked from one of the pages passed\tas argument.",
	"Method": "List<Page> expandPages(List<Page> pages){\r\n    List<Page> expandedPages = new ArrayList();\r\n    Set<String> inAndOutLinks = new HashSet();\r\n    for (Page currP : pages) {\r\n        if (!expandedPages.contains(currP))\r\n            expandedPages.add(currP);\r\n        List<String> currInlinks = currP.getInlinks();\r\n        for (String currInlink : currInlinks) inAndOutLinks.add(currInlink);\r\n        List<String> currOutlinks = currP.getOutlinks();\r\n        for (String currOutlink : currOutlinks) inAndOutLinks.add(currOutlink);\r\n    }\r\n    for (String addr : inAndOutLinks) {\r\n        Page p = pTable.get(addr);\r\n        if (p != null && !expandedPages.contains(p)) {\r\n            expandedPages.add(p);\r\n        }\r\n    }\r\n    return expandedPages;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.Resource.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getParentId() != null)\r\n        sb.append(\"ParentId: \").append(getParentId()).append(\",\");\r\n    if (getPathPart() != null)\r\n        sb.append(\"PathPart: \").append(getPathPart()).append(\",\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getResourceMethods() != null)\r\n        sb.append(\"ResourceMethods: \").append(getResourceMethods());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.StartQueryExecutionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionId() != null)\r\n        sb.append(\"QueryExecutionId: \").append(getQueryExecutionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getDeviceName() != null)\r\n        sb.append(\"DeviceName: \").append(getDeviceName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.disassociateFleet",
	"Comment": "disassociates the specified fleet from the specified stack.",
	"Method": "DisassociateFleetResult disassociateFleet(DisassociateFleetRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociateFleet(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeLifecycleHookTypesAsync",
	"Comment": "simplified method form for invoking the describelifecyclehooktypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync(DescribeLifecycleHookTypesRequest request,java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync,DescribeLifecycleHookTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeLifecycleHookTypesRequest, DescribeLifecycleHookTypesResult> asyncHandler,java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync,java.util.concurrent.Future<DescribeLifecycleHookTypesResult> describeLifecycleHookTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeLifecycleHookTypesRequest, DescribeLifecycleHookTypesResult> asyncHandler){\r\n    return describeLifecycleHookTypesAsync(new DescribeLifecycleHookTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.TransformMatrix2D.translate",
	"Comment": "produces a transformation matrix representing a translation operation.",
	"Method": "TransformMatrix2D translate(double x,double y){\r\n    return new TransformMatrix2D(1.0d, 0.0d, 0.0d, 1.0d, x, y);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.HttpRouteAction.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getWeightedTargets() != null)\r\n        sb.append(\"WeightedTargets: \").append(getWeightedTargets());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetSkillGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.robotics.impl.map.MclCartesianPlot2D.getObstacleBoundaries",
	"Comment": "returns an iterator over the boundaries of the obstacle polygons.",
	"Method": "Iterator<Rect2D> getObstacleBoundaries(){\r\n    return obstacles.getBoundaries();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DnsServiceDiscovery.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceName() != null)\r\n        sb.append(\"ServiceName: \").append(getServiceName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ElasticsearchDataSourceConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.releaseAllLocks",
	"Comment": "release all locks. use this carefully as it could release a lock for arunning operation.",
	"Method": "Map<C, Long> releaseAllLocks(){\r\n    return releaseLocks(true);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeSessionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSessions() != null)\r\n        sb.append(\"Sessions: \").append(getSessions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.ScalableTarget.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getMinCapacity() != null)\r\n        sb.append(\"MinCapacity: \").append(getMinCapacity()).append(\",\");\r\n    if (getMaxCapacity() != null)\r\n        sb.append(\"MaxCapacity: \").append(getMaxCapacity()).append(\",\");\r\n    if (getRoleARN() != null)\r\n        sb.append(\"RoleARN: \").append(getRoleARN()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateTypeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getDefinition() != null)\r\n        sb.append(\"Definition: \").append(getDefinition()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.CreateOrUpdateTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteTypeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateUsagePlanRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getApiStages() != null)\r\n        sb.append(\"ApiStages: \").append(getApiStages()).append(\",\");\r\n    if (getThrottle() != null)\r\n        sb.append(\"Throttle: \").append(getThrottle()).append(\",\");\r\n    if (getQuota() != null)\r\n        sb.append(\"Quota: \").append(getQuota());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListResolversRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.CreateNamedQueryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDatabase() != null)\r\n        sb.append(\"Database: \").append(getDatabase()).append(\",\");\r\n    if (getQueryString() != null)\r\n        sb.append(\"QueryString: \").append(getQueryString()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetVpcLinksResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchAddressBooksResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBooks() != null)\r\n        sb.append(\"AddressBooks: \").append(getAddressBooks()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getTotalCount() != null)\r\n        sb.append(\"TotalCount: \").append(getTotalCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CopyImageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDestinationImageName() != null)\r\n        sb.append(\"DestinationImageName: \").append(getDestinationImageName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazonathena using the current builder configuration.",
	"Method": "AmazonAthena build(AwsSyncClientParams params){\r\n    return new AmazonAthenaClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.GetCertificateAuthorityCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.TagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazonapigatewayasync using the current builder configuration.",
	"Method": "AmazonApiGatewayAsync build(AwsAsyncClientParams params){\r\n    return new AmazonApiGatewayAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.listCertificates",
	"Comment": "retrieves a list of certificate arns and domain names. you can request that only certificates that match aspecific status be listed. you can also filter by specific attributes of the certificate.",
	"Method": "ListCertificatesResult listCertificates(ListCertificatesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListCertificates(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.App.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getAppArn() != null)\r\n        sb.append(\"AppArn: \").append(getAppArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRepository() != null)\r\n        sb.append(\"Repository: \").append(getRepository()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getCreateTime() != null)\r\n        sb.append(\"CreateTime: \").append(getCreateTime()).append(\",\");\r\n    if (getUpdateTime() != null)\r\n        sb.append(\"UpdateTime: \").append(getUpdateTime()).append(\",\");\r\n    if (getIamServiceRoleArn() != null)\r\n        sb.append(\"IamServiceRoleArn: \").append(getIamServiceRoleArn()).append(\",\");\r\n    if (getEnvironmentVariables() != null)\r\n        sb.append(\"EnvironmentVariables: \").append(getEnvironmentVariables()).append(\",\");\r\n    if (getDefaultDomain() != null)\r\n        sb.append(\"DefaultDomain: \").append(getDefaultDomain()).append(\",\");\r\n    if (getEnableBranchAutoBuild() != null)\r\n        sb.append(\"EnableBranchAutoBuild: \").append(getEnableBranchAutoBuild()).append(\",\");\r\n    if (getEnableBasicAuth() != null)\r\n        sb.append(\"EnableBasicAuth: \").append(getEnableBasicAuth()).append(\",\");\r\n    if (getBasicAuthCredentials() != null)\r\n        sb.append(\"BasicAuthCredentials: \").append(getBasicAuthCredentials()).append(\",\");\r\n    if (getCustomRules() != null)\r\n        sb.append(\"CustomRules: \").append(getCustomRules()).append(\",\");\r\n    if (getProductionBranch() != null)\r\n        sb.append(\"ProductionBranch: \").append(getProductionBranch()).append(\",\");\r\n    if (getBuildSpec() != null)\r\n        sb.append(\"BuildSpec: \").append(getBuildSpec());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DocumentationPartLocation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getMethod() != null)\r\n        sb.append(\"Method: \").append(getMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClientBuilder.build",
	"Comment": "construct a synchronous implementation of awscertificatemanager using the current builder configuration.",
	"Method": "AWSCertificateManager build(AwsSyncClientParams params){\r\n    return new AWSCertificateManagerClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.resendValidationEmail",
	"Comment": "resends the email that requests domain ownership validation. the domain owner or an authorized representativemust approve the acm certificate before it can be issued. the certificate can be approved by clicking a link inthe mail to navigate to the amazon certificate approval website and then clicking i approve. however, thevalidation email can be blocked by spam filters. therefore, if you do not receive the original mail, you canrequest that the mail be resent within 72 hours of requesting the acm certificate. if more than 72 hours haveelapsed since your original request or since your last attempt to resend validation mail, you must request a newcertificate. for more information about setting up your contact email addresses, see configure email for your domain.",
	"Method": "ResendValidationEmailResult resendValidationEmail(ResendValidationEmailRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeResendValidationEmail(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateSkillGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getSkillGroupName() != null)\r\n        sb.append(\"SkillGroupName: \").append(getSkillGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListDomainAssociationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetGraphqlApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.PutRoomSkillParameterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId()).append(\",\");\r\n    if (getRoomSkillParameter() != null)\r\n        sb.append(\"RoomSkillParameter: \").append(getRoomSkillParameter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeScalingProcessTypes",
	"Comment": "describes the scaling process types for use with resumeprocesses and suspendprocesses.",
	"Method": "DescribeScalingProcessTypesResult describeScalingProcessTypes(DescribeScalingProcessTypesRequest request,DescribeScalingProcessTypesResult describeScalingProcessTypes){\r\n    return describeScalingProcessTypes(new DescribeScalingProcessTypesRequest());\r\n}"
}, {
	"Path": "aima.core.probability.example.MDPFactory.createMDPForFigure17_3",
	"Comment": "constructs an mdp that can be used to generate the utility values\tdetailed in fig 17.3.",
	"Method": "MarkovDecisionProcess<Cell<Double>, CellWorldAction> createMDPForFigure17_3(CellWorld<Double> cw){\r\n    return new MDP<Cell<Double>, CellWorldAction>(cw.getCells(), cw.getCellAt(1, 1), createActionsFunctionForFigure17_1(cw), createTransitionProbabilityFunctionForFigure17_1(cw), createRewardFunctionForFigure17_1());\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.Filters.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExtendedKeyUsage() != null)\r\n        sb.append(\"ExtendedKeyUsage: \").append(getExtendedKeyUsage()).append(\",\");\r\n    if (getKeyUsage() != null)\r\n        sb.append(\"KeyUsage: \").append(getKeyUsage()).append(\",\");\r\n    if (getKeyTypes() != null)\r\n        sb.append(\"KeyTypes: \").append(getKeyTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.NodeExpander.createRootNode",
	"Comment": "factory method, which creates a root node for the specified state.",
	"Method": "Node<S, A> createRootNode(S state){\r\n    return new Node(state);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeTerminationPolicyTypes",
	"Comment": "describes the termination policies supported by amazon ec2 auto scaling.for more information, see controlling which autoscaling instances terminate during scale in in the amazon ec2 auto scaling user guide.",
	"Method": "DescribeTerminationPolicyTypesResult describeTerminationPolicyTypes(DescribeTerminationPolicyTypesRequest request,DescribeTerminationPolicyTypesResult describeTerminationPolicyTypes){\r\n    return describeTerminationPolicyTypes(new DescribeTerminationPolicyTypesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "aima.core.learning.reinforcement.agent.PassiveTDAgent.execute",
	"Comment": "passive reinforcement learning that learns utility estimates using\ttemporal differences",
	"Method": "A execute(PerceptStateReward<S> percept){\r\n    S sDelta = percept.state();\r\n    double rDelta = percept.reward();\r\n    if (!U.containsKey(sDelta)) {\r\n        U.put(sDelta, rDelta);\r\n    }\r\n    if (null != s) {\r\n        Ns.incrementFor(s);\r\n        double U_s = U.get(s);\r\n        U.put(s, U_s + alpha(Ns, s) * (r + gamma * U.get(sDelta) - U_s));\r\n    }\r\n    if (isTerminal(sDelta)) {\r\n        s = null;\r\n        a = null;\r\n        r = null;\r\n    } else {\r\n        s = sDelta;\r\n        a = pi.get(sDelta);\r\n        r = rDelta;\r\n    }\r\n    return a;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateDeploymentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getApiSummary() != null)\r\n        sb.append(\"ApiSummary: \").append(getApiSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ScheduledUpdateGroupActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduledActionName() != null)\r\n        sb.append(\"ScheduledActionName: \").append(getScheduledActionName()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getRecurrence() != null)\r\n        sb.append(\"Recurrence: \").append(getRecurrence()).append(\",\");\r\n    if (getMinSize() != null)\r\n        sb.append(\"MinSize: \").append(getMinSize()).append(\",\");\r\n    if (getMaxSize() != null)\r\n        sb.append(\"MaxSize: \").append(getMaxSize()).append(\",\");\r\n    if (getDesiredCapacity() != null)\r\n        sb.append(\"DesiredCapacity: \").append(getDesiredCapacity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.MapWayAttFilter.createBicycleWayFilter",
	"Comment": "creates a way filter which passes any way suitable for traveling by bike.",
	"Method": "MapWayAttFilter createBicycleWayFilter(){\r\n    MapWayAttFilter filter = new MapWayAttFilter(\"highway\");\r\n    filter.setAccepted(\"primary\");\r\n    filter.setAccepted(\"primary_link\");\r\n    filter.setAccepted(\"secondary\");\r\n    filter.setAccepted(\"tertiary\");\r\n    filter.setAccepted(\"road\");\r\n    filter.setAccepted(\"residential\");\r\n    filter.setAccepted(\"living_street\");\r\n    filter.setAccepted(\"pedestrian\");\r\n    filter.setAccepted(\"service\");\r\n    filter.setAccepted(\"track\");\r\n    filter.setAccepted(\"cycleway\");\r\n    filter.setAccepted(\"path\");\r\n    filter.setAccepted(\"footway\");\r\n    filter.setAccepted(\"unclassified\");\r\n    return filter;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getLifecycleState() != null)\r\n        sb.append(\"LifecycleState: \").append(getLifecycleState()).append(\",\");\r\n    if (getHealthStatus() != null)\r\n        sb.append(\"HealthStatus: \").append(getHealthStatus()).append(\",\");\r\n    if (getLaunchConfigurationName() != null)\r\n        sb.append(\"LaunchConfigurationName: \").append(getLaunchConfigurationName()).append(\",\");\r\n    if (getLaunchTemplate() != null)\r\n        sb.append(\"LaunchTemplate: \").append(getLaunchTemplate()).append(\",\");\r\n    if (getProtectedFromScaleIn() != null)\r\n        sb.append(\"ProtectedFromScaleIn: \").append(getProtectedFromScaleIn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.deleteGatewayResponse",
	"Comment": "clears any customization of a gatewayresponse of a specified response type on the given restapi andresets it with the default settings.",
	"Method": "DeleteGatewayResponseResult deleteGatewayResponse(DeleteGatewayResponseRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteGatewayResponse(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.createStreamingURL",
	"Comment": "creates a temporary url to start an appstream 2.0 streaming session for the specified user. a streaming urlenables application streaming to be tested without user setup.",
	"Method": "CreateStreamingURLResult createStreamingURL(CreateStreamingURLRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateStreamingURL(request);\r\n}"
}, {
	"Path": "aimax.osm.gps.GpsLocator.getCurrPosition",
	"Comment": "returns the last valid position which was provided by the nmea stream.",
	"Method": "GpsFix getCurrPosition(){\r\n    return currPosition;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteSkillGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.BidirectionalSearch.getSolution",
	"Comment": "computes a node whose sequence of recursive parents corresponds to a\tsequence of actions which leads from the initial state of the original\tproblem to the state of node1 and then to the initial state of the\treverse problem, following reverse actions to parents of node2. note that\tboth nodes must be linked to the same state. success is not guaranteed if\tsome actions cannot be reversed.",
	"Method": "Optional<Node<S, A>> getSolution(Problem<S, A> orgP,ExtendedNode<S, A> node1,ExtendedNode<S, A> node2){\r\n    assert node1.getState().equals(node2.getState());\r\n    Node<S, A> orgNode = node1.getProblemIndex() == ORG_P_IDX ? node1 : node2;\r\n    Node<S, A> revNode = node1.getProblemIndex() == REV_P_IDX ? node1 : node2;\r\n    while (revNode.getParent() != null) {\r\n        A action = getReverseAction(orgP, revNode);\r\n        if (action != null) {\r\n            S nextState = revNode.getParent().getState();\r\n            double stepCosts = orgP.getStepCosts(revNode.getState(), action, nextState);\r\n            orgNode = nodeExpander.createNode(nextState, orgNode, action, stepCosts);\r\n            revNode = revNode.getParent();\r\n        } else {\r\n            return Optional.empty();\r\n        }\r\n    }\r\n    metrics.set(METRIC_PATH_COST, orgNode.getPathCost());\r\n    return Optional.of(orgNode);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListAppsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.TagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.PortMapping.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPort() != null)\r\n        sb.append(\"Port: \").append(getPort()).append(\",\");\r\n    if (getProtocol() != null)\r\n        sb.append(\"Protocol: \").append(getProtocol());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ImportRestApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings()).append(\",\");\r\n    if (getBinaryMediaTypes() != null)\r\n        sb.append(\"BinaryMediaTypes: \").append(getBinaryMediaTypes()).append(\",\");\r\n    if (getMinimumCompressionSize() != null)\r\n        sb.append(\"MinimumCompressionSize: \").append(getMinimumCompressionSize()).append(\",\");\r\n    if (getApiKeySource() != null)\r\n        sb.append(\"ApiKeySource: \").append(getApiKeySource()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration()).append(\",\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.viewer.CoordTransformer.zoom",
	"Comment": "multiples the current scale with the specified factor and\tadjusts the view so that the objects shown at the\tspecified view focus keep at their position.",
	"Method": "void zoom(float factor,int focusX,int focusY){\r\n    float focusLon = lon(focusX);\r\n    float focusLat = lat(focusY);\r\n    dotsPerDeg *= factor;\r\n    int focusXNew = x(focusLon);\r\n    int focusYNew = y(focusLat);\r\n    adjust(focusX - focusXNew, focusY - focusYNew);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateContactRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(getFirstName()).append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(getLastName()).append(\",\");\r\n    if (getPhoneNumber() != null)\r\n        sb.append(\"PhoneNumber: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DocumentationPart.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getProperties() != null)\r\n        sb.append(\"Properties: \").append(getProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.TestInvokeMethodResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody()).append(\",\");\r\n    if (getHeaders() != null)\r\n        sb.append(\"Headers: \").append(getHeaders()).append(\",\");\r\n    if (getMultiValueHeaders() != null)\r\n        sb.append(\"MultiValueHeaders: \").append(getMultiValueHeaders()).append(\",\");\r\n    if (getLog() != null)\r\n        sb.append(\"Log: \").append(getLog()).append(\",\");\r\n    if (getLatency() != null)\r\n        sb.append(\"Latency: \").append(getLatency());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateRequestValidatorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValidateRequestBody() != null)\r\n        sb.append(\"ValidateRequestBody: \").append(getValidateRequestBody()).append(\",\");\r\n    if (getValidateRequestParameters() != null)\r\n        sb.append(\"ValidateRequestParameters: \").append(getValidateRequestParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearchBFS.addToFrontier",
	"Comment": "inserts the node at the tail of the frontier if the corresponding state\tis not already a frontier state and was not yet explored.",
	"Method": "void addToFrontier(Node<S, A> node){\r\n    if (!explored.contains(node.getState()) && !frontierStates.contains(node.getState())) {\r\n        frontier.add(node);\r\n        frontierStates.add(node.getState());\r\n        updateMetrics(frontier.size());\r\n    }\r\n}"
}, {
	"Path": "aima.core.util.math.MixedRadixNumber.increment",
	"Comment": "increments the value of the mixed radix number, if the value is less than\tthe maximum value which can be represented by the current array of\tradices.",
	"Method": "boolean increment(){\r\n    if (value < maxValue) {\r\n        value++;\r\n        recalculate = true;\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteConferenceProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferenceProviderArn() != null)\r\n        sb.append(\"ConferenceProviderArn: \").append(getConferenceProviderArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.fx.views.CspViewCtrl.setColorMapping",
	"Comment": "defines a color for a domain value. it is used to visualize the currentassignment. if no color mapping is found, the node coloring feature isdisabled for the corresponding variable.",
	"Method": "void setColorMapping(VAL value,Color color){\r\n    colorMapping.put(value, color);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncClient.getSchemaCreationStatus",
	"Comment": "retrieves the current status of a schema creation operation.",
	"Method": "GetSchemaCreationStatusResult getSchemaCreationStatus(GetSchemaCreationStatusRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetSchemaCreationStatus(request);\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftConverter.getColumnPath",
	"Comment": "construct a thrift columnpath based on the information in the query andthe type of column family being queried.",
	"Method": "org.apache.cassandra.thrift.ColumnPath getColumnPath(ColumnFamily<?, ?> columnFamily,ColumnPath<?> path){\r\n    org.apache.cassandra.thrift.ColumnPath cp = new org.apache.cassandra.thrift.ColumnPath();\r\n    cp.setColumn_family(columnFamily.getName());\r\n    if (path != null) {\r\n        Iterator<ByteBuffer> columns = path.iterator();\r\n        if (columnFamily.getType() == ColumnType.SUPER && columns.hasNext()) {\r\n            cp.setSuper_column(columns.next());\r\n        }\r\n        if (columns.hasNext()) {\r\n            cp.setColumn(columns.next());\r\n        }\r\n        if (columns.hasNext()) {\r\n            throw new BadRequestException(\"Path depth of \" + path.length() + \" not supported for column family \\'\" + columnFamily.getName() + \"\\'\");\r\n        }\r\n    }\r\n    return cp;\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.SimpleHostConnectionPool.discardIdleConnections",
	"Comment": "drain all idle connections and close them.connections that are currently borrowedwill not be closed here.",
	"Method": "void discardIdleConnections(){\r\n    List<Connection<CL>> connections = Lists.newArrayList();\r\n    availableConnections.drainTo(connections);\r\n    activeCount.addAndGet(-connections.size());\r\n    for (Connection<CL> connection : connections) {\r\n        try {\r\n            closedConnections.incrementAndGet();\r\n            connection.close();\r\n        } catch (Throwable t) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListDataSourcesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDataSources() != null)\r\n        sb.append(\"DataSources: \").append(getDataSources()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.applications.RoutePlannerApp.createRouteCalculator",
	"Comment": "factory method for the routing component. subclasses can override it and\tprovide more advanced routing algorithms.",
	"Method": "RouteCalculator createRouteCalculator(){\r\n    return new RouteCalculator();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.DeleteCertificateAuthorityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getPermanentDeletionTimeInDays() != null)\r\n        sb.append(\"PermanentDeletionTimeInDays: \").append(getPermanentDeletionTimeInDays());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.viewer.DefaultEntityRenderer.getNextNode",
	"Comment": "returns the map node which is the nearest with respect to the specified\tview coordinates among the currently displayed nodes.",
	"Method": "MapNode getNextNode(int x,int y){\r\n    Position pos = new Position(transformer.lat(y), transformer.lon(x));\r\n    MapNode nextNode = null;\r\n    MapNode tmp = null;\r\n    for (int i = 0; i < 2; i++) {\r\n        List<MapWay> ways = (i == 0) ? areaBuffer : wayBuffer;\r\n        for (MapWay way : ways) {\r\n            tmp = pos.selectNearest(way.getNodes(), null);\r\n            if (nextNode == null || pos.getDistKM(tmp) < pos.getDistKM(nextNode)) {\r\n                nextNode = tmp;\r\n            }\r\n        }\r\n    }\r\n    for (MapEntity node : nodeBuffer) {\r\n        if (node instanceof MapNode) {\r\n            tmp = (MapNode) node;\r\n            if (tmp != null && tmp.getAttributeValue(\"marker\") == null && (nextNode == null || pos.getDistKM(tmp) < pos.getDistKM(nextNode))) {\r\n                nextNode = tmp;\r\n            }\r\n        }\r\n    }\r\n    return nextNode;\r\n}"
}, {
	"Path": "aima.core.probability.mdp.search.POMDPValueIteration.maxDifference",
	"Comment": "this method can be overridden to apply a different difference calculation function.it currently calculates the difference of the average of the maximum utilities of the plans",
	"Method": "double maxDifference(HashMap<List<A>, List<Double>> u,HashMap<List<A>, List<Double>> uDash){\r\n    double maxUtilOne = 0.0, maxUtilTwo = 0.0;\r\n    for (List<A> plan : u.keySet()) {\r\n        maxUtilOne += Collections.max(u.get(plan));\r\n    }\r\n    maxUtilOne /= u.keySet().size();\r\n    for (List<A> plan : uDash.keySet()) {\r\n        maxUtilTwo += Collections.max(uDash.get(plan));\r\n    }\r\n    maxUtilTwo /= u.keySet().size();\r\n    return Math.abs(maxUtilOne - maxUtilTwo);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.enableUser",
	"Comment": "enables a user in the user pool. after being enabled, users can sign in to appstream 2.0 and open applicationsfrom the stacks to which they are assigned.",
	"Method": "EnableUserResult enableUser(EnableUserRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeEnableUser(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateStackRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getStorageConnectors() != null)\r\n        sb.append(\"StorageConnectors: \").append(getStorageConnectors()).append(\",\");\r\n    if (getRedirectURL() != null)\r\n        sb.append(\"RedirectURL: \").append(getRedirectURL()).append(\",\");\r\n    if (getFeedbackURL() != null)\r\n        sb.append(\"FeedbackURL: \").append(getFeedbackURL()).append(\",\");\r\n    if (getUserSettings() != null)\r\n        sb.append(\"UserSettings: \").append(getUserSettings()).append(\",\");\r\n    if (getApplicationSettings() != null)\r\n        sb.append(\"ApplicationSettings: \").append(getApplicationSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.withTtl",
	"Comment": "this is the ttl on the lock column being written, as opposed to expirelockafter which is written as the lock column value.whereas the expirelockafter can be used to identify a stale or abandoned lock the ttl will result in the stale or abandoned lockbeing eventually deleted by cassandra.set the ttl to a number that is much greatertan the expirelockafter time.",
	"Method": "OneStepDistributedRowLock<K, C> withTtl(Integer ttl,OneStepDistributedRowLock<K, C> withTtl,Integer ttl,TimeUnit units){\r\n    this.ttl = (int) TimeUnit.SECONDS.convert(ttl, units);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DescribeScalingActivitiesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.zeapo.pwdstore.PasswordFragment.recursiveFilter",
	"Comment": "recursively filters a directory and extract all the matching items",
	"Method": "void recursiveFilter(String filter,File dir){\r\n    ArrayList<PasswordItem> passwordItems = dir == null ? PasswordRepository.getPasswords(PasswordRepository.getRepositoryDirectory(getActivity()), getSortOrder()) : PasswordRepository.getPasswords(dir, PasswordRepository.getRepositoryDirectory(getActivity()), getSortOrder());\r\n    boolean rec = settings.getBoolean(\"filter_recursively\", true);\r\n    for (PasswordItem item : passwordItems) {\r\n        if (item.getType() == PasswordItem.TYPE_CATEGORY && rec) {\r\n            recursiveFilter(filter, item.getFile());\r\n        }\r\n        boolean matches = item.toString().toLowerCase().contains(filter.toLowerCase());\r\n        boolean inAdapter = recyclerAdapter.getValues().contains(item);\r\n        if (matches && !inAdapter) {\r\n            recyclerAdapter.add(item);\r\n        } else if (!matches && inAdapter) {\r\n            recyclerAdapter.remove(recyclerAdapter.getValues().indexOf(item));\r\n        }\r\n    }\r\n}"
}, {
	"Path": "aima.core.search.csp.inference.ForwardCheckingStrategy.revise",
	"Comment": "removes all values from the domain of var which are not consistent withconstraint and assignment. modifies the domain log accordingly sothat all changes can be undone later on.",
	"Method": "boolean revise(VAR var,Constraint<VAR, VAL> constraint,Assignment<VAR, VAL> assignment,CSP<VAR, VAL> csp,DomainLog<VAR, VAL> log){\r\n    boolean revised = false;\r\n    for (VAL value : csp.getDomain(var)) {\r\n        assignment.add(var, value);\r\n        if (!constraint.isSatisfiedWith(assignment)) {\r\n            log.storeDomainFor(var, csp.getDomain(var));\r\n            csp.removeValueFromDomain(var, value);\r\n            revised = true;\r\n        }\r\n        assignment.remove(var);\r\n    }\r\n    return revised;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.MixedRadixNumber.getMaxAllowedValue",
	"Comment": "returns the maximum value which can be represented by the current array\tof radices.",
	"Method": "long getMaxAllowedValue(){\r\n    return maxValue;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.ASN1Subject.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCountry() != null)\r\n        sb.append(\"Country: \").append(getCountry()).append(\",\");\r\n    if (getOrganization() != null)\r\n        sb.append(\"Organization: \").append(getOrganization()).append(\",\");\r\n    if (getOrganizationalUnit() != null)\r\n        sb.append(\"OrganizationalUnit: \").append(getOrganizationalUnit()).append(\",\");\r\n    if (getDistinguishedNameQualifier() != null)\r\n        sb.append(\"DistinguishedNameQualifier: \").append(getDistinguishedNameQualifier()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getCommonName() != null)\r\n        sb.append(\"CommonName: \").append(getCommonName()).append(\",\");\r\n    if (getSerialNumber() != null)\r\n        sb.append(\"SerialNumber: \").append(getSerialNumber()).append(\",\");\r\n    if (getLocality() != null)\r\n        sb.append(\"Locality: \").append(getLocality()).append(\",\");\r\n    if (getTitle() != null)\r\n        sb.append(\"Title: \").append(getTitle()).append(\",\");\r\n    if (getSurname() != null)\r\n        sb.append(\"Surname: \").append(getSurname()).append(\",\");\r\n    if (getGivenName() != null)\r\n        sb.append(\"GivenName: \").append(getGivenName()).append(\",\");\r\n    if (getInitials() != null)\r\n        sb.append(\"Initials: \").append(getInitials()).append(\",\");\r\n    if (getPseudonym() != null)\r\n        sb.append(\"Pseudonym: \").append(getPseudonym()).append(\",\");\r\n    if (getGenerationQualifier() != null)\r\n        sb.append(\"GenerationQualifier: \").append(getGenerationQualifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ProfileData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn()).append(\",\");\r\n    if (getProfileName() != null)\r\n        sb.append(\"ProfileName: \").append(getProfileName()).append(\",\");\r\n    if (getIsDefault() != null)\r\n        sb.append(\"IsDefault: \").append(getIsDefault()).append(\",\");\r\n    if (getAddress() != null)\r\n        sb.append(\"Address: \").append(getAddress()).append(\",\");\r\n    if (getTimezone() != null)\r\n        sb.append(\"Timezone: \").append(getTimezone()).append(\",\");\r\n    if (getDistanceUnit() != null)\r\n        sb.append(\"DistanceUnit: \").append(getDistanceUnit()).append(\",\");\r\n    if (getTemperatureUnit() != null)\r\n        sb.append(\"TemperatureUnit: \").append(getTemperatureUnit()).append(\",\");\r\n    if (getWakeWord() != null)\r\n        sb.append(\"WakeWord: \").append(getWakeWord());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StopFleetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.ListNamedQueriesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeletePolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DescribeScheduledActionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduledActions() != null)\r\n        sb.append(\"ScheduledActions: \").append(getScheduledActions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.HttpRoute.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAction() != null)\r\n        sb.append(\"Action: \").append(getAction()).append(\",\");\r\n    if (getMatch() != null)\r\n        sb.append(\"Match: \").append(getMatch());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.listSmartHomeAppliances",
	"Comment": "lists all of the smart home appliances associated with a room.",
	"Method": "ListSmartHomeAppliancesResult listSmartHomeAppliances(ListSmartHomeAppliancesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListSmartHomeAppliances(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeviceData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getDeviceSerialNumber() != null)\r\n        sb.append(\"DeviceSerialNumber: \").append(getDeviceSerialNumber()).append(\",\");\r\n    if (getDeviceType() != null)\r\n        sb.append(\"DeviceType: \").append(getDeviceType()).append(\",\");\r\n    if (getDeviceName() != null)\r\n        sb.append(\"DeviceName: \").append(getDeviceName()).append(\",\");\r\n    if (getSoftwareVersion() != null)\r\n        sb.append(\"SoftwareVersion: \").append(getSoftwareVersion()).append(\",\");\r\n    if (getMacAddress() != null)\r\n        sb.append(\"MacAddress: \").append(getMacAddress()).append(\",\");\r\n    if (getDeviceStatus() != null)\r\n        sb.append(\"DeviceStatus: \").append(getDeviceStatus()).append(\",\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getRoomName() != null)\r\n        sb.append(\"RoomName: \").append(getRoomName()).append(\",\");\r\n    if (getDeviceStatusInfo() != null)\r\n        sb.append(\"DeviceStatusInfo: \").append(getDeviceStatusInfo());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeScalingActivitiesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActivityIds() != null)\r\n        sb.append(\"ActivityIds: \").append(getActivityIds()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.data.Model.determineValue",
	"Comment": "determine based on the current assignments within the model, whether a\tclause is known to be true, false, or unknown.",
	"Method": "Boolean determineValue(Clause c){\r\n    Boolean result = null;\r\n    if (c.isTautology()) {\r\n        result = Boolean.TRUE;\r\n    } else if (c.isFalse()) {\r\n        result = Boolean.FALSE;\r\n    } else {\r\n        boolean unassignedSymbols = false;\r\n        for (Literal literal : c.getLiterals()) {\r\n            PropositionSymbol symbol = literal.getAtomicSentence();\r\n            Boolean value = assignments.get(symbol);\r\n            if (value == null) {\r\n                unassignedSymbols = true;\r\n            } else if (value.equals(literal.isPositiveLiteral())) {\r\n                result = Boolean.TRUE;\r\n                break;\r\n            }\r\n        }\r\n        if (result == null && !unassignedSymbols) {\r\n            result = Boolean.FALSE;\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DeleteMeshResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMesh() != null)\r\n        sb.append(\"Mesh: \").append(getMesh());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.kodedu.controller.FileService.accepts",
	"Comment": "returns true if the given accept header accepts the given value.",
	"Method": "boolean accepts(String acceptHeader,String toAccept){\r\n    String[] acceptValues = acceptHeader.split(\"\\\\s*(,|;)\\\\s*\");\r\n    Arrays.sort(acceptValues);\r\n    return Arrays.binarySearch(acceptValues, toAccept) > -1 || Arrays.binarySearch(acceptValues, toAccept.replaceAll(\"/.*$\", \"/*\")) > -1 || Arrays.binarySearch(acceptValues, \"*/*\") > -1;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.LifecycleHookSpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHookName() != null)\r\n        sb.append(\"LifecycleHookName: \").append(getLifecycleHookName()).append(\",\");\r\n    if (getLifecycleTransition() != null)\r\n        sb.append(\"LifecycleTransition: \").append(getLifecycleTransition()).append(\",\");\r\n    if (getNotificationMetadata() != null)\r\n        sb.append(\"NotificationMetadata: \").append(getNotificationMetadata()).append(\",\");\r\n    if (getHeartbeatTimeout() != null)\r\n        sb.append(\"HeartbeatTimeout: \").append(getHeartbeatTimeout()).append(\",\");\r\n    if (getDefaultResult() != null)\r\n        sb.append(\"DefaultResult: \").append(getDefaultResult()).append(\",\");\r\n    if (getNotificationTargetARN() != null)\r\n        sb.append(\"NotificationTargetARN: \").append(getNotificationTargetARN()).append(\",\");\r\n    if (getRoleARN() != null)\r\n        sb.append(\"RoleARN: \").append(getRoleARN());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.HostConnectionPoolPartition.addPool",
	"Comment": "add a new pool to the partition.checks to see if the pool alreadyexisted.if so then there is no need to refresh the pool.",
	"Method": "boolean addPool(HostConnectionPool<CL> pool){\r\n    if (this.pools.add(pool)) {\r\n        refresh();\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateVirtualRouterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualRouter() != null)\r\n        sb.append(\"VirtualRouter: \").append(getVirtualRouter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.VacuumController.update",
	"Comment": "updates the status of the frame after simulation has finished.",
	"Method": "void update(SimulationThread simulationThread){\r\n    if (simulationThread.isCancelled()) {\r\n        frame.setStatus(\"Task canceled.\");\r\n        isPrepared = false;\r\n    } else if (frame.simulationPaused()) {\r\n        frame.setStatus(\"Task paused.\");\r\n    } else {\r\n        frame.setStatus(\"Task completed.\");\r\n    }\r\n}"
}, {
	"Path": "aima.core.util.datastructure.LabeledGraph.get",
	"Comment": "returns the label of the edge between the specified vertices, or null if\tthere is no edge between them.",
	"Method": "EdgeLabelType get(VertexLabelType from,VertexLabelType to){\r\n    Hashtable<VertexLabelType, EdgeLabelType> localEdgeLookup = globalEdgeLookup.get(from);\r\n    return localEdgeLookup == null ? null : localEdgeLookup.get(to);\r\n}"
}, {
	"Path": "aimax.osm.data.impl.AbstractEntityFinder.clearResults",
	"Comment": "clears results and sets the next search radius to the minimum radius.",
	"Method": "void clearResults(){\r\n    intermediateResults.clear();\r\n    results.clear();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.getBoundingBox",
	"Comment": "returns a bounding box describing the currently visible area.",
	"Method": "BoundingBox getBoundingBox(){\r\n    float latMin = getTransformer().lat(getHeight());\r\n    float lonMin = getTransformer().lon(0);\r\n    float latMax = getTransformer().lat(0);\r\n    float lonMax = getTransformer().lon(getWidth());\r\n    return new BoundingBox(latMin, lonMin, latMax, lonMax);\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.TreeSearch.isFrontierEmpty",
	"Comment": "checks whether the frontier contains not yet expanded nodes.",
	"Method": "boolean isFrontierEmpty(){\r\n    return frontier.isEmpty();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetBranchResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBranch() != null)\r\n        sb.append(\"Branch: \").append(getBranch());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateAddressBookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.fx.views.AbstractGridEnvironmentViewCtrl.updatePerceptLabel",
	"Comment": "updates the percept label with the current percept of the agent. can be called from every thread.",
	"Method": "void updatePerceptLabel(Agent agent){\r\n    String agentInfo = null;\r\n    Percept percept = null;\r\n    if (agent != null) {\r\n        agentInfo = env.getAgents().size() > 1 ? \" (A\" + (env.getAgents().indexOf(agent) + 1) + \")\" : \"\";\r\n        percept = ((AbstractEnvironment) env).getPerceptSeenBy(agent);\r\n    }\r\n    String txt = (agent != null) ? \"Percept\" + agentInfo + \": \" + percept : \"\";\r\n    if (Platform.isFxApplicationThread())\r\n        perceptLabel.setText(txt);\r\n    else\r\n        Platform.runLater(() -> perceptLabel.setText(txt));\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.fillLockMutation",
	"Comment": "fill a mutation with the lock column. this may be used when the mutationis executed externally but should be used with extreme caution to ensurethe lock is properly released",
	"Method": "String fillLockMutation(MutationBatch m,Long time,Integer ttl){\r\n    if (lockColumn != null) {\r\n        if (!lockColumn.equals(prefix + lockId))\r\n            throw new IllegalStateException(\"Can't change prefix or lockId after acquiring the lock\");\r\n    } else {\r\n        lockColumn = prefix + lockId;\r\n    }\r\n    Long timeoutValue = (time == null) ? new Long(0) : time + TimeUnit.MICROSECONDS.convert(timeout, timeoutUnits);\r\n    m.withRow(columnFamily, key).putColumn(lockColumn, generateTimeoutValue(timeoutValue), ttl);\r\n    return lockColumn;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationVersionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazonautoscaling using the current builder configuration.",
	"Method": "AmazonAutoScaling build(AwsSyncClientParams params){\r\n    return new AmazonAutoScalingClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetRoomSkillParameterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId()).append(\",\");\r\n    if (getParameterKey() != null)\r\n        sb.append(\"ParameterKey: \").append(getParameterKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteDataSourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetConferenceProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConferenceProviderArn() != null)\r\n        sb.append(\"ConferenceProviderArn: \").append(getConferenceProviderArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ListTagsForResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeScalingProcessTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearchReducedFrontier.removeFromFrontier",
	"Comment": "removes the node at the head of the frontier, adds the corresponding\tstate to the explored set, and returns the node.",
	"Method": "Node<S, A> removeFromFrontier(){\r\n    Node<S, A> result = frontier.remove();\r\n    frontierNodeLookup.remove(result.getState());\r\n    explored.add(result.getState());\r\n    updateMetrics(frontier.size());\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.BatchAssociateUserStackResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getErrors() != null)\r\n        sb.append(\"Errors: \").append(getErrors());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.mapping.Mapping.getAll",
	"Comment": "load a set of rows into new instances populated with values from thecolumn lists",
	"Method": "List<T> getAll(Rows<?, String> rows){\r\n    List<T> list = Lists.newArrayList();\r\n    for (Row<?, String> row : rows) {\r\n        if (!row.getColumns().isEmpty()) {\r\n            list.add(newInstance(row.getColumns()));\r\n        }\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DeleteVirtualNodeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualNode() != null)\r\n        sb.append(\"VirtualNode: \").append(getVirtualNode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchSkillGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getSortCriteria() != null)\r\n        sb.append(\"SortCriteria: \").append(getSortCriteria());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RouteFindingAgentOsmApp.initialize",
	"Comment": "is called after each parameter selection change. this implementation\tprepares the map for different kinds of vehicles and clears the currently\tdisplayed track.",
	"Method": "void initialize(){\r\n    map = new MapAdapter(mapPaneCtrl.getMap());\r\n    switch(taskPaneCtrl.getParamValueIndex(PARAM_WAY_SELECTION)) {\r\n        case 0:\r\n            map.setMapWayFilter(MapWayAttFilter.createAnyWayFilter());\r\n            map.ignoreOneways(true);\r\n            break;\r\n        case 1:\r\n            map.setMapWayFilter(MapWayAttFilter.createCarWayFilter());\r\n            map.ignoreOneways(false);\r\n            break;\r\n        case 2:\r\n            map.setMapWayFilter(MapWayAttFilter.createBicycleWayFilter());\r\n            map.ignoreOneways(false);\r\n            break;\r\n    }\r\n    map.getOsmMap().clearTrack(TRACK_NAME);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GraphqlApi.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType()).append(\",\");\r\n    if (getLogConfig() != null)\r\n        sb.append(\"LogConfig: \").append(getLogConfig()).append(\",\");\r\n    if (getUserPoolConfig() != null)\r\n        sb.append(\"UserPoolConfig: \").append(getUserPoolConfig()).append(\",\");\r\n    if (getOpenIDConnectConfig() != null)\r\n        sb.append(\"OpenIDConnectConfig: \").append(getOpenIDConnectConfig()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getUris() != null)\r\n        sb.append(\"Uris: \").append(getUris());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingInstances() != null)\r\n        sb.append(\"AutoScalingInstances: \").append(getAutoScalingInstances()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.StepScalingPolicyConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAdjustmentType() != null)\r\n        sb.append(\"AdjustmentType: \").append(getAdjustmentType()).append(\",\");\r\n    if (getStepAdjustments() != null)\r\n        sb.append(\"StepAdjustments: \").append(getStepAdjustments()).append(\",\");\r\n    if (getMinAdjustmentMagnitude() != null)\r\n        sb.append(\"MinAdjustmentMagnitude: \").append(getMinAdjustmentMagnitude()).append(\",\");\r\n    if (getCooldown() != null)\r\n        sb.append(\"Cooldown: \").append(getCooldown()).append(\",\");\r\n    if (getMetricAggregationType() != null)\r\n        sb.append(\"MetricAggregationType: \").append(getMetricAggregationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDeploymentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.Instance.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getLifecycleState() != null)\r\n        sb.append(\"LifecycleState: \").append(getLifecycleState()).append(\",\");\r\n    if (getHealthStatus() != null)\r\n        sb.append(\"HealthStatus: \").append(getHealthStatus()).append(\",\");\r\n    if (getLaunchConfigurationName() != null)\r\n        sb.append(\"LaunchConfigurationName: \").append(getLaunchConfigurationName()).append(\",\");\r\n    if (getLaunchTemplate() != null)\r\n        sb.append(\"LaunchTemplate: \").append(getLaunchTemplate()).append(\",\");\r\n    if (getProtectedFromScaleIn() != null)\r\n        sb.append(\"ProtectedFromScaleIn: \").append(getProtectedFromScaleIn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ScheduledUpdateGroupAction.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getScheduledActionName() != null)\r\n        sb.append(\"ScheduledActionName: \").append(getScheduledActionName()).append(\",\");\r\n    if (getScheduledActionARN() != null)\r\n        sb.append(\"ScheduledActionARN: \").append(getScheduledActionARN()).append(\",\");\r\n    if (getTime() != null)\r\n        sb.append(\"Time: \").append(getTime()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getRecurrence() != null)\r\n        sb.append(\"Recurrence: \").append(getRecurrence()).append(\",\");\r\n    if (getMinSize() != null)\r\n        sb.append(\"MinSize: \").append(getMinSize()).append(\",\");\r\n    if (getMaxSize() != null)\r\n        sb.append(\"MaxSize: \").append(getMaxSize()).append(\",\");\r\n    if (getDesiredCapacity() != null)\r\n        sb.append(\"DesiredCapacity: \").append(getDesiredCapacity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateSkillGroupFromRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchProfilesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getSortCriteria() != null)\r\n        sb.append(\"SortCriteria: \").append(getSortCriteria());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListSkillsStoreSkillsByCategoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCategoryId() != null)\r\n        sb.append(\"CategoryId: \").append(getCategoryId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.MethodSnapshot.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthorizationType() != null)\r\n        sb.append(\"AuthorizationType: \").append(getAuthorizationType()).append(\",\");\r\n    if (getApiKeyRequired() != null)\r\n        sb.append(\"ApiKeyRequired: \").append(getApiKeyRequired());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftConverter.ToConnectionPoolException",
	"Comment": "convert from thrift exceptions to an internal connectionpoolexception",
	"Method": "ConnectionException ToConnectionPoolException(Throwable e){\r\n    if (e instanceof ConnectionException) {\r\n        return (ConnectionException) e;\r\n    }\r\n    LOGGER.debug(e.getMessage());\r\n    if (e instanceof InvalidRequestException) {\r\n        return new com.netflix.astyanax.connectionpool.exceptions.BadRequestException(e);\r\n    } else if (e instanceof TProtocolException) {\r\n        return new com.netflix.astyanax.connectionpool.exceptions.BadRequestException(e);\r\n    } else if (e instanceof UnavailableException) {\r\n        return new TokenRangeOfflineException(e);\r\n    } else if (e instanceof SocketTimeoutException) {\r\n        return new TimeoutException(e);\r\n    } else if (e instanceof TimedOutException) {\r\n        return new OperationTimeoutException(e);\r\n    } else if (e instanceof NotFoundException) {\r\n        return new com.netflix.astyanax.connectionpool.exceptions.NotFoundException(e);\r\n    } else if (e instanceof TApplicationException) {\r\n        return new ThriftStateException(e);\r\n    } else if (e instanceof AuthenticationException || e instanceof AuthorizationException) {\r\n        return new com.netflix.astyanax.connectionpool.exceptions.AuthenticationException(e);\r\n    } else if (e instanceof SchemaDisagreementException) {\r\n        return new com.netflix.astyanax.connectionpool.exceptions.SchemaDisagreementException(e);\r\n    } else if (e instanceof TTransportException) {\r\n        if (e.getCause() != null) {\r\n            if (e.getCause() instanceof SocketTimeoutException) {\r\n                return new TimeoutException(e);\r\n            }\r\n            if (e.getCause().getMessage() != null) {\r\n                if (e.getCause().getMessage().toLowerCase().contains(\"connection abort\") || e.getCause().getMessage().toLowerCase().contains(\"connection reset\")) {\r\n                    return new ConnectionAbortedException(e);\r\n                }\r\n            }\r\n        }\r\n        return new TransportException(e);\r\n    } else {\r\n        return new UnknownException(e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlanKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateAuthorizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DeleteVirtualNodeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getVirtualNodeName() != null)\r\n        sb.append(\"VirtualNodeName: \").append(getVirtualNodeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.kodedu.controller.FileService.copy",
	"Comment": "copy the given byte range of the given input to the given output.",
	"Method": "void copy(RandomAccessFile input,OutputStream output,long start,long length){\r\n    byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\r\n    int read;\r\n    if (input.length() == length) {\r\n        while ((read = input.read(buffer)) > 0) {\r\n            output.write(buffer, 0, read);\r\n        }\r\n    } else {\r\n        input.seek(start);\r\n        long toRead = length;\r\n        while ((read = input.read(buffer)) > 0) {\r\n            if ((toRead -= read) > 0) {\r\n                output.write(buffer, 0, read);\r\n            } else {\r\n                output.write(buffer, 0, (int) toRead + read);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.Point2D.vec",
	"Comment": "calculates the vector between this point and the target point.",
	"Method": "Vector2D vec(Point2D target){\r\n    return new Vector2D(target.getX() - this.x, target.getY() - this.y);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DeleteScalingPolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyName() != null)\r\n        sb.append(\"PolicyName: \").append(getPolicyName()).append(\",\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteFunctionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.deleteDeployment",
	"Comment": "deletes a deployment resource. deleting a deployment will only succeed if there are no stageresources associated with it.",
	"Method": "DeleteDeploymentResult deleteDeployment(DeleteDeploymentRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDeployment(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetSchemaCreationStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getDetails() != null)\r\n        sb.append(\"Details: \").append(getDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetBasePathMappingsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.createUsagePlan",
	"Comment": "creates a usage plan with the throttle and quota limits, as well as the associated api stages, specified in thepayload.",
	"Method": "CreateUsagePlanResult createUsagePlan(CreateUsagePlanRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateUsagePlan(request);\r\n}"
}, {
	"Path": "aima.core.logic.propositional.parsing.PLLexer.nextToken",
	"Comment": "returns the next propositional token from the character stream.",
	"Method": "Token nextToken(){\r\n    int startPosition = getCurrentPositionInInput();\r\n    if (lookAhead(1) == '(') {\r\n        consume();\r\n        return new Token(LogicTokenTypes.LPAREN, \"(\", startPosition);\r\n    } else if (lookAhead(1) == '[') {\r\n        consume();\r\n        return new Token(LogicTokenTypes.LSQRBRACKET, \"[\", startPosition);\r\n    } else if (lookAhead(1) == ')') {\r\n        consume();\r\n        return new Token(LogicTokenTypes.RPAREN, \")\", startPosition);\r\n    } else if (lookAhead(1) == ']') {\r\n        consume();\r\n        return new Token(LogicTokenTypes.RSQRBRACKET, \"]\", startPosition);\r\n    } else if (Character.isWhitespace(lookAhead(1))) {\r\n        consume();\r\n        return nextToken();\r\n    } else if (connectiveDetected(lookAhead(1))) {\r\n        return connective();\r\n    } else if (symbolDetected(lookAhead(1))) {\r\n        return symbol();\r\n    } else if (lookAhead(1) == (char) -1) {\r\n        return new Token(LogicTokenTypes.EOI, \"EOI\", startPosition);\r\n    } else {\r\n        throw new LexerException(\"Lexing error on character \" + lookAhead(1) + \" at position \" + getCurrentPositionInInput(), getCurrentPositionInInput());\r\n    }\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.AnglePanel.setChangeListener",
	"Comment": "sets the change listener that will be notified of any changes, like how change listeners are supposed to work.",
	"Method": "void setChangeListener(ChangeListener listener){\r\n    this.listener = listener;\r\n}"
}, {
	"Path": "aimax.osm.data.BoundingBox.intersectWith",
	"Comment": "adjusts the box so that the result is the intersection of both boxes.",
	"Method": "BoundingBox intersectWith(BoundingBox bb){\r\n    latMin = Math.max(latMin, bb.latMin);\r\n    lonMin = Math.max(lonMin, bb.lonMin);\r\n    latMax = Math.min(latMax, bb.latMax);\r\n    lonMax = Math.min(lonMax, bb.lonMax);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.deleteScalingPolicy",
	"Comment": "deletes the specified application auto scaling scaling policy.deleting a policy deletes the underlying alarm action, but does not delete the cloudwatch alarm associated withthe scaling policy, even if it no longer has an associated action.to create a scaling policy or update an existing one, see putscalingpolicy.",
	"Method": "DeleteScalingPolicyResult deleteScalingPolicy(DeleteScalingPolicyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteScalingPolicy(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeTerminationPolicyTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.IssueCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.data.Clause.isGoalClause",
	"Comment": "clauses with no positive literals are called goal clauses.",
	"Method": "boolean isGoalClause(){\r\n    return !isEmpty() && cachedPositiveSymbols.size() == 0;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchSkillGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroups() != null)\r\n        sb.append(\"SkillGroups: \").append(getSkillGroups()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getTotalCount() != null)\r\n        sb.append(\"TotalCount: \").append(getTotalCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.csp.FlexibleBacktrackingSolver.set",
	"Comment": "selects the algorithm for inference. uses the fluent interface design pattern.",
	"Method": "FlexibleBacktrackingSolver<VAR, VAL> set(CspHeuristics.VariableSelection<VAR, VAL> varStrategy,FlexibleBacktrackingSolver<VAR, VAL> set,CspHeuristics.ValueSelection<VAR, VAL> valStrategy,FlexibleBacktrackingSolver<VAR, VAL> set,InferenceStrategy<VAR, VAL> iStrategy){\r\n    inferenceStrategy = iStrategy;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeNotificationConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupNames() != null)\r\n        sb.append(\"AutoScalingGroupNames: \").append(getAutoScalingGroupNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateApiKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getExpires() != null)\r\n        sb.append(\"Expires: \").append(getExpires());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.PipelineConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFunctions() != null)\r\n        sb.append(\"Functions: \").append(getFunctions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteStackRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.neural.Perceptron.trainOn",
	"Comment": "induces the layer of this perceptron from the specified set of examples",
	"Method": "void trainOn(NNDataSet innds,int numberofEpochs){\r\n    for (int i = 0; i < numberofEpochs; i++) {\r\n        innds.refreshDataset();\r\n        while (innds.hasMoreExamples()) {\r\n            NNExample nne = innds.getExampleAtRandom();\r\n            processInput(nne.getInput());\r\n            Vector error = layer.errorVectorFrom(nne.getTarget());\r\n            processError(error);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetAccountRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetContactRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ServiceDiscovery.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDns() != null)\r\n        sb.append(\"Dns: \").append(getDns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ExportCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getPassphrase() != null)\r\n        sb.append(\"Passphrase: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftClusterImpl.precheckSchemaAgreement",
	"Comment": "do a quick check to see if there is a schema disagreement.this is done as an extra precautionto reduce the chances of putting the cluster into a bad state.this will not gurantee however, that by the time a schema change is made the cluster will be in the same state.",
	"Method": "void precheckSchemaAgreement(Client client){\r\n    Map<String, List<String>> schemas = client.describe_schema_versions();\r\n    if (schemas.size() > 1) {\r\n        throw new SchemaDisagreementException(\"Can't change schema due to pending schema agreement\");\r\n    }\r\n}"
}, {
	"Path": "com.netflix.astyanax.mapping.Mapping.initInstance",
	"Comment": "populate the given instance with the values from the given column list",
	"Method": "T initInstance(T instance,ColumnList<String> columns){\r\n    for (com.netflix.astyanax.model.Column<String> column : columns) {\r\n        Field field = fields.get(column.getName());\r\n        if (field != null) {\r\n            Coercions.setFieldFromColumn(instance, field, column);\r\n        }\r\n    }\r\n    return instance;\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.GetNamedQueryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQueryId() != null)\r\n        sb.append(\"NamedQueryId: \").append(getNamedQueryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.parsing.grammars.ProbUnrestrictedGrammar.validRule",
	"Comment": "test validity of the lhs and rhs of grammar rule.\tin unrestricted grammar, the only invalid rule type is\ta rule with a null lhs.",
	"Method": "boolean validRule(Rule r){\r\n    return r.lhs != null && r.lhs.size() > 0;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDocumentationPartResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getProperties() != null)\r\n        sb.append(\"Properties: \").append(getProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetMethodResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseModels() != null)\r\n        sb.append(\"ResponseModels: \").append(getResponseModels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.UnprocessedQueryExecutionId.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionId() != null)\r\n        sb.append(\"QueryExecutionId: \").append(getQueryExecutionId()).append(\",\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.Node.getAction",
	"Comment": "returns the action that was applied to the parent to generate the node.",
	"Method": "A getAction(){\r\n    return action;\r\n}"
}, {
	"Path": "aima.gui.fx.applications.search.local.SimulatedAnnealingMaximumFinderApp.getSuccessor",
	"Comment": "successor function for maximum search problem. just one successor is\tpresented which corresponds to one mutation step in the genetic algorithm\tfor numbers.",
	"Method": "Double getSuccessor(Double state){\r\n    double result = state;\r\n    double r = random.nextDouble() - 0.5;\r\n    result += r * r * r * (Functions.maxX - Functions.minX) / 2;\r\n    if (result < Functions.minX)\r\n        result = Functions.minX;\r\n    else if (result > Functions.maxX)\r\n        result = Functions.maxX;\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.CertificateAuthority.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getCreatedAt() != null)\r\n        sb.append(\"CreatedAt: \").append(getCreatedAt()).append(\",\");\r\n    if (getLastStateChangeAt() != null)\r\n        sb.append(\"LastStateChangeAt: \").append(getLastStateChangeAt()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getSerial() != null)\r\n        sb.append(\"Serial: \").append(getSerial()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getNotBefore() != null)\r\n        sb.append(\"NotBefore: \").append(getNotBefore()).append(\",\");\r\n    if (getNotAfter() != null)\r\n        sb.append(\"NotAfter: \").append(getNotAfter()).append(\",\");\r\n    if (getFailureReason() != null)\r\n        sb.append(\"FailureReason: \").append(getFailureReason()).append(\",\");\r\n    if (getCertificateAuthorityConfiguration() != null)\r\n        sb.append(\"CertificateAuthorityConfiguration: \").append(getCertificateAuthorityConfiguration()).append(\",\");\r\n    if (getRevocationConfiguration() != null)\r\n        sb.append(\"RevocationConfiguration: \").append(getRevocationConfiguration()).append(\",\");\r\n    if (getRestorableUntil() != null)\r\n        sb.append(\"RestorableUntil: \").append(getRestorableUntil());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeMetricCollectionTypes",
	"Comment": "describes the available cloudwatch metrics for amazon ec2 auto scaling.the groupstandbyinstances metric is not returned by default. you must explicitly request this metricwhen calling enablemetricscollection.",
	"Method": "DescribeMetricCollectionTypesResult describeMetricCollectionTypes(DescribeMetricCollectionTypesRequest request,DescribeMetricCollectionTypesResult describeMetricCollectionTypes){\r\n    return describeMetricCollectionTypes(new DescribeMetricCollectionTypesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazonappstream using the current builder configuration.",
	"Method": "AmazonAppStream build(AwsSyncClientParams params){\r\n    return new AmazonAppStreamClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.describeScalingPolicies",
	"Comment": "describes the scaling policies for the specified service namespace.you can filter the results using the resourceid, scalabledimension, andpolicynames parameters.to create a scaling policy or update an existing one, see putscalingpolicy. if you are no longer using ascaling policy, you can delete it using deletescalingpolicy.",
	"Method": "DescribeScalingPoliciesResult describeScalingPolicies(DescribeScalingPoliciesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeScalingPolicies(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ResolveRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.Filter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListVirtualRoutersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UntagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DocumentationVersion.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DeleteRouteResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoute() != null)\r\n        sb.append(\"Route: \").append(getRoute());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListMeshesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshes() != null)\r\n        sb.append(\"Meshes: \").append(getMeshes()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ImportDocumentationPartsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIds() != null)\r\n        sb.append(\"Ids: \").append(getIds()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeAutoScalingInstancesAsync",
	"Comment": "simplified method form for invoking the describeautoscalinginstances operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync(DescribeAutoScalingInstancesRequest request,java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync,DescribeAutoScalingInstancesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingInstancesRequest, DescribeAutoScalingInstancesResult> asyncHandler,java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync,java.util.concurrent.Future<DescribeAutoScalingInstancesResult> describeAutoScalingInstancesAsync,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingInstancesRequest, DescribeAutoScalingInstancesResult> asyncHandler){\r\n    return describeAutoScalingInstancesAsync(new DescribeAutoScalingInstancesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.QueryExecutionContext.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDatabase() != null)\r\n        sb.append(\"Database: \").append(getDatabase());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.updateVirtualNode",
	"Comment": "updates an existing virtual node in a specified service mesh.",
	"Method": "UpdateVirtualNodeResult updateVirtualNode(UpdateVirtualNodeRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateVirtualNode(request);\r\n}"
}, {
	"Path": "aima.core.learning.neural.Perceptron.testOnDataSet",
	"Comment": "returns the accuracy of the hypothesis on the specified set of examples",
	"Method": "int[] testOnDataSet(NNDataSet nnds){\r\n    int[] result = new int[] { 0, 0 };\r\n    nnds.refreshDataset();\r\n    while (nnds.hasMoreExamples()) {\r\n        NNExample nne = nnds.getExampleAtRandom();\r\n        Vector prediction = predict(nne);\r\n        if (nne.isCorrect(prediction)) {\r\n            result[0] = result[0] + 1;\r\n        } else {\r\n            result[1] = result[1] + 1;\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "aima.core.search.framework.NodeExpander.addNodeListener",
	"Comment": "adds a listener to the list of node listeners. it is informed whenever a\tnode is expanded during search.",
	"Method": "void addNodeListener(Consumer<Node<S, A>> listener){\r\n    nodeListeners.add(listener);\r\n}"
}, {
	"Path": "aimax.osm.viewer.CoordTransformer.lat",
	"Comment": "computes the corresponding latitude for a given view y coordinate.",
	"Method": "float lat(int y){\r\n    return originLat - y / dotsPerDeg;\r\n}"
}, {
	"Path": "aima.gui.swing.framework.util.GuiBase.getClearance",
	"Comment": "returns the clearance that has to be used between any graphical elements to maintain a uniform look and feel.",
	"Method": "int getClearance(){\r\n    return CLEARANCE;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.listTagsForResource",
	"Comment": "retrieves a list of all tags for the specified appstream 2.0 resource. you can tag appstream 2.0 image builders,images, fleets, and stacks.for more information about tags, see tagging your resourcesin the amazon appstream 2.0 developer guide.",
	"Method": "ListTagsForResourceResult listTagsForResource(ListTagsForResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListTagsForResource(request);\r\n}"
}, {
	"Path": "aima.gui.swing.framework.EmptyEnvironmentView.adjustTransformation",
	"Comment": "specifies a bounding box in world coordinates. the resulting\ttransformation is able to display everything within this bounding box\twithout scrolling.",
	"Method": "void adjustTransformation(double minXW,double minYW,double maxXW,double maxYW){\r\n    double scaleX = 1f;\r\n    double scaleY = 1f;\r\n    if (maxXW > minXW)\r\n        scaleX = (getWidth() - borderLeft - borderRight) / (maxXW - minXW);\r\n    if (maxYW > minYW)\r\n        scaleY = (getHeight() - borderTop - borderBottom) / (maxYW - minYW);\r\n    offsetX = -minXW;\r\n    offsetY = -minYW;\r\n    scale = Math.min(scaleX, scaleY);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getClientCertificate",
	"Comment": "gets information about the current clientcertificate resource.",
	"Method": "GetClientCertificateResult getClientCertificate(GetClientCertificateRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetClientCertificate(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.attachLoadBalancersAsync",
	"Comment": "simplified method form for invoking the attachloadbalancers operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<AttachLoadBalancersResult> attachLoadBalancersAsync(AttachLoadBalancersRequest request,java.util.concurrent.Future<AttachLoadBalancersResult> attachLoadBalancersAsync,AttachLoadBalancersRequest request,com.amazonaws.handlers.AsyncHandler<AttachLoadBalancersRequest, AttachLoadBalancersResult> asyncHandler,java.util.concurrent.Future<AttachLoadBalancersResult> attachLoadBalancersAsync,java.util.concurrent.Future<AttachLoadBalancersResult> attachLoadBalancersAsync,com.amazonaws.handlers.AsyncHandler<AttachLoadBalancersRequest, AttachLoadBalancersResult> asyncHandler){\r\n    return attachLoadBalancersAsync(new AttachLoadBalancersRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateModelRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getModelName() != null)\r\n        sb.append(\"ModelName: \").append(getModelName()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.kodedu.controller.FileService.matches",
	"Comment": "returns true if the given match header matches the given value.",
	"Method": "boolean matches(String matchHeader,String toMatch){\r\n    String[] matchValues = matchHeader.split(\"\\\\s*,\\\\s*\");\r\n    Arrays.sort(matchValues);\r\n    return Arrays.binarySearch(matchValues, toMatch) > -1 || Arrays.binarySearch(matchValues, \"*\") > -1;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLaunchConfigurationName() != null)\r\n        sb.append(\"LaunchConfigurationName: \").append(getLaunchConfigurationName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ListTagsForCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.DescribeCertificateAuthorityAuditReportRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getAuditReportId() != null)\r\n        sb.append(\"AuditReportId: \").append(getAuditReportId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutMethodResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getAuthorizationType() != null)\r\n        sb.append(\"AuthorizationType: \").append(getAuthorizationType()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId()).append(\",\");\r\n    if (getApiKeyRequired() != null)\r\n        sb.append(\"ApiKeyRequired: \").append(getApiKeyRequired()).append(\",\");\r\n    if (getRequestValidatorId() != null)\r\n        sb.append(\"RequestValidatorId: \").append(getRequestValidatorId()).append(\",\");\r\n    if (getOperationName() != null)\r\n        sb.append(\"OperationName: \").append(getOperationName()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestModels() != null)\r\n        sb.append(\"RequestModels: \").append(getRequestModels()).append(\",\");\r\n    if (getMethodResponses() != null)\r\n        sb.append(\"MethodResponses: \").append(getMethodResponses()).append(\",\");\r\n    if (getMethodIntegration() != null)\r\n        sb.append(\"MethodIntegration: \").append(getMethodIntegration()).append(\",\");\r\n    if (getAuthorizationScopes() != null)\r\n        sb.append(\"AuthorizationScopes: \").append(getAuthorizationScopes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListSkillsStoreCategoriesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetBranchRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.MeshStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateBusinessReportScheduleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduleArn() != null)\r\n        sb.append(\"ScheduleArn: \").append(getScheduleArn()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName()).append(\",\");\r\n    if (getS3KeyPrefix() != null)\r\n        sb.append(\"S3KeyPrefix: \").append(getS3KeyPrefix()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat()).append(\",\");\r\n    if (getScheduleName() != null)\r\n        sb.append(\"ScheduleName: \").append(getScheduleName()).append(\",\");\r\n    if (getRecurrence() != null)\r\n        sb.append(\"Recurrence: \").append(getRecurrence());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.SimpleAgentApp.startApplication",
	"Comment": "constructs an agent application and sets the application frame visible.",
	"Method": "void startApplication(){\r\n    AgentAppFrame frame = constructApplicationFrame();\r\n    frame.centerPane.setDividerLocation(frame.centerPane.getResizeWeight());\r\n    frame.setVisible(true);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AssociateSkillWithSkillGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeScheduledActionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getScheduledActionNames() != null)\r\n        sb.append(\"ScheduledActionNames: \").append(getScheduledActionNames()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateApiKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiKey() != null)\r\n        sb.append(\"ApiKey: \").append(getApiKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteDomainAssociationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainAssociation() != null)\r\n        sb.append(\"DomainAssociation: \").append(getDomainAssociation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.planning.State.isApplicable",
	"Comment": "checks if the action is applicable in a state.we say that action a is applicable in state s if the preconditions are satisfied by s.",
	"Method": "boolean isApplicable(ActionSchema a){\r\n    return this.getFluents().containsAll(a.getPrecondition());\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationVersionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetExportResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType()).append(\",\");\r\n    if (getContentDisposition() != null)\r\n        sb.append(\"ContentDisposition: \").append(getContentDisposition()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsappsync using the current builder configuration.",
	"Method": "AWSAppSync build(AwsSyncClientParams params){\r\n    return new AWSAppSyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.LogConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFieldLogLevel() != null)\r\n        sb.append(\"FieldLogLevel: \").append(getFieldLogLevel()).append(\",\");\r\n    if (getCloudWatchLogsRoleArn() != null)\r\n        sb.append(\"CloudWatchLogsRoleArn: \").append(getCloudWatchLogsRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualRouterStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.Vector2D.calculateFromPolar",
	"Comment": "calculates a vector based on the length and the heading of the vector.",
	"Method": "Vector2D calculateFromPolar(double length,double heading){\r\n    final double x = length * Math.cos(heading);\r\n    final double y = length * Math.sin(heading);\r\n    return new Vector2D(x, y);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AddressBook.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.detachLoadBalancerTargetGroups",
	"Comment": "detaches one or more target groups from the specified auto scaling group.",
	"Method": "DetachLoadBalancerTargetGroupsResult detachLoadBalancerTargetGroups(DetachLoadBalancerTargetGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDetachLoadBalancerTargetGroups(request);\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.agent.OsmAgentController.isPrepared",
	"Comment": "checks whether the current environment is ready to start simulation.",
	"Method": "boolean isPrepared(){\r\n    return isPrepared && (env.getAgents().isEmpty() || !env.isDone());\r\n}"
}, {
	"Path": "aima.core.learning.reinforcement.example.CellWorldEnvironmentState.getAgentLocation",
	"Comment": "get the location of an agent within the cell world environment.",
	"Method": "Cell<Double> getAgentLocation(Agent anAgent){\r\n    return agentLocations.get(anAgent).getCell();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.AssociateFleetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AttachLoadBalancerTargetGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutLifecycleHookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.learners.DecisionTreeLearner.train",
	"Comment": "induces the decision tree from the specified set of examples",
	"Method": "void train(DataSet ds){\r\n    List<String> attributes = ds.getNonTargetAttributes();\r\n    this.tree = decisionTreeLearning(ds, attributes, new ConstantDecisonTree(defaultValue));\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearchReducedFrontier.findNode",
	"Comment": "sets the comparator if a priority queue is used, resets explored list and\tstate map and calls the inherited version of search.",
	"Method": "Optional<Node<S, A>> findNode(Problem<S, A> problem,Queue<Node<S, A>> frontier){\r\n    if (frontier instanceof PriorityQueue<?>)\r\n        nodeComparator = ((PriorityQueue<Node<S, A>>) frontier).comparator();\r\n    explored.clear();\r\n    frontierNodeLookup.clear();\r\n    return super.findNode(problem, frontier);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListResolversByFunctionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getFunctionId() != null)\r\n        sb.append(\"FunctionId: \").append(getFunctionId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.HttpRouteMatch.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPrefix() != null)\r\n        sb.append(\"Prefix: \").append(getPrefix());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.RouteData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getMetadata() != null)\r\n        sb.append(\"Metadata: \").append(getMetadata()).append(\",\");\r\n    if (getRouteName() != null)\r\n        sb.append(\"RouteName: \").append(getRouteName()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ApiStage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage()).append(\",\");\r\n    if (getThrottle() != null)\r\n        sb.append(\"Throttle: \").append(getThrottle());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeAutoScalingNotificationTypesAsync",
	"Comment": "simplified method form for invoking the describeautoscalingnotificationtypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync(DescribeAutoScalingNotificationTypesRequest request,java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync,DescribeAutoScalingNotificationTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingNotificationTypesRequest, DescribeAutoScalingNotificationTypesResult> asyncHandler,java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync,java.util.concurrent.Future<DescribeAutoScalingNotificationTypesResult> describeAutoScalingNotificationTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeAutoScalingNotificationTypesRequest, DescribeAutoScalingNotificationTypesResult> asyncHandler){\r\n    return describeAutoScalingNotificationTypesAsync(new DescribeAutoScalingNotificationTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.Settings.registerListener",
	"Comment": "registers a listener for a given key that will be notified if the value of the key changes.\tthis does not apply to special settings.",
	"Method": "void registerListener(String key,ISettingsListener listener){\r\n    SettingsListenerList list = listeners.get(key);\r\n    if (list == null) {\r\n        list = new SettingsListenerList();\r\n        listeners.put(key, list);\r\n    }\r\n    list.add(listener);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.CertificateSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLifecycleHooksResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHooks() != null)\r\n        sb.append(\"LifecycleHooks: \").append(getLifecycleHooks());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.ListVirtualNodesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateAddressBookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetResolverRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getFieldName() != null)\r\n        sb.append(\"FieldName: \").append(getFieldName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.Validity.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.LaunchTemplate.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLaunchTemplateSpecification() != null)\r\n        sb.append(\"LaunchTemplateSpecification: \").append(getLaunchTemplateSpecification()).append(\",\");\r\n    if (getOverrides() != null)\r\n        sb.append(\"Overrides: \").append(getOverrides());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.JobSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobArn() != null)\r\n        sb.append(\"JobArn: \").append(getJobArn()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getCommitId() != null)\r\n        sb.append(\"CommitId: \").append(getCommitId()).append(\",\");\r\n    if (getCommitMessage() != null)\r\n        sb.append(\"CommitMessage: \").append(getCommitMessage()).append(\",\");\r\n    if (getCommitTime() != null)\r\n        sb.append(\"CommitTime: \").append(getCommitTime()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getJobType() != null)\r\n        sb.append(\"JobType: \").append(getJobType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.cql.JavaDriverConnectionPoolMonitorImpl.getBadRequestCount",
	"Comment": "returns the number of requests that returned errors not accounted for byanother metric. this includes all types of invalid requests.",
	"Method": "long getBadRequestCount(){\r\n    return cluster.get().getMetrics().getErrorMetrics().getOthers().getCount();\r\n}"
}, {
	"Path": "aima.gui.fx.applications.search.local.SimulatedAnnealingMaximumFinderApp.getRandomState",
	"Comment": "creates a random initial state for the maximum search problem.",
	"Method": "Double getRandomState(){\r\n    return random.nextDouble() * (Functions.maxX - Functions.minX) + Functions.minX;\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearch.cleanUpFrontier",
	"Comment": "helper method which removes nodes of already explored states from the head\tof the frontier.",
	"Method": "void cleanUpFrontier(){\r\n    while (!frontier.isEmpty() && explored.contains(frontier.element().getState())) frontier.remove();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLoadBalancerTargetGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoadBalancerTargetGroups() != null)\r\n        sb.append(\"LoadBalancerTargetGroups: \").append(getLoadBalancerTargetGroups()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.BatchPutScheduledUpdateGroupActionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFailedScheduledUpdateGroupActions() != null)\r\n        sb.append(\"FailedScheduledUpdateGroupActions: \").append(getFailedScheduledUpdateGroupActions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.StopJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobSummary() != null)\r\n        sb.append(\"JobSummary: \").append(getJobSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.planning.State.result",
	"Comment": "returns the state obtained by the application of a list of applicable actions tothe current state. this method does not change the original state and in fact returnsa new state representing the changed state.",
	"Method": "State result(ActionSchema a,State result,List<ActionSchema> actions){\r\n    State resultState = new State(new ArrayList(this.getFluents()));\r\n    for (ActionSchema action : actions) {\r\n        resultState = resultState.result(action);\r\n    }\r\n    return resultState;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.TagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeAccountLimits",
	"Comment": "describes the current auto scaling resource limits for your aws account.for information about requesting an increase in these limits, see auto scaling limits in theamazon ec2 auto scaling user guide.",
	"Method": "DescribeAccountLimitsResult describeAccountLimits(DescribeAccountLimitsRequest request,DescribeAccountLimitsResult describeAccountLimits){\r\n    return describeAccountLimits(new DescribeAccountLimitsRequest());\r\n}"
}, {
	"Path": "com.netflix.astyanax.cql.reads.CqlAllRowsQueryImpl.startTasks",
	"Comment": "submit all the callables to the executor by synchronize their execution so they all startafter the have all been submitted.",
	"Method": "List<Future<Boolean>> startTasks(ExecutorService executor,List<Callable<Boolean>> callables){\r\n    List<Future<Boolean>> tasks = Lists.newArrayList();\r\n    for (Callable<Boolean> callable : callables) {\r\n        tasks.add(executor.submit(callable));\r\n    }\r\n    return tasks;\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListGraphqlApisRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.putRestApi",
	"Comment": "a feature of the api gateway control service for updating an existing api with an input of external apidefinitions. the update can take the form of merging the supplied definition into the existing api or overwritingthe existing api.",
	"Method": "PutRestApiResult putRestApi(PutRestApiRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutRestApi(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetTypeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.DescribeCertificateAuthorityAuditReportResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuditReportStatus() != null)\r\n        sb.append(\"AuditReportStatus: \").append(getAuditReportStatus()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName()).append(\",\");\r\n    if (getS3Key() != null)\r\n        sb.append(\"S3Key: \").append(getS3Key()).append(\",\");\r\n    if (getCreatedAt() != null)\r\n        sb.append(\"CreatedAt: \").append(getCreatedAt());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ListTagsForResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteBusinessReportScheduleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.Util.generateRandomDoubleBetween",
	"Comment": "generates a random double between two limits. both limits are inclusive.",
	"Method": "double generateRandomDoubleBetween(double lowerLimit,double upperLimit){\r\n    return lowerLimit + ((upperLimit - lowerLimit) * random.nextDouble());\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.startDeviceSync",
	"Comment": "resets a device and its account to the known default settings, by clearing all information and settings set byprevious users.",
	"Method": "StartDeviceSyncResult startDeviceSync(StartDeviceSyncRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartDeviceSync(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.PutScalingPolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyARN() != null)\r\n        sb.append(\"PolicyARN: \").append(getPolicyARN()).append(\",\");\r\n    if (getAlarms() != null)\r\n        sb.append(\"Alarms: \").append(getAlarms());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateStageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCacheClusterEnabled() != null)\r\n        sb.append(\"CacheClusterEnabled: \").append(getCacheClusterEnabled()).append(\",\");\r\n    if (getCacheClusterSize() != null)\r\n        sb.append(\"CacheClusterSize: \").append(getCacheClusterSize()).append(\",\");\r\n    if (getCacheClusterStatus() != null)\r\n        sb.append(\"CacheClusterStatus: \").append(getCacheClusterStatus()).append(\",\");\r\n    if (getMethodSettings() != null)\r\n        sb.append(\"MethodSettings: \").append(getMethodSettings()).append(\",\");\r\n    if (getVariables() != null)\r\n        sb.append(\"Variables: \").append(getVariables()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion()).append(\",\");\r\n    if (getAccessLogSettings() != null)\r\n        sb.append(\"AccessLogSettings: \").append(getAccessLogSettings()).append(\",\");\r\n    if (getCanarySettings() != null)\r\n        sb.append(\"CanarySettings: \").append(getCanarySettings()).append(\",\");\r\n    if (getTracingEnabled() != null)\r\n        sb.append(\"TracingEnabled: \").append(getTracingEnabled()).append(\",\");\r\n    if (getWebAclArn() != null)\r\n        sb.append(\"WebAclArn: \").append(getWebAclArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getLastUpdatedDate() != null)\r\n        sb.append(\"LastUpdatedDate: \").append(getLastUpdatedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.QuotaSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getOffset() != null)\r\n        sb.append(\"Offset: \").append(getOffset()).append(\",\");\r\n    if (getPeriod() != null)\r\n        sb.append(\"Period: \").append(getPeriod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.planning.GraphPlanAlgorithm.checkAllGoalsNonMutex",
	"Comment": "this method is used to check if all goals are present in a particular stateand none of them has a mutex link.",
	"Method": "boolean checkAllGoalsNonMutex(Level level,List<Literal> goals){\r\n    if (!level.getLevelObjects().containsAll(goals)) {\r\n        return false;\r\n    }\r\n    boolean mutexCheck = false;\r\n    for (Object literal : goals) {\r\n        List<Object> mutexOfGoal = level.getMutexLinks().get(literal);\r\n        if (mutexOfGoal != null) {\r\n            for (Object object : mutexOfGoal) {\r\n                if (goals.contains((Literal) object)) {\r\n                    mutexCheck = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return (!mutexCheck);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.setInstanceProtection",
	"Comment": "updates the instance protection settings of the specified instances.for more information, see instance protection in the amazon ec2 auto scaling user guide.",
	"Method": "SetInstanceProtectionResult setInstanceProtection(SetInstanceProtectionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSetInstanceProtection(request);\r\n}"
}, {
	"Path": "aima.gui.fx.views.SimpleEnvironmentViewCtrl.updateEnvStateView",
	"Comment": "is called after agent actions. this implementation just notifies all observers.",
	"Method": "void updateEnvStateView(Environment env){\r\n    notifyObservers();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateContactRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(getFirstName()).append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(getLastName()).append(\",\");\r\n    if (getPhoneNumber() != null)\r\n        sb.append(\"PhoneNumber: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.mapping.Mapping.getNames",
	"Comment": "return the set of column names discovered from the bean class",
	"Method": "Collection<String> getNames(){\r\n    return fields.keySet();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.QueryExecution.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionId() != null)\r\n        sb.append(\"QueryExecutionId: \").append(getQueryExecutionId()).append(\",\");\r\n    if (getQuery() != null)\r\n        sb.append(\"Query: \").append(getQuery()).append(\",\");\r\n    if (getStatementType() != null)\r\n        sb.append(\"StatementType: \").append(getStatementType()).append(\",\");\r\n    if (getResultConfiguration() != null)\r\n        sb.append(\"ResultConfiguration: \").append(getResultConfiguration()).append(\",\");\r\n    if (getQueryExecutionContext() != null)\r\n        sb.append(\"QueryExecutionContext: \").append(getQueryExecutionContext()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStatistics() != null)\r\n        sb.append(\"Statistics: \").append(getStatistics());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListDeviceEventsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getEventType() != null)\r\n        sb.append(\"EventType: \").append(getEventType()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getStartDate() != null)\r\n        sb.append(\"StartDate: \").append(getStartDate()).append(\",\");\r\n    if (getEndDate() != null)\r\n        sb.append(\"EndDate: \").append(getEndDate()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ContactData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(getFirstName()).append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(getLastName()).append(\",\");\r\n    if (getPhoneNumber() != null)\r\n        sb.append(\"PhoneNumber: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultMapEntity.getAttributeValue",
	"Comment": "applies binary search to find the specified attribute value and\treturns null if not found.",
	"Method": "String getAttributeValue(String attName){\r\n    int min = 0;\r\n    int max = attributes.length - 1;\r\n    int curr;\r\n    int cr;\r\n    while (min <= max) {\r\n        curr = (min + max) / 2;\r\n        cr = attName.compareTo(attributes[curr].getKey());\r\n        if (cr == 0)\r\n            return attributes[curr].getValue();\r\n        else if (cr < 0)\r\n            max = curr - 1;\r\n        else\r\n            min = curr + 1;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetSdkTypeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAccountLimitsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.NotificationConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getTopicARN() != null)\r\n        sb.append(\"TopicARN: \").append(getTopicARN()).append(\",\");\r\n    if (getNotificationType() != null)\r\n        sb.append(\"NotificationType: \").append(getNotificationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.withColumnPrefix",
	"Comment": "specify the prefix that uniquely distinguishes the lock columns from datacolumn",
	"Method": "ColumnPrefixDistributedRowLock<K> withColumnPrefix(String prefix){\r\n    this.prefix = prefix;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SmartHomeAppliance.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFriendlyName() != null)\r\n        sb.append(\"FriendlyName: \").append(getFriendlyName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getManufacturerName() != null)\r\n        sb.append(\"ManufacturerName: \").append(getManufacturerName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.listAssociatedStacks",
	"Comment": "retrieves the name of the stack with which the specified fleet is associated.",
	"Method": "ListAssociatedStacksResult listAssociatedStacks(ListAssociatedStacksRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListAssociatedStacks(request);\r\n}"
}, {
	"Path": "aimax.osm.gps.NmeaReaderFactory.createFileReader",
	"Comment": "creates a nmea file reader. the file stream is not automatically\topened!",
	"Method": "NmeaReader createFileReader(File file){\r\n    return new NmeaFileReader(file);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.IssueCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getCsr() != null)\r\n        sb.append(\"Csr: \").append(getCsr()).append(\",\");\r\n    if (getSigningAlgorithm() != null)\r\n        sb.append(\"SigningAlgorithm: \").append(getSigningAlgorithm()).append(\",\");\r\n    if (getValidity() != null)\r\n        sb.append(\"Validity: \").append(getValidity()).append(\",\");\r\n    if (getIdempotencyToken() != null)\r\n        sb.append(\"IdempotencyToken: \").append(getIdempotencyToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetDomainAssociationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.CreateAppRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRepository() != null)\r\n        sb.append(\"Repository: \").append(getRepository()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getIamServiceRoleArn() != null)\r\n        sb.append(\"IamServiceRoleArn: \").append(getIamServiceRoleArn()).append(\",\");\r\n    if (getOauthToken() != null)\r\n        sb.append(\"OauthToken: \").append(getOauthToken()).append(\",\");\r\n    if (getEnvironmentVariables() != null)\r\n        sb.append(\"EnvironmentVariables: \").append(getEnvironmentVariables()).append(\",\");\r\n    if (getEnableBranchAutoBuild() != null)\r\n        sb.append(\"EnableBranchAutoBuild: \").append(getEnableBranchAutoBuild()).append(\",\");\r\n    if (getEnableBasicAuth() != null)\r\n        sb.append(\"EnableBasicAuth: \").append(getEnableBasicAuth()).append(\",\");\r\n    if (getBasicAuthCredentials() != null)\r\n        sb.append(\"BasicAuthCredentials: \").append(getBasicAuthCredentials()).append(\",\");\r\n    if (getCustomRules() != null)\r\n        sb.append(\"CustomRules: \").append(getCustomRules()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getBuildSpec() != null)\r\n        sb.append(\"BuildSpec: \").append(getBuildSpec());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetDataSourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDataSource() != null)\r\n        sb.append(\"DataSource: \").append(getDataSource());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateRouteResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoute() != null)\r\n        sb.append(\"Route: \").append(getRoute());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDomainNameRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.enableMetricsCollection",
	"Comment": "enables group metrics for the specified auto scaling group. for more information, see monitoring your autoscaling groups and instances in the amazon ec2 auto scaling user guide.",
	"Method": "EnableMetricsCollectionResult enableMetricsCollection(EnableMetricsCollectionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeEnableMetricsCollection(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ForgetSmartHomeAppliancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteUsagePlanResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.visitors.ConvertToConjunctionOfClauses.convert",
	"Comment": "returns the specified sentence in its logically equivalent conjunction of\tclauses.",
	"Method": "ConjunctionOfClauses convert(Sentence s){\r\n    ConjunctionOfClauses result = null;\r\n    Sentence cnfSentence = ConvertToCNF.convert(s);\r\n    List<Clause> clauses = new ArrayList<Clause>();\r\n    clauses.addAll(ClauseCollector.getClausesFrom(cnfSentence));\r\n    result = new ConjunctionOfClauses(clauses);\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchContactsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContacts() != null)\r\n        sb.append(\"Contacts: \").append(getContacts()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getTotalCount() != null)\r\n        sb.append(\"TotalCount: \").append(getTotalCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ApproveSkillResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.getQueryExecution",
	"Comment": "returns information about a single execution of a query. each time a query executes, information about the queryexecution is saved with a unique id.",
	"Method": "GetQueryExecutionResult getQueryExecution(GetQueryExecutionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetQueryExecution(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateFunctionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFunctionConfiguration() != null)\r\n        sb.append(\"FunctionConfiguration: \").append(getFunctionConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetRestApisRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.common.Lexer.lookAhead",
	"Comment": "returns the character at the specified position in the lookahead buffer.",
	"Method": "char lookAhead(int position){\r\n    return (char) lookAheadBuffer[position - 1];\r\n}"
}, {
	"Path": "aima.core.probability.util.ProbUtil.constructConjunction",
	"Comment": "convenience method for ensure a conjunction of probabilistic\tpropositions.",
	"Method": "Proposition constructConjunction(Proposition[] props,Proposition constructConjunction,Proposition[] props,int idx){\r\n    if ((idx + 1) == props.length) {\r\n        return props[idx];\r\n    }\r\n    return new ConjunctiveProposition(props[idx], constructConjunction(props, idx + 1));\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RouteFindingAgentOsmApp.loadMap",
	"Comment": "loads a map of the city of ulm, germany. override to change the map.",
	"Method": "void loadMap(){\r\n    mapPaneCtrl.loadMap(DataResource.getUlmFileResource());\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.exitStandby",
	"Comment": "moves the specified instances out of the standby state.for more information, see temporarily removinginstances from your auto scaling group in the amazon ec2 auto scaling user guide.",
	"Method": "ExitStandbyResult exitStandby(ExitStandbyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeExitStandby(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutScheduledUpdateGroupActionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateAuthorizerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getProviderARNs() != null)\r\n        sb.append(\"ProviderARNs: \").append(getProviderARNs()).append(\",\");\r\n    if (getAuthType() != null)\r\n        sb.append(\"AuthType: \").append(getAuthType()).append(\",\");\r\n    if (getAuthorizerUri() != null)\r\n        sb.append(\"AuthorizerUri: \").append(getAuthorizerUri()).append(\",\");\r\n    if (getAuthorizerCredentials() != null)\r\n        sb.append(\"AuthorizerCredentials: \").append(getAuthorizerCredentials()).append(\",\");\r\n    if (getIdentitySource() != null)\r\n        sb.append(\"IdentitySource: \").append(getIdentitySource()).append(\",\");\r\n    if (getIdentityValidationExpression() != null)\r\n        sb.append(\"IdentityValidationExpression: \").append(getIdentityValidationExpression()).append(\",\");\r\n    if (getAuthorizerResultTtlInSeconds() != null)\r\n        sb.append(\"AuthorizerResultTtlInSeconds: \").append(getAuthorizerResultTtlInSeconds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.describeScalingActivities",
	"Comment": "provides descriptive information about the scaling activities in the specified namespace from the previous sixweeks.you can filter the results using the resourceid and scalabledimension parameters.scaling activities are triggered by cloudwatch alarms that are associated with scaling policies. to view thescaling policies for a service namespace, see describescalingpolicies. to create a scaling policy orupdate an existing one, see putscalingpolicy.",
	"Method": "DescribeScalingActivitiesResult describeScalingActivities(DescribeScalingActivitiesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeScalingActivities(request);\r\n}"
}, {
	"Path": "com.kodedu.controller.CacheResource.accepts",
	"Comment": "returns true if the given accept header accepts the given value.",
	"Method": "boolean accepts(String acceptHeader,String toAccept){\r\n    String[] acceptValues = acceptHeader.split(\"\\\\s*(,|;)\\\\s*\");\r\n    Arrays.sort(acceptValues);\r\n    return Arrays.binarySearch(acceptValues, toAccept) > -1 || Arrays.binarySearch(acceptValues, toAccept.replaceAll(\"/.*$\", \"/*\")) > -1 || Arrays.binarySearch(acceptValues, \"*/*\") > -1;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetGatewayResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeStacksResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStacks() != null)\r\n        sb.append(\"Stacks: \").append(getStacks()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateApiKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getCustomerId() != null)\r\n        sb.append(\"CustomerId: \").append(getCustomerId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getLastUpdatedDate() != null)\r\n        sb.append(\"LastUpdatedDate: \").append(getLastUpdatedDate()).append(\",\");\r\n    if (getStageKeys() != null)\r\n        sb.append(\"StageKeys: \").append(getStageKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.Authorizer.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getProviderARNs() != null)\r\n        sb.append(\"ProviderARNs: \").append(getProviderARNs()).append(\",\");\r\n    if (getAuthType() != null)\r\n        sb.append(\"AuthType: \").append(getAuthType()).append(\",\");\r\n    if (getAuthorizerUri() != null)\r\n        sb.append(\"AuthorizerUri: \").append(getAuthorizerUri()).append(\",\");\r\n    if (getAuthorizerCredentials() != null)\r\n        sb.append(\"AuthorizerCredentials: \").append(getAuthorizerCredentials()).append(\",\");\r\n    if (getIdentitySource() != null)\r\n        sb.append(\"IdentitySource: \").append(getIdentitySource()).append(\",\");\r\n    if (getIdentityValidationExpression() != null)\r\n        sb.append(\"IdentityValidationExpression: \").append(getIdentityValidationExpression()).append(\",\");\r\n    if (getAuthorizerResultTtlInSeconds() != null)\r\n        sb.append(\"AuthorizerResultTtlInSeconds: \").append(getAuthorizerResultTtlInSeconds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetExportRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getExportType() != null)\r\n        sb.append(\"ExportType: \").append(getExportType()).append(\",\");\r\n    if (getParameters() != null)\r\n        sb.append(\"Parameters: \").append(getParameters()).append(\",\");\r\n    if (getAccepts() != null)\r\n        sb.append(\"Accepts: \").append(getAccepts());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.zeapo.pwdstore.pwgen.PRNGFixes.applyOpenSSLFix",
	"Comment": "applies the fix for openssl prng having low entropy. does nothing if thefix is not needed.",
	"Method": "void applyOpenSSLFix(){\r\n    if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {\r\n        return;\r\n    }\r\n    try {\r\n        Class.forName(\"org.apache.harmony.xnet.provider.jsse.NativeCrypto\").getMethod(\"RAND_seed\", byte[].class).invoke(null, generateSeed());\r\n        int bytesRead = (Integer) Class.forName(\"org.apache.harmony.xnet.provider.jsse.NativeCrypto\").getMethod(\"RAND_load_file\", String.class, long.class).invoke(null, \"/dev/urandom\", 1024);\r\n        if (bytesRead != 1024) {\r\n            throw new IOException(\"Unexpected number of bytes read from Linux PRNG: \" + bytesRead);\r\n        }\r\n    } catch (Exception e) {\r\n        throw new SecurityException(\"Failed to seed OpenSSL PRNG\", e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.ListNamedQueriesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQueryIds() != null)\r\n        sb.append(\"NamedQueryIds: \").append(getNamedQueryIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.viewer.DefaultEntityRenderer.printBufferedObjects",
	"Comment": "prints all buffered entities according to their rendering informations.",
	"Method": "void printBufferedObjects(){\r\n    Collections.sort(areaBuffer, new MapAreaComparator());\r\n    Comparator<MapEntity> comp = new MapEntityComparator();\r\n    if (wayBuffer.size() < 10000)\r\n        Collections.sort(wayBuffer, comp);\r\n    if (nodeBuffer.size() < 10000)\r\n        Collections.sort(nodeBuffer, comp);\r\n    for (MapWay area : areaBuffer) printWay(area, (DefaultEntityViewInfo) area.getViewInfo(), true);\r\n    for (MapWay way : wayBuffer) printWay(way, (DefaultEntityViewInfo) way.getViewInfo(), false);\r\n    for (MapEntity node : nodeBuffer) {\r\n        MapNode n;\r\n        if (node instanceof MapWay) {\r\n            List<MapNode> wayNodes = getWayNodes((MapWay) node);\r\n            if (wayNodes.isEmpty())\r\n                wayNodes = ((MapWay) node).getNodes();\r\n            n = wayNodes.get(0);\r\n        } else\r\n            n = (MapNode) node;\r\n        printNode(n, (DefaultEntityViewInfo) node.getViewInfo());\r\n    }\r\n    for (Track track : trackBuffer) printTrack(track);\r\n    Collections.sort(nameInfoBuffer);\r\n    int charSize = (int) (defaultFontSize * displayFactorSym);\r\n    for (int i = 0; i < nameInfoBuffer.size(); ++i) {\r\n        NameInfo info = nameInfoBuffer.get(i);\r\n        for (int j = 0; j < i; ++j) {\r\n            NameInfo info1 = nameInfoBuffer.get(j);\r\n            int fac = (info.name.equals(info1.name)) ? 3 : 2;\r\n            if (Math.abs(info.y - info1.y) < charSize * fac) {\r\n                fac = (info.x < info1.x) ? info.name.length() : info1.name.length();\r\n                if (Math.abs(info.x - info1.x) < charSize * fac) {\r\n                    nameInfoBuffer.remove(i);\r\n                    --i;\r\n                    j = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (NameInfo textInfo : nameInfoBuffer) {\r\n        imageBdr.setColor(textInfo.color);\r\n        imageBdr.drawString(textInfo.name, textInfo.x, textInfo.y);\r\n    }\r\n}"
}, {
	"Path": "aima.core.environment.map.ExtendableMap.setPosition",
	"Comment": "defines the position of a location as with respect to an orthogonal\tcoordinate system.",
	"Method": "void setPosition(String loc,double x,double y){\r\n    locationPositions.put(loc, new Point2D(x, y));\r\n}"
}, {
	"Path": "aima.gui.swing.framework.DemoController.update",
	"Comment": "this method is automatically called after the run and step methods have\tfinished. implementations are responsible for displaying status\tinformation in the frame and also for cleaning up the prepared\tenvironment if the simulation was canceled.",
	"Method": "void update(SimulationThread agentThread){\r\n    if (agentThread.isCancelled()) {\r\n        frame.setStatus(\"Task canceled.\");\r\n        isPrepared = false;\r\n    } else if (frame.simulationPaused()) {\r\n        frame.setStatus(\"Task paused.\");\r\n    } else {\r\n        frame.setStatus(\"Task completed.\");\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlansResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.MethodSetting.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetricsEnabled() != null)\r\n        sb.append(\"MetricsEnabled: \").append(getMetricsEnabled()).append(\",\");\r\n    if (getLoggingLevel() != null)\r\n        sb.append(\"LoggingLevel: \").append(getLoggingLevel()).append(\",\");\r\n    if (getDataTraceEnabled() != null)\r\n        sb.append(\"DataTraceEnabled: \").append(getDataTraceEnabled()).append(\",\");\r\n    if (getThrottlingBurstLimit() != null)\r\n        sb.append(\"ThrottlingBurstLimit: \").append(getThrottlingBurstLimit()).append(\",\");\r\n    if (getThrottlingRateLimit() != null)\r\n        sb.append(\"ThrottlingRateLimit: \").append(getThrottlingRateLimit()).append(\",\");\r\n    if (getCachingEnabled() != null)\r\n        sb.append(\"CachingEnabled: \").append(getCachingEnabled()).append(\",\");\r\n    if (getCacheTtlInSeconds() != null)\r\n        sb.append(\"CacheTtlInSeconds: \").append(getCacheTtlInSeconds()).append(\",\");\r\n    if (getCacheDataEncrypted() != null)\r\n        sb.append(\"CacheDataEncrypted: \").append(getCacheDataEncrypted()).append(\",\");\r\n    if (getRequireAuthorizationForCacheControl() != null)\r\n        sb.append(\"RequireAuthorizationForCacheControl: \").append(getRequireAuthorizationForCacheControl()).append(\",\");\r\n    if (getUnauthorizedCacheControlHeaderStrategy() != null)\r\n        sb.append(\"UnauthorizedCacheControlHeaderStrategy: \").append(getUnauthorizedCacheControlHeaderStrategy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.enterStandby",
	"Comment": "moves the specified instances into the standby state.for more information, see temporarily removinginstances from your auto scaling group in the amazon ec2 auto scaling user guide.",
	"Method": "EnterStandbyResult enterStandby(EnterStandbyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeEnterStandby(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateStackRequest.setDeleteStorageConnectors",
	"Comment": "deletes the storage connectors currently enabled for the stack.",
	"Method": "void setDeleteStorageConnectors(Boolean deleteStorageConnectors){\r\n    this.deleteStorageConnectors = deleteStorageConnectors;\r\n}"
}, {
	"Path": "aimax.osm.routing.RouteCalculator.subdivideProblem",
	"Comment": "factory method, responsible for subdividing the overall problem which is\tspecified by a list of marker nodes. it returns arrays of way nodes.\tthe arrays will be used to define problems to be solved one after\tanother. this implementation returns pairs of from and to way nodes.",
	"Method": "List<MapNode[]> subdivideProblem(List<MapNode> markers,OsmMap map,MapWayFilter wayFilter){\r\n    List<MapNode[]> result = new ArrayList();\r\n    MapNode fromNode = map.getNearestWayNode(new Position(markers.get(0)), wayFilter);\r\n    for (int i = 1; i < markers.size(); i++) {\r\n        MapNode toNode = map.getNearestWayNode(new Position(markers.get(i)), wayFilter);\r\n        result.add(new MapNode[] { fromNode, toNode });\r\n        fromNode = toNode;\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.describeImages",
	"Comment": "retrieves a list that describes one or more specified images, if the image names or image arns are provided.otherwise, all images in the account are described.",
	"Method": "DescribeImagesResult describeImages(DescribeImagesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeImages(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeImagePermissionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getSharedImagePermissionsList() != null)\r\n        sb.append(\"SharedImagePermissionsList: \").append(getSharedImagePermissionsList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DescribeVirtualNodeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getVirtualNodeName() != null)\r\n        sb.append(\"VirtualNodeName: \").append(getVirtualNodeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.sortAuthority",
	"Comment": "organize the list of pages according to their descending authority scores",
	"Method": "void sortAuthority(List<Page> result){\r\n    Collections.sort(result, new Comparator<Page>() {\r\n        public int compare(Page p1, Page p2) {\r\n            return p1.hub < p2.hub ? -1 : p1.hub > p2.hub ? 1 : secondaryOrderSort(p1, p2);\r\n        }\r\n        public int secondaryOrderSort(Page p1, Page p2) {\r\n            return p1.getLocation().compareToIgnoreCase(p2.getLocation()) < 1 ? -1 : p1.getLocation().compareToIgnoreCase(p2.getLocation()) > 1 ? 1 : 0;\r\n        }\r\n    });\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.sortAuthority",
	"Comment": "organize the list of pages according to their descending authority scores",
	"Method": "void sortAuthority(List<Page> result){\r\n    return p1.hub < p2.hub ? -1 : p1.hub > p2.hub ? 1 : secondaryOrderSort(p1, p2);\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.sortAuthority",
	"Comment": "organize the list of pages according to their descending authority scores",
	"Method": "void sortAuthority(List<Page> result){\r\n    return p1.getLocation().compareToIgnoreCase(p2.getLocation()) < 1 ? -1 : p1.getLocation().compareToIgnoreCase(p2.getLocation()) > 1 ? 1 : 0;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DescribeScheduledActionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduledActionNames() != null)\r\n        sb.append(\"ScheduledActionNames: \").append(getScheduledActionNames()).append(\",\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.planning.GraphPlanAlgorithm.leveledOff",
	"Comment": "a graph is said to be levelled off if two consecutive levels are identical.",
	"Method": "boolean leveledOff(Hashtable<Integer, List<Literal>> nogoods){\r\n    if (nogoods.size() < 2)\r\n        return false;\r\n    return nogoods.get(nogoods.size() - 1).equals(nogoods.get(nogoods.size() - 2));\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DescribeScalingPoliciesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyNames() != null)\r\n        sb.append(\"PolicyNames: \").append(getPolicyNames()).append(\",\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.removeNearestMarker",
	"Comment": "removes the mark which is the nearest with respect to the given view\tcoordinates.",
	"Method": "void removeNearestMarker(int x,int y){\r\n    List<MapNode> markers = getMap().getMarkers();\r\n    float lat = getTransformer().lat(y);\r\n    float lon = getTransformer().lon(x);\r\n    MapNode marker = new Position(lat, lon).selectNearest(markers, null);\r\n    if (marker != null)\r\n        markers.remove(marker);\r\n    getMap().fireMapDataEvent(new MapEvent(getMap(), MapEvent.Type.MAP_MODIFIED));\r\n}"
}, {
	"Path": "aima.gui.swing.framework.AgentAppController.setFrame",
	"Comment": "gives the controller access to the frame. this is useful to display\tstatus information.",
	"Method": "void setFrame(AgentAppFrame frame){\r\n    this.frame = frame;\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.release",
	"Comment": "release the lock by releasing this and any other stale lock columns",
	"Method": "void release(){\r\n    if (!locksToDelete.isEmpty() || lockColumn != null) {\r\n        MutationBatch m = keyspace.prepareMutationBatch().setConsistencyLevel(consistencyLevel);\r\n        fillReleaseMutation(m, false);\r\n        m.execute();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeAdjustmentTypes",
	"Comment": "describes the policy adjustment types for use with putscalingpolicy.",
	"Method": "DescribeAdjustmentTypesResult describeAdjustmentTypes(DescribeAdjustmentTypesRequest request,DescribeAdjustmentTypesResult describeAdjustmentTypes){\r\n    return describeAdjustmentTypes(new DescribeAdjustmentTypesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.batchGetNamedQuery",
	"Comment": "returns the details of a single named query or a list of up to 50 queries, which you provide as an array of queryid strings. use listnamedqueries to get the list of named query ids. if information could not be retrievedfor a submitted query id, information about the query id submitted is listed underunprocessednamedqueryid. named queries are different from executed queries. usebatchgetqueryexecution to get details about each unique query execution, and listqueryexecutions toget a list of query execution ids.",
	"Method": "BatchGetNamedQueryResult batchGetNamedQuery(BatchGetNamedQueryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchGetNamedQuery(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazonappstreamasync using the current builder configuration.",
	"Method": "AmazonAppStreamAsync build(AwsAsyncClientParams params){\r\n    return new AmazonAppStreamAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutIntegrationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getIntegrationHttpMethod() != null)\r\n        sb.append(\"IntegrationHttpMethod: \").append(getIntegrationHttpMethod()).append(\",\");\r\n    if (getUri() != null)\r\n        sb.append(\"Uri: \").append(getUri()).append(\",\");\r\n    if (getConnectionType() != null)\r\n        sb.append(\"ConnectionType: \").append(getConnectionType()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getCredentials() != null)\r\n        sb.append(\"Credentials: \").append(getCredentials()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestTemplates() != null)\r\n        sb.append(\"RequestTemplates: \").append(getRequestTemplates()).append(\",\");\r\n    if (getPassthroughBehavior() != null)\r\n        sb.append(\"PassthroughBehavior: \").append(getPassthroughBehavior()).append(\",\");\r\n    if (getCacheNamespace() != null)\r\n        sb.append(\"CacheNamespace: \").append(getCacheNamespace()).append(\",\");\r\n    if (getCacheKeyParameters() != null)\r\n        sb.append(\"CacheKeyParameters: \").append(getCacheKeyParameters()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling()).append(\",\");\r\n    if (getTimeoutInMillis() != null)\r\n        sb.append(\"TimeoutInMillis: \").append(getTimeoutInMillis());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.testInvokeAuthorizer",
	"Comment": "simulate the execution of an authorizer in your restapi with headers, parameters, and an incomingrequest body. enable customauthorizers",
	"Method": "TestInvokeAuthorizerResult testInvokeAuthorizer(TestInvokeAuthorizerRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeTestInvokeAuthorizer(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListSmartHomeAppliancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.Tag.compareTo",
	"Comment": "compares this tag to the specified tag. the tag comparison is based on\ta comparison of key and value in that order.",
	"Method": "int compareTo(Tag tag){\r\n    int keyResult;\r\n    keyResult = this.key.compareTo(tag.key);\r\n    if (keyResult != 0) {\r\n        return keyResult;\r\n    }\r\n    return this.value.compareTo(tag.value);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DescribeVirtualNodeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualNode() != null)\r\n        sb.append(\"VirtualNode: \").append(getVirtualNode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateMethodResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getAuthorizationType() != null)\r\n        sb.append(\"AuthorizationType: \").append(getAuthorizationType()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId()).append(\",\");\r\n    if (getApiKeyRequired() != null)\r\n        sb.append(\"ApiKeyRequired: \").append(getApiKeyRequired()).append(\",\");\r\n    if (getRequestValidatorId() != null)\r\n        sb.append(\"RequestValidatorId: \").append(getRequestValidatorId()).append(\",\");\r\n    if (getOperationName() != null)\r\n        sb.append(\"OperationName: \").append(getOperationName()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestModels() != null)\r\n        sb.append(\"RequestModels: \").append(getRequestModels()).append(\",\");\r\n    if (getMethodResponses() != null)\r\n        sb.append(\"MethodResponses: \").append(getMethodResponses()).append(\",\");\r\n    if (getMethodIntegration() != null)\r\n        sb.append(\"MethodIntegration: \").append(getMethodIntegration()).append(\",\");\r\n    if (getAuthorizationScopes() != null)\r\n        sb.append(\"AuthorizationScopes: \").append(getAuthorizationScopes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.detachLoadBalancersAsync",
	"Comment": "simplified method form for invoking the detachloadbalancers operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync(DetachLoadBalancersRequest request,java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync,DetachLoadBalancersRequest request,com.amazonaws.handlers.AsyncHandler<DetachLoadBalancersRequest, DetachLoadBalancersResult> asyncHandler,java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync,java.util.concurrent.Future<DetachLoadBalancersResult> detachLoadBalancersAsync,com.amazonaws.handlers.AsyncHandler<DetachLoadBalancersRequest, DetachLoadBalancersResult> asyncHandler){\r\n    return detachLoadBalancersAsync(new DetachLoadBalancersRequest(), asyncHandler);\r\n}"
}, {
	"Path": "aima.core.learning.neural.NNDataSet.createExamplesFromFile",
	"Comment": "method called by clients to set up data set and make it ready for\tprocessing",
	"Method": "void createExamplesFromFile(String filename){\r\n    createNormalizedDataFromFile(filename);\r\n    setTargetColumns();\r\n    createExamples();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.CompleteLifecycleActionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteModelResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLoadBalancersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.datastructure.TwoKeyHashMap.removeKey",
	"Comment": "removes the mapping for this key pair from this map if present.",
	"Method": "V removeKey(K1 key1,K2 key2){\r\n    return super.remove(new Pair<K1, K2>(key1, key2));\r\n}"
}, {
	"Path": "aima.core.util.math.MixedRadixNumber.decrement",
	"Comment": "decrements the value of the mixed radix number, if the value is greater\tthan zero.",
	"Method": "boolean decrement(){\r\n    if (value > 0) {\r\n        value--;\r\n        recalculate = true;\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.UpdateRouteRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getRouteName() != null)\r\n        sb.append(\"RouteName: \").append(getRouteName()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.viewer.CoordTransformer.adjustTransformation",
	"Comment": "adjusts the transformation with respect to a given world coordinate\tbounding box.",
	"Method": "void adjustTransformation(BoundingBox bb,int viewWidth,int viewHeight){\r\n    if (bb != null) {\r\n        lonCorr = (float) Math.cos((bb.getLatMax() + bb.getLatMin()) / 360.0 * Math.PI);\r\n        float scaleX = 1f;\r\n        float scaleY = 1f;\r\n        if (bb.getLonMax() > bb.getLonMin())\r\n            scaleX = viewWidth / ((bb.getLonMax() - bb.getLonMin()) * lonCorr);\r\n        if (bb.getLatMax() > bb.getLatMin())\r\n            scaleY = viewHeight / (bb.getLatMax() - bb.getLatMin());\r\n        dotsPerDeg = Math.max(scaleX, scaleY);\r\n        originLon = bb.getLonMin();\r\n        originLat = bb.getLatMax();\r\n        originLon += (bb.getLonMax() - lon(viewWidth)) / 2.0;\r\n        originLat += (bb.getLatMin() - lat(viewHeight)) / 2.0;\r\n    } else {\r\n        lonCorr = 1.0f;\r\n        dotsPerDeg = 100;\r\n        originLon = 0;\r\n        originLat = 0;\r\n    }\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.map.MapAgentView.updateTracks",
	"Comment": "updates all tracks with respect to the current agent locations.",
	"Method": "void updateTracks(){\r\n    MapEnvironment mEnv = getMapEnv();\r\n    if (mEnv != null)\r\n        for (Agent a : mEnv.getAgents()) {\r\n            List<String> aTrack = getTrack(a);\r\n            String aLoc = mEnv.getAgentLocation(a);\r\n            if (aTrack == null) {\r\n                aTrack = new ArrayList<String>();\r\n                agentTracks.put(a, aTrack);\r\n            }\r\n            if (aTrack.isEmpty() || !aTrack.get(aTrack.size() - 1).equals(aLoc))\r\n                aTrack.add(aLoc);\r\n        }\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAdjustmentTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAdjustmentTypes() != null)\r\n        sb.append(\"AdjustmentTypes: \").append(getAdjustmentTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateClientCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPemEncodedCertificate() != null)\r\n        sb.append(\"PemEncodedCertificate: \").append(getPemEncodedCertificate()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getExpirationDate() != null)\r\n        sb.append(\"ExpirationDate: \").append(getExpirationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeUserStackAssociationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserStackAssociations() != null)\r\n        sb.append(\"UserStackAssociations: \").append(getUserStackAssociations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.fx.framework.TaskExecutionPaneCtrl.setParamDisable",
	"Comment": "call this only for parameters which do not depend on other parameters!",
	"Method": "void setParamDisable(String paramName,boolean value){\r\n    int paramIdx = Parameter.indexOf(params, paramName);\r\n    paramCombos.get(paramIdx).setDisable(value);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteGatewayResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.VpcLink.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTargetArns() != null)\r\n        sb.append(\"TargetArns: \").append(getTargetArns()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStatusMessage() != null)\r\n        sb.append(\"StatusMessage: \").append(getStatusMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlanResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getApiStages() != null)\r\n        sb.append(\"ApiStages: \").append(getApiStages()).append(\",\");\r\n    if (getThrottle() != null)\r\n        sb.append(\"Throttle: \").append(getThrottle()).append(\",\");\r\n    if (getQuota() != null)\r\n        sb.append(\"Quota: \").append(getQuota()).append(\",\");\r\n    if (getProductCode() != null)\r\n        sb.append(\"ProductCode: \").append(getProductCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.RequestValidator.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValidateRequestBody() != null)\r\n        sb.append(\"ValidateRequestBody: \").append(getValidateRequestBody()).append(\",\");\r\n    if (getValidateRequestParameters() != null)\r\n        sb.append(\"ValidateRequestParameters: \").append(getValidateRequestParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getParentId() != null)\r\n        sb.append(\"ParentId: \").append(getParentId()).append(\",\");\r\n    if (getPathPart() != null)\r\n        sb.append(\"PathPart: \").append(getPathPart()).append(\",\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getResourceMethods() != null)\r\n        sb.append(\"ResourceMethods: \").append(getResourceMethods());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeNotificationConfigurations",
	"Comment": "describes the notification actions associated with the specified auto scaling group.",
	"Method": "DescribeNotificationConfigurationsResult describeNotificationConfigurations(DescribeNotificationConfigurationsRequest request,DescribeNotificationConfigurationsResult describeNotificationConfigurations){\r\n    return describeNotificationConfigurations(new DescribeNotificationConfigurationsRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDeploymentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getApiSummary() != null)\r\n        sb.append(\"ApiSummary: \").append(getApiSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.Settings.isSettingDisplayed",
	"Comment": "checks whether a setting identified by the given key is registered in the gui.",
	"Method": "boolean isSettingDisplayed(String key){\r\n    return order.contains(key);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateGraphqlApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getLogConfig() != null)\r\n        sb.append(\"LogConfig: \").append(getLogConfig()).append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType()).append(\",\");\r\n    if (getUserPoolConfig() != null)\r\n        sb.append(\"UserPoolConfig: \").append(getUserPoolConfig()).append(\",\");\r\n    if (getOpenIDConnectConfig() != null)\r\n        sb.append(\"OpenIDConnectConfig: \").append(getOpenIDConnectConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeploymentCanarySettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPercentTraffic() != null)\r\n        sb.append(\"PercentTraffic: \").append(getPercentTraffic()).append(\",\");\r\n    if (getStageVariableOverrides() != null)\r\n        sb.append(\"StageVariableOverrides: \").append(getStageVariableOverrides()).append(\",\");\r\n    if (getUseStageCache() != null)\r\n        sb.append(\"UseStageCache: \").append(getUseStageCache());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetClientCertificatesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateRequestValidatorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValidateRequestBody() != null)\r\n        sb.append(\"ValidateRequestBody: \").append(getValidateRequestBody()).append(\",\");\r\n    if (getValidateRequestParameters() != null)\r\n        sb.append(\"ValidateRequestParameters: \").append(getValidateRequestParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SendInvitationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.setScreenSizeInInch",
	"Comment": "provides the true size of the screen to the transformer. this is\tnecessary to get correct scale values.",
	"Method": "void setScreenSizeInInch(double inch){\r\n    double width = Toolkit.getDefaultToolkit().getScreenSize().getWidth();\r\n    double height = Toolkit.getDefaultToolkit().getScreenSize().getHeight();\r\n    double dotsPerInch = Math.sqrt(width * width + height * height) / inch;\r\n    getTransformer().setScreenResolution((int) dotsPerInch);\r\n    viewChanged(MapViewEvent.Type.ZOOM);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.UpdateCertificateOptionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getOptions() != null)\r\n        sb.append(\"Options: \").append(getOptions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteUsagePlanKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getKeyId() != null)\r\n        sb.append(\"KeyId: \").append(getKeyId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.HealthCheckPolicy.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHealthyThreshold() != null)\r\n        sb.append(\"HealthyThreshold: \").append(getHealthyThreshold()).append(\",\");\r\n    if (getIntervalMillis() != null)\r\n        sb.append(\"IntervalMillis: \").append(getIntervalMillis()).append(\",\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getPort() != null)\r\n        sb.append(\"Port: \").append(getPort()).append(\",\");\r\n    if (getProtocol() != null)\r\n        sb.append(\"Protocol: \").append(getProtocol()).append(\",\");\r\n    if (getTimeoutMillis() != null)\r\n        sb.append(\"TimeoutMillis: \").append(getTimeoutMillis()).append(\",\");\r\n    if (getUnhealthyThreshold() != null)\r\n        sb.append(\"UnhealthyThreshold: \").append(getUnhealthyThreshold());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutGatewayResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getDefaultResponse() != null)\r\n        sb.append(\"DefaultResponse: \").append(getDefaultResponse());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.attachLoadBalancers",
	"Comment": "attaches one or more classic load balancers to the specified auto scaling group.to attach an application load balancer instead, see attachloadbalancertargetgroups.to describe the load balancers for an auto scaling group, use describeloadbalancers. to detach the loadbalancer from the auto scaling group, use detachloadbalancers.for more information, see attach a load balancerto your auto scaling group in the amazon ec2 auto scaling user guide.",
	"Method": "AttachLoadBalancersResult attachLoadBalancers(AttachLoadBalancersRequest request,AttachLoadBalancersResult attachLoadBalancers){\r\n    return attachLoadBalancers(new AttachLoadBalancersRequest());\r\n}"
}, {
	"Path": "com.netflix.astyanax.entitystore.CompositeColumnEntityMapper.fillMutationBatch",
	"Comment": "iterate through the list and create a column for each element",
	"Method": "void fillMutationBatch(ColumnListMutation<ByteBuffer> clm,Object entity){\r\n    List<?> list = (List<?>) containerField.get(entity);\r\n    if (list != null) {\r\n        for (Object element : list) {\r\n            fillColumnMutation(clm, element);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.LoadBalancerState.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoadBalancerName() != null)\r\n        sb.append(\"LoadBalancerName: \").append(getLoadBalancerName()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.FrequencyCounter.incrementFor",
	"Comment": "increments the count to which the specified key is mapped in this\tfrequency counter, or puts 1 if the map contains no mapping for this key.",
	"Method": "void incrementFor(T key){\r\n    Integer value = counter.get(key);\r\n    if (value == null) {\r\n        counter.put(key, 1);\r\n    } else {\r\n        counter.put(key, value + 1);\r\n    }\r\n    total++;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getExport",
	"Comment": "exports a deployed version of a restapi in a specified format.",
	"Method": "GetExportResult getExport(GetExportRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetExport(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ExtendedKeyUsage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getOID() != null)\r\n        sb.append(\"OID: \").append(getOID());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsappsyncasync using the current builder configuration.",
	"Method": "AWSAppSyncAsync build(AwsAsyncClientParams params){\r\n    return new AWSAppSyncAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateGraphqlApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGraphqlApi() != null)\r\n        sb.append(\"GraphqlApi: \").append(getGraphqlApi());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.EnableMetricsCollectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.CustomRule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSource() != null)\r\n        sb.append(\"Source: \").append(getSource()).append(\",\");\r\n    if (getTarget() != null)\r\n        sb.append(\"Target: \").append(getTarget()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getCondition() != null)\r\n        sb.append(\"Condition: \").append(getCondition());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DescribeRouteResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoute() != null)\r\n        sb.append(\"Route: \").append(getRoute());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.searchContacts",
	"Comment": "searches contacts and lists the ones that meet a set of filter and sort criteria.",
	"Method": "SearchContactsResult searchContacts(SearchContactsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSearchContacts(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.UntagCertificateAuthorityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetConferencePreferenceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPreference() != null)\r\n        sb.append(\"Preference: \").append(getPreference());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDomainNameResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getCertificateName() != null)\r\n        sb.append(\"CertificateName: \").append(getCertificateName()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getCertificateUploadDate() != null)\r\n        sb.append(\"CertificateUploadDate: \").append(getCertificateUploadDate()).append(\",\");\r\n    if (getRegionalDomainName() != null)\r\n        sb.append(\"RegionalDomainName: \").append(getRegionalDomainName()).append(\",\");\r\n    if (getRegionalHostedZoneId() != null)\r\n        sb.append(\"RegionalHostedZoneId: \").append(getRegionalHostedZoneId()).append(\",\");\r\n    if (getRegionalCertificateName() != null)\r\n        sb.append(\"RegionalCertificateName: \").append(getRegionalCertificateName()).append(\",\");\r\n    if (getRegionalCertificateArn() != null)\r\n        sb.append(\"RegionalCertificateArn: \").append(getRegionalCertificateArn()).append(\",\");\r\n    if (getDistributionDomainName() != null)\r\n        sb.append(\"DistributionDomainName: \").append(getDistributionDomainName()).append(\",\");\r\n    if (getDistributionHostedZoneId() != null)\r\n        sb.append(\"DistributionHostedZoneId: \").append(getDistributionHostedZoneId()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteSkillAuthorizationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId()).append(\",\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.data.lexicons.LexiconExamples.buildTrivialLexicon",
	"Comment": "a more restraining lexicon for simple testing and demonstration.",
	"Method": "Lexicon buildTrivialLexicon(){\r\n    Lexicon l = new Lexicon();\r\n    l.addLexWords(\"ARTICLE\", \"the\", \"0.50\", \"a\", \"0.50\");\r\n    l.addLexWords(\"NOUN\", \"man\", \"0.20\", \"woman\", \"0.20\", \"table\", \"0.20\", \"shoelace\", \"0.20\", \"saw\", \"0.20\");\r\n    l.addLexWords(\"PRONOUN\", \"i\", \"0.40\", \"you\", \"0.40\", \"it\", \"0.20\");\r\n    l.addLexWords(\"VERB\", \"saw\", \"0.30\", \"liked\", \"0.30\", \"feel\", \"0.40\");\r\n    l.addLexWords(\"ADVERB\", \"happily\", \"0.30\", \"sadly\", \"0.20\", \"morosely\", \"0.50\");\r\n    return l;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateImageBuilderStreamingURLRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValidity() != null)\r\n        sb.append(\"Validity: \").append(getValidity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.CreateDomainAssociationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainAssociation() != null)\r\n        sb.append(\"DomainAssociation: \").append(getDomainAssociation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeTagsAsync",
	"Comment": "simplified method form for invoking the describetags operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync(DescribeTagsRequest request,java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync,DescribeTagsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeTagsRequest, DescribeTagsResult> asyncHandler,java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync,java.util.concurrent.Future<DescribeTagsResult> describeTagsAsync,com.amazonaws.handlers.AsyncHandler<DescribeTagsRequest, DescribeTagsResult> asyncHandler){\r\n    return describeTagsAsync(new DescribeTagsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "aima.core.learning.reinforcement.agent.PassiveADPAgent.execute",
	"Comment": "passive reinforcement learning based on adaptive dynamic programming.",
	"Method": "A execute(PerceptStateReward<S> percept){\r\n    S sDelta = percept.state();\r\n    double rDelta = percept.reward();\r\n    if (!U.containsKey(sDelta)) {\r\n        U.put(sDelta, rDelta);\r\n        R.put(sDelta, rDelta);\r\n    }\r\n    if (null != s) {\r\n        Pair<S, A> sa = new Pair<S, A>(s, a);\r\n        Nsa.incrementFor(sa);\r\n        NsDelta_sa.incrementFor(new Pair<S, Pair<S, A>>(sDelta, sa));\r\n        for (S t : mdp.states()) {\r\n            Pair<S, Pair<S, A>> t_sa = new Pair<S, Pair<S, A>>(t, sa);\r\n            if (0 != NsDelta_sa.getCount(t_sa)) {\r\n                P.put(t_sa, NsDelta_sa.getCount(t_sa).doubleValue() / Nsa.getCount(sa).doubleValue());\r\n            }\r\n        }\r\n    }\r\n    U = policyEvaluation.evaluate(pi, U, mdp);\r\n    if (isTerminal(sDelta)) {\r\n        s = null;\r\n        a = null;\r\n    } else {\r\n        s = sDelta;\r\n        a = pi.get(sDelta);\r\n    }\r\n    return a;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.CustomizedMetricSpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetricName() != null)\r\n        sb.append(\"MetricName: \").append(getMetricName()).append(\",\");\r\n    if (getNamespace() != null)\r\n        sb.append(\"Namespace: \").append(getNamespace()).append(\",\");\r\n    if (getDimensions() != null)\r\n        sb.append(\"Dimensions: \").append(getDimensions()).append(\",\");\r\n    if (getStatistic() != null)\r\n        sb.append(\"Statistic: \").append(getStatistic()).append(\",\");\r\n    if (getUnit() != null)\r\n        sb.append(\"Unit: \").append(getUnit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DetachInstancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceIds() != null)\r\n        sb.append(\"InstanceIds: \").append(getInstanceIds()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getShouldDecrementDesiredCapacity() != null)\r\n        sb.append(\"ShouldDecrementDesiredCapacity: \").append(getShouldDecrementDesiredCapacity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.WayElementProcessor.getChild",
	"Comment": "retrieves the appropriate child element processor for the newly\tencountered nested element.",
	"Method": "ElementProcessor getChild(String uri,String localName,String qName){\r\n    if (!skipElement) {\r\n        if (ELEMENT_NAME_NODE.equals(qName))\r\n            return wayNodeElementProcessor;\r\n        else if (ELEMENT_NAME_TAG.equals(qName))\r\n            return tagElementProcessor;\r\n    }\r\n    return super.getChild(uri, localName, qName);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.waiters.AmazonAppStreamWaiters.fleetStopped",
	"Comment": "builds a fleetstopped waiter by using custom parameters waiterparameters and other parameters defined in thewaiters specification, and then polls until it determines whether the resource entered the desired state or not,where polling criteria is bound by either default polling strategy or custom polling strategy.",
	"Method": "Waiter<DescribeFleetsRequest> fleetStopped(){\r\n    return new WaiterBuilder<DescribeFleetsRequest, DescribeFleetsResult>().withSdkFunction(new DescribeFleetsFunction(client)).withAcceptors(new FleetStopped.IsINACTIVEMatcher(), new FleetStopped.IsPENDING_ACTIVATEMatcher(), new FleetStopped.IsACTIVEMatcher()).withDefaultPollingStrategy(new PollingStrategy(new MaxAttemptsRetryStrategy(40), new FixedDelayStrategy(30))).withExecutorService(executorService).build();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.searchSkillGroups",
	"Comment": "searches skill groups and lists the ones that meet a set of filter and sort criteria.",
	"Method": "SearchSkillGroupsResult searchSkillGroups(SearchSkillGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSearchSkillGroups(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.AWSAmplifyClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.FrequencyCounter.getCount",
	"Comment": "returns the count to which the specified key is mapped in this frequency\tcounter, or 0 if the map contains no mapping for this key.",
	"Method": "Integer getCount(T key){\r\n    Integer value = counter.get(key);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteFleetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.BusinessReportRecurrence.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStartDate() != null)\r\n        sb.append(\"StartDate: \").append(getStartDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoom() != null)\r\n        sb.append(\"Room: \").append(getRoom());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.putGatewayResponse",
	"Comment": "creates a customization of a gatewayresponse of a specified response type and status code on the givenrestapi.",
	"Method": "PutGatewayResponseResult putGatewayResponse(PutGatewayResponseRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutGatewayResponse(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DisableUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ImportApiKeysRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat()).append(\",\");\r\n    if (getFailOnWarnings() != null)\r\n        sb.append(\"FailOnWarnings: \").append(getFailOnWarnings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateFunctionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getFunctionId() != null)\r\n        sb.append(\"FunctionId: \").append(getFunctionId()).append(\",\");\r\n    if (getDataSourceName() != null)\r\n        sb.append(\"DataSourceName: \").append(getDataSourceName()).append(\",\");\r\n    if (getRequestMappingTemplate() != null)\r\n        sb.append(\"RequestMappingTemplate: \").append(getRequestMappingTemplate()).append(\",\");\r\n    if (getResponseMappingTemplate() != null)\r\n        sb.append(\"ResponseMappingTemplate: \").append(getResponseMappingTemplate()).append(\",\");\r\n    if (getFunctionVersion() != null)\r\n        sb.append(\"FunctionVersion: \").append(getFunctionVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultEntityFinder.find",
	"Comment": "searches for entities which comply to the current search specification\tand stores them as results.",
	"Method": "void find(boolean findMore){\r\n    BestMatchFinder bmf = new BestMatchFinder(pattern);\r\n    List<MapEntity> results = getResults();\r\n    BoundingBox bb = new BoundingBox(position, nextRadius);\r\n    if (!results.isEmpty())\r\n        bmf.checkMatchQuality(results.get(0));\r\n    if (mode.equals(Mode.ENTITY) || mode.equals(Mode.NODE)) {\r\n        for (MapNode node : getStorage().getPois(bb)) {\r\n            int match = bmf.checkMatchQuality(node);\r\n            if (match >= 0) {\r\n                if (match > 0) {\r\n                    results.clear();\r\n                    bmf.useAsReference(node);\r\n                }\r\n                if (position.insertInAscendingDistanceOrder(results, node))\r\n                    if (results.size() > 100)\r\n                        results.remove(99);\r\n            }\r\n        }\r\n    }\r\n    if (mode.equals(Mode.ENTITY) || mode.equals(Mode.WAY)) {\r\n        for (MapWay way : getStorage().getWays(bb)) {\r\n            int match = bmf.checkMatchQuality(way);\r\n            if (match >= 0) {\r\n                if (match > 0) {\r\n                    results.clear();\r\n                    bmf.useAsReference(way);\r\n                }\r\n                if (position.insertInAscendingDistanceOrder(results, way))\r\n                    if (results.size() > 100)\r\n                        results.remove(99);\r\n            }\r\n        }\r\n    }\r\n    if (mode.equals(Mode.ADDRESS)) {\r\n        List<MapEntity> iResults = getIntermediateResults();\r\n        StringTokenizer tokenizer = new StringTokenizer(pattern, \",\");\r\n        String placeName = null;\r\n        String wayName = null;\r\n        if (tokenizer.hasMoreElements())\r\n            placeName = tokenizer.nextToken();\r\n        if (tokenizer.hasMoreElements())\r\n            wayName = tokenizer.nextToken().trim();\r\n        if (placeName != null && !findMore) {\r\n            for (MapNode place : getStorage().getPlaces(placeName)) {\r\n                position.insertInAscendingDistanceOrder(iResults, place);\r\n                if (iResults.size() > 100)\r\n                    iResults.remove(99);\r\n            }\r\n            nextRadius = -1;\r\n        }\r\n        if (iResults.size() == 1 && wayName != null) {\r\n            MapNode place = (MapNode) iResults.get(0);\r\n            findWay(wayName, new Position(place.getLat(), place.getLon()), null);\r\n        }\r\n    } else {\r\n        nextRadius *= 2;\r\n        if (results.isEmpty() && getIntermediateResults().isEmpty() && nextRadius <= getMaxRadius())\r\n            find(true);\r\n    }\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.AbstractHostPartitionConnectionPool.removeHost",
	"Comment": "remove host from the system. shuts down pool associated with the host and rebuilds partition map",
	"Method": "boolean removeHost(Host host,boolean refresh){\r\n    HostConnectionPool<CL> pool = hosts.remove(host);\r\n    if (pool != null) {\r\n        topology.removePool(pool);\r\n        rebuildPartitions();\r\n        monitor.onHostRemoved(host);\r\n        pool.shutdown();\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.SubDomain.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubDomainSetting() != null)\r\n        sb.append(\"SubDomainSetting: \").append(getSubDomainSetting()).append(\",\");\r\n    if (getVerified() != null)\r\n        sb.append(\"Verified: \").append(getVerified()).append(\",\");\r\n    if (getDnsRecord() != null)\r\n        sb.append(\"DnsRecord: \").append(getDnsRecord());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.waiters.AmazonAppStreamWaiters.fleetStarted",
	"Comment": "builds a fleetstarted waiter by using custom parameters waiterparameters and other parameters defined in thewaiters specification, and then polls until it determines whether the resource entered the desired state or not,where polling criteria is bound by either default polling strategy or custom polling strategy.",
	"Method": "Waiter<DescribeFleetsRequest> fleetStarted(){\r\n    return new WaiterBuilder<DescribeFleetsRequest, DescribeFleetsResult>().withSdkFunction(new DescribeFleetsFunction(client)).withAcceptors(new FleetStarted.IsACTIVEMatcher(), new FleetStarted.IsPENDING_DEACTIVATEMatcher(), new FleetStarted.IsINACTIVEMatcher()).withDefaultPollingStrategy(new PollingStrategy(new MaxAttemptsRetryStrategy(40), new FixedDelayStrategy(30))).withExecutorService(executorService).build();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getDomainName",
	"Comment": "represents a domain name that is contained in a simpler, more intuitive url that can be called.",
	"Method": "GetDomainNameResult getDomainName(GetDomainNameRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetDomainName(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.UpdateVirtualNodeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getVirtualNodeName() != null)\r\n        sb.append(\"VirtualNodeName: \").append(getVirtualNodeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.EnableMetricsCollectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getMetrics() != null)\r\n        sb.append(\"Metrics: \").append(getMetrics()).append(\",\");\r\n    if (getGranularity() != null)\r\n        sb.append(\"Granularity: \").append(getGranularity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeScalingProcessTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProcesses() != null)\r\n        sb.append(\"Processes: \").append(getProcesses());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.CartesianPlot2D.isPointInsideBorderShape",
	"Comment": "checks whether the given point is on any of the shapes of the plot.",
	"Method": "boolean isPointInsideBorderShape(Point2D point){\r\n    for (int i = 0; i < shapes.size(); i++) {\r\n        if (boundaries.get(i).isInsideBorder(point)) {\r\n            if (shapes.get(i).isInsideBorder(point)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutMethodRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getAuthorizationType() != null)\r\n        sb.append(\"AuthorizationType: \").append(getAuthorizationType()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId()).append(\",\");\r\n    if (getApiKeyRequired() != null)\r\n        sb.append(\"ApiKeyRequired: \").append(getApiKeyRequired()).append(\",\");\r\n    if (getOperationName() != null)\r\n        sb.append(\"OperationName: \").append(getOperationName()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestModels() != null)\r\n        sb.append(\"RequestModels: \").append(getRequestModels()).append(\",\");\r\n    if (getRequestValidatorId() != null)\r\n        sb.append(\"RequestValidatorId: \").append(getRequestValidatorId()).append(\",\");\r\n    if (getAuthorizationScopes() != null)\r\n        sb.append(\"AuthorizationScopes: \").append(getAuthorizationScopes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.UpdateVirtualNodeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualNode() != null)\r\n        sb.append(\"VirtualNode: \").append(getVirtualNode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.example.DynamicBayesNetExampleFactory.getUmbrellaWorldNetwork",
	"Comment": "return a dynamic bayesian network of the umbrella world network.",
	"Method": "DynamicBayesianNetwork getUmbrellaWorldNetwork(){\r\n    FiniteNode prior_rain_tm1 = new FullCPTNode(ExampleRV.RAIN_tm1_RV, new double[] { 0.5, 0.5 });\r\n    BayesNet priorNetwork = new BayesNet(prior_rain_tm1);\r\n    FiniteNode rain_tm1 = new FullCPTNode(ExampleRV.RAIN_tm1_RV, new double[] { 0.5, 0.5 });\r\n    FiniteNode rain_t = new // R_t-1 = false, R_t = false\r\n    FullCPTNode(// R_t-1 = false, R_t = false\r\n    ExampleRV.RAIN_t_RV, new double[] { 0.7, 0.3, 0.3, 0.7 }, rain_tm1);\r\n    @SuppressWarnings(\"unused\")\r\n    FiniteNode umbrealla_t = new // R_t = false, U_t = false\r\n    FullCPTNode(// R_t = false, U_t = false\r\n    ExampleRV.UMBREALLA_t_RV, new double[] { 0.9, 0.1, 0.2, 0.8 }, rain_t);\r\n    Map<RandomVariable, RandomVariable> X_0_to_X_1 = new HashMap<RandomVariable, RandomVariable>();\r\n    X_0_to_X_1.put(ExampleRV.RAIN_tm1_RV, ExampleRV.RAIN_t_RV);\r\n    Set<RandomVariable> E_1 = new HashSet<RandomVariable>();\r\n    E_1.add(ExampleRV.UMBREALLA_t_RV);\r\n    return new DynamicBayesNet(priorNetwork, X_0_to_X_1, E_1, rain_tm1);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.SetInstanceProtectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceIds() != null)\r\n        sb.append(\"InstanceIds: \").append(getInstanceIds()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getProtectedFromScaleIn() != null)\r\n        sb.append(\"ProtectedFromScaleIn: \").append(getProtectedFromScaleIn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.example.MDPFactory.createActionsFunctionForFigure17_1",
	"Comment": "returns the allowed actions from a specified cell within the cell world\tdescribed in fig 17.1.",
	"Method": "ActionsFunction<Cell<Double>, CellWorldAction> createActionsFunctionForFigure17_1(CellWorld<Double> cw){\r\n    final Set<Cell<Double>> terminals = new HashSet<Cell<Double>>();\r\n    terminals.add(cw.getCellAt(4, 3));\r\n    terminals.add(cw.getCellAt(4, 2));\r\n    ActionsFunction<Cell<Double>, CellWorldAction> af = new ActionsFunction<Cell<Double>, CellWorldAction>() {\r\n        @Override\r\n        public Set<CellWorldAction> actions(Cell<Double> s) {\r\n            if (terminals.contains(s)) {\r\n                return Collections.emptySet();\r\n            }\r\n            return CellWorldAction.actions();\r\n        }\r\n    };\r\n    return af;\r\n}"
}, {
	"Path": "aima.core.probability.example.MDPFactory.createActionsFunctionForFigure17_1",
	"Comment": "returns the allowed actions from a specified cell within the cell world\tdescribed in fig 17.1.",
	"Method": "ActionsFunction<Cell<Double>, CellWorldAction> createActionsFunctionForFigure17_1(CellWorld<Double> cw){\r\n    if (terminals.contains(s)) {\r\n        return Collections.emptySet();\r\n    }\r\n    return CellWorldAction.actions();\r\n}"
}, {
	"Path": "aima.core.search.csp.CSP.copyDomains",
	"Comment": "returns a copy which contains a copy of the domains list and is in allother aspects a flat copy of this.",
	"Method": "CSP<VAR, VAL> copyDomains(){\r\n    CSP<VAR, VAL> result;\r\n    try {\r\n        result = (CSP<VAR, VAL>) clone();\r\n        result.domains = new ArrayList(domains.size());\r\n        result.domains.addAll(domains);\r\n    } catch (CloneNotSupportedException e) {\r\n        throw new UnsupportedOperationException(\"Could not copy domains.\");\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.Model.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.SVGGroupParser.applyTransformEnd",
	"Comment": "sets the current transform matrix to the matrix of the underlying element when leaving an element.\tmanages the transformation stack.",
	"Method": "void applyTransformEnd(){\r\n    currentMatrix = transformations.pop();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.RecordLifecycleActionHeartbeatRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHookName() != null)\r\n        sb.append(\"LifecycleHookName: \").append(getLifecycleHookName()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLifecycleActionToken() != null)\r\n        sb.append(\"LifecycleActionToken: \").append(getLifecycleActionToken()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DomainJoinInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryName() != null)\r\n        sb.append(\"DirectoryName: \").append(getDirectoryName()).append(\",\");\r\n    if (getOrganizationalUnitDistinguishedName() != null)\r\n        sb.append(\"OrganizationalUnitDistinguishedName: \").append(getOrganizationalUnitDistinguishedName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.WayElementProcessor.processTag",
	"Comment": "this is called by child element processors when a tag object is\tencountered.",
	"Method": "void processTag(Tag tag){\r\n    String key = tag.getKey();\r\n    String value = tag.getValue();\r\n    if (key.equals(\"name\")) {\r\n        wayName = value;\r\n    } else {\r\n        EntityAttribute att = EntityAttributeManager.instance().intern(new EntityAttribute(key, value));\r\n        if (att != null)\r\n            wayAttributes.add(att);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteSkillAuthorizationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.neural.NNDataSet.refreshDataset",
	"Comment": "refreshes the presentlyprocessed dataset so it can be used for a new\tepoch of training.",
	"Method": "void refreshDataset(){\r\n    presentlyProcessed = new ArrayList<NNExample>();\r\n    for (NNExample e : dataset) {\r\n        presentlyProcessed.add(e.copyExample());\r\n    }\r\n}"
}, {
	"Path": "aima.core.search.csp.FlexibleBacktrackingSolver.selectUnassignedVariable",
	"Comment": "primitive operation, selecting a not yet assigned variable.",
	"Method": "VAR selectUnassignedVariable(CSP<VAR, VAL> csp,Assignment<VAR, VAL> assignment){\r\n    List<VAR> vars = csp.getVariables().stream().filter((v) -> !assignment.contains(v)).collect(Collectors.toList());\r\n    if (varSelectionStrategy != null)\r\n        vars = varSelectionStrategy.apply(csp, vars);\r\n    return vars.get(0);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteIntegrationResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTypes() != null)\r\n        sb.append(\"Types: \").append(getTypes()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.agent.NondeterministicSearchAgent.makePlan",
	"Comment": "computes a contingency plan for the given problem and prepares plan execution.",
	"Method": "void makePlan(NondeterministicProblem<S, A> problem){\r\n    this.problem = problem;\r\n    setAlive(true);\r\n    AndOrSearch<S, A> andOrSearch = new AndOrSearch();\r\n    Optional<Plan<S, A>> plan = andOrSearch.search(problem);\r\n    contingencyPlan = plan.isPresent() ? plan.get() : null;\r\n    currStep = -1;\r\n    if (notifier != null)\r\n        notifier.notifyViews(\"Contingency plan: \" + contingencyPlan);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.GetQueryResultsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionId() != null)\r\n        sb.append(\"QueryExecutionId: \").append(getQueryExecutionId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetConferencePreferenceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.AWSAmplifyAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.Integration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getUri() != null)\r\n        sb.append(\"Uri: \").append(getUri()).append(\",\");\r\n    if (getConnectionType() != null)\r\n        sb.append(\"ConnectionType: \").append(getConnectionType()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getCredentials() != null)\r\n        sb.append(\"Credentials: \").append(getCredentials()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestTemplates() != null)\r\n        sb.append(\"RequestTemplates: \").append(getRequestTemplates()).append(\",\");\r\n    if (getPassthroughBehavior() != null)\r\n        sb.append(\"PassthroughBehavior: \").append(getPassthroughBehavior()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling()).append(\",\");\r\n    if (getTimeoutInMillis() != null)\r\n        sb.append(\"TimeoutInMillis: \").append(getTimeoutInMillis()).append(\",\");\r\n    if (getCacheNamespace() != null)\r\n        sb.append(\"CacheNamespace: \").append(getCacheNamespace()).append(\",\");\r\n    if (getCacheKeyParameters() != null)\r\n        sb.append(\"CacheKeyParameters: \").append(getCacheKeyParameters()).append(\",\");\r\n    if (getIntegrationResponses() != null)\r\n        sb.append(\"IntegrationResponses: \").append(getIntegrationResponses());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AssociateSkillWithSkillGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CopyImageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceImageName() != null)\r\n        sb.append(\"SourceImageName: \").append(getSourceImageName()).append(\",\");\r\n    if (getDestinationImageName() != null)\r\n        sb.append(\"DestinationImageName: \").append(getDestinationImageName()).append(\",\");\r\n    if (getDestinationRegion() != null)\r\n        sb.append(\"DestinationRegion: \").append(getDestinationRegion()).append(\",\");\r\n    if (getDestinationImageDescription() != null)\r\n        sb.append(\"DestinationImageDescription: \").append(getDestinationImageDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteMethodResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.untagResource",
	"Comment": "disassociates one or more specified tags from the specified appstream 2.0 resource.to list the current tags for your resources, use listtagsforresource.for more information about tags, see tagging your resourcesin the amazon appstream 2.0 developer guide.",
	"Method": "UntagResourceResult untagResource(UntagResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUntagResource(request);\r\n}"
}, {
	"Path": "aima.core.logic.propositional.inference.PLFCEntails.initializeIndex",
	"Comment": "clauses in kb while inferred will contain all the proposition symbols.",
	"Method": "Map<PropositionSymbol, Set<Clause>> initializeIndex(Map<Clause, Integer> count,Map<PropositionSymbol, Boolean> inferred){\r\n    Map<PropositionSymbol, Set<Clause>> pToClausesWithPInPremise = new HashMap<PropositionSymbol, Set<Clause>>();\r\n    for (PropositionSymbol p : inferred.keySet()) {\r\n        Set<Clause> clausesWithPInPremise = new HashSet<Clause>();\r\n        for (Clause c : count.keySet()) {\r\n            if (c.getNegativeSymbols().contains(p)) {\r\n                clausesWithPInPremise.add(c);\r\n            }\r\n        }\r\n        pToClausesWithPInPremise.put(p, clausesWithPInPremise);\r\n    }\r\n    return pToClausesWithPInPremise;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.BusinessReportS3Location.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPath() != null)\r\n        sb.append(\"Path: \").append(getPath()).append(\",\");\r\n    if (getBucketName() != null)\r\n        sb.append(\"BucketName: \").append(getBucketName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeviceStatusInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceStatusDetails() != null)\r\n        sb.append(\"DeviceStatusDetails: \").append(getDeviceStatusDetails()).append(\",\");\r\n    if (getConnectionStatus() != null)\r\n        sb.append(\"ConnectionStatus: \").append(getConnectionStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DeleteScheduledActionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.FlushStageCacheResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.PutSkillAuthorizationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.learners.DecisionListLearner.train",
	"Comment": "induces the decision list from the specified set of examples",
	"Method": "void train(DataSet ds){\r\n    this.decisionList = decisionListLearning(ds);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.AccessLogSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat()).append(\",\");\r\n    if (getDestinationArn() != null)\r\n        sb.append(\"DestinationArn: \").append(getDestinationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.ImportCertificateAuthorityCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteNotificationConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ListAssociatedFleetsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStackName() != null)\r\n        sb.append(\"StackName: \").append(getStackName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateSkillGroupFromRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateFleetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFleet() != null)\r\n        sb.append(\"Fleet: \").append(getFleet());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutNotificationConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Device.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getDeviceSerialNumber() != null)\r\n        sb.append(\"DeviceSerialNumber: \").append(getDeviceSerialNumber()).append(\",\");\r\n    if (getDeviceType() != null)\r\n        sb.append(\"DeviceType: \").append(getDeviceType()).append(\",\");\r\n    if (getDeviceName() != null)\r\n        sb.append(\"DeviceName: \").append(getDeviceName()).append(\",\");\r\n    if (getSoftwareVersion() != null)\r\n        sb.append(\"SoftwareVersion: \").append(getSoftwareVersion()).append(\",\");\r\n    if (getMacAddress() != null)\r\n        sb.append(\"MacAddress: \").append(getMacAddress()).append(\",\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn()).append(\",\");\r\n    if (getDeviceStatus() != null)\r\n        sb.append(\"DeviceStatus: \").append(getDeviceStatus()).append(\",\");\r\n    if (getDeviceStatusInfo() != null)\r\n        sb.append(\"DeviceStatusInfo: \").append(getDeviceStatusInfo());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutLifecycleHookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHookName() != null)\r\n        sb.append(\"LifecycleHookName: \").append(getLifecycleHookName()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLifecycleTransition() != null)\r\n        sb.append(\"LifecycleTransition: \").append(getLifecycleTransition()).append(\",\");\r\n    if (getRoleARN() != null)\r\n        sb.append(\"RoleARN: \").append(getRoleARN()).append(\",\");\r\n    if (getNotificationTargetARN() != null)\r\n        sb.append(\"NotificationTargetARN: \").append(getNotificationTargetARN()).append(\",\");\r\n    if (getNotificationMetadata() != null)\r\n        sb.append(\"NotificationMetadata: \").append(getNotificationMetadata()).append(\",\");\r\n    if (getHeartbeatTimeout() != null)\r\n        sb.append(\"HeartbeatTimeout: \").append(getHeartbeatTimeout()).append(\",\");\r\n    if (getDefaultResult() != null)\r\n        sb.append(\"DefaultResult: \").append(getDefaultResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.OnlineAgentOsmApp.loadMap",
	"Comment": "loads a map of the city of ulm, germany. override to change the map.",
	"Method": "void loadMap(){\r\n    mapPaneCtrl.loadMap(DataResource.getUlmFileResource());\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteBasePathMappingRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DeleteVirtualRouterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.OnlineAgentOsmApp.initialize",
	"Comment": "is called after each parameter selection change. this implementation\tprepares the map for different kinds of vehicles and clears the currently\tdisplayed track.",
	"Method": "void initialize(){\r\n    map = new MapAdapter(mapPaneCtrl.getMap());\r\n    switch(simPaneCtrl.getParamValueIndex(PARAM_WAY_SELECTION)) {\r\n        case 0:\r\n            map.setMapWayFilter(MapWayAttFilter.createAnyWayFilter());\r\n            map.ignoreOneways(true);\r\n            break;\r\n        case 1:\r\n            map.setMapWayFilter(MapWayAttFilter.createCarWayFilter());\r\n            map.ignoreOneways(false);\r\n            break;\r\n        case 2:\r\n            map.setMapWayFilter(MapWayAttFilter.createBicycleWayFilter());\r\n            map.ignoreOneways(false);\r\n            break;\r\n    }\r\n    map.getOsmMap().clearTrack(TRACK_NAME);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeUsersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeScalingActivities",
	"Comment": "describes one or more scaling activities for the specified auto scaling group.",
	"Method": "DescribeScalingActivitiesResult describeScalingActivities(DescribeScalingActivitiesRequest request,DescribeScalingActivitiesResult describeScalingActivities){\r\n    return describeScalingActivities(new DescribeScalingActivitiesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeLoadBalancerTargetGroups",
	"Comment": "describes the target groups for the specified auto scaling group.",
	"Method": "DescribeLoadBalancerTargetGroupsResult describeLoadBalancerTargetGroups(DescribeLoadBalancerTargetGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLoadBalancerTargetGroups(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateTypeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RoutePlannerOsmApp.updateEnabledState",
	"Comment": "enables the calculate button if at least two markers are set.",
	"Method": "void updateEnabledState(){\r\n    calcBtn.setDisable(mapPaneCtrl.getMap().getMarkers().size() < 2);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ListApiKeysResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiKeys() != null)\r\n        sb.append(\"ApiKeys: \").append(getApiKeys()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.sendInvitation",
	"Comment": "sends an enrollment invitation email with a url to a user. the url is valid for 72 hours or until you call thisoperation again, whichever comes first.",
	"Method": "SendInvitationResult sendInvitation(SendInvitationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSendInvitation(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateConferenceProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DetachLoadBalancerTargetGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getTargetGroupARNs() != null)\r\n        sb.append(\"TargetGroupARNs: \").append(getTargetGroupARNs());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetRestApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings()).append(\",\");\r\n    if (getBinaryMediaTypes() != null)\r\n        sb.append(\"BinaryMediaTypes: \").append(getBinaryMediaTypes()).append(\",\");\r\n    if (getMinimumCompressionSize() != null)\r\n        sb.append(\"MinimumCompressionSize: \").append(getMinimumCompressionSize()).append(\",\");\r\n    if (getApiKeySource() != null)\r\n        sb.append(\"ApiKeySource: \").append(getApiKeySource()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration()).append(\",\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DescribeMeshResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMesh() != null)\r\n        sb.append(\"Mesh: \").append(getMesh());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetApiKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiKey() != null)\r\n        sb.append(\"ApiKey: \").append(getApiKey()).append(\",\");\r\n    if (getIncludeValue() != null)\r\n        sb.append(\"IncludeValue: \").append(getIncludeValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.environment.connectfour.ConnectFourGame.getPlayerNum",
	"Comment": "returns the player number corresponding to the specified player. for\tefficiency reasons, connectfourstates use numbers instead of\tstrings to identify players.",
	"Method": "int getPlayerNum(String player){\r\n    for (int i = 0; i < players.length; i++) if (Objects.equals(players[i], player))\r\n        return i + 1;\r\n    throw new IllegalArgumentException(\"Wrong player number.\");\r\n}"
}, {
	"Path": "aima.test.core.unit.search.nondeterministic.AndOrSearchTest.setUp",
	"Comment": "create the vacuum world with the classes defined in this file.",
	"Method": "void setUp(){\r\n    agent = new NondeterministicSearchAgent(percept -> (VacuumEnvironmentState) percept);\r\n    world = new NondeterministicVacuumEnvironment(LocationState.Dirty, LocationState.Dirty);\r\n    world.addAgent(agent, LOCATION_A);\r\n    NondeterministicProblem<VacuumEnvironmentState, Action> problem = new NondeterministicProblem((VacuumEnvironmentState) world.getCurrentState(), VacuumWorldFunctions::getActions, VacuumWorldFunctions.createResultsFunction(agent), VacuumWorldFunctions::testGoal, (s, a, sPrimed) -> 1.0);\r\n    agent.makePlan(problem);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetVpcLinkResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTargetArns() != null)\r\n        sb.append(\"TargetArns: \").append(getTargetArns()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStatusMessage() != null)\r\n        sb.append(\"StatusMessage: \").append(getStatusMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.InstancesDistribution.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOnDemandAllocationStrategy() != null)\r\n        sb.append(\"OnDemandAllocationStrategy: \").append(getOnDemandAllocationStrategy()).append(\",\");\r\n    if (getOnDemandBaseCapacity() != null)\r\n        sb.append(\"OnDemandBaseCapacity: \").append(getOnDemandBaseCapacity()).append(\",\");\r\n    if (getOnDemandPercentageAboveBaseCapacity() != null)\r\n        sb.append(\"OnDemandPercentageAboveBaseCapacity: \").append(getOnDemandPercentageAboveBaseCapacity()).append(\",\");\r\n    if (getSpotAllocationStrategy() != null)\r\n        sb.append(\"SpotAllocationStrategy: \").append(getSpotAllocationStrategy()).append(\",\");\r\n    if (getSpotInstancePools() != null)\r\n        sb.append(\"SpotInstancePools: \").append(getSpotInstancePools()).append(\",\");\r\n    if (getSpotMaxPrice() != null)\r\n        sb.append(\"SpotMaxPrice: \").append(getSpotMaxPrice());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.learning.reinforcement.example.CellWorldPercept.setCell",
	"Comment": "set the cell within the environment that the percept refers to.",
	"Method": "void setCell(Cell<Double> cell){\r\n    this.cell = cell;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.CustomizedMetricSpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetricName() != null)\r\n        sb.append(\"MetricName: \").append(getMetricName()).append(\",\");\r\n    if (getNamespace() != null)\r\n        sb.append(\"Namespace: \").append(getNamespace()).append(\",\");\r\n    if (getDimensions() != null)\r\n        sb.append(\"Dimensions: \").append(getDimensions()).append(\",\");\r\n    if (getStatistic() != null)\r\n        sb.append(\"Statistic: \").append(getStatistic()).append(\",\");\r\n    if (getUnit() != null)\r\n        sb.append(\"Unit: \").append(getUnit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.TagCertificateAuthorityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.createVirtualRouter",
	"Comment": "creates a new virtual router within a service mesh.virtual routers handle traffic for one or more service names within your mesh. after you create your virtualrouter, create and associate routes for your virtual router that direct incoming requests to different virtualnodes.",
	"Method": "CreateVirtualRouterResult createVirtualRouter(CreateVirtualRouterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateVirtualRouter(request);\r\n}"
}, {
	"Path": "aima.core.logic.fol.CNFConverter.convertToCNF",
	"Comment": "returns the specified sentence as a list of clauses, where each clause is\ta disjunction of literals.",
	"Method": "CNF convertToCNF(Sentence aSentence){\r\n    Sentence implicationsOut = (Sentence) aSentence.accept(new ImplicationsOut(), null);\r\n    Sentence negationsIn = (Sentence) implicationsOut.accept(new NegationsIn(), null);\r\n    Sentence saQuantifiers = (Sentence) negationsIn.accept(new StandardizeQuantiferVariables(substVisitor), new LinkedHashSet<Variable>());\r\n    Sentence andsAndOrs = (Sentence) saQuantifiers.accept(new RemoveQuantifiers(parser), new LinkedHashSet<Variable>());\r\n    Sentence orDistributedOverAnd = (Sentence) andsAndOrs.accept(new DistributeOrOverAnd(), null);\r\n    return (new CNFConstructor()).construct(orDistributedOverAnd);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLaunchConfigurationNames() != null)\r\n        sb.append(\"LaunchConfigurationNames: \").append(getLaunchConfigurationNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.getTransformer",
	"Comment": "returns the component responsible for coordinate transformation.",
	"Method": "CoordTransformer getTransformer(){\r\n    return imageUpdater.getTransformer();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateStageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.EmptyEnvironmentView.setBorder",
	"Comment": "specifies the number of pixels left blank on each side of the agent view\tpanel.",
	"Method": "void setBorder(int top,int left,int bottom,int right){\r\n    borderTop = top;\r\n    borderLeft = left;\r\n    borderBottom = bottom;\r\n    borderRight = right;\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultMap.updateEntityViewInfo",
	"Comment": "updates the view information of a given entity by means of the current\tentity classifier. if suitable viewing information was found and\taddtotree is true, the entity is added to the entity tree.",
	"Method": "void updateEntityViewInfo(MapEntity entity,boolean addToTree){\r\n    EntityViewInfo info = null;\r\n    if (entityClassifier != null)\r\n        info = entityClassifier.classify(entity);\r\n    entity.setViewInfo(info);\r\n    if (addToTree && info != null)\r\n        entityTree.insertEntity((DefaultMapEntity) entity);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.putNotificationConfiguration",
	"Comment": "configures an auto scaling group to send notifications when specified events take place. subscribers to thespecified topic can have messages delivered to an endpoint such as a web server or an email address.this configuration overwrites any existing configuration.for more information, see getting sns notificationswhen your auto scaling group scales in the auto scaling user guide.",
	"Method": "PutNotificationConfigurationResult putNotificationConfiguration(PutNotificationConfigurationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutNotificationConfiguration(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetGatewayResponsesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.environment.connectfour.ConnectFourGame.getPlayer",
	"Comment": "returns the player corresponding to the specified player number. for\tefficiency reasons, connectfourstates use numbers\tinstead of strings to identify players.",
	"Method": "String getPlayer(ConnectFourState state,String getPlayer,int playerNum){\r\n    switch(playerNum) {\r\n        case 1:\r\n            return players[0];\r\n        case 2:\r\n            return players[1];\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "aima.gui.swing.framework.SimpleAgentApp.constructApplicationFrame",
	"Comment": "creates all parts of an agent application and makes the parts know each\tother. part construction is delegated to factory methods.",
	"Method": "AgentAppFrame constructApplicationFrame(){\r\n    AgentAppEnvironmentView envView = createEnvironmentView();\r\n    AgentAppFrame frame = createFrame();\r\n    AgentAppController controller = createController();\r\n    frame.setEnvView(envView);\r\n    envView.setMessageLogger(frame.getMessageLogger());\r\n    frame.setController(controller);\r\n    controller.setFrame(frame);\r\n    frame.setDefaultSelection();\r\n    return frame;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.disassociateSkillGroupFromRoom",
	"Comment": "disassociates a skill group from a specified room. this disables all skills in the skill group on all devices inthe room.",
	"Method": "DisassociateSkillGroupFromRoomResult disassociateSkillGroupFromRoom(DisassociateSkillGroupFromRoomRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociateSkillGroupFromRoom(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DetachInstancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActivities() != null)\r\n        sb.append(\"Activities: \").append(getActivities());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UntagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.listVirtualRouters",
	"Comment": "returns a list of existing virtual routers in a service mesh.",
	"Method": "ListVirtualRoutersResult listVirtualRouters(ListVirtualRoutersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListVirtualRouters(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchProfilesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfiles() != null)\r\n        sb.append(\"Profiles: \").append(getProfiles()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getTotalCount() != null)\r\n        sb.append(\"TotalCount: \").append(getTotalCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.Stage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCacheClusterEnabled() != null)\r\n        sb.append(\"CacheClusterEnabled: \").append(getCacheClusterEnabled()).append(\",\");\r\n    if (getCacheClusterSize() != null)\r\n        sb.append(\"CacheClusterSize: \").append(getCacheClusterSize()).append(\",\");\r\n    if (getCacheClusterStatus() != null)\r\n        sb.append(\"CacheClusterStatus: \").append(getCacheClusterStatus()).append(\",\");\r\n    if (getMethodSettings() != null)\r\n        sb.append(\"MethodSettings: \").append(getMethodSettings()).append(\",\");\r\n    if (getVariables() != null)\r\n        sb.append(\"Variables: \").append(getVariables()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion()).append(\",\");\r\n    if (getAccessLogSettings() != null)\r\n        sb.append(\"AccessLogSettings: \").append(getAccessLogSettings()).append(\",\");\r\n    if (getCanarySettings() != null)\r\n        sb.append(\"CanarySettings: \").append(getCanarySettings()).append(\",\");\r\n    if (getTracingEnabled() != null)\r\n        sb.append(\"TracingEnabled: \").append(getTracingEnabled()).append(\",\");\r\n    if (getWebAclArn() != null)\r\n        sb.append(\"WebAclArn: \").append(getWebAclArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getLastUpdatedDate() != null)\r\n        sb.append(\"LastUpdatedDate: \").append(getLastUpdatedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.applications.RoutePlannerApp.updateEnabledState",
	"Comment": "enables the calculate button if at least two markers are set.",
	"Method": "void updateEnabledState(){\r\n    calcButton.setEnabled(frame.getMap().getMarkers().size() > 1);\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.expireLockAfter",
	"Comment": "time for failed locks. under normal circumstances the lock column will bedeleted. if not then this lock column will remain and the row will remainlocked. the lock will expire after this timeout.",
	"Method": "ColumnPrefixDistributedRowLock<K> expireLockAfter(long timeout,TimeUnit unit){\r\n    this.timeout = timeout;\r\n    this.timeoutUnits = unit;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.UpdateBranchResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBranch() != null)\r\n        sb.append(\"Branch: \").append(getBranch());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.CartesianPlot2D.randomPoint",
	"Comment": "calculates a random point that is somewhere inside one of the shapes of the plot or on a border of a shape.",
	"Method": "Point2D randomPoint(){\r\n    IGeometric2D shape = Util.selectRandomlyFromList(shapes);\r\n    return shape.randomPoint();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateTypeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getDefinition() != null)\r\n        sb.append(\"Definition: \").append(getDefinition()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetClientCertificatesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AttachLoadBalancersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetStagesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getItem() != null)\r\n        sb.append(\"Item: \").append(getItem());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.AssociateContactWithAddressBookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactArn() != null)\r\n        sb.append(\"ContactArn: \").append(getContactArn()).append(\",\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlanRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateUsagePlanResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getApiStages() != null)\r\n        sb.append(\"ApiStages: \").append(getApiStages()).append(\",\");\r\n    if (getThrottle() != null)\r\n        sb.append(\"Throttle: \").append(getThrottle()).append(\",\");\r\n    if (getQuota() != null)\r\n        sb.append(\"Quota: \").append(getQuota()).append(\",\");\r\n    if (getProductCode() != null)\r\n        sb.append(\"ProductCode: \").append(getProductCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsappmeshasync using the current builder configuration.",
	"Method": "AWSAppMeshAsync build(AwsAsyncClientParams params){\r\n    return new AWSAppMeshAsyncClient(params);\r\n}"
}, {
	"Path": "aima.gui.swing.applications.AimaDemoFrame.addApp",
	"Comment": "adds a new agent application to the menu. the class is expected to be\tpart of a package and to provide a constructapplicationframe\tmethod.",
	"Method": "void addApp(Class<?> appClass){\r\n    JMenuItem item = addDemoToMenu(appsMenu, appClass);\r\n    item.addActionListener(new AppStarter(appClass));\r\n}"
}, {
	"Path": "com.netflix.astyanax.util.Callables.decorateWithBarrier",
	"Comment": "create a callable that waits on a barrier before starting execution",
	"Method": "Callable<T> decorateWithBarrier(CyclicBarrier barrier,Callable<T> callable){\r\n    return new BarrierCallableDecorator<T>(barrier, callable);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeScalingActivitiesAsync",
	"Comment": "simplified method form for invoking the describescalingactivities operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync(DescribeScalingActivitiesRequest request,java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync,DescribeScalingActivitiesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeScalingActivitiesRequest, DescribeScalingActivitiesResult> asyncHandler,java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync,java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync,com.amazonaws.handlers.AsyncHandler<DescribeScalingActivitiesRequest, DescribeScalingActivitiesResult> asyncHandler){\r\n    return describeScalingActivitiesAsync(new DescribeScalingActivitiesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "aima.core.search.csp.CSP.getConstraints",
	"Comment": "returns all constraints in which the specified variable participates.",
	"Method": "List<Constraint<VAR, VAL>> getConstraints(List<Constraint<VAR, VAL>> getConstraints,Variable var){\r\n    return cnet.get(var);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ComputeCapacity.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDesiredInstances() != null)\r\n        sb.append(\"DesiredInstances: \").append(getDesiredInstances());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.batchPutScheduledUpdateGroupAction",
	"Comment": "creates or updates one or more scheduled scaling actions for an auto scaling group. if you leave a parameterunspecified when updating a scheduled scaling action, the corresponding value remains unchanged.",
	"Method": "BatchPutScheduledUpdateGroupActionResult batchPutScheduledUpdateGroupAction(BatchPutScheduledUpdateGroupActionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchPutScheduledUpdateGroupAction(request);\r\n}"
}, {
	"Path": "aima.core.logic.fol.inference.FOLBCAsk.fetchRulesForGoal",
	"Comment": "fetches all those implication clauses whose rhs meet with the goal",
	"Method": "List<Clause> fetchRulesForGoal(FOLKnowledgeBase kb,Literal goal){\r\n    List<Clause> result = new ArrayList();\r\n    for (Clause clause : kb.getAllDefiniteClauseImplications()) {\r\n        Literal rhs = clause.getPositiveLiterals().get(0);\r\n        if (rhs.getAtomicSentence().getSymbolicName().equals(goal.getAtomicSentence().getSymbolicName())) {\r\n            result.add(clause);\r\n        }\r\n    }\r\n    for (Clause clause : kb.getAllClauses()) {\r\n        if (clause.isUnitClause()) {\r\n            for (Literal l : clause.getLiterals()) {\r\n                if (l.getAtomicSentence().getSymbolicName().equals(goal.getAtomicSentence().getSymbolicName())) {\r\n                    result.add(clause);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (Clause clause : result) {\r\n        ProofStep step = new BCProofStep(clause, this.bcaskHandler.proofs.get(0).getSteps(), goal);\r\n        this.bcaskHandler.addProofStep(step);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateResolverRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getFieldName() != null)\r\n        sb.append(\"FieldName: \").append(getFieldName()).append(\",\");\r\n    if (getDataSourceName() != null)\r\n        sb.append(\"DataSourceName: \").append(getDataSourceName()).append(\",\");\r\n    if (getRequestMappingTemplate() != null)\r\n        sb.append(\"RequestMappingTemplate: \").append(getRequestMappingTemplate()).append(\",\");\r\n    if (getResponseMappingTemplate() != null)\r\n        sb.append(\"ResponseMappingTemplate: \").append(getResponseMappingTemplate()).append(\",\");\r\n    if (getKind() != null)\r\n        sb.append(\"Kind: \").append(getKind()).append(\",\");\r\n    if (getPipelineConfig() != null)\r\n        sb.append(\"PipelineConfig: \").append(getPipelineConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.data.Clause.isHornClause",
	"Comment": "determine if a horn clause. a horn clause is a disjunction of literals of\twhich at most one is positive.",
	"Method": "boolean isHornClause(){\r\n    return !isEmpty() && cachedPositiveSymbols.size() <= 1;\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AttachLoadBalancerTargetGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getTargetGroupARNs() != null)\r\n        sb.append(\"TargetGroupARNs: \").append(getTargetGroupARNs());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeImagesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNames() != null)\r\n        sb.append(\"Names: \").append(getNames()).append(\",\");\r\n    if (getArns() != null)\r\n        sb.append(\"Arns: \").append(getArns()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.datastructure.XYLocation.getXCoOrdinate",
	"Comment": "returns the x coordinate of the location in integer precision.",
	"Method": "int getXCoOrdinate(){\r\n    return xCoOrdinate;\r\n}"
}, {
	"Path": "aima.gui.fx.applications.search.games.TicTacToeApp.update",
	"Comment": "updates square texts according to game state and also the status bar.",
	"Method": "void update(){\r\n    for (int i = 0; i < 9; i++) {\r\n        String val = currState.getValue(i % 3, i / 3);\r\n        if (val == TicTacToeState.EMPTY)\r\n            val = \"\";\r\n        squareBtns[i].setText(val);\r\n    }\r\n    proposeBtn.setDisable(game.isTerminal(currState));\r\n    String statusText;\r\n    if (game.isTerminal(currState))\r\n        if (game.getUtility(currState, TicTacToeState.X) == 1)\r\n            statusText = \"X has won :-)\";\r\n        else if (game.getUtility(currState, TicTacToeState.O) == 1)\r\n            statusText = \"O has won :-)\";\r\n        else\r\n            statusText = \"No winner...\";\r\n    else\r\n        statusText = \"Next move: \" + game.getPlayer(currState);\r\n    if (searchMetrics != null)\r\n        statusText += \"    \" + searchMetrics;\r\n    statusLabel.setText(statusText);\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultTrack.compareLatitude",
	"Comment": "compares position relative to a given latitude value if\tthe nodes of this track are of type defaultmapentity,\totherwise returns zero.",
	"Method": "int compareLatitude(float lat){\r\n    DefaultMapEntity node = getTrkPt(0);\r\n    if (node != null) {\r\n        int result = node.compareLatitude(lat);\r\n        for (int i = 1; i < trkpts.size(); i++) if (result != getTrkPt(i).compareLatitude(lat))\r\n            return 0;\r\n        return result;\r\n    } else {\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getModel",
	"Comment": "describes an existing model defined for a restapi resource.",
	"Method": "GetModelResult getModel(GetModelRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetModel(request);\r\n}"
}, {
	"Path": "aima.core.environment.connectfour.ConnectFourState.analyzeWinPositions",
	"Comment": "assumes a disk at position moverow and movecol\tand analyzes the vicinity with respect to win positions.",
	"Method": "void analyzeWinPositions(int moveRow,int moveCol){\r\n    final int[] rowIncr = new int[] { 1, 0, 1, 1 };\r\n    final int[] colIncr = new int[] { 0, 1, -1, 1 };\r\n    int playerNum = getPlayerNum(moveRow, moveCol);\r\n    WinPositionInfo[] wInfo = new WinPositionInfo[] { new WinPositionInfo(), new WinPositionInfo() };\r\n    for (int i = 0; i < 4; i++) {\r\n        int rIncr = rowIncr[i];\r\n        int cIncr = colIncr[i];\r\n        int diskCount = 1;\r\n        for (int j = 0; j < 2; j++) {\r\n            WinPositionInfo wInf = wInfo[j];\r\n            wInf.clear();\r\n            int rBound = rIncr > 0 ? getRows() : -1;\r\n            int cBound = cIncr > 0 ? getCols() : -1;\r\n            int row = moveRow + rIncr;\r\n            int col = moveCol + cIncr;\r\n            while (row != rBound && col != cBound) {\r\n                int plNum = getPlayerNum(row, col);\r\n                if (plNum == playerNum) {\r\n                    if (wInf.hasData())\r\n                        wInf.diskCount++;\r\n                    else\r\n                        diskCount++;\r\n                } else if (plNum == 0) {\r\n                    if (!wInf.hasData()) {\r\n                        wInf.row = row;\r\n                        wInf.col = col;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n                row += rIncr;\r\n                col += cIncr;\r\n            }\r\n            rIncr = -rIncr;\r\n            cIncr = -cIncr;\r\n        }\r\n        for (int j = 0; j < 2; j++) {\r\n            WinPositionInfo wInf = wInfo[j];\r\n            if (wInf.hasData() && diskCount + wInf.diskCount >= 3) {\r\n                setWinPositionFor(wInf.row, wInf.col, playerNum);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.netflix.astyanax.model.ColumnFamily.getColumnSerializer",
	"Comment": "serializer for first level column names. this serializer does not applyto sub column names.",
	"Method": "Serializer<C> getColumnSerializer(){\r\n    return columnSerializer;\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DescribeVirtualRouterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualRouter() != null)\r\n        sb.append(\"VirtualRouter: \").append(getVirtualRouter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.parsing.CYK.printProbTable",
	"Comment": "print out the probability table produced by the cyk algorithm",
	"Method": "void printProbTable(float[][][] probTable,List<String> words,ProbUnrestrictedGrammar g){\r\n    final int N = words.size();\r\n    final int M = g.vars.size();\r\n    for (int i = 0; i < M; i++) {\r\n        System.out.println(\"Table For : \" + g.vars.get(i) + \"(\" + i + \")\");\r\n        for (int j = 0; j < N; j++) {\r\n            System.out.print(j + \"| \");\r\n            for (int k = 0; k < N; k++) System.out.print(probTable[i][j][k] + \" | \");\r\n            System.out.println();\r\n        }\r\n        System.out.println();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateStageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeploymentId() != null)\r\n        sb.append(\"DeploymentId: \").append(getDeploymentId()).append(\",\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCacheClusterEnabled() != null)\r\n        sb.append(\"CacheClusterEnabled: \").append(getCacheClusterEnabled()).append(\",\");\r\n    if (getCacheClusterSize() != null)\r\n        sb.append(\"CacheClusterSize: \").append(getCacheClusterSize()).append(\",\");\r\n    if (getCacheClusterStatus() != null)\r\n        sb.append(\"CacheClusterStatus: \").append(getCacheClusterStatus()).append(\",\");\r\n    if (getMethodSettings() != null)\r\n        sb.append(\"MethodSettings: \").append(getMethodSettings()).append(\",\");\r\n    if (getVariables() != null)\r\n        sb.append(\"Variables: \").append(getVariables()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion()).append(\",\");\r\n    if (getAccessLogSettings() != null)\r\n        sb.append(\"AccessLogSettings: \").append(getAccessLogSettings()).append(\",\");\r\n    if (getCanarySettings() != null)\r\n        sb.append(\"CanarySettings: \").append(getCanarySettings()).append(\",\");\r\n    if (getTracingEnabled() != null)\r\n        sb.append(\"TracingEnabled: \").append(getTracingEnabled()).append(\",\");\r\n    if (getWebAclArn() != null)\r\n        sb.append(\"WebAclArn: \").append(getWebAclArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getLastUpdatedDate() != null)\r\n        sb.append(\"LastUpdatedDate: \").append(getLastUpdatedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AutoScalingGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getAutoScalingGroupARN() != null)\r\n        sb.append(\"AutoScalingGroupARN: \").append(getAutoScalingGroupARN()).append(\",\");\r\n    if (getLaunchConfigurationName() != null)\r\n        sb.append(\"LaunchConfigurationName: \").append(getLaunchConfigurationName()).append(\",\");\r\n    if (getLaunchTemplate() != null)\r\n        sb.append(\"LaunchTemplate: \").append(getLaunchTemplate()).append(\",\");\r\n    if (getMixedInstancesPolicy() != null)\r\n        sb.append(\"MixedInstancesPolicy: \").append(getMixedInstancesPolicy()).append(\",\");\r\n    if (getMinSize() != null)\r\n        sb.append(\"MinSize: \").append(getMinSize()).append(\",\");\r\n    if (getMaxSize() != null)\r\n        sb.append(\"MaxSize: \").append(getMaxSize()).append(\",\");\r\n    if (getDesiredCapacity() != null)\r\n        sb.append(\"DesiredCapacity: \").append(getDesiredCapacity()).append(\",\");\r\n    if (getDefaultCooldown() != null)\r\n        sb.append(\"DefaultCooldown: \").append(getDefaultCooldown()).append(\",\");\r\n    if (getAvailabilityZones() != null)\r\n        sb.append(\"AvailabilityZones: \").append(getAvailabilityZones()).append(\",\");\r\n    if (getLoadBalancerNames() != null)\r\n        sb.append(\"LoadBalancerNames: \").append(getLoadBalancerNames()).append(\",\");\r\n    if (getTargetGroupARNs() != null)\r\n        sb.append(\"TargetGroupARNs: \").append(getTargetGroupARNs()).append(\",\");\r\n    if (getHealthCheckType() != null)\r\n        sb.append(\"HealthCheckType: \").append(getHealthCheckType()).append(\",\");\r\n    if (getHealthCheckGracePeriod() != null)\r\n        sb.append(\"HealthCheckGracePeriod: \").append(getHealthCheckGracePeriod()).append(\",\");\r\n    if (getInstances() != null)\r\n        sb.append(\"Instances: \").append(getInstances()).append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime()).append(\",\");\r\n    if (getSuspendedProcesses() != null)\r\n        sb.append(\"SuspendedProcesses: \").append(getSuspendedProcesses()).append(\",\");\r\n    if (getPlacementGroup() != null)\r\n        sb.append(\"PlacementGroup: \").append(getPlacementGroup()).append(\",\");\r\n    if (getVPCZoneIdentifier() != null)\r\n        sb.append(\"VPCZoneIdentifier: \").append(getVPCZoneIdentifier()).append(\",\");\r\n    if (getEnabledMetrics() != null)\r\n        sb.append(\"EnabledMetrics: \").append(getEnabledMetrics()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getTerminationPolicies() != null)\r\n        sb.append(\"TerminationPolicies: \").append(getTerminationPolicies()).append(\",\");\r\n    if (getNewInstancesProtectedFromScaleIn() != null)\r\n        sb.append(\"NewInstancesProtectedFromScaleIn: \").append(getNewInstancesProtectedFromScaleIn()).append(\",\");\r\n    if (getServiceLinkedRoleARN() != null)\r\n        sb.append(\"ServiceLinkedRoleARN: \").append(getServiceLinkedRoleARN());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateIntegrationResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.WayElementProcessor.addWayNode",
	"Comment": "this is called by child element processors when a way node object is\tencountered.",
	"Method": "void addWayNode(long nodeId){\r\n    wayNodeIds.add(nodeId);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ScalingPolicy.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getPolicyName() != null)\r\n        sb.append(\"PolicyName: \").append(getPolicyName()).append(\",\");\r\n    if (getPolicyARN() != null)\r\n        sb.append(\"PolicyARN: \").append(getPolicyARN()).append(\",\");\r\n    if (getPolicyType() != null)\r\n        sb.append(\"PolicyType: \").append(getPolicyType()).append(\",\");\r\n    if (getAdjustmentType() != null)\r\n        sb.append(\"AdjustmentType: \").append(getAdjustmentType()).append(\",\");\r\n    if (getMinAdjustmentStep() != null)\r\n        sb.append(\"MinAdjustmentStep: \").append(getMinAdjustmentStep()).append(\",\");\r\n    if (getMinAdjustmentMagnitude() != null)\r\n        sb.append(\"MinAdjustmentMagnitude: \").append(getMinAdjustmentMagnitude()).append(\",\");\r\n    if (getScalingAdjustment() != null)\r\n        sb.append(\"ScalingAdjustment: \").append(getScalingAdjustment()).append(\",\");\r\n    if (getCooldown() != null)\r\n        sb.append(\"Cooldown: \").append(getCooldown()).append(\",\");\r\n    if (getStepAdjustments() != null)\r\n        sb.append(\"StepAdjustments: \").append(getStepAdjustments()).append(\",\");\r\n    if (getMetricAggregationType() != null)\r\n        sb.append(\"MetricAggregationType: \").append(getMetricAggregationType()).append(\",\");\r\n    if (getEstimatedInstanceWarmup() != null)\r\n        sb.append(\"EstimatedInstanceWarmup: \").append(getEstimatedInstanceWarmup()).append(\",\");\r\n    if (getAlarms() != null)\r\n        sb.append(\"Alarms: \").append(getAlarms()).append(\",\");\r\n    if (getTargetTrackingConfiguration() != null)\r\n        sb.append(\"TargetTrackingConfiguration: \").append(getTargetTrackingConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.map.MapAgentView.agentAdded",
	"Comment": "reacts on environment changes and updates the agent tracks.",
	"Method": "void agentAdded(Agent agent,Environment source){\r\n    updateTracks();\r\n    super.agentAdded(agent, source);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateDeviceFromRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.OnlineAgentOsmApp.createAgent",
	"Comment": "factory method which creates a new agent based on the current parameter\tsettings.",
	"Method": "Agent createAgent(List<String> locations){\r\n    Problem<String, MoveToAction> p = new BidirectionalMapProblem(map, null, locations.get(1));\r\n    OnlineSearchProblem<String, MoveToAction> osp = new GeneralProblem(null, p::getActions, null, p::testGoal, p::getStepCosts);\r\n    ToDoubleFunction<String> heuristic;\r\n    if (simPaneCtrl.getParamValueIndex(PARAM_HEURISTIC) == 0)\r\n        heuristic = state -> 0.0;\r\n    else\r\n        heuristic = state -> MapFunctions.getSLD(state, locations.get(1), map);\r\n    Agent agent;\r\n    if (simPaneCtrl.getParamValueIndex(PARAM_STRATEGY) == 0)\r\n        agent = new OnlineDFSAgent(osp, MapFunctions.createPerceptToStateFunction());\r\n    else\r\n        agent = new LRTAStarAgent(osp, MapFunctions.createPerceptToStateFunction(), heuristic);\r\n    return agent;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ExpireSessionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.Util.create",
	"Comment": "create a map with the passed in keys having their values\tinitialized to the passed in value.",
	"Method": "Map<K, V> create(Collection<K> keys,V value){\r\n    Map<K, V> map = new LinkedHashMap();\r\n    for (K k : keys) {\r\n        map.put(k, value);\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetVpcLinkRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpcLinkId() != null)\r\n        sb.append(\"VpcLinkId: \").append(getVpcLinkId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.applications.OsmAgentApp.constructApplicationFrame",
	"Comment": "reads the default map showing the city of ulm if no map\thas been loaded yet and calls the super class implementation.",
	"Method": "AgentAppFrame constructApplicationFrame(){\r\n    if (map == null)\r\n        readMap(DataResource.getUlmFileResource());\r\n    return super.constructApplicationFrame();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutRestApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getMode() != null)\r\n        sb.append(\"Mode: \").append(getMode()).append(\",\");\r\n    if (getFailOnWarnings() != null)\r\n        sb.append(\"FailOnWarnings: \").append(getFailOnWarnings()).append(\",\");\r\n    if (getParameters() != null)\r\n        sb.append(\"Parameters: \").append(getParameters()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.applications.agent.VacuumController.prepare",
	"Comment": "creates a vacuum environment and a corresponding agent based on the\tstate of the selectors and finally passes the environment to the viewer.",
	"Method": "void prepare(String changedSelector){\r\n    AgentAppFrame.SelectionState selState = frame.getSelection();\r\n    env = null;\r\n    switch(selState.getIndex(VacuumFrame.ENV_SEL)) {\r\n        case 0:\r\n            env = new VacuumEnvironment();\r\n            break;\r\n        case 1:\r\n            env = new NondeterministicVacuumEnvironment();\r\n            break;\r\n    }\r\n    agent = null;\r\n    switch(selState.getIndex(VacuumFrame.AGENT_SEL)) {\r\n        case 0:\r\n            agent = new TableDrivenVacuumAgent();\r\n            break;\r\n        case 1:\r\n            agent = new ReflexVacuumAgent();\r\n            break;\r\n        case 2:\r\n            agent = new SimpleReflexVacuumAgent();\r\n            break;\r\n        case 3:\r\n            agent = new ModelBasedReflexVacuumAgent();\r\n            break;\r\n        case 4:\r\n            agent = new NondeterministicSearchAgent(percept -> (VacuumEnvironmentState) percept, env);\r\n            break;\r\n    }\r\n    if (env != null && agent != null) {\r\n        frame.getEnvView().setEnvironment(env);\r\n        env.addAgent(agent);\r\n        if (agent instanceof NondeterministicSearchAgent) {\r\n            NondeterministicProblem<VacuumEnvironmentState, Action> problem = new NondeterministicProblem((VacuumEnvironmentState) env.getCurrentState(), VacuumWorldFunctions::getActions, VacuumWorldFunctions.createResultsFunction(agent), VacuumWorldFunctions::testGoal, (s, a, sPrimed) -> 1.0);\r\n            ((NondeterministicSearchAgent<VacuumEnvironmentState, Action>) agent).makePlan(problem);\r\n        }\r\n        isPrepared = true;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ResendValidationEmailResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.ImportRestApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFailOnWarnings() != null)\r\n        sb.append(\"FailOnWarnings: \").append(getFailOnWarnings()).append(\",\");\r\n    if (getParameters() != null)\r\n        sb.append(\"Parameters: \").append(getParameters()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.shallows.EmptyCheckpointManager.getCheckpoint",
	"Comment": "since no checkpoint management is done here simply use the starttoken as the \tstart checkpoint for the range",
	"Method": "String getCheckpoint(String startToken){\r\n    return tokenMap.get(startToken);\r\n}"
}, {
	"Path": "aima.core.search.framework.Node.getState",
	"Comment": "returns the state in the state space to which the node corresponds.",
	"Method": "S getState(){\r\n    return state;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteVpcLinkRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpcLinkId() != null)\r\n        sb.append(\"VpcLinkId: \").append(getVpcLinkId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.UnprocessedNamedQueryId.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQueryId() != null)\r\n        sb.append(\"NamedQueryId: \").append(getNamedQueryId()).append(\",\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteBranchResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBranch() != null)\r\n        sb.append(\"Branch: \").append(getBranch());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.DeleteCertificateAuthorityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StopImageBuilderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.Alarm.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAlarmName() != null)\r\n        sb.append(\"AlarmName: \").append(getAlarmName()).append(\",\");\r\n    if (getAlarmARN() != null)\r\n        sb.append(\"AlarmARN: \").append(getAlarmARN());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.createBusinessReportSchedule",
	"Comment": "creates a recurring schedule for usage reports to deliver to the specified s3 location with a specified daily orweekly interval.",
	"Method": "CreateBusinessReportScheduleResult createBusinessReportSchedule(CreateBusinessReportScheduleRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateBusinessReportSchedule(request);\r\n}"
}, {
	"Path": "aima.core.search.adversarial.IterativeDeepeningAlphaBetaSearch.incrementDepthLimit",
	"Comment": "primitive operation which is called at the beginning of one depth limitedsearch step. this implementation increments the current depth limit byone.",
	"Method": "void incrementDepthLimit(){\r\n    currDepthLimit++;\r\n}"
}, {
	"Path": "aimax.osm.reader.OsmReader.createParser",
	"Comment": "factory method, responsible for creating a new sax parser.",
	"Method": "SAXParser createParser(){\r\n    try {\r\n        return SAXParserFactory.newInstance().newSAXParser();\r\n    } catch (ParserConfigurationException e) {\r\n        throw new OsmRuntimeException(\"Unable to create SAX Parser.\", e);\r\n    } catch (SAXException e) {\r\n        throw new OsmRuntimeException(\"Unable to create SAX Parser.\", e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlanKeysRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNameQuery() != null)\r\n        sb.append(\"NameQuery: \").append(getNameQuery());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.BatchGetNamedQueryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNamedQueries() != null)\r\n        sb.append(\"NamedQueries: \").append(getNamedQueries()).append(\",\");\r\n    if (getUnprocessedNamedQueryIds() != null)\r\n        sb.append(\"UnprocessedNamedQueryIds: \").append(getUnprocessedNamedQueryIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.deleteRoomSkillParameter",
	"Comment": "deletes room skill parameter details by room, skill, and parameter key id.",
	"Method": "DeleteRoomSkillParameterResult deleteRoomSkillParameter(DeleteRoomSkillParameterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteRoomSkillParameter(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.waiters.DescribeFleetsFunction.apply",
	"Comment": "makes a call to the operation specified by the waiter by taking the corresponding request and returns thecorresponding result",
	"Method": "DescribeFleetsResult apply(DescribeFleetsRequest describeFleetsRequest){\r\n    return client.describeFleets(describeFleetsRequest);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateImageBuilderStreamingURLResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStreamingURL() != null)\r\n        sb.append(\"StreamingURL: \").append(getStreamingURL()).append(\",\");\r\n    if (getExpires() != null)\r\n        sb.append(\"Expires: \").append(getExpires());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.StartJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobType() != null)\r\n        sb.append(\"JobType: \").append(getJobType()).append(\",\");\r\n    if (getJobReason() != null)\r\n        sb.append(\"JobReason: \").append(getJobReason()).append(\",\");\r\n    if (getCommitId() != null)\r\n        sb.append(\"CommitId: \").append(getCommitId()).append(\",\");\r\n    if (getCommitMessage() != null)\r\n        sb.append(\"CommitMessage: \").append(getCommitMessage()).append(\",\");\r\n    if (getCommitTime() != null)\r\n        sb.append(\"CommitTime: \").append(getCommitTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ListTagsForCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DisableMetricsCollectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getMetrics() != null)\r\n        sb.append(\"Metrics: \").append(getMetrics());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncClient.createApiKey",
	"Comment": "creates a unique key that you can distribute to clients who are executing your api.",
	"Method": "CreateApiKeyResult createApiKey(CreateApiKeyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateApiKey(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.BusinessReportContentRange.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterval() != null)\r\n        sb.append(\"Interval: \").append(getInterval());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateContactFromAddressBookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.data.ConjunctionOfClauses.extend",
	"Comment": "create a new conjunction of clauses by taking the clauses from the\tcurrent conjunction and adding additional clauses to it.",
	"Method": "ConjunctionOfClauses extend(Collection<Clause> additionalClauses){\r\n    Set<Clause> extendedClauses = new LinkedHashSet<Clause>();\r\n    extendedClauses.addAll(clauses);\r\n    extendedClauses.addAll(additionalClauses);\r\n    ConjunctionOfClauses result = new ConjunctionOfClauses(extendedClauses);\r\n    return result;\r\n}"
}, {
	"Path": "com.netflix.astyanax.util.TimeUUIDUtils.getUniqueTimeUUIDinMillis",
	"Comment": "gets a new and unique time uuid in milliseconds. it is useful to use in atimeuuidtype sorted column family.",
	"Method": "java.util.UUID getUniqueTimeUUIDinMillis(){\r\n    return new java.util.UUID(UUIDGen.newTime(), UUIDGen.getClockSeqAndNode());\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.Type.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getDefinition() != null)\r\n        sb.append(\"Definition: \").append(getDefinition()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeScalingActivitiesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActivities() != null)\r\n        sb.append(\"Activities: \").append(getActivities()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.ResultSet.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRows() != null)\r\n        sb.append(\"Rows: \").append(getRows()).append(\",\");\r\n    if (getResultSetMetadata() != null)\r\n        sb.append(\"ResultSetMetadata: \").append(getResultSetMetadata());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.CreateBranchRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage()).append(\",\");\r\n    if (getFramework() != null)\r\n        sb.append(\"Framework: \").append(getFramework()).append(\",\");\r\n    if (getEnableNotification() != null)\r\n        sb.append(\"EnableNotification: \").append(getEnableNotification()).append(\",\");\r\n    if (getEnableAutoBuild() != null)\r\n        sb.append(\"EnableAutoBuild: \").append(getEnableAutoBuild()).append(\",\");\r\n    if (getEnvironmentVariables() != null)\r\n        sb.append(\"EnvironmentVariables: \").append(getEnvironmentVariables()).append(\",\");\r\n    if (getBasicAuthCredentials() != null)\r\n        sb.append(\"BasicAuthCredentials: \").append(getBasicAuthCredentials()).append(\",\");\r\n    if (getEnableBasicAuth() != null)\r\n        sb.append(\"EnableBasicAuth: \").append(getEnableBasicAuth()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getBuildSpec() != null)\r\n        sb.append(\"BuildSpec: \").append(getBuildSpec()).append(\",\");\r\n    if (getTtl() != null)\r\n        sb.append(\"Ttl: \").append(getTtl());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UntagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.RegisterScalableTargetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getMinCapacity() != null)\r\n        sb.append(\"MinCapacity: \").append(getMinCapacity()).append(\",\");\r\n    if (getMaxCapacity() != null)\r\n        sb.append(\"MaxCapacity: \").append(getMaxCapacity()).append(\",\");\r\n    if (getRoleARN() != null)\r\n        sb.append(\"RoleARN: \").append(getRoleARN());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.DisjointSets.union",
	"Comment": "union two disjoint sets together if the arguments currently belong to two\tdifferent sets.",
	"Method": "void union(E element1,E element2){\r\n    Set<E> set1 = elementToSet.get(element1);\r\n    if (set1 == null) {\r\n        throw new IllegalArgumentException(\"element 1 is not associated with a disjoint set, call makeSet() first.\");\r\n    }\r\n    Set<E> set2 = elementToSet.get(element2);\r\n    if (set2 == null) {\r\n        throw new IllegalArgumentException(\"element 2 is not associated with a disjoint set, call makeSet() first.\");\r\n    }\r\n    if (set1 != set2) {\r\n        if (set1.size() < set2.size()) {\r\n            set2.addAll(set1);\r\n            for (E element : set1) {\r\n                disjointSets.remove(elementToSet.put(element, set2));\r\n            }\r\n        } else {\r\n            set1.addAll(set2);\r\n            for (E element : set2) {\r\n                disjointSets.remove(elementToSet.put(element, set1));\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteUsagePlanKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateVirtualRouterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.CreateMeshRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateBasePathMappingResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath()).append(\",\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.EnabledMetric.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetric() != null)\r\n        sb.append(\"Metric: \").append(getMetric()).append(\",\");\r\n    if (getGranularity() != null)\r\n        sb.append(\"Granularity: \").append(getGranularity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.TransformMatrix2D.multiply",
	"Comment": "multiplies this matrix with another transformation matrix.",
	"Method": "TransformMatrix2D multiply(TransformMatrix2D matrix,Point2D multiply,Point2D point){\r\n    final double xNew = point.getX() * a + point.getY() * c + e, yNew = point.getX() * b + point.getY() * d + f;\r\n    return new Point2D(xNew, yNew);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DeleteMeshRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.LambdaDataSourceConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLambdaFunctionArn() != null)\r\n        sb.append(\"LambdaFunctionArn: \").append(getLambdaFunctionArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateRestApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getCloneFrom() != null)\r\n        sb.append(\"CloneFrom: \").append(getCloneFrom()).append(\",\");\r\n    if (getBinaryMediaTypes() != null)\r\n        sb.append(\"BinaryMediaTypes: \").append(getBinaryMediaTypes()).append(\",\");\r\n    if (getMinimumCompressionSize() != null)\r\n        sb.append(\"MinimumCompressionSize: \").append(getMinimumCompressionSize()).append(\",\");\r\n    if (getApiKeySource() != null)\r\n        sb.append(\"ApiKeySource: \").append(getApiKeySource()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration()).append(\",\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UserSetting.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAction() != null)\r\n        sb.append(\"Action: \").append(getAction()).append(\",\");\r\n    if (getPermission() != null)\r\n        sb.append(\"Permission: \").append(getPermission());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.BatchGetQueryExecutionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutions() != null)\r\n        sb.append(\"QueryExecutions: \").append(getQueryExecutions()).append(\",\");\r\n    if (getUnprocessedQueryExecutionIds() != null)\r\n        sb.append(\"UnprocessedQueryExecutionIds: \").append(getUnprocessedQueryExecutionIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.ScalingActivity.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActivityId() != null)\r\n        sb.append(\"ActivityId: \").append(getActivityId()).append(\",\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCause() != null)\r\n        sb.append(\"Cause: \").append(getCause()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getStatusMessage() != null)\r\n        sb.append(\"StatusMessage: \").append(getStatusMessage()).append(\",\");\r\n    if (getDetails() != null)\r\n        sb.append(\"Details: \").append(getDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLoadBalancerTargetGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ResumeProcessesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getScalingProcesses() != null)\r\n        sb.append(\"ScalingProcesses: \").append(getScalingProcesses());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.LifecycleHook.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHookName() != null)\r\n        sb.append(\"LifecycleHookName: \").append(getLifecycleHookName()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLifecycleTransition() != null)\r\n        sb.append(\"LifecycleTransition: \").append(getLifecycleTransition()).append(\",\");\r\n    if (getNotificationTargetARN() != null)\r\n        sb.append(\"NotificationTargetARN: \").append(getNotificationTargetARN()).append(\",\");\r\n    if (getRoleARN() != null)\r\n        sb.append(\"RoleARN: \").append(getRoleARN()).append(\",\");\r\n    if (getNotificationMetadata() != null)\r\n        sb.append(\"NotificationMetadata: \").append(getNotificationMetadata()).append(\",\");\r\n    if (getHeartbeatTimeout() != null)\r\n        sb.append(\"HeartbeatTimeout: \").append(getHeartbeatTimeout()).append(\",\");\r\n    if (getGlobalTimeout() != null)\r\n        sb.append(\"GlobalTimeout: \").append(getGlobalTimeout()).append(\",\");\r\n    if (getDefaultResult() != null)\r\n        sb.append(\"DefaultResult: \").append(getDefaultResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetTypeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultMap.setEntityClassifier",
	"Comment": "provides the data store with an entity classifier. the classifier\tstrongly influences the generation of the entity tree.",
	"Method": "void setEntityClassifier(EntityClassifier<EntityViewInfo> classifier){\r\n    entityClassifier = classifier;\r\n    if (entityTree != null) {\r\n        applyClassifierAndUpdateTree(entityTree.getBoundingBox());\r\n        fireMapDataEvent(new MapEvent(this, MapEvent.Type.MAP_MODIFIED));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.FlushStageAuthorizersCacheResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.SVGGroupParser.applyTransform",
	"Comment": "checks the current element for a transform attribute and adds that attribute to the current transform matrix.\tmanages the transformation stack.",
	"Method": "void applyTransform(){\r\n    String value = reader.getAttributeValue(null, TRANSFORM_ATTRIBUTE);\r\n    transformations.push(currentMatrix);\r\n    currentMatrix = currentMatrix.multiply(parseTransform(value));\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SkillGroupData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getSkillGroupName() != null)\r\n        sb.append(\"SkillGroupName: \").append(getSkillGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.UpdateVirtualRouterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualRouter() != null)\r\n        sb.append(\"VirtualRouter: \").append(getVirtualRouter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteIntegrationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.listQueryExecutions",
	"Comment": "provides a list of all available query execution ids.for code samples using the aws sdk for java, see examples and code samples in theamazon athena user guide.",
	"Method": "ListQueryExecutionsResult listQueryExecutions(ListQueryExecutionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListQueryExecutions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupNames() != null)\r\n        sb.append(\"AutoScalingGroupNames: \").append(getAutoScalingGroupNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.mapping.Mapping.newInstance",
	"Comment": "allocate a new instance and populate it with the values from the givencolumn list",
	"Method": "T newInstance(ColumnList<String> columns){\r\n    return initInstance(clazz.newInstance(), columns);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.StopImageBuilderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImageBuilder() != null)\r\n        sb.append(\"ImageBuilder: \").append(getImageBuilder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateClientCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.data.Clause.isUnitClause",
	"Comment": "determine if a clause is unit, i.e. contains a single literal.",
	"Method": "boolean isUnitClause(){\r\n    return literals.size() == 1;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateModelResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.ImagePermissions.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAllowFleet() != null)\r\n        sb.append(\"AllowFleet: \").append(getAllowFleet()).append(\",\");\r\n    if (getAllowImageBuilder() != null)\r\n        sb.append(\"AllowImageBuilder: \").append(getAllowImageBuilder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.parsing.grammars.ProbUnrestrictedGrammar.validateRuleProbabilities",
	"Comment": "for a set of rules, test whether each batch of rules with the same \tlhs have their probabilities sum to exactly 1.0",
	"Method": "boolean validateRuleProbabilities(List<Rule> ruleList){\r\n    float probTotal = 0;\r\n    for (String var : vars) {\r\n        for (int j = 0; j < ruleList.size(); j++) {\r\n            if (j == 0)\r\n                probTotal = (float) 0.0;\r\n            if (ruleList.get(j).lhs.get(0).equals(var))\r\n                probTotal += ruleList.get(j).PROB;\r\n            if (probTotal > 1.0)\r\n                return false;\r\n            if (j == ruleList.size() - 1 && probTotal != (float) 1.0)\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListSkillsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getEnablementType() != null)\r\n        sb.append(\"EnablementType: \").append(getEnablementType()).append(\",\");\r\n    if (getSkillType() != null)\r\n        sb.append(\"SkillType: \").append(getSkillType()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.visitors.SymbolCollector.getSymbolsFrom",
	"Comment": "collect a set of propositional symbols from a list of given sentences.",
	"Method": "Set<PropositionSymbol> getSymbolsFrom(Sentence sentences){\r\n    Set<PropositionSymbol> result = new LinkedHashSet<PropositionSymbol>();\r\n    SymbolCollector symbolCollector = new SymbolCollector();\r\n    for (Sentence s : sentences) {\r\n        result = s.accept(symbolCollector, result);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.ListAppsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApps() != null)\r\n        sb.append(\"Apps: \").append(getApps()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.agent.OsmAgentController.initAgents",
	"Comment": "creates new agents and adds them to the current environment.",
	"Method": "void initAgents(MessageLogger logger){\r\n    List<MapNode> markers = map.getOsmMap().getMarkers();\r\n    if (markers.size() < 2) {\r\n        logger.log(\"Error: Please set two markers with mouse-left.\");\r\n        return;\r\n    }\r\n    String[] locs = new String[markers.size()];\r\n    for (int i = 0; i < markers.size(); i++) {\r\n        MapNode node = markers.get(i);\r\n        Point2D pt = new Point2D(node.getLon(), node.getLat());\r\n        locs[i] = map.getNearestLocation(pt);\r\n    }\r\n    MapAgentFrame.SelectionState state = frame.getSelection();\r\n    heuristic = createHeuristic(state.getIndex(MapAgentFrame.HEURISTIC_SEL), locs[1]);\r\n    search = SearchFactory.getInstance().createSearch(state.getIndex(MapAgentFrame.SEARCH_SEL), state.getIndex(MapAgentFrame.Q_SEARCH_IMPL_SEL), heuristic);\r\n    Agent agent = null;\r\n    switch(state.getIndex(MapAgentFrame.AGENT_SEL)) {\r\n        case 0:\r\n            agent = new SimpleMapAgent(map, env, search, new String[] { locs[1] });\r\n            break;\r\n        case 1:\r\n            Problem<String, MoveToAction> p = new BidirectionalMapProblem(map, null, locs[1]);\r\n            OnlineSearchProblem<String, MoveToAction> osp = new GeneralProblem(null, p::getActions, null, p::testGoal, p::getStepCosts);\r\n            agent = new LRTAStarAgent(osp, MapFunctions.createPerceptToStateFunction(), s -> heuristic.applyAsDouble(new Node(s)));\r\n            break;\r\n    }\r\n    env.addAgent(agent, locs[0]);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJob() != null)\r\n        sb.append(\"Job: \").append(getJob());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.NetworkAccessConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEniPrivateIpAddress() != null)\r\n        sb.append(\"EniPrivateIpAddress: \").append(getEniPrivateIpAddress()).append(\",\");\r\n    if (getEniId() != null)\r\n        sb.append(\"EniId: \").append(getEniId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.OsmElementProcessor.getChild",
	"Comment": "retrieves the appropriate child element processor for the newly\tencountered nested element.",
	"Method": "ElementProcessor getChild(String uri,String localName,String qName){\r\n    if (ELEMENT_NAME_BOUND.equals(qName)) {\r\n        return boundElementProcessor;\r\n    } else if (ELEMENT_NAME_NODE.equals(qName)) {\r\n        return nodeElementProcessor;\r\n    } else if (ELEMENT_NAME_WAY.equals(qName)) {\r\n        return wayElementProcessor;\r\n    }\r\n    return super.getChild(uri, localName, qName);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetGatewayResponsesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateDataSourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getServiceRoleArn() != null)\r\n        sb.append(\"ServiceRoleArn: \").append(getServiceRoleArn()).append(\",\");\r\n    if (getDynamodbConfig() != null)\r\n        sb.append(\"DynamodbConfig: \").append(getDynamodbConfig()).append(\",\");\r\n    if (getLambdaConfig() != null)\r\n        sb.append(\"LambdaConfig: \").append(getLambdaConfig()).append(\",\");\r\n    if (getElasticsearchConfig() != null)\r\n        sb.append(\"ElasticsearchConfig: \").append(getElasticsearchConfig()).append(\",\");\r\n    if (getHttpConfig() != null)\r\n        sb.append(\"HttpConfig: \").append(getHttpConfig()).append(\",\");\r\n    if (getRelationalDatabaseConfig() != null)\r\n        sb.append(\"RelationalDatabaseConfig: \").append(getRelationalDatabaseConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.planning.ActionSchema.getActionBySubstitution",
	"Comment": "this function generates ground actions from a given actionschema.",
	"Method": "ActionSchema getActionBySubstitution(List<Constant> constants){\r\n    List<Literal> precondList = this.getPrecondition();\r\n    List<Term> vars = this.getVariables();\r\n    List<Literal> effectList = this.getEffects();\r\n    List<Literal> newPrecond = new ArrayList();\r\n    List<Literal> newEffects = new ArrayList();\r\n    for (Literal precondition : precondList) {\r\n        List<Term> newTerms = new ArrayList();\r\n        for (Term variable : precondition.getAtomicSentence().getArgs()) {\r\n            if (variable instanceof Variable) {\r\n                newTerms.add(constants.get(vars.lastIndexOf(variable)));\r\n            } else\r\n                newTerms.add(variable);\r\n        }\r\n        newPrecond.add(new Literal(new Predicate(precondition.getAtomicSentence().getSymbolicName(), newTerms), precondition.isNegativeLiteral()));\r\n    }\r\n    for (Literal effect : effectList) {\r\n        List<Term> newTerms = new ArrayList();\r\n        for (Term variable : effect.getAtomicSentence().getArgs()) {\r\n            if (variable instanceof Variable) {\r\n                newTerms.add(constants.get(vars.lastIndexOf(variable)));\r\n            } else\r\n                newTerms.add(variable);\r\n        }\r\n        newEffects.add(new Literal(new Predicate(effect.getAtomicSentence().getSymbolicName(), newTerms), effect.isNegativeLiteral()));\r\n    }\r\n    return new ActionSchema(this.getName(), null, newPrecond, newEffects);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.TagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.local.GeneticAlgorithm.getIterations",
	"Comment": "returns the number of iterations of the genetic algorithm.",
	"Method": "int getIterations(){\r\n    return metrics.getInt(ITERATIONS);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetBasePathMappingsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.entitystore.CompositeColumnEntityMapper.getComparatorType",
	"Comment": "return the cassandra comparator type for this composite structure",
	"Method": "String getComparatorType(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"CompositeType(\");\r\n    sb.append(StringUtils.join(Collections2.transform(components, new Function<FieldMapper<?>, String>() {\r\n        public String apply(FieldMapper<?> input) {\r\n            return input.serializer.getComparatorType().getClassName();\r\n        }\r\n    }), \",\"));\r\n    sb.append(\")\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.entitystore.CompositeColumnEntityMapper.getComparatorType",
	"Comment": "return the cassandra comparator type for this composite structure",
	"Method": "String getComparatorType(){\r\n    return input.serializer.getComparatorType().getClassName();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.OpenIDConnectConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIssuer() != null)\r\n        sb.append(\"Issuer: \").append(getIssuer()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(getClientId()).append(\",\");\r\n    if (getIatTTL() != null)\r\n        sb.append(\"IatTTL: \").append(getIatTTL()).append(\",\");\r\n    if (getAuthTTL() != null)\r\n        sb.append(\"AuthTTL: \").append(getAuthTTL());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteClientCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DisableMetricsCollectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.deleteDirectoryConfig",
	"Comment": "deletes the specified directory config object from appstream 2.0. this object includes the information requiredto join streaming instances to an active directory domain.",
	"Method": "DeleteDirectoryConfigResult deleteDirectoryConfig(DeleteDirectoryConfigRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDirectoryConfig(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.batchDeleteScheduledAction",
	"Comment": "deletes one or more scheduled actions for the specified auto scaling group.",
	"Method": "BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchDeleteScheduledAction(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateResolverResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResolver() != null)\r\n        sb.append(\"Resolver: \").append(getResolver());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.routing.MapAdapter.getNearestLocation",
	"Comment": "returns the id of the way node in the underlying osm map which is nearest\twith respect to the specified coordinates and additionally passes the\tfilter.",
	"Method": "String getNearestLocation(Point2D pt){\r\n    Position pos = new Position((float) pt.getY(), (float) pt.getX());\r\n    MapNode node = osmMap.getNearestWayNode(pos, filter);\r\n    return (node != null) ? Long.toString(node.getId()) : null;\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateImagePermissionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getSharedAccountId() != null)\r\n        sb.append(\"SharedAccountId: \").append(getSharedAccountId()).append(\",\");\r\n    if (getImagePermissions() != null)\r\n        sb.append(\"ImagePermissions: \").append(getImagePermissions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.ResultSetMetadata.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getColumnInfo() != null)\r\n        sb.append(\"ColumnInfo: \").append(getColumnInfo());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeLifecycleHooks",
	"Comment": "describes the lifecycle hooks for the specified auto scaling group.",
	"Method": "DescribeLifecycleHooksResult describeLifecycleHooks(DescribeLifecycleHooksRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLifecycleHooks(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.createImageBuilder",
	"Comment": "creates an image builder. an image builder is a virtual machine that is used to create an image.the initial state of the builder is pending. when it is ready, the state is running.",
	"Method": "CreateImageBuilderResult createImageBuilder(CreateImageBuilderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateImageBuilder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.ListQueryExecutionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionIds() != null)\r\n        sb.append(\"QueryExecutionIds: \").append(getQueryExecutionIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.uniqueness.MultiRowUniquenessConstraint.withTtl",
	"Comment": "ttl to use for the uniquness operation. this is the ttl for the columnsto expire in the event of a client crash before the uniqueness can becommitted",
	"Method": "MultiRowUniquenessConstraint withTtl(Integer ttl){\r\n    this.ttl = ttl;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.registerScalableTarget",
	"Comment": "registers or updates a scalable target. a scalable target is a resource that application auto scaling can scaleout or scale in. after you have registered a scalable target, you can use this operation to update the minimumand maximum values for its scalable dimension.after you register a scalable target, you can create and apply scaling policies using putscalingpolicy.you can view the scaling policies for a service namespace using describescalabletargets. if you no longerneed a scalable target, you can deregister it using deregisterscalabletarget.",
	"Method": "RegisterScalableTargetResult registerScalableTarget(RegisterScalableTargetRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeRegisterScalableTarget(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualRouterRef.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getMessageAction() != null)\r\n        sb.append(\"MessageAction: \").append(getMessageAction()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.describeScalableTargets",
	"Comment": "gets information about the scalable targets in the specified namespace.you can filter the results using the resourceids and scalabledimension parameters.to create a scalable target or update an existing one, see registerscalabletarget. if you are no longerusing a scalable target, you can deregister it using deregisterscalabletarget.",
	"Method": "DescribeScalableTargetsResult describeScalableTargets(DescribeScalableTargetsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeScalableTargets(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.Ebs.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnapshotId() != null)\r\n        sb.append(\"SnapshotId: \").append(getSnapshotId()).append(\",\");\r\n    if (getVolumeSize() != null)\r\n        sb.append(\"VolumeSize: \").append(getVolumeSize()).append(\",\");\r\n    if (getVolumeType() != null)\r\n        sb.append(\"VolumeType: \").append(getVolumeType()).append(\",\");\r\n    if (getDeleteOnTermination() != null)\r\n        sb.append(\"DeleteOnTermination: \").append(getDeleteOnTermination()).append(\",\");\r\n    if (getIops() != null)\r\n        sb.append(\"Iops: \").append(getIops()).append(\",\");\r\n    if (getEncrypted() != null)\r\n        sb.append(\"Encrypted: \").append(getEncrypted());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.describeScheduledActions",
	"Comment": "describes the scheduled actions for the specified service namespace.you can filter the results using the resourceid, scalabledimension, andscheduledactionnames parameters.to create a scheduled action or update an existing one, see putscheduledaction. if you are no longer usinga scheduled action, you can delete it using deletescheduledaction.",
	"Method": "DescribeScheduledActionsResult describeScheduledActions(DescribeScheduledActionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeScheduledActions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualNodeRef.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getVirtualNodeName() != null)\r\n        sb.append(\"VirtualNodeName: \").append(getVirtualNodeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeviceEvent.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getTimestamp() != null)\r\n        sb.append(\"Timestamp: \").append(getTimestamp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.stopQueryExecution",
	"Comment": "stops a query execution.for code samples using the aws sdk for java, see examples and code samples in theamazon athena user guide.",
	"Method": "StopQueryExecutionResult stopQueryExecution(StopQueryExecutionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStopQueryExecution(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.RenewalSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRenewalStatus() != null)\r\n        sb.append(\"RenewalStatus: \").append(getRenewalStatus()).append(\",\");\r\n    if (getDomainValidationOptions() != null)\r\n        sb.append(\"DomainValidationOptions: \").append(getDomainValidationOptions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateBusinessReportScheduleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UserStackAssociationError.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserStackAssociation() != null)\r\n        sb.append(\"UserStackAssociation: \").append(getUserStackAssociation()).append(\",\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.getMaxHub",
	"Comment": "return from a set of pages the page with the greatest hub value",
	"Method": "Page getMaxHub(List<Page> result){\r\n    Page maxHub = null;\r\n    for (Page currPage : result) {\r\n        if (maxHub == null || currPage.hub > maxHub.hub)\r\n            maxHub = currPage;\r\n    }\r\n    return maxHub;\r\n}"
}, {
	"Path": "aima.core.util.datastructure.TwoKeyHashMap.put",
	"Comment": "associates the specified value with the specified key pair in this map.\tif the map previously contained a mapping for this key pair, the old\tvalue is replaced.",
	"Method": "void put(K1 key1,K2 key2,V value){\r\n    super.put(new Pair<K1, K2>(key1, key2), value);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.createAutoScalingGroup",
	"Comment": "creates an auto scaling group with the specified name and attributes.if you exceed your maximum limit of auto scaling groups, the call fails. for information about viewing thislimit, see describeaccountlimits. for information about updating this limit, see auto scaling limits in theamazon ec2 auto scaling user guide.for more information, see auto scaling groups in theamazon ec2 auto scaling user guide.",
	"Method": "CreateAutoScalingGroupResult createAutoScalingGroup(CreateAutoScalingGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateAutoScalingGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDocumentationPartRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDocumentationPartId() != null)\r\n        sb.append(\"DocumentationPartId: \").append(getDocumentationPartId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutGatewayResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.GetAppResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApp() != null)\r\n        sb.append(\"App: \").append(getApp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.viewer.MapViewPane.showMapEntityInfoDialog",
	"Comment": "finds the visible entity next to the specified view coordinates and shows\tinformations about it.",
	"Method": "void showMapEntityInfoDialog(MapEntity entity,boolean debug){\r\n    List<MapEntity> entities = new ArrayList<MapEntity>();\r\n    if (entity.getName() != null || entity.getAttributes().length > 0 || debug)\r\n        entities.add(entity);\r\n    if (entity instanceof MapNode) {\r\n        MapNode mNode = (MapNode) entity;\r\n        for (WayRef ref : mNode.getWayRefs()) {\r\n            MapEntity me = ref.getWay();\r\n            if (me.getName() != null || me.getAttributes().length > 0 || debug)\r\n                entities.add(me);\r\n        }\r\n    }\r\n    boolean done = false;\r\n    for (int i = 0; i < entities.size() && !done; i++) {\r\n        MapEntity me = entities.get(i);\r\n        Object[] content = new Object[] { \"\", \"\", \"\" };\r\n        String text = (me.getName() != null) ? me.getName() : \"\";\r\n        if (debug)\r\n            text += \" (\" + ((me instanceof MapNode) ? \"Node \" : \"Way \") + me.getId() + \")\";\r\n        content[0] = text;\r\n        if (me instanceof MapNode) {\r\n            PositionPanel pos = new PositionPanel();\r\n            pos.setPosition(((MapNode) me).getLat(), ((MapNode) me).getLon());\r\n            pos.setEnabled(false);\r\n            content[1] = pos;\r\n        }\r\n        if (me.getAttributes().length > 0) {\r\n            EntityAttribute[] atts = me.getAttributes();\r\n            String[][] attTexts = new String[atts.length][2];\r\n            for (int j = 0; j < atts.length; j++) {\r\n                attTexts[j][0] = atts[j].getKey();\r\n                attTexts[j][1] = atts[j].getValue();\r\n            }\r\n            JTable table = new JTable(attTexts, new String[] { \"Name\", \"Value\" });\r\n            JScrollPane spane = new JScrollPane(table);\r\n            spane.setPreferredSize(new Dimension(300, 150));\r\n            content[2] = spane;\r\n        }\r\n        Object[] options;\r\n        if (i < entities.size() - 1)\r\n            options = new String[] { \"OK\", \"Next\" };\r\n        else\r\n            options = new String[] { \"OK\" };\r\n        if (JOptionPane.showOptionDialog(this, content, \"Map Entity Info\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]) != 1)\r\n            done = true;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteApiKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.MixedRadixNumber.getCurrentValueFor",
	"Comment": "returns the value of the mixed radix number with the specified array of\tnumerals and the current array of radices.",
	"Method": "long getCurrentValueFor(int[] radixValues){\r\n    if (radixValues.length != radices.length) {\r\n        throw new IllegalArgumentException(\"Radix values not same size as Radices.\");\r\n    }\r\n    long cvalue = 0;\r\n    long mvalue = 1;\r\n    for (int i = 0; i < radixValues.length; i++) {\r\n        if (radixValues[i] < 0 || radixValues[i] >= radices[i]) {\r\n            throw new IllegalArgumentException(\"Radix value \" + i + \" is out of range for radix at this position\");\r\n        }\r\n        if (i > 0) {\r\n            mvalue *= radices[i - 1];\r\n        }\r\n        cvalue += mvalue * radixValues[i];\r\n    }\r\n    return cvalue;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.StepAdjustment.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetricIntervalLowerBound() != null)\r\n        sb.append(\"MetricIntervalLowerBound: \").append(getMetricIntervalLowerBound()).append(\",\");\r\n    if (getMetricIntervalUpperBound() != null)\r\n        sb.append(\"MetricIntervalUpperBound: \").append(getMetricIntervalUpperBound()).append(\",\");\r\n    if (getScalingAdjustment() != null)\r\n        sb.append(\"ScalingAdjustment: \").append(getScalingAdjustment());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.AgentAppFrame.getSelection",
	"Comment": "returns an object which represents the current selection state of all\tselectors.",
	"Method": "SelectionState getSelection(SelectionState getSelection){\r\n    return selectors.getSelection();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProfile() != null)\r\n        sb.append(\"Profile: \").append(getProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.mapping.Mapping.fillMutation",
	"Comment": "map a bean to a column mutation. i.e. set the columns in the mutation tothe corresponding values from the instance",
	"Method": "void fillMutation(T instance,ColumnListMutation<String> mutation){\r\n    for (String fieldName : getNames()) {\r\n        Coercions.setColumnMutationFromField(instance, fields.get(fieldName), fieldName, mutation);\r\n    }\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.queue.ShardedDistributedMessageQueue.peekMessages",
	"Comment": "peek into messages contained in the shard.this call does not take trigger time into accountand will return messages that are not yet due to be executed",
	"Method": "List<Message> peekMessages(int itemsToPeek,Collection<Message> peekMessages,String shardName,int itemsToPeek){\r\n    try {\r\n        ColumnList<MessageQueueEntry> result = keyspace.prepareQuery(queueColumnFamily).setConsistencyLevel(consistencyLevel).getKey(shardName).withColumnRange(new RangeBuilder().setLimit(itemsToPeek).setStart(entrySerializer.makeEndpoint((byte) MessageQueueEntryType.Message.ordinal(), Equality.GREATER_THAN_EQUALS).toBytes()).setEnd(entrySerializer.makeEndpoint((byte) MessageQueueEntryType.Message.ordinal(), Equality.LESS_THAN_EQUALS).toBytes()).build()).execute().getResult();\r\n        List<Message> messages = Lists.newArrayListWithCapacity(result.size());\r\n        for (Column<MessageQueueEntry> column : result) {\r\n            Message message = extractMessageFromColumn(column);\r\n            if (message != null)\r\n                messages.add(message);\r\n        }\r\n        return messages;\r\n    } catch (ConnectionException e) {\r\n        throw new MessageQueueException(\"Error peeking for messages from shard \" + shardName, e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.DeleteGraphqlApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.GetQueryExecutionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionId() != null)\r\n        sb.append(\"QueryExecutionId: \").append(getQueryExecutionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.deleteImageBuilder",
	"Comment": "deletes the specified image builder and releases the capacity.",
	"Method": "DeleteImageBuilderResult deleteImageBuilder(DeleteImageBuilderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteImageBuilder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsapplicationautoscaling using the current builder configuration.",
	"Method": "AWSApplicationAutoScaling build(AwsSyncClientParams params){\r\n    return new AWSApplicationAutoScalingClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.PutScalingPolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyARN() != null)\r\n        sb.append(\"PolicyARN: \").append(getPolicyARN()).append(\",\");\r\n    if (getAlarms() != null)\r\n        sb.append(\"Alarms: \").append(getAlarms());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearchReducedFrontier.isFrontierEmpty",
	"Comment": "checks whether the frontier contains not yet expanded nodes.",
	"Method": "boolean isFrontierEmpty(){\r\n    return frontier.isEmpty();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.Stack.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime()).append(\",\");\r\n    if (getStorageConnectors() != null)\r\n        sb.append(\"StorageConnectors: \").append(getStorageConnectors()).append(\",\");\r\n    if (getRedirectURL() != null)\r\n        sb.append(\"RedirectURL: \").append(getRedirectURL()).append(\",\");\r\n    if (getFeedbackURL() != null)\r\n        sb.append(\"FeedbackURL: \").append(getFeedbackURL()).append(\",\");\r\n    if (getStackErrors() != null)\r\n        sb.append(\"StackErrors: \").append(getStackErrors()).append(\",\");\r\n    if (getUserSettings() != null)\r\n        sb.append(\"UserSettings: \").append(getUserSettings()).append(\",\");\r\n    if (getApplicationSettings() != null)\r\n        sb.append(\"ApplicationSettings: \").append(getApplicationSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.GetRoomRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoomArn() != null)\r\n        sb.append(\"RoomArn: \").append(getRoomArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.parsing.grammars.ProbUnrestrictedGrammar.addRules",
	"Comment": "add a number of rules at once, testing each in turn\tfor validity, and then testing the batch for probability validity.",
	"Method": "boolean addRules(List<Rule> ruleList){\r\n    for (Rule aRuleList : ruleList) {\r\n        if (!validRule(aRuleList))\r\n            return false;\r\n    }\r\n    if (!validateRuleProbabilities(ruleList))\r\n        return false;\r\n    rules = ruleList;\r\n    updateVarsAndTerminals();\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateVpcLinkRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTargetArns() != null)\r\n        sb.append(\"TargetArns: \").append(getTargetArns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GatewayResponse.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getDefaultResponse() != null)\r\n        sb.append(\"DefaultResponse: \").append(getDefaultResponse());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.listNamedQueries",
	"Comment": "provides a list of all available query ids.for code samples using the aws sdk for java, see examples and code samples in theamazon athena user guide.",
	"Method": "ListNamedQueriesResult listNamedQueries(ListNamedQueriesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListNamedQueries(request);\r\n}"
}, {
	"Path": "aima.core.agent.impl.ObjectWithDynamicAttributes.describeType",
	"Comment": "by default, returns the simple name of the underlying class as given in\tthe source code.",
	"Method": "String describeType(){\r\n    return getClass().getSimpleName();\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.AmazonAthenaClient.createNamedQuery",
	"Comment": "creates a named query.for code samples using the aws sdk for java, see examples and code samples in theamazon athena user guide.",
	"Method": "CreateNamedQueryResult createNamedQuery(CreateNamedQueryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateNamedQuery(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateFunctionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDataSourceName() != null)\r\n        sb.append(\"DataSourceName: \").append(getDataSourceName()).append(\",\");\r\n    if (getRequestMappingTemplate() != null)\r\n        sb.append(\"RequestMappingTemplate: \").append(getRequestMappingTemplate()).append(\",\");\r\n    if (getResponseMappingTemplate() != null)\r\n        sb.append(\"ResponseMappingTemplate: \").append(getResponseMappingTemplate()).append(\",\");\r\n    if (getFunctionVersion() != null)\r\n        sb.append(\"FunctionVersion: \").append(getFunctionVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.thrift.ThriftKeyspaceImpl.toThriftKeyspaceDefinition",
	"Comment": "convert a map of options to an internal thrift keyspace definition",
	"Method": "ThriftKeyspaceDefinitionImpl toThriftKeyspaceDefinition(Map<String, Object> options){\r\n    ThriftKeyspaceDefinitionImpl def = new ThriftKeyspaceDefinitionImpl();\r\n    Map<String, Object> internalOptions = Maps.newHashMap();\r\n    if (options != null)\r\n        internalOptions.putAll(options);\r\n    if (internalOptions.containsKey(\"name\") && !internalOptions.get(\"name\").equals(getKeyspaceName())) {\r\n        throw new RuntimeException(String.format(\"'name' attribute must match keyspace name. Expected '%s' but got '%s'\", getKeyspaceName(), internalOptions.get(\"name\")));\r\n    } else {\r\n        internalOptions.put(\"name\", getKeyspaceName());\r\n    }\r\n    def.setFields(internalOptions);\r\n    return def;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetClientCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientCertificateId() != null)\r\n        sb.append(\"ClientCertificateId: \").append(getClientCertificateId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPemEncodedCertificate() != null)\r\n        sb.append(\"PemEncodedCertificate: \").append(getPemEncodedCertificate()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getExpirationDate() != null)\r\n        sb.append(\"ExpirationDate: \").append(getExpirationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.ApiKey.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getExpires() != null)\r\n        sb.append(\"Expires: \").append(getExpires());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteAuthorizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getAuthorizerId() != null)\r\n        sb.append(\"AuthorizerId: \").append(getAuthorizerId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutMethodResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseModels() != null)\r\n        sb.append(\"ResponseModels: \").append(getResponseModels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateUsageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getKeyId() != null)\r\n        sb.append(\"KeyId: \").append(getKeyId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.cql.reads.CFRowRangeQueryGen.bindWhereClauseForRowRange",
	"Comment": "private helper for constructing the bind values for the given row range. note that the assumption here is that \twe have a previously constructed prepared statement that we can bind these values with.",
	"Method": "void bindWhereClauseForRowRange(List<Object> values,RowRange<?> rowRange){\r\n    boolean keyIsPresent = false;\r\n    boolean tokenIsPresent = false;\r\n    if (rowRange.getStartKey() != null || rowRange.getEndKey() != null) {\r\n        keyIsPresent = true;\r\n    }\r\n    if (rowRange.getStartToken() != null || rowRange.getEndToken() != null) {\r\n        tokenIsPresent = true;\r\n    }\r\n    if (keyIsPresent && tokenIsPresent) {\r\n        throw new RuntimeException(\"Cannot provide both token and keys for range query\");\r\n    }\r\n    if (keyIsPresent) {\r\n        if (rowRange.getStartKey() != null) {\r\n            values.add(rowRange.getStartKey());\r\n        }\r\n        if (rowRange.getEndKey() != null) {\r\n            values.add(rowRange.getEndKey());\r\n        }\r\n    } else if (tokenIsPresent) {\r\n        BigInteger startTokenB = rowRange.getStartToken() != null ? new BigInteger(rowRange.getStartToken()) : null;\r\n        BigInteger endTokenB = rowRange.getEndToken() != null ? new BigInteger(rowRange.getEndToken()) : null;\r\n        Long startToken = startTokenB.longValue();\r\n        Long endToken = endTokenB.longValue();\r\n        if (startToken != null && endToken != null) {\r\n            if (startToken != null) {\r\n                values.add(startToken);\r\n            }\r\n            if (endToken != null) {\r\n                values.add(endToken);\r\n            }\r\n        }\r\n        if (rowRange.getCount() > 0) {\r\n        }\r\n        return;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeLifecycleHookTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHookTypes() != null)\r\n        sb.append(\"LifecycleHookTypes: \").append(getLifecycleHookTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteClientCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.robotics.impl.map.MclCartesianPlot2D.loadMap",
	"Comment": "this function loads a map input stream into this cartesian plot. the two streams have to be two different instances to be thread safe.",
	"Method": "void loadMap(InputStream obstacleInput,InputStream areaInput){\r\n    obstaclesException = null;\r\n    areasException = null;\r\n    Thread obstaclesThread = new Thread(new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                obstacles.loadMap(obstacleInput, OBSTACLE_ID);\r\n            } catch (Exception e) {\r\n                obstaclesException = e;\r\n            }\r\n        }\r\n    });\r\n    Thread areasThread = new Thread(new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                areas.loadMap(areaInput, AREA_ID);\r\n            } catch (Exception e) {\r\n                areasException = e;\r\n            }\r\n        }\r\n    });\r\n    obstaclesThread.setDaemon(true);\r\n    areasThread.setDaemon(true);\r\n    obstaclesThread.start();\r\n    areasThread.start();\r\n    try {\r\n        obstaclesThread.join();\r\n        areasThread.join();\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n    if (obstaclesException != null)\r\n        throw obstaclesException;\r\n    if (areasException != null)\r\n        throw areasException;\r\n}"
}, {
	"Path": "aima.core.robotics.impl.map.MclCartesianPlot2D.loadMap",
	"Comment": "this function loads a map input stream into this cartesian plot. the two streams have to be two different instances to be thread safe.",
	"Method": "void loadMap(InputStream obstacleInput,InputStream areaInput){\r\n    try {\r\n        obstacles.loadMap(obstacleInput, OBSTACLE_ID);\r\n    } catch (Exception e) {\r\n        obstaclesException = e;\r\n    }\r\n}"
}, {
	"Path": "aima.core.robotics.impl.map.MclCartesianPlot2D.loadMap",
	"Comment": "this function loads a map input stream into this cartesian plot. the two streams have to be two different instances to be thread safe.",
	"Method": "void loadMap(InputStream obstacleInput,InputStream areaInput){\r\n    try {\r\n        areas.loadMap(areaInput, AREA_ID);\r\n    } catch (Exception e) {\r\n        areasException = e;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateSkillGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupName() != null)\r\n        sb.append(\"SkillGroupName: \").append(getSkillGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDocumentationVersionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDocumentationVersion() != null)\r\n        sb.append(\"DocumentationVersion: \").append(getDocumentationVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.createUsagePlanKey",
	"Comment": "creates a usage plan key for adding an existing api key to a usage plan.",
	"Method": "CreateUsagePlanKeyResult createUsagePlanKey(CreateUsagePlanKeyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateUsagePlanKey(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.describeFleets",
	"Comment": "retrieves a list that describes one or more specified fleets, if the fleet names are provided. otherwise, allfleets in the account are described.",
	"Method": "DescribeFleetsResult describeFleets(DescribeFleetsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeFleets(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DisassociateSkillFromSkillGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillGroupArn() != null)\r\n        sb.append(\"SkillGroupArn: \").append(getSkillGroupArn()).append(\",\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteIntegrationResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutIntegrationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getHttpMethod() != null)\r\n        sb.append(\"HttpMethod: \").append(getHttpMethod()).append(\",\");\r\n    if (getUri() != null)\r\n        sb.append(\"Uri: \").append(getUri()).append(\",\");\r\n    if (getConnectionType() != null)\r\n        sb.append(\"ConnectionType: \").append(getConnectionType()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getCredentials() != null)\r\n        sb.append(\"Credentials: \").append(getCredentials()).append(\",\");\r\n    if (getRequestParameters() != null)\r\n        sb.append(\"RequestParameters: \").append(getRequestParameters()).append(\",\");\r\n    if (getRequestTemplates() != null)\r\n        sb.append(\"RequestTemplates: \").append(getRequestTemplates()).append(\",\");\r\n    if (getPassthroughBehavior() != null)\r\n        sb.append(\"PassthroughBehavior: \").append(getPassthroughBehavior()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling()).append(\",\");\r\n    if (getTimeoutInMillis() != null)\r\n        sb.append(\"TimeoutInMillis: \").append(getTimeoutInMillis()).append(\",\");\r\n    if (getCacheNamespace() != null)\r\n        sb.append(\"CacheNamespace: \").append(getCacheNamespace()).append(\",\");\r\n    if (getCacheKeyParameters() != null)\r\n        sb.append(\"CacheKeyParameters: \").append(getCacheKeyParameters()).append(\",\");\r\n    if (getIntegrationResponses() != null)\r\n        sb.append(\"IntegrationResponses: \").append(getIntegrationResponses());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.GetCertificateAuthorityCsrResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCsr() != null)\r\n        sb.append(\"Csr: \").append(getCsr());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.GraphSearch.addToFrontier",
	"Comment": "inserts the node at the tail of the frontier if the corresponding state\twas not yet explored.",
	"Method": "void addToFrontier(Node<S, A> node){\r\n    if (!explored.contains(node.getState())) {\r\n        frontier.add(node);\r\n        updateMetrics(frontier.size());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.DescribeRouteRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getRouteName() != null)\r\n        sb.append(\"RouteName: \").append(getRouteName()).append(\",\");\r\n    if (getVirtualRouterName() != null)\r\n        sb.append(\"VirtualRouterName: \").append(getVirtualRouterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteGatewayResponseRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getResponseType() != null)\r\n        sb.append(\"ResponseType: \").append(getResponseType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.listDeviceEvents",
	"Comment": "lists the device event history, including device connection status, for up to 30 days.",
	"Method": "ListDeviceEventsResult listDeviceEvents(ListDeviceEventsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListDeviceEvents(request);\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.withTtl",
	"Comment": "this is the ttl on the lock column being written, as opposed to expirelockafter which is written as the lock column value.whereas the expirelockafter can be used to identify a stale or abandoned lock the ttl will result in the stale or abandoned lockbeing eventually deleted by cassandra.set the ttl to a number that is much greatertan the expirelockafter time.",
	"Method": "ColumnPrefixDistributedRowLock<K> withTtl(Integer ttl,ColumnPrefixDistributedRowLock<K> withTtl,Integer ttl,TimeUnit units){\r\n    this.ttl = (int) TimeUnit.SECONDS.convert(ttl, units);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.StopQueryExecutionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.deleteUsagePlanKey",
	"Comment": "deletes a usage plan key and remove the underlying api key from the associated usage plan.",
	"Method": "DeleteUsagePlanKeyResult deleteUsagePlanKey(DeleteUsagePlanKeyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteUsagePlanKey(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeletePolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getPolicyName() != null)\r\n        sb.append(\"PolicyName: \").append(getPolicyName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsacmpca using the current builder configuration.",
	"Method": "AWSACMPCA build(AwsSyncClientParams params){\r\n    return new AWSACMPCAClient(params);\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.OneStepDistributedRowLock.withDataColumns",
	"Comment": "if true the first read will also fetch all the columns in the row as opposed to just the lock columns.",
	"Method": "OneStepDistributedRowLock<K, C> withDataColumns(boolean flag){\r\n    this.readDataColumns = flag;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.MethodResponse.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseModels() != null)\r\n        sb.append(\"ResponseModels: \").append(getResponseModels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeAutoScalingNotificationTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.local.GeneticAlgorithm.addProgressTracer",
	"Comment": "progress tracers can be used to display progress information.",
	"Method": "void addProgressTracer(ProgressTracker<A> pTracer){\r\n    progressTrackers.add(pTracer);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.Resolver.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTypeName() != null)\r\n        sb.append(\"TypeName: \").append(getTypeName()).append(\",\");\r\n    if (getFieldName() != null)\r\n        sb.append(\"FieldName: \").append(getFieldName()).append(\",\");\r\n    if (getDataSourceName() != null)\r\n        sb.append(\"DataSourceName: \").append(getDataSourceName()).append(\",\");\r\n    if (getResolverArn() != null)\r\n        sb.append(\"ResolverArn: \").append(getResolverArn()).append(\",\");\r\n    if (getRequestMappingTemplate() != null)\r\n        sb.append(\"RequestMappingTemplate: \").append(getRequestMappingTemplate()).append(\",\");\r\n    if (getResponseMappingTemplate() != null)\r\n        sb.append(\"ResponseMappingTemplate: \").append(getResponseMappingTemplate()).append(\",\");\r\n    if (getKind() != null)\r\n        sb.append(\"Kind: \").append(getKind()).append(\",\");\r\n    if (getPipelineConfig() != null)\r\n        sb.append(\"PipelineConfig: \").append(getPipelineConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.PSTNDialIn.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCountryCode() != null)\r\n        sb.append(\"CountryCode: \").append(getCountryCode()).append(\",\");\r\n    if (getPhoneNumber() != null)\r\n        sb.append(\"PhoneNumber: \").append(getPhoneNumber()).append(\",\");\r\n    if (getOneClickIdDelay() != null)\r\n        sb.append(\"OneClickIdDelay: \").append(getOneClickIdDelay()).append(\",\");\r\n    if (getOneClickPinDelay() != null)\r\n        sb.append(\"OneClickPinDelay: \").append(getOneClickPinDelay());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.RegisterScalableTargetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDomainNamesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateBusinessReportScheduleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduleName() != null)\r\n        sb.append(\"ScheduleName: \").append(getScheduleName()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName()).append(\",\");\r\n    if (getS3KeyPrefix() != null)\r\n        sb.append(\"S3KeyPrefix: \").append(getS3KeyPrefix()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat()).append(\",\");\r\n    if (getContentRange() != null)\r\n        sb.append(\"ContentRange: \").append(getContentRange()).append(\",\");\r\n    if (getRecurrence() != null)\r\n        sb.append(\"Recurrence: \").append(getRecurrence()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.GetIntrospectionSchemaRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListBusinessReportSchedulesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.visitors.ConvertToNNF.convert",
	"Comment": "returns the specified sentence in its logically equivalent negation\tnormal form.",
	"Method": "Sentence convert(Sentence s){\r\n    Sentence result = null;\r\n    Sentence biconditionalsRemoved = BiconditionalElimination.eliminate(s);\r\n    Sentence implicationsRemoved = ImplicationElimination.eliminate(biconditionalsRemoved);\r\n    Sentence notsMovedIn = MoveNotInwards.moveNotsInward(implicationsRemoved);\r\n    result = notsMovedIn;\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.BatchGetQueryExecutionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueryExecutionIds() != null)\r\n        sb.append(\"QueryExecutionIds: \").append(getQueryExecutionIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ListBusinessReportSchedulesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBusinessReportSchedules() != null)\r\n        sb.append(\"BusinessReportSchedules: \").append(getBusinessReportSchedules()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeScalingActivitiesAsync",
	"Comment": "simplified method form for invoking the describescalingactivities operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync(DescribeScalingActivitiesRequest request,java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync,DescribeScalingActivitiesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeScalingActivitiesRequest, DescribeScalingActivitiesResult> asyncHandler,java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync,java.util.concurrent.Future<DescribeScalingActivitiesResult> describeScalingActivitiesAsync,com.amazonaws.handlers.AsyncHandler<DescribeScalingActivitiesRequest, DescribeScalingActivitiesResult> asyncHandler){\r\n    return describeScalingActivitiesAsync(new DescribeScalingActivitiesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.Deployment.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getApiSummary() != null)\r\n        sb.append(\"ApiSummary: \").append(getApiSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeNotificationConfigurationsAsync",
	"Comment": "simplified method form for invoking the describenotificationconfigurations operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync(DescribeNotificationConfigurationsRequest request,java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync,DescribeNotificationConfigurationsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeNotificationConfigurationsRequest, DescribeNotificationConfigurationsResult> asyncHandler,java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync,java.util.concurrent.Future<DescribeNotificationConfigurationsResult> describeNotificationConfigurationsAsync,com.amazonaws.handlers.AsyncHandler<DescribeNotificationConfigurationsRequest, DescribeNotificationConfigurationsResult> asyncHandler){\r\n    return describeNotificationConfigurationsAsync(new DescribeNotificationConfigurationsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsacmpcaasync using the current builder configuration.",
	"Method": "AWSACMPCAAsync build(AwsAsyncClientParams params){\r\n    return new AWSACMPCAAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchUsersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsers() != null)\r\n        sb.append(\"Users: \").append(getUsers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getTotalCount() != null)\r\n        sb.append(\"TotalCount: \").append(getTotalCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.CreateBranchResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBranch() != null)\r\n        sb.append(\"Branch: \").append(getBranch());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.AgentAppFrame.setSimulationThread",
	"Comment": "sets the current agent thread and updates the enabled state.",
	"Method": "void setSimulationThread(SimulationThread thread){\r\n    simulationThread = thread;\r\n    updateEnabledState();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ImportCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate()).append(\",\");\r\n    if (getPrivateKey() != null)\r\n        sb.append(\"PrivateKey: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getCertificateChain() != null)\r\n        sb.append(\"CertificateChain: \").append(getCertificateChain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteImageBuilderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImageBuilder() != null)\r\n        sb.append(\"ImageBuilder: \").append(getImageBuilder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.parsing.ast.PropositionSymbol.isPropositionSymbolIdentifierStart",
	"Comment": "determine if the given character can be at the beginning of a proposition\tsymbol.",
	"Method": "boolean isPropositionSymbolIdentifierStart(char ch){\r\n    return Character.isJavaIdentifierStart(ch);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.MixedInstancesPolicy.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLaunchTemplate() != null)\r\n        sb.append(\"LaunchTemplate: \").append(getLaunchTemplate()).append(\",\");\r\n    if (getInstancesDistribution() != null)\r\n        sb.append(\"InstancesDistribution: \").append(getInstancesDistribution());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.VirtualNodeData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName()).append(\",\");\r\n    if (getMetadata() != null)\r\n        sb.append(\"Metadata: \").append(getMetadata()).append(\",\");\r\n    if (getSpec() != null)\r\n        sb.append(\"Spec: \").append(getSpec()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getVirtualNodeName() != null)\r\n        sb.append(\"VirtualNodeName: \").append(getVirtualNodeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.nlp.ranking.HITS.matches",
	"Comment": "simple check if query string is a substring of a block of text.",
	"Method": "boolean matches(String query,String text){\r\n    return text.contains(query);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeScheduledActionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduledUpdateGroupActions() != null)\r\n        sb.append(\"ScheduledUpdateGroupActions: \").append(getScheduledUpdateGroupActions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getGatewayResponse",
	"Comment": "gets a gatewayresponse of a specified response type on the given restapi.",
	"Method": "GetGatewayResponseResult getGatewayResponse(GetGatewayResponseRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetGatewayResponse(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.GetQueryResultsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUpdateCount() != null)\r\n        sb.append(\"UpdateCount: \").append(getUpdateCount()).append(\",\");\r\n    if (getResultSet() != null)\r\n        sb.append(\"ResultSet: \").append(getResultSet()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeAccountLimitsAsync",
	"Comment": "simplified method form for invoking the describeaccountlimits operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync(DescribeAccountLimitsRequest request,java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync,DescribeAccountLimitsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAccountLimitsRequest, DescribeAccountLimitsResult> asyncHandler,java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync,java.util.concurrent.Future<DescribeAccountLimitsResult> describeAccountLimitsAsync,com.amazonaws.handlers.AsyncHandler<DescribeAccountLimitsRequest, DescribeAccountLimitsResult> asyncHandler){\r\n    return describeAccountLimitsAsync(new DescribeAccountLimitsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.getRoomSkillParameter",
	"Comment": "gets room skill parameter details by room, skill, and parameter key arn.",
	"Method": "GetRoomSkillParameterResult getRoomSkillParameter(GetRoomSkillParameterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetRoomSkillParameter(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateVpcLinkResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTargetArns() != null)\r\n        sb.append(\"TargetArns: \").append(getTargetArns()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStatusMessage() != null)\r\n        sb.append(\"StatusMessage: \").append(getStatusMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateRestApiResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings()).append(\",\");\r\n    if (getBinaryMediaTypes() != null)\r\n        sb.append(\"BinaryMediaTypes: \").append(getBinaryMediaTypes()).append(\",\");\r\n    if (getMinimumCompressionSize() != null)\r\n        sb.append(\"MinimumCompressionSize: \").append(getMinimumCompressionSize()).append(\",\");\r\n    if (getApiKeySource() != null)\r\n        sb.append(\"ApiKeySource: \").append(getApiKeySource()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration()).append(\",\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeMetricCollectionTypesAsync",
	"Comment": "simplified method form for invoking the describemetriccollectiontypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync(DescribeMetricCollectionTypesRequest request,java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync,DescribeMetricCollectionTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeMetricCollectionTypesRequest, DescribeMetricCollectionTypesResult> asyncHandler,java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync,java.util.concurrent.Future<DescribeMetricCollectionTypesResult> describeMetricCollectionTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeMetricCollectionTypesRequest, DescribeMetricCollectionTypesResult> asyncHandler){\r\n    return describeMetricCollectionTypesAsync(new DescribeMetricCollectionTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetDocumentationVersionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.GetCertificateAuthorityCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate()).append(\",\");\r\n    if (getCertificateChain() != null)\r\n        sb.append(\"CertificateChain: \").append(getCertificateChain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.common.Lexer.loadNextCharacterFromInput",
	"Comment": "loads the next character into the lookahead buffer if the end of the\tstream has not already been reached.",
	"Method": "void loadNextCharacterFromInput(){\r\n    boolean eoiEncountered = false;\r\n    for (int i = 0; i < lookAheadBufferSize - 1; i++) {\r\n        lookAheadBuffer[i] = lookAheadBuffer[i + 1];\r\n        if (isEndOfInput(lookAheadBuffer[i])) {\r\n            eoiEncountered = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!eoiEncountered) {\r\n        lookAheadBuffer[lookAheadBufferSize - 1] = readInput();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.describeImageBuilders",
	"Comment": "retrieves a list that describes one or more specified image builders, if the image builder names are provided.otherwise, all image builders in the account are described.",
	"Method": "DescribeImageBuildersResult describeImageBuilders(DescribeImageBuildersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeImageBuilders(request);\r\n}"
}, {
	"Path": "aima.core.util.datastructure.XYLocation.locationAt",
	"Comment": "returns the location one unit from this location in the specified\tdirection.",
	"Method": "XYLocation locationAt(Direction direction){\r\n    if (direction.equals(Direction.North)) {\r\n        return north();\r\n    }\r\n    if (direction.equals(Direction.South)) {\r\n        return south();\r\n    }\r\n    if (direction.equals(Direction.East)) {\r\n        return east();\r\n    }\r\n    if (direction.equals(Direction.West)) {\r\n        return west();\r\n    } else {\r\n        throw new RuntimeException(\"Unknown direction \" + direction);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.CreateUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserArn() != null)\r\n        sb.append(\"UserArn: \").append(getUserArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateGraphqlApiRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApiId() != null)\r\n        sb.append(\"ApiId: \").append(getApiId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getLogConfig() != null)\r\n        sb.append(\"LogConfig: \").append(getLogConfig()).append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType()).append(\",\");\r\n    if (getUserPoolConfig() != null)\r\n        sb.append(\"UserPoolConfig: \").append(getUserPoolConfig()).append(\",\");\r\n    if (getOpenIDConnectConfig() != null)\r\n        sb.append(\"OpenIDConnectConfig: \").append(getOpenIDConnectConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDomainNameRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.MixedRadixNumber.calculateMaxValue",
	"Comment": "sets the maximum value which can be represented by the current array of\tradices.",
	"Method": "void calculateMaxValue(){\r\n    if (0 == radices.length) {\r\n        throw new IllegalArgumentException(\"At least 1 radix must be defined.\");\r\n    }\r\n    for (int i = 0; i < radices.length; i++) {\r\n        if (radices[i] < 2) {\r\n            throw new IllegalArgumentException(\"Invalid radix, must be >= 2\");\r\n        }\r\n    }\r\n    maxValue = radices[0];\r\n    for (int i = 1; i < radices.length; i++) {\r\n        maxValue *= radices[i];\r\n    }\r\n    maxValue -= 1;\r\n    if (value > maxValue) {\r\n        throw new IllegalArgumentException(\"The value [\" + value + \"] cannot be represented with the radices provided, max value is \" + maxValue);\r\n    }\r\n    currentNumeralValue = new int[radices.length];\r\n}"
}, {
	"Path": "com.netflix.astyanax.recipes.locks.ColumnPrefixDistributedRowLock.releaseAllLocks",
	"Comment": "release all locks. use this carefully as it could release a lock for arunning operation.",
	"Method": "Map<String, Long> releaseAllLocks(){\r\n    return releaseLocks(true);\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.RouteSpec.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHttpRoute() != null)\r\n        sb.append(\"HttpRoute: \").append(getHttpRoute());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeDirectoryConfigsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryNames() != null)\r\n        sb.append(\"DirectoryNames: \").append(getDirectoryNames()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.math.geom.shapes.Point2D.distance",
	"Comment": "returns the euclidean distance between a specified point and this point.",
	"Method": "double distance(Point2D pt){\r\n    final double x_distance = (pt.getX() - x) * (pt.getX() - x);\r\n    final double y_distance = (pt.getY() - y) * (pt.getY() - y);\r\n    return Math.sqrt(x_distance + y_distance);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.viewer.DefaultEntityRenderer.visitTrack",
	"Comment": "classifies the entity and possibly adds it to a buffer for printing.",
	"Method": "void visitTrack(Track track){\r\n    DefaultEntityViewInfo vInfo = (DefaultEntityViewInfo) track.getViewInfo();\r\n    if (vInfo != null && scale >= vInfo.minVisibleScale * displayFactor) {\r\n        trackBuffer.add(track);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteBusinessReportScheduleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScheduleArn() != null)\r\n        sb.append(\"ScheduleArn: \").append(getScheduleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteLifecycleHookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLifecycleHookName() != null)\r\n        sb.append(\"LifecycleHookName: \").append(getLifecycleHookName()).append(\",\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.SetDesiredCapacityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getDesiredCapacity() != null)\r\n        sb.append(\"DesiredCapacity: \").append(getDesiredCapacity()).append(\",\");\r\n    if (getHonorCooldown() != null)\r\n        sb.append(\"HonorCooldown: \").append(getHonorCooldown());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.AWSACMPCAClient.createCertificateAuthorityAuditReport",
	"Comment": "creates an audit report that lists every time that the your ca private key is used. the report is saved in theamazon s3 bucket that you specify on input. the issuecertificate and revokecertificate operationsuse the private key. you can generate a new report every 30 minutes.",
	"Method": "CreateCertificateAuthorityAuditReportResult createCertificateAuthorityAuditReport(CreateCertificateAuthorityAuditReportRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateCertificateAuthorityAuditReport(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.searchDevices",
	"Comment": "searches devices and lists the ones that meet a set of filter criteria.",
	"Method": "SearchDevicesResult searchDevices(SearchDevicesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSearchDevices(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.getUsage",
	"Comment": "gets the usage data of a usage plan in a specified time interval.",
	"Method": "GetUsageResult getUsage(GetUsageRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetUsage(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ExecutePolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getPolicyName() != null)\r\n        sb.append(\"PolicyName: \").append(getPolicyName()).append(\",\");\r\n    if (getHonorCooldown() != null)\r\n        sb.append(\"HonorCooldown: \").append(getHonorCooldown()).append(\",\");\r\n    if (getMetricValue() != null)\r\n        sb.append(\"MetricValue: \").append(getMetricValue()).append(\",\");\r\n    if (getBreachThreshold() != null)\r\n        sb.append(\"BreachThreshold: \").append(getBreachThreshold());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateBasePathMappingResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath()).append(\",\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateFunctionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFunctionConfiguration() != null)\r\n        sb.append(\"FunctionConfiguration: \").append(getFunctionConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UpdateStackRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getStorageConnectors() != null)\r\n        sb.append(\"StorageConnectors: \").append(getStorageConnectors()).append(\",\");\r\n    if (getDeleteStorageConnectors() != null)\r\n        sb.append(\"DeleteStorageConnectors: \").append(getDeleteStorageConnectors()).append(\",\");\r\n    if (getRedirectURL() != null)\r\n        sb.append(\"RedirectURL: \").append(getRedirectURL()).append(\",\");\r\n    if (getFeedbackURL() != null)\r\n        sb.append(\"FeedbackURL: \").append(getFeedbackURL()).append(\",\");\r\n    if (getAttributesToDelete() != null)\r\n        sb.append(\"AttributesToDelete: \").append(getAttributesToDelete()).append(\",\");\r\n    if (getUserSettings() != null)\r\n        sb.append(\"UserSettings: \").append(getUserSettings()).append(\",\");\r\n    if (getApplicationSettings() != null)\r\n        sb.append(\"ApplicationSettings: \").append(getApplicationSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.User.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getCreatedTime() != null)\r\n        sb.append(\"CreatedTime: \").append(getCreatedTime()).append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.fx.framework.IntegratedAppBuilder.getResultFor",
	"Comment": "creates a scene with menu bar and a scalable container pane,\tassigns it to the stage, and returns a controller instance containing\tuser interface logic.",
	"Method": "IntegratedAppPaneCtrl getResultFor(Stage stage){\r\n    final DoubleProperty scale = paneCtrl.scaleProperty();\r\n    BorderPane appPane = new BorderPane();\r\n    appPane.scaleXProperty().bind(scale);\r\n    appPane.scaleYProperty().bind(scale);\r\n    Pane appPaneContainer = new Pane();\r\n    appPaneContainer.getChildren().add(appPane);\r\n    appPane.prefWidthProperty().bind(appPaneContainer.widthProperty().divide(scale));\r\n    appPane.prefHeightProperty().bind(appPaneContainer.heightProperty().divide(scale));\r\n    appPane.translateXProperty().bind(appPaneContainer.widthProperty().subtract(appPane.prefWidthProperty()).divide(2));\r\n    appPane.translateYProperty().bind(appPaneContainer.heightProperty().subtract(appPane.prefHeightProperty()).divide(2));\r\n    paneCtrl.setContext(appPane, stage, title);\r\n    BorderPane root = new BorderPane();\r\n    root.setTop(menuBar);\r\n    root.setCenter(appPaneContainer);\r\n    stage.setScene(new Scene(root, sceneWidth, sceneHeight));\r\n    IntegratedAppPaneCtrl result = paneCtrl;\r\n    paneCtrl = new IntegratedAppPaneCtrl();\r\n    return result;\r\n}"
}, {
	"Path": "aima.core.logic.propositional.visitors.ConvertToCNF.convert",
	"Comment": "returns the specified sentence in its logically equivalent conjunctive\tnormal form.",
	"Method": "Sentence convert(Sentence s){\r\n    Sentence result = null;\r\n    Sentence nnfSentence = ConvertToNNF.convert(s);\r\n    Sentence cnfSentence = DistributeOrOverAnd.distribute(nnfSentence);\r\n    result = cnfSentence;\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.CreateUsagePlanKeyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.framework.qsearch.BidirectionalSearch.addToFrontier",
	"Comment": "inserts the node at the tail of the frontier if the corresponding state\tis not yet explored.",
	"Method": "void addToFrontier(Node<S, A> node){\r\n    if (!isExplored(node)) {\r\n        frontier.add(node);\r\n        updateMetrics(frontier.size());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.UserStackAssociation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStackName() != null)\r\n        sb.append(\"StackName: \").append(getStackName()).append(\",\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAuthenticationType() != null)\r\n        sb.append(\"AuthenticationType: \").append(getAuthenticationType()).append(\",\");\r\n    if (getSendEmailNotification() != null)\r\n        sb.append(\"SendEmailNotification: \").append(getSendEmailNotification());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.BatchPutScheduledUpdateGroupActionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getScheduledUpdateGroupActions() != null)\r\n        sb.append(\"ScheduledUpdateGroupActions: \").append(getScheduledUpdateGroupActions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateUsagePlanRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.AWSApplicationAutoScalingClient.deleteScheduledAction",
	"Comment": "deletes the specified application auto scaling scheduled action.",
	"Method": "DeleteScheduledActionResult deleteScheduledAction(DeleteScheduledActionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteScheduledAction(request);\r\n}"
}, {
	"Path": "aima.core.logic.propositional.parsing.ast.PropositionSymbol.isPropositionSymbol",
	"Comment": "determine if the given symbol is a legal proposition symbol.",
	"Method": "boolean isPropositionSymbol(String symbol){\r\n    return SourceVersion.isIdentifier(symbol);\r\n}"
}, {
	"Path": "aima.gui.swing.applications.AimaDemoFrame.addDemo",
	"Comment": "adds a new command line demo to the menu. the class is expected to be\tpart of a package and to provide a static main method.",
	"Method": "void addDemo(Class<?> demoClass){\r\n    JMenuItem item = addDemoToMenu(demosMenu, demoClass);\r\n    item.addActionListener(new DemoStarter(demoClass));\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.data.Clause.isImplicationDefiniteClause",
	"Comment": "determine if an implication definite clause. an implication definite\tclause is disjunction of literals of which exactly 1 is positive and\tthere is 1 or more negative literals.",
	"Method": "boolean isImplicationDefiniteClause(){\r\n    return isDefiniteClause() && cachedNegativeSymbols.size() >= 1;\r\n}"
}, {
	"Path": "aima.gui.swing.applications.robotics.components.Settings.notifyAllListeners",
	"Comment": "notifies all registered listeners about the current value of the key they are listening on.",
	"Method": "void notifyAllListeners(){\r\n    for (Entry<String, SettingsListenerList> entry : listeners.entrySet()) {\r\n        entry.getValue().notify(entry.getKey(), values.getProperty(entry.getKey()));\r\n    }\r\n    for (SpecialSetting special : specials.values()) {\r\n        special.notifyChangeListener();\r\n    }\r\n}"
}, {
	"Path": "aimax.osm.routing.RouteCalculator.calculateRoute",
	"Comment": "template method, responsible for shortest path generation between two map\tnodes. it searches for way nodes in the vicinity of the given nodes which\tcomply with the specified way selection, searches for a suitable paths,\tand adds the paths as tracks to the provided map. various\tfactory methods can be used to override aspects of the default behavior\tin subclasses if needed.",
	"Method": "List<Position> calculateRoute(List<MapNode> markers,OsmMap map,int taskSelection){\r\n    List<Position> result = new ArrayList();\r\n    try {\r\n        MapWayFilter wayFilter = createMapWayFilter(map, taskSelection);\r\n        boolean ignoreOneways = (taskSelection == 0);\r\n        List<MapNode[]> pNodeList = subdivideProblem(markers, map, wayFilter);\r\n        MapNode prevNode = null;\r\n        for (int i = 0; i < pNodeList.size() && !Tasks.currIsCancelled(); i++) {\r\n            Problem<MapNode, OsmMoveAction> problem = createProblem(pNodeList.get(i), map, wayFilter, ignoreOneways, taskSelection);\r\n            ToDoubleFunction<Node<MapNode, OsmMoveAction>> h = createHeuristicFunction(pNodeList.get(i), taskSelection);\r\n            SearchForActions<MapNode, OsmMoveAction> search = createSearch(h, taskSelection);\r\n            Optional<List<OsmMoveAction>> actions = search.findActions(problem);\r\n            if (!actions.isPresent())\r\n                break;\r\n            for (Object action : actions.get()) {\r\n                if (action instanceof OsmMoveAction) {\r\n                    OsmMoveAction a = (OsmMoveAction) action;\r\n                    for (MapNode node : a.getNodes()) {\r\n                        if (prevNode != node) {\r\n                            result.add(new Position(node.getLat(), node.getLon()));\r\n                            prevNode = node;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateAccountResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCloudwatchRoleArn() != null)\r\n        sb.append(\"CloudwatchRoleArn: \").append(getCloudwatchRoleArn()).append(\",\");\r\n    if (getThrottleSettings() != null)\r\n        sb.append(\"ThrottleSettings: \").append(getThrottleSettings()).append(\",\");\r\n    if (getFeatures() != null)\r\n        sb.append(\"Features: \").append(getFeatures()).append(\",\");\r\n    if (getApiKeyVersion() != null)\r\n        sb.append(\"ApiKeyVersion: \").append(getApiKeyVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetSdkResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType()).append(\",\");\r\n    if (getContentDisposition() != null)\r\n        sb.append(\"ContentDisposition: \").append(getContentDisposition()).append(\",\");\r\n    if (getBody() != null)\r\n        sb.append(\"Body: \").append(getBody());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteImagePermissionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "aima.core.environment.wumpusworld.WumpusKnowledgeBase.disableNavSentences",
	"Comment": "disables creation of computational expensive temporal navigation sentences.",
	"Method": "void disableNavSentences(){\r\n    disableNavSentences = true;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteDocumentationPartResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.search.csp.FlexibleBacktrackingSolver.inference",
	"Comment": "primitive operation, which tries to optimize the csp representation with respect to a new assignment.",
	"Method": "InferenceLog<VAR, VAL> inference(CSP<VAR, VAL> csp,Assignment<VAR, VAL> assignment,VAR var){\r\n    if (inferenceStrategy != null)\r\n        return inferenceStrategy.apply(csp, assignment, var);\r\n    else\r\n        return InferenceLog.emptyLog();\r\n}"
}, {
	"Path": "aima.core.environment.nqueens.NQueensFunctions.createAttackingPairsHeuristicFunction",
	"Comment": "estimates the distance to goal by the number of attacking pairs of queens onthe board.",
	"Method": "ToDoubleFunction<Node<NQueensBoard, QueenAction>> createAttackingPairsHeuristicFunction(){\r\n    return node -> node.getState().getNumberOfAttackingPairs();\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.AWSAppSyncAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.QueryExecutionStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getStateChangeReason() != null)\r\n        sb.append(\"StateChangeReason: \").append(getStateChangeReason()).append(\",\");\r\n    if (getSubmissionDateTime() != null)\r\n        sb.append(\"SubmissionDateTime: \").append(getSubmissionDateTime()).append(\",\");\r\n    if (getCompletionDateTime() != null)\r\n        sb.append(\"CompletionDateTime: \").append(getCompletionDateTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.fx.applications.RoutePlannerOsmApp.createRouteCalculator",
	"Comment": "factory method for the routing component. subclasses can override it andprovide more advanced routing algorithms.",
	"Method": "RouteCalculator createRouteCalculator(){\r\n    return new RouteCalculator();\r\n}"
}, {
	"Path": "aima.core.util.datastructure.LabeledGraph.isVertexLabel",
	"Comment": "checks whether the given label is the label of one of the vertices.",
	"Method": "boolean isVertexLabel(VertexLabelType v){\r\n    return globalEdgeLookup.get(v) != null;\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.DescribeCertificateAuthorityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteBranchRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getBranchName() != null)\r\n        sb.append(\"BranchName: \").append(getBranchName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.netflix.astyanax.connectionpool.impl.AbstractExecuteWithFailoverImpl.tryOperation",
	"Comment": "basic impl that repeatedly borrows a conn and tries to execute the operation while maintaining metrics for \tsuccess, conn attempts, failures and latencies for operation executions",
	"Method": "OperationResult<R> tryOperation(Operation<CL, R> operation){\r\n    Operation<CL, R> filteredOperation = config.getOperationFilterFactory().attachFilter(operation);\r\n    while (true) {\r\n        attemptCounter++;\r\n        try {\r\n            connection = borrowConnection(filteredOperation);\r\n            startTime = System.currentTimeMillis();\r\n            OperationResult<R> result = connection.execute(filteredOperation);\r\n            result.setAttemptsCount(attemptCounter);\r\n            monitor.incOperationSuccess(getCurrentHost(), result.getLatency());\r\n            return result;\r\n        } catch (Exception e) {\r\n            ConnectionException ce = (e instanceof ConnectionException) ? (ConnectionException) e : new UnknownException(e);\r\n            try {\r\n                informException(ce);\r\n                monitor.incFailover(ce.getHost(), ce);\r\n            } catch (ConnectionException ex) {\r\n                monitor.incOperationFailure(getCurrentHost(), ex);\r\n                throw ex;\r\n            }\r\n        } finally {\r\n            releaseConnection();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.UpdateResolverResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResolver() != null)\r\n        sb.append(\"Resolver: \").append(getResolver());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.logic.propositional.kb.KnowledgeBase.asSentence",
	"Comment": "returns the list of sentences in the knowledge base chained together as a\tsingle sentence.",
	"Method": "Sentence asSentence(){\r\n    return Sentence.newConjunction(sentences);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.associateDeviceWithRoom",
	"Comment": "associates a device with a given room. this applies all the settings from the room profile to the device, and allthe skills in any skill groups added to that room. this operation requires the device to be online, or else amanual sync is required.",
	"Method": "AssociateDeviceWithRoomResult associateDeviceWithRoom(AssociateDeviceWithRoomRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateDeviceWithRoom(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeTerminationPolicyTypesAsync",
	"Comment": "simplified method form for invoking the describeterminationpolicytypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync(DescribeTerminationPolicyTypesRequest request,java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync,DescribeTerminationPolicyTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeTerminationPolicyTypesRequest, DescribeTerminationPolicyTypesResult> asyncHandler,java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync,java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeTerminationPolicyTypesRequest, DescribeTerminationPolicyTypesResult> asyncHandler){\r\n    return describeTerminationPolicyTypesAsync(new DescribeTerminationPolicyTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.Step.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStepName() != null)\r\n        sb.append(\"StepName: \").append(getStepName()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getLogUrl() != null)\r\n        sb.append(\"LogUrl: \").append(getLogUrl()).append(\",\");\r\n    if (getArtifactsUrl() != null)\r\n        sb.append(\"ArtifactsUrl: \").append(getArtifactsUrl()).append(\",\");\r\n    if (getScreenshots() != null)\r\n        sb.append(\"Screenshots: \").append(getScreenshots());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.DeleteCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetAuthorizersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.KeyUsage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.Position.getDistKM",
	"Comment": "computes the distance between two positions on the earth surface using\tthe haversine formula.",
	"Method": "double getDistKM(MapEntity entity,double getDistKM,float lat1,float lon1,float lat2,float lon2){\r\n    double dLat = Math.toRadians(lat2 - lat1);\r\n    double dLon = Math.toRadians(lon2 - lon1);\r\n    double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return EARTH_RADIUS * c;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.PutScalingPolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyName() != null)\r\n        sb.append(\"PolicyName: \").append(getPolicyName()).append(\",\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getPolicyType() != null)\r\n        sb.append(\"PolicyType: \").append(getPolicyType()).append(\",\");\r\n    if (getStepScalingPolicyConfiguration() != null)\r\n        sb.append(\"StepScalingPolicyConfiguration: \").append(getStepScalingPolicyConfiguration()).append(\",\");\r\n    if (getTargetTrackingScalingPolicyConfiguration() != null)\r\n        sb.append(\"TargetTrackingScalingPolicyConfiguration: \").append(getTargetTrackingScalingPolicyConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.batchDisassociateUserStack",
	"Comment": "disassociates the specified users from the specified stacks.",
	"Method": "BatchDisassociateUserStackResult batchDisassociateUserStack(BatchDisassociateUserStackRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchDisassociateUserStack(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.InstanceMonitoring.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateImageBuilderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getImageName() != null)\r\n        sb.append(\"ImageName: \").append(getImageName()).append(\",\");\r\n    if (getImageArn() != null)\r\n        sb.append(\"ImageArn: \").append(getImageArn()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDisplayName() != null)\r\n        sb.append(\"DisplayName: \").append(getDisplayName()).append(\",\");\r\n    if (getVpcConfig() != null)\r\n        sb.append(\"VpcConfig: \").append(getVpcConfig()).append(\",\");\r\n    if (getEnableDefaultInternetAccess() != null)\r\n        sb.append(\"EnableDefaultInternetAccess: \").append(getEnableDefaultInternetAccess()).append(\",\");\r\n    if (getDomainJoinInfo() != null)\r\n        sb.append(\"DomainJoinInfo: \").append(getDomainJoinInfo()).append(\",\");\r\n    if (getAppstreamAgentVersion() != null)\r\n        sb.append(\"AppstreamAgentVersion: \").append(getAppstreamAgentVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.ListTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.data.EntityAttributeManager.intern",
	"Comment": "checks whether att has to be ignored with respect to\tthe attribute filter in use. otherwise att is added to\tthe internal hash tables and the interned version of it is returned.",
	"Method": "EntityAttribute intern(EntityAttribute att,String intern,String text){\r\n    String result = internedTexts.get(text);\r\n    if (result == null) {\r\n        internedTexts.put(text, text);\r\n        result = text;\r\n    }\r\n    return text;\r\n}"
}, {
	"Path": "aimax.osm.viewer.CoordTransformer.lon",
	"Comment": "computes the corresponding longitude for a given view x coordinate.",
	"Method": "float lon(int x){\r\n    return x / (dotsPerDeg * lonCorr) + originLon;\r\n}"
}, {
	"Path": "com.ihongqiqu.util.FileUtils.isFolderExist",
	"Comment": "indicates if this file represents a directory on the underlying filesystem.",
	"Method": "boolean isFolderExist(String directoryPath){\r\n    if (TextUtils.isEmpty(directoryPath)) {\r\n        return false;\r\n    }\r\n    File dire = new File(directoryPath);\r\n    return (dire.exists() && dire.isDirectory());\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteLifecycleHookResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.PutIntegrationResponseResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatusCode() != null)\r\n        sb.append(\"StatusCode: \").append(getStatusCode()).append(\",\");\r\n    if (getSelectionPattern() != null)\r\n        sb.append(\"SelectionPattern: \").append(getSelectionPattern()).append(\",\");\r\n    if (getResponseParameters() != null)\r\n        sb.append(\"ResponseParameters: \").append(getResponseParameters()).append(\",\");\r\n    if (getResponseTemplates() != null)\r\n        sb.append(\"ResponseTemplates: \").append(getResponseTemplates()).append(\",\");\r\n    if (getContentHandling() != null)\r\n        sb.append(\"ContentHandling: \").append(getContentHandling());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.datastructure.LabeledGraph.getSuccessors",
	"Comment": "returns the labels of those vertices which can be obtained by following\tthe edges starting at the specified vertex.",
	"Method": "List<VertexLabelType> getSuccessors(VertexLabelType v){\r\n    List<VertexLabelType> result = new ArrayList<VertexLabelType>();\r\n    Hashtable<VertexLabelType, EdgeLabelType> localEdgeLookup = globalEdgeLookup.get(v);\r\n    if (localEdgeLookup != null)\r\n        result.addAll(localEdgeLookup.keySet());\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetModelsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getItems() != null)\r\n        sb.append(\"Items: \").append(getItems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.describeAutoScalingNotificationTypes",
	"Comment": "describes the notification types that are supported by amazon ec2 auto scaling.",
	"Method": "DescribeAutoScalingNotificationTypesResult describeAutoScalingNotificationTypes(DescribeAutoScalingNotificationTypesRequest request,DescribeAutoScalingNotificationTypesResult describeAutoScalingNotificationTypes){\r\n    return describeAutoScalingNotificationTypes(new DescribeAutoScalingNotificationTypesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.ImportCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDomainNameResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getCertificateName() != null)\r\n        sb.append(\"CertificateName: \").append(getCertificateName()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getCertificateUploadDate() != null)\r\n        sb.append(\"CertificateUploadDate: \").append(getCertificateUploadDate()).append(\",\");\r\n    if (getRegionalDomainName() != null)\r\n        sb.append(\"RegionalDomainName: \").append(getRegionalDomainName()).append(\",\");\r\n    if (getRegionalHostedZoneId() != null)\r\n        sb.append(\"RegionalHostedZoneId: \").append(getRegionalHostedZoneId()).append(\",\");\r\n    if (getRegionalCertificateName() != null)\r\n        sb.append(\"RegionalCertificateName: \").append(getRegionalCertificateName()).append(\",\");\r\n    if (getRegionalCertificateArn() != null)\r\n        sb.append(\"RegionalCertificateArn: \").append(getRegionalCertificateArn()).append(\",\");\r\n    if (getDistributionDomainName() != null)\r\n        sb.append(\"DistributionDomainName: \").append(getDistributionDomainName()).append(\",\");\r\n    if (getDistributionHostedZoneId() != null)\r\n        sb.append(\"DistributionHostedZoneId: \").append(getDistributionHostedZoneId()).append(\",\");\r\n    if (getEndpointConfiguration() != null)\r\n        sb.append(\"EndpointConfiguration: \").append(getEndpointConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeTerminationPolicyTypesAsync",
	"Comment": "simplified method form for invoking the describeterminationpolicytypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync(DescribeTerminationPolicyTypesRequest request,java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync,DescribeTerminationPolicyTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeTerminationPolicyTypesRequest, DescribeTerminationPolicyTypesResult> asyncHandler,java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync,java.util.concurrent.Future<DescribeTerminationPolicyTypesResult> describeTerminationPolicyTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeTerminationPolicyTypesRequest, DescribeTerminationPolicyTypesResult> asyncHandler){\r\n    return describeTerminationPolicyTypesAsync(new DescribeTerminationPolicyTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.tagResource",
	"Comment": "adds or overwrites one or more tags for the specified appstream 2.0 resource. you can tag appstream 2.0 imagebuilders, images, fleets, and stacks.each tag consists of a key and an optional value. if a resource already has a tag with the same key, thisoperation updates its value.to list the current tags for your resources, use listtagsforresource. to disassociate tags from yourresources, use untagresource.for more information about tags, see tagging your resourcesin the amazon appstream 2.0 developer guide.",
	"Method": "TagResourceResult tagResource(TagResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeTagResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteImageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.gui.swing.applications.RoutePlannerApp.actionPerformed",
	"Comment": "starts route generation after the calculate button has been pressed.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    if (e.getSource() == calcButton) {\r\n        OsmMap map = frame.getMap();\r\n        List<Position> positions = routeCalculator.calculateRoute(map.getMarkers(), map, taskSelection.getSelectedIndex());\r\n        frame.getMap().createTrack(ROUTE_TRACK_NAME, positions);\r\n    }\r\n}"
}, {
	"Path": "aimax.osm.data.impl.DefaultMapNode.addWayRef",
	"Comment": "adds the information to the node that it is part of the specified way.",
	"Method": "void addWayRef(MapWay way,int nodeIdx){\r\n    if (ways == null)\r\n        ways = new ArrayList<WayRef>(2);\r\n    if (ways.isEmpty() || ways.get(0) != way)\r\n        ways.add(new DefaultWayRef(way, (short) nodeIdx));\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateModelResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.fx.framework.TaskExecutionPaneCtrl.setState",
	"Comment": "can be called from fx application threads and other threads as well.",
	"Method": "void setState(State newState){\r\n    if (Platform.isFxApplicationThread())\r\n        state.set(newState);\r\n    else\r\n        Platform.runLater(() -> state.set(newState));\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeDirectoryConfigsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryConfigs() != null)\r\n        sb.append(\"DirectoryConfigs: \").append(getDirectoryConfigs()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DeleteImageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImage() != null)\r\n        sb.append(\"Image: \").append(getImage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.searchUsers",
	"Comment": "searches users and lists the ones that meet a set of filter and sort criteria.",
	"Method": "SearchUsersResult searchUsers(SearchUsersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSearchUsers(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appsync.model.CreateDataSourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDataSource() != null)\r\n        sb.append(\"DataSource: \").append(getDataSource());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.setInstanceHealth",
	"Comment": "sets the health status of the specified instance.for more information, see healthchecks in the amazon ec2 auto scaling user guide.",
	"Method": "SetInstanceHealthResult setInstanceHealth(SetInstanceHealthRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSetInstanceHealth(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDocumentationPartRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getDocumentationPartId() != null)\r\n        sb.append(\"DocumentationPartId: \").append(getDocumentationPartId()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.CrlConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getExpirationInDays() != null)\r\n        sb.append(\"ExpirationInDays: \").append(getExpirationInDays()).append(\",\");\r\n    if (getCustomCname() != null)\r\n        sb.append(\"CustomCname: \").append(getCustomCname()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.AmazonAlexaForBusinessClient.associateSkillGroupWithRoom",
	"Comment": "associates a skill group with a given room. this enables all skills in the associated skill group on all devicesin the room.",
	"Method": "AssociateSkillGroupWithRoomResult associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateSkillGroupWithRoom(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.AmazonAppStreamClient.deleteStack",
	"Comment": "deletes the specified stack. after the stack is deleted, the application streaming environment provided by thestack is no longer available to users. also, any reservations made for application streaming sessions for thestack are released.",
	"Method": "DeleteStackResult deleteStack(DeleteStackRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteStack(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetModelsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getPosition() != null)\r\n        sb.append(\"Position: \").append(getPosition()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.BatchDisassociateUserStackResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getErrors() != null)\r\n        sb.append(\"Errors: \").append(getErrors());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteRoomResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.util.datastructure.TwoKeyHashMap.containsKey",
	"Comment": "returns true if this map contains a mapping for the\tspecified key pair.",
	"Method": "boolean containsKey(K1 key1,K2 key2){\r\n    return super.containsKey(new Pair<K1, K2>(key1, key2));\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.RegisterAVSDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(getClientId()).append(\",\");\r\n    if (getUserCode() != null)\r\n        sb.append(\"UserCode: \").append(getUserCode()).append(\",\");\r\n    if (getProductId() != null)\r\n        sb.append(\"ProductId: \").append(getProductId()).append(\",\");\r\n    if (getDeviceSerialNumber() != null)\r\n        sb.append(\"DeviceSerialNumber: \").append(getDeviceSerialNumber()).append(\",\");\r\n    if (getAmazonId() != null)\r\n        sb.append(\"AmazonId: \").append(getAmazonId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.DecisionNetwork.getExpectedUtility",
	"Comment": "calculates the expected utility of an action in the presence of a certain random variable.",
	"Method": "double getExpectedUtility(RandomVariable action,List<AssignmentProposition> evidence){\r\n    double utility = 0;\r\n    CategoricalDistribution distribution = inferenceProcedure.ask((new RandomVariable[] { action }), ((AssignmentProposition[]) evidence.toArray()), this.getNetwork());\r\n    for (Object value : ((FiniteDomain) action.getDomain()).getPossibleValues()) {\r\n        utility += distribution.getValue(value) * this.getUtilityForAction(action, value);\r\n    }\r\n    return utility;\r\n}"
}, {
	"Path": "aima.core.logic.fol.StandardizeApartIndexicalFactory.flush",
	"Comment": "for use in test cases, where predictable behavior is expected.",
	"Method": "void flush(){\r\n    synchronized (_assignedIndexicals) {\r\n        _assignedIndexicals.clear();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.model.MeshRef.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getMeshName() != null)\r\n        sb.append(\"MeshName: \").append(getMeshName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AdjustmentType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAdjustmentType() != null)\r\n        sb.append(\"AdjustmentType: \").append(getAdjustmentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetUsagePlanKeyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsagePlanId() != null)\r\n        sb.append(\"UsagePlanId: \").append(getUsagePlanId()).append(\",\");\r\n    if (getKeyId() != null)\r\n        sb.append(\"KeyId: \").append(getKeyId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DescribeTerminationPolicyTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTerminationPolicyTypes() != null)\r\n        sb.append(\"TerminationPolicyTypes: \").append(getTerminationPolicyTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AbstractAmazonAutoScalingAsync.describeLaunchConfigurationsAsync",
	"Comment": "simplified method form for invoking the describelaunchconfigurations operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync(DescribeLaunchConfigurationsRequest request,java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync,DescribeLaunchConfigurationsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeLaunchConfigurationsRequest, DescribeLaunchConfigurationsResult> asyncHandler,java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync,java.util.concurrent.Future<DescribeLaunchConfigurationsResult> describeLaunchConfigurationsAsync,com.amazonaws.handlers.AsyncHandler<DescribeLaunchConfigurationsRequest, DescribeLaunchConfigurationsResult> asyncHandler){\r\n    return describeLaunchConfigurationsAsync(new DescribeLaunchConfigurationsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.athena.model.DeleteNamedQueryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.gui.swing.framework.EmptyEnvironmentView.paintComponent",
	"Comment": "shows a graphical representation of the agent in its environment.\toverride this dummy implementation to get a useful view of the agent!",
	"Method": "void paintComponent(java.awt.Graphics g){\r\n    java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;\r\n    g2.setBackground(Color.white);\r\n    g2.clearRect(0, 0, getWidth(), getHeight());\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateDeploymentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getCreatedDate() != null)\r\n        sb.append(\"CreatedDate: \").append(getCreatedDate()).append(\",\");\r\n    if (getApiSummary() != null)\r\n        sb.append(\"ApiSummary: \").append(getApiSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DescribeScalingActivitiesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScalingActivities() != null)\r\n        sb.append(\"ScalingActivities: \").append(getScalingActivities()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.CertificateDetail.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getSubjectAlternativeNames() != null)\r\n        sb.append(\"SubjectAlternativeNames: \").append(getSubjectAlternativeNames()).append(\",\");\r\n    if (getDomainValidationOptions() != null)\r\n        sb.append(\"DomainValidationOptions: \").append(getDomainValidationOptions()).append(\",\");\r\n    if (getSerial() != null)\r\n        sb.append(\"Serial: \").append(getSerial()).append(\",\");\r\n    if (getSubject() != null)\r\n        sb.append(\"Subject: \").append(getSubject()).append(\",\");\r\n    if (getIssuer() != null)\r\n        sb.append(\"Issuer: \").append(getIssuer()).append(\",\");\r\n    if (getCreatedAt() != null)\r\n        sb.append(\"CreatedAt: \").append(getCreatedAt()).append(\",\");\r\n    if (getIssuedAt() != null)\r\n        sb.append(\"IssuedAt: \").append(getIssuedAt()).append(\",\");\r\n    if (getImportedAt() != null)\r\n        sb.append(\"ImportedAt: \").append(getImportedAt()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getRevokedAt() != null)\r\n        sb.append(\"RevokedAt: \").append(getRevokedAt()).append(\",\");\r\n    if (getRevocationReason() != null)\r\n        sb.append(\"RevocationReason: \").append(getRevocationReason()).append(\",\");\r\n    if (getNotBefore() != null)\r\n        sb.append(\"NotBefore: \").append(getNotBefore()).append(\",\");\r\n    if (getNotAfter() != null)\r\n        sb.append(\"NotAfter: \").append(getNotAfter()).append(\",\");\r\n    if (getKeyAlgorithm() != null)\r\n        sb.append(\"KeyAlgorithm: \").append(getKeyAlgorithm()).append(\",\");\r\n    if (getSignatureAlgorithm() != null)\r\n        sb.append(\"SignatureAlgorithm: \").append(getSignatureAlgorithm()).append(\",\");\r\n    if (getInUseBy() != null)\r\n        sb.append(\"InUseBy: \").append(getInUseBy()).append(\",\");\r\n    if (getFailureReason() != null)\r\n        sb.append(\"FailureReason: \").append(getFailureReason()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getRenewalSummary() != null)\r\n        sb.append(\"RenewalSummary: \").append(getRenewalSummary()).append(\",\");\r\n    if (getKeyUsages() != null)\r\n        sb.append(\"KeyUsages: \").append(getKeyUsages()).append(\",\");\r\n    if (getExtendedKeyUsages() != null)\r\n        sb.append(\"ExtendedKeyUsages: \").append(getExtendedKeyUsages()).append(\",\");\r\n    if (getCertificateAuthorityArn() != null)\r\n        sb.append(\"CertificateAuthorityArn: \").append(getCertificateAuthorityArn()).append(\",\");\r\n    if (getRenewalEligibility() != null)\r\n        sb.append(\"RenewalEligibility: \").append(getRenewalEligibility()).append(\",\");\r\n    if (getOptions() != null)\r\n        sb.append(\"Options: \").append(getOptions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.UpdateContactResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.UpdateDomainAssociationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getEnableAutoSubDomain() != null)\r\n        sb.append(\"EnableAutoSubDomain: \").append(getEnableAutoSubDomain()).append(\",\");\r\n    if (getSubDomainSettings() != null)\r\n        sb.append(\"SubDomainSettings: \").append(getSubDomainSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DeleteDomainAssociationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppId() != null)\r\n        sb.append(\"AppId: \").append(getAppId()).append(\",\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.RevokeCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.updateRoute",
	"Comment": "updates an existing route for a specified service mesh and virtual router.",
	"Method": "UpdateRouteResult updateRoute(UpdateRouteRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateRoute(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.DeleteAddressBookRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddressBookArn() != null)\r\n        sb.append(\"AddressBookArn: \").append(getAddressBookArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.model.DescribeCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.DescribeScalableTargetsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceNamespace() != null)\r\n        sb.append(\"ServiceNamespace: \").append(getServiceNamespace()).append(\",\");\r\n    if (getResourceIds() != null)\r\n        sb.append(\"ResourceIds: \").append(getResourceIds()).append(\",\");\r\n    if (getScalableDimension() != null)\r\n        sb.append(\"ScalableDimension: \").append(getScalableDimension()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.AttachLoadBalancersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLoadBalancerNames() != null)\r\n        sb.append(\"LoadBalancerNames: \").append(getLoadBalancerNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.amplify.model.DomainAssociation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainAssociationArn() != null)\r\n        sb.append(\"DomainAssociationArn: \").append(getDomainAssociationArn()).append(\",\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getEnableAutoSubDomain() != null)\r\n        sb.append(\"EnableAutoSubDomain: \").append(getEnableAutoSubDomain()).append(\",\");\r\n    if (getDomainStatus() != null)\r\n        sb.append(\"DomainStatus: \").append(getDomainStatus()).append(\",\");\r\n    if (getStatusReason() != null)\r\n        sb.append(\"StatusReason: \").append(getStatusReason()).append(\",\");\r\n    if (getCertificateVerificationDNSRecord() != null)\r\n        sb.append(\"CertificateVerificationDNSRecord: \").append(getCertificateVerificationDNSRecord()).append(\",\");\r\n    if (getSubDomains() != null)\r\n        sb.append(\"SubDomains: \").append(getSubDomains());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteStageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRestApiId() != null)\r\n        sb.append(\"RestApiId: \").append(getRestApiId()).append(\",\");\r\n    if (getStageName() != null)\r\n        sb.append(\"StageName: \").append(getStageName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appmesh.AWSAppMeshClient.createMesh",
	"Comment": "creates a new service mesh. a service mesh is a logical boundary for network traffic between the services thatreside within it.after you create your service mesh, you can create virtual nodes, virtual routers, and routes to distributetraffic between the applications in your mesh.",
	"Method": "CreateMeshResult createMesh(CreateMeshRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateMesh(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UsagePlan.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getApiStages() != null)\r\n        sb.append(\"ApiStages: \").append(getApiStages()).append(\",\");\r\n    if (getThrottle() != null)\r\n        sb.append(\"Throttle: \").append(getThrottle()).append(\",\");\r\n    if (getQuota() != null)\r\n        sb.append(\"Quota: \").append(getQuota()).append(\",\");\r\n    if (getProductCode() != null)\r\n        sb.append(\"ProductCode: \").append(getProductCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchRoomsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRooms() != null)\r\n        sb.append(\"Rooms: \").append(getRooms()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getTotalCount() != null)\r\n        sb.append(\"TotalCount: \").append(getTotalCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.ProcessType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProcessName() != null)\r\n        sb.append(\"ProcessName: \").append(getProcessName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingClient.createOrUpdateTags",
	"Comment": "creates or updates tags for the specified auto scaling group.when you specify a tag with a key that already exists, the operation overwrites the previous tag definition, andyou do not get an error message.for more information, see tagging auto scaling groupsand instances in the amazon ec2 auto scaling user guide.",
	"Method": "CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateOrUpdateTags(request);\r\n}"
}, {
	"Path": "aima.core.logic.planning.GraphPlanAlgorithm.levelledOff",
	"Comment": "a graph is said to be levelled off if two consecutive levels are identical.",
	"Method": "boolean levelledOff(Graph graph){\r\n    if (graph.numLevels() < 2)\r\n        return false;\r\n    return graph.levels.get(graph.numLevels() - 1).equals(graph.levels.get(graph.numLevels() - 2));\r\n}"
}, {
	"Path": "com.amazonaws.services.certificatemanager.AWSCertificateManagerClient.deleteCertificate",
	"Comment": "deletes a certificate and its associated private key. if this action succeeds, the certificate no longer appearsin the list that can be displayed by calling the listcertificates action or be retrieved by calling thegetcertificate action. the certificate will not be available for use by aws services integrated with acm.you cannot delete an acm certificate that is being used by another aws service. to delete a certificate that isin use, the certificate association must first be removed.",
	"Method": "DeleteCertificateResult deleteCertificate(DeleteCertificateRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteCertificate(request);\r\n}"
}, {
	"Path": "aima.core.probability.util.ProbUtil.expectedSizeOfProbabilityTable",
	"Comment": "calculated the expected size of a probabilitytable for the provided\trandom variables.",
	"Method": "int expectedSizeOfProbabilityTable(RandomVariable vars){\r\n    int expectedSizeOfDistribution = 1;\r\n    if (null != vars) {\r\n        for (RandomVariable rv : vars) {\r\n            if (!(rv.getDomain() instanceof FiniteDomain)) {\r\n                throw new IllegalArgumentException(\"Cannot have an infinite domain for a variable in this calculation:\" + rv);\r\n            }\r\n            FiniteDomain d = (FiniteDomain) rv.getDomain();\r\n            expectedSizeOfDistribution *= d.size();\r\n        }\r\n    }\r\n    return expectedSizeOfDistribution;\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.ApproveSkillRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayClient.updateGatewayResponse",
	"Comment": "updates a gatewayresponse of a specified response type on the given restapi.",
	"Method": "UpdateGatewayResponseResult updateGatewayResponse(UpdateGatewayResponseRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateGatewayResponse(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SearchDevicesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getSortCriteria() != null)\r\n        sb.append(\"SortCriteria: \").append(getSortCriteria());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.acmpca.model.GetCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate()).append(\",\");\r\n    if (getCertificateChain() != null)\r\n        sb.append(\"CertificateChain: \").append(getCertificateChain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.alexaforbusiness.model.SkillsStoreSkill.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSkillId() != null)\r\n        sb.append(\"SkillId: \").append(getSkillId()).append(\",\");\r\n    if (getSkillName() != null)\r\n        sb.append(\"SkillName: \").append(getSkillName()).append(\",\");\r\n    if (getShortDescription() != null)\r\n        sb.append(\"ShortDescription: \").append(getShortDescription()).append(\",\");\r\n    if (getIconUrl() != null)\r\n        sb.append(\"IconUrl: \").append(getIconUrl()).append(\",\");\r\n    if (getSampleUtterances() != null)\r\n        sb.append(\"SampleUtterances: \").append(getSampleUtterances()).append(\",\");\r\n    if (getSkillDetails() != null)\r\n        sb.append(\"SkillDetails: \").append(getSkillDetails()).append(\",\");\r\n    if (getSupportsLinking() != null)\r\n        sb.append(\"SupportsLinking: \").append(getSupportsLinking());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationautoscaling.model.Alarm.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAlarmName() != null)\r\n        sb.append(\"AlarmName: \").append(getAlarmName()).append(\",\");\r\n    if (getAlarmARN() != null)\r\n        sb.append(\"AlarmARN: \").append(getAlarmARN());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.DescribeImagePermissionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getSharedAwsAccountIds() != null)\r\n        sb.append(\"SharedAwsAccountIds: \").append(getSharedAwsAccountIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.appstream.model.CreateImageBuilderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getImageBuilder() != null)\r\n        sb.append(\"ImageBuilder: \").append(getImageBuilder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetAccountResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCloudwatchRoleArn() != null)\r\n        sb.append(\"CloudwatchRoleArn: \").append(getCloudwatchRoleArn()).append(\",\");\r\n    if (getThrottleSettings() != null)\r\n        sb.append(\"ThrottleSettings: \").append(getThrottleSettings()).append(\",\");\r\n    if (getFeatures() != null)\r\n        sb.append(\"Features: \").append(getFeatures()).append(\",\");\r\n    if (getApiKeyVersion() != null)\r\n        sb.append(\"ApiKeyVersion: \").append(getApiKeyVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.DeleteStageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeAdjustmentTypesAsync",
	"Comment": "simplified method form for invoking the describeadjustmenttypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync(DescribeAdjustmentTypesRequest request,java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync,DescribeAdjustmentTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeAdjustmentTypesRequest, DescribeAdjustmentTypesResult> asyncHandler,java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync,java.util.concurrent.Future<DescribeAdjustmentTypesResult> describeAdjustmentTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeAdjustmentTypesRequest, DescribeAdjustmentTypesResult> asyncHandler){\r\n    return describeAdjustmentTypesAsync(new DescribeAdjustmentTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.UpdateBasePathMappingRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainName() != null)\r\n        sb.append(\"DomainName: \").append(getDomainName()).append(\",\");\r\n    if (getBasePath() != null)\r\n        sb.append(\"BasePath: \").append(getBasePath()).append(\",\");\r\n    if (getPatchOperations() != null)\r\n        sb.append(\"PatchOperations: \").append(getPatchOperations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aimax.osm.reader.DummyElementProcessor.getParent",
	"Comment": "this implementation decrements an internal counter, if the counter\treaches zero the true parent is returned, else this instance is returned.",
	"Method": "ElementProcessor getParent(){\r\n    if (nestedElementCount > 0) {\r\n        nestedElementCount--;\r\n        return this;\r\n    } else {\r\n        return super.getParent();\r\n    }\r\n}"
}, {
	"Path": "aima.core.nlp.parsing.CYK.length",
	"Comment": "simple function to make algorithm more closely resemble pseudocode",
	"Method": "int length(List<String> ls){\r\n    return ls.size();\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.model.GetModelTemplateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient.describeScalingProcessTypesAsync",
	"Comment": "simplified method form for invoking the describescalingprocesstypes operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync(DescribeScalingProcessTypesRequest request,java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync,DescribeScalingProcessTypesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeScalingProcessTypesRequest, DescribeScalingProcessTypesResult> asyncHandler,java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync,java.util.concurrent.Future<DescribeScalingProcessTypesResult> describeScalingProcessTypesAsync,com.amazonaws.handlers.AsyncHandler<DescribeScalingProcessTypesRequest, DescribeScalingProcessTypesResult> asyncHandler){\r\n    return describeScalingProcessTypesAsync(new DescribeScalingProcessTypesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DeleteNotificationConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getTopicARN() != null)\r\n        sb.append(\"TopicARN: \").append(getTopicARN());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.DetachLoadBalancersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLoadBalancerNames() != null)\r\n        sb.append(\"LoadBalancerNames: \").append(getLoadBalancerNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.autoscaling.model.CreateAutoScalingGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAutoScalingGroupName() != null)\r\n        sb.append(\"AutoScalingGroupName: \").append(getAutoScalingGroupName()).append(\",\");\r\n    if (getLaunchConfigurationName() != null)\r\n        sb.append(\"LaunchConfigurationName: \").append(getLaunchConfigurationName()).append(\",\");\r\n    if (getLaunchTemplate() != null)\r\n        sb.append(\"LaunchTemplate: \").append(getLaunchTemplate()).append(\",\");\r\n    if (getMixedInstancesPolicy() != null)\r\n        sb.append(\"MixedInstancesPolicy: \").append(getMixedInstancesPolicy()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getMinSize() != null)\r\n        sb.append(\"MinSize: \").append(getMinSize()).append(\",\");\r\n    if (getMaxSize() != null)\r\n        sb.append(\"MaxSize: \").append(getMaxSize()).append(\",\");\r\n    if (getDesiredCapacity() != null)\r\n        sb.append(\"DesiredCapacity: \").append(getDesiredCapacity()).append(\",\");\r\n    if (getDefaultCooldown() != null)\r\n        sb.append(\"DefaultCooldown: \").append(getDefaultCooldown()).append(\",\");\r\n    if (getAvailabilityZones() != null)\r\n        sb.append(\"AvailabilityZones: \").append(getAvailabilityZones()).append(\",\");\r\n    if (getLoadBalancerNames() != null)\r\n        sb.append(\"LoadBalancerNames: \").append(getLoadBalancerNames()).append(\",\");\r\n    if (getTargetGroupARNs() != null)\r\n        sb.append(\"TargetGroupARNs: \").append(getTargetGroupARNs()).append(\",\");\r\n    if (getHealthCheckType() != null)\r\n        sb.append(\"HealthCheckType: \").append(getHealthCheckType()).append(\",\");\r\n    if (getHealthCheckGracePeriod() != null)\r\n        sb.append(\"HealthCheckGracePeriod: \").append(getHealthCheckGracePeriod()).append(\",\");\r\n    if (getPlacementGroup() != null)\r\n        sb.append(\"PlacementGroup: \").append(getPlacementGroup()).append(\",\");\r\n    if (getVPCZoneIdentifier() != null)\r\n        sb.append(\"VPCZoneIdentifier: \").append(getVPCZoneIdentifier()).append(\",\");\r\n    if (getTerminationPolicies() != null)\r\n        sb.append(\"TerminationPolicies: \").append(getTerminationPolicies()).append(\",\");\r\n    if (getNewInstancesProtectedFromScaleIn() != null)\r\n        sb.append(\"NewInstancesProtectedFromScaleIn: \").append(getNewInstancesProtectedFromScaleIn()).append(\",\");\r\n    if (getLifecycleHookSpecificationList() != null)\r\n        sb.append(\"LifecycleHookSpecificationList: \").append(getLifecycleHookSpecificationList()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getServiceLinkedRoleARN() != null)\r\n        sb.append(\"ServiceLinkedRoleARN: \").append(getServiceLinkedRoleARN());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "aima.core.probability.hmm.exact.FixedLagSmoothing.fixedLagSmoothing",
	"Comment": "algorithm for smoothing with a fixed time lag of d steps, implemented as\tan online algorithm that outputs the new smoothed estimate given the\tobservation for a new time step.",
	"Method": "CategoricalDistribution fixedLagSmoothing(List<AssignmentProposition> et){\r\n    Matrix O_tmd, O_t;\r\n    e_tmd_to_t.add(hmm.getEvidence(et));\r\n    O_t = e_tmd_to_t.get(e_tmd_to_t.size() - 1);\r\n    if (t > d) {\r\n        e_tmd_to_t.remove(0);\r\n        O_tmd = e_tmd_to_t.get(0);\r\n        f = forward(f, O_tmd);\r\n        B = O_tmd.inverse().times(hmm.getTransitionModel().inverse()).times(B).times(hmm.getTransitionModel()).times(O_t);\r\n    } else {\r\n        B = B.times(hmm.getTransitionModel()).times(O_t);\r\n    }\r\n    CategoricalDistribution rVal = null;\r\n    if (t > d) {\r\n        rVal = hmm.convert(hmm.normalize(f.arrayTimes(B.times(unitMessage))));\r\n    }\r\n    t = t + 1;\r\n    return rVal;\r\n}"
}, {
	"Path": "aima.core.search.local.GeneticAlgorithm.geneticAlgorithm",
	"Comment": "starts the genetic algorithm and stops after a specified number of\titerations.",
	"Method": "Individual<A> geneticAlgorithm(Collection<Individual<A>> initPopulation,FitnessFunction<A> fitnessFn,int maxIterations,Individual<A> geneticAlgorithm,Collection<Individual<A>> initPopulation,FitnessFunction<A> fitnessFn,GoalTest<Individual<A>> goalTest,long maxTimeMilliseconds){\r\n    Individual<A> bestIndividual = null;\r\n    List<Individual<A>> population = new ArrayList(initPopulation);\r\n    validatePopulation(population);\r\n    updateMetrics(population, 0, 0L);\r\n    long startTime = System.currentTimeMillis();\r\n    int itCount = 0;\r\n    do {\r\n        population = nextGeneration(population, fitnessFn);\r\n        bestIndividual = retrieveBestIndividual(population, fitnessFn);\r\n        updateMetrics(population, ++itCount, System.currentTimeMillis() - startTime);\r\n        if (maxTimeMilliseconds > 0L && (System.currentTimeMillis() - startTime) > maxTimeMilliseconds)\r\n            break;\r\n        if (Tasks.currIsCancelled())\r\n            break;\r\n    } while (!goalTest.test(bestIndividual));\r\n    notifyProgressTrackers(itCount, population);\r\n    return bestIndividual;\r\n}"
}, {
	"Path": "com.amazonaws.services.apigateway.AmazonApiGatewayAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}]