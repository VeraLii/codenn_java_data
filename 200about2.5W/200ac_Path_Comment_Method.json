[{
	"Path": "com.amazonaws.partitions.model.Service.isPartitionWideEndpointAvailable",
	"Comment": "a convienient method that returns true if a service has a partitionwide endpoint available.",
	"Method": "boolean isPartitionWideEndpointAvailable(){\r\n    return this.partitionEndpoint != null;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminListUserAuthEvents",
	"Comment": "lists a history of user activity and any risks detected as part of amazon cognito advanced security.",
	"Method": "AdminListUserAuthEventsResult adminListUserAuthEvents(AdminListUserAuthEventsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminListUserAuthEvents(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteConfigRuleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.ParameterGroupStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName()).append(\",\");\r\n    if (getParameterApplyStatus() != null)\r\n        sb.append(\"ParameterApplyStatus: \").append(getParameterApplyStatus()).append(\",\");\r\n    if (getNodeIdsToReboot() != null)\r\n        sb.append(\"NodeIdsToReboot: \").append(getNodeIdsToReboot());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigRuleEvaluationStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getConfigRuleArn() != null)\r\n        sb.append(\"ConfigRuleArn: \").append(getConfigRuleArn()).append(\",\");\r\n    if (getConfigRuleId() != null)\r\n        sb.append(\"ConfigRuleId: \").append(getConfigRuleId()).append(\",\");\r\n    if (getLastSuccessfulInvocationTime() != null)\r\n        sb.append(\"LastSuccessfulInvocationTime: \").append(getLastSuccessfulInvocationTime()).append(\",\");\r\n    if (getLastFailedInvocationTime() != null)\r\n        sb.append(\"LastFailedInvocationTime: \").append(getLastFailedInvocationTime()).append(\",\");\r\n    if (getLastSuccessfulEvaluationTime() != null)\r\n        sb.append(\"LastSuccessfulEvaluationTime: \").append(getLastSuccessfulEvaluationTime()).append(\",\");\r\n    if (getLastFailedEvaluationTime() != null)\r\n        sb.append(\"LastFailedEvaluationTime: \").append(getLastFailedEvaluationTime()).append(\",\");\r\n    if (getFirstActivatedTime() != null)\r\n        sb.append(\"FirstActivatedTime: \").append(getFirstActivatedTime()).append(\",\");\r\n    if (getLastErrorCode() != null)\r\n        sb.append(\"LastErrorCode: \").append(getLastErrorCode()).append(\",\");\r\n    if (getLastErrorMessage() != null)\r\n        sb.append(\"LastErrorMessage: \").append(getLastErrorMessage()).append(\",\");\r\n    if (getFirstEvaluationStarted() != null)\r\n        sb.append(\"FirstEvaluationStarted: \").append(getFirstEvaluationStarted());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.EC2CredentialsFetcher.isPastRefreshThreshold",
	"Comment": "returns true if the last attempt to refresh credentials is beyond therefresh threshold, and therefore the credentials should attempt to berefreshed.",
	"Method": "boolean isPastRefreshThreshold(){\r\n    return (System.currentTimeMillis() - lastInstanceProfileCheck.getTime()) > REFRESH_THRESHOLD;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeDirectConnectGateways",
	"Comment": "lists all your direct connect gateways or only the specified direct connect gateway. deleted direct connectgateways are not returned.",
	"Method": "DescribeDirectConnectGatewaysResult describeDirectConnectGateways(DescribeDirectConnectGatewaysRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDirectConnectGateways(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminListDevices",
	"Comment": "lists devices, as an administrator.requires developer credentials.",
	"Method": "AdminListDevicesResult adminListDevices(AdminListDevicesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminListDevices(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.listUsers",
	"Comment": "returns a usersummarylist, which is an array of usersummary objects.",
	"Method": "ListUsersResult listUsers(ListUsersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListUsers(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.PipelineIdName.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.listUploads",
	"Comment": "gets information about uploads, given an aws device farm project arn.",
	"Method": "ListUploadsResult listUploads(ListUploadsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListUploads(request);\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionMetadataParser.parseRegionMetadata",
	"Comment": "parses the specified input stream and returns a list of the regionsdeclared in it. by default, verification on the region endpoints isdisabled.",
	"Method": "List<Region> parseRegionMetadata(InputStream input,List<Region> parseRegionMetadata,InputStream input,boolean endpointVerification){\r\n    return internalParse(input, endpointVerification);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyEndpointResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DeleteClusterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCluster() != null)\r\n        sb.append(\"Cluster: \").append(getCluster());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateIdentityProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getProviderType() != null)\r\n        sb.append(\"ProviderType: \").append(getProviderType()).append(\",\");\r\n    if (getProviderDetails() != null)\r\n        sb.append(\"ProviderDetails: \").append(getProviderDetails()).append(\",\");\r\n    if (getAttributeMapping() != null)\r\n        sb.append(\"AttributeMapping: \").append(getAttributeMapping()).append(\",\");\r\n    if (getIdpIdentifiers() != null)\r\n        sb.append(\"IdpIdentifiers: \").append(getIdpIdentifiers());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazoncomprehend using the current builder configuration.",
	"Method": "AmazonComprehend build(AwsSyncClientParams params){\r\n    return new AmazonComprehendClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DevicePool.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getRules() != null)\r\n        sb.append(\"Rules: \").append(getRules());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.confirmConnection",
	"Comment": "confirms the creation of the specified hosted connection on an interconnect.upon creation, the hosted connection is initially in the ordering state, and remains in this stateuntil the owner confirms creation of the hosted connection.",
	"Method": "ConfirmConnectionResult confirmConnection(ConfirmConnectionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeConfirmConnection(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateNumberOfDomainControllersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getDesiredNumber() != null)\r\n        sb.append(\"DesiredNumber: \").append(getDesiredNumber());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.TagListEntry.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionMetadata.getRegionsForService",
	"Comment": "returns a list of the regions that support the service given.",
	"Method": "List<Region> getRegionsForService(String service){\r\n    return provider.getRegionsForService(service);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.deleteTags",
	"Comment": "deletes the association between configuration items and one or more tags. this api accepts a list of multipleconfiguration items.",
	"Method": "DeleteTagsResult deleteTags(DeleteTagsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteTags(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeRetentionConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRetentionConfigurationNames() != null)\r\n        sb.append(\"RetentionConfigurationNames: \").append(getRetentionConfigurationNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminRemoveUserFromGroup",
	"Comment": "removes the specified user from the specified group.requires developer credentials.",
	"Method": "AdminRemoveUserFromGroupResult adminRemoveUserFromGroup(AdminRemoveUserFromGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminRemoveUserFromGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.DimensionValues.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDevicePoolCompatibilityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevicePoolArn() != null)\r\n        sb.append(\"DevicePoolArn: \").append(getDevicePoolArn()).append(\",\");\r\n    if (getAppArn() != null)\r\n        sb.append(\"AppArn: \").append(getAppArn()).append(\",\");\r\n    if (getTestType() != null)\r\n        sb.append(\"TestType: \").append(getTestType()).append(\",\");\r\n    if (getTest() != null)\r\n        sb.append(\"Test: \").append(getTest()).append(\",\");\r\n    if (getConfiguration() != null)\r\n        sb.append(\"Configuration: \").append(getConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.internal.AwsProfileNameLoader.loadProfileName",
	"Comment": "todo the order would make more sense as system property, environment variable, defaultprofile name but we have to keep the current order for backwards compatiblity. considerchanging this in a future major version.",
	"Method": "String loadProfileName(){\r\n    final String profileEnvVarOverride = getEnvProfileName();\r\n    if (!StringUtils.isNullOrEmpty(profileEnvVarOverride)) {\r\n        return profileEnvVarOverride;\r\n    } else {\r\n        final String profileSysPropOverride = getSysPropertyProfileName();\r\n        if (!StringUtils.isNullOrEmpty(profileSysPropOverride)) {\r\n            return profileSysPropOverride;\r\n        } else {\r\n            return DEFAULT_PROFILE_NAME;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerEntityList.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getS3Uri() != null)\r\n        sb.append(\"S3Uri: \").append(getS3Uri());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.MonetaryAmount.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAmount() != null)\r\n        sb.append(\"Amount: \").append(getAmount()).append(\",\");\r\n    if (getCurrencyCode() != null)\r\n        sb.append(\"CurrencyCode: \").append(getCurrencyCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.StaxUnmarshallerContext.registerMetadataExpression",
	"Comment": "registers an expression, which if matched, will cause the data for thematching element to be stored in the metadata map under the specifiedkey.",
	"Method": "void registerMetadataExpression(String expression,int targetDepth,String storageKey){\r\n    metadataExpressions.add(new MetadataExpression(expression, targetDepth, storageKey));\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.MessageTemplateType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSMSMessage() != null)\r\n        sb.append(\"SMSMessage: \").append(getSMSMessage()).append(\",\");\r\n    if (getEmailMessage() != null)\r\n        sb.append(\"EmailMessage: \").append(getEmailMessage()).append(\",\");\r\n    if (getEmailSubject() != null)\r\n        sb.append(\"EmailSubject: \").append(getEmailSubject());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectEntitiesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntities() != null)\r\n        sb.append(\"Entities: \").append(getEntities());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeConnections",
	"Comment": "displays the specified connection or all connections in this region.",
	"Method": "DescribeConnectionsResult describeConnections(DescribeConnectionsRequest request,DescribeConnectionsResult describeConnections){\r\n    return describeConnections(new DescribeConnectionsRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeExportConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportIds() != null)\r\n        sb.append(\"ExportIds: \").append(getExportIds()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.getCSVHeader",
	"Comment": "gets the header information for the .csv file to be used as input for the user import job.",
	"Method": "GetCSVHeaderResult getCSVHeader(GetCSVHeaderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetCSVHeader(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.QueueReference.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.setRequestCredentialsProvider",
	"Comment": "sets the optional credentials provider to use for this request, overriding the default credentialsprovider at the client level.",
	"Method": "void setRequestCredentialsProvider(AWSCredentialsProvider credentialsProvider){\r\n    this.credentialsProvider = credentialsProvider;\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ForecastResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getMeanValue() != null)\r\n        sb.append(\"MeanValue: \").append(getMeanValue()).append(\",\");\r\n    if (getPredictionIntervalLowerBound() != null)\r\n        sb.append(\"PredictionIntervalLowerBound: \").append(getPredictionIntervalLowerBound()).append(\",\");\r\n    if (getPredictionIntervalUpperBound() != null)\r\n        sb.append(\"PredictionIntervalUpperBound: \").append(getPredictionIntervalUpperBound());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMClient.deleteLifecyclePolicy",
	"Comment": "deletes the specified lifecycle policy and halts the automated operations that the policy specified.",
	"Method": "DeleteLifecyclePolicyResult deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteLifecyclePolicy(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListSecurityProfilesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.waiters.WaiterParameters.withPollingStrategy",
	"Comment": "constructs a new waiterparameters with the given polling strategy",
	"Method": "WaiterParameters<Input> withPollingStrategy(PollingStrategy pollingStrategy){\r\n    return new WaiterParameters<Input>(this.request, pollingStrategy);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deletePendingAggregationRequest",
	"Comment": "deletes pending authorization requests for a specified aggregator account in a specified region.",
	"Method": "DeletePendingAggregationRequestResult deletePendingAggregationRequest(DeletePendingAggregationRequestRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeletePendingAggregationRequest(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DeleteLocationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeSharedDirectoriesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedDirectories() != null)\r\n        sb.append(\"SharedDirectories: \").append(getSharedDirectories()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.KeyPhrase.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScore() != null)\r\n        sb.append(\"Score: \").append(getScore()).append(\",\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getBeginOffset() != null)\r\n        sb.append(\"BeginOffset: \").append(getBeginOffset()).append(\",\");\r\n    if (getEndOffset() != null)\r\n        sb.append(\"EndOffset: \").append(getEndOffset());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.rebootNode",
	"Comment": "reboots a single node of a dax cluster. the reboot action takes place as soon as possible. during the reboot, thenode status is set to rebooting.",
	"Method": "RebootNodeResult rebootNode(RebootNodeRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeRebootNode(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetRunRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.createReplicationSubnetGroup",
	"Comment": "creates a replication subnet group given a list of the subnet ids in a vpc.",
	"Method": "CreateReplicationSubnetGroupResult createReplicationSubnetGroup(CreateReplicationSubnetGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateReplicationSubnetGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReplicationInstance.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceIdentifier() != null)\r\n        sb.append(\"ReplicationInstanceIdentifier: \").append(getReplicationInstanceIdentifier()).append(\",\");\r\n    if (getReplicationInstanceClass() != null)\r\n        sb.append(\"ReplicationInstanceClass: \").append(getReplicationInstanceClass()).append(\",\");\r\n    if (getReplicationInstanceStatus() != null)\r\n        sb.append(\"ReplicationInstanceStatus: \").append(getReplicationInstanceStatus()).append(\",\");\r\n    if (getAllocatedStorage() != null)\r\n        sb.append(\"AllocatedStorage: \").append(getAllocatedStorage()).append(\",\");\r\n    if (getInstanceCreateTime() != null)\r\n        sb.append(\"InstanceCreateTime: \").append(getInstanceCreateTime()).append(\",\");\r\n    if (getVpcSecurityGroups() != null)\r\n        sb.append(\"VpcSecurityGroups: \").append(getVpcSecurityGroups()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getReplicationSubnetGroup() != null)\r\n        sb.append(\"ReplicationSubnetGroup: \").append(getReplicationSubnetGroup()).append(\",\");\r\n    if (getPreferredMaintenanceWindow() != null)\r\n        sb.append(\"PreferredMaintenanceWindow: \").append(getPreferredMaintenanceWindow()).append(\",\");\r\n    if (getPendingModifiedValues() != null)\r\n        sb.append(\"PendingModifiedValues: \").append(getPendingModifiedValues()).append(\",\");\r\n    if (getMultiAZ() != null)\r\n        sb.append(\"MultiAZ: \").append(getMultiAZ()).append(\",\");\r\n    if (getEngineVersion() != null)\r\n        sb.append(\"EngineVersion: \").append(getEngineVersion()).append(\",\");\r\n    if (getAutoMinorVersionUpgrade() != null)\r\n        sb.append(\"AutoMinorVersionUpgrade: \").append(getAutoMinorVersionUpgrade()).append(\",\");\r\n    if (getKmsKeyId() != null)\r\n        sb.append(\"KmsKeyId: \").append(getKmsKeyId()).append(\",\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getReplicationInstancePublicIpAddress() != null)\r\n        sb.append(\"ReplicationInstancePublicIpAddress: \").append(getReplicationInstancePublicIpAddress()).append(\",\");\r\n    if (getReplicationInstancePrivateIpAddress() != null)\r\n        sb.append(\"ReplicationInstancePrivateIpAddress: \").append(getReplicationInstancePrivateIpAddress()).append(\",\");\r\n    if (getReplicationInstancePublicIpAddresses() != null)\r\n        sb.append(\"ReplicationInstancePublicIpAddresses: \").append(getReplicationInstancePublicIpAddresses()).append(\",\");\r\n    if (getReplicationInstancePrivateIpAddresses() != null)\r\n        sb.append(\"ReplicationInstancePrivateIpAddresses: \").append(getReplicationInstancePrivateIpAddresses()).append(\",\");\r\n    if (getPubliclyAccessible() != null)\r\n        sb.append(\"PubliclyAccessible: \").append(getPubliclyAccessible()).append(\",\");\r\n    if (getSecondaryAvailabilityZone() != null)\r\n        sb.append(\"SecondaryAvailabilityZone: \").append(getSecondaryAvailabilityZone()).append(\",\");\r\n    if (getFreeUntil() != null)\r\n        sb.append(\"FreeUntil: \").append(getFreeUntil()).append(\",\");\r\n    if (getDnsNameServers() != null)\r\n        sb.append(\"DnsNameServers: \").append(getDnsNameServers());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocateHostedConnectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUser() != null)\r\n        sb.append(\"User: \").append(getUser());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.StopConfigurationRecorderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecorderName() != null)\r\n        sb.append(\"ConfigurationRecorderName: \").append(getConfigurationRecorderName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserPoolDomainRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomain() != null)\r\n        sb.append(\"Domain: \").append(getDomain()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.Field.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getStringValue() != null)\r\n        sb.append(\"StringValue: \").append(getStringValue()).append(\",\");\r\n    if (getRefValue() != null)\r\n        sb.append(\"RefValue: \").append(getRefValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.StartUserImportJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserImportJob() != null)\r\n        sb.append(\"UserImportJob: \").append(getUserImportJob());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.model.DescribeReportDefinitionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceDetailsByResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvaluationResults() != null)\r\n        sb.append(\"EvaluationResults: \").append(getEvaluationResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CustomerArtifactPaths.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIosPaths() != null)\r\n        sb.append(\"IosPaths: \").append(getIosPaths()).append(\",\");\r\n    if (getAndroidPaths() != null)\r\n        sb.append(\"AndroidPaths: \").append(getAndroidPaths()).append(\",\");\r\n    if (getDeviceHostPaths() != null)\r\n        sb.append(\"DeviceHostPaths: \").append(getDeviceHostPaths());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.AccountQuota.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountQuotaName() != null)\r\n        sb.append(\"AccountQuotaName: \").append(getAccountQuotaName()).append(\",\");\r\n    if (getUsed() != null)\r\n        sb.append(\"Used: \").append(getUsed()).append(\",\");\r\n    if (getMax() != null)\r\n        sb.append(\"Max: \").append(getMax());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateNetworkProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProjectArn() != null)\r\n        sb.append(\"ProjectArn: \").append(getProjectArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getUplinkBandwidthBits() != null)\r\n        sb.append(\"UplinkBandwidthBits: \").append(getUplinkBandwidthBits()).append(\",\");\r\n    if (getDownlinkBandwidthBits() != null)\r\n        sb.append(\"DownlinkBandwidthBits: \").append(getDownlinkBandwidthBits()).append(\",\");\r\n    if (getUplinkDelayMs() != null)\r\n        sb.append(\"UplinkDelayMs: \").append(getUplinkDelayMs()).append(\",\");\r\n    if (getDownlinkDelayMs() != null)\r\n        sb.append(\"DownlinkDelayMs: \").append(getDownlinkDelayMs()).append(\",\");\r\n    if (getUplinkJitterMs() != null)\r\n        sb.append(\"UplinkJitterMs: \").append(getUplinkJitterMs()).append(\",\");\r\n    if (getDownlinkJitterMs() != null)\r\n        sb.append(\"DownlinkJitterMs: \").append(getDownlinkJitterMs()).append(\",\");\r\n    if (getUplinkLossPercent() != null)\r\n        sb.append(\"UplinkLossPercent: \").append(getUplinkLossPercent()).append(\",\");\r\n    if (getDownlinkLossPercent() != null)\r\n        sb.append(\"DownlinkLossPercent: \").append(getDownlinkLossPercent());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setPreemptiveBasicProxyAuth",
	"Comment": "sets whether to attempt to authenticate preemptively against proxy servers using basicauthentication",
	"Method": "void setPreemptiveBasicProxyAuth(Boolean preemptiveBasicProxyAuth){\r\n    this.preemptiveBasicProxyAuth = preemptiveBasicProxyAuth;\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.unsubscribeFromDataset",
	"Comment": "unsubscribes from receiving notifications when a dataset is modified by another device.this api can only be called with temporary credentials provided by cognito identity. you cannot call this apiwith developer credentials.",
	"Method": "UnsubscribeFromDatasetResult unsubscribeFromDataset(UnsubscribeFromDatasetRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUnsubscribeFromDataset(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationAggregatorsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorNames() != null)\r\n        sb.append(\"ConfigurationAggregatorNames: \").append(getConfigurationAggregatorNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListUsersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserSummaryList() != null)\r\n        sb.append(\"UserSummaryList: \").append(getUserSummaryList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.AWSComprehendMedicalAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awscomprehendmedicalasync using the current builder configuration.",
	"Method": "AWSComprehendMedicalAsync build(AwsAsyncClientParams params){\r\n    return new AWSComprehendMedicalAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerMetadata.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNumberOfTrainedDocuments() != null)\r\n        sb.append(\"NumberOfTrainedDocuments: \").append(getNumberOfTrainedDocuments()).append(\",\");\r\n    if (getNumberOfTestDocuments() != null)\r\n        sb.append(\"NumberOfTestDocuments: \").append(getNumberOfTestDocuments()).append(\",\");\r\n    if (getEvaluationMetrics() != null)\r\n        sb.append(\"EvaluationMetrics: \").append(getEvaluationMetrics()).append(\",\");\r\n    if (getEntityTypes() != null)\r\n        sb.append(\"EntityTypes: \").append(getEntityTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopEntitiesDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.GetSnapshotLimitsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnapshotLimits() != null)\r\n        sb.append(\"SnapshotLimits: \").append(getSnapshotLimits());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.EmailConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceArn() != null)\r\n        sb.append(\"SourceArn: \").append(getSourceArn()).append(\",\");\r\n    if (getReplyToEmailAddress() != null)\r\n        sb.append(\"ReplyToEmailAddress: \").append(getReplyToEmailAddress());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.ConfirmConnectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.TagFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DescribePipelinesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineIds() != null)\r\n        sb.append(\"PipelineIds: \").append(getPipelineIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetDiscoveredResourceCountsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTotalDiscoveredResources() != null)\r\n        sb.append(\"TotalDiscoveredResources: \").append(getTotalDiscoveredResources()).append(\",\");\r\n    if (getResourceCounts() != null)\r\n        sb.append(\"ResourceCounts: \").append(getResourceCounts()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.ResourceTag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.UpdateLagResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionsBandwidth() != null)\r\n        sb.append(\"ConnectionsBandwidth: \").append(getConnectionsBandwidth()).append(\",\");\r\n    if (getNumberOfConnections() != null)\r\n        sb.append(\"NumberOfConnections: \").append(getNumberOfConnections()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getLagName() != null)\r\n        sb.append(\"LagName: \").append(getLagName()).append(\",\");\r\n    if (getLagState() != null)\r\n        sb.append(\"LagState: \").append(getLagState()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getMinimumLinks() != null)\r\n        sb.append(\"MinimumLinks: \").append(getMinimumLinks()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections()).append(\",\");\r\n    if (getAllowsHostedConnections() != null)\r\n        sb.append(\"AllowsHostedConnections: \").append(getAllowsHostedConnections()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateIdentityProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityProvider() != null)\r\n        sb.append(\"IdentityProvider: \").append(getIdentityProvider());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.rebootReplicationInstance",
	"Comment": "reboots a replication instance. rebooting results in a momentary outage, until the replication instance becomesavailable again.",
	"Method": "RebootReplicationInstanceResult rebootReplicationInstance(RebootReplicationInstanceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeRebootReplicationInstance(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ChallengeResponseType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getChallengeName() != null)\r\n        sb.append(\"ChallengeName: \").append(getChallengeName()).append(\",\");\r\n    if (getChallengeResponse() != null)\r\n        sb.append(\"ChallengeResponse: \").append(getChallengeResponse());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeAgentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentArn() != null)\r\n        sb.append(\"AgentArn: \").append(getAgentArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getLastConnectionTime() != null)\r\n        sb.append(\"LastConnectionTime: \").append(getLastConnectionTime()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListOfferingTransactionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingTransactions() != null)\r\n        sb.append(\"OfferingTransactions: \").append(getOfferingTransactions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.DetectEntitiesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntities() != null)\r\n        sb.append(\"Entities: \").append(getEntities()).append(\",\");\r\n    if (getUnmappedAttributes() != null)\r\n        sb.append(\"UnmappedAttributes: \").append(getUnmappedAttributes()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RadiusSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRadiusServers() != null)\r\n        sb.append(\"RadiusServers: \").append(getRadiusServers()).append(\",\");\r\n    if (getRadiusPort() != null)\r\n        sb.append(\"RadiusPort: \").append(getRadiusPort()).append(\",\");\r\n    if (getRadiusTimeout() != null)\r\n        sb.append(\"RadiusTimeout: \").append(getRadiusTimeout()).append(\",\");\r\n    if (getRadiusRetries() != null)\r\n        sb.append(\"RadiusRetries: \").append(getRadiusRetries()).append(\",\");\r\n    if (getSharedSecret() != null)\r\n        sb.append(\"SharedSecret: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAuthenticationProtocol() != null)\r\n        sb.append(\"AuthenticationProtocol: \").append(getAuthenticationProtocol()).append(\",\");\r\n    if (getDisplayLabel() != null)\r\n        sb.append(\"DisplayLabel: \").append(getDisplayLabel()).append(\",\");\r\n    if (getUseSameUsername() != null)\r\n        sb.append(\"UseSameUsername: \").append(getUseSameUsername());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroups() != null)\r\n        sb.append(\"Groups: \").append(getGroups()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserPoolClientRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientName() != null)\r\n        sb.append(\"ClientName: \").append(getClientName()).append(\",\");\r\n    if (getGenerateSecret() != null)\r\n        sb.append(\"GenerateSecret: \").append(getGenerateSecret()).append(\",\");\r\n    if (getRefreshTokenValidity() != null)\r\n        sb.append(\"RefreshTokenValidity: \").append(getRefreshTokenValidity()).append(\",\");\r\n    if (getReadAttributes() != null)\r\n        sb.append(\"ReadAttributes: \").append(getReadAttributes()).append(\",\");\r\n    if (getWriteAttributes() != null)\r\n        sb.append(\"WriteAttributes: \").append(getWriteAttributes()).append(\",\");\r\n    if (getExplicitAuthFlows() != null)\r\n        sb.append(\"ExplicitAuthFlows: \").append(getExplicitAuthFlows()).append(\",\");\r\n    if (getSupportedIdentityProviders() != null)\r\n        sb.append(\"SupportedIdentityProviders: \").append(getSupportedIdentityProviders()).append(\",\");\r\n    if (getCallbackURLs() != null)\r\n        sb.append(\"CallbackURLs: \").append(getCallbackURLs()).append(\",\");\r\n    if (getLogoutURLs() != null)\r\n        sb.append(\"LogoutURLs: \").append(getLogoutURLs()).append(\",\");\r\n    if (getDefaultRedirectURI() != null)\r\n        sb.append(\"DefaultRedirectURI: \").append(getDefaultRedirectURI()).append(\",\");\r\n    if (getAllowedOAuthFlows() != null)\r\n        sb.append(\"AllowedOAuthFlows: \").append(getAllowedOAuthFlows()).append(\",\");\r\n    if (getAllowedOAuthScopes() != null)\r\n        sb.append(\"AllowedOAuthScopes: \").append(getAllowedOAuthScopes()).append(\",\");\r\n    if (getAllowedOAuthFlowsUserPoolClient() != null)\r\n        sb.append(\"AllowedOAuthFlowsUserPoolClient: \").append(getAllowedOAuthFlowsUserPoolClient()).append(\",\");\r\n    if (getAnalyticsConfiguration() != null)\r\n        sb.append(\"AnalyticsConfiguration: \").append(getAnalyticsConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.listRecords",
	"Comment": "gets paginated records, optionally changed after a particular sync count for a dataset and identity. with amazoncognito sync, each identity has access only to its own data. thus, the credentials used to make this api callneed to have access to the identity data.listrecords can be called with temporary user credentials provided by cognito identity or with developercredentials. you should use cognito identity credentials to make this api call.",
	"Method": "ListRecordsResult listRecords(ListRecordsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListRecords(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.Filters.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueues() != null)\r\n        sb.append(\"Queues: \").append(getQueues()).append(\",\");\r\n    if (getChannels() != null)\r\n        sb.append(\"Channels: \").append(getChannels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyReaderOptions.isStripAwsPrincipalIdHyphensEnabled",
	"Comment": "whether aws account ids should have hyphens removed in their name.",
	"Method": "boolean isStripAwsPrincipalIdHyphensEnabled(){\r\n    return stripAwsPrincipalIdHyphensEnabled;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateRadiusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getRadiusSettings() != null)\r\n        sb.append(\"RadiusSettings: \").append(getRadiusSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.SubscribeToDatasetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateResourceServerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getIdentifier() != null)\r\n        sb.append(\"Identifier: \").append(getIdentifier()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getScopes() != null)\r\n        sb.append(\"Scopes: \").append(getScopes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DeleteParameterGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RegisterEventTopicRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getTopicName() != null)\r\n        sb.append(\"TopicName: \").append(getTopicName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.internal.JsonPolicyReader.convertConditionRecord",
	"Comment": "generates a condition instance for each condition type under thecondition json node.",
	"Method": "void convertConditionRecord(List<Condition> conditions,String conditionType,JsonNode conditionNode){\r\n    Iterator<Map.Entry<String, JsonNode>> mapOfFields = conditionNode.fields();\r\n    List<String> values;\r\n    Entry<String, JsonNode> field;\r\n    JsonNode fieldValue;\r\n    Iterator<JsonNode> elements;\r\n    while (mapOfFields.hasNext()) {\r\n        values = new LinkedList<String>();\r\n        field = mapOfFields.next();\r\n        fieldValue = field.getValue();\r\n        if (fieldValue.isArray()) {\r\n            elements = fieldValue.elements();\r\n            while (elements.hasNext()) {\r\n                values.add(elements.next().asText());\r\n            }\r\n        } else {\r\n            values.add(fieldValue.asText());\r\n        }\r\n        conditions.add(new Condition().withType(conditionType).withConditionKey(field.getKey()).withValues(values));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUICustomizationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.IdentityPoolUsage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getSyncSessionsCount() != null)\r\n        sb.append(\"SyncSessionsCount: \").append(getSyncSessionsCount()).append(\",\");\r\n    if (getDataStorage() != null)\r\n        sb.append(\"DataStorage: \").append(getDataStorage()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListOfferingTransactionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testProfileNameWithJustSpaces",
	"Comment": "tests loading profile with a profile name having only spaces. an exception should be thrownin this case.",
	"Method": "void testProfileNameWithJustSpaces(){\r\n    checkExpectedException(ProfileResourceLoader.profileNameWithSpaces(), AmazonClientException.class, \"Should throw an exception as there is a profile mentioned with no profile name.\");\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Run.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getCreated() != null)\r\n        sb.append(\"Created: \").append(getCreated()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getResult() != null)\r\n        sb.append(\"Result: \").append(getResult()).append(\",\");\r\n    if (getStarted() != null)\r\n        sb.append(\"Started: \").append(getStarted()).append(\",\");\r\n    if (getStopped() != null)\r\n        sb.append(\"Stopped: \").append(getStopped()).append(\",\");\r\n    if (getCounters() != null)\r\n        sb.append(\"Counters: \").append(getCounters()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getTotalJobs() != null)\r\n        sb.append(\"TotalJobs: \").append(getTotalJobs()).append(\",\");\r\n    if (getCompletedJobs() != null)\r\n        sb.append(\"CompletedJobs: \").append(getCompletedJobs()).append(\",\");\r\n    if (getBillingMethod() != null)\r\n        sb.append(\"BillingMethod: \").append(getBillingMethod()).append(\",\");\r\n    if (getDeviceMinutes() != null)\r\n        sb.append(\"DeviceMinutes: \").append(getDeviceMinutes()).append(\",\");\r\n    if (getNetworkProfile() != null)\r\n        sb.append(\"NetworkProfile: \").append(getNetworkProfile()).append(\",\");\r\n    if (getParsingResultUrl() != null)\r\n        sb.append(\"ParsingResultUrl: \").append(getParsingResultUrl()).append(\",\");\r\n    if (getResultCode() != null)\r\n        sb.append(\"ResultCode: \").append(getResultCode()).append(\",\");\r\n    if (getSeed() != null)\r\n        sb.append(\"Seed: \").append(getSeed()).append(\",\");\r\n    if (getAppUpload() != null)\r\n        sb.append(\"AppUpload: \").append(getAppUpload()).append(\",\");\r\n    if (getEventCount() != null)\r\n        sb.append(\"EventCount: \").append(getEventCount()).append(\",\");\r\n    if (getJobTimeoutMinutes() != null)\r\n        sb.append(\"JobTimeoutMinutes: \").append(getJobTimeoutMinutes()).append(\",\");\r\n    if (getDevicePoolArn() != null)\r\n        sb.append(\"DevicePoolArn: \").append(getDevicePoolArn()).append(\",\");\r\n    if (getLocale() != null)\r\n        sb.append(\"Locale: \").append(getLocale()).append(\",\");\r\n    if (getRadios() != null)\r\n        sb.append(\"Radios: \").append(getRadios()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getCustomerArtifactPaths() != null)\r\n        sb.append(\"CustomerArtifactPaths: \").append(getCustomerArtifactPaths()).append(\",\");\r\n    if (getWebUrl() != null)\r\n        sb.append(\"WebUrl: \").append(getWebUrl()).append(\",\");\r\n    if (getSkipAppResign() != null)\r\n        sb.append(\"SkipAppResign: \").append(getSkipAppResign()).append(\",\");\r\n    if (getTestSpecArn() != null)\r\n        sb.append(\"TestSpecArn: \").append(getTestSpecArn()).append(\",\");\r\n    if (getDeviceSelectionResult() != null)\r\n        sb.append(\"DeviceSelectionResult: \").append(getDeviceSelectionResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DisableRadiusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.ListTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.StopRunRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevice() != null)\r\n        sb.append(\"Device: \").append(getDevice());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteDirectoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserPoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeAgentsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentsInfo() != null)\r\n        sb.append(\"AgentsInfo: \").append(getAgentsInfo()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionUtils.loadMetadataFromResource",
	"Comment": "loads a set of region metadata from an xml file stored as a resourceof the given classloader.",
	"Method": "RegionMetadata loadMetadataFromResource(String name,RegionMetadata loadMetadataFromResource,Class<?> clazz,String name,RegionMetadata loadMetadataFromResource,ClassLoader classLoader,String name){\r\n    return LegacyRegionXmlLoadUtils.load(classLoader, name);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.listSamples",
	"Comment": "gets information about samples, given an aws device farm job arn.",
	"Method": "ListSamplesResult listSamples(ListSamplesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListSamples(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigSnapshotDeliveryProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryFrequency() != null)\r\n        sb.append(\"DeliveryFrequency: \").append(getDeliveryFrequency());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetResourceConfigHistoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationItems() != null)\r\n        sb.append(\"ConfigurationItems: \").append(getConfigurationItems()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetTestRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.createDirectConnectGatewayAssociation",
	"Comment": "creates an association between a direct connect gateway and a virtual private gateway. the virtual privategateway must be attached to a vpc and must not be associated with another direct connect gateway.",
	"Method": "CreateDirectConnectGatewayAssociationResult createDirectConnectGatewayAssociation(CreateDirectConnectGatewayAssociationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDirectConnectGatewayAssociation(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeCertificatesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getCertificates() != null)\r\n        sb.append(\"Certificates: \").append(getCertificates());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.restoreFromSnapshot",
	"Comment": "restores a directory using an existing directory snapshot.when you restore a directory from a snapshot, any changes made to the directory after the snapshot date areoverwritten.this action returns as soon as the restore operation is initiated. you can monitor the progress of the restoreoperation by calling the describedirectories operation with the directory identifier. when thedirectorydescription.stage value changes to active, the restore operation is complete.",
	"Method": "RestoreFromSnapshotResult restoreFromSnapshot(RestoreFromSnapshotRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeRestoreFromSnapshot(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeConfigurationRecorderStatusAsync",
	"Comment": "simplified method form for invoking the describeconfigurationrecorderstatus operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync(DescribeConfigurationRecorderStatusRequest request,java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync,DescribeConfigurationRecorderStatusRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecorderStatusRequest, DescribeConfigurationRecorderStatusResult> asyncHandler,java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync,java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecorderStatusRequest, DescribeConfigurationRecorderStatusResult> asyncHandler){\r\n    return describeConfigurationRecorderStatusAsync(new DescribeConfigurationRecorderStatusRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.NotifyEmailType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubject() != null)\r\n        sb.append(\"Subject: \").append(getSubject()).append(\",\");\r\n    if (getHtmlBody() != null)\r\n        sb.append(\"HtmlBody: \").append(getHtmlBody()).append(\",\");\r\n    if (getTextBody() != null)\r\n        sb.append(\"TextBody: \").append(getTextBody());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceLocationArn() != null)\r\n        sb.append(\"SourceLocationArn: \").append(getSourceLocationArn()).append(\",\");\r\n    if (getDestinationLocationArn() != null)\r\n        sb.append(\"DestinationLocationArn: \").append(getDestinationLocationArn()).append(\",\");\r\n    if (getCloudWatchLogGroupArn() != null)\r\n        sb.append(\"CloudWatchLogGroupArn: \").append(getCloudWatchLogGroupArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getOptions() != null)\r\n        sb.append(\"Options: \").append(getOptions()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEventsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getEvents() != null)\r\n        sb.append(\"Events: \").append(getEvents());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtils.asNode",
	"Comment": "evaluates the specified xpath expression and returns the result as anode.",
	"Method": "Node asNode(String nodeName,Node node,Node asNode,String nodeName,Node node,XPath xpath){\r\n    if (node == null)\r\n        return null;\r\n    return (Node) xpath.evaluate(nodeName, node, XPathConstants.NODE);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.acceptSharedDirectory",
	"Comment": "accepts a directory sharing request that was sent from the directory owner account.",
	"Method": "AcceptSharedDirectoryResult acceptSharedDirectory(AcceptSharedDirectoryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAcceptSharedDirectory(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsapplicationdiscovery using the current builder configuration.",
	"Method": "AWSApplicationDiscovery build(AwsSyncClientParams params){\r\n    return new AWSApplicationDiscoveryClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListTopicsDetectionJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTopicsDetectionJobPropertiesList() != null)\r\n        sb.append(\"TopicsDetectionJobPropertiesList: \").append(getTopicsDetectionJobPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeAgentsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentIds() != null)\r\n        sb.append(\"AgentIds: \").append(getAgentIds()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HierarchyGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getLevelId() != null)\r\n        sb.append(\"LevelId: \").append(getLevelId()).append(\",\");\r\n    if (getHierarchyPath() != null)\r\n        sb.append(\"HierarchyPath: \").append(getHierarchyPath());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.UpdateLagRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getLagName() != null)\r\n        sb.append(\"LagName: \").append(getLagName()).append(\",\");\r\n    if (getMinimumLinks() != null)\r\n        sb.append(\"MinimumLinks: \").append(getMinimumLinks());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeRiskConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRiskConfiguration() != null)\r\n        sb.append(\"RiskConfiguration: \").append(getRiskConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.DimensionValuesWithAttributes.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerClientBuilder.build",
	"Comment": "construct a synchronous implementation of awscostexplorer using the current builder configuration.",
	"Method": "AWSCostExplorer build(AwsSyncClientParams params){\r\n    return new AWSCostExplorerClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListInstanceProfilesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceProfiles() != null)\r\n        sb.append(\"InstanceProfiles: \").append(getInstanceProfiles()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.DateUtils.numberOfDaysSinceEpoch",
	"Comment": "returns the number of days since epoch with respect to the given numberof milliseconds since epoch.",
	"Method": "long numberOfDaysSinceEpoch(long milliSinceEpoch){\r\n    return TimeUnit.MILLISECONDS.toDays(milliSinceEpoch);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UserIdentityInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFirstName() != null)\r\n        sb.append(\"FirstName: \").append(getFirstName()).append(\",\");\r\n    if (getLastName() != null)\r\n        sb.append(\"LastName: \").append(getLastName()).append(\",\");\r\n    if (getEmail() != null)\r\n        sb.append(\"Email: \").append(getEmail());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.PipelineObject.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getFields() != null)\r\n        sb.append(\"Fields: \").append(getFields());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.RecurringCharge.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCost() != null)\r\n        sb.append(\"Cost: \").append(getCost()).append(\",\");\r\n    if (getFrequency() != null)\r\n        sb.append(\"Frequency: \").append(getFrequency());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazonconfig using the current builder configuration.",
	"Method": "AmazonConfig build(AwsSyncClientParams params){\r\n    return new AmazonConfigClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartDominantLanguageDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateRemoteAccessSessionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRemoteAccessSession() != null)\r\n        sb.append(\"RemoteAccessSession: \").append(getRemoteAccessSession());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListNetworkProfilesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.IdentityProviderType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getProviderType() != null)\r\n        sb.append(\"ProviderType: \").append(getProviderType()).append(\",\");\r\n    if (getProviderDetails() != null)\r\n        sb.append(\"ProviderDetails: \").append(getProviderDetails()).append(\",\");\r\n    if (getAttributeMapping() != null)\r\n        sb.append(\"AttributeMapping: \").append(getAttributeMapping()).append(\",\");\r\n    if (getIdpIdentifiers() != null)\r\n        sb.append(\"IdpIdentifiers: \").append(getIdpIdentifiers()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.confirmDevice",
	"Comment": "confirms tracking of the device. this api call is the call that begins device tracking.",
	"Method": "ConfirmDeviceResult confirmDevice(ConfirmDeviceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeConfirmDevice(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.UntagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getKeys() != null)\r\n        sb.append(\"Keys: \").append(getKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilder.getClientConfiguration",
	"Comment": "gets the clientconfiguration currently configured in the builder",
	"Method": "ClientConfiguration getClientConfiguration(ClientConfiguration getClientConfiguration){\r\n    return this.clientConfig;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDisableProviderForUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.EC2CredentialsFetcher.isWithinExpirationThreshold",
	"Comment": "returns true if the current credentials are within the expirationthreshold, and therefore, should be refreshed.",
	"Method": "boolean isWithinExpirationThreshold(){\r\n    return (credentialsExpiration.getTime() - System.currentTimeMillis()) < EXPIRATION_THRESHOLD;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ListConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationType() != null)\r\n        sb.append(\"ConfigurationType: \").append(getConfigurationType()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getOrderBy() != null)\r\n        sb.append(\"OrderBy: \").append(getOrderBy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationAggregatorsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregators() != null)\r\n        sb.append(\"ConfigurationAggregators: \").append(getConfigurationAggregators()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.UntagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeTableStatisticsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminGetUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserAttributes() != null)\r\n        sb.append(\"UserAttributes: \").append(getUserAttributes()).append(\",\");\r\n    if (getUserCreateDate() != null)\r\n        sb.append(\"UserCreateDate: \").append(getUserCreateDate()).append(\",\");\r\n    if (getUserLastModifiedDate() != null)\r\n        sb.append(\"UserLastModifiedDate: \").append(getUserLastModifiedDate()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getUserStatus() != null)\r\n        sb.append(\"UserStatus: \").append(getUserStatus()).append(\",\");\r\n    if (getMFAOptions() != null)\r\n        sb.append(\"MFAOptions: \").append(getMFAOptions()).append(\",\");\r\n    if (getPreferredMfaSetting() != null)\r\n        sb.append(\"PreferredMfaSetting: \").append(getPreferredMfaSetting()).append(\",\");\r\n    if (getUserMFASettingList() != null)\r\n        sb.append(\"UserMFASettingList: \").append(getUserMFASettingList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.InstallToRemoteAccessSessionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAppUpload() != null)\r\n        sb.append(\"AppUpload: \").append(getAppUpload());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RemoveIpRoutesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateReplicationInstanceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstance() != null)\r\n        sb.append(\"ReplicationInstance: \").append(getReplicationInstance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetIdentityProviderByIdentifierRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getIdpIdentifier() != null)\r\n        sb.append(\"IdpIdentifier: \").append(getIdpIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.UpdateVirtualInterfaceAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceType() != null)\r\n        sb.append(\"VirtualInterfaceType: \").append(getVirtualInterfaceType()).append(\",\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState()).append(\",\");\r\n    if (getCustomerRouterConfig() != null)\r\n        sb.append(\"CustomerRouterConfig: \").append(getCustomerRouterConfig()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes()).append(\",\");\r\n    if (getBgpPeers() != null)\r\n        sb.append(\"BgpPeers: \").append(getBgpPeers()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey()).append(\",\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionUtils.initialize",
	"Comment": "initializes the region metadata by loading from the default hierarchyof region metadata locations.",
	"Method": "void initialize(){\r\n    regionMetadata = RegionMetadataFactory.create();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeAggregationAuthorizationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AbstractAWSDirectoryServiceAsync.describeSnapshotsAsync",
	"Comment": "simplified method form for invoking the describesnapshots operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync(DescribeSnapshotsRequest request,java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync,DescribeSnapshotsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeSnapshotsRequest, DescribeSnapshotsResult> asyncHandler,java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync,java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync,com.amazonaws.handlers.AsyncHandler<DescribeSnapshotsRequest, DescribeSnapshotsResult> asyncHandler){\r\n    return describeSnapshotsAsync(new DescribeSnapshotsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.describeExportConfigurations",
	"Comment": "describeexportconfigurations is deprecated.use instead describeexporttasks .",
	"Method": "DescribeExportConfigurationsResult describeExportConfigurations(DescribeExportConfigurationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeExportConfigurations(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClientBuilder.build",
	"Comment": "construct a synchronous implementation of awscognitoidentityprovider using the current builder configuration.",
	"Method": "AWSCognitoIdentityProvider build(AwsSyncClientParams params){\r\n    return new AWSCognitoIdentityProviderClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeLocationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.NewPrivateVirtualInterfaceAllocation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazonconnect using the current builder configuration.",
	"Method": "AmazonConnect build(AwsSyncClientParams params){\r\n    return new AmazonConnectClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeDirectConnectGatewayAssociationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StartDataCollectionByAgentIdsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentsConfigurationStatus() != null)\r\n        sb.append(\"AgentsConfigurationStatus: \").append(getAgentsConfigurationStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.describeLocationNfs",
	"Comment": "returns metadata, such as the path information, about a nfs location.",
	"Method": "DescribeLocationNfsResult describeLocationNfs(DescribeLocationNfsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLocationNfs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getChallengeName() != null)\r\n        sb.append(\"ChallengeName: \").append(getChallengeName()).append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession()).append(\",\");\r\n    if (getChallengeResponses() != null)\r\n        sb.append(\"ChallengeResponses: \").append(getChallengeResponses()).append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata()).append(\",\");\r\n    if (getUserContextData() != null)\r\n        sb.append(\"UserContextData: \").append(getUserContextData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.IdentityUsage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getDatasetCount() != null)\r\n        sb.append(\"DatasetCount: \").append(getDatasetCount()).append(\",\");\r\n    if (getDataStorage() != null)\r\n        sb.append(\"DataStorage: \").append(getDataStorage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserAttributes() != null)\r\n        sb.append(\"UserAttributes: \").append(getUserAttributes()).append(\",\");\r\n    if (getMFAOptions() != null)\r\n        sb.append(\"MFAOptions: \").append(getMFAOptions()).append(\",\");\r\n    if (getPreferredMfaSetting() != null)\r\n        sb.append(\"PreferredMfaSetting: \").append(getPreferredMfaSetting()).append(\",\");\r\n    if (getUserMFASettingList() != null)\r\n        sb.append(\"UserMFASettingList: \").append(getUserMFASettingList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.StartConfigurationRecorderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.withId",
	"Comment": "sets the id for this statement and returns the updated statement somultiple calls can be chained together.statement ids serve to help keep track of multiple statements, and areoften used to give the statement a meaningful, human readable name.if you do not explicitly assign an id to a statement, a unique id will beautomatically assigned when the statement is added to a policy.developers should be careful to not use the same statement id formultiple statements in the same policy. reusing the same statement id indifferent policies is not a problem.",
	"Method": "Statement withId(String id){\r\n    setId(id);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withProxyHost",
	"Comment": "sets the optional proxy host the client will connect through and returns the updatedclientconfiguration object.",
	"Method": "ClientConfiguration withProxyHost(String proxyHost){\r\n    setProxyHost(proxyHost);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListSecurityProfilesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSecurityProfileSummaryList() != null)\r\n        sb.append(\"SecurityProfileSummaryList: \").append(getSecurityProfileSummaryList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListDevicePoolsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.LifecyclePolicySummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyId() != null)\r\n        sb.append(\"PolicyId: \").append(getPolicyId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AbstractAmazonDirectConnectAsync.describeVirtualGatewaysAsync",
	"Comment": "simplified method form for invoking the describevirtualgateways operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync(DescribeVirtualGatewaysRequest request,java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync,DescribeVirtualGatewaysRequest request,com.amazonaws.handlers.AsyncHandler<DescribeVirtualGatewaysRequest, DescribeVirtualGatewaysResult> asyncHandler,java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync,java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync,com.amazonaws.handlers.AsyncHandler<DescribeVirtualGatewaysRequest, DescribeVirtualGatewaysResult> asyncHandler){\r\n    return describeVirtualGatewaysAsync(new DescribeVirtualGatewaysRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserIdentityInfoResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ResendConfirmationCodeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCodeDeliveryDetails() != null)\r\n        sb.append(\"CodeDeliveryDetails: \").append(getCodeDeliveryDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeSnapshotsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnapshots() != null)\r\n        sb.append(\"Snapshots: \").append(getSnapshots()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeConnections",
	"Comment": "describes the status of the connections that have been made between the replication instance and an endpoint.connections are created when you test an endpoint.",
	"Method": "DescribeConnectionsResult describeConnections(DescribeConnectionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeConnections(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.SentimentDetectionJobProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getSubmitTime() != null)\r\n        sb.append(\"SubmitTime: \").append(getSubmitTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.TimingInfo.startTimingFullSupport",
	"Comment": "captures the given wall clock time and start time in nanosecond",
	"Method": "TimingInfo startTimingFullSupport(TimingInfo startTimingFullSupport,long startTimeNano,TimingInfo startTimingFullSupport,long startTimeMillis,long startTimeNano){\r\n    return new TimingInfoFullSupport(startTimeMillis, startTimeNano, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.Operator.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AbstractAmazonDirectConnectAsync.describeInterconnectsAsync",
	"Comment": "simplified method form for invoking the describeinterconnects operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync(DescribeInterconnectsRequest request,java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync,DescribeInterconnectsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeInterconnectsRequest, DescribeInterconnectsResult> asyncHandler,java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync,java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync,com.amazonaws.handlers.AsyncHandler<DescribeInterconnectsRequest, DescribeInterconnectsResult> asyncHandler){\r\n    return describeInterconnectsAsync(new DescribeInterconnectsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionUtils.initializeFromFile",
	"Comment": "initializes the region metadata singleton from an xml file on disk.",
	"Method": "void initializeFromFile(File file){\r\n    try {\r\n        regionMetadata = loadMetadataFromFile(file);\r\n    } catch (IOException exception) {\r\n        throw new SdkClientException(\"Error parsing region metadata from \" + file, exception);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocateConnectionOnInterconnectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeEvents",
	"Comment": "lists events for a given source identifier and source type. you can also specify a start and end time. for moreinformation on aws dms events, see working with events and notificationsin the aws database migration user guide.",
	"Method": "DescribeEventsResult describeEvents(DescribeEventsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEvents(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.AWSComprehendMedicalClientBuilder.build",
	"Comment": "construct a synchronous implementation of awscomprehendmedical using the current builder configuration.",
	"Method": "AWSComprehendMedical build(AwsSyncClientParams params){\r\n    return new AWSComprehendMedicalClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.Ec2Config.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetArn() != null)\r\n        sb.append(\"SubnetArn: \").append(getSubnetArn()).append(\",\");\r\n    if (getSecurityGroupArns() != null)\r\n        sb.append(\"SecurityGroupArns: \").append(getSecurityGroupArns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ClassifierMetadata.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNumberOfLabels() != null)\r\n        sb.append(\"NumberOfLabels: \").append(getNumberOfLabels()).append(\",\");\r\n    if (getNumberOfTrainedDocuments() != null)\r\n        sb.append(\"NumberOfTrainedDocuments: \").append(getNumberOfTrainedDocuments()).append(\",\");\r\n    if (getNumberOfTestDocuments() != null)\r\n        sb.append(\"NumberOfTestDocuments: \").append(getNumberOfTestDocuments()).append(\",\");\r\n    if (getEvaluationMetrics() != null)\r\n        sb.append(\"EvaluationMetrics: \").append(getEvaluationMetrics());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.GetBulkPublishDetailsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getBulkPublishStartTime() != null)\r\n        sb.append(\"BulkPublishStartTime: \").append(getBulkPublishStartTime()).append(\",\");\r\n    if (getBulkPublishCompleteTime() != null)\r\n        sb.append(\"BulkPublishCompleteTime: \").append(getBulkPublishCompleteTime()).append(\",\");\r\n    if (getBulkPublishStatus() != null)\r\n        sb.append(\"BulkPublishStatus: \").append(getBulkPublishStatus()).append(\",\");\r\n    if (getFailureMessage() != null)\r\n        sb.append(\"FailureMessage: \").append(getFailureMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.DateUtils.parseISO8601Date",
	"Comment": "parses the specified date string as an iso 8601 date and returns the dateobject.",
	"Method": "Date parseISO8601Date(String dateString){\r\n    try {\r\n        return doParseISO8601Date(dateString);\r\n    } catch (RuntimeException ex) {\r\n        throw handleException(ex);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.GetPipelineDefinitionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineObjects() != null)\r\n        sb.append(\"PipelineObjects: \").append(getPipelineObjects()).append(\",\");\r\n    if (getParameterObjects() != null)\r\n        sb.append(\"ParameterObjects: \").append(getParameterObjects()).append(\",\");\r\n    if (getParameterValues() != null)\r\n        sb.append(\"ParameterValues: \").append(getParameterValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetSuiteRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeSchemasResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getSchemas() != null)\r\n        sb.append(\"Schemas: \").append(getSchemas());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.describeClusters",
	"Comment": "returns information about all provisioned dax clusters if no cluster identifier is specified, or about a specificdax cluster if a cluster identifier is supplied.if the cluster is in the creating state, only cluster level information will be displayed until all of the nodesare successfully provisioned.if the cluster is in the deleting state, only cluster level information will be displayed.if nodes are currently being added to the dax cluster, node endpoint information and creation time for theadditional nodes will not be displayed until they are completely provisioned. when the dax cluster state isavailable, the cluster is ready for use.if nodes are currently being removed from the dax cluster, no endpoint information for the removed nodes isdisplayed.",
	"Method": "DescribeClustersResult describeClusters(DescribeClustersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeClusters(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateLogSubscriptionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationAggregatorSourcesStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAggregatedSourceStatusList() != null)\r\n        sb.append(\"AggregatedSourceStatusList: \").append(getAggregatedSourceStatusList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AssociateHostedConnectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteConfigRuleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.getId",
	"Comment": "returns the id for this statement. statement ids serve to help keep trackof multiple statements, and are often used to give the statement ameaningful, human readable name.statement ids must be unique within a policy, but are not required to beglobally unique.if you do not explicitly assign an id to a statement, a unique id will beautomatically assigned when the statement is added to a policy.developers should be careful to not use the same statement id formultiple statements in the same policy. reusing the same statement id indifferent policies is not a problem.",
	"Method": "String getId(){\r\n    return id;\r\n}"
}, {
	"Path": "com.amazonaws.DefaultRequest.getOriginalRequest",
	"Comment": "returns the original, user facing request object which this internalrequest object is representing.",
	"Method": "AmazonWebServiceRequest getOriginalRequest(){\r\n    return originalRequest;\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withUserAgentPrefix",
	"Comment": "sets the http user agent prefix header used in requests and returns the updated clientconfigurationobject.",
	"Method": "ClientConfiguration withUserAgentPrefix(String prefix){\r\n    setUserAgentPrefix(prefix);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeDominantLanguageDetectionJob",
	"Comment": "gets the properties associated with a dominant language detection job. use this operation to get the status of adetection job.",
	"Method": "DescribeDominantLanguageDetectionJobResult describeDominantLanguageDetectionJob(DescribeDominantLanguageDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDominantLanguageDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Partition.getDefaults",
	"Comment": "returns the default endpoint configuration of the partition.",
	"Method": "Endpoint getDefaults(){\r\n    return defaults;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListUniqueProblemsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUniqueProblems() != null)\r\n        sb.append(\"UniqueProblems: \").append(getUniqueProblems()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerClient.getTags",
	"Comment": "queries for available tag keys and tag values for a specified period. you can search the tag values for anarbitrary string.",
	"Method": "GetTagsResult getTags(GetTagsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetTags(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.GetFederationTokenResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCredentials() != null)\r\n        sb.append(\"Credentials: \").append(getCredentials());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateInstanceProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceProfile() != null)\r\n        sb.append(\"InstanceProfile: \").append(getInstanceProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.AmazonHttpClient.getTimeOffset",
	"Comment": "returns the time difference in seconds between this client and aws.",
	"Method": "int getTimeOffset(){\r\n    return timeOffset;\r\n}"
}, {
	"Path": "com.amazonaws.http.conn.ssl.SdkTLSSocketFactoryTest.preparedSocket_NullProtocols",
	"Comment": "test when the edge case when the both supported and enabled protocols are null.",
	"Method": "void preparedSocket_NullProtocols(){\r\n    SdkTLSSocketFactory f = new SdkTLSSocketFactory(SSLContext.getDefault(), null);\r\n    TestSSLSocket socket = new TestSSLSocket() {\r\n        @Override\r\n        public String[] getSupportedProtocols() {\r\n            return null;\r\n        }\r\n        @Override\r\n        public String[] getEnabledProtocols() {\r\n            return null;\r\n        }\r\n    };\r\n    f.prepareSocket(socket);\r\n    assertFalse(socket.wereProtocolsEnabled());\r\n}"
}, {
	"Path": "com.amazonaws.http.conn.ssl.SdkTLSSocketFactoryTest.preparedSocket_NullProtocols",
	"Comment": "test when the edge case when the both supported and enabled protocols are null.",
	"Method": "void preparedSocket_NullProtocols(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.http.conn.ssl.SdkTLSSocketFactoryTest.preparedSocket_NullProtocols",
	"Comment": "test when the edge case when the both supported and enabled protocols are null.",
	"Method": "void preparedSocket_NullProtocols(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateLocationNfsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponse.getHeader",
	"Comment": "looks up a header by name and returns its value. does case insensitive comparison.",
	"Method": "String getHeader(String headerName){\r\n    return headers.get(headerName);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.listPipelines",
	"Comment": "lists the pipeline identifiers for all active pipelines that you have permission to access.",
	"Method": "ListPipelinesResult listPipelines(ListPipelinesRequest request,ListPipelinesResult listPipelines){\r\n    return listPipelines(new ListPipelinesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ReservationAggregates.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUtilizationPercentage() != null)\r\n        sb.append(\"UtilizationPercentage: \").append(getUtilizationPercentage()).append(\",\");\r\n    if (getUtilizationPercentageInUnits() != null)\r\n        sb.append(\"UtilizationPercentageInUnits: \").append(getUtilizationPercentageInUnits()).append(\",\");\r\n    if (getPurchasedHours() != null)\r\n        sb.append(\"PurchasedHours: \").append(getPurchasedHours()).append(\",\");\r\n    if (getPurchasedUnits() != null)\r\n        sb.append(\"PurchasedUnits: \").append(getPurchasedUnits()).append(\",\");\r\n    if (getTotalActualHours() != null)\r\n        sb.append(\"TotalActualHours: \").append(getTotalActualHours()).append(\",\");\r\n    if (getTotalActualUnits() != null)\r\n        sb.append(\"TotalActualUnits: \").append(getTotalActualUnits()).append(\",\");\r\n    if (getUnusedHours() != null)\r\n        sb.append(\"UnusedHours: \").append(getUnusedHours()).append(\",\");\r\n    if (getUnusedUnits() != null)\r\n        sb.append(\"UnusedUnits: \").append(getUnusedUnits()).append(\",\");\r\n    if (getOnDemandCostOfRIHoursUsed() != null)\r\n        sb.append(\"OnDemandCostOfRIHoursUsed: \").append(getOnDemandCostOfRIHoursUsed()).append(\",\");\r\n    if (getNetRISavings() != null)\r\n        sb.append(\"NetRISavings: \").append(getNetRISavings()).append(\",\");\r\n    if (getTotalPotentialRISavings() != null)\r\n        sb.append(\"TotalPotentialRISavings: \").append(getTotalPotentialRISavings()).append(\",\");\r\n    if (getAmortizedUpfrontFee() != null)\r\n        sb.append(\"AmortizedUpfrontFee: \").append(getAmortizedUpfrontFee()).append(\",\");\r\n    if (getAmortizedRecurringFee() != null)\r\n        sb.append(\"AmortizedRecurringFee: \").append(getAmortizedRecurringFee()).append(\",\");\r\n    if (getTotalAmortizedFee() != null)\r\n        sb.append(\"TotalAmortizedFee: \").append(getTotalAmortizedFee());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteAggregationAuthorizationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthorizedAccountId() != null)\r\n        sb.append(\"AuthorizedAccountId: \").append(getAuthorizedAccountId()).append(\",\");\r\n    if (getAuthorizedAwsRegion() != null)\r\n        sb.append(\"AuthorizedAwsRegion: \").append(getAuthorizedAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteEventSubscriptionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubscriptionName() != null)\r\n        sb.append(\"SubscriptionName: \").append(getSubscriptionName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.GetDirectoryLimitsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryLimits() != null)\r\n        sb.append(\"DirectoryLimits: \").append(getDirectoryLimits());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateResourceServerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getIdentifier() != null)\r\n        sb.append(\"Identifier: \").append(getIdentifier()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getScopes() != null)\r\n        sb.append(\"Scopes: \").append(getScopes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.AddIpRoutesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getIpRoutes() != null)\r\n        sb.append(\"IpRoutes: \").append(getIpRoutes()).append(\",\");\r\n    if (getUpdateSecurityGroupForDirectoryControllers() != null)\r\n        sb.append(\"UpdateSecurityGroupForDirectoryControllers: \").append(getUpdateSecurityGroupForDirectoryControllers());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.LegacyRegionXmlLoadUtils.load",
	"Comment": "loads a set of region metadata from an xml file stored as a resourceof the given classloader.",
	"Method": "RegionMetadata load(URI uri,ClientConfiguration config,RegionMetadata load,File file,RegionMetadata load,InputStream stream,RegionMetadata load,Class<?> clazz,String name,RegionMetadata load,ClassLoader classLoader,String name){\r\n    InputStream stream = classLoader.getResourceAsStream(name);\r\n    if (stream == null) {\r\n        throw new FileNotFoundException(\"No resource '\" + name + \"' found.\");\r\n    }\r\n    return load(stream);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.deleteReplicationInstance",
	"Comment": "deletes the specified replication instance.you must delete any migration tasks that are associated with the replication instance before you can delete it.",
	"Method": "DeleteReplicationInstanceResult deleteReplicationInstance(DeleteReplicationInstanceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteReplicationInstance(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartDominantLanguageDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeviceMinutes.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal()).append(\",\");\r\n    if (getMetered() != null)\r\n        sb.append(\"Metered: \").append(getMetered()).append(\",\");\r\n    if (getUnmetered() != null)\r\n        sb.append(\"Unmetered: \").append(getUnmetered());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserPoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPool() != null)\r\n        sb.append(\"UserPool: \").append(getUserPool());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ForgotPasswordResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCodeDeliveryDetails() != null)\r\n        sb.append(\"CodeDeliveryDetails: \").append(getCodeDeliveryDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.startConfigurationRecorder",
	"Comment": "starts recording configurations of the aws resources you have selected to record in your aws account.you must have created at least one delivery channel to successfully start the configuration recorder.",
	"Method": "StartConfigurationRecorderResult startConfigurationRecorder(StartConfigurationRecorderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartConfigurationRecorder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetAccountSettingsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminListGroupsForUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS3Signer.sign",
	"Comment": "signs the specified request with the aws3 signing protocol by using theaws account credentials specified when this object was constructed andadding the required aws3 headers to the request.",
	"Method": "void sign(SignableRequest<?> request,AWSCredentials credentials){\r\n    if (credentials instanceof AnonymousAWSCredentials) {\r\n        return;\r\n    }\r\n    AWSCredentials sanitizedCredentials = sanitizeCredentials(credentials);\r\n    SigningAlgorithm algorithm = SigningAlgorithm.HmacSHA256;\r\n    String nonce = UUID.randomUUID().toString();\r\n    int timeOffset = request.getTimeOffset();\r\n    Date dateValue = getSignatureDate(timeOffset);\r\n    String date = DateUtils.formatRFC822Date(dateValue);\r\n    boolean isHttps = false;\r\n    if (overriddenDate != null)\r\n        date = overriddenDate;\r\n    request.addHeader(\"Date\", date);\r\n    request.addHeader(\"X-Amz-Date\", date);\r\n    String hostHeader = request.getEndpoint().getHost();\r\n    if (SdkHttpUtils.isUsingNonDefaultPort(request.getEndpoint())) {\r\n        hostHeader += \":\" + request.getEndpoint().getPort();\r\n    }\r\n    request.addHeader(\"Host\", hostHeader);\r\n    if (sanitizedCredentials instanceof AWSSessionCredentials) {\r\n        addSessionCredentials(request, (AWSSessionCredentials) sanitizedCredentials);\r\n    }\r\n    byte[] bytesToSign;\r\n    String stringToSign;\r\n    if (isHttps) {\r\n        request.addHeader(NONCE_HEADER, nonce);\r\n        stringToSign = date + nonce;\r\n        bytesToSign = stringToSign.getBytes(UTF8);\r\n    } else {\r\n        String path = SdkHttpUtils.appendUri(request.getEndpoint().getPath(), request.getResourcePath());\r\n        stringToSign = request.getHttpMethod().toString() + \"\\n\" + getCanonicalizedResourcePath(path) + \"\\n\" + getCanonicalizedQueryString(request.getParameters()) + \"\\n\" + getCanonicalizedHeadersForStringToSign(request) + \"\\n\" + getRequestPayloadWithoutQueryParams(request);\r\n        bytesToSign = hash(stringToSign);\r\n    }\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"Calculated StringToSign: \" + stringToSign);\r\n    String signature = signAndBase64Encode(bytesToSign, sanitizedCredentials.getAWSSecretKey(), algorithm);\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(isHttps ? HTTPS_SCHEME : HTTP_SCHEME).append(\" \");\r\n    builder.append(\"AWSAccessKeyId=\" + sanitizedCredentials.getAWSAccessKeyId() + \",\");\r\n    builder.append(\"Algorithm=\" + algorithm.toString() + \",\");\r\n    if (!isHttps) {\r\n        builder.append(getSignedHeadersComponent(request) + \",\");\r\n    }\r\n    builder.append(\"Signature=\" + signature);\r\n    request.addHeader(AUTHORIZATION_HEADER, builder.toString());\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListSamplesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSamples() != null)\r\n        sb.append(\"Samples: \").append(getSamples()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateNetworkProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNetworkProfile() != null)\r\n        sb.append(\"NetworkProfile: \").append(getNetworkProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.EventContextDataType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIpAddress() != null)\r\n        sb.append(\"IpAddress: \").append(getIpAddress()).append(\",\");\r\n    if (getDeviceName() != null)\r\n        sb.append(\"DeviceName: \").append(getDeviceName()).append(\",\");\r\n    if (getTimezone() != null)\r\n        sb.append(\"Timezone: \").append(getTimezone()).append(\",\");\r\n    if (getCity() != null)\r\n        sb.append(\"City: \").append(getCity()).append(\",\");\r\n    if (getCountry() != null)\r\n        sb.append(\"Country: \").append(getCountry());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.batchGetResourceConfig",
	"Comment": "returns the current configuration for one or more requested resources. the operation also returns a list ofresources that are not processed in the current request. if there are no unprocessed resources, the operationreturns an empty unprocessedresourcekeys list.the api does not return results for deleted resources.the api does not return any tags for the requested resources. this information is filtered out of thesupplementaryconfiguration section of the api response.",
	"Method": "BatchGetResourceConfigResult batchGetResourceConfig(BatchGetResourceConfigRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchGetResourceConfig(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigStreamDeliveryInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLastStatus() != null)\r\n        sb.append(\"LastStatus: \").append(getLastStatus()).append(\",\");\r\n    if (getLastErrorCode() != null)\r\n        sb.append(\"LastErrorCode: \").append(getLastErrorCode()).append(\",\");\r\n    if (getLastErrorMessage() != null)\r\n        sb.append(\"LastErrorMessage: \").append(getLastErrorMessage()).append(\",\");\r\n    if (getLastStatusChangeTime() != null)\r\n        sb.append(\"LastStatusChangeTime: \").append(getLastStatusChangeTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDisableProviderForUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUser() != null)\r\n        sb.append(\"User: \").append(getUser());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.disassociateConfigurationItemsFromApplication",
	"Comment": "disassociates one or more configuration items from an application.",
	"Method": "DisassociateConfigurationItemsFromApplicationResult disassociateConfigurationItemsFromApplication(DisassociateConfigurationItemsFromApplicationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociateConfigurationItemsFromApplication(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.UpdateApplicationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationId() != null)\r\n        sb.append(\"ConfigurationId: \").append(getConfigurationId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.JsonErrorResponseHandler.createException",
	"Comment": "create an amazonserviceexception using the chain of unmarshallers. this method will neverreturn null, it will always return a valid amazonserviceexception",
	"Method": "AmazonServiceException createException(String errorCode,JsonContent jsonContent){\r\n    AmazonServiceException ase = unmarshallException(errorCode, jsonContent);\r\n    if (ase == null) {\r\n        ase = new AmazonServiceException(\"Unable to unmarshall exception response with the unmarshallers provided\");\r\n    }\r\n    return ase;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateConnectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteInstanceProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReloadTablesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getTablesToReload() != null)\r\n        sb.append(\"TablesToReload: \").append(getTablesToReload()).append(\",\");\r\n    if (getReloadOption() != null)\r\n        sb.append(\"ReloadOption: \").append(getReloadOption());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetUploadResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUpload() != null)\r\n        sb.append(\"Upload: \").append(getUpload());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtils.evaluateAsString",
	"Comment": "evaluates the specified expression on the specified node and returns theresult as a string.",
	"Method": "String evaluateAsString(String expression,Node node,XPath xpath){\r\n    if (isEmpty(node))\r\n        return null;\r\n    if (!expression.equals(\".\")) {\r\n        if (asNode(expression, node, xpath) == null)\r\n            return null;\r\n    }\r\n    String s = xpath.evaluate(expression, node);\r\n    return s.trim();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.CoverageByTime.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getGroups() != null)\r\n        sb.append(\"Groups: \").append(getGroups()).append(\",\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListEntitiesDetectionJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutDeliveryChannelResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeConnectionsOnInterconnectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.VerifyTrustRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.GetLifecyclePolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyId() != null)\r\n        sb.append(\"PolicyId: \").append(getPolicyId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserRoutingProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.CreateSubnetGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetGroupName() != null)\r\n        sb.append(\"SubnetGroupName: \").append(getSubnetGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartDocumentClassificationJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getDocumentClassifierArn() != null)\r\n        sb.append(\"DocumentClassifierArn: \").append(getDocumentClassifierArn()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.setTaskStatus",
	"Comment": "task runners call settaskstatus to notify aws data pipeline that a task is completed and provideinformation about the final status. a task runner makes this call regardless of whether the task was sucessful. atask runner does not need to call settaskstatus for tasks that are canceled by the web serviceduring a call to reporttaskprogress.",
	"Method": "SetTaskStatusResult setTaskStatus(SetTaskStatusRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSetTaskStatus(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ContextDataType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIpAddress() != null)\r\n        sb.append(\"IpAddress: \").append(getIpAddress()).append(\",\");\r\n    if (getServerName() != null)\r\n        sb.append(\"ServerName: \").append(getServerName()).append(\",\");\r\n    if (getServerPath() != null)\r\n        sb.append(\"ServerPath: \").append(getServerPath()).append(\",\");\r\n    if (getHttpHeaders() != null)\r\n        sb.append(\"HttpHeaders: \").append(getHttpHeaders()).append(\",\");\r\n    if (getEncodedData() != null)\r\n        sb.append(\"EncodedData: \").append(getEncodedData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.startDominantLanguageDetectionJob",
	"Comment": "starts an asynchronous dominant language detection job for a collection of documents. use the operation to trackthe status of a job.",
	"Method": "StartDominantLanguageDetectionJobResult startDominantLanguageDetectionJob(StartDominantLanguageDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartDominantLanguageDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserHierarchyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ConnectDirectoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteConditionalForwarderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getRemoteDomainName() != null)\r\n        sb.append(\"RemoteDomainName: \").append(getRemoteDomainName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.DeleteLifecyclePolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.SetCognitoEventsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilder.withMetricsCollector",
	"Comment": "sets a custom requestmetriccollector to use for the client.",
	"Method": "Subclass withMetricsCollector(RequestMetricCollector metrics){\r\n    setMetricsCollector(metrics);\r\n    return getSubclass();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DominantLanguageDetectionJobFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withProxyPassword",
	"Comment": "sets the optional proxy password to use when connecting through a proxy, and returns theupdated clientconfiguration object.",
	"Method": "ClientConfiguration withProxyPassword(String proxyPassword){\r\n    setProxyPassword(proxyPassword);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.associateSoftwareToken",
	"Comment": "returns a unique generated shared secret key code for the user account. the request takes an access token or asession string, but not both.",
	"Method": "AssociateSoftwareTokenResult associateSoftwareToken(AssociateSoftwareTokenRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateSoftwareToken(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetDiscoveredResourceCountsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceTypes() != null)\r\n        sb.append(\"ResourceTypes: \").append(getResourceTypes()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeLoaResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoaContent() != null)\r\n        sb.append(\"LoaContent: \").append(getLoaContent()).append(\",\");\r\n    if (getLoaContentType() != null)\r\n        sb.append(\"LoaContentType: \").append(getLoaContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.RebootReplicationInstanceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getForceFailover() != null)\r\n        sb.append(\"ForceFailover: \").append(getForceFailover());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withNonProxyHosts",
	"Comment": "set the optional hosts the client will access without goingthrough the proxy.",
	"Method": "ClientConfiguration withNonProxyHosts(String nonProxyHosts){\r\n    setNonProxyHosts(nonProxyHosts);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.PartOfSpeechTag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTag() != null)\r\n        sb.append(\"Tag: \").append(getTag()).append(\",\");\r\n    if (getScore() != null)\r\n        sb.append(\"Score: \").append(getScore());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeLocationEfsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.putCustomQueryParameter",
	"Comment": "add a custom query parameter for the request. since multiple values are allowed for the samequery parameter, this method does not overwrite any existing parameter values in the request.any custom query parameters that are defined are used in the http request to the aws service.",
	"Method": "void putCustomQueryParameter(String name,String value){\r\n    if (customQueryParameters == null) {\r\n        customQueryParameters = new HashMap<String, List<String>>();\r\n    }\r\n    List<String> paramList = customQueryParameters.get(name);\r\n    if (paramList == null) {\r\n        paramList = new LinkedList<String>();\r\n        customQueryParameters.put(name, paramList);\r\n    }\r\n    paramList.add(value);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DocumentClassifierFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.BGPPeer.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBgpPeerId() != null)\r\n        sb.append(\"BgpPeerId: \").append(getBgpPeerId()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getBgpPeerState() != null)\r\n        sb.append(\"BgpPeerState: \").append(getBgpPeerState()).append(\",\");\r\n    if (getBgpStatus() != null)\r\n        sb.append(\"BgpStatus: \").append(getBgpStatus()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DeleteTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectSyntaxItemResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIndex() != null)\r\n        sb.append(\"Index: \").append(getIndex()).append(\",\");\r\n    if (getSyntaxTokens() != null)\r\n        sb.append(\"SyntaxTokens: \").append(getSyntaxTokens());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeComplianceByResourceAsync",
	"Comment": "simplified method form for invoking the describecompliancebyresource operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync(DescribeComplianceByResourceRequest request,java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync,DescribeComplianceByResourceRequest request,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByResourceRequest, DescribeComplianceByResourceResult> asyncHandler,java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync,java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByResourceRequest, DescribeComplianceByResourceResult> asyncHandler){\r\n    return describeComplianceByResourceAsync(new DescribeComplianceByResourceRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UnshareTarget.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.DetectPHIResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntities() != null)\r\n        sb.append(\"Entities: \").append(getEntities()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribePendingAggregationRequestsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPendingAggregationRequests() != null)\r\n        sb.append(\"PendingAggregationRequests: \").append(getPendingAggregationRequests()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListSchemaExtensionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateReplicationSubnetGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationSubnetGroupIdentifier() != null)\r\n        sb.append(\"ReplicationSubnetGroupIdentifier: \").append(getReplicationSubnetGroupIdentifier()).append(\",\");\r\n    if (getReplicationSubnetGroupDescription() != null)\r\n        sb.append(\"ReplicationSubnetGroupDescription: \").append(getReplicationSubnetGroupDescription()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetOfferingStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCurrent() != null)\r\n        sb.append(\"Current: \").append(getCurrent()).append(\",\");\r\n    if (getNextPeriod() != null)\r\n        sb.append(\"NextPeriod: \").append(getNextPeriod()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.deleteTrust",
	"Comment": "deletes an existing trust relationship between your aws managed microsoft ad directory and an external domain.",
	"Method": "DeleteTrustResult deleteTrust(DeleteTrustRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteTrust(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeTopicsDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.AggregateComplianceByConfigRule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getCompliance() != null)\r\n        sb.append(\"Compliance: \").append(getCompliance()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListResourceServersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.PurchaseOfferingRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingId() != null)\r\n        sb.append(\"OfferingId: \").append(getOfferingId()).append(\",\");\r\n    if (getQuantity() != null)\r\n        sb.append(\"Quantity: \").append(getQuantity()).append(\",\");\r\n    if (getOfferingPromotionId() != null)\r\n        sb.append(\"OfferingPromotionId: \").append(getOfferingPromotionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.getMaxConnections",
	"Comment": "returns the maximum number of allowed open http connections.",
	"Method": "int getMaxConnections(){\r\n    return maxConnections;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteUploadResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.generateExpirationDate",
	"Comment": "generates an expiration date for the presigned url. if user has specifiedan expiration date, check if it is in the given limit.",
	"Method": "long generateExpirationDate(Date expirationDate){\r\n    long expirationInSeconds = expirationDate != null ? ((expirationDate.getTime() - clock.currentTimeMillis()) / 1000L) : PRESIGN_URL_MAX_EXPIRATION_SECONDS;\r\n    if (expirationInSeconds > PRESIGN_URL_MAX_EXPIRATION_SECONDS) {\r\n        throw new SdkClientException(\"Requests that are pre-signed by SigV4 algorithm are valid for at most 7 days. \" + \"The expiration date set on the current request [\" + AWS4SignerUtils.formatTimestamp(expirationDate.getTime()) + \"] has exceeded this limit.\");\r\n    }\r\n    return expirationInSeconds;\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.newAuthScope",
	"Comment": "returns a new instance of authscope used for proxy authentication.",
	"Method": "AuthScope newAuthScope(HttpClientSettings settings){\r\n    return new AuthScope(settings.getProxyHost(), settings.getProxyPort());\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UpdateSubnetGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetGroup() != null)\r\n        sb.append(\"SubnetGroup: \").append(getSubnetGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AssociateSoftwareTokenRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.IdleConnectionReaper.size",
	"Comment": "for testing purposes.returns the number of connection managers currently monitored by thisreaper.",
	"Method": "int size(){\r\n    return connectionManagers.size();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.confirmPrivateVirtualInterface",
	"Comment": "accepts ownership of a private virtual interface created by another aws account.after the virtual interface owner makes this call, the virtual interface is created and attached to the specifiedvirtual private gateway or direct connect gateway, and is made available to handle traffic.",
	"Method": "ConfirmPrivateVirtualInterfaceResult confirmPrivateVirtualInterface(ConfirmPrivateVirtualInterfaceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeConfirmPrivateVirtualInterface(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateUserPoolClientRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getClientName() != null)\r\n        sb.append(\"ClientName: \").append(getClientName()).append(\",\");\r\n    if (getRefreshTokenValidity() != null)\r\n        sb.append(\"RefreshTokenValidity: \").append(getRefreshTokenValidity()).append(\",\");\r\n    if (getReadAttributes() != null)\r\n        sb.append(\"ReadAttributes: \").append(getReadAttributes()).append(\",\");\r\n    if (getWriteAttributes() != null)\r\n        sb.append(\"WriteAttributes: \").append(getWriteAttributes()).append(\",\");\r\n    if (getExplicitAuthFlows() != null)\r\n        sb.append(\"ExplicitAuthFlows: \").append(getExplicitAuthFlows()).append(\",\");\r\n    if (getSupportedIdentityProviders() != null)\r\n        sb.append(\"SupportedIdentityProviders: \").append(getSupportedIdentityProviders()).append(\",\");\r\n    if (getCallbackURLs() != null)\r\n        sb.append(\"CallbackURLs: \").append(getCallbackURLs()).append(\",\");\r\n    if (getLogoutURLs() != null)\r\n        sb.append(\"LogoutURLs: \").append(getLogoutURLs()).append(\",\");\r\n    if (getDefaultRedirectURI() != null)\r\n        sb.append(\"DefaultRedirectURI: \").append(getDefaultRedirectURI()).append(\",\");\r\n    if (getAllowedOAuthFlows() != null)\r\n        sb.append(\"AllowedOAuthFlows: \").append(getAllowedOAuthFlows()).append(\",\");\r\n    if (getAllowedOAuthScopes() != null)\r\n        sb.append(\"AllowedOAuthScopes: \").append(getAllowedOAuthScopes()).append(\",\");\r\n    if (getAllowedOAuthFlowsUserPoolClient() != null)\r\n        sb.append(\"AllowedOAuthFlowsUserPoolClient: \").append(getAllowedOAuthFlowsUserPoolClient()).append(\",\");\r\n    if (getAnalyticsConfiguration() != null)\r\n        sb.append(\"AnalyticsConfiguration: \").append(getAnalyticsConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getReturnSize() != null)\r\n        sb.append(\"ReturnSize: \").append(getReturnSize()).append(\",\");\r\n    if (getTotalSize() != null)\r\n        sb.append(\"TotalSize: \").append(getTotalSize());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.listRuns",
	"Comment": "gets information about runs, given an aws device farm project arn.",
	"Method": "ListRunsResult listRuns(ListRunsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListRuns(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ConfirmSignUpResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Resolution.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getWidth() != null)\r\n        sb.append(\"Width: \").append(getWidth()).append(\",\");\r\n    if (getHeight() != null)\r\n        sb.append(\"Height: \").append(getHeight());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListLogSubscriptionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLogSubscriptions() != null)\r\n        sb.append(\"LogSubscriptions: \").append(getLogSubscriptions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminResetUserPasswordRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateReplicationTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskIdentifier() != null)\r\n        sb.append(\"ReplicationTaskIdentifier: \").append(getReplicationTaskIdentifier()).append(\",\");\r\n    if (getSourceEndpointArn() != null)\r\n        sb.append(\"SourceEndpointArn: \").append(getSourceEndpointArn()).append(\",\");\r\n    if (getTargetEndpointArn() != null)\r\n        sb.append(\"TargetEndpointArn: \").append(getTargetEndpointArn()).append(\",\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getMigrationType() != null)\r\n        sb.append(\"MigrationType: \").append(getMigrationType()).append(\",\");\r\n    if (getTableMappings() != null)\r\n        sb.append(\"TableMappings: \").append(getTableMappings()).append(\",\");\r\n    if (getReplicationTaskSettings() != null)\r\n        sb.append(\"ReplicationTaskSettings: \").append(getReplicationTaskSettings()).append(\",\");\r\n    if (getCdcStartTime() != null)\r\n        sb.append(\"CdcStartTime: \").append(getCdcStartTime()).append(\",\");\r\n    if (getCdcStartPosition() != null)\r\n        sb.append(\"CdcStartPosition: \").append(getCdcStartPosition()).append(\",\");\r\n    if (getCdcStopPosition() != null)\r\n        sb.append(\"CdcStopPosition: \").append(getCdcStopPosition()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.KeyPhrasesDetectionJobFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeDeliveryChannelsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryChannelNames() != null)\r\n        sb.append(\"DeliveryChannelNames: \").append(getDeliveryChannelNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteReplicationInstanceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstance() != null)\r\n        sb.append(\"ReplicationInstance: \").append(getReplicationInstance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.setEffect",
	"Comment": "sets the result effect of this policy statement when it is evaluated. apolicy statement can either allow access or explicitly",
	"Method": "void setEffect(Effect effect){\r\n    this.effect = effect;\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.withResources",
	"Comment": "sets the resources associated with this policy statement and returns thisupdated statement object so that additional method calls can be chainedtogether.resources are what a policy statement is allowing or denying access to,such as an amazon sqs queue or an amazon sns topic.note that some services allow only one resource to be specified perpolicy statement.",
	"Method": "Statement withResources(Resource resources){\r\n    setResources(Arrays.asList(resources));\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.DeleteLifecyclePolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyId() != null)\r\n        sb.append(\"PolicyId: \").append(getPolicyId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectAsyncClient.describeInterconnectsAsync",
	"Comment": "simplified method form for invoking the describeinterconnects operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync(DescribeInterconnectsRequest request,java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync,DescribeInterconnectsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeInterconnectsRequest, DescribeInterconnectsResult> asyncHandler,java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync,java.util.concurrent.Future<DescribeInterconnectsResult> describeInterconnectsAsync,com.amazonaws.handlers.AsyncHandler<DescribeInterconnectsRequest, DescribeInterconnectsResult> asyncHandler){\r\n    return describeInterconnectsAsync(new DescribeInterconnectsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeDirectConnectGatewayAttachmentsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayAttachments() != null)\r\n        sb.append(\"DirectConnectGatewayAttachments: \").append(getDirectConnectGatewayAttachments()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeConfigRuleEvaluationStatusAsync",
	"Comment": "simplified method form for invoking the describeconfigruleevaluationstatus operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync(DescribeConfigRuleEvaluationStatusRequest request,java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync,DescribeConfigRuleEvaluationStatusRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigRuleEvaluationStatusRequest, DescribeConfigRuleEvaluationStatusResult> asyncHandler,java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync,java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigRuleEvaluationStatusRequest, DescribeConfigRuleEvaluationStatusResult> asyncHandler){\r\n    return describeConfigRuleEvaluationStatusAsync(new DescribeConfigRuleEvaluationStatusRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.NewPrivateVirtualInterface.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserPoolClientResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolClient() != null)\r\n        sb.append(\"UserPoolClient: \").append(getUserPoolClient());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.StaxUnmarshallerContext.getHeader",
	"Comment": "returns the value of the header with the specified name from theresponse, or null if not present.",
	"Method": "String getHeader(String header){\r\n    if (headers == null)\r\n        return null;\r\n    return headers.get(header);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeEntityRecognizerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntityRecognizerProperties() != null)\r\n        sb.append(\"EntityRecognizerProperties: \").append(getEntityRecognizerProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutConfigRuleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRule() != null)\r\n        sb.append(\"ConfigRule: \").append(getConfigRule());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionUtils.getRegionMetadata",
	"Comment": "returns the current set of region metadata for this process,initializing it if it has not yet been explicitly initialized before.",
	"Method": "RegionMetadata getRegionMetadata(){\r\n    RegionMetadata rval = regionMetadata;\r\n    if (rval != null) {\r\n        return rval;\r\n    }\r\n    synchronized (RegionUtils.class) {\r\n        if (regionMetadata == null) {\r\n            initialize();\r\n        }\r\n    }\r\n    return regionMetadata;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SoftwareTokenMfaSettingsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getPreferredMfa() != null)\r\n        sb.append(\"PreferredMfa: \").append(getPreferredMfa());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserPoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListRoutingProfilesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoutingProfileSummaryList() != null)\r\n        sb.append(\"RoutingProfileSummaryList: \").append(getRoutingProfileSummaryList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.SubscribeToDatasetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getDatasetName() != null)\r\n        sb.append(\"DatasetName: \").append(getDatasetName()).append(\",\");\r\n    if (getDeviceId() != null)\r\n        sb.append(\"DeviceId: \").append(getDeviceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.AWSComprehendMedicalAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.util.CollectionUtils.join",
	"Comment": "joins a collection of strings with the given separator into a single string.",
	"Method": "String join(Collection<String> toJoin,String separator){\r\n    if (isNullOrEmpty(toJoin)) {\r\n        return \"\";\r\n    }\r\n    StringBuilder joinedString = new StringBuilder();\r\n    int currentIndex = 0;\r\n    for (String s : toJoin) {\r\n        if (s != null) {\r\n            joinedString.append(s);\r\n        }\r\n        if (currentIndex++ != toJoin.size() - 1) {\r\n            joinedString.append(separator);\r\n        }\r\n    }\r\n    return joinedString.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.internal.AbstractProfilesConfigFileScanner.run",
	"Comment": "scan through the given input, and perform the defined actions.",
	"Method": "void run(Scanner scanner){\r\n    String currentProfileName = null;\r\n    try {\r\n        while (scanner.hasNextLine()) {\r\n            String line = scanner.nextLine().trim();\r\n            if (line.isEmpty() || line.startsWith(\"#\")) {\r\n                onEmptyOrCommentLine(currentProfileName, line);\r\n                continue;\r\n            }\r\n            String newProfileName = parseProfileName(line);\r\n            boolean atNewProfileStartingLine = newProfileName != null;\r\n            if (atNewProfileStartingLine) {\r\n                if (currentProfileName != null) {\r\n                    onProfileEndingLine(currentProfileName);\r\n                }\r\n                onProfileStartingLine(newProfileName, line);\r\n                currentProfileName = newProfileName;\r\n            } else {\r\n                Entry<String, String> property = parsePropertyLine(line);\r\n                if (currentProfileName == null) {\r\n                    throw new IllegalArgumentException(\"Property is defined without a preceding profile name. \" + \"Current line: \" + line);\r\n                }\r\n                onProfileProperty(currentProfileName, property.getKey(), property.getValue(), isSupportedProperty(property.getKey()), line);\r\n            }\r\n        }\r\n        if (currentProfileName != null) {\r\n            onProfileEndingLine(currentProfileName);\r\n        }\r\n        onEndOfFile();\r\n    } finally {\r\n        scanner.close();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.CreateApplicationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeConnectionLoaResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoa() != null)\r\n        sb.append(\"Loa: \").append(getLoa());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.ProgressEvent.getEventCode",
	"Comment": "returns the unique event code identifying the type of event this objectrepresents.",
	"Method": "int getEventCode(){\r\n    Integer legacyCode = legacyEventCodes.get(eventType);\r\n    return legacyCode == null ? -1 : legacyCode;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeRefreshSchemasStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRefreshSchemasStatus() != null)\r\n        sb.append(\"RefreshSchemasStatus: \").append(getRefreshSchemasStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeDirectoriesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryIds() != null)\r\n        sb.append(\"DirectoryIds: \").append(getDirectoryIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RestoreFromSnapshotRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnapshotId() != null)\r\n        sb.append(\"SnapshotId: \").append(getSnapshotId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyReplicationSubnetGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationSubnetGroupIdentifier() != null)\r\n        sb.append(\"ReplicationSubnetGroupIdentifier: \").append(getReplicationSubnetGroupIdentifier()).append(\",\");\r\n    if (getReplicationSubnetGroupDescription() != null)\r\n        sb.append(\"ReplicationSubnetGroupDescription: \").append(getReplicationSubnetGroupDescription()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserPhoneConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.IncreaseReplicationFactorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCluster() != null)\r\n        sb.append(\"Cluster: \").append(getCluster());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.shouldGenerateClientSideMonitoringEvents",
	"Comment": "whether to generate client side monitoring events. only generatingclient side monitoring events when there are monitoring listeners attached.",
	"Method": "boolean shouldGenerateClientSideMonitoringEvents(){\r\n    return !monitoringListeners.isEmpty();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDeleteUserAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserAttributeNames() != null)\r\n        sb.append(\"UserAttributeNames: \").append(getUserAttributeNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Problem.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRun() != null)\r\n        sb.append(\"Run: \").append(getRun()).append(\",\");\r\n    if (getJob() != null)\r\n        sb.append(\"Job: \").append(getJob()).append(\",\");\r\n    if (getSuite() != null)\r\n        sb.append(\"Suite: \").append(getSuite()).append(\",\");\r\n    if (getTest() != null)\r\n        sb.append(\"Test: \").append(getTest()).append(\",\");\r\n    if (getDevice() != null)\r\n        sb.append(\"Device: \").append(getDevice()).append(\",\");\r\n    if (getResult() != null)\r\n        sb.append(\"Result: \").append(getResult()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobs() != null)\r\n        sb.append(\"Jobs: \").append(getJobs()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazoncognitosyncasync using the current builder configuration.",
	"Method": "AmazonCognitoSyncAsync build(AwsAsyncClientParams params){\r\n    return new AmazonCognitoSyncAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWSCredentialsProviderChain.setReuseLastProvider",
	"Comment": "enables or disables caching of the last successful credentials providerin this chain. reusing the last successful credentials provider willtypically return credentials faster than searching through the chain.",
	"Method": "void setReuseLastProvider(boolean b){\r\n    this.reuseLastProvider = b;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CompromisedCredentialsActionsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventAction() != null)\r\n        sb.append(\"EventAction: \").append(getEventAction());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeTrustsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTrusts() != null)\r\n        sb.append(\"Trusts: \").append(getTrusts()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.DateUtils.parseServiceSpecificDate",
	"Comment": "parses the given date string returned by the aws service into a dateobject.",
	"Method": "Date parseServiceSpecificDate(String dateString){\r\n    if (dateString == null)\r\n        return null;\r\n    try {\r\n        BigDecimal dateValue = new BigDecimal(dateString);\r\n        return new Date(dateValue.scaleByPowerOfTen(AWS_DATE_MILLI_SECOND_PRECISION).longValue());\r\n    } catch (NumberFormatException nfe) {\r\n        throw new SdkClientException(\"Unable to parse date : \" + dateString, nfe);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ListServerNeighborsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationId() != null)\r\n        sb.append(\"ConfigurationId: \").append(getConfigurationId()).append(\",\");\r\n    if (getPortInformationNeeded() != null)\r\n        sb.append(\"PortInformationNeeded: \").append(getPortInformationNeeded()).append(\",\");\r\n    if (getNeighborConfigurationIds() != null)\r\n        sb.append(\"NeighborConfigurationIds: \").append(getNeighborConfigurationIds()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntitiesDetectionJobFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DescribePipelinesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineDescriptionList() != null)\r\n        sb.append(\"PipelineDescriptionList: \").append(getPipelineDescriptionList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.Region.getAvailableEndpoints",
	"Comment": "returns a immutable collection of all endpoints available in themetadata.",
	"Method": "Collection<String> getAvailableEndpoints(){\r\n    return regionImpl.getAvailableEndpoints();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateProjectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProject() != null)\r\n        sb.append(\"Project: \").append(getProject());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreatePublicVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getNewPublicVirtualInterface() != null)\r\n        sb.append(\"NewPublicVirtualInterface: \").append(getNewPublicVirtualInterface());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.StartSchemaExtensionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSchemaExtensionId() != null)\r\n        sb.append(\"SchemaExtensionId: \").append(getSchemaExtensionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.EC2MetadataUtils.getAmiManifestPath",
	"Comment": "get the manifest path of the ami with which the instance was launched.",
	"Method": "String getAmiManifestPath(){\r\n    return fetchData(EC2_METADATA_ROOT + \"/ami-manifest-path\");\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.internal.BasicProfile.getPropertyValue",
	"Comment": "returns the value of a specific property that is included in this profile instance.",
	"Method": "String getPropertyValue(String propertyName){\r\n    return getProperties().get(propertyName);\r\n}"
}, {
	"Path": "com.amazonaws.util.NamespaceRemovingInputStream.matchXmlNamespaceAttribute",
	"Comment": "checks if the string starts with a complete xml namespace attribute, andif so, returns the number of characters that match.",
	"Method": "int matchXmlNamespaceAttribute(String s){\r\n    StringPrefixSlicer stringSlicer = new StringPrefixSlicer(s);\r\n    if (stringSlicer.removePrefix(\"xmlns\") == false)\r\n        return -1;\r\n    stringSlicer.removeRepeatingPrefix(\" \");\r\n    if (stringSlicer.removePrefix(\"=\") == false)\r\n        return -1;\r\n    stringSlicer.removeRepeatingPrefix(\" \");\r\n    if (stringSlicer.removePrefix(\"\\\"\") == false)\r\n        return -1;\r\n    if (stringSlicer.removePrefixEndingWith(\"\\\"\") == false)\r\n        return -1;\r\n    return s.length() - stringSlicer.getString().length();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWSCredentialsProviderChain.getReuseLastProvider",
	"Comment": "returns true if this chain will reuse the last successful credentialsprovider for future credentials requests, otherwise, false if it willsearch through the chain each time.",
	"Method": "boolean getReuseLastProvider(){\r\n    return reuseLastProvider;\r\n}"
}, {
	"Path": "com.amazonaws.auth.ContainerCredentialsProviderTest.testGetCredentialsThrowsAceFor404ErrorResponse",
	"Comment": "tests when the response is 404 not found,then getcredentials method throws an amazonclientexception.",
	"Method": "void testGetCredentialsThrowsAceFor404ErrorResponse(){\r\n    stubForErrorResponse(404);\r\n    try {\r\n        containerCredentialsProvider.getCredentials();\r\n        fail(\"The test should throw an exception\");\r\n    } catch (AmazonClientException exception) {\r\n        assertNotNull(exception.getMessage());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.retry.RetryPolicyTestBase.verifyExpectedContextData",
	"Comment": "verifies the retrycondition has collected the expected context information.",
	"Method": "void verifyExpectedContextData(ContextDataCollection contextDataCollection,AmazonWebServiceRequest failedRequest,AmazonClientException expectedException,int expectedRetries){\r\n    Assert.assertEquals(expectedRetries, contextDataCollection.failedRequests.size());\r\n    Assert.assertEquals(expectedRetries, contextDataCollection.exceptions.size());\r\n    Assert.assertEquals(expectedRetries, contextDataCollection.retriesAttemptedValues.size());\r\n    if (expectedRetries > 0) {\r\n        if (failedRequest != null) {\r\n            for (AmazonWebServiceRequest seenRequest : contextDataCollection.failedRequests) {\r\n                Assert.assertTrue(\"seeRequest=\" + seenRequest + \", failedRequest=\" + failedRequest, seenRequest == failedRequest);\r\n            }\r\n        }\r\n        if (expectedException instanceof AmazonServiceException) {\r\n            AmazonServiceException ase = (AmazonServiceException) expectedException;\r\n            for (AmazonClientException seenException : contextDataCollection.exceptions) {\r\n                Assert.assertTrue(seenException instanceof AmazonServiceException);\r\n                Assert.assertEquals(ase.getErrorCode(), ((AmazonServiceException) seenException).getErrorCode());\r\n                Assert.assertEquals(ase.getStatusCode(), ((AmazonServiceException) seenException).getStatusCode());\r\n            }\r\n        } else if (expectedException != null) {\r\n            Throwable expectedCause = expectedException.getCause();\r\n            for (AmazonClientException seenException : contextDataCollection.exceptions) {\r\n                Assert.assertTrue(expectedCause == seenException.getCause());\r\n            }\r\n        }\r\n        int expectedRetriesAttempted = 0;\r\n        for (int seenRetriesAttempted : contextDataCollection.retriesAttemptedValues) {\r\n            Assert.assertEquals(expectedRetriesAttempted++, seenRetriesAttempted);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.createPipeline",
	"Comment": "creates a new, empty pipeline. use putpipelinedefinition to populate the pipeline.",
	"Method": "CreatePipelineResult createPipeline(CreatePipelineRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreatePipeline(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.getRemoteAccessSession",
	"Comment": "returns a link to a currently running remote access session.",
	"Method": "GetRemoteAccessSessionResult getRemoteAccessSession(GetRemoteAccessSessionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetRemoteAccessSession(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.IpRouteInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getCidrIp() != null)\r\n        sb.append(\"CidrIp: \").append(getCidrIp()).append(\",\");\r\n    if (getIpRouteStatusMsg() != null)\r\n        sb.append(\"IpRouteStatusMsg: \").append(getIpRouteStatusMsg()).append(\",\");\r\n    if (getAddedDateTime() != null)\r\n        sb.append(\"AddedDateTime: \").append(getAddedDateTime()).append(\",\");\r\n    if (getIpRouteStatusReason() != null)\r\n        sb.append(\"IpRouteStatusReason: \").append(getIpRouteStatusReason()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.unshareDirectory",
	"Comment": "stops the directory sharing between the directory owner and consumer accounts.",
	"Method": "UnshareDirectoryResult unshareDirectory(UnshareDirectoryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUnshareDirectory(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReplicationTask.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskIdentifier() != null)\r\n        sb.append(\"ReplicationTaskIdentifier: \").append(getReplicationTaskIdentifier()).append(\",\");\r\n    if (getSourceEndpointArn() != null)\r\n        sb.append(\"SourceEndpointArn: \").append(getSourceEndpointArn()).append(\",\");\r\n    if (getTargetEndpointArn() != null)\r\n        sb.append(\"TargetEndpointArn: \").append(getTargetEndpointArn()).append(\",\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getMigrationType() != null)\r\n        sb.append(\"MigrationType: \").append(getMigrationType()).append(\",\");\r\n    if (getTableMappings() != null)\r\n        sb.append(\"TableMappings: \").append(getTableMappings()).append(\",\");\r\n    if (getReplicationTaskSettings() != null)\r\n        sb.append(\"ReplicationTaskSettings: \").append(getReplicationTaskSettings()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getLastFailureMessage() != null)\r\n        sb.append(\"LastFailureMessage: \").append(getLastFailureMessage()).append(\",\");\r\n    if (getStopReason() != null)\r\n        sb.append(\"StopReason: \").append(getStopReason()).append(\",\");\r\n    if (getReplicationTaskCreationDate() != null)\r\n        sb.append(\"ReplicationTaskCreationDate: \").append(getReplicationTaskCreationDate()).append(\",\");\r\n    if (getReplicationTaskStartDate() != null)\r\n        sb.append(\"ReplicationTaskStartDate: \").append(getReplicationTaskStartDate()).append(\",\");\r\n    if (getCdcStartPosition() != null)\r\n        sb.append(\"CdcStartPosition: \").append(getCdcStartPosition()).append(\",\");\r\n    if (getCdcStopPosition() != null)\r\n        sb.append(\"CdcStopPosition: \").append(getCdcStopPosition()).append(\",\");\r\n    if (getRecoveryCheckpoint() != null)\r\n        sb.append(\"RecoveryCheckpoint: \").append(getRecoveryCheckpoint()).append(\",\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getReplicationTaskStats() != null)\r\n        sb.append(\"ReplicationTaskStats: \").append(getReplicationTaskStats());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.RecordingGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAllSupported() != null)\r\n        sb.append(\"AllSupported: \").append(getAllSupported()).append(\",\");\r\n    if (getIncludeGlobalResourceTypes() != null)\r\n        sb.append(\"IncludeGlobalResourceTypes: \").append(getIncludeGlobalResourceTypes()).append(\",\");\r\n    if (getResourceTypes() != null)\r\n        sb.append(\"ResourceTypes: \").append(getResourceTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeSentimentDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeRetentionConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRetentionConfigurations() != null)\r\n        sb.append(\"RetentionConfigurations: \").append(getRetentionConfigurations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AccountTakeoverActionType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNotify() != null)\r\n        sb.append(\"Notify: \").append(getNotify()).append(\",\");\r\n    if (getEventAction() != null)\r\n        sb.append(\"EventAction: \").append(getEventAction());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeSchemas",
	"Comment": "returns information about the schema for the specified endpoint.",
	"Method": "DescribeSchemasResult describeSchemas(DescribeSchemasRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeSchemas(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.UpdateTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn()).append(\",\");\r\n    if (getOptions() != null)\r\n        sb.append(\"Options: \").append(getOptions()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.AWSComprehendMedicalClient.detectEntities",
	"Comment": "inspects the clinical text for a variety of medical entities and returns specific information about them such asentity category, location, and confidence score on that information .",
	"Method": "DetectEntitiesResult detectEntities(DetectEntitiesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDetectEntities(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.PasswordPolicyType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMinimumLength() != null)\r\n        sb.append(\"MinimumLength: \").append(getMinimumLength()).append(\",\");\r\n    if (getRequireUppercase() != null)\r\n        sb.append(\"RequireUppercase: \").append(getRequireUppercase()).append(\",\");\r\n    if (getRequireLowercase() != null)\r\n        sb.append(\"RequireLowercase: \").append(getRequireLowercase()).append(\",\");\r\n    if (getRequireNumbers() != null)\r\n        sb.append(\"RequireNumbers: \").append(getRequireNumbers()).append(\",\");\r\n    if (getRequireSymbols() != null)\r\n        sb.append(\"RequireSymbols: \").append(getRequireSymbols());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazonconnectasync using the current builder configuration.",
	"Method": "AmazonConnectAsync build(AwsAsyncClientParams params){\r\n    return new AmazonConnectAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.deleteDevicePool",
	"Comment": "deletes a device pool given the pool arn. does not allow deletion of curated pools owned by the system.",
	"Method": "DeleteDevicePoolResult deleteDevicePool(DeleteDevicePoolRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDevicePool(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectKeyPhrasesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ResourceKey.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectSyntaxResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResultList() != null)\r\n        sb.append(\"ResultList: \").append(getResultList()).append(\",\");\r\n    if (getErrorList() != null)\r\n        sb.append(\"ErrorList: \").append(getErrorList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUpdateDeviceStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey()).append(\",\");\r\n    if (getDeviceRememberedStatus() != null)\r\n        sb.append(\"DeviceRememberedStatus: \").append(getDeviceRememberedStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilder.resolveRequestHandlers",
	"Comment": "request handlers are copied to a new list to avoid mutation, if no request handlers areprovided to the builder we supply an empty list.",
	"Method": "List<RequestHandler2> resolveRequestHandlers(){\r\n    return (requestHandlers == null) ? new ArrayList<RequestHandler2>() : new ArrayList<RequestHandler2>(requestHandlers);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.ListRecordsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getDatasetName() != null)\r\n        sb.append(\"DatasetName: \").append(getDatasetName()).append(\",\");\r\n    if (getLastSyncCount() != null)\r\n        sb.append(\"LastSyncCount: \").append(getLastSyncCount()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getSyncSessionToken() != null)\r\n        sb.append(\"SyncSessionToken: \").append(getSyncSessionToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.internal.SignerKey.getNumberOfDaysSinceEpoch",
	"Comment": "returns the number of days since epoch for the date used for generatingsigning key.",
	"Method": "long getNumberOfDaysSinceEpoch(){\r\n    return numberOfDaysSinceEpoch;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationTaskAssessmentResultsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DeactivatePipelineResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.describeSnapshots",
	"Comment": "obtains information about the directory snapshots that belong to this account.this operation supports pagination with the use of the nexttoken request and response parameters. if moreresults are available, the describesnapshots.nexttoken member contains a token that you pass in the nextcall to describesnapshots to retrieve the next set of items.you can also specify a maximum number of return results with the limit parameter.",
	"Method": "DescribeSnapshotsResult describeSnapshots(DescribeSnapshotsRequest request,DescribeSnapshotsResult describeSnapshots){\r\n    return describeSnapshots(new DescribeSnapshotsRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.AcceptSharedDirectoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedDirectoryId() != null)\r\n        sb.append(\"SharedDirectoryId: \").append(getSharedDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.newProxyCredentialsProvider",
	"Comment": "returns a new credentials provider for use with proxy authentication.",
	"Method": "CredentialsProvider newProxyCredentialsProvider(HttpClientSettings settings){\r\n    final CredentialsProvider provider = new BasicCredentialsProvider();\r\n    provider.setCredentials(newAuthScope(settings), newNTCredentials(settings));\r\n    return provider;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeDeliveryChannelStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryChannelNames() != null)\r\n        sb.append(\"DeliveryChannelNames: \").append(getDeliveryChannelNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ConditionalForwarder.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRemoteDomainName() != null)\r\n        sb.append(\"RemoteDomainName: \").append(getRemoteDomainName()).append(\",\");\r\n    if (getDnsIpAddrs() != null)\r\n        sb.append(\"DnsIpAddrs: \").append(getDnsIpAddrs()).append(\",\");\r\n    if (getReplicationScope() != null)\r\n        sb.append(\"ReplicationScope: \").append(getReplicationScope());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deleteEvaluationResults",
	"Comment": "deletes the evaluation results for the specified aws config rule. you can specify one aws config rule perrequest. after you delete the evaluation results, you can call the startconfigrulesevaluation api to startevaluating your aws resources against the rule.",
	"Method": "DeleteEvaluationResultsResult deleteEvaluationResults(DeleteEvaluationResultsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteEvaluationResults(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationTaskAssessmentResultsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getBucketName() != null)\r\n        sb.append(\"BucketName: \").append(getBucketName()).append(\",\");\r\n    if (getReplicationTaskAssessmentResults() != null)\r\n        sb.append(\"ReplicationTaskAssessmentResults: \").append(getReplicationTaskAssessmentResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setNonProxyHosts",
	"Comment": "set the optional hosts the client will access without goingthrough the proxy.",
	"Method": "void setNonProxyHosts(String nonProxyHosts){\r\n    this.nonProxyHosts = nonProxyHosts;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ResetUserPasswordRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(getUserName()).append(\",\");\r\n    if (getNewPassword() != null)\r\n        sb.append(\"NewPassword: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectDominantLanguageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResultList() != null)\r\n        sb.append(\"ResultList: \").append(getResultList()).append(\",\");\r\n    if (getErrorList() != null)\r\n        sb.append(\"ErrorList: \").append(getErrorList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.Connection.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getLastFailureMessage() != null)\r\n        sb.append(\"LastFailureMessage: \").append(getLastFailureMessage()).append(\",\");\r\n    if (getEndpointIdentifier() != null)\r\n        sb.append(\"EndpointIdentifier: \").append(getEndpointIdentifier()).append(\",\");\r\n    if (getReplicationInstanceIdentifier() != null)\r\n        sb.append(\"ReplicationInstanceIdentifier: \").append(getReplicationInstanceIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.RetryUtils.isRetryableServiceException",
	"Comment": "returns true if the specified exception is a retryable service side exception.",
	"Method": "boolean isRetryableServiceException(AmazonServiceException exception,boolean isRetryableServiceException,SdkBaseException exception){\r\n    if (!isAse(exception)) {\r\n        return false;\r\n    }\r\n    AmazonServiceException ase = toAse(exception);\r\n    return RETRYABLE_STATUS_CODES.contains(ase.getStatusCode()) || RETRYABLE_ERROR_CODES.contains(ase.getErrorCode());\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ImportCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateIdentifier() != null)\r\n        sb.append(\"CertificateIdentifier: \").append(getCertificateIdentifier()).append(\",\");\r\n    if (getCertificatePem() != null)\r\n        sb.append(\"CertificatePem: \").append(getCertificatePem()).append(\",\");\r\n    if (getCertificateWallet() != null)\r\n        sb.append(\"CertificateWallet: \").append(getCertificateWallet()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.StartSchemaExtensionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getCreateSnapshotBeforeSchemaExtension() != null)\r\n        sb.append(\"CreateSnapshotBeforeSchemaExtension: \").append(getCreateSnapshotBeforeSchemaExtension()).append(\",\");\r\n    if (getLdifContent() != null)\r\n        sb.append(\"LdifContent: \").append(getLdifContent()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ForgetDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeAggregateComplianceByConfigRules",
	"Comment": "returns a list of compliant and noncompliant rules with the number of resources for compliant and noncompliantrules.the results can return an empty result page, but if you have a nexttoken, the results are displayed on the nextpage.",
	"Method": "DescribeAggregateComplianceByConfigRulesResult describeAggregateComplianceByConfigRules(DescribeAggregateComplianceByConfigRulesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeAggregateComplianceByConfigRules(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ParameterAttribute.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getStringValue() != null)\r\n        sb.append(\"StringValue: \").append(getStringValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.newClientContext",
	"Comment": "returns a new httpclientcontext used for request execution.",
	"Method": "HttpClientContext newClientContext(HttpClientSettings settings,Map<String, ? extends Object> attributes){\r\n    final HttpClientContext clientContext = new HttpClientContext();\r\n    if (attributes != null && !attributes.isEmpty()) {\r\n        for (Map.Entry<String, ?> entry : attributes.entrySet()) {\r\n            clientContext.setAttribute(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n    addPreemptiveAuthenticationProxy(clientContext, settings);\r\n    clientContext.setAttribute(HttpContextUtils.DISABLE_SOCKET_PROXY_PROPERTY, settings.disableSocketProxy());\r\n    return clientContext;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.TaskListEntry.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUserPoolMfaConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSmsMfaConfiguration() != null)\r\n        sb.append(\"SmsMfaConfiguration: \").append(getSmsMfaConfiguration()).append(\",\");\r\n    if (getSoftwareTokenMfaConfiguration() != null)\r\n        sb.append(\"SoftwareTokenMfaConfiguration: \").append(getSoftwareTokenMfaConfiguration()).append(\",\");\r\n    if (getMfaConfiguration() != null)\r\n        sb.append(\"MfaConfiguration: \").append(getMfaConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminLinkProviderForUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeDeliveryChannelStatusAsync",
	"Comment": "simplified method form for invoking the describedeliverychannelstatus operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync(DescribeDeliveryChannelStatusRequest request,java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync,DescribeDeliveryChannelStatusRequest request,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelStatusRequest, DescribeDeliveryChannelStatusResult> asyncHandler,java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync,java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelStatusRequest, DescribeDeliveryChannelStatusResult> asyncHandler){\r\n    return describeDeliveryChannelStatusAsync(new DescribeDeliveryChannelStatusRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.SetTaskStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskId() != null)\r\n        sb.append(\"TaskId: \").append(getTaskId()).append(\",\");\r\n    if (getTaskStatus() != null)\r\n        sb.append(\"TaskStatus: \").append(getTaskStatus()).append(\",\");\r\n    if (getErrorId() != null)\r\n        sb.append(\"ErrorId: \").append(getErrorId()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage()).append(\",\");\r\n    if (getErrorStackTrace() != null)\r\n        sb.append(\"ErrorStackTrace: \").append(getErrorStackTrace());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Radios.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getWifi() != null)\r\n        sb.append(\"Wifi: \").append(getWifi()).append(\",\");\r\n    if (getBluetooth() != null)\r\n        sb.append(\"Bluetooth: \").append(getBluetooth()).append(\",\");\r\n    if (getNfc() != null)\r\n        sb.append(\"Nfc: \").append(getNfc()).append(\",\");\r\n    if (getGps() != null)\r\n        sb.append(\"Gps: \").append(getGps());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Principal.getProvider",
	"Comment": "returns the provider for this principal, which indicates in what group ofusers this principal resides.",
	"Method": "String getProvider(){\r\n    return provider;\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.publishResponseBytesDiscarded",
	"Comment": "convenient method to publish a response bytes discard event to the given listener.",
	"Method": "Future<?> publishResponseBytesDiscarded(ProgressListener listener,long bytesDiscarded){\r\n    return publishResetEvent(listener, ProgressEventType.RESPONSE_BYTE_DISCARD_EVENT, bytesDiscarded);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListKeyPhrasesDetectionJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.newBufferedHttpEntity",
	"Comment": "utility function for creating a new bufferedentity and wrapping any errorsas a sdkclientexception.",
	"Method": "HttpEntity newBufferedHttpEntity(HttpEntity entity){\r\n    try {\r\n        return new BufferedHttpEntity(entity);\r\n    } catch (FakeIOException e) {\r\n        throw e;\r\n    } catch (IOException e) {\r\n        throw new SdkClientException(\"Unable to create HTTP entity: \" + e.getMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeConfigRulesAsync",
	"Comment": "simplified method form for invoking the describeconfigrules operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync(DescribeConfigRulesRequest request,java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync,DescribeConfigRulesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigRulesRequest, DescribeConfigRulesResult> asyncHandler,java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync,java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigRulesRequest, DescribeConfigRulesResult> asyncHandler){\r\n    return describeConfigRulesAsync(new DescribeConfigRulesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getLastParsedParentElement",
	"Comment": "this will return the deleted string in stackstring when doing update onthe stack. returns null by default.",
	"Method": "String getLastParsedParentElement(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DirectoryVpcSettingsDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpcId() != null)\r\n        sb.append(\"VpcId: \").append(getVpcId()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds()).append(\",\");\r\n    if (getSecurityGroupId() != null)\r\n        sb.append(\"SecurityGroupId: \").append(getSecurityGroupId()).append(\",\");\r\n    if (getAvailabilityZones() != null)\r\n        sb.append(\"AvailabilityZones: \").append(getAvailabilityZones());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.getGeneralProgressListener",
	"Comment": "returns the optional progress listener for receiving updates about the progress of therequest.",
	"Method": "ProgressListener getGeneralProgressListener(){\r\n    return progressListener;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeDeliveryChannelStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryChannelsStatus() != null)\r\n        sb.append(\"DeliveryChannelsStatus: \").append(getDeliveryChannelsStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.ProfilesConfigFileWriterTest.testModifyAndInsertProfile_WithComments",
	"Comment": "tests that comments and unsupported properties are preserved afterprofile modification.",
	"Method": "void testModifyAndInsertProfile_WithComments(){\r\n    File credWithComments = ProfileResourceLoader.profilesWithComments().asFile();\r\n    File tmpFile = copyToTempFile(credWithComments);\r\n    String originalContent = FileUtils.readFileToString(tmpFile);\r\n    Profile[] expected = { new Profile(\"a\", basicCredA), new Profile(\"b\", basicCredB), new Profile(\"c\", sessionCredC), new Profile(\"d\", sessionCredD) };\r\n    Profile[] modified = { new Profile(\"A\", basicCredB), new Profile(\"B\", basicCredA), new Profile(\"C\", sessionCredD), new Profile(\"D\", sessionCredC) };\r\n    ProfilesConfigFileWriter.modifyProfiles(tmpFile, ImmutableMapParameter.of(\"a\", modified[0], \"b\", modified[1], \"c\", modified[2], \"d\", modified[3]));\r\n    checkCredentialsFile(tmpFile, modified);\r\n    String modifiedContent = FileUtils.readFileToString(tmpFile);\r\n    assertFalse(originalContent.equals(modifiedContent));\r\n    ProfilesConfigFileWriter.modifyProfiles(tmpFile, ImmutableMapParameter.of(\"A\", expected[0], \"B\", expected[1], \"C\", expected[2], \"D\", expected[3]));\r\n    checkCredentialsFile(tmpFile, expected);\r\n    String restoredContent = FileUtils.readFileToString(tmpFile);\r\n    assertEquals(originalContent, restoredContent);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.createDirectConnectGateway",
	"Comment": "creates a direct connect gateway, which is an intermediate object that enables you to connect a set of virtualinterfaces and virtual private gateways. a direct connect gateway is global and visible in any aws region afterit is created. the virtual interfaces and virtual private gateways that are connected through a direct connectgateway can be in different aws regions. this enables you to connect to a vpc in any region, regardless of theregion in which the virtual interfaces are located, and pass traffic between them.",
	"Method": "CreateDirectConnectGatewayResult createDirectConnectGateway(CreateDirectConnectGatewayRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDirectConnectGateway(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.SSESpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeInterconnectLoaRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectId() != null)\r\n        sb.append(\"InterconnectId: \").append(getInterconnectId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getLoaContentType() != null)\r\n        sb.append(\"LoaContentType: \").append(getLoaContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.listIdentityProviders",
	"Comment": "lists information about all identity providers for a user pool.",
	"Method": "ListIdentityProvidersResult listIdentityProviders(ListIdentityProvidersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListIdentityProviders(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateInterconnectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectId() != null)\r\n        sb.append(\"InterconnectId: \").append(getInterconnectId()).append(\",\");\r\n    if (getInterconnectName() != null)\r\n        sb.append(\"InterconnectName: \").append(getInterconnectName()).append(\",\");\r\n    if (getInterconnectState() != null)\r\n        sb.append(\"InterconnectState: \").append(getInterconnectState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAuthFlow() != null)\r\n        sb.append(\"AuthFlow: \").append(getAuthFlow()).append(\",\");\r\n    if (getAuthParameters() != null)\r\n        sb.append(\"AuthParameters: \").append(getAuthParameters()).append(\",\");\r\n    if (getClientMetadata() != null)\r\n        sb.append(\"ClientMetadata: \").append(getClientMetadata()).append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata()).append(\",\");\r\n    if (getContextData() != null)\r\n        sb.append(\"ContextData: \").append(getContextData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.ListIdentityPoolUsageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.listIdentityPoolUsage",
	"Comment": "gets a list of identity pools registered with cognito.listidentitypoolusage can only be called with developer credentials. you cannot make this api call with thetemporary user credentials provided by cognito identity.",
	"Method": "ListIdentityPoolUsageResult listIdentityPoolUsage(ListIdentityPoolUsageRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListIdentityPoolUsage(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectDominantLanguageItemResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIndex() != null)\r\n        sb.append(\"Index: \").append(getIndex()).append(\",\");\r\n    if (getLanguages() != null)\r\n        sb.append(\"Languages: \").append(getLanguages());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.DateInterval.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStart() != null)\r\n        sb.append(\"Start: \").append(getStart()).append(\",\");\r\n    if (getEnd() != null)\r\n        sb.append(\"End: \").append(getEnd());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsdirectoryservice using the current builder configuration.",
	"Method": "AWSDirectoryService build(AwsSyncClientParams params){\r\n    return new AWSDirectoryServiceClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.updateCluster",
	"Comment": "modifies the settings for a dax cluster. you can use this action to change one or more cluster configurationparameters by specifying the parameters and the new values.",
	"Method": "UpdateClusterResult updateCluster(UpdateClusterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateCluster(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDeleteUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponse.getHttpRequest",
	"Comment": "returns the original http request associated with this response.",
	"Method": "HttpRequestBase getHttpRequest(){\r\n    return httpRequest;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartKeyPhrasesDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeDocumentClassifierResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassifierProperties() != null)\r\n        sb.append(\"DocumentClassifierProperties: \").append(getDocumentClassifierProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteDeliveryChannelResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.ProgressEvent.getEventType",
	"Comment": "returns the type of event this object represents. this method neverreturns null.",
	"Method": "ProgressEventType getEventType(){\r\n    return eventType;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.VerifySoftwareTokenRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession()).append(\",\");\r\n    if (getUserCode() != null)\r\n        sb.append(\"UserCode: \").append(getUserCode()).append(\",\");\r\n    if (getFriendlyDeviceName() != null)\r\n        sb.append(\"FriendlyDeviceName: \").append(getFriendlyDeviceName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.RebootNodeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterName() != null)\r\n        sb.append(\"ClusterName: \").append(getClusterName()).append(\",\");\r\n    if (getNodeId() != null)\r\n        sb.append(\"NodeId: \").append(getNodeId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.AddTagsToResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.RecordPatch.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOp() != null)\r\n        sb.append(\"Op: \").append(getOp()).append(\",\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getSyncCount() != null)\r\n        sb.append(\"SyncCount: \").append(getSyncCount()).append(\",\");\r\n    if (getDeviceLastModifiedDate() != null)\r\n        sb.append(\"DeviceLastModifiedDate: \").append(getDeviceLastModifiedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.installToRemoteAccessSession",
	"Comment": "installs an application to the device in a remote access session. for android applications, the file must be in.apk format. for ios applications, the file must be in .ipa format.",
	"Method": "InstallToRemoteAccessSessionResult installToRemoteAccessSession(InstallToRemoteAccessSessionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeInstallToRemoteAccessSession(request);\r\n}"
}, {
	"Path": "com.amazonaws.util.EC2MetadataUtils.getHostAddressForEC2MetadataService",
	"Comment": "returns the host address of the amazon ec2 instance metadata service.",
	"Method": "String getHostAddressForEC2MetadataService(){\r\n    String host = System.getProperty(EC2_METADATA_SERVICE_OVERRIDE_SYSTEM_PROPERTY);\r\n    return host != null ? host : EC2_METADATA_SERVICE_URL;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminInitiateAuthResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getChallengeName() != null)\r\n        sb.append(\"ChallengeName: \").append(getChallengeName()).append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession()).append(\",\");\r\n    if (getChallengeParameters() != null)\r\n        sb.append(\"ChallengeParameters: \").append(getChallengeParameters()).append(\",\");\r\n    if (getAuthenticationResult() != null)\r\n        sb.append(\"AuthenticationResult: \").append(getAuthenticationResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserPoolClientResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolClient() != null)\r\n        sb.append(\"UserPoolClient: \").append(getUserPoolClient());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUserPoolClientsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.AcceptorPathMatcher.pathAll",
	"Comment": "pathall matcher that checks if each element of the finalresult matches the expected result",
	"Method": "boolean pathAll(JsonNode expectedResult,JsonNode finalResult){\r\n    if (finalResult.isNull()) {\r\n        return false;\r\n    }\r\n    if (!finalResult.isArray()) {\r\n        throw new RuntimeException(\"Expected an array\");\r\n    }\r\n    for (JsonNode element : finalResult) {\r\n        if (!element.equals(expectedResult)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.listDeviceInstances",
	"Comment": "returns information about the private device instances associated with one or more aws accounts.",
	"Method": "ListDeviceInstancesResult listDeviceInstances(ListDeviceInstancesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListDeviceInstances(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.UpdateRecordsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRecords() != null)\r\n        sb.append(\"Records: \").append(getRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.log.InternalLogFactory.getLog",
	"Comment": "returns an sdk logger that logs using the currently configured defaultlog factory, given the name.",
	"Method": "InternalLogApi getLog(Class<?> clazz,InternalLogApi getLog,String name){\r\n    return // will look up actual logger per log\r\n    factoryConfigured ? factory.doGetLog(name) : new InternalLog(name);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateInstanceProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceProfile() != null)\r\n        sb.append(\"InstanceProfile: \").append(getInstanceProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ReservationUtilizationGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes()).append(\",\");\r\n    if (getUtilization() != null)\r\n        sb.append(\"Utilization: \").append(getUtilization());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateTrustResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRequestId() != null)\r\n        sb.append(\"RequestId: \").append(getRequestId()).append(\",\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.ListTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.VPCEConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getVpceConfigurationName() != null)\r\n        sb.append(\"VpceConfigurationName: \").append(getVpceConfigurationName()).append(\",\");\r\n    if (getVpceServiceName() != null)\r\n        sb.append(\"VpceServiceName: \").append(getVpceServiceName()).append(\",\");\r\n    if (getServiceDnsName() != null)\r\n        sb.append(\"ServiceDnsName: \").append(getServiceDnsName()).append(\",\");\r\n    if (getVpceConfigurationDescription() != null)\r\n        sb.append(\"VpceConfigurationDescription: \").append(getVpceConfigurationDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.NewPublicVirtualInterface.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ListPipelinesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateUserAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserAttributes() != null)\r\n        sb.append(\"UserAttributes: \").append(getUserAttributes()).append(\",\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeTaskExecutionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskExecutionArn() != null)\r\n        sb.append(\"TaskExecutionArn: \").append(getTaskExecutionArn()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getOptions() != null)\r\n        sb.append(\"Options: \").append(getOptions()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEstimatedFilesToTransfer() != null)\r\n        sb.append(\"EstimatedFilesToTransfer: \").append(getEstimatedFilesToTransfer()).append(\",\");\r\n    if (getEstimatedBytesToTransfer() != null)\r\n        sb.append(\"EstimatedBytesToTransfer: \").append(getEstimatedBytesToTransfer()).append(\",\");\r\n    if (getFilesTransferred() != null)\r\n        sb.append(\"FilesTransferred: \").append(getFilesTransferred()).append(\",\");\r\n    if (getBytesWritten() != null)\r\n        sb.append(\"BytesWritten: \").append(getBytesWritten()).append(\",\");\r\n    if (getBytesTransferred() != null)\r\n        sb.append(\"BytesTransferred: \").append(getBytesTransferred()).append(\",\");\r\n    if (getResult() != null)\r\n        sb.append(\"Result: \").append(getResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.config.InternalConfig.getSignerConfig",
	"Comment": "returns the signer configuration for the specified service name and an optional region name.",
	"Method": "SignerConfig getSignerConfig(String serviceName,SignerConfig getSignerConfig,String serviceName,String regionName){\r\n    if (serviceName == null)\r\n        throw new IllegalArgumentException();\r\n    SignerConfig signerConfig = null;\r\n    if (regionName != null) {\r\n        String key = serviceName + SERVICE_REGION_DELIMITOR + regionName;\r\n        signerConfig = serviceRegionSigners.get(key);\r\n        if (signerConfig != null) {\r\n            return signerConfig;\r\n        }\r\n        signerConfig = regionSigners.get(regionName);\r\n        if (signerConfig != null) {\r\n            return signerConfig;\r\n        }\r\n    }\r\n    signerConfig = serviceSigners.get(serviceName);\r\n    return signerConfig == null ? defaultSignerConfig : signerConfig;\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DescribeUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.protocol.json.internal.JsonProtocolMarshaller.startMarshalling",
	"Comment": "if there is not an explicit payload member then we need to start the implicit json request object. allmembers bound to the payload will be added as fields to this object.",
	"Method": "void startMarshalling(){\r\n    if (!hasExplicitPayloadMember) {\r\n        jsonGenerator.writeStartObject();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.Scope.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComplianceResourceTypes() != null)\r\n        sb.append(\"ComplianceResourceTypes: \").append(getComplianceResourceTypes()).append(\",\");\r\n    if (getTagKey() != null)\r\n        sb.append(\"TagKey: \").append(getTagKey()).append(\",\");\r\n    if (getTagValue() != null)\r\n        sb.append(\"TagValue: \").append(getTagValue()).append(\",\");\r\n    if (getComplianceResourceId() != null)\r\n        sb.append(\"ComplianceResourceId: \").append(getComplianceResourceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeSentimentDetectionJob",
	"Comment": "gets the properties associated with a sentiment detection job. use this operation to get the status of adetection job.",
	"Method": "DescribeSentimentDetectionJobResult describeSentimentDetectionJob(DescribeSentimentDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeSentimentDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.getEffect",
	"Comment": "returns the result effect of this policy statement when it is evaluated.a policy statement can either allow access or explicitly",
	"Method": "Effect getEffect(){\r\n    return effect;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DeletePipelineRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeIdentityProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityProvider() != null)\r\n        sb.append(\"IdentityProvider: \").append(getIdentityProvider());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeConnectionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.ExecutionContext.markRetryCapacityConsumed",
	"Comment": "marks that a retry during this request lifecycle has consumed retry capacity.this is inspectedwhen determining if capacity should be released if a retry succeeds.",
	"Method": "void markRetryCapacityConsumed(){\r\n    this.retryCapacityConsumed = true;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListTaskExecutionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskExecutions() != null)\r\n        sb.append(\"TaskExecutions: \").append(getTaskExecutions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.modifyReplicationInstance",
	"Comment": "modifies the replication instance to apply new settings. you can change one or more parameters by specifyingthese parameters and the new values in the request.some settings are applied during the maintenance window.",
	"Method": "ModifyReplicationInstanceResult modifyReplicationInstance(ModifyReplicationInstanceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeModifyReplicationInstance(request);\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilder.getEndpoint",
	"Comment": "gets the service endpointconfiguration in use by the builder",
	"Method": "EndpointConfiguration getEndpoint(){\r\n    return endpointConfiguration;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SignUpResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserConfirmed() != null)\r\n        sb.append(\"UserConfirmed: \").append(getUserConfirmed()).append(\",\");\r\n    if (getCodeDeliveryDetails() != null)\r\n        sb.append(\"CodeDeliveryDetails: \").append(getCodeDeliveryDetails()).append(\",\");\r\n    if (getUserSub() != null)\r\n        sb.append(\"UserSub: \").append(getUserSub());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ServiceSpecification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEC2Specification() != null)\r\n        sb.append(\"EC2Specification: \").append(getEC2Specification());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyEndpointRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn()).append(\",\");\r\n    if (getEndpointIdentifier() != null)\r\n        sb.append(\"EndpointIdentifier: \").append(getEndpointIdentifier()).append(\",\");\r\n    if (getEndpointType() != null)\r\n        sb.append(\"EndpointType: \").append(getEndpointType()).append(\",\");\r\n    if (getEngineName() != null)\r\n        sb.append(\"EngineName: \").append(getEngineName()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(getUsername()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getServerName() != null)\r\n        sb.append(\"ServerName: \").append(getServerName()).append(\",\");\r\n    if (getPort() != null)\r\n        sb.append(\"Port: \").append(getPort()).append(\",\");\r\n    if (getDatabaseName() != null)\r\n        sb.append(\"DatabaseName: \").append(getDatabaseName()).append(\",\");\r\n    if (getExtraConnectionAttributes() != null)\r\n        sb.append(\"ExtraConnectionAttributes: \").append(getExtraConnectionAttributes()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getSslMode() != null)\r\n        sb.append(\"SslMode: \").append(getSslMode()).append(\",\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn()).append(\",\");\r\n    if (getExternalTableDefinition() != null)\r\n        sb.append(\"ExternalTableDefinition: \").append(getExternalTableDefinition()).append(\",\");\r\n    if (getDynamoDbSettings() != null)\r\n        sb.append(\"DynamoDbSettings: \").append(getDynamoDbSettings()).append(\",\");\r\n    if (getS3Settings() != null)\r\n        sb.append(\"S3Settings: \").append(getS3Settings()).append(\",\");\r\n    if (getDmsTransferSettings() != null)\r\n        sb.append(\"DmsTransferSettings: \").append(getDmsTransferSettings()).append(\",\");\r\n    if (getMongoDbSettings() != null)\r\n        sb.append(\"MongoDbSettings: \").append(getMongoDbSettings()).append(\",\");\r\n    if (getKinesisSettings() != null)\r\n        sb.append(\"KinesisSettings: \").append(getKinesisSettings()).append(\",\");\r\n    if (getElasticsearchSettings() != null)\r\n        sb.append(\"ElasticsearchSettings: \").append(getElasticsearchSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DeleteAgentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentArn() != null)\r\n        sb.append(\"AgentArn: \").append(getAgentArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationTasksRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ResourceFilters.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.InstanceProfile.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getPackageCleanup() != null)\r\n        sb.append(\"PackageCleanup: \").append(getPackageCleanup()).append(\",\");\r\n    if (getExcludeAppPackagesFromCleanup() != null)\r\n        sb.append(\"ExcludeAppPackagesFromCleanup: \").append(getExcludeAppPackagesFromCleanup()).append(\",\");\r\n    if (getRebootAfterUse() != null)\r\n        sb.append(\"RebootAfterUse: \").append(getRebootAfterUse()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.PollingStrategy.getDelayStrategy",
	"Comment": "returns the delay strategy included in this polling strategy.",
	"Method": "DelayStrategy getDelayStrategy(){\r\n    return this.delayStrategy;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.RebootNodeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCluster() != null)\r\n        sb.append(\"Cluster: \").append(getCluster());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.NumberAttributeConstraintsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMinValue() != null)\r\n        sb.append(\"MinValue: \").append(getMinValue()).append(\",\");\r\n    if (getMaxValue() != null)\r\n        sb.append(\"MaxValue: \").append(getMaxValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.AcceptSharedDirectoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedDirectory() != null)\r\n        sb.append(\"SharedDirectory: \").append(getSharedDirectory());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateReplicationInstanceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceIdentifier() != null)\r\n        sb.append(\"ReplicationInstanceIdentifier: \").append(getReplicationInstanceIdentifier()).append(\",\");\r\n    if (getAllocatedStorage() != null)\r\n        sb.append(\"AllocatedStorage: \").append(getAllocatedStorage()).append(\",\");\r\n    if (getReplicationInstanceClass() != null)\r\n        sb.append(\"ReplicationInstanceClass: \").append(getReplicationInstanceClass()).append(\",\");\r\n    if (getVpcSecurityGroupIds() != null)\r\n        sb.append(\"VpcSecurityGroupIds: \").append(getVpcSecurityGroupIds()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getReplicationSubnetGroupIdentifier() != null)\r\n        sb.append(\"ReplicationSubnetGroupIdentifier: \").append(getReplicationSubnetGroupIdentifier()).append(\",\");\r\n    if (getPreferredMaintenanceWindow() != null)\r\n        sb.append(\"PreferredMaintenanceWindow: \").append(getPreferredMaintenanceWindow()).append(\",\");\r\n    if (getMultiAZ() != null)\r\n        sb.append(\"MultiAZ: \").append(getMultiAZ()).append(\",\");\r\n    if (getEngineVersion() != null)\r\n        sb.append(\"EngineVersion: \").append(getEngineVersion()).append(\",\");\r\n    if (getAutoMinorVersionUpgrade() != null)\r\n        sb.append(\"AutoMinorVersionUpgrade: \").append(getAutoMinorVersionUpgrade()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getKmsKeyId() != null)\r\n        sb.append(\"KmsKeyId: \").append(getKmsKeyId()).append(\",\");\r\n    if (getPubliclyAccessible() != null)\r\n        sb.append(\"PubliclyAccessible: \").append(getPubliclyAccessible()).append(\",\");\r\n    if (getDnsNameServers() != null)\r\n        sb.append(\"DnsNameServers: \").append(getDnsNameServers());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.Region.getRegion",
	"Comment": "returns the region with the id given, or null if it cannot be found inthe current regions.xml file.",
	"Method": "Region getRegion(Regions region){\r\n    return RegionUtils.getRegion(region.getName());\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectEntitiesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResultList() != null)\r\n        sb.append(\"ResultList: \").append(getResultList()).append(\",\");\r\n    if (getErrorList() != null)\r\n        sb.append(\"ErrorList: \").append(getErrorList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.stopJob",
	"Comment": "initiates a stop request for the current job. aws device farm will immediately stop the job on the device wheretests have not started executing, and you will not be billed for this device. on the device where tests havestarted executing, setup suite and teardown suite tests will run to completion before stopping execution on thedevice. you will be billed for setup, teardown, and any tests that were in progress or already completed.",
	"Method": "StopJobResult stopJob(StopJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStopJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.transform.StaxUnmarshallerContext.readText",
	"Comment": "returns the text contents of the current element being parsed.",
	"Method": "String readText(){\r\n    if (isInsideResponseHeader()) {\r\n        return getHeader(currentHeader);\r\n    }\r\n    if (currentEvent.isAttribute()) {\r\n        Attribute attribute = (Attribute) currentEvent;\r\n        return attribute.getValue();\r\n    }\r\n    StringBuilder sb = new StringBuilder();\r\n    while (true) {\r\n        XMLEvent event = eventReader.peek();\r\n        if (event.getEventType() == XMLStreamConstants.CHARACTERS) {\r\n            eventReader.nextEvent();\r\n            sb.append(event.asCharacters().getData());\r\n        } else if (event.getEventType() == XMLStreamConstants.END_ELEMENT) {\r\n            return sb.toString();\r\n        } else {\r\n            throw new RuntimeException(\"Encountered unexpected event: \" + event.toString());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.EvaluationResultQualifier.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.GetCurrentMetricDataRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getGroupings() != null)\r\n        sb.append(\"Groupings: \").append(getGroupings()).append(\",\");\r\n    if (getCurrentMetrics() != null)\r\n        sb.append(\"CurrentMetrics: \").append(getCurrentMetrics()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.TagValues.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetOfferingStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setDnsResolver",
	"Comment": "sets the dns resolver that should be used to for resolving aws ip addresses.",
	"Method": "void setDnsResolver(DnsResolver resolver){\r\n    if (resolver == null) {\r\n        throw new IllegalArgumentException(\"resolver cannot be null\");\r\n    }\r\n    this.dnsResolver = resolver;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeVirtualInterfacesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.RegisterDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getToken() != null)\r\n        sb.append(\"Token: \").append(getToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.Region.hasHttpsEndpoint",
	"Comment": "returns whether the given service support the https protocol in this region.",
	"Method": "boolean hasHttpsEndpoint(String serviceName){\r\n    return regionImpl.hasHttpsEndpoint(serviceName);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeEntitiesDetectionJob",
	"Comment": "gets the properties associated with an entities detection job. use this operation to get the status of adetection job.",
	"Method": "DescribeEntitiesDetectionJobResult describeEntitiesDetectionJob(DescribeEntitiesDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEntitiesDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopKeyPhrasesDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.NeighborConnectionDetail.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceServerId() != null)\r\n        sb.append(\"SourceServerId: \").append(getSourceServerId()).append(\",\");\r\n    if (getDestinationServerId() != null)\r\n        sb.append(\"DestinationServerId: \").append(getDestinationServerId()).append(\",\");\r\n    if (getDestinationPort() != null)\r\n        sb.append(\"DestinationPort: \").append(getDestinationPort()).append(\",\");\r\n    if (getTransportProtocol() != null)\r\n        sb.append(\"TransportProtocol: \").append(getTransportProtocol()).append(\",\");\r\n    if (getConnectionsCount() != null)\r\n        sb.append(\"ConnectionsCount: \").append(getConnectionsCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.SubnetGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetGroupName() != null)\r\n        sb.append(\"SubnetGroupName: \").append(getSubnetGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getVpcId() != null)\r\n        sb.append(\"VpcId: \").append(getVpcId()).append(\",\");\r\n    if (getSubnets() != null)\r\n        sb.append(\"Subnets: \").append(getSubnets());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectAsyncClient.describeConnectionsAsync",
	"Comment": "simplified method form for invoking the describeconnections operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync(DescribeConnectionsRequest request,java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync,DescribeConnectionsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConnectionsRequest, DescribeConnectionsResult> asyncHandler,java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync,java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync,com.amazonaws.handlers.AsyncHandler<DescribeConnectionsRequest, DescribeConnectionsResult> asyncHandler){\r\n    return describeConnectionsAsync(new DescribeConnectionsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeAggregateComplianceByConfigRulesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAggregateComplianceByConfigRules() != null)\r\n        sb.append(\"AggregateComplianceByConfigRules: \").append(getAggregateComplianceByConfigRules()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.tagResource",
	"Comment": "associates a set of tags with a dax resource. you can call tagresource up to 5 times per second, peraccount.",
	"Method": "TagResourceResult tagResource(TagResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeTagResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.deleteDirectConnectGateway",
	"Comment": "deletes the specified direct connect gateway. you must first delete all virtual interfaces that are attached tothe direct connect gateway and disassociate all virtual private gateways that are associated with the directconnect gateway.",
	"Method": "DeleteDirectConnectGatewayResult deleteDirectConnectGateway(DeleteDirectConnectGatewayRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDirectConnectGateway(request);\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.peek",
	"Comment": "returns the jsontoken which is to be parsed next. returns null bydefault.",
	"Method": "JsonToken peek(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.InputDataConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getS3Uri() != null)\r\n        sb.append(\"S3Uri: \").append(getS3Uri()).append(\",\");\r\n    if (getInputFormat() != null)\r\n        sb.append(\"InputFormat: \").append(getInputFormat());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.LengthCheckInputStreamTest.testContentLength",
	"Comment": "tests if the content length set in the stream equals the bytes read fromthe stream. if any exception is thrown, then the test fails.",
	"Method": "void testContentLength(){\r\n    InputStream in = new ByteArrayInputStream(sampleData.getBytes());\r\n    LengthCheckInputStream rvis = new LengthCheckInputStream(in, sampleData.getBytes().length, INCLUDE_SKIPPED_BYTES);\r\n    try {\r\n        StreamUtils.consumeInputStream(rvis);\r\n    } catch (Exception e) {\r\n        fail();\r\n    }\r\n    rvis.close();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateResourceServerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceServer() != null)\r\n        sb.append(\"ResourceServer: \").append(getResourceServer());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.Evaluation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComplianceResourceType() != null)\r\n        sb.append(\"ComplianceResourceType: \").append(getComplianceResourceType()).append(\",\");\r\n    if (getComplianceResourceId() != null)\r\n        sb.append(\"ComplianceResourceId: \").append(getComplianceResourceId()).append(\",\");\r\n    if (getComplianceType() != null)\r\n        sb.append(\"ComplianceType: \").append(getComplianceType()).append(\",\");\r\n    if (getAnnotation() != null)\r\n        sb.append(\"Annotation: \").append(getAnnotation()).append(\",\");\r\n    if (getOrderingTimestamp() != null)\r\n        sb.append(\"OrderingTimestamp: \").append(getOrderingTimestamp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationInstancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getReplicationInstances() != null)\r\n        sb.append(\"ReplicationInstances: \").append(getReplicationInstances());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.deactivatePipeline",
	"Comment": "deactivates the specified running pipeline. the pipeline is set to the deactivating state until thedeactivation process completes.to resume a deactivated pipeline, use activatepipeline. by default, the pipeline resumes from the lastcompleted execution. optionally, you can specify the date and time to resume the pipeline.",
	"Method": "DeactivatePipelineResult deactivatePipeline(DeactivatePipelineRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeactivatePipeline(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.EC2CredentialsFetcherTest.testNoMetadataService",
	"Comment": "tests how the credentials provider behaves when theserver is not running.",
	"Method": "void testNoMetadataService(){\r\n    stubForErrorResponse();\r\n    TestCredentialsProvider credentialsProvider = new TestCredentialsProvider();\r\n    try {\r\n        credentialsProvider.getCredentials();\r\n        fail(\"Expected an AmazonClientException, but wasn't thrown\");\r\n    } catch (AmazonClientException ace) {\r\n        assertNotNull(ace.getMessage());\r\n    }\r\n    stubForSuccessResonseWithCustomExpirationDate(200, new Date(System.currentTimeMillis() + ONE_MINUTE * 4).toString());\r\n    credentialsProvider.getCredentials();\r\n    credentialsProvider.setLastInstanceProfileCheck(new Date(System.currentTimeMillis() - (ONE_MINUTE * 61)));\r\n    stubForErrorResponse();\r\n    try {\r\n        credentialsProvider.getCredentials();\r\n        fail(\"Expected an AmazonClientException, but wasn't thrown\");\r\n    } catch (AmazonClientException ace) {\r\n        assertNotNull(ace.getMessage());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeHostedConnectionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateLocationS3Request.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubdirectory() != null)\r\n        sb.append(\"Subdirectory: \").append(getSubdirectory()).append(\",\");\r\n    if (getS3BucketArn() != null)\r\n        sb.append(\"S3BucketArn: \").append(getS3BucketArn()).append(\",\");\r\n    if (getS3Config() != null)\r\n        sb.append(\"S3Config: \").append(getS3Config()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.internal.AbstractProfilesConfigFileScanner.parseProfileName",
	"Comment": "returns the profile name if this line indicates the beginning of a newprofile section. otherwise, returns null.",
	"Method": "String parseProfileName(String trimmedLine){\r\n    if (trimmedLine.startsWith(\"[\") && trimmedLine.endsWith(\"]\")) {\r\n        String profileName = trimmedLine.substring(1, trimmedLine.length() - 1);\r\n        return profileName.trim();\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.checkExpectedException",
	"Comment": "configures the profile with the data returned from the file. throws an error if theconfiguration is success as the file contains data not in the correct format.",
	"Method": "void checkExpectedException(ProfileResourceLoader resource,Class<? extends Exception> expectedExceptionClass,String failureMessage){\r\n    try {\r\n        new ProfilesConfigFile(resource.asFile());\r\n        fail(failureMessage);\r\n    } catch (Exception e) {\r\n        if (!expectedExceptionClass.isInstance(e)) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyTest.testPolicyWithNoResources",
	"Comment": "tests that a statement with an empty resources list results in no resource element",
	"Method": "void testPolicyWithNoResources(){\r\n    Statement statement = new Statement(Effect.Allow).withId(\"0\").withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action1\"));\r\n    statement.setResources(new ArrayList<Resource>());\r\n    Policy policy = new Policy(\"S3PolicyId1\").withStatements(statement);\r\n    JsonNode jsonPolicyNode = Jackson.jsonNodeOf(policy.toJson());\r\n    JsonNode statementArray = jsonPolicyNode.get(\"Statement\");\r\n    JsonNode statementNode = statementArray.get(0);\r\n    assertFalse(statementNode.has(\"Resource\"));\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetCostForecastRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getMetric() != null)\r\n        sb.append(\"Metric: \").append(getMetric()).append(\",\");\r\n    if (getGranularity() != null)\r\n        sb.append(\"Granularity: \").append(getGranularity()).append(\",\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getPredictionIntervalLevel() != null)\r\n        sb.append(\"PredictionIntervalLevel: \").append(getPredictionIntervalLevel());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectSentimentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTextList() != null)\r\n        sb.append(\"TextList: \").append(getTextList()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetRiskConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getCompromisedCredentialsRiskConfiguration() != null)\r\n        sb.append(\"CompromisedCredentialsRiskConfiguration: \").append(getCompromisedCredentialsRiskConfiguration()).append(\",\");\r\n    if (getAccountTakeoverRiskConfiguration() != null)\r\n        sb.append(\"AccountTakeoverRiskConfiguration: \").append(getAccountTakeoverRiskConfiguration()).append(\",\");\r\n    if (getRiskExceptionConfiguration() != null)\r\n        sb.append(\"RiskExceptionConfiguration: \").append(getRiskExceptionConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.createEntityRecognizer",
	"Comment": "creates an entity recognizer using submitted files. after your createentityrecognizer request issubmitted, you can check job status using the api.",
	"Method": "CreateEntityRecognizerResult createEntityRecognizer(CreateEntityRecognizerRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateEntityRecognizer(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DescribeUserHierarchyGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHierarchyGroup() != null)\r\n        sb.append(\"HierarchyGroup: \").append(getHierarchyGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.CreateLifecyclePolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExecutionRoleArn() != null)\r\n        sb.append(\"ExecutionRoleArn: \").append(getExecutionRoleArn()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getPolicyDetails() != null)\r\n        sb.append(\"PolicyDetails: \").append(getPolicyDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getJsonParser",
	"Comment": "returns the jsonparser used for parsing the json document. returns nullby default.",
	"Method": "JsonParser getJsonParser(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.RenewOfferingResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingTransaction() != null)\r\n        sb.append(\"OfferingTransaction: \").append(getOfferingTransaction());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ConfirmSignUpRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSecretHash() != null)\r\n        sb.append(\"SecretHash: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getConfirmationCode() != null)\r\n        sb.append(\"ConfirmationCode: \").append(getConfirmationCode()).append(\",\");\r\n    if (getForceAliasCreation() != null)\r\n        sb.append(\"ForceAliasCreation: \").append(getForceAliasCreation()).append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata()).append(\",\");\r\n    if (getUserContextData() != null)\r\n        sb.append(\"UserContextData: \").append(getUserContextData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.StartTaskExecutionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn()).append(\",\");\r\n    if (getOverrideOptions() != null)\r\n        sb.append(\"OverrideOptions: \").append(getOverrideOptions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.IpRoute.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCidrIp() != null)\r\n        sb.append(\"CidrIp: \").append(getCidrIp()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteRemoteAccessSessionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtilsTest.readResouceWithCustomRetryPolicy_DoesNotRetry_ForNonIoException",
	"Comment": "when readresource is called with custom retry policyand the exception is not an ioexception,then the request is not retried.",
	"Method": "void readResouceWithCustomRetryPolicy_DoesNotRetry_ForNonIoException(){\r\n    generateStub(500, \"Non Json error body\");\r\n    Mockito.when(mockConnection.connectToEndpoint(eq(endpoint), any(Map.class))).thenCallRealMethod();\r\n    try {\r\n        new EC2CredentialsUtils(mockConnection).readResource(endpoint, customRetryPolicy, new HashMap<String, String>());\r\n        fail(\"Expected an AmazonServiceException\");\r\n    } catch (AmazonServiceException ase) {\r\n        Mockito.verify(mockConnection, Mockito.times(1)).connectToEndpoint(eq(endpoint), any(Map.class));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DomainDescriptionType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getAWSAccountId() != null)\r\n        sb.append(\"AWSAccountId: \").append(getAWSAccountId()).append(\",\");\r\n    if (getDomain() != null)\r\n        sb.append(\"Domain: \").append(getDomain()).append(\",\");\r\n    if (getS3Bucket() != null)\r\n        sb.append(\"S3Bucket: \").append(getS3Bucket()).append(\",\");\r\n    if (getCloudFrontDistribution() != null)\r\n        sb.append(\"CloudFrontDistribution: \").append(getCloudFrontDistribution()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getCustomDomainConfig() != null)\r\n        sb.append(\"CustomDomainConfig: \").append(getCustomDomainConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DescribeUserHierarchyStructureRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RemoveIpRoutesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getCidrIps() != null)\r\n        sb.append(\"CidrIps: \").append(getCidrIps());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsdatabasemigrationserviceasync using the current builderconfiguration.",
	"Method": "AWSDatabaseMigrationServiceAsync build(AwsAsyncClientParams params){\r\n    return new AWSDatabaseMigrationServiceAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.startDocumentClassificationJob",
	"Comment": "starts an asynchronous document classification job. use the operation to track the progress of the job.",
	"Method": "StartDocumentClassificationJobResult startDocumentClassificationJob(StartDocumentClassificationJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartDocumentClassificationJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectEntitiesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListEntityRecognizersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntityRecognizerPropertiesList() != null)\r\n        sb.append(\"EntityRecognizerPropertiesList: \").append(getEntityRecognizerPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeComplianceByConfigRuleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleNames() != null)\r\n        sb.append(\"ConfigRuleNames: \").append(getConfigRuleNames()).append(\",\");\r\n    if (getComplianceTypes() != null)\r\n        sb.append(\"ComplianceTypes: \").append(getComplianceTypes()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.ReleasableInputStream.release",
	"Comment": "closes the underlying stream file and releases any system resources associated.",
	"Method": "void release(){\r\n    doRelease();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.AssociateConfigurationItemsToApplicationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserPoolClientType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientName() != null)\r\n        sb.append(\"ClientName: \").append(getClientName()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getClientSecret() != null)\r\n        sb.append(\"ClientSecret: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate()).append(\",\");\r\n    if (getRefreshTokenValidity() != null)\r\n        sb.append(\"RefreshTokenValidity: \").append(getRefreshTokenValidity()).append(\",\");\r\n    if (getReadAttributes() != null)\r\n        sb.append(\"ReadAttributes: \").append(getReadAttributes()).append(\",\");\r\n    if (getWriteAttributes() != null)\r\n        sb.append(\"WriteAttributes: \").append(getWriteAttributes()).append(\",\");\r\n    if (getExplicitAuthFlows() != null)\r\n        sb.append(\"ExplicitAuthFlows: \").append(getExplicitAuthFlows()).append(\",\");\r\n    if (getSupportedIdentityProviders() != null)\r\n        sb.append(\"SupportedIdentityProviders: \").append(getSupportedIdentityProviders()).append(\",\");\r\n    if (getCallbackURLs() != null)\r\n        sb.append(\"CallbackURLs: \").append(getCallbackURLs()).append(\",\");\r\n    if (getLogoutURLs() != null)\r\n        sb.append(\"LogoutURLs: \").append(getLogoutURLs()).append(\",\");\r\n    if (getDefaultRedirectURI() != null)\r\n        sb.append(\"DefaultRedirectURI: \").append(getDefaultRedirectURI()).append(\",\");\r\n    if (getAllowedOAuthFlows() != null)\r\n        sb.append(\"AllowedOAuthFlows: \").append(getAllowedOAuthFlows()).append(\",\");\r\n    if (getAllowedOAuthScopes() != null)\r\n        sb.append(\"AllowedOAuthScopes: \").append(getAllowedOAuthScopes()).append(\",\");\r\n    if (getAllowedOAuthFlowsUserPoolClient() != null)\r\n        sb.append(\"AllowedOAuthFlowsUserPoolClient: \").append(getAllowedOAuthFlowsUserPoolClient()).append(\",\");\r\n    if (getAnalyticsConfiguration() != null)\r\n        sb.append(\"AnalyticsConfiguration: \").append(getAnalyticsConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DirectoryConnectSettingsDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpcId() != null)\r\n        sb.append(\"VpcId: \").append(getVpcId()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds()).append(\",\");\r\n    if (getCustomerUserName() != null)\r\n        sb.append(\"CustomerUserName: \").append(getCustomerUserName()).append(\",\");\r\n    if (getSecurityGroupId() != null)\r\n        sb.append(\"SecurityGroupId: \").append(getSecurityGroupId()).append(\",\");\r\n    if (getAvailabilityZones() != null)\r\n        sb.append(\"AvailabilityZones: \").append(getAvailabilityZones()).append(\",\");\r\n    if (getConnectIps() != null)\r\n        sb.append(\"ConnectIps: \").append(getConnectIps());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.config.InternalConfigTest.testNewRegions",
	"Comment": "this test cases tests the default signers for any new regions added toany aws service.",
	"Method": "void testNewRegions(){\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"dynamodb\", NEW_REGION);\r\n    assertSignerType(S3V4_SIGNER_TYPE, \"s3\", NEW_REGION);\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"email\", NEW_REGION);\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"ec2\", NEW_REGION);\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"sdb\", NEW_REGION);\r\n}"
}, {
	"Path": "com.amazonaws.retry.RetryPolicy.isMaxErrorRetryInClientConfigHonored",
	"Comment": "returns whether this retry policy should honor the max error retry set inclientconfiguration.",
	"Method": "boolean isMaxErrorRetryInClientConfigHonored(){\r\n    return honorMaxErrorRetryInClientConfig;\r\n}"
}, {
	"Path": "com.amazonaws.regions.Region.isServiceSupported",
	"Comment": "returns whether the given service is supported in this region.",
	"Method": "boolean isServiceSupported(String serviceName){\r\n    return regionImpl.isServiceSupported(serviceName);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DeleteClusterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterName() != null)\r\n        sb.append(\"ClusterName: \").append(getClusterName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateConditionalForwarderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getRemoteDomainName() != null)\r\n        sb.append(\"RemoteDomainName: \").append(getRemoteDomainName()).append(\",\");\r\n    if (getDnsIpAddrs() != null)\r\n        sb.append(\"DnsIpAddrs: \").append(getDnsIpAddrs());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.PropertiesFileCredentialsProviderIntegrationTest.testPropertiesCredentialsMethod",
	"Comment": "tests that the credentials provider loads credentials appropriately",
	"Method": "void testPropertiesCredentialsMethod(){\r\n    PropertiesFileCredentialsProvider provider = new PropertiesFileCredentialsProvider(file.getAbsolutePath());\r\n    assertNotNull(provider.getCredentials());\r\n    assertEquals(provider.getCredentials().getAWSAccessKeyId(), \"testKey\");\r\n    assertEquals(provider.getCredentials().getAWSSecretKey(), \"secretKey\");\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DisassociateConnectionFromLagResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidentity.model.UpdateIdentityPoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityPoolName() != null)\r\n        sb.append(\"IdentityPoolName: \").append(getIdentityPoolName()).append(\",\");\r\n    if (getAllowUnauthenticatedIdentities() != null)\r\n        sb.append(\"AllowUnauthenticatedIdentities: \").append(getAllowUnauthenticatedIdentities()).append(\",\");\r\n    if (getSupportedLoginProviders() != null)\r\n        sb.append(\"SupportedLoginProviders: \").append(getSupportedLoginProviders()).append(\",\");\r\n    if (getDeveloperProviderName() != null)\r\n        sb.append(\"DeveloperProviderName: \").append(getDeveloperProviderName()).append(\",\");\r\n    if (getOpenIdConnectProviderARNs() != null)\r\n        sb.append(\"OpenIdConnectProviderARNs: \").append(getOpenIdConnectProviderARNs()).append(\",\");\r\n    if (getCognitoIdentityProviders() != null)\r\n        sb.append(\"CognitoIdentityProviders: \").append(getCognitoIdentityProviders()).append(\",\");\r\n    if (getSamlProviderARNs() != null)\r\n        sb.append(\"SamlProviderARNs: \").append(getSamlProviderARNs());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.AcceptorPathMatcher.pathAny",
	"Comment": "pathany matcher that checks if any element of the finalresult matches the expected result",
	"Method": "boolean pathAny(JsonNode expectedResult,JsonNode finalResult){\r\n    if (finalResult.isNull()) {\r\n        return false;\r\n    }\r\n    if (!finalResult.isArray()) {\r\n        throw new RuntimeException(\"Expected an array\");\r\n    }\r\n    for (JsonNode element : finalResult) {\r\n        if (element.equals(expectedResult)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.ListDatasetsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDatasets() != null)\r\n        sb.append(\"Datasets: \").append(getDatasets()).append(\",\");\r\n    if (getCount() != null)\r\n        sb.append(\"Count: \").append(getCount()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.StandardErrorUnmarshaller.getErrorPropertyPath",
	"Comment": "returns the path to the specified property within an error response.",
	"Method": "String getErrorPropertyPath(String property){\r\n    return \"ErrorResponse/Error/\" + property;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.NotificationConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTopicArn() != null)\r\n        sb.append(\"TopicArn: \").append(getTopicArn()).append(\",\");\r\n    if (getTopicStatus() != null)\r\n        sb.append(\"TopicStatus: \").append(getTopicStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeConfigurationAggregatorSourcesStatus",
	"Comment": "returns status information for sources within an aggregator. the status includes information about the last timeaws config aggregated data from source accounts or aws config failed to aggregate data from source accounts withthe related error code or message.",
	"Method": "DescribeConfigurationAggregatorSourcesStatusResult describeConfigurationAggregatorSourcesStatus(DescribeConfigurationAggregatorSourcesStatusRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeConfigurationAggregatorSourcesStatus(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeInterconnectLoaResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoa() != null)\r\n        sb.append(\"Loa: \").append(getLoa());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.Schedule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getCopyTags() != null)\r\n        sb.append(\"CopyTags: \").append(getCopyTags()).append(\",\");\r\n    if (getTagsToAdd() != null)\r\n        sb.append(\"TagsToAdd: \").append(getTagsToAdd()).append(\",\");\r\n    if (getCreateRule() != null)\r\n        sb.append(\"CreateRule: \").append(getCreateRule()).append(\",\");\r\n    if (getRetainRule() != null)\r\n        sb.append(\"RetainRule: \").append(getRetainRule());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetReservationUtilizationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getGroupBy() != null)\r\n        sb.append(\"GroupBy: \").append(getGroupBy()).append(\",\");\r\n    if (getGranularity() != null)\r\n        sb.append(\"Granularity: \").append(getGranularity()).append(\",\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationInstanceTaskLogsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DescribeUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUser() != null)\r\n        sb.append(\"User: \").append(getUser());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.EvaluateExpressionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvaluatedExpression() != null)\r\n        sb.append(\"EvaluatedExpression: \").append(getEvaluatedExpression());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateProjectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProject() != null)\r\n        sb.append(\"Project: \").append(getProject());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RemoveTagsFromResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateComplianceDetailsByConfigRuleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion()).append(\",\");\r\n    if (getComplianceType() != null)\r\n        sb.append(\"ComplianceType: \").append(getComplianceType()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateInterconnectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectName() != null)\r\n        sb.append(\"InterconnectName: \").append(getInterconnectName()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyTest.testStatementIdAssignment",
	"Comment": "tests that a policy correctly assigns unique statement ids to any addedstatements without ids yet.",
	"Method": "void testStatementIdAssignment(){\r\n    Policy policy = new Policy(\"S3PolicyId1\");\r\n    policy.withStatements(new Statement(Effect.Allow).withId(\"0\").withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action1\")), new Statement(Effect.Allow).withId(\"1\").withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action1\")), new Statement(Effect.Deny).withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action2\")));\r\n    assertValidStatementIds(policy);\r\n}"
}, {
	"Path": "com.amazonaws.util.EC2MetadataUtils.getRamdiskId",
	"Comment": "get the id of the ram disk specified at launch time, if applicable.",
	"Method": "String getRamdiskId(String getRamdiskId){\r\n    return fetchData(EC2_METADATA_ROOT + \"/ramdisk-id\");\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeOrderableReplicationInstances",
	"Comment": "returns information about the replication instance types that can be created in the specified region.",
	"Method": "DescribeOrderableReplicationInstancesResult describeOrderableReplicationInstances(DescribeOrderableReplicationInstancesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeOrderableReplicationInstances(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutAggregationAuthorizationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthorizedAccountId() != null)\r\n        sb.append(\"AuthorizedAccountId: \").append(getAuthorizedAccountId()).append(\",\");\r\n    if (getAuthorizedAwsRegion() != null)\r\n        sb.append(\"AuthorizedAwsRegion: \").append(getAuthorizedAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListOfferingsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferings() != null)\r\n        sb.append(\"Offerings: \").append(getOfferings()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.EvaluateExpressionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getObjectId() != null)\r\n        sb.append(\"ObjectId: \").append(getObjectId()).append(\",\");\r\n    if (getExpression() != null)\r\n        sb.append(\"Expression: \").append(getExpression());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListTagsForResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerEvaluationMetrics.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPrecision() != null)\r\n        sb.append(\"Precision: \").append(getPrecision()).append(\",\");\r\n    if (getRecall() != null)\r\n        sb.append(\"Recall: \").append(getRecall()).append(\",\");\r\n    if (getF1Score() != null)\r\n        sb.append(\"F1Score: \").append(getF1Score());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeregisterEventTopicRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getTopicName() != null)\r\n        sb.append(\"TopicName: \").append(getTopicName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.startReplicationTaskAssessment",
	"Comment": "starts the replication task assessment for unsupported data types in the source database.",
	"Method": "StartReplicationTaskAssessmentResult startReplicationTaskAssessment(StartReplicationTaskAssessmentRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartReplicationTaskAssessment(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListNetworkProfilesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNetworkProfiles() != null)\r\n        sb.append(\"NetworkProfiles: \").append(getNetworkProfiles()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.cancelTaskExecution",
	"Comment": "cancels execution of a task.when you cancel a task execution, the transfer of some files are abruptly interrupted. the contents of files thatare transferred to the destination might be incomplete or inconsistent with the source files. however, if youstart a new task execution on the same task and you allow the task execution to complete, file content on thedestination is complete and consistent. this applies to other unexpected failures that interrupt a taskexecution. in all of these cases, aws datasync successfully complete the transfer when you start the next taskexecution.",
	"Method": "CancelTaskExecutionResult cancelTaskExecution(CancelTaskExecutionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCancelTaskExecution(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SMSMfaSettingsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getPreferredMfa() != null)\r\n        sb.append(\"PreferredMfa: \").append(getPreferredMfa());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.RefreshSchemasResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRefreshSchemasStatus() != null)\r\n        sb.append(\"RefreshSchemasStatus: \").append(getRefreshSchemasStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponse.getRequest",
	"Comment": "returns the original request associated with this response.",
	"Method": "Request<?> getRequest(){\r\n    return request;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ValidatePipelineDefinitionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getValidationErrors() != null)\r\n        sb.append(\"ValidationErrors: \").append(getValidationErrors()).append(\",\");\r\n    if (getValidationWarnings() != null)\r\n        sb.append(\"ValidationWarnings: \").append(getValidationWarnings()).append(\",\");\r\n    if (getErrored() != null)\r\n        sb.append(\"Errored: \").append(getErrored());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.InstanceProfileCredentialsProviderIntegrationTest.testSessionCredentials_MultipleInstanceProfiles",
	"Comment": "tests that we correctly handle the metadata service returning credentialswhen multiple instance profiles are available.",
	"Method": "void testSessionCredentials_MultipleInstanceProfiles(){\r\n    mockServer.setResponseFileName(\"sessionResponse\");\r\n    mockServer.setAvailableSecurityCredentials(\"test-credentials\");\r\n    InstanceProfileCredentialsProvider credentialsProvider = new InstanceProfileCredentialsProvider();\r\n    AWSSessionCredentials credentials = (AWSSessionCredentials) credentialsProvider.getCredentials();\r\n    assertEquals(\"ACCESS_KEY_ID\", credentials.getAWSAccessKeyId());\r\n    assertEquals(\"SECRET_ACCESS_KEY\", credentials.getAWSSecretKey());\r\n    assertEquals(\"TOKEN_TOKEN_TOKEN\", credentials.getSessionToken());\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.getComplianceSummaryByResourceType",
	"Comment": "returns the number of resources that are compliant and the number that are noncompliant. you can specify one ormore resource types to get these numbers for each resource type. the maximum number returned is 100.",
	"Method": "GetComplianceSummaryByResourceTypeResult getComplianceSummaryByResourceType(GetComplianceSummaryByResourceTypeRequest request,GetComplianceSummaryByResourceTypeResult getComplianceSummaryByResourceType){\r\n    return getComplianceSummaryByResourceType(new GetComplianceSummaryByResourceTypeRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.StartConfigRulesEvaluationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.internal.Profile.getPropertyValue",
	"Comment": "returns the value of a specific property that is included in this profile instance.",
	"Method": "String getPropertyValue(String propertyName){\r\n    return getProperties().get(propertyName);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateVPCEConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpceConfiguration() != null)\r\n        sb.append(\"VpceConfiguration: \").append(getVpceConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.getAggregateConfigRuleComplianceSummary",
	"Comment": "returns the number of compliant and noncompliant rules for one or more accounts and regions in an aggregator.the results can return an empty result page, but if you have a nexttoken, the results are displayed on the nextpage.",
	"Method": "GetAggregateConfigRuleComplianceSummaryResult getAggregateConfigRuleComplianceSummary(GetAggregateConfigRuleComplianceSummaryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetAggregateConfigRuleComplianceSummary(request);\r\n}"
}, {
	"Path": "com.amazonaws.event.ProgressListenerChain.getListeners",
	"Comment": "returns the listeners associated with this listener chain.",
	"Method": "List<ProgressListener> getListeners(){\r\n    return listeners;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ReportTaskProgressRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskId() != null)\r\n        sb.append(\"TaskId: \").append(getTaskId()).append(\",\");\r\n    if (getFields() != null)\r\n        sb.append(\"Fields: \").append(getFields());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazondlm using the current builder configuration.",
	"Method": "AmazonDLM build(AwsSyncClientParams params){\r\n    return new AmazonDLMClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ActivatePipelineResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.Expression.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOr() != null)\r\n        sb.append(\"Or: \").append(getOr()).append(\",\");\r\n    if (getAnd() != null)\r\n        sb.append(\"And: \").append(getAnd()).append(\",\");\r\n    if (getNot() != null)\r\n        sb.append(\"Not: \").append(getNot()).append(\",\");\r\n    if (getDimensions() != null)\r\n        sb.append(\"Dimensions: \").append(getDimensions()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsdevicefarm using the current builder configuration.",
	"Method": "AWSDeviceFarm build(AwsSyncClientParams params){\r\n    return new AWSDeviceFarmClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteIdentityProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.updateParameterGroup",
	"Comment": "modifies the parameters of a parameter group. you can modify up to 20 parameters in a single request bysubmitting a list parameter name and value pairs.",
	"Method": "UpdateParameterGroupResult updateParameterGroup(UpdateParameterGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateParameterGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtils.isEmpty",
	"Comment": "returns true if the specified node is null or has no children.",
	"Method": "boolean isEmpty(Node node){\r\n    return (node == null);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StartContinuousExportRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.EventCategoryGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getEventCategories() != null)\r\n        sb.append(\"EventCategories: \").append(getEventCategories());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.ParameterNameValue.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterName() != null)\r\n        sb.append(\"ParameterName: \").append(getParameterName()).append(\",\");\r\n    if (getParameterValue() != null)\r\n        sb.append(\"ParameterValue: \").append(getParameterValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionMetadata.getRegion",
	"Comment": "returns the region with the name given, if it exists. otherwise, returnsnull.",
	"Method": "Region getRegion(String name){\r\n    return provider.getRegion(name);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazondaxasync using the current builder configuration.",
	"Method": "AmazonDaxAsync build(AwsAsyncClientParams params){\r\n    return new AmazonDaxAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeClustersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterNames() != null)\r\n        sb.append(\"ClusterNames: \").append(getClusterNames()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StopContinuousExportRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportId() != null)\r\n        sb.append(\"ExportId: \").append(getExportId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateVPCEConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpceConfiguration() != null)\r\n        sb.append(\"VpceConfiguration: \").append(getVpceConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeReplicationTaskAssessmentResults",
	"Comment": "returns the task assessment results from amazon s3. this action always returns the latest results.",
	"Method": "DescribeReplicationTaskAssessmentResultsResult describeReplicationTaskAssessmentResults(DescribeReplicationTaskAssessmentResultsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeReplicationTaskAssessmentResults(request);\r\n}"
}, {
	"Path": "com.amazonaws.SDKGlobalTime.setGlobalTimeOffset",
	"Comment": "sets the global time difference in seconds between the running jvm andaws. if this value is set then all the subsequent instantiation of anamazonhttpclient will start using thisvalue to generate timestamps.",
	"Method": "void setGlobalTimeOffset(int timeOffset){\r\n    globalTimeOffset = timeOffset;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateComputerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComputer() != null)\r\n        sb.append(\"Computer: \").append(getComputer());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DeleteLocationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.internal.JsonPolicyWriter.writeJsonArrayStart",
	"Comment": "writes the start of array string to the jsongenerator along with arrayname.",
	"Method": "void writeJsonArrayStart(String fieldName){\r\n    generator.writeArrayFieldStart(fieldName);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUpdateAuthEventFeedbackResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.CollectionUtils.mergeLists",
	"Comment": "returns a new list containing the second list appended to the first list.",
	"Method": "List<T> mergeLists(List<T> list1,List<T> list2){\r\n    List<T> merged = new LinkedList<T>();\r\n    if (list1 != null) {\r\n        merged.addAll(list1);\r\n    }\r\n    if (list2 != null) {\r\n        merged.addAll(list2);\r\n    }\r\n    return merged;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListOfferingPromotionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListRoutingProfilesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.evaluateExpression",
	"Comment": "task runners call evaluateexpression to evaluate a string in the context of the specified object.for example, a task runner can evaluate sql queries stored in amazon s3.",
	"Method": "EvaluateExpressionResult evaluateExpression(EvaluateExpressionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeEvaluateExpression(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HistoricalMetricResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDimensions() != null)\r\n        sb.append(\"Dimensions: \").append(getDimensions()).append(\",\");\r\n    if (getCollections() != null)\r\n        sb.append(\"Collections: \").append(getCollections());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.describeSubnetGroups",
	"Comment": "returns a list of subnet group descriptions. if a subnet group name is specified, the list will contain only thedescription of that group.",
	"Method": "DescribeSubnetGroupsResult describeSubnetGroups(DescribeSubnetGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeSubnetGroups(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Project.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDefaultJobTimeoutMinutes() != null)\r\n        sb.append(\"DefaultJobTimeoutMinutes: \").append(getDefaultJobTimeoutMinutes()).append(\",\");\r\n    if (getCreated() != null)\r\n        sb.append(\"Created: \").append(getCreated());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.getCognitoEvents",
	"Comment": "gets the events and the corresponding lambda functions associated with an identity pool.this api can only be called with developer credentials. you cannot call this api with the temporary usercredentials provided by cognito identity.",
	"Method": "GetCognitoEventsResult getCognitoEvents(GetCognitoEventsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetCognitoEvents(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateUploadRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType()).append(\",\");\r\n    if (getEditContent() != null)\r\n        sb.append(\"EditContent: \").append(getEditContent());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.BatchGetAggregateResourceConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getResourceIdentifiers() != null)\r\n        sb.append(\"ResourceIdentifiers: \").append(getResourceIdentifiers());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.getServiceName",
	"Comment": "returns the service name that is used when calculating the signature.",
	"Method": "String getServiceName(){\r\n    return serviceName;\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetReservationCoverageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getGroupBy() != null)\r\n        sb.append(\"GroupBy: \").append(getGroupBy()).append(\",\");\r\n    if (getGranularity() != null)\r\n        sb.append(\"Granularity: \").append(getGranularity()).append(\",\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getMetrics() != null)\r\n        sb.append(\"Metrics: \").append(getMetrics()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.withRequestCredentialsProvider",
	"Comment": "sets the optional credentials provider to use for this request, overriding the default credentialsprovider at the client level.",
	"Method": "T withRequestCredentialsProvider(AWSCredentialsProvider credentialsProvider){\r\n    setRequestCredentialsProvider(credentialsProvider);\r\n    @SuppressWarnings(\"unchecked\")\r\n    T t = (T) this;\r\n    return t;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.EnableSsoRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(getUserName()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.tagResource",
	"Comment": "adds the specified tags to the specified aws direct connect resource. each resource can have a maximum of 50tags.each tag consists of a key and an optional value. if a tag with the same key is already associated with theresource, this action updates its value.",
	"Method": "TagResourceResult tagResource(TagResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeTagResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDeleteUserAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.PredefinedRetryPolicies.getDynamoDBDefaultRetryPolicyWithCustomMaxRetries",
	"Comment": "returns the default retry policy for dynamodb client with the specifiedmax retry count.",
	"Method": "RetryPolicy getDynamoDBDefaultRetryPolicyWithCustomMaxRetries(int maxErrorRetry){\r\n    return new RetryPolicy(DEFAULT_RETRY_CONDITION, DYNAMODB_DEFAULT_BACKOFF_STRATEGY, maxErrorRetry, false);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.deleteEndpoint",
	"Comment": "deletes the specified endpoint.all tasks associated with the endpoint must be deleted before you can delete the endpoint.",
	"Method": "DeleteEndpointResult deleteEndpoint(DeleteEndpointRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteEndpoint(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListDevicesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevices() != null)\r\n        sb.append(\"Devices: \").append(getDevices()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.describeUserPoolClient",
	"Comment": "client method for returning the configuration information and metadata of the specified user pool app client.",
	"Method": "DescribeUserPoolClientResult describeUserPoolClient(DescribeUserPoolClientRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeUserPoolClient(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateEventSubscriptionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventSubscription() != null)\r\n        sb.append(\"EventSubscription: \").append(getEventSubscription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.KeyPhrasesDetectionJobProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getSubmitTime() != null)\r\n        sb.append(\"SubmitTime: \").append(getSubmitTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.StaxUnmarshallerContext.getMetadata",
	"Comment": "returns any metadata collected through metadata expressions while thiscontext was reading the xml events from the xml document.",
	"Method": "Map<String, String> getMetadata(){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ImportCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateDirectConnectGatewayAssociationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayAssociation() != null)\r\n        sb.append(\"DirectConnectGatewayAssociation: \").append(getDirectConnectGatewayAssociation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReplicationSubnetGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationSubnetGroupIdentifier() != null)\r\n        sb.append(\"ReplicationSubnetGroupIdentifier: \").append(getReplicationSubnetGroupIdentifier()).append(\",\");\r\n    if (getReplicationSubnetGroupDescription() != null)\r\n        sb.append(\"ReplicationSubnetGroupDescription: \").append(getReplicationSubnetGroupDescription()).append(\",\");\r\n    if (getVpcId() != null)\r\n        sb.append(\"VpcId: \").append(getVpcId()).append(\",\");\r\n    if (getSubnetGroupStatus() != null)\r\n        sb.append(\"SubnetGroupStatus: \").append(getSubnetGroupStatus()).append(\",\");\r\n    if (getSubnets() != null)\r\n        sb.append(\"Subnets: \").append(getSubnets());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListDevicesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.AgentConfigurationStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentId() != null)\r\n        sb.append(\"AgentId: \").append(getAgentId()).append(\",\");\r\n    if (getOperationSucceeded() != null)\r\n        sb.append(\"OperationSucceeded: \").append(getOperationSucceeded()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeDeliveryChannelsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryChannels() != null)\r\n        sb.append(\"DeliveryChannels: \").append(getDeliveryChannels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.BoundedLinkedHashMap.getMaxSize",
	"Comment": "returns the maximum size of this map beyond which the eldest entrywill get removed.",
	"Method": "int getMaxSize(){\r\n    return maxSize;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeAggregationAuthorizations",
	"Comment": "returns a list of authorizations granted to various aggregator accounts and regions.",
	"Method": "DescribeAggregationAuthorizationsResult describeAggregationAuthorizations(DescribeAggregationAuthorizationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeAggregationAuthorizations(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UserSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(getUsername());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withTcpKeepAlive",
	"Comment": "sets whether or not to enable tcp keepalive support at the socket level.",
	"Method": "ClientConfiguration withTcpKeepAlive(boolean use){\r\n    setUseTcpKeepAlive(use);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.putConfigurationRecorder",
	"Comment": "creates a new configuration recorder to record the selected resource configurations.you can use this action to change the role rolearn or the recordinggroup of an existingrecorder. to change the role, call the action on the existing configuration recorder and specify a role.currently, you can specify only one configuration recorder per region in your account.if configurationrecorder does not have the recordinggroup parameter specified, the default isto record all supported resource types.",
	"Method": "PutConfigurationRecorderResult putConfigurationRecorder(PutConfigurationRecorderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutConfigurationRecorder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDevicePoolCompatibilityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCompatibleDevices() != null)\r\n        sb.append(\"CompatibleDevices: \").append(getCompatibleDevices()).append(\",\");\r\n    if (getIncompatibleDevices() != null)\r\n        sb.append(\"IncompatibleDevices: \").append(getIncompatibleDevices());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListProjectsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProjects() != null)\r\n        sb.append(\"Projects: \").append(getProjects()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminForgetDevice",
	"Comment": "forgets the device, as an administrator.requires developer credentials.",
	"Method": "AdminForgetDeviceResult adminForgetDevice(AdminForgetDeviceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminForgetDevice(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMClient.getLifecyclePolicy",
	"Comment": "gets detailed information about the specified lifecycle policy.",
	"Method": "GetLifecyclePolicyResult getLifecyclePolicy(GetLifecyclePolicyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetLifecyclePolicy(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.Relationship.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getRelationshipName() != null)\r\n        sb.append(\"RelationshipName: \").append(getRelationshipName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.GetDiscoverySummaryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServers() != null)\r\n        sb.append(\"Servers: \").append(getServers()).append(\",\");\r\n    if (getApplications() != null)\r\n        sb.append(\"Applications: \").append(getApplications()).append(\",\");\r\n    if (getServersMappedToApplications() != null)\r\n        sb.append(\"ServersMappedToApplications: \").append(getServersMappedToApplications()).append(\",\");\r\n    if (getServersMappedtoTags() != null)\r\n        sb.append(\"ServersMappedtoTags: \").append(getServersMappedtoTags()).append(\",\");\r\n    if (getAgentSummary() != null)\r\n        sb.append(\"AgentSummary: \").append(getAgentSummary()).append(\",\");\r\n    if (getConnectorSummary() != null)\r\n        sb.append(\"ConnectorSummary: \").append(getConnectorSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.CreateDocumentClassifierResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassifierArn() != null)\r\n        sb.append(\"DocumentClassifierArn: \").append(getDocumentClassifierArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setProxyHost",
	"Comment": "sets the optional proxy host the client will connect through.",
	"Method": "void setProxyHost(String proxyHost){\r\n    this.proxyHost = proxyHost;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeConnectionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDeviceInstanceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazondirectconnectasync using the current builder configuration.",
	"Method": "AmazonDirectConnectAsync build(AwsAsyncClientParams params){\r\n    return new AmazonDirectConnectAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.untagResource",
	"Comment": "removes the association of tags from a dax resource. you can call untagresource up to 5 times persecond, per account.",
	"Method": "UntagResourceResult untagResource(UntagResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUntagResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevice() != null)\r\n        sb.append(\"Device: \").append(getDevice());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeDeliveryChannelsAsync",
	"Comment": "simplified method form for invoking the describedeliverychannels operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync(DescribeDeliveryChannelsRequest request,java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync,DescribeDeliveryChannelsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelsRequest, DescribeDeliveryChannelsResult> asyncHandler,java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync,java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelsRequest, DescribeDeliveryChannelsResult> asyncHandler){\r\n    return describeDeliveryChannelsAsync(new DescribeDeliveryChannelsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Rule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAttribute() != null)\r\n        sb.append(\"Attribute: \").append(getAttribute()).append(\",\");\r\n    if (getOperator() != null)\r\n        sb.append(\"Operator: \").append(getOperator()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUsersInGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetCostAndUsageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken()).append(\",\");\r\n    if (getGroupDefinitions() != null)\r\n        sb.append(\"GroupDefinitions: \").append(getGroupDefinitions()).append(\",\");\r\n    if (getResultsByTime() != null)\r\n        sb.append(\"ResultsByTime: \").append(getResultsByTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUserGlobalSignOutRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeLocationNfsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.RemoteAccessSession.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getCreated() != null)\r\n        sb.append(\"Created: \").append(getCreated()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getResult() != null)\r\n        sb.append(\"Result: \").append(getResult()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getStarted() != null)\r\n        sb.append(\"Started: \").append(getStarted()).append(\",\");\r\n    if (getStopped() != null)\r\n        sb.append(\"Stopped: \").append(getStopped()).append(\",\");\r\n    if (getDevice() != null)\r\n        sb.append(\"Device: \").append(getDevice()).append(\",\");\r\n    if (getInstanceArn() != null)\r\n        sb.append(\"InstanceArn: \").append(getInstanceArn()).append(\",\");\r\n    if (getRemoteDebugEnabled() != null)\r\n        sb.append(\"RemoteDebugEnabled: \").append(getRemoteDebugEnabled()).append(\",\");\r\n    if (getRemoteRecordEnabled() != null)\r\n        sb.append(\"RemoteRecordEnabled: \").append(getRemoteRecordEnabled()).append(\",\");\r\n    if (getRemoteRecordAppArn() != null)\r\n        sb.append(\"RemoteRecordAppArn: \").append(getRemoteRecordAppArn()).append(\",\");\r\n    if (getHostAddress() != null)\r\n        sb.append(\"HostAddress: \").append(getHostAddress()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(getClientId()).append(\",\");\r\n    if (getBillingMethod() != null)\r\n        sb.append(\"BillingMethod: \").append(getBillingMethod()).append(\",\");\r\n    if (getDeviceMinutes() != null)\r\n        sb.append(\"DeviceMinutes: \").append(getDeviceMinutes()).append(\",\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint()).append(\",\");\r\n    if (getDeviceUdid() != null)\r\n        sb.append(\"DeviceUdid: \").append(getDeviceUdid()).append(\",\");\r\n    if (getInteractionMode() != null)\r\n        sb.append(\"InteractionMode: \").append(getInteractionMode()).append(\",\");\r\n    if (getSkipAppResign() != null)\r\n        sb.append(\"SkipAppResign: \").append(getSkipAppResign());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.createApplication",
	"Comment": "creates an application with the given name and description.",
	"Method": "CreateApplicationResult createApplication(CreateApplicationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateApplication(request);\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.publishResponseBytesTransferred",
	"Comment": "convenient method to publish a response byte transfer event to the givenlistener.",
	"Method": "Future<?> publishResponseBytesTransferred(ProgressListener listener,long bytes){\r\n    return publishByteCountEvent(listener, RESPONSE_BYTE_TRANSFER_EVENT, bytes);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeConnectionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.monitoring.internal.ClientSideMonitoringRequestHandler.getDefaultUserAgent",
	"Comment": "get the default user agent and append the user agent marker if there are any.",
	"Method": "String getDefaultUserAgent(Request<?> request){\r\n    String userAgentMarker = request.getOriginalRequest().getRequestClientOptions().getClientMarker(RequestClientOptions.Marker.USER_AGENT);\r\n    String userAgent = ClientConfiguration.DEFAULT_USER_AGENT;\r\n    if (StringUtils.hasValue(userAgentMarker)) {\r\n        userAgent += \" \" + userAgentMarker;\r\n    }\r\n    return userAgent;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigRuleComplianceFilters.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getComplianceType() != null)\r\n        sb.append(\"ComplianceType: \").append(getComplianceType()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeAggregationAuthorizationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAggregationAuthorizations() != null)\r\n        sb.append(\"AggregationAuthorizations: \").append(getAggregationAuthorizations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListAgentsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgents() != null)\r\n        sb.append(\"Agents: \").append(getAgents()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StartContinuousExportResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportId() != null)\r\n        sb.append(\"ExportId: \").append(getExportId()).append(\",\");\r\n    if (getS3Bucket() != null)\r\n        sb.append(\"S3Bucket: \").append(getS3Bucket()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getDataSource() != null)\r\n        sb.append(\"DataSource: \").append(getDataSource()).append(\",\");\r\n    if (getSchemaStorageConfig() != null)\r\n        sb.append(\"SchemaStorageConfig: \").append(getSchemaStorageConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DeleteEntityRecognizerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.getSigner",
	"Comment": "returns the signer.note, however, the signer configured for s3 is incomplete at this stageas the information on the s3 bucket and key is not yet known.",
	"Method": "Signer getSigner(){\r\n    return signerProvider.getSigner(SignerProviderContext.builder().build());\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListDocumentClassifiersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassifierPropertiesList() != null)\r\n        sb.append(\"DocumentClassifierPropertiesList: \").append(getDocumentClassifierPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserImportJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getCloudWatchLogsRoleArn() != null)\r\n        sb.append(\"CloudWatchLogsRoleArn: \").append(getCloudWatchLogsRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ExecutionConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobTimeoutMinutes() != null)\r\n        sb.append(\"JobTimeoutMinutes: \").append(getJobTimeoutMinutes()).append(\",\");\r\n    if (getAccountsCleanup() != null)\r\n        sb.append(\"AccountsCleanup: \").append(getAccountsCleanup()).append(\",\");\r\n    if (getAppPackagesCleanup() != null)\r\n        sb.append(\"AppPackagesCleanup: \").append(getAppPackagesCleanup()).append(\",\");\r\n    if (getVideoCapture() != null)\r\n        sb.append(\"VideoCapture: \").append(getVideoCapture()).append(\",\");\r\n    if (getSkipAppResign() != null)\r\n        sb.append(\"SkipAppResign: \").append(getSkipAppResign());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateDevicePoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRules() != null)\r\n        sb.append(\"Rules: \").append(getRules());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEndpointsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.setConditions",
	"Comment": "sets the conditions associated with this policy statement. conditionsallow policy statements to be conditionally evaluated based on the manyavailable condition types.for example, a statement that allows access to an amazon sqs queue coulduse a condition to only apply the effect of that statement for requeststhat are made before a certain date, or that originate from a range of ipaddresses.multiple conditions can be included in a single statement, and allconditions must evaluate to true in order for the statement to takeeffect.",
	"Method": "void setConditions(List<Condition> conditions){\r\n    this.conditions = conditions;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListTasksRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.getResources",
	"Comment": "returns the resources associated with this policy statement. resourcesare what a policy statement is allowing or denying access to, such as anamazon sqs queue or an amazon sns topic.note that some services allow only one resource to be specified perpolicy statement.",
	"Method": "List<Resource> getResources(){\r\n    return resources;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ShareDirectoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getShareNotes() != null)\r\n        sb.append(\"ShareNotes: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getShareTarget() != null)\r\n        sb.append(\"ShareTarget: \").append(getShareTarget()).append(\",\");\r\n    if (getShareMethod() != null)\r\n        sb.append(\"ShareMethod: \").append(getShareMethod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.Event.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceName() != null)\r\n        sb.append(\"SourceName: \").append(getSourceName()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getDate() != null)\r\n        sb.append(\"Date: \").append(getDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteConnectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListAgentsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withDnsResolver",
	"Comment": "sets the dns resolver that should be used to for resolving aws ip addresses.",
	"Method": "ClientConfiguration withDnsResolver(DnsResolver resolver){\r\n    setDnsResolver(resolver);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.confirmPublicVirtualInterface",
	"Comment": "accepts ownership of a public virtual interface created by another aws account.after the virtual interface owner makes this call, the specified virtual interface is created and made availableto handle traffic.",
	"Method": "ConfirmPublicVirtualInterfaceResult confirmPublicVirtualInterface(ConfirmPublicVirtualInterfaceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeConfirmPublicVirtualInterface(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ListConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurations() != null)\r\n        sb.append(\"Configurations: \").append(getConfigurations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartSentimentDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteRetentionConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteReplicationInstanceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.setOverrideDate",
	"Comment": "sets the date that overrides the signing date in the request. this methodis internal and should be used only for testing purposes.",
	"Method": "void setOverrideDate(Date overriddenDate){\r\n    if (overriddenDate != null) {\r\n        this.overriddenDate = new Date(overriddenDate.getTime());\r\n    } else {\r\n        this.overriddenDate = null;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeConnectionLoaRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getLoaContentType() != null)\r\n        sb.append(\"LoaContentType: \").append(getLoaContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUserPoolsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeKeyPhrasesDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKeyPhrasesDetectionJobProperties() != null)\r\n        sb.append(\"KeyPhrasesDetectionJobProperties: \").append(getKeyPhrasesDetectionJobProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DocumentClassificationJobFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.LifecyclePolicy.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyId() != null)\r\n        sb.append(\"PolicyId: \").append(getPolicyId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getExecutionRoleArn() != null)\r\n        sb.append(\"ExecutionRoleArn: \").append(getExecutionRoleArn()).append(\",\");\r\n    if (getDateCreated() != null)\r\n        sb.append(\"DateCreated: \").append(getDateCreated()).append(\",\");\r\n    if (getDateModified() != null)\r\n        sb.append(\"DateModified: \").append(getDateModified()).append(\",\");\r\n    if (getPolicyDetails() != null)\r\n        sb.append(\"PolicyDetails: \").append(getPolicyDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.MetricValue.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAmount() != null)\r\n        sb.append(\"Amount: \").append(getAmount()).append(\",\");\r\n    if (getUnit() != null)\r\n        sb.append(\"Unit: \").append(getUnit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.resetUserPassword",
	"Comment": "resets the password for any user in your aws managed microsoft ad or simple ad directory.",
	"Method": "ResetUserPasswordResult resetUserPassword(ResetUserPasswordRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeResetUserPassword(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.StopRemoteAccessSessionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyEventSubscriptionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubscriptionName() != null)\r\n        sb.append(\"SubscriptionName: \").append(getSubscriptionName()).append(\",\");\r\n    if (getSnsTopicArn() != null)\r\n        sb.append(\"SnsTopicArn: \").append(getSnsTopicArn()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getEventCategories() != null)\r\n        sb.append(\"EventCategories: \").append(getEventCategories()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RemoveTagsFromResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponse.getStatusText",
	"Comment": "returns the http status text associated with this response.",
	"Method": "String getStatusText(){\r\n    return statusText;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserPoolAddOnsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAdvancedSecurityMode() != null)\r\n        sb.append(\"AdvancedSecurityMode: \").append(getAdvancedSecurityMode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeletePendingAggregationRequestResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUserAttributeVerificationCodeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAttributeName() != null)\r\n        sb.append(\"AttributeName: \").append(getAttributeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2MetadataClient.readResource",
	"Comment": "connects to the metadata service to read the specified resource andreturns the text contents.",
	"Method": "String readResource(String resourcePath){\r\n    URL url = getEc2MetadataServiceUrlForResource(resourcePath);\r\n    log.debug(\"Connecting to EC2 instance metadata service at URL: \" + url.toString());\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n    connection.setConnectTimeout(1000 * 2);\r\n    connection.setReadTimeout(1000 * 5);\r\n    connection.setRequestMethod(\"GET\");\r\n    connection.setDoOutput(true);\r\n    connection.addRequestProperty(\"User-Agent\", USER_AGENT);\r\n    connection.connect();\r\n    return readResponse(connection);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigRuleComplianceSummaryFilters.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminSetUserMFAPreferenceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ListTagsForResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTagList() != null)\r\n        sb.append(\"TagList: \").append(getTagList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.EC2CredentialsFetcherTest.testLoadCredentialsParsesJsonResponseProperly",
	"Comment": "test that loadcredentials returns proper credentials when response from client is in proper json format.",
	"Method": "void testLoadCredentialsParsesJsonResponseProperly(){\r\n    stubForSuccessResponseWithCustomBody(200, successResponse);\r\n    TestCredentialsProvider credentialsProvider = new TestCredentialsProvider();\r\n    AWSSessionCredentials credentials = (AWSSessionCredentials) credentialsProvider.getCredentials();\r\n    assertEquals(\"ACCESS_KEY_ID\", credentials.getAWSAccessKeyId());\r\n    assertEquals(\"SECRET_ACCESS_KEY\", credentials.getAWSSecretKey());\r\n    assertEquals(\"TOKEN_TOKEN_TOKEN\", credentials.getSessionToken());\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutRetentionConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRetentionConfiguration() != null)\r\n        sb.append(\"RetentionConfiguration: \").append(getRetentionConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListDocumentClassificationJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassificationJobPropertiesList() != null)\r\n        sb.append(\"DocumentClassificationJobPropertiesList: \").append(getDocumentClassificationJobPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HierarchyStructure.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLevelOne() != null)\r\n        sb.append(\"LevelOne: \").append(getLevelOne()).append(\",\");\r\n    if (getLevelTwo() != null)\r\n        sb.append(\"LevelTwo: \").append(getLevelTwo()).append(\",\");\r\n    if (getLevelThree() != null)\r\n        sb.append(\"LevelThree: \").append(getLevelThree()).append(\",\");\r\n    if (getLevelFour() != null)\r\n        sb.append(\"LevelFour: \").append(getLevelFour()).append(\",\");\r\n    if (getLevelFive() != null)\r\n        sb.append(\"LevelFive: \").append(getLevelFive());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateAgentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActivationKey() != null)\r\n        sb.append(\"ActivationKey: \").append(getActivationKey()).append(\",\");\r\n    if (getAgentName() != null)\r\n        sb.append(\"AgentName: \").append(getAgentName()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.internal.AWS4SignerRequestParams.getSigningDateTimeMilli",
	"Comment": "returns the signing date time in millis for which the signature needs tobe computed.",
	"Method": "long getSigningDateTimeMilli(){\r\n    return signingDateTimeMilli;\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.isPreemptiveBasicProxyAuth",
	"Comment": "returns whether to attempt to authenticate preemptively against proxy servers using basicauthentication",
	"Method": "boolean isPreemptiveBasicProxyAuth(){\r\n    return preemptiveBasicProxyAuth;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeVirtualGatewaysResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualGateways() != null)\r\n        sb.append(\"VirtualGateways: \").append(getVirtualGateways());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEventsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceIdentifier() != null)\r\n        sb.append(\"SourceIdentifier: \").append(getSourceIdentifier()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getDuration() != null)\r\n        sb.append(\"Duration: \").append(getDuration()).append(\",\");\r\n    if (getEventCategories() != null)\r\n        sb.append(\"EventCategories: \").append(getEventCategories()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionUtils.loadMetadataFromURI",
	"Comment": "loads a set of region metadata by downloading an xml file from thegiven uri and parsing it.",
	"Method": "RegionMetadata loadMetadataFromURI(URI uri,RegionMetadata loadMetadataFromURI,URI uri,ClientConfiguration config){\r\n    return LegacyRegionXmlLoadUtils.load(uri, config);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeviceFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAttribute() != null)\r\n        sb.append(\"Attribute: \").append(getAttribute()).append(\",\");\r\n    if (getOperator() != null)\r\n        sb.append(\"Operator: \").append(getOperator()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.LogSubscription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getLogGroupName() != null)\r\n        sb.append(\"LogGroupName: \").append(getLogGroupName()).append(\",\");\r\n    if (getSubscriptionCreatedDateTime() != null)\r\n        sb.append(\"SubscriptionCreatedDateTime: \").append(getSubscriptionCreatedDateTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.listInstanceProfiles",
	"Comment": "returns information about all the instance profiles in an aws account.",
	"Method": "ListInstanceProfilesResult listInstanceProfiles(ListInstanceProfilesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListInstanceProfiles(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsdatabasemigrationservice using the current builder configuration.",
	"Method": "AWSDatabaseMigrationService build(AwsSyncClientParams params){\r\n    return new AWSDatabaseMigrationServiceClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeEntitiesDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntitiesDetectionJobProperties() != null)\r\n        sb.append(\"EntitiesDetectionJobProperties: \").append(getEntitiesDetectionJobProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.Snapshot.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getSnapshotId() != null)\r\n        sb.append(\"SnapshotId: \").append(getSnapshotId()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.timers.ClientExecutionAndRequestTimerTestUtils.assertCoreThreadsShutDownAfterBeingIdle",
	"Comment": "waits until a little after the thread pools keep alive time and then asserts that all thre",
	"Method": "void assertCoreThreadsShutDownAfterBeingIdle(ScheduledThreadPoolExecutor timerExecutor){\r\n    try {\r\n        Thread.sleep(timerExecutor.getKeepAliveTime(TimeUnit.MILLISECONDS) + 1000);\r\n    } catch (InterruptedException ignored) {\r\n    }\r\n    assertEquals(0, timerExecutor.getPoolSize());\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StopDataCollectionByAgentIdsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentIds() != null)\r\n        sb.append(\"AgentIds: \").append(getAgentIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Service.getEndpoints",
	"Comment": "returns the endpoints configuration for all regions in a partitionthat service supports.",
	"Method": "Map<String, Endpoint> getEndpoints(){\r\n    return endpoints;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserPoolClientResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.describeExportTasks",
	"Comment": "retrieve status of one or more export tasks. you can retrieve the status of up to 100 export tasks.",
	"Method": "DescribeExportTasksResult describeExportTasks(DescribeExportTasksRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeExportTasks(request);\r\n}"
}, {
	"Path": "com.amazonaws.internal.CredentialsEndpointProvider.getRetryPolicy",
	"Comment": "allows the extending class to provide a custom retry policy.the default behavior is not to retry.",
	"Method": "CredentialsEndpointRetryPolicy getRetryPolicy(){\r\n    return CredentialsEndpointRetryPolicy.NO_RETRY;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateDevicePoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProjectArn() != null)\r\n        sb.append(\"ProjectArn: \").append(getProjectArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRules() != null)\r\n        sb.append(\"Rules: \").append(getRules());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectSentimentItemResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIndex() != null)\r\n        sb.append(\"Index: \").append(getIndex()).append(\",\");\r\n    if (getSentiment() != null)\r\n        sb.append(\"Sentiment: \").append(getSentiment()).append(\",\");\r\n    if (getSentimentScore() != null)\r\n        sb.append(\"SentimentScore: \").append(getSentimentScore());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ClassifierEvaluationMetrics.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccuracy() != null)\r\n        sb.append(\"Accuracy: \").append(getAccuracy()).append(\",\");\r\n    if (getPrecision() != null)\r\n        sb.append(\"Precision: \").append(getPrecision()).append(\",\");\r\n    if (getRecall() != null)\r\n        sb.append(\"Recall: \").append(getRecall()).append(\",\");\r\n    if (getF1Score() != null)\r\n        sb.append(\"F1Score: \").append(getF1Score());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.publishResponseContentLength",
	"Comment": "convenient method to publish a response content length event to the givenlistener.",
	"Method": "Future<?> publishResponseContentLength(ProgressListener listener,long bytes){\r\n    return publishByteCountEvent(listener, RESPONSE_CONTENT_LENGTH_EVENT, bytes);\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.getUserAgentPrefix",
	"Comment": "returns the http user agent header prefix to send with all requests.",
	"Method": "String getUserAgentPrefix(){\r\n    return userAgentPrefix;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeSnapshotsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getSnapshotIds() != null)\r\n        sb.append(\"SnapshotIds: \").append(getSnapshotIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.XMLWriter.value",
	"Comment": "adds the string representation of the specified object to the currentposition of the in progress xml document.",
	"Method": "XMLWriter value(String s,XMLWriter value,ByteBuffer b,XMLWriter value,Date date,XMLWriter value,Object obj){\r\n    append(escapeXMLEntities(obj.toString()));\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DescribeIdentityPoolUsageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolUsage() != null)\r\n        sb.append(\"IdentityPoolUsage: \").append(getIdentityPoolUsage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Test.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getCreated() != null)\r\n        sb.append(\"Created: \").append(getCreated()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getResult() != null)\r\n        sb.append(\"Result: \").append(getResult()).append(\",\");\r\n    if (getStarted() != null)\r\n        sb.append(\"Started: \").append(getStarted()).append(\",\");\r\n    if (getStopped() != null)\r\n        sb.append(\"Stopped: \").append(getStopped()).append(\",\");\r\n    if (getCounters() != null)\r\n        sb.append(\"Counters: \").append(getCounters()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getDeviceMinutes() != null)\r\n        sb.append(\"DeviceMinutes: \").append(getDeviceMinutes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigRuleEvaluationStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleNames() != null)\r\n        sb.append(\"ConfigRuleNames: \").append(getConfigRuleNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationRecordersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecorders() != null)\r\n        sb.append(\"ConfigurationRecorders: \").append(getConfigurationRecorders());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.bulkPublish",
	"Comment": "initiates a bulk publish of all existing datasets for an identity pool to the configured stream. customers arelimited to one successful bulk publish per 24 hours. bulk publish is an asynchronous request, customers can seethe status of the request via the getbulkpublishdetails operation.this api can only be called with developer credentials. you cannot call this api with the temporary usercredentials provided by cognito identity.",
	"Method": "BulkPublishResult bulkPublish(BulkPublishRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBulkPublish(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.confirmSignUp",
	"Comment": "confirms registration of a user and handles the existing alias from a previous user.",
	"Method": "ConfirmSignUpResult confirmSignUp(ConfirmSignUpRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeConfirmSignUp(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListDevicesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevices() != null)\r\n        sb.append(\"Devices: \").append(getDevices()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listDocumentClassificationJobs",
	"Comment": "gets a list of the documentation classification jobs that you have submitted.",
	"Method": "ListDocumentClassificationJobsResult listDocumentClassificationJobs(ListDocumentClassificationJobsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListDocumentClassificationJobs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroup() != null)\r\n        sb.append(\"Group: \").append(getGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateDiscoveredResourceCountsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTotalDiscoveredResources() != null)\r\n        sb.append(\"TotalDiscoveredResources: \").append(getTotalDiscoveredResources()).append(\",\");\r\n    if (getGroupByKey() != null)\r\n        sb.append(\"GroupByKey: \").append(getGroupByKey()).append(\",\");\r\n    if (getGroupedResourceCounts() != null)\r\n        sb.append(\"GroupedResourceCounts: \").append(getGroupedResourceCounts()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.AWSCostAndUsageReportAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUserPoolsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPools() != null)\r\n        sb.append(\"UserPools: \").append(getUserPools()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.config.InternalConfig.load",
	"Comment": "loads and returns the aws java sdk internal configuration from the classpath.",
	"Method": "InternalConfig load(){\r\n    URL configUrl = getResource(DEFAULT_CONFIG_RESOURCE_RELATIVE_PATH, true, false);\r\n    if (configUrl == null) {\r\n        configUrl = getResource(DEFAULT_CONFIG_RESOURCE_ABSOLUTE_PATH, false, false);\r\n    }\r\n    InternalConfigJsonHelper config = loadfrom(configUrl, InternalConfigJsonHelper.class);\r\n    InternalConfigJsonHelper configOverride;\r\n    URL overrideUrl = getResource(CONFIG_OVERRIDE_RESOURCE, false, true);\r\n    if (overrideUrl == null) {\r\n        overrideUrl = getResource(CONFIG_OVERRIDE_RESOURCE, false, false);\r\n    }\r\n    if (overrideUrl == null) {\r\n        log.debug(\"Configuration override \" + CONFIG_OVERRIDE_RESOURCE + \" not found.\");\r\n        configOverride = new InternalConfigJsonHelper();\r\n    } else {\r\n        configOverride = loadfrom(overrideUrl, InternalConfigJsonHelper.class);\r\n    }\r\n    EndpointDiscoveryConfig endpointDiscoveryConfig = new EndpointDiscoveryConfig();\r\n    URL endpointDiscoveryConfigUrl = getResource(ENDPOINT_DISCOVERY_CONFIG_ABSOLUTE_PATH, false, false);\r\n    if (endpointDiscoveryConfigUrl != null) {\r\n        endpointDiscoveryConfig = loadfrom(endpointDiscoveryConfigUrl, EndpointDiscoveryConfig.class);\r\n    }\r\n    InternalConfig merged = new InternalConfig(config, configOverride, endpointDiscoveryConfig);\r\n    merged.setDefaultConfigFileLocation(configUrl);\r\n    merged.setOverrideConfigFileLocation(overrideUrl);\r\n    return merged;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListDevicesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeEventTopicsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getTopicNames() != null)\r\n        sb.append(\"TopicNames: \").append(getTopicNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.MongoDbSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(getUsername()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getServerName() != null)\r\n        sb.append(\"ServerName: \").append(getServerName()).append(\",\");\r\n    if (getPort() != null)\r\n        sb.append(\"Port: \").append(getPort()).append(\",\");\r\n    if (getDatabaseName() != null)\r\n        sb.append(\"DatabaseName: \").append(getDatabaseName()).append(\",\");\r\n    if (getAuthType() != null)\r\n        sb.append(\"AuthType: \").append(getAuthType()).append(\",\");\r\n    if (getAuthMechanism() != null)\r\n        sb.append(\"AuthMechanism: \").append(getAuthMechanism()).append(\",\");\r\n    if (getNestingLevel() != null)\r\n        sb.append(\"NestingLevel: \").append(getNestingLevel()).append(\",\");\r\n    if (getExtractDocId() != null)\r\n        sb.append(\"ExtractDocId: \").append(getExtractDocId()).append(\",\");\r\n    if (getDocsToInvestigate() != null)\r\n        sb.append(\"DocsToInvestigate: \").append(getDocsToInvestigate()).append(\",\");\r\n    if (getAuthSource() != null)\r\n        sb.append(\"AuthSource: \").append(getAuthSource()).append(\",\");\r\n    if (getKmsKeyId() != null)\r\n        sb.append(\"KmsKeyId: \").append(getKmsKeyId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserIdentityInfoRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityInfo() != null)\r\n        sb.append(\"IdentityInfo: \").append(getIdentityInfo()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeClustersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getClusters() != null)\r\n        sb.append(\"Clusters: \").append(getClusters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.isStartOfDocument",
	"Comment": "returns true if parsing of the json document is yet to start. returnsfalse by default or if the parsing of json document is not yet started.",
	"Method": "boolean isStartOfDocument(){\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.newSigningKey",
	"Comment": "generates a new signing key from the given parameters and returns it.",
	"Method": "byte[] newSigningKey(AWSCredentials credentials,String dateStamp,String regionName,String serviceName){\r\n    byte[] kSecret = (\"AWS4\" + credentials.getAWSSecretKey()).getBytes(Charset.forName(\"UTF-8\"));\r\n    byte[] kDate = sign(dateStamp, kSecret, SigningAlgorithm.HmacSHA256);\r\n    byte[] kRegion = sign(regionName, kDate, SigningAlgorithm.HmacSHA256);\r\n    byte[] kService = sign(serviceName, kRegion, SigningAlgorithm.HmacSHA256);\r\n    return sign(AWS4_TERMINATOR, kService, SigningAlgorithm.HmacSHA256);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeEventSubscriptions",
	"Comment": "lists all the event subscriptions for a customer account. the description of a subscription includessubscriptionname, snstopicarn, customerid, sourcetype,sourceid, creationtime, and status.if you specify subscriptionname, this action lists the description for that subscription.",
	"Method": "DescribeEventSubscriptionsResult describeEventSubscriptions(DescribeEventSubscriptionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEventSubscriptions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocateConnectionOnInterconnectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getInterconnectId() != null)\r\n        sb.append(\"InterconnectId: \").append(getInterconnectId()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionMetadata.getRegionByEndpoint",
	"Comment": "searches through all known regions to find one with any service at thespecified endpoint. if no region is found with a service at thatendpoint, an exception is thrown.",
	"Method": "Region getRegionByEndpoint(String endpoint){\r\n    return provider.getRegionByEndpoint(endpoint);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminAddUserToGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserPoolPolicyType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPasswordPolicy() != null)\r\n        sb.append(\"PasswordPolicy: \").append(getPasswordPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DecreaseReplicationFactorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCluster() != null)\r\n        sb.append(\"Cluster: \").append(getCluster());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.AggregationAuthorization.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAggregationAuthorizationArn() != null)\r\n        sb.append(\"AggregationAuthorizationArn: \").append(getAggregationAuthorizationArn()).append(\",\");\r\n    if (getAuthorizedAccountId() != null)\r\n        sb.append(\"AuthorizedAccountId: \").append(getAuthorizedAccountId()).append(\",\");\r\n    if (getAuthorizedAwsRegion() != null)\r\n        sb.append(\"AuthorizedAwsRegion: \").append(getAuthorizedAwsRegion()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilder.setMetricsCollector",
	"Comment": "sets a custom requestmetriccollector to use for the client.",
	"Method": "void setMetricsCollector(RequestMetricCollector metrics){\r\n    this.metricsCollector = metrics;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListSentimentDetectionJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSentimentDetectionJobPropertiesList() != null)\r\n        sb.append(\"SentimentDetectionJobPropertiesList: \").append(getSentimentDetectionJobPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2MetadataClient.readResponse",
	"Comment": "reads a response from the amazon ec2 instance metadata service andreturns the content as a string.",
	"Method": "String readResponse(HttpURLConnection connection){\r\n    if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND)\r\n        throw new SdkClientException(\"The requested metadata is not found at \" + connection.getURL());\r\n    InputStream inputStream = connection.getInputStream();\r\n    try {\r\n        StringBuilder buffer = new StringBuilder();\r\n        while (true) {\r\n            int c = inputStream.read();\r\n            if (c == -1)\r\n                break;\r\n            buffer.append((char) c);\r\n        }\r\n        return buffer.toString();\r\n    } finally {\r\n        inputStream.close();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AbstractAmazonDirectConnectAsync.describeLocationsAsync",
	"Comment": "simplified method form for invoking the describelocations operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync(DescribeLocationsRequest request,java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync,DescribeLocationsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeLocationsRequest, DescribeLocationsResult> asyncHandler,java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync,java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync,com.amazonaws.handlers.AsyncHandler<DescribeLocationsRequest, DescribeLocationsResult> asyncHandler){\r\n    return describeLocationsAsync(new DescribeLocationsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurations() != null)\r\n        sb.append(\"Configurations: \").append(getConfigurations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.internal.BasicProfileConfigLoader.assertParameterNotEmpty",
	"Comment": "asserts that the specified parameter value is neither empty nor null, and ifit is, throws a sdkclientexception with the specified error message.",
	"Method": "void assertParameterNotEmpty(String parameterValue,String errorMessage){\r\n    if (StringUtils.isNullOrEmpty(parameterValue)) {\r\n        throw new SdkClientException(errorMessage);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.CoverageHours.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOnDemandHours() != null)\r\n        sb.append(\"OnDemandHours: \").append(getOnDemandHours()).append(\",\");\r\n    if (getReservedHours() != null)\r\n        sb.append(\"ReservedHours: \").append(getReservedHours()).append(\",\");\r\n    if (getTotalRunningHours() != null)\r\n        sb.append(\"TotalRunningHours: \").append(getTotalRunningHours()).append(\",\");\r\n    if (getCoverageHoursPercentage() != null)\r\n        sb.append(\"CoverageHoursPercentage: \").append(getCoverageHoursPercentage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.batchDetectDominantLanguage",
	"Comment": "determines the dominant language of the input text for a batch of documents. for a list of languages that amazoncomprehend can detect, see amazoncomprehend supported languages.",
	"Method": "BatchDetectDominantLanguageResult batchDetectDominantLanguage(BatchDetectDominantLanguageRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchDetectDominantLanguage(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteDirectConnectGatewayRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponse.getCRC32Checksum",
	"Comment": "returns the crc32 checksum calculated by the underlying crc32checksumcalculatinginputstream.",
	"Method": "long getCRC32Checksum(){\r\n    if (context == null) {\r\n        return 0L;\r\n    }\r\n    CRC32ChecksumCalculatingInputStream crc32ChecksumInputStream = (CRC32ChecksumCalculatingInputStream) context.getAttribute(CRC32ChecksumCalculatingInputStream.class.getName());\r\n    return crc32ChecksumInputStream == null ? 0L : crc32ChecksumInputStream.getCRC32Checksum();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Condition.setValues",
	"Comment": "sets the values specified for this access control policy condition. forexample, in a condition that compares the incoming ip address of arequest to a specified range of ip addresses, the range of ip addressesis the single value in the condition.most conditions accept only one value, but multiple values are possible.",
	"Method": "void setValues(List<String> values){\r\n    this.values = values;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DeleteEntityRecognizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntityRecognizerArn() != null)\r\n        sb.append(\"EntityRecognizerArn: \").append(getEntityRecognizerArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ListPipelinesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineIdList() != null)\r\n        sb.append(\"PipelineIdList: \").append(getPipelineIdList()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getHasMoreResults() != null)\r\n        sb.append(\"HasMoreResults: \").append(getHasMoreResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withPreemptiveBasicProxyAuth",
	"Comment": "sets whether to attempt to authenticate preemptively against proxy servers using basicauthentication, and returns the updated clientconfiguration object so that additional methodcalls may be chained together.",
	"Method": "ClientConfiguration withPreemptiveBasicProxyAuth(boolean preemptiveBasicProxyAuth){\r\n    setPreemptiveBasicProxyAuth(preemptiveBasicProxyAuth);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.listTagsForResource",
	"Comment": "returns all the tags associated with a specified resources.",
	"Method": "ListTagsForResourceResult listTagsForResource(ListTagsForResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListTagsForResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.VerifySoftwareTokenResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.Credentials.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAccessTokenExpiration() != null)\r\n        sb.append(\"AccessTokenExpiration: \").append(getAccessTokenExpiration()).append(\",\");\r\n    if (getRefreshToken() != null)\r\n        sb.append(\"RefreshToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getRefreshTokenExpiration() != null)\r\n        sb.append(\"RefreshTokenExpiration: \").append(getRefreshTokenExpiration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceAsyncClient.describeDirectoriesAsync",
	"Comment": "simplified method form for invoking the describedirectories operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync(DescribeDirectoriesRequest request,java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync,DescribeDirectoriesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeDirectoriesRequest, DescribeDirectoriesResult> asyncHandler,java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync,java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync,com.amazonaws.handlers.AsyncHandler<DescribeDirectoriesRequest, DescribeDirectoriesResult> asyncHandler){\r\n    return describeDirectoriesAsync(new DescribeDirectoriesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribePendingAggregationRequestsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeResourceServerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getIdentifier() != null)\r\n        sb.append(\"Identifier: \").append(getIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.timers.request.HttpRequestTimer.startTimer",
	"Comment": "start the timer with the specified timeout and return a object that can be used to track thestate of the timer and cancel it if need be.",
	"Method": "HttpRequestAbortTaskTracker startTimer(HttpRequestBase apacheRequest,int requestTimeoutMillis){\r\n    if (isTimeoutDisabled(requestTimeoutMillis)) {\r\n        return NoOpHttpRequestAbortTaskTracker.INSTANCE;\r\n    } else if (executor == null) {\r\n        initializeExecutor();\r\n    }\r\n    HttpRequestAbortTaskImpl timerTask = new HttpRequestAbortTaskImpl(apacheRequest);\r\n    ScheduledFuture<?> timerTaskFuture = executor.schedule(timerTask, requestTimeoutMillis, TimeUnit.MILLISECONDS);\r\n    return new HttpRequestAbortTaskTrackerImpl(timerTask, timerTaskFuture);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyReplicationTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTask() != null)\r\n        sb.append(\"ReplicationTask: \").append(getReplicationTask());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DisassociateConfigurationItemsFromApplicationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeSubnetGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getSubnetGroups() != null)\r\n        sb.append(\"SubnetGroups: \").append(getSubnetGroups());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.registerDevice",
	"Comment": "registers a device to receive push sync notifications.this api can only be called with temporary credentials provided by cognito identity. you cannot call this apiwith developer credentials.",
	"Method": "RegisterDeviceResult registerDevice(RegisterDeviceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeRegisterDevice(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.util.LengthCheckInputStreamTest.testMarkAndResetAtEnd",
	"Comment": "this test case initiates a marks the stream initially, drains the wholestream. resets the stream and drains again.",
	"Method": "void testMarkAndResetAtEnd(){\r\n    InputStream in = new ByteArrayInputStream(sampleData.getBytes());\r\n    LengthCheckInputStream rvis = new LengthCheckInputStream(in, sampleData.getBytes().length, INCLUDE_SKIPPED_BYTES);\r\n    rvis.mark(100);\r\n    StreamUtils.consumeInputStream(rvis);\r\n    rvis.reset();\r\n    StreamUtils.consumeInputStream(rvis);\r\n    try {\r\n        rvis.read();\r\n    } catch (Exception e) {\r\n        fail();\r\n    }\r\n    rvis.close();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.deleteBGPPeer",
	"Comment": "deletes the specified bgp peer on the specified virtual interface with the specified customer address and asn.you cannot delete the last bgp peer from a virtual interface.",
	"Method": "DeleteBGPPeerResult deleteBGPPeer(DeleteBGPPeerRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteBGPPeer(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.deleteInstanceProfile",
	"Comment": "deletes a profile that can be applied to one or more private device instances.",
	"Method": "DeleteInstanceProfileResult deleteInstanceProfile(DeleteInstanceProfileRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteInstanceProfile(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.PipelineDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getFields() != null)\r\n        sb.append(\"Fields: \").append(getFields()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtilsTest.readResouceReturnsResponseBodyFor200Response",
	"Comment": "when server returns with status code 200,the test successfully returns the body from the response.",
	"Method": "void readResouceReturnsResponseBodyFor200Response(){\r\n    generateStub(200, SUCCESS_BODY);\r\n    assertEquals(SUCCESS_BODY, ec2CredentialsUtils.readResource(endpoint));\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEventCategoriesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.StartOutboundVoiceContactResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactId() != null)\r\n        sb.append(\"ContactId: \").append(getContactId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.Region.createClient",
	"Comment": "creates a new service client of the class given and configures it. ifcredentials or config are null, defaults will be used.",
	"Method": "T createClient(Class<T> serviceClass,AWSCredentialsProvider credentials,ClientConfiguration config){\r\n    Constructor<T> constructor;\r\n    T client;\r\n    try {\r\n        if (credentials == null && config == null) {\r\n            constructor = serviceClass.getConstructor();\r\n            client = constructor.newInstance();\r\n        } else if (credentials == null) {\r\n            constructor = serviceClass.getConstructor(ClientConfiguration.class);\r\n            client = constructor.newInstance(config);\r\n        } else if (config == null) {\r\n            constructor = serviceClass.getConstructor(AWSCredentialsProvider.class);\r\n            client = constructor.newInstance(credentials);\r\n        } else {\r\n            constructor = serviceClass.getConstructor(AWSCredentialsProvider.class, ClientConfiguration.class);\r\n            client = constructor.newInstance(credentials, config);\r\n        }\r\n        client.setRegion(this);\r\n        return client;\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(\"Couldn't instantiate instance of \" + serviceClass, e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeReplicationInstances",
	"Comment": "returns information about replication instances for your account in the current region.",
	"Method": "DescribeReplicationInstancesResult describeReplicationInstances(DescribeReplicationInstancesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeReplicationInstances(request);\r\n}"
}, {
	"Path": "com.amazonaws.internal.http.JsonErrorCodeParser.parseErrorCodeFromHeader",
	"Comment": "attempt to parse the error code from the response headers. returns null if information is notpresent in the header.",
	"Method": "String parseErrorCodeFromHeader(Map<String, String> httpHeaders){\r\n    String headerValue = httpHeaders.get(X_AMZN_ERROR_TYPE);\r\n    if (headerValue != null) {\r\n        int separator = headerValue.indexOf(':');\r\n        if (separator != -1) {\r\n            headerValue = headerValue.substring(0, separator);\r\n        }\r\n    }\r\n    return headerValue;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeParameterGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getParameterGroups() != null)\r\n        sb.append(\"ParameterGroups: \").append(getParameterGroups());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetReservationCoverageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCoveragesByTime() != null)\r\n        sb.append(\"CoveragesByTime: \").append(getCoveragesByTime()).append(\",\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminCreateUserConfigType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAllowAdminCreateUserOnly() != null)\r\n        sb.append(\"AllowAdminCreateUserOnly: \").append(getAllowAdminCreateUserOnly()).append(\",\");\r\n    if (getUnusedAccountValidityDays() != null)\r\n        sb.append(\"UnusedAccountValidityDays: \").append(getUnusedAccountValidityDays()).append(\",\");\r\n    if (getInviteMessageTemplate() != null)\r\n        sb.append(\"InviteMessageTemplate: \").append(getInviteMessageTemplate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.RetryUtils.isRequestEntityTooLargeException",
	"Comment": "returns true if the specified exception is a request entity too large error.",
	"Method": "boolean isRequestEntityTooLargeException(AmazonServiceException exception,boolean isRequestEntityTooLargeException,SdkBaseException exception){\r\n    return isAse(exception) && toAse(exception).getStatusCode() == HttpStatus.SC_REQUEST_TOO_LONG;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteEndpointRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ForgetDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeVirtualGateways",
	"Comment": "lists the virtual private gateways owned by the aws account.you can create one or more aws direct connect private virtual interfaces linked to a virtual private gateway.",
	"Method": "DescribeVirtualGatewaysResult describeVirtualGateways(DescribeVirtualGatewaysRequest request,DescribeVirtualGatewaysResult describeVirtualGateways){\r\n    return describeVirtualGateways(new DescribeVirtualGatewaysRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.CreateEntityRecognizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRecognizerName() != null)\r\n        sb.append(\"RecognizerName: \").append(getRecognizerName()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HistoricalMetricData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetric() != null)\r\n        sb.append(\"Metric: \").append(getMetric()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigurationRecorder.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getRoleARN() != null)\r\n        sb.append(\"RoleARN: \").append(getRoleARN()).append(\",\");\r\n    if (getRecordingGroup() != null)\r\n        sb.append(\"RecordingGroup: \").append(getRecordingGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.EC2MetadataUtils.getSecurityGroups",
	"Comment": "get the list of names of the security groups applied to the instance.",
	"Method": "List<String> getSecurityGroups(List<String> getSecurityGroups){\r\n    return getItems(EC2_METADATA_ROOT + \"/security-groups\");\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DeleteDocumentClassifierRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassifierArn() != null)\r\n        sb.append(\"DocumentClassifierArn: \").append(getDocumentClassifierArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListUniqueProblemsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUICustomizationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getCSS() != null)\r\n        sb.append(\"CSS: \").append(getCSS()).append(\",\");\r\n    if (getImageFile() != null)\r\n        sb.append(\"ImageFile: \").append(getImageFile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.InstanceIdentity.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocument() != null)\r\n        sb.append(\"Document: \").append(getDocument()).append(\",\");\r\n    if (getSignature() != null)\r\n        sb.append(\"Signature: \").append(getSignature());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.queryObjects",
	"Comment": "queries the specified pipeline for the names of objects that match the specified set of conditions.",
	"Method": "QueryObjectsResult queryObjects(QueryObjectsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeQueryObjects(request);\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.calculateCRC32FromCompressedData",
	"Comment": "hook to allow clients to override crc32 calculation behavior. currently, only exercised by dynamodb.",
	"Method": "boolean calculateCRC32FromCompressedData(){\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEventCategoriesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventCategoryGroupList() != null)\r\n        sb.append(\"EventCategoryGroupList: \").append(getEventCategoryGroupList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.SentimentScore.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPositive() != null)\r\n        sb.append(\"Positive: \").append(getPositive()).append(\",\");\r\n    if (getNegative() != null)\r\n        sb.append(\"Negative: \").append(getNegative()).append(\",\");\r\n    if (getNeutral() != null)\r\n        sb.append(\"Neutral: \").append(getNeutral()).append(\",\");\r\n    if (getMixed() != null)\r\n        sb.append(\"Mixed: \").append(getMixed());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Endpoint.hasHttpsSupport",
	"Comment": "a convienient methods that returns true if the endpoint support httpsscheme. returns false otherwise.",
	"Method": "boolean hasHttpsSupport(){\r\n    return isProtocolSupported(Protocol.HTTPS);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DescribeIdentityPoolUsageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.model.PutReportDefinitionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.DateUtils.formatUnixTimestampInMills",
	"Comment": "formats the give date object into unit timestamp in milli seconds.",
	"Method": "String formatUnixTimestampInMills(Date date){\r\n    if (date == null)\r\n        return null;\r\n    BigDecimal dateValue = BigDecimal.valueOf(date.getTime());\r\n    return dateValue.toPlainString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.SnapshotLimits.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getManualSnapshotsLimit() != null)\r\n        sb.append(\"ManualSnapshotsLimit: \").append(getManualSnapshotsLimit()).append(\",\");\r\n    if (getManualSnapshotsCurrentCount() != null)\r\n        sb.append(\"ManualSnapshotsCurrentCount: \").append(getManualSnapshotsCurrentCount()).append(\",\");\r\n    if (getManualSnapshotsLimitReached() != null)\r\n        sb.append(\"ManualSnapshotsLimitReached: \").append(getManualSnapshotsLimitReached());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DeleteSubnetGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeletionMessage() != null)\r\n        sb.append(\"DeletionMessage: \").append(getDeletionMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateRemoteAccessSessionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProjectArn() != null)\r\n        sb.append(\"ProjectArn: \").append(getProjectArn()).append(\",\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getInstanceArn() != null)\r\n        sb.append(\"InstanceArn: \").append(getInstanceArn()).append(\",\");\r\n    if (getSshPublicKey() != null)\r\n        sb.append(\"SshPublicKey: \").append(getSshPublicKey()).append(\",\");\r\n    if (getRemoteDebugEnabled() != null)\r\n        sb.append(\"RemoteDebugEnabled: \").append(getRemoteDebugEnabled()).append(\",\");\r\n    if (getRemoteRecordEnabled() != null)\r\n        sb.append(\"RemoteRecordEnabled: \").append(getRemoteRecordEnabled()).append(\",\");\r\n    if (getRemoteRecordAppArn() != null)\r\n        sb.append(\"RemoteRecordAppArn: \").append(getRemoteRecordAppArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(getClientId()).append(\",\");\r\n    if (getConfiguration() != null)\r\n        sb.append(\"Configuration: \").append(getConfiguration()).append(\",\");\r\n    if (getInteractionMode() != null)\r\n        sb.append(\"InteractionMode: \").append(getInteractionMode()).append(\",\");\r\n    if (getSkipAppResign() != null)\r\n        sb.append(\"SkipAppResign: \").append(getSkipAppResign());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteDirectoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchItemError.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIndex() != null)\r\n        sb.append(\"Index: \").append(getIndex()).append(\",\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorMessage() != null)\r\n        sb.append(\"ErrorMessage: \").append(getErrorMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.CurrentMetricData.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetric() != null)\r\n        sb.append(\"Metric: \").append(getMetric()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AuthenticationResultType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getExpiresIn() != null)\r\n        sb.append(\"ExpiresIn: \").append(getExpiresIn()).append(\",\");\r\n    if (getTokenType() != null)\r\n        sb.append(\"TokenType: \").append(getTokenType()).append(\",\");\r\n    if (getRefreshToken() != null)\r\n        sb.append(\"RefreshToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getIdToken() != null)\r\n        sb.append(\"IdToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getNewDeviceMetadata() != null)\r\n        sb.append(\"NewDeviceMetadata: \").append(getNewDeviceMetadata());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectEntitiesItemResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIndex() != null)\r\n        sb.append(\"Index: \").append(getIndex()).append(\",\");\r\n    if (getEntities() != null)\r\n        sb.append(\"Entities: \").append(getEntities());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetCostForecastResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal()).append(\",\");\r\n    if (getForecastResultsByTime() != null)\r\n        sb.append(\"ForecastResultsByTime: \").append(getForecastResultsByTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListLogSubscriptionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationRecordersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecorderNames() != null)\r\n        sb.append(\"ConfigurationRecorderNames: \").append(getConfigurationRecorderNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ProviderDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getProviderType() != null)\r\n        sb.append(\"ProviderType: \").append(getProviderType()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CodeDeliveryDetailsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDestination() != null)\r\n        sb.append(\"Destination: \").append(getDestination()).append(\",\");\r\n    if (getDeliveryMedium() != null)\r\n        sb.append(\"DeliveryMedium: \").append(getDeliveryMedium()).append(\",\");\r\n    if (getAttributeName() != null)\r\n        sb.append(\"AttributeName: \").append(getAttributeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRoleArn() != null)\r\n        sb.append(\"RoleArn: \").append(getRoleArn()).append(\",\");\r\n    if (getPrecedence() != null)\r\n        sb.append(\"Precedence: \").append(getPrecedence());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DecreaseReplicationFactorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterName() != null)\r\n        sb.append(\"ClusterName: \").append(getClusterName()).append(\",\");\r\n    if (getNewReplicationFactor() != null)\r\n        sb.append(\"NewReplicationFactor: \").append(getNewReplicationFactor()).append(\",\");\r\n    if (getAvailabilityZones() != null)\r\n        sb.append(\"AvailabilityZones: \").append(getAvailabilityZones()).append(\",\");\r\n    if (getNodeIdsToRemove() != null)\r\n        sb.append(\"NodeIdsToRemove: \").append(getNodeIdsToRemove());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidentity.model.UnlinkDeveloperIdentityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getDeveloperProviderName() != null)\r\n        sb.append(\"DeveloperProviderName: \").append(getDeveloperProviderName()).append(\",\");\r\n    if (getDeveloperUserIdentifier() != null)\r\n        sb.append(\"DeveloperUserIdentifier: \").append(getDeveloperUserIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartSentimentDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUpdateUserAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserAttributes() != null)\r\n        sb.append(\"UserAttributes: \").append(getUserAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GroupedResourceCount.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getResourceCount() != null)\r\n        sb.append(\"ResourceCount: \").append(getResourceCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeEntitiesDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.GetBulkPublishDetailsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.IdleConnectionReaper.removeConnectionManager",
	"Comment": "removes the given connection manager from this reaper,and shutting down the reaper if there is zero connection manager left.",
	"Method": "boolean removeConnectionManager(HttpClientConnectionManager connectionManager){\r\n    boolean wasRemoved = connectionManagers.remove(connectionManager) != null;\r\n    if (connectionManagers.isEmpty()) {\r\n        shutdown();\r\n    }\r\n    return wasRemoved;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.VerifyUserAttributeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAttributeName() != null)\r\n        sb.append(\"AttributeName: \").append(getAttributeName()).append(\",\");\r\n    if (getCode() != null)\r\n        sb.append(\"Code: \").append(getCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ValidationError.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getErrors() != null)\r\n        sb.append(\"Errors: \").append(getErrors());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeContinuousExportsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDescriptions() != null)\r\n        sb.append(\"Descriptions: \").append(getDescriptions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopKeyPhrasesDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.rejectSharedDirectory",
	"Comment": "rejects a directory sharing request that was sent from the directory owner account.",
	"Method": "RejectSharedDirectoryResult rejectSharedDirectory(RejectSharedDirectoryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeRejectSharedDirectory(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AnalyticsMetadataType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAnalyticsEndpointId() != null)\r\n        sb.append(\"AnalyticsEndpointId: \").append(getAnalyticsEndpointId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AbstractAWSDirectoryServiceAsync.getDirectoryLimitsAsync",
	"Comment": "simplified method form for invoking the getdirectorylimits operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync(GetDirectoryLimitsRequest request,java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync,GetDirectoryLimitsRequest request,com.amazonaws.handlers.AsyncHandler<GetDirectoryLimitsRequest, GetDirectoryLimitsResult> asyncHandler,java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync,java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync,com.amazonaws.handlers.AsyncHandler<GetDirectoryLimitsRequest, GetDirectoryLimitsResult> asyncHandler){\r\n    return getDirectoryLimitsAsync(new GetDirectoryLimitsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.PolicyDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceTypes() != null)\r\n        sb.append(\"ResourceTypes: \").append(getResourceTypes()).append(\",\");\r\n    if (getTargetTags() != null)\r\n        sb.append(\"TargetTags: \").append(getTargetTags()).append(\",\");\r\n    if (getSchedules() != null)\r\n        sb.append(\"Schedules: \").append(getSchedules());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.Coverage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCoverageHours() != null)\r\n        sb.append(\"CoverageHours: \").append(getCoverageHours()).append(\",\");\r\n    if (getCoverageNormalizedUnits() != null)\r\n        sb.append(\"CoverageNormalizedUnits: \").append(getCoverageNormalizedUnits()).append(\",\");\r\n    if (getCoverageCost() != null)\r\n        sb.append(\"CoverageCost: \").append(getCoverageCost());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListRunsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRuns() != null)\r\n        sb.append(\"Runs: \").append(getRuns()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.RoutingProfileSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeVirtualGatewaysRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.createGroup",
	"Comment": "creates a new group in the specified user pool.requires developer credentials.",
	"Method": "CreateGroupResult createGroup(CreateGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.UnsubscribeFromDatasetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonServiceException.setStatusCode",
	"Comment": "sets the http status code that was returned with this service exception.",
	"Method": "void setStatusCode(int statusCode){\r\n    this.statusCode = statusCode;\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.newStringEntity",
	"Comment": "utility function for creating a new stringentity and wrapping any errorsas a sdkclientexception.",
	"Method": "HttpEntity newStringEntity(String s){\r\n    try {\r\n        return new StringEntity(s);\r\n    } catch (UnsupportedEncodingException e) {\r\n        throw new SdkClientException(\"Unable to create HTTP entity: \" + e.getMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.createDocumentClassifier",
	"Comment": "creates a new document classifier that you can use to categorize documents. to create a classifier you provide aset of training documents that labeled with the categories that you want to use. after the classifier is trainedyou can use it to categorize a set of labeled documents into the categories.",
	"Method": "CreateDocumentClassifierResult createDocumentClassifier(CreateDocumentClassifierRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDocumentClassifier(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.validatePipelineDefinition",
	"Comment": "validates the specified pipeline definition to ensure that it is well formed and can be run without error.",
	"Method": "ValidatePipelineDefinitionResult validatePipelineDefinition(ValidatePipelineDefinitionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeValidatePipelineDefinition(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteTrustRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId()).append(\",\");\r\n    if (getDeleteAssociatedConditionalForwarder() != null)\r\n        sb.append(\"DeleteAssociatedConditionalForwarder: \").append(getDeleteAssociatedConditionalForwarder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.Compliance.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComplianceType() != null)\r\n        sb.append(\"ComplianceType: \").append(getComplianceType()).append(\",\");\r\n    if (getComplianceContributorCount() != null)\r\n        sb.append(\"ComplianceContributorCount: \").append(getComplianceContributorCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeliverConfigSnapshotResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigSnapshotId() != null)\r\n        sb.append(\"ConfigSnapshotId: \").append(getConfigSnapshotId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeComplianceByResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComplianceByResources() != null)\r\n        sb.append(\"ComplianceByResources: \").append(getComplianceByResources()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateLocationNfsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubdirectory() != null)\r\n        sb.append(\"Subdirectory: \").append(getSubdirectory()).append(\",\");\r\n    if (getServerHostname() != null)\r\n        sb.append(\"ServerHostname: \").append(getServerHostname()).append(\",\");\r\n    if (getOnPremConfig() != null)\r\n        sb.append(\"OnPremConfig: \").append(getOnPremConfig()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.ConfirmPrivateVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.stopDataCollectionByAgentIds",
	"Comment": "instructs the specified agents or connectors to stop collecting data.",
	"Method": "StopDataCollectionByAgentIdsResult stopDataCollectionByAgentIds(StopDataCollectionByAgentIdsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStopDataCollectionByAgentIds(request);\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Service.getPartitionEndpoint",
	"Comment": "returns the region name if the service is enabled partition wide.",
	"Method": "String getPartitionEndpoint(){\r\n    return partitionEndpoint;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.S3Config.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBucketAccessRoleArn() != null)\r\n        sb.append(\"BucketAccessRoleArn: \").append(getBucketAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminAddUserToGroup",
	"Comment": "adds the specified user to the specified group.requires developer credentials.",
	"Method": "AdminAddUserToGroupResult adminAddUserToGroup(AdminAddUserToGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminAddUserToGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEndpointTypesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeSubnetGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetGroupNames() != null)\r\n        sb.append(\"SubnetGroupNames: \").append(getSubnetGroupNames()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceAsyncClient.describeSnapshotsAsync",
	"Comment": "simplified method form for invoking the describesnapshots operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync(DescribeSnapshotsRequest request,java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync,DescribeSnapshotsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeSnapshotsRequest, DescribeSnapshotsResult> asyncHandler,java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync,java.util.concurrent.Future<DescribeSnapshotsResult> describeSnapshotsAsync,com.amazonaws.handlers.AsyncHandler<DescribeSnapshotsRequest, DescribeSnapshotsResult> asyncHandler){\r\n    return describeSnapshotsAsync(new DescribeSnapshotsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.updateConditionalForwarder",
	"Comment": "updates a conditional forwarder that has been set up for your aws directory.",
	"Method": "UpdateConditionalForwarderResult updateConditionalForwarder(UpdateConditionalForwarderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateConditionalForwarder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerAnnotations.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getS3Uri() != null)\r\n        sb.append(\"S3Uri: \").append(getS3Uri());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeReplicationInstanceTaskLogs",
	"Comment": "returns information about the task logs for the specified task.",
	"Method": "DescribeReplicationInstanceTaskLogsResult describeReplicationInstanceTaskLogs(DescribeReplicationInstanceTaskLogsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeReplicationInstanceTaskLogs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeOrderableReplicationInstancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilderTest.syncClientBuilder",
	"Comment": "the sync client is tested less thoroughly then the async client primarily because the asyncclient exercises most of the same code paths so a bug introduced in the sync client buildershould be exposed via tests written against the async builder. this test is mainly foradditional coverage of the sync builder in case there is a regression specific to syncbuilders.",
	"Method": "void syncClientBuilder(){\r\n    final List<RequestHandler2> requestHandlers = createRequestHandlerList(new ConcreteRequestHandler(), new ConcreteRequestHandler());\r\n    final AWSCredentialsProvider credentials = mock(AWSCredentialsProvider.class);\r\n    final RequestMetricCollector metrics = mock(RequestMetricCollector.class);\r\n    AmazonConcreteClient client = new ConcreteSyncBuilder().withRegion(Regions.EU_CENTRAL_1).withClientConfiguration(new ClientConfiguration().withSocketTimeout(1234)).withCredentials(credentials).withMetricsCollector(metrics).withRequestHandlers(requestHandlers.toArray(new RequestHandler2[requestHandlers.size()])).build();\r\n    assertEquals(URI.create(\"https://mockprefix.eu-central-1.amazonaws.com\"), client.getEndpoint());\r\n    assertEquals(1234, client.getSyncParams().getClientConfiguration().getSocketTimeout());\r\n    assertEquals(requestHandlers, client.getSyncParams().getRequestHandlers());\r\n    assertEquals(credentials, client.getSyncParams().getCredentialsProvider());\r\n    assertEquals(metrics, client.getSyncParams().getRequestMetricCollector());\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeAccountAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountQuotas() != null)\r\n        sb.append(\"AccountQuotas: \").append(getAccountQuotas());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminUpdateAuthEventFeedback",
	"Comment": "provides feedback for an authentication event as to whether it was from a valid user. this feedback is used forimproving the risk evaluation decision for the user pool as part of amazon cognito advanced security.",
	"Method": "AdminUpdateAuthEventFeedbackResult adminUpdateAuthEventFeedback(AdminUpdateAuthEventFeedbackRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminUpdateAuthEventFeedback(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.updateRecords",
	"Comment": "posts updates to records and adds and deletes records for a dataset and user.the sync count in the record patch is your last known sync count for that record. the server will reject anupdaterecords request with a resourceconflictexception if you try to patch a record with a new value but a stalesync count.for example, if the sync count on the server is 5 for a key called highscore and you try and submit a newhighscore with sync count of 4, the request will be rejected. to obtain the current sync count for a record, calllistrecords. on a successful update of the record, the response returns the new sync count for that record. youshould present that sync count the next time you try to update that same record. when the record does not exist,specify the sync count as 0.this api can be called with temporary user credentials provided by cognito identity or with developercredentials.",
	"Method": "UpdateRecordsResult updateRecords(UpdateRecordsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateRecords(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.SecurityGroupMembership.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSecurityGroupIdentifier() != null)\r\n        sb.append(\"SecurityGroupIdentifier: \").append(getSecurityGroupIdentifier()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteIdentityProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazoncomprehendasync using the current builder configuration.",
	"Method": "AmazonComprehendAsync build(AwsAsyncClientParams params){\r\n    return new AmazonComprehendAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteVPCEConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AssociateConnectionWithLagRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.getOverriddenDate",
	"Comment": "returns a copy of date that overrides the signing date in the request.return null by default.",
	"Method": "Date getOverriddenDate(){\r\n    return overriddenDate == null ? null : new Date(overriddenDate.getTime());\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.model.DescribeReportDefinitionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReportDefinitions() != null)\r\n        sb.append(\"ReportDefinitions: \").append(getReportDefinitions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateNetworkProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getUplinkBandwidthBits() != null)\r\n        sb.append(\"UplinkBandwidthBits: \").append(getUplinkBandwidthBits()).append(\",\");\r\n    if (getDownlinkBandwidthBits() != null)\r\n        sb.append(\"DownlinkBandwidthBits: \").append(getDownlinkBandwidthBits()).append(\",\");\r\n    if (getUplinkDelayMs() != null)\r\n        sb.append(\"UplinkDelayMs: \").append(getUplinkDelayMs()).append(\",\");\r\n    if (getDownlinkDelayMs() != null)\r\n        sb.append(\"DownlinkDelayMs: \").append(getDownlinkDelayMs()).append(\",\");\r\n    if (getUplinkJitterMs() != null)\r\n        sb.append(\"UplinkJitterMs: \").append(getUplinkJitterMs()).append(\",\");\r\n    if (getDownlinkJitterMs() != null)\r\n        sb.append(\"DownlinkJitterMs: \").append(getDownlinkJitterMs()).append(\",\");\r\n    if (getUplinkLossPercent() != null)\r\n        sb.append(\"UplinkLossPercent: \").append(getUplinkLossPercent()).append(\",\");\r\n    if (getDownlinkLossPercent() != null)\r\n        sb.append(\"DownlinkLossPercent: \").append(getDownlinkLossPercent());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeDeliveryChannelStatus",
	"Comment": "returns the current status of the specified delivery channel. if a delivery channel is not specified, this actionreturns the current status of all delivery channels associated with the account.currently, you can specify only one delivery channel per region in your account.",
	"Method": "DescribeDeliveryChannelStatusResult describeDeliveryChannelStatus(DescribeDeliveryChannelStatusRequest request,DescribeDeliveryChannelStatusResult describeDeliveryChannelStatus){\r\n    return describeDeliveryChannelStatus(new DescribeDeliveryChannelStatusRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminListUserAuthEventsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthEvents() != null)\r\n        sb.append(\"AuthEvents: \").append(getAuthEvents()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.RouteFilterPrefix.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCidr() != null)\r\n        sb.append(\"Cidr: \").append(getCidr());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineAsyncClient.listPipelinesAsync",
	"Comment": "simplified method form for invoking the listpipelines operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync(ListPipelinesRequest request,java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync,ListPipelinesRequest request,com.amazonaws.handlers.AsyncHandler<ListPipelinesRequest, ListPipelinesResult> asyncHandler,java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync,java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync,com.amazonaws.handlers.AsyncHandler<ListPipelinesRequest, ListPipelinesResult> asyncHandler){\r\n    return listPipelinesAsync(new ListPipelinesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.CustomerAgentInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActiveAgents() != null)\r\n        sb.append(\"ActiveAgents: \").append(getActiveAgents()).append(\",\");\r\n    if (getHealthyAgents() != null)\r\n        sb.append(\"HealthyAgents: \").append(getHealthyAgents()).append(\",\");\r\n    if (getBlackListedAgents() != null)\r\n        sb.append(\"BlackListedAgents: \").append(getBlackListedAgents()).append(\",\");\r\n    if (getShutdownAgents() != null)\r\n        sb.append(\"ShutdownAgents: \").append(getShutdownAgents()).append(\",\");\r\n    if (getUnhealthyAgents() != null)\r\n        sb.append(\"UnhealthyAgents: \").append(getUnhealthyAgents()).append(\",\");\r\n    if (getTotalAgents() != null)\r\n        sb.append(\"TotalAgents: \").append(getTotalAgents()).append(\",\");\r\n    if (getUnknownAgents() != null)\r\n        sb.append(\"UnknownAgents: \").append(getUnknownAgents());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListTaskExecutionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ValidatePipelineDefinitionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getPipelineObjects() != null)\r\n        sb.append(\"PipelineObjects: \").append(getPipelineObjects()).append(\",\");\r\n    if (getParameterObjects() != null)\r\n        sb.append(\"ParameterObjects: \").append(getParameterObjects()).append(\",\");\r\n    if (getParameterValues() != null)\r\n        sb.append(\"ParameterValues: \").append(getParameterValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.PutPipelineDefinitionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getValidationErrors() != null)\r\n        sb.append(\"ValidationErrors: \").append(getValidationErrors()).append(\",\");\r\n    if (getValidationWarnings() != null)\r\n        sb.append(\"ValidationWarnings: \").append(getValidationWarnings()).append(\",\");\r\n    if (getErrored() != null)\r\n        sb.append(\"Errored: \").append(getErrored());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserRoutingProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoutingProfileId() != null)\r\n        sb.append(\"RoutingProfileId: \").append(getRoutingProfileId()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ElasticsearchSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn()).append(\",\");\r\n    if (getEndpointUri() != null)\r\n        sb.append(\"EndpointUri: \").append(getEndpointUri()).append(\",\");\r\n    if (getFullLoadErrorPercentage() != null)\r\n        sb.append(\"FullLoadErrorPercentage: \").append(getFullLoadErrorPercentage()).append(\",\");\r\n    if (getErrorRetryDuration() != null)\r\n        sb.append(\"ErrorRetryDuration: \").append(getErrorRetryDuration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerClient.getCostForecast",
	"Comment": "retrieves a forecast for how much amazon web services predicts that you will spend over the forecast time periodthat you select, based on your past costs.",
	"Method": "GetCostForecastResult getCostForecast(GetCostForecastRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetCostForecast(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DescribeObjectsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getObjectIds() != null)\r\n        sb.append(\"ObjectIds: \").append(getObjectIds()).append(\",\");\r\n    if (getEvaluateExpressions() != null)\r\n        sb.append(\"EvaluateExpressions: \").append(getEvaluateExpressions()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.StartConfigRulesEvaluationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleNames() != null)\r\n        sb.append(\"ConfigRuleNames: \").append(getConfigRuleNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.Source.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwner() != null)\r\n        sb.append(\"Owner: \").append(getOwner()).append(\",\");\r\n    if (getSourceIdentifier() != null)\r\n        sb.append(\"SourceIdentifier: \").append(getSourceIdentifier()).append(\",\");\r\n    if (getSourceDetails() != null)\r\n        sb.append(\"SourceDetails: \").append(getSourceDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.CreateRule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterval() != null)\r\n        sb.append(\"Interval: \").append(getInterval()).append(\",\");\r\n    if (getIntervalUnit() != null)\r\n        sb.append(\"IntervalUnit: \").append(getIntervalUnit()).append(\",\");\r\n    if (getTimes() != null)\r\n        sb.append(\"Times: \").append(getTimes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GroupDefinition.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.monitoring.ProfileCsmConfigurationProvider.getProfilesConfigFile",
	"Comment": "profilesconfigfile immediately loads the profiles at construction time",
	"Method": "ProfilesConfigFile getProfilesConfigFile(){\r\n    if (configFile == null) {\r\n        synchronized (this) {\r\n            if (configFile == null) {\r\n                try {\r\n                    configFile = new ProfilesConfigFile(configFileLocationProvider.getLocation());\r\n                } catch (Exception e) {\r\n                    throw new SdkClientException(\"Unable to load config file\", e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return configFile;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.EventRiskType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRiskDecision() != null)\r\n        sb.append(\"RiskDecision: \").append(getRiskDecision()).append(\",\");\r\n    if (getRiskLevel() != null)\r\n        sb.append(\"RiskLevel: \").append(getRiskLevel());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.CreateParameterGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroup() != null)\r\n        sb.append(\"ParameterGroup: \").append(getParameterGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DeleteSubnetGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetGroupName() != null)\r\n        sb.append(\"SubnetGroupName: \").append(getSubnetGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UnshareDirectoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getUnshareTarget() != null)\r\n        sb.append(\"UnshareTarget: \").append(getUnshareTarget());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.BulkPublishRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidentity.model.UpdateIdentityPoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityPoolName() != null)\r\n        sb.append(\"IdentityPoolName: \").append(getIdentityPoolName()).append(\",\");\r\n    if (getAllowUnauthenticatedIdentities() != null)\r\n        sb.append(\"AllowUnauthenticatedIdentities: \").append(getAllowUnauthenticatedIdentities()).append(\",\");\r\n    if (getSupportedLoginProviders() != null)\r\n        sb.append(\"SupportedLoginProviders: \").append(getSupportedLoginProviders()).append(\",\");\r\n    if (getDeveloperProviderName() != null)\r\n        sb.append(\"DeveloperProviderName: \").append(getDeveloperProviderName()).append(\",\");\r\n    if (getOpenIdConnectProviderARNs() != null)\r\n        sb.append(\"OpenIdConnectProviderARNs: \").append(getOpenIdConnectProviderARNs()).append(\",\");\r\n    if (getCognitoIdentityProviders() != null)\r\n        sb.append(\"CognitoIdentityProviders: \").append(getCognitoIdentityProviders()).append(\",\");\r\n    if (getSamlProviderARNs() != null)\r\n        sb.append(\"SamlProviderARNs: \").append(getSamlProviderARNs());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateMicrosoftADRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getShortName() != null)\r\n        sb.append(\"ShortName: \").append(getShortName()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getVpcSettings() != null)\r\n        sb.append(\"VpcSettings: \").append(getVpcSettings()).append(\",\");\r\n    if (getEdition() != null)\r\n        sb.append(\"Edition: \").append(getEdition());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListDevicePoolsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevicePools() != null)\r\n        sb.append(\"DevicePools: \").append(getDevicePools()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.OrderableReplicationInstance.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEngineVersion() != null)\r\n        sb.append(\"EngineVersion: \").append(getEngineVersion()).append(\",\");\r\n    if (getReplicationInstanceClass() != null)\r\n        sb.append(\"ReplicationInstanceClass: \").append(getReplicationInstanceClass()).append(\",\");\r\n    if (getStorageType() != null)\r\n        sb.append(\"StorageType: \").append(getStorageType()).append(\",\");\r\n    if (getMinAllocatedStorage() != null)\r\n        sb.append(\"MinAllocatedStorage: \").append(getMinAllocatedStorage()).append(\",\");\r\n    if (getMaxAllocatedStorage() != null)\r\n        sb.append(\"MaxAllocatedStorage: \").append(getMaxAllocatedStorage()).append(\",\");\r\n    if (getDefaultAllocatedStorage() != null)\r\n        sb.append(\"DefaultAllocatedStorage: \").append(getDefaultAllocatedStorage()).append(\",\");\r\n    if (getIncludedAllocatedStorage() != null)\r\n        sb.append(\"IncludedAllocatedStorage: \").append(getIncludedAllocatedStorage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.CreateClusterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCluster() != null)\r\n        sb.append(\"Cluster: \").append(getCluster());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminRespondToAuthChallenge",
	"Comment": "responds to an authentication challenge, as an administrator.requires developer credentials.",
	"Method": "AdminRespondToAuthChallengeResult adminRespondToAuthChallenge(AdminRespondToAuthChallengeRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminRespondToAuthChallenge(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteInterconnectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectId() != null)\r\n        sb.append(\"InterconnectId: \").append(getInterconnectId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUserSettingsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetNetworkProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNetworkProfile() != null)\r\n        sb.append(\"NetworkProfile: \").append(getNetworkProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ScheduleRunTest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getTestPackageArn() != null)\r\n        sb.append(\"TestPackageArn: \").append(getTestPackageArn()).append(\",\");\r\n    if (getTestSpecArn() != null)\r\n        sb.append(\"TestSpecArn: \").append(getTestSpecArn()).append(\",\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getParameters() != null)\r\n        sb.append(\"Parameters: \").append(getParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetRiskConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRiskConfiguration() != null)\r\n        sb.append(\"RiskConfiguration: \").append(getRiskConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.getComplianceSummaryByConfigRuleAsync",
	"Comment": "simplified method form for invoking the getcompliancesummarybyconfigrule operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync(GetComplianceSummaryByConfigRuleRequest request,java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync,GetComplianceSummaryByConfigRuleRequest request,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByConfigRuleRequest, GetComplianceSummaryByConfigRuleResult> asyncHandler,java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync,java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByConfigRuleRequest, GetComplianceSummaryByConfigRuleResult> asyncHandler){\r\n    return getComplianceSummaryByConfigRuleAsync(new GetComplianceSummaryByConfigRuleRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigRulesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRules() != null)\r\n        sb.append(\"ConfigRules: \").append(getConfigRules()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceDetailsByConfigRuleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getComplianceTypes() != null)\r\n        sb.append(\"ComplianceTypes: \").append(getComplianceTypes()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.SetIdentityPoolConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getPushSync() != null)\r\n        sb.append(\"PushSync: \").append(getPushSync()).append(\",\");\r\n    if (getCognitoStreams() != null)\r\n        sb.append(\"CognitoStreams: \").append(getCognitoStreams());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.getComplianceDetailsByConfigRule",
	"Comment": "returns the evaluation results for the specified aws config rule. the results indicate which aws resources wereevaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule.",
	"Method": "GetComplianceDetailsByConfigRuleResult getComplianceDetailsByConfigRule(GetComplianceDetailsByConfigRuleRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetComplianceDetailsByConfigRule(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.Record.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getSyncCount() != null)\r\n        sb.append(\"SyncCount: \").append(getSyncCount()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getLastModifiedBy() != null)\r\n        sb.append(\"LastModifiedBy: \").append(getLastModifiedBy()).append(\",\");\r\n    if (getDeviceLastModifiedDate() != null)\r\n        sb.append(\"DeviceLastModifiedDate: \").append(getDeviceLastModifiedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.Options.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVerifyMode() != null)\r\n        sb.append(\"VerifyMode: \").append(getVerifyMode()).append(\",\");\r\n    if (getAtime() != null)\r\n        sb.append(\"Atime: \").append(getAtime()).append(\",\");\r\n    if (getMtime() != null)\r\n        sb.append(\"Mtime: \").append(getMtime()).append(\",\");\r\n    if (getUid() != null)\r\n        sb.append(\"Uid: \").append(getUid()).append(\",\");\r\n    if (getGid() != null)\r\n        sb.append(\"Gid: \").append(getGid()).append(\",\");\r\n    if (getPreserveDeletedFiles() != null)\r\n        sb.append(\"PreserveDeletedFiles: \").append(getPreserveDeletedFiles()).append(\",\");\r\n    if (getPreserveDevices() != null)\r\n        sb.append(\"PreserveDevices: \").append(getPreserveDevices()).append(\",\");\r\n    if (getPosixPermissions() != null)\r\n        sb.append(\"PosixPermissions: \").append(getPosixPermissions()).append(\",\");\r\n    if (getBytesPerSecond() != null)\r\n        sb.append(\"BytesPerSecond: \").append(getBytesPerSecond());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteVPCEConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of datapipelineasync using the current builder configuration.",
	"Method": "DataPipelineAsync build(AwsAsyncClientParams params){\r\n    return new DataPipelineAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.reportTaskProgress",
	"Comment": "task runners call reporttaskprogress when assigned a task to acknowledge that it has the task. ifthe web service does not receive this acknowledgement within 2 minutes, it assigns the task in a subsequentpollfortask call. after this initial acknowledgement, the task runner only needs to report progress every15 minutes to maintain its ownership of the task. you can change this reporting time from 15 minutes byspecifying a reportprogresstimeout field in your pipeline.if a task runner does not report its status after 5 minutes, aws data pipeline assumes that the task runner isunable to process the task and reassigns the task in a subsequent response to pollfortask. task runnersshould call reporttaskprogress every 60 seconds.",
	"Method": "ReportTaskProgressResult reportTaskProgress(ReportTaskProgressRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeReportTaskProgress(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.AvailabilityZone.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getCurrentParentElement",
	"Comment": "returns the name of the json field that is the nearest parent of thecurrent context.returns null by default.",
	"Method": "String getCurrentParentElement(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.ConfirmConnectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateVPCEConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpceConfigurationName() != null)\r\n        sb.append(\"VpceConfigurationName: \").append(getVpceConfigurationName()).append(\",\");\r\n    if (getVpceServiceName() != null)\r\n        sb.append(\"VpceServiceName: \").append(getVpceServiceName()).append(\",\");\r\n    if (getServiceDnsName() != null)\r\n        sb.append(\"ServiceDnsName: \").append(getServiceDnsName()).append(\",\");\r\n    if (getVpceConfigurationDescription() != null)\r\n        sb.append(\"VpceConfigurationDescription: \").append(getVpceConfigurationDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.UntagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.RequestClientOptions.createUserAgentMarkerString",
	"Comment": "appends the given client marker string to the existing one and returns it.",
	"Method": "String createUserAgentMarkerString(String marker,String userAgent){\r\n    return marker.contains(userAgent) ? marker : marker + \" \" + userAgent;\r\n}"
}, {
	"Path": "com.amazonaws.protocol.json.SdkJsonGenerator.close",
	"Comment": "closes the generator and flushes to write. must be called when finished writing jsoncontent.",
	"Method": "void close(){\r\n    try {\r\n        generator.close();\r\n    } catch (IOException e) {\r\n        throw new JsonGenerationException(e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UnshareDirectoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedDirectoryId() != null)\r\n        sb.append(\"SharedDirectoryId: \").append(getSharedDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyReplicationInstanceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getAllocatedStorage() != null)\r\n        sb.append(\"AllocatedStorage: \").append(getAllocatedStorage()).append(\",\");\r\n    if (getApplyImmediately() != null)\r\n        sb.append(\"ApplyImmediately: \").append(getApplyImmediately()).append(\",\");\r\n    if (getReplicationInstanceClass() != null)\r\n        sb.append(\"ReplicationInstanceClass: \").append(getReplicationInstanceClass()).append(\",\");\r\n    if (getVpcSecurityGroupIds() != null)\r\n        sb.append(\"VpcSecurityGroupIds: \").append(getVpcSecurityGroupIds()).append(\",\");\r\n    if (getPreferredMaintenanceWindow() != null)\r\n        sb.append(\"PreferredMaintenanceWindow: \").append(getPreferredMaintenanceWindow()).append(\",\");\r\n    if (getMultiAZ() != null)\r\n        sb.append(\"MultiAZ: \").append(getMultiAZ()).append(\",\");\r\n    if (getEngineVersion() != null)\r\n        sb.append(\"EngineVersion: \").append(getEngineVersion()).append(\",\");\r\n    if (getAllowMajorVersionUpgrade() != null)\r\n        sb.append(\"AllowMajorVersionUpgrade: \").append(getAllowMajorVersionUpgrade()).append(\",\");\r\n    if (getAutoMinorVersionUpgrade() != null)\r\n        sb.append(\"AutoMinorVersionUpgrade: \").append(getAutoMinorVersionUpgrade()).append(\",\");\r\n    if (getReplicationInstanceIdentifier() != null)\r\n        sb.append(\"ReplicationInstanceIdentifier: \").append(getReplicationInstanceIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.AggregateComplianceCount.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getComplianceSummary() != null)\r\n        sb.append(\"ComplianceSummary: \").append(getComplianceSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AddCustomAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getCustomAttributes() != null)\r\n        sb.append(\"CustomAttributes: \").append(getCustomAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetVPCEConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DirectoryConnectSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpcId() != null)\r\n        sb.append(\"VpcId: \").append(getVpcId()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds()).append(\",\");\r\n    if (getCustomerDnsIps() != null)\r\n        sb.append(\"CustomerDnsIps: \").append(getCustomerDnsIps()).append(\",\");\r\n    if (getCustomerUserName() != null)\r\n        sb.append(\"CustomerUserName: \").append(getCustomerUserName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeDocumentClassificationJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateConditionalForwarderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJob() != null)\r\n        sb.append(\"Job: \").append(getJob());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteConditionalForwarderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeComplianceByConfigRuleAsync",
	"Comment": "simplified method form for invoking the describecompliancebyconfigrule operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync(DescribeComplianceByConfigRuleRequest request,java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync,DescribeComplianceByConfigRuleRequest request,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByConfigRuleRequest, DescribeComplianceByConfigRuleResult> asyncHandler,java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync,java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByConfigRuleRequest, DescribeComplianceByConfigRuleResult> asyncHandler){\r\n    return describeComplianceByConfigRuleAsync(new DescribeComplianceByConfigRuleRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminSetUserSettingsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deliverConfigSnapshot",
	"Comment": "schedules delivery of a configuration snapshot to the amazon s3 bucket in the specified delivery channel. afterthe delivery has started, aws config sends the following notifications using an amazon sns topic that you havespecified.notification of the start of the delivery.notification of the completion of the delivery, if the delivery was successfully completed.notification of delivery failure, if the delivery failed.",
	"Method": "DeliverConfigSnapshotResult deliverConfigSnapshot(DeliverConfigSnapshotRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeliverConfigSnapshot(request);\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.createResponse",
	"Comment": "creates and initializes an httpresponse object suitable to be passed to an http responsehandler object.",
	"Method": "HttpResponse createResponse(Request<?> request,HttpRequestBase method,org.apache.http.HttpResponse apacheHttpResponse,HttpContext context){\r\n    HttpResponse httpResponse = new HttpResponse(request, method, context);\r\n    if (apacheHttpResponse.getEntity() != null) {\r\n        httpResponse.setContent(apacheHttpResponse.getEntity().getContent());\r\n    }\r\n    httpResponse.setStatusCode(apacheHttpResponse.getStatusLine().getStatusCode());\r\n    httpResponse.setStatusText(apacheHttpResponse.getStatusLine().getReasonPhrase());\r\n    for (Header header : apacheHttpResponse.getAllHeaders()) {\r\n        httpResponse.addHeader(header.getName(), header.getValue());\r\n    }\r\n    return httpResponse;\r\n}"
}, {
	"Path": "com.amazonaws.waiters.WaiterImpl.run",
	"Comment": "polls synchronously until it is determined that the resourcetransitioned into the desired state or not.",
	"Method": "void run(WaiterParameters<Input> waiterParameters){\r\n    ValidationUtils.assertNotNull(waiterParameters, \"waiterParameters\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Input request = (Input) ValidationUtils.assertNotNull(waiterParameters.getRequest(), \"request\").clone();\r\n    request.getRequestClientOptions().appendUserAgent(\"waiter-request\");\r\n    WaiterExecution<Input, Output> waiterExecution = new WaiterExecutionBuilder<Input, Output>().withRequest(request).withPollingStrategy(waiterParameters.getPollingStrategy() != null ? waiterParameters.getPollingStrategy() : defaultPollingStrategy).withAcceptors(acceptors).withSdkFunction(sdkFunction).build();\r\n    waiterExecution.pollResource();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ParameterObject.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.EC2CredentialsFetcher.needsToLoadCredentials",
	"Comment": "returns true if credentials are null, credentials are within expiration orif the last attempt to refresh credentials is beyond the refresh threshold.",
	"Method": "boolean needsToLoadCredentials(){\r\n    if (credentials == null)\r\n        return true;\r\n    if (credentialsExpiration != null) {\r\n        if (isWithinExpirationThreshold())\r\n            return true;\r\n    }\r\n    if (lastInstanceProfileCheck != null) {\r\n        if (isPastRefreshThreshold())\r\n            return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.GetCurrentMetricDataResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMetricResults() != null)\r\n        sb.append(\"MetricResults: \").append(getMetricResults()).append(\",\");\r\n    if (getDataSnapshotTime() != null)\r\n        sb.append(\"DataSnapshotTime: \").append(getDataSnapshotTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.SyntaxToken.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTokenId() != null)\r\n        sb.append(\"TokenId: \").append(getTokenId()).append(\",\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getBeginOffset() != null)\r\n        sb.append(\"BeginOffset: \").append(getBeginOffset()).append(\",\");\r\n    if (getEndOffset() != null)\r\n        sb.append(\"EndOffset: \").append(getEndOffset()).append(\",\");\r\n    if (getPartOfSpeech() != null)\r\n        sb.append(\"PartOfSpeech: \").append(getPartOfSpeech());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartKeyPhrasesDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.SignerFactory.createSigner",
	"Comment": "create an instance of the given signer type and initialize it with thegiven parameters.",
	"Method": "Signer createSigner(String signerType,String serviceName,Signer createSigner,String signerType,SignerParams params,Signer createSigner,String signerType){\r\n    Class<? extends Signer> signerClass = SIGNERS.get(signerType);\r\n    Signer signer;\r\n    try {\r\n        signer = signerClass.newInstance();\r\n    } catch (InstantiationException ex) {\r\n        throw new IllegalStateException(\"Cannot create an instance of \" + signerClass.getName(), ex);\r\n    } catch (IllegalAccessException ex) {\r\n        throw new IllegalStateException(\"Cannot create an instance of \" + signerClass.getName(), ex);\r\n    }\r\n    return signer;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.StartTaskExecutionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskExecutionArn() != null)\r\n        sb.append(\"TaskExecutionArn: \").append(getTaskExecutionArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.SdkInputStream.abortIfNeeded",
	"Comment": "aborts with subclass specific abortion logic executed if needed.note the interrupted status of the thread is cleared by this method.",
	"Method": "void abortIfNeeded(){\r\n    if (shouldAbort()) {\r\n        try {\r\n            abort();\r\n        } catch (IOException e) {\r\n            LogFactory.getLog(getClass()).debug(\"FYI\", e);\r\n        }\r\n        throw new AbortedException();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.util.StringUtils.fromDouble",
	"Comment": "returns the string representation of the specified double.",
	"Method": "String fromDouble(Double d){\r\n    return Double.toString(d);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeEntityRecognizer",
	"Comment": "provides details about an entity recognizer including status, s3 buckets containing training data, recognizermetadata, metrics, and so on.",
	"Method": "DescribeEntityRecognizerResult describeEntityRecognizer(DescribeEntityRecognizerRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEntityRecognizer(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.refreshSchemas",
	"Comment": "populates the schema for the specified endpoint. this is an asynchronous operation and can take several minutes.you can check the status of this operation by calling the describerefreshschemasstatus operation.",
	"Method": "RefreshSchemasResult refreshSchemas(RefreshSchemasRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeRefreshSchemas(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserSecurityProfilesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSecurityProfileIds() != null)\r\n        sb.append(\"SecurityProfileIds: \").append(getSecurityProfileIds()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminResetUserPasswordResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetDimensionValuesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSearchString() != null)\r\n        sb.append(\"SearchString: \").append(getSearchString()).append(\",\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getDimension() != null)\r\n        sb.append(\"Dimension: \").append(getDimension()).append(\",\");\r\n    if (getContext() != null)\r\n        sb.append(\"Context: \").append(getContext()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testRoleProfileWithEmptySourceName",
	"Comment": "tests loading a profile that assumes a role, but the source profile does not exist.",
	"Method": "void testRoleProfileWithEmptySourceName(){\r\n    checkDeferredException(ProfileResourceLoader.roleProfileWithEmptySourceName(), AmazonClientException.class, \"test\", \"Should throw an exception as there is a role profile with an empty source role\");\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.AddTagsToResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserPoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPoolName() != null)\r\n        sb.append(\"PoolName: \").append(getPoolName()).append(\",\");\r\n    if (getPolicies() != null)\r\n        sb.append(\"Policies: \").append(getPolicies()).append(\",\");\r\n    if (getLambdaConfig() != null)\r\n        sb.append(\"LambdaConfig: \").append(getLambdaConfig()).append(\",\");\r\n    if (getAutoVerifiedAttributes() != null)\r\n        sb.append(\"AutoVerifiedAttributes: \").append(getAutoVerifiedAttributes()).append(\",\");\r\n    if (getAliasAttributes() != null)\r\n        sb.append(\"AliasAttributes: \").append(getAliasAttributes()).append(\",\");\r\n    if (getUsernameAttributes() != null)\r\n        sb.append(\"UsernameAttributes: \").append(getUsernameAttributes()).append(\",\");\r\n    if (getSmsVerificationMessage() != null)\r\n        sb.append(\"SmsVerificationMessage: \").append(getSmsVerificationMessage()).append(\",\");\r\n    if (getEmailVerificationMessage() != null)\r\n        sb.append(\"EmailVerificationMessage: \").append(getEmailVerificationMessage()).append(\",\");\r\n    if (getEmailVerificationSubject() != null)\r\n        sb.append(\"EmailVerificationSubject: \").append(getEmailVerificationSubject()).append(\",\");\r\n    if (getVerificationMessageTemplate() != null)\r\n        sb.append(\"VerificationMessageTemplate: \").append(getVerificationMessageTemplate()).append(\",\");\r\n    if (getSmsAuthenticationMessage() != null)\r\n        sb.append(\"SmsAuthenticationMessage: \").append(getSmsAuthenticationMessage()).append(\",\");\r\n    if (getMfaConfiguration() != null)\r\n        sb.append(\"MfaConfiguration: \").append(getMfaConfiguration()).append(\",\");\r\n    if (getDeviceConfiguration() != null)\r\n        sb.append(\"DeviceConfiguration: \").append(getDeviceConfiguration()).append(\",\");\r\n    if (getEmailConfiguration() != null)\r\n        sb.append(\"EmailConfiguration: \").append(getEmailConfiguration()).append(\",\");\r\n    if (getSmsConfiguration() != null)\r\n        sb.append(\"SmsConfiguration: \").append(getSmsConfiguration()).append(\",\");\r\n    if (getUserPoolTags() != null)\r\n        sb.append(\"UserPoolTags: \").append(getUserPoolTags()).append(\",\");\r\n    if (getAdminCreateUserConfig() != null)\r\n        sb.append(\"AdminCreateUserConfig: \").append(getAdminCreateUserConfig()).append(\",\");\r\n    if (getSchema() != null)\r\n        sb.append(\"Schema: \").append(getSchema()).append(\",\");\r\n    if (getUserPoolAddOns() != null)\r\n        sb.append(\"UserPoolAddOns: \").append(getUserPoolAddOns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ShareTarget.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.JsonErrorResponseHandlerTest.handle_UnmarshallerReturnsException_WithCaseInsensitiveRequestId",
	"Comment": "headers are case insensitive so the request id should still be parsed in this test",
	"Method": "void handle_UnmarshallerReturnsException_WithCaseInsensitiveRequestId(){\r\n    httpResponse.setStatusCode(500);\r\n    httpResponse.addHeader(StringUtils.upperCase(HttpResponseHandler.X_AMZN_REQUEST_ID_HEADER), \"1234\");\r\n    expectUnmarshallerMatches();\r\n    when(unmarshaller.unmarshall((JsonNode) anyObject())).thenReturn(new CustomException(\"error\"));\r\n    AmazonServiceException ase = responseHandler.handle(httpResponse);\r\n    assertEquals(\"1234\", ase.getRequestId());\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteConfigurationRecorderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUserPoolMfaConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getSmsMfaConfiguration() != null)\r\n        sb.append(\"SmsMfaConfiguration: \").append(getSmsMfaConfiguration()).append(\",\");\r\n    if (getSoftwareTokenMfaConfiguration() != null)\r\n        sb.append(\"SoftwareTokenMfaConfiguration: \").append(getSoftwareTokenMfaConfiguration()).append(\",\");\r\n    if (getMfaConfiguration() != null)\r\n        sb.append(\"MfaConfiguration: \").append(getMfaConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.createReplicationTask",
	"Comment": "creates a replication task using the specified parameters.",
	"Method": "CreateReplicationTaskResult createReplicationTask(CreateReplicationTaskRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateReplicationTask(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.listSecurityProfiles",
	"Comment": "returns an array of securityprofilesummary objects that contain information about the security profiles in yourinstance, including the arn, id, and name of the security profile.",
	"Method": "ListSecurityProfilesResult listSecurityProfiles(ListSecurityProfilesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListSecurityProfiles(request);\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.getProxyAuthenticationMethods",
	"Comment": "returns the list of authentication methods that should be used when authenticating against an http proxy, in the order theyshould be attempted.",
	"Method": "List<ProxyAuthenticationMethod> getProxyAuthenticationMethods(){\r\n    return this.proxyAuthenticationMethods;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateConfigRuleComplianceSummaryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupByKey() != null)\r\n        sb.append(\"GroupByKey: \").append(getGroupByKey()).append(\",\");\r\n    if (getAggregateComplianceCounts() != null)\r\n        sb.append(\"AggregateComplianceCounts: \").append(getAggregateComplianceCounts()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteReplicationSubnetGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.describeUser",
	"Comment": "returns a user object that contains information about the user account specified by theuserid.",
	"Method": "DescribeUserResult describeUser(DescribeUserRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeUser(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Job.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getCreated() != null)\r\n        sb.append(\"Created: \").append(getCreated()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getResult() != null)\r\n        sb.append(\"Result: \").append(getResult()).append(\",\");\r\n    if (getStarted() != null)\r\n        sb.append(\"Started: \").append(getStarted()).append(\",\");\r\n    if (getStopped() != null)\r\n        sb.append(\"Stopped: \").append(getStopped()).append(\",\");\r\n    if (getCounters() != null)\r\n        sb.append(\"Counters: \").append(getCounters()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getDevice() != null)\r\n        sb.append(\"Device: \").append(getDevice()).append(\",\");\r\n    if (getInstanceArn() != null)\r\n        sb.append(\"InstanceArn: \").append(getInstanceArn()).append(\",\");\r\n    if (getDeviceMinutes() != null)\r\n        sb.append(\"DeviceMinutes: \").append(getDeviceMinutes()).append(\",\");\r\n    if (getVideoEndpoint() != null)\r\n        sb.append(\"VideoEndpoint: \").append(getVideoEndpoint()).append(\",\");\r\n    if (getVideoCapture() != null)\r\n        sb.append(\"VideoCapture: \").append(getVideoCapture());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeLocationS3Request.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deleteConfigRule",
	"Comment": "deletes the specified aws config rule and all of its evaluation results.aws config sets the state of a rule to deleting until the deletion is complete. you cannot update arule while it is in this state. if you make a putconfigrule or deleteconfigrule requestfor the rule, you will receive a resourceinuseexception.you can check the state of a rule by using the describeconfigrules request.",
	"Method": "DeleteConfigRuleResult deleteConfigRule(DeleteConfigRuleRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteConfigRule(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ReservationPurchaseRecommendation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountScope() != null)\r\n        sb.append(\"AccountScope: \").append(getAccountScope()).append(\",\");\r\n    if (getLookbackPeriodInDays() != null)\r\n        sb.append(\"LookbackPeriodInDays: \").append(getLookbackPeriodInDays()).append(\",\");\r\n    if (getTermInYears() != null)\r\n        sb.append(\"TermInYears: \").append(getTermInYears()).append(\",\");\r\n    if (getPaymentOption() != null)\r\n        sb.append(\"PaymentOption: \").append(getPaymentOption()).append(\",\");\r\n    if (getServiceSpecification() != null)\r\n        sb.append(\"ServiceSpecification: \").append(getServiceSpecification()).append(\",\");\r\n    if (getRecommendationDetails() != null)\r\n        sb.append(\"RecommendationDetails: \").append(getRecommendationDetails()).append(\",\");\r\n    if (getRecommendationSummary() != null)\r\n        sb.append(\"RecommendationSummary: \").append(getRecommendationSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.allocatePrivateVirtualInterface",
	"Comment": "provisions a private virtual interface to be owned by the specified aws account.virtual interfaces created using this action must be confirmed by the owner usingconfirmprivatevirtualinterface. until then, the virtual interface is in the confirming stateand is not available to handle traffic.",
	"Method": "AllocatePrivateVirtualInterfaceResult allocatePrivateVirtualInterface(AllocatePrivateVirtualInterfaceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAllocatePrivateVirtualInterface(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminListUserAuthEventsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.modifyEventSubscription",
	"Comment": "modifies an existing aws dms event notification subscription.",
	"Method": "ModifyEventSubscriptionResult modifyEventSubscription(ModifyEventSubscriptionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeModifyEventSubscription(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.describeUserHierarchyGroup",
	"Comment": "returns a hierarchygroup object that includes information about a hierarchy group in your instance.",
	"Method": "DescribeUserHierarchyGroupResult describeUserHierarchyGroup(DescribeUserHierarchyGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeUserHierarchyGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeviceSelectionConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxDevices() != null)\r\n        sb.append(\"MaxDevices: \").append(getMaxDevices());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DirectConnectGatewayAssociation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getVirtualGatewayRegion() != null)\r\n        sb.append(\"VirtualGatewayRegion: \").append(getVirtualGatewayRegion()).append(\",\");\r\n    if (getVirtualGatewayOwnerAccount() != null)\r\n        sb.append(\"VirtualGatewayOwnerAccount: \").append(getVirtualGatewayOwnerAccount()).append(\",\");\r\n    if (getAssociationState() != null)\r\n        sb.append(\"AssociationState: \").append(getAssociationState()).append(\",\");\r\n    if (getStateChangeError() != null)\r\n        sb.append(\"StateChangeError: \").append(getStateChangeError());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.Interconnect.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectId() != null)\r\n        sb.append(\"InterconnectId: \").append(getInterconnectId()).append(\",\");\r\n    if (getInterconnectName() != null)\r\n        sb.append(\"InterconnectName: \").append(getInterconnectName()).append(\",\");\r\n    if (getInterconnectState() != null)\r\n        sb.append(\"InterconnectState: \").append(getInterconnectState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutConfigurationAggregatorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregator() != null)\r\n        sb.append(\"ConfigurationAggregator: \").append(getConfigurationAggregator());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setDisableHostPrefixInjection",
	"Comment": "sets the configuration option to disable the host prefix injection.the hostprefix template is specified in the service model and is used by the sdk to modify the endpointthe request is sent to. host prefix injection is enabled by default. this option can be set to disable the behavior.",
	"Method": "void setDisableHostPrefixInjection(boolean disableHostPrefixInjection){\r\n    this.disableHostPrefixInjection = disableHostPrefixInjection;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserPoolDescriptionType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getLambdaConfig() != null)\r\n        sb.append(\"LambdaConfig: \").append(getLambdaConfig()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreatePrivateVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceType() != null)\r\n        sb.append(\"VirtualInterfaceType: \").append(getVirtualInterfaceType()).append(\",\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState()).append(\",\");\r\n    if (getCustomerRouterConfig() != null)\r\n        sb.append(\"CustomerRouterConfig: \").append(getCustomerRouterConfig()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes()).append(\",\");\r\n    if (getBgpPeers() != null)\r\n        sb.append(\"BgpPeers: \").append(getBgpPeers()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilder.getCredentials",
	"Comment": "gets the awscredentialsprovider currently configured in the builder.",
	"Method": "AWSCredentialsProvider getCredentials(){\r\n    return this.credentials;\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Resource.withIsNotType",
	"Comment": "sets whether this resource is a notresource, which explicitly matches everything except the specified listof resources. note that statements must include either a resource or a notresource element",
	"Method": "Resource withIsNotType(boolean isNotType){\r\n    this.isNotType = isNotType;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.deleteSubnetGroup",
	"Comment": "deletes a subnet group.you cannot delete a subnet group if it is associated with any dax clusters.",
	"Method": "DeleteSubnetGroupResult deleteSubnetGroup(DeleteSubnetGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteSubnetGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeOrderableReplicationInstancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOrderableReplicationInstances() != null)\r\n        sb.append(\"OrderableReplicationInstances: \").append(getOrderableReplicationInstances()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeComplianceByConfigRuleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComplianceByConfigRules() != null)\r\n        sb.append(\"ComplianceByConfigRules: \").append(getComplianceByConfigRules()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.Attribute.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getScore() != null)\r\n        sb.append(\"Score: \").append(getScore()).append(\",\");\r\n    if (getRelationshipScore() != null)\r\n        sb.append(\"RelationshipScore: \").append(getRelationshipScore()).append(\",\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getBeginOffset() != null)\r\n        sb.append(\"BeginOffset: \").append(getBeginOffset()).append(\",\");\r\n    if (getEndOffset() != null)\r\n        sb.append(\"EndOffset: \").append(getEndOffset()).append(\",\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getTraits() != null)\r\n        sb.append(\"Traits: \").append(getTraits());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteRunResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.SourceDetail.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventSource() != null)\r\n        sb.append(\"EventSource: \").append(getEventSource()).append(\",\");\r\n    if (getMessageType() != null)\r\n        sb.append(\"MessageType: \").append(getMessageType()).append(\",\");\r\n    if (getMaximumExecutionFrequency() != null)\r\n        sb.append(\"MaximumExecutionFrequency: \").append(getMaximumExecutionFrequency());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.internal.AWS4SignerRequestParams.getFormattedSigningDateTime",
	"Comment": "returns the formatted date and time of the signing date in utc zone.",
	"Method": "String getFormattedSigningDateTime(){\r\n    return formattedSigningDateTime;\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtilsTest.readResouceNonJsonErrorBody",
	"Comment": "when server returns a status code other than 200 and 404and error body message is not in json format,the test throws amazonserviceexception.",
	"Method": "void readResouceNonJsonErrorBody(){\r\n    generateStub(500, \"Non Json error body\");\r\n    try {\r\n        ec2CredentialsUtils.readResource(endpoint);\r\n        fail(\"Expected AmazonServiceException\");\r\n    } catch (AmazonServiceException ase) {\r\n        assertEquals(500, ase.getStatusCode());\r\n        assertNotNull(ase.getErrorMessage());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetResourceConfigHistoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getLaterTime() != null)\r\n        sb.append(\"LaterTime: \").append(getLaterTime()).append(\",\");\r\n    if (getEarlierTime() != null)\r\n        sb.append(\"EarlierTime: \").append(getEarlierTime()).append(\",\");\r\n    if (getChronologicalOrder() != null)\r\n        sb.append(\"ChronologicalOrder: \").append(getChronologicalOrder()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.AggregateResourceIdentifier.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceAccountId() != null)\r\n        sb.append(\"SourceAccountId: \").append(getSourceAccountId()).append(\",\");\r\n    if (getSourceRegion() != null)\r\n        sb.append(\"SourceRegion: \").append(getSourceRegion()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.batchDetectSentiment",
	"Comment": "inspects a batch of documents and returns an inference of the prevailing sentiment, positive,neutral, mixed, or negative, in each one.",
	"Method": "BatchDetectSentimentResult batchDetectSentiment(BatchDetectSentimentRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchDetectSentiment(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.SetStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getObjectIds() != null)\r\n        sb.append(\"ObjectIds: \").append(getObjectIds()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ProviderUserIdentifierType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getProviderAttributeName() != null)\r\n        sb.append(\"ProviderAttributeName: \").append(getProviderAttributeName()).append(\",\");\r\n    if (getProviderAttributeValue() != null)\r\n        sb.append(\"ProviderAttributeValue: \").append(getProviderAttributeValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUserAttributeVerificationCodeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCodeDeliveryDetails() != null)\r\n        sb.append(\"CodeDeliveryDetails: \").append(getCodeDeliveryDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceDetailsByConfigRuleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvaluationResults() != null)\r\n        sb.append(\"EvaluationResults: \").append(getEvaluationResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUICustomizationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUICustomization() != null)\r\n        sb.append(\"UICustomization: \").append(getUICustomization());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GlobalSignOutResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeConfigurationRecorderStatus",
	"Comment": "returns the current status of the specified configuration recorder. if a configuration recorder is not specified,this action returns the status of all configuration recorders associated with the account.currently, you can specify only one configuration recorder per region in your account.",
	"Method": "DescribeConfigurationRecorderStatusResult describeConfigurationRecorderStatus(DescribeConfigurationRecorderStatusRequest request,DescribeConfigurationRecorderStatusResult describeConfigurationRecorderStatus){\r\n    return describeConfigurationRecorderStatus(new DescribeConfigurationRecorderStatusRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DominantLanguage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getScore() != null)\r\n        sb.append(\"Score: \").append(getScore());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.Entity.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getBeginOffset() != null)\r\n        sb.append(\"BeginOffset: \").append(getBeginOffset()).append(\",\");\r\n    if (getEndOffset() != null)\r\n        sb.append(\"EndOffset: \").append(getEndOffset()).append(\",\");\r\n    if (getScore() != null)\r\n        sb.append(\"Score: \").append(getScore()).append(\",\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getCategory() != null)\r\n        sb.append(\"Category: \").append(getCategory()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getTraits() != null)\r\n        sb.append(\"Traits: \").append(getTraits()).append(\",\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteRunRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.StopRunResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRun() != null)\r\n        sb.append(\"Run: \").append(getRun());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GroupType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRoleArn() != null)\r\n        sb.append(\"RoleArn: \").append(getRoleArn()).append(\",\");\r\n    if (getPrecedence() != null)\r\n        sb.append(\"Precedence: \").append(getPrecedence()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutEvaluationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFailedEvaluations() != null)\r\n        sb.append(\"FailedEvaluations: \").append(getFailedEvaluations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ExportConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportId() != null)\r\n        sb.append(\"ExportId: \").append(getExportId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.ListIdentityPoolUsageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolUsages() != null)\r\n        sb.append(\"IdentityPoolUsages: \").append(getIdentityPoolUsages()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getCount() != null)\r\n        sb.append(\"Count: \").append(getCount()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.PredefinedRetryPolicies.getDynamoDBDefaultRetryPolicy",
	"Comment": "returns the default retry policy for dynamodb client. this policy willhonor the maxerrorretry set in clientconfiguration.",
	"Method": "RetryPolicy getDynamoDBDefaultRetryPolicy(){\r\n    return new RetryPolicy(DEFAULT_RETRY_CONDITION, DYNAMODB_DEFAULT_BACKOFF_STRATEGY, DYNAMODB_DEFAULT_MAX_ERROR_RETRY, true);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSearchString() != null)\r\n        sb.append(\"SearchString: \").append(getSearchString()).append(\",\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getTagKey() != null)\r\n        sb.append(\"TagKey: \").append(getTagKey()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.SetCognitoEventsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getEvents() != null)\r\n        sb.append(\"Events: \").append(getEvents());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtilsTest.readResouceReturnsAceFor404ErrorResponse",
	"Comment": "when server returns with 404 status code,the test should throw amazonclientexception.",
	"Method": "void readResouceReturnsAceFor404ErrorResponse(){\r\n    try {\r\n        ec2CredentialsUtils.readResource(new URI(\"http://localhost:\" + mockServer.port() + \"/dummyPath\"));\r\n        fail(\"Expected AmazonClientException\");\r\n    } catch (AmazonClientException ace) {\r\n        assertTrue(ace.getMessage().contains(\"The requested metadata is not found at\"));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeDirectConnectGatewaysResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGateways() != null)\r\n        sb.append(\"DirectConnectGateways: \").append(getDirectConnectGateways()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListUploadsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.OutputDataConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getS3Uri() != null)\r\n        sb.append(\"S3Uri: \").append(getS3Uri());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.config.InternalConfig.mergeSignerMap",
	"Comment": "returns an immutable map by merging the override signer configuration into the default signerconfiguration for the given theme.",
	"Method": "Map<String, SignerConfig> mergeSignerMap(JsonIndex<SignerConfigJsonHelper, SignerConfig>[] defaults,JsonIndex<SignerConfigJsonHelper, SignerConfig>[] overrides,String theme){\r\n    Map<String, SignerConfig> map = buildSignerMap(defaults, theme);\r\n    Map<String, SignerConfig> mapOverride = buildSignerMap(overrides, theme);\r\n    map.putAll(mapOverride);\r\n    return Collections.unmodifiableMap(map);\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Service.setDefaults",
	"Comment": "sets the default endpoints configuration for all regions in apartition.",
	"Method": "void setDefaults(Endpoint defaults){\r\n    this.defaults = defaults;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.Endpoint.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAddress() != null)\r\n        sb.append(\"Address: \").append(getAddress()).append(\",\");\r\n    if (getPort() != null)\r\n        sb.append(\"Port: \").append(getPort());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.createLogSubscription",
	"Comment": "creates a subscription to forward real time directory service domain controller security logs to the specifiedcloudwatch log group in your aws account.",
	"Method": "CreateLogSubscriptionResult createLogSubscription(CreateLogSubscriptionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateLogSubscription(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.CreateApplicationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationId() != null)\r\n        sb.append(\"ConfigurationId: \").append(getConfigurationId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.TaskObject.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskId() != null)\r\n        sb.append(\"TaskId: \").append(getTaskId()).append(\",\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getAttemptId() != null)\r\n        sb.append(\"AttemptId: \").append(getAttemptId()).append(\",\");\r\n    if (getObjects() != null)\r\n        sb.append(\"Objects: \").append(getObjects());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Counters.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal()).append(\",\");\r\n    if (getPassed() != null)\r\n        sb.append(\"Passed: \").append(getPassed()).append(\",\");\r\n    if (getFailed() != null)\r\n        sb.append(\"Failed: \").append(getFailed()).append(\",\");\r\n    if (getWarned() != null)\r\n        sb.append(\"Warned: \").append(getWarned()).append(\",\");\r\n    if (getErrored() != null)\r\n        sb.append(\"Errored: \").append(getErrored()).append(\",\");\r\n    if (getStopped() != null)\r\n        sb.append(\"Stopped: \").append(getStopped()).append(\",\");\r\n    if (getSkipped() != null)\r\n        sb.append(\"Skipped: \").append(getSkipped());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.getConditions",
	"Comment": "returns the conditions associated with this policy statement. conditionsallow policy statements to be conditionally evaluated based on the manyavailable condition types.for example, a statement that allows access to an amazon sqs queue coulduse a condition to only apply the effect of that statement for requeststhat are made before a certain date, or that originate from a range of ipaddresses.when multiple conditions are included in a single statement, allconditions must evaluate to true in order for the statement to takeeffect.",
	"Method": "List<Condition> getConditions(){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtilsTest.readResouceReturnsAseFor5xxResponse",
	"Comment": "when server returns a status code other than 200 and 404,the test should throw amazonserviceexception. the requestis not retried.",
	"Method": "void readResouceReturnsAseFor5xxResponse(){\r\n    generateStub(500, \"{\\\"code\\\":\\\"500 Internal Server Error\\\",\\\"message\\\":\\\"ERROR_MESSAGE\\\"}\");\r\n    try {\r\n        ec2CredentialsUtils.readResource(endpoint);\r\n        fail(\"Expected AmazonServiceException\");\r\n    } catch (AmazonServiceException ase) {\r\n        assertEquals(500, ase.getStatusCode());\r\n        assertEquals(\"500 Internal Server Error\", ase.getErrorCode());\r\n        assertEquals(\"ERROR_MESSAGE\", ase.getErrorMessage());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectSentimentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DirectoryVpcSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpcId() != null)\r\n        sb.append(\"VpcId: \").append(getVpcId()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReplicationTaskAssessmentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskIdentifier() != null)\r\n        sb.append(\"ReplicationTaskIdentifier: \").append(getReplicationTaskIdentifier()).append(\",\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getReplicationTaskLastAssessmentDate() != null)\r\n        sb.append(\"ReplicationTaskLastAssessmentDate: \").append(getReplicationTaskLastAssessmentDate()).append(\",\");\r\n    if (getAssessmentStatus() != null)\r\n        sb.append(\"AssessmentStatus: \").append(getAssessmentStatus()).append(\",\");\r\n    if (getAssessmentResultsFile() != null)\r\n        sb.append(\"AssessmentResultsFile: \").append(getAssessmentResultsFile()).append(\",\");\r\n    if (getAssessmentResults() != null)\r\n        sb.append(\"AssessmentResults: \").append(getAssessmentResults()).append(\",\");\r\n    if (getS3ObjectUrl() != null)\r\n        sb.append(\"S3ObjectUrl: \").append(getS3ObjectUrl());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.setResources",
	"Comment": "sets the resources associated with this policy statement. resources arewhat a policy statement is allowing or denying access to, such as anamazon sqs queue or an amazon sns topic.note that some services allow only one resource to be specified perpolicy statement.",
	"Method": "void setResources(Collection<Resource> resources){\r\n    List<Resource> resourceList = new ArrayList<Resource>(resources);\r\n    PolicyUtils.validateResourceList(resourceList);\r\n    this.resources = resourceList;\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testRoleProfileWithNoSourceName",
	"Comment": "tests loading a profile that assumes a role, but the source profile does not exist.",
	"Method": "void testRoleProfileWithNoSourceName(){\r\n    checkDeferredException(ProfileResourceLoader.roleProfileWithNoSourceName(), AmazonClientException.class, \"test\", \"Should throw an exception as there is a role profile with a missing source role\");\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CPU.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFrequency() != null)\r\n        sb.append(\"Frequency: \").append(getFrequency()).append(\",\");\r\n    if (getArchitecture() != null)\r\n        sb.append(\"Architecture: \").append(getArchitecture()).append(\",\");\r\n    if (getClock() != null)\r\n        sb.append(\"Clock: \").append(getClock());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.util.XmlUtils.createXmlInputFactory",
	"Comment": "disables certain dangerous features that attempt to automatically fetch dtdssee owasp xxe cheat sheet",
	"Method": "XMLInputFactory createXmlInputFactory(){\r\n    XMLInputFactory factory = XMLInputFactory.newInstance();\r\n    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\r\n    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\r\n    return factory;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.GetCognitoEventsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.createInstanceProfile",
	"Comment": "creates a profile that can be applied to one or more private fleet device instances.",
	"Method": "CreateInstanceProfileResult createInstanceProfile(CreateInstanceProfileRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateInstanceProfile(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.RemoveTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationRecorderStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecorderNames() != null)\r\n        sb.append(\"ConfigurationRecorderNames: \").append(getConfigurationRecorderNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AbstractAmazonDirectConnectAsync.describeConnectionsAsync",
	"Comment": "simplified method form for invoking the describeconnections operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync(DescribeConnectionsRequest request,java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync,DescribeConnectionsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConnectionsRequest, DescribeConnectionsResult> asyncHandler,java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync,java.util.concurrent.Future<DescribeConnectionsResult> describeConnectionsAsync,com.amazonaws.handlers.AsyncHandler<DescribeConnectionsRequest, DescribeConnectionsResult> asyncHandler){\r\n    return describeConnectionsAsync(new DescribeConnectionsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setProxyPort",
	"Comment": "sets the optional proxy port the client will connect through.",
	"Method": "void setProxyPort(int proxyPort){\r\n    this.proxyPort = proxyPort;\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.RedshiftInstanceDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFamily() != null)\r\n        sb.append(\"Family: \").append(getFamily()).append(\",\");\r\n    if (getNodeType() != null)\r\n        sb.append(\"NodeType: \").append(getNodeType()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getCurrentGeneration() != null)\r\n        sb.append(\"CurrentGeneration: \").append(getCurrentGeneration()).append(\",\");\r\n    if (getSizeFlexEligible() != null)\r\n        sb.append(\"SizeFlexEligible: \").append(getSizeFlexEligible());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.RefreshSchemasRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn()).append(\",\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.CustomerConnectorInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getActiveConnectors() != null)\r\n        sb.append(\"ActiveConnectors: \").append(getActiveConnectors()).append(\",\");\r\n    if (getHealthyConnectors() != null)\r\n        sb.append(\"HealthyConnectors: \").append(getHealthyConnectors()).append(\",\");\r\n    if (getBlackListedConnectors() != null)\r\n        sb.append(\"BlackListedConnectors: \").append(getBlackListedConnectors()).append(\",\");\r\n    if (getShutdownConnectors() != null)\r\n        sb.append(\"ShutdownConnectors: \").append(getShutdownConnectors()).append(\",\");\r\n    if (getUnhealthyConnectors() != null)\r\n        sb.append(\"UnhealthyConnectors: \").append(getUnhealthyConnectors()).append(\",\");\r\n    if (getTotalConnectors() != null)\r\n        sb.append(\"TotalConnectors: \").append(getTotalConnectors()).append(\",\");\r\n    if (getUnknownConnectors() != null)\r\n        sb.append(\"UnknownConnectors: \").append(getUnknownConnectors());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AttributeType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.setId",
	"Comment": "sets the id for this statement. statement ids serve to help keep track ofmultiple statements, and are often used to give the statement ameaningful, human readable name.statement ids must be unique within a policy, but are not required to beglobally unique.if you do not explicitly assign an id to a statement, a unique id will beautomatically assigned when the statement is added to a policy.developers should be careful to not use the same statement id formultiple statements in the same policy. reusing the same statement id indifferent policies is not a problem.",
	"Method": "void setId(String id){\r\n    this.id = id;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ResourceCountFilters.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DynamoDbSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeTaskExecutionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskExecutionArn() != null)\r\n        sb.append(\"TaskExecutionArn: \").append(getTaskExecutionArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartTopicsDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getNumberOfTopics() != null)\r\n        sb.append(\"NumberOfTopics: \").append(getNumberOfTopics()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.EvaluationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvaluationResultIdentifier() != null)\r\n        sb.append(\"EvaluationResultIdentifier: \").append(getEvaluationResultIdentifier()).append(\",\");\r\n    if (getComplianceType() != null)\r\n        sb.append(\"ComplianceType: \").append(getComplianceType()).append(\",\");\r\n    if (getResultRecordedTime() != null)\r\n        sb.append(\"ResultRecordedTime: \").append(getResultRecordedTime()).append(\",\");\r\n    if (getConfigRuleInvokedTime() != null)\r\n        sb.append(\"ConfigRuleInvokedTime: \").append(getConfigRuleInvokedTime()).append(\",\");\r\n    if (getAnnotation() != null)\r\n        sb.append(\"Annotation: \").append(getAnnotation()).append(\",\");\r\n    if (getResultToken() != null)\r\n        sb.append(\"ResultToken: \").append(getResultToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DeleteAgentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeEventsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceName() != null)\r\n        sb.append(\"SourceName: \").append(getSourceName()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getDuration() != null)\r\n        sb.append(\"Duration: \").append(getDuration()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminGetDevice",
	"Comment": "gets the device, as an administrator.requires developer credentials.",
	"Method": "AdminGetDeviceResult adminGetDevice(AdminGetDeviceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminGetDevice(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeLocations",
	"Comment": "lists the aws direct connect locations in the current aws region. these are the locations that can be selectedwhen calling createconnection or createinterconnect.",
	"Method": "DescribeLocationsResult describeLocations(DescribeLocationsRequest request,DescribeLocationsResult describeLocations){\r\n    return describeLocations(new DescribeLocationsRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListTopicsDetectionJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.CapacityManagerTest.acquire",
	"Comment": "tests that capacity can be acquired when available and can not beonce exhausted.",
	"Method": "void acquire(){\r\n    CapacityManager mgr = new CapacityManager(10);\r\n    Assert.assertTrue(mgr.acquire());\r\n    Assert.assertEquals(mgr.availableCapacity(), 9);\r\n    Assert.assertEquals(mgr.consumedCapacity(), 1);\r\n    Assert.assertTrue(mgr.acquire(9));\r\n    Assert.assertEquals(mgr.availableCapacity(), 0);\r\n    Assert.assertEquals(mgr.consumedCapacity(), 10);\r\n    Assert.assertFalse(mgr.acquire(1));\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ComplianceContributorCount.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCappedCount() != null)\r\n        sb.append(\"CappedCount: \").append(getCappedCount()).append(\",\");\r\n    if (getCapExceeded() != null)\r\n        sb.append(\"CapExceeded: \").append(getCapExceeded());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DirectConnectGatewayAttachment.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getVirtualInterfaceRegion() != null)\r\n        sb.append(\"VirtualInterfaceRegion: \").append(getVirtualInterfaceRegion()).append(\",\");\r\n    if (getVirtualInterfaceOwnerAccount() != null)\r\n        sb.append(\"VirtualInterfaceOwnerAccount: \").append(getVirtualInterfaceOwnerAccount()).append(\",\");\r\n    if (getAttachmentState() != null)\r\n        sb.append(\"AttachmentState: \").append(getAttachmentState()).append(\",\");\r\n    if (getStateChangeError() != null)\r\n        sb.append(\"StateChangeError: \").append(getStateChangeError());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetSigningCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DeleteDocumentClassifierResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazonconfigasync using the current builder configuration.",
	"Method": "AmazonConfigAsync build(AwsAsyncClientParams params){\r\n    return new AmazonConfigAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.auth.internal.AWS4SignerRequestParams.resolveRegion",
	"Comment": "ideally, we should be using endpoint prefix to parse the region from host.previously we were using service signing name to parse region. it is possible thatendpoint prefix is null if customers are still using older clients. so usingservice signing name as alternative will prevent any behavior breaking change.",
	"Method": "String resolveRegion(String endpointPrefix,String serviceSigningName){\r\n    return AwsHostNameUtils.parseRegionName(request.getEndpoint().getHost(), endpointPrefix != null ? endpointPrefix : serviceSigningName);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyEventSubscriptionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventSubscription() != null)\r\n        sb.append(\"EventSubscription: \").append(getEventSubscription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeAgentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentArn() != null)\r\n        sb.append(\"AgentArn: \").append(getAgentArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.SdkProxyRoutePlannerIntegrationTest.createHttpClient",
	"Comment": "create a httpclient with the proxy set up to the local mock server.",
	"Method": "HttpClient createHttpClient(String nonProxyHosts){\r\n    HttpClientFactory<ConnectionManagerAwareHttpClient> httpClientFactory = new ApacheHttpClientFactory();\r\n    ClientConfiguration config = new ClientConfiguration().withProxyHost(\"localhost\").withProxyPort(server.getPort()).withNonProxyHosts(nonProxyHosts);\r\n    return httpClientFactory.create(HttpClientSettings.adapt(config));\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.stopConfigurationRecorder",
	"Comment": "stops recording configurations of the aws resources you have selected to record in your aws account.",
	"Method": "StopConfigurationRecorderResult stopConfigurationRecorder(StopConfigurationRecorderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStopConfigurationRecorder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateDirectConnectGatewayRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayName() != null)\r\n        sb.append(\"DirectConnectGatewayName: \").append(getDirectConnectGatewayName()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.LengthCheckInputStream.checkLength",
	"Comment": "checks the data length read so far against the expected total.",
	"Method": "void checkLength(boolean eof){\r\n    if (eof) {\r\n        if (dataLength != expectedLength) {\r\n            throw new SdkClientException(\"Data read has a different length than the expected: \" + diagnosticInfo());\r\n        }\r\n    } else if (dataLength > expectedLength) {\r\n        throw new SdkClientException(\"More data read than expected: \" + diagnosticInfo());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateAgentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentArn() != null)\r\n        sb.append(\"AgentArn: \").append(getAgentArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AssociateConnectionWithLagResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.GetCognitoEventsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvents() != null)\r\n        sb.append(\"Events: \").append(getEvents());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetSigningCertificateRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.TagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtils.speedUpDcoumentBuilderFactory",
	"Comment": "used to optimize performance by avoiding expensive file access every timea documentbuilderfactory is constructed as a result of constructing axalan document factory.",
	"Method": "void speedUpDcoumentBuilderFactory(){\r\n    if (System.getProperty(DOCUMENT_BUILDER_FACTORY_PROP_NAME) == null) {\r\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\n        if (DOCUMENT_BUILDER_FACTORY_IMPL_CLASS_NAME.equals(factory.getClass().getName())) {\r\n            System.setProperty(DOCUMENT_BUILDER_FACTORY_PROP_NAME, DOCUMENT_BUILDER_FACTORY_IMPL_CLASS_NAME);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.http.AmazonHttpClientTest.SetupMockRequestHandler2",
	"Comment": "builds up the correct sequence of requesthandler2 callbacks that occur from the amazonhttpclient, basedon parameters that describe a simple test scenario",
	"Method": "void SetupMockRequestHandler2(RequestHandler2 mockHandler,int attemptCount,MockRequestOutcome outcome){\r\n    HttpResponse testResponse = EasyMock.createMock(HttpResponse.class);\r\n    EasyMock.reset(mockHandler);\r\n    mockHandler.beforeRequest(EasyMock.<Request<?>>anyObject());\r\n    EasyMock.expectLastCall().once();\r\n    for (int i = 0; i < attemptCount; ++i) {\r\n        mockHandler.beforeAttempt(EasyMock.<HandlerBeforeAttemptContext>anyObject());\r\n        EasyMock.expectLastCall().once();\r\n        if (outcome == MockRequestOutcome.Success && i + 1 == attemptCount) {\r\n            EasyMock.expect(mockHandler.beforeUnmarshalling(EasyMock.<Request<?>>anyObject(), EasyMock.<HttpResponse>anyObject())).andReturn(testResponse).once();\r\n        }\r\n        mockHandler.afterAttempt(EasyMock.<HandlerAfterAttemptContext>anyObject());\r\n        EasyMock.expectLastCall().once();\r\n    }\r\n    if (outcome == MockRequestOutcome.Success) {\r\n        mockHandler.afterResponse(EasyMock.<Request<?>>anyObject(), EasyMock.<Response<?>>anyObject());\r\n        EasyMock.expectLastCall().once();\r\n    } else if (outcome == MockRequestOutcome.FailureWithAwsClientException) {\r\n        mockHandler.afterError(EasyMock.<Request<?>>anyObject(), EasyMock.<Response<?>>anyObject(), EasyMock.<Exception>anyObject());\r\n        EasyMock.expectLastCall().once();\r\n    }\r\n    EasyMock.replay(mockHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.GetLifecyclePolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicy() != null)\r\n        sb.append(\"Policy: \").append(getPolicy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.getRequestClientOptions",
	"Comment": "gets the options stored with this request object. intended for internal use only.",
	"Method": "RequestClientOptions getRequestClientOptions(){\r\n    return requestClientOptions;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.util.EC2MetadataUtils.getPublicKey",
	"Comment": "get the public key. only available if supplied at instance launch time.",
	"Method": "String getPublicKey(){\r\n    return fetchData(EC2_METADATA_ROOT + \"/public-keys/0/openssh-key\");\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.startKeyPhrasesDetectionJob",
	"Comment": "starts an asynchronous key phrase detection job for a collection of documents. use the operation to track thestatus of a job.",
	"Method": "StartKeyPhrasesDetectionJobResult startKeyPhrasesDetectionJob(StartKeyPhrasesDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartKeyPhrasesDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListIpRoutesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteDirectConnectGatewayAssociationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListUsersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.TaskExecutionResultDetail.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPrepareDuration() != null)\r\n        sb.append(\"PrepareDuration: \").append(getPrepareDuration()).append(\",\");\r\n    if (getPrepareStatus() != null)\r\n        sb.append(\"PrepareStatus: \").append(getPrepareStatus()).append(\",\");\r\n    if (getTransferDuration() != null)\r\n        sb.append(\"TransferDuration: \").append(getTransferDuration()).append(\",\");\r\n    if (getTransferStatus() != null)\r\n        sb.append(\"TransferStatus: \").append(getTransferStatus()).append(\",\");\r\n    if (getVerifyDuration() != null)\r\n        sb.append(\"VerifyDuration: \").append(getVerifyDuration()).append(\",\");\r\n    if (getVerifyStatus() != null)\r\n        sb.append(\"VerifyStatus: \").append(getVerifyStatus()).append(\",\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorDetail() != null)\r\n        sb.append(\"ErrorDetail: \").append(getErrorDetail());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetVPCEConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpceConfiguration() != null)\r\n        sb.append(\"VpceConfiguration: \").append(getVpceConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListIdentityProvidersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProviders() != null)\r\n        sb.append(\"Providers: \").append(getProviders()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.isRequestSuccessful",
	"Comment": "checks if the request was successful or not based on the status code.",
	"Method": "boolean isRequestSuccessful(org.apache.http.HttpResponse response){\r\n    int status = response.getStatusLine().getStatusCode();\r\n    return status / 100 == HttpStatus.SC_OK / 100;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminRespondToAuthChallengeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getChallengeName() != null)\r\n        sb.append(\"ChallengeName: \").append(getChallengeName()).append(\",\");\r\n    if (getChallengeResponses() != null)\r\n        sb.append(\"ChallengeResponses: \").append(getChallengeResponses()).append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession()).append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata()).append(\",\");\r\n    if (getContextData() != null)\r\n        sb.append(\"ContextData: \").append(getContextData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getCurrentToken",
	"Comment": "returns the current jsontoken that is to be parsed by the parser. returnsnull by default.",
	"Method": "JsonToken getCurrentToken(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListRemoteAccessSessionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeDocumentClassifierRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassifierArn() != null)\r\n        sb.append(\"DocumentClassifierArn: \").append(getDocumentClassifierArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withProxyPort",
	"Comment": "sets the optional proxy port the client will connect through and returns the updatedclientconfiguration object.",
	"Method": "ClientConfiguration withProxyPort(int proxyPort){\r\n    setProxyPort(proxyPort);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationInstanceTaskLogsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getReplicationInstanceTaskLogs() != null)\r\n        sb.append(\"ReplicationInstanceTaskLogs: \").append(getReplicationInstanceTaskLogs()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.NodeTypeSpecificValue.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNodeType() != null)\r\n        sb.append(\"NodeType: \").append(getNodeType()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ReservationPurchaseRecommendationMetadata.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRecommendationId() != null)\r\n        sb.append(\"RecommendationId: \").append(getRecommendationId()).append(\",\");\r\n    if (getGenerationTimestamp() != null)\r\n        sb.append(\"GenerationTimestamp: \").append(getGenerationTimestamp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.IncreaseReplicationFactorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterName() != null)\r\n        sb.append(\"ClusterName: \").append(getClusterName()).append(\",\");\r\n    if (getNewReplicationFactor() != null)\r\n        sb.append(\"NewReplicationFactor: \").append(getNewReplicationFactor()).append(\",\");\r\n    if (getAvailabilityZones() != null)\r\n        sb.append(\"AvailabilityZones: \").append(getAvailabilityZones());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutConfigRuleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyReplicationTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getReplicationTaskIdentifier() != null)\r\n        sb.append(\"ReplicationTaskIdentifier: \").append(getReplicationTaskIdentifier()).append(\",\");\r\n    if (getMigrationType() != null)\r\n        sb.append(\"MigrationType: \").append(getMigrationType()).append(\",\");\r\n    if (getTableMappings() != null)\r\n        sb.append(\"TableMappings: \").append(getTableMappings()).append(\",\");\r\n    if (getReplicationTaskSettings() != null)\r\n        sb.append(\"ReplicationTaskSettings: \").append(getReplicationTaskSettings()).append(\",\");\r\n    if (getCdcStartTime() != null)\r\n        sb.append(\"CdcStartTime: \").append(getCdcStartTime()).append(\",\");\r\n    if (getCdcStartPosition() != null)\r\n        sb.append(\"CdcStartPosition: \").append(getCdcStartPosition()).append(\",\");\r\n    if (getCdcStopPosition() != null)\r\n        sb.append(\"CdcStopPosition: \").append(getCdcStopPosition());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.QueryStringSigner.overrideDate",
	"Comment": "for testing purposes only, to control the date used in signing.",
	"Method": "void overrideDate(Date date){\r\n    this.overriddenDate = date;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.startSentimentDetectionJob",
	"Comment": "starts an asynchronous sentiment detection job for a collection of documents. use the operation to track thestatus of a job.",
	"Method": "StartSentimentDetectionJobResult startSentimentDetectionJob(StartSentimentDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartSentimentDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeviceType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey()).append(\",\");\r\n    if (getDeviceAttributes() != null)\r\n        sb.append(\"DeviceAttributes: \").append(getDeviceAttributes()).append(\",\");\r\n    if (getDeviceCreateDate() != null)\r\n        sb.append(\"DeviceCreateDate: \").append(getDeviceCreateDate()).append(\",\");\r\n    if (getDeviceLastModifiedDate() != null)\r\n        sb.append(\"DeviceLastModifiedDate: \").append(getDeviceLastModifiedDate()).append(\",\");\r\n    if (getDeviceLastAuthenticatedDate() != null)\r\n        sb.append(\"DeviceLastAuthenticatedDate: \").append(getDeviceLastAuthenticatedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ApacheHttpClientConfig.withSslSocketFactory",
	"Comment": "fluent api for setting a custom apache http client specific ssl socketfactory.",
	"Method": "ApacheHttpClientConfig withSslSocketFactory(ConnectionSocketFactory sslSocketFactory){\r\n    this.sslSocketFactory = sslSocketFactory;\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Endpoint.hasHttpSupport",
	"Comment": "a convienient methods that returns true if the endpoint support httpscheme. returns false otherwise.",
	"Method": "boolean hasHttpSupport(){\r\n    return isProtocolSupported(Protocol.HTTP);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartDocumentClassificationJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeConfigurationRecorderStatusAsync",
	"Comment": "simplified method form for invoking the describeconfigurationrecorderstatus operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync(DescribeConfigurationRecorderStatusRequest request,java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync,DescribeConfigurationRecorderStatusRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecorderStatusRequest, DescribeConfigurationRecorderStatusResult> asyncHandler,java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync,java.util.concurrent.Future<DescribeConfigurationRecorderStatusResult> describeConfigurationRecorderStatusAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecorderStatusRequest, DescribeConfigurationRecorderStatusResult> asyncHandler){\r\n    return describeConfigurationRecorderStatusAsync(new DescribeConfigurationRecorderStatusRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.EvaluationResultIdentifier.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvaluationResultQualifier() != null)\r\n        sb.append(\"EvaluationResultQualifier: \").append(getEvaluationResultQualifier()).append(\",\");\r\n    if (getOrderingTimestamp() != null)\r\n        sb.append(\"OrderingTimestamp: \").append(getOrderingTimestamp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.AmazonHttpClient.getNonNullResponseHandler",
	"Comment": "ensures the response handler is not null. if it is this method returns a dummy responsehandler.",
	"Method": "HttpResponseHandler<T> getNonNullResponseHandler(HttpResponseHandler<T> responseHandler){\r\n    if (responseHandler != null) {\r\n        return responseHandler;\r\n    } else {\r\n        return new HttpResponseHandler<T>() {\r\n            @Override\r\n            public T handle(HttpResponse response) throws Exception {\r\n                return null;\r\n            }\r\n            @Override\r\n            public boolean needsConnectionLeftOpen() {\r\n                return false;\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.http.AmazonHttpClient.getNonNullResponseHandler",
	"Comment": "ensures the response handler is not null. if it is this method returns a dummy responsehandler.",
	"Method": "HttpResponseHandler<T> getNonNullResponseHandler(HttpResponseHandler<T> responseHandler){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.http.AmazonHttpClient.getNonNullResponseHandler",
	"Comment": "ensures the response handler is not null. if it is this method returns a dummy responsehandler.",
	"Method": "HttpResponseHandler<T> getNonNullResponseHandler(HttpResponseHandler<T> responseHandler){\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.describeLocationEfs",
	"Comment": "returns metadata, such as the path information about an amazon efs location.",
	"Method": "DescribeLocationEfsResult describeLocationEfs(DescribeLocationEfsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLocationEfs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UICustomizationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getImageUrl() != null)\r\n        sb.append(\"ImageUrl: \").append(getImageUrl()).append(\",\");\r\n    if (getCSS() != null)\r\n        sb.append(\"CSS: \").append(getCSS()).append(\",\");\r\n    if (getCSSVersion() != null)\r\n        sb.append(\"CSSVersion: \").append(getCSSVersion()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateAuthEventFeedbackRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getEventId() != null)\r\n        sb.append(\"EventId: \").append(getEventId()).append(\",\");\r\n    if (getFeedbackToken() != null)\r\n        sb.append(\"FeedbackToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getFeedbackValue() != null)\r\n        sb.append(\"FeedbackValue: \").append(getFeedbackValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListInstanceProfilesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CancelSchemaExtensionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getSchemaExtensionId() != null)\r\n        sb.append(\"SchemaExtensionId: \").append(getSchemaExtensionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocatePrivateVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getNewPrivateVirtualInterfaceAllocation() != null)\r\n        sb.append(\"NewPrivateVirtualInterfaceAllocation: \").append(getNewPrivateVirtualInterfaceAllocation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEventSubscriptionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getEventSubscriptionsList() != null)\r\n        sb.append(\"EventSubscriptionsList: \").append(getEventSubscriptionsList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteProjectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.testConnection",
	"Comment": "tests the connection between the replication instance and the endpoint.",
	"Method": "TestConnectionResult testConnection(TestConnectionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeTestConnection(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeInterconnectsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnects() != null)\r\n        sb.append(\"Interconnects: \").append(getInterconnects());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.timers.client.ClientExecutionTimer.startTimer",
	"Comment": "start the timer with the specified timeout and return a object that can be used to track thestate of the timer and cancel it if need be.",
	"Method": "ClientExecutionAbortTrackerTask startTimer(int clientExecutionTimeoutMillis){\r\n    if (isTimeoutDisabled(clientExecutionTimeoutMillis)) {\r\n        return NoOpClientExecutionAbortTrackerTask.INSTANCE;\r\n    } else if (executor == null) {\r\n        initializeExecutor();\r\n    }\r\n    return scheduleTimerTask(clientExecutionTimeoutMillis);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.BatchGetResourceConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBaseConfigurationItems() != null)\r\n        sb.append(\"BaseConfigurationItems: \").append(getBaseConfigurationItems()).append(\",\");\r\n    if (getUnprocessedResourceKeys() != null)\r\n        sb.append(\"UnprocessedResourceKeys: \").append(getUnprocessedResourceKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DescribeIdentityUsageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityUsage() != null)\r\n        sb.append(\"IdentityUsage: \").append(getIdentityUsage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.UpdateLifecyclePolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.isInsideResponseHeader",
	"Comment": "returns true if the jsonunmarshallercontext is involved inparsing response headers. else returns false. returns true by default.",
	"Method": "boolean isInsideResponseHeader(){\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.util.TimingInfo.durationMilliOf",
	"Comment": "returns the duration in milliseconds as double, preserving the decimalprecision as necessary, for the given start and end time in nanoseconds.",
	"Method": "double durationMilliOf(long startTimeNano,long endTimeNano){\r\n    double micros = (double) TimeUnit.NANOSECONDS.toMicros(endTimeNano - startTimeNano);\r\n    return micros / 1000.0;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SignUpRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSecretHash() != null)\r\n        sb.append(\"SecretHash: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserAttributes() != null)\r\n        sb.append(\"UserAttributes: \").append(getUserAttributes()).append(\",\");\r\n    if (getValidationData() != null)\r\n        sb.append(\"ValidationData: \").append(getValidationData()).append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata()).append(\",\");\r\n    if (getUserContextData() != null)\r\n        sb.append(\"UserContextData: \").append(getUserContextData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetReservationPurchaseRecommendationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMetadata() != null)\r\n        sb.append(\"Metadata: \").append(getMetadata()).append(\",\");\r\n    if (getRecommendations() != null)\r\n        sb.append(\"Recommendations: \").append(getRecommendations()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeEventsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getEvents() != null)\r\n        sb.append(\"Events: \").append(getEvents());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listSentimentDetectionJobs",
	"Comment": "gets a list of sentiment detection jobs that you have submitted.",
	"Method": "ListSentimentDetectionJobsResult listSentimentDetectionJobs(ListSentimentDetectionJobsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListSentimentDetectionJobs(request);\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilderTest.customMaxConnsAndExplicitExecutor_UsesExplicitExecutor",
	"Comment": "if a custom executor is set then the max connections in client configuration should beignored and the executor should be used as is.",
	"Method": "void customMaxConnsAndExplicitExecutor_UsesExplicitExecutor(){\r\n    final int clientConfigMaxConns = 10;\r\n    final int customExecutorThreadCount = 15;\r\n    final ExecutorService customExecutor = Executors.newFixedThreadPool(customExecutorThreadCount);\r\n    ExecutorService actualExecutor = builderWithRegion().withClientConfiguration(new ClientConfiguration().withMaxConnections(clientConfigMaxConns)).withExecutorFactory(new StaticExecutorFactory(customExecutor)).build().getAsyncParams().getExecutor();\r\n    assertThat(actualExecutor, instanceOf(ThreadPoolExecutor.class));\r\n    assertEquals(customExecutor, actualExecutor);\r\n    assertEquals(customExecutorThreadCount, ((ThreadPoolExecutor) actualExecutor).getMaximumPoolSize());\r\n}"
}, {
	"Path": "com.amazonaws.util.EC2MetadataUtils.getProductCodes",
	"Comment": "get the list of product codes associated with the instance, if any.",
	"Method": "List<String> getProductCodes(){\r\n    return getItems(EC2_METADATA_ROOT + \"/product-codes\");\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListArtifactsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.describeTaskExecution",
	"Comment": "returns detailed metadata about a task that is being executed.",
	"Method": "DescribeTaskExecutionResult describeTaskExecution(DescribeTaskExecutionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTaskExecution(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.listUserPoolClients",
	"Comment": "lists the clients that have been created for the specified user pool.",
	"Method": "ListUserPoolClientsResult listUserPoolClients(ListUserPoolClientsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListUserPoolClients(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.TopicsDetectionJobProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getSubmitTime() != null)\r\n        sb.append(\"SubmitTime: \").append(getSubmitTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getNumberOfTopics() != null)\r\n        sb.append(\"NumberOfTopics: \").append(getNumberOfTopics());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.internal.JsonPolicyWriter.groupConditionsByTypeAndKey",
	"Comment": "groups the list of conditions by the condition type andcondition key.",
	"Method": "Map<String, ConditionsByKey> groupConditionsByTypeAndKey(List<Condition> conditions){\r\n    Map<String, ConditionsByKey> conditionsByType = new LinkedHashMap<String, ConditionsByKey>();\r\n    String type;\r\n    String key;\r\n    ConditionsByKey conditionsByKey;\r\n    for (Condition condition : conditions) {\r\n        type = condition.getType();\r\n        key = condition.getConditionKey();\r\n        if (!(conditionsByType.containsKey(type))) {\r\n            conditionsByType.put(type, new ConditionsByKey());\r\n        }\r\n        conditionsByKey = conditionsByType.get(type);\r\n        conditionsByKey.addValuesToKey(key, condition.getValues());\r\n    }\r\n    return conditionsByType;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.listTags",
	"Comment": "list all of the tags for a dax cluster. you can call listtags up to 10 times per second, peraccount.",
	"Method": "ListTagsResult listTags(ListTagsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListTags(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetInstanceProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceProfile() != null)\r\n        sb.append(\"InstanceProfile: \").append(getInstanceProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.getIdentityPoolConfiguration",
	"Comment": "gets the configuration settings of an identity pool.this api can only be called with developer credentials. you cannot call this api with the temporary usercredentials provided by cognito identity.",
	"Method": "GetIdentityPoolConfigurationResult getIdentityPoolConfiguration(GetIdentityPoolConfigurationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetIdentityPoolConfiguration(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteSnapshotResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnapshotId() != null)\r\n        sb.append(\"SnapshotId: \").append(getSnapshotId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ConfigurationTag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationType() != null)\r\n        sb.append(\"ConfigurationType: \").append(getConfigurationType()).append(\",\");\r\n    if (getConfigurationId() != null)\r\n        sb.append(\"ConfigurationId: \").append(getConfigurationId()).append(\",\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue()).append(\",\");\r\n    if (getTimeOfCreation() != null)\r\n        sb.append(\"TimeOfCreation: \").append(getTimeOfCreation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.Md5Utils.md5AsBase64",
	"Comment": "returns the md5 in base64 for the data from the given input stream.note this method closes the given input stream upon completion.",
	"Method": "String md5AsBase64(InputStream is,String md5AsBase64,byte[] input,String md5AsBase64,File file){\r\n    return Base64.encodeAsString(computeMD5Hash(file));\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminLinkProviderForUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getDestinationUser() != null)\r\n        sb.append(\"DestinationUser: \").append(getDestinationUser()).append(\",\");\r\n    if (getSourceUser() != null)\r\n        sb.append(\"SourceUser: \").append(getSourceUser());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeConfigRuleEvaluationStatus",
	"Comment": "returns status information for each of your aws managed config rules. the status includes information such as thelast time aws config invoked the rule, the last time aws config failed to invoke the rule, and the related errorfor the last failure.",
	"Method": "DescribeConfigRuleEvaluationStatusResult describeConfigRuleEvaluationStatus(DescribeConfigRuleEvaluationStatusRequest request,DescribeConfigRuleEvaluationStatusResult describeConfigRuleEvaluationStatus){\r\n    return describeConfigRuleEvaluationStatus(new DescribeConfigRuleEvaluationStatusRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateSnapshotRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityTypesListItem.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Policy.withId",
	"Comment": "sets the policy id for this policy and returns the updated policy so thatmultiple calls can be chained together.policy ids serve to help developers keep track of multiple policies, andare often used as human readable name for a policy.",
	"Method": "Policy withId(String id){\r\n    setId(id);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.IncompatibilityMessage.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.AgentNetworkInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIpAddress() != null)\r\n        sb.append(\"IpAddress: \").append(getIpAddress()).append(\",\");\r\n    if (getMacAddress() != null)\r\n        sb.append(\"MacAddress: \").append(getMacAddress());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminAddUserToGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Location.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLatitude() != null)\r\n        sb.append(\"Latitude: \").append(getLatitude()).append(\",\");\r\n    if (getLongitude() != null)\r\n        sb.append(\"Longitude: \").append(getLongitude());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.getComplianceSummaryByConfigRuleAsync",
	"Comment": "simplified method form for invoking the getcompliancesummarybyconfigrule operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync(GetComplianceSummaryByConfigRuleRequest request,java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync,GetComplianceSummaryByConfigRuleRequest request,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByConfigRuleRequest, GetComplianceSummaryByConfigRuleResult> asyncHandler,java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync,java.util.concurrent.Future<GetComplianceSummaryByConfigRuleResult> getComplianceSummaryByConfigRuleAsync,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByConfigRuleRequest, GetComplianceSummaryByConfigRuleResult> asyncHandler){\r\n    return getComplianceSummaryByConfigRuleAsync(new GetComplianceSummaryByConfigRuleRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigurationItem.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getConfigurationItemCaptureTime() != null)\r\n        sb.append(\"ConfigurationItemCaptureTime: \").append(getConfigurationItemCaptureTime()).append(\",\");\r\n    if (getConfigurationItemStatus() != null)\r\n        sb.append(\"ConfigurationItemStatus: \").append(getConfigurationItemStatus()).append(\",\");\r\n    if (getConfigurationStateId() != null)\r\n        sb.append(\"ConfigurationStateId: \").append(getConfigurationStateId()).append(\",\");\r\n    if (getConfigurationItemMD5Hash() != null)\r\n        sb.append(\"ConfigurationItemMD5Hash: \").append(getConfigurationItemMD5Hash()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getResourceCreationTime() != null)\r\n        sb.append(\"ResourceCreationTime: \").append(getResourceCreationTime()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getRelatedEvents() != null)\r\n        sb.append(\"RelatedEvents: \").append(getRelatedEvents()).append(\",\");\r\n    if (getRelationships() != null)\r\n        sb.append(\"Relationships: \").append(getRelationships()).append(\",\");\r\n    if (getConfiguration() != null)\r\n        sb.append(\"Configuration: \").append(getConfiguration()).append(\",\");\r\n    if (getSupplementaryConfiguration() != null)\r\n        sb.append(\"SupplementaryConfiguration: \").append(getSupplementaryConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminGetDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AssociateSoftwareTokenResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSecretCode() != null)\r\n        sb.append(\"SecretCode: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2MetadataClient.getEc2MetadataServiceUrlForResource",
	"Comment": "constructs a url to the ec2 metadata service for the specifiedresource path.",
	"Method": "URL getEc2MetadataServiceUrlForResource(String resourcePath){\r\n    String endpoint = EC2_METADATA_SERVICE_URL;\r\n    if (System.getProperty(EC2_METADATA_SERVICE_OVERRIDE_SYSTEM_PROPERTY) != null) {\r\n        endpoint = System.getProperty(EC2_METADATA_SERVICE_OVERRIDE_SYSTEM_PROPERTY);\r\n    }\r\n    return new URL(endpoint + resourcePath);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUserPoolClientsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolClients() != null)\r\n        sb.append(\"UserPoolClients: \").append(getUserPoolClients()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.EC2MetadataUtils.getBlockDeviceMapping",
	"Comment": "get the virtual devices associated with the ami, root, ebs, and swap.",
	"Method": "Map<String, String> getBlockDeviceMapping(){\r\n    Map<String, String> blockDeviceMapping = new HashMap<String, String>();\r\n    List<String> devices = getItems(EC2_METADATA_ROOT + \"/block-device-mapping\");\r\n    if (devices != null) {\r\n        for (String device : devices) {\r\n            blockDeviceMapping.put(device, getData(EC2_METADATA_ROOT + \"/block-device-mapping/\" + device));\r\n        }\r\n    }\r\n    return blockDeviceMapping;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateNumberOfDomainControllersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeDomainControllersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getDomainControllerIds() != null)\r\n        sb.append(\"DomainControllerIds: \").append(getDomainControllerIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AnalyticsConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApplicationId() != null)\r\n        sb.append(\"ApplicationId: \").append(getApplicationId()).append(\",\");\r\n    if (getRoleArn() != null)\r\n        sb.append(\"RoleArn: \").append(getRoleArn()).append(\",\");\r\n    if (getExternalId() != null)\r\n        sb.append(\"ExternalId: \").append(getExternalId()).append(\",\");\r\n    if (getUserDataShared() != null)\r\n        sb.append(\"UserDataShared: \").append(getUserDataShared());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ShareDirectoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedDirectoryId() != null)\r\n        sb.append(\"SharedDirectoryId: \").append(getSharedDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.AgentInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentId() != null)\r\n        sb.append(\"AgentId: \").append(getAgentId()).append(\",\");\r\n    if (getHostName() != null)\r\n        sb.append(\"HostName: \").append(getHostName()).append(\",\");\r\n    if (getAgentNetworkInfoList() != null)\r\n        sb.append(\"AgentNetworkInfoList: \").append(getAgentNetworkInfoList()).append(\",\");\r\n    if (getConnectorId() != null)\r\n        sb.append(\"ConnectorId: \").append(getConnectorId()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getHealth() != null)\r\n        sb.append(\"Health: \").append(getHealth()).append(\",\");\r\n    if (getLastHealthPingTime() != null)\r\n        sb.append(\"LastHealthPingTime: \").append(getLastHealthPingTime()).append(\",\");\r\n    if (getCollectionStatus() != null)\r\n        sb.append(\"CollectionStatus: \").append(getCollectionStatus()).append(\",\");\r\n    if (getAgentType() != null)\r\n        sb.append(\"AgentType: \").append(getAgentType()).append(\",\");\r\n    if (getRegisteredTime() != null)\r\n        sb.append(\"RegisteredTime: \").append(getRegisteredTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminListDevicesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.GetDiscoverySummaryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.AccountSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAwsAccountNumber() != null)\r\n        sb.append(\"AwsAccountNumber: \").append(getAwsAccountNumber()).append(\",\");\r\n    if (getUnmeteredDevices() != null)\r\n        sb.append(\"UnmeteredDevices: \").append(getUnmeteredDevices()).append(\",\");\r\n    if (getUnmeteredRemoteAccessDevices() != null)\r\n        sb.append(\"UnmeteredRemoteAccessDevices: \").append(getUnmeteredRemoteAccessDevices()).append(\",\");\r\n    if (getMaxJobTimeoutMinutes() != null)\r\n        sb.append(\"MaxJobTimeoutMinutes: \").append(getMaxJobTimeoutMinutes()).append(\",\");\r\n    if (getTrialMinutes() != null)\r\n        sb.append(\"TrialMinutes: \").append(getTrialMinutes()).append(\",\");\r\n    if (getMaxSlots() != null)\r\n        sb.append(\"MaxSlots: \").append(getMaxSlots()).append(\",\");\r\n    if (getDefaultJobTimeoutMinutes() != null)\r\n        sb.append(\"DefaultJobTimeoutMinutes: \").append(getDefaultJobTimeoutMinutes()).append(\",\");\r\n    if (getSkipAppResign() != null)\r\n        sb.append(\"SkipAppResign: \").append(getSkipAppResign());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.GetDirectoryLimitsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.listServerNeighbors",
	"Comment": "retrieves a list of servers that are one network hop away from a specified server.",
	"Method": "ListServerNeighborsResult listServerNeighbors(ListServerNeighborsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListServerNeighbors(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.AWSCostAndUsageReportClientBuilder.build",
	"Comment": "construct a synchronous implementation of awscostandusagereport using the current builder configuration.",
	"Method": "AWSCostAndUsageReport build(AwsSyncClientParams params){\r\n    return new AWSCostAndUsageReportClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeResourceServerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceServer() != null)\r\n        sb.append(\"ResourceServer: \").append(getResourceServer());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteAggregationAuthorizationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.ConfirmPublicVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserPoolClientDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientName() != null)\r\n        sb.append(\"ClientName: \").append(getClientName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.SignerFactory.lookupAndCreateSigner",
	"Comment": "internal implementation for looking up and creating a signer by servicename and region.",
	"Method": "Signer lookupAndCreateSigner(String serviceName,String regionName){\r\n    String signerType = lookUpSignerTypeByServiceAndRegion(serviceName, regionName);\r\n    return createSigner(signerType, serviceName);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeEntityRecognizerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntityRecognizerArn() != null)\r\n        sb.append(\"EntityRecognizerArn: \").append(getEntityRecognizerArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateContactAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DeletePipelineResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.PurchaseOfferingResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingTransaction() != null)\r\n        sb.append(\"OfferingTransaction: \").append(getOfferingTransaction());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeSharedDirectoriesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerDirectoryId() != null)\r\n        sb.append(\"OwnerDirectoryId: \").append(getOwnerDirectoryId()).append(\",\");\r\n    if (getSharedDirectoryIds() != null)\r\n        sb.append(\"SharedDirectoryIds: \").append(getSharedDirectoryIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListVPCEConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.getUserAttributeVerificationCode",
	"Comment": "gets the user attribute verification code for the specified attribute name.",
	"Method": "GetUserAttributeVerificationCodeResult getUserAttributeVerificationCode(GetUserAttributeVerificationCodeRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetUserAttributeVerificationCode(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateLocationEfsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Sample.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getUrl() != null)\r\n        sb.append(\"Url: \").append(getUrl());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeIdentityProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ExportInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportId() != null)\r\n        sb.append(\"ExportId: \").append(getExportId()).append(\",\");\r\n    if (getExportStatus() != null)\r\n        sb.append(\"ExportStatus: \").append(getExportStatus()).append(\",\");\r\n    if (getStatusMessage() != null)\r\n        sb.append(\"StatusMessage: \").append(getStatusMessage()).append(\",\");\r\n    if (getConfigurationsDownloadUrl() != null)\r\n        sb.append(\"ConfigurationsDownloadUrl: \").append(getConfigurationsDownloadUrl()).append(\",\");\r\n    if (getExportRequestTime() != null)\r\n        sb.append(\"ExportRequestTime: \").append(getExportRequestTime()).append(\",\");\r\n    if (getIsTruncated() != null)\r\n        sb.append(\"IsTruncated: \").append(getIsTruncated()).append(\",\");\r\n    if (getRequestedStartTime() != null)\r\n        sb.append(\"RequestedStartTime: \").append(getRequestedStartTime()).append(\",\");\r\n    if (getRequestedEndTime() != null)\r\n        sb.append(\"RequestedEndTime: \").append(getRequestedEndTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.StartOutboundVoiceContactRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDestinationPhoneNumber() != null)\r\n        sb.append(\"DestinationPhoneNumber: \").append(getDestinationPhoneNumber()).append(\",\");\r\n    if (getContactFlowId() != null)\r\n        sb.append(\"ContactFlowId: \").append(getContactFlowId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getClientToken() != null)\r\n        sb.append(\"ClientToken: \").append(getClientToken()).append(\",\");\r\n    if (getSourcePhoneNumber() != null)\r\n        sb.append(\"SourcePhoneNumber: \").append(getSourcePhoneNumber()).append(\",\");\r\n    if (getQueueId() != null)\r\n        sb.append(\"QueueId: \").append(getQueueId()).append(\",\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.withGeneralProgressListener",
	"Comment": "sets the optional progress listener for receiving updates about the progress of the request,and returns a reference to this object so that method calls can be chained together.",
	"Method": "T withGeneralProgressListener(ProgressListener progressListener){\r\n    setGeneralProgressListener(progressListener);\r\n    @SuppressWarnings(\"unchecked\")\r\n    T t = (T) this;\r\n    return t;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListSentimentDetectionJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DescribeIdentityUsageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.monitoring.internal.ClientSideMonitoringRequestHandler.trimValueIfExceedsMaxLength",
	"Comment": "if the entry exceeds the maximum length limit associated with the entry, its value will be trimmed to meet its limit.",
	"Method": "String trimValueIfExceedsMaxLength(String entry,String value){\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    String result = value;\r\n    Integer maximumSize = ENTRY_TO_MAX_SIZE.get(entry);\r\n    if (maximumSize != null && value.length() > maximumSize) {\r\n        result = value.substring(0, maximumSize);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtilsTest.readResouceWithCustomRetryPolicy_DoesRetry_ForIoException",
	"Comment": "when readresource is called with custom retry policy and ioexception occurs,the request is retried and the number of retries is equal to the valuereturned by getmaxretries method of the custom retry policy.",
	"Method": "void readResouceWithCustomRetryPolicy_DoesRetry_ForIoException(){\r\n    Mockito.when(mockConnection.connectToEndpoint(eq(endpoint), any(Map.class))).thenThrow(new IOException());\r\n    try {\r\n        new EC2CredentialsUtils(mockConnection).readResource(endpoint, customRetryPolicy, null);\r\n        fail(\"Expected an IOexception\");\r\n    } catch (IOException exception) {\r\n        Mockito.verify(mockConnection, Mockito.times(CustomRetryPolicy.MAX_RETRIES + 1)).connectToEndpoint(eq(endpoint), any(Map.class));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DocumentClassificationJobProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getSubmitTime() != null)\r\n        sb.append(\"SubmitTime: \").append(getSubmitTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getDocumentClassifierArn() != null)\r\n        sb.append(\"DocumentClassifierArn: \").append(getDocumentClassifierArn()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withDisableHostPrefixInjection",
	"Comment": "sets the configuration option to disable the host prefix injection.the hostprefix template is specified in the service model and is used by the sdk to modify the endpointthe request is sent to. host prefix injection is enabled by default. this option can be set to disable the behavior.",
	"Method": "ClientConfiguration withDisableHostPrefixInjection(boolean disableHostPrefixInjection){\r\n    setDisableHostPrefixInjection(disableHostPrefixInjection);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.getPipelineDefinition",
	"Comment": "gets the definition of the specified pipeline. you can call getpipelinedefinition to retrieve thepipeline definition that you provided using putpipelinedefinition.",
	"Method": "GetPipelineDefinitionResult getPipelineDefinition(GetPipelineDefinitionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetPipelineDefinition(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CompromisedCredentialsRiskConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventFilter() != null)\r\n        sb.append(\"EventFilter: \").append(getEventFilter()).append(\",\");\r\n    if (getActions() != null)\r\n        sb.append(\"Actions: \").append(getActions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ComplianceSummaryByResourceType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getComplianceSummary() != null)\r\n        sb.append(\"ComplianceSummary: \").append(getComplianceSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UniqueProblem.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getProblems() != null)\r\n        sb.append(\"Problems: \").append(getProblems());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.getComplianceDetailsByResource",
	"Comment": "returns the evaluation results for the specified aws resource. the results indicate which aws config rules wereused to evaluate the resource, when each rule was last used, and whether the resource complies with each rule.",
	"Method": "GetComplianceDetailsByResourceResult getComplianceDetailsByResource(GetComplianceDetailsByResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetComplianceDetailsByResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateUploadResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUpload() != null)\r\n        sb.append(\"Upload: \").append(getUpload());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes()).append(\",\");\r\n    if (getUserCreateDate() != null)\r\n        sb.append(\"UserCreateDate: \").append(getUserCreateDate()).append(\",\");\r\n    if (getUserLastModifiedDate() != null)\r\n        sb.append(\"UserLastModifiedDate: \").append(getUserLastModifiedDate()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getUserStatus() != null)\r\n        sb.append(\"UserStatus: \").append(getUserStatus()).append(\",\");\r\n    if (getMFAOptions() != null)\r\n        sb.append(\"MFAOptions: \").append(getMFAOptions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.CognitoStreams.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStreamName() != null)\r\n        sb.append(\"StreamName: \").append(getStreamName()).append(\",\");\r\n    if (getRoleArn() != null)\r\n        sb.append(\"RoleArn: \").append(getRoleArn()).append(\",\");\r\n    if (getStreamingStatus() != null)\r\n        sb.append(\"StreamingStatus: \").append(getStreamingStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.Location.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationCode() != null)\r\n        sb.append(\"LocationCode: \").append(getLocationCode()).append(\",\");\r\n    if (getLocationName() != null)\r\n        sb.append(\"LocationName: \").append(getLocationName()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceSummaryByResourceTypeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceTypes() != null)\r\n        sb.append(\"ResourceTypes: \").append(getResourceTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateIdentityProviderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getProviderDetails() != null)\r\n        sb.append(\"ProviderDetails: \").append(getProviderDetails()).append(\",\");\r\n    if (getAttributeMapping() != null)\r\n        sb.append(\"AttributeMapping: \").append(getAttributeMapping()).append(\",\");\r\n    if (getIdpIdentifiers() != null)\r\n        sb.append(\"IdpIdentifiers: \").append(getIdpIdentifiers());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.getPrincipals",
	"Comment": "returns the principals associated with this policy statement, indicatingwhich aws accounts are affected by this policy statement.",
	"Method": "List<Principal> getPrincipals(){\r\n    return principals;\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtils.readResource",
	"Comment": "connects to the given endpoint to read the resourceand returns the text contents.",
	"Method": "String readResource(URI endpoint,String readResource,URI endpoint,CredentialsEndpointRetryPolicy retryPolicy,Map<String, String> headers){\r\n    int retriesAttempted = 0;\r\n    InputStream inputStream = null;\r\n    headers = addDefaultHeaders(headers);\r\n    while (true) {\r\n        try {\r\n            HttpURLConnection connection = connectionUtils.connectToEndpoint(endpoint, headers);\r\n            int statusCode = connection.getResponseCode();\r\n            if (statusCode == HttpURLConnection.HTTP_OK) {\r\n                inputStream = connection.getInputStream();\r\n                return IOUtils.toString(inputStream);\r\n            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\r\n                throw new SdkClientException(\"The requested metadata is not found at \" + connection.getURL());\r\n            } else {\r\n                if (!retryPolicy.shouldRetry(retriesAttempted++, CredentialsEndpointRetryParameters.builder().withStatusCode(statusCode).build())) {\r\n                    inputStream = connection.getErrorStream();\r\n                    handleErrorResponse(inputStream, statusCode, connection.getResponseMessage());\r\n                }\r\n            }\r\n        } catch (IOException ioException) {\r\n            if (!retryPolicy.shouldRetry(retriesAttempted++, CredentialsEndpointRetryParameters.builder().withException(ioException).build())) {\r\n                throw ioException;\r\n            }\r\n            LOG.debug(\"An IOException occured when connecting to service endpoint: \" + endpoint + \"\\n Retrying to connect again.\");\r\n        } finally {\r\n            IOUtils.closeQuietly(inputStream, LOG);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ResourceCount.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getCount() != null)\r\n        sb.append(\"Count: \").append(getCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.describePipelines",
	"Comment": "retrieves metadata about one or more pipelines. the information retrieved includes the name of the pipeline, thepipeline identifier, its current state, and the user account that owns the pipeline. using account credentials,you can retrieve metadata about pipelines that you or your iam users have created. if you are using an iam useraccount, you can retrieve metadata about only those pipelines for which you have read permissions.to retrieve the full pipeline definition instead of metadata about the pipeline, callgetpipelinedefinition.",
	"Method": "DescribePipelinesResult describePipelines(DescribePipelinesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribePipelines(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.StopJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJob() != null)\r\n        sb.append(\"Job: \").append(getJob());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Artifact.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getExtension() != null)\r\n        sb.append(\"Extension: \").append(getExtension()).append(\",\");\r\n    if (getUrl() != null)\r\n        sb.append(\"Url: \").append(getUrl());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectKeyPhrasesItemResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIndex() != null)\r\n        sb.append(\"Index: \").append(getIndex()).append(\",\");\r\n    if (getKeyPhrases() != null)\r\n        sb.append(\"KeyPhrases: \").append(getKeyPhrases());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.GetMetricDataResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMetricResults() != null)\r\n        sb.append(\"MetricResults: \").append(getMetricResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeExportTasksRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportIds() != null)\r\n        sb.append(\"ExportIds: \").append(getExportIds()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awscognitoidentityproviderasync using the current builderconfiguration.",
	"Method": "AWSCognitoIdentityProviderAsync build(AwsAsyncClientParams params){\r\n    return new AWSCognitoIdentityProviderAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DeleteUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazoncognitosync using the current builder configuration.",
	"Method": "AmazonCognitoSync build(AwsSyncClientParams params){\r\n    return new AmazonCognitoSyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateComplianceDetailsByConfigRuleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAggregateEvaluationResults() != null)\r\n        sb.append(\"AggregateEvaluationResults: \").append(getAggregateEvaluationResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.getRequestCredentials",
	"Comment": "returns the optional credentials to use to sign this request, overriding the defaultcredentials set at the client level.",
	"Method": "AWSCredentials getRequestCredentials(){\r\n    return credentialsProvider == null ? null : credentialsProvider.getCredentials();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsAsyncClientBuilder.setExecutorFactory",
	"Comment": "sets a custom executor service factory to use for the async clients. the factory will becalled for each async client created through the builder.",
	"Method": "void setExecutorFactory(ExecutorFactory executorFactory){\r\n    this.executorFactory = executorFactory;\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartEntitiesDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getEntityRecognizerArn() != null)\r\n        sb.append(\"EntityRecognizerArn: \").append(getEntityRecognizerArn()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.listDatasets",
	"Comment": "lists datasets for an identity. with amazon cognito sync, each identity has access only to its own data. thus,the credentials used to make this api call need to have access to the identity data.listdatasets can be called with temporary user credentials provided by cognito identity or with developercredentials. you should use the cognito identity credentials to make this api call.",
	"Method": "ListDatasetsResult listDatasets(ListDatasetsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListDatasets(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.GetLifecyclePoliciesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyIds() != null)\r\n        sb.append(\"PolicyIds: \").append(getPolicyIds()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getResourceTypes() != null)\r\n        sb.append(\"ResourceTypes: \").append(getResourceTypes()).append(\",\");\r\n    if (getTargetTags() != null)\r\n        sb.append(\"TargetTags: \").append(getTargetTags()).append(\",\");\r\n    if (getTagsToAdd() != null)\r\n        sb.append(\"TagsToAdd: \").append(getTagsToAdd());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ChangePasswordRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPreviousPassword() != null)\r\n        sb.append(\"PreviousPassword: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getProposedPassword() != null)\r\n        sb.append(\"ProposedPassword: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.metrics.ByteThroughputProvider.getProviderId",
	"Comment": "returns a provider id that can be used to compute the number of activebyte throughput provider of a specific metric type being active in agiven time interval.",
	"Method": "String getProviderId(){\r\n    return super.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteDevicePoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.RespondToAuthChallengeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getChallengeName() != null)\r\n        sb.append(\"ChallengeName: \").append(getChallengeName()).append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession()).append(\",\");\r\n    if (getChallengeParameters() != null)\r\n        sb.append(\"ChallengeParameters: \").append(getChallengeParameters()).append(\",\");\r\n    if (getAuthenticationResult() != null)\r\n        sb.append(\"AuthenticationResult: \").append(getAuthenticationResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreatePublicVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceType() != null)\r\n        sb.append(\"VirtualInterfaceType: \").append(getVirtualInterfaceType()).append(\",\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState()).append(\",\");\r\n    if (getCustomerRouterConfig() != null)\r\n        sb.append(\"CustomerRouterConfig: \").append(getCustomerRouterConfig()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes()).append(\",\");\r\n    if (getBgpPeers() != null)\r\n        sb.append(\"BgpPeers: \").append(getBgpPeers()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeDeliveryChannelStatusAsync",
	"Comment": "simplified method form for invoking the describedeliverychannelstatus operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync(DescribeDeliveryChannelStatusRequest request,java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync,DescribeDeliveryChannelStatusRequest request,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelStatusRequest, DescribeDeliveryChannelStatusResult> asyncHandler,java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync,java.util.concurrent.Future<DescribeDeliveryChannelStatusResult> describeDeliveryChannelStatusAsync,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelStatusRequest, DescribeDeliveryChannelStatusResult> asyncHandler){\r\n    return describeDeliveryChannelStatusAsync(new DescribeDeliveryChannelStatusRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DomainController.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getDomainControllerId() != null)\r\n        sb.append(\"DomainControllerId: \").append(getDomainControllerId()).append(\",\");\r\n    if (getDnsIpAddr() != null)\r\n        sb.append(\"DnsIpAddr: \").append(getDnsIpAddr()).append(\",\");\r\n    if (getVpcId() != null)\r\n        sb.append(\"VpcId: \").append(getVpcId()).append(\",\");\r\n    if (getSubnetId() != null)\r\n        sb.append(\"SubnetId: \").append(getSubnetId()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStatusReason() != null)\r\n        sb.append(\"StatusReason: \").append(getStatusReason()).append(\",\");\r\n    if (getLaunchTime() != null)\r\n        sb.append(\"LaunchTime: \").append(getLaunchTime()).append(\",\");\r\n    if (getStatusLastUpdatedDateTime() != null)\r\n        sb.append(\"StatusLastUpdatedDateTime: \").append(getStatusLastUpdatedDateTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminEnableUser",
	"Comment": "enables the specified user as an administrator. works on any user.requires developer credentials.",
	"Method": "AdminEnableUserResult adminEnableUser(AdminEnableUserRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminEnableUser(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.describeUserHierarchyStructure",
	"Comment": "returns a hiearchygroupstructure object, which contains data about the levels in the agenthierarchy.",
	"Method": "DescribeUserHierarchyStructureResult describeUserHierarchyStructure(DescribeUserHierarchyStructureRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeUserHierarchyStructure(request);\r\n}"
}, {
	"Path": "com.amazonaws.util.Md5Utils.computeMD5Hash",
	"Comment": "computes the md5 hash of the given data and returns it as an array ofbytes.",
	"Method": "byte[] computeMD5Hash(InputStream is,byte[] computeMD5Hash,byte[] input,byte[] computeMD5Hash,File file){\r\n    return computeMD5Hash(new FileInputStream(file));\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeDirectConnectGatewaysRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateVPCEConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getVpceConfigurationName() != null)\r\n        sb.append(\"VpceConfigurationName: \").append(getVpceConfigurationName()).append(\",\");\r\n    if (getVpceServiceName() != null)\r\n        sb.append(\"VpceServiceName: \").append(getVpceServiceName()).append(\",\");\r\n    if (getServiceDnsName() != null)\r\n        sb.append(\"ServiceDnsName: \").append(getServiceDnsName()).append(\",\");\r\n    if (getVpceConfigurationDescription() != null)\r\n        sb.append(\"VpceConfigurationDescription: \").append(getVpceConfigurationDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DeactivatePipelineRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getCancelActive() != null)\r\n        sb.append(\"CancelActive: \").append(getCancelActive());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListLocationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsClientBuilder.determineRegionFromRegionProvider",
	"Comment": "attempt to determine the region from the configured region provider. this will return null in the event that theregion provider could not determine the region automatically.",
	"Method": "String determineRegionFromRegionProvider(){\r\n    try {\r\n        return regionProvider.getRegion();\r\n    } catch (SdkClientException e) {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.CredentialScope.setRegion",
	"Comment": "sets the region string to be used when signing a request for anendpoint.",
	"Method": "void setRegion(String region){\r\n    this.region = region;\r\n}"
}, {
	"Path": "com.amazonaws.transform.LegacyErrorUnmarshaller.parseErrorCode",
	"Comment": "returns the aws error code for the specified error response.",
	"Method": "String parseErrorCode(Node in,String parseErrorCode,Node in,XPath xpath){\r\n    return asString(\"Response/Errors/Error/Code\", in, xpath);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.describeDataset",
	"Comment": "gets meta data about a dataset by identity and dataset name. with amazon cognito sync, each identity has accessonly to its own data. thus, the credentials used to make this api call need to have access to the identity data.this api can be called with temporary user credentials provided by cognito identity or with developercredentials. you should use cognito identity credentials to make this api call.",
	"Method": "DescribeDatasetResult describeDataset(DescribeDatasetRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDataset(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UpdateParameterGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName()).append(\",\");\r\n    if (getParameterNameValues() != null)\r\n        sb.append(\"ParameterNameValues: \").append(getParameterNameValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeSentimentDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSentimentDetectionJobProperties() != null)\r\n        sb.append(\"SentimentDetectionJobProperties: \").append(getSentimentDetectionJobProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeLocationS3Result.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn()).append(\",\");\r\n    if (getLocationUri() != null)\r\n        sb.append(\"LocationUri: \").append(getLocationUri()).append(\",\");\r\n    if (getS3Config() != null)\r\n        sb.append(\"S3Config: \").append(getS3Config()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.RuntimeHttpUtils.convertRequestToUrl",
	"Comment": "converts the specified request object into a url, containing all the specified parameters, the specified request endpoint,etc.",
	"Method": "URL convertRequestToUrl(Request<?> request,boolean removeLeadingSlashInResourcePath,boolean urlEncode){\r\n    String resourcePath = urlEncode ? SdkHttpUtils.urlEncode(request.getResourcePath(), true) : request.getResourcePath();\r\n    if (removeLeadingSlashInResourcePath && resourcePath.startsWith(\"/\")) {\r\n        resourcePath = resourcePath.substring(1);\r\n    }\r\n    String urlPath = \"/\" + resourcePath;\r\n    urlPath = urlPath.replaceAll(\"(?<=/)/\", \"/\");\r\n    StringBuilder url = new StringBuilder(request.getEndpoint().toString());\r\n    url.append(urlPath);\r\n    StringBuilder queryParams = new StringBuilder();\r\n    Map<String, List<String>> requestParams = request.getParameters();\r\n    for (Map.Entry<String, List<String>> entry : requestParams.entrySet()) {\r\n        for (String value : entry.getValue()) {\r\n            queryParams = queryParams.length() > 0 ? queryParams.append(\"&\") : queryParams.append(\"?\");\r\n            queryParams.append(SdkHttpUtils.urlEncode(entry.getKey(), false)).append(\"=\").append(SdkHttpUtils.urlEncode(value, false));\r\n        }\r\n    }\r\n    url.append(queryParams.toString());\r\n    try {\r\n        return new URL(url.toString());\r\n    } catch (MalformedURLException e) {\r\n        throw new SdkClientException(\"Unable to convert request to well formed URL: \" + e.getMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionUtils.getRegionsForService",
	"Comment": "returns a list of the regions that support the service given.",
	"Method": "List<Region> getRegionsForService(String serviceAbbreviation){\r\n    return getRegionMetadata().getRegionsForService(serviceAbbreviation);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SoftwareTokenMfaConfigType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeDocumentClassificationJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassificationJobProperties() != null)\r\n        sb.append(\"DocumentClassificationJobProperties: \").append(getDocumentClassificationJobProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClientBuilder.build",
	"Comment": "construct a synchronous implementation of datapipeline using the current builder configuration.",
	"Method": "DataPipeline build(AwsSyncClientParams params){\r\n    return new DataPipelineClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AssociateVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminListGroupsForUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroups() != null)\r\n        sb.append(\"Groups: \").append(getGroups()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListDominantLanguageDetectionJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deleteDeliveryChannel",
	"Comment": "deletes the delivery channel.before you can delete the delivery channel, you must stop the configuration recorder by using thestopconfigurationrecorder action.",
	"Method": "DeleteDeliveryChannelResult deleteDeliveryChannel(DeleteDeliveryChannelRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDeliveryChannel(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigurationAggregator.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getConfigurationAggregatorArn() != null)\r\n        sb.append(\"ConfigurationAggregatorArn: \").append(getConfigurationAggregatorArn()).append(\",\");\r\n    if (getAccountAggregationSources() != null)\r\n        sb.append(\"AccountAggregationSources: \").append(getAccountAggregationSources()).append(\",\");\r\n    if (getOrganizationAggregationSource() != null)\r\n        sb.append(\"OrganizationAggregationSource: \").append(getOrganizationAggregationSource()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime()).append(\",\");\r\n    if (getLastUpdatedTime() != null)\r\n        sb.append(\"LastUpdatedTime: \").append(getLastUpdatedTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeDefaultParametersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getParameters() != null)\r\n        sb.append(\"Parameters: \").append(getParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminDisableUser",
	"Comment": "disables the specified user as an administrator. works on any user.requires developer credentials.",
	"Method": "AdminDisableUserResult adminDisableUser(AdminDisableUserRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminDisableUser(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUsersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getAttributesToGet() != null)\r\n        sb.append(\"AttributesToGet: \").append(getAttributesToGet()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken()).append(\",\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateSnapshotResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnapshotId() != null)\r\n        sb.append(\"SnapshotId: \").append(getSnapshotId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationSubnetGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getReplicationSubnetGroups() != null)\r\n        sb.append(\"ReplicationSubnetGroups: \").append(getReplicationSubnetGroups());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.startExportTask",
	"Comment": "begins the export of discovered data to an s3 bucket.if you specify agentids in a filter, the task exports up to 72 hours of detailed data collected bythe identified application discovery agent, including network, process, and performance details. a time range forexported agent data may be set by using starttime and endtime. export of detailed agentdata is limited to five concurrently running exports.if you do not include an agentids filter, summary data is exported that includes both aws agentlessdiscovery connector data and summary data from aws discovery agents. export of summary data is limited to twoexports per day.",
	"Method": "StartExportTaskResult startExportTask(StartExportTaskRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartExportTask(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeRetentionConfigurations",
	"Comment": "returns the details of one or more retention configurations. if the retention configuration name is notspecified, this action returns the details for all the retention configurations for that account.currently, aws config supports only one retention configuration per region in your account.",
	"Method": "DescribeRetentionConfigurationsResult describeRetentionConfigurations(DescribeRetentionConfigurationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeRetentionConfigurations(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectDominantLanguageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTextList() != null)\r\n        sb.append(\"TextList: \").append(getTextList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ResendConfirmationCodeRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSecretHash() != null)\r\n        sb.append(\"SecretHash: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserContextData() != null)\r\n        sb.append(\"UserContextData: \").append(getUserContextData()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartTopicsDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.describeIdentityUsage",
	"Comment": "gets usage information for an identity, including number of datasets and data usage.this api can be called with temporary user credentials provided by cognito identity or with developercredentials.",
	"Method": "DescribeIdentityUsageResult describeIdentityUsage(DescribeIdentityUsageRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeIdentityUsage(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeTags",
	"Comment": "describes the tags associated with the specified aws direct connect resources.",
	"Method": "DescribeTagsResult describeTags(DescribeTagsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTags(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutAggregationAuthorizationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAggregationAuthorization() != null)\r\n        sb.append(\"AggregationAuthorization: \").append(getAggregationAuthorization());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteResourceServerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getIdentifier() != null)\r\n        sb.append(\"Identifier: \").append(getIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DeleteTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationIds() != null)\r\n        sb.append(\"ConfigurationIds: \").append(getConfigurationIds()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeRefreshSchemasStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getUnmarshaller",
	"Comment": "returns the jsonunmarshaller for requested custom unmarshaller type. returns null by default.",
	"Method": "Unmarshaller<T, JsonUnmarshallerContext> getUnmarshaller(Class<T> type,Unmarshaller<T, JsonUnmarshallerContext> getUnmarshaller,Class<T> type,UnmarshallerType unmarshallerType){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ChangePasswordResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DeleteDatasetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDataset() != null)\r\n        sb.append(\"Dataset: \").append(getDataset());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeliveryChannelStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getConfigSnapshotDeliveryInfo() != null)\r\n        sb.append(\"ConfigSnapshotDeliveryInfo: \").append(getConfigSnapshotDeliveryInfo()).append(\",\");\r\n    if (getConfigHistoryDeliveryInfo() != null)\r\n        sb.append(\"ConfigHistoryDeliveryInfo: \").append(getConfigHistoryDeliveryInfo()).append(\",\");\r\n    if (getConfigStreamDeliveryInfo() != null)\r\n        sb.append(\"ConfigStreamDeliveryInfo: \").append(getConfigStreamDeliveryInfo());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectDominantLanguageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.request.impl.ApacheHttpRequestFactory.addProxyConfig",
	"Comment": "update the provided request configuration builder to specify the proxy authentication schemes that should be used whenauthenticating against the http proxy.",
	"Method": "void addProxyConfig(RequestConfig.Builder requestConfigBuilder,HttpClientSettings settings){\r\n    if (settings.isProxyEnabled() && settings.isAuthenticatedProxy() && settings.getProxyAuthenticationMethods() != null) {\r\n        List<String> apacheAuthenticationSchemes = new ArrayList<String>();\r\n        for (ProxyAuthenticationMethod authenticationMethod : settings.getProxyAuthenticationMethods()) {\r\n            apacheAuthenticationSchemes.add(toApacheAuthenticationScheme(authenticationMethod));\r\n        }\r\n        requestConfigBuilder.setProxyPreferredAuthSchemes(apacheAuthenticationSchemes);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.RequestClientOptions.copyTo",
	"Comment": "copy the internal states of this requestclientoptions to thetarget requestclientoptions.",
	"Method": "void copyTo(RequestClientOptions target){\r\n    target.setReadLimit(getReadLimit());\r\n    for (Marker marker : Marker.values()) target.putClientMarker(marker, getClientMarker(marker));\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeHostedConnectionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListUploadsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUploads() != null)\r\n        sb.append(\"Uploads: \").append(getUploads()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.InstanceDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEC2InstanceDetails() != null)\r\n        sb.append(\"EC2InstanceDetails: \").append(getEC2InstanceDetails()).append(\",\");\r\n    if (getRDSInstanceDetails() != null)\r\n        sb.append(\"RDSInstanceDetails: \").append(getRDSInstanceDetails()).append(\",\");\r\n    if (getRedshiftInstanceDetails() != null)\r\n        sb.append(\"RedshiftInstanceDetails: \").append(getRedshiftInstanceDetails()).append(\",\");\r\n    if (getElastiCacheInstanceDetails() != null)\r\n        sb.append(\"ElastiCacheInstanceDetails: \").append(getElastiCacheInstanceDetails()).append(\",\");\r\n    if (getESInstanceDetails() != null)\r\n        sb.append(\"ESInstanceDetails: \").append(getESInstanceDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtils.xpath",
	"Comment": "returns a new instance of xpath, which is not thread safe and notreentrant.",
	"Method": "XPath xpath(){\r\n    return X_PATH_FACTORY.get().newXPath();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClientBuilder.build",
	"Comment": "construct a synchronous implementation of awsdatasync using the current builder configuration.",
	"Method": "AWSDataSync build(AwsSyncClientParams params){\r\n    return new AWSDataSyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.log.InternalLogFactory.configureFactory",
	"Comment": "used to explicitly configure the log factory. the log factory can only beconfigured at most once. all subsequent configurations will have noeffect.note explicitly configuring the log factory will have positiveperformance impact on all subsequent logging, since the specific loggercan be directly referenced instead of being searched every time.",
	"Method": "boolean configureFactory(InternalLogFactory factory){\r\n    if (factory == null)\r\n        throw new IllegalArgumentException();\r\n    if (factoryConfigured)\r\n        return false;\r\n    InternalLogFactory.factory = factory;\r\n    factoryConfigured = true;\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.http.timers.ClientExecutionAndRequestTimerTestUtils.assertCanceledTasksRemoved",
	"Comment": "if the request completes successfully then the timer task should be canceled and should beremoved from the thread pool to prevent build up of canceled tasks",
	"Method": "void assertCanceledTasksRemoved(ScheduledThreadPoolExecutor timerExecutor){\r\n    waitBeforeAssertOnExecutor();\r\n    assertEquals(0, timerExecutor.getQueue().size());\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.Subnet.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetIdentifier() != null)\r\n        sb.append(\"SubnetIdentifier: \").append(getSubnetIdentifier()).append(\",\");\r\n    if (getSubnetAvailabilityZone() != null)\r\n        sb.append(\"SubnetAvailabilityZone: \").append(getSubnetAvailabilityZone());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeLocationNfsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn()).append(\",\");\r\n    if (getLocationUri() != null)\r\n        sb.append(\"LocationUri: \").append(getLocationUri()).append(\",\");\r\n    if (getOnPremConfig() != null)\r\n        sb.append(\"OnPremConfig: \").append(getOnPremConfig()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.CapacityManagerTest.release",
	"Comment": "tests that capacity can be properly released, making additional capacityavailable to be acquired.",
	"Method": "void release(){\r\n    CapacityManager mgr = new CapacityManager(10);\r\n    mgr.acquire(10);\r\n    mgr.release();\r\n    Assert.assertEquals(mgr.availableCapacity(), 1);\r\n    Assert.assertEquals(mgr.consumedCapacity(), 9);\r\n    mgr.release(50);\r\n    Assert.assertEquals(mgr.availableCapacity(), 10);\r\n    Assert.assertEquals(mgr.consumedCapacity(), 0);\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtilsTest.testAsDate",
	"Comment": "tests that we can correctly parse out a date from an xml document.",
	"Method": "void testAsDate(){\r\n    Calendar expectedDate = new GregorianCalendar();\r\n    expectedDate.set(Calendar.YEAR, 2008);\r\n    expectedDate.set(Calendar.MONTH, Calendar.OCTOBER);\r\n    expectedDate.set(Calendar.DAY_OF_MONTH, 7);\r\n    expectedDate.set(Calendar.AM_PM, Calendar.AM);\r\n    expectedDate.set(Calendar.HOUR, 11);\r\n    expectedDate.set(Calendar.MINUTE, 51);\r\n    expectedDate.set(Calendar.SECOND, 50);\r\n    expectedDate.set(Calendar.MILLISECOND, 0);\r\n    expectedDate.setTimeZone(new SimpleTimeZone(0, \"UTC\"));\r\n    Document document = documentFrom(DOCUMENT);\r\n    XPath xpath = xpath();\r\n    Date date = XpathUtils.asDate(\"Foo/Since\", document, xpath);\r\n    assertNotNull(date);\r\n    assertEquals(expectedDate.getTimeInMillis(), date.getTime());\r\n    assertEquals(null, asDate(\"Foo/Empty\", document, xpath));\r\n}"
}, {
	"Path": "com.amazonaws.util.VersionInfoUtils.getVersion",
	"Comment": "returns the current version for the aws sdk in which this class isrunning. version information is obtained from from theversioninfo.properties file which the aws java sdk build processgenerates.",
	"Method": "String getVersion(){\r\n    if (version == null) {\r\n        synchronized (VersionInfoUtils.class) {\r\n            if (version == null)\r\n                initializeVersion();\r\n        }\r\n    }\r\n    return version;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.describeParameters",
	"Comment": "returns the detailed parameter list for a particular parameter group.",
	"Method": "DescribeParametersResult describeParameters(DescribeParametersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeParameters(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDevicePoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.DetectPHIRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RegisterEventTopicResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.Endpoint.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointIdentifier() != null)\r\n        sb.append(\"EndpointIdentifier: \").append(getEndpointIdentifier()).append(\",\");\r\n    if (getEndpointType() != null)\r\n        sb.append(\"EndpointType: \").append(getEndpointType()).append(\",\");\r\n    if (getEngineName() != null)\r\n        sb.append(\"EngineName: \").append(getEngineName()).append(\",\");\r\n    if (getEngineDisplayName() != null)\r\n        sb.append(\"EngineDisplayName: \").append(getEngineDisplayName()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(getUsername()).append(\",\");\r\n    if (getServerName() != null)\r\n        sb.append(\"ServerName: \").append(getServerName()).append(\",\");\r\n    if (getPort() != null)\r\n        sb.append(\"Port: \").append(getPort()).append(\",\");\r\n    if (getDatabaseName() != null)\r\n        sb.append(\"DatabaseName: \").append(getDatabaseName()).append(\",\");\r\n    if (getExtraConnectionAttributes() != null)\r\n        sb.append(\"ExtraConnectionAttributes: \").append(getExtraConnectionAttributes()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getKmsKeyId() != null)\r\n        sb.append(\"KmsKeyId: \").append(getKmsKeyId()).append(\",\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getSslMode() != null)\r\n        sb.append(\"SslMode: \").append(getSslMode()).append(\",\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn()).append(\",\");\r\n    if (getExternalTableDefinition() != null)\r\n        sb.append(\"ExternalTableDefinition: \").append(getExternalTableDefinition()).append(\",\");\r\n    if (getExternalId() != null)\r\n        sb.append(\"ExternalId: \").append(getExternalId()).append(\",\");\r\n    if (getDynamoDbSettings() != null)\r\n        sb.append(\"DynamoDbSettings: \").append(getDynamoDbSettings()).append(\",\");\r\n    if (getS3Settings() != null)\r\n        sb.append(\"S3Settings: \").append(getS3Settings()).append(\",\");\r\n    if (getDmsTransferSettings() != null)\r\n        sb.append(\"DmsTransferSettings: \").append(getDmsTransferSettings()).append(\",\");\r\n    if (getMongoDbSettings() != null)\r\n        sb.append(\"MongoDbSettings: \").append(getMongoDbSettings()).append(\",\");\r\n    if (getKinesisSettings() != null)\r\n        sb.append(\"KinesisSettings: \").append(getKinesisSettings()).append(\",\");\r\n    if (getElasticsearchSettings() != null)\r\n        sb.append(\"ElasticsearchSettings: \").append(getElasticsearchSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.UpdateRecordsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getDatasetName() != null)\r\n        sb.append(\"DatasetName: \").append(getDatasetName()).append(\",\");\r\n    if (getDeviceId() != null)\r\n        sb.append(\"DeviceId: \").append(getDeviceId()).append(\",\");\r\n    if (getRecordPatches() != null)\r\n        sb.append(\"RecordPatches: \").append(getRecordPatches()).append(\",\");\r\n    if (getSyncSessionToken() != null)\r\n        sb.append(\"SyncSessionToken: \").append(getSyncSessionToken()).append(\",\");\r\n    if (getClientContext() != null)\r\n        sb.append(\"ClientContext: \").append(getClientContext());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonServiceException.getRawResponseContent",
	"Comment": "typically only useful for debugging purpose if for some reason the sdk cannot parse the httpresponse from a service",
	"Method": "String getRawResponseContent(){\r\n    return rawResponse == null ? null : new String(rawResponse, StringUtils.UTF8);\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyTest.testCannotCreateStatementWithBothResourceAndNotResource",
	"Comment": "tests that constructing a statement with a resource and a notresource element will fail",
	"Method": "void testCannotCreateStatementWithBothResourceAndNotResource(){\r\n    new Policy(\"S3PolicyId1\").withStatements(new Statement(Effect.Allow).withId(\"0\").withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action1\")).withResources(new Resource(\"any-resource\").withIsNotType(true), new Resource(\"any-other-resource\")));\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeDirectConnectGatewayAssociations",
	"Comment": "lists the associations between your direct connect gateways and virtual private gateways. you must specify adirect connect gateway, a virtual private gateway, or both. if you specify a direct connect gateway, the responsecontains all virtual private gateways associated with the direct connect gateway. if you specify a virtualprivate gateway, the response contains all direct connect gateways associated with the virtual private gateway.if you specify both, the response contains the association between the direct connect gateway and the virtualprivate gateway.",
	"Method": "DescribeDirectConnectGatewayAssociationsResult describeDirectConnectGatewayAssociations(DescribeDirectConnectGatewayAssociationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDirectConnectGatewayAssociations(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectSyntaxRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.RegisterDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceId() != null)\r\n        sb.append(\"DeviceId: \").append(getDeviceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CustomDomainConfigType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeTopicsDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTopicsDetectionJobProperties() != null)\r\n        sb.append(\"TopicsDetectionJobProperties: \").append(getTopicsDetectionJobProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.TagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.WaiterExecution.pollResource",
	"Comment": "polls until a specified resource transitions into either success or failure state oruntil the specified number of retries has been made.",
	"Method": "boolean pollResource(){\r\n    int retriesAttempted = 0;\r\n    while (true) {\r\n        switch(getCurrentState()) {\r\n            case SUCCESS:\r\n                return true;\r\n            case FAILURE:\r\n                throw new WaiterUnrecoverableException(\"Resource never entered the desired state as it failed.\");\r\n            case RETRY:\r\n                PollingStrategyContext pollingStrategyContext = new PollingStrategyContext(request, retriesAttempted);\r\n                if (pollingStrategy.getRetryStrategy().shouldRetry(pollingStrategyContext)) {\r\n                    safeCustomDelay(pollingStrategyContext);\r\n                    retriesAttempted++;\r\n                } else {\r\n                    throw new WaiterTimedOutException(\"Reached maximum attempts without transitioning to the desired state\");\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocatePublicVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceType() != null)\r\n        sb.append(\"VirtualInterfaceType: \").append(getVirtualInterfaceType()).append(\",\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState()).append(\",\");\r\n    if (getCustomerRouterConfig() != null)\r\n        sb.append(\"CustomerRouterConfig: \").append(getCustomerRouterConfig()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes()).append(\",\");\r\n    if (getBgpPeers() != null)\r\n        sb.append(\"BgpPeers: \").append(getBgpPeers()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AddCustomAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeLocationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocations() != null)\r\n        sb.append(\"Locations: \").append(getLocations());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.LengthCheckInputStreamTest.testMarkInitiallyAndReset",
	"Comment": "this test case initiates a mark at the start, reads the first 100 bytesfrom the stream. now the stream is reset and it is drained. at the lastread, the length validation must be success.",
	"Method": "void testMarkInitiallyAndReset(){\r\n    InputStream in = new ByteArrayInputStream(sampleData.getBytes());\r\n    LengthCheckInputStream rvis = new LengthCheckInputStream(in, sampleData.getBytes().length, INCLUDE_SKIPPED_BYTES);\r\n    rvis.mark(100);\r\n    rvis.read(new byte[100]);\r\n    rvis.reset();\r\n    rvis.read(new byte[sampleData.getBytes().length]);\r\n    try {\r\n        rvis.read();\r\n    } catch (Exception e) {\r\n        fail();\r\n    }\r\n    rvis.close();\r\n    StreamUtils.consumeInputStream(rvis);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectSyntaxRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTextList() != null)\r\n        sb.append(\"TextList: \").append(getTextList()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.OrganizationAggregationSource.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRoleArn() != null)\r\n        sb.append(\"RoleArn: \").append(getRoleArn()).append(\",\");\r\n    if (getAwsRegions() != null)\r\n        sb.append(\"AwsRegions: \").append(getAwsRegions()).append(\",\");\r\n    if (getAllAwsRegions() != null)\r\n        sb.append(\"AllAwsRegions: \").append(getAllAwsRegions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.AddTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeviceConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getChallengeRequiredOnNewDevice() != null)\r\n        sb.append(\"ChallengeRequiredOnNewDevice: \").append(getChallengeRequiredOnNewDevice()).append(\",\");\r\n    if (getDeviceOnlyRememberedOnUserPrompt() != null)\r\n        sb.append(\"DeviceOnlyRememberedOnUserPrompt: \").append(getDeviceOnlyRememberedOnUserPrompt());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.config.InternalConfig.getHttpClientConfig",
	"Comment": "returns the http client configuration for the http client name.",
	"Method": "HttpClientConfig getHttpClientConfig(String httpClientName){\r\n    return httpClients.get(httpClientName);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.CreateUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(getUsername()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(getPassword()).append(\",\");\r\n    if (getIdentityInfo() != null)\r\n        sb.append(\"IdentityInfo: \").append(getIdentityInfo()).append(\",\");\r\n    if (getPhoneConfig() != null)\r\n        sb.append(\"PhoneConfig: \").append(getPhoneConfig()).append(\",\");\r\n    if (getDirectoryUserId() != null)\r\n        sb.append(\"DirectoryUserId: \").append(getDirectoryUserId()).append(\",\");\r\n    if (getSecurityProfileIds() != null)\r\n        sb.append(\"SecurityProfileIds: \").append(getSecurityProfileIds()).append(\",\");\r\n    if (getRoutingProfileId() != null)\r\n        sb.append(\"RoutingProfileId: \").append(getRoutingProfileId()).append(\",\");\r\n    if (getHierarchyGroupId() != null)\r\n        sb.append(\"HierarchyGroupId: \").append(getHierarchyGroupId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deleteAggregationAuthorization",
	"Comment": "deletes the authorization granted to the specified configuration aggregator account in a specified region.",
	"Method": "DeleteAggregationAuthorizationResult deleteAggregationAuthorization(DeleteAggregationAuthorizationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteAggregationAuthorization(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.GetLifecyclePoliciesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicies() != null)\r\n        sb.append(\"Policies: \").append(getPolicies());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.getComplianceSummaryByResourceTypeAsync",
	"Comment": "simplified method form for invoking the getcompliancesummarybyresourcetype operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync(GetComplianceSummaryByResourceTypeRequest request,java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync,GetComplianceSummaryByResourceTypeRequest request,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByResourceTypeRequest, GetComplianceSummaryByResourceTypeResult> asyncHandler,java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync,java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByResourceTypeRequest, GetComplianceSummaryByResourceTypeResult> asyncHandler){\r\n    return getComplianceSummaryByResourceTypeAsync(new GetComplianceSummaryByResourceTypeRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteResourceServerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.VerifyTrustResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectSentimentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSentiment() != null)\r\n        sb.append(\"Sentiment: \").append(getSentiment()).append(\",\");\r\n    if (getSentimentScore() != null)\r\n        sb.append(\"SentimentScore: \").append(getSentimentScore());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeDeliveryChannelsAsync",
	"Comment": "simplified method form for invoking the describedeliverychannels operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync(DescribeDeliveryChannelsRequest request,java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync,DescribeDeliveryChannelsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelsRequest, DescribeDeliveryChannelsResult> asyncHandler,java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync,java.util.concurrent.Future<DescribeDeliveryChannelsResult> describeDeliveryChannelsAsync,com.amazonaws.handlers.AsyncHandler<DescribeDeliveryChannelsRequest, DescribeDeliveryChannelsResult> asyncHandler){\r\n    return describeDeliveryChannelsAsync(new DescribeDeliveryChannelsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.listRoutingProfiles",
	"Comment": "returns an array of routingprofilesummary objects that includes information about the routingprofiles in your instance.",
	"Method": "ListRoutingProfilesResult listRoutingProfiles(ListRoutingProfilesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListRoutingProfiles(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ElastiCacheInstanceDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFamily() != null)\r\n        sb.append(\"Family: \").append(getFamily()).append(\",\");\r\n    if (getNodeType() != null)\r\n        sb.append(\"NodeType: \").append(getNodeType()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getProductDescription() != null)\r\n        sb.append(\"ProductDescription: \").append(getProductDescription()).append(\",\");\r\n    if (getCurrentGeneration() != null)\r\n        sb.append(\"CurrentGeneration: \").append(getCurrentGeneration()).append(\",\");\r\n    if (getSizeFlexEligible() != null)\r\n        sb.append(\"SizeFlexEligible: \").append(getSizeFlexEligible());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.getAggregateComplianceDetailsByConfigRule",
	"Comment": "returns the evaluation results for the specified aws config rule for a specific resource in a rule. the resultsindicate which aws resources were evaluated by the rule, when each resource was last evaluated, and whether eachresource complies with the rule.the results can return an empty result page. but if you have a nexttoken, the results are displayed on the nextpage.",
	"Method": "GetAggregateComplianceDetailsByConfigRuleResult getAggregateComplianceDetailsByConfigRule(GetAggregateComplianceDetailsByConfigRuleRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetAggregateComplianceDetailsByConfigRule(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeEventCategories",
	"Comment": "lists categories for all event source types, or, if specified, for a specified source type. you can see a list ofthe event categories and source types in working with events and notificationsin the aws database migration service user guide.",
	"Method": "DescribeEventCategoriesResult describeEventCategories(DescribeEventCategoriesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEventCategories(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testProfileWithOtherConfigurations",
	"Comment": "tests loading profile with a file that contains other configuration informations like region,output format etc., the file should be parsed correctly and the profiles must be loaded.",
	"Method": "void testProfileWithOtherConfigurations(){\r\n    ProfilesConfigFile profile = new ProfilesConfigFile(ProfileResourceLoader.profilesContainingOtherConfiguration().asFile());\r\n    assertNotNull(profile.getCredentials(DEFAULT_PROFILE_NAME));\r\n    assertNotNull(profile.getCredentials(PROFILE_NAME_TEST));\r\n    assertEquals(profile.getCredentials(PROFILE_NAME_TEST).getAWSAccessKeyId(), \"test\");\r\n    assertEquals(profile.getCredentials(PROFILE_NAME_TEST).getAWSSecretKey(), \"test key\");\r\n}"
}, {
	"Path": "com.amazonaws.http.timers.ClientExecutionAndRequestTimerTestUtils.execute",
	"Comment": "execute the request with a dummy response handler and error response handler",
	"Method": "void execute(AmazonHttpClient httpClient,Request<?> request){\r\n    httpClient.requestExecutionBuilder().request(request).errorResponseHandler(new NullErrorResponseHandler()).execute(new ErrorDuringUnmarshallingResponseHandler());\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ExportFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues()).append(\",\");\r\n    if (getCondition() != null)\r\n        sb.append(\"Condition: \").append(getCondition());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ExportConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminEnableUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUserImportJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserImportJobs() != null)\r\n        sb.append(\"UserImportJobs: \").append(getUserImportJobs()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.getRequestCredentialsProvider",
	"Comment": "returns the optional credentials provider to use to sign this request, overriding the defaultcredentials provider at the client level.",
	"Method": "AWSCredentialsProvider getRequestCredentialsProvider(){\r\n    return credentialsProvider;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.updateGroup",
	"Comment": "updates the specified group with the specified attributes.requires developer credentials.",
	"Method": "UpdateGroupResult updateGroup(UpdateGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.deletePipeline",
	"Comment": "deletes a pipeline, its pipeline definition, and its run history. aws data pipeline attempts to cancel instancesassociated with the pipeline that are currently being processed by task runners.deleting a pipeline cannot be undone. you cannot query or restore a deleted pipeline. to temporarily pause apipeline instead of deleting it, call setstatus with the status set to pause on individualcomponents. components that are paused by setstatus can be resumed.",
	"Method": "DeletePipelineResult deletePipeline(DeletePipelineRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeletePipeline(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PendingAggregationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRequesterAccountId() != null)\r\n        sb.append(\"RequesterAccountId: \").append(getRequesterAccountId()).append(\",\");\r\n    if (getRequesterAwsRegion() != null)\r\n        sb.append(\"RequesterAwsRegion: \").append(getRequesterAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.allocateConnectionOnInterconnect",
	"Comment": "deprecated. use allocatehostedconnection instead.creates a hosted connection on an interconnect.allocates a vlan number and a specified amount of bandwidth for use by a hosted connection on the specifiedinterconnect.intended for use by aws direct connect partners only.",
	"Method": "AllocateConnectionOnInterconnectResult allocateConnectionOnInterconnect(AllocateConnectionOnInterconnectRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAllocateConnectionOnInterconnect(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DisassociateConnectionFromLagRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminConfirmSignUpRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectKeyPhrasesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTextList() != null)\r\n        sb.append(\"TextList: \").append(getTextList()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeviceInstance.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getDeviceArn() != null)\r\n        sb.append(\"DeviceArn: \").append(getDeviceArn()).append(\",\");\r\n    if (getLabels() != null)\r\n        sb.append(\"Labels: \").append(getLabels()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getUdid() != null)\r\n        sb.append(\"Udid: \").append(getUdid()).append(\",\");\r\n    if (getInstanceProfile() != null)\r\n        sb.append(\"InstanceProfile: \").append(getInstanceProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeComplianceByResourceAsync",
	"Comment": "simplified method form for invoking the describecompliancebyresource operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync(DescribeComplianceByResourceRequest request,java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync,DescribeComplianceByResourceRequest request,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByResourceRequest, DescribeComplianceByResourceResult> asyncHandler,java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync,java.util.concurrent.Future<DescribeComplianceByResourceResult> describeComplianceByResourceAsync,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByResourceRequest, DescribeComplianceByResourceResult> asyncHandler){\r\n    return describeComplianceByResourceAsync(new DescribeComplianceByResourceRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWSCredentialsProviderChainTest.testDisableReusingLastProvider",
	"Comment": "tests that, when provider caching is disabled, the chain will always tryall providers in the chain, starting with the first, until it finds aprovider that can return credentials.",
	"Method": "void testDisableReusingLastProvider(){\r\n    MockCredentialsProvider provider1 = new MockCredentialsProvider();\r\n    provider1.throwException = true;\r\n    MockCredentialsProvider provider2 = new MockCredentialsProvider();\r\n    AWSCredentialsProviderChain chain = new AWSCredentialsProviderChain(Arrays.asList(provider1, provider2));\r\n    chain.setReuseLastProvider(false);\r\n    assertEquals(0, provider1.getCredentialsCallCount);\r\n    assertEquals(0, provider2.getCredentialsCallCount);\r\n    chain.getCredentials();\r\n    assertEquals(1, provider1.getCredentialsCallCount);\r\n    assertEquals(1, provider2.getCredentialsCallCount);\r\n    chain.getCredentials();\r\n    assertEquals(2, provider1.getCredentialsCallCount);\r\n    assertEquals(2, provider2.getCredentialsCallCount);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AccountTakeoverRiskConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNotifyConfiguration() != null)\r\n        sb.append(\"NotifyConfiguration: \").append(getNotifyConfiguration()).append(\",\");\r\n    if (getActions() != null)\r\n        sb.append(\"Actions: \").append(getActions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.EC2CredentialsUtilsTest.readResouceWithDefaultRetryPolicy_DoesNotRetry_ForIoException",
	"Comment": "when readresource is called with default retry policy and ioexception occurs,the request is not retried.",
	"Method": "void readResouceWithDefaultRetryPolicy_DoesNotRetry_ForIoException(){\r\n    Mockito.when(mockConnection.connectToEndpoint(eq(endpoint), any(Map.class))).thenThrow(new IOException());\r\n    try {\r\n        new EC2CredentialsUtils(mockConnection).readResource(endpoint);\r\n        fail(\"Expected an IOexception\");\r\n    } catch (IOException exception) {\r\n        Mockito.verify(mockConnection, Mockito.times(1)).connectToEndpoint(eq(endpoint), any(Map.class));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateDeviceInstanceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceInstance() != null)\r\n        sb.append(\"DeviceInstance: \").append(getDeviceInstance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.CredentialScope.getRegion",
	"Comment": "returns the region string to be used when signing a request for anendpoint.",
	"Method": "String getRegion(){\r\n    return region;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.QueryObjectsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIds() != null)\r\n        sb.append(\"Ids: \").append(getIds()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getHasMoreResults() != null)\r\n        sb.append(\"HasMoreResults: \").append(getHasMoreResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.describeDirectories",
	"Comment": "obtains information about the directories that belong to this account.you can retrieve information about specific directories by passing the directory identifiers in thedirectoryids parameter. otherwise, all directories that belong to the current account are returned.this operation supports pagination with the use of the nexttoken request and response parameters. ifmore results are available, the describedirectoriesresult.nexttoken member contains a token that youpass in the next call to describedirectories to retrieve the next set of items.you can also specify a maximum number of return results with the limit parameter.",
	"Method": "DescribeDirectoriesResult describeDirectories(DescribeDirectoriesRequest request,DescribeDirectoriesResult describeDirectories){\r\n    return describeDirectories(new DescribeDirectoriesRequest());\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.internal.JsonPolicyReader.createPrincipal",
	"Comment": "creates a new principal instance for the given schema and the json node.",
	"Method": "Principal createPrincipal(String schema,JsonNode principalNode){\r\n    if (schema.equalsIgnoreCase(PRINCIPAL_SCHEMA_USER)) {\r\n        return new Principal(PRINCIPAL_SCHEMA_USER, principalNode.asText(), options.isStripAwsPrincipalIdHyphensEnabled());\r\n    } else if (schema.equalsIgnoreCase(PRINCIPAL_SCHEMA_SERVICE)) {\r\n        return new Principal(schema, principalNode.asText());\r\n    } else if (schema.equalsIgnoreCase(PRINCIPAL_SCHEMA_FEDERATED)) {\r\n        if (WebIdentityProviders.fromString(principalNode.asText()) != null) {\r\n            return new Principal(WebIdentityProviders.fromString(principalNode.asText()));\r\n        } else {\r\n            return new Principal(PRINCIPAL_SCHEMA_FEDERATED, principalNode.asText());\r\n        }\r\n    }\r\n    throw new SdkClientException(\"Schema \" + schema + \" is not a valid value for the principal.\");\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.CredentialScope.setService",
	"Comment": "sets the service name string to be used when signing a request for anendpoint.",
	"Method": "void setService(String service){\r\n    this.service = service;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.batchGetAggregateResourceConfig",
	"Comment": "returns the current configuration items for resources that are present in your aws config aggregator. theoperation also returns a list of resources that are not processed in the current request. if there are nounprocessed resources, the operation returns an empty unprocessedresourceidentifiers list.the api does not return results for deleted resources.the api does not return tags and relationships.",
	"Method": "BatchGetAggregateResourceConfigResult batchGetAggregateResourceConfig(BatchGetAggregateResourceConfigRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeBatchGetAggregateResourceConfig(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.CreatePipelineResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListResourceServersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceServers() != null)\r\n        sb.append(\"ResourceServers: \").append(getResourceServers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateUserPoolClientResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolClient() != null)\r\n        sb.append(\"UserPoolClient: \").append(getUserPoolClient());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeKeyPhrasesDetectionJob",
	"Comment": "gets the properties associated with a key phrases detection job. use this operation to get the status of adetection job.",
	"Method": "DescribeKeyPhrasesDetectionJobResult describeKeyPhrasesDetectionJob(DescribeKeyPhrasesDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeKeyPhrasesDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateLogSubscriptionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getLogGroupName() != null)\r\n        sb.append(\"LogGroupName: \").append(getLogGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.ClientHandlerImpl.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at therequest level.",
	"Method": "Response<Output> invoke(Request<Input> request,RequestConfig requestConfig,ExecutionContext executionContext,HttpResponseHandler<Output> responseHandler,HttpResponseHandler<? extends SdkBaseException> errorResponseHandler){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(requestConfig, awsCredentialsProvider));\r\n    return doInvoke(request, requestConfig, executionContext, responseHandler, errorResponseHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GlobalSignOutRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.ListUnmarshaller.unmarshall",
	"Comment": "unmarshalls the response headers or the json doc in the payload to thelist",
	"Method": "List<T> unmarshall(JsonUnmarshallerContext context){\r\n    if (context.isInsideResponseHeader()) {\r\n        return unmarshallResponseHeaderToList(context);\r\n    }\r\n    return unmarshallJsonToList(context);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DeleteUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeConfigurationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationIds() != null)\r\n        sb.append(\"ConfigurationIds: \").append(getConfigurationIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.putAggregationAuthorization",
	"Comment": "authorizes the aggregator account and region to collect data from the source account and region.",
	"Method": "PutAggregationAuthorizationResult putAggregationAuthorization(PutAggregationAuthorizationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutAggregationAuthorization(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateLocationEfsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubdirectory() != null)\r\n        sb.append(\"Subdirectory: \").append(getSubdirectory()).append(\",\");\r\n    if (getEfsFilesystemArn() != null)\r\n        sb.append(\"EfsFilesystemArn: \").append(getEfsFilesystemArn()).append(\",\");\r\n    if (getEc2Config() != null)\r\n        sb.append(\"Ec2Config: \").append(getEc2Config()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminSetUserSettingsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getMFAOptions() != null)\r\n        sb.append(\"MFAOptions: \").append(getMFAOptions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.GetPipelineDefinitionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Partitions.getPartitions",
	"Comment": "returns the list of all partitions loaded from the partition metadata document.",
	"Method": "List<Partition> getPartitions(){\r\n    return partitions;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.OnPremConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentArns() != null)\r\n        sb.append(\"AgentArns: \").append(getAgentArns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserSecurityProfilesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateResourceServerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceServer() != null)\r\n        sb.append(\"ResourceServer: \").append(getResourceServer());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUICustomizationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUICustomization() != null)\r\n        sb.append(\"UICustomization: \").append(getUICustomization());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.Trust.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId()).append(\",\");\r\n    if (getRemoteDomainName() != null)\r\n        sb.append(\"RemoteDomainName: \").append(getRemoteDomainName()).append(\",\");\r\n    if (getTrustType() != null)\r\n        sb.append(\"TrustType: \").append(getTrustType()).append(\",\");\r\n    if (getTrustDirection() != null)\r\n        sb.append(\"TrustDirection: \").append(getTrustDirection()).append(\",\");\r\n    if (getTrustState() != null)\r\n        sb.append(\"TrustState: \").append(getTrustState()).append(\",\");\r\n    if (getCreatedDateTime() != null)\r\n        sb.append(\"CreatedDateTime: \").append(getCreatedDateTime()).append(\",\");\r\n    if (getLastUpdatedDateTime() != null)\r\n        sb.append(\"LastUpdatedDateTime: \").append(getLastUpdatedDateTime()).append(\",\");\r\n    if (getStateLastUpdatedDateTime() != null)\r\n        sb.append(\"StateLastUpdatedDateTime: \").append(getStateLastUpdatedDateTime()).append(\",\");\r\n    if (getTrustStateReason() != null)\r\n        sb.append(\"TrustStateReason: \").append(getTrustStateReason()).append(\",\");\r\n    if (getSelectiveAuth() != null)\r\n        sb.append(\"SelectiveAuth: \").append(getSelectiveAuth());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.nextToken",
	"Comment": "returns the next jsontoken from the jsonparser. returns null by default.",
	"Method": "JsonToken nextToken(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteEventSubscriptionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventSubscription() != null)\r\n        sb.append(\"EventSubscription: \").append(getEventSubscription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminInitiateAuth",
	"Comment": "initiates the authentication flow, as an administrator.requires developer credentials.",
	"Method": "AdminInitiateAuthResult adminInitiateAuth(AdminInitiateAuthRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminInitiateAuth(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteReplicationTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeAccountAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeInterconnects",
	"Comment": "lists the interconnects owned by the aws account or only the specified interconnect.",
	"Method": "DescribeInterconnectsResult describeInterconnects(DescribeInterconnectsRequest request,DescribeInterconnectsResult describeInterconnects){\r\n    return describeInterconnects(new DescribeInterconnectsRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ListDiscoveredResourcesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceIdentifiers() != null)\r\n        sb.append(\"ResourceIdentifiers: \").append(getResourceIdentifiers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteUploadRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateEventSubscriptionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubscriptionName() != null)\r\n        sb.append(\"SubscriptionName: \").append(getSubscriptionName()).append(\",\");\r\n    if (getSnsTopicArn() != null)\r\n        sb.append(\"SnsTopicArn: \").append(getSnsTopicArn()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getEventCategories() != null)\r\n        sb.append(\"EventCategories: \").append(getEventCategories()).append(\",\");\r\n    if (getSourceIds() != null)\r\n        sb.append(\"SourceIds: \").append(getSourceIds()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListRemoteAccessSessionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRemoteAccessSessions() != null)\r\n        sb.append(\"RemoteAccessSessions: \").append(getRemoteAccessSessions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeEndpoints",
	"Comment": "returns information about the endpoints for your account in the current region.",
	"Method": "DescribeEndpointsResult describeEndpoints(DescribeEndpointsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEndpoints(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.describeDefaultParameters",
	"Comment": "returns the default system parameter information for the dax caching software.",
	"Method": "DescribeDefaultParametersResult describeDefaultParameters(DescribeDefaultParametersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDefaultParameters(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateTrustRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getRemoteDomainName() != null)\r\n        sb.append(\"RemoteDomainName: \").append(getRemoteDomainName()).append(\",\");\r\n    if (getTrustPassword() != null)\r\n        sb.append(\"TrustPassword: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getTrustDirection() != null)\r\n        sb.append(\"TrustDirection: \").append(getTrustDirection()).append(\",\");\r\n    if (getTrustType() != null)\r\n        sb.append(\"TrustType: \").append(getTrustType()).append(\",\");\r\n    if (getConditionalForwarderIpAddrs() != null)\r\n        sb.append(\"ConditionalForwarderIpAddrs: \").append(getConditionalForwarderIpAddrs()).append(\",\");\r\n    if (getSelectiveAuth() != null)\r\n        sb.append(\"SelectiveAuth: \").append(getSelectiveAuth());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeDirectConnectGatewayAttachments",
	"Comment": "lists the attachments between your direct connect gateways and virtual interfaces. you must specify a directconnect gateway, a virtual interface, or both. if you specify a direct connect gateway, the response contains allvirtual interfaces attached to the direct connect gateway. if you specify a virtual interface, the responsecontains all direct connect gateways attached to the virtual interface. if you specify both, the responsecontains the attachment between the direct connect gateway and the virtual interface.",
	"Method": "DescribeDirectConnectGatewayAttachmentsResult describeDirectConnectGatewayAttachments(DescribeDirectConnectGatewayAttachmentsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDirectConnectGatewayAttachments(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.Threshold.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComparison() != null)\r\n        sb.append(\"Comparison: \").append(getComparison()).append(\",\");\r\n    if (getThresholdValue() != null)\r\n        sb.append(\"ThresholdValue: \").append(getThresholdValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.UnsubscribeFromDatasetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getDatasetName() != null)\r\n        sb.append(\"DatasetName: \").append(getDatasetName()).append(\",\");\r\n    if (getDeviceId() != null)\r\n        sb.append(\"DeviceId: \").append(getDeviceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReplicationTaskStats.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFullLoadProgressPercent() != null)\r\n        sb.append(\"FullLoadProgressPercent: \").append(getFullLoadProgressPercent()).append(\",\");\r\n    if (getElapsedTimeMillis() != null)\r\n        sb.append(\"ElapsedTimeMillis: \").append(getElapsedTimeMillis()).append(\",\");\r\n    if (getTablesLoaded() != null)\r\n        sb.append(\"TablesLoaded: \").append(getTablesLoaded()).append(\",\");\r\n    if (getTablesLoading() != null)\r\n        sb.append(\"TablesLoading: \").append(getTablesLoading()).append(\",\");\r\n    if (getTablesQueued() != null)\r\n        sb.append(\"TablesQueued: \").append(getTablesQueued()).append(\",\");\r\n    if (getTablesErrored() != null)\r\n        sb.append(\"TablesErrored: \").append(getTablesErrored());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.StandardErrorUnmarshaller.parseErrorCode",
	"Comment": "returns the aws error code for the specified error response.",
	"Method": "String parseErrorCode(Node in,String parseErrorCode,Node in,XPath xpath){\r\n    return asString(\"ErrorResponse/Error/Code\", in, xpath);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awscostexplorerasync using the current builder configuration.",
	"Method": "AWSCostExplorerAsync build(AwsAsyncClientParams params){\r\n    return new AWSCostExplorerAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listDocumentClassifiers",
	"Comment": "gets a list of the document classifiers that you have created.",
	"Method": "ListDocumentClassifiersResult listDocumentClassifiers(ListDocumentClassifiersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListDocumentClassifiers(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UpdateParameterGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroup() != null)\r\n        sb.append(\"ParameterGroup: \").append(getParameterGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateDevicePoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevicePool() != null)\r\n        sb.append(\"DevicePool: \").append(getDevicePool());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutEvaluationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvaluations() != null)\r\n        sb.append(\"Evaluations: \").append(getEvaluations()).append(\",\");\r\n    if (getResultToken() != null)\r\n        sb.append(\"ResultToken: \").append(getResultToken()).append(\",\");\r\n    if (getTestMode() != null)\r\n        sb.append(\"TestMode: \").append(getTestMode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListTasksResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTasks() != null)\r\n        sb.append(\"Tasks: \").append(getTasks()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateAliasRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getAlias() != null)\r\n        sb.append(\"Alias: \").append(getAlias());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.model.PutReportDefinitionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReportDefinition() != null)\r\n        sb.append(\"ReportDefinition: \").append(getReportDefinition());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetUploadRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroup() != null)\r\n        sb.append(\"Group: \").append(getGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidentity.model.UnlinkDeveloperIdentityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Offering.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getRecurringCharges() != null)\r\n        sb.append(\"RecurringCharges: \").append(getRecurringCharges());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.RenewOfferingRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingId() != null)\r\n        sb.append(\"OfferingId: \").append(getOfferingId()).append(\",\");\r\n    if (getQuantity() != null)\r\n        sb.append(\"Quantity: \").append(getQuantity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.ExecutionContext.retryCapacityConsumed",
	"Comment": "returns whether retry capacity was consumed during this request lifecycle.this can be inspected to determine whether capacity should be released if a retry succeeds.",
	"Method": "boolean retryCapacityConsumed(){\r\n    return retryCapacityConsumed;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserPoolDomainResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCloudFrontDomain() != null)\r\n        sb.append(\"CloudFrontDomain: \").append(getCloudFrontDomain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.CreateTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationIds() != null)\r\n        sb.append(\"ConfigurationIds: \").append(getConfigurationIds()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminRemoveUserFromGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setProxyUsername",
	"Comment": "sets the optional proxy user name to use if connecting through a proxy.",
	"Method": "void setProxyUsername(String proxyUsername){\r\n    this.proxyUsername = proxyUsername;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserPoolDomainRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomain() != null)\r\n        sb.append(\"Domain: \").append(getDomain()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getCustomDomainConfig() != null)\r\n        sb.append(\"CustomDomainConfig: \").append(getCustomDomainConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.putDeliveryChannel",
	"Comment": "creates a delivery channel object to deliver configuration information to an amazon s3 bucket and amazon snstopic.before you can create a delivery channel, you must create a configuration recorder.you can use this action to change the amazon s3 bucket or an amazon sns topic of the existing delivery channel.to change the amazon s3 bucket or an amazon sns topic, call this action and specify the changed values for the s3bucket and the sns topic. if you specify a different value for either the s3 bucket or the sns topic, this actionwill keep the existing value for the parameter that is not changed.you can have only one delivery channel per region in your account.",
	"Method": "PutDeliveryChannelResult putDeliveryChannel(PutDeliveryChannelRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutDeliveryChannel(request);\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.isDisableHostPrefixInjection",
	"Comment": "returns the boolean value to indicate if the host prefix injection is disabled or not.the hostprefix template is specified in the service model and is used by the sdk to modify the endpointthe request is sent to. host prefix injection is enabled by default. this option can be set to disable the behavior.",
	"Method": "boolean isDisableHostPrefixInjection(){\r\n    return disableHostPrefixInjection;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserPoolDomainRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomain() != null)\r\n        sb.append(\"Domain: \").append(getDomain());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listKeyPhrasesDetectionJobs",
	"Comment": "get a list of key phrase detection jobs that you have submitted.",
	"Method": "ListKeyPhrasesDetectionJobsResult listKeyPhrasesDetectionJobs(ListKeyPhrasesDetectionJobsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListKeyPhrasesDetectionJobs(request);\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setUseTcpKeepAlive",
	"Comment": "sets whether or not to enable tcp keepalive support at the socket level.",
	"Method": "void setUseTcpKeepAlive(boolean use){\r\n    this.tcpKeepAlive = use;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ConfirmDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey()).append(\",\");\r\n    if (getDeviceSecretVerifierConfig() != null)\r\n        sb.append(\"DeviceSecretVerifierConfig: \").append(getDeviceSecretVerifierConfig()).append(\",\");\r\n    if (getDeviceName() != null)\r\n        sb.append(\"DeviceName: \").append(getDeviceName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.HttpHeader.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHeaderName() != null)\r\n        sb.append(\"HeaderName: \").append(getHeaderName()).append(\",\");\r\n    if (getHeaderValue() != null)\r\n        sb.append(\"HeaderValue: \").append(getHeaderValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.startEntitiesDetectionJob",
	"Comment": "starts an asynchronous entity detection job for a collection of documents. use the operation to track the statusof a job.this api can be used for either standard entity detection or custom entity recognition. in order to be used forcustom entity recognition, the optional entityrecognizerarn must be used in order to provide accessto the recognizer being used to detect the custom entity.",
	"Method": "StartEntitiesDetectionJobResult startEntitiesDetectionJob(StartEntitiesDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartEntitiesDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.QueryStringSignerTest.assertSignature",
	"Comment": "asserts the given signature to the signature generated as part of thesigning the request.",
	"Method": "void assertSignature(String expected,Map<String, List<String>> requestParams){\r\n    List<String> signature = requestParams.get(\"Signature\");\r\n    assertNotNull(signature);\r\n    assertEquals(1, signature.size());\r\n    assertEquals(expected, signature.iterator().next());\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.ClientHandlerImpl.endClientExecution",
	"Comment": "convenient method to end the client execution without logging the awsrequestmetrics.",
	"Method": "void endClientExecution(AWSRequestMetrics awsRequestMetrics,RequestConfig requestConfig,Request<?> request,Response<?> response){\r\n    if (request != null) {\r\n        awsRequestMetrics.endEvent(AWSRequestMetrics.Field.ClientExecuteTime);\r\n        awsRequestMetrics.getTimingInfo().endTiming();\r\n        RequestMetricCollector metricCollector = findRequestMetricCollector(requestConfig);\r\n        metricCollector.collectMetrics(request, response);\r\n        awsRequestMetrics.log();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.utils.ApacheUtils.newNTCredentials",
	"Comment": "returns a new instance of ntcredentials used for proxy authentication.",
	"Method": "Credentials newNTCredentials(HttpClientSettings settings){\r\n    return new NTCredentials(settings.getProxyUsername(), settings.getProxyPassword(), settings.getProxyWorkstation(), settings.getProxyDomain());\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceSummaryByConfigRuleRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.ProfilesConfigFileWriterTest.checkCredentialsFile",
	"Comment": "loads the given credentials file and checks that it contains the sameset of profiles as expected.",
	"Method": "void checkCredentialsFile(File file,Profile expectedProfiles){\r\n    ProfilesConfigFile parsedFile = new ProfilesConfigFile(file);\r\n    Map<String, Profile> loadedProfiles = parsedFile.getAllProfiles();\r\n    assertTrue(expectedProfiles.length == loadedProfiles.size());\r\n    for (Profile expectedProfile : expectedProfiles) {\r\n        Profile loadedProfile = loadedProfiles.get(expectedProfile.getProfileName());\r\n        assertEqualProfiles(expectedProfile, loadedProfile);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeLagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLags() != null)\r\n        sb.append(\"Lags: \").append(getLags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserAttributeNames() != null)\r\n        sb.append(\"UserAttributeNames: \").append(getUserAttributeNames()).append(\",\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListSchemaExtensionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSchemaExtensionsInfo() != null)\r\n        sb.append(\"SchemaExtensionsInfo: \").append(getSchemaExtensionsInfo()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withMaxConnections",
	"Comment": "sets the maximum number of allowed open http connections and returns the updatedclientconfiguration object.",
	"Method": "ClientConfiguration withMaxConnections(int maxConnections){\r\n    setMaxConnections(maxConnections);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.auth.InstanceProfileCredentialsProviderIntegrationTest.testSessionCredentials",
	"Comment": "tests that we correctly handle the metadata service returning credentials.",
	"Method": "void testSessionCredentials(){\r\n    mockServer.setResponseFileName(\"sessionResponse\");\r\n    mockServer.setAvailableSecurityCredentials(\"aws-dr-tools-test\");\r\n    InstanceProfileCredentialsProvider credentialsProvider = new InstanceProfileCredentialsProvider();\r\n    AWSSessionCredentials credentials = (AWSSessionCredentials) credentialsProvider.getCredentials();\r\n    assertEquals(\"ACCESS_KEY_ID\", credentials.getAWSAccessKeyId());\r\n    assertEquals(\"SECRET_ACCESS_KEY\", credentials.getAWSSecretKey());\r\n    assertEquals(\"TOKEN_TOKEN_TOKEN\", credentials.getSessionToken());\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.publishRequestBytesTransferred",
	"Comment": "convenient method to publish a request byte transfer event to the givenlistener.",
	"Method": "Future<?> publishRequestBytesTransferred(ProgressListener listener,long bytes){\r\n    return publishByteCountEvent(listener, REQUEST_BYTE_TRANSFER_EVENT, bytes);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.CreatePipelineRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getUniqueId() != null)\r\n        sb.append(\"UniqueId: \").append(getUniqueId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteDirectConnectGatewayResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGateway() != null)\r\n        sb.append(\"DirectConnectGateway: \").append(getDirectConnectGateway());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Policy.toJson",
	"Comment": "returns a json string representation of this aws access control policy,suitable to be sent to an aws service as part of a request to set anaccess control policy.",
	"Method": "String toJson(){\r\n    return new JsonPolicyWriter().writePolicyToString(this);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.UnmappedAttribute.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getAttribute() != null)\r\n        sb.append(\"Attribute: \").append(getAttribute());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetInstanceProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.ListDatasetsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.UntagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ListDiscoveredResourcesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceIds() != null)\r\n        sb.append(\"ResourceIds: \").append(getResourceIds()).append(\",\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getIncludeDeletedResources() != null)\r\n        sb.append(\"IncludeDeletedResources: \").append(getIncludeDeletedResources()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.StopUserImportJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserImportJob() != null)\r\n        sb.append(\"UserImportJob: \").append(getUserImportJob());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteNetworkProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateReplicationTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTask() != null)\r\n        sb.append(\"ReplicationTask: \").append(getReplicationTask());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.SSEDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StartEntitiesDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.UpdateTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeConnectionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.ListLocationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocations() != null)\r\n        sb.append(\"Locations: \").append(getLocations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.UpdateLifecyclePolicyRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyId() != null)\r\n        sb.append(\"PolicyId: \").append(getPolicyId()).append(\",\");\r\n    if (getExecutionRoleArn() != null)\r\n        sb.append(\"ExecutionRoleArn: \").append(getExecutionRoleArn()).append(\",\");\r\n    if (getState() != null)\r\n        sb.append(\"State: \").append(getState()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPolicyDetails() != null)\r\n        sb.append(\"PolicyDetails: \").append(getPolicyDetails());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDisableUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtilsTest.testAsByte",
	"Comment": "tests that we can correctly pull a byte out of an xml document.",
	"Method": "void testAsByte(){\r\n    Document document = XpathUtils.documentFrom(DOCUMENT);\r\n    XPath xpath = xpath();\r\n    assertEquals(new Byte((byte) 123), asByte(\"Foo/PositiveByte\", document, xpath));\r\n    assertEquals(new Byte((byte) -99), asByte(\"Foo/NegativeByte\", document, xpath));\r\n    assertEquals(null, XpathUtils.asByte(\"Foo/Empty\", document));\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteInterconnectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectState() != null)\r\n        sb.append(\"InterconnectState: \").append(getInterconnectState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.listUsersInGroup",
	"Comment": "lists the users in the specified group.requires developer credentials.",
	"Method": "ListUsersInGroupResult listUsersInGroup(ListUsersInGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListUsersInGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.detectDominantLanguage",
	"Comment": "determines the dominant language of the input text. for a list of languages that amazon comprehend can detect,see amazon comprehend supportedlanguages.",
	"Method": "DetectDominantLanguageResult detectDominantLanguage(DetectDominantLanguageRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDetectDominantLanguage(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.RDSInstanceDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFamily() != null)\r\n        sb.append(\"Family: \").append(getFamily()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getDatabaseEngine() != null)\r\n        sb.append(\"DatabaseEngine: \").append(getDatabaseEngine()).append(\",\");\r\n    if (getDatabaseEdition() != null)\r\n        sb.append(\"DatabaseEdition: \").append(getDatabaseEdition()).append(\",\");\r\n    if (getDeploymentOption() != null)\r\n        sb.append(\"DeploymentOption: \").append(getDeploymentOption()).append(\",\");\r\n    if (getLicenseModel() != null)\r\n        sb.append(\"LicenseModel: \").append(getLicenseModel()).append(\",\");\r\n    if (getCurrentGeneration() != null)\r\n        sb.append(\"CurrentGeneration: \").append(getCurrentGeneration()).append(\",\");\r\n    if (getSizeFlexEligible() != null)\r\n        sb.append(\"SizeFlexEligible: \").append(getSizeFlexEligible());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.internal.AWS4SignerRequestParams.getSigningAlgorithm",
	"Comment": "returns the signing algorithm used for computing the signature.",
	"Method": "String getSigningAlgorithm(){\r\n    return signingAlgorithm;\r\n}"
}, {
	"Path": "com.amazonaws.auth.internal.AWS4SignerRequestParams.getServiceName",
	"Comment": "returns the aws service name to be used while computing the signature.",
	"Method": "String getServiceName(){\r\n    return serviceName;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.RemoveTagsFromResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.updateProject",
	"Comment": "modifies the specified project name, given the project arn and a new name.",
	"Method": "UpdateProjectResult updateProject(UpdateProjectRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateProject(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listEntitiesDetectionJobs",
	"Comment": "gets a list of the entity detection jobs that you have submitted.",
	"Method": "ListEntitiesDetectionJobsResult listEntitiesDetectionJobs(ListEntitiesDetectionJobsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListEntitiesDetectionJobs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationSubnetGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.deleteGroup",
	"Comment": "deletes a group. currently only groups with no members can be deleted.requires developer credentials.",
	"Method": "DeleteGroupResult deleteGroup(DeleteGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeConfigurationAggregators",
	"Comment": "returns the details of one or more configuration aggregators. if the configuration aggregator is not specified,this action returns the details for all the configuration aggregators associated with the account.",
	"Method": "DescribeConfigurationAggregatorsResult describeConfigurationAggregators(DescribeConfigurationAggregatorsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeConfigurationAggregators(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserImportJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserImportJob() != null)\r\n        sb.append(\"UserImportJob: \").append(getUserImportJob());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.Parameter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterName() != null)\r\n        sb.append(\"ParameterName: \").append(getParameterName()).append(\",\");\r\n    if (getParameterType() != null)\r\n        sb.append(\"ParameterType: \").append(getParameterType()).append(\",\");\r\n    if (getParameterValue() != null)\r\n        sb.append(\"ParameterValue: \").append(getParameterValue()).append(\",\");\r\n    if (getNodeTypeSpecificValues() != null)\r\n        sb.append(\"NodeTypeSpecificValues: \").append(getNodeTypeSpecificValues()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSource() != null)\r\n        sb.append(\"Source: \").append(getSource()).append(\",\");\r\n    if (getDataType() != null)\r\n        sb.append(\"DataType: \").append(getDataType()).append(\",\");\r\n    if (getAllowedValues() != null)\r\n        sb.append(\"AllowedValues: \").append(getAllowedValues()).append(\",\");\r\n    if (getIsModifiable() != null)\r\n        sb.append(\"IsModifiable: \").append(getIsModifiable()).append(\",\");\r\n    if (getChangeType() != null)\r\n        sb.append(\"ChangeType: \").append(getChangeType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceResponse.getRequestId",
	"Comment": "returns the aws request id from the response metadata section of an awsresponse.",
	"Method": "String getRequestId(){\r\n    if (responseMetadata == null)\r\n        return null;\r\n    return responseMetadata.getRequestId();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidentity.model.UnlinkIdentityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.CreateDocumentClassifierRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassifierName() != null)\r\n        sb.append(\"DocumentClassifierName: \").append(getDocumentClassifierName()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getClientRequestToken() != null)\r\n        sb.append(\"ClientRequestToken: \").append(getClientRequestToken()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateBGPPeerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterface() != null)\r\n        sb.append(\"VirtualInterface: \").append(getVirtualInterface());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateUploadRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProjectArn() != null)\r\n        sb.append(\"ProjectArn: \").append(getProjectArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeExportTasksResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportsInfo() != null)\r\n        sb.append(\"ExportsInfo: \").append(getExportsInfo()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeConfigurationRecorders",
	"Comment": "returns the details for the specified configuration recorders. if the configuration recorder is not specified,this action returns the details for all configuration recorders associated with the account.currently, you can specify only one configuration recorder per region in your account.",
	"Method": "DescribeConfigurationRecordersResult describeConfigurationRecorders(DescribeConfigurationRecordersRequest request,DescribeConfigurationRecordersResult describeConfigurationRecorders){\r\n    return describeConfigurationRecorders(new DescribeConfigurationRecordersRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeDirectConnectGatewayAssociationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayAssociations() != null)\r\n        sb.append(\"DirectConnectGatewayAssociations: \").append(getDirectConnectGatewayAssociations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getCurrentTaskExecutionArn() != null)\r\n        sb.append(\"CurrentTaskExecutionArn: \").append(getCurrentTaskExecutionArn()).append(\",\");\r\n    if (getSourceLocationArn() != null)\r\n        sb.append(\"SourceLocationArn: \").append(getSourceLocationArn()).append(\",\");\r\n    if (getDestinationLocationArn() != null)\r\n        sb.append(\"DestinationLocationArn: \").append(getDestinationLocationArn()).append(\",\");\r\n    if (getCloudWatchLogGroupArn() != null)\r\n        sb.append(\"CloudWatchLogGroupArn: \").append(getCloudWatchLogGroupArn()).append(\",\");\r\n    if (getOptions() != null)\r\n        sb.append(\"Options: \").append(getOptions()).append(\",\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode()).append(\",\");\r\n    if (getErrorDetail() != null)\r\n        sb.append(\"ErrorDetail: \").append(getErrorDetail()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.Attribute.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.AggregatedSourceStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceId() != null)\r\n        sb.append(\"SourceId: \").append(getSourceId()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion()).append(\",\");\r\n    if (getLastUpdateStatus() != null)\r\n        sb.append(\"LastUpdateStatus: \").append(getLastUpdateStatus()).append(\",\");\r\n    if (getLastUpdateTime() != null)\r\n        sb.append(\"LastUpdateTime: \").append(getLastUpdateTime()).append(\",\");\r\n    if (getLastErrorCode() != null)\r\n        sb.append(\"LastErrorCode: \").append(getLastErrorCode()).append(\",\");\r\n    if (getLastErrorMessage() != null)\r\n        sb.append(\"LastErrorMessage: \").append(getLastErrorMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.describeConnectionsOnInterconnect",
	"Comment": "deprecated. use describehostedconnections instead.lists the connections that have been provisioned on the specified interconnect.intended for use by aws direct connect partners only.",
	"Method": "DescribeConnectionsOnInterconnectResult describeConnectionsOnInterconnect(DescribeConnectionsOnInterconnectRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeConnectionsOnInterconnect(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.describeParameterGroups",
	"Comment": "returns a list of parameter group descriptions. if a parameter group name is specified, the list will containonly the descriptions for that group.",
	"Method": "DescribeParameterGroupsResult describeParameterGroups(DescribeParameterGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeParameterGroups(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerMetadataEntityTypesListItem.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.PredefinedRetryPolicies.getDefaultRetryPolicyWithCustomMaxRetries",
	"Comment": "returns the sdk default retry policy with the specified max retry count.",
	"Method": "RetryPolicy getDefaultRetryPolicyWithCustomMaxRetries(int maxErrorRetry){\r\n    return new RetryPolicy(DEFAULT_RETRY_CONDITION, DEFAULT_BACKOFF_STRATEGY, maxErrorRetry, false);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDeviceInstanceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceInstance() != null)\r\n        sb.append(\"DeviceInstance: \").append(getDeviceInstance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.computeSignerByURI",
	"Comment": "returns the signer for the given uri and the current clientconfiguration.note, however, the signer returned for s3 is incomplete at this stage asthe information on the s3 bucket and key is not yet known.",
	"Method": "Signer computeSignerByURI(URI uri,String signerRegionOverride,boolean isRegionIdAsSignerParam){\r\n    if (uri == null) {\r\n        throw new IllegalArgumentException(\"Endpoint is not set. Use setEndpoint to set an endpoint before performing any request.\");\r\n    }\r\n    String service = getServiceNameIntern();\r\n    String region = AwsHostNameUtils.parseRegionName(uri.getHost(), getEndpointPrefix());\r\n    return computeSignerByServiceRegion(service, region, signerRegionOverride, isRegionIdAsSignerParam);\r\n}"
}, {
	"Path": "com.amazonaws.waiters.WaiterExecution.getCurrentState",
	"Comment": "fetches the current state of the resource based on the acceptor it matches",
	"Method": "WaiterState getCurrentState(){\r\n    try {\r\n        return acceptor.accepts(sdkFunction.apply(request));\r\n    } catch (AmazonServiceException amazonServiceException) {\r\n        return acceptor.accepts(amazonServiceException);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ESInstanceDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceClass() != null)\r\n        sb.append(\"InstanceClass: \").append(getInstanceClass()).append(\",\");\r\n    if (getInstanceSize() != null)\r\n        sb.append(\"InstanceSize: \").append(getInstanceSize()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getCurrentGeneration() != null)\r\n        sb.append(\"CurrentGeneration: \").append(getCurrentGeneration()).append(\",\");\r\n    if (getSizeFlexEligible() != null)\r\n        sb.append(\"SizeFlexEligible: \").append(getSizeFlexEligible());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DirectoryDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getShortName() != null)\r\n        sb.append(\"ShortName: \").append(getShortName()).append(\",\");\r\n    if (getSize() != null)\r\n        sb.append(\"Size: \").append(getSize()).append(\",\");\r\n    if (getEdition() != null)\r\n        sb.append(\"Edition: \").append(getEdition()).append(\",\");\r\n    if (getAlias() != null)\r\n        sb.append(\"Alias: \").append(getAlias()).append(\",\");\r\n    if (getAccessUrl() != null)\r\n        sb.append(\"AccessUrl: \").append(getAccessUrl()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getDnsIpAddrs() != null)\r\n        sb.append(\"DnsIpAddrs: \").append(getDnsIpAddrs()).append(\",\");\r\n    if (getStage() != null)\r\n        sb.append(\"Stage: \").append(getStage()).append(\",\");\r\n    if (getShareStatus() != null)\r\n        sb.append(\"ShareStatus: \").append(getShareStatus()).append(\",\");\r\n    if (getShareMethod() != null)\r\n        sb.append(\"ShareMethod: \").append(getShareMethod()).append(\",\");\r\n    if (getShareNotes() != null)\r\n        sb.append(\"ShareNotes: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getLaunchTime() != null)\r\n        sb.append(\"LaunchTime: \").append(getLaunchTime()).append(\",\");\r\n    if (getStageLastUpdatedDateTime() != null)\r\n        sb.append(\"StageLastUpdatedDateTime: \").append(getStageLastUpdatedDateTime()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getVpcSettings() != null)\r\n        sb.append(\"VpcSettings: \").append(getVpcSettings()).append(\",\");\r\n    if (getConnectSettings() != null)\r\n        sb.append(\"ConnectSettings: \").append(getConnectSettings()).append(\",\");\r\n    if (getRadiusSettings() != null)\r\n        sb.append(\"RadiusSettings: \").append(getRadiusSettings()).append(\",\");\r\n    if (getRadiusStatus() != null)\r\n        sb.append(\"RadiusStatus: \").append(getRadiusStatus()).append(\",\");\r\n    if (getStageReason() != null)\r\n        sb.append(\"StageReason: \").append(getStageReason()).append(\",\");\r\n    if (getSsoEnabled() != null)\r\n        sb.append(\"SsoEnabled: \").append(getSsoEnabled()).append(\",\");\r\n    if (getDesiredNumberOfDomainControllers() != null)\r\n        sb.append(\"DesiredNumberOfDomainControllers: \").append(getDesiredNumberOfDomainControllers()).append(\",\");\r\n    if (getOwnerDirectoryDescription() != null)\r\n        sb.append(\"OwnerDirectoryDescription: \").append(getOwnerDirectoryDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listDominantLanguageDetectionJobs",
	"Comment": "gets a list of the dominant language detection jobs that you have submitted.",
	"Method": "ListDominantLanguageDetectionJobsResult listDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListDominantLanguageDetectionJobs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminConfirmSignUp",
	"Comment": "confirms user registration as an admin without using a confirmation code. works on any user.requires developer credentials.",
	"Method": "AdminConfirmSignUpResult adminConfirmSignUp(AdminConfirmSignUpRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminConfirmSignUp(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.activatePipeline",
	"Comment": "validates the specified pipeline and starts processing pipeline tasks. if the pipeline does not pass validation,activation fails.if you need to pause the pipeline to investigate an issue with a component, such as a data source or script, calldeactivatepipeline.to activate a finished pipeline, modify the end date for the pipeline and then activate it.",
	"Method": "ActivatePipelineResult activatePipeline(ActivatePipelineRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeActivatePipeline(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutConfigurationAggregatorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getAccountAggregationSources() != null)\r\n        sb.append(\"AccountAggregationSources: \").append(getAccountAggregationSources()).append(\",\");\r\n    if (getOrganizationAggregationSource() != null)\r\n        sb.append(\"OrganizationAggregationSource: \").append(getOrganizationAggregationSource());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AccountTakeoverActionsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLowAction() != null)\r\n        sb.append(\"LowAction: \").append(getLowAction()).append(\",\");\r\n    if (getMediumAction() != null)\r\n        sb.append(\"MediumAction: \").append(getMediumAction()).append(\",\");\r\n    if (getHighAction() != null)\r\n        sb.append(\"HighAction: \").append(getHighAction());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.protocol.json.JsonContent.createJsonContent",
	"Comment": "static factory method to create a jsoncontent object from the contents of the httpresponseprovided",
	"Method": "JsonContent createJsonContent(HttpResponse httpResponse,JsonFactory jsonFactory){\r\n    byte[] rawJsonContent = null;\r\n    try {\r\n        if (httpResponse.getContent() != null) {\r\n            rawJsonContent = IOUtils.toByteArray(httpResponse.getContent());\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Unable to read HTTP response content\", e);\r\n    }\r\n    return new JsonContent(rawJsonContent, new ObjectMapper(jsonFactory).configure(JsonParser.Feature.ALLOW_COMMENTS, true));\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UntagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.ContainerCredentialsProviderTest.testGetCredentialsReturnsValidResponseFromEcsEndpoint",
	"Comment": "tests that the getcredentials parses the response properly whenit receives a valid 200 response from endpoint.",
	"Method": "void testGetCredentialsReturnsValidResponseFromEcsEndpoint(){\r\n    stubForSuccessResponse();\r\n    BasicSessionCredentials credentials = (BasicSessionCredentials) containerCredentialsProvider.getCredentials();\r\n    Assert.assertEquals(ACCESS_KEY_ID, credentials.getAWSAccessKeyId());\r\n    Assert.assertEquals(SECRET_ACCESS_KEY, credentials.getAWSSecretKey());\r\n    Assert.assertEquals(TOKEN, credentials.getSessionToken());\r\n    Assert.assertEquals(new DateTime(EXPIRATION_DATE).toDate(), containerCredentialsProvider.getCredentialsExpiration());\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testRoleProfileWithRoleSource",
	"Comment": "tests loading a profile that assumes a role, but the source profile does not exist.",
	"Method": "void testRoleProfileWithRoleSource(){\r\n    checkDeferredException(ProfileResourceLoader.roleProfileWithRoleSource(), AmazonClientException.class, \"test\", \"Should throw an exception as a role profile can not use a role profile as its source\");\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetIdentityProviderByIdentifierResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityProvider() != null)\r\n        sb.append(\"IdentityProvider: \").append(getIdentityProvider());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ListTagsForResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListDocumentClassifiersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.beforeClientExecution",
	"Comment": "notify request handlers that we are about to start execution.",
	"Method": "T beforeClientExecution(T request){\r\n    T local = request;\r\n    for (RequestHandler2 handler : requestHandler2s) {\r\n        local = (T) handler.beforeExecution(local);\r\n    }\r\n    return local;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ReportTaskRunnerHeartbeatRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskrunnerId() != null)\r\n        sb.append(\"TaskrunnerId: \").append(getTaskrunnerId()).append(\",\");\r\n    if (getWorkerGroup() != null)\r\n        sb.append(\"WorkerGroup: \").append(getWorkerGroup()).append(\",\");\r\n    if (getHostname() != null)\r\n        sb.append(\"Hostname: \").append(getHostname());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.StopContactResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testRoleProfileMissingSource",
	"Comment": "tests loading a profile that assumes a role, but the source profile does not exist.",
	"Method": "void testRoleProfileMissingSource(){\r\n    checkDeferredException(ProfileResourceLoader.roleProfileMissingSource(), AmazonClientException.class, \"test\", \"Should throw an exception as there is a role profile without a source specified\");\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateDirectConnectGatewayResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGateway() != null)\r\n        sb.append(\"DirectConnectGateway: \").append(getDirectConnectGateway());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.shutdown",
	"Comment": "shuts down this client object, releasing any resources that might be heldopen. this is an optional method, and callers are not expected to callit, but can if they want to explicitly release any open resources. once aclient has been shutdown, it should not be used to make any morerequests.",
	"Method": "void shutdown(){\r\n    if (agentMonitoringListener != null) {\r\n        agentMonitoringListener.shutdown();\r\n    }\r\n    client.shutdown();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.NotifyConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFrom() != null)\r\n        sb.append(\"From: \").append(getFrom()).append(\",\");\r\n    if (getReplyTo() != null)\r\n        sb.append(\"ReplyTo: \").append(getReplyTo()).append(\",\");\r\n    if (getSourceArn() != null)\r\n        sb.append(\"SourceArn: \").append(getSourceArn()).append(\",\");\r\n    if (getBlockEmail() != null)\r\n        sb.append(\"BlockEmail: \").append(getBlockEmail()).append(\",\");\r\n    if (getNoActionEmail() != null)\r\n        sb.append(\"NoActionEmail: \").append(getNoActionEmail()).append(\",\");\r\n    if (getMfaEmail() != null)\r\n        sb.append(\"MfaEmail: \").append(getMfaEmail());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.RuntimeHttpUtils.toUri",
	"Comment": "returns an uri for the given endpoint.prefixes the protocol if the endpoint given does not have it.",
	"Method": "URI toUri(String endpoint,ClientConfiguration config,URI toUri,String endpoint,Protocol protocol){\r\n    if (endpoint == null) {\r\n        throw new IllegalArgumentException(\"endpoint cannot be null\");\r\n    }\r\n    if (!endpoint.contains(\"://\")) {\r\n        endpoint = protocol.toString() + \"://\" + endpoint;\r\n    }\r\n    try {\r\n        return new URI(endpoint);\r\n    } catch (URISyntaxException e) {\r\n        throw new IllegalArgumentException(e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.deleteDirectConnectGatewayAssociation",
	"Comment": "deletes the association between the specified direct connect gateway and virtual private gateway.",
	"Method": "DeleteDirectConnectGatewayAssociationResult deleteDirectConnectGatewayAssociation(DeleteDirectConnectGatewayAssociationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDirectConnectGatewayAssociation(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeDocumentClassificationJob",
	"Comment": "gets the properties associated with a document classification job. use this operation to get the status of aclassification job.",
	"Method": "DescribeDocumentClassificationJobResult describeDocumentClassificationJob(DescribeDocumentClassificationJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDocumentClassificationJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeConfigurationRecordersAsync",
	"Comment": "simplified method form for invoking the describeconfigurationrecorders operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync(DescribeConfigurationRecordersRequest request,java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync,DescribeConfigurationRecordersRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecordersRequest, DescribeConfigurationRecordersResult> asyncHandler,java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync,java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecordersRequest, DescribeConfigurationRecordersResult> asyncHandler){\r\n    return describeConfigurationRecordersAsync(new DescribeConfigurationRecordersRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DeleteParameterGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeletionMessage() != null)\r\n        sb.append(\"DeletionMessage: \").append(getDeletionMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminRemoveUserFromGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.timers.ClientExecutionAndRequestTimerTestUtils.assertResponseIsBuffered",
	"Comment": "assert response was buffered into memory to enforce the timeout on both connectionestablished and reading of content",
	"Method": "void assertResponseIsBuffered(HttpResponseProxy responseProxy){\r\n    verify(responseProxy).setEntity(any(BufferedHttpEntity.class));\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.getDeviceInstance",
	"Comment": "returns information about a device instance belonging to a private device fleet.",
	"Method": "GetDeviceInstanceResult getDeviceInstance(GetDeviceInstanceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetDeviceInstance(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.LocationListEntry.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn()).append(\",\");\r\n    if (getLocationUri() != null)\r\n        sb.append(\"LocationUri: \").append(getLocationUri());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.UtilizationByTime.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getGroups() != null)\r\n        sb.append(\"Groups: \").append(getGroups()).append(\",\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeConfigRulesAsync",
	"Comment": "simplified method form for invoking the describeconfigrules operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync(DescribeConfigRulesRequest request,java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync,DescribeConfigRulesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigRulesRequest, DescribeConfigRulesResult> asyncHandler,java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync,java.util.concurrent.Future<DescribeConfigRulesResult> describeConfigRulesAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigRulesRequest, DescribeConfigRulesResult> asyncHandler){\r\n    return describeConfigRulesAsync(new DescribeConfigRulesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListVPCEConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVpceConfigurations() != null)\r\n        sb.append(\"VpceConfigurations: \").append(getVpceConfigurations()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigRulesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleNames() != null)\r\n        sb.append(\"ConfigRuleNames: \").append(getConfigRuleNames()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateInstanceProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPackageCleanup() != null)\r\n        sb.append(\"PackageCleanup: \").append(getPackageCleanup()).append(\",\");\r\n    if (getExcludeAppPackagesFromCleanup() != null)\r\n        sb.append(\"ExcludeAppPackagesFromCleanup: \").append(getExcludeAppPackagesFromCleanup()).append(\",\");\r\n    if (getRebootAfterUse() != null)\r\n        sb.append(\"RebootAfterUse: \").append(getRebootAfterUse());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeLagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserPoolType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getPolicies() != null)\r\n        sb.append(\"Policies: \").append(getPolicies()).append(\",\");\r\n    if (getLambdaConfig() != null)\r\n        sb.append(\"LambdaConfig: \").append(getLambdaConfig()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate()).append(\",\");\r\n    if (getSchemaAttributes() != null)\r\n        sb.append(\"SchemaAttributes: \").append(getSchemaAttributes()).append(\",\");\r\n    if (getAutoVerifiedAttributes() != null)\r\n        sb.append(\"AutoVerifiedAttributes: \").append(getAutoVerifiedAttributes()).append(\",\");\r\n    if (getAliasAttributes() != null)\r\n        sb.append(\"AliasAttributes: \").append(getAliasAttributes()).append(\",\");\r\n    if (getUsernameAttributes() != null)\r\n        sb.append(\"UsernameAttributes: \").append(getUsernameAttributes()).append(\",\");\r\n    if (getSmsVerificationMessage() != null)\r\n        sb.append(\"SmsVerificationMessage: \").append(getSmsVerificationMessage()).append(\",\");\r\n    if (getEmailVerificationMessage() != null)\r\n        sb.append(\"EmailVerificationMessage: \").append(getEmailVerificationMessage()).append(\",\");\r\n    if (getEmailVerificationSubject() != null)\r\n        sb.append(\"EmailVerificationSubject: \").append(getEmailVerificationSubject()).append(\",\");\r\n    if (getVerificationMessageTemplate() != null)\r\n        sb.append(\"VerificationMessageTemplate: \").append(getVerificationMessageTemplate()).append(\",\");\r\n    if (getSmsAuthenticationMessage() != null)\r\n        sb.append(\"SmsAuthenticationMessage: \").append(getSmsAuthenticationMessage()).append(\",\");\r\n    if (getMfaConfiguration() != null)\r\n        sb.append(\"MfaConfiguration: \").append(getMfaConfiguration()).append(\",\");\r\n    if (getDeviceConfiguration() != null)\r\n        sb.append(\"DeviceConfiguration: \").append(getDeviceConfiguration()).append(\",\");\r\n    if (getEstimatedNumberOfUsers() != null)\r\n        sb.append(\"EstimatedNumberOfUsers: \").append(getEstimatedNumberOfUsers()).append(\",\");\r\n    if (getEmailConfiguration() != null)\r\n        sb.append(\"EmailConfiguration: \").append(getEmailConfiguration()).append(\",\");\r\n    if (getSmsConfiguration() != null)\r\n        sb.append(\"SmsConfiguration: \").append(getSmsConfiguration()).append(\",\");\r\n    if (getUserPoolTags() != null)\r\n        sb.append(\"UserPoolTags: \").append(getUserPoolTags()).append(\",\");\r\n    if (getSmsConfigurationFailure() != null)\r\n        sb.append(\"SmsConfigurationFailure: \").append(getSmsConfigurationFailure()).append(\",\");\r\n    if (getEmailConfigurationFailure() != null)\r\n        sb.append(\"EmailConfigurationFailure: \").append(getEmailConfigurationFailure()).append(\",\");\r\n    if (getDomain() != null)\r\n        sb.append(\"Domain: \").append(getDomain()).append(\",\");\r\n    if (getCustomDomain() != null)\r\n        sb.append(\"CustomDomain: \").append(getCustomDomain()).append(\",\");\r\n    if (getAdminCreateUserConfig() != null)\r\n        sb.append(\"AdminCreateUserConfig: \").append(getAdminCreateUserConfig()).append(\",\");\r\n    if (getUserPoolAddOns() != null)\r\n        sb.append(\"UserPoolAddOns: \").append(getUserPoolAddOns()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.Selector.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFieldName() != null)\r\n        sb.append(\"FieldName: \").append(getFieldName()).append(\",\");\r\n    if (getOperator() != null)\r\n        sb.append(\"Operator: \").append(getOperator());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntityRecognizerArn() != null)\r\n        sb.append(\"EntityRecognizerArn: \").append(getEntityRecognizerArn()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getSubmitTime() != null)\r\n        sb.append(\"SubmitTime: \").append(getSubmitTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getTrainingStartTime() != null)\r\n        sb.append(\"TrainingStartTime: \").append(getTrainingStartTime()).append(\",\");\r\n    if (getTrainingEndTime() != null)\r\n        sb.append(\"TrainingEndTime: \").append(getTrainingEndTime()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getRecognizerMetadata() != null)\r\n        sb.append(\"RecognizerMetadata: \").append(getRecognizerMetadata()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateComputerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getComputerName() != null)\r\n        sb.append(\"ComputerName: \").append(getComputerName()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getOrganizationalUnitDistinguishedName() != null)\r\n        sb.append(\"OrganizationalUnitDistinguishedName: \").append(getOrganizationalUnitDistinguishedName()).append(\",\");\r\n    if (getComputerAttributes() != null)\r\n        sb.append(\"ComputerAttributes: \").append(getComputerAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListDominantLanguageDetectionJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDominantLanguageDetectionJobPropertiesList() != null)\r\n        sb.append(\"DominantLanguageDetectionJobPropertiesList: \").append(getDominantLanguageDetectionJobPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeTagsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArns() != null)\r\n        sb.append(\"ResourceArns: \").append(getResourceArns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DocumentClassifierProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDocumentClassifierArn() != null)\r\n        sb.append(\"DocumentClassifierArn: \").append(getDocumentClassifierArn()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getSubmitTime() != null)\r\n        sb.append(\"SubmitTime: \").append(getSubmitTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getTrainingStartTime() != null)\r\n        sb.append(\"TrainingStartTime: \").append(getTrainingStartTime()).append(\",\");\r\n    if (getTrainingEndTime() != null)\r\n        sb.append(\"TrainingEndTime: \").append(getTrainingEndTime()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getClassifierMetadata() != null)\r\n        sb.append(\"ClassifierMetadata: \").append(getClassifierMetadata()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeComplianceByConfigRuleAsync",
	"Comment": "simplified method form for invoking the describecompliancebyconfigrule operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync(DescribeComplianceByConfigRuleRequest request,java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync,DescribeComplianceByConfigRuleRequest request,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByConfigRuleRequest, DescribeComplianceByConfigRuleResult> asyncHandler,java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync,java.util.concurrent.Future<DescribeComplianceByConfigRuleResult> describeComplianceByConfigRuleAsync,com.amazonaws.handlers.AsyncHandler<DescribeComplianceByConfigRuleRequest, DescribeComplianceByConfigRuleResult> asyncHandler){\r\n    return describeComplianceByConfigRuleAsync(new DescribeComplianceByConfigRuleRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateInstanceProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPackageCleanup() != null)\r\n        sb.append(\"PackageCleanup: \").append(getPackageCleanup()).append(\",\");\r\n    if (getExcludeAppPackagesFromCleanup() != null)\r\n        sb.append(\"ExcludeAppPackagesFromCleanup: \").append(getExcludeAppPackagesFromCleanup()).append(\",\");\r\n    if (getRebootAfterUse() != null)\r\n        sb.append(\"RebootAfterUse: \").append(getRebootAfterUse());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteRetentionConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRetentionConfigurationName() != null)\r\n        sb.append(\"RetentionConfigurationName: \").append(getRetentionConfigurationName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.AbstractDataPipelineAsync.listPipelinesAsync",
	"Comment": "simplified method form for invoking the listpipelines operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync(ListPipelinesRequest request,java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync,ListPipelinesRequest request,com.amazonaws.handlers.AsyncHandler<ListPipelinesRequest, ListPipelinesResult> asyncHandler,java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync,java.util.concurrent.Future<ListPipelinesResult> listPipelinesAsync,com.amazonaws.handlers.AsyncHandler<ListPipelinesRequest, ListPipelinesResult> asyncHandler){\r\n    return listPipelinesAsync(new ListPipelinesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.GetSnapshotLimitsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.model.DeleteReportDefinitionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReportName() != null)\r\n        sb.append(\"ReportName: \").append(getReportName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DeleteApplicationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListTestsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteReplicationSubnetGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationSubnetGroupIdentifier() != null)\r\n        sb.append(\"ReplicationSubnetGroupIdentifier: \").append(getReplicationSubnetGroupIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteInstanceProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.Tag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKey() != null)\r\n        sb.append(\"Key: \").append(getKey()).append(\",\");\r\n    if (getValue() != null)\r\n        sb.append(\"Value: \").append(getValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectEntitiesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTextList() != null)\r\n        sb.append(\"TextList: \").append(getTextList()).append(\",\");\r\n    if (getLanguageCode() != null)\r\n        sb.append(\"LanguageCode: \").append(getLanguageCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.startReplicationTask",
	"Comment": "starts the replication task.for more information about aws dms tasks, see working with migration tasksin theaws database migration service user guide.",
	"Method": "StartReplicationTaskResult startReplicationTask(StartReplicationTaskRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartReplicationTask(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminConfirmSignUpResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.Group.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKeys() != null)\r\n        sb.append(\"Keys: \").append(getKeys()).append(\",\");\r\n    if (getMetrics() != null)\r\n        sb.append(\"Metrics: \").append(getMetrics());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteBGPPeerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getBgpPeerId() != null)\r\n        sb.append(\"BgpPeerId: \").append(getBgpPeerId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.BulkPublishResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.setIdentityPoolConfiguration",
	"Comment": "sets the necessary configuration for push sync.this api can only be called with developer credentials. you cannot call this api with the temporary usercredentials provided by cognito identity.",
	"Method": "SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSetIdentityPoolConfiguration(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AbstractAmazonDirectConnectAsync.describeVirtualInterfacesAsync",
	"Comment": "simplified method form for invoking the describevirtualinterfaces operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync(DescribeVirtualInterfacesRequest request,java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync,DescribeVirtualInterfacesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeVirtualInterfacesRequest, DescribeVirtualInterfacesResult> asyncHandler,java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync,java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync,com.amazonaws.handlers.AsyncHandler<DescribeVirtualInterfacesRequest, DescribeVirtualInterfacesResult> asyncHandler){\r\n    return describeVirtualInterfacesAsync(new DescribeVirtualInterfacesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ActivatePipelineRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getParameterValues() != null)\r\n        sb.append(\"ParameterValues: \").append(getParameterValues()).append(\",\");\r\n    if (getStartTimestamp() != null)\r\n        sb.append(\"StartTimestamp: \").append(getStartTimestamp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.EventFeedbackType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFeedbackValue() != null)\r\n        sb.append(\"FeedbackValue: \").append(getFeedbackValue()).append(\",\");\r\n    if (getProvider() != null)\r\n        sb.append(\"Provider: \").append(getProvider()).append(\",\");\r\n    if (getFeedbackDate() != null)\r\n        sb.append(\"FeedbackDate: \").append(getFeedbackDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.AWSCostAndUsageReportClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeliveryChannel.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getS3BucketName() != null)\r\n        sb.append(\"S3BucketName: \").append(getS3BucketName()).append(\",\");\r\n    if (getS3KeyPrefix() != null)\r\n        sb.append(\"S3KeyPrefix: \").append(getS3KeyPrefix()).append(\",\");\r\n    if (getSnsTopicARN() != null)\r\n        sb.append(\"SnsTopicARN: \").append(getSnsTopicARN()).append(\",\");\r\n    if (getConfigSnapshotDeliveryProperties() != null)\r\n        sb.append(\"ConfigSnapshotDeliveryProperties: \").append(getConfigSnapshotDeliveryProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateDirectoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.S3Settings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn()).append(\",\");\r\n    if (getExternalTableDefinition() != null)\r\n        sb.append(\"ExternalTableDefinition: \").append(getExternalTableDefinition()).append(\",\");\r\n    if (getCsvRowDelimiter() != null)\r\n        sb.append(\"CsvRowDelimiter: \").append(getCsvRowDelimiter()).append(\",\");\r\n    if (getCsvDelimiter() != null)\r\n        sb.append(\"CsvDelimiter: \").append(getCsvDelimiter()).append(\",\");\r\n    if (getBucketFolder() != null)\r\n        sb.append(\"BucketFolder: \").append(getBucketFolder()).append(\",\");\r\n    if (getBucketName() != null)\r\n        sb.append(\"BucketName: \").append(getBucketName()).append(\",\");\r\n    if (getCompressionType() != null)\r\n        sb.append(\"CompressionType: \").append(getCompressionType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.AwsHostNameUtils.parseRegionName",
	"Comment": "attempts to parse the region name from an endpoint based on conventionsabout the endpoint format.",
	"Method": "String parseRegionName(URI endpoint,String parseRegionName,String host,String serviceHint){\r\n    String region = parseRegion(host, serviceHint);\r\n    return region == null ? \"us-east-1\" : region;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.StartUserImportJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.withRequestMetricCollector",
	"Comment": "specifies a request level metric collector which takes precedence over the ones at the httpclient level and aws sdk level.",
	"Method": "T withRequestMetricCollector(RequestMetricCollector metricCollector){\r\n    setRequestMetricCollector(metricCollector);\r\n    @SuppressWarnings(\"unchecked\")\r\n    T t = (T) this;\r\n    return t;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeConditionalForwardersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConditionalForwarders() != null)\r\n        sb.append(\"ConditionalForwarders: \").append(getConditionalForwarders());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.FixedDelayStrategy.delayBeforeNextRetry",
	"Comment": "defines a default way of delaying the polling bound bythe default delay associated with the correspondingwaiter definition",
	"Method": "void delayBeforeNextRetry(PollingStrategyContext pollingStrategyContext){\r\n    Thread.sleep(defaultDelayInSeconds * 1000);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetDimensionValuesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDimensionValues() != null)\r\n        sb.append(\"DimensionValues: \").append(getDimensionValues()).append(\",\");\r\n    if (getReturnSize() != null)\r\n        sb.append(\"ReturnSize: \").append(getReturnSize()).append(\",\");\r\n    if (getTotalSize() != null)\r\n        sb.append(\"TotalSize: \").append(getTotalSize()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.SetStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.AcceptorPathMatcher.path",
	"Comment": "path matcher that checks if the final resultmatches the expected result",
	"Method": "boolean path(JsonNode expectedResult,JsonNode finalResult){\r\n    return finalResult.equals(expectedResult);\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Policy.getStatements",
	"Comment": "returns the collection of statements contained by this policy. individualstatements in a policy are what specify the rules that enable or disableaccess to your aws resources.",
	"Method": "Collection<Statement> getStatements(){\r\n    return statements;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.UpdateAgentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UpdateClusterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterName() != null)\r\n        sb.append(\"ClusterName: \").append(getClusterName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getPreferredMaintenanceWindow() != null)\r\n        sb.append(\"PreferredMaintenanceWindow: \").append(getPreferredMaintenanceWindow()).append(\",\");\r\n    if (getNotificationTopicArn() != null)\r\n        sb.append(\"NotificationTopicArn: \").append(getNotificationTopicArn()).append(\",\");\r\n    if (getNotificationTopicStatus() != null)\r\n        sb.append(\"NotificationTopicStatus: \").append(getNotificationTopicStatus()).append(\",\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName()).append(\",\");\r\n    if (getSecurityGroupIds() != null)\r\n        sb.append(\"SecurityGroupIds: \").append(getSecurityGroupIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StopDataCollectionByAgentIdsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentsConfigurationStatus() != null)\r\n        sb.append(\"AgentsConfigurationStatus: \").append(getAgentsConfigurationStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.EC2Specification.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingClass() != null)\r\n        sb.append(\"OfferingClass: \").append(getOfferingClass());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.ImmutableMapParameter.of",
	"Comment": "returns an immutablemapparameter instance containing five entries.",
	"Method": "ImmutableMapParameter<K, V> of(K k0,V v0,ImmutableMapParameter<K, V> of,K k0,V v0,K k1,V v1,ImmutableMapParameter<K, V> of,K k0,V v0,K k1,V v1,K k2,V v2,ImmutableMapParameter<K, V> of,K k0,V v0,K k1,V v1,K k2,V v2,K k3,V v3,ImmutableMapParameter<K, V> of,K k0,V v0,K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){\r\n    Map<K, V> map = new HashMap<K, V>();\r\n    putAndWarnDuplicateKeys(map, k0, v0);\r\n    putAndWarnDuplicateKeys(map, k1, v1);\r\n    putAndWarnDuplicateKeys(map, k2, v2);\r\n    putAndWarnDuplicateKeys(map, k3, v3);\r\n    putAndWarnDuplicateKeys(map, k4, v4);\r\n    return new ImmutableMapParameter<K, V>(map);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.createResourceServer",
	"Comment": "creates a new oauth2.0 resource server and defines custom scopes in it.",
	"Method": "CreateResourceServerResult createResourceServer(CreateResourceServerRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateResourceServer(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.computeSigningCacheKeyName",
	"Comment": "computes the name to be used to reference the signing key in the cache.",
	"Method": "String computeSigningCacheKeyName(AWSCredentials credentials,AWS4SignerRequestParams signerRequestParams){\r\n    final StringBuilder hashKeyBuilder = new StringBuilder(credentials.getAWSSecretKey());\r\n    return hashKeyBuilder.append(\"-\").append(signerRequestParams.getRegionName()).append(\"-\").append(signerRequestParams.getServiceName()).toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.listRemoteAccessSessions",
	"Comment": "returns a list of all currently running remote access sessions.",
	"Method": "ListRemoteAccessSessionsResult listRemoteAccessSessions(ListRemoteAccessSessionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListRemoteAccessSessions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.RebootReplicationInstanceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstance() != null)\r\n        sb.append(\"ReplicationInstance: \").append(getReplicationInstance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateResourceConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationItem() != null)\r\n        sb.append(\"ConfigurationItem: \").append(getConfigurationItem());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteDevicePoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listTopicsDetectionJobs",
	"Comment": "gets a list of the topic detection jobs that you have submitted.",
	"Method": "ListTopicsDetectionJobsResult listTopicsDetectionJobs(ListTopicsDetectionJobsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListTopicsDetectionJobs(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ComplianceByConfigRule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getCompliance() != null)\r\n        sb.append(\"Compliance: \").append(getCompliance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserPoolClientRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigRuleEvaluationStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRulesEvaluationStatus() != null)\r\n        sb.append(\"ConfigRulesEvaluationStatus: \").append(getConfigRulesEvaluationStatus()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateDirectConnectGatewayAssociationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deleteConfigurationAggregator",
	"Comment": "deletes the specified configuration aggregator and the aggregated data associated with the aggregator.",
	"Method": "DeleteConfigurationAggregatorResult deleteConfigurationAggregator(DeleteConfigurationAggregatorRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteConfigurationAggregator(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteConfigurationAggregatorResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.deleteApplications",
	"Comment": "deletes a list of applications and their associations with configuration items.",
	"Method": "DeleteApplicationsResult deleteApplications(DeleteApplicationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteApplications(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.deleteConditionalForwarder",
	"Comment": "deletes a conditional forwarder that has been set up for your aws directory.",
	"Method": "DeleteConditionalForwarderResult deleteConditionalForwarder(DeleteConditionalForwarderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteConditionalForwarder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListOfferingsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateTrustRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId()).append(\",\");\r\n    if (getSelectiveAuth() != null)\r\n        sb.append(\"SelectiveAuth: \").append(getSelectiveAuth());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminSetUserMFAPreferenceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSMSMfaSettings() != null)\r\n        sb.append(\"SMSMfaSettings: \").append(getSMSMfaSettings()).append(\",\");\r\n    if (getSoftwareTokenMfaSettings() != null)\r\n        sb.append(\"SoftwareTokenMfaSettings: \").append(getSoftwareTokenMfaSettings()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.RetryUtils.isThrottlingException",
	"Comment": "returns true if the specified exception is a throttling error.",
	"Method": "boolean isThrottlingException(AmazonServiceException exception,boolean isThrottlingException,SdkBaseException exception){\r\n    if (!isAse(exception)) {\r\n        return false;\r\n    }\r\n    final AmazonServiceException ase = toAse(exception);\r\n    return THROTTLING_ERROR_CODES.contains(ase.getErrorCode()) || ase.getStatusCode() == 429;\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.getDiscoverySummary",
	"Comment": "retrieves a short summary of discovered assets.this api operation takes no request parameters and is called as is at the command prompt as shown in the example.",
	"Method": "GetDiscoverySummaryResult getDiscoverySummary(GetDiscoverySummaryRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetDiscoverySummary(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.CreateParameterGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CancelSchemaExtensionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreatePrivateVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getNewPrivateVirtualInterface() != null)\r\n        sb.append(\"NewPrivateVirtualInterface: \").append(getNewPrivateVirtualInterface());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testProfileWithNoProfileNameGiven",
	"Comment": "tests loading profile with a profile name not mentioned. an exception should be thrown inthis case.",
	"Method": "void testProfileWithNoProfileNameGiven(){\r\n    checkExpectedException(ProfileResourceLoader.profilesWithNoProfileName(), AmazonClientException.class, \"Should throw an exception as there is a profile mentioned with only spaces.\");\r\n}"
}, {
	"Path": "com.amazonaws.event.request.ProgressSupport.getResponseBytesTransferred",
	"Comment": "returns the number of bytes that have been transferred in the response.",
	"Method": "long getResponseBytesTransferred(){\r\n    return responseBytesTransferred;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ScheduleRunConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExtraDataPackageArn() != null)\r\n        sb.append(\"ExtraDataPackageArn: \").append(getExtraDataPackageArn()).append(\",\");\r\n    if (getNetworkProfileArn() != null)\r\n        sb.append(\"NetworkProfileArn: \").append(getNetworkProfileArn()).append(\",\");\r\n    if (getLocale() != null)\r\n        sb.append(\"Locale: \").append(getLocale()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getVpceConfigurationArns() != null)\r\n        sb.append(\"VpceConfigurationArns: \").append(getVpceConfigurationArns()).append(\",\");\r\n    if (getCustomerArtifactPaths() != null)\r\n        sb.append(\"CustomerArtifactPaths: \").append(getCustomerArtifactPaths()).append(\",\");\r\n    if (getRadios() != null)\r\n        sb.append(\"Radios: \").append(getRadios()).append(\",\");\r\n    if (getAuxiliaryApps() != null)\r\n        sb.append(\"AuxiliaryApps: \").append(getAuxiliaryApps()).append(\",\");\r\n    if (getBillingMethod() != null)\r\n        sb.append(\"BillingMethod: \").append(getBillingMethod());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeDirectoriesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryDescriptions() != null)\r\n        sb.append(\"DirectoryDescriptions: \").append(getDirectoryDescriptions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.deleteConfigurationRecorder",
	"Comment": "deletes the configuration recorder.after the configuration recorder is deleted, aws config will not record resource configuration changes until youcreate a new configuration recorder.this action does not delete the configuration information that was previously recorded. you will be able toaccess the previously recorded information by using the getresourceconfighistory action, but youwill not be able to access this information in the aws config console until you create a new configurationrecorder.",
	"Method": "DeleteConfigurationRecorderResult deleteConfigurationRecorder(DeleteConfigurationRecorderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteConfigurationRecorder(request);\r\n}"
}, {
	"Path": "com.amazonaws.waiters.WaiterImpl.runAsync",
	"Comment": "polls asynchronously until it is determined that the resourcetransitioned into the desired state or not. includes additionalcallback.",
	"Method": "Future<Void> runAsync(WaiterParameters<Input> waiterParameters,WaiterHandler callback){\r\n    return executorService.submit(new java.util.concurrent.Callable<Void>() {\r\n        @Override\r\n        public Void call() throws Exception {\r\n            try {\r\n                run(waiterParameters);\r\n                callback.onWaitSuccess(waiterParameters.getRequest());\r\n            } catch (Exception ex) {\r\n                callback.onWaitFailure(ex);\r\n                throw ex;\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n}"
}, {
	"Path": "com.amazonaws.waiters.WaiterImpl.runAsync",
	"Comment": "polls asynchronously until it is determined that the resourcetransitioned into the desired state or not. includes additionalcallback.",
	"Method": "Future<Void> runAsync(WaiterParameters<Input> waiterParameters,WaiterHandler callback){\r\n    try {\r\n        run(waiterParameters);\r\n        callback.onWaitSuccess(waiterParameters.getRequest());\r\n    } catch (Exception ex) {\r\n        callback.onWaitFailure(ex);\r\n        throw ex;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminForgetDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsdirectoryserviceasync using the current builder configuration.",
	"Method": "AWSDirectoryServiceAsync build(AwsAsyncClientParams params){\r\n    return new AWSDirectoryServiceAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DisableRadiusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.client.builder.AwsAsyncClientBuilder.withExecutorFactory",
	"Comment": "sets a custom executor service factory to use for the async clients. the factory will becalled for each async client created through the builder.",
	"Method": "Subclass withExecutorFactory(ExecutorFactory executorFactory){\r\n    setExecutorFactory(executorFactory);\r\n    return getSubclass();\r\n}"
}, {
	"Path": "com.amazonaws.internal.config.InternalConfigTest.testSimpleEmailServiceSigners",
	"Comment": "this test case tests the simple email service specific signers.",
	"Method": "void testSimpleEmailServiceSigners(){\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"email\", \"us-east-1\");\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"email\", \"us-west-1\");\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"email\", \"us-west-2\");\r\n    assertSignerType(DEFAULT_SIGNER_TYPE, \"email\", NEW_REGION);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateResourceConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getResourceIdentifier() != null)\r\n        sb.append(\"ResourceIdentifier: \").append(getResourceIdentifier());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SmsConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnsCallerArn() != null)\r\n        sb.append(\"SnsCallerArn: \").append(getSnsCallerArn()).append(\",\");\r\n    if (getExternalId() != null)\r\n        sb.append(\"ExternalId: \").append(getExternalId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigurationRecorderStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getLastStartTime() != null)\r\n        sb.append(\"LastStartTime: \").append(getLastStartTime()).append(\",\");\r\n    if (getLastStopTime() != null)\r\n        sb.append(\"LastStopTime: \").append(getLastStopTime()).append(\",\");\r\n    if (getRecording() != null)\r\n        sb.append(\"Recording: \").append(getRecording()).append(\",\");\r\n    if (getLastStatus() != null)\r\n        sb.append(\"LastStatus: \").append(getLastStatus()).append(\",\");\r\n    if (getLastErrorCode() != null)\r\n        sb.append(\"LastErrorCode: \").append(getLastErrorCode()).append(\",\");\r\n    if (getLastErrorMessage() != null)\r\n        sb.append(\"LastErrorMessage: \").append(getLastErrorMessage()).append(\",\");\r\n    if (getLastStatusChangeTime() != null)\r\n        sb.append(\"LastStatusChangeTime: \").append(getLastStatusChangeTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeliverConfigSnapshotRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryChannelName() != null)\r\n        sb.append(\"DeliveryChannelName: \").append(getDeliveryChannelName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetCostAndUsageRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getGranularity() != null)\r\n        sb.append(\"Granularity: \").append(getGranularity()).append(\",\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getMetrics() != null)\r\n        sb.append(\"Metrics: \").append(getMetrics()).append(\",\");\r\n    if (getGroupBy() != null)\r\n        sb.append(\"GroupBy: \").append(getGroupBy()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.AgentListEntry.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentArn() != null)\r\n        sb.append(\"AgentArn: \").append(getAgentArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminUpdateDeviceStatus",
	"Comment": "updates the device status as an administrator.requires developer credentials.",
	"Method": "AdminUpdateDeviceStatusResult adminUpdateDeviceStatus(AdminUpdateDeviceStatusRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminUpdateDeviceStatus(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeTableStatisticsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getTableStatistics() != null)\r\n        sb.append(\"TableStatistics: \").append(getTableStatistics()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.RegionMetadata.getRegions",
	"Comment": "returns an immutable list of all regions known to this region metadataobject, in no particular order.",
	"Method": "List<Region> getRegions(){\r\n    return provider.getRegions();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopSentimentDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeLoaRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getProviderName() != null)\r\n        sb.append(\"ProviderName: \").append(getProviderName()).append(\",\");\r\n    if (getLoaContentType() != null)\r\n        sb.append(\"LoaContentType: \").append(getLoaContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeExportConfigurationsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportsInfo() != null)\r\n        sb.append(\"ExportsInfo: \").append(getExportsInfo()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.apache.request.impl.ApacheHttpRequestFactory.addHeadersToRequest",
	"Comment": "configures the headers in the specified apache http request.",
	"Method": "void addHeadersToRequest(HttpRequestBase httpRequest,Request<?> request){\r\n    httpRequest.addHeader(HttpHeaders.HOST, getHostHeaderValue(request.getEndpoint()));\r\n    for (Entry<String, String> entry : request.getHeaders().entrySet()) {\r\n        if (!(ignoreHeaders.contains(entry.getKey()))) {\r\n            httpRequest.addHeader(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n    if (httpRequest.getHeaders(HttpHeaders.CONTENT_TYPE) == null || httpRequest.getHeaders(HttpHeaders.CONTENT_TYPE).length == 0) {\r\n        httpRequest.addHeader(HttpHeaders.CONTENT_TYPE, \"application/x-www-form-urlencoded; \" + \"charset=\" + DEFAULT_ENCODING.toLowerCase());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.waiters.PollingStrategy.getRetryStrategy",
	"Comment": "returns the retry condition included in this polling strategy.",
	"Method": "RetryStrategy getRetryStrategy(){\r\n    return this.retryStrategy;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminDeleteUserAttributes",
	"Comment": "deletes the user attributes in a user pool as an administrator. works on any user.requires developer credentials.",
	"Method": "AdminDeleteUserAttributesResult adminDeleteUserAttributes(AdminDeleteUserAttributesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminDeleteUserAttributes(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutDeliveryChannelRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryChannel() != null)\r\n        sb.append(\"DeliveryChannel: \").append(getDeliveryChannel());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateRemoteAccessSessionConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBillingMethod() != null)\r\n        sb.append(\"BillingMethod: \").append(getBillingMethod()).append(\",\");\r\n    if (getVpceConfigurationArns() != null)\r\n        sb.append(\"VpceConfigurationArns: \").append(getVpceConfigurationArns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.createCluster",
	"Comment": "creates a dax cluster. all nodes in the cluster run the same dax caching software.",
	"Method": "CreateClusterResult createCluster(CreateClusterRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateCluster(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminEnableUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponse.setStatusCode",
	"Comment": "sets the http status code that was returned with this response.",
	"Method": "void setStatusCode(int statusCode){\r\n    this.statusCode = statusCode;\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Service.getDefaults",
	"Comment": "returns the default endpoints configuration for all regions in apartition.",
	"Method": "Endpoint getDefaults(){\r\n    return defaults;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetProjectResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProject() != null)\r\n        sb.append(\"Project: \").append(getProject());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.OfferingStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getOffering() != null)\r\n        sb.append(\"Offering: \").append(getOffering()).append(\",\");\r\n    if (getQuantity() != null)\r\n        sb.append(\"Quantity: \").append(getQuantity()).append(\",\");\r\n    if (getEffectiveOn() != null)\r\n        sb.append(\"EffectiveOn: \").append(getEffectiveOn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StartExportTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportId() != null)\r\n        sb.append(\"ExportId: \").append(getExportId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.Filter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.Loa.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLoaContent() != null)\r\n        sb.append(\"LoaContent: \").append(getLoaContent()).append(\",\");\r\n    if (getLoaContentType() != null)\r\n        sb.append(\"LoaContentType: \").append(getLoaContentType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UserPhoneConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPhoneType() != null)\r\n        sb.append(\"PhoneType: \").append(getPhoneType()).append(\",\");\r\n    if (getAutoAccept() != null)\r\n        sb.append(\"AutoAccept: \").append(getAutoAccept()).append(\",\");\r\n    if (getAfterContactWorkTimeLimit() != null)\r\n        sb.append(\"AfterContactWorkTimeLimit: \").append(getAfterContactWorkTimeLimit()).append(\",\");\r\n    if (getDeskPhoneNumber() != null)\r\n        sb.append(\"DeskPhoneNumber: \").append(getDeskPhoneNumber());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateIdentityProviderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityProvider() != null)\r\n        sb.append(\"IdentityProvider: \").append(getIdentityProvider());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.CapacityManager.acquire",
	"Comment": "attempts to acquire a given amount of capacity.if acquired, capacity will be consumed from the available pool.",
	"Method": "boolean acquire(boolean acquire,int capacity){\r\n    if (capacity < 0) {\r\n        throw new IllegalArgumentException(\"capacity to acquire cannot be negative\");\r\n    }\r\n    if (availableCapacity < 0) {\r\n        return true;\r\n    }\r\n    synchronized (lock) {\r\n        if (availableCapacity - capacity >= 0) {\r\n            availableCapacity -= capacity;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getMetadata",
	"Comment": "returns any metadata collected through metadata expressions while thiscontext was reading the json events from the json document.",
	"Method": "Map<String, String> getMetadata(){\r\n    return Collections.emptyMap();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CancelTaskExecutionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskExecutionArn() != null)\r\n        sb.append(\"TaskExecutionArn: \").append(getTaskExecutionArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.deregisterEventTopic",
	"Comment": "removes the specified directory as a publisher to the specified sns topic.",
	"Method": "DeregisterEventTopicResult deregisterEventTopic(DeregisterEventTopicRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeregisterEventTopic(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminListDevicesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevices() != null)\r\n        sb.append(\"Devices: \").append(getDevices()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DominantLanguageDetectionJobProperties.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getSubmitTime() != null)\r\n        sb.append(\"SubmitTime: \").append(getSubmitTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getInputDataConfig() != null)\r\n        sb.append(\"InputDataConfig: \").append(getInputDataConfig()).append(\",\");\r\n    if (getOutputDataConfig() != null)\r\n        sb.append(\"OutputDataConfig: \").append(getOutputDataConfig()).append(\",\");\r\n    if (getDataAccessRoleArn() != null)\r\n        sb.append(\"DataAccessRoleArn: \").append(getDataAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutConfigurationRecorderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecorder() != null)\r\n        sb.append(\"ConfigurationRecorder: \").append(getConfigurationRecorder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.SdkBufferedInputStream.abortIfNeeded",
	"Comment": "aborts with subclass specific abortion logic executed if needed.note the interrupted status of the thread is cleared by this method.",
	"Method": "void abortIfNeeded(){\r\n    if (shouldAbort()) {\r\n        abort();\r\n        throw new AbortedException();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.KinesisSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStreamArn() != null)\r\n        sb.append(\"StreamArn: \").append(getStreamArn()).append(\",\");\r\n    if (getMessageFormat() != null)\r\n        sb.append(\"MessageFormat: \").append(getMessageFormat()).append(\",\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.DetectEntitiesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.Cluster.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterName() != null)\r\n        sb.append(\"ClusterName: \").append(getClusterName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getClusterArn() != null)\r\n        sb.append(\"ClusterArn: \").append(getClusterArn()).append(\",\");\r\n    if (getTotalNodes() != null)\r\n        sb.append(\"TotalNodes: \").append(getTotalNodes()).append(\",\");\r\n    if (getActiveNodes() != null)\r\n        sb.append(\"ActiveNodes: \").append(getActiveNodes()).append(\",\");\r\n    if (getNodeType() != null)\r\n        sb.append(\"NodeType: \").append(getNodeType()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getClusterDiscoveryEndpoint() != null)\r\n        sb.append(\"ClusterDiscoveryEndpoint: \").append(getClusterDiscoveryEndpoint()).append(\",\");\r\n    if (getNodeIdsToRemove() != null)\r\n        sb.append(\"NodeIdsToRemove: \").append(getNodeIdsToRemove()).append(\",\");\r\n    if (getNodes() != null)\r\n        sb.append(\"Nodes: \").append(getNodes()).append(\",\");\r\n    if (getPreferredMaintenanceWindow() != null)\r\n        sb.append(\"PreferredMaintenanceWindow: \").append(getPreferredMaintenanceWindow()).append(\",\");\r\n    if (getNotificationConfiguration() != null)\r\n        sb.append(\"NotificationConfiguration: \").append(getNotificationConfiguration()).append(\",\");\r\n    if (getSubnetGroup() != null)\r\n        sb.append(\"SubnetGroup: \").append(getSubnetGroup()).append(\",\");\r\n    if (getSecurityGroups() != null)\r\n        sb.append(\"SecurityGroups: \").append(getSecurityGroups()).append(\",\");\r\n    if (getIamRoleArn() != null)\r\n        sb.append(\"IamRoleArn: \").append(getIamRoleArn()).append(\",\");\r\n    if (getParameterGroup() != null)\r\n        sb.append(\"ParameterGroup: \").append(getParameterGroup()).append(\",\");\r\n    if (getSSEDescription() != null)\r\n        sb.append(\"SSEDescription: \").append(getSSEDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeComplianceByResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getComplianceTypes() != null)\r\n        sb.append(\"ComplianceTypes: \").append(getComplianceTypes()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListTestsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTests() != null)\r\n        sb.append(\"Tests: \").append(getTests()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.associateConfigurationItemsToApplication",
	"Comment": "associates one or more configuration items with an application.",
	"Method": "AssociateConfigurationItemsToApplicationResult associateConfigurationItemsToApplication(AssociateConfigurationItemsToApplicationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateConfigurationItemsToApplication(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.TagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonServiceException.getServiceName",
	"Comment": "returns the name of the service that sent this error response.",
	"Method": "String getServiceName(){\r\n    return serviceName;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.updateAuthEventFeedback",
	"Comment": "provides the feedback for an authentication event whether it was from a valid user or not. this feedback is usedfor improving the risk evaluation decision for the user pool as part of amazon cognito advanced security.",
	"Method": "UpdateAuthEventFeedbackResult updateAuthEventFeedback(UpdateAuthEventFeedbackRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateAuthEventFeedback(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocatePrivateVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceType() != null)\r\n        sb.append(\"VirtualInterfaceType: \").append(getVirtualInterfaceType()).append(\",\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState()).append(\",\");\r\n    if (getCustomerRouterConfig() != null)\r\n        sb.append(\"CustomerRouterConfig: \").append(getCustomerRouterConfig()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes()).append(\",\");\r\n    if (getBgpPeers() != null)\r\n        sb.append(\"BgpPeers: \").append(getBgpPeers()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateUserPoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeKeyPhrasesDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.EventSubscription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCustomerAwsId() != null)\r\n        sb.append(\"CustomerAwsId: \").append(getCustomerAwsId()).append(\",\");\r\n    if (getCustSubscriptionId() != null)\r\n        sb.append(\"CustSubscriptionId: \").append(getCustSubscriptionId()).append(\",\");\r\n    if (getSnsTopicArn() != null)\r\n        sb.append(\"SnsTopicArn: \").append(getSnsTopicArn()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getSubscriptionCreationTime() != null)\r\n        sb.append(\"SubscriptionCreationTime: \").append(getSubscriptionCreationTime()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getSourceIdsList() != null)\r\n        sb.append(\"SourceIdsList: \").append(getSourceIdsList()).append(\",\");\r\n    if (getEventCategoriesList() != null)\r\n        sb.append(\"EventCategoriesList: \").append(getEventCategoriesList()).append(\",\");\r\n    if (getEnabled() != null)\r\n        sb.append(\"Enabled: \").append(getEnabled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.RetryUtils.isClockSkewError",
	"Comment": "returns true if the specified exception is a clock skew error.",
	"Method": "boolean isClockSkewError(AmazonServiceException exception,boolean isClockSkewError,SdkBaseException exception){\r\n    return isAse(exception) && CLOCK_SKEW_ERROR_CODES.contains(toAse(exception).getErrorCode());\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UpdateClusterResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCluster() != null)\r\n        sb.append(\"Cluster: \").append(getCluster());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.AccountAggregationSource.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountIds() != null)\r\n        sb.append(\"AccountIds: \").append(getAccountIds()).append(\",\");\r\n    if (getAllAwsRegions() != null)\r\n        sb.append(\"AllAwsRegions: \").append(getAllAwsRegions()).append(\",\");\r\n    if (getAwsRegions() != null)\r\n        sb.append(\"AwsRegions: \").append(getAwsRegions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.describeConfigRuleEvaluationStatusAsync",
	"Comment": "simplified method form for invoking the describeconfigruleevaluationstatus operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync(DescribeConfigRuleEvaluationStatusRequest request,java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync,DescribeConfigRuleEvaluationStatusRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigRuleEvaluationStatusRequest, DescribeConfigRuleEvaluationStatusResult> asyncHandler,java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync,java.util.concurrent.Future<DescribeConfigRuleEvaluationStatusResult> describeConfigRuleEvaluationStatusAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigRuleEvaluationStatusRequest, DescribeConfigRuleEvaluationStatusResult> asyncHandler){\r\n    return describeConfigRuleEvaluationStatusAsync(new DescribeConfigRuleEvaluationStatusRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.model.ReportDefinition.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReportName() != null)\r\n        sb.append(\"ReportName: \").append(getReportName()).append(\",\");\r\n    if (getTimeUnit() != null)\r\n        sb.append(\"TimeUnit: \").append(getTimeUnit()).append(\",\");\r\n    if (getFormat() != null)\r\n        sb.append(\"Format: \").append(getFormat()).append(\",\");\r\n    if (getCompression() != null)\r\n        sb.append(\"Compression: \").append(getCompression()).append(\",\");\r\n    if (getAdditionalSchemaElements() != null)\r\n        sb.append(\"AdditionalSchemaElements: \").append(getAdditionalSchemaElements()).append(\",\");\r\n    if (getS3Bucket() != null)\r\n        sb.append(\"S3Bucket: \").append(getS3Bucket()).append(\",\");\r\n    if (getS3Prefix() != null)\r\n        sb.append(\"S3Prefix: \").append(getS3Prefix()).append(\",\");\r\n    if (getS3Region() != null)\r\n        sb.append(\"S3Region: \").append(getS3Region()).append(\",\");\r\n    if (getAdditionalArtifacts() != null)\r\n        sb.append(\"AdditionalArtifacts: \").append(getAdditionalArtifacts());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SchemaAttributeType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getAttributeDataType() != null)\r\n        sb.append(\"AttributeDataType: \").append(getAttributeDataType()).append(\",\");\r\n    if (getDeveloperOnlyAttribute() != null)\r\n        sb.append(\"DeveloperOnlyAttribute: \").append(getDeveloperOnlyAttribute()).append(\",\");\r\n    if (getMutable() != null)\r\n        sb.append(\"Mutable: \").append(getMutable()).append(\",\");\r\n    if (getRequired() != null)\r\n        sb.append(\"Required: \").append(getRequired()).append(\",\");\r\n    if (getNumberAttributeConstraints() != null)\r\n        sb.append(\"NumberAttributeConstraints: \").append(getNumberAttributeConstraints()).append(\",\");\r\n    if (getStringAttributeConstraints() != null)\r\n        sb.append(\"StringAttributeConstraints: \").append(getStringAttributeConstraints());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteConfigurationRecorderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecorderName() != null)\r\n        sb.append(\"ConfigurationRecorderName: \").append(getConfigurationRecorderName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeConditionalForwardersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getRemoteDomainNames() != null)\r\n        sb.append(\"RemoteDomainNames: \").append(getRemoteDomainNames());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserImportJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ReservationCoverageGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes()).append(\",\");\r\n    if (getCoverage() != null)\r\n        sb.append(\"Coverage: \").append(getCoverage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceSummaryByResourceTypeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComplianceSummariesByResourceType() != null)\r\n        sb.append(\"ComplianceSummariesByResourceType: \").append(getComplianceSummariesByResourceType());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.VirtualInterface.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceType() != null)\r\n        sb.append(\"VirtualInterfaceType: \").append(getVirtualInterfaceType()).append(\",\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState()).append(\",\");\r\n    if (getCustomerRouterConfig() != null)\r\n        sb.append(\"CustomerRouterConfig: \").append(getCustomerRouterConfig()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes()).append(\",\");\r\n    if (getBgpPeers() != null)\r\n        sb.append(\"BgpPeers: \").append(getBgpPeers()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.publishResponseReset",
	"Comment": "convenient method to publish a response reset event to the given listener.",
	"Method": "Future<?> publishResponseReset(ProgressListener listener,long bytesReset){\r\n    return publishResetEvent(listener, HTTP_RESPONSE_CONTENT_RESET_EVENT, bytesReset);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.StringAttributeConstraintsType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMinLength() != null)\r\n        sb.append(\"MinLength: \").append(getMinLength()).append(\",\");\r\n    if (getMaxLength() != null)\r\n        sb.append(\"MaxLength: \").append(getMaxLength());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DescribeUserHierarchyGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHierarchyGroupId() != null)\r\n        sb.append(\"HierarchyGroupId: \").append(getHierarchyGroupId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.regions.Region.hasHttpEndpoint",
	"Comment": "returns whether the given service support the http protocol in this region.",
	"Method": "boolean hasHttpEndpoint(String serviceName){\r\n    return regionImpl.hasHttpEndpoint(serviceName);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CancelTaskExecutionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigRule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName()).append(\",\");\r\n    if (getConfigRuleArn() != null)\r\n        sb.append(\"ConfigRuleArn: \").append(getConfigRuleArn()).append(\",\");\r\n    if (getConfigRuleId() != null)\r\n        sb.append(\"ConfigRuleId: \").append(getConfigRuleId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getScope() != null)\r\n        sb.append(\"Scope: \").append(getScope()).append(\",\");\r\n    if (getSource() != null)\r\n        sb.append(\"Source: \").append(getSource()).append(\",\");\r\n    if (getInputParameters() != null)\r\n        sb.append(\"InputParameters: \").append(getInputParameters()).append(\",\");\r\n    if (getMaximumExecutionFrequency() != null)\r\n        sb.append(\"MaximumExecutionFrequency: \").append(getMaximumExecutionFrequency()).append(\",\");\r\n    if (getConfigRuleState() != null)\r\n        sb.append(\"ConfigRuleState: \").append(getConfigRuleState()).append(\",\");\r\n    if (getCreatedBy() != null)\r\n        sb.append(\"CreatedBy: \").append(getCreatedBy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateDiscoveredResourceCountsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getGroupByKey() != null)\r\n        sb.append(\"GroupByKey: \").append(getGroupByKey()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.protocol.json.SdkJsonProtocolFactory.createResponseHandler",
	"Comment": "returns the response handler to be used for handling a successful response.",
	"Method": "HttpResponseHandler<AmazonWebServiceResponse<T>> createResponseHandler(JsonOperationMetadata operationMetadata,Unmarshaller<T, JsonUnmarshallerContext> responseUnmarshaller){\r\n    return getSdkFactory().createResponseHandler(operationMetadata, responseUnmarshaller);\r\n}"
}, {
	"Path": "com.amazonaws.transform.StaxUnmarshallerContext.testExpression",
	"Comment": "tests the specified expression against the current position in the xmldocument being parsed, and restricts the expression to matching at thespecified stack depth.",
	"Method": "boolean testExpression(String expression,boolean testExpression,String expression,int startingStackDepth){\r\n    if (expression.equals(\".\"))\r\n        return true;\r\n    int index = -1;\r\n    while ((index = expression.indexOf(\"/\", index + 1)) > -1) {\r\n        if (expression.charAt(index + 1) != '@') {\r\n            startingStackDepth++;\r\n        }\r\n    }\r\n    return (startingStackDepth == getCurrentDepth() && stackString.endsWith(\"/\" + expression));\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StartExportTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportDataFormat() != null)\r\n        sb.append(\"ExportDataFormat: \").append(getExportDataFormat()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeSchemasRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.GetIdentityPoolConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteReplicationTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTask() != null)\r\n        sb.append(\"ReplicationTask: \").append(getReplicationTask());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserPoolClientRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.LambdaConfigType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPreSignUp() != null)\r\n        sb.append(\"PreSignUp: \").append(getPreSignUp()).append(\",\");\r\n    if (getCustomMessage() != null)\r\n        sb.append(\"CustomMessage: \").append(getCustomMessage()).append(\",\");\r\n    if (getPostConfirmation() != null)\r\n        sb.append(\"PostConfirmation: \").append(getPostConfirmation()).append(\",\");\r\n    if (getPreAuthentication() != null)\r\n        sb.append(\"PreAuthentication: \").append(getPreAuthentication()).append(\",\");\r\n    if (getPostAuthentication() != null)\r\n        sb.append(\"PostAuthentication: \").append(getPostAuthentication()).append(\",\");\r\n    if (getDefineAuthChallenge() != null)\r\n        sb.append(\"DefineAuthChallenge: \").append(getDefineAuthChallenge()).append(\",\");\r\n    if (getCreateAuthChallenge() != null)\r\n        sb.append(\"CreateAuthChallenge: \").append(getCreateAuthChallenge()).append(\",\");\r\n    if (getVerifyAuthChallengeResponse() != null)\r\n        sb.append(\"VerifyAuthChallengeResponse: \").append(getVerifyAuthChallengeResponse()).append(\",\");\r\n    if (getPreTokenGeneration() != null)\r\n        sb.append(\"PreTokenGeneration: \").append(getPreTokenGeneration()).append(\",\");\r\n    if (getUserMigration() != null)\r\n        sb.append(\"UserMigration: \").append(getUserMigration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.CreateClusterRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClusterName() != null)\r\n        sb.append(\"ClusterName: \").append(getClusterName()).append(\",\");\r\n    if (getNodeType() != null)\r\n        sb.append(\"NodeType: \").append(getNodeType()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getReplicationFactor() != null)\r\n        sb.append(\"ReplicationFactor: \").append(getReplicationFactor()).append(\",\");\r\n    if (getAvailabilityZones() != null)\r\n        sb.append(\"AvailabilityZones: \").append(getAvailabilityZones()).append(\",\");\r\n    if (getSubnetGroupName() != null)\r\n        sb.append(\"SubnetGroupName: \").append(getSubnetGroupName()).append(\",\");\r\n    if (getSecurityGroupIds() != null)\r\n        sb.append(\"SecurityGroupIds: \").append(getSecurityGroupIds()).append(\",\");\r\n    if (getPreferredMaintenanceWindow() != null)\r\n        sb.append(\"PreferredMaintenanceWindow: \").append(getPreferredMaintenanceWindow()).append(\",\");\r\n    if (getNotificationTopicArn() != null)\r\n        sb.append(\"NotificationTopicArn: \").append(getNotificationTopicArn()).append(\",\");\r\n    if (getIamRoleArn() != null)\r\n        sb.append(\"IamRoleArn: \").append(getIamRoleArn()).append(\",\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getSSESpecification() != null)\r\n        sb.append(\"SSESpecification: \").append(getSSESpecification());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.AddIpRoutesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopDominantLanguageDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteProjectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.ConfirmPrivateVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponse.addHeader",
	"Comment": "adds an http header to the set associated with this response.",
	"Method": "void addHeader(String name,String value){\r\n    headers.put(name, value);\r\n}"
}, {
	"Path": "com.amazonaws.http.ExecutionContext.setAuthErrorRetryStrategy",
	"Comment": "sets the optional auth error retry strategy for this request execution.",
	"Method": "void setAuthErrorRetryStrategy(AuthErrorRetryStrategy authErrorRetryStrategy){\r\n    this.authErrorRetryStrategy = authErrorRetryStrategy;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteLagRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.retry.PredefinedRetryPolicies.getDefaultRetryPolicy",
	"Comment": "returns the sdk default retry policy. this policy will honor themaxerrorretry set in clientconfiguration.",
	"Method": "RetryPolicy getDefaultRetryPolicy(){\r\n    return new RetryPolicy(DEFAULT_RETRY_CONDITION, DEFAULT_BACKOFF_STRATEGY, DEFAULT_MAX_ERROR_RETRY, true);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserImportJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserImportJob() != null)\r\n        sb.append(\"UserImportJob: \").append(getUserImportJob());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetAggregateConfigRuleComplianceSummaryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getGroupByKey() != null)\r\n        sb.append(\"GroupByKey: \").append(getGroupByKey()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.Lag.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionsBandwidth() != null)\r\n        sb.append(\"ConnectionsBandwidth: \").append(getConnectionsBandwidth()).append(\",\");\r\n    if (getNumberOfConnections() != null)\r\n        sb.append(\"NumberOfConnections: \").append(getNumberOfConnections()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getLagName() != null)\r\n        sb.append(\"LagName: \").append(getLagName()).append(\",\");\r\n    if (getLagState() != null)\r\n        sb.append(\"LagState: \").append(getLagState()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getMinimumLinks() != null)\r\n        sb.append(\"MinimumLinks: \").append(getMinimumLinks()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections()).append(\",\");\r\n    if (getAllowsHostedConnections() != null)\r\n        sb.append(\"AllowsHostedConnections: \").append(getAllowsHostedConnections()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeRiskConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.DescribeObjectsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineObjects() != null)\r\n        sb.append(\"PipelineObjects: \").append(getPipelineObjects()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getHasMoreResults() != null)\r\n        sb.append(\"HasMoreResults: \").append(getHasMoreResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListArtifactsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArtifacts() != null)\r\n        sb.append(\"Artifacts: \").append(getArtifacts()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.NetworkProfile.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getUplinkBandwidthBits() != null)\r\n        sb.append(\"UplinkBandwidthBits: \").append(getUplinkBandwidthBits()).append(\",\");\r\n    if (getDownlinkBandwidthBits() != null)\r\n        sb.append(\"DownlinkBandwidthBits: \").append(getDownlinkBandwidthBits()).append(\",\");\r\n    if (getUplinkDelayMs() != null)\r\n        sb.append(\"UplinkDelayMs: \").append(getUplinkDelayMs()).append(\",\");\r\n    if (getDownlinkDelayMs() != null)\r\n        sb.append(\"DownlinkDelayMs: \").append(getDownlinkDelayMs()).append(\",\");\r\n    if (getUplinkJitterMs() != null)\r\n        sb.append(\"UplinkJitterMs: \").append(getUplinkJitterMs()).append(\",\");\r\n    if (getDownlinkJitterMs() != null)\r\n        sb.append(\"DownlinkJitterMs: \").append(getDownlinkJitterMs()).append(\",\");\r\n    if (getUplinkLossPercent() != null)\r\n        sb.append(\"UplinkLossPercent: \").append(getUplinkLossPercent()).append(\",\");\r\n    if (getDownlinkLossPercent() != null)\r\n        sb.append(\"DownlinkLossPercent: \").append(getDownlinkLossPercent());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ResultByTime.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTimePeriod() != null)\r\n        sb.append(\"TimePeriod: \").append(getTimePeriod()).append(\",\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal()).append(\",\");\r\n    if (getGroups() != null)\r\n        sb.append(\"Groups: \").append(getGroups()).append(\",\");\r\n    if (getEstimated() != null)\r\n        sb.append(\"Estimated: \").append(getEstimated());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.listUserHierarchyGroups",
	"Comment": "returns a userhierarchygroupsummarylist, which is an array of hierarchygroupsummaryobjects that contain information about the hierarchy groups in your instance.",
	"Method": "ListUserHierarchyGroupsResult listUserHierarchyGroups(ListUserHierarchyGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListUserHierarchyGroups(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteDirectConnectGatewayAssociationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayAssociation() != null)\r\n        sb.append(\"DirectConnectGatewayAssociation: \").append(getDirectConnectGatewayAssociation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DirectConnectGateway.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayName() != null)\r\n        sb.append(\"DirectConnectGatewayName: \").append(getDirectConnectGatewayName()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getDirectConnectGatewayState() != null)\r\n        sb.append(\"DirectConnectGatewayState: \").append(getDirectConnectGatewayState()).append(\",\");\r\n    if (getStateChangeError() != null)\r\n        sb.append(\"StateChangeError: \").append(getStateChangeError());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateRadiusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerInputDataConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntityTypes() != null)\r\n        sb.append(\"EntityTypes: \").append(getEntityTypes()).append(\",\");\r\n    if (getDocuments() != null)\r\n        sb.append(\"Documents: \").append(getDocuments()).append(\",\");\r\n    if (getAnnotations() != null)\r\n        sb.append(\"Annotations: \").append(getAnnotations()).append(\",\");\r\n    if (getEntityList() != null)\r\n        sb.append(\"EntityList: \").append(getEntityList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ListServerNeighborsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNeighbors() != null)\r\n        sb.append(\"Neighbors: \").append(getNeighbors()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getKnownDependencyCount() != null)\r\n        sb.append(\"KnownDependencyCount: \").append(getKnownDependencyCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazondax using the current builder configuration.",
	"Method": "AmazonDax build(AwsSyncClientParams params){\r\n    return new AmazonDaxClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.ConfirmPublicVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.putEvaluations",
	"Comment": "used by an aws lambda function to deliver evaluation results to aws config. this action is required in every awslambda function that is invoked by an aws config rule.",
	"Method": "PutEvaluationsResult putEvaluations(PutEvaluationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutEvaluations(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectKeyPhrasesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKeyPhrases() != null)\r\n        sb.append(\"KeyPhrases: \").append(getKeyPhrases());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.internal.JsonPolicyWriter.writeJsonObjectStart",
	"Comment": "writes the start of object string to the jsongenerator along with objectname.",
	"Method": "void writeJsonObjectStart(String fieldName){\r\n    generator.writeObjectFieldStart(fieldName);\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.describeContinuousExports",
	"Comment": "lists exports as specified by id. all continuous exports associated with your user account can be listed if youcall describecontinuousexports as is without passing any parameters.",
	"Method": "DescribeContinuousExportsResult describeContinuousExports(DescribeContinuousExportsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeContinuousExports(request);\r\n}"
}, {
	"Path": "com.amazonaws.regions.AwsRegionProviderChainTest.providerThrowsError_DoesNotContinueChain",
	"Comment": "only exceptions should be caught and continued, errors should propagate to caller and shortcircuit the chain.",
	"Method": "void providerThrowsError_DoesNotContinueChain(){\r\n    final String expectedRegion = \"some-region-string\";\r\n    AwsRegionProviderChain chain = new AwsRegionProviderChain(new NeverAwsRegionProvider(), new FatalAwsRegionProvider(), new StaticAwsRegionProvider(expectedRegion));\r\n    assertEquals(expectedRegion, chain.getRegion());\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.createConditionalForwarder",
	"Comment": "creates a conditional forwarder associated with your aws directory. conditional forwarders are required in orderto set up a trust relationship with another domain. the conditional forwarder points to the trusted domain.",
	"Method": "CreateConditionalForwarderResult createConditionalForwarder(CreateConditionalForwarderRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateConditionalForwarder(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.OfferingPromotion.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.conn.ssl.ShouldClearSslSessionPredicate.isExceptionAffected",
	"Comment": "restrict the workaround to only certain types of sslexceptions that indicate the bug may havebeen encountered.",
	"Method": "boolean isExceptionAffected(String exceptionMessage){\r\n    if (exceptionMessage != null) {\r\n        for (String affectedMessage : EXCEPTION_MESSAGE_WHITELIST) {\r\n            if (exceptionMessage.contains(affectedMessage)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DescribeDatasetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getDatasetName() != null)\r\n        sb.append(\"DatasetName: \").append(getDatasetName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.listSchemaExtensions",
	"Comment": "lists all schema extensions applied to a microsoft ad directory.",
	"Method": "ListSchemaExtensionsResult listSchemaExtensions(ListSchemaExtensionsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListSchemaExtensions(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateDeviceStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey()).append(\",\");\r\n    if (getDeviceRememberedStatus() != null)\r\n        sb.append(\"DeviceRememberedStatus: \").append(getDeviceRememberedStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroup() != null)\r\n        sb.append(\"Group: \").append(getGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceDetailsByResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getComplianceTypes() != null)\r\n        sb.append(\"ComplianceTypes: \").append(getComplianceTypes()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.NewBGPPeer.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.CredentialScope.getService",
	"Comment": "returns the service name string to be used when signing a request for anendpoint.",
	"Method": "String getService(){\r\n    return service;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ResourceServerScopeType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScopeName() != null)\r\n        sb.append(\"ScopeName: \").append(getScopeName()).append(\",\");\r\n    if (getScopeDescription() != null)\r\n        sb.append(\"ScopeDescription: \").append(getScopeDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeParametersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName()).append(\",\");\r\n    if (getSource() != null)\r\n        sb.append(\"Source: \").append(getSource()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Policy.setId",
	"Comment": "sets the policy id for this policy. policy ids serve to help developerskeep track of multiple policies, and are often used as human readablename for a policy.",
	"Method": "void setId(String id){\r\n    this.id = id;\r\n}"
}, {
	"Path": "com.amazonaws.internal.config.InternalConfigTest.testServiceSpecificSigners",
	"Comment": "this test case tests signers for all aws regions mentioned in theregions",
	"Method": "void testServiceSpecificSigners(){\r\n    Set<Map.Entry<String, String>> entrySet = serviceSignerMap.entrySet();\r\n    for (Entry<String, String> entry : entrySet) {\r\n        testAllRegions(entry.getKey(), entry.getValue());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateDeviceStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Resource.isNotType",
	"Comment": "returns whether this resource is a notresource element, which explicitly matches everything except the specifiedlist of resources. note that statements must include either a resource or a notresource element",
	"Method": "boolean isNotType(){\r\n    return isNotType;\r\n}"
}, {
	"Path": "com.amazonaws.waiters.CompositeAcceptor.accepts",
	"Comment": "compares the exception thrown against each exception acceptor andreturns the state of the acceptor it matches on. if none ismatched, it rethrows the exception to the caller",
	"Method": "WaiterState accepts(Output response,WaiterState accepts,AmazonServiceException exception){\r\n    for (WaiterAcceptor<Output> acceptor : acceptors) {\r\n        if (acceptor.matches(exception)) {\r\n            return acceptor.getState();\r\n        }\r\n    }\r\n    throw exception;\r\n}"
}, {
	"Path": "com.amazonaws.util.PolicyUtils.validateResourceList",
	"Comment": "determines if a list of resource objects is valid, containing either all notresource elements or all resourceelements",
	"Method": "void validateResourceList(List<Resource> resourceList){\r\n    boolean hasNotResource = false;\r\n    boolean hasResource = false;\r\n    for (Resource resource : resourceList) {\r\n        if (resource.isNotType()) {\r\n            hasNotResource = true;\r\n        } else {\r\n            hasResource = true;\r\n        }\r\n        if (hasResource && hasNotResource) {\r\n            throw new IllegalArgumentException(PolicyUtils.INVALID_RESOURCE);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.setServiceNameIntern",
	"Comment": "an internal method used to explicitly override the service namecomputed by the default implementation. this method is not expected to benormally called except for aws internal development purposes.",
	"Method": "void setServiceNameIntern(String serviceName){\r\n    if (serviceName == null)\r\n        throw new IllegalArgumentException(\"The parameter serviceName must be specified!\");\r\n    this.serviceName = serviceName;\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4SignerTest.testAnonymous",
	"Comment": "tests that if passed anonymous credentials, signer will not generate a signature",
	"Method": "void testAnonymous(){\r\n    AWSCredentials credentials = new AnonymousAWSCredentials();\r\n    SignableRequest<?> request = generateBasicRequest();\r\n    Calendar c = new GregorianCalendar();\r\n    c.set(1981, 1, 16, 6, 30, 0);\r\n    c.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n    signer.setServiceName(\"demo\");\r\n    signer.setOverrideDate(c.getTime());\r\n    signer.sign(request, credentials);\r\n    assertNull(request.getHeaders().get(\"Authorization\"));\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.stopRun",
	"Comment": "initiates a stop request for the current test run. aws device farm will immediately stop the run on devices wheretests have not started executing, and you will not be billed for these devices. on devices where tests havestarted executing, setup suite and teardown suite tests will run to completion before stopping execution on thosedevices. you will be billed for setup, teardown, and any tests that were in progress or already completed.",
	"Method": "StopRunResult stopRun(StopRunRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStopRun(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyTest.testMultipleStatements",
	"Comment": "tests serializing a more complex policy object with multiple statements.",
	"Method": "void testMultipleStatements(){\r\n    Policy policy = new Policy(\"S3PolicyId1\");\r\n    policy.withStatements(new Statement(Effect.Allow).withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action1\")).withResources(new Resource(\"resource\")).withConditions(new IpAddressCondition(\"192.168.143.0/24\"), new IpAddressCondition(IpAddressComparisonType.NotIpAddress, \"192.168.143.188/32\")), new Statement(Effect.Deny).withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action2\")).withResources(new Resource(\"resource\")).withConditions(new IpAddressCondition(\"10.1.2.0/24\")));\r\n    JsonNode jsonPolicy = Jackson.jsonNodeOf(policy.toJson());\r\n    assertTrue(jsonPolicy.has(\"Id\"));\r\n    JsonNode statementArray = jsonPolicy.get(\"Statement\");\r\n    assertEquals(statementArray.size(), 2);\r\n    assertValidStatementIds(policy);\r\n    JsonNode statement;\r\n    for (int i = 0; i < statementArray.size(); i++) {\r\n        statement = statementArray.get(i);\r\n        assertTrue(statement.has(\"Sid\"));\r\n        assertTrue(statement.has(\"Effect\"));\r\n        assertTrue(statement.has(\"Principal\"));\r\n        assertTrue(statement.has(\"Action\"));\r\n        assertTrue(statement.has(\"Resource\"));\r\n        assertTrue(statement.has(\"Condition\"));\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.http.AmazonHttpClient.configUnreliableTestConditions",
	"Comment": "used to configure the test conditions for injecting intermittent failures to the contentinput stream.",
	"Method": "void configUnreliableTestConditions(UnreliableTestConfig config){\r\n    unreliableTestConfig = config;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.CreateLocationS3Result.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.startDataCollectionByAgentIds",
	"Comment": "instructs the specified agents or connectors to start collecting data.",
	"Method": "StartDataCollectionByAgentIdsResult startDataCollectionByAgentIds(StartDataCollectionByAgentIdsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartDataCollectionByAgentIds(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.InstanceProfileCredentialsProviderIntegrationTest.testMultipleThreadsLoadingAndRefreshingCredentials",
	"Comment": "tests by initiating a refresh thread in parallel which refreshes thecredentials. next call to credentials provider will result in refreshingand getting new credentials.",
	"Method": "void testMultipleThreadsLoadingAndRefreshingCredentials(){\r\n    mockServer.setResponseFileName(\"sessionResponse\");\r\n    mockServer.setAvailableSecurityCredentials(\"test-credentials\");\r\n    InstanceProfileCredentialsProvider credentialsProvider = new InstanceProfileCredentialsProvider();\r\n    AWSSessionCredentials credentials = (AWSSessionCredentials) credentialsProvider.getCredentials();\r\n    assertNotNull(credentials);\r\n    new RefreshThread(credentialsProvider).join();\r\n    AWSSessionCredentials newCredentials = (AWSSessionCredentials) credentialsProvider.getCredentials();\r\n    assertNotNull(newCredentials);\r\n    assertNotSame(credentials, newCredentials);\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClientTest.connectionManagersAreUnregisteredFromIdleConnectionReaper",
	"Comment": "a memory leak was introduced in 1.11 that prevented connection managers from beingderegistered with the idleconnectionreaper. this test asserts that any clients registeredwith the reaper are also deregistered on shutdown of the client.",
	"Method": "void connectionManagersAreUnregisteredFromIdleConnectionReaper(){\r\n    IdleConnectionReaper.shutdown();\r\n    for (int count = 0; count < 100; count++) {\r\n        new AmazonWebServiceClient(new ClientConfiguration()) {\r\n        }.shutdown();\r\n    }\r\n    assertEquals(0, IdleConnectionReaper.getRegisteredConnectionManagers().size());\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.TaskExecutionListEntry.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskExecutionArn() != null)\r\n        sb.append(\"TaskExecutionArn: \").append(getTaskExecutionArn()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.createUserPool",
	"Comment": "creates a new amazon cognito user pool and sets the password policy for the pool.",
	"Method": "CreateUserPoolResult createUserPool(CreateUserPoolRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateUserPool(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.Node.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNodeId() != null)\r\n        sb.append(\"NodeId: \").append(getNodeId()).append(\",\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint()).append(\",\");\r\n    if (getNodeCreateTime() != null)\r\n        sb.append(\"NodeCreateTime: \").append(getNodeCreateTime()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getNodeStatus() != null)\r\n        sb.append(\"NodeStatus: \").append(getNodeStatus()).append(\",\");\r\n    if (getParameterGroupStatus() != null)\r\n        sb.append(\"ParameterGroupStatus: \").append(getParameterGroupStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.StringUtils.beginsWithIgnoreCase",
	"Comment": "performs a case insensitive comparison and returns true if the databegins with the given sequence.",
	"Method": "boolean beginsWithIgnoreCase(String data,String seq){\r\n    return data.regionMatches(true, 0, seq, 0, seq.length());\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListEntitiesDetectionJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntitiesDetectionJobPropertiesList() != null)\r\n        sb.append(\"EntitiesDetectionJobPropertiesList: \").append(getEntitiesDetectionJobPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.RuntimeHttpUtils.fetchFile",
	"Comment": "fetches a file from the uri given and returns an input stream to it.",
	"Method": "InputStream fetchFile(URI uri,ClientConfiguration config){\r\n    HttpParams httpClientParams = new BasicHttpParams();\r\n    HttpProtocolParams.setUserAgent(httpClientParams, getUserAgent(config, null));\r\n    HttpConnectionParams.setConnectionTimeout(httpClientParams, getConnectionTimeout(config));\r\n    HttpConnectionParams.setSoTimeout(httpClientParams, getSocketTimeout(config));\r\n    DefaultHttpClient httpclient = new DefaultHttpClient(httpClientParams);\r\n    if (config != null) {\r\n        String proxyHost = config.getProxyHost();\r\n        int proxyPort = config.getProxyPort();\r\n        if (proxyHost != null && proxyPort > 0) {\r\n            HttpHost proxy = new HttpHost(proxyHost, proxyPort);\r\n            httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);\r\n            if (config.getProxyUsername() != null && config.getProxyPassword() != null) {\r\n                httpclient.getCredentialsProvider().setCredentials(new AuthScope(proxyHost, proxyPort), new NTCredentials(config.getProxyUsername(), config.getProxyPassword(), config.getProxyWorkstation(), config.getProxyDomain()));\r\n            }\r\n        }\r\n    }\r\n    HttpResponse response = httpclient.execute(new HttpGet(uri));\r\n    if (response.getStatusLine().getStatusCode() != 200) {\r\n        throw new IOException(\"Error fetching file from \" + uri + \": \" + response);\r\n    }\r\n    return new HttpClientWrappingInputStream(httpclient, response.getEntity().getContent());\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.model.DeleteReportDefinitionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResponseMessage() != null)\r\n        sb.append(\"ResponseMessage: \").append(getResponseMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.InitiateAuthResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getChallengeName() != null)\r\n        sb.append(\"ChallengeName: \").append(getChallengeName()).append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession()).append(\",\");\r\n    if (getChallengeParameters() != null)\r\n        sb.append(\"ChallengeParameters: \").append(getChallengeParameters()).append(\",\");\r\n    if (getAuthenticationResult() != null)\r\n        sb.append(\"AuthenticationResult: \").append(getAuthenticationResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidentity.model.UnprocessedIdentityId.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getErrorCode() != null)\r\n        sb.append(\"ErrorCode: \").append(getErrorCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteRemoteAccessSessionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsdatasyncasync using the current builder configuration.",
	"Method": "AWSDataSyncAsync build(AwsAsyncClientParams params){\r\n    return new AWSDataSyncAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.AWSComprehendMedicalClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetRemoteAccessSessionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRemoteAccessSession() != null)\r\n        sb.append(\"RemoteAccessSession: \").append(getRemoteAccessSession());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.describeObjects",
	"Comment": "gets the object definitions for a set of objects associated with the pipeline. object definitions are composed ofa set of fields that define the properties of the object.",
	"Method": "DescribeObjectsResult describeObjects(DescribeObjectsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeObjects(request);\r\n}"
}, {
	"Path": "com.amazonaws.TestPreConditions.assumeNotJava6",
	"Comment": "precondition to assume the running environment is not java6. tests are skipped if run with ajava6 jvm. used to test features that are only compatible with later versions of java such asthe client execution and request timeout features",
	"Method": "void assumeNotJava6(){\r\n    Assume.assumeFalse(isJava6());\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListTagsForResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.SdkFilterInputStream.abortIfNeeded",
	"Comment": "aborts with subclass specific abortion logic executed if needed.note the interrupted status of the thread is cleared by this method.",
	"Method": "void abortIfNeeded(){\r\n    if (shouldAbort()) {\r\n        abort();\r\n        throw new AbortedException();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DisassociateConfigurationItemsFromApplicationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApplicationConfigurationId() != null)\r\n        sb.append(\"ApplicationConfigurationId: \").append(getApplicationConfigurationId()).append(\",\");\r\n    if (getConfigurationIds() != null)\r\n        sb.append(\"ConfigurationIds: \").append(getConfigurationIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.deleteConnection",
	"Comment": "deletes the specified connection.deleting a connection only stops the aws direct connect port hour and data transfer charges. if you arepartnering with any third parties to connect with the aws direct connect location, you must cancel your servicewith them separately.",
	"Method": "DeleteConnectionResult deleteConnection(DeleteConnectionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteConnection(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListIpRoutesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIpRoutesInfo() != null)\r\n        sb.append(\"IpRoutesInfo: \").append(getIpRoutesInfo()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.setProxyPassword",
	"Comment": "sets the optional proxy password to use when connecting through a proxy.",
	"Method": "void setProxyPassword(String proxyPassword){\r\n    this.proxyPassword = proxyPassword;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListRunsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.Dimensions.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getQueue() != null)\r\n        sb.append(\"Queue: \").append(getQueue()).append(\",\");\r\n    if (getChannel() != null)\r\n        sb.append(\"Channel: \").append(getChannel());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.BatchGetAggregateResourceConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBaseConfigurationItems() != null)\r\n        sb.append(\"BaseConfigurationItems: \").append(getBaseConfigurationItems()).append(\",\");\r\n    if (getUnprocessedResourceIdentifiers() != null)\r\n        sb.append(\"UnprocessedResourceIdentifiers: \").append(getUnprocessedResourceIdentifiers());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMClient.createLifecyclePolicy",
	"Comment": "creates a policy to manage the lifecycle of the specified aws resources. you can create up to 100 lifecyclepolicies.",
	"Method": "CreateLifecyclePolicyResult createLifecyclePolicy(CreateLifecyclePolicyRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateLifecyclePolicy(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.InitiateAuthRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAuthFlow() != null)\r\n        sb.append(\"AuthFlow: \").append(getAuthFlow()).append(\",\");\r\n    if (getAuthParameters() != null)\r\n        sb.append(\"AuthParameters: \").append(getAuthParameters()).append(\",\");\r\n    if (getClientMetadata() != null)\r\n        sb.append(\"ClientMetadata: \").append(getClientMetadata()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata()).append(\",\");\r\n    if (getUserContextData() != null)\r\n        sb.append(\"UserContextData: \").append(getUserContextData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeAggregateComplianceByConfigRulesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.ListRecordsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRecords() != null)\r\n        sb.append(\"Records: \").append(getRecords()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getCount() != null)\r\n        sb.append(\"Count: \").append(getCount()).append(\",\");\r\n    if (getDatasetSyncCount() != null)\r\n        sb.append(\"DatasetSyncCount: \").append(getDatasetSyncCount()).append(\",\");\r\n    if (getLastModifiedBy() != null)\r\n        sb.append(\"LastModifiedBy: \").append(getLastModifiedBy()).append(\",\");\r\n    if (getMergedDatasetNames() != null)\r\n        sb.append(\"MergedDatasetNames: \").append(getMergedDatasetNames()).append(\",\");\r\n    if (getDatasetExists() != null)\r\n        sb.append(\"DatasetExists: \").append(getDatasetExists()).append(\",\");\r\n    if (getDatasetDeletedAfterRequestedSyncCount() != null)\r\n        sb.append(\"DatasetDeletedAfterRequestedSyncCount: \").append(getDatasetDeletedAfterRequestedSyncCount()).append(\",\");\r\n    if (getSyncSessionToken() != null)\r\n        sb.append(\"SyncSessionToken: \").append(getSyncSessionToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.ContinuousExportDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportId() != null)\r\n        sb.append(\"ExportId: \").append(getExportId()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getStatusDetail() != null)\r\n        sb.append(\"StatusDetail: \").append(getStatusDetail()).append(\",\");\r\n    if (getS3Bucket() != null)\r\n        sb.append(\"S3Bucket: \").append(getS3Bucket()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getStopTime() != null)\r\n        sb.append(\"StopTime: \").append(getStopTime()).append(\",\");\r\n    if (getDataSource() != null)\r\n        sb.append(\"DataSource: \").append(getDataSource()).append(\",\");\r\n    if (getSchemaStorageConfig() != null)\r\n        sb.append(\"SchemaStorageConfig: \").append(getSchemaStorageConfig());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListKeyPhrasesDetectionJobsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getKeyPhrasesDetectionJobPropertiesList() != null)\r\n        sb.append(\"KeyPhrasesDetectionJobPropertiesList: \").append(getKeyPhrasesDetectionJobPropertiesList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.StopUserImportJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationRecorderStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecordersStatus() != null)\r\n        sb.append(\"ConfigurationRecordersStatus: \").append(getConfigurationRecordersStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getHeader",
	"Comment": "returns the value of the header with the specified name from theresponse, or null if not present.",
	"Method": "String getHeader(String header){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceAsyncClient.getDirectoryLimitsAsync",
	"Comment": "simplified method form for invoking the getdirectorylimits operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync(GetDirectoryLimitsRequest request,java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync,GetDirectoryLimitsRequest request,com.amazonaws.handlers.AsyncHandler<GetDirectoryLimitsRequest, GetDirectoryLimitsResult> asyncHandler,java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync,java.util.concurrent.Future<GetDirectoryLimitsResult> getDirectoryLimitsAsync,com.amazonaws.handlers.AsyncHandler<GetDirectoryLimitsRequest, GetDirectoryLimitsResult> asyncHandler){\r\n    return getDirectoryLimitsAsync(new GetDirectoryLimitsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminRespondToAuthChallengeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getChallengeName() != null)\r\n        sb.append(\"ChallengeName: \").append(getChallengeName()).append(\",\");\r\n    if (getSession() != null)\r\n        sb.append(\"Session: \").append(getSession()).append(\",\");\r\n    if (getChallengeParameters() != null)\r\n        sb.append(\"ChallengeParameters: \").append(getChallengeParameters()).append(\",\");\r\n    if (getAuthenticationResult() != null)\r\n        sb.append(\"AuthenticationResult: \").append(getAuthenticationResult());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.AWSCostAndUsageReportClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUserMFAPreferenceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSMSMfaSettings() != null)\r\n        sb.append(\"SMSMfaSettings: \").append(getSMSMfaSettings()).append(\",\");\r\n    if (getSoftwareTokenMfaSettings() != null)\r\n        sb.append(\"SoftwareTokenMfaSettings: \").append(getSoftwareTokenMfaSettings()).append(\",\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.createReplicationInstance",
	"Comment": "creates the replication instance using the specified parameters.",
	"Method": "CreateReplicationInstanceResult createReplicationInstance(CreateReplicationInstanceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateReplicationInstance(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.RiskConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getCompromisedCredentialsRiskConfiguration() != null)\r\n        sb.append(\"CompromisedCredentialsRiskConfiguration: \").append(getCompromisedCredentialsRiskConfiguration()).append(\",\");\r\n    if (getAccountTakeoverRiskConfiguration() != null)\r\n        sb.append(\"AccountTakeoverRiskConfiguration: \").append(getAccountTakeoverRiskConfiguration()).append(\",\");\r\n    if (getRiskExceptionConfiguration() != null)\r\n        sb.append(\"RiskExceptionConfiguration: \").append(getRiskExceptionConfiguration()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetReservationUtilizationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUtilizationsByTime() != null)\r\n        sb.append(\"UtilizationsByTime: \").append(getUtilizationsByTime()).append(\",\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.deleteInterconnect",
	"Comment": "deletes the specified interconnect.intended for use by aws direct connect partners only.",
	"Method": "DeleteInterconnectResult deleteInterconnect(DeleteInterconnectRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteInterconnect(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AuthEventType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventId() != null)\r\n        sb.append(\"EventId: \").append(getEventId()).append(\",\");\r\n    if (getEventType() != null)\r\n        sb.append(\"EventType: \").append(getEventType()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate()).append(\",\");\r\n    if (getEventResponse() != null)\r\n        sb.append(\"EventResponse: \").append(getEventResponse()).append(\",\");\r\n    if (getEventRisk() != null)\r\n        sb.append(\"EventRisk: \").append(getEventRisk()).append(\",\");\r\n    if (getChallengeResponses() != null)\r\n        sb.append(\"ChallengeResponses: \").append(getChallengeResponses()).append(\",\");\r\n    if (getEventContextData() != null)\r\n        sb.append(\"EventContextData: \").append(getEventContextData()).append(\",\");\r\n    if (getEventFeedback() != null)\r\n        sb.append(\"EventFeedback: \").append(getEventFeedback());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ReportTaskRunnerHeartbeatResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTerminate() != null)\r\n        sb.append(\"Terminate: \").append(getTerminate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.StartConfigurationRecorderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationRecorderName() != null)\r\n        sb.append(\"ConfigurationRecorderName: \").append(getConfigurationRecorderName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetRemoteAccessSessionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DeleteApplicationsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationIds() != null)\r\n        sb.append(\"ConfigurationIds: \").append(getConfigurationIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeDominantLanguageDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateAliasResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getAlias() != null)\r\n        sb.append(\"Alias: \").append(getAlias());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.EntityRecognizerDocuments.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getS3Uri() != null)\r\n        sb.append(\"S3Uri: \").append(getS3Uri());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.GetMetricDataRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getEndTime() != null)\r\n        sb.append(\"EndTime: \").append(getEndTime()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getGroupings() != null)\r\n        sb.append(\"Groupings: \").append(getGroupings()).append(\",\");\r\n    if (getHistoricalMetrics() != null)\r\n        sb.append(\"HistoricalMetrics: \").append(getHistoricalMetrics()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RestoreFromSnapshotResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateProjectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDefaultJobTimeoutMinutes() != null)\r\n        sb.append(\"DefaultJobTimeoutMinutes: \").append(getDefaultJobTimeoutMinutes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListIdentityProvidersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.clone",
	"Comment": "creates a shallow clone of this object for all fields except the handler context. explicitly does not clone thedeep structure of the other fields in the message.",
	"Method": "AmazonWebServiceRequest clone(){\r\n    try {\r\n        AmazonWebServiceRequest cloned = (AmazonWebServiceRequest) super.clone();\r\n        cloned.setCloneSource(this);\r\n        cloned.handlerContext = new HashMap<HandlerContextKey<?>, Object>(cloned.handlerContext);\r\n        return cloned;\r\n    } catch (CloneNotSupportedException e) {\r\n        throw new IllegalStateException(\"Got a CloneNotSupportedException from Object.clone() \" + \"even though we're Cloneable!\", e);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListProjectsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Device.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getManufacturer() != null)\r\n        sb.append(\"Manufacturer: \").append(getManufacturer()).append(\",\");\r\n    if (getModel() != null)\r\n        sb.append(\"Model: \").append(getModel()).append(\",\");\r\n    if (getModelId() != null)\r\n        sb.append(\"ModelId: \").append(getModelId()).append(\",\");\r\n    if (getFormFactor() != null)\r\n        sb.append(\"FormFactor: \").append(getFormFactor()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getOs() != null)\r\n        sb.append(\"Os: \").append(getOs()).append(\",\");\r\n    if (getCpu() != null)\r\n        sb.append(\"Cpu: \").append(getCpu()).append(\",\");\r\n    if (getResolution() != null)\r\n        sb.append(\"Resolution: \").append(getResolution()).append(\",\");\r\n    if (getHeapSize() != null)\r\n        sb.append(\"HeapSize: \").append(getHeapSize()).append(\",\");\r\n    if (getMemory() != null)\r\n        sb.append(\"Memory: \").append(getMemory()).append(\",\");\r\n    if (getImage() != null)\r\n        sb.append(\"Image: \").append(getImage()).append(\",\");\r\n    if (getCarrier() != null)\r\n        sb.append(\"Carrier: \").append(getCarrier()).append(\",\");\r\n    if (getRadio() != null)\r\n        sb.append(\"Radio: \").append(getRadio()).append(\",\");\r\n    if (getRemoteAccessEnabled() != null)\r\n        sb.append(\"RemoteAccessEnabled: \").append(getRemoteAccessEnabled()).append(\",\");\r\n    if (getRemoteDebugEnabled() != null)\r\n        sb.append(\"RemoteDebugEnabled: \").append(getRemoteDebugEnabled()).append(\",\");\r\n    if (getFleetType() != null)\r\n        sb.append(\"FleetType: \").append(getFleetType()).append(\",\");\r\n    if (getFleetName() != null)\r\n        sb.append(\"FleetName: \").append(getFleetName()).append(\",\");\r\n    if (getInstances() != null)\r\n        sb.append(\"Instances: \").append(getInstances()).append(\",\");\r\n    if (getAvailability() != null)\r\n        sb.append(\"Availability: \").append(getAvailability());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.XpathUtils.speedUpDTMManager",
	"Comment": "used to optimize performance by avoiding expensive file access every timea dtmmanager is constructed as a result of constructing a xalan xpathcontext!",
	"Method": "void speedUpDTMManager(){\r\n    if (System.getProperty(DTM_MANAGER_DEFAULT_PROP_NAME) == null) {\r\n        Class<?> XPathContextClass = Class.forName(XPATH_CONTEXT_CLASS_NAME);\r\n        Method getDTMManager = XPathContextClass.getMethod(\"getDTMManager\");\r\n        Object XPathContext = XPathContextClass.newInstance();\r\n        Object dtmManager = getDTMManager.invoke(XPathContext);\r\n        if (DTM_MANAGER_IMPL_CLASS_NAME.equals(dtmManager.getClass().getName())) {\r\n            System.setProperty(DTM_MANAGER_DEFAULT_PROP_NAME, DTM_MANAGER_IMPL_CLASS_NAME);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.RefreshSchemasStatus.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointArn() != null)\r\n        sb.append(\"EndpointArn: \").append(getEndpointArn()).append(\",\");\r\n    if (getReplicationInstanceArn() != null)\r\n        sb.append(\"ReplicationInstanceArn: \").append(getReplicationInstanceArn()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getLastRefreshDate() != null)\r\n        sb.append(\"LastRefreshDate: \").append(getLastRefreshDate()).append(\",\");\r\n    if (getLastFailureMessage() != null)\r\n        sb.append(\"LastFailureMessage: \").append(getLastFailureMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminListGroupsForUser",
	"Comment": "lists the groups that the user belongs to.requires developer credentials.",
	"Method": "AdminListGroupsForUserResult adminListGroupsForUser(AdminListGroupsForUserRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminListGroupsForUser(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AbstractAmazonConfigAsync.describeConfigurationRecordersAsync",
	"Comment": "simplified method form for invoking the describeconfigurationrecorders operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync(DescribeConfigurationRecordersRequest request,java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync,DescribeConfigurationRecordersRequest request,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecordersRequest, DescribeConfigurationRecordersResult> asyncHandler,java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync,java.util.concurrent.Future<DescribeConfigurationRecordersResult> describeConfigurationRecordersAsync,com.amazonaws.handlers.AsyncHandler<DescribeConfigurationRecordersRequest, DescribeConfigurationRecordersResult> asyncHandler){\r\n    return describeConfigurationRecordersAsync(new DescribeConfigurationRecordersRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.PollForTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskObject() != null)\r\n        sb.append(\"TaskObject: \").append(getTaskObject());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DescribeUserPoolDomainResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainDescription() != null)\r\n        sb.append(\"DomainDescription: \").append(getDomainDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.setRequestCredentials",
	"Comment": "sets the optional credentials to use for this request, overriding the default credentials set at the client level.",
	"Method": "void setRequestCredentials(AWSCredentials credentials){\r\n    this.credentialsProvider = credentials == null ? null : new StaticCredentialsProvider(credentials);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.OwnerDirectoryDescription.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getDnsIpAddrs() != null)\r\n        sb.append(\"DnsIpAddrs: \").append(getDnsIpAddrs()).append(\",\");\r\n    if (getVpcSettings() != null)\r\n        sb.append(\"VpcSettings: \").append(getVpcSettings()).append(\",\");\r\n    if (getRadiusSettings() != null)\r\n        sb.append(\"RadiusSettings: \").append(getRadiusSettings()).append(\",\");\r\n    if (getRadiusStatus() != null)\r\n        sb.append(\"RadiusStatus: \").append(getRadiusStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.createComputer",
	"Comment": "creates a computer account in the specified directory, and joins the computer to the directory.",
	"Method": "CreateComputerResult createComputer(CreateComputerRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateComputer(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DirectoryLimits.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCloudOnlyDirectoriesLimit() != null)\r\n        sb.append(\"CloudOnlyDirectoriesLimit: \").append(getCloudOnlyDirectoriesLimit()).append(\",\");\r\n    if (getCloudOnlyDirectoriesCurrentCount() != null)\r\n        sb.append(\"CloudOnlyDirectoriesCurrentCount: \").append(getCloudOnlyDirectoriesCurrentCount()).append(\",\");\r\n    if (getCloudOnlyDirectoriesLimitReached() != null)\r\n        sb.append(\"CloudOnlyDirectoriesLimitReached: \").append(getCloudOnlyDirectoriesLimitReached()).append(\",\");\r\n    if (getCloudOnlyMicrosoftADLimit() != null)\r\n        sb.append(\"CloudOnlyMicrosoftADLimit: \").append(getCloudOnlyMicrosoftADLimit()).append(\",\");\r\n    if (getCloudOnlyMicrosoftADCurrentCount() != null)\r\n        sb.append(\"CloudOnlyMicrosoftADCurrentCount: \").append(getCloudOnlyMicrosoftADCurrentCount()).append(\",\");\r\n    if (getCloudOnlyMicrosoftADLimitReached() != null)\r\n        sb.append(\"CloudOnlyMicrosoftADLimitReached: \").append(getCloudOnlyMicrosoftADLimitReached()).append(\",\");\r\n    if (getConnectedDirectoriesLimit() != null)\r\n        sb.append(\"ConnectedDirectoriesLimit: \").append(getConnectedDirectoriesLimit()).append(\",\");\r\n    if (getConnectedDirectoriesCurrentCount() != null)\r\n        sb.append(\"ConnectedDirectoriesCurrentCount: \").append(getConnectedDirectoriesCurrentCount()).append(\",\");\r\n    if (getConnectedDirectoriesLimitReached() != null)\r\n        sb.append(\"ConnectedDirectoriesLimitReached: \").append(getConnectedDirectoriesLimitReached());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteConfigurationAggregatorRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.RetryTestUtils.assertExpectedRetryCount",
	"Comment": "checks the requestcount metric and compares it against the expected value.",
	"Method": "void assertExpectedRetryCount(int expectedRetryAttempts,ExecutionContext context){\r\n    // request count = retries + 1\r\n    Assert.assertEquals(expectedRetryAttempts + 1, context.getAwsRequestMetrics().getTimingInfo().getCounter(AWSRequestMetrics.Field.RequestCount.toString()).intValue());\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.Event.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSourceIdentifier() != null)\r\n        sb.append(\"SourceIdentifier: \").append(getSourceIdentifier()).append(\",\");\r\n    if (getSourceType() != null)\r\n        sb.append(\"SourceType: \").append(getSourceType()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getEventCategories() != null)\r\n        sb.append(\"EventCategories: \").append(getEventCategories()).append(\",\");\r\n    if (getDate() != null)\r\n        sb.append(\"Date: \").append(getDate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DisableSsoRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getUserName() != null)\r\n        sb.append(\"UserName: \").append(getUserName()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteLogSubscriptionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectAsyncClient.describeVirtualInterfacesAsync",
	"Comment": "simplified method form for invoking the describevirtualinterfaces operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync(DescribeVirtualInterfacesRequest request,java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync,DescribeVirtualInterfacesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeVirtualInterfacesRequest, DescribeVirtualInterfacesResult> asyncHandler,java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync,java.util.concurrent.Future<DescribeVirtualInterfacesResult> describeVirtualInterfacesAsync,com.amazonaws.handlers.AsyncHandler<DescribeVirtualInterfacesRequest, DescribeVirtualInterfacesResult> asyncHandler){\r\n    return describeVirtualInterfacesAsync(new DescribeVirtualInterfacesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.auth.internal.AWS4SignerRequestParams.getRegionName",
	"Comment": "returns the aws region name to be used while computing the signature.",
	"Method": "String getRegionName(){\r\n    return regionName;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ConnectDirectoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getShortName() != null)\r\n        sb.append(\"ShortName: \").append(getShortName()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSize() != null)\r\n        sb.append(\"Size: \").append(getSize()).append(\",\");\r\n    if (getConnectSettings() != null)\r\n        sb.append(\"ConnectSettings: \").append(getConnectSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteCertificateResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificate() != null)\r\n        sb.append(\"Certificate: \").append(getCertificate());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.describeLocationS3",
	"Comment": "returns metadata, such as bucket name, about an amazon s3 bucket location.",
	"Method": "DescribeLocationS3Result describeLocationS3(DescribeLocationS3Request request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLocationS3(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateEndpointResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DescribeDominantLanguageDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDominantLanguageDetectionJobProperties() != null)\r\n        sb.append(\"DominantLanguageDetectionJobProperties: \").append(getDominantLanguageDetectionJobProperties());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.LegacyErrorUnmarshaller.getErrorPropertyPath",
	"Comment": "returns the path to the specified property within an error response.",
	"Method": "String getErrorPropertyPath(String property){\r\n    return \"Response/Errors/Error/\" + property;\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testProfileWithProfileNameNotHavingOpeningOrClosingBraces",
	"Comment": "tests loading profile with a profile name not having opening or closing braces. an exceptionshould be thrown in this case.",
	"Method": "void testProfileWithProfileNameNotHavingOpeningOrClosingBraces(){\r\n    checkExpectedException(ProfileResourceLoader.profileNameWithNoClosingBraces(), IllegalArgumentException.class, \"Should throw an exception as there is a profile name mentioned with no closing braces.\");\r\n    checkExpectedException(ProfileResourceLoader.profileNameWithNoOpeningBraces(), IllegalArgumentException.class, \"Should throw an exception as there is a profile name mentioned with no opening braces.\");\r\n    checkExpectedException(ProfileResourceLoader.profileNameWithNoBraces(), IllegalArgumentException.class, \"Should throw an exception as there is a profile name mentioned with no braces.\");\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HistoricalMetric.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getThreshold() != null)\r\n        sb.append(\"Threshold: \").append(getThreshold()).append(\",\");\r\n    if (getStatistic() != null)\r\n        sb.append(\"Statistic: \").append(getStatistic()).append(\",\");\r\n    if (getUnit() != null)\r\n        sb.append(\"Unit: \").append(getUnit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeParametersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getParameters() != null)\r\n        sb.append(\"Parameters: \").append(getParameters());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ScheduleRunRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getProjectArn() != null)\r\n        sb.append(\"ProjectArn: \").append(getProjectArn()).append(\",\");\r\n    if (getAppArn() != null)\r\n        sb.append(\"AppArn: \").append(getAppArn()).append(\",\");\r\n    if (getDevicePoolArn() != null)\r\n        sb.append(\"DevicePoolArn: \").append(getDevicePoolArn()).append(\",\");\r\n    if (getDeviceSelectionConfiguration() != null)\r\n        sb.append(\"DeviceSelectionConfiguration: \").append(getDeviceSelectionConfiguration()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getTest() != null)\r\n        sb.append(\"Test: \").append(getTest()).append(\",\");\r\n    if (getConfiguration() != null)\r\n        sb.append(\"Configuration: \").append(getConfiguration()).append(\",\");\r\n    if (getExecutionConfiguration() != null)\r\n        sb.append(\"ExecutionConfiguration: \").append(getExecutionConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEventSubscriptionsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubscriptionName() != null)\r\n        sb.append(\"SubscriptionName: \").append(getSubscriptionName()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.BaseConfigurationItem.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVersion() != null)\r\n        sb.append(\"Version: \").append(getVersion()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getConfigurationItemCaptureTime() != null)\r\n        sb.append(\"ConfigurationItemCaptureTime: \").append(getConfigurationItemCaptureTime()).append(\",\");\r\n    if (getConfigurationItemStatus() != null)\r\n        sb.append(\"ConfigurationItemStatus: \").append(getConfigurationItemStatus()).append(\",\");\r\n    if (getConfigurationStateId() != null)\r\n        sb.append(\"ConfigurationStateId: \").append(getConfigurationStateId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getResourceCreationTime() != null)\r\n        sb.append(\"ResourceCreationTime: \").append(getResourceCreationTime()).append(\",\");\r\n    if (getConfiguration() != null)\r\n        sb.append(\"Configuration: \").append(getConfiguration()).append(\",\");\r\n    if (getSupplementaryConfiguration() != null)\r\n        sb.append(\"SupplementaryConfiguration: \").append(getSupplementaryConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.WaiterAcceptor.matches",
	"Comment": "default method definition that matches the exceptionwith the expected state defined by the acceptor.overriden by each acceptor definition of matches.",
	"Method": "boolean matches(Output output,boolean matches,AmazonServiceException output){\r\n    return false;\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.setSignerRegionOverride",
	"Comment": "an internal method used to explicitly override the internal signer regioncomputed by the default implementation. this method is not expected to benormally called except for aws internal development purposes.",
	"Method": "void setSignerRegionOverride(String signerRegionOverride){\r\n    checkMutability();\r\n    Signer signer = computeSignerByURI(endpoint, signerRegionOverride, true);\r\n    synchronized (this) {\r\n        this.signerRegionOverride = signerRegionOverride;\r\n        this.signerProvider = createSignerProvider(signer);\r\n        this.signingRegion = signerRegionOverride;\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.internal.SdkProxyRoutePlannerIntegrationTest.executeWithRetries",
	"Comment": "executes the http request retrying the failed requests upto 3 times.",
	"Method": "HttpResponse executeWithRetries(HttpClient client,HttpUriRequest request){\r\n    for (int attempt = 0; ; attempt++) {\r\n        try {\r\n            return client.execute(request);\r\n        } catch (IOException exception) {\r\n            if (attempt > 2) {\r\n                throw exception;\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.GetReservationPurchaseRecommendationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getService() != null)\r\n        sb.append(\"Service: \").append(getService()).append(\",\");\r\n    if (getAccountScope() != null)\r\n        sb.append(\"AccountScope: \").append(getAccountScope()).append(\",\");\r\n    if (getLookbackPeriodInDays() != null)\r\n        sb.append(\"LookbackPeriodInDays: \").append(getLookbackPeriodInDays()).append(\",\");\r\n    if (getTermInYears() != null)\r\n        sb.append(\"TermInYears: \").append(getTermInYears()).append(\",\");\r\n    if (getPaymentOption() != null)\r\n        sb.append(\"PaymentOption: \").append(getPaymentOption()).append(\",\");\r\n    if (getServiceSpecification() != null)\r\n        sb.append(\"ServiceSpecification: \").append(getServiceSpecification()).append(\",\");\r\n    if (getPageSize() != null)\r\n        sb.append(\"PageSize: \").append(getPageSize()).append(\",\");\r\n    if (getNextPageToken() != null)\r\n        sb.append(\"NextPageToken: \").append(getNextPageToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AssociateHostedConnectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getParentConnectionId() != null)\r\n        sb.append(\"ParentConnectionId: \").append(getParentConnectionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateAuthEventFeedbackResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.buildAuthorizationHeader",
	"Comment": "creates the authorization header to be included in the request.",
	"Method": "String buildAuthorizationHeader(SignableRequest<?> request,byte[] signature,AWSCredentials credentials,AWS4SignerRequestParams signerParams){\r\n    final String signingCredentials = credentials.getAWSAccessKeyId() + \"/\" + signerParams.getScope();\r\n    final String credential = \"Credential=\" + signingCredentials;\r\n    final String signerHeaders = \"SignedHeaders=\" + getSignedHeadersString(request);\r\n    final String signatureHeader = \"Signature=\" + BinaryUtils.toHex(signature);\r\n    final StringBuilder authHeaderBuilder = new StringBuilder();\r\n    authHeaderBuilder.append(AWS4_SIGNING_ALGORITHM).append(\" \").append(credential).append(\", \").append(signerHeaders).append(\", \").append(signatureHeader);\r\n    return authHeaderBuilder.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateDeviceInstanceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getProfileArn() != null)\r\n        sb.append(\"ProfileArn: \").append(getProfileArn()).append(\",\");\r\n    if (getLabels() != null)\r\n        sb.append(\"Labels: \").append(getLabels());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.updateUserPhoneConfig",
	"Comment": "updates the phone configuration settings in the userphoneconfig object for the specified user.",
	"Method": "UpdateUserPhoneConfigResult updateUserPhoneConfig(UpdateUserPhoneConfigRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateUserPhoneConfig(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.EC2InstanceDetails.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFamily() != null)\r\n        sb.append(\"Family: \").append(getFamily()).append(\",\");\r\n    if (getInstanceType() != null)\r\n        sb.append(\"InstanceType: \").append(getInstanceType()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAvailabilityZone() != null)\r\n        sb.append(\"AvailabilityZone: \").append(getAvailabilityZone()).append(\",\");\r\n    if (getPlatform() != null)\r\n        sb.append(\"Platform: \").append(getPlatform()).append(\",\");\r\n    if (getTenancy() != null)\r\n        sb.append(\"Tenancy: \").append(getTenancy()).append(\",\");\r\n    if (getCurrentGeneration() != null)\r\n        sb.append(\"CurrentGeneration: \").append(getCurrentGeneration()).append(\",\");\r\n    if (getSizeFlexEligible() != null)\r\n        sb.append(\"SizeFlexEligible: \").append(getSizeFlexEligible());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReloadTablesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.PushSync.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApplicationArns() != null)\r\n        sb.append(\"ApplicationArns: \").append(getApplicationArns()).append(\",\");\r\n    if (getRoleArn() != null)\r\n        sb.append(\"RoleArn: \").append(getRoleArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.getBulkPublishDetails",
	"Comment": "get the status of the last bulkpublish operation for an identity pool.this api can only be called with developer credentials. you cannot call this api with the temporary usercredentials provided by cognito identity.",
	"Method": "GetBulkPublishDetailsResult getBulkPublishDetails(GetBulkPublishDetailsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetBulkPublishDetails(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetUserPoolMfaConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.CreateTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withLocalAddress",
	"Comment": "sets the optional local address the client will bind to and returns the updatedclientconfiguration object.",
	"Method": "ClientConfiguration withLocalAddress(InetAddress localAddress){\r\n    setLocalAddress(localAddress);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.VirtualGateway.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getVirtualGatewayState() != null)\r\n        sb.append(\"VirtualGatewayState: \").append(getVirtualGatewayState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DescribeConfigurationAggregatorSourcesStatusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getUpdateStatus() != null)\r\n        sb.append(\"UpdateStatus: \").append(getUpdateStatus()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.VersionInfoUtils.getPlatform",
	"Comment": "returns the current platform for the aws sdk in which this class isrunning. version information is obtained from from theversioninfo.properties file which the aws java sdk build processgenerates.",
	"Method": "String getPlatform(){\r\n    if (platform == null) {\r\n        synchronized (VersionInfoUtils.class) {\r\n            if (platform == null)\r\n                initializeVersion();\r\n        }\r\n    }\r\n    return platform;\r\n}"
}, {
	"Path": "com.amazonaws.auth.EC2CredentialsFetcherTest.testNeedsToLoadCredentialsMethod",
	"Comment": "tests that the credentials provider reloads credentials appropriately",
	"Method": "void testNeedsToLoadCredentialsMethod(){\r\n    TestCredentialsProvider credentialsProvider = new TestCredentialsProvider();\r\n    stubForSuccessResonseWithCustomExpirationDate(200, DateUtils.formatISO8601Date(new Date(System.currentTimeMillis() + ONE_MINUTE * 60 * 24)).toString());\r\n    credentialsProvider.getCredentials();\r\n    assertFalse(credentialsProvider.needsToLoadCredentials());\r\n    stubForSuccessResonseWithCustomExpirationDate(200, DateUtils.formatISO8601Date(new Date(System.currentTimeMillis() + ONE_MINUTE * 16)).toString());\r\n    credentialsProvider.getCredentials();\r\n    credentialsProvider.setLastInstanceProfileCheck(new Date(System.currentTimeMillis() - ONE_MINUTE * 61));\r\n    assertTrue(credentialsProvider.needsToLoadCredentials());\r\n    stubForSuccessResonseWithCustomExpirationDate(200, DateUtils.formatISO8601Date(new Date(System.currentTimeMillis() + ONE_MINUTE * 14)).toString());\r\n    credentialsProvider.getCredentials();\r\n    assertTrue(credentialsProvider.needsToLoadCredentials());\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Policy.getId",
	"Comment": "returns the policy id for this policy. policy ids serve to helpdevelopers keep track of multiple policies, and are often used as humanreadable name for a policy.",
	"Method": "String getId(){\r\n    return id;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigAsyncClient.getComplianceSummaryByResourceTypeAsync",
	"Comment": "simplified method form for invoking the getcompliancesummarybyresourcetype operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync(GetComplianceSummaryByResourceTypeRequest request,java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync,GetComplianceSummaryByResourceTypeRequest request,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByResourceTypeRequest, GetComplianceSummaryByResourceTypeResult> asyncHandler,java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync,java.util.concurrent.Future<GetComplianceSummaryByResourceTypeResult> getComplianceSummaryByResourceTypeAsync,com.amazonaws.handlers.AsyncHandler<GetComplianceSummaryByResourceTypeRequest, GetComplianceSummaryByResourceTypeResult> asyncHandler){\r\n    return getComplianceSummaryByResourceTypeAsync(new GetComplianceSummaryByResourceTypeRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsdevicefarmasync using the current builder configuration.",
	"Method": "AWSDeviceFarmAsync build(AwsAsyncClientParams params){\r\n    return new AWSDeviceFarmAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.StopRemoteAccessSessionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRemoteAccessSession() != null)\r\n        sb.append(\"RemoteAccessSession: \").append(getRemoteAccessSession());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ParameterValue.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getStringValue() != null)\r\n        sb.append(\"StringValue: \").append(getStringValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteSnapshotRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSnapshotId() != null)\r\n        sb.append(\"SnapshotId: \").append(getSnapshotId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.Filter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getValues() != null)\r\n        sb.append(\"Values: \").append(getValues()).append(\",\");\r\n    if (getCondition() != null)\r\n        sb.append(\"Condition: \").append(getCondition());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserContextDataType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEncodedData() != null)\r\n        sb.append(\"EncodedData: \").append(getEncodedData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateDevicePoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevicePool() != null)\r\n        sb.append(\"DevicePool: \").append(getDevicePool());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.CoverageNormalizedUnits.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOnDemandNormalizedUnits() != null)\r\n        sb.append(\"OnDemandNormalizedUnits: \").append(getOnDemandNormalizedUnits()).append(\",\");\r\n    if (getReservedNormalizedUnits() != null)\r\n        sb.append(\"ReservedNormalizedUnits: \").append(getReservedNormalizedUnits()).append(\",\");\r\n    if (getTotalRunningNormalizedUnits() != null)\r\n        sb.append(\"TotalRunningNormalizedUnits: \").append(getTotalRunningNormalizedUnits()).append(\",\");\r\n    if (getCoverageNormalizedUnitsPercentage() != null)\r\n        sb.append(\"CoverageNormalizedUnitsPercentage: \").append(getCoverageNormalizedUnitsPercentage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetAccountSettingsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountSettings() != null)\r\n        sb.append(\"AccountSettings: \").append(getAccountSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.createSnapshot",
	"Comment": "creates a snapshot of a simple ad or microsoft ad directory in the aws cloud.you cannot take snapshots of ad connector directories.",
	"Method": "CreateSnapshotResult createSnapshot(CreateSnapshotRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateSnapshot(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Suite.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getCreated() != null)\r\n        sb.append(\"Created: \").append(getCreated()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getResult() != null)\r\n        sb.append(\"Result: \").append(getResult()).append(\",\");\r\n    if (getStarted() != null)\r\n        sb.append(\"Started: \").append(getStarted()).append(\",\");\r\n    if (getStopped() != null)\r\n        sb.append(\"Stopped: \").append(getStopped()).append(\",\");\r\n    if (getCounters() != null)\r\n        sb.append(\"Counters: \").append(getCounters()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getDeviceMinutes() != null)\r\n        sb.append(\"DeviceMinutes: \").append(getDeviceMinutes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteLagResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionsBandwidth() != null)\r\n        sb.append(\"ConnectionsBandwidth: \").append(getConnectionsBandwidth()).append(\",\");\r\n    if (getNumberOfConnections() != null)\r\n        sb.append(\"NumberOfConnections: \").append(getNumberOfConnections()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getLagName() != null)\r\n        sb.append(\"LagName: \").append(getLagName()).append(\",\");\r\n    if (getLagState() != null)\r\n        sb.append(\"LagState: \").append(getLagState()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getMinimumLinks() != null)\r\n        sb.append(\"MinimumLinks: \").append(getMinimumLinks()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections()).append(\",\");\r\n    if (getAllowsHostedConnections() != null)\r\n        sb.append(\"AllowsHostedConnections: \").append(getAllowsHostedConnections()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.startTopicsDetectionJob",
	"Comment": "starts an asynchronous topic detection job. use the describetopicdetectionjob operation to track thestatus of a job.",
	"Method": "StartTopicsDetectionJobResult startTopicsDetectionJob(StartTopicsDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeStartTopicsDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.describeTrusts",
	"Comment": "obtains information about the trust relationships for this account.if no input parameters are provided, such as directoryid or trustids, this request describes all the trustrelationships belonging to the account.",
	"Method": "DescribeTrustsResult describeTrusts(DescribeTrustsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTrusts(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSecretHash() != null)\r\n        sb.append(\"SecretHash: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getConfirmationCode() != null)\r\n        sb.append(\"ConfirmationCode: \").append(getConfirmationCode()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata()).append(\",\");\r\n    if (getUserContextData() != null)\r\n        sb.append(\"UserContextData: \").append(getUserContextData());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.NewDeviceMetadataType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey()).append(\",\");\r\n    if (getDeviceGroupKey() != null)\r\n        sb.append(\"DeviceGroupKey: \").append(getDeviceGroupKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ComplianceSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCompliantResourceCount() != null)\r\n        sb.append(\"CompliantResourceCount: \").append(getCompliantResourceCount()).append(\",\");\r\n    if (getNonCompliantResourceCount() != null)\r\n        sb.append(\"NonCompliantResourceCount: \").append(getNonCompliantResourceCount()).append(\",\");\r\n    if (getComplianceSummaryTimestamp() != null)\r\n        sb.append(\"ComplianceSummaryTimestamp: \").append(getComplianceSummaryTimestamp());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.decreaseReplicationFactor",
	"Comment": "removes one or more nodes from a dax cluster.you cannot use decreasereplicationfactor to remove the last node in a dax cluster. if you need to dothis, use deletecluster instead.",
	"Method": "DecreaseReplicationFactorResult decreaseReplicationFactor(DecreaseReplicationFactorRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDecreaseReplicationFactor(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.EnableSsoResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.updateUserIdentityInfo",
	"Comment": "updates the identity information for the specified user in a useridentityinfo object, includingemail, first name, and last name.",
	"Method": "UpdateUserIdentityInfoResult updateUserIdentityInfo(UpdateUserIdentityInfoRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateUserIdentityInfo(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.ParameterGroup.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroupName() != null)\r\n        sb.append(\"ParameterGroupName: \").append(getParameterGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.DescribeUserHierarchyStructureResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getHierarchyStructure() != null)\r\n        sb.append(\"HierarchyStructure: \").append(getHierarchyStructure());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ListAggregateDiscoveredResourcesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceIdentifiers() != null)\r\n        sb.append(\"ResourceIdentifiers: \").append(getResourceIdentifiers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.StringInputStream.getString",
	"Comment": "returns the original string specified when this input stream wasconstructed.",
	"Method": "String getString(){\r\n    return string;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeviceSecretVerifierConfigType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPasswordVerifier() != null)\r\n        sb.append(\"PasswordVerifier: \").append(getPasswordVerifier()).append(\",\");\r\n    if (getSalt() != null)\r\n        sb.append(\"Salt: \").append(getSalt());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteEvaluationResultsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ApacheHttpClientConfig.setSslSocketFactory",
	"Comment": "sets a custom apache http client specific ssl socket factory.",
	"Method": "void setSslSocketFactory(ConnectionSocketFactory sslSocketFactory){\r\n    this.sslSocketFactory = sslSocketFactory;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUserPoolMfaConfigResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSmsMfaConfiguration() != null)\r\n        sb.append(\"SmsMfaConfiguration: \").append(getSmsMfaConfiguration()).append(\",\");\r\n    if (getSoftwareTokenMfaConfiguration() != null)\r\n        sb.append(\"SoftwareTokenMfaConfiguration: \").append(getSoftwareTokenMfaConfiguration()).append(\",\");\r\n    if (getMfaConfiguration() != null)\r\n        sb.append(\"MfaConfiguration: \").append(getMfaConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RejectSharedDirectoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedDirectoryId() != null)\r\n        sb.append(\"SharedDirectoryId: \").append(getSharedDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.modifyReplicationSubnetGroup",
	"Comment": "modifies the settings for the specified replication subnet group.",
	"Method": "ModifyReplicationSubnetGroupResult modifyReplicationSubnetGroup(ModifyReplicationSubnetGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeModifyReplicationSubnetGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminDeleteUser",
	"Comment": "deletes a user as an administrator. works on any user.requires developer credentials.",
	"Method": "AdminDeleteUserResult adminDeleteUser(AdminDeleteUserRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminDeleteUser(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.publishRequestReset",
	"Comment": "convenient method to publish a request reset event to the given listener.",
	"Method": "Future<?> publishRequestReset(ProgressListener listener,long bytesReset){\r\n    return publishResetEvent(listener, HTTP_REQUEST_CONTENT_RESET_EVENT, bytesReset);\r\n}"
}, {
	"Path": "com.amazonaws.partitions.PartitionRegionImpl.isServiceSupportedInRegion",
	"Comment": "this method returns true only if the metadata for the service contains the givenregion in the list of supported regions.",
	"Method": "boolean isServiceSupportedInRegion(String serviceName){\r\n    return partition.getServices().get(serviceName) != null && partition.getServices().get(serviceName).getEndpoints().containsKey(region);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ResourceServerType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getIdentifier() != null)\r\n        sb.append(\"Identifier: \").append(getIdentifier()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getScopes() != null)\r\n        sb.append(\"Scopes: \").append(getScopes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.updateDeviceInstance",
	"Comment": "updates information about an existing private device instance.",
	"Method": "UpdateDeviceInstanceResult updateDeviceInstance(UpdateDeviceInstanceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateDeviceInstance(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.CoverageCost.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOnDemandCost() != null)\r\n        sb.append(\"OnDemandCost: \").append(getOnDemandCost());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonServiceException.getRequestId",
	"Comment": "returns the aws request id that uniquely identifies the service requestthe caller made.",
	"Method": "String getRequestId(){\r\n    return requestId;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocateHostedConnectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidentity.model.UnlinkIdentityRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getLogins() != null)\r\n        sb.append(\"Logins: \").append(getLogins()).append(\",\");\r\n    if (getLoginsToRemove() != null)\r\n        sb.append(\"LoginsToRemove: \").append(getLoginsToRemove());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectKeyPhrasesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResultList() != null)\r\n        sb.append(\"ResultList: \").append(getResultList()).append(\",\");\r\n    if (getErrorList() != null)\r\n        sb.append(\"ErrorList: \").append(getErrorList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUserSettingsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getMFAOptions() != null)\r\n        sb.append(\"MFAOptions: \").append(getMFAOptions());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.waitTillCompletion",
	"Comment": "for internal testing and backward compatibility only. this method blocksuntil all the submitted callbacks are executed. listeners should neverblock so this method should never be used.",
	"Method": "void waitTillCompletion(){\r\n    if (latestFutureTask != null) {\r\n        latestFutureTask.get();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.createTags",
	"Comment": "creates one or more tags for configuration items. tags are metadata that help you categorize it assets. this apiaccepts a list of multiple configuration items.",
	"Method": "CreateTagsResult createTags(CreateTagsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateTags(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.setRiskConfiguration",
	"Comment": "configures actions on detected risks. to delete the risk configuration for userpoolid orclientid, pass null values for all four configuration types.to enable amazon cognito advanced security features, update the user pool to include theuserpooladdons keyadvancedsecuritymode.see .",
	"Method": "SetRiskConfigurationResult setRiskConfiguration(SetRiskConfigurationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSetRiskConfiguration(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ConfigExportDeliveryInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLastStatus() != null)\r\n        sb.append(\"LastStatus: \").append(getLastStatus()).append(\",\");\r\n    if (getLastErrorCode() != null)\r\n        sb.append(\"LastErrorCode: \").append(getLastErrorCode()).append(\",\");\r\n    if (getLastErrorMessage() != null)\r\n        sb.append(\"LastErrorMessage: \").append(getLastErrorMessage()).append(\",\");\r\n    if (getLastAttemptTime() != null)\r\n        sb.append(\"LastAttemptTime: \").append(getLastAttemptTime()).append(\",\");\r\n    if (getLastSuccessfulTime() != null)\r\n        sb.append(\"LastSuccessfulTime: \").append(getLastSuccessfulTime()).append(\",\");\r\n    if (getNextDeliveryTime() != null)\r\n        sb.append(\"NextDeliveryTime: \").append(getNextDeliveryTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonServiceException.getStatusCode",
	"Comment": "returns the http status code that was returned with this serviceexception.",
	"Method": "int getStatusCode(){\r\n    return statusCode;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateConditionalForwarderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminForgetDeviceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDeviceKey() != null)\r\n        sb.append(\"DeviceKey: \").append(getDeviceKey());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.Upload.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getCreated() != null)\r\n        sb.append(\"Created: \").append(getCreated()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getUrl() != null)\r\n        sb.append(\"Url: \").append(getUrl()).append(\",\");\r\n    if (getMetadata() != null)\r\n        sb.append(\"Metadata: \").append(getMetadata()).append(\",\");\r\n    if (getContentType() != null)\r\n        sb.append(\"ContentType: \").append(getContentType()).append(\",\");\r\n    if (getMessage() != null)\r\n        sb.append(\"Message: \").append(getMessage()).append(\",\");\r\n    if (getCategory() != null)\r\n        sb.append(\"Category: \").append(getCategory());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UpdateSubnetGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetGroupName() != null)\r\n        sb.append(\"SubnetGroupName: \").append(getSubnetGroupName()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSubnetIds() != null)\r\n        sb.append(\"SubnetIds: \").append(getSubnetIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.UpdateApplicationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.RiskExceptionConfigurationType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getBlockedIPRangeList() != null)\r\n        sb.append(\"BlockedIPRangeList: \").append(getBlockedIPRangeList()).append(\",\");\r\n    if (getSkippedIPRangeList() != null)\r\n        sb.append(\"SkippedIPRangeList: \").append(getSkippedIPRangeList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListDocumentClassificationJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ReservationPurchaseRecommendationSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTotalEstimatedMonthlySavingsAmount() != null)\r\n        sb.append(\"TotalEstimatedMonthlySavingsAmount: \").append(getTotalEstimatedMonthlySavingsAmount()).append(\",\");\r\n    if (getTotalEstimatedMonthlySavingsPercentage() != null)\r\n        sb.append(\"TotalEstimatedMonthlySavingsPercentage: \").append(getTotalEstimatedMonthlySavingsPercentage()).append(\",\");\r\n    if (getCurrencyCode() != null)\r\n        sb.append(\"CurrencyCode: \").append(getCurrencyCode());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testTwoProfileWithSameName",
	"Comment": "tests two profiles having same name. the second profile overrides the first profile. alsochecks if the aws access key id and aws secret access key are mapped properly under theprofile.",
	"Method": "void testTwoProfileWithSameName(){\r\n    ProfilesConfigFile profile = new ProfilesConfigFile(ProfileResourceLoader.profilesWithSameProfileName().asFile());\r\n    AWSCredentials defaultCred = profile.getCredentials(DEFAULT_PROFILE_NAME);\r\n    assertNotNull(defaultCred);\r\n    assertTrue(defaultCred instanceof BasicAWSCredentials);\r\n    AWSCredentials testCred = profile.getCredentials(PROFILE_NAME_TEST);\r\n    assertNotNull(testCred);\r\n    assertTrue(testCred instanceof AWSSessionCredentials);\r\n    AWSSessionCredentials testSessionCred = (AWSSessionCredentials) testCred;\r\n    assertEquals(testSessionCred.getAWSAccessKeyId(), \"testProfile2\");\r\n    assertEquals(testSessionCred.getAWSSecretKey(), \"testProfile2\");\r\n    assertEquals(testSessionCred.getSessionToken(), \"testProfile2\");\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.CurrentMetricResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDimensions() != null)\r\n        sb.append(\"Dimensions: \").append(getDimensions()).append(\",\");\r\n    if (getCollections() != null)\r\n        sb.append(\"Collections: \").append(getCollections());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.RemoveTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetRunResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRun() != null)\r\n        sb.append(\"Run: \").append(getRun());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.listConfigurations",
	"Comment": "retrieves a list of configuration items as specified by the value passed to the required paramaterconfigurationtype. optional filtering may be applied to refine search results.",
	"Method": "ListConfigurationsResult listConfigurations(ListConfigurationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListConfigurations(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetNetworkProfileRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateReplicationSubnetGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationSubnetGroup() != null)\r\n        sb.append(\"ReplicationSubnetGroup: \").append(getReplicationSubnetGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.QueryObjectsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getQuery() != null)\r\n        sb.append(\"Query: \").append(getQuery()).append(\",\");\r\n    if (getSphere() != null)\r\n        sb.append(\"Sphere: \").append(getSphere()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeregisterEventTopicResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DescribeLocationEfsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocationArn() != null)\r\n        sb.append(\"LocationArn: \").append(getLocationArn()).append(\",\");\r\n    if (getLocationUri() != null)\r\n        sb.append(\"LocationUri: \").append(getLocationUri()).append(\",\");\r\n    if (getEc2Config() != null)\r\n        sb.append(\"Ec2Config: \").append(getEc2Config()).append(\",\");\r\n    if (getCreationTime() != null)\r\n        sb.append(\"CreationTime: \").append(getCreationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateDirectoryRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getShortName() != null)\r\n        sb.append(\"ShortName: \").append(getShortName()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSize() != null)\r\n        sb.append(\"Size: \").append(getSize()).append(\",\");\r\n    if (getVpcSettings() != null)\r\n        sb.append(\"VpcSettings: \").append(getVpcSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.UpdateConditionalForwarderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getRemoteDomainName() != null)\r\n        sb.append(\"RemoteDomainName: \").append(getRemoteDomainName()).append(\",\");\r\n    if (getDnsIpAddrs() != null)\r\n        sb.append(\"DnsIpAddrs: \").append(getDnsIpAddrs());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateBGPPeerRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getNewBGPPeer() != null)\r\n        sb.append(\"NewBGPPeer: \").append(getNewBGPPeer());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.CreateUserResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getUserArn() != null)\r\n        sb.append(\"UserArn: \").append(getUserArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SmsMfaConfigType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSmsAuthenticationMessage() != null)\r\n        sb.append(\"SmsAuthenticationMessage: \").append(getSmsAuthenticationMessage()).append(\",\");\r\n    if (getSmsConfiguration() != null)\r\n        sb.append(\"SmsConfiguration: \").append(getSmsConfiguration());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.GetComplianceSummaryByConfigRuleResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComplianceSummary() != null)\r\n        sb.append(\"ComplianceSummary: \").append(getComplianceSummary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.AddTagsToResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.EnableRadiusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonClientException.isRetryable",
	"Comment": "returns a hint as to whether it makes sense to retry upon this exception.default is true, but subclass may override.this method is internal to the sdk. users should not depend on this method to decideif an exception from a service should be retried.",
	"Method": "boolean isRetryable(){\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeDefaultParametersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateUserPhoneConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPhoneConfig() != null)\r\n        sb.append(\"PhoneConfig: \").append(getPhoneConfig()).append(\",\");\r\n    if (getUserId() != null)\r\n        sb.append(\"UserId: \").append(getUserId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateProjectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getDefaultJobTimeoutMinutes() != null)\r\n        sb.append(\"DefaultJobTimeoutMinutes: \").append(getDefaultJobTimeoutMinutes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWSCredentialsProviderChainTest.testGetCredentialsException",
	"Comment": "tests that getcredentials throws an thrown if all providers in thechain fail to provide credentials.",
	"Method": "void testGetCredentialsException(){\r\n    MockCredentialsProvider provider1 = new MockCredentialsProvider(\"Failed!\");\r\n    MockCredentialsProvider provider2 = new MockCredentialsProvider(\"Bad!\");\r\n    AWSCredentialsProviderChain chain = new AWSCredentialsProviderChain(provider1, provider2);\r\n    thrown.expect(SdkClientException.class);\r\n    thrown.expectMessage(provider1.exceptionMessage);\r\n    thrown.expectMessage(provider2.exceptionMessage);\r\n    chain.getCredentials();\r\n}"
}, {
	"Path": "com.amazonaws.util.LengthCheckInputStreamTest.testMarkAndResetWithWrongExpectedLength",
	"Comment": "this test case initiates a mark after reading 100 bytes from the stream.reads the next 100 bytes from the stream. now the stream is reset and itis drained. at the last read, the length validation must fail because thestream was initialized with wrong expected length.",
	"Method": "void testMarkAndResetWithWrongExpectedLength(){\r\n    InputStream in = new ByteArrayInputStream(sampleData.getBytes());\r\n    LengthCheckInputStream rvis = new LengthCheckInputStream(in, sampleData.getBytes().length + 1, INCLUDE_SKIPPED_BYTES);\r\n    rvis.read(new byte[100]);\r\n    rvis.mark(100);\r\n    rvis.read(new byte[100]);\r\n    rvis.reset();\r\n    rvis.read(new byte[sampleData.getBytes().length - 100]);\r\n    try {\r\n        rvis.read();\r\n        fail();\r\n    } catch (Exception e) {\r\n        System.out.println(\"Exception occurred. Message: \" + e.getMessage());\r\n    }\r\n    rvis.close();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.UntagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteConnectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DeleteTaskResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.model.Trait.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getScore() != null)\r\n        sb.append(\"Score: \").append(getScore());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponseTest.testGetHeader_variousGet",
	"Comment": "test the header value returned correctly with various formats of header name.",
	"Method": "void testGetHeader_variousGet(){\r\n    String content = \"content\";\r\n    HttpResponse response = new HttpResponse(null, null);\r\n    response.addHeader(FOO_HEADER_LOWER_CASE, content);\r\n    Assert.assertEquals(response.getHeader(FOO_HEADER_LOWER_CASE), content);\r\n    Assert.assertEquals(response.getHeader(FOO_HEADER_UPPER_CASE), content);\r\n    Assert.assertEquals(response.getHeader(FOO_HEADER_MIXED_CASE), content);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateConnectionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.updateInstanceProfile",
	"Comment": "updates information about an existing private device instance profile.",
	"Method": "UpdateInstanceProfileResult updateInstanceProfile(UpdateInstanceProfileRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateInstanceProfile(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserPoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfigurationTest.copyConstructorUsesAccessors",
	"Comment": "some customers extend clientconfiguration and override the accessors. we should use the accessorsin the copy constructor otherwise we will ignore those overridden methods. see tt0142110771 formore information.",
	"Method": "void copyConstructorUsesAccessors(){\r\n    ClientConfiguration config = new ClientConfiguration() {\r\n        @Override\r\n        public int getSocketTimeout() {\r\n            return Integer.MAX_VALUE;\r\n        }\r\n    };\r\n    assertThat(new ClientConfiguration(config).getSocketTimeout(), equalTo(Integer.MAX_VALUE));\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfigurationTest.copyConstructorUsesAccessors",
	"Comment": "some customers extend clientconfiguration and override the accessors. we should use the accessorsin the copy constructor otherwise we will ignore those overridden methods. see tt0142110771 formore information.",
	"Method": "void copyConstructorUsesAccessors(){\r\n    return Integer.MAX_VALUE;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.confirmForgotPassword",
	"Comment": "allows a user to enter a confirmation code to reset a forgotten password.",
	"Method": "ConfirmForgotPasswordResult confirmForgotPassword(ConfirmForgotPasswordRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeConfirmForgotPassword(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateLagResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionsBandwidth() != null)\r\n        sb.append(\"ConnectionsBandwidth: \").append(getConnectionsBandwidth()).append(\",\");\r\n    if (getNumberOfConnections() != null)\r\n        sb.append(\"NumberOfConnections: \").append(getNumberOfConnections()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getLagName() != null)\r\n        sb.append(\"LagName: \").append(getLagName()).append(\",\");\r\n    if (getLagState() != null)\r\n        sb.append(\"LagState: \").append(getLagState()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getMinimumLinks() != null)\r\n        sb.append(\"MinimumLinks: \").append(getMinimumLinks()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getConnections() != null)\r\n        sb.append(\"Connections: \").append(getConnections()).append(\",\");\r\n    if (getAllowsHostedConnections() != null)\r\n        sb.append(\"AllowsHostedConnections: \").append(getAllowsHostedConnections()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.anonymousInvoke",
	"Comment": "invoke with no authentication. credentials are not required and any credentials set on the client or request willbe ignored for this operation.",
	"Method": "Response<X> anonymousInvoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext){\r\n    return doInvoke(request, responseHandler, executionContext, null, null);\r\n}"
}, {
	"Path": "com.amazonaws.auth.AbstractAWSSigner.getSignatureDate",
	"Comment": "returns the current time minus the given offset in seconds.the intent is to adjust the current time in the running jvm to thecorresponding wall clock time at aws for request signing purposes.",
	"Method": "Date getSignatureDate(int offsetInSeconds){\r\n    return new Date(System.currentTimeMillis() - offsetInSeconds * 1000);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.CreateUploadResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUpload() != null)\r\n        sb.append(\"Upload: \").append(getUpload());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListUserHierarchyGroupsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserHierarchyGroupSummaryList() != null)\r\n        sb.append(\"UserHierarchyGroupSummaryList: \").append(getUserHierarchyGroupSummaryList()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Condition.getValues",
	"Comment": "returns the values specified for this access control policy condition.for example, in a condition that compares the incoming ip address of arequest to a specified range of ip addresses, the range of ip addressesis the single value in the condition.most conditions accept only one value, but multiple values are possible.",
	"Method": "List<String> getValues(){\r\n    return values;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.AddTagsToResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.InstanceProfileCredentialsProviderIntegrationTest.testNoInstanceProfiles",
	"Comment": "tests that we correctly handle when no instance profiles are availablethrough the metadata service.",
	"Method": "void testNoInstanceProfiles(){\r\n    mockServer.setResponseFileName(\"sessionResponse\");\r\n    mockServer.setAvailableSecurityCredentials(\"\");\r\n    InstanceProfileCredentialsProvider credentialsProvider = new InstanceProfileCredentialsProvider();\r\n    try {\r\n        credentialsProvider.getCredentials();\r\n        fail(\"Expected an AmazonClientException, but wasn't thrown\");\r\n    } catch (AmazonClientException ace) {\r\n        assertNotNull(ace.getMessage());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyTest.assertValidStatementIds",
	"Comment": "asserts that each statement in the specified policy has a unique idassigned to it.",
	"Method": "void assertValidStatementIds(Policy policy){\r\n    Set<String> statementIds = new HashSet<String>();\r\n    for (Statement statement : policy.getStatements()) {\r\n        assertNotNull(statement.getId());\r\n        assertFalse(statementIds.contains(statement.getId()));\r\n        statementIds.add(statement.getId());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.Entity.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getScore() != null)\r\n        sb.append(\"Score: \").append(getScore()).append(\",\");\r\n    if (getType() != null)\r\n        sb.append(\"Type: \").append(getType()).append(\",\");\r\n    if (getText() != null)\r\n        sb.append(\"Text: \").append(getText()).append(\",\");\r\n    if (getBeginOffset() != null)\r\n        sb.append(\"BeginOffset: \").append(getBeginOffset()).append(\",\");\r\n    if (getEndOffset() != null)\r\n        sb.append(\"EndOffset: \").append(getEndOffset());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.AddTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyReplicationInstanceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstance() != null)\r\n        sb.append(\"ReplicationInstance: \").append(getReplicationInstance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListSamplesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccessToken() != null)\r\n        sb.append(\"AccessToken: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.PollForTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getWorkerGroup() != null)\r\n        sb.append(\"WorkerGroup: \").append(getWorkerGroup()).append(\",\");\r\n    if (getHostname() != null)\r\n        sb.append(\"Hostname: \").append(getHostname()).append(\",\");\r\n    if (getInstanceIdentity() != null)\r\n        sb.append(\"InstanceIdentity: \").append(getInstanceIdentity());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.EventTopic.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getTopicName() != null)\r\n        sb.append(\"TopicName: \").append(getTopicName()).append(\",\");\r\n    if (getTopicArn() != null)\r\n        sb.append(\"TopicArn: \").append(getTopicArn()).append(\",\");\r\n    if (getCreatedDateTime() != null)\r\n        sb.append(\"CreatedDateTime: \").append(getCreatedDateTime()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.AssociateConfigurationItemsToApplicationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getApplicationConfigurationId() != null)\r\n        sb.append(\"ApplicationConfigurationId: \").append(getApplicationConfigurationId()).append(\",\");\r\n    if (getConfigurationIds() != null)\r\n        sb.append(\"ConfigurationIds: \").append(getConfigurationIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReplicationInstanceTaskLog.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationTaskName() != null)\r\n        sb.append(\"ReplicationTaskName: \").append(getReplicationTaskName()).append(\",\");\r\n    if (getReplicationTaskArn() != null)\r\n        sb.append(\"ReplicationTaskArn: \").append(getReplicationTaskArn()).append(\",\");\r\n    if (getReplicationInstanceTaskLogSize() != null)\r\n        sb.append(\"ReplicationInstanceTaskLogSize: \").append(getReplicationInstanceTaskLogSize());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminGetUser",
	"Comment": "gets the specified user by user name in a user pool as an administrator. works on any user.requires developer credentials.",
	"Method": "AdminGetUserResult adminGetUser(AdminGetUserRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminGetUser(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HierarchyGroupSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.verifyTrust",
	"Comment": "aws directory service for microsoft active directory allows you to configure and verify trust relationships.this action verifies a trust relationship between your aws managed microsoft ad directory and an external domain.",
	"Method": "VerifyTrustResult verifyTrust(VerifyTrustRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeVerifyTrust(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeEventTopicsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEventTopics() != null)\r\n        sb.append(\"EventTopics: \").append(getEventTopics());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.RetentionConfiguration.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getRetentionPeriodInDays() != null)\r\n        sb.append(\"RetentionPeriodInDays: \").append(getRetentionPeriodInDays());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.Query.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSelectors() != null)\r\n        sb.append(\"Selectors: \").append(getSelectors());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awsapplicationdiscoveryasync using the current builder configuration.",
	"Method": "AWSApplicationDiscoveryAsync build(AwsAsyncClientParams params){\r\n    return new AWSApplicationDiscoveryAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DescribeDatasetResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDataset() != null)\r\n        sb.append(\"Dataset: \").append(getDataset());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.SetTaskStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.RemoveTagsFromResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceArn() != null)\r\n        sb.append(\"ResourceArn: \").append(getResourceArn()).append(\",\");\r\n    if (getTagKeys() != null)\r\n        sb.append(\"TagKeys: \").append(getTagKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AssociateVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getVirtualInterfaceType() != null)\r\n        sb.append(\"VirtualInterfaceType: \").append(getVirtualInterfaceType()).append(\",\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAmazonSideAsn() != null)\r\n        sb.append(\"AmazonSideAsn: \").append(getAmazonSideAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState()).append(\",\");\r\n    if (getCustomerRouterConfig() != null)\r\n        sb.append(\"CustomerRouterConfig: \").append(getCustomerRouterConfig()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getVirtualGatewayId() != null)\r\n        sb.append(\"VirtualGatewayId: \").append(getVirtualGatewayId()).append(\",\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes()).append(\",\");\r\n    if (getBgpPeers() != null)\r\n        sb.append(\"BgpPeers: \").append(getBgpPeers()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListDeviceInstancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.AWSCostExplorerClient.getDimensionValues",
	"Comment": "retrieves all available filter values for a specified filter over a period of time. you can search the dimensionvalues for an arbitrary string.",
	"Method": "GetDimensionValuesResult getDimensionValues(GetDimensionValuesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetDimensionValues(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ValidationWarning.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getWarnings() != null)\r\n        sb.append(\"Warnings: \").append(getWarnings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.TrialMinutes.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTotal() != null)\r\n        sb.append(\"Total: \").append(getTotal()).append(\",\");\r\n    if (getRemaining() != null)\r\n        sb.append(\"Remaining: \").append(getRemaining());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.BatchDetectSentimentResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResultList() != null)\r\n        sb.append(\"ResultList: \").append(getResultList()).append(\",\");\r\n    if (getErrorList() != null)\r\n        sb.append(\"ErrorList: \").append(getErrorList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.listGroups",
	"Comment": "lists the groups associated with a user pool.requires developer credentials.",
	"Method": "ListGroupsResult listGroups(ListGroupsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListGroups(request);\r\n}"
}, {
	"Path": "com.amazonaws.internal.FIFOCache.add",
	"Comment": "adds an entry to the cache, evicting the earliest entry if necessary.",
	"Method": "T add(String key,T value){\r\n    wlock.lock();\r\n    try {\r\n        return map.put(key, value);\r\n    } finally {\r\n        wlock.unlock();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopSentimentDetectionJobResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeTrustsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getTrustIds() != null)\r\n        sb.append(\"TrustIds: \").append(getTrustIds()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.CreateSubnetGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSubnetGroup() != null)\r\n        sb.append(\"SubnetGroup: \").append(getSubnetGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.AggregateEvaluationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEvaluationResultIdentifier() != null)\r\n        sb.append(\"EvaluationResultIdentifier: \").append(getEvaluationResultIdentifier()).append(\",\");\r\n    if (getComplianceType() != null)\r\n        sb.append(\"ComplianceType: \").append(getComplianceType()).append(\",\");\r\n    if (getResultRecordedTime() != null)\r\n        sb.append(\"ResultRecordedTime: \").append(getResultRecordedTime()).append(\",\");\r\n    if (getConfigRuleInvokedTime() != null)\r\n        sb.append(\"ConfigRuleInvokedTime: \").append(getConfigRuleInvokedTime()).append(\",\");\r\n    if (getAnnotation() != null)\r\n        sb.append(\"Annotation: \").append(getAnnotation()).append(\",\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getAwsRegion() != null)\r\n        sb.append(\"AwsRegion: \").append(getAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminSetUserSettings",
	"Comment": "sets all the user settings for a specified user name. works on any user.requires developer credentials.",
	"Method": "AdminSetUserSettingsResult adminSetUserSettings(AdminSetUserSettingsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminSetUserSettings(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.DeleteDatasetRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getDatasetName() != null)\r\n        sb.append(\"DatasetName: \").append(getDatasetName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.TagResourceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.getAggregateResourceConfig",
	"Comment": "returns configuration item that is aggregated for your specific resource in a specific source account and region.",
	"Method": "GetAggregateResourceConfigResult getAggregateResourceConfig(GetAggregateResourceConfigRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetAggregateResourceConfig(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeDirectConnectGatewayAttachmentsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectConnectGatewayId() != null)\r\n        sb.append(\"DirectConnectGatewayId: \").append(getDirectConnectGatewayId()).append(\",\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopEntitiesDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.reportTaskRunnerHeartbeat",
	"Comment": "task runners call reporttaskrunnerheartbeat every 15 minutes to indicate that they are operational.if the aws data pipeline task runner is launched on a resource managed by aws data pipeline, the web service canuse this call to detect when the task runner application has failed and restart a new instance.",
	"Method": "ReportTaskRunnerHeartbeatResult reportTaskRunnerHeartbeat(ReportTaskRunnerHeartbeatRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeReportTaskRunnerHeartbeat(request);\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.getCustomRequestHeaders",
	"Comment": "returns an immutable map of custom header names to header values.",
	"Method": "Map<String, String> getCustomRequestHeaders(){\r\n    if (customRequestHeaders == null) {\r\n        return null;\r\n    }\r\n    return Collections.unmodifiableMap(customRequestHeaders);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ConfirmDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserConfirmationNecessary() != null)\r\n        sb.append(\"UserConfirmationNecessary: \").append(getUserConfirmationNecessary());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ReplicationPendingModifiedValues.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationInstanceClass() != null)\r\n        sb.append(\"ReplicationInstanceClass: \").append(getReplicationInstanceClass()).append(\",\");\r\n    if (getAllocatedStorage() != null)\r\n        sb.append(\"AllocatedStorage: \").append(getAllocatedStorage()).append(\",\");\r\n    if (getMultiAZ() != null)\r\n        sb.append(\"MultiAZ: \").append(getMultiAZ()).append(\",\");\r\n    if (getEngineVersion() != null)\r\n        sb.append(\"EngineVersion: \").append(getEngineVersion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.internal.JsonPolicyWriter.writePolicyToString",
	"Comment": "converts the specified aws policy object to a json string, suitable forpassing to an aws service.",
	"Method": "String writePolicyToString(Policy policy){\r\n    if (!isNotNull(policy))\r\n        throw new IllegalArgumentException(\"Policy cannot be null\");\r\n    try {\r\n        return jsonStringOf(policy);\r\n    } catch (Exception e) {\r\n        String message = \"Unable to serialize policy to JSON string: \" + e.getMessage();\r\n        throw new IllegalArgumentException(message, e);\r\n    } finally {\r\n        try {\r\n            writer.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeTagsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceTags() != null)\r\n        sb.append(\"ResourceTags: \").append(getResourceTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUserImportJobsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.BatchGetResourceConfigRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceKeys() != null)\r\n        sb.append(\"ResourceKeys: \").append(getResourceKeys());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectDominantLanguageResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLanguages() != null)\r\n        sb.append(\"Languages: \").append(getLanguages());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.SecurityProfileSummary.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.CreateLagRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNumberOfConnections() != null)\r\n        sb.append(\"NumberOfConnections: \").append(getNumberOfConnections()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getConnectionsBandwidth() != null)\r\n        sb.append(\"ConnectionsBandwidth: \").append(getConnectionsBandwidth()).append(\",\");\r\n    if (getLagName() != null)\r\n        sb.append(\"LagName: \").append(getLagName()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.CreateLifecyclePolicyResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPolicyId() != null)\r\n        sb.append(\"PolicyId: \").append(getPolicyId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeReplicationTasks",
	"Comment": "returns information about replication tasks for your account in the current region.",
	"Method": "DescribeReplicationTasksResult describeReplicationTasks(DescribeReplicationTasksRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeReplicationTasks(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.DescribeParameterGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getParameterGroupNames() != null)\r\n        sb.append(\"ParameterGroupNames: \").append(getParameterGroupNames()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.deleteParameterGroup",
	"Comment": "deletes the specified parameter group. you cannot delete a parameter group if it is associated with any daxclusters.",
	"Method": "DeleteParameterGroupResult deleteParameterGroup(DeleteParameterGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteParameterGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehendmedical.AWSComprehendMedicalClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMClient.getLifecyclePolicies",
	"Comment": "gets summary information about all or the specified data lifecycle policies.to get complete information about a policy, use getlifecyclepolicy.",
	"Method": "GetLifecyclePoliciesResult getLifecyclePolicies(GetLifecyclePoliciesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetLifecyclePolicies(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyTest.testMultipleConditionKeysForConditionType",
	"Comment": "policies with multiple conditions that use the same comparison type mustbe merged together in the json format, otherwise there will be two keyswith the same name and one will override the other.",
	"Method": "void testMultipleConditionKeysForConditionType(){\r\n    Policy policy = new Policy();\r\n    policy.withStatements(new Statement(Effect.Allow).withResources(new Resource(\"arn:aws:sqs:us-east-1:987654321000:MyQueue\")).withPrincipals(Principal.AllUsers).withActions(new TestAction(\"foo\")).withConditions(new StringCondition(StringComparisonType.StringNotLike, \"key1\", \"foo\"), new StringCondition(StringComparisonType.StringNotLike, \"key1\", \"bar\")));\r\n    JsonNode jsonPolicy = Jackson.jsonNodeOf(policy.toJson());\r\n    JsonNode statementArray = jsonPolicy.get(\"Statement\");\r\n    assertEquals(statementArray.size(), 1);\r\n    JsonNode conditions = statementArray.get(0).get(\"Condition\");\r\n    assertEquals(conditions.size(), 1);\r\n    JsonNode stringLikeCondition = conditions.get(StringComparisonType.StringNotLike.toString());\r\n    assertTrue(stringLikeCondition.has(\"key1\"));\r\n    assertFalse(stringLikeCondition.has(\"key2\"));\r\n    assertValidStatementIds(policy);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.SentimentDetectionJobFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.waiters.MaxAttemptsRetryStrategy.shouldRetry",
	"Comment": "default way of checking if polling should be retriedor fast failed",
	"Method": "boolean shouldRetry(PollingStrategyContext pollingStrategyContext){\r\n    return pollingStrategyContext.getRetriesAttempted() < defaultMaxAttempts;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.TagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.transform.JsonUnmarshallerContext.getHttpResponse",
	"Comment": "returns the original httpresponse constructed for this request. returnsnull by default.",
	"Method": "HttpResponse getHttpResponse(){\r\n    return null;\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HierarchyLevel.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.describeDomainControllers",
	"Comment": "provides information about any domain controllers in your directory.",
	"Method": "DescribeDomainControllersResult describeDomainControllers(DescribeDomainControllersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDomainControllers(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DisableSsoResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.FileUtils.appendDataToTempFile",
	"Comment": "appends the given data to the file specified in the input and returns thereference to the file.",
	"Method": "File appendDataToTempFile(File file,String dataToAppend){\r\n    FileWriter outputWriter = new FileWriter(file);\r\n    try {\r\n        outputWriter.append(dataToAppend);\r\n    } finally {\r\n        outputWriter.close();\r\n    }\r\n    return file;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListDeviceInstancesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeviceInstances() != null)\r\n        sb.append(\"DeviceInstances: \").append(getDeviceInstances()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.metrics.AwsSdkMetricsTest.enableDefaultMetrics",
	"Comment": "by default the aws sdk metric collection is disabled. enabling it shouldfail unless the necessary cloudwatch related jars are on the classpath.therefore, this test is expected to fail in enabling the default metriccollection, but have absolutely no impact otherwise.",
	"Method": "void enableDefaultMetrics(){\r\n    Assert.assertFalse(AwsSdkMetrics.enableDefaultMetrics());\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutConfigurationRecorderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StopContinuousExportResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getStartTime() != null)\r\n        sb.append(\"StartTime: \").append(getStartTime()).append(\",\");\r\n    if (getStopTime() != null)\r\n        sb.append(\"StopTime: \").append(getStopTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListSuitesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSuites() != null)\r\n        sb.append(\"Suites: \").append(getSuites()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.EnableRadiusRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getRadiusSettings() != null)\r\n        sb.append(\"RadiusSettings: \").append(getRadiusSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.User.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getId() != null)\r\n        sb.append(\"Id: \").append(getId()).append(\",\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(getUsername()).append(\",\");\r\n    if (getIdentityInfo() != null)\r\n        sb.append(\"IdentityInfo: \").append(getIdentityInfo()).append(\",\");\r\n    if (getPhoneConfig() != null)\r\n        sb.append(\"PhoneConfig: \").append(getPhoneConfig()).append(\",\");\r\n    if (getDirectoryUserId() != null)\r\n        sb.append(\"DirectoryUserId: \").append(getDirectoryUserId()).append(\",\");\r\n    if (getSecurityProfileIds() != null)\r\n        sb.append(\"SecurityProfileIds: \").append(getSecurityProfileIds()).append(\",\");\r\n    if (getRoutingProfileId() != null)\r\n        sb.append(\"RoutingProfileId: \").append(getRoutingProfileId()).append(\",\");\r\n    if (getHierarchyGroupId() != null)\r\n        sb.append(\"HierarchyGroupId: \").append(getHierarchyGroupId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Service.setPartitionEndpoint",
	"Comment": "sets the region name if the service is enabled partition wide.",
	"Method": "void setPartitionEndpoint(String partitionEndpoint){\r\n    this.partitionEndpoint = partitionEndpoint;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeletePendingAggregationRequestRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRequesterAccountId() != null)\r\n        sb.append(\"RequesterAccountId: \").append(getRequesterAccountId()).append(\",\");\r\n    if (getRequesterAwsRegion() != null)\r\n        sb.append(\"RequesterAwsRegion: \").append(getRequesterAwsRegion());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.partitions.model.Partitions.getVersion",
	"Comment": "returns the version of the json schema for the partition metadata document.",
	"Method": "String getVersion(){\r\n    return version;\r\n}"
}, {
	"Path": "com.amazonaws.util.UriResourcePathUtils.addStaticQueryParamtersToRequest",
	"Comment": "identifies the static query parameters in uri resource path for and adds it torequest.returns the updated uriresourcepath.",
	"Method": "String addStaticQueryParamtersToRequest(Request<?> request,String uriResourcePath){\r\n    if (request == null || uriResourcePath == null) {\r\n        return null;\r\n    }\r\n    String resourcePath = uriResourcePath;\r\n    int index = resourcePath.indexOf(\"?\");\r\n    if (index != -1) {\r\n        String queryString = resourcePath.substring(index + 1);\r\n        resourcePath = resourcePath.substring(0, index);\r\n        for (String s : queryString.split(\"[;&]\")) {\r\n            index = s.indexOf(\"=\");\r\n            if (index != -1) {\r\n                request.addParameter(s.substring(0, index), s.substring(index + 1));\r\n            } else {\r\n                request.addParameter(s, (String) null);\r\n            }\r\n        }\r\n    }\r\n    return resourcePath;\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetTestResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTest() != null)\r\n        sb.append(\"Test: \").append(getTest());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.UpdateVirtualInterfaceAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceId() != null)\r\n        sb.append(\"VirtualInterfaceId: \").append(getVirtualInterfaceId()).append(\",\");\r\n    if (getMtu() != null)\r\n        sb.append(\"Mtu: \").append(getMtu());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ForgotPasswordRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getClientId() != null)\r\n        sb.append(\"ClientId: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getSecretHash() != null)\r\n        sb.append(\"SecretHash: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserContextData() != null)\r\n        sb.append(\"UserContextData: \").append(getUserContextData()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getAnalyticsMetadata() != null)\r\n        sb.append(\"AnalyticsMetadata: \").append(getAnalyticsMetadata());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.StringUtils.fromDate",
	"Comment": "converts the specified date to an iso 8601 timestamp string and returnsit.",
	"Method": "String fromDate(Date value,String fromDate,Date date,String timestampFormat){\r\n    if (\"unixTimestamp\".equalsIgnoreCase(timestampFormat)) {\r\n        return DateUtils.formatServiceSpecificDate(date);\r\n    }\r\n    if (\"iso8601\".equalsIgnoreCase(timestampFormat)) {\r\n        return DateUtils.formatISO8601Date(date);\r\n    }\r\n    if (\"rfc822\".equalsIgnoreCase(timestampFormat)) {\r\n        return DateUtils.formatRFC822Date(date);\r\n    }\r\n    if (\"unixTimestampInMillis\".equalsIgnoreCase(timestampFormat)) {\r\n        return DateUtils.formatUnixTimestampInMills(date);\r\n    }\r\n    throw new IllegalArgumentException(\"unsupported timestamp format\");\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeleteNetworkProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeCertificatesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.getUserAgentSuffix",
	"Comment": "returns the http user agent header suffix to add to the end of the user agent header on all requests.",
	"Method": "String getUserAgentSuffix(){\r\n    return userAgentSuffix;\r\n}"
}, {
	"Path": "com.amazonaws.retry.ClientConfigurationMaxErrorRetryTest.testActualRetries",
	"Comment": "verifies the request is actually retried for the expected times.",
	"Method": "void testActualRetries(int expectedRetryAttempts){\r\n    testedClient = new AmazonHttpClient(clientConfiguration);\r\n    injectMockHttpClient(testedClient, new ReturnServiceErrorHttpClient(500, \"fake 500 service error\"));\r\n    ExecutionContext context = new ExecutionContext(true);\r\n    try {\r\n        testedClient.requestExecutionBuilder().request(getSampleRequestWithRepeatableContent(originalRequest)).errorResponseHandler(errorResponseHandler).executionContext(context).execute();\r\n        Assert.fail(\"AmazonServiceException is expected.\");\r\n    } catch (AmazonServiceException ase) {\r\n    }\r\n    RetryTestUtils.assertExpectedRetryCount(expectedRetryAttempts, context);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.describeConditionalForwarders",
	"Comment": "obtains information about the conditional forwarders for this account.if no input parameters are provided for remotedomainnames, this request describes all conditional forwarders forthe specified directory id.",
	"Method": "DescribeConditionalForwardersResult describeConditionalForwarders(DescribeConditionalForwardersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeConditionalForwarders(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetCSVHeaderRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.CreateEntityRecognizerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEntityRecognizerArn() != null)\r\n        sb.append(\"EntityRecognizerArn: \").append(getEntityRecognizerArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.ReportTaskProgressResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCanceled() != null)\r\n        sb.append(\"Canceled: \").append(getCanceled());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.UpdateContactAttributesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInitialContactId() != null)\r\n        sb.append(\"InitialContactId: \").append(getInitialContactId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getAttributes() != null)\r\n        sb.append(\"Attributes: \").append(getAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.Dataset.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityId() != null)\r\n        sb.append(\"IdentityId: \").append(getIdentityId()).append(\",\");\r\n    if (getDatasetName() != null)\r\n        sb.append(\"DatasetName: \").append(getDatasetName()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate()).append(\",\");\r\n    if (getLastModifiedDate() != null)\r\n        sb.append(\"LastModifiedDate: \").append(getLastModifiedDate()).append(\",\");\r\n    if (getLastModifiedBy() != null)\r\n        sb.append(\"LastModifiedBy: \").append(getLastModifiedBy()).append(\",\");\r\n    if (getDataStorage() != null)\r\n        sb.append(\"DataStorage: \").append(getDataStorage()).append(\",\");\r\n    if (getNumRecords() != null)\r\n        sb.append(\"NumRecords: \").append(getNumRecords());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.internal.SdkProxyRoutePlannerIntegrationTest.mockUnsuccessfulRequest",
	"Comment": "the fakehost does match the nonproxyhosts pattern, so that requests to this fakehostwill bypass the proxy and throw an unknownhostexception.",
	"Method": "void mockUnsuccessfulRequest(String nonProxyHosts,String fakeHost){\r\n    HttpClient client = createHttpClient(nonProxyHosts);\r\n    HttpUriRequest uriRequest = new HttpGet(\"http://\" + fakeHost);\r\n    executeWithRetries(client, uriRequest);\r\n    fail(\"UnknownHostException is expected!\");\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxAsyncClient.getExecutorService",
	"Comment": "returns the executor service used by this client to execute async requests.",
	"Method": "ExecutorService getExecutorService(){\r\n    return executorService;\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEndpointsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getEndpoints() != null)\r\n        sb.append(\"Endpoints: \").append(getEndpoints());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationTasksResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getReplicationTasks() != null)\r\n        sb.append(\"ReplicationTasks: \").append(getReplicationTasks());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.adminUserGlobalSignOut",
	"Comment": "signs out users from all devices, as an administrator.requires developer credentials.",
	"Method": "AdminUserGlobalSignOutResult adminUserGlobalSignOut(AdminUserGlobalSignOutRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAdminUserGlobalSignOut(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.TopicsDetectionJobFilter.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobStatus() != null)\r\n        sb.append(\"JobStatus: \").append(getJobStatus()).append(\",\");\r\n    if (getSubmitTimeBefore() != null)\r\n        sb.append(\"SubmitTimeBefore: \").append(getSubmitTimeBefore()).append(\",\");\r\n    if (getSubmitTimeAfter() != null)\r\n        sb.append(\"SubmitTimeAfter: \").append(getSubmitTimeAfter());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.CurrentMetric.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName()).append(\",\");\r\n    if (getUnit() != null)\r\n        sb.append(\"Unit: \").append(getUnit());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.AmazonHttpClient.shutdown",
	"Comment": "shuts down this http client object, releasing any resources that might be held open. this isan optional method, and callers are not expected to call it, but can if they want toexplicitly release any open resources. once a client has been shutdown, it cannot be used tomake more requests.",
	"Method": "void shutdown(){\r\n    clientExecutionTimer.shutdown();\r\n    httpRequestTimer.shutdown();\r\n    IdleConnectionReaper.removeConnectionManager(httpClient.getHttpClientConnectionManager());\r\n    httpClient.getHttpClientConnectionManager().shutdown();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.isAnonymous",
	"Comment": "checks if the credentials is an instance ofanonymousawscredentials",
	"Method": "boolean isAnonymous(AWSCredentials credentials){\r\n    return credentials instanceof AnonymousAWSCredentials;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteTrustResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DeleteEndpointResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpoint() != null)\r\n        sb.append(\"Endpoint: \").append(getEndpoint());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeEndpointTypesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker()).append(\",\");\r\n    if (getSupportedEndpointTypes() != null)\r\n        sb.append(\"SupportedEndpointTypes: \").append(getSupportedEndpointTypes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.Certificate.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCertificateIdentifier() != null)\r\n        sb.append(\"CertificateIdentifier: \").append(getCertificateIdentifier()).append(\",\");\r\n    if (getCertificateCreationDate() != null)\r\n        sb.append(\"CertificateCreationDate: \").append(getCertificateCreationDate()).append(\",\");\r\n    if (getCertificatePem() != null)\r\n        sb.append(\"CertificatePem: \").append(getCertificatePem()).append(\",\");\r\n    if (getCertificateWallet() != null)\r\n        sb.append(\"CertificateWallet: \").append(getCertificateWallet()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getCertificateOwner() != null)\r\n        sb.append(\"CertificateOwner: \").append(getCertificateOwner()).append(\",\");\r\n    if (getValidFromDate() != null)\r\n        sb.append(\"ValidFromDate: \").append(getValidFromDate()).append(\",\");\r\n    if (getValidToDate() != null)\r\n        sb.append(\"ValidToDate: \").append(getValidToDate()).append(\",\");\r\n    if (getSigningAlgorithm() != null)\r\n        sb.append(\"SigningAlgorithm: \").append(getSigningAlgorithm()).append(\",\");\r\n    if (getKeyLength() != null)\r\n        sb.append(\"KeyLength: \").append(getKeyLength());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.ExecutionContext.getSignerByURI",
	"Comment": "returns the signer for the given uri. note s3 in particular overrides this method.",
	"Method": "Signer getSignerByURI(URI uri){\r\n    return awsClient == null ? null : awsClient.getSignerByURI(uri);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.SharedDirectory.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccountId() != null)\r\n        sb.append(\"OwnerAccountId: \").append(getOwnerAccountId()).append(\",\");\r\n    if (getOwnerDirectoryId() != null)\r\n        sb.append(\"OwnerDirectoryId: \").append(getOwnerDirectoryId()).append(\",\");\r\n    if (getShareMethod() != null)\r\n        sb.append(\"ShareMethod: \").append(getShareMethod()).append(\",\");\r\n    if (getSharedAccountId() != null)\r\n        sb.append(\"SharedAccountId: \").append(getSharedAccountId()).append(\",\");\r\n    if (getSharedDirectoryId() != null)\r\n        sb.append(\"SharedDirectoryId: \").append(getSharedDirectoryId()).append(\",\");\r\n    if (getShareStatus() != null)\r\n        sb.append(\"ShareStatus: \").append(getShareStatus()).append(\",\");\r\n    if (getShareNotes() != null)\r\n        sb.append(\"ShareNotes: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getCreatedDateTime() != null)\r\n        sb.append(\"CreatedDateTime: \").append(getCreatedDateTime()).append(\",\");\r\n    if (getLastUpdatedDateTime() != null)\r\n        sb.append(\"LastUpdatedDateTime: \").append(getLastUpdatedDateTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DevicePoolCompatibilityResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevice() != null)\r\n        sb.append(\"Device: \").append(getDevice()).append(\",\");\r\n    if (getCompatible() != null)\r\n        sb.append(\"Compatible: \").append(getCompatible()).append(\",\");\r\n    if (getIncompatibilityMessages() != null)\r\n        sb.append(\"IncompatibilityMessages: \").append(getIncompatibilityMessages());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.setEndpointPrefix",
	"Comment": "an internal method used to explicitly override the service name for region metadata.this service name is used to compute the region endpoints.",
	"Method": "void setEndpointPrefix(String endpointPrefix){\r\n    if (endpointPrefix == null) {\r\n        throw new IllegalArgumentException(\"The parameter endpointPrefix must be specified!\");\r\n    }\r\n    this.endpointPrefix = endpointPrefix;\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.model.TagResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.AWSApplicationDiscoveryClient.exportConfigurations",
	"Comment": "deprecated. use startexporttask instead.exports all discovered configuration data to an amazon s3 bucket or an application that enables you to view andevaluate the data. data includes tags and tag associations, processes, connections, servers, and systemperformance. this api returns an export id that you can query using the describeexportconfigurations api.the system imposes a limit of two configuration exports in six hours.",
	"Method": "ExportConfigurationsResult exportConfigurations(ExportConfigurationsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeExportConfigurations(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.GetCSVHeaderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getCSVHeader() != null)\r\n        sb.append(\"CSVHeader: \").append(getCSVHeader());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminGetUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ConfirmForgotPasswordResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminGetDeviceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevice() != null)\r\n        sb.append(\"Device: \").append(getDevice());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.StopConfigurationRecorderResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteDeliveryChannelRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryChannelName() != null)\r\n        sb.append(\"DeliveryChannelName: \").append(getDeliveryChannelName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.AmazonConnectClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.getSigningCertificate",
	"Comment": "this method takes a user pool id, and returns the signing certificate.",
	"Method": "GetSigningCertificateResult getSigningCertificate(GetSigningCertificateRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetSigningCertificate(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectAsyncClient.describeVirtualGatewaysAsync",
	"Comment": "simplified method form for invoking the describevirtualgateways operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync(DescribeVirtualGatewaysRequest request,java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync,DescribeVirtualGatewaysRequest request,com.amazonaws.handlers.AsyncHandler<DescribeVirtualGatewaysRequest, DescribeVirtualGatewaysResult> asyncHandler,java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync,java.util.concurrent.Future<DescribeVirtualGatewaysResult> describeVirtualGatewaysAsync,com.amazonaws.handlers.AsyncHandler<DescribeVirtualGatewaysRequest, DescribeVirtualGatewaysResult> asyncHandler){\r\n    return describeVirtualGatewaysAsync(new DescribeVirtualGatewaysRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.Connection.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getConnectionName() != null)\r\n        sb.append(\"ConnectionName: \").append(getConnectionName()).append(\",\");\r\n    if (getConnectionState() != null)\r\n        sb.append(\"ConnectionState: \").append(getConnectionState()).append(\",\");\r\n    if (getRegion() != null)\r\n        sb.append(\"Region: \").append(getRegion()).append(\",\");\r\n    if (getLocation() != null)\r\n        sb.append(\"Location: \").append(getLocation()).append(\",\");\r\n    if (getBandwidth() != null)\r\n        sb.append(\"Bandwidth: \").append(getBandwidth()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getPartnerName() != null)\r\n        sb.append(\"PartnerName: \").append(getPartnerName()).append(\",\");\r\n    if (getLoaIssueTime() != null)\r\n        sb.append(\"LoaIssueTime: \").append(getLoaIssueTime()).append(\",\");\r\n    if (getLagId() != null)\r\n        sb.append(\"LagId: \").append(getLagId()).append(\",\");\r\n    if (getAwsDevice() != null)\r\n        sb.append(\"AwsDevice: \").append(getAwsDevice()).append(\",\");\r\n    if (getJumboFrameCapable() != null)\r\n        sb.append(\"JumboFrameCapable: \").append(getJumboFrameCapable()).append(\",\");\r\n    if (getAwsDeviceV2() != null)\r\n        sb.append(\"AwsDeviceV2: \").append(getAwsDeviceV2()).append(\",\");\r\n    if (getHasLogicalRedundancy() != null)\r\n        sb.append(\"HasLogicalRedundancy: \").append(getHasLogicalRedundancy());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.InstallToRemoteAccessSessionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRemoteAccessSessionArn() != null)\r\n        sb.append(\"RemoteAccessSessionArn: \").append(getRemoteAccessSessionArn()).append(\",\");\r\n    if (getAppArn() != null)\r\n        sb.append(\"AppArn: \").append(getAppArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.signUp",
	"Comment": "registers the user in the specified user pool and creates a user name, password, and user attributes.",
	"Method": "SignUpResult signUp(SignUpRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSignUp(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetProjectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.NewPublicVirtualInterfaceAllocation.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceName() != null)\r\n        sb.append(\"VirtualInterfaceName: \").append(getVirtualInterfaceName()).append(\",\");\r\n    if (getVlan() != null)\r\n        sb.append(\"Vlan: \").append(getVlan()).append(\",\");\r\n    if (getAsn() != null)\r\n        sb.append(\"Asn: \").append(getAsn()).append(\",\");\r\n    if (getAuthKey() != null)\r\n        sb.append(\"AuthKey: \").append(getAuthKey()).append(\",\");\r\n    if (getAmazonAddress() != null)\r\n        sb.append(\"AmazonAddress: \").append(getAmazonAddress()).append(\",\");\r\n    if (getCustomerAddress() != null)\r\n        sb.append(\"CustomerAddress: \").append(getCustomerAddress()).append(\",\");\r\n    if (getAddressFamily() != null)\r\n        sb.append(\"AddressFamily: \").append(getAddressFamily()).append(\",\");\r\n    if (getRouteFilterPrefixes() != null)\r\n        sb.append(\"RouteFilterPrefixes: \").append(getRouteFilterPrefixes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.getSignerByURI",
	"Comment": "returns the signer based on the given uri and the current aws clientconfiguration. currently only the sqs client can have different region ona per request basis. for other aws clients, the region remains the sameon a per aws client level.note, however, the signer returned for s3 is incomplete at this stage asthe information on the s3 bucket and key is not yet known.",
	"Method": "Signer getSignerByURI(URI uri){\r\n    return computeSignerByURI(uri, signerRegionOverride, true);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ScheduleRunResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRun() != null)\r\n        sb.append(\"Run: \").append(getRun());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.setGeneralProgressListener",
	"Comment": "sets the optional progress listener for receiving updates about the progress of the request.",
	"Method": "void setGeneralProgressListener(ProgressListener progressListener){\r\n    this.progressListener = progressListener == null ? ProgressListener.NOOP : progressListener;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.getComplianceSummaryByConfigRule",
	"Comment": "returns the number of aws config rules that are compliant and noncompliant, up to a maximum of 25 for each.",
	"Method": "GetComplianceSummaryByConfigRuleResult getComplianceSummaryByConfigRule(GetComplianceSummaryByConfigRuleRequest request,GetComplianceSummaryByConfigRuleResult getComplianceSummaryByConfigRule){\r\n    return getComplianceSummaryByConfigRule(new GetComplianceSummaryByConfigRuleRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.SetUserMFAPreferenceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.DeleteTaskRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTaskArn() != null)\r\n        sb.append(\"TaskArn: \").append(getTaskArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.StopDominantLanguageDetectionJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWSCredentialsProviderChainTest.testReusingLastProvider",
	"Comment": "tests that, by default, the chain remembers which provider was able toprovide credentials, and only calls that provider for any additionalcalls to getcredentials.",
	"Method": "void testReusingLastProvider(){\r\n    MockCredentialsProvider provider1 = new MockCredentialsProvider();\r\n    provider1.throwException = true;\r\n    MockCredentialsProvider provider2 = new MockCredentialsProvider();\r\n    AWSCredentialsProviderChain chain = new AWSCredentialsProviderChain(provider1, provider2);\r\n    assertEquals(0, provider1.getCredentialsCallCount);\r\n    assertEquals(0, provider2.getCredentialsCallCount);\r\n    chain.getCredentials();\r\n    assertEquals(1, provider1.getCredentialsCallCount);\r\n    assertEquals(1, provider2.getCredentialsCallCount);\r\n    chain.getCredentials();\r\n    assertEquals(1, provider1.getCredentialsCallCount);\r\n    assertEquals(2, provider2.getCredentialsCallCount);\r\n    chain.getCredentials();\r\n    assertEquals(1, provider1.getCredentialsCallCount);\r\n    assertEquals(3, provider2.getCredentialsCallCount);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.VerificationMessageTemplateType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSmsMessage() != null)\r\n        sb.append(\"SmsMessage: \").append(getSmsMessage()).append(\",\");\r\n    if (getEmailMessage() != null)\r\n        sb.append(\"EmailMessage: \").append(getEmailMessage()).append(\",\");\r\n    if (getEmailSubject() != null)\r\n        sb.append(\"EmailSubject: \").append(getEmailSubject()).append(\",\");\r\n    if (getEmailMessageByLink() != null)\r\n        sb.append(\"EmailMessageByLink: \").append(getEmailMessageByLink()).append(\",\");\r\n    if (getEmailSubjectByLink() != null)\r\n        sb.append(\"EmailSubjectByLink: \").append(getEmailSubjectByLink()).append(\",\");\r\n    if (getDefaultEmailOption() != null)\r\n        sb.append(\"DefaultEmailOption: \").append(getDefaultEmailOption());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DmsTransferSettings.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn()).append(\",\");\r\n    if (getBucketName() != null)\r\n        sb.append(\"BucketName: \").append(getBucketName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DeleteLogSubscriptionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.util.SdkHttpUtils.encodeParameters",
	"Comment": "creates an encoded query string from all the parameters in the specifiedrequest.",
	"Method": "String encodeParameters(SignableRequest<?> request){\r\n    final Map<String, List<String>> requestParams = request.getParameters();\r\n    if (requestParams.isEmpty())\r\n        return null;\r\n    final List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\r\n    for (Entry<String, List<String>> entry : requestParams.entrySet()) {\r\n        String parameterName = entry.getKey();\r\n        for (String value : entry.getValue()) {\r\n            nameValuePairs.add(new BasicNameValuePair(parameterName, value));\r\n        }\r\n    }\r\n    return URLEncodedUtils.format(nameValuePairs, DEFAULT_ENCODING);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ResourceIdentifier.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getResourceName() != null)\r\n        sb.append(\"ResourceName: \").append(getResourceName()).append(\",\");\r\n    if (getResourceDeletionTime() != null)\r\n        sb.append(\"ResourceDeletionTime: \").append(getResourceDeletionTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testProfileWithSecretAccessKeyNotSpecified",
	"Comment": "tests loading profile with aws secret access key not specified for a profile. an exceptionshould be thrown in this case.",
	"Method": "void testProfileWithSecretAccessKeyNotSpecified(){\r\n    checkDeferredException(ProfileResourceLoader.profilesWithSecretAccessKeyNotSpecified(), AmazonClientException.class, \"profile test2\", \"Should throw an exception as there is a profile with AWS Secret Access Key not specified.\");\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.listEntityRecognizers",
	"Comment": "gets a list of the properties of all entity recognizers that you created, including recognizers currently intraining. allows you to filter the list of recognizers based on criteria such as status and submission time. thiscall returns up to 500 entity recognizers in the list, with a default number of 100 recognizers in the list.the results of this list are not in any particular order. please get the list and sort locally if needed.",
	"Method": "ListEntityRecognizersResult listEntityRecognizers(ListEntityRecognizersRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeListEntityRecognizers(request);\r\n}"
}, {
	"Path": "com.amazonaws.client.ClientHandlerImpl.findRequestMetricCollector",
	"Comment": "returns the most specific request metric collector, starting from the request level, thenclient level, then finally the aws sdk level.",
	"Method": "RequestMetricCollector findRequestMetricCollector(RequestConfig requestConfig){\r\n    RequestMetricCollector reqLevelMetricsCollector = requestConfig.getRequestMetricsCollector();\r\n    if (reqLevelMetricsCollector != null) {\r\n        return reqLevelMetricsCollector;\r\n    } else if (clientLevelMetricCollector != null) {\r\n        return clientLevelMetricCollector;\r\n    } else {\r\n        return AwsSdkMetrics.getRequestMetricCollector();\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateGroupRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getGroupName() != null)\r\n        sb.append(\"GroupName: \").append(getGroupName()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getRoleArn() != null)\r\n        sb.append(\"RoleArn: \").append(getRoleArn()).append(\",\");\r\n    if (getPrecedence() != null)\r\n        sb.append(\"Precedence: \").append(getPrecedence());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClientBuilder.build",
	"Comment": "construct a synchronous implementation of amazondirectconnect using the current builder configuration.",
	"Method": "AmazonDirectConnect build(AwsSyncClientParams params){\r\n    return new AmazonDirectConnectClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.CreateEndpointRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getEndpointIdentifier() != null)\r\n        sb.append(\"EndpointIdentifier: \").append(getEndpointIdentifier()).append(\",\");\r\n    if (getEndpointType() != null)\r\n        sb.append(\"EndpointType: \").append(getEndpointType()).append(\",\");\r\n    if (getEngineName() != null)\r\n        sb.append(\"EngineName: \").append(getEngineName()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(getUsername()).append(\",\");\r\n    if (getPassword() != null)\r\n        sb.append(\"Password: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getServerName() != null)\r\n        sb.append(\"ServerName: \").append(getServerName()).append(\",\");\r\n    if (getPort() != null)\r\n        sb.append(\"Port: \").append(getPort()).append(\",\");\r\n    if (getDatabaseName() != null)\r\n        sb.append(\"DatabaseName: \").append(getDatabaseName()).append(\",\");\r\n    if (getExtraConnectionAttributes() != null)\r\n        sb.append(\"ExtraConnectionAttributes: \").append(getExtraConnectionAttributes()).append(\",\");\r\n    if (getKmsKeyId() != null)\r\n        sb.append(\"KmsKeyId: \").append(getKmsKeyId()).append(\",\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getCertificateArn() != null)\r\n        sb.append(\"CertificateArn: \").append(getCertificateArn()).append(\",\");\r\n    if (getSslMode() != null)\r\n        sb.append(\"SslMode: \").append(getSslMode()).append(\",\");\r\n    if (getServiceAccessRoleArn() != null)\r\n        sb.append(\"ServiceAccessRoleArn: \").append(getServiceAccessRoleArn()).append(\",\");\r\n    if (getExternalTableDefinition() != null)\r\n        sb.append(\"ExternalTableDefinition: \").append(getExternalTableDefinition()).append(\",\");\r\n    if (getDynamoDbSettings() != null)\r\n        sb.append(\"DynamoDbSettings: \").append(getDynamoDbSettings()).append(\",\");\r\n    if (getS3Settings() != null)\r\n        sb.append(\"S3Settings: \").append(getS3Settings()).append(\",\");\r\n    if (getDmsTransferSettings() != null)\r\n        sb.append(\"DmsTransferSettings: \").append(getDmsTransferSettings()).append(\",\");\r\n    if (getMongoDbSettings() != null)\r\n        sb.append(\"MongoDbSettings: \").append(getMongoDbSettings()).append(\",\");\r\n    if (getKinesisSettings() != null)\r\n        sb.append(\"KinesisSettings: \").append(getKinesisSettings()).append(\",\");\r\n    if (getElasticsearchSettings() != null)\r\n        sb.append(\"ElasticsearchSettings: \").append(getElasticsearchSettings());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.StopContactRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getContactId() != null)\r\n        sb.append(\"ContactId: \").append(getContactId()).append(\",\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListSuitesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.config.AmazonConfigClient.describeDeliveryChannels",
	"Comment": "returns details about the specified delivery channel. if a delivery channel is not specified, this action returnsthe details of all delivery channels associated with the account.currently, you can specify only one delivery channel per region in your account.",
	"Method": "DescribeDeliveryChannelsResult describeDeliveryChannels(DescribeDeliveryChannelsRequest request,DescribeDeliveryChannelsResult describeDeliveryChannels){\r\n    return describeDeliveryChannels(new DescribeDeliveryChannelsRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ListTagsForResourceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTags() != null)\r\n        sb.append(\"Tags: \").append(getTags()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.InstanceProfileCredentialsProviderIntegrationTest.testSessionCredentials_Expired",
	"Comment": "tests that we correctly handle when the metadata service credentials haveexpired.",
	"Method": "void testSessionCredentials_Expired(){\r\n    mockServer.setResponseFileName(\"sessionResponseExpired\");\r\n    mockServer.setAvailableSecurityCredentials(\"test-credentials\");\r\n    InstanceProfileCredentialsProvider credentialsProvider = new InstanceProfileCredentialsProvider();\r\n    try {\r\n        credentialsProvider.getCredentials();\r\n        fail(\"Expected an AmazonClientException, but wasn't thrown\");\r\n    } catch (AmazonClientException ace) {\r\n        assertNotNull(ace.getMessage());\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.OfferingTransaction.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingStatus() != null)\r\n        sb.append(\"OfferingStatus: \").append(getOfferingStatus()).append(\",\");\r\n    if (getTransactionId() != null)\r\n        sb.append(\"TransactionId: \").append(getTransactionId()).append(\",\");\r\n    if (getOfferingPromotionId() != null)\r\n        sb.append(\"OfferingPromotionId: \").append(getOfferingPromotionId()).append(\",\");\r\n    if (getCreatedOn() != null)\r\n        sb.append(\"CreatedOn: \").append(getCreatedOn()).append(\",\");\r\n    if (getCost() != null)\r\n        sb.append(\"Cost: \").append(getCost());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DocumentClassifierInputDataConfig.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getS3Uri() != null)\r\n        sb.append(\"S3Uri: \").append(getS3Uri());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.getDirectoryLimits",
	"Comment": "obtains directory limit information for the current region.",
	"Method": "GetDirectoryLimitsResult getDirectoryLimits(GetDirectoryLimitsRequest request,GetDirectoryLimitsResult getDirectoryLimits){\r\n    return getDirectoryLimits(new GetDirectoryLimitsRequest());\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteBGPPeerResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterface() != null)\r\n        sb.append(\"VirtualInterface: \").append(getVirtualInterface());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectAsyncClient.describeLocationsAsync",
	"Comment": "simplified method form for invoking the describelocations operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync(DescribeLocationsRequest request,java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync,DescribeLocationsRequest request,com.amazonaws.handlers.AsyncHandler<DescribeLocationsRequest, DescribeLocationsResult> asyncHandler,java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync,java.util.concurrent.Future<DescribeLocationsResult> describeLocationsAsync,com.amazonaws.handlers.AsyncHandler<DescribeLocationsRequest, DescribeLocationsResult> asyncHandler){\r\n    return describeLocationsAsync(new DescribeLocationsRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.util.DateUtils.parseRFC822Date",
	"Comment": "parses the specified date string as an rfc 822 date and returns the dateobject.",
	"Method": "Date parseRFC822Date(String dateString){\r\n    if (dateString == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return new Date(rfc822DateFormat.parseMillis(dateString));\r\n    } catch (RuntimeException ex) {\r\n        throw handleException(ex);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ComplianceByResource.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getResourceId() != null)\r\n        sb.append(\"ResourceId: \").append(getResourceId()).append(\",\");\r\n    if (getCompliance() != null)\r\n        sb.append(\"Compliance: \").append(getCompliance());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.ResetUserPasswordResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.SetIdentityPoolConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getPushSync() != null)\r\n        sb.append(\"PushSync: \").append(getPushSync()).append(\",\");\r\n    if (getCognitoStreams() != null)\r\n        sb.append(\"CognitoStreams: \").append(getCognitoStreams());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UserImportJobType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getJobName() != null)\r\n        sb.append(\"JobName: \").append(getJobName()).append(\",\");\r\n    if (getJobId() != null)\r\n        sb.append(\"JobId: \").append(getJobId()).append(\",\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getPreSignedUrl() != null)\r\n        sb.append(\"PreSignedUrl: \").append(getPreSignedUrl()).append(\",\");\r\n    if (getCreationDate() != null)\r\n        sb.append(\"CreationDate: \").append(getCreationDate()).append(\",\");\r\n    if (getStartDate() != null)\r\n        sb.append(\"StartDate: \").append(getStartDate()).append(\",\");\r\n    if (getCompletionDate() != null)\r\n        sb.append(\"CompletionDate: \").append(getCompletionDate()).append(\",\");\r\n    if (getStatus() != null)\r\n        sb.append(\"Status: \").append(getStatus()).append(\",\");\r\n    if (getCloudWatchLogsRoleArn() != null)\r\n        sb.append(\"CloudWatchLogsRoleArn: \").append(getCloudWatchLogsRoleArn()).append(\",\");\r\n    if (getImportedUsers() != null)\r\n        sb.append(\"ImportedUsers: \").append(getImportedUsers()).append(\",\");\r\n    if (getSkippedUsers() != null)\r\n        sb.append(\"SkippedUsers: \").append(getSkippedUsers()).append(\",\");\r\n    if (getFailedUsers() != null)\r\n        sb.append(\"FailedUsers: \").append(getFailedUsers()).append(\",\");\r\n    if (getCompletionMessage() != null)\r\n        sb.append(\"CompletionMessage: \").append(getCompletionMessage());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.describeEndpointTypes",
	"Comment": "returns information about the type of endpoints available.",
	"Method": "DescribeEndpointTypesResult describeEndpointTypes(DescribeEndpointTypesRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEndpointTypes(request);\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withUserAgentSuffix",
	"Comment": "sets the http user agent suffix header used in requests and returns the updated clientconfigurationobject.",
	"Method": "ClientConfiguration withUserAgentSuffix(String suffix){\r\n    setUserAgentSuffix(suffix);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetSuiteResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSuite() != null)\r\n        sb.append(\"Suite: \").append(getSuite());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateTrustResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getTrustId() != null)\r\n        sb.append(\"TrustId: \").append(getTrustId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateUserPoolRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getPolicies() != null)\r\n        sb.append(\"Policies: \").append(getPolicies()).append(\",\");\r\n    if (getLambdaConfig() != null)\r\n        sb.append(\"LambdaConfig: \").append(getLambdaConfig()).append(\",\");\r\n    if (getAutoVerifiedAttributes() != null)\r\n        sb.append(\"AutoVerifiedAttributes: \").append(getAutoVerifiedAttributes()).append(\",\");\r\n    if (getSmsVerificationMessage() != null)\r\n        sb.append(\"SmsVerificationMessage: \").append(getSmsVerificationMessage()).append(\",\");\r\n    if (getEmailVerificationMessage() != null)\r\n        sb.append(\"EmailVerificationMessage: \").append(getEmailVerificationMessage()).append(\",\");\r\n    if (getEmailVerificationSubject() != null)\r\n        sb.append(\"EmailVerificationSubject: \").append(getEmailVerificationSubject()).append(\",\");\r\n    if (getVerificationMessageTemplate() != null)\r\n        sb.append(\"VerificationMessageTemplate: \").append(getVerificationMessageTemplate()).append(\",\");\r\n    if (getSmsAuthenticationMessage() != null)\r\n        sb.append(\"SmsAuthenticationMessage: \").append(getSmsAuthenticationMessage()).append(\",\");\r\n    if (getMfaConfiguration() != null)\r\n        sb.append(\"MfaConfiguration: \").append(getMfaConfiguration()).append(\",\");\r\n    if (getDeviceConfiguration() != null)\r\n        sb.append(\"DeviceConfiguration: \").append(getDeviceConfiguration()).append(\",\");\r\n    if (getEmailConfiguration() != null)\r\n        sb.append(\"EmailConfiguration: \").append(getEmailConfiguration()).append(\",\");\r\n    if (getSmsConfiguration() != null)\r\n        sb.append(\"SmsConfiguration: \").append(getSmsConfiguration()).append(\",\");\r\n    if (getUserPoolTags() != null)\r\n        sb.append(\"UserPoolTags: \").append(getUserPoolTags()).append(\",\");\r\n    if (getAdminCreateUserConfig() != null)\r\n        sb.append(\"AdminCreateUserConfig: \").append(getAdminCreateUserConfig()).append(\",\");\r\n    if (getUserPoolAddOns() != null)\r\n        sb.append(\"UserPoolAddOns: \").append(getUserPoolAddOns());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ListOfferingPromotionsResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getOfferingPromotions() != null)\r\n        sb.append(\"OfferingPromotions: \").append(getOfferingPromotions()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.invoke",
	"Comment": "normal invoke with authentication. credentials are required and may be overriden at the request level.",
	"Method": "Response<X> invoke(Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,Response<X> invoke,Request<Y> request,HttpResponseHandler<AmazonWebServiceResponse<X>> responseHandler,ExecutionContext executionContext,URI cachedEndpoint,URI uriFromEndpointTrait){\r\n    executionContext.setCredentialsProvider(CredentialUtils.getCredentialsProvider(request.getOriginalRequest(), awsCredentialsProvider));\r\n    return doInvoke(request, responseHandler, executionContext, cachedEndpoint, uriFromEndpointTrait);\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.model.PutPipelineDefinitionRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getPipelineId() != null)\r\n        sb.append(\"PipelineId: \").append(getPipelineId()).append(\",\");\r\n    if (getPipelineObjects() != null)\r\n        sb.append(\"PipelineObjects: \").append(getPipelineObjects()).append(\",\");\r\n    if (getParameterObjects() != null)\r\n        sb.append(\"ParameterObjects: \").append(getParameterObjects()).append(\",\");\r\n    if (getParameterValues() != null)\r\n        sb.append(\"ParameterValues: \").append(getParameterValues());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.protocol.json.internal.JsonProtocolMarshaller.marshallBinaryPayload",
	"Comment": "binary data should be placed as is, directly into the content.",
	"Method": "void marshallBinaryPayload(Object val){\r\n    if (val instanceof ByteBuffer) {\r\n        request.setContent(BinaryUtils.toStream((ByteBuffer) val));\r\n    } else if (val instanceof InputStream) {\r\n        request.setContent((InputStream) val);\r\n    }\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.AllocatePublicVirtualInterfaceRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConnectionId() != null)\r\n        sb.append(\"ConnectionId: \").append(getConnectionId()).append(\",\");\r\n    if (getOwnerAccount() != null)\r\n        sb.append(\"OwnerAccount: \").append(getOwnerAccount()).append(\",\");\r\n    if (getNewPublicVirtualInterfaceAllocation() != null)\r\n        sb.append(\"NewPublicVirtualInterfaceAllocation: \").append(getNewPublicVirtualInterfaceAllocation());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeInterconnectsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectId() != null)\r\n        sb.append(\"InterconnectId: \").append(getInterconnectId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.describeEventTopics",
	"Comment": "obtains information about which sns topics receive status messages from the specified directory.if no input parameters are provided, such as directoryid or topicname, this request describes all of theassociations in the account.",
	"Method": "DescribeEventTopicsResult describeEventTopics(DescribeEventTopicsRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEventTopics(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.SchemaExtensionInfo.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId()).append(\",\");\r\n    if (getSchemaExtensionId() != null)\r\n        sb.append(\"SchemaExtensionId: \").append(getSchemaExtensionId()).append(\",\");\r\n    if (getDescription() != null)\r\n        sb.append(\"Description: \").append(getDescription()).append(\",\");\r\n    if (getSchemaExtensionStatus() != null)\r\n        sb.append(\"SchemaExtensionStatus: \").append(getSchemaExtensionStatus()).append(\",\");\r\n    if (getSchemaExtensionStatusReason() != null)\r\n        sb.append(\"SchemaExtensionStatusReason: \").append(getSchemaExtensionStatusReason()).append(\",\");\r\n    if (getStartDateTime() != null)\r\n        sb.append(\"StartDateTime: \").append(getStartDateTime()).append(\",\");\r\n    if (getEndDateTime() != null)\r\n        sb.append(\"EndDateTime: \").append(getEndDateTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.ListEntityRecognizersRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilter() != null)\r\n        sb.append(\"Filter: \").append(getFilter()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.DescribeContinuousExportsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getExportIds() != null)\r\n        sb.append(\"ExportIds: \").append(getExportIds()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUsersInGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsers() != null)\r\n        sb.append(\"Users: \").append(getUsers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AWSDirectoryServiceClient.addTagsToResource",
	"Comment": "adds or overwrites one or more tags for the specified directory. each directory can have a maximum of 50 tags.each tag consists of a key and optional value. tag keys must be unique to each resource.",
	"Method": "AddTagsToResourceResult addTagsToResource(AddTagsToResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAddTagsToResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.AmazonCognitoSyncClient.subscribeToDataset",
	"Comment": "subscribes to receive notifications when a dataset is modified by another device.this api can only be called with temporary credentials provided by cognito identity. you cannot call this apiwith developer credentials.",
	"Method": "SubscribeToDatasetResult subscribeToDataset(SubscribeToDatasetRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeSubscribeToDataset(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.InstanceProfileCredentialsProvider.createAsyncRefreshingProvider",
	"Comment": "spins up a new thread to refresh the credentials asynchronously.it is strongly recommended to reuse instances of this credentials provider, especiallywhen async refreshing is used since a background thread is created.",
	"Method": "InstanceProfileCredentialsProvider createAsyncRefreshingProvider(boolean eagerlyRefreshCredentialsAsync){\r\n    return new InstanceProfileCredentialsProvider(true, eagerlyRefreshCredentialsAsync);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeDocumentClassifier",
	"Comment": "gets the properties associated with a document classifier.",
	"Method": "DescribeDocumentClassifierResult describeDocumentClassifier(DescribeDocumentClassifierRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDocumentClassifier(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.ListAggregateDiscoveredResourcesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigurationAggregatorName() != null)\r\n        sb.append(\"ConfigurationAggregatorName: \").append(getConfigurationAggregatorName()).append(\",\");\r\n    if (getResourceType() != null)\r\n        sb.append(\"ResourceType: \").append(getResourceType()).append(\",\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getLimit() != null)\r\n        sb.append(\"Limit: \").append(getLimit()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.VerifyUserAttributeResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.DeviceSelectionResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMatchedDevicesCount() != null)\r\n        sb.append(\"MatchedDevicesCount: \").append(getMatchedDevicesCount()).append(\",\");\r\n    if (getMaxDevices() != null)\r\n        sb.append(\"MaxDevices: \").append(getMaxDevices());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDeleteUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.getExecutorService",
	"Comment": "returns the executor service used for performing the callbacks.",
	"Method": "ExecutorService getExecutorService(){\r\n    return LazyHolder.executor;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClient.describeUserPool",
	"Comment": "returns the configuration information and metadata of the specified user pool.",
	"Method": "DescribeUserPoolResult describeUserPool(DescribeUserPoolRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeUserPool(request);\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.PolicyTest.testCannotSerializeStatementWithBothResourceAndNotResource",
	"Comment": "tests that serializing a statement with a resource and a notresource element will fail",
	"Method": "void testCannotSerializeStatementWithBothResourceAndNotResource(){\r\n    Statement statement = new Statement(Effect.Allow).withId(\"0\").withPrincipals(Principal.AllUsers).withActions(new TestAction(\"action1\")).withResources(new Resource(\"any-resource\").withIsNotType(true));\r\n    statement.getResources().add(new Resource(\"any-other-resource\"));\r\n    Policy policy = new Policy(\"S3PolicyId1\").withStatements(statement);\r\n    policy.toJson();\r\n}"
}, {
	"Path": "com.amazonaws.services.datapipeline.DataPipelineClient.putPipelineDefinition",
	"Comment": "adds tasks, schedules, and preconditions to the specified pipeline. you can useputpipelinedefinition to populate a new pipeline.putpipelinedefinition also validates the configuration as it adds it to the pipeline. changes to thepipeline are saved unless one of the following three validation errors exists in the pipeline.an object is missing a name or identifier field.a string or reference field is empty.the number of objects in the pipeline exceeds the maximum allowed objects.the pipeline is in a finished state.pipeline object definitions are passed to the putpipelinedefinition action and returned by thegetpipelinedefinition action.",
	"Method": "PutPipelineDefinitionResult putPipelineDefinition(PutPipelineDefinitionRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executePutPipelineDefinition(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUpdateDeviceStatusResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.policy.Statement.withConditions",
	"Comment": "sets the conditions associated with this policy statement, and returnsthis updated statement object so that additional method calls can bechained together.conditions allow policy statements to be conditionally evaluated based onthe many available condition types.for example, a statement that allows access to an amazon sqs queue coulduse a condition to only apply the effect of that statement for requeststhat are made before a certain date, or that originate from a range of ipaddresses.multiple conditions can be included in a single statement, and allconditions must evaluate to true in order for the statement to takeeffect.",
	"Method": "Statement withConditions(Condition conditions){\r\n    setConditions(Arrays.asList(conditions));\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.auth.SignerFactory.registerSigner",
	"Comment": "register an implementation class for the given signer type.",
	"Method": "void registerSigner(String signerType,Class<? extends Signer> signerClass){\r\n    if (signerType == null) {\r\n        throw new IllegalArgumentException(\"signerType cannot be null\");\r\n    }\r\n    if (signerClass == null) {\r\n        throw new IllegalArgumentException(\"signerClass cannot be null\");\r\n    }\r\n    SIGNERS.put(signerType, signerClass);\r\n}"
}, {
	"Path": "com.amazonaws.auth.AWS4Signer.getRegionName",
	"Comment": "returns the region name that is used when calculating the signature.",
	"Method": "String getRegionName(){\r\n    return regionName;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DeleteVirtualInterfaceResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaceState() != null)\r\n        sb.append(\"VirtualInterfaceState: \").append(getVirtualInterfaceState());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitosync.model.GetIdentityPoolConfigurationResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getIdentityPoolId() != null)\r\n        sb.append(\"IdentityPoolId: \").append(getIdentityPoolId()).append(\",\");\r\n    if (getPushSync() != null)\r\n        sb.append(\"PushSync: \").append(getPushSync()).append(\",\");\r\n    if (getCognitoStreams() != null)\r\n        sb.append(\"CognitoStreams: \").append(getCognitoStreams());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.ListUserHierarchyGroupsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken()).append(\",\");\r\n    if (getMaxResults() != null)\r\n        sb.append(\"MaxResults: \").append(getMaxResults());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeVirtualInterfacesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getVirtualInterfaces() != null)\r\n        sb.append(\"VirtualInterfaces: \").append(getVirtualInterfaces());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.findRequestMetricCollector",
	"Comment": "returns the most specific request metric collector, starting from the request level, thenclient level, then finally the aws sdk level.",
	"Method": "RequestMetricCollector findRequestMetricCollector(RequestMetricCollector reqLevelMetricsCollector){\r\n    RequestMetricCollector requestMetricCollector;\r\n    if (reqLevelMetricsCollector != null) {\r\n        requestMetricCollector = reqLevelMetricsCollector;\r\n    } else if (getRequestMetricsCollector() != null) {\r\n        requestMetricCollector = getRequestMetricsCollector();\r\n    } else {\r\n        requestMetricCollector = AwsSdkMetrics.getRequestMetricCollector();\r\n    }\r\n    return requestMetricCollector;\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.RejectSharedDirectoryResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSharedDirectoryId() != null)\r\n        sb.append(\"SharedDirectoryId: \").append(getSharedDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.MFAOptionType.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDeliveryMedium() != null)\r\n        sb.append(\"DeliveryMedium: \").append(getDeliveryMedium()).append(\",\");\r\n    if (getAttributeName() != null)\r\n        sb.append(\"AttributeName: \").append(getAttributeName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.SDKProgressPublisher.publishRequestContentLength",
	"Comment": "convenient method to publish a request content length event to the givenlistener.",
	"Method": "Future<?> publishRequestContentLength(ProgressListener listener,long bytes){\r\n    return publishByteCountEvent(listener, REQUEST_CONTENT_LENGTH_EVENT, bytes);\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.PutRetentionConfigurationRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getRetentionPeriodInDays() != null)\r\n        sb.append(\"RetentionPeriodInDays: \").append(getRetentionPeriodInDays());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.http.HttpResponseTest.testPutHeader_replacePreviousValue",
	"Comment": "test the header value updated with various formats of header name.",
	"Method": "void testPutHeader_replacePreviousValue(){\r\n    HttpResponse response = new HttpResponse(null, null);\r\n    String lowerContent = \"content\";\r\n    String upperContent = \"CONTENT\";\r\n    String mixedContent = \"ConTenT\";\r\n    response.addHeader(FOO_HEADER_LOWER_CASE, lowerContent);\r\n    Assert.assertEquals(response.getHeader(FOO_HEADER_LOWER_CASE), lowerContent);\r\n    response.addHeader(FOO_HEADER_UPPER_CASE, upperContent);\r\n    Assert.assertEquals(response.getHeader(FOO_HEADER_LOWER_CASE), upperContent);\r\n    response.addHeader(FOO_HEADER_MIXED_CASE, mixedContent);\r\n    Assert.assertEquals(response.getHeader(FOO_HEADER_LOWER_CASE), mixedContent);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getUserAttributes() != null)\r\n        sb.append(\"UserAttributes: \").append(getUserAttributes()).append(\",\");\r\n    if (getValidationData() != null)\r\n        sb.append(\"ValidationData: \").append(getValidationData()).append(\",\");\r\n    if (getTemporaryPassword() != null)\r\n        sb.append(\"TemporaryPassword: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getForceAliasCreation() != null)\r\n        sb.append(\"ForceAliasCreation: \").append(getForceAliasCreation()).append(\",\");\r\n    if (getMessageAction() != null)\r\n        sb.append(\"MessageAction: \").append(getMessageAction()).append(\",\");\r\n    if (getDesiredDeliveryMediums() != null)\r\n        sb.append(\"DesiredDeliveryMediums: \").append(getDesiredDeliveryMediums());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dax.AmazonDaxClient.createParameterGroup",
	"Comment": "creates a new parameter group. a parameter group is a collection of parameters that you apply to all of the nodesin a dax cluster.",
	"Method": "CreateParameterGroupResult createParameterGroup(CreateParameterGroupRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeCreateParameterGroup(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminUpdateAuthEventFeedbackRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\").append(\",\");\r\n    if (getEventId() != null)\r\n        sb.append(\"EventId: \").append(getEventId()).append(\",\");\r\n    if (getFeedbackValue() != null)\r\n        sb.append(\"FeedbackValue: \").append(getFeedbackValue());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.AmazonDirectConnectClient.untagResource",
	"Comment": "removes one or more tags from the specified aws direct connect resource.",
	"Method": "UntagResourceResult untagResource(UntagResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeUntagResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.retry.v2.AndRetryConditionTest.noConditions_ThrowsException",
	"Comment": "the expected result for an and condition with no conditions is a little unclear so we disallow it until there is a usecase.",
	"Method": "void noConditions_ThrowsException(){\r\n    new AndRetryCondition().shouldRetry(RetryPolicyContexts.EMPTY);\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.model.UpdateAgentRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentArn() != null)\r\n        sb.append(\"AgentArn: \").append(getAgentArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.Computer.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getComputerId() != null)\r\n        sb.append(\"ComputerId: \").append(getComputerId()).append(\",\");\r\n    if (getComputerName() != null)\r\n        sb.append(\"ComputerName: \").append(getComputerName()).append(\",\");\r\n    if (getComputerAttributes() != null)\r\n        sb.append(\"ComputerAttributes: \").append(getComputerAttributes());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.setRequestMetricCollector",
	"Comment": "sets a request level request metric collector which takes precedence over the ones at thehttp client level and aws sdk level.",
	"Method": "void setRequestMetricCollector(RequestMetricCollector requestMetricCollector){\r\n    this.requestMetricCollector = requestMetricCollector;\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.computeSignerByServiceRegion",
	"Comment": "returns the signer for the given service name, region id, and the currentclient configuration.note, however, the signer returned for s3 is incomplete at this stage asthe information on the s3 bucket and key is not yet known.",
	"Method": "Signer computeSignerByServiceRegion(String serviceName,String regionId,String signerRegionOverride,boolean isRegionIdAsSignerParam){\r\n    String signerType = clientConfiguration.getSignerOverride();\r\n    Signer signer = signerType == null ? SignerFactory.getSigner(serviceName, regionId) : SignerFactory.getSignerByTypeAndService(signerType, serviceName);\r\n    if (signer instanceof RegionAwareSigner) {\r\n        RegionAwareSigner regionAwareSigner = (RegionAwareSigner) signer;\r\n        if (signerRegionOverride != null)\r\n            regionAwareSigner.setRegionName(signerRegionOverride);\r\n        else if (regionId != null && isRegionIdAsSignerParam)\r\n            regionAwareSigner.setRegionName(regionId);\r\n    }\r\n    if (signer instanceof EndpointPrefixAwareSigner) {\r\n        EndpointPrefixAwareSigner endpointPrefixAwareSigner = (EndpointPrefixAwareSigner) signer;\r\n        endpointPrefixAwareSigner.setEndpointPrefix(endpointPrefix);\r\n    }\r\n    return signer;\r\n}"
}, {
	"Path": "com.amazonaws.services.datasync.AWSDataSyncClient.deleteLocation",
	"Comment": "deletes the configuration of a location used by aws datasync.",
	"Method": "DeleteLocationResult deleteLocation(DeleteLocationRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteLocation(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.ListUsersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUsers() != null)\r\n        sb.append(\"Users: \").append(getUsers()).append(\",\");\r\n    if (getPaginationToken() != null)\r\n        sb.append(\"PaginationToken: \").append(getPaginationToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.StopJobRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.DescribeDomainControllersResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDomainControllers() != null)\r\n        sb.append(\"DomainControllers: \").append(getDomainControllers()).append(\",\");\r\n    if (getNextToken() != null)\r\n        sb.append(\"NextToken: \").append(getNextToken());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.ModifyReplicationSubnetGroupResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getReplicationSubnetGroup() != null)\r\n        sb.append(\"ReplicationSubnetGroup: \").append(getReplicationSubnetGroup());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costexplorer.model.ReservationPurchaseRecommendationDetail.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAccountId() != null)\r\n        sb.append(\"AccountId: \").append(getAccountId()).append(\",\");\r\n    if (getInstanceDetails() != null)\r\n        sb.append(\"InstanceDetails: \").append(getInstanceDetails()).append(\",\");\r\n    if (getRecommendedNumberOfInstancesToPurchase() != null)\r\n        sb.append(\"RecommendedNumberOfInstancesToPurchase: \").append(getRecommendedNumberOfInstancesToPurchase()).append(\",\");\r\n    if (getRecommendedNormalizedUnitsToPurchase() != null)\r\n        sb.append(\"RecommendedNormalizedUnitsToPurchase: \").append(getRecommendedNormalizedUnitsToPurchase()).append(\",\");\r\n    if (getMinimumNumberOfInstancesUsedPerHour() != null)\r\n        sb.append(\"MinimumNumberOfInstancesUsedPerHour: \").append(getMinimumNumberOfInstancesUsedPerHour()).append(\",\");\r\n    if (getMinimumNormalizedUnitsUsedPerHour() != null)\r\n        sb.append(\"MinimumNormalizedUnitsUsedPerHour: \").append(getMinimumNormalizedUnitsUsedPerHour()).append(\",\");\r\n    if (getMaximumNumberOfInstancesUsedPerHour() != null)\r\n        sb.append(\"MaximumNumberOfInstancesUsedPerHour: \").append(getMaximumNumberOfInstancesUsedPerHour()).append(\",\");\r\n    if (getMaximumNormalizedUnitsUsedPerHour() != null)\r\n        sb.append(\"MaximumNormalizedUnitsUsedPerHour: \").append(getMaximumNormalizedUnitsUsedPerHour()).append(\",\");\r\n    if (getAverageNumberOfInstancesUsedPerHour() != null)\r\n        sb.append(\"AverageNumberOfInstancesUsedPerHour: \").append(getAverageNumberOfInstancesUsedPerHour()).append(\",\");\r\n    if (getAverageNormalizedUnitsUsedPerHour() != null)\r\n        sb.append(\"AverageNormalizedUnitsUsedPerHour: \").append(getAverageNormalizedUnitsUsedPerHour()).append(\",\");\r\n    if (getAverageUtilization() != null)\r\n        sb.append(\"AverageUtilization: \").append(getAverageUtilization()).append(\",\");\r\n    if (getEstimatedBreakEvenInMonths() != null)\r\n        sb.append(\"EstimatedBreakEvenInMonths: \").append(getEstimatedBreakEvenInMonths()).append(\",\");\r\n    if (getCurrencyCode() != null)\r\n        sb.append(\"CurrencyCode: \").append(getCurrencyCode()).append(\",\");\r\n    if (getEstimatedMonthlySavingsAmount() != null)\r\n        sb.append(\"EstimatedMonthlySavingsAmount: \").append(getEstimatedMonthlySavingsAmount()).append(\",\");\r\n    if (getEstimatedMonthlySavingsPercentage() != null)\r\n        sb.append(\"EstimatedMonthlySavingsPercentage: \").append(getEstimatedMonthlySavingsPercentage()).append(\",\");\r\n    if (getEstimatedMonthlyOnDemandCost() != null)\r\n        sb.append(\"EstimatedMonthlyOnDemandCost: \").append(getEstimatedMonthlyOnDemandCost()).append(\",\");\r\n    if (getEstimatedReservationCostForLookbackPeriod() != null)\r\n        sb.append(\"EstimatedReservationCostForLookbackPeriod: \").append(getEstimatedReservationCostForLookbackPeriod()).append(\",\");\r\n    if (getUpfrontCost() != null)\r\n        sb.append(\"UpfrontCost: \").append(getUpfrontCost()).append(\",\");\r\n    if (getRecurringStandardMonthlyCost() != null)\r\n        sb.append(\"RecurringStandardMonthlyCost: \").append(getRecurringStandardMonthlyCost());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.UpdateNetworkProfileResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getNetworkProfile() != null)\r\n        sb.append(\"NetworkProfile: \").append(getNetworkProfile());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.StartDataCollectionByAgentIdsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getAgentIds() != null)\r\n        sb.append(\"AgentIds: \").append(getAgentIds());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.model.DetectSyntaxResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getSyntaxTokens() != null)\r\n        sb.append(\"SyntaxTokens: \").append(getSyntaxTokens());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.AdminDisableUserRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPoolId() != null)\r\n        sb.append(\"UserPoolId: \").append(getUserPoolId()).append(\",\");\r\n    if (getUsername() != null)\r\n        sb.append(\"Username: \").append(\"***Sensitive Data Redacted***\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceRequest.copyBaseTo",
	"Comment": "copies the internal state of this base class to that of the target request.",
	"Method": "T copyBaseTo(T target){\r\n    if (customRequestHeaders != null) {\r\n        for (Map.Entry<String, String> e : customRequestHeaders.entrySet()) target.putCustomRequestHeader(e.getKey(), e.getValue());\r\n    }\r\n    if (customQueryParameters != null) {\r\n        for (Map.Entry<String, List<String>> e : customQueryParameters.entrySet()) {\r\n            if (e.getValue() != null) {\r\n                for (String value : e.getValue()) {\r\n                    target.putCustomQueryParameter(e.getKey(), value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    target.setRequestCredentialsProvider(credentialsProvider);\r\n    target.setGeneralProgressListener(progressListener);\r\n    target.setRequestMetricCollector(requestMetricCollector);\r\n    requestClientOptions.copyTo(target.getRequestClientOptions());\r\n    return target;\r\n}"
}, {
	"Path": "com.amazonaws.AmazonWebServiceClient.useStrictHostNameVerification",
	"Comment": "hook to allow s3 client to disable strict hostname verification since it uses wildcardcertificates.",
	"Method": "boolean useStrictHostNameVerification(){\r\n    return true;\r\n}"
}, {
	"Path": "com.amazonaws.services.directconnect.model.DescribeConnectionsOnInterconnectRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInterconnectId() != null)\r\n        sb.append(\"InterconnectId: \").append(getInterconnectId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.AWSDatabaseMigrationServiceClient.addTagsToResource",
	"Comment": "adds metadata tags to an aws dms resource, including replication instance, endpoint, security group, andmigration task. these tags can also be used with cost allocation reporting to track cost associated with dmsresources, or used in a condition statement in an iam policy for dms.",
	"Method": "AddTagsToResourceResult addTagsToResource(AddTagsToResourceRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeAddTagsToResource(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.GetFederationTokenRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getInstanceId() != null)\r\n        sb.append(\"InstanceId: \").append(getInstanceId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.event.request.ProgressSupport.getRequestBytesTransferred",
	"Comment": "returns the number of bytes that have been transferred in the request.",
	"Method": "long getRequestBytesTransferred(){\r\n    return requestBytesTransferred;\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.UpdateUserAttributesResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCodeDeliveryDetailsList() != null)\r\n        sb.append(\"CodeDeliveryDetailsList: \").append(getCodeDeliveryDetailsList());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.costandusagereport.AWSCostAndUsageReportAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of awscostandusagereportasync using the current builder configuration.",
	"Method": "AWSCostAndUsageReportAsync build(AwsAsyncClientParams params){\r\n    return new AWSCostAndUsageReportAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.ProblemDetail.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getArn() != null)\r\n        sb.append(\"Arn: \").append(getArn()).append(\",\");\r\n    if (getName() != null)\r\n        sb.append(\"Name: \").append(getName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.model.RetainRule.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getCount() != null)\r\n        sb.append(\"Count: \").append(getCount());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.databasemigrationservice.model.DescribeReplicationInstancesRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFilters() != null)\r\n        sb.append(\"Filters: \").append(getFilters()).append(\",\");\r\n    if (getMaxRecords() != null)\r\n        sb.append(\"MaxRecords: \").append(getMaxRecords()).append(\",\");\r\n    if (getMarker() != null)\r\n        sb.append(\"Marker: \").append(getMarker());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.ClientConfiguration.withProxyUsername",
	"Comment": "sets the optional proxy user name and returns the updated clientconfiguration object.",
	"Method": "ClientConfiguration withProxyUsername(String proxyUsername){\r\n    setProxyUsername(proxyUsername);\r\n    return this;\r\n}"
}, {
	"Path": "com.amazonaws.services.config.model.DeleteEvaluationResultsRequest.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getConfigRuleName() != null)\r\n        sb.append(\"ConfigRuleName: \").append(getConfigRuleName());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.dlm.AmazonDLMAsyncClientBuilder.build",
	"Comment": "construct an asynchronous implementation of amazondlmasync using the current builder configuration.",
	"Method": "AmazonDLMAsync build(AwsAsyncClientParams params){\r\n    return new AmazonDLMAsyncClient(params);\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.DeleteUserPoolDomainResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.connect.model.HierarchyPath.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getLevelOne() != null)\r\n        sb.append(\"LevelOne: \").append(getLevelOne()).append(\",\");\r\n    if (getLevelTwo() != null)\r\n        sb.append(\"LevelTwo: \").append(getLevelTwo()).append(\",\");\r\n    if (getLevelThree() != null)\r\n        sb.append(\"LevelThree: \").append(getLevelThree()).append(\",\");\r\n    if (getLevelFour() != null)\r\n        sb.append(\"LevelFour: \").append(getLevelFour()).append(\",\");\r\n    if (getLevelFive() != null)\r\n        sb.append(\"LevelFive: \").append(getLevelFive());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.model.GetDevicePoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDevicePool() != null)\r\n        sb.append(\"DevicePool: \").append(getDevicePool());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.auth.profile.CredentialProfilesTest.testProfileWithAccessKeyNotSpecified",
	"Comment": "tests loading profile with aws access key not specified for a profile. an exception should bethrown in this case.",
	"Method": "void testProfileWithAccessKeyNotSpecified(){\r\n    checkDeferredException(ProfileResourceLoader.accessKeyNotSpecified(), AmazonClientException.class, \"test2\", \"Should throw an exception as there is a profile with AWS Access Key ID not specified.\");\r\n}"
}, {
	"Path": "com.amazonaws.services.devicefarm.AWSDeviceFarmClient.getInstanceProfile",
	"Comment": "returns information about the specified instance profile.",
	"Method": "GetInstanceProfileResult getInstanceProfile(GetInstanceProfileRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeGetInstanceProfile(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.comprehend.AmazonComprehendClient.describeTopicsDetectionJob",
	"Comment": "gets the properties associated with a topic detection job. use this operation to get the status of a detectionjob.",
	"Method": "DescribeTopicsDetectionJobResult describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request){\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTopicsDetectionJob(request);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.AbstractAWSDirectoryServiceAsync.describeDirectoriesAsync",
	"Comment": "simplified method form for invoking the describedirectories operation with an asynchandler.",
	"Method": "java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync(DescribeDirectoriesRequest request,java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync,DescribeDirectoriesRequest request,com.amazonaws.handlers.AsyncHandler<DescribeDirectoriesRequest, DescribeDirectoriesResult> asyncHandler,java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync,java.util.concurrent.Future<DescribeDirectoriesResult> describeDirectoriesAsync,com.amazonaws.handlers.AsyncHandler<DescribeDirectoriesRequest, DescribeDirectoriesResult> asyncHandler){\r\n    return describeDirectoriesAsync(new DescribeDirectoriesRequest(), asyncHandler);\r\n}"
}, {
	"Path": "com.amazonaws.services.directory.model.CreateMicrosoftADResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getDirectoryId() != null)\r\n        sb.append(\"DirectoryId: \").append(getDirectoryId());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.cognitoidp.model.CreateUserPoolResult.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getUserPool() != null)\r\n        sb.append(\"UserPool: \").append(getUserPool());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.amazonaws.services.applicationdiscovery.model.OrderByElement.toString",
	"Comment": "returns a string representation of this object. this is useful for testing and debugging. sensitive data will beredacted from this string using a placeholder value.",
	"Method": "String toString(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"{\");\r\n    if (getFieldName() != null)\r\n        sb.append(\"FieldName: \").append(getFieldName()).append(\",\");\r\n    if (getSortOrder() != null)\r\n        sb.append(\"SortOrder: \").append(getSortOrder());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}"
}]