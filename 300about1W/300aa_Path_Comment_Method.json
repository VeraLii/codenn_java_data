[{
	"Path": "org.assertj.core.api.AbstractListAssert.is",
	"Comment": "verifies that the actual object at the given index in the actual group satisfies the given condition.",
	"Method": "SELF is(Condition<? super ELEMENT> condition,Index index,SELF is,Condition<? super ACTUAL> condition){\r\n    return super.is(condition);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Strings.assertContainsSequence",
	"Comment": "verifies that the given charsequence contains the given sequence of charsequence, without any other charsequences between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,CharSequence actual,CharSequence[] sequence){\r\n    doCommonCheckForCharSequence(info, actual, sequence);\r\n    Set<CharSequence> notFound = stream(sequence).filter(value -> !stringContains(actual, value)).collect(toCollection(LinkedHashSet::new));\r\n    if (!notFound.isEmpty()) {\r\n        if (notFound.size() == 1 && sequence.length == 1) {\r\n            throw failures.failure(info, shouldContain(actual, sequence[0], comparisonStrategy));\r\n        }\r\n        throw failures.failure(info, shouldContain(actual, sequence, notFound, comparisonStrategy));\r\n    }\r\n    if (sequence.length == 1)\r\n        return;\r\n    String strActual = actual.toString();\r\n    String strSequence = stream(sequence).collect(joining());\r\n    if (!stringContains(strActual, strSequence)) {\r\n        throw failures.failure(info, shouldContainSequence(actual, sequence, comparisonStrategy));\r\n    }\r\n}"
}, {
	"Path": "com.apollographql.apollo.internal.ApolloCallTracker.setIdleResourceCallback",
	"Comment": "registers idleresourcecallback which is invoked when the apolloclient becomes idle.",
	"Method": "void setIdleResourceCallback(IdleResourceCallback idleResourceCallback){\r\n    this.idleResourceCallback = idleResourceCallback;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,short[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Utils.base91",
	"Comment": "all printable characters minus quotes, backslash and separators",
	"Method": "String base91(int num){\r\n    return base62(num, BASE91_EXTRA_CHARS);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Collection.updateFieldCache",
	"Comment": "update field checksums and sort cache, after find&replace, etc.",
	"Method": "void updateFieldCache(long[] nids){\r\n    String snids = Utils.ids2str(nids);\r\n    ArrayList<Object[]> r = new ArrayList();\r\n    for (Object[] o : _fieldData(snids)) {\r\n        String[] fields = Utils.splitFields((String) o[2]);\r\n        JSONObject model = mModels.get((Long) o[1]);\r\n        if (model == null) {\r\n            continue;\r\n        }\r\n        r.add(new Object[] { Utils.stripHTML(fields[mModels.sortIdx(model)]), Utils.fieldChecksum(fields[0]), o[0] });\r\n    }\r\n    mDb.executeMany(\"UPDATE notes SET sfld=?, csum=? WHERE id=?\", r);\r\n}"
}, {
	"Path": "trikita.anvil.InitTest.makeFunc",
	"Comment": "new function will be created each time, but only the first one should be called",
	"Method": "Runnable makeFunc(String id){\r\n    return new Runnable() {\r\n        public void run() {\r\n            if (called.containsKey(id)) {\r\n                throw new RuntimeException(\"Init func called more than once!\");\r\n            }\r\n            called.put(id, true);\r\n        }\r\n    };\r\n}"
}, {
	"Path": "trikita.anvil.InitTest.makeFunc",
	"Comment": "new function will be created each time, but only the first one should be called",
	"Method": "Runnable makeFunc(String id){\r\n    if (called.containsKey(id)) {\r\n        throw new RuntimeException(\"Init func called more than once!\");\r\n    }\r\n    called.put(id, true);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.ServerBuilder.https",
	"Comment": "adds an https port that listens on all available network interfaces.",
	"Method": "ServerBuilder https(int port,ServerBuilder https,InetSocketAddress localAddress){\r\n    return port(new ServerPort(requireNonNull(localAddress, \"localAddress\"), HTTPS));\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertIsEqualToComparingOnlyGivenFields",
	"Comment": "assert that the given object is lenient equals to other object by comparing given fields value only.",
	"Method": "void assertIsEqualToComparingOnlyGivenFields(AssertionInfo info,A actual,A other,Map<String, Comparator<?>> comparatorByPropertyOrField,TypeComparators comparatorByType,String fields){\r\n    assertNotNull(info, actual);\r\n    ByFieldsComparison byFieldsComparison = isEqualToComparingOnlyGivenFields(actual, other, comparatorByPropertyOrField, comparatorByType, fields);\r\n    if (byFieldsComparison.isFieldsNamesNotEmpty())\r\n        throw failures.failure(info, shouldBeEqualComparingOnlyGivenFields(actual, byFieldsComparison.fieldsNames, byFieldsComparison.rejectedValues, byFieldsComparison.expectedValues, newArrayList(fields)));\r\n}"
}, {
	"Path": "com.ichi2.anki.NavigationDrawerActivity.restartActivityInvalidateBackstack",
	"Comment": "restart the activity and discard old backstack, creating it new from the heirarchy in the manifest",
	"Method": "void restartActivityInvalidateBackstack(AnkiActivity activity){\r\n    Timber.i(\"AnkiActivity -- restartActivityInvalidateBackstack()\");\r\n    Intent intent = new Intent();\r\n    intent.setClass(activity, activity.getClass());\r\n    TaskStackBuilder stackBuilder = TaskStackBuilder.create(activity);\r\n    stackBuilder.addNextIntentWithParentStack(intent);\r\n    stackBuilder.startActivities(new Bundle());\r\n    activity.finishWithoutAnimation();\r\n}"
}, {
	"Path": "com.ichi2.libanki.Collection.newNote",
	"Comment": "return a new note with the model derived from the deck or the configuration",
	"Method": "Note newNote(Note newNote,boolean forDeck,Note newNote,JSONObject m){\r\n    return new Note(this, m);\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.logging.RequestLogListener.andThen",
	"Comment": "returns a composed listener that calls this listener first and then the specified one.",
	"Method": "RequestLogListener andThen(RequestLogListener other){\r\n    Objects.requireNonNull(other, \"other\");\r\n    final RequestLogListener first = this;\r\n    final RequestLogListener second = other;\r\n    return log -> {\r\n        RequestLogListenerInvoker.invokeOnRequestLog(first, log);\r\n        second.onRequestLog(log);\r\n    };\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getFrameDelay",
	"Comment": "the amount of time, in milliseconds, between each frame of the animation. this is arequested time that the animation will attempt to honor, but the actual delay betweenframes may be different, depending on system load and capabilities. this is a staticfunction because the same delay will be applied to all animations, since they are allrun off of a single timing loop.",
	"Method": "long getFrameDelay(){\r\n    return sFrameDelay;\r\n}"
}, {
	"Path": "com.ichi2.anki.Whiteboard.handleTouchEvent",
	"Comment": "handle motion events to draw using the touch screen or to interact with the flashcard behindthe whiteboard by using a second finger.",
	"Method": "boolean handleTouchEvent(MotionEvent event){\r\n    return handleDrawEvent(event) || handleMultiTouchEvent(event);\r\n}"
}, {
	"Path": "com.ichi2.compat.customtabs.CustomTabActivityHelper.openCustomTab",
	"Comment": "opens the url on a custom tab if possible. otherwise fallsback to opening it on a webview.",
	"Method": "void openCustomTab(Activity activity,CustomTabsIntent customTabsIntent,Uri uri,CustomTabFallback fallback){\r\n    String packageName = CustomTabsHelper.getPackageNameToUse(activity);\r\n    if (packageName == null) {\r\n        if (fallback != null) {\r\n            fallback.openUri(activity, uri);\r\n        } else {\r\n            Timber.e(\"A version of Chrome supporting custom tabs was not available, and the fallback was null\");\r\n        }\r\n    } else {\r\n        customTabsIntent.intent.setPackage(packageName);\r\n        customTabsIntent.launchUrl(activity, uri);\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.setupValue",
	"Comment": "utility function to set the value stored in a particular keyframe. the value used iswhatever the value is for the property name specified in the keyframe on the target object.",
	"Method": "void setupValue(Object target,Keyframe kf){\r\n    try {\r\n        if (mGetter == null) {\r\n            Class targetClass = target.getClass();\r\n            setupGetter(targetClass);\r\n        }\r\n        kf.setValue(mGetter.invoke(target));\r\n    } catch (InvocationTargetException e) {\r\n        Log.e(\"PropertyValuesHolder\", e.toString());\r\n    } catch (IllegalAccessException e) {\r\n        Log.e(\"PropertyValuesHolder\", e.toString());\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.util.diff.DiffUtils.generateUnifiedDiff",
	"Comment": "generateunifieddiff takes a patch and some other arguments, returning theunified diff format text representing the patch.",
	"Method": "List<String> generateUnifiedDiff(String original,String revised,List<String> originalLines,Patch<String> patch,int contextSize){\r\n    if (!patch.getDeltas().isEmpty()) {\r\n        List<String> ret = new ArrayList();\r\n        ret.add(\"--- \" + original);\r\n        ret.add(\"+++ \" + revised);\r\n        List<Delta<String>> patchDeltas = new ArrayList(patch.getDeltas());\r\n        List<Delta<String>> deltas = new ArrayList();\r\n        Delta<String> delta = patchDeltas.get(0);\r\n        deltas.add(delta);\r\n        if (patchDeltas.size() > 1) {\r\n            for (int i = 1; i < patchDeltas.size(); i++) {\r\n                int position = delta.getOriginal().getPosition();\r\n                Delta<String> nextDelta = patchDeltas.get(i);\r\n                if ((position + delta.getOriginal().size() + contextSize) >= (nextDelta.getOriginal().getPosition() - contextSize)) {\r\n                    deltas.add(nextDelta);\r\n                } else {\r\n                    List<String> curBlock = processDeltas(originalLines, deltas, contextSize);\r\n                    ret.addAll(curBlock);\r\n                    deltas.clear();\r\n                    deltas.add(nextDelta);\r\n                }\r\n                delta = nextDelta;\r\n            }\r\n        }\r\n        List<String> curBlock = processDeltas(originalLines, deltas, contextSize);\r\n        ret.addAll(curBlock);\r\n        return ret;\r\n    }\r\n    return new ArrayList();\r\n}"
}, {
	"Path": "org.agrona.BitUtil.toHex",
	"Comment": "generate a string that is the hex representation of a given byte array.",
	"Method": "String toHex(byte[] buffer,int offset,int length,String toHex,byte[] buffer){\r\n    return new String(toHexByteArray(buffer), UTF_8);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.Animator.removeListener",
	"Comment": "removes a listener from the set listening to this animation.",
	"Method": "void removeListener(AnimatorListener listener){\r\n    if (mListeners == null) {\r\n        return;\r\n    }\r\n    mListeners.remove(listener);\r\n    if (mListeners.size() == 0) {\r\n        mListeners = null;\r\n    }\r\n}"
}, {
	"Path": "org.agrona.SystemUtil.loadPropertiesFiles",
	"Comment": "load system properties from a given set of filenames or urls.",
	"Method": "void loadPropertiesFiles(String[] filenamesOrUrls){\r\n    for (final String filenameOrUrl : filenamesOrUrls) {\r\n        loadPropertiesFile(filenameOrUrl);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,Object[] actual,Object[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Long, Long>() {\r\n        public Long[] createKeyArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public Long[] createValueArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public SampleElements<Map.Entry<Long, Long>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n        }\r\n        public Map<Long, Long> create(final Object... entries) {\r\n            final Object2ObjectHashMap<Long, Long> map = new Object2ObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Long, Long>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Long, Long>> order(final List<Map.Entry<Long, Long>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Object2ObjectHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Object2ObjectHashMap<Long, Long> map = new Object2ObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "org.assertj.core.util.DateUtil.toCalendar",
	"Comment": "converts the given date to calendar, returns null if the given date is null.",
	"Method": "Calendar toCalendar(Date date){\r\n    if (date == null) {\r\n        return null;\r\n    }\r\n    Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime(date);\r\n    return calendar;\r\n}"
}, {
	"Path": "com.ichi2.anki.api.AddContentApi.getCompat",
	"Comment": "best not to store this in case the user updates ankidroid app while client app is staying alive",
	"Method": "Compat getCompat(){\r\n    return getApiHostSpecVersion() < 2 ? new CompatV1() : new CompatV2();\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertIsInstanceOfAny",
	"Comment": "verifies that the given object is an instance of any of the given types.",
	"Method": "void assertIsInstanceOfAny(AssertionInfo info,Object actual,Class<?>[] types){\r\n    if (objectIsInstanceOfOneOfGivenClasses(actual, types, info))\r\n        return;\r\n    throw failures.failure(info, shouldBeInstanceOfAny(actual, types));\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,long[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.deframe",
	"Comment": "adds the given data to this deframer and attempts delivery to the listener.",
	"Method": "void deframe(HttpData data,boolean endOfStream){\r\n    requireNonNull(data, \"data\");\r\n    checkNotClosed();\r\n    checkState(!this.endOfStream, \"Past end of stream\");\r\n    startedDeframing = true;\r\n    final int dataLength = data.length();\r\n    if (dataLength != 0) {\r\n        final ByteBuf buf;\r\n        if (data instanceof ByteBufHolder) {\r\n            buf = ((ByteBufHolder) data).content();\r\n        } else {\r\n            buf = Unpooled.wrappedBuffer(data.array(), data.offset(), dataLength);\r\n        }\r\n        assert unprocessed != null;\r\n        unprocessed.add(buf);\r\n        unprocessedBytes += dataLength;\r\n    }\r\n    this.endOfStream = endOfStream;\r\n    deliver();\r\n}"
}, {
	"Path": "com.golshadi.majid.core.DownloadManagerPro.dispose",
	"Comment": "close db connectionif your activity goes to paused or stop stateyou have to call this method to disconnect from db",
	"Method": "void dispose(){\r\n    dbHelper.close();\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.MediaType.parameters",
	"Comment": "returns a multimap containing the parameters of this media type.",
	"Method": "Map<String, List<String>> parameters(){\r\n    return (Map<String, List<String>>) (Map) parameters.asMap();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlServiceProviderBuilder.signatureAlgorithm",
	"Comment": "sets a signature algorithm which is used for signing by this service provider.",
	"Method": "SamlServiceProviderBuilder signatureAlgorithm(String signatureAlgorithm){\r\n    this.signatureAlgorithm = requireNonNull(signatureAlgorithm, \"signatureAlgorithm\");\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalDateTimeAssert.haveSameYearMonthAndDayOfMonth",
	"Comment": "returns true if both datetime are in the same year, month and day of month, false otherwise.",
	"Method": "boolean haveSameYearMonthAndDayOfMonth(LocalDateTime actual,LocalDateTime other){\r\n    return haveSameYearAndMonth(actual, other) && actual.getDayOfMonth() == other.getDayOfMonth();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsSpinner.setOnItemClickListener",
	"Comment": "a spinner does not support item click events. calling this methodwill raise an exception.",
	"Method": "void setOnItemClickListener(OnItemClickListener l){\r\n    throw new RuntimeException(\"setOnItemClickListener cannot be used with a spinner.\");\r\n}"
}, {
	"Path": "com.ichi2.ui.SlidingTabLayout.setSelectedIndicatorColors",
	"Comment": "sets the colors to be used for indicating the selected tab. these colors are treated as acircular array. providing one color will mean that all tabs are indicated with the same color.",
	"Method": "void setSelectedIndicatorColors(int colors){\r\n    mTabStrip.setSelectedIndicatorColors(colors);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.setFrameDelay",
	"Comment": "the amount of time, in milliseconds, between each frame of the animation. this is arequested time that the animation will attempt to honor, but the actual delay betweenframes may be different, depending on system load and capabilities. this is a staticfunction because the same delay will be applied to all animations, since they are allrun off of a single timing loop.",
	"Method": "void setFrameDelay(long frameDelay){\r\n    sFrameDelay = frameDelay;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.PathMapping.triePath",
	"Comment": "returns the path of this path mapping if it is able to be added to a trie.",
	"Method": "Optional<String> triePath(){\r\n    return Optional.empty();\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.PlotSheet.setIsBackwards",
	"Comment": "show the legend items in reverse order of the order in which they were added.",
	"Method": "void setIsBackwards(boolean isBackwards){\r\n    this.isBackwards = isBackwards;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.ServiceInfo.methods",
	"Comment": "returns the metadata about the methods available in the service.",
	"Method": "Set<MethodInfo> methods(){\r\n    return methods;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.setKeyframes",
	"Comment": "set the animated values for this object to this set of keyframes.",
	"Method": "void setKeyframes(Keyframe values){\r\n    int numKeyframes = values.length;\r\n    Keyframe[] keyframes = new Keyframe[Math.max(numKeyframes, 2)];\r\n    mValueType = values[0].getType();\r\n    for (int i = 0; i < numKeyframes; ++i) {\r\n        keyframes[i] = values[i];\r\n    }\r\n    mKeyframeSet = new KeyframeSet(keyframes);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.ClientFactoryBuilder.connectTimeoutMillis",
	"Comment": "sets the timeout of a socket connection attempt in milliseconds.",
	"Method": "ClientFactoryBuilder connectTimeoutMillis(long connectTimeoutMillis){\r\n    checkArgument(connectTimeoutMillis > 0, \"connectTimeoutMillis: %s (expected: > 0)\", connectTimeoutMillis);\r\n    return channelOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, ConvertUtils.safeLongToInt(connectTimeoutMillis));\r\n}"
}, {
	"Path": "com.ichi2.anki.api.AddContentApi.findDuplicateNotes",
	"Comment": "find all existing notes in the collection which have mid and a duplicate key",
	"Method": "List<NoteInfo> findDuplicateNotes(long mid,String key,SparseArray<List<NoteInfo>> findDuplicateNotes,long mid,List<String> keys,SparseArray<List<NoteInfo>> findDuplicateNotes,long modelId,List<String> keys,SparseArray<List<NoteInfo>> findDuplicateNotes,long modelId,List<String> keys,SparseArray<List<NoteInfo>> findDuplicateNotes,long modelId,List<String> keys){\r\n    return getCompat().findDuplicateNotes(mid, keys);\r\n}"
}, {
	"Path": "org.agrona.concurrent.broadcast.BroadcastTransmitter.maxMsgLength",
	"Comment": "get the maximum message length that can be transmitted for a buffer.",
	"Method": "int maxMsgLength(){\r\n    return maxMsgLength;\r\n}"
}, {
	"Path": "com.ichi2.libanki.Tags.add",
	"Comment": "add a tag to the collection. we use this method instead of exposing mtags publicly.",
	"Method": "void add(String key,Integer value){\r\n    mTags.put(key, value);\r\n}"
}, {
	"Path": "snippets.Snippets.initializeArrayWithRange",
	"Comment": "initializes an array containing the numbers in the specified range where start and end are inclusive.",
	"Method": "int[] initializeArrayWithRange(int end,int start){\r\n    return IntStream.rangeClosed(start, end).toArray();\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntCounterMap.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMap.capacity",
	"Comment": "get the total capacity for the map to which the load factor will be a fraction of.",
	"Method": "int capacity(){\r\n    return values.length;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.cors.CorsConfig.preflightResponseHeaders",
	"Comment": "returns http response headers that should be added to a cors preflight response.",
	"Method": "HttpHeaders preflightResponseHeaders(){\r\n    ensureEnabled();\r\n    if (preflightResponseHeaders.isEmpty()) {\r\n        return HttpHeaders.EMPTY_HEADERS;\r\n    }\r\n    final HttpHeaders preflightHeaders = new DefaultHttpHeaders(false);\r\n    for (Entry<AsciiString, Supplier<?>> entry : preflightResponseHeaders.entrySet()) {\r\n        final Object value = getValue(entry.getValue());\r\n        if (value instanceof Iterable) {\r\n            preflightHeaders.addObject(entry.getKey(), (Iterable<?>) value);\r\n        } else {\r\n            preflightHeaders.addObject(entry.getKey(), value);\r\n        }\r\n    }\r\n    return preflightHeaders;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalDateTimeAssert.areEqualIgnoringMinutes",
	"Comment": "returns true if both datetime are in the same year, month, day of month and hour, false otherwise.",
	"Method": "boolean areEqualIgnoringMinutes(LocalDateTime actual,LocalDateTime other){\r\n    return haveSameYearMonthAndDayOfMonth(actual, other) && actual.getHour() == other.getHour();\r\n}"
}, {
	"Path": "com.ichi2.libanki.Decks.id",
	"Comment": "add a deck with name. reuse deck if already exists. return id as int.",
	"Method": "Long id(String name,Long id,String name,boolean create,Long id,String name,String type,Long id,String name,boolean create,String type){\r\n    try {\r\n        name = name.replace(\"\\\"\", \"\");\r\n        for (Map.Entry<Long, JSONObject> g : mDecks.entrySet()) {\r\n            if (g.getValue().getString(\"name\").equalsIgnoreCase(name)) {\r\n                return g.getKey();\r\n            }\r\n        }\r\n        if (!create) {\r\n            return null;\r\n        }\r\n        if (name.contains(\"::\")) {\r\n            name = _ensureParents(name);\r\n        }\r\n        JSONObject g;\r\n        long id;\r\n        g = new JSONObject(type);\r\n        g.put(\"name\", name);\r\n        while (true) {\r\n            id = Utils.intNow(1000);\r\n            if (!mDecks.containsKey(id)) {\r\n                break;\r\n            }\r\n        }\r\n        g.put(\"id\", id);\r\n        mDecks.put(id, g);\r\n        save(g);\r\n        maybeAddToActive();\r\n        return id;\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.ofPropertyValuesHolder",
	"Comment": "constructs and returns an objectanimator that animates between the sets of values specifiedin propertyvalueholder objects. this variant should be used when animatingseveral properties at once with the same objectanimator, since propertyvaluesholder allowsyou to associate a set of animation values with a property name.",
	"Method": "ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder values){\r\n    ObjectAnimator anim = new ObjectAnimator();\r\n    anim.mTarget = target;\r\n    anim.setValues(values);\r\n    return anim;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.ClientFactoryBuilder.idleTimeoutMillis",
	"Comment": "sets the idle timeout of a socket connection in milliseconds. the connection is closed if there is norequest in progress for this amount of time.",
	"Method": "ClientFactoryBuilder idleTimeoutMillis(long idleTimeoutMillis){\r\n    checkArgument(idleTimeoutMillis >= 0, \"idleTimeoutMillis: %s (expected: >= 0)\", idleTimeoutMillis);\r\n    this.idleTimeoutMillis = idleTimeoutMillis;\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.setNextSelectedPositionInt",
	"Comment": "utility to keep mnextselectedposition and mnextselectedrowid in sync",
	"Method": "void setNextSelectedPositionInt(int position){\r\n    mNextSelectedPosition = position;\r\n    mNextSelectedRowId = getItemIdAtPosition(position);\r\n    if (mNeedSync && mSyncMode == SYNC_SELECTED_POSITION && position >= 0) {\r\n        mSyncPosition = position;\r\n        mSyncRowId = mNextSelectedRowId;\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.setOnSuggestionListener",
	"Comment": "sets a listener to inform when a suggestion is focused or clicked.",
	"Method": "void setOnSuggestionListener(OnSuggestionListener listener){\r\n    mOnSuggestionListener = listener;\r\n}"
}, {
	"Path": "com.ichi2.anki.provider.CardContentProvider.bulkInsertNotes",
	"Comment": "this implementation optimizes for when the notes are grouped according to model",
	"Method": "int bulkInsertNotes(ContentValues[] valuesArr,long deckId){\r\n    if (valuesArr == null || valuesArr.length == 0) {\r\n        return 0;\r\n    }\r\n    Collection col = CollectionHelper.getInstance().getCol(mContext);\r\n    if (col == null) {\r\n        throw new IllegalStateException(COL_NULL_ERROR_MSG);\r\n    }\r\n    if (col.getDecks().isDyn(deckId)) {\r\n        throw new IllegalArgumentException(\"A filtered deck cannot be specified as the deck in bulkInsertNotes\");\r\n    }\r\n    col.log(String.format(Locale.US, \"bulkInsertNotes: %d items.\\n%s\", valuesArr.length, getLogMessage(\"bulkInsert\", null)));\r\n    long modelId = -1L;\r\n    JSONObject model = null;\r\n    col.getDecks().flush();\r\n    SupportSQLiteDatabase sqldb = col.getDb().getDatabase();\r\n    try {\r\n        int result = 0;\r\n        sqldb.beginTransaction();\r\n        for (int i = 0; i < valuesArr.length; i++) {\r\n            ContentValues values = valuesArr[i];\r\n            if (values == null) {\r\n                continue;\r\n            }\r\n            String flds = values.getAsString(FlashCardsContract.Note.FLDS);\r\n            if (flds == null) {\r\n                continue;\r\n            }\r\n            Long thisModelId = values.getAsLong(FlashCardsContract.Note.MID);\r\n            if (thisModelId == null || thisModelId < 0) {\r\n                Timber.d(\"Unable to get model at index: \" + i);\r\n                continue;\r\n            }\r\n            String[] fldsArray = Utils.splitFields(flds);\r\n            if (model == null || thisModelId != modelId) {\r\n                model = col.getModels().get(thisModelId);\r\n                modelId = thisModelId;\r\n            }\r\n            com.ichi2.libanki.Note newNote = new com.ichi2.libanki.Note(col, model);\r\n            if (fldsArray.length != newNote.getFields().length) {\r\n                throw new IllegalArgumentException(\"Incorrect flds argument : \" + flds);\r\n            }\r\n            for (int idx = 0; idx < fldsArray.length; idx++) {\r\n                newNote.setField(idx, fldsArray[idx]);\r\n            }\r\n            String tags = values.getAsString(FlashCardsContract.Note.TAGS);\r\n            if (tags != null) {\r\n                newNote.setTagsFromStr(tags);\r\n            }\r\n            col.addNote(newNote);\r\n            for (Card card : newNote.cards()) {\r\n                card.setDid(deckId);\r\n                card.flush();\r\n            }\r\n            result++;\r\n        }\r\n        col.save();\r\n        sqldb.setTransactionSuccessful();\r\n        return result;\r\n    } finally {\r\n        sqldb.endTransaction();\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.ActivityChooserView.setInitialActivityCount",
	"Comment": "sets the initial count of items shown in the activities popupi.e. the items before the popup is expanded. this is an upperbound since it is not guaranteed that such number of intenthandlers exist.",
	"Method": "void setInitialActivityCount(int itemCount){\r\n    mInitialActivityCount = itemCount;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractZonedDateTimeAssert.areEqualIgnoringSeconds",
	"Comment": "returns true if both datetime are in the same year, month, day of month, hour and minute, false otherwise.",
	"Method": "boolean areEqualIgnoringSeconds(ZonedDateTime actual,ZonedDateTime other){\r\n    return areEqualIgnoringMinutes(actual, other) && actual.getMinute() == other.getMinute();\r\n}"
}, {
	"Path": "org.assertj.core.data.TemporalUnitWithinOffset.isBeyondOffset",
	"Comment": "checks if difference between temporal values is less then or equal to offset.",
	"Method": "boolean isBeyondOffset(Temporal temporal1,Temporal temporal2){\r\n    return getDifference(temporal1, temporal2) > value;\r\n}"
}, {
	"Path": "com.spotify.apollo.test.StubClient.clear",
	"Comment": "clears the previously setup request to response mappings, but not the history of sent messages.",
	"Method": "void clear(){\r\n    mappings.clear();\r\n}"
}, {
	"Path": "com.ichi2.compat.customtabs.CustomTabsHelper.getPackageNameToUse",
	"Comment": "goes through all apps that handle view intents and have a warmup service. picksthe one chosen by the user if there is one, otherwise makes a best effort to return avalid package name.this is not threadsafe.",
	"Method": "String getPackageNameToUse(Context context){\r\n    if (CompatHelper.getSdkVersion() < MIN_SDK) {\r\n        return null;\r\n    }\r\n    if (sPackageNameToUse != null)\r\n        return sPackageNameToUse;\r\n    PackageManager pm = context.getPackageManager();\r\n    Intent activityIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://www.example.com\"));\r\n    ResolveInfo defaultViewHandlerInfo = pm.resolveActivity(activityIntent, 0);\r\n    String defaultViewHandlerPackageName = null;\r\n    if (defaultViewHandlerInfo != null) {\r\n        defaultViewHandlerPackageName = defaultViewHandlerInfo.activityInfo.packageName;\r\n    }\r\n    List<ResolveInfo> resolvedActivityList = pm.queryIntentActivities(activityIntent, 0);\r\n    List<String> packagesSupportingCustomTabs = new ArrayList();\r\n    for (ResolveInfo info : resolvedActivityList) {\r\n        Intent serviceIntent = new Intent();\r\n        serviceIntent.setAction(CustomTabsService.ACTION_CUSTOM_TABS_CONNECTION);\r\n        serviceIntent.setPackage(info.activityInfo.packageName);\r\n        if (pm.resolveService(serviceIntent, 0) != null) {\r\n            packagesSupportingCustomTabs.add(info.activityInfo.packageName);\r\n        }\r\n    }\r\n    if (packagesSupportingCustomTabs.isEmpty()) {\r\n        sPackageNameToUse = null;\r\n    } else if (packagesSupportingCustomTabs.size() == 1) {\r\n        sPackageNameToUse = packagesSupportingCustomTabs.get(0);\r\n    } else if (!TextUtils.isEmpty(defaultViewHandlerPackageName) && !hasSpecializedHandlerIntents(context, activityIntent) && packagesSupportingCustomTabs.contains(defaultViewHandlerPackageName)) {\r\n        sPackageNameToUse = defaultViewHandlerPackageName;\r\n    } else if (packagesSupportingCustomTabs.contains(STABLE_PACKAGE)) {\r\n        sPackageNameToUse = STABLE_PACKAGE;\r\n    } else if (packagesSupportingCustomTabs.contains(BETA_PACKAGE)) {\r\n        sPackageNameToUse = BETA_PACKAGE;\r\n    } else if (packagesSupportingCustomTabs.contains(DEV_PACKAGE)) {\r\n        sPackageNameToUse = DEV_PACKAGE;\r\n    } else if (packagesSupportingCustomTabs.contains(LOCAL_PACKAGE)) {\r\n        sPackageNameToUse = LOCAL_PACKAGE;\r\n    }\r\n    return sPackageNameToUse;\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,long[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "org.agrona.concurrent.ringbuffer.RecordDescriptor.lengthOffset",
	"Comment": "the offset from the beginning of a record at which the message length field begins.",
	"Method": "int lengthOffset(int recordOffset){\r\n    return recordOffset;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.util.StartStopSupport.rollbackFailed",
	"Comment": "invoked when failed to stop during the rollback after startup failure.",
	"Method": "void rollbackFailed(Throwable cause){\r\n    logStopFailure(cause);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.Http2GoAwayTest.streamGreaterThanLastStreamId",
	"Comment": "client sends two requests whose streamids are 3 and 5 respectively. server sends a goaway framewhose laststreamid is 3. the request with streamid 5 should fail.",
	"Method": "void streamGreaterThanLastStreamId(){\r\n    try (ServerSocket ss = new ServerSocket(0);\r\n        ClientFactory clientFactory = newClientFactory()) {\r\n        final int port = ss.getLocalPort();\r\n        final HttpClient client = HttpClient.of(clientFactory, \"h2c://127.0.0.1:\" + port);\r\n        final CompletableFuture<AggregatedHttpMessage> future1 = client.get(\"/\").aggregate();\r\n        try (Socket s = ss.accept()) {\r\n            final InputStream in = s.getInputStream();\r\n            final BufferedOutputStream bos = new BufferedOutputStream(s.getOutputStream());\r\n            handleInitialExchange(in, bos);\r\n            assertThat(readFrame(in).getByte(3)).isEqualTo(Http2FrameTypes.HEADERS);\r\n            final CompletableFuture<AggregatedHttpMessage> future2 = client.get(\"/\").aggregate();\r\n            assertThat(readFrame(in).getByte(3)).isEqualTo(Http2FrameTypes.HEADERS);\r\n            bos.write(new byte[] { 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00 });\r\n            bos.flush();\r\n            assertThatThrownBy(future2::join).isInstanceOf(CompletionException.class).hasCauseInstanceOf(UnprocessedRequestException.class);\r\n            assertThat(future1).isNotDone();\r\n            assertThat(readFrame(in).getByte(3)).isEqualTo(Http2FrameTypes.GO_AWAY);\r\n            bos.write(new byte[] { 0x00, 0x00, 0x06, 0x01, 0x25, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0f, (byte) 0x88 });\r\n            bos.flush();\r\n            future1.join();\r\n            assertThat(in.read()).isEqualTo(-1);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.limit.ConcurrencyLimitingHttpClientTest.testOrdinaryRequest",
	"Comment": "tests the request patternthat does not exceed maxconcurrency.",
	"Method": "void testOrdinaryRequest(){\r\n    final ClientRequestContext ctx = newContext();\r\n    final HttpRequest req = mock(HttpRequest.class);\r\n    final HttpResponseWriter actualRes = HttpResponse.streaming();\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\r\n    when(delegate.execute(ctx, req)).thenReturn(actualRes);\r\n    final ConcurrencyLimitingHttpClient client = newDecorator(1).apply(delegate);\r\n    assertThat(client.numActiveRequests()).isZero();\r\n    final HttpResponse res = client.execute(ctx, req);\r\n    assertThat(res.isOpen()).isTrue();\r\n    assertThat(client.numActiveRequests()).isEqualTo(1);\r\n    closeAndDrain(actualRes, res);\r\n    assertThat(res.isOpen()).isFalse();\r\n    await().untilAsserted(() -> assertThat(client.numActiveRequests()).isZero());\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.dismissContextMenu",
	"Comment": "useful when a confirmation dialog is created within another dialog",
	"Method": "void dismissContextMenu(){\r\n    if (mContextMenu != null) {\r\n        mContextMenu.dismiss();\r\n        mContextMenu = null;\r\n    }\r\n}"
}, {
	"Path": "proton.inject.util.ArrayDeque.doubleCapacity",
	"Comment": "double the capacity of this deque.call only when full, i.e.,when head and tail have wrapped around to become equal.",
	"Method": "void doubleCapacity(){\r\n    assert head == tail;\r\n    int p = head;\r\n    int n = elements.length;\r\n    int r = n - p;\r\n    int newCapacity = n << 1;\r\n    if (newCapacity < 0)\r\n        throw new IllegalStateException(\"Sorry, deque too big\");\r\n    Object[] a = new Object[newCapacity];\r\n    System.arraycopy(elements, p, a, 0, r);\r\n    System.arraycopy(elements, 0, a, r, p);\r\n    elements = (E[]) a;\r\n    head = 0;\r\n    tail = n;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Numbers.assertIsCloseToPercentage",
	"Comment": "asserts that the actual value is close to the an offset expressed as an percentage value.",
	"Method": "void assertIsCloseToPercentage(AssertionInfo info,NUMBER actual,NUMBER other,Percentage percentage){\r\n    assertNotNull(info, actual);\r\n    checkPercentageIsNotNull(percentage);\r\n    checkNumberIsNotNull(other);\r\n    if (areEqual(actual, other))\r\n        return;\r\n    double acceptableDiff = abs(percentage.value * other.doubleValue() / 100d);\r\n    double actualDiff = absDiff(actual, other).doubleValue();\r\n    if (actualDiff > acceptableDiff || Double.isNaN(actualDiff) || Double.isInfinite(actualDiff))\r\n        throw failures.failure(info, shouldBeEqualWithinPercentage(actual, other, percentage, absDiff(actual, other)));\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,float[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalDateTimeAssert.areEqualIgnoringNanos",
	"Comment": "returns true if both datetime are in the same year, month and day of month, hour, minute and second, falseotherwise.",
	"Method": "boolean areEqualIgnoringNanos(LocalDateTime actual,LocalDateTime other){\r\n    return areEqualIgnoringSeconds(actual, other) && actual.getSecond() == other.getSecond();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.logging.structured.StructuredLog.timestampMillis",
	"Comment": "returns the timestamp in ms of the time that the request has been received.",
	"Method": "long timestampMillis(){\r\n    return timestampMillis;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractZonedDateTimeAssert.areEqualIgnoringMinutes",
	"Comment": "returns true if both datetime are in the same year, month, day of month and hour, false otherwise.",
	"Method": "boolean areEqualIgnoringMinutes(ZonedDateTime actual,ZonedDateTime other){\r\n    return haveSameYearMonthAndDayOfMonth(actual, other) && actual.getHour() == other.getHour();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.removeView",
	"Comment": "this method is not supported and throws an unsupportedoperationexception when called.",
	"Method": "void removeView(View child){\r\n    throw new UnsupportedOperationException(\"removeView(View) is not supported in AdapterView\");\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerBuilder.counterUpdateInterval",
	"Comment": "sets the interval that a circuit breaker can see the latest accumulated count of events.",
	"Method": "CircuitBreakerBuilder counterUpdateInterval(Duration counterUpdateInterval){\r\n    requireNonNull(counterUpdateInterval, \"counterUpdateInterval\");\r\n    if (counterUpdateInterval.isNegative() || counterUpdateInterval.isZero()) {\r\n        throw new IllegalArgumentException(\"counterUpdateInterval: \" + counterUpdateInterval + \" (expected: > 0)\");\r\n    }\r\n    this.counterUpdateInterval = counterUpdateInterval;\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.ActivityChooserModel.sortActivities",
	"Comment": "sorts the activities based on history and an intent. ifa sorter is not specified this a default implementation is used.",
	"Method": "void sortActivities(){\r\n    synchronized (mInstanceLock) {\r\n        if (mActivitySorter != null && !mActivites.isEmpty()) {\r\n            mActivitySorter.sort(mIntent, mActivites, Collections.unmodifiableList(mHistoricalRecords));\r\n            notifyChanged();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalDateTimeAssert.haveSameYearAndMonth",
	"Comment": "returns true if both datetime are in the same year and month, false otherwise.",
	"Method": "boolean haveSameYearAndMonth(LocalDateTime actual,LocalDateTime other){\r\n    return haveSameYear(actual, other) && actual.getMonth() == other.getMonth();\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,int[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.PageFlip.getSecondPage",
	"Comment": "get the second pagesecond page is only valid in double page mode, if it is null, that meansthere is only one page for whole screen whatever the screen is portraitor landscape",
	"Method": "Page getSecondPage(){\r\n    return mPages[SECOND_PAGE];\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.rememberSyncState",
	"Comment": "remember enough information to restore the screen state when the data haschanged.",
	"Method": "void rememberSyncState(){\r\n    if (getChildCount() > 0) {\r\n        mNeedSync = true;\r\n        mSyncHeight = mLayoutHeight;\r\n        if (mSelectedPosition >= 0) {\r\n            View v = getChildAt(mSelectedPosition - mFirstPosition);\r\n            mSyncRowId = mNextSelectedRowId;\r\n            mSyncPosition = mNextSelectedPosition;\r\n            if (v != null) {\r\n                mSpecificTop = v.getTop();\r\n            }\r\n            mSyncMode = SYNC_SELECTED_POSITION;\r\n        } else {\r\n            View v = getChildAt(0);\r\n            T adapter = getAdapter();\r\n            if (mFirstPosition >= 0 && mFirstPosition < adapter.getCount()) {\r\n                mSyncRowId = adapter.getItemId(mFirstPosition);\r\n            } else {\r\n                mSyncRowId = NO_ID;\r\n            }\r\n            mSyncPosition = mFirstPosition;\r\n            if (v != null) {\r\n                mSpecificTop = v.getTop();\r\n            }\r\n            mSyncMode = SYNC_FIRST_POSITION;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.agrona.collections.ObjectHashSetConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return SetTestSuiteBuilder.using(new Generator()).named(\"ObjectHashSet Tests\").withFeatures(CollectionSize.ANY, CollectionFeature.NON_STANDARD_TOSTRING, CollectionFeature.SUPPORTS_ADD, CollectionFeature.SUPPORTS_REMOVE, CollectionFeature.SUPPORTS_ITERATOR_REMOVE, CollectionFeature.REMOVE_OPERATIONS).createTestSuite();\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.PageFlip.computeVertexesOfFoldTopEdgeShadow",
	"Comment": "compute vertexes of fold top edge shadowtop edge shadow of fold page is a quarter circle",
	"Method": "void computeVertexesOfFoldTopEdgeShadow(float x0,float y0,float sinA,float cosA,float sx,float sy){\r\n    float sin2A = 2 * sinA * cosA;\r\n    float cos2A = (float) (1 - 2 * Math.pow(sinA, 2));\r\n    float r = 0;\r\n    float dr = (float) (Math.PI / (FOLD_TOP_EDGE_SHADOW_VEX_COUNT - 2));\r\n    int size = FOLD_TOP_EDGE_SHADOW_VEX_COUNT / 2;\r\n    int j = mFoldEdgesShadow.mMaxBackward;\r\n    for (int i = 0; i < size; ++i, r += dr, j += 8) {\r\n        float x = (float) (sx * Math.cos(r));\r\n        float y = (float) (sy * Math.sin(r));\r\n        mFoldEdgesShadow.setVertexes(j, x0, y0, x * cos2A + y * sin2A + x0, y * cos2A - x * sin2A + y0);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.selectDeckById",
	"Comment": "iterates the drop down decks, and selects the one matching the given id",
	"Method": "boolean selectDeckById(Long deckId){\r\n    for (int dropDownDeckIdx = 0; dropDownDeckIdx < mDropDownDecks.size(); dropDownDeckIdx++) {\r\n        try {\r\n            if (mDropDownDecks.get(dropDownDeckIdx).getLong(\"id\") == deckId) {\r\n                selectDropDownItem(dropDownDeckIdx + 1);\r\n                return true;\r\n            }\r\n        } catch (JSONException e) {\r\n            throw new RuntimeException();\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertIsInstanceOf",
	"Comment": "verifies that the given object is an instance of the given type.",
	"Method": "void assertIsInstanceOf(AssertionInfo info,Object actual,Class<?> type){\r\n    if (!isInstanceOfClass(actual, type, info))\r\n        throw failures.failure(info, shouldBeInstance(actual, type));\r\n}"
}, {
	"Path": "com.ichi2.libanki.Models.update",
	"Comment": "add or update an existing model. used for syncing and merging.",
	"Method": "void update(JSONObject m){\r\n    try {\r\n        mModels.put(m.getLong(\"id\"), m);\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    save();\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMap.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "com.spotify.apollo.example.CalculatorApp.exceptionMiddleware",
	"Comment": "a generic middleware that maps uncaught exceptions to error code 418",
	"Method": "Middleware<SyncHandler<Response<T>>, SyncHandler<Response<T>>> exceptionMiddleware(){\r\n    return handler -> requestContext -> {\r\n        try {\r\n            return handler.invoke(requestContext);\r\n        } catch (RuntimeException e) {\r\n            return Response.forStatus(Status.IM_A_TEAPOT);\r\n        }\r\n    };\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SuggestionsAdapter.hasStableIds",
	"Comment": "overridden to always return false, since we cannot be sure thatsuggestion sources return stable ids.",
	"Method": "boolean hasStableIds(){\r\n    return false;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.AbsActionBarView.setSplitWhenNarrow",
	"Comment": "sets whether the bar should split if we enter a narrow screen configuration.",
	"Method": "void setSplitWhenNarrow(boolean splitWhenNarrow){\r\n    mSplitWhenNarrow = splitWhenNarrow;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.ActivityChooserModel.setDefaultActivity",
	"Comment": "sets the default activity. the default activity is set by adding ahistorical record with weight high enough that this activity willbecome the highest ranked. such a strategy guarantees that the defaultwill eventually change if not used. also the weight of the record forsetting a default is inflated with a constant amount to guarantee thatit will stay as default for awhile.",
	"Method": "void setDefaultActivity(int index){\r\n    ActivityResolveInfo newDefaultActivity = mActivites.get(index);\r\n    ActivityResolveInfo oldDefaultActivity = mActivites.get(0);\r\n    final float weight;\r\n    if (oldDefaultActivity != null) {\r\n        weight = oldDefaultActivity.weight - newDefaultActivity.weight + DEFAULT_ACTIVITY_INFLATION;\r\n    } else {\r\n        weight = DEFAULT_HISTORICAL_RECORD_WEIGHT;\r\n    }\r\n    ComponentName defaultName = new ComponentName(newDefaultActivity.resolveInfo.activityInfo.packageName, newDefaultActivity.resolveInfo.activityInfo.name);\r\n    HistoricalRecord historicalRecord = new HistoricalRecord(defaultName, System.currentTimeMillis(), weight);\r\n    addHisoricalRecord(historicalRecord);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.removeUpdateListener",
	"Comment": "removes a listener from the set listening to frame updates for this animation.",
	"Method": "void removeUpdateListener(AnimatorUpdateListener listener){\r\n    if (mUpdateListeners == null) {\r\n        return;\r\n    }\r\n    mUpdateListeners.remove(listener);\r\n    if (mUpdateListeners.size() == 0) {\r\n        mUpdateListeners = null;\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.initLayout",
	"Comment": "set the content view to the one provided and initialize accessors.",
	"Method": "void initLayout(){\r\n    FrameLayout mCardContainer = (FrameLayout) findViewById(R.id.flashcard_frame);\r\n    mTopBarLayout = (RelativeLayout) findViewById(R.id.top_bar);\r\n    mCardFrame = (FrameLayout) findViewById(R.id.flashcard);\r\n    mTouchLayer = (FrameLayout) findViewById(R.id.touch_layer);\r\n    mTouchLayer.setOnTouchListener(mGestureListener);\r\n    if (!mDisableClipboard) {\r\n        mClipboard = (android.text.ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);\r\n    }\r\n    mCardFrame.removeAllViews();\r\n    gestureDetector = new GestureDetectorCompat(this, new MyGestureDetector());\r\n    mEase1 = (TextView) findViewById(R.id.ease1);\r\n    mEase1.setTypeface(TypefaceHelper.get(this, \"Roboto-Medium\"));\r\n    mEase1Layout = (LinearLayout) findViewById(R.id.flashcard_layout_ease1);\r\n    mEase1Layout.setOnClickListener(mSelectEaseHandler);\r\n    mEase2 = (TextView) findViewById(R.id.ease2);\r\n    mEase2.setTypeface(TypefaceHelper.get(this, \"Roboto-Medium\"));\r\n    mEase2Layout = (LinearLayout) findViewById(R.id.flashcard_layout_ease2);\r\n    mEase2Layout.setOnClickListener(mSelectEaseHandler);\r\n    mEase3 = (TextView) findViewById(R.id.ease3);\r\n    mEase3.setTypeface(TypefaceHelper.get(this, \"Roboto-Medium\"));\r\n    mEase3Layout = (LinearLayout) findViewById(R.id.flashcard_layout_ease3);\r\n    mEase3Layout.setOnClickListener(mSelectEaseHandler);\r\n    mEase4 = (TextView) findViewById(R.id.ease4);\r\n    mEase4.setTypeface(TypefaceHelper.get(this, \"Roboto-Medium\"));\r\n    mEase4Layout = (LinearLayout) findViewById(R.id.flashcard_layout_ease4);\r\n    mEase4Layout.setOnClickListener(mSelectEaseHandler);\r\n    mNext1 = (TextView) findViewById(R.id.nextTime1);\r\n    mNext2 = (TextView) findViewById(R.id.nextTime2);\r\n    mNext3 = (TextView) findViewById(R.id.nextTime3);\r\n    mNext4 = (TextView) findViewById(R.id.nextTime4);\r\n    mNext1.setTypeface(TypefaceHelper.get(this, \"Roboto-Regular\"));\r\n    mNext2.setTypeface(TypefaceHelper.get(this, \"Roboto-Regular\"));\r\n    mNext3.setTypeface(TypefaceHelper.get(this, \"Roboto-Regular\"));\r\n    mNext4.setTypeface(TypefaceHelper.get(this, \"Roboto-Regular\"));\r\n    if (!mShowNextReviewTime) {\r\n        mNext1.setVisibility(View.GONE);\r\n        mNext2.setVisibility(View.GONE);\r\n        mNext3.setVisibility(View.GONE);\r\n        mNext4.setVisibility(View.GONE);\r\n    }\r\n    Button mFlipCard = (Button) findViewById(R.id.flip_card);\r\n    mFlipCard.setTypeface(TypefaceHelper.get(this, \"Roboto-Medium\"));\r\n    mFlipCardLayout = (LinearLayout) findViewById(R.id.flashcard_layout_flip);\r\n    mFlipCardLayout.setOnClickListener(mFlipCardListener);\r\n    if (!mButtonHeightSet && mRelativeButtonSize != 100) {\r\n        ViewGroup.LayoutParams params = mFlipCardLayout.getLayoutParams();\r\n        params.height = params.height * mRelativeButtonSize / 100;\r\n        params = mEase1Layout.getLayoutParams();\r\n        params.height = params.height * mRelativeButtonSize / 100;\r\n        params = mEase2Layout.getLayoutParams();\r\n        params.height = params.height * mRelativeButtonSize / 100;\r\n        params = mEase3Layout.getLayoutParams();\r\n        params.height = params.height * mRelativeButtonSize / 100;\r\n        params = mEase4Layout.getLayoutParams();\r\n        params.height = params.height * mRelativeButtonSize / 100;\r\n        mButtonHeightSet = true;\r\n    }\r\n    mTextBarNew = (TextView) findViewById(R.id.new_number);\r\n    mTextBarLearn = (TextView) findViewById(R.id.learn_number);\r\n    mTextBarReview = (TextView) findViewById(R.id.review_number);\r\n    if (!mShowRemainingCardCount) {\r\n        mTextBarNew.setVisibility(View.GONE);\r\n        mTextBarLearn.setVisibility(View.GONE);\r\n        mTextBarReview.setVisibility(View.GONE);\r\n    }\r\n    mCardTimer = (Chronometer) findViewById(R.id.card_time);\r\n    mChosenAnswer = (TextView) findViewById(R.id.choosen_answer);\r\n    mAnswerField = (EditText) findViewById(R.id.answer_field);\r\n    mLookUpIcon = findViewById(R.id.lookup_button);\r\n    mLookUpIcon.setVisibility(View.GONE);\r\n    mLookUpIcon.setOnClickListener(new OnClickListener() {\r\n        @Override\r\n        public void onClick(View arg0) {\r\n            Timber.i(\"AbstractFlashcardViewer:: Lookup button pressed\");\r\n            if (clipboardHasText()) {\r\n                lookUp();\r\n            }\r\n        }\r\n    });\r\n    initControls();\r\n    String answerButtonsPosition = AnkiDroidApp.getSharedPrefs(this).getString(getString(R.string.answer_buttons_position_preference), \"bottom\");\r\n    LinearLayout answerArea = (LinearLayout) findViewById(R.id.bottom_area_layout);\r\n    RelativeLayout.LayoutParams answerAreaParams = (RelativeLayout.LayoutParams) answerArea.getLayoutParams();\r\n    RelativeLayout.LayoutParams cardContainerParams = (RelativeLayout.LayoutParams) mCardContainer.getLayoutParams();\r\n    switch(answerButtonsPosition) {\r\n        case \"top\":\r\n            cardContainerParams.addRule(RelativeLayout.BELOW, R.id.bottom_area_layout);\r\n            answerAreaParams.addRule(RelativeLayout.BELOW, R.id.top_bar);\r\n            answerArea.removeView(mAnswerField);\r\n            answerArea.addView(mAnswerField, 1);\r\n            break;\r\n        case \"bottom\":\r\n            cardContainerParams.addRule(RelativeLayout.ABOVE, R.id.bottom_area_layout);\r\n            cardContainerParams.addRule(RelativeLayout.BELOW, R.id.top_bar);\r\n            answerAreaParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);\r\n            break;\r\n        default:\r\n            Timber.w(\"Unknown answerButtonsPosition: %s\", answerButtonsPosition);\r\n            break;\r\n    }\r\n    answerArea.setLayoutParams(answerAreaParams);\r\n    mCardContainer.setLayoutParams(cardContainerParams);\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.initLayout",
	"Comment": "set the content view to the one provided and initialize accessors.",
	"Method": "void initLayout(){\r\n    Timber.i(\"AbstractFlashcardViewer:: Lookup button pressed\");\r\n    if (clipboardHasText()) {\r\n        lookUp();\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.MetaDB.resetLanguages",
	"Comment": "reset the language associations for all the decks and card models.",
	"Method": "boolean resetLanguages(Context context){\r\n    if (mMetaDb == null || !mMetaDb.isOpen()) {\r\n        openDB(context);\r\n    }\r\n    try {\r\n        Timber.i(\"MetaDB:: Resetting all language assignments\");\r\n        mMetaDb.execSQL(\"DROP TABLE IF EXISTS languages;\");\r\n        upgradeDB(mMetaDb, DATABASE_VERSION);\r\n        return true;\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"Error resetting MetaDB \");\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.agrona.collections.IntHashSet.capacity",
	"Comment": "get the total capacity for the set to which the load factor with be a fraction of.",
	"Method": "int capacity(){\r\n    return values.length;\r\n}"
}, {
	"Path": "com.actionbarsherlock.view.MenuInflater.parseMenu",
	"Comment": "called internally to fill the given menu. if a sub menu is seen, it willcall this recursively.",
	"Method": "void parseMenu(XmlPullParser parser,AttributeSet attrs,Menu menu){\r\n    MenuState menuState = new MenuState(menu);\r\n    int eventType = parser.getEventType();\r\n    String tagName;\r\n    boolean lookingForEndOfUnknownTag = false;\r\n    String unknownTagName = null;\r\n    do {\r\n        if (eventType == XmlPullParser.START_TAG) {\r\n            tagName = parser.getName();\r\n            if (tagName.equals(XML_MENU)) {\r\n                eventType = parser.next();\r\n                break;\r\n            }\r\n            throw new RuntimeException(\"Expecting menu, got \" + tagName);\r\n        }\r\n        eventType = parser.next();\r\n    } while (eventType != XmlPullParser.END_DOCUMENT);\r\n    boolean reachedEndOfMenu = false;\r\n    while (!reachedEndOfMenu) {\r\n        switch(eventType) {\r\n            case XmlPullParser.START_TAG:\r\n                if (lookingForEndOfUnknownTag) {\r\n                    break;\r\n                }\r\n                tagName = parser.getName();\r\n                if (tagName.equals(XML_GROUP)) {\r\n                    menuState.readGroup(attrs);\r\n                } else if (tagName.equals(XML_ITEM)) {\r\n                    menuState.readItem(attrs);\r\n                } else if (tagName.equals(XML_MENU)) {\r\n                    SubMenu subMenu = menuState.addSubMenuItem();\r\n                    parseMenu(parser, attrs, subMenu);\r\n                } else {\r\n                    lookingForEndOfUnknownTag = true;\r\n                    unknownTagName = tagName;\r\n                }\r\n                break;\r\n            case XmlPullParser.END_TAG:\r\n                tagName = parser.getName();\r\n                if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {\r\n                    lookingForEndOfUnknownTag = false;\r\n                    unknownTagName = null;\r\n                } else if (tagName.equals(XML_GROUP)) {\r\n                    menuState.resetGroup();\r\n                } else if (tagName.equals(XML_ITEM)) {\r\n                    if (!menuState.hasAddedItem()) {\r\n                        if (menuState.itemActionProvider != null && menuState.itemActionProvider.hasSubMenu()) {\r\n                            menuState.addSubMenuItem();\r\n                        } else {\r\n                            menuState.addItem();\r\n                        }\r\n                    }\r\n                } else if (tagName.equals(XML_MENU)) {\r\n                    reachedEndOfMenu = true;\r\n                }\r\n                break;\r\n            case XmlPullParser.END_DOCUMENT:\r\n                throw new RuntimeException(\"Unexpected end of document\");\r\n        }\r\n        eventType = parser.next();\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.ScrollingTabContainerView.isCollapsed",
	"Comment": "indicates whether this view is collapsed into a dropdown menu insteadof traditional tabs.",
	"Method": "boolean isCollapsed(){\r\n    return mTabSpinner != null && mTabSpinner.getParent() == this;\r\n}"
}, {
	"Path": "com.apollographql.apollo.gradle.CodegenGenerationTaskCommandArgsBuilder.illegalSchemasFound",
	"Comment": "checks whether a schema file share an ancestor directory that also contains a schema file",
	"Method": "boolean illegalSchemasFound(Collection<File> schemaFiles){\r\n    for (final File f : schemaFiles) {\r\n        final Path parent = Paths.get(f.getParent()).toAbsolutePath();\r\n        List<File> matches = FluentIterable.from(schemaFiles).filter(new Predicate<File>() {\r\n            @Override\r\n            public boolean apply(@Nullable File file) {\r\n                return file != null && file != f && Paths.get(file.getParent()).startsWith(parent);\r\n            }\r\n        }).toList();\r\n        if (!matches.isEmpty()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.apollographql.apollo.gradle.CodegenGenerationTaskCommandArgsBuilder.illegalSchemasFound",
	"Comment": "checks whether a schema file share an ancestor directory that also contains a schema file",
	"Method": "boolean illegalSchemasFound(Collection<File> schemaFiles){\r\n    return file != null && file != f && Paths.get(file.getParent()).startsWith(parent);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.grpc.GrpcClientTest.unimplementedMethod",
	"Comment": "sends an rpc to an unimplemented method within testservice.",
	"Method": "void unimplementedMethod(){\r\n    final Throwable t = catchThrowable(() -> blockingStub.unimplementedCall(Empty.getDefaultInstance()));\r\n    assertThat(t).isInstanceOf(StatusRuntimeException.class);\r\n    assertThat(((StatusRuntimeException) t).getStatus().getCode()).isEqualTo(Status.UNIMPLEMENTED.getCode());\r\n    checkRequestLogError((headers, rpcReq, cause) -> {\r\n        assertThat(rpcReq).isNotNull();\r\n        assertThat(rpcReq.params()).containsExactly(Empty.getDefaultInstance());\r\n        assertThat(headers.get(GrpcHeaderNames.GRPC_STATUS)).isEqualTo(String.valueOf(Status.UNIMPLEMENTED.getCode().value()));\r\n    });\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.streamingInputCall",
	"Comment": "waits until we have received all of the request messages and then returns the aggregate payloadsize for all of the received requests.",
	"Method": "StreamObserver<Messages.StreamingInputCallRequest> streamingInputCall(StreamObserver<Messages.StreamingInputCallResponse> responseObserver){\r\n    return new StreamObserver<StreamingInputCallRequest>() {\r\n        private int totalPayloadSize;\r\n        @Override\r\n        public void onNext(StreamingInputCallRequest message) {\r\n            totalPayloadSize += message.getPayload().getBody().size();\r\n        }\r\n        @Override\r\n        public void onCompleted() {\r\n            responseObserver.onNext(StreamingInputCallResponse.newBuilder().setAggregatedPayloadSize(totalPayloadSize).build());\r\n            responseObserver.onCompleted();\r\n        }\r\n        @Override\r\n        public void onError(Throwable cause) {\r\n            responseObserver.onError(cause);\r\n        }\r\n    };\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.streamingInputCall",
	"Comment": "waits until we have received all of the request messages and then returns the aggregate payloadsize for all of the received requests.",
	"Method": "StreamObserver<Messages.StreamingInputCallRequest> streamingInputCall(StreamObserver<Messages.StreamingInputCallResponse> responseObserver){\r\n    totalPayloadSize += message.getPayload().getBody().size();\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.streamingInputCall",
	"Comment": "waits until we have received all of the request messages and then returns the aggregate payloadsize for all of the received requests.",
	"Method": "StreamObserver<Messages.StreamingInputCallRequest> streamingInputCall(StreamObserver<Messages.StreamingInputCallResponse> responseObserver){\r\n    responseObserver.onNext(StreamingInputCallResponse.newBuilder().setAggregatedPayloadSize(totalPayloadSize).build());\r\n    responseObserver.onCompleted();\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.streamingInputCall",
	"Comment": "waits until we have received all of the request messages and then returns the aggregate payloadsize for all of the received requests.",
	"Method": "StreamObserver<Messages.StreamingInputCallRequest> streamingInputCall(StreamObserver<Messages.StreamingInputCallResponse> responseObserver){\r\n    responseObserver.onError(cause);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Utils.isIntentAvailable",
	"Comment": "indicates whether the specified action can be used as an intent. this method queries the package manager forinstalled packages that can respond to an intent with the specified action. if no suitable package is found, thismethod returns false.",
	"Method": "boolean isIntentAvailable(Context context,String action,boolean isIntentAvailable,Context context,String action,ComponentName componentName){\r\n    final PackageManager packageManager = context.getPackageManager();\r\n    final Intent intent = new Intent(action);\r\n    intent.setComponent(componentName);\r\n    List<ResolveInfo> list = packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);\r\n    return list.size() > 0;\r\n}"
}, {
	"Path": "com.ichi2.anki.reviewer.CustomFontsReviewerExt.getCustomFontsStyle",
	"Comment": "returns the css used to handle custom fonts.custom fonts live in fonts directory in the directory used to store decks.each font is mapped to the font family by the same name as the name of the font without the extension.",
	"Method": "String getCustomFontsStyle(Map<String, AnkiFont> customFontsMap){\r\n    StringBuilder builder = new StringBuilder();\r\n    for (AnkiFont font : customFontsMap.values()) {\r\n        builder.append(font.getDeclaration());\r\n        builder.append('\\n');\r\n    }\r\n    return builder.toString();\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    super.onCollectionLoaded(col);\r\n    Timber.d(\"onCollectionLoaded()\");\r\n    mDeckNames = new HashMap();\r\n    for (long did : getCol().getDecks().allIds()) {\r\n        mDeckNames.put(String.valueOf(did), getCol().getDecks().name(did));\r\n    }\r\n    registerExternalStorageListener();\r\n    SharedPreferences preferences = AnkiDroidApp.getSharedPrefs(getBaseContext());\r\n    mActionBarTitle = (TextView) findViewById(R.id.toolbar_title);\r\n    mDropDownDecks = getCol().getDecks().allSorted();\r\n    mDropDownAdapter = new DeckDropDownAdapter(this, mDropDownDecks);\r\n    ActionBar mActionBar = getSupportActionBar();\r\n    if (mActionBar != null) {\r\n        mActionBar.setDisplayShowTitleEnabled(false);\r\n    }\r\n    mActionBarSpinner = (Spinner) findViewById(R.id.toolbar_spinner);\r\n    mActionBarSpinner.setAdapter(mDropDownAdapter);\r\n    mActionBarSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n            selectDropDownItem(position);\r\n        }\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    mActionBarSpinner.setVisibility(View.VISIBLE);\r\n    try {\r\n        mOrder = CARD_ORDER_NONE;\r\n        String colOrder = getCol().getConf().getString(\"sortType\");\r\n        for (int c = 0; c < fSortTypes.length; ++c) {\r\n            if (fSortTypes[c].equals(colOrder)) {\r\n                mOrder = c;\r\n                break;\r\n            }\r\n        }\r\n        if (mOrder == 1 && preferences.getBoolean(\"cardBrowserNoSorting\", false)) {\r\n            mOrder = 0;\r\n        }\r\n        mOrderAsc = Upgrade.upgradeJSONIfNecessary(getCol(), getCol().getConf(), \"sortBackwards\", false);\r\n        if (fSortTypes[mOrder].equals(\"noteFld\")) {\r\n            mOrderAsc = !mOrderAsc;\r\n        }\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    mCards = new ArrayList();\r\n    mCardsListView = (ListView) findViewById(R.id.card_browser_list);\r\n    Spinner cardsColumn1Spinner = (Spinner) findViewById(R.id.browser_column1_spinner);\r\n    ArrayAdapter<CharSequence> column1Adapter = ArrayAdapter.createFromResource(this, R.array.browser_column1_headings, android.R.layout.simple_spinner_item);\r\n    column1Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    cardsColumn1Spinner.setAdapter(column1Adapter);\r\n    mColumn1Index = AnkiDroidApp.getSharedPrefs(getBaseContext()).getInt(\"cardBrowserColumn1\", 0);\r\n    cardsColumn1Spinner.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {\r\n            if (pos != mColumn1Index) {\r\n                mColumn1Index = pos;\r\n                AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit().putInt(\"cardBrowserColumn1\", mColumn1Index).commit();\r\n                String[] fromMap = mCardsAdapter.getFromMapping();\r\n                fromMap[0] = COLUMN1_KEYS[mColumn1Index];\r\n                mCardsAdapter.setFromMapping(fromMap);\r\n            }\r\n        }\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    mColumn2Index = AnkiDroidApp.getSharedPrefs(getBaseContext()).getInt(\"cardBrowserColumn2\", 0);\r\n    Spinner cardsColumn2Spinner = (Spinner) findViewById(R.id.browser_column2_spinner);\r\n    ArrayAdapter<CharSequence> column2Adapter = ArrayAdapter.createFromResource(this, R.array.browser_column2_headings, android.R.layout.simple_spinner_item);\r\n    column2Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    cardsColumn2Spinner.setAdapter(column2Adapter);\r\n    cardsColumn2Spinner.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {\r\n            if (pos != mColumn2Index) {\r\n                mColumn2Index = pos;\r\n                AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit().putInt(\"cardBrowserColumn2\", mColumn2Index).commit();\r\n                String[] fromMap = mCardsAdapter.getFromMapping();\r\n                fromMap[1] = COLUMN2_KEYS[mColumn2Index];\r\n                mCardsAdapter.setFromMapping(fromMap);\r\n            }\r\n        }\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    int sflRelativeFontSize = preferences.getInt(\"relativeCardBrowserFontSize\", DEFAULT_FONT_SIZE_RATIO);\r\n    String sflCustomFont = preferences.getString(\"browserEditorFont\", \"\");\r\n    mCardsAdapter = new MultiColumnListAdapter(this, R.layout.card_item_browser, new String[] { COLUMN1_KEYS[mColumn1Index], COLUMN2_KEYS[mColumn2Index] }, new int[] { R.id.card_sfld, R.id.card_column2 }, \"flags\", sflRelativeFontSize, sflCustomFont);\r\n    mCardsListView.setAdapter(mCardsAdapter);\r\n    mCardsListView.setOnScrollListener(new RenderOnScroll());\r\n    cardsColumn1Spinner.setSelection(mColumn1Index);\r\n    cardsColumn2Spinner.setSelection(mColumn2Index);\r\n    mCardsListView.setOnItemClickListener(new ListView.OnItemClickListener() {\r\n        @Override\r\n        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n            if (mInMultiSelectMode) {\r\n                CheckBox cb = (CheckBox) view.findViewById(R.id.card_checkbox);\r\n                cb.toggle();\r\n                onCheck(position, view);\r\n            } else {\r\n                mCurrentCardId = Long.parseLong(getCards().get(position).get(\"id\"));\r\n                sCardBrowserCard = getCol().getCard(mCurrentCardId);\r\n                Intent editCard = new Intent(CardBrowser.this, NoteEditor.class);\r\n                editCard.putExtra(NoteEditor.EXTRA_CALLER, NoteEditor.CALLER_CARDBROWSER_EDIT);\r\n                editCard.putExtra(NoteEditor.EXTRA_CARD_ID, sCardBrowserCard.getId());\r\n                startActivityForResultWithAnimation(editCard, EDIT_CARD, ActivityTransitionAnimation.LEFT);\r\n            }\r\n        }\r\n    });\r\n    mCardsListView.setOnItemLongClickListener(new ListView.OnItemLongClickListener() {\r\n        @Override\r\n        public boolean onItemLongClick(AdapterView<?> adapterView, View view, final int position, long id) {\r\n            mLastSelectedPosition = position;\r\n            loadMultiSelectMode();\r\n            CheckBox cb = (CheckBox) view.findViewById(R.id.card_checkbox);\r\n            cb.toggle();\r\n            onCheck(position, view);\r\n            recenterListView(view);\r\n            mCardsAdapter.notifyDataSetChanged();\r\n            return true;\r\n        }\r\n    });\r\n    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n    if (getLastDeckId() != null && getLastDeckId() == ALL_DECKS_ID) {\r\n        selectDropDownItem(0);\r\n    } else if (getLastDeckId() != null && getCol().getDecks().get(getLastDeckId(), false) != null) {\r\n        selectDeckById(getLastDeckId());\r\n    } else {\r\n        selectDeckById(getCol().getDecks().selected());\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    selectDropDownItem(position);\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    if (pos != mColumn1Index) {\r\n        mColumn1Index = pos;\r\n        AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit().putInt(\"cardBrowserColumn1\", mColumn1Index).commit();\r\n        String[] fromMap = mCardsAdapter.getFromMapping();\r\n        fromMap[0] = COLUMN1_KEYS[mColumn1Index];\r\n        mCardsAdapter.setFromMapping(fromMap);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    if (pos != mColumn2Index) {\r\n        mColumn2Index = pos;\r\n        AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit().putInt(\"cardBrowserColumn2\", mColumn2Index).commit();\r\n        String[] fromMap = mCardsAdapter.getFromMapping();\r\n        fromMap[1] = COLUMN2_KEYS[mColumn2Index];\r\n        mCardsAdapter.setFromMapping(fromMap);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    if (mInMultiSelectMode) {\r\n        CheckBox cb = (CheckBox) view.findViewById(R.id.card_checkbox);\r\n        cb.toggle();\r\n        onCheck(position, view);\r\n    } else {\r\n        mCurrentCardId = Long.parseLong(getCards().get(position).get(\"id\"));\r\n        sCardBrowserCard = getCol().getCard(mCurrentCardId);\r\n        Intent editCard = new Intent(CardBrowser.this, NoteEditor.class);\r\n        editCard.putExtra(NoteEditor.EXTRA_CALLER, NoteEditor.CALLER_CARDBROWSER_EDIT);\r\n        editCard.putExtra(NoteEditor.EXTRA_CARD_ID, sCardBrowserCard.getId());\r\n        startActivityForResultWithAnimation(editCard, EDIT_CARD, ActivityTransitionAnimation.LEFT);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    mLastSelectedPosition = position;\r\n    loadMultiSelectMode();\r\n    CheckBox cb = (CheckBox) view.findViewById(R.id.card_checkbox);\r\n    cb.toggle();\r\n    onCheck(position, view);\r\n    recenterListView(view);\r\n    mCardsAdapter.notifyDataSetChanged();\r\n    return true;\r\n}"
}, {
	"Path": "com.ichi2.anki.tests.ContentProviderTest.testInsertField",
	"Comment": "check that inserting and removing a note into default deck works as expected",
	"Method": "void testInsertField(){\r\n    final ContentResolver cr = InstrumentationRegistry.getInstrumentation().getTargetContext().getContentResolver();\r\n    Collection col = CollectionHelper.getInstance().getCol(InstrumentationRegistry.getInstrumentation().getTargetContext());\r\n    JSONObject model = Models.addBasicModel(col, BASIC_MODEL_NAME);\r\n    long modelId = model.getLong(\"id\");\r\n    JSONArray initialFldsArr = model.getJSONArray(\"flds\");\r\n    int initialFieldCount = initialFldsArr.length();\r\n    Uri noteTypeUri = ContentUris.withAppendedId(FlashCardsContract.Model.CONTENT_URI, modelId);\r\n    ContentValues insertFieldValues = new ContentValues();\r\n    insertFieldValues.put(FlashCardsContract.Model.FIELD_NAME, TEST_FIELD_NAME);\r\n    Uri fieldUri = cr.insert(Uri.withAppendedPath(noteTypeUri, \"fields\"), insertFieldValues);\r\n    assertNotNull(\"Check field uri\", fieldUri);\r\n    col = reopenCol();\r\n    model = col.getModels().get(modelId);\r\n    long fieldId = ContentUris.parseId(fieldUri);\r\n    assertEquals(\"Check field id\", initialFieldCount, fieldId);\r\n    JSONArray fldsArr = model.getJSONArray(\"flds\");\r\n    assertEquals(\"Check fields length\", initialFieldCount + 1, fldsArr.length());\r\n    assertEquals(\"Check last field name\", TEST_FIELD_NAME, fldsArr.getJSONObject(fldsArr.length() - 1).optString(\"name\", \"\"));\r\n    col.getModels().rem(model);\r\n}"
}, {
	"Path": "com.apollographql.apollo.api.internal.Utils.checkNotNull",
	"Comment": "checks if the object is null. returns the object if it is not null, else throws a nullpointerexception.",
	"Method": "T checkNotNull(T reference,Object errorMessage,T checkNotNull,T reference){\r\n    if (reference == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return reference;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints_customAuthority",
	"Comment": "when an endpoint has an ip address already, the health checker must send a health check request usingan ip address, because otherwise the health checker can send the health check request to a wrong hostif there are more than one ip addresses assigned to the host name.",
	"Method": "void endpoints_customAuthority(){\r\n    serverOne.start();\r\n    final int port = serverOne.port(protocol);\r\n    final HealthCheckedEndpointGroup endpointGroup = new HttpHealthCheckedEndpointGroupBuilder(new StaticEndpointGroup(Endpoint.of(\"foo\", port).withIpAddr(\"127.0.0.1\")), HEALTH_CHECK_PATH).protocol(protocol).clientFactory(clientFactory).build();\r\n    endpointGroup.newMeterBinder(\"qux\").bindTo(registry);\r\n    await().untilAsserted(() -> {\r\n        assertThat(endpointGroup.endpoints()).containsOnly(Endpoint.of(\"foo\", port).withIpAddr(\"127.0.0.1\"));\r\n        assertThat(MoreMeters.measureAll(registry)).containsEntry(\"armeria.client.endpointGroup.count#value{name=qux,state=healthy}\", 1.0).containsEntry(\"armeria.client.endpointGroup.count#value{name=qux,state=unhealthy}\", 0.0).containsEntry(\"armeria.client.endpointGroup.healthy#value\" + \"{authority=foo:\" + port + \",ip=127.0.0.1,name=qux}\", 1.0);\r\n    });\r\n}"
}, {
	"Path": "com.ichi2.libanki.Models.availOrds",
	"Comment": "given a joined field string, return available template ordinals",
	"Method": "ArrayList<Integer> availOrds(JSONObject m,String flds){\r\n    try {\r\n        if (m.getInt(\"type\") == Consts.MODEL_CLOZE) {\r\n            return _availClozeOrds(m, flds);\r\n        }\r\n        String[] fields = Utils.splitFields(flds);\r\n        for (String f : fields) {\r\n            f = f.trim();\r\n        }\r\n        ArrayList<Integer> avail = new ArrayList();\r\n        JSONArray reqArray = m.getJSONArray(\"req\");\r\n        for (int i = 0; i < reqArray.length(); i++) {\r\n            JSONArray sr = reqArray.getJSONArray(i);\r\n            int ord = sr.getInt(0);\r\n            String type = sr.getString(1);\r\n            JSONArray req = sr.getJSONArray(2);\r\n            if (\"none\".equals(type)) {\r\n                continue;\r\n            } else if (\"all\".equals(type)) {\r\n                boolean ok = true;\r\n                for (int j = 0; j < req.length(); j++) {\r\n                    int idx = req.getInt(j);\r\n                    if (fields[idx] == null || fields[idx].length() == 0) {\r\n                        ok = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    continue;\r\n                }\r\n            } else if (\"any\".equals(type)) {\r\n                boolean ok = false;\r\n                for (int j = 0; j < req.length(); j++) {\r\n                    int idx = req.getInt(j);\r\n                    if (fields[idx] != null && fields[idx].length() != 0) {\r\n                        ok = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    continue;\r\n                }\r\n            }\r\n            avail.add(ord);\r\n        }\r\n        return avail;\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.thrift.ThriftCallService.entries",
	"Comment": "returns the information about the thrift services being served.",
	"Method": "Map<String, ThriftServiceEntry> entries(){\r\n    return entries;\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,char[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.agrona.collections.IntHashSet.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "com.spotify.apollo.Response.header",
	"Comment": "a header of the request message, looked up in a case insensitive way,or empty if no header with that name is found.",
	"Method": "Optional<String> header(String name){\r\n    Objects.requireNonNull(name, \"Header names cannot be null\");\r\n    for (Map.Entry<String, String> headerEntry : headerEntries()) {\r\n        if (name.equalsIgnoreCase(headerEntry.getKey())) {\r\n            return Optional.ofNullable(headerEntry.getValue());\r\n        }\r\n    }\r\n    return Optional.empty();\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalDateTimeAssert.areEqualIgnoringSeconds",
	"Comment": "returns true if both datetime are in the same year, month, day of month, hour and minute, false otherwise.",
	"Method": "boolean areEqualIgnoringSeconds(LocalDateTime actual,LocalDateTime other){\r\n    return areEqualIgnoringMinutes(actual, other) && actual.getMinute() == other.getMinute();\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.CountersManager.allocate",
	"Comment": "allocate a counter with the minimum of allocation by allowing the label an key to be provided and copied.if the keybuffer is null then a copy of the key is not attempted.",
	"Method": "int allocate(String label,int allocate,String label,int typeId,int allocate,String label,int typeId,Consumer<MutableDirectBuffer> keyFunc,int allocate,int typeId,DirectBuffer keyBuffer,int keyOffset,int keyLength,DirectBuffer labelBuffer,int labelOffset,int labelLength){\r\n    final int counterId = nextCounterId();\r\n    checkCountersCapacity(counterId);\r\n    final int recordOffset = metaDataOffset(counterId);\r\n    checkMetaDataCapacity(recordOffset);\r\n    try {\r\n        metaDataBuffer.putInt(recordOffset + TYPE_ID_OFFSET, typeId);\r\n        metaDataBuffer.putLong(recordOffset + FREE_FOR_REUSE_DEADLINE_OFFSET, NOT_FREE_TO_REUSE);\r\n        if (null != keyBuffer) {\r\n            final int length = Math.min(keyLength, MAX_KEY_LENGTH);\r\n            metaDataBuffer.putBytes(recordOffset + KEY_OFFSET, keyBuffer, keyOffset, length);\r\n        }\r\n        final int length = Math.min(labelLength, MAX_LABEL_LENGTH);\r\n        metaDataBuffer.putInt(recordOffset + LABEL_OFFSET, length);\r\n        metaDataBuffer.putBytes(recordOffset + LABEL_OFFSET + SIZE_OF_INT, labelBuffer, labelOffset, length);\r\n        metaDataBuffer.putIntOrdered(recordOffset, RECORD_ALLOCATED);\r\n    } catch (final Exception ex) {\r\n        freeList.pushInt(counterId);\r\n        LangUtil.rethrowUnchecked(ex);\r\n    }\r\n    return counterId;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertContainsOnlyOnce",
	"Comment": "asserts that the given array contains only once the given values.",
	"Method": "void assertContainsOnlyOnce(AssertionInfo info,short[] actual,short[] values){\r\n    arrays.assertContainsOnlyOnce(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.circuitbreaker.SlidingWindowCounter.trimAndSum",
	"Comment": "sums up buckets within the time window, and removes all the others.",
	"Method": "EventCount trimAndSum(long tickerNanos){\r\n    final long oldLimit = tickerNanos - slidingWindowNanos;\r\n    final Iterator<Bucket> iterator = reservoir.iterator();\r\n    long success = 0;\r\n    long failure = 0;\r\n    while (iterator.hasNext()) {\r\n        final Bucket bucket = iterator.next();\r\n        if (bucket.timestamp < oldLimit) {\r\n            iterator.remove();\r\n        } else {\r\n            success += bucket.success();\r\n            failure += bucket.failure();\r\n        }\r\n    }\r\n    return new EventCount(success, failure);\r\n}"
}, {
	"Path": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.getRequestConverters",
	"Comment": "returns the request converters of the annotated service object.",
	"Method": "Collection<? extends RequestConverterFunction> getRequestConverters(){\r\n    return requestConverters;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.createVoiceAppSearchIntent",
	"Comment": "create and return an intent that can launch the voice search activity, perform a specificvoice transcription, and forward the results to the searchable activity.",
	"Method": "Intent createVoiceAppSearchIntent(Intent baseIntent,SearchableInfo searchable){\r\n    ComponentName searchActivity = searchable.getSearchActivity();\r\n    Intent queryIntent = new Intent(Intent.ACTION_SEARCH);\r\n    queryIntent.setComponent(searchActivity);\r\n    PendingIntent pending = PendingIntent.getActivity(getContext(), 0, queryIntent, PendingIntent.FLAG_ONE_SHOT);\r\n    Bundle queryExtras = new Bundle();\r\n    Intent voiceIntent = new Intent(baseIntent);\r\n    String languageModel = RecognizerIntent.LANGUAGE_MODEL_FREE_FORM;\r\n    String prompt = null;\r\n    String language = null;\r\n    int maxResults = 1;\r\n    Resources resources = getResources();\r\n    if (searchable.getVoiceLanguageModeId() != 0) {\r\n        languageModel = resources.getString(searchable.getVoiceLanguageModeId());\r\n    }\r\n    if (searchable.getVoicePromptTextId() != 0) {\r\n        prompt = resources.getString(searchable.getVoicePromptTextId());\r\n    }\r\n    if (searchable.getVoiceLanguageId() != 0) {\r\n        language = resources.getString(searchable.getVoiceLanguageId());\r\n    }\r\n    if (searchable.getVoiceMaxResults() != 0) {\r\n        maxResults = searchable.getVoiceMaxResults();\r\n    }\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, languageModel);\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_PROMPT, prompt);\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, language);\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, maxResults);\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null : searchActivity.flattenToShortString());\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_RESULTS_PENDINGINTENT, pending);\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_RESULTS_PENDINGINTENT_BUNDLE, queryExtras);\r\n    return voiceIntent;\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertContainsOnlyOnce",
	"Comment": "asserts that the given array contains only once the given values.",
	"Method": "void assertContainsOnlyOnce(AssertionInfo info,int[] actual,int[] values){\r\n    arrays.assertContainsOnlyOnce(info, failures, actual, values);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameMonth",
	"Comment": "returns true if both date are in the same year and month, false otherwise.",
	"Method": "boolean areInSameMonth(Date actual,Date other){\r\n    return areInSameYear(actual, other) && monthOf(actual) == monthOf(other);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.isItemInArray",
	"Comment": "returns true if given item is in given array, false otherwise.",
	"Method": "boolean isItemInArray(Object item,Object[] arrayOfValues){\r\n    for (Object value : arrayOfValues) {\r\n        if (areEqual(value, item))\r\n            return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.setOnQueryTextFocusChangeListener",
	"Comment": "sets a listener to inform when the focus of the query text field changes.",
	"Method": "void setOnQueryTextFocusChangeListener(OnFocusChangeListener listener){\r\n    mOnQueryTextFocusChangeListener = listener;\r\n}"
}, {
	"Path": "com.eschao.android.widget.sample.pageflip.SinglePageRender.onEndedDrawing",
	"Comment": "handle ended drawing eventin here, we only tackle the animation drawing event, if we need tocontinue requesting render, please return true. remember this functionwill be called in main thread",
	"Method": "boolean onEndedDrawing(int what){\r\n    if (what == DRAW_ANIMATING_FRAME) {\r\n        boolean isAnimating = mPageFlip.animating();\r\n        if (isAnimating) {\r\n            mDrawCommand = DRAW_ANIMATING_FRAME;\r\n            return true;\r\n        } else {\r\n            final PageFlipState state = mPageFlip.getFlipState();\r\n            if (state == PageFlipState.END_WITH_BACKWARD) {\r\n            } else if (state == PageFlipState.END_WITH_FORWARD) {\r\n                mPageFlip.getFirstPage().setFirstTextureWithSecond();\r\n                mPageNo++;\r\n            }\r\n            mDrawCommand = DRAW_FULL_PAGE;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMap.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.view.menu.MenuBuilder.getOrdering",
	"Comment": "returns the ordering across all items. this will grab the category fromthe upper bits, find out how to order the category with respect to othercategories, and combine it with the lower bits.",
	"Method": "int getOrdering(int categoryOrder){\r\n    final int index = (categoryOrder & CATEGORY_MASK) >> CATEGORY_SHIFT;\r\n    if (index < 0 || index >= sCategoryToOrder.length) {\r\n        throw new IllegalArgumentException(\"order does not contain a valid category.\");\r\n    }\r\n    return (sCategoryToOrder[index] << CATEGORY_SHIFT) | (categoryOrder & USER_MASK);\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMap.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,float[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.areEqualIgnoringSeconds",
	"Comment": "returns true if both offsetdatetime are in the same year, month, day of month, hour and minute, false otherwise.",
	"Method": "boolean areEqualIgnoringSeconds(OffsetDateTime actual,OffsetDateTime other){\r\n    return areEqualIgnoringMinutes(actual, other) && actual.getMinute() == other.getMinute();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlIdentityProviderConfigBuilder.acsEndpoint",
	"Comment": "sets an assertion consumer service url of this service provider.",
	"Method": "SamlEndpoint acsEndpoint(SamlIdentityProviderConfigBuilder acsEndpoint,SamlEndpoint acsEndpoint){\r\n    this.acsEndpoint = requireNonNull(acsEndpoint, \"acsEndpoint\");\r\n    return this;\r\n}"
}, {
	"Path": "com.ichi2.anki.DeckPicker.showSyncLogMessage",
	"Comment": "show a simple snackbar message or notification if the activity is not in foreground",
	"Method": "void showSyncLogMessage(int messageResource,String syncMessage){\r\n    if (mActivityPaused) {\r\n        Resources res = AnkiDroidApp.getAppResources();\r\n        showSimpleNotification(res.getString(R.string.app_name), res.getString(messageResource), NotificationChannels.Channel.SYNC);\r\n    } else {\r\n        if (syncMessage == null || syncMessage.length() == 0) {\r\n            UIUtils.showSimpleSnackbar(this, messageResource, false);\r\n        } else {\r\n            Resources res = AnkiDroidApp.getAppResources();\r\n            showSimpleMessageDialog(res.getString(messageResource), syncMessage, false);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.getAndAddOrdered",
	"Comment": "add an increment to the counter with ordered store semantics.",
	"Method": "long getAndAddOrdered(long increment){\r\n    final long currentValue = UnsafeAccess.UNSAFE.getLong(byteArray, addressOffset);\r\n    UnsafeAccess.UNSAFE.putOrderedLong(byteArray, addressOffset, currentValue + increment);\r\n    return currentValue;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.MediaType.withParameters",
	"Comment": "replaces all parameters with the given attribute with parameters using the givenvalues. if there are no values, any existing parameters with the given attribute areremoved.",
	"Method": "MediaType withParameters(Map<String, ? extends Iterable<String>> parameters,MediaType withParameters,String attribute,Iterable<String> values){\r\n    checkNotNull(attribute);\r\n    checkNotNull(values);\r\n    String normalizedAttribute = normalizeToken(attribute);\r\n    ImmutableListMultimap.Builder<String, String> builder = ImmutableListMultimap.builder();\r\n    for (Entry<String, String> entry : parameters.entries()) {\r\n        String key = entry.getKey();\r\n        if (!normalizedAttribute.equals(key)) {\r\n            builder.put(key, entry.getValue());\r\n        }\r\n    }\r\n    for (String value : values) {\r\n        builder.put(normalizedAttribute, normalizeParameterValue(normalizedAttribute, value));\r\n    }\r\n    MediaType mediaType = new MediaType(type, subtype, builder.build());\r\n    if (!normalizedAttribute.equals(CHARSET_ATTRIBUTE)) {\r\n        mediaType.parsedCharset = parsedCharset;\r\n    }\r\n    return MoreObjects.firstNonNull(KNOWN_TYPES.get(mediaType), mediaType);\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,int[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetTimeAssert.areEqualIgnoringTimezone",
	"Comment": "returns true if both offsettime are in the same hour, minute, second and nanosecond false otherwise.",
	"Method": "boolean areEqualIgnoringTimezone(OffsetTime actual,OffsetTime other){\r\n    return areEqualIgnoringNanos(actual, other) && haveSameNano(actual, other);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.tileify",
	"Comment": "converts a drawable to a tiled version of itself. it will recursivelytraverse layer and state list drawables.",
	"Method": "Drawable tileify(Drawable drawable,boolean clip){\r\n    if (drawable instanceof LayerDrawable) {\r\n        LayerDrawable background = (LayerDrawable) drawable;\r\n        final int N = background.getNumberOfLayers();\r\n        Drawable[] outDrawables = new Drawable[N];\r\n        for (int i = 0; i < N; i++) {\r\n            int id = background.getId(i);\r\n            outDrawables[i] = tileify(background.getDrawable(i), (id == android.R.id.progress || id == android.R.id.secondaryProgress));\r\n        }\r\n        LayerDrawable newBg = new LayerDrawable(outDrawables);\r\n        for (int i = 0; i < N; i++) {\r\n            newBg.setId(i, background.getId(i));\r\n        }\r\n        return newBg;\r\n    } else if (drawable instanceof BitmapDrawable) {\r\n        final Bitmap tileBitmap = ((BitmapDrawable) drawable).getBitmap();\r\n        if (mSampleTile == null) {\r\n            mSampleTile = tileBitmap;\r\n        }\r\n        final ShapeDrawable shapeDrawable = new ShapeDrawable(getDrawableShape());\r\n        final BitmapShader bitmapShader = new BitmapShader(tileBitmap, Shader.TileMode.REPEAT, Shader.TileMode.CLAMP);\r\n        shapeDrawable.getPaint().setShader(bitmapShader);\r\n        return (clip) ? new ClipDrawable(shapeDrawable, Gravity.LEFT, ClipDrawable.HORIZONTAL) : shapeDrawable;\r\n    }\r\n    return drawable;\r\n}"
}, {
	"Path": "com.ichi2.anki.FieldEditText.setDupeStyle",
	"Comment": "modify the style of this view to represent a duplicate field.",
	"Method": "void setDupeStyle(){\r\n    setBackgroundColor(Themes.getColorFromAttr(getContext(), R.attr.duplicateColor));\r\n}"
}, {
	"Path": "org.agrona.concurrent.broadcast.BroadcastReceiver.buffer",
	"Comment": "the underlying buffer containing the broadcast message stream.",
	"Method": "MutableDirectBuffer buffer(){\r\n    return buffer;\r\n}"
}, {
	"Path": "org.assertj.core.util.diff.myers.PathNode.isBootstrap",
	"Comment": "is this a bootstrap node?in bootstrap nodes one of the two coordinates isless than zero.",
	"Method": "boolean isBootstrap(){\r\n    return i < 0 || j < 0;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of values, without any other values between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,short[] actual,short[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.PathMappingResult.hasHighestScore",
	"Comment": "returns whether the score of this result is the highest or not.",
	"Method": "boolean hasHighestScore(){\r\n    return HIGHEST_SCORE == score();\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,short[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,short[] actual,short[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlServiceProviderBuilder.sloEndpoint",
	"Comment": "adds a new single logout service endpoint of this service provider.",
	"Method": "SamlServiceProviderBuilder sloEndpoint(SamlEndpoint sloEndpoint){\r\n    sloEndpoints.add(requireNonNull(sloEndpoint, \"sloEndpoint\"));\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,double[] actual,double[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "org.agrona.collections.Long2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Long, Long>() {\r\n        public Long[] createKeyArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public Long[] createValueArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public SampleElements<Map.Entry<Long, Long>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n        }\r\n        public Map<Long, Long> create(final Object... entries) {\r\n            final Long2NullableObjectHashMap<Long> map = new Long2NullableObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Long, Long>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Long, Long>> order(final List<Map.Entry<Long, Long>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Long2NullableObjectHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Long2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n}"
}, {
	"Path": "org.agrona.collections.Long2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Long2NullableObjectHashMap<Long> map = new Long2NullableObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Long2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.thrift.text.BaseContext.getClassByFieldName",
	"Comment": "returns the java class for the field name if it is an enum or a struct,or null otherwise.",
	"Method": "Class<?> getClassByFieldName(String fieldName){\r\n    return null;\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of values, without any other values between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,int[] actual,int[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Maps.assertDoesNotContainKeys",
	"Comment": "verifies that the actual map not contains all the given keys.",
	"Method": "void assertDoesNotContainKeys(AssertionInfo info,Map<K, V> actual,K keys){\r\n    assertNotNull(info, actual);\r\n    Set<K> found = new LinkedHashSet();\r\n    for (K key : keys) {\r\n        if (key != null && actual.containsKey(key)) {\r\n            found.add(key);\r\n        }\r\n    }\r\n    if (!found.isEmpty())\r\n        throw failures.failure(info, shouldNotContainKeys(actual, found));\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,float[] actual,float[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.ichi2.anki.tests.ContentProviderTest.testInsertAndRemoveNote",
	"Comment": "check that inserting and removing a note into default deck works as expected",
	"Method": "void testInsertAndRemoveNote(){\r\n    final ContentResolver cr = InstrumentationRegistry.getInstrumentation().getTargetContext().getContentResolver();\r\n    ContentValues values = new ContentValues();\r\n    values.put(FlashCardsContract.Note.MID, mModelId);\r\n    values.put(FlashCardsContract.Note.FLDS, Utils.joinFields(TEST_NOTE_FIELDS));\r\n    values.put(FlashCardsContract.Note.TAGS, TEST_TAG);\r\n    Uri newNoteUri = cr.insert(FlashCardsContract.Note.CONTENT_URI, values);\r\n    assertNotNull(\"Check that URI returned from addNewNote is not null\", newNoteUri);\r\n    final Collection col = reopenCol();\r\n    Note addedNote = new Note(col, Long.parseLong(newNoteUri.getLastPathSegment()));\r\n    addedNote.load();\r\n    assertTrue(\"Check that fields were set correctly\", Arrays.equals(addedNote.getFields(), TEST_NOTE_FIELDS));\r\n    assertEquals(\"Check that tag was set correctly\", TEST_TAG, addedNote.getTags().get(0));\r\n    int expectedNumCards = col.getModels().get(mModelId).getJSONArray(\"tmpls\").length();\r\n    assertEquals(\"Check that correct number of cards generated\", expectedNumCards, addedNote.cards().size());\r\n    cr.delete(newNoteUri, null, null);\r\n    try {\r\n        addedNote.load();\r\n        fail(\"Expected RuntimeException to be thrown when deleting note\");\r\n    } catch (RuntimeException e) {\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.TypeSignature.ofContainer",
	"Comment": "creates a new container type with the specified container type name and the type signatures of theelements it contains.",
	"Method": "TypeSignature ofContainer(String containerTypeName,TypeSignature elementTypeSignatures,TypeSignature ofContainer,String containerTypeName,Iterable<TypeSignature> elementTypeSignatures){\r\n    checkBaseTypeName(containerTypeName, \"containerTypeName\");\r\n    requireNonNull(elementTypeSignatures, \"elementTypeSignatures\");\r\n    final List<TypeSignature> elementTypeSignaturesCopy = ImmutableList.copyOf(elementTypeSignatures);\r\n    checkArgument(!elementTypeSignaturesCopy.isEmpty(), \"elementTypeSignatures is empty.\");\r\n    return new TypeSignature(containerTypeName, elementTypeSignaturesCopy);\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.MediaType.toString",
	"Comment": "returns the string representation of this media type in the format described in rfc 2045.",
	"Method": "String toString(){\r\n    String result = toString;\r\n    if (result == null) {\r\n        result = computeToString();\r\n        toString = result;\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setResponseConverters",
	"Comment": "sets the response converters of the annotated service object.",
	"Method": "AnnotatedServiceRegistrationBean setResponseConverters(Collection<? extends ResponseConverterFunction> responseConverters,AnnotatedServiceRegistrationBean setResponseConverters,ResponseConverterFunction responseConverters){\r\n    return setResponseConverters(ImmutableList.copyOf(responseConverters));\r\n}"
}, {
	"Path": "com.ichi2.utils.MethodLogger.logInternal",
	"Comment": "logs the method that made the call.a helper method is needed to make sure the number of stack frames is the same on every path.",
	"Method": "void logInternal(String message){\r\n    StackTraceElement[] stack = Thread.currentThread().getStackTrace();\r\n    int size = stack.length;\r\n    int logInternalIndex = 0;\r\n    for (; logInternalIndex < size; ++logInternalIndex) {\r\n        if (TextUtils.equals(stack[logInternalIndex].getClassName(), MethodLogger.class.getName()) && TextUtils.equals(stack[logInternalIndex].getMethodName(), \"logInternal\")) {\r\n            break;\r\n        }\r\n    }\r\n    if (logInternalIndex + 2 >= size) {\r\n        throw new IllegalStateException(\"there should always be a caller for this method\");\r\n    }\r\n    StackTraceElement caller = stack[logInternalIndex + 2];\r\n    String callerClass = caller.getClassName();\r\n    String callerMethod = caller.getMethodName();\r\n    if (TextUtils.isEmpty(message)) {\r\n        Timber.d(\"called: %s.%s()\", callerClass, callerMethod);\r\n    } else {\r\n        Timber.d(\"called: %s.%s(): %s\", callerClass, callerMethod, message);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameHour",
	"Comment": "returns true if both date are in the same year, month, day of month and hour, false otherwise.",
	"Method": "boolean areInSameHour(Date actual,Date other){\r\n    return areInSameDayOfMonth(actual, other) && hourOfDayOf(actual) == hourOfDayOf(other);\r\n}"
}, {
	"Path": "org.agrona.io.DirectBufferOutputStream.position",
	"Comment": "the position in the buffer from the offset up to which has been written.",
	"Method": "int position(){\r\n    return position;\r\n}"
}, {
	"Path": "com.ichi2.anki.api.NoteInfo.buildFromCursor",
	"Comment": "static initializer method to build a noteinfo object from a cursor",
	"Method": "NoteInfo buildFromCursor(Cursor cursor){\r\n    try {\r\n        int idIndex = cursor.getColumnIndexOrThrow(FlashCardsContract.Note._ID);\r\n        int fldsIndex = cursor.getColumnIndexOrThrow(FlashCardsContract.Note.FLDS);\r\n        int tagsIndex = cursor.getColumnIndexOrThrow(FlashCardsContract.Note.TAGS);\r\n        String[] fields = Utils.splitFields(cursor.getString(fldsIndex));\r\n        long id = cursor.getLong(idIndex);\r\n        Set<String> tags = new HashSet(Arrays.asList(Utils.splitTags(cursor.getString(tagsIndex))));\r\n        return new NoteInfo(id, fields, tags);\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractZonedDateTimeAssert.haveSameYearMonthAndDayOfMonth",
	"Comment": "returns true if both datetime are in the same year, month and day of month, false otherwise.",
	"Method": "boolean haveSameYearMonthAndDayOfMonth(ZonedDateTime actual,ZonedDateTime other){\r\n    return haveSameYearAndMonth(actual, other) && actual.getDayOfMonth() == other.getDayOfMonth();\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.getAndAdd",
	"Comment": "add an increment to the counter that will not lose updates across threads.",
	"Method": "long getAndAdd(long increment){\r\n    return UnsafeAccess.UNSAFE.getAndAddLong(byteArray, addressOffset, increment);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.DocServicePlugin.guessServiceMethodName",
	"Comment": "guesses the name of the service method who handles the specified example request.",
	"Method": "Optional<String> guessServiceMethodName(Object exampleRequest){\r\n    return Optional.empty();\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,char[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.cleanCorrectAnswer",
	"Comment": "clean up the correct answer text, so it can be used for the comparison with the typed text",
	"Method": "String cleanCorrectAnswer(String answer){\r\n    if (answer == null || answer.equals(\"\")) {\r\n        return \"\";\r\n    }\r\n    Matcher matcher = sSpanPattern.matcher(Utils.stripHTMLMedia(answer.trim()));\r\n    String answerText = matcher.replaceAll(\"\");\r\n    matcher = sBrPattern.matcher(answerText);\r\n    answerText = matcher.replaceAll(\"\\n\");\r\n    matcher = Sound.sSoundPattern.matcher(answerText);\r\n    answerText = matcher.replaceAll(\"\");\r\n    return Utils.nfcNormalized(answerText);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertHasSameHashCodeAs",
	"Comment": "asserts that the actual object has the same hashcode as the given object.",
	"Method": "void assertHasSameHashCodeAs(AssertionInfo info,A actual,Object other){\r\n    assertNotNull(info, actual);\r\n    checkNotNull(other, \"The object used to compare actual's hash code with should not be null\");\r\n    if (actual.hashCode() != other.hashCode())\r\n        throw failures.failure(info, shouldHaveSameHashCode(actual, other));\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameSecondWindow",
	"Comment": "returns true if both date are in the same year, month and day of month, hour, minute and second, false otherwise.",
	"Method": "boolean areInSameSecondWindow(Date actual,Date other){\r\n    return timeDifference(actual, other) < TimeUnit.SECONDS.toMillis(1);\r\n}"
}, {
	"Path": "com.spotify.apollo.example.ArtistResource.parseFirstArtistId",
	"Comment": "parses the first artist id from a json response from aspotify api search query.",
	"Method": "String parseFirstArtistId(String json){\r\n    try {\r\n        JsonNode jsonNode = this.objectMapper.readTree(json);\r\n        for (JsonNode node : jsonNode.get(\"artists\").get(\"items\")) {\r\n            return node.get(\"id\").asText();\r\n        }\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(\"Failed to parse JSON\", e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.compareAndSet",
	"Comment": "compare the current value to expected and if true then set to the update value atomically.",
	"Method": "boolean compareAndSet(long expectedValue,long updateValue){\r\n    return UnsafeAccess.UNSAFE.compareAndSwapLong(byteArray, addressOffset, expectedValue, updateValue);\r\n}"
}, {
	"Path": "org.agrona.collections.Long2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Long, Long>() {\r\n        public Long[] createKeyArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public Long[] createValueArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public SampleElements<Map.Entry<Long, Long>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n        }\r\n        public Map<Long, Long> create(final Object... entries) {\r\n            final Long2LongHashMap map = new Long2LongHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1L, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Long, Long>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Long, Long>> order(final List<Map.Entry<Long, Long>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Long2LongHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Long2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n}"
}, {
	"Path": "org.agrona.collections.Long2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Long2LongHashMap map = new Long2LongHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1L, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Long2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,float[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.renameModelDialog",
	"Comment": "displays a confirmation box asking if you want to rename the note type and then renames it if confirmed",
	"Method": "void renameModelDialog(){\r\n    try {\r\n        mModelNameInput = new EditText(this);\r\n        mModelNameInput.setSingleLine(true);\r\n        mModelNameInput.setText(mModels.get(mModelListPosition).getString(\"name\"));\r\n        mModelNameInput.setSelection(mModelNameInput.getText().length());\r\n        new MaterialDialog.Builder(this).title(R.string.rename_model).positiveText(R.string.rename).negativeText(R.string.dialog_cancel).customView(mModelNameInput, true).onPositive((dialog, which) -> {\r\n            JSONObject model = mModels.get(mModelListPosition);\r\n            String deckName = mModelNameInput.getText().toString().replaceAll(\"[\\'\\\"\\\\n\\\\r\\\\[\\\\]\\\\(\\\\)]\", \"\");\r\n            getCol().getDecks().id(deckName, false);\r\n            if (deckName.length() > 0) {\r\n                try {\r\n                    model.put(\"name\", deckName);\r\n                    col.getModels().update(model);\r\n                    mModels.get(mModelListPosition).put(\"name\", deckName);\r\n                    mModelDisplayList.set(mModelListPosition, new DisplayPair(mModels.get(mModelListPosition).getString(\"name\"), mCardCounts.get(mModelListPosition)));\r\n                } catch (JSONException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n                refreshList();\r\n            } else {\r\n                showToast(getResources().getString(R.string.toast_empty_name));\r\n            }\r\n        }).show();\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.thrift.THttpService.entries",
	"Comment": "returns the information about the thrift services being served.",
	"Method": "Map<String, ThriftServiceEntry> entries(){\r\n    return thriftService.entries();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.ServiceSpecification.exampleHttpHeaders",
	"Comment": "returns the example http headers of the services in this specification.",
	"Method": "List<HttpHeaders> exampleHttpHeaders(){\r\n    return exampleHttpHeaders;\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,float[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,long[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "com.ichi2.preferences.NumberRangePreference.getValidatedRangeFromInt",
	"Comment": "return the integer rounded to the nearest bound if it is outside of the acceptable range.",
	"Method": "int getValidatedRangeFromInt(int input){\r\n    if (input < mMin) {\r\n        input = mMin;\r\n    } else if (input > mMax) {\r\n        input = mMax;\r\n    }\r\n    return input;\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.createfieldLabels",
	"Comment": "sets up the main listview and arrayadapterscontaining clickable labels for the fields",
	"Method": "void createfieldLabels(){\r\n    ArrayAdapter<String> mFieldLabelAdapter = new ArrayAdapter(this, R.layout.model_field_editor_list_item, mFieldLabels);\r\n    mFieldLabelView.setAdapter(mFieldLabelAdapter);\r\n    mFieldLabelView.setOnItemClickListener((parent, view, position, id) -> {\r\n        mContextMenu = ModelEditorContextMenu.newInstance(mFieldLabels.get(position), mContextMenuListener);\r\n        showDialogFragment(mContextMenu);\r\n        mCurrentPos = position;\r\n    });\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.getEmptyView",
	"Comment": "when the current adapter is empty, the adapterview can display a special viewcall the empty view. the empty view is used to provide feedback to the userthat no data is available in this adapterview.",
	"Method": "View getEmptyView(){\r\n    return mEmptyView;\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.clipboardGetText",
	"Comment": "returns the text stored in the clipboard or the empty string if the clipboard is empty or contains something thatcannot be convered to text.",
	"Method": "CharSequence clipboardGetText(){\r\n    CharSequence text = mClipboard != null ? mClipboard.getText() : null;\r\n    return text != null ? text : \"\";\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.EnumValueInfo.docString",
	"Comment": "returns the documentation string that describes the enum value.",
	"Method": "String docString(){\r\n    return docString;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.haveSameYear",
	"Comment": "returns true if both offsetdatetime are in the same year, false otherwise.",
	"Method": "boolean haveSameYear(OffsetDateTime actual,OffsetDateTime other){\r\n    return actual.getYear() == other.getYear();\r\n}"
}, {
	"Path": "org.agrona.collections.Object2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Long, Long>() {\r\n        public Long[] createKeyArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public Long[] createValueArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public SampleElements<Map.Entry<Long, Long>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n        }\r\n        public Map<Long, Long> create(final Object... entries) {\r\n            final Object2LongHashMap<Long> map = new Object2LongHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1L, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Long, Long>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Long, Long>> order(final List<Map.Entry<Long, Long>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Object2LongHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Object2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n}"
}, {
	"Path": "org.agrona.collections.Object2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Object2LongHashMap<Long> map = new Object2LongHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1L, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Object2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2LongHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "com.ichi2.anki.api.AddContentApi.previewNewNote",
	"Comment": "get the html that would be generated for the specified note type and field list",
	"Method": "Map<String, Map<String, String>> previewNewNote(long mid,String[] flds){\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M && !hasReadWritePermission()) {\r\n        throw new SecurityException(\"previewNewNote requires full read-write-permission\");\r\n    }\r\n    Uri newNoteUri = addNoteInternal(mid, DEFAULT_DECK_ID, flds, Collections.singleton(TEST_TAG));\r\n    Map<String, Map<String, String>> cards = new HashMap();\r\n    Uri cardsUri = Uri.withAppendedPath(newNoteUri, \"cards\");\r\n    final Cursor cardsCursor = mResolver.query(cardsUri, null, null, null, null);\r\n    if (cardsCursor == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        while (cardsCursor.moveToNext()) {\r\n            final String n = cardsCursor.getString(cardsCursor.getColumnIndex(Card.CARD_NAME));\r\n            final String q = cardsCursor.getString(cardsCursor.getColumnIndex(Card.QUESTION));\r\n            final String a = cardsCursor.getString(cardsCursor.getColumnIndex(Card.ANSWER));\r\n            Map<String, String> html = new HashMap();\r\n            html.put(\"q\", q);\r\n            html.put(\"a\", a);\r\n            cards.put(n, html);\r\n        }\r\n    } finally {\r\n        cardsCursor.close();\r\n    }\r\n    mResolver.delete(newNoteUri, null, null);\r\n    return cards;\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.toChunkQueue",
	"Comment": "breaks down the request and creates a queue of response chunks for the given request.",
	"Method": "Queue<Chunk> toChunkQueue(StreamingOutputCallRequest request){\r\n    Queue<Chunk> chunkQueue = new LinkedList<Chunk>();\r\n    int offset = 0;\r\n    boolean compressable = compressableResponse(request.getResponseType());\r\n    for (ResponseParameters params : request.getResponseParametersList()) {\r\n        chunkQueue.add(new Chunk(params.getIntervalUs(), offset, params.getSize(), compressable));\r\n        offset = (offset + params.getSize()) % (compressable ? compressableBuffer.size() : uncompressableBuffer.size());\r\n    }\r\n    return chunkQueue;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ByteArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,byte[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertIsNotInstanceOfAny",
	"Comment": "verifies that the given object is not an instance of any of the given types.",
	"Method": "void assertIsNotInstanceOfAny(AssertionInfo info,Object actual,Class<?>[] types){\r\n    if (!objectIsInstanceOfOneOfGivenClasses(actual, types, info))\r\n        return;\r\n    throw failures.failure(info, shouldNotBeInstanceOfAny(actual, types));\r\n}"
}, {
	"Path": "com.apollographql.apollo.ApolloClient.idleCallback",
	"Comment": "sets the idleresourcecallback which will be called when this apolloclient is idle.",
	"Method": "void idleCallback(IdleResourceCallback idleResourceCallback){\r\n    tracker.setIdleResourceCallback(idleResourceCallback);\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.areEqualIgnoringMinutes",
	"Comment": "returns true if both offsetdatetime are in the same year, month, day of month and hour, false otherwise.",
	"Method": "boolean areEqualIgnoringMinutes(OffsetDateTime actual,OffsetDateTime other){\r\n    return haveSameYearMonthAndDayOfMonth(actual, other) && actual.getHour() == other.getHour();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.tileifyIndeterminate",
	"Comment": "convert a animationdrawable for use as a barberpole animation.each frame of the animation is wrapped in a clipdrawable andgiven a tiling bitmapshader.",
	"Method": "Drawable tileifyIndeterminate(Drawable drawable){\r\n    if (drawable instanceof AnimationDrawable) {\r\n        AnimationDrawable background = (AnimationDrawable) drawable;\r\n        final int N = background.getNumberOfFrames();\r\n        AnimationDrawable newBg = new AnimationDrawable();\r\n        newBg.setOneShot(background.isOneShot());\r\n        for (int i = 0; i < N; i++) {\r\n            Drawable frame = tileify(background.getFrame(i), true);\r\n            frame.setLevel(10000);\r\n            newBg.addFrame(frame, background.getDuration(i));\r\n        }\r\n        newBg.setLevel(10000);\r\n        drawable = newBg;\r\n    }\r\n    return drawable;\r\n}"
}, {
	"Path": "org.agrona.collections.BiInt2ObjectMap.compact",
	"Comment": "compact the backing arrays by rehashing with a capacity just larger than current sizeand giving consideration to the load factor.",
	"Method": "void compact(){\r\n    final int idealCapacity = (int) Math.round(size() * (1.0 / loadFactor));\r\n    rehash(findNextPositivePowerOfTwo(Math.max(MIN_CAPACITY, idealCapacity)));\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.ServerBuilder.annotatedService",
	"Comment": "binds the specified annotated service object under the specified path prefix.",
	"Method": "ServerBuilder annotatedService(Object service,ServerBuilder annotatedService,Object service,Object exceptionHandlersAndConverters,ServerBuilder annotatedService,Object service,Function<Service<HttpRequest, HttpResponse>, ? extends Service<HttpRequest, HttpResponse>> decorator,Object exceptionHandlersAndConverters,ServerBuilder annotatedService,String pathPrefix,Object service,ServerBuilder annotatedService,String pathPrefix,Object service,Object exceptionHandlersAndConverters,ServerBuilder annotatedService,String pathPrefix,Object service,Function<Service<HttpRequest, HttpResponse>, ? extends Service<HttpRequest, HttpResponse>> decorator,Object exceptionHandlersAndConverters,ServerBuilder annotatedService,String pathPrefix,Object service,Function<Service<HttpRequest, HttpResponse>, ? extends Service<HttpRequest, HttpResponse>> decorator,Iterable<?> exceptionHandlersAndConverters){\r\n    defaultVirtualHostBuilderUpdated();\r\n    defaultVirtualHostBuilder.annotatedService(pathPrefix, service, decorator, exceptionHandlersAndConverters);\r\n    return this;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.VirtualHost.normalizeDefaultHostname",
	"Comment": "idna ascii conversion, case normalization and validation.",
	"Method": "String normalizeDefaultHostname(String defaultHostname){\r\n    requireNonNull(defaultHostname, \"defaultHostname\");\r\n    if (needsNormalization(defaultHostname)) {\r\n        defaultHostname = IDN.toASCII(defaultHostname, IDN.ALLOW_UNASSIGNED);\r\n    }\r\n    if (!HOSTNAME_PATTERN.matcher(defaultHostname).matches()) {\r\n        throw new IllegalArgumentException(\"defaultHostname: \" + defaultHostname);\r\n    }\r\n    return Ascii.toLowerCase(defaultHostname);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.TypeSignature.isUnresolved",
	"Comment": "returns if this type signature represents an unresolved type.",
	"Method": "boolean isUnresolved(){\r\n    return name.startsWith(\"?\");\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,int[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.deleteFieldDialog",
	"Comment": "creates a dialog to rename the currently selected field, short loading tiprocessing time scales with number of items",
	"Method": "void deleteFieldDialog(){\r\n    Runnable confirm = () -> {\r\n        try {\r\n            mCol.modSchema(false);\r\n            deleteField();\r\n        } catch (ConfirmModSchemaException e) {\r\n        }\r\n        dismissContextMenu();\r\n    };\r\n    if (mFieldLabels.size() < 2) {\r\n        showToast(getResources().getString(R.string.toast_last_field));\r\n    } else {\r\n        try {\r\n            mCol.modSchema();\r\n            ConfirmationDialog d = new ConfirmationDialog();\r\n            d.setArgs(getResources().getString(R.string.field_delete_warning));\r\n            d.setConfirm(confirm);\r\n            d.setCancel(mConfirmDialogCancel);\r\n            showDialogFragment(d);\r\n        } catch (ConfirmModSchemaException e) {\r\n            ConfirmationDialog c = new ConfirmationDialog();\r\n            c.setConfirm(confirm);\r\n            c.setCancel(mConfirmDialogCancel);\r\n            c.setArgs(getResources().getString(R.string.full_sync_confirmation));\r\n            showDialogFragment(c);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.ByteArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,byte[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.ichi2.compat.CompatV15.vibrate",
	"Comment": "until api 26 just specify time, after that specify effect also",
	"Method": "void vibrate(Context context,long durationMillis){\r\n    Vibrator vibratorManager = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n    if (vibratorManager != null) {\r\n        vibratorManager.vibrate(durationMillis);\r\n    }\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMap.compact",
	"Comment": "compact the backing arrays by rehashing with a capacity just larger than current sizeand giving consideration to the load factor.",
	"Method": "void compact(){\r\n    final int idealCapacity = (int) Math.round(size() * (1.0d / loadFactor));\r\n    rehash(findNextPositivePowerOfTwo(Math.max(MIN_CAPACITY, idealCapacity)));\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.setIndeterminateDrawable",
	"Comment": "define the drawable used to draw the progress bar inindeterminate mode.",
	"Method": "void setIndeterminateDrawable(Drawable d){\r\n    if (d != null) {\r\n        d.setCallback(this);\r\n    }\r\n    mIndeterminateDrawable = d;\r\n    if (mIndeterminate) {\r\n        mCurrentDrawable = d;\r\n        postInvalidate();\r\n    }\r\n}"
}, {
	"Path": "org.agrona.BitUtil.align",
	"Comment": "align a value to the next multiple up of alignment.if the value equals an alignment multiple then it is returned unchanged.this method executes without branching. this code is designed to be use in the fast path and should notbe used with negative numbers. negative numbers will result in undefined behaviour.",
	"Method": "int align(int value,int alignment){\r\n    return (value + (alignment - 1)) & -alignment;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAbsSpinner.setAdapter",
	"Comment": "the adapter is used to provide the data which backs this spinner.it also provides methods to transform spinner items based on their positionrelative to the selected item.",
	"Method": "void setAdapter(SpinnerAdapter adapter){\r\n    if (null != mAdapter) {\r\n        mAdapter.unregisterDataSetObserver(mDataSetObserver);\r\n        resetList();\r\n    }\r\n    mAdapter = adapter;\r\n    mOldSelectedPosition = INVALID_POSITION;\r\n    mOldSelectedRowId = INVALID_ROW_ID;\r\n    if (mAdapter != null) {\r\n        mOldItemCount = mItemCount;\r\n        mItemCount = mAdapter.getCount();\r\n        checkFocus();\r\n        mDataSetObserver = new AdapterDataSetObserver();\r\n        mAdapter.registerDataSetObserver(mDataSetObserver);\r\n        int position = mItemCount > 0 ? 0 : INVALID_POSITION;\r\n        setSelectedPositionInt(position);\r\n        setNextSelectedPositionInt(position);\r\n        if (mItemCount == 0) {\r\n            checkSelectionChanged();\r\n        }\r\n    } else {\r\n        checkFocus();\r\n        resetList();\r\n        checkSelectionChanged();\r\n    }\r\n    requestLayout();\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,boolean[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.createIntent",
	"Comment": "constructs an intent from the given information and the search dialog state.",
	"Method": "Intent createIntent(String action,Uri data,String extraData,String query,int actionKey,String actionMsg){\r\n    Intent intent = new Intent(action);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n    if (data != null) {\r\n        intent.setData(data);\r\n    }\r\n    intent.putExtra(SearchManager.USER_QUERY, mUserQuery);\r\n    if (query != null) {\r\n        intent.putExtra(SearchManager.QUERY, query);\r\n    }\r\n    if (extraData != null) {\r\n        intent.putExtra(SearchManager.EXTRA_DATA_KEY, extraData);\r\n    }\r\n    if (mAppSearchData != null) {\r\n        intent.putExtra(SearchManager.APP_DATA, mAppSearchData);\r\n    }\r\n    if (actionKey != KeyEvent.KEYCODE_UNKNOWN) {\r\n        intent.putExtra(SearchManager.ACTION_KEY, actionKey);\r\n        intent.putExtra(SearchManager.ACTION_MSG, actionMsg);\r\n    }\r\n    intent.setComponent(mSearchable.getSearchActivity());\r\n    return intent;\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.close",
	"Comment": "closes this deframer and frees any resources. after this method is called, additionalcalls will have no effect.",
	"Method": "void close(){\r\n    try {\r\n        if (unprocessed != null) {\r\n            unprocessed.forEach(ByteBuf::release);\r\n        }\r\n    } finally {\r\n        unprocessed = null;\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.libanki.Tags.join",
	"Comment": "join tags into a single string, with leading and trailing spaces.",
	"Method": "String join(java.util.Collection<String> tags){\r\n    if (tags == null || tags.size() == 0) {\r\n        return \"\";\r\n    } else {\r\n        String joined = TextUtils.join(\" \", tags);\r\n        return String.format(Locale.US, \" %s \", joined);\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.DecodedHttpRequest.isKeepAlive",
	"Comment": "returns whether to keep the connection alive after this request is handled.",
	"Method": "boolean isKeepAlive(){\r\n    return keepAlive;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getValues",
	"Comment": "returns the values that this valueanimator animates between. these values are stored inpropertyvaluesholder objects, even if the valueanimator was created with a simple listof value objects instead.",
	"Method": "PropertyValuesHolder[] getValues(){\r\n    return mValues;\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.setupLabels",
	"Comment": "sets up the arraylist containing the text for the main listview",
	"Method": "void setupLabels(){\r\n    long noteTypeID = getIntent().getLongExtra(\"noteTypeID\", 0);\r\n    mMod = mCol.getModels().get(noteTypeID);\r\n    mFieldLabels = new ArrayList();\r\n    try {\r\n        mNoteFields = mMod.getJSONArray(\"flds\");\r\n        for (int i = 0; i < mNoteFields.length(); i++) {\r\n            JSONObject o = mNoteFields.getJSONObject(i);\r\n            mFieldLabels.add(o.getString(\"name\"));\r\n        }\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,boolean[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertAreAtMost",
	"Comment": "assert that there are at most n array elements satisfying the given condition.",
	"Method": "void assertAreAtMost(AssertionInfo info,E[] actual,int n,Condition<? super E> condition){\r\n    arrays.assertAreAtMost(info, failures, conditions, actual, n, condition);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SuggestionsAdapter.convertToString",
	"Comment": "gets the text to show in the query field when a suggestion is selected.",
	"Method": "CharSequence convertToString(Cursor cursor){\r\n    if (cursor == null) {\r\n        return null;\r\n    }\r\n    String query = getColumnString(cursor, SearchManager.SUGGEST_COLUMN_QUERY);\r\n    if (query != null) {\r\n        return query;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.startAnimation",
	"Comment": "called internally to start an animation by adding it to the active animations list. must becalled on the ui thread.",
	"Method": "void startAnimation(){\r\n    initAnimation();\r\n    sAnimations.get().add(this);\r\n    if (mStartDelay > 0 && mListeners != null) {\r\n        ArrayList<AnimatorListener> tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();\r\n        int numListeners = tmpListeners.size();\r\n        for (int i = 0; i < numListeners; ++i) {\r\n            tmpListeners.get(i).onAnimationStart(this);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.containsField",
	"Comment": "checks if there exists a field with this name in the current model",
	"Method": "boolean containsField(String field){\r\n    for (String s : mFieldLabels) {\r\n        if (field.compareTo(s) == 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameSecond",
	"Comment": "returns true if both date are in the same year, month and day of month, hour, minute and second, false otherwise.",
	"Method": "boolean areInSameSecond(Date actual,Date other){\r\n    return areInSameMinute(actual, other) && secondOf(actual) == secondOf(other);\r\n}"
}, {
	"Path": "com.ichi2.anki.analytics.UsageAnalytics.setDryRun",
	"Comment": "set the analytics up to log things, goes to hit validator. experimental.",
	"Method": "void setDryRun(boolean dryRun){\r\n    Timber.i(\"setDryRun(): %s, warning dryRun is experimental\", dryRun);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.ResourcesCompat.loadLogoFromManifest",
	"Comment": "attempt to programmatically load the logo from the manifest file of anactivity by using an xml pull parser. this should allow us to read thelogo attribute regardless of the platform it is being run on.",
	"Method": "int loadLogoFromManifest(Activity activity){\r\n    int logo = 0;\r\n    try {\r\n        final String thisPackage = activity.getClass().getName();\r\n        if (BuildConfig.DEBUG)\r\n            Log.i(TAG, \"Parsing AndroidManifest.xml for \" + thisPackage);\r\n        final String packageName = activity.getApplicationInfo().packageName;\r\n        final AssetManager am = activity.createPackageContext(packageName, 0).getAssets();\r\n        final XmlResourceParser xml = am.openXmlResourceParser(\"AndroidManifest.xml\");\r\n        int eventType = xml.getEventType();\r\n        while (eventType != XmlPullParser.END_DOCUMENT) {\r\n            if (eventType == XmlPullParser.START_TAG) {\r\n                String name = xml.getName();\r\n                if (\"application\".equals(name)) {\r\n                    if (BuildConfig.DEBUG)\r\n                        Log.d(TAG, \"Got <application>\");\r\n                    for (int i = xml.getAttributeCount() - 1; i >= 0; i--) {\r\n                        if (BuildConfig.DEBUG)\r\n                            Log.d(TAG, xml.getAttributeName(i) + \": \" + xml.getAttributeValue(i));\r\n                        if (\"logo\".equals(xml.getAttributeName(i))) {\r\n                            logo = xml.getAttributeResourceValue(i, 0);\r\n                            break;\r\n                        }\r\n                    }\r\n                } else if (\"activity\".equals(name)) {\r\n                    if (BuildConfig.DEBUG)\r\n                        Log.d(TAG, \"Got <activity>\");\r\n                    Integer activityLogo = null;\r\n                    String activityPackage = null;\r\n                    boolean isOurActivity = false;\r\n                    for (int i = xml.getAttributeCount() - 1; i >= 0; i--) {\r\n                        if (BuildConfig.DEBUG)\r\n                            Log.d(TAG, xml.getAttributeName(i) + \": \" + xml.getAttributeValue(i));\r\n                        String attrName = xml.getAttributeName(i);\r\n                        if (\"logo\".equals(attrName)) {\r\n                            activityLogo = xml.getAttributeResourceValue(i, 0);\r\n                        } else if (\"name\".equals(attrName)) {\r\n                            activityPackage = ActionBarSherlockCompat.cleanActivityName(packageName, xml.getAttributeValue(i));\r\n                            if (!thisPackage.equals(activityPackage)) {\r\n                                break;\r\n                            }\r\n                            isOurActivity = true;\r\n                        }\r\n                        if ((activityLogo != null) && (activityPackage != null)) {\r\n                            logo = activityLogo.intValue();\r\n                        }\r\n                    }\r\n                    if (isOurActivity) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            eventType = xml.nextToken();\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    if (BuildConfig.DEBUG)\r\n        Log.i(TAG, \"Returning \" + Integer.toHexString(logo));\r\n    return logo;\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.PlotSheet.xToGraphic",
	"Comment": "converts a given x coordinate from plotting field coordinate to a graphic field coordinate",
	"Method": "float xToGraphic(double x,RectangleWrap field){\r\n    double xQuotient = (field.width - leftFrameThickness - rightFrameThickness) / (Math.abs(this.screenParts.get(currentScreen).getxRange()[1] - this.screenParts.get(currentScreen).getxRange()[0]));\r\n    double xDistanceFromLeft = x - this.screenParts.get(currentScreen).getxRange()[0];\r\n    return field.x + leftFrameThickness + (float) (xDistanceFromLeft * xQuotient);\r\n}"
}, {
	"Path": "org.assertj.core.api.BDDSoftAssertionsTest.list_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test",
	"Comment": "the test would fail if any method was not proxyable as the assertion error would not be softly caught",
	"Method": "void list_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){\r\n    List<Name> names = asList(name(\"John\", \"Doe\"), name(\"Jane\", \"Doe\"));\r\n    List<CartoonCharacter> characters = asList(homer, fred);\r\n    softly.then(names).extracting(Name::getFirst).contains(\"gandalf\").contains(\"frodo\");\r\n    softly.then(names).extracting(\"last\").containsExactly(\"foo\", \"bar\");\r\n    softly.then(characters).flatExtracting(CartoonCharacter::getChildren).as(\"using flatExtracting on Iterable\").hasSize(1).containsAnyOf(homer, fred);\r\n    softly.then(characters).flatExtracting(CartoonCharacter::getChildrenWithException).as(\"using flatExtracting on Iterable with exception\").containsExactlyInAnyOrder(homer, fred);\r\n    softly.then(characters).containsOnly(bart);\r\n    softly.then(characters).containsOnlyOnce(maggie, bart);\r\n    softly.then(characters).containsSequence(homer, bart);\r\n    softly.then(characters).containsSubsequence(homer, maggie);\r\n    softly.then(characters).doesNotContain(homer, maggie);\r\n    softly.then(characters).doesNotContainSequence(fred);\r\n    softly.then(characters).doesNotContainSubsequence(homer, fred);\r\n    softly.then(characters).isSubsetOf(homer, bart);\r\n    softly.then(characters).startsWith(fred);\r\n    softly.then(characters).endsWith(bart);\r\n    softly.then(names).extracting(Name::getFirst, Name::getLast).contains(tuple(\"John\", \"Doe\")).contains(tuple(\"Frodo\", \"Baggins\"));\r\n    softly.then(names).extracting(\"first\", \"last\").contains(tuple(\"John\", \"Doe\")).contains(tuple(\"Bilbo\", \"Baggins\"));\r\n    softly.then(names).extracting(firstNameFunction).contains(\"John\").contains(\"sam\");\r\n    softly.then(names).extracting(\"first\", String.class).contains(\"John\").contains(\"Aragorn\");\r\n    softly.then(names).filteredOn(name -> name.first.startsWith(\"Jo\")).hasSize(123);\r\n    softly.then(names).filteredOn(name -> name.first.startsWith(\"Jo\")).extracting(firstNameFunction).contains(\"Sauron\");\r\n    softly.then(names).flatExtracting(firstNameFunction, lastNameFunction).as(\"flatExtracting with multiple Extractors\").contains(\"John\", \"Jane\", \"Doe\").contains(\"Sauron\");\r\n    softly.then(names).flatExtracting(throwingFirstNameExtractor, throwingLastNameExtractor).as(\"flatExtracting with multiple ThrowingExtractors\").contains(\"John\", \"Jane\", \"Doe\").contains(\"Sauron\");\r\n    softly.then(names).extractingResultOf(\"getFirst\").contains(\"John\", \"Jane\").contains(\"Sam\", \"Aragorn\");\r\n    softly.then(names).extractingResultOf(\"getFirst\", String.class).contains(\"John\", \"Jane\").contains(\"Messi\", \"Ronaldo\");\r\n    softly.then(names).filteredOn(new Condition(name -> name.first.startsWith(\"Jo\"), \"startsWith Jo\")).as(\"filteredOn with condition\").hasSize(5);\r\n    softly.then(names).filteredOn(\"first\", in(\"John\", \"Frodo\")).as(\"filteredOn firstName in {John, Frodo}\").isEmpty();\r\n    softly.then(names).filteredOn(\"first\", \"John\").as(\"filteredOn firstName = John\").isEmpty();\r\n    softly.then(names).filteredOnNull(\"first\").as(\"filteredOn firstName = null\").isNotEmpty();\r\n    softly.then(names).flatExtracting(\"first\", \"last\").as(\"using flatExtracting(String... fieldOrPropertyNames)\").contains(\"John\", \"Jane\", \"Doe\").contains(\"Sauron\");\r\n    softly.then(characters).flatExtracting(\"children\").as(\"using flatExtracting(String fieldOrPropertyName)\").contains(bart, maggie).contains(\"Sauron\");\r\n    softly.then(names).filteredOnAssertions(name -> assertThat(name.first).startsWith(\"Jo\")).as(\"filteredOn with consumer\").hasSize(5);\r\n    List<Throwable> errorsCollected = softly.errorsCollected();\r\n    assertThat(errorsCollected).hasSize(33);\r\n    assertThat(errorsCollected.get(0)).hasMessageContaining(\"gandalf\");\r\n    assertThat(errorsCollected.get(1)).hasMessageContaining(\"frodo\");\r\n    assertThat(errorsCollected.get(2)).hasMessageContaining(\"foo\").hasMessageContaining(\"bar\");\r\n    assertThat(errorsCollected.get(3)).hasMessageContaining(\"size\");\r\n    assertThat(errorsCollected.get(4)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(5)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(6)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(7)).hasMessageContaining(maggie.toString());\r\n    assertThat(errorsCollected.get(8)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(9)).hasMessageContaining(maggie.toString());\r\n    assertThat(errorsCollected.get(10)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(11)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(12)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(13)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(14)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(15)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(16)).hasMessageContaining(\"Baggins\");\r\n    assertThat(errorsCollected.get(17)).hasMessageContaining(\"Bilbo\");\r\n    assertThat(errorsCollected.get(18)).hasMessageContaining(\"sam\");\r\n    assertThat(errorsCollected.get(19)).hasMessageContaining(\"Aragorn\");\r\n    assertThat(errorsCollected.get(20)).hasMessageContaining(\"123\");\r\n    assertThat(errorsCollected.get(21)).hasMessageContaining(\"Sauron\");\r\n    assertThat(errorsCollected.get(22)).hasMessageContaining(\"flatExtracting with multiple Extractors\");\r\n    assertThat(errorsCollected.get(23)).hasMessageContaining(\"flatExtracting with multiple ThrowingExtractors\");\r\n    assertThat(errorsCollected.get(24)).hasMessageContaining(\"Sam\");\r\n    assertThat(errorsCollected.get(25)).hasMessageContaining(\"Ronaldo\");\r\n    assertThat(errorsCollected.get(26)).hasMessageContaining(\"filteredOn with condition\");\r\n    assertThat(errorsCollected.get(27)).hasMessageContaining(\"filteredOn firstName in {John, Frodo}\");\r\n    assertThat(errorsCollected.get(28)).hasMessageContaining(\"filteredOn firstName = John\");\r\n    assertThat(errorsCollected.get(29)).hasMessageContaining(\"filteredOn firstName = null\");\r\n    assertThat(errorsCollected.get(30)).hasMessageContaining(\"using flatExtracting(String... fieldOrPropertyNames)\");\r\n    assertThat(errorsCollected.get(31)).hasMessageContaining(\"using flatExtracting(String fieldOrPropertyName)\");\r\n    assertThat(errorsCollected.get(32)).hasMessageContaining(\"filteredOn with consumer\");\r\n}"
}, {
	"Path": "com.golshadi.majid.core.DownloadManagerPro.startDownload",
	"Comment": "first of all check task state and depend on start download process from where ever need",
	"Method": "void startDownload(int token){\r\n    Log.d(\"--------\", \"task state\");\r\n    Task task = tasksDataSource.getTaskInfo(token);\r\n    Log.d(\"--------\", \"task state 1\");\r\n    Thread asyncStartDownload = new AsyncStartDownload(tasksDataSource, chunksDataSource, moderator, downloadManagerListener, task);\r\n    Log.d(\"--------\", \"define async download\");\r\n    asyncStartDownload.start();\r\n    Log.d(\"--------\", \"define async download started\");\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.setSecondTextureWithFirst",
	"Comment": "recycle the second texture id and set it with the first texturemanually call this function to set the second texture with the firstone when page is backward flipping in single page mode.",
	"Method": "Page setSecondTextureWithFirst(){\r\n    if (mTexIDs[SECOND_TEXTURE_ID] > INVALID_TEXTURE_ID) {\r\n        mUnusedTexIDs[mUnusedTexSize++] = mTexIDs[SECOND_TEXTURE_ID];\r\n    }\r\n    maskColor[SECOND_TEXTURE_ID][0] = maskColor[FIRST_TEXTURE_ID][0];\r\n    maskColor[SECOND_TEXTURE_ID][1] = maskColor[FIRST_TEXTURE_ID][1];\r\n    maskColor[SECOND_TEXTURE_ID][2] = maskColor[FIRST_TEXTURE_ID][2];\r\n    mTexIDs[SECOND_TEXTURE_ID] = mTexIDs[FIRST_TEXTURE_ID];\r\n    mTexIDs[FIRST_TEXTURE_ID] = INVALID_TEXTURE_ID;\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.view.menu.MenuBuilder.removeItemAtInt",
	"Comment": "remove the item at the given index and optionally forces menu views toupdate.",
	"Method": "void removeItemAtInt(int index,boolean updateChildrenOnMenuViews){\r\n    if ((index < 0) || (index >= mItems.size()))\r\n        return;\r\n    mItems.remove(index);\r\n    if (updateChildrenOnMenuViews)\r\n        onItemsChanged(true);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Numbers.assertIsNotCloseTo",
	"Comment": "asserts that the actual value is not close to the expected one by less than the given offset.",
	"Method": "void assertIsNotCloseTo(AssertionInfo info,NUMBER actual,NUMBER expected,Offset<NUMBER> offset){\r\n    assertNotNull(info, actual);\r\n    checkOffsetIsNotNull(offset);\r\n    checkNumberIsNotNull(expected);\r\n    NUMBER diff = absDiff(actual, expected);\r\n    if (offset.strict && isGreaterThanOrEqualTo(diff, offset.value))\r\n        return;\r\n    if (!offset.strict && !areEqual(actual, expected)) {\r\n        if (isGreaterThan(diff, offset.value))\r\n            return;\r\n    }\r\n    throw failures.failure(info, shouldNotBeEqual(actual, expected, offset, diff));\r\n}"
}, {
	"Path": "org.assertj.core.internal.ByteArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,byte[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertAreExactly",
	"Comment": "verifies that there are exactly n array elements satisfying the given condition.",
	"Method": "void assertAreExactly(AssertionInfo info,E[] actual,int n,Condition<? super E> condition){\r\n    arrays.assertAreExactly(info, failures, conditions, actual, n, condition);\r\n}"
}, {
	"Path": "com.spotify.apollo.test.StubClient.requestsAndResponses",
	"Comment": "returns all the requests sent to this stub client, together with their associated responses.",
	"Method": "List<RequestResponsePair> requestsAndResponses(){\r\n    return requestsAndResponses;\r\n}"
}, {
	"Path": "org.assertj.core.api.BDDSoftAssertionsTest.object_array_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test",
	"Comment": "the test would fail if any method was not proxyable as the assertion error would not be softly caught",
	"Method": "void object_array_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){\r\n    Name[] names = array(name(\"John\", \"Doe\"), name(\"Jane\", \"Doe\"));\r\n    CartoonCharacter[] characters = array(homer, fred);\r\n    softly.then(names).extracting(Name::getFirst).contains(\"gandalf\").contains(\"frodo\");\r\n    softly.then(names).extracting(\"last\").containsExactly(\"foo\", \"bar\");\r\n    softly.then(characters).flatExtracting(CartoonCharacter::getChildren).as(\"using flatExtracting on Iterable\").hasSize(1).containsAnyOf(homer, fred);\r\n    softly.then(characters).flatExtracting(CartoonCharacter::getChildrenWithException).as(\"using flatExtracting on Iterable with exception\").containsExactlyInAnyOrder(homer, fred);\r\n    softly.then(characters).containsOnly(bart);\r\n    softly.then(characters).containsOnlyOnce(maggie, bart);\r\n    softly.then(characters).containsSequence(homer, bart);\r\n    softly.then(characters).containsSubsequence(homer, maggie);\r\n    softly.then(characters).doesNotContain(homer, maggie);\r\n    softly.then(characters).doesNotContainSequence(fred);\r\n    softly.then(characters).doesNotContainSubsequence(homer, fred);\r\n    softly.then(characters).isSubsetOf(homer, bart);\r\n    softly.then(characters).startsWith(fred);\r\n    softly.then(characters).endsWith(bart);\r\n    softly.then(names).extracting(Name::getFirst, Name::getLast).contains(tuple(\"John\", \"Doe\")).contains(tuple(\"Frodo\", \"Baggins\"));\r\n    softly.then(names).extracting(\"first\", \"last\").contains(tuple(\"John\", \"Doe\")).contains(tuple(\"Bilbo\", \"Baggins\"));\r\n    softly.then(names).extracting(firstNameFunction).contains(\"John\").contains(\"sam\");\r\n    softly.then(names).extracting(\"first\", String.class).contains(\"John\").contains(\"Aragorn\");\r\n    softly.then(names).filteredOn(name -> name.first.startsWith(\"Jo\")).hasSize(123);\r\n    softly.then(names).filteredOn(name -> name.first.startsWith(\"Jo\")).extracting(firstNameFunction).contains(\"Sauron\");\r\n    softly.then(names).extractingResultOf(\"getFirst\").contains(\"John\", \"Jane\").contains(\"Sam\", \"Aragorn\");\r\n    softly.then(names).extractingResultOf(\"getFirst\", String.class).contains(\"John\", \"Jane\").contains(\"Messi\", \"Ronaldo\");\r\n    softly.then(names).filteredOn(new Condition(name -> name.first.startsWith(\"Jo\"), \"startsWith Jo\")).as(\"filteredOn with condition\").hasSize(5);\r\n    softly.then(names).filteredOn(\"first\", in(\"John\", \"Frodo\")).as(\"filteredOn firstName in {John, Frodo}\").isEmpty();\r\n    softly.then(names).filteredOn(\"first\", \"John\").as(\"filteredOn firstName = John\").isEmpty();\r\n    softly.then(names).filteredOnNull(\"first\").as(\"filteredOn firstName = null\").isNotEmpty();\r\n    softly.then(characters).flatExtracting(\"children\").as(\"using flatExtracting(String fieldOrPropertyName)\").contains(bart, maggie).contains(\"Sauron\");\r\n    softly.then(names).filteredOnAssertions(name -> assertThat(name.first).startsWith(\"Jo\")).as(\"filteredOn with consumer\").hasSize(5);\r\n    List<Throwable> errorsCollected = softly.errorsCollected();\r\n    assertThat(errorsCollected).hasSize(30);\r\n    assertThat(errorsCollected.get(0)).hasMessageContaining(\"gandalf\");\r\n    assertThat(errorsCollected.get(1)).hasMessageContaining(\"frodo\");\r\n    assertThat(errorsCollected.get(2)).hasMessageContaining(\"foo\").hasMessageContaining(\"bar\");\r\n    assertThat(errorsCollected.get(3)).hasMessageContaining(\"size\");\r\n    assertThat(errorsCollected.get(4)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(5)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(6)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(7)).hasMessageContaining(maggie.toString());\r\n    assertThat(errorsCollected.get(8)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(9)).hasMessageContaining(maggie.toString());\r\n    assertThat(errorsCollected.get(10)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(11)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(12)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(13)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(14)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(15)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(16)).hasMessageContaining(\"Baggins\");\r\n    assertThat(errorsCollected.get(17)).hasMessageContaining(\"Bilbo\");\r\n    assertThat(errorsCollected.get(18)).hasMessageContaining(\"sam\");\r\n    assertThat(errorsCollected.get(19)).hasMessageContaining(\"Aragorn\");\r\n    assertThat(errorsCollected.get(20)).hasMessageContaining(\"123\");\r\n    assertThat(errorsCollected.get(21)).hasMessageContaining(\"Sauron\");\r\n    assertThat(errorsCollected.get(22)).hasMessageContaining(\"Sam\");\r\n    assertThat(errorsCollected.get(23)).hasMessageContaining(\"Ronaldo\");\r\n    assertThat(errorsCollected.get(24)).hasMessageContaining(\"filteredOn with condition\");\r\n    assertThat(errorsCollected.get(25)).hasMessageContaining(\"filteredOn firstName in {John, Frodo}\");\r\n    assertThat(errorsCollected.get(26)).hasMessageContaining(\"filteredOn firstName = John\");\r\n    assertThat(errorsCollected.get(27)).hasMessageContaining(\"filteredOn firstName = null\");\r\n    assertThat(errorsCollected.get(28)).hasMessageContaining(\"using flatExtracting(String fieldOrPropertyName)\");\r\n    assertThat(errorsCollected.get(29)).hasMessageContaining(\"filteredOn with consumer\");\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertAre",
	"Comment": "assert that each element of given array satisfies the given condition.",
	"Method": "void assertAre(AssertionInfo info,E[] actual,Condition<? super E> condition){\r\n    arrays.assertAre(info, failures, conditions, actual, condition);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,short[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.agrona.collections.BiInt2ObjectMap.capacity",
	"Comment": "get the total capacity for the map to which the load factor with be a fraction of.",
	"Method": "int capacity(){\r\n    return values.length;\r\n}"
}, {
	"Path": "com.eschao.android.widget.sample.pageflip.LoadBitmapTask.stop",
	"Comment": "stop taskset mstop flag with true and notify task thread, at last, it willcheck if task is alive every 500ms with 3 times to make sure the threadstop",
	"Method": "void stop(){\r\n    synchronized (this) {\r\n        mStop = true;\r\n        notify();\r\n    }\r\n    for (int i = 0; i < 3 && mThread.isAlive(); ++i) {\r\n        Log.d(TAG, \"Waiting thread to stop ...\");\r\n        try {\r\n            Thread.sleep(500);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    if (mThread.isAlive()) {\r\n        Log.d(TAG, \"Thread is still alive after waited 1.5s!\");\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.removeViewAt",
	"Comment": "this method is not supported and throws an unsupportedoperationexception when called.",
	"Method": "void removeViewAt(int index){\r\n    throw new UnsupportedOperationException(\"removeViewAt(int) is not supported in AdapterView\");\r\n}"
}, {
	"Path": "org.assertj.core.internal.ByteArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,byte[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "org.assertj.core.util.diff.DiffUtils.getDeltaText",
	"Comment": "getdeltatext returns the lines to be added to the unified diff text fromthe delta parameter",
	"Method": "List<String> getDeltaText(Delta<String> delta){\r\n    List<String> buffer = new ArrayList();\r\n    for (String original : delta.getOriginal().getLines()) {\r\n        buffer.add(\"-\" + original);\r\n    }\r\n    for (String original : delta.getRevised().getLines()) {\r\n        buffer.add(\"+\" + original);\r\n    }\r\n    return buffer;\r\n}"
}, {
	"Path": "org.agrona.collections.BiInt2ObjectMap.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.setupSetterOrGetter",
	"Comment": "returns the setter or getter requested. this utility function checks whether therequested method exists in the propertymapmap cache. if not, it calls anotherutility function to request the method from the targetclass directly.",
	"Method": "Method setupSetterOrGetter(Class targetClass,HashMap<Class, HashMap<String, Method>> propertyMapMap,String prefix,Class valueType){\r\n    Method setterOrGetter = null;\r\n    try {\r\n        mPropertyMapLock.writeLock().lock();\r\n        HashMap<String, Method> propertyMap = propertyMapMap.get(targetClass);\r\n        if (propertyMap != null) {\r\n            setterOrGetter = propertyMap.get(mPropertyName);\r\n        }\r\n        if (setterOrGetter == null) {\r\n            setterOrGetter = getPropertyFunction(targetClass, prefix, valueType);\r\n            if (propertyMap == null) {\r\n                propertyMap = new HashMap<String, Method>();\r\n                propertyMapMap.put(targetClass, propertyMap);\r\n            }\r\n            propertyMap.put(mPropertyName, setterOrGetter);\r\n        }\r\n    } finally {\r\n        mPropertyMapLock.writeLock().unlock();\r\n    }\r\n    return setterOrGetter;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getRepeatCount",
	"Comment": "defines how many times the animation should repeat. the default valueis 0.",
	"Method": "int getRepeatCount(){\r\n    return mRepeatCount;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.TypeSignature.ofUnresolved",
	"Comment": "creates a new unresolved type signature with the specified type name.",
	"Method": "TypeSignature ofUnresolved(String unresolvedTypeName){\r\n    requireNonNull(unresolvedTypeName, \"unresolvedTypeName\");\r\n    return new TypeSignature('?' + unresolvedTypeName, ImmutableList.of());\r\n}"
}, {
	"Path": "com.ichi2.anki.provider.CardContentProvider.shouldEnforceUpdateSecurity",
	"Comment": "enforce permissions for all updates on android m and above. otherwise block depending on uri and client app",
	"Method": "boolean shouldEnforceUpdateSecurity(Uri uri){\r\n    final List<Integer> WHITELIST = Arrays.asList(NOTES_ID_CARDS_ORD, MODELS_ID, MODELS_ID_TEMPLATES_ID, SCHEDULE, DECK_SELECTED);\r\n    return CompatHelper.isMarshmallow() || !WHITELIST.contains(sUriMatcher.match(uri)) || knownRogueClient();\r\n}"
}, {
	"Path": "org.assertj.core.internal.Comparables.assertLessThanOrEqualTo",
	"Comment": "asserts that the actual value is less than or equal to the other one.",
	"Method": "void assertLessThanOrEqualTo(AssertionInfo info,T actual,T other){\r\n    assertNotNull(info, actual);\r\n    if (!isGreaterThan(actual, other))\r\n        return;\r\n    throw failures.failure(info, shouldBeLessOrEqual(actual, other, comparisonStrategy));\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.addNewNoteTypeDialog",
	"Comment": "creates the dialogue box to select a note type, add a name, and then clone it",
	"Method": "void addNewNoteTypeDialog(){\r\n    String add = getResources().getString(R.string.model_browser_add_add);\r\n    String clone = getResources().getString(R.string.model_browser_add_clone);\r\n    final String basicName = \"Basic\";\r\n    final String addForwardReverseName = \"Basic (and reversed card)\";\r\n    final String addForwardOptionalReverseName = \"Basic (optional reversed card)\";\r\n    final String addClozeModelName = \"Cloze\";\r\n    mNewModelLabels = new ArrayList();\r\n    mNewModelNames = new ArrayList();\r\n    mNewModelLabels.add(String.format(add, basicName));\r\n    mNewModelLabels.add(String.format(add, addForwardReverseName));\r\n    mNewModelLabels.add(String.format(add, addForwardOptionalReverseName));\r\n    mNewModelLabels.add(String.format(add, addClozeModelName));\r\n    mNewModelNames.add(basicName);\r\n    mNewModelNames.add(addForwardReverseName);\r\n    mNewModelNames.add(addForwardOptionalReverseName);\r\n    mNewModelNames.add(addClozeModelName);\r\n    final int numStdModels = mNewModelLabels.size();\r\n    if (mModels != null) {\r\n        for (JSONObject model : mModels) {\r\n            try {\r\n                mNewModelLabels.add(String.format(clone, model.getString(\"name\")));\r\n                mNewModelNames.add(model.getString(\"name\"));\r\n            } catch (JSONException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n    final Spinner addSelectionSpinner = new Spinner(this);\r\n    ArrayAdapter<String> mNewModelAdapter = new ArrayAdapter(this, R.layout.dropdown_deck_item, mNewModelLabels);\r\n    addSelectionSpinner.setAdapter(mNewModelAdapter);\r\n    new MaterialDialog.Builder(this).title(R.string.model_browser_add).positiveText(R.string.dialog_ok).customView(addSelectionSpinner, true).onPositive((dialog, which) -> {\r\n        mModelNameInput = new EditText(ModelBrowser.this);\r\n        mModelNameInput.setSingleLine();\r\n        if (addSelectionSpinner.getSelectedItemPosition() < numStdModels) {\r\n            mModelNameInput.setText(randomizeName(mNewModelNames.get(addSelectionSpinner.getSelectedItemPosition())));\r\n        } else {\r\n            mModelNameInput.setText(mNewModelNames.get(addSelectionSpinner.getSelectedItemPosition()) + \" \" + getResources().getString(R.string.model_clone_suffix));\r\n        }\r\n        mModelNameInput.setSelection(mModelNameInput.getText().length());\r\n        new MaterialDialog.Builder(ModelBrowser.this).title(R.string.model_browser_add).positiveText(R.string.dialog_ok).customView(mModelNameInput, true).onPositive((innerDialog, innerWhich) -> {\r\n            String modelName = mModelNameInput.getText().toString();\r\n            addNewNoteType(modelName, addSelectionSpinner.getSelectedItemPosition());\r\n        }).negativeText(R.string.dialog_cancel).show();\r\n    }).negativeText(R.string.dialog_cancel).show();\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.tracing.SpanTags.addTags",
	"Comment": "adds information about the raw http request, rpc request, and endpoint to the span.",
	"Method": "void addTags(Span span,RequestLog log){\r\n    final String host = log.requestHeaders().authority();\r\n    assert host != null;\r\n    span.tag(\"http.host\", host);\r\n    final StringBuilder uriBuilder = new StringBuilder().append(log.scheme().uriText()).append(\"://\").append(host).append(log.path());\r\n    if (log.query() != null) {\r\n        uriBuilder.append('?').append(log.query());\r\n    }\r\n    span.tag(\"http.method\", log.method().name()).tag(\"http.path\", log.path()).tag(\"http.url\", uriBuilder.toString()).tag(\"http.status_code\", log.status().codeAsText());\r\n    final Throwable responseCause = log.responseCause();\r\n    if (responseCause != null) {\r\n        span.tag(\"error\", responseCause.toString());\r\n    }\r\n    final SocketAddress raddr = log.context().remoteAddress();\r\n    if (raddr != null) {\r\n        span.tag(\"address.remote\", raddr.toString());\r\n    }\r\n    final SocketAddress laddr = log.context().localAddress();\r\n    if (laddr != null) {\r\n        span.tag(\"address.local\", laddr.toString());\r\n    }\r\n    final Object requestContent = log.requestContent();\r\n    if (requestContent instanceof RpcRequest) {\r\n        span.name(((RpcRequest) requestContent).method());\r\n    }\r\n}"
}, {
	"Path": "com.spotify.apollo.test.ServiceHelper.startTimeoutSeconds",
	"Comment": "set the time to wait for the service to start before giving up. the default value is 5.",
	"Method": "ServiceHelper startTimeoutSeconds(int timeoutSeconds){\r\n    this.timeoutSeconds = timeoutSeconds;\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,long[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "com.actionbarsherlock.view.ActionMode.setTag",
	"Comment": "set a tag object associated with this actionmode.like the tag available to views, this allows applications to associate arbitrarydata with an actionmode for later reference.",
	"Method": "void setTag(Object tag){\r\n    mTag = tag;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.ServiceSpecification.exceptions",
	"Comment": "returns the metadata about the exceptions related with the services in this specification.",
	"Method": "Set<ExceptionInfo> exceptions(){\r\n    return exceptions;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.isRightPage",
	"Comment": "is the right page?right page represents the right screen in double pages mode",
	"Method": "boolean isRightPage(){\r\n    return left >= 0;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,Object[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.cors.CorsService.handleCorsPreflight",
	"Comment": "handles cors preflight by setting the appropriate headers.",
	"Method": "HttpResponse handleCorsPreflight(HttpRequest req){\r\n    final HttpHeaders headers = HttpHeaders.of(HttpStatus.OK);\r\n    if (setCorsOrigin(req, headers)) {\r\n        setCorsAllowMethods(headers);\r\n        setCorsAllowHeaders(headers);\r\n        setCorsAllowCredentials(headers);\r\n        setCorsMaxAge(headers);\r\n        setPreflightHeaders(headers);\r\n    }\r\n    return HttpResponse.of(headers);\r\n}"
}, {
	"Path": "com.example.fragment_friends_connection.fragment.HeroDetails.friendsConnection",
	"Comment": "the friends of the character exposed as a connection with edges",
	"Method": "FriendsConnection friendsConnection(){\r\n    return this.friendsConnection;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertDoesNotContainNull",
	"Comment": "asserts that the given array does not contain null elements.",
	"Method": "void assertDoesNotContainNull(AssertionInfo info,Object[] actual){\r\n    arrays.assertDoesNotContainNull(info, failures, actual);\r\n}"
}, {
	"Path": "org.assertj.core.api.BDDSoftAssertionsTest.iterable_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test",
	"Comment": "the test would fail if any method was not proxyable as the assertion error would not be softly caught",
	"Method": "void iterable_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){\r\n    Iterable<Name> names = asList(name(\"John\", \"Doe\"), name(\"Jane\", \"Doe\"));\r\n    Iterable<CartoonCharacter> characters = asList(homer, fred);\r\n    softly.then(names).extracting(throwingFirstNameExtractor).contains(\"gandalf\").contains(\"frodo\");\r\n    softly.then(names).extracting(\"last\").containsExactly(\"foo\", \"bar\");\r\n    softly.then(characters).flatExtracting(childrenExtractor).as(\"using flatExtracting on Iterable\").hasSize(1).containsAnyOf(homer, fred);\r\n    softly.then(characters).flatExtracting(CartoonCharacter::getChildrenWithException).as(\"using flatExtracting on Iterable with exception\").containsExactlyInAnyOrder(homer, fred);\r\n    softly.then(characters).containsOnly(bart);\r\n    softly.then(characters).containsOnlyOnce(maggie, bart);\r\n    softly.then(characters).containsSequence(homer, bart);\r\n    softly.then(characters).containsSubsequence(homer, maggie);\r\n    softly.then(characters).doesNotContain(homer, maggie);\r\n    softly.then(characters).doesNotContainSequence(fred);\r\n    softly.then(characters).doesNotContainSubsequence(homer, fred);\r\n    softly.then(characters).isSubsetOf(homer, bart);\r\n    softly.then(characters).startsWith(fred);\r\n    softly.then(characters).endsWith(bart);\r\n    softly.then(names).extracting(firstNameFunction, lastNameFunction).contains(tuple(\"John\", \"Doe\")).contains(tuple(\"Frodo\", \"Baggins\"));\r\n    softly.then(names).extracting(\"first\", \"last\").contains(tuple(\"John\", \"Doe\")).contains(tuple(\"Bilbo\", \"Baggins\"));\r\n    softly.then(names).extracting(firstNameFunction).contains(\"John\").contains(\"sam\");\r\n    softly.then(names).extracting(\"first\", String.class).contains(\"John\").contains(\"Aragorn\");\r\n    softly.then(names).filteredOn(name -> name.first.startsWith(\"Jo\")).hasSize(123);\r\n    softly.then(names).filteredOn(name -> name.first.startsWith(\"Jo\")).extracting(firstNameFunction).contains(\"Sauron\");\r\n    softly.then(names).flatExtracting(firstNameFunction, lastNameFunction).as(\"flatExtracting with multiple Extractors\").contains(\"John\", \"Jane\", \"Doe\").contains(\"Sauron\");\r\n    softly.then(names).flatExtracting(throwingFirstNameExtractor, throwingLastNameExtractor).as(\"flatExtracting with multiple ThrowingExtractors\").contains(\"John\", \"Jane\", \"Doe\").contains(\"Sauron\");\r\n    softly.then(names).extractingResultOf(\"getFirst\").contains(\"John\", \"Jane\").contains(\"Sam\", \"Aragorn\");\r\n    softly.then(names).extractingResultOf(\"getFirst\", String.class).contains(\"John\", \"Jane\").contains(\"Messi\", \"Ronaldo\");\r\n    softly.then(names).filteredOn(new Condition(name -> name.first.startsWith(\"Jo\"), \"startsWith Jo\")).as(\"filteredOn with condition\").hasSize(5);\r\n    softly.then(names).filteredOn(\"first\", in(\"John\", \"Frodo\")).as(\"filteredOn firstName in {John, Frodo}\").isEmpty();\r\n    softly.then(names).filteredOn(\"first\", \"John\").as(\"filteredOn firstName = John\").isEmpty();\r\n    softly.then(names).filteredOnNull(\"first\").as(\"filteredOn firstName = null\").isNotEmpty();\r\n    softly.then(names).flatExtracting(\"first\", \"last\").as(\"using flatExtracting(String... fieldOrPropertyNames)\").contains(\"John\", \"Jane\", \"Doe\").contains(\"Sauron\");\r\n    softly.then(characters).flatExtracting(\"children\").as(\"using flatExtracting(String fieldOrPropertyName)\").contains(bart, maggie).contains(\"Sauron\");\r\n    softly.then(names).filteredOnAssertions(name -> assertThat(name.first).startsWith(\"Jo\")).as(\"filteredOn with consumer\").hasSize(5);\r\n    List<Throwable> errorsCollected = softly.errorsCollected();\r\n    assertThat(errorsCollected).hasSize(33);\r\n    assertThat(errorsCollected.get(0)).hasMessageContaining(\"gandalf\");\r\n    assertThat(errorsCollected.get(1)).hasMessageContaining(\"frodo\");\r\n    assertThat(errorsCollected.get(2)).hasMessageContaining(\"foo\").hasMessageContaining(\"bar\");\r\n    assertThat(errorsCollected.get(3)).hasMessageContaining(\"size\");\r\n    assertThat(errorsCollected.get(4)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(5)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(6)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(7)).hasMessageContaining(maggie.toString());\r\n    assertThat(errorsCollected.get(8)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(9)).hasMessageContaining(maggie.toString());\r\n    assertThat(errorsCollected.get(10)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(11)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(12)).hasMessageContaining(homer.toString());\r\n    assertThat(errorsCollected.get(13)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(14)).hasMessageContaining(fred.toString());\r\n    assertThat(errorsCollected.get(15)).hasMessageContaining(bart.toString());\r\n    assertThat(errorsCollected.get(16)).hasMessageContaining(\"Baggins\");\r\n    assertThat(errorsCollected.get(17)).hasMessageContaining(\"Bilbo\");\r\n    assertThat(errorsCollected.get(18)).hasMessageContaining(\"sam\");\r\n    assertThat(errorsCollected.get(19)).hasMessageContaining(\"Aragorn\");\r\n    assertThat(errorsCollected.get(20)).hasMessageContaining(\"123\");\r\n    assertThat(errorsCollected.get(21)).hasMessageContaining(\"Sauron\");\r\n    assertThat(errorsCollected.get(22)).hasMessageContaining(\"flatExtracting with multiple Extractors\");\r\n    assertThat(errorsCollected.get(23)).hasMessageContaining(\"flatExtracting with multiple ThrowingExtractors\");\r\n    assertThat(errorsCollected.get(24)).hasMessageContaining(\"Sam\");\r\n    assertThat(errorsCollected.get(25)).hasMessageContaining(\"Ronaldo\");\r\n    assertThat(errorsCollected.get(26)).hasMessageContaining(\"filteredOn with condition\");\r\n    assertThat(errorsCollected.get(27)).hasMessageContaining(\"filteredOn firstName in {John, Frodo}\");\r\n    assertThat(errorsCollected.get(28)).hasMessageContaining(\"filteredOn firstName = John\");\r\n    assertThat(errorsCollected.get(29)).hasMessageContaining(\"filteredOn firstName = null\");\r\n    assertThat(errorsCollected.get(30)).hasMessageContaining(\"using flatExtracting(String... fieldOrPropertyNames)\");\r\n    assertThat(errorsCollected.get(31)).hasMessageContaining(\"using flatExtracting(String fieldOrPropertyName)\");\r\n    assertThat(errorsCollected.get(32)).hasMessageContaining(\"filteredOn with consumer\");\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertContainsNull",
	"Comment": "asserts that the given array contains at least a null element.",
	"Method": "void assertContainsNull(AssertionInfo info,Object[] actual){\r\n    arrays.assertContainsNull(info, failures, actual);\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.CountersReader.maxCounterId",
	"Comment": "get the maximum counter id which can be supported given the length of the values buffer.",
	"Method": "int maxCounterId(){\r\n    return maxCounterId;\r\n}"
}, {
	"Path": "com.ichi2.anki.CardTemplateEditor.onCollectionLoaded",
	"Comment": "callback used to finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    super.onCollectionLoaded(col);\r\n    mTemplateAdapter = new TemplatePagerAdapter(getSupportFragmentManager());\r\n    mTemplateAdapter.setModel(col.getModels().get(mModelId));\r\n    mViewPager = (ViewPager) findViewById(R.id.pager);\r\n    mViewPager.setAdapter(mTemplateAdapter);\r\n    mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\r\n        @Override\r\n        public void onPageScrolled(final int position, final float v, final int i2) {\r\n        }\r\n        @Override\r\n        public void onPageSelected(final int position) {\r\n            CardTemplateFragment fragment = (CardTemplateFragment) mTemplateAdapter.instantiateItem(mViewPager, position);\r\n            if (fragment != null) {\r\n                fragment.updateCss();\r\n            }\r\n        }\r\n        @Override\r\n        public void onPageScrollStateChanged(final int position) {\r\n        }\r\n    });\r\n    mSlidingTabLayout = (SlidingTabLayout) findViewById(R.id.sliding_tabs);\r\n    mSlidingTabLayout.setViewPager(mViewPager);\r\n    if (getSupportActionBar() != null) {\r\n        getSupportActionBar().setTitle(R.string.title_activity_template_editor);\r\n        getSupportActionBar().setSubtitle(col.getModels().get(mModelId).optString(\"name\"));\r\n    }\r\n    try {\r\n        if (mModelBackup == null) {\r\n            mModelBackup = new JSONObject(col.getModels().get(mModelId).toString());\r\n        }\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    Timber.i(\"CardTemplateEditor:: Card template editor successfully started for model id %d\", mModelId);\r\n    if (mOrdId != -1) {\r\n        mViewPager.setCurrentItem(mOrdId);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.CardTemplateEditor.onCollectionLoaded",
	"Comment": "callback used to finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n}"
}, {
	"Path": "com.ichi2.anki.CardTemplateEditor.onCollectionLoaded",
	"Comment": "callback used to finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    CardTemplateFragment fragment = (CardTemplateFragment) mTemplateAdapter.instantiateItem(mViewPager, position);\r\n    if (fragment != null) {\r\n        fragment.updateCss();\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.CardTemplateEditor.onCollectionLoaded",
	"Comment": "callback used to finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n}"
}, {
	"Path": "com.apollographql.apollo.internal.json.JsonUtf8Writer.beforeValue",
	"Comment": "inserts any necessary separators and whitespace before a literal value,inline array, or inline object. also adjusts the stack to expect either aclosing bracket or another element.",
	"Method": "void beforeValue(){\r\n    switch(peekScope()) {\r\n        case NONEMPTY_DOCUMENT:\r\n            if (!lenient) {\r\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\r\n            }\r\n        case EMPTY_DOCUMENT:\r\n            replaceTop(NONEMPTY_DOCUMENT);\r\n            break;\r\n        case EMPTY_ARRAY:\r\n            replaceTop(NONEMPTY_ARRAY);\r\n            newline();\r\n            break;\r\n        case NONEMPTY_ARRAY:\r\n            sink.writeByte(',');\r\n            newline();\r\n            break;\r\n        case DANGLING_NAME:\r\n            sink.writeUtf8(separator);\r\n            replaceTop(NONEMPTY_OBJECT);\r\n            break;\r\n        default:\r\n            throw new IllegalStateException(\"Nesting problem.\");\r\n    }\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.PageFlip.setPixelsOfMesh",
	"Comment": "sets pixels of each meshthe default value is 10 pixels for each mesh",
	"Method": "PageFlip setPixelsOfMesh(int pixelsOfMesh){\r\n    mPixelsOfMesh = pixelsOfMesh > 0 ? pixelsOfMesh : DEFAULT_MESH_VERTEX_PIXELS;\r\n    return this;\r\n}"
}, {
	"Path": "com.eschao.android.widget.sample.pageflip.PageFlipView.newHandler",
	"Comment": "create message handler to cope with messages from page render,page render will send message in gl thread, but we want to handle thosemessages in main thread that why we need handler here",
	"Method": "void newHandler(){\r\n    mHandler = new Handler() {\r\n        public void handleMessage(Message msg) {\r\n            switch(msg.what) {\r\n                case PageRender.MSG_ENDED_DRAWING_FRAME:\r\n                    try {\r\n                        mDrawLock.lock();\r\n                        if (mPageRender != null && mPageRender.onEndedDrawing(msg.arg1)) {\r\n                            requestRender();\r\n                        }\r\n                    } finally {\r\n                        mDrawLock.unlock();\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n}"
}, {
	"Path": "com.eschao.android.widget.sample.pageflip.PageFlipView.newHandler",
	"Comment": "create message handler to cope with messages from page render,page render will send message in gl thread, but we want to handle thosemessages in main thread that why we need handler here",
	"Method": "void newHandler(){\r\n    switch(msg.what) {\r\n        case PageRender.MSG_ENDED_DRAWING_FRAME:\r\n            try {\r\n                mDrawLock.lock();\r\n                if (mPageRender != null && mPageRender.onEndedDrawing(msg.arg1)) {\r\n                    requestRender();\r\n                }\r\n            } finally {\r\n                mDrawLock.unlock();\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.setValues",
	"Comment": "sets the values, per property, being animated between. this function is called internallyby the constructors of valueanimator that take a list of values. but an valueanimator canbe constructed without values and this method can be called to set the values manuallyinstead.",
	"Method": "void setValues(PropertyValuesHolder values){\r\n    int numValues = values.length;\r\n    mValues = values;\r\n    mValuesMap = new HashMap<String, PropertyValuesHolder>(numValues);\r\n    for (int i = 0; i < numValues; ++i) {\r\n        PropertyValuesHolder valuesHolder = values[i];\r\n        mValuesMap.put(valuesHolder.getPropertyName(), valuesHolder);\r\n    }\r\n    mInitialized = false;\r\n}"
}, {
	"Path": "org.agrona.collections.Int2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Integer, Integer>() {\r\n        public Integer[] createKeyArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public Integer[] createValueArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public SampleElements<Map.Entry<Integer, Integer>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n        }\r\n        public Map<Integer, Integer> create(final Object... entries) {\r\n            final Int2NullableObjectHashMap<Integer> map = new Int2NullableObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Integer, Integer>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Integer, Integer>> order(final List<Map.Entry<Integer, Integer>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Int2NullableObjectHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Int2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n}"
}, {
	"Path": "org.agrona.collections.Int2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Int2NullableObjectHashMap<Integer> map = new Int2NullableObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Int2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.setInterpolator",
	"Comment": "sets the optional interpolator for this keyframe. a value of null indicatesthat there is no interpolation, which is the same as linear interpolation.",
	"Method": "void setInterpolator(Interpolator interpolator){\r\n    mInterpolator = interpolator;\r\n}"
}, {
	"Path": "com.ichi2.utils.Threads.checkNotMainThread",
	"Comment": "checks that it is not called from the main thread and fails if it is.",
	"Method": "void checkNotMainThread(){\r\n    if (isOnMainThread()) {\r\n        Timber.e(\"must not be called on the main thread\");\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,short[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.api.BDDSoftAssertionsTest.object_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test",
	"Comment": "the test would fail if any method was not proxyable as the assertion error would not be softly caught",
	"Method": "void object_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){\r\n    Name name = name(\"John\", \"Doe\");\r\n    Object alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n    Object vowels = asList(\"a\", \"e\", \"i\", \"o\", \"u\");\r\n    softly.then(name).extracting(\"first\", \"last\").contains(\"John\").contains(\"gandalf\");\r\n    softly.then(name).extracting(Name::getFirst, Name::getLast).contains(\"John\").contains(\"frodo\");\r\n    softly.then(alphabet).asString().startsWith(\"abc\").startsWith(\"123\");\r\n    softly.then(vowels).asList().startsWith(\"a\", \"e\").startsWith(\"1\", \"2\");\r\n    softly.then(name).as(\"extracting(Name::getFirst)\").overridingErrorMessage(\"error message\").extracting(Name::getFirst).isEqualTo(\"Jack\");\r\n    List<Throwable> errorsCollected = softly.errorsCollected();\r\n    assertThat(errorsCollected).hasSize(5);\r\n    assertThat(errorsCollected.get(0)).hasMessageContaining(\"gandalf\");\r\n    assertThat(errorsCollected.get(1)).hasMessageContaining(\"frodo\");\r\n    assertThat(errorsCollected.get(2)).hasMessageContaining(\"123\");\r\n    assertThat(errorsCollected.get(3)).hasMessageContaining(\"\\\"1\\\", \\\"2\\\"\");\r\n    assertThat(errorsCollected.get(4)).hasMessage(\"[extracting(Name::getFirst)] error message\");\r\n}"
}, {
	"Path": "org.agrona.BitUtil.fromHex",
	"Comment": "generate a byte array from a string that is the hex representation of the given byte array.",
	"Method": "byte[] fromHex(String string){\r\n    return fromHexByteArray(string.getBytes(UTF_8));\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.AbstractClientOptionsBuilder.defaultWriteTimeoutMillis",
	"Comment": "sets the default timeout of a socket write attempt in milliseconds.",
	"Method": "B defaultWriteTimeoutMillis(long defaultWriteTimeoutMillis){\r\n    return option(ClientOption.DEFAULT_WRITE_TIMEOUT_MILLIS, defaultWriteTimeoutMillis);\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractZonedDateTimeAssert.haveSameYear",
	"Comment": "returns true if both datetime are in the same year, false otherwise.",
	"Method": "boolean haveSameYear(ZonedDateTime actual,ZonedDateTime other){\r\n    return actual.getYear() == other.getYear();\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,double[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.actionbarsherlock.view.ActionMode.isUiFocusable",
	"Comment": "returns whether the ui presenting this action mode can take focus or not.this is used by internal components within the framework that would otherwisepresent an action mode ui that requires focus, such as an edittext as a custom view.",
	"Method": "boolean isUiFocusable(){\r\n    return true;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlServiceProviderBuilder.metadataPath",
	"Comment": "sets a url for retrieving a metadata of this service provider.",
	"Method": "SamlServiceProviderBuilder metadataPath(String metadataPath){\r\n    this.metadataPath = requireNonNull(metadataPath, \"metadataPath\");\r\n    return this;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.ServerConfig.gracefulShutdownTimeout",
	"Comment": "returns the number of milliseconds to wait before shutting down the server regardless of activerequests.",
	"Method": "Duration gracefulShutdownTimeout(){\r\n    return gracefulShutdownTimeout;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Comparables.assertGreaterThanOrEqualTo",
	"Comment": "asserts that the actual value is greater than or equal to the other one.",
	"Method": "void assertGreaterThanOrEqualTo(AssertionInfo info,T actual,T other){\r\n    assertNotNull(info, actual);\r\n    if (!isLessThan(actual, other))\r\n        return;\r\n    throw failures.failure(info, shouldBeGreaterOrEqual(actual, other, comparisonStrategy));\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.setupStartValue",
	"Comment": "this function is called by objectanimator when setting the start values for an animation.the start values are set according to the current values in the target object. theproperty whose value is extracted is whatever is specified by the propertyname of thispropertyvaluesholder object.",
	"Method": "void setupStartValue(Object target){\r\n    setupValue(target, mKeyframeSet.mKeyframes.get(0));\r\n}"
}, {
	"Path": "org.assertj.core.internal.Comparables.assertIsBetween",
	"Comment": "asserts that the actual value is between start and end, inclusive or not.",
	"Method": "void assertIsBetween(AssertionInfo info,T actual,T start,T end,boolean inclusiveStart,boolean inclusiveEnd){\r\n    assertNotNull(info, actual);\r\n    checkNotNull(start, \"The start range to compare actual with should not be null\");\r\n    checkNotNull(end, \"The end range to compare actual with should not be null\");\r\n    checkBoundsValidity(start, end, inclusiveStart, inclusiveEnd);\r\n    boolean checkLowerBoundaryRange = inclusiveStart ? !isGreaterThan(start, actual) : isLessThan(start, actual);\r\n    boolean checkUpperBoundaryRange = inclusiveEnd ? !isGreaterThan(actual, end) : isLessThan(actual, end);\r\n    if (checkLowerBoundaryRange && checkUpperBoundaryRange)\r\n        return;\r\n    throw failures.failure(info, shouldBeBetween(actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy));\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerBuilder.counterSlidingWindowMillis",
	"Comment": "sets the time length of sliding window to accumulate the count of events.",
	"Method": "CircuitBreakerBuilder counterSlidingWindowMillis(long counterSlidingWindowMillis){\r\n    counterSlidingWindow(Duration.ofMillis(counterSlidingWindowMillis));\r\n    return this;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.cors.CorsServiceBuilder.preflightResponseHeader",
	"Comment": "returns http response headers that should be added to a cors preflight response.an intermediary like a load balancer might require that a cors preflight requesthave certain headers set. this enables such headers to be added.",
	"Method": "CorsServiceBuilder preflightResponseHeader(String name,Object values,CorsServiceBuilder preflightResponseHeader,AsciiString name,Object values,CorsServiceBuilder preflightResponseHeader,AsciiString name,Iterable<T> values,CorsServiceBuilder preflightResponseHeader,AsciiString name,Supplier<T> valueSupplier){\r\n    requireNonNull(name, \"name\");\r\n    requireNonNull(valueSupplier, \"valueSupplier\");\r\n    preflightResponseHeaders.put(name, valueSupplier);\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Numbers.assertIsNotCloseToPercentage",
	"Comment": "asserts that the actual value is not close to the an offset expressed as an percentage value.",
	"Method": "void assertIsNotCloseToPercentage(AssertionInfo info,NUMBER actual,NUMBER other,Percentage percentage){\r\n    assertNotNull(info, actual);\r\n    checkPercentageIsNotNull(percentage);\r\n    checkNumberIsNotNull(other);\r\n    double diff = abs(percentage.value * other.doubleValue() / 100d);\r\n    boolean areEqual = areEqual(actual, other);\r\n    if (!areEqual && Double.isInfinite(diff))\r\n        return;\r\n    if (absDiff(actual, other).doubleValue() <= diff || areEqual)\r\n        throw failures.failure(info, shouldNotBeEqualWithinPercentage(actual, other, percentage, absDiff(actual, other)));\r\n}"
}, {
	"Path": "com.ichi2.libanki.Decks.update",
	"Comment": "add or update an existing deck. used for syncing and merging.",
	"Method": "void update(JSONObject g){\r\n    try {\r\n        mDecks.put(g.getLong(\"id\"), g);\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    maybeAddToActive();\r\n    save();\r\n}"
}, {
	"Path": "org.agrona.collections.ArrayUtil.ensureCapacity",
	"Comment": "ensure an array has the required capacity. resizing only if needed.",
	"Method": "T[] ensureCapacity(T[] oldElements,int requiredLength){\r\n    T[] result = oldElements;\r\n    if (oldElements.length < requiredLength) {\r\n        result = Arrays.copyOf(oldElements, requiredLength);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.setDuration",
	"Comment": "sets the length of the animation. the default duration is 300 milliseconds.",
	"Method": "ObjectAnimator setDuration(long duration){\r\n    super.setDuration(duration);\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.getInterpolator",
	"Comment": "gets the optional interpolator for this keyframe. a value of null indicatesthat there is no interpolation, which is the same as linear interpolation.",
	"Method": "Interpolator getInterpolator(){\r\n    return mInterpolator;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerBuilder.counterUpdateIntervalMillis",
	"Comment": "sets the interval that a circuit breaker can see the latest accumulated count of events.",
	"Method": "CircuitBreakerBuilder counterUpdateIntervalMillis(long counterUpdateIntervalMillis){\r\n    counterUpdateInterval(Duration.ofMillis(counterUpdateIntervalMillis));\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAbsSpinner.requestLayout",
	"Comment": "override to prevent spamming ourselves with layout requestsas we place views",
	"Method": "void requestLayout(){\r\n    if (!mBlockLayoutRequests) {\r\n        super.requestLayout();\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.Statistics.selectDeckById",
	"Comment": "iterates the drop down decks, and selects the one matching the given id",
	"Method": "boolean selectDeckById(long deckId){\r\n    for (int dropDownDeckIdx = 0; dropDownDeckIdx < mDropDownDecks.size(); dropDownDeckIdx++) {\r\n        try {\r\n            if (mDropDownDecks.get(dropDownDeckIdx).getLong(\"id\") == deckId) {\r\n                selectDropDownItem(dropDownDeckIdx + 1);\r\n                return true;\r\n            }\r\n        } catch (JSONException e) {\r\n            throw new RuntimeException();\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.actionbarsherlock.ActionBarSherlock.unregisterImplementation",
	"Comment": "unregister an actionbarsherlock implementation. this should beconsidered very volatile and you should only use it if you know whatyou are doing. you have been warned.",
	"Method": "boolean unregisterImplementation(Class<? extends ActionBarSherlock> implementationClass){\r\n    return IMPLEMENTATIONS.values().remove(implementationClass);\r\n}"
}, {
	"Path": "proton.inject.util.ArrayDeque.clear",
	"Comment": "removes all of the elements from this deque.the deque will be empty after this call returns.",
	"Method": "void clear(){\r\n    int h = head;\r\n    int t = tail;\r\n    if (h != t) {\r\n        head = tail = 0;\r\n        int i = h;\r\n        int mask = elements.length - 1;\r\n        do {\r\n            elements[i] = null;\r\n            i = (i + 1) & mask;\r\n        } while (i != t);\r\n    }\r\n}"
}, {
	"Path": "com.spotify.apollo.test.StubClient.strictUriMatcher",
	"Comment": "create a request matcher that does a strict comparison by uri.",
	"Method": "Matcher<Request> strictUriMatcher(String uri){\r\n    return new TypeSafeMatcher<Request>() {\r\n        @Override\r\n        protected boolean matchesSafely(Request request) {\r\n            return uri.equals(request.uri());\r\n        }\r\n        @Override\r\n        public void describeTo(Description description) {\r\n            description.appendText(\"with uri\");\r\n            description.appendValue(uri);\r\n        }\r\n    };\r\n}"
}, {
	"Path": "com.spotify.apollo.test.StubClient.strictUriMatcher",
	"Comment": "create a request matcher that does a strict comparison by uri.",
	"Method": "Matcher<Request> strictUriMatcher(String uri){\r\n    return uri.equals(request.uri());\r\n}"
}, {
	"Path": "com.spotify.apollo.test.StubClient.strictUriMatcher",
	"Comment": "create a request matcher that does a strict comparison by uri.",
	"Method": "Matcher<Request> strictUriMatcher(String uri){\r\n    description.appendText(\"with uri\");\r\n    description.appendValue(uri);\r\n}"
}, {
	"Path": "com.spotify.apollo.metrics.MetricsTrackingOngoingRequest.incrementDownstreamRequests",
	"Comment": "increment number of downstream calls associated with this request.",
	"Method": "void incrementDownstreamRequests(){\r\n    requestCounter.incrementAndGet();\r\n}"
}, {
	"Path": "com.ichi2.async.DeckTask.doInBackground",
	"Comment": "this method and those that are called here are executed in a new thread",
	"Method": "TaskData doInBackground(TaskData params){\r\n    super.doInBackground(params);\r\n    if (mPreviousTask != null && mPreviousTask.getStatus() != AsyncTask.Status.FINISHED) {\r\n        Timber.d(\"Waiting for %d to finish before starting %d\", mPreviousTask.mType, mType);\r\n        try {\r\n            mPreviousTask.get();\r\n            Timber.d(\"Finished waiting for %d to finish. Status= %s\", mPreviousTask.mType, mPreviousTask.getStatus());\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n            Timber.d(e, \"interrupted while waiting for previous task: %d\", mPreviousTask.mType);\r\n            return null;\r\n        } catch (ExecutionException e) {\r\n            Timber.e(e, \"previously running task failed with exception: %d\", mPreviousTask.mType);\r\n        } catch (CancellationException e) {\r\n            Timber.d(e, \"previously running task was cancelled: %d\", mPreviousTask.mType);\r\n        }\r\n    }\r\n    sLatestInstance = this;\r\n    mContext = AnkiDroidApp.getInstance().getApplicationContext();\r\n    if (mType != TASK_TYPE_REPAIR_DECK && CollectionHelper.getInstance().getColSafe(mContext) == null) {\r\n        Timber.e(\"Aborting DeckTask %d as Collection could not be opened\", mType);\r\n        return null;\r\n    }\r\n    switch(mType) {\r\n        case TASK_TYPE_LOAD_DECK_COUNTS:\r\n            return doInBackgroundLoadDeckCounts(params);\r\n        case TASK_TYPE_SAVE_COLLECTION:\r\n            return doInBackgroundSaveCollection(params);\r\n        case TASK_TYPE_ANSWER_CARD:\r\n            return doInBackgroundAnswerCard(params);\r\n        case TASK_TYPE_ADD_FACT:\r\n            return doInBackgroundAddNote(params);\r\n        case TASK_TYPE_UPDATE_FACT:\r\n            return doInBackgroundUpdateNote(params);\r\n        case TASK_TYPE_UPDATE_FACTS_MULTI:\r\n            return doInBackgroundUpdateNotes(params);\r\n        case TASK_TYPE_UNDO:\r\n            return doInBackgroundUndo(params);\r\n        case TASK_TYPE_SEARCH_CARDS:\r\n            return doInBackgroundSearchCards(params);\r\n        case TASK_TYPE_DISMISS:\r\n            return doInBackgroundDismissNote(params);\r\n        case TASK_TYPE_DISMISS_MULTI:\r\n            return doInBackgroundDismissNotes(params);\r\n        case TASK_TYPE_CHECK_DATABASE:\r\n            return doInBackgroundCheckDatabase(params);\r\n        case TASK_TYPE_REPAIR_DECK:\r\n            return doInBackgroundRepairDeck(params);\r\n        case TASK_TYPE_UPDATE_VALUES_FROM_DECK:\r\n            return doInBackgroundUpdateValuesFromDeck(params);\r\n        case TASK_TYPE_DELETE_DECK:\r\n            return doInBackgroundDeleteDeck(params);\r\n        case TASK_TYPE_REBUILD_CRAM:\r\n            return doInBackgroundRebuildCram(params);\r\n        case TASK_TYPE_EMPTY_CRAM:\r\n            return doInBackgroundEmptyCram(params);\r\n        case TASK_TYPE_IMPORT:\r\n            return doInBackgroundImportAdd(params);\r\n        case TASK_TYPE_IMPORT_REPLACE:\r\n            return doInBackgroundImportReplace(params);\r\n        case TASK_TYPE_EXPORT_APKG:\r\n            return doInBackgroundExportApkg(params);\r\n        case TASK_TYPE_REORDER:\r\n            return doInBackgroundReorder(params);\r\n        case TASK_TYPE_CONF_CHANGE:\r\n            return doInBackgroundConfChange(params);\r\n        case TASK_TYPE_CONF_RESET:\r\n            return doInBackgroundConfReset(params);\r\n        case TASK_TYPE_CONF_REMOVE:\r\n            return doInBackgroundConfRemove(params);\r\n        case TASK_TYPE_CONF_SET_SUBDECKS:\r\n            return doInBackgroundConfSetSubdecks(params);\r\n        case TASK_TYPE_RENDER_BROWSER_QA:\r\n            return doInBackgroundRenderBrowserQA(params);\r\n        case TASK_TYPE_CHECK_MEDIA:\r\n            return doInBackgroundCheckMedia(params);\r\n        case TASK_TYPE_ADD_TEMPLATE:\r\n            return doInBackgroundAddTemplate(params);\r\n        case TASK_TYPE_REMOVE_TEMPLATE:\r\n            return doInBackgroundRemoveTemplate(params);\r\n        case TASK_TYPE_COUNT_MODELS:\r\n            return doInBackgroundCountModels(params);\r\n        case TASK_TYPE_DELETE_MODEL:\r\n            return doInBackGroundDeleteModel(params);\r\n        case TASK_TYPE_DELETE_FIELD:\r\n            return doInBackGroundDeleteField(params);\r\n        case TASK_TYPE_REPOSITION_FIELD:\r\n            return doInBackGroundRepositionField(params);\r\n        case TASK_TYPE_ADD_FIELD:\r\n            return doInBackGroundAddField(params);\r\n        case TASK_TYPE_CHANGE_SORT_FIELD:\r\n            return doInBackgroundChangeSortField(params);\r\n        case TASK_TYPE_SAVE_MODEL:\r\n            return doInBackgroundSaveModel(params);\r\n        case TASK_TYPE_FIND_EMPTY_CARDS:\r\n            return doInBackGroundFindEmptyCards(params);\r\n        case TASK_TYPE_CHECK_CARD_SELECTION:\r\n            return doInBackgroundCheckCardSelection(params);\r\n        default:\r\n            Timber.e(\"unknown task type: %d\", mType);\r\n            return null;\r\n    }\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Integer, Integer>() {\r\n        public Integer[] createKeyArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public Integer[] createValueArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public SampleElements<Map.Entry<Integer, Integer>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n        }\r\n        public Map<Integer, Integer> create(final Object... entries) {\r\n            final Int2IntHashMap map = new Int2IntHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Integer, Integer>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Integer, Integer>> order(final List<Map.Entry<Integer, Integer>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Int2IntHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Int2IntHashMap map = new Int2IntHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.thrift.text.TTextProtocolTest.setUp",
	"Comment": "load a file containing a serialized thrift message in from disk.",
	"Method": "void setUp(){\r\n    fileContents = Resources.toString(Resources.getResource(getClass(), \"/com/linecorp/armeria/common/thrift/text/TTextProtocol_TestData.txt\"), Charsets.UTF_8);\r\n    base64Encoder = new Base64();\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,boolean[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Maps.assertContainsOnly",
	"Comment": "verifies that the actual map contains only the given entries and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,Map<K, V> actual,Map.Entry<? extends K, ? extends V> entries){\r\n    doCommonContainsCheck(info, actual, entries);\r\n    if (actual.isEmpty() && entries.length == 0) {\r\n        return;\r\n    }\r\n    failIfEmpty(entries);\r\n    Set<Map.Entry<? extends K, ? extends V>> notFound = new LinkedHashSet();\r\n    Set<Map.Entry<? extends K, ? extends V>> notExpected = new LinkedHashSet();\r\n    compareActualMapAndExpectedEntries(actual, entries, notExpected, notFound);\r\n    if (!notFound.isEmpty() || !notExpected.isEmpty())\r\n        throw failures.failure(info, shouldContainOnly(actual, entries, notFound, notExpected));\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntCounterMap.computeIfAbsent",
	"Comment": "try get a value for a key and if not present then apply mapping function.",
	"Method": "int computeIfAbsent(int key,IntUnaryOperator mappingFunction){\r\n    int value = get(key);\r\n    if (value == initialValue) {\r\n        value = mappingFunction.applyAsInt(key);\r\n        if (value != initialValue) {\r\n            put(key, value);\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "example.armeria.server.annotated.PathPatternService.regex",
	"Comment": "accesses the parameter with the name of the capturing group.",
	"Method": "String regex(String name){\r\n    return \"regex: \" + name;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsSpinner.setGravity",
	"Comment": "describes how the selected item view is positioned. currently only the horizontal componentis used. the default is determined by the current theme.",
	"Method": "void setGravity(int gravity){\r\n    if (mGravity != gravity) {\r\n        if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == 0) {\r\n            gravity |= Gravity.LEFT;\r\n        }\r\n        mGravity = gravity;\r\n        requestLayout();\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameDayOfMonth",
	"Comment": "returns true if both date are in the same year, month and day of month, false otherwise.",
	"Method": "boolean areInSameDayOfMonth(Date actual,Date other){\r\n    return areInSameMonth(actual, other) && dayOfMonthOf(actual) == dayOfMonthOf(other);\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.DefaultHttpResponseTest.abortedAggregation",
	"Comment": "the aggregation future must be completed even if the response being aggregated has been aborted.",
	"Method": "void abortedAggregation(){\r\n    final Thread mainThread = Thread.currentThread();\r\n    final HttpResponseWriter res = HttpResponse.streaming();\r\n    final CompletableFuture<AggregatedHttpMessage> future;\r\n    if (executorSpecified) {\r\n        if (withPooledObjects) {\r\n            future = res.aggregateWithPooledObjects(CommonPools.workerGroup().next(), PooledByteBufAllocator.DEFAULT);\r\n        } else {\r\n            future = res.aggregate(CommonPools.workerGroup().next());\r\n        }\r\n    } else {\r\n        if (withPooledObjects) {\r\n            future = res.aggregateWithPooledObjects(PooledByteBufAllocator.DEFAULT);\r\n        } else {\r\n            future = res.aggregate();\r\n        }\r\n    }\r\n    final AtomicReference<Thread> callbackThread = new AtomicReference();\r\n    assertThatThrownBy(() -> {\r\n        final CompletableFuture<AggregatedHttpMessage> f = future.whenComplete((unused, cause) -> callbackThread.set(Thread.currentThread()));\r\n        res.abort();\r\n        f.join();\r\n    }).hasCauseInstanceOf(AbortedStreamException.class);\r\n    assertThat(callbackThread.get()).isNotSameAs(mainThread);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertDoNotHave",
	"Comment": "assert that each element of given array not satisfies the given condition.",
	"Method": "void assertDoNotHave(AssertionInfo info,E[] actual,Condition<? super E> condition){\r\n    arrays.assertHaveNot(info, failures, conditions, actual, condition);\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.setBackTexture",
	"Comment": "set the back texture with given bitmapif given bitmap is null, the back texture will be same with the firsttexture",
	"Method": "void setBackTexture(Bitmap b){\r\n    if (b == null) {\r\n        if (mTexIDs[BACK_TEXTURE_ID] != INVALID_TEXTURE_ID) {\r\n            mUnusedTexIDs[mUnusedTexSize++] = mTexIDs[BACK_TEXTURE_ID];\r\n        }\r\n        mTexIDs[BACK_TEXTURE_ID] = INVALID_TEXTURE_ID;\r\n    } else {\r\n        int color = PageFlipUtils.computeAverageColor(b, 50);\r\n        maskColor[BACK_TEXTURE_ID][0] = Color.red(color) / 255.0f;\r\n        maskColor[BACK_TEXTURE_ID][1] = Color.green(color) / 255.0f;\r\n        maskColor[BACK_TEXTURE_ID][2] = Color.blue(color) / 255.0f;\r\n        glGenTextures(1, mTexIDs, BACK_TEXTURE_ID);\r\n        glBindTexture(GL_TEXTURE_2D, mTexIDs[BACK_TEXTURE_ID]);\r\n        glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);\r\n        glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\r\n        GLUtils.texImage2D(GL_TEXTURE_2D, 0, b, 0);\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroup.start",
	"Comment": "invoke this method at the end of the subclass constructor to initiate the queries.",
	"Method": "void start(){\r\n    checkState(!started);\r\n    started = true;\r\n    eventLoop.execute(this::sendQueries);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlSingleSignOnHandler.beforeInitiatingSso",
	"Comment": "invoked before the service provider sends an authentication request to an identity provider.",
	"Method": "CompletionStage<Void> beforeInitiatingSso(ServiceRequestContext ctx,HttpRequest req,MessageContext<AuthnRequest> message,SamlIdentityProviderConfig idpConfig){\r\n    return CompletableFuture.completedFuture(null);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.createVoiceWebSearchIntent",
	"Comment": "create and return an intent that can launch the voice search activity for web search.",
	"Method": "Intent createVoiceWebSearchIntent(Intent baseIntent,SearchableInfo searchable){\r\n    Intent voiceIntent = new Intent(baseIntent);\r\n    ComponentName searchActivity = searchable.getSearchActivity();\r\n    voiceIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, searchActivity == null ? null : searchActivity.flattenToShortString());\r\n    return voiceIntent;\r\n}"
}, {
	"Path": "com.ichi2.libanki.Utils.unescape",
	"Comment": "unescapes all sequences within the given string of text, interpreting them as html escaped characters.not that this code strips any html tags untouched, so if the text contains any html tags, they will be ignored.",
	"Method": "String unescape(String htmlText){\r\n    return CompatHelper.getCompat().fromHtml(htmlText).toString();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.dispatchRestoreInstanceState",
	"Comment": "override to prevent thawing of any views created by the adapter.",
	"Method": "void dispatchRestoreInstanceState(SparseArray<Parcelable> container){\r\n    dispatchThawSelfOnly(container);\r\n}"
}, {
	"Path": "com.ichi2.async.DeckTask.doInBackgroundCountModels",
	"Comment": "async task for the modelbrowser classreturns an arraylist of all models alphabetically ordered and the number of notesassociated with each model.",
	"Method": "TaskData doInBackgroundCountModels(TaskData params){\r\n    Timber.d(\"doInBackgroundLoadModels\");\r\n    Collection col = CollectionHelper.getInstance().getCol(mContext);\r\n    ArrayList<JSONObject> models = col.getModels().all();\r\n    ArrayList<Integer> cardCount = new ArrayList();\r\n    Collections.sort(models, new Comparator<JSONObject>() {\r\n        @Override\r\n        public int compare(JSONObject a, JSONObject b) {\r\n            try {\r\n                return a.getString(\"name\").compareTo(b.getString(\"name\"));\r\n            } catch (JSONException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    });\r\n    try {\r\n        for (JSONObject n : models) {\r\n            long modID = n.getLong(\"id\");\r\n            cardCount.add(col.getModels().nids(col.getModels().get(modID)).size());\r\n        }\r\n    } catch (JSONException e) {\r\n        Timber.e(\"doInBackgroundLoadModels :: JSONException\");\r\n        return new TaskData(false);\r\n    }\r\n    Object[] data = new Object[2];\r\n    data[0] = models;\r\n    data[1] = cardCount;\r\n    return (new TaskData(0, data, true));\r\n}"
}, {
	"Path": "com.ichi2.async.DeckTask.doInBackgroundCountModels",
	"Comment": "async task for the modelbrowser classreturns an arraylist of all models alphabetically ordered and the number of notesassociated with each model.",
	"Method": "TaskData doInBackgroundCountModels(TaskData params){\r\n    try {\r\n        return a.getString(\"name\").compareTo(b.getString(\"name\"));\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.YAxis.setOnFrame",
	"Comment": "set the axis to draw on the border between outer frame and plot",
	"Method": "void setOnFrame(){\r\n    this.isOnFrame = true;\r\n    xOffset = plotSheet.getxRange()[0];\r\n    markOnLeft = false;\r\n}"
}, {
	"Path": "com.apollographql.apollo.ApolloClient.clearNormalizedCache",
	"Comment": "clear all entries from the normalized cache. this is synchronous operation and will be executed int the currentthread",
	"Method": "void clearNormalizedCache(ApolloStoreOperation.Callback<Boolean> callback,boolean clearNormalizedCache){\r\n    return apolloStore.clearAll().execute();\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntHashMap.compact",
	"Comment": "compact the backing arrays by rehashing with a capacity just larger than current sizeand giving consideration to the load factor.",
	"Method": "void compact(){\r\n    @DoNotSub\r\n    final int idealCapacity = (int) Math.round(size() * (1.0d / loadFactor));\r\n    rehash(findNextPositivePowerOfTwo(Math.max(MIN_CAPACITY, idealCapacity)));\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertIsNotInstanceOf",
	"Comment": "verifies that the given object is not an instance of the given type.",
	"Method": "void assertIsNotInstanceOf(AssertionInfo info,Object actual,Class<?> type){\r\n    if (isInstanceOfClass(actual, type, info))\r\n        throw failures.failure(info, shouldNotBeInstance(actual, type));\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetTimeAssert.areEqualIgnoringSeconds",
	"Comment": "returns true if both offsettime are in the same hour and minute, false otherwise.",
	"Method": "boolean areEqualIgnoringSeconds(OffsetTime actual,OffsetTime other){\r\n    return haveSameHourField(actual, other) && haveSameMinute(actual, other);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.ServerBuilder.http",
	"Comment": "adds an http port that listens on all available network interfaces.",
	"Method": "ServerBuilder http(int port,ServerBuilder http,InetSocketAddress localAddress){\r\n    return port(new ServerPort(requireNonNull(localAddress, \"localAddress\"), HTTP));\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.FlagsTest.openSslAvailable",
	"Comment": "makes sure openssl sslengine is used instead of jdk sslengine while running testson linux, windows and os x.",
	"Method": "void openSslAvailable(){\r\n    assumeTrue(osName.startsWith(\"linux\") || osName.startsWith(\"windows\") || osName.startsWith(\"macosx\") || osName.startsWith(\"osx\"));\r\n    assumeFalse(\"false\".equals(System.getProperty(\"com.linecorp.armeria.useOpenSsl\")));\r\n    assertThat(Flags.useOpenSsl()).isTrue();\r\n    assertThat(OpenSsl.isAvailable()).isTrue();\r\n}"
}, {
	"Path": "org.assertj.core.util.diff.myers.MyersDiff.buildPath",
	"Comment": "computes the minimum diffpath that expresses de differencesbetween the original and revised sequences, accordingto gene myers differencing algorithm.",
	"Method": "PathNode buildPath(List<T> orig,List<T> rev){\r\n    checkArgument(orig != null, \"original sequence is null\");\r\n    checkArgument(rev != null, \"revised sequence is null\");\r\n    final int N = orig.size();\r\n    final int M = rev.size();\r\n    final int MAX = N + M + 1;\r\n    final int size = 1 + 2 * MAX;\r\n    final int middle = size / 2;\r\n    final PathNode[] diagonal = new PathNode[size];\r\n    diagonal[middle + 1] = new Snake(0, -1, null);\r\n    for (int d = 0; d < MAX; d++) {\r\n        for (int k = -d; k <= d; k += 2) {\r\n            final int kmiddle = middle + k;\r\n            final int kplus = kmiddle + 1;\r\n            final int kminus = kmiddle - 1;\r\n            PathNode prev;\r\n            int i;\r\n            if ((k == -d) || (k != d && diagonal[kminus].i < diagonal[kplus].i)) {\r\n                i = diagonal[kplus].i;\r\n                prev = diagonal[kplus];\r\n            } else {\r\n                i = diagonal[kminus].i + 1;\r\n                prev = diagonal[kminus];\r\n            }\r\n            diagonal[kminus] = null;\r\n            int j = i - k;\r\n            PathNode node = new DiffNode(i, j, prev);\r\n            while (i < N && j < M && equals(orig.get(i), rev.get(j))) {\r\n                i++;\r\n                j++;\r\n            }\r\n            if (i > node.i)\r\n                node = new Snake(i, j, node);\r\n            diagonal[kmiddle] = node;\r\n            if (i >= N && j >= M)\r\n                return diagonal[kmiddle];\r\n        }\r\n        diagonal[middle + d - 1] = null;\r\n    }\r\n    throw new IllegalStateException(\"could not find a diff path\");\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertHasNoNullFieldsOrPropertiesExcept",
	"Comment": "assert that the given object has no null fields except the given ones.",
	"Method": "void assertHasNoNullFieldsOrPropertiesExcept(AssertionInfo info,A actual,String propertiesOrFieldsToIgnore){\r\n    assertNotNull(info, actual);\r\n    Set<Field> declaredFieldsIncludingInherited = getDeclaredFieldsIncludingInherited(actual.getClass());\r\n    List<String> nullFieldNames = new LinkedList();\r\n    Set<String> ignoredFields = newLinkedHashSet(propertiesOrFieldsToIgnore);\r\n    for (Field field : declaredFieldsIncludingInherited) {\r\n        String fieldName = field.getName();\r\n        if (ignoredFields.contains(fieldName) || !canReadFieldValue(field, actual))\r\n            continue;\r\n        Object actualFieldValue = getPropertyOrFieldValue(actual, fieldName);\r\n        if (actualFieldValue == null)\r\n            nullFieldNames.add(fieldName);\r\n    }\r\n    if (!nullFieldNames.isEmpty())\r\n        throw failures.failure(info, shouldHaveNoNullFieldsExcept(actual, nullFieldNames, newArrayList(propertiesOrFieldsToIgnore)));\r\n}"
}, {
	"Path": "org.agrona.collections.Object2ObjectHashMap.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "com.ichi2.libanki.DB.getCursorMethodName",
	"Comment": "mapping of java type names to the corresponding cursor.get method.",
	"Method": "String getCursorMethodName(String typeName){\r\n    if (\"String\".equals(typeName)) {\r\n        return \"getString\";\r\n    } else if (\"Long\".equals(typeName)) {\r\n        return \"getLong\";\r\n    } else if (\"Integer\".equals(typeName)) {\r\n        return \"getInt\";\r\n    } else if (\"Float\".equals(typeName)) {\r\n        return \"getFloat\";\r\n    } else if (\"Double\".equals(typeName)) {\r\n        return \"getDouble\";\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertHasAllNullFieldsOrPropertiesExcept",
	"Comment": "asserts that the given object has null fields except the given ones.",
	"Method": "void assertHasAllNullFieldsOrPropertiesExcept(AssertionInfo info,A actual,String propertiesOrFieldsToIgnore){\r\n    assertNotNull(info, actual);\r\n    Set<Field> declaredFields = getDeclaredFieldsIncludingInherited(actual.getClass());\r\n    Set<String> ignoredFields = newLinkedHashSet(propertiesOrFieldsToIgnore);\r\n    List<String> nonNullFieldNames = declaredFields.stream().filter(field -> !ignoredFields.contains(field.getName())).filter(field -> canReadFieldValue(field, actual)).filter(field -> getPropertyOrFieldValue(actual, field.getName()) != null).map(Field::getName).collect(toList());\r\n    if (!nonNullFieldNames.isEmpty()) {\r\n        throw failures.failure(info, shouldHaveAllNullFields(actual, nonNullFieldNames, list(propertiesOrFieldsToIgnore)));\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.preferences.NumberRangePreference.getValidatedRangeFromString",
	"Comment": "return the string as an int with the number rounded to the nearest bound if it is outside of the acceptablerange.",
	"Method": "int getValidatedRangeFromString(String input){\r\n    if (TextUtils.isEmpty(input)) {\r\n        return mMin;\r\n    } else {\r\n        try {\r\n            return getValidatedRangeFromInt(Integer.parseInt(input));\r\n        } catch (NumberFormatException e) {\r\n            return mMin;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.getItemAtPosition",
	"Comment": "gets the data associated with the specified position in the list.",
	"Method": "Object getItemAtPosition(int position){\r\n    T adapter = getAdapter();\r\n    return (adapter == null || position < 0) ? null : adapter.getItem(position);\r\n}"
}, {
	"Path": "com.ichi2.anki.DeckOptions.getOptionsGroupCount",
	"Comment": "returns the number of decks using the options group of the current deck.",
	"Method": "int getOptionsGroupCount(){\r\n    int count = 0;\r\n    try {\r\n        long conf = mDeck.getLong(\"conf\");\r\n        for (JSONObject deck : mCol.getDecks().all()) {\r\n            if (deck.getInt(\"dyn\") == 1) {\r\n                continue;\r\n            }\r\n            if (deck.getLong(\"conf\") == conf) {\r\n                count++;\r\n            }\r\n        }\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    return count;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertHasSameClassAs",
	"Comment": "verifies that the actual value has the same class as the given object.",
	"Method": "void assertHasSameClassAs(AssertionInfo info,Object actual,Object other){\r\n    if (!haveSameClass(actual, other, info))\r\n        throw failures.failure(info, shouldHaveSameClass(actual, other));\r\n}"
}, {
	"Path": "org.assertj.core.util.introspection.MemberUtils.isPackageAccess",
	"Comment": "returns whether a given set of modifiers implies package access.",
	"Method": "boolean isPackageAccess(int modifiers){\r\n    return (modifiers & ACCESS_TEST) == 0;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.PageFlip.setListener",
	"Comment": "set listener for page flipset a page flip listener to determine if page can flip forward orbackward",
	"Method": "PageFlip setListener(OnPageFlipListener listener){\r\n    mListener = listener;\r\n    return this;\r\n}"
}, {
	"Path": "com.ichi2.libanki.hooks.AdvancedStatistics.calculateDueAsPlottableSimulationResult",
	"Comment": "determine forecast statistics based on a computation or simulation of future reviews and returns the results of the simulation.",
	"Method": "PlottableSimulationResult calculateDueAsPlottableSimulationResult(Stats.AxisType type,Collection mCol,String dids){\r\n    int end = 0;\r\n    int chunk = 0;\r\n    switch(type) {\r\n        case TYPE_MONTH:\r\n            end = 31;\r\n            chunk = 1;\r\n            break;\r\n        case TYPE_YEAR:\r\n            end = 52;\r\n            chunk = 7;\r\n            break;\r\n        case TYPE_LIFE:\r\n            end = 24;\r\n            chunk = 30;\r\n            break;\r\n    }\r\n    ArrayList<int[]> dues = new ArrayList();\r\n    EaseClassifier classifier = new EaseClassifier(mCol.getDb().getDatabase());\r\n    ReviewSimulator reviewSimulator = new ReviewSimulator(mCol.getDb().getDatabase(), classifier, end, chunk);\r\n    TodayStats todayStats = new TodayStats(mCol.getDb().getDatabase(), Settings.getDayStartCutoff((int) mCol.getCrt()));\r\n    long t0 = System.currentTimeMillis();\r\n    SimulationResult simulationResult = reviewSimulator.simNreviews(Settings.getToday((int) mCol.getCrt()), mCol.getDecks(), dids, todayStats);\r\n    long t1 = System.currentTimeMillis();\r\n    Timber.d(\"Simulation of all decks took: \" + (t1 - t0) + \" ms\");\r\n    int[][] nReviews = ArrayUtils.transposeMatrix(simulationResult.getNReviews());\r\n    int[][] nInState = ArrayUtils.transposeMatrix(simulationResult.getNInState());\r\n    for (int i = 0; i < nReviews.length; i++) {\r\n        // Time\r\n        dues.add(new int[] { i, nReviews[i][REVIEW_TYPE_LEARN], nReviews[i][REVIEW_TYPE_YOUNG], nReviews[i][REVIEW_TYPE_MATURE], nReviews[i][REVIEW_TYPE_RELEARN] });\r\n    }\r\n    if (dues.size() == 0 || dues.get(0)[0] > 0) {\r\n        dues.add(0, new int[] { 0, 0, 0, 0, 0 });\r\n    }\r\n    if (type == Stats.AxisType.TYPE_LIFE && dues.size() < 2) {\r\n        end = 31;\r\n    }\r\n    if (type != Stats.AxisType.TYPE_LIFE && dues.get(dues.size() - 1)[0] < end) {\r\n        dues.add(new int[] { end, 0, 0, 0, 0 });\r\n    } else if (type == Stats.AxisType.TYPE_LIFE && dues.size() < 2) {\r\n        dues.add(new int[] { Math.max(12, dues.get(dues.size() - 1)[0] + 1), 0, 0, 0, 0 });\r\n    }\r\n    double[][] nInStateCum = new double[dues.size()][];\r\n    for (int i = 0; i < dues.size(); i++) {\r\n        if (i < nInState.length) {\r\n            nInStateCum[i] = new double[] { i, 0, nInState[i][CARD_TYPE_MATURE], nInState[i][CARD_TYPE_YOUNG], nInState[i][CARD_TYPE_NEW] };\r\n        } else {\r\n            if (i == 0)\r\n                nInStateCum[i] = new double[] { i, 0, 0, 0, 0 };\r\n            else\r\n                nInStateCum[i] = nInStateCum[i - 1];\r\n        }\r\n    }\r\n    return new PlottableSimulationResult(dues, ArrayUtils.transposeMatrix(nInStateCum));\r\n}"
}, {
	"Path": "com.ichi2.themes.Themes.getCurrentTheme",
	"Comment": "return the current integer code of the theme being used, taking into accountwhether we are in day mode or night mode.",
	"Method": "int getCurrentTheme(Context context){\r\n    SharedPreferences prefs = AnkiDroidApp.getSharedPrefs(context);\r\n    if (prefs.getBoolean(\"invertedColors\", false)) {\r\n        return Integer.parseInt(prefs.getString(\"nightTheme\", \"0\"));\r\n    } else {\r\n        return Integer.parseInt(prefs.getString(\"dayTheme\", \"0\"));\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameMinute",
	"Comment": "returns true if both date are in the same year, month, day of month, hour and minute, false otherwise.",
	"Method": "boolean areInSameMinute(Date actual,Date other){\r\n    return areInSameHour(actual, other) && minuteOf(actual) == minuteOf(other);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.setSearchableInfo",
	"Comment": "sets the searchableinfo for this searchview. properties in the searchableinfo are usedto display labels, hints, suggestions, create intents for launching search results screensand controlling other affordances such as a voice button.",
	"Method": "void setSearchableInfo(SearchableInfo searchable){\r\n    mSearchable = searchable;\r\n    if (mSearchable != null) {\r\n        updateSearchAutoComplete();\r\n        updateQueryHint();\r\n    }\r\n    mVoiceButtonEnabled = hasVoiceSearch();\r\n    if (mVoiceButtonEnabled) {\r\n        mQueryTextView.setPrivateImeOptions(IME_OPTION_NO_MICROPHONE);\r\n    }\r\n    updateViewsVisibility(isIconified());\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,char[] actual,char[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.setQueryHint",
	"Comment": "sets the hint text to display in the query text field. this overrides any hint specifiedin the searchableinfo.",
	"Method": "void setQueryHint(CharSequence hint){\r\n    mQueryHint = hint;\r\n    updateQueryHint();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.file.HttpFileServiceConfig.maxCacheEntrySizeBytes",
	"Comment": "returns the maximum allowed size of a cached file entry. files bigger than this value will not becached.",
	"Method": "int maxCacheEntrySizeBytes(){\r\n    return maxCacheEntrySizeBytes;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.TabsLinearLayout.setMeasureWithLargestChildEnabled",
	"Comment": "when set to true, all children with a weight will be considered havingthe minimum size of the largest child. if false, all children aremeasured normally.disabled by default.",
	"Method": "void setMeasureWithLargestChildEnabled(boolean enabled){\r\n    mUseLargestChild = enabled;\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,boolean[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.spotify.apollo.metrics.RouteTransformMetricsExampleTest.responsePayloadSizeHistogram",
	"Comment": "middleware to track response payload size in a histogram,tagged with an endpoint tag set to the given endpoint name.",
	"Method": "Middleware<AsyncHandler<Response<ByteString>>, AsyncHandler<Response<ByteString>>> responsePayloadSizeHistogram(String endpointName){\r\n    final MetricId histogramId = MetricId.build().tagged(\"service\", serviceName).tagged(\"endpoint\", endpointName).tagged(\"what\", \"endpoint-response-size\");\r\n    final Histogram histogram = registry.histogram(histogramId);\r\n    return (inner) -> (requestContext) -> inner.invoke(requestContext).whenComplete((response, t) -> {\r\n        if (response != null) {\r\n            histogram.update(response.payload().map(ByteString::size).orElse(0));\r\n        }\r\n    });\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.unaryCall",
	"Comment": "immediately responds with a payload of the type and size specified in the request.",
	"Method": "void unaryCall(SimpleRequest req,StreamObserver<SimpleResponse> responseObserver){\r\n    ServerCallStreamObserver<SimpleResponse> obs = (ServerCallStreamObserver<SimpleResponse>) responseObserver;\r\n    SimpleResponse.Builder responseBuilder = SimpleResponse.newBuilder();\r\n    try {\r\n        switch(req.getResponseCompression()) {\r\n            case DEFLATE:\r\n            case GZIP:\r\n                obs.setCompression(\"gzip\");\r\n                break;\r\n            case NONE:\r\n                obs.setCompression(\"identity\");\r\n                break;\r\n            case UNRECOGNIZED:\r\n            default:\r\n                obs.onError(Status.INVALID_ARGUMENT.withDescription(\"Unknown: \" + req.getResponseCompression()).asRuntimeException());\r\n                return;\r\n        }\r\n    } catch (IllegalArgumentException e) {\r\n        obs.onError(Status.UNIMPLEMENTED.withDescription(\"compression not supported.\").withCause(e).asRuntimeException());\r\n        return;\r\n    }\r\n    if (req.getResponseSize() != 0) {\r\n        boolean compressable = compressableResponse(req.getResponseType());\r\n        ByteString dataBuffer = compressable ? compressableBuffer : uncompressableBuffer;\r\n        int offset = random.nextInt(compressable ? compressableBuffer.size() : uncompressableBuffer.size());\r\n        ByteString payload = generatePayload(dataBuffer, offset, req.getResponseSize());\r\n        responseBuilder.getPayloadBuilder().setType(compressable ? PayloadType.COMPRESSABLE : PayloadType.UNCOMPRESSABLE).setBody(payload);\r\n    }\r\n    if (req.hasResponseStatus()) {\r\n        obs.onError(Status.fromCodeValue(req.getResponseStatus().getCode()).withDescription(req.getResponseStatus().getMessage()).asRuntimeException());\r\n        return;\r\n    }\r\n    responseObserver.onNext(responseBuilder.build());\r\n    responseObserver.onCompleted();\r\n}"
}, {
	"Path": "com.ichi2.libanki.Media.removeFile",
	"Comment": "remove a file from the media directory if it exists and mark it as removed in the media database.",
	"Method": "void removeFile(String fname){\r\n    File f = new File(dir(), fname);\r\n    if (f.exists()) {\r\n        f.delete();\r\n    }\r\n    Timber.d(\"Marking media file removal in media db: %s\", fname);\r\n    mDb.execute(\"insert or replace into media values (?,?,?,?)\", new Object[] { fname, null, 0, 1 });\r\n}"
}, {
	"Path": "com.ichi2.anki.tests.ContentProviderTest.testQueryNextCard",
	"Comment": "test that query for the next card in the schedule returns a valid result without any deck selector",
	"Method": "void testQueryNextCard(){\r\n    Collection col;\r\n    col = CollectionHelper.getInstance().getCol(InstrumentationRegistry.getInstrumentation().getTargetContext());\r\n    Sched sched = col.getSched();\r\n    Cursor reviewInfoCursor = InstrumentationRegistry.getInstrumentation().getTargetContext().getContentResolver().query(FlashCardsContract.ReviewInfo.CONTENT_URI, null, null, null, null);\r\n    assertNotNull(reviewInfoCursor);\r\n    assertEquals(\"Check that we actually received one card\", 1, reviewInfoCursor.getCount());\r\n    reviewInfoCursor.moveToFirst();\r\n    int cardOrd = reviewInfoCursor.getInt(reviewInfoCursor.getColumnIndex(FlashCardsContract.ReviewInfo.CARD_ORD));\r\n    long noteID = reviewInfoCursor.getLong(reviewInfoCursor.getColumnIndex(FlashCardsContract.ReviewInfo.NOTE_ID));\r\n    Card nextCard = null;\r\n    for (int i = 0; i < 10; i++) {\r\n        sched.reset();\r\n        nextCard = sched.getCard();\r\n        if (nextCard.note().getId() == noteID && nextCard.getOrd() == cardOrd)\r\n            break;\r\n    }\r\n    assertNotNull(\"Check that there actually is a next scheduled card\", nextCard);\r\n    assertEquals(\"Check that received card and actual card have same note id\", nextCard.note().getId(), noteID);\r\n    assertEquals(\"Check that received card and actual card have same card ord\", nextCard.getOrd(), cardOrd);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Sound.expandSounds",
	"Comment": "expandsounds takes content with embedded sound file placeholders and expands them to reference the actual mediafile",
	"Method": "String expandSounds(String soundDir,String content){\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    String contentLeft = content;\r\n    Timber.d(\"expandSounds\");\r\n    Matcher matcher = sSoundPattern.matcher(content);\r\n    while (matcher.find()) {\r\n        String sound = matcher.group(1).trim();\r\n        String soundPath = getSoundPath(soundDir, sound);\r\n        String button;\r\n        if (CompatHelper.getSdkVersion() >= Build.VERSION_CODES.HONEYCOMB) {\r\n            button = \"<svg viewBox=\\\"0 0 32 32\\\"><polygon points=\\\"11,25 25,16 11,7\\\"/>Replay<\/svg>\";\r\n        } else {\r\n            button = \"<img src='file:///android_asset/inline_play_button.png' />\";\r\n        }\r\n        String soundMarker = matcher.group();\r\n        int markerStart = contentLeft.indexOf(soundMarker);\r\n        stringBuilder.append(contentLeft.substring(0, markerStart));\r\n        stringBuilder.append(\"<a class='replaybutton' href=\\\"playsound:\").append(soundPath).append(\"\\\">\").append(\"<span>\").append(button).append(\"<\/span><\/a>\");\r\n        contentLeft = contentLeft.substring(markerStart + soundMarker.length());\r\n        Timber.d(\"Content left = %s\", contentLeft);\r\n    }\r\n    stringBuilder.append(contentLeft);\r\n    return stringBuilder.toString();\r\n}"
}, {
	"Path": "org.agrona.DeadlineTimerWheel.forEach",
	"Comment": "iterate over wheel so all active timers can be consumed without expiring them.",
	"Method": "void forEach(TimerConsumer consumer){\r\n    long numTimersLeft = timerCount;\r\n    for (int j = currentTick, end = currentTick + wheel.length; j <= end; j++) {\r\n        final long[] array = wheel[j & wheelMask];\r\n        for (int i = 0, length = array.length; i < length; i++) {\r\n            final long deadline = array[i];\r\n            if (deadline != NULL_TIMER) {\r\n                consumer.accept(deadline, timerIdForSlot(j & wheelMask, i));\r\n                if (--numTimersLeft == 0) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.AbsActionBarView.setSplitActionBar",
	"Comment": "sets whether the bar should be split right now, no questions asked.",
	"Method": "void setSplitActionBar(boolean split){\r\n    mSplitActionBar = split;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.areEqualIgnoringTimezone",
	"Comment": "returns true if both offsetdatetime are in the same hour, minute, second and nanosecond false otherwise.",
	"Method": "boolean areEqualIgnoringTimezone(OffsetDateTime actual,OffsetDateTime other){\r\n    return areEqualIgnoringNanos(actual, other) && haveSameNano(actual, other);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertAreAtLeast",
	"Comment": "assert that there are at least n array elements satisfying the given condition.",
	"Method": "void assertAreAtLeast(AssertionInfo info,E[] actual,int n,Condition<? super E> condition){\r\n    arrays.assertAreAtLeast(info, failures, conditions, actual, n, condition);\r\n}"
}, {
	"Path": "org.assertj.core.data.TemporalUnitOffset.getDifference",
	"Comment": "returns absolute value of the difference according to time unit.",
	"Method": "long getDifference(Temporal temporal1,Temporal temporal2){\r\n    return abs(unit.between(temporal1, temporal2));\r\n}"
}, {
	"Path": "com.ichi2.preferences.StepsPreference.updateSettings",
	"Comment": "update settings to show a numeric keyboard instead of the default keyboard.this method should only be called once from the constructor.",
	"Method": "void updateSettings(){\r\n    getEditText().setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_CLASS_TEXT);\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.ConnectionLimitingHandler.validateMaxNumConnections",
	"Comment": "validates the maximum allowed number of open connections. it must be a positive number.",
	"Method": "int validateMaxNumConnections(int maxNumConnections){\r\n    if (maxNumConnections <= 0) {\r\n        throw new IllegalArgumentException(\"maxNumConnections: \" + maxNumConnections + \" (expected: > 0)\");\r\n    }\r\n    return maxNumConnections;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.isSubmitButtonEnabled",
	"Comment": "returns whether the submit button is enabled when necessary or never displayed.",
	"Method": "boolean isSubmitButtonEnabled(){\r\n    return mSubmitButtonEnabled;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.updateVoiceButton",
	"Comment": "update the visibility of the voice button.there are actually two voice search modes,either of which will activate the button.",
	"Method": "void updateVoiceButton(boolean empty){\r\n    int visibility = GONE;\r\n    if (mVoiceButtonEnabled && !isIconified() && empty) {\r\n        visibility = VISIBLE;\r\n        mSubmitButton.setVisibility(GONE);\r\n    }\r\n    mVoiceButton.setVisibility(visibility);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,Object[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.proposeMaxOrdered",
	"Comment": "set the value to a new proposedvalue if greater than the current value with memory ordering semantics.",
	"Method": "boolean proposeMaxOrdered(long proposedValue){\r\n    boolean updated = false;\r\n    if (UnsafeAccess.UNSAFE.getLong(byteArray, addressOffset) < proposedValue) {\r\n        UnsafeAccess.UNSAFE.putOrderedLong(byteArray, addressOffset, proposedValue);\r\n        updated = true;\r\n    }\r\n    return updated;\r\n}"
}, {
	"Path": "org.agrona.collections.Object2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Long, Long>() {\r\n        public Long[] createKeyArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public Long[] createValueArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public SampleElements<Map.Entry<Long, Long>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n        }\r\n        public Map<Long, Long> create(final Object... entries) {\r\n            final Object2NullableObjectHashMap<Long, Long> map = new Object2NullableObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Long, Long>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Long, Long>> order(final List<Map.Entry<Long, Long>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Object2NullableObjectHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Object2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n}"
}, {
	"Path": "org.agrona.collections.Object2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Object2NullableObjectHashMap<Long, Long> map = new Object2NullableObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Object2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2NullableObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "org.agrona.IoUtil.map",
	"Comment": "map a range of a file and return the address at which the range begins.",
	"Method": "long map(FileChannel fileChannel,FileChannel.MapMode mode,long offset,long length){\r\n    try {\r\n        return (long) MAP_ADDRESS.invoke(fileChannel, getMode(mode), offset, length);\r\n    } catch (final IllegalAccessException | InvocationTargetException ex) {\r\n        LangUtil.rethrowUnchecked(ex);\r\n    }\r\n    return 0;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.setDuration",
	"Comment": "sets the length of the animation. the default duration is 300 milliseconds.",
	"Method": "ValueAnimator setDuration(long duration){\r\n    if (duration < 0) {\r\n        throw new IllegalArgumentException(\"Animators cannot have negative duration: \" + duration);\r\n    }\r\n    mDuration = duration;\r\n    return this;\r\n}"
}, {
	"Path": "com.ichi2.anki.tests.ContentProviderTest.testInsertTemplate",
	"Comment": "check that inserting and removing a note into default deck works as expected",
	"Method": "void testInsertTemplate(){\r\n    final ContentResolver cr = InstrumentationRegistry.getInstrumentation().getTargetContext().getContentResolver();\r\n    Collection col = CollectionHelper.getInstance().getCol(InstrumentationRegistry.getInstrumentation().getTargetContext());\r\n    JSONObject model = Models.addBasicModel(col, BASIC_MODEL_NAME);\r\n    long modelId = model.getLong(\"id\");\r\n    Uri modelUri = ContentUris.withAppendedId(FlashCardsContract.Model.CONTENT_URI, modelId);\r\n    int testIndex = TEST_MODEL_CARDS.length - 1;\r\n    int expectedOrd = model.getJSONArray(\"tmpls\").length();\r\n    ContentValues cv = new ContentValues();\r\n    cv.put(FlashCardsContract.CardTemplate.NAME, TEST_MODEL_CARDS[testIndex]);\r\n    cv.put(FlashCardsContract.CardTemplate.QUESTION_FORMAT, TEST_MODEL_QFMT[testIndex]);\r\n    cv.put(FlashCardsContract.CardTemplate.ANSWER_FORMAT, TEST_MODEL_AFMT[testIndex]);\r\n    cv.put(FlashCardsContract.CardTemplate.BROWSER_QUESTION_FORMAT, TEST_MODEL_QFMT[testIndex]);\r\n    cv.put(FlashCardsContract.CardTemplate.BROWSER_ANSWER_FORMAT, TEST_MODEL_AFMT[testIndex]);\r\n    Uri templatesUri = Uri.withAppendedPath(modelUri, \"templates\");\r\n    Uri templateUri = cr.insert(templatesUri, cv);\r\n    col = reopenCol();\r\n    assertNotNull(\"Check template uri\", templateUri);\r\n    assertEquals(\"Check template uri ord\", expectedOrd, ContentUris.parseId(templateUri));\r\n    JSONObject template = col.getModels().get(modelId).getJSONArray(\"tmpls\").getJSONObject(expectedOrd);\r\n    assertEquals(\"Check template JSONObject ord\", expectedOrd, template.getInt(\"ord\"));\r\n    assertEquals(\"Check template name\", TEST_MODEL_CARDS[testIndex], template.getString(\"name\"));\r\n    assertEquals(\"Check qfmt\", TEST_MODEL_QFMT[testIndex], template.getString(\"qfmt\"));\r\n    assertEquals(\"Check afmt\", TEST_MODEL_AFMT[testIndex], template.getString(\"afmt\"));\r\n    assertEquals(\"Check bqfmt\", TEST_MODEL_QFMT[testIndex], template.getString(\"bqfmt\"));\r\n    assertEquals(\"Check bafmt\", TEST_MODEL_AFMT[testIndex], template.getString(\"bafmt\"));\r\n    col.getModels().rem(model);\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.MediaType.charset",
	"Comment": "returns an optional charset for the value of the charset parameter if it is specified.",
	"Method": "Optional<Charset> charset(){\r\n    Optional<Charset> local = parsedCharset;\r\n    if (local == null) {\r\n        String value = null;\r\n        local = Optional.empty();\r\n        for (String currentValue : parameters.get(CHARSET_ATTRIBUTE)) {\r\n            if (value == null) {\r\n                value = currentValue;\r\n                local = Optional.of(Charset.forName(value));\r\n            } else if (!value.equals(currentValue)) {\r\n                throw new IllegalStateException(\"Multiple charset values defined: \" + value + \", \" + currentValue);\r\n            }\r\n        }\r\n        parsedCharset = local;\r\n    }\r\n    return local;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.PathMapping.complexity",
	"Comment": "returns the complexity of this path mapping. it would be increased if this path mapping hasmore conditions to check.",
	"Method": "int complexity(){\r\n    return 0;\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.XAxis.setOnFrame",
	"Comment": "set the axis to draw on the border between outer frame and plot",
	"Method": "void setOnFrame(){\r\n    this.isOnFrame = true;\r\n    yOffset = plotSheet.getyRange()[0];\r\n    markOnDownside = false;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerBuilder.failureRateThreshold",
	"Comment": "sets the threshold of failure rate to detect a remote service fault.",
	"Method": "CircuitBreakerBuilder failureRateThreshold(double failureRateThreshold){\r\n    if (failureRateThreshold <= 0 || 1 < failureRateThreshold) {\r\n        throw new IllegalArgumentException(\"failureRateThreshold: \" + failureRateThreshold + \" (expected: > 0 and <= 1)\");\r\n    }\r\n    this.failureRateThreshold = failureRateThreshold;\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.setOnItemClickListener",
	"Comment": "register a callback to be invoked when an item in this adapterview hasbeen clicked.",
	"Method": "void setOnItemClickListener(OnItemClickListener listener){\r\n    mOnItemClickListener = listener;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameYear",
	"Comment": "returns true if both date are in the same year, false otherwise.",
	"Method": "boolean areInSameYear(Date actual,Date other){\r\n    return yearOf(actual) == yearOf(other);\r\n}"
}, {
	"Path": "org.assertj.core.api.ConcreteAssert.checkNull",
	"Comment": "not a really relevant assertion, the goal is to show how to write a new assertion with a specific error messagethat honors the description set by the assertion user.",
	"Method": "ConcreteAssert checkNull(){\r\n    WritableAssertionInfo info = getWritableAssertionInfo();\r\n    info.overridingErrorMessage(\"specific error message\");\r\n    Objects.instance().assertNull(info, actual);\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,float[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.onSuggestionsKey",
	"Comment": "react to the user typing while in the suggestions list. first, check foraction keys. if not handled, try refocusing regular characters into theedittext.",
	"Method": "boolean onSuggestionsKey(View v,int keyCode,KeyEvent event){\r\n    if (mSearchable == null) {\r\n        return false;\r\n    }\r\n    if (mSuggestionsAdapter == null) {\r\n        return false;\r\n    }\r\n    if (event.getAction() == KeyEvent.ACTION_DOWN && KeyEventCompat.hasNoModifiers(event)) {\r\n        if (keyCode == KeyEvent.KEYCODE_ENTER || keyCode == KeyEvent.KEYCODE_SEARCH || keyCode == KeyEvent.KEYCODE_TAB) {\r\n            int position = mQueryTextView.getListSelection();\r\n            return onItemClicked(position, KeyEvent.KEYCODE_UNKNOWN, null);\r\n        }\r\n        if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {\r\n            int selPoint = (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) ? 0 : mQueryTextView.length();\r\n            mQueryTextView.setSelection(selPoint);\r\n            mQueryTextView.setListSelection(0);\r\n            mQueryTextView.clearListSelection();\r\n            ensureImeVisible(mQueryTextView, true);\r\n            return true;\r\n        }\r\n        if (keyCode == KeyEvent.KEYCODE_DPAD_UP && 0 == mQueryTextView.getListSelection()) {\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.setFraction",
	"Comment": "sets the time for this keyframe, as a fraction of the overall animation duration.",
	"Method": "void setFraction(float fraction){\r\n    mFraction = fraction;\r\n}"
}, {
	"Path": "com.ichi2.libanki.sync.Syncer.throwExceptionIfCancelled",
	"Comment": "if the user asked to cancel the sync then we just throw a runtime exception which should be gracefully handled",
	"Method": "void throwExceptionIfCancelled(Connection con){\r\n    if (Connection.getIsCancelled()) {\r\n        Timber.i(\"Sync was cancelled\");\r\n        publishProgress(con, R.string.sync_cancelled);\r\n        try {\r\n            mServer.abort();\r\n        } catch (UnknownHttpResponseException e) {\r\n        }\r\n        throw new RuntimeException(\"UserAbortedSync\");\r\n    }\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Integer, Integer>() {\r\n        public Integer[] createKeyArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public Integer[] createValueArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public SampleElements<Map.Entry<Integer, Integer>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n        }\r\n        public Map<Integer, Integer> create(final Object... entries) {\r\n            final Int2ObjectHashMap<Integer> map = new Int2ObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Integer, Integer>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Integer, Integer>> order(final List<Map.Entry<Integer, Integer>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Int2ObjectHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Int2ObjectHashMap<Integer> map = new Int2ObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "com.ichi2.libanki.DB.queryScalar",
	"Comment": "convenience method for querying the database for a single integer result.",
	"Method": "int queryScalar(String query,int queryScalar,String query,String[] selectionArgs){\r\n    Cursor cursor = null;\r\n    int scalar;\r\n    try {\r\n        cursor = mDatabase.query(query, selectionArgs);\r\n        if (!cursor.moveToNext()) {\r\n            return 0;\r\n        }\r\n        scalar = cursor.getInt(0);\r\n    } finally {\r\n        if (cursor != null) {\r\n            cursor.close();\r\n        }\r\n    }\r\n    return scalar;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.limit.ConcurrencyLimitingHttpClientTest.testTimeout",
	"Comment": "tests if the request is not delegated but closed when the timeout is reached before delegation.",
	"Method": "void testTimeout(){\r\n    final ClientRequestContext ctx1 = newContext();\r\n    final ClientRequestContext ctx2 = newContext();\r\n    final HttpRequest req1 = mock(HttpRequest.class);\r\n    final HttpRequest req2 = mock(HttpRequest.class);\r\n    final HttpResponseWriter actualRes1 = HttpResponse.streaming();\r\n    final HttpResponseWriter actualRes2 = HttpResponse.streaming();\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\r\n    when(delegate.execute(ctx1, req1)).thenReturn(actualRes1);\r\n    when(delegate.execute(ctx2, req2)).thenReturn(actualRes2);\r\n    final ConcurrencyLimitingHttpClient client = newDecorator(1, 500, TimeUnit.MILLISECONDS).apply(delegate);\r\n    final HttpResponse res1 = client.execute(ctx1, req1);\r\n    final HttpResponse res2 = client.execute(ctx2, req2);\r\n    Thread.sleep(1000);\r\n    res2.subscribe(NoopSubscriber.get());\r\n    assertThatThrownBy(() -> res2.completionFuture().join()).hasCauseInstanceOf(ResponseTimeoutException.class);\r\n    assertThat(res2.isOpen()).isFalse();\r\n    res1.subscribe(NoopSubscriber.get());\r\n    assertThat(res1.isOpen()).isTrue();\r\n    assertThat(res1.completionFuture()).isNotDone();\r\n    actualRes1.close();\r\n    await().untilAsserted(() -> assertThat(client.numActiveRequests()).isZero());\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractObjectArrayAssert.newObjectArrayAssert",
	"Comment": "to implement to return the corrct abstractobjectarrayassert subtype",
	"Method": "SELF newObjectArrayAssert(ELEMENT[] array,SELF newObjectArrayAssert,List<ELEMENT> filteredList){\r\n    ELEMENT[] filteredArray = toGenericArray(filteredList);\r\n    return newObjectArrayAssert(filteredArray).withAssertionState(myself);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Media.addFile",
	"Comment": "in ankidroid, adding a media file will not only copy it to the media directory, but will also insert an entryinto the media database marking it as a new addition.",
	"Method": "String addFile(File ofile){\r\n    String fname = writeData(ofile);\r\n    markFileAdd(fname);\r\n    return fname;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.thrift.ThriftStructuredLog.thriftServiceName",
	"Comment": "returns the fully qualified thrift service name which is associated to the log.",
	"Method": "String thriftServiceName(){\r\n    return thriftServiceName;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofInt",
	"Comment": "constructs and returns a propertyvaluesholder with a given property name andset of int values.",
	"Method": "PropertyValuesHolder ofInt(String propertyName,int values){\r\n    return new IntPropertyValuesHolder(propertyName, values);\r\n}"
}, {
	"Path": "org.assertj.core.presentation.StandardRepresentation.registerFormatterForType",
	"Comment": "registers new formatter for the given type. all instances of the given type will be formatted with the provided formatter.",
	"Method": "void registerFormatterForType(Class<T> type,Function<T, String> formatter){\r\n    customFormatterByType.put(type, formatter);\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.fillModelList",
	"Comment": "fills the main list view with model names.handles filling the arraylists and attachingarrayadapters to main listview",
	"Method": "void fillModelList(){\r\n    mModelDisplayList = new ArrayList();\r\n    mModelIds = new ArrayList();\r\n    for (int i = 0; i < mModels.size(); i++) {\r\n        try {\r\n            mModelIds.add(mModels.get(i).getLong(\"id\"));\r\n            mModelDisplayList.add(new DisplayPair(mModels.get(i).getString(\"name\"), mCardCounts.get(i)));\r\n        } catch (JSONException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    mModelDisplayAdapter = new DisplayPairAdapter(this, mModelDisplayList);\r\n    mModelListView.setAdapter(mModelDisplayAdapter);\r\n    mModelListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n        @Override\r\n        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n            long noteTypeID = mModelIds.get(position);\r\n            mModelListPosition = position;\r\n            Intent noteOpenIntent = new Intent(ModelBrowser.this, ModelFieldEditor.class);\r\n            noteOpenIntent.putExtra(\"title\", mModelDisplayList.get(position).getName());\r\n            noteOpenIntent.putExtra(\"noteTypeID\", noteTypeID);\r\n            startActivityForResultWithAnimation(noteOpenIntent, 0, ActivityTransitionAnimation.LEFT);\r\n        }\r\n    });\r\n    mModelListView.setOnItemLongClickListener(new OnItemLongClickListener() {\r\n        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\r\n            String cardName = mModelDisplayList.get(position).getName();\r\n            mCurrentID = mModelIds.get(position);\r\n            mModelListPosition = position;\r\n            mContextMenu = ModelBrowserContextMenu.newInstance(cardName, mContextMenuListener);\r\n            showDialogFragment(mContextMenu);\r\n            return true;\r\n        }\r\n    });\r\n    updateSubtitleText();\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.fillModelList",
	"Comment": "fills the main list view with model names.handles filling the arraylists and attachingarrayadapters to main listview",
	"Method": "void fillModelList(){\r\n    long noteTypeID = mModelIds.get(position);\r\n    mModelListPosition = position;\r\n    Intent noteOpenIntent = new Intent(ModelBrowser.this, ModelFieldEditor.class);\r\n    noteOpenIntent.putExtra(\"title\", mModelDisplayList.get(position).getName());\r\n    noteOpenIntent.putExtra(\"noteTypeID\", noteTypeID);\r\n    startActivityForResultWithAnimation(noteOpenIntent, 0, ActivityTransitionAnimation.LEFT);\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.fillModelList",
	"Comment": "fills the main list view with model names.handles filling the arraylists and attachingarrayadapters to main listview",
	"Method": "void fillModelList(){\r\n    String cardName = mModelDisplayList.get(position).getName();\r\n    mCurrentID = mModelIds.get(position);\r\n    mModelListPosition = position;\r\n    mContextMenu = ModelBrowserContextMenu.newInstance(cardName, mContextMenuListener);\r\n    showDialogFragment(mContextMenu);\r\n    return true;\r\n}"
}, {
	"Path": "org.agrona.concurrent.ringbuffer.RecordDescriptor.encodedMsgOffset",
	"Comment": "the offset from the beginning of a record at which the encoded message begins.",
	"Method": "int encodedMsgOffset(int recordOffset){\r\n    return recordOffset + HEADER_LENGTH;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.endAnimation",
	"Comment": "called internally to end an animation by removing it from the animations list. must becalled on the ui thread.",
	"Method": "void endAnimation(){\r\n    sAnimations.get().remove(this);\r\n    sPendingAnimations.get().remove(this);\r\n    sDelayedAnims.get().remove(this);\r\n    mPlayingState = STOPPED;\r\n    if (mRunning && mListeners != null) {\r\n        ArrayList<AnimatorListener> tmpListeners = (ArrayList<AnimatorListener>) mListeners.clone();\r\n        int numListeners = tmpListeners.size();\r\n        for (int i = 0; i < numListeners; ++i) {\r\n            tmpListeners.get(i).onAnimationEnd(this);\r\n        }\r\n    }\r\n    mRunning = false;\r\n    mStarted = false;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.util.Exceptions.doThrowUnsafely",
	"Comment": "this black magic causes the java compiler to believe e is an unchecked exception type.",
	"Method": "void doThrowUnsafely(Throwable cause){\r\n    throw (E) cause;\r\n}"
}, {
	"Path": "org.agrona.collections.ObjectHashSet.capacity",
	"Comment": "get the total capacity for the set to which the load factor with be a fraction of.",
	"Method": "int capacity(){\r\n    return values.length;\r\n}"
}, {
	"Path": "com.apollographql.apollo.internal.json.JsonWriter.getPath",
	"Comment": "returns a jsonpath tothe current location in the json value.",
	"Method": "String getPath(){\r\n    return JsonScope.getPath(stackSize, scopes, pathNames, pathIndices);\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertContainsOnlyOnce",
	"Comment": "asserts that the given array contains only once the given values.",
	"Method": "void assertContainsOnlyOnce(AssertionInfo info,float[] actual,float[] values){\r\n    arrays.assertContainsOnlyOnce(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.ichi2.anki.ProductionCrashReportingTreeTest.testProductionDebugVerboseIgnored",
	"Comment": "the production logger ignores verbose and debug logs on purposemake sure these ignored log levels are not passed to the platform logger",
	"Method": "void testProductionDebugVerboseIgnored(){\r\n    Mockito.when(Log.v(anyString(), anyString(), any())).thenThrow(new RuntimeException(\"Verbose logging should have been ignored\"));\r\n    Mockito.when(Log.d(anyString(), anyString(), any())).thenThrow(new RuntimeException(\"Debug logging should be ignored\"));\r\n    try {\r\n        Timber.v(\"verbose\");\r\n        Timber.d(\"debug\");\r\n    } catch (Exception e) {\r\n        Assert.fail(\"we were unable to log without exception?\");\r\n    }\r\n}"
}, {
	"Path": "org.agrona.collections.IntArrayList.fastUnorderedRemove",
	"Comment": "removes element at index, but instead of copying all elements to the left,it replaces the item in the slot with the last item in the list. this avoids the copycosts at the expense of preserving list order. if index is the last element it is just removed.",
	"Method": "int fastUnorderedRemove(int index){\r\n    checkIndex(index);\r\n    final int value = elements[index];\r\n    elements[index] = elements[--size];\r\n    return value;\r\n}"
}, {
	"Path": "org.agrona.io.ExpandableDirectBufferOutputStream.position",
	"Comment": "the position in the buffer from the offset up to which has been written.",
	"Method": "int position(){\r\n    return position;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.getDuration",
	"Comment": "gets the length of each of the child animations of this animatorset. this value maybe less than 0, which indicates that no duration has been set on this animatorsetand each of the child animations will use their own duration.",
	"Method": "long getDuration(){\r\n    return mDuration;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getInterpolator",
	"Comment": "returns the timing interpolator that this valueanimator uses.",
	"Method": "Interpolator getInterpolator(){\r\n    return mInterpolator;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.view.menu.MenuBuilder.addInternal",
	"Comment": "adds an item to the menu.the other add methods funnel to this.",
	"Method": "MenuItem addInternal(int group,int id,int categoryOrder,CharSequence title){\r\n    final int ordering = getOrdering(categoryOrder);\r\n    final MenuItemImpl item = new MenuItemImpl(this, group, id, categoryOrder, ordering, title, mDefaultShowAsAction);\r\n    if (mCurrentMenuInfo != null) {\r\n        item.setMenuInfo(mCurrentMenuInfo);\r\n    }\r\n    mItems.add(findInsertIndex(mItems, ordering), item);\r\n    onItemsChanged(true);\r\n    return item;\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,long[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SuggestionsAdapter.setQueryRefinement",
	"Comment": "enables query refinement for all suggestions. this means that an additional iconwill be shown for each entry. when clicked, the suggested text on that line will becopied to the query text field.",
	"Method": "void setQueryRefinement(int refineWhat){\r\n    mQueryRefinement = refineWhat;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractZonedDateTimeAssert.areEqualIgnoringNanos",
	"Comment": "returns true if both datetime are in the same year, month and day of month, hour, minute and second, falseotherwise.",
	"Method": "boolean areEqualIgnoringNanos(ZonedDateTime actual,ZonedDateTime other){\r\n    return areEqualIgnoringSeconds(actual, other) && actual.getSecond() == other.getSecond();\r\n}"
}, {
	"Path": "org.agrona.BitUtil.previous",
	"Comment": "cycles indices of an array one at a time in a backwards fashion",
	"Method": "int previous(int current,int max){\r\n    if (0 == current) {\r\n        return max - 1;\r\n    }\r\n    return current - 1;\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.incrementOrdered",
	"Comment": "perform an atomic increment that is not safe across threads.",
	"Method": "long incrementOrdered(){\r\n    final long currentValue = UnsafeAccess.UNSAFE.getLong(byteArray, addressOffset);\r\n    UnsafeAccess.UNSAFE.putOrderedLong(byteArray, addressOffset, currentValue + 1);\r\n    return currentValue;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.PageFlip.getFirstPage",
	"Comment": "get the first pagefirst page is currently operating page which means it is the page userfinger is clicking or moving",
	"Method": "Page getFirstPage(){\r\n    return mPages[FIRST_PAGE];\r\n}"
}, {
	"Path": "com.ichi2.anki.Previewer.displayCardAnswer",
	"Comment": "called via mflipcardlistener in parent class when answer button pressed",
	"Method": "void displayCardAnswer(){\r\n    super.displayCardAnswer();\r\n    mShowingAnswer = true;\r\n    updateButtonState();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.cors.CorsService.setPreflightHeaders",
	"Comment": "this is a non cors specification feature which enables the setting of preflightresponse headers that might be required by intermediaries.",
	"Method": "void setPreflightHeaders(HttpHeaders headers){\r\n    for (Map.Entry<AsciiString, String> entry : config.preflightResponseHeaders()) {\r\n        headers.add(entry.getKey(), entry.getValue());\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.setSecondaryProgress",
	"Comment": "set the current secondary progress to the specified value. does not doanything if the progress bar is in indeterminate mode.",
	"Method": "void setSecondaryProgress(int secondaryProgress){\r\n    if (mIndeterminate) {\r\n        return;\r\n    }\r\n    if (secondaryProgress < 0) {\r\n        secondaryProgress = 0;\r\n    }\r\n    if (secondaryProgress > mMax) {\r\n        secondaryProgress = mMax;\r\n    }\r\n    if (secondaryProgress != mSecondaryProgress) {\r\n        mSecondaryProgress = secondaryProgress;\r\n        refreshProgress(android.R.id.secondaryProgress, mSecondaryProgress, false);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,double[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.ActionBarView.setWindowTitle",
	"Comment": "set the window title. a window title will always be replaced or overridden by a user title.",
	"Method": "void setWindowTitle(CharSequence title){\r\n    if (!mUserTitle) {\r\n        setTitleImpl(title);\r\n    }\r\n}"
}, {
	"Path": "jp.mixi.assignment.controller.adv.TitleFragment.newInstance",
	"Comment": "use this factory method to create a new instance ofthis fragment using the provided parameters.",
	"Method": "TitleFragment newInstance(){\r\n    TitleFragment fragment = new TitleFragment();\r\n    Bundle args = new Bundle();\r\n    fragment.setArguments(args);\r\n    return fragment;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of objects, without any other objects between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,Object[] actual,Object[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "com.actionbarsherlock.ActionBarSherlock.dispatchKeyEvent",
	"Comment": "notify the action bar the user has created a key event. this is used totoggle the display of the overflow action item with the menu key and toclose the action mode or expanded action item with the back key.",
	"Method": "boolean dispatchKeyEvent(KeyEvent event){\r\n    return false;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SuggestionsAdapter.setViewDrawable",
	"Comment": "sets the drawable in an image view, makes sure the view is only visible if thereis a drawable.",
	"Method": "void setViewDrawable(ImageView v,Drawable drawable,int nullVisibility){\r\n    v.setImageDrawable(drawable);\r\n    if (drawable == null) {\r\n        v.setVisibility(nullVisibility);\r\n    } else {\r\n        v.setVisibility(View.VISIBLE);\r\n        drawable.setVisible(false, false);\r\n        drawable.setVisible(true, false);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,double[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "com.ichi2.anki.Whiteboard.handleDrawEvent",
	"Comment": "handle motion events to draw using the touch screen. only simple touch events are processed,a multitouch event aborts to current stroke.",
	"Method": "boolean handleDrawEvent(MotionEvent event){\r\n    float x = event.getX();\r\n    float y = event.getY();\r\n    switch(event.getActionMasked()) {\r\n        case MotionEvent.ACTION_DOWN:\r\n            drawStart(x, y);\r\n            invalidate();\r\n            return true;\r\n        case MotionEvent.ACTION_MOVE:\r\n            if (mCurrentlyDrawing) {\r\n                for (int i = 0; i < event.getHistorySize(); i++) {\r\n                    drawAlong(event.getHistoricalX(i), event.getHistoricalY(i));\r\n                }\r\n                drawAlong(x, y);\r\n                invalidate();\r\n                return true;\r\n            }\r\n            return false;\r\n        case MotionEvent.ACTION_UP:\r\n            if (mCurrentlyDrawing) {\r\n                drawFinish();\r\n                invalidate();\r\n                return true;\r\n            }\r\n            return false;\r\n        case MotionEvent.ACTION_POINTER_DOWN:\r\n            if (mCurrentlyDrawing) {\r\n                drawAbort();\r\n            }\r\n            return false;\r\n        default:\r\n            return false;\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.PathAndQuery.clearCachedPaths",
	"Comment": "clears the currently cached parsed paths. only for use in tests.",
	"Method": "void clearCachedPaths(){\r\n    requireNonNull(CACHE, \"CACHE\");\r\n    CACHE.asMap().clear();\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.PooledObjects.toUnpooled",
	"Comment": "converts the given object to an unpooled copy and releases the given object.",
	"Method": "T toUnpooled(T o){\r\n    if (o instanceof ByteBufHolder) {\r\n        o = copyAndRelease((ByteBufHolder) o);\r\n    } else if (o instanceof ByteBuf) {\r\n        o = copyAndRelease((ByteBuf) o);\r\n    }\r\n    return o;\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.changeNoteType",
	"Comment": "change the note type from oldmodel to newmodel, throwing confirmmodschemaexception if a full sync will be required",
	"Method": "void changeNoteType(JSONObject oldModel,JSONObject newModel){\r\n    final long[] nids = { mEditorNote.getId() };\r\n    getCol().getModels().change(oldModel, nids, newModel, mModelChangeFieldMap, mModelChangeCardMap);\r\n    mEditorNote.load();\r\n    closeNoteEditor();\r\n}"
}, {
	"Path": "org.assertj.core.api.AtomicIntegerArrayAssert.isSortedAccordingTo",
	"Comment": "verifies that the actual atomicintegerarray is sorted according to the given comparator. empty arrays are considered sorted whateverthe comparator is. one element arrays are considered sorted if the element is compatible with comparator, otherwise anassertionerror is thrown.",
	"Method": "AtomicIntegerArrayAssert isSortedAccordingTo(Comparator<? super Integer> comparator){\r\n    arrays.assertIsSortedAccordingToComparator(info, array, comparator);\r\n    return myself;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.ClientFactoryBuilder.idleTimeout",
	"Comment": "sets the idle timeout of a socket connection. the connection is closed if there is no request inprogress for this amount of time.",
	"Method": "ClientFactoryBuilder idleTimeout(Duration idleTimeout){\r\n    requireNonNull(idleTimeout, \"idleTimeout\");\r\n    checkArgument(!idleTimeout.isNegative(), \"idleTimeout: %s (expected: >= 0)\", idleTimeout);\r\n    return idleTimeoutMillis(idleTimeout.toMillis());\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.getIndeterminateDrawable",
	"Comment": "get the drawable used to draw the progress bar inindeterminate mode.",
	"Method": "Drawable getIndeterminateDrawable(){\r\n    return mIndeterminateDrawable;\r\n}"
}, {
	"Path": "com.ichi2.anki.dialogs.CustomStudyDialog.buildInputDialog",
	"Comment": "build an input dialog that is used to get a parameter related to custom study from the user",
	"Method": "MaterialDialog buildInputDialog(int dialogId){\r\n    Resources res = getActivity().getResources();\r\n    View v = getActivity().getLayoutInflater().inflate(R.layout.styled_custom_study_details_dialog, null);\r\n    TextView textView1 = (TextView) v.findViewById(R.id.custom_study_details_text1);\r\n    TextView textView2 = (TextView) v.findViewById(R.id.custom_study_details_text2);\r\n    final EditText mEditText = (EditText) v.findViewById(R.id.custom_study_details_edittext2);\r\n    textView1.setText(getText1());\r\n    textView2.setText(getText2());\r\n    mEditText.setText(getDefaultValue());\r\n    mEditText.setSelectAllOnFocus(true);\r\n    mEditText.requestFocus();\r\n    final long did = getArguments().getLong(\"did\");\r\n    final boolean jumpToReviewer = getArguments().getBoolean(\"jumpToReviewer\");\r\n    MaterialDialog.Builder builder = new MaterialDialog.Builder(getActivity()).customView(v, true).positiveText(res.getString(R.string.dialog_ok)).negativeText(res.getString(R.string.dialog_cancel)).onPositive((dialog, which) -> {\r\n        Collection col = CollectionHelper.getInstance().getCol(getActivity());\r\n        int n;\r\n        try {\r\n            n = Integer.parseInt(mEditText.getText().toString());\r\n        } catch (Exception ignored) {\r\n            n = Integer.MAX_VALUE;\r\n        }\r\n        switch(dialogId) {\r\n            case CUSTOM_STUDY_NEW:\r\n                {\r\n                    try {\r\n                        AnkiDroidApp.getSharedPrefs(getActivity()).edit().putInt(\"extendNew\", n).commit();\r\n                        JSONObject deck = col.getDecks().get(did);\r\n                        deck.put(\"extendNew\", n);\r\n                        col.getDecks().save(deck);\r\n                        col.getSched().extendLimits(n, 0);\r\n                        onLimitsExtended(jumpToReviewer);\r\n                    } catch (JSONException e) {\r\n                        throw new RuntimeException(e);\r\n                    }\r\n                    break;\r\n                }\r\n            case CUSTOM_STUDY_REV:\r\n                {\r\n                    try {\r\n                        AnkiDroidApp.getSharedPrefs(getActivity()).edit().putInt(\"extendRev\", n).commit();\r\n                        JSONObject deck = col.getDecks().get(did);\r\n                        deck.put(\"extendRev\", n);\r\n                        col.getDecks().save(deck);\r\n                        col.getSched().extendLimits(0, n);\r\n                        onLimitsExtended(jumpToReviewer);\r\n                    } catch (JSONException e) {\r\n                        throw new RuntimeException(e);\r\n                    }\r\n                    break;\r\n                }\r\n            case CUSTOM_STUDY_FORGOT:\r\n                {\r\n                    JSONArray ar = new JSONArray();\r\n                    try {\r\n                        ar.put(0, 1);\r\n                        createCustomStudySession(ar, new Object[] { String.format(Locale.US, \"rated:%d:1\", n), Consts.DYN_MAX_SIZE, Consts.DYN_RANDOM }, false);\r\n                    } catch (JSONException e) {\r\n                        throw new RuntimeException(e);\r\n                    }\r\n                    break;\r\n                }\r\n            case CUSTOM_STUDY_AHEAD:\r\n                {\r\n                    createCustomStudySession(new JSONArray(), new Object[] { String.format(Locale.US, \"prop:due<=%d\", n), Consts.DYN_MAX_SIZE, Consts.DYN_DUE }, true);\r\n                    break;\r\n                }\r\n            case CUSTOM_STUDY_RANDOM:\r\n                {\r\n                    createCustomStudySession(new JSONArray(), new Object[] { \"\", n, Consts.DYN_RANDOM }, true);\r\n                    break;\r\n                }\r\n            case CUSTOM_STUDY_PREVIEW:\r\n                {\r\n                    createCustomStudySession(new JSONArray(), new Object[] { \"is:new added:\" + Integer.toString(n), Consts.DYN_MAX_SIZE, Consts.DYN_OLDEST }, false);\r\n                    break;\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }).onNegative((dialog, which) -> ((AnkiActivity) getActivity()).dismissAllDialogFragments());\r\n    final MaterialDialog dialog = builder.build();\r\n    mEditText.addTextChangedListener(new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n        }\r\n        @Override\r\n        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\r\n        }\r\n        @Override\r\n        public void afterTextChanged(Editable editable) {\r\n            if (editable.length() == 0) {\r\n                dialog.getActionButton(DialogAction.POSITIVE).setEnabled(false);\r\n            } else {\r\n                dialog.getActionButton(DialogAction.POSITIVE).setEnabled(true);\r\n            }\r\n        }\r\n    });\r\n    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\r\n    return dialog;\r\n}"
}, {
	"Path": "com.ichi2.anki.dialogs.CustomStudyDialog.buildInputDialog",
	"Comment": "build an input dialog that is used to get a parameter related to custom study from the user",
	"Method": "MaterialDialog buildInputDialog(int dialogId){\r\n}"
}, {
	"Path": "com.ichi2.anki.dialogs.CustomStudyDialog.buildInputDialog",
	"Comment": "build an input dialog that is used to get a parameter related to custom study from the user",
	"Method": "MaterialDialog buildInputDialog(int dialogId){\r\n}"
}, {
	"Path": "com.ichi2.anki.dialogs.CustomStudyDialog.buildInputDialog",
	"Comment": "build an input dialog that is used to get a parameter related to custom study from the user",
	"Method": "MaterialDialog buildInputDialog(int dialogId){\r\n    if (editable.length() == 0) {\r\n        dialog.getActionButton(DialogAction.POSITIVE).setEnabled(false);\r\n    } else {\r\n        dialog.getActionButton(DialogAction.POSITIVE).setEnabled(true);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.repositionFieldDialog",
	"Comment": "allows the user to select a number less than the number of fields in the current model toreposition the current field toprocessing time is scales with number of items",
	"Method": "void repositionFieldDialog(){\r\n    mFieldNameInput = new EditText(this);\r\n    mFieldNameInput.setRawInputType(InputType.TYPE_CLASS_NUMBER);\r\n    new MaterialDialog.Builder(this).title(String.format(getResources().getString(R.string.model_field_editor_reposition), 1, mFieldLabels.size())).positiveText(R.string.dialog_ok).customView(mFieldNameInput, true).onPositive((dialog, which) -> {\r\n        String newPosition = mFieldNameInput.getText().toString();\r\n        int pos;\r\n        try {\r\n            pos = Integer.parseInt(newPosition);\r\n        } catch (NumberFormatException n) {\r\n            showToast(getResources().getString(R.string.toast_out_of_range));\r\n            return;\r\n        }\r\n        if (pos < 1 || pos > mFieldLabels.size()) {\r\n            showToast(getResources().getString(R.string.toast_out_of_range));\r\n        } else {\r\n            try {\r\n                mCol.modSchema();\r\n                DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPOSITION_FIELD, mChangeFieldHandler, new DeckTask.TaskData(new Object[] { mMod, mNoteFields.getJSONObject(mCurrentPos), pos - 1 }));\r\n            } catch (ConfirmModSchemaException e) {\r\n                ConfirmationDialog c = new ConfirmationDialog();\r\n                c.setArgs(getResources().getString(R.string.full_sync_confirmation));\r\n                Runnable confirm = () -> {\r\n                    try {\r\n                        mCol.modSchemaNoCheck();\r\n                        String newPosition1 = mFieldNameInput.getText().toString();\r\n                        int pos1 = Integer.parseInt(newPosition1);\r\n                        DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPOSITION_FIELD, mChangeFieldHandler, new DeckTask.TaskData(new Object[] { mMod, mNoteFields.getJSONObject(mCurrentPos), pos1 - 1 }));\r\n                        dismissContextMenu();\r\n                    } catch (JSONException e1) {\r\n                        throw new RuntimeException(e1);\r\n                    }\r\n                };\r\n                c.setConfirm(confirm);\r\n                c.setCancel(mConfirmDialogCancel);\r\n                ModelFieldEditor.this.showDialogFragment(c);\r\n            } catch (JSONException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }).negativeText(R.string.dialog_cancel).show();\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of values, without any other values between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,double[] actual,double[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Media.markFileAdd",
	"Comment": "add an entry into the media database for file named fname, or update itif it already exists.",
	"Method": "void markFileAdd(String fname){\r\n    Timber.d(\"Marking media file addition in media db: %s\", fname);\r\n    String path = new File(dir(), fname).getAbsolutePath();\r\n    mDb.execute(\"insert or replace into media values (?,?,?,?)\", new Object[] { fname, _checksum(path), _mtime(path), 1 });\r\n}"
}, {
	"Path": "org.assertj.core.api.BDDSoftAssertionsTest.map_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test",
	"Comment": "the test would fail if any method was not proxyable as the assertion error would not be softly caught",
	"Method": "void map_soft_assertions_should_report_errors_on_final_methods_and_methods_that_switch_the_object_under_test(){\r\n    Map<String, String> map = mapOf(entry(\"a\", \"1\"), entry(\"b\", \"2\"), entry(\"c\", \"3\"));\r\n    softly.then(map).contains(entry(\"abc\", \"ABC\"), entry(\"def\", \"DEF\")).isEmpty();\r\n    softly.then(map).containsAnyOf(entry(\"gh\", \"GH\"), entry(\"ij\", \"IJ\"));\r\n    softly.then(map).containsExactly(entry(\"kl\", \"KL\"), entry(\"mn\", \"MN\"));\r\n    softly.then(map).containsKeys(\"K1\", \"K2\");\r\n    softly.then(map).containsOnly(entry(\"op\", \"OP\"), entry(\"qr\", \"QR\"));\r\n    softly.then(map).containsOnlyKeys(\"K3\", \"K4\");\r\n    softly.then(map).containsValues(\"V1\", \"V2\");\r\n    softly.then(map).doesNotContain(entry(\"a\", \"1\"), entry(\"abc\", \"ABC\"));\r\n    softly.then(map).doesNotContainKeys(\"a\", \"b\");\r\n    softly.then(map).extracting(\"a\", \"b\").contains(\"456\");\r\n    softly.then(iterableMap).flatExtracting(\"name\", \"job\", \"city\", \"rank\").contains(\"Unexpected\", \"Builder\", \"Dover\", \"Boston\", \"Paris\", 1, 2, 3);\r\n    List<Throwable> errors = softly.errorsCollected();\r\n    assertThat(errors).hasSize(12);\r\n    assertThat(errors.get(0)).hasMessageContaining(\"MapEntry[key=\\\"abc\\\", value=\\\"ABC\\\"]\");\r\n    assertThat(errors.get(1)).hasMessageContaining(\"empty\");\r\n    assertThat(errors.get(2)).hasMessageContaining(\"gh\").hasMessageContaining(\"IJ\");\r\n    assertThat(errors.get(3)).hasMessageContaining(\"\\\"a\\\"=\\\"1\\\"\");\r\n    assertThat(errors.get(4)).hasMessageContaining(\"K2\");\r\n    assertThat(errors.get(5)).hasMessageContaining(\"OP\");\r\n    assertThat(errors.get(6)).hasMessageContaining(\"K4\");\r\n    assertThat(errors.get(7)).hasMessageContaining(\"V2\");\r\n    assertThat(errors.get(8)).hasMessageContaining(\"ABC\");\r\n    assertThat(errors.get(9)).hasMessageContaining(\"b\");\r\n    assertThat(errors.get(10)).hasMessageContaining(\"456\");\r\n    assertThat(errors.get(11)).hasMessageContaining(\"Unexpected\");\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.isStalled",
	"Comment": "indicates whether delivery is currently stalled, pending receipt of more data.this meansthat no additional data can be delivered to the application.",
	"Method": "boolean isStalled(){\r\n    return deliveryStalled;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.ServerConfig.defaultMaxRequestLength",
	"Comment": "returns the default maximum allowed length of the content decoded at the session layer.e.g. the content length of an http request.",
	"Method": "long defaultMaxRequestLength(){\r\n    return defaultMaxRequestLength;\r\n}"
}, {
	"Path": "org.assertj.core.api.Assertions_assertThat_with_Stream_startsWith_Test.startsWith_should_work_with_infinite_streams",
	"Comment": "assertion chaining has been chosen over infinite streams support",
	"Method": "void startsWith_should_work_with_infinite_streams(){\r\n    assertThat(infiniteStream).startsWith(\"\", \"\");\r\n}"
}, {
	"Path": "org.assertj.core.api.WithAssertions.setRemoveAssertJRelatedElementsFromStackTrace",
	"Comment": "sets whether we remove elements related to assertj from assertion error stack trace.",
	"Method": "void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace){\r\n    Assertions.setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.PlotSheet.prepareDrawables",
	"Comment": "sort runnables and group them together to use lesser threads",
	"Method": "void prepareDrawables(){\r\n    if (!mDrawablesPrepared) {\r\n        mDrawablesPrepared = true;\r\n        Vector<Drawable> drawables = this.screenParts.get(0).getDrawables();\r\n        Vector<Drawable> onFrameDrawables = new Vector();\r\n        Vector<Drawable> offFrameDrawables = new Vector();\r\n        DrawableContainer onFrameContainer = new DrawableContainer(true, false);\r\n        DrawableContainer offFrameContainer = new DrawableContainer(false, false);\r\n        for (Drawable drawable : drawables) {\r\n            if (drawable instanceof Legendable && ((Legendable) drawable).nameIsSet()) {\r\n                ColorWrap color = ((Legendable) drawable).getColor();\r\n                String name = ((Legendable) drawable).getName();\r\n                mLegendMap.put(name, color);\r\n            }\r\n            if (drawable.isOnFrame()) {\r\n                if (drawable.isClusterable()) {\r\n                    if (onFrameContainer.isCritical() == drawable.isCritical()) {\r\n                        onFrameContainer.addDrawable(drawable);\r\n                    } else {\r\n                        if (onFrameContainer.getSize() > 0) {\r\n                            onFrameDrawables.add(onFrameContainer);\r\n                        }\r\n                        onFrameContainer = new DrawableContainer(true, drawable.isCritical());\r\n                        onFrameContainer.addDrawable(drawable);\r\n                    }\r\n                } else {\r\n                    if (onFrameContainer.getSize() > 0) {\r\n                        onFrameDrawables.add(onFrameContainer);\r\n                    }\r\n                    onFrameDrawables.add(drawable);\r\n                    onFrameContainer = new DrawableContainer(true, false);\r\n                }\r\n            } else {\r\n                if (drawable.isClusterable()) {\r\n                    if (offFrameContainer.isCritical() == drawable.isCritical()) {\r\n                        offFrameContainer.addDrawable(drawable);\r\n                    } else {\r\n                        if (offFrameContainer.getSize() > 0) {\r\n                            offFrameDrawables.add(offFrameContainer);\r\n                        }\r\n                        offFrameContainer = new DrawableContainer(false, drawable.isCritical());\r\n                        offFrameContainer.addDrawable(drawable);\r\n                    }\r\n                } else {\r\n                    if (offFrameContainer.getSize() > 0) {\r\n                        offFrameDrawables.add(offFrameContainer);\r\n                    }\r\n                    offFrameDrawables.add(drawable);\r\n                    offFrameContainer = new DrawableContainer(false, false);\r\n                }\r\n            }\r\n        }\r\n        if (onFrameContainer.getSize() > 0) {\r\n            onFrameDrawables.add(onFrameContainer);\r\n        }\r\n        if (offFrameContainer.getSize() > 0) {\r\n            offFrameDrawables.add(offFrameContainer);\r\n        }\r\n        this.screenParts.get(0).getDrawables().removeAllElements();\r\n        this.screenParts.get(0).getDrawables().addAll(offFrameDrawables);\r\n        this.screenParts.get(0).getDrawables().addAll(onFrameDrawables);\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.ServiceSpecification.enums",
	"Comment": "returns the metadata about the enums related with the services in this specification.",
	"Method": "Set<EnumInfo> enums(){\r\n    return enums;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.haveSameYearAndMonth",
	"Comment": "returns true if both offsetdatetime are in the same year and month, false otherwise.",
	"Method": "boolean haveSameYearAndMonth(OffsetDateTime actual,OffsetDateTime other){\r\n    return haveSameYear(actual, other) && actual.getMonth() == other.getMonth();\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.getDeclaredFieldsIncludingInherited",
	"Comment": "returns the declared fields of given class and its superclasses stopping at superclass in java.langpackage whose fields are not included.",
	"Method": "Set<Field> getDeclaredFieldsIncludingInherited(Class<?> clazz){\r\n    checkNotNull(clazz, \"expecting Class parameter not to be null\");\r\n    Set<Field> declaredFields = getDeclaredFieldsIgnoringSyntheticAndStatic(clazz);\r\n    Class<?> superclazz = clazz.getSuperclass();\r\n    while (superclazz != null && !superclazz.getName().startsWith(\"java.lang\")) {\r\n        declaredFields.addAll(getDeclaredFieldsIgnoringSyntheticAndStatic(superclazz));\r\n        superclazz = superclazz.getSuperclass();\r\n    }\r\n    return declaredFields;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.setOnCloseListener",
	"Comment": "sets a listener to inform when the user closes the searchview.",
	"Method": "void setOnCloseListener(OnCloseListener listener){\r\n    mOnCloseListener = listener;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.ofPropertyValuesHolder",
	"Comment": "constructs and returns a valueanimator that animates between the valuesspecified in the propertyvaluesholder objects.",
	"Method": "ValueAnimator ofPropertyValuesHolder(PropertyValuesHolder values){\r\n    ValueAnimator anim = new ValueAnimator();\r\n    anim.setValues(values);\r\n    return anim;\r\n}"
}, {
	"Path": "com.ichi2.preferences.NumberRangePreference.getMaxFromAttributes",
	"Comment": "returns the value of the max attribute, or its default value if not specifiedthis method should only be called once from the constructor.",
	"Method": "int getMaxFromAttributes(AttributeSet attrs){\r\n    return attrs == null ? Integer.MAX_VALUE : attrs.getAttributeIntValue(AnkiDroidApp.XML_CUSTOM_NAMESPACE, \"max\", Integer.MAX_VALUE);\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.deliver",
	"Comment": "reads and delivers as many messages to the listener as possible.",
	"Method": "void deliver(){\r\n    if (inDelivery) {\r\n        return;\r\n    }\r\n    inDelivery = true;\r\n    try {\r\n        while (pendingDeliveries > 0 && hasRequiredBytes()) {\r\n            switch(state) {\r\n                case HEADER:\r\n                    readHeader();\r\n                    break;\r\n                case BODY:\r\n                    readBody();\r\n                    pendingDeliveries--;\r\n                    break;\r\n                default:\r\n                    throw new IllegalStateException(\"Invalid state: \" + state);\r\n            }\r\n        }\r\n        final boolean stalled = !hasRequiredBytes();\r\n        if (endOfStream && stalled) {\r\n            assert unprocessed != null;\r\n            final boolean havePartialMessage = !unprocessed.isEmpty();\r\n            if (!havePartialMessage) {\r\n                listener.endOfStream();\r\n                deliveryStalled = false;\r\n                return;\r\n            } else {\r\n                throw Status.INTERNAL.withDescription(DEBUG_STRING + \": Encountered end-of-stream mid-frame\").asRuntimeException();\r\n            }\r\n        }\r\n        deliveryStalled = stalled;\r\n    } finally {\r\n        inDelivery = false;\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.thrift.THttpService.allowedSerializationFormats",
	"Comment": "returns the allowed serialization formats of this service.",
	"Method": "Set<SerializationFormat> allowedSerializationFormats(){\r\n    return allowedSerializationFormats;\r\n}"
}, {
	"Path": "jp.mixi.practice.fragment.beg.BlankFragment.newInstance",
	"Comment": "use this factory method to create a new instance ofthis fragment using the provided parameters.",
	"Method": "BlankFragment newInstance(String param1,String param2){\r\n    BlankFragment fragment = new BlankFragment();\r\n    return fragment;\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,long[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.ichi2.anki.api.AddContentApi.getAnkiDroidPackageName",
	"Comment": "get the ankidroid package name that the api will communicate with.this can be used to check that a supported version of ankidroid is installed,or to get the application label and icon, etc.",
	"Method": "String getAnkiDroidPackageName(Context context){\r\n    PackageManager manager = context.getPackageManager();\r\n    ProviderInfo pi = manager.resolveContentProvider(FlashCardsContract.AUTHORITY, 0);\r\n    if (pi != null) {\r\n        return pi.packageName;\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.limit.ConcurrencyLimitingHttpClientTest.testFaultyDelegate",
	"Comment": "tests the case where a delegate raises an exception rather than returning a response.",
	"Method": "void testFaultyDelegate(){\r\n    final ClientRequestContext ctx = newContext();\r\n    final HttpRequest req = mock(HttpRequest.class);\r\n    @SuppressWarnings(\"unchecked\")\r\n    final Client<HttpRequest, HttpResponse> delegate = mock(Client.class);\r\n    when(delegate.execute(ctx, req)).thenThrow(Exception.class);\r\n    final ConcurrencyLimitingHttpClient client = newDecorator(1).apply(delegate);\r\n    assertThat(client.numActiveRequests()).isZero();\r\n    final HttpResponse res = client.execute(ctx, req);\r\n    res.subscribe(NoopSubscriber.get());\r\n    assertThat(res.isOpen()).isFalse();\r\n    assertThatThrownBy(() -> res.completionFuture().get()).hasCauseInstanceOf(Exception.class);\r\n    await().untilAsserted(() -> assertThat(client.numActiveRequests()).isZero());\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,boolean[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Utils.writeToFileImpl",
	"Comment": "utility method to write to a file.throws the exception, so we can report it in syncing log",
	"Method": "void writeToFileImpl(InputStream source,String destination){\r\n    File f = new File(destination);\r\n    try {\r\n        Timber.d(\"Creating new file... = %s\", destination);\r\n        f.createNewFile();\r\n        long startTimeMillis = System.currentTimeMillis();\r\n        long sizeBytes = CompatHelper.getCompat().copyFile(source, destination);\r\n        long endTimeMillis = System.currentTimeMillis();\r\n        Timber.d(\"Finished writeToFile!\");\r\n        long durationSeconds = (endTimeMillis - startTimeMillis) / 1000;\r\n        long sizeKb = sizeBytes / 1024;\r\n        long speedKbSec = 0;\r\n        if (endTimeMillis != startTimeMillis) {\r\n            speedKbSec = sizeKb * 1000 / (endTimeMillis - startTimeMillis);\r\n        }\r\n        Timber.d(\"Utils.writeToFile: Size: %d Kb, Duration: %d s, Speed: %d Kb/s\", sizeKb, durationSeconds, speedKbSec);\r\n    } catch (IOException e) {\r\n        throw new IOException(f.getName() + \": \" + e.getLocalizedMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.ActivityChooserModel.getDefaultActivity",
	"Comment": "gets the default activity, the default activity is defined as the onewith highest rank i.e. the first one in the list of activities that canhandle the intent.",
	"Method": "ResolveInfo getDefaultActivity(){\r\n    synchronized (mInstanceLock) {\r\n        if (!mActivites.isEmpty()) {\r\n            return mActivites.get(0).resolveInfo;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.setOnItemSelectedListener",
	"Comment": "register a callback to be invoked when an item in this adapterview hasbeen selected.",
	"Method": "void setOnItemSelectedListener(OnItemSelectedListener listener){\r\n    mOnItemSelectedListener = listener;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.getProgressDrawable",
	"Comment": "get the drawable used to draw the progress bar inprogress mode.",
	"Method": "Drawable getProgressDrawable(){\r\n    return mProgressDrawable;\r\n}"
}, {
	"Path": "com.ichi2.anki.MetaDB.storeLanguage",
	"Comment": "associates a language to a deck, model, and card model for a given type.",
	"Method": "void storeLanguage(Context context,long did,int ord,int qa,String language){\r\n    openDBIfClosed(context);\r\n    try {\r\n        mMetaDb.execSQL(\"INSERT INTO languages (did, ord, qa, language) \" + \" VALUES (?, ?, ?, ?);\", new Object[] { did, ord, qa, language });\r\n        Timber.v(\"Store language for deck %d\", did);\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"Error storing language in MetaDB \");\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.IntentHandler.sendDoSyncMsg",
	"Comment": "send a message to ankidroidapp so that the dialogmessagehandler forces a sync",
	"Method": "void sendDoSyncMsg(){\r\n    Message handlerMessage = Message.obtain();\r\n    handlerMessage.what = DialogHandler.MSG_DO_SYNC;\r\n    DialogHandler.storeMessage(handlerMessage);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlIdentityProviderConfigBuilder.sloReqEndpoint",
	"Comment": "sets a single logout request endpoint of an identity provider.",
	"Method": "SamlIdentityProviderConfigBuilder sloReqEndpoint(SamlEndpoint sloReqEndpoint){\r\n    this.sloReqEndpoint = requireNonNull(sloReqEndpoint, \"sloReqEndpoint\");\r\n    return this;\r\n}"
}, {
	"Path": "com.linecorp.armeria.spring.AbstractServiceRegistrationBean.getService",
	"Comment": "returns the annotated service object registered to this bean.",
	"Method": "T getService(){\r\n    return service;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.haveSameYearMonthAndDayOfMonth",
	"Comment": "returns true if both offsetdatetime are in the same year, month and day of month, false otherwise.",
	"Method": "boolean haveSameYearMonthAndDayOfMonth(OffsetDateTime actual,OffsetDateTime other){\r\n    return haveSameYearAndMonth(actual, other) && actual.getDayOfMonth() == other.getDayOfMonth();\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.grpc.GrpcClientTest.timeoutOnSleepingServer",
	"Comment": "start a fullduplexcall which the server will not respond, and verify the deadline expires.",
	"Method": "void timeoutOnSleepingServer(){\r\n    final TestServiceStub stub = Clients.newDerivedClient(asyncStub, ClientOption.DEFAULT_RESPONSE_TIMEOUT_MILLIS.newValue(1L));\r\n    final StreamRecorder<StreamingOutputCallResponse> responseObserver = StreamRecorder.create();\r\n    final StreamObserver<StreamingOutputCallRequest> requestObserver = stub.fullDuplexCall(responseObserver);\r\n    final StreamingOutputCallRequest request = StreamingOutputCallRequest.newBuilder().setPayload(Payload.newBuilder().setBody(ByteString.copyFrom(new byte[27182]))).addResponseParameters(ResponseParameters.newBuilder().setIntervalUs((int) TimeUnit.SECONDS.toMicros(10))).build();\r\n    try {\r\n        requestObserver.onNext(request);\r\n        requestObserver.onCompleted();\r\n    } catch (IllegalStateException expected) {\r\n    }\r\n    responseObserver.awaitCompletion(operationTimeoutMillis(), TimeUnit.MILLISECONDS);\r\n    assertThat(responseObserver.getValues()).isEmpty();\r\n    assertThat(responseObserver.getError()).isNotNull();\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of values, without any other values between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,float[] actual,float[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.thrift.text.StructContext.computeFieldNameMap",
	"Comment": "compute a new field name map for the current thrift messagewe are parsing.",
	"Method": "Map<String, TField> computeFieldNameMap(Class<?> clazz){\r\n    final Map<String, TField> map = new HashMap();\r\n    if (isTBase(clazz)) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map<? extends TFieldIdEnum, FieldMetaData> metaDataMap = FieldMetaData.getStructMetaDataMap((Class<? extends TBase<?, ?>>) clazz);\r\n        for (Entry<? extends TFieldIdEnum, FieldMetaData> e : metaDataMap.entrySet()) {\r\n            final String fieldName = e.getKey().getFieldName();\r\n            final FieldMetaData metaData = e.getValue();\r\n            final FieldValueMetaData elementMetaData;\r\n            if (metaData.valueMetaData.isContainer()) {\r\n                if (metaData.valueMetaData instanceof SetMetaData) {\r\n                    elementMetaData = ((SetMetaData) metaData.valueMetaData).elemMetaData;\r\n                } else if (metaData.valueMetaData instanceof ListMetaData) {\r\n                    elementMetaData = ((ListMetaData) metaData.valueMetaData).elemMetaData;\r\n                } else if (metaData.valueMetaData instanceof MapMetaData) {\r\n                    elementMetaData = ((MapMetaData) metaData.valueMetaData).valueMetaData;\r\n                } else {\r\n                    elementMetaData = metaData.valueMetaData;\r\n                }\r\n            } else {\r\n                elementMetaData = metaData.valueMetaData;\r\n            }\r\n            if (elementMetaData instanceof EnumMetaData) {\r\n                classMap.put(fieldName, ((EnumMetaData) elementMetaData).enumClass);\r\n            } else if (elementMetaData instanceof StructMetaData) {\r\n                classMap.put(fieldName, ((StructMetaData) elementMetaData).structClass);\r\n            }\r\n            final byte type = TType.ENUM == metaData.valueMetaData.type ? TType.I32 : metaData.valueMetaData.type;\r\n            map.put(fieldName, new TField(fieldName, type, e.getKey().getThriftFieldId()));\r\n        }\r\n    } else {\r\n        map.put(\"message\", new TField(\"message\", (byte) 11, (short) 1));\r\n        map.put(\"type\", new TField(\"type\", (byte) 8, (short) 2));\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "com.ichi2.utils.ImportUtils.handleFileImport",
	"Comment": "this code is used in multiple places to handle package imports",
	"Method": "String handleFileImport(Context context,Intent intent){\r\n    Timber.i(\"IntentHandler/ User requested to view a file\");\r\n    String errorMessage = null;\r\n    if (intent.getData().getScheme().equals(\"content\")) {\r\n        String filename = null;\r\n        Cursor cursor = null;\r\n        try {\r\n            cursor = context.getContentResolver().query(intent.getData(), new String[] { OpenableColumns.DISPLAY_NAME }, null, null, null);\r\n            if (cursor != null && cursor.moveToFirst()) {\r\n                filename = cursor.getString(0);\r\n                Timber.d(\"handleFileImport() Importing from content provider: %s\", filename);\r\n            }\r\n        } finally {\r\n            if (cursor != null)\r\n                cursor.close();\r\n        }\r\n        if (filename == null) {\r\n            if (intent.getType().equals(\"application/apkg\") || ImportUtils.hasValidZipFile(context, intent)) {\r\n                filename = \"unknown_filename.apkg\";\r\n                Timber.w(\"Could not retrieve filename from ContentProvider, but was valid zip file so we try to continue\");\r\n            } else {\r\n                Timber.e(\"Could not retrieve filename from ContentProvider or read content as ZipFile\");\r\n                AnkiDroidApp.sendExceptionReport(new RuntimeException(\"Could not import apkg from ContentProvider\"), \"IntentHandler.java\", \"apkg import failed\");\r\n                errorMessage = AnkiDroidApp.getAppResources().getString(R.string.import_error_content_provider, AnkiDroidApp.getManualUrl() + \"#importing\");\r\n            }\r\n        }\r\n        if ((filename != null) && !filename.toLowerCase().endsWith(\".apkg\")) {\r\n            errorMessage = context.getResources().getString(R.string.import_error_not_apkg_extension, filename);\r\n        } else if (filename != null) {\r\n            String tempOutDir = Uri.fromFile(new File(context.getCacheDir(), filename)).getEncodedPath();\r\n            errorMessage = ImportUtils.copyFileToCache(context, intent, tempOutDir) ? null : \"copyFileToCache() failed\";\r\n            if (errorMessage == null) {\r\n                ImportUtils.sendShowImportFileDialogMsg(tempOutDir);\r\n            } else {\r\n                AnkiDroidApp.sendExceptionReport(new RuntimeException(\"Error importing apkg file\"), \"IntentHandler.java\", \"apkg import failed\");\r\n            }\r\n        }\r\n    } else if (intent.getData().getScheme().equals(\"file\")) {\r\n        String filename = intent.getData().getPath();\r\n        Timber.d(\"Importing regular file: %s\", filename);\r\n        if (filename != null && filename.endsWith(\".apkg\")) {\r\n            ImportUtils.sendShowImportFileDialogMsg(filename);\r\n        } else {\r\n            errorMessage = context.getResources().getString(R.string.import_error_not_apkg_extension, filename);\r\n        }\r\n    }\r\n    return errorMessage;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.areEqualIgnoringNanos",
	"Comment": "returns true if both offsetdatetime are in the same year, month and day of month, hour, minute and second, falseotherwise.",
	"Method": "boolean areEqualIgnoringNanos(OffsetDateTime actual,OffsetDateTime other){\r\n    return areEqualIgnoringSeconds(actual, other) && actual.getSecond() == other.getSecond();\r\n}"
}, {
	"Path": "com.ichi2.anki.MetaDB.getLanguage",
	"Comment": "returns the language associated with the given deck, model and card model, for the given type.",
	"Method": "String getLanguage(Context context,long did,int ord,int qa){\r\n    openDBIfClosed(context);\r\n    String language = \"\";\r\n    Cursor cur = null;\r\n    try {\r\n        String query = \"SELECT language FROM languages \" + \"WHERE did = \" + did + \" AND ord = \" + ord + \" AND qa = \" + qa + \" \" + \"LIMIT 1\";\r\n        cur = mMetaDb.rawQuery(query, null);\r\n        Timber.v(\"getLanguage: %s\", query);\r\n        if (cur.moveToNext()) {\r\n            language = cur.getString(0);\r\n        }\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"Error fetching language \");\r\n    } finally {\r\n        if (cur != null && !cur.isClosed()) {\r\n            cur.close();\r\n        }\r\n    }\r\n    return language;\r\n}"
}, {
	"Path": "org.agrona.concurrent.broadcast.BroadcastReceiver.offset",
	"Comment": "the offset for the beginning of the next message in the transmission stream.",
	"Method": "int offset(){\r\n    return msgOffset(recordOffset);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Failures.isRemoveAssertJRelatedElementsFromStackTrace",
	"Comment": "returns whether or not we remove elements related to assertj from assertion error stack trace.",
	"Method": "boolean isRemoveAssertJRelatedElementsFromStackTrace(){\r\n    return removeAssertJRelatedElementsFromStackTrace;\r\n}"
}, {
	"Path": "com.ichi2.anki.DeckPicker.loadStudyOptionsFragment",
	"Comment": "load a new studyoptionsfragment. if withdeckoptions is true, the deck options activity willbe loaded on top of it. use this flag when creating a new filtered deck to allow the user tomodify the filter settings before being shown the fragment. the fragment itself will handlerebuilding the deck if the settings change.",
	"Method": "void loadStudyOptionsFragment(boolean withDeckOptions){\r\n    StudyOptionsFragment details = StudyOptionsFragment.newInstance(withDeckOptions);\r\n    FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\r\n    ft.replace(R.id.studyoptions_fragment, details);\r\n    ft.commit();\r\n}"
}, {
	"Path": "com.ichi2.anki.DeckPicker.showSyncErrorMessage",
	"Comment": "show simple error dialog with just the message and ok button. reload the activity when dialog closed.",
	"Method": "void showSyncErrorMessage(String message){\r\n    String title = getResources().getString(R.string.sync_error);\r\n    showSimpleMessageDialog(title, message, true);\r\n}"
}, {
	"Path": "trikita.anvil.Anvil.mount",
	"Comment": "mounts a renderable function defining the layout into a view. if host is aviewgroup it is assumed to be empty, so the renderable would define whatits child views would be.",
	"Method": "T mount(T v,Renderable r){\r\n    Mount m = new Mount(v, r);\r\n    mounts.put(v, m);\r\n    render(v);\r\n    return v;\r\n}"
}, {
	"Path": "org.agrona.IoUtil.ensureDirectoryIsRecreated",
	"Comment": "create a directory, removing previous directory if it already exists.call callback if it does exist.",
	"Method": "void ensureDirectoryIsRecreated(File directory,String descriptionLabel,BiConsumer<String, String> callback){\r\n    if (directory.exists()) {\r\n        delete(directory, false);\r\n        callback.accept(directory.getAbsolutePath(), descriptionLabel);\r\n    }\r\n    if (!directory.mkdirs()) {\r\n        throw new IllegalArgumentException(\"could not create \" + descriptionLabel + \" directory: \" + directory);\r\n    }\r\n}"
}, {
	"Path": "org.agrona.nio.TransportPoller.selectNowWithoutProcessing",
	"Comment": "explicit call to selectnow but without processing of selected keys.",
	"Method": "void selectNowWithoutProcessing(){\r\n    try {\r\n        selector.selectNow();\r\n        selectedKeySet.reset();\r\n    } catch (final IOException ex) {\r\n        LangUtil.rethrowUnchecked(ex);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.DeckPicker.scrollDecklistToDeck",
	"Comment": "scroll the deck list so that it is centered on the current deck.",
	"Method": "void scrollDecklistToDeck(long did){\r\n    int position = mDeckListAdapter.findDeckPosition(did);\r\n    mRecyclerViewLayoutManager.scrollToPositionWithOffset(position, (mRecyclerView.getHeight() / 2));\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlServiceProvider.newSamlDecorator",
	"Comment": "creates a decorator which initiates a saml authentication if a request is not authenticated.",
	"Method": "Function<Service<HttpRequest, HttpResponse>, Service<HttpRequest, HttpResponse>> newSamlDecorator(){\r\n    return delegate -> new SamlDecorator(this, delegate);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.isQueryRefinementEnabled",
	"Comment": "returns whether query refinement is enabled for all items or only specific ones.",
	"Method": "boolean isQueryRefinementEnabled(){\r\n    return mQueryRefinement;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.DocServiceBuilder.exampleRequest",
	"Comment": "adds the example requests which are applicable to the method denoted by the specified example requests.please note that this method may fail if the specified requests object do not provide the informationabout their service and method names.",
	"Method": "DocServiceBuilder exampleRequest(Object exampleRequests,DocServiceBuilder exampleRequest,Iterable<?> exampleRequests){\r\n    requireNonNull(exampleRequests, \"exampleRequests\");\r\n    for (Object e : exampleRequests) {\r\n        requireNonNull(e, \"exampleRequests contains null.\");\r\n        final String[] result = guessAndSerializeExampleRequest(e);\r\n        exampleRequest0(result[0], result[1], result[2]);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "com.ichi2.libanki.DB.insert",
	"Comment": "insert must always be called via db in order to mark the db as changed",
	"Method": "long insert(String table,ContentValues values){\r\n    mMod = true;\r\n    return getDatabase().insert(table, SQLiteDatabase.CONFLICT_NONE, values);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.file.HttpFileServiceBuilder.maxCacheEntrySizeBytes",
	"Comment": "returns the maximum allowed size of a cached file entry. the file bigger than this value will not becached.",
	"Method": "HttpFileServiceBuilder maxCacheEntrySizeBytes(int maxCacheEntrySizeBytes){\r\n    this.maxCacheEntrySizeBytes = HttpFileServiceConfig.validateMaxCacheEntrySizeBytes(maxCacheEntrySizeBytes);\r\n    return this;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.grpc.GrpcServiceBuilder.setMaxOutboundMessageSizeBytes",
	"Comment": "sets the maximum size in bytes of an individual outgoing message. if not set, all messages will be sent.this can be a safety valve to prevent overflowing network connections with large messages due to businesslogic bugs.",
	"Method": "GrpcServiceBuilder setMaxOutboundMessageSizeBytes(int maxOutboundMessageSizeBytes){\r\n    checkArgument(maxOutboundMessageSizeBytes > 0, \"maxOutboundMessageSizeBytes must be >0\");\r\n    this.maxOutboundMessageSizeBytes = maxOutboundMessageSizeBytes;\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,char[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.api.SoftAssertionError.getErrors",
	"Comment": "returns the causal assertionerror error messages in the order that they were thrown.",
	"Method": "List<String> getErrors(){\r\n    return errors;\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of values, without any other values between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,char[] actual,char[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.clearAllAnimations",
	"Comment": "clear all animations on this thread, without canceling or ending them.this should be used with caution.",
	"Method": "void clearAllAnimations(){\r\n    sAnimations.get().clear();\r\n    sPendingAnimations.get().clear();\r\n    sDelayedAnims.get().clear();\r\n}"
}, {
	"Path": "snippets.Snippets.differenceWith",
	"Comment": "filters out all values from an array for which the comparator function does not return true.",
	"Method": "int[] differenceWith(int[] first,int[] second,IntBinaryOperator comparator){\r\n    return Arrays.stream(first).filter(a -> Arrays.stream(second).noneMatch(b -> comparator.applyAsInt(a, b) == 0)).toArray();\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.deleteModelDialog",
	"Comment": "displays a confirmation box asking if you want to delete the note type and then deletes it if confirmed",
	"Method": "void deleteModelDialog(){\r\n    if (mModelIds.size() > 1) {\r\n        Runnable confirm = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    col.modSchema(false);\r\n                    deleteModel();\r\n                } catch (ConfirmModSchemaException e) {\r\n                }\r\n                dismissContextMenu();\r\n            }\r\n        };\r\n        Runnable cancel = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                dismissContextMenu();\r\n            }\r\n        };\r\n        try {\r\n            col.modSchema();\r\n            ConfirmationDialog d = new ConfirmationDialog();\r\n            d.setArgs(getResources().getString(R.string.model_delete_warning));\r\n            d.setConfirm(confirm);\r\n            d.setCancel(cancel);\r\n            ModelBrowser.this.showDialogFragment(d);\r\n        } catch (ConfirmModSchemaException e) {\r\n            ConfirmationDialog c = new ConfirmationDialog();\r\n            c.setArgs(getResources().getString(R.string.full_sync_confirmation));\r\n            c.setConfirm(confirm);\r\n            c.setCancel(cancel);\r\n            showDialogFragment(c);\r\n        }\r\n    } else {\r\n        showToast(getString(R.string.toast_last_model));\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.deleteModelDialog",
	"Comment": "displays a confirmation box asking if you want to delete the note type and then deletes it if confirmed",
	"Method": "void deleteModelDialog(){\r\n    try {\r\n        col.modSchema(false);\r\n        deleteModel();\r\n    } catch (ConfirmModSchemaException e) {\r\n    }\r\n    dismissContextMenu();\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.deleteModelDialog",
	"Comment": "displays a confirmation box asking if you want to delete the note type and then deletes it if confirmed",
	"Method": "void deleteModelDialog(){\r\n    dismissContextMenu();\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertHave",
	"Comment": "assert that each element of given array satisfies the given condition.",
	"Method": "void assertHave(AssertionInfo info,E[] actual,Condition<? super E> condition){\r\n    arrays.assertHave(info, failures, conditions, actual, condition);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.grpc.ArmeriaServerCall.encodeHeader",
	"Comment": "copied from io.netty.handler.codec.http.httpheadersencoder",
	"Method": "void encodeHeader(CharSequence name,CharSequence value,ByteBuf buf){\r\n    final int nameLen = name.length();\r\n    final int valueLen = value.length();\r\n    final int entryLen = nameLen + valueLen + 4;\r\n    buf.ensureWritable(entryLen);\r\n    int offset = buf.writerIndex();\r\n    writeAscii(buf, offset, name, nameLen);\r\n    offset += nameLen;\r\n    buf.setByte(offset++, ':');\r\n    buf.setByte(offset++, ' ');\r\n    writeAscii(buf, offset, value, valueLen);\r\n    offset += valueLen;\r\n    buf.setByte(offset++, '\\r');\r\n    buf.setByte(offset++, '\\n');\r\n    buf.writerIndex(offset);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.setSuggestionsAdapter",
	"Comment": "you can set a custom adapter if you wish. otherwise the default adapter is used todisplay the suggestions from the suggestions provider associated with the searchableinfo.",
	"Method": "void setSuggestionsAdapter(CursorAdapter adapter){\r\n    mSuggestionsAdapter = adapter;\r\n    mQueryTextView.setAdapter(mSuggestionsAdapter);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getRepeatMode",
	"Comment": "defines what this animation should do when it reaches the end.",
	"Method": "int getRepeatMode(){\r\n    return mRepeatMode;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.thrift.text.BaseContext.getTFieldByName",
	"Comment": "return the tfield struct describing a thrift struct item withthe given name.",
	"Method": "TField getTFieldByName(String name){\r\n    return unsupportedOperation();\r\n}"
}, {
	"Path": "com.eschao.android.widget.sample.pageflip.DoublePagesRender.onEndedDrawing",
	"Comment": "handle ended drawing eventin here, we only tackle the animation drawing event, if we need tocontinue requesting render, please return true. remember this functionwill be called in main thread",
	"Method": "boolean onEndedDrawing(int what){\r\n    if (what == DRAW_ANIMATING_FRAME) {\r\n        boolean isAnimating = mPageFlip.animating();\r\n        if (isAnimating) {\r\n            mDrawCommand = DRAW_ANIMATING_FRAME;\r\n            return true;\r\n        } else {\r\n            if (mPageFlip.getFlipState() == PageFlipState.END_WITH_FORWARD) {\r\n                final Page first = mPageFlip.getFirstPage();\r\n                final Page second = mPageFlip.getSecondPage();\r\n                second.swapTexturesWithPage(first);\r\n                if (first.isLeftPage()) {\r\n                    mPageNo -= 2;\r\n                } else {\r\n                    mPageNo += 2;\r\n                }\r\n            }\r\n            mDrawCommand = DRAW_FULL_PAGE;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.increment",
	"Comment": "perform an atomic increment that will not lose updates across threads.",
	"Method": "long increment(){\r\n    return UnsafeAccess.UNSAFE.getAndAddLong(byteArray, addressOffset, 1);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.ClientOptions.defaultResponseTimeoutMillis",
	"Comment": "returns the default timeout of a server reply to a client call.",
	"Method": "long defaultResponseTimeoutMillis(){\r\n    return getOrElse(DEFAULT_RESPONSE_TIMEOUT_MILLIS, Flags.defaultResponseTimeoutMillis());\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.showSelectTtsDialogue",
	"Comment": "shows the dialogue for selecting tts for the current card and cardside.",
	"Method": "void showSelectTtsDialogue(){\r\n    if (mTtsInitialized) {\r\n        if (!sDisplayAnswer) {\r\n            ReadText.selectTts(Utils.stripHTML(mCurrentCard.q(true)), getDeckIdForCard(mCurrentCard), mCurrentCard.getOrd(), Sound.SOUNDS_QUESTION);\r\n        } else {\r\n            ReadText.selectTts(Utils.stripHTML(mCurrentCard.getPureAnswer()), getDeckIdForCard(mCurrentCard), mCurrentCard.getOrd(), Sound.SOUNDS_ANSWER);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.crypto.BouncyCastleKeyFactoryProviderTest.bouncyCastlePreInstalled",
	"Comment": "tests if everything works even if bouncy castle is loaded already.",
	"Method": "void bouncyCastlePreInstalled(){\r\n    Assume.assumeTrue(Arrays.stream(Security.getProviders()).noneMatch(p -> BouncyCastleProvider.PROVIDER_NAME.equals(p.getName())));\r\n    Security.addProvider(new BouncyCastleProvider());\r\n    try {\r\n        BouncyCastleKeyFactoryProvider.call(this::loadPkcs5);\r\n        BouncyCastleKeyFactoryProvider.call(this::loadPkcs8);\r\n    } finally {\r\n        Security.removeProvider(BouncyCastleProvider.PROVIDER_NAME);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,int[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Files.assertCanWrite",
	"Comment": "asserts that the given file can be modified by the application.",
	"Method": "void assertCanWrite(AssertionInfo info,File actual){\r\n    assertNotNull(info, actual);\r\n    if (actual.canWrite())\r\n        return;\r\n    throw failures.failure(info, shouldBeWritable(actual));\r\n}"
}, {
	"Path": "com.ichi2.utils.ImportUtils.sendShowImportFileDialogMsg",
	"Comment": "send a message to ankidroidapp so that the dialogmessagehandler shows the import apkg dialog.",
	"Method": "void sendShowImportFileDialogMsg(String path){\r\n    File f = new File(path);\r\n    String filename = f.getName();\r\n    Message handlerMessage = Message.obtain();\r\n    Bundle msgData = new Bundle();\r\n    msgData.putString(\"importPath\", path);\r\n    handlerMessage.setData(msgData);\r\n    if (\"collection.apkg\".equals(filename)) {\r\n        handlerMessage.what = DialogHandler.MSG_SHOW_COLLECTION_IMPORT_REPLACE_DIALOG;\r\n    } else {\r\n        handlerMessage.what = DialogHandler.MSG_SHOW_COLLECTION_IMPORT_ADD_DIALOG;\r\n    }\r\n    DialogHandler.storeMessage(handlerMessage);\r\n}"
}, {
	"Path": "com.ichi2.anki.MetaDB.upgradeDB",
	"Comment": "creating any table that missing and upgrading necessary tables.",
	"Method": "SQLiteDatabase upgradeDB(SQLiteDatabase mMetaDb,int databaseVersion){\r\n    Timber.i(\"MetaDB:: Upgrading Internal Database..\");\r\n    Timber.i(\"MetaDB:: Applying changes for version: 0\");\r\n    if (mMetaDb.getVersion() < 4) {\r\n        mMetaDb.execSQL(\"DROP TABLE IF EXISTS languages;\");\r\n        mMetaDb.execSQL(\"DROP TABLE IF EXISTS customDictionary;\");\r\n        mMetaDb.execSQL(\"DROP TABLE IF EXISTS whiteboardState;\");\r\n    }\r\n    mMetaDb.execSQL(\"CREATE TABLE IF NOT EXISTS languages (\" + \" _id INTEGER PRIMARY KEY AUTOINCREMENT, \" + \"did INTEGER NOT NULL, ord INTEGER, \" + \"qa INTEGER, \" + \"language TEXT)\");\r\n    mMetaDb.execSQL(\"CREATE TABLE IF NOT EXISTS whiteboardState (\" + \"_id INTEGER PRIMARY KEY AUTOINCREMENT, \" + \"did INTEGER NOT NULL, \" + \"state INTEGER)\");\r\n    mMetaDb.execSQL(\"CREATE TABLE IF NOT EXISTS customDictionary (\" + \"_id INTEGER PRIMARY KEY AUTOINCREMENT, \" + \"did INTEGER NOT NULL, \" + \"dictionary INTEGER)\");\r\n    mMetaDb.execSQL(\"CREATE TABLE IF NOT EXISTS smallWidgetStatus (\" + \"id INTEGER PRIMARY KEY AUTOINCREMENT, \" + \"due INTEGER NOT NULL, eta INTEGER NOT NULL)\");\r\n    Cursor c = null;\r\n    try {\r\n        c = mMetaDb.rawQuery(\"PRAGMA table_info(widgetStatus)\", null);\r\n        int columnNumber = c.getCount();\r\n        if (columnNumber > 0) {\r\n            if (columnNumber < 7) {\r\n                mMetaDb.execSQL(\"ALTER TABLE widgetStatus \" + \"ADD COLUMN eta INTEGER NOT NULL DEFAULT '0'\");\r\n                mMetaDb.execSQL(\"ALTER TABLE widgetStatus \" + \"ADD COLUMN time INTEGER NOT NULL DEFAULT '0'\");\r\n            }\r\n        } else {\r\n            mMetaDb.execSQL(\"CREATE TABLE IF NOT EXISTS widgetStatus (\" + \"deckId INTEGER NOT NULL PRIMARY KEY, \" + \"deckName TEXT NOT NULL, \" + \"newCards INTEGER NOT NULL, \" + \"lrnCards INTEGER NOT NULL, \" + \"dueCards INTEGER NOT NULL, \" + \"progress INTEGER NOT NULL, \" + \"eta INTEGER NOT NULL)\");\r\n        }\r\n        mMetaDb.setVersion(databaseVersion);\r\n        Timber.i(\"MetaDB:: Upgrading Internal Database finished. New version: %d\", databaseVersion);\r\n        return mMetaDb;\r\n    } finally {\r\n        if (c != null) {\r\n            c.close();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.servicelayer.NoteService.saveMedia",
	"Comment": "saves the multimedia associated with this card to proper path inside anki folder. for each field associated withthe note it checks for the following condition a. the field content should have changed b. the field content doesnot already point to a media inside anki media path if both condition satisfies then it copies the file insidethe media path and deletes the file referenced by the note",
	"Method": "void saveMedia(Collection col,MultimediaEditableNote noteNew){\r\n    int fieldCount = noteNew.getNumberOfFields();\r\n    for (int i = 0; i < fieldCount; i++) {\r\n        IField newField = noteNew.getField(i);\r\n        importMediaToDirectory(col, newField);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertContainsOnlyOnce",
	"Comment": "asserts that the given array contains only once the given values.",
	"Method": "void assertContainsOnlyOnce(AssertionInfo info,char[] actual,char[] values){\r\n    arrays.assertContainsOnlyOnce(info, failures, actual, values);\r\n}"
}, {
	"Path": "org.agrona.AsciiSequenceView.wrap",
	"Comment": "wrap a range of an existing buffer containing an ascii sequence.",
	"Method": "AsciiSequenceView wrap(DirectBuffer buffer,int offset,int length){\r\n    this.buffer = buffer;\r\n    this.offset = offset;\r\n    this.length = length;\r\n    return this;\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.getAndSet",
	"Comment": "get the current value of a counter and atomically set it to a new value.",
	"Method": "long getAndSet(long value){\r\n    return UnsafeAccess.UNSAFE.getAndSetLong(byteArray, addressOffset, value);\r\n}"
}, {
	"Path": "com.example.unique_type_name.fragment.HeroDetails.friendsConnection",
	"Comment": "the friends of the character exposed as a connection with edges",
	"Method": "FriendsConnection friendsConnection(){\r\n    return this.friendsConnection;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.retry.RetryingClientWithLoggingTest.loggingThenRetrying",
	"Comment": "in this case, only the first request and the last response are logged.",
	"Method": "void loggingThenRetrying(){\r\n    successLogIndex = 1;\r\n    final HttpClient client = new HttpClientBuilder(server.uri(\"/\")).decorator(RetryingHttpClient.newDecorator(RetryStrategy.onServerErrorStatus())).decorator(loggingDecorator()).build();\r\n    assertThat(client.get(\"/hello\").aggregate().join().content().toStringUtf8()).isEqualTo(\"hello\");\r\n    await().untilAsserted(() -> assertThat(logResult.size()).isEqualTo(successLogIndex + 1));\r\n    assertThat(logResult.get(0).toStringRequestOnly()).isEqualTo(logResult.get(1).toStringRequestOnly());\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.deleteUnusedTextures",
	"Comment": "deletes unused texture idsit should be called in opengl thread",
	"Method": "void deleteUnusedTextures(){\r\n    if (mUnusedTexSize > 0) {\r\n        glDeleteTextures(mUnusedTexSize, mUnusedTexIDs, 0);\r\n        mUnusedTexSize = 0;\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.util.diff.DiffUtils.diff",
	"Comment": "computes the difference between the original and revised list of elementswith default diff algorithm",
	"Method": "Patch<T> diff(List<T> original,List<T> revised,Patch<T> diff,List<T> original,List<T> revised,DiffAlgorithm<T> algorithm){\r\n    checkArgument(original != null, \"original must not be null\");\r\n    checkArgument(revised != null, \"revised must not be null\");\r\n    checkArgument(algorithm != null, \"algorithm must not be null\");\r\n    return algorithm.diff(original, revised);\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.stream.EmptyFixedStreamMessage.doRequest",
	"Comment": "no objects, so just notify of close as soon as there is demand.",
	"Method": "void doRequest(SubscriptionImpl subscription,long unused){\r\n    if (requested() != 0) {\r\n        return;\r\n    }\r\n    setRequested(1);\r\n    notifySubscriberOfCloseEvent(subscription, SUCCESSFUL_CLOSE);\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    super.onCollectionLoaded(col);\r\n    this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n    Intent intent = getIntent();\r\n    Timber.d(\"NoteEditor() onCollectionLoaded: caller: %d\", mCaller);\r\n    registerExternalStorageListener();\r\n    View mainView = findViewById(android.R.id.content);\r\n    Toolbar toolbar = (Toolbar) mainView.findViewById(R.id.toolbar);\r\n    if (toolbar != null) {\r\n        setSupportActionBar(toolbar);\r\n    }\r\n    mFieldsLayoutContainer = (LinearLayout) findViewById(R.id.CardEditorEditFieldsLayout);\r\n    mTagsButton = (TextView) findViewById(R.id.CardEditorTagText);\r\n    mCardsButton = (TextView) findViewById(R.id.CardEditorCardsText);\r\n    mCardsButton.setOnClickListener(new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View v) {\r\n            Timber.i(\"NoteEditor:: Cards button pressed. Opening template editor\");\r\n            showCardTemplateEditor();\r\n        }\r\n    });\r\n    mAedictIntent = false;\r\n    switch(mCaller) {\r\n        case CALLER_NOCALLER:\r\n            Timber.e(\"no caller could be identified, closing\");\r\n            finishWithoutAnimation();\r\n            return;\r\n        case CALLER_REVIEWER:\r\n            mCurrentEditedCard = AbstractFlashcardViewer.getEditorCard();\r\n            if (mCurrentEditedCard == null) {\r\n                finishWithoutAnimation();\r\n                return;\r\n            }\r\n            mEditorNote = mCurrentEditedCard.note();\r\n            mAddNote = false;\r\n            break;\r\n        case CALLER_STUDYOPTIONS:\r\n        case CALLER_DECKPICKER:\r\n        case CALLER_REVIEWER_ADD:\r\n            mAddNote = true;\r\n            break;\r\n        case CALLER_CARDBROWSER_EDIT:\r\n            mCurrentEditedCard = CardBrowser.sCardBrowserCard;\r\n            if (mCurrentEditedCard == null) {\r\n                finishWithoutAnimation();\r\n                return;\r\n            }\r\n            mEditorNote = mCurrentEditedCard.note();\r\n            mAddNote = false;\r\n            break;\r\n        case CALLER_CARDBROWSER_ADD:\r\n            mAddNote = true;\r\n            break;\r\n        case CALLER_CARDEDITOR:\r\n            mAddNote = true;\r\n            break;\r\n        case CALLER_CARDEDITOR_INTENT_ADD:\r\n            {\r\n                fetchIntentInformation(intent);\r\n                if (mSourceText == null) {\r\n                    finishWithoutAnimation();\r\n                    return;\r\n                }\r\n                if (mSourceText[0].equals(\"Aedict Notepad\") && addFromAedict(mSourceText[1])) {\r\n                    finishWithoutAnimation();\r\n                    return;\r\n                }\r\n                mAddNote = true;\r\n                break;\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n    mNoteTypeSpinner = (Spinner) findViewById(R.id.note_type_spinner);\r\n    mAllModelIds = new ArrayList();\r\n    final ArrayList<String> modelNames = new ArrayList();\r\n    ArrayList<JSONObject> models = getCol().getModels().all();\r\n    Collections.sort(models, new JSONNameComparator());\r\n    for (JSONObject m : models) {\r\n        try {\r\n            modelNames.add(m.getString(\"name\"));\r\n            mAllModelIds.add(m.getLong(\"id\"));\r\n        } catch (JSONException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    ArrayAdapter<String> noteTypeAdapter = new ArrayAdapter(this, android.R.layout.simple_spinner_item, modelNames);\r\n    mNoteTypeSpinner.setAdapter(noteTypeAdapter);\r\n    noteTypeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    TextView deckTextView = (TextView) findViewById(R.id.CardEditorDeckText);\r\n    try {\r\n        if (!mAddNote && mEditorNote.model().getJSONArray(\"tmpls\").length() > 1) {\r\n            deckTextView.setText(R.string.CardEditorCardDeck);\r\n        }\r\n    } catch (JSONException e1) {\r\n        throw new RuntimeException();\r\n    }\r\n    mNoteDeckSpinner = (Spinner) findViewById(R.id.note_deck_spinner);\r\n    mAllDeckIds = new ArrayList();\r\n    final ArrayList<String> deckNames = new ArrayList();\r\n    ArrayList<JSONObject> decks = getCol().getDecks().all();\r\n    Collections.sort(decks, new JSONNameComparator());\r\n    for (JSONObject d : decks) {\r\n        try {\r\n            long thisDid = d.getLong(\"id\");\r\n            long currentDid = getCol().getDecks().current().getLong(\"id\");\r\n            if (d.getInt(\"dyn\") == 0 || (!mAddNote && thisDid == currentDid)) {\r\n                deckNames.add(d.getString(\"name\"));\r\n                mAllDeckIds.add(thisDid);\r\n            }\r\n        } catch (JSONException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    ArrayAdapter<String> noteDeckAdapter = new ArrayAdapter(this, android.R.layout.simple_spinner_item, deckNames);\r\n    mNoteDeckSpinner.setAdapter(noteDeckAdapter);\r\n    noteDeckAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    mNoteDeckSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\r\n        @Override\r\n        public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {\r\n            mCurrentDid = mAllDeckIds.get(pos);\r\n        }\r\n        @Override\r\n        public void onNothingSelected(AdapterView<?> parent) {\r\n        }\r\n    });\r\n    setDid(mEditorNote);\r\n    setNote(mEditorNote);\r\n    int position;\r\n    try {\r\n        position = mAllModelIds.indexOf(mEditorNote.model().getLong(\"id\"));\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    mNoteTypeSpinner.setSelection(position, false);\r\n    if (mAddNote) {\r\n        mNoteTypeSpinner.setOnItemSelectedListener(new SetNoteTypeListener());\r\n        setTitle(R.string.cardeditor_title_add_note);\r\n        String contents = null;\r\n        if (mSourceText != null) {\r\n            if (mAedictIntent && (mEditFields.size() == 3) && mSourceText[1].contains(\"[\")) {\r\n                contents = mSourceText[1].replaceFirst(\"\\\\[\", \"\" + mSourceText[0] + \"\");\r\n                contents = contents.substring(0, contents.length() - 1);\r\n            } else if (mEditFields.size() > 0) {\r\n                mEditFields.get(0).setText(mSourceText[0]);\r\n                if (mEditFields.size() > 1) {\r\n                    mEditFields.get(1).setText(mSourceText[1]);\r\n                }\r\n            }\r\n        } else {\r\n            contents = intent.getStringExtra(EXTRA_CONTENTS);\r\n        }\r\n        if (contents != null) {\r\n            setEditFieldTexts(contents);\r\n        }\r\n    } else {\r\n        mNoteTypeSpinner.setOnItemSelectedListener(new EditNoteTypeListener());\r\n        setTitle(R.string.cardeditor_title_edit_card);\r\n    }\r\n    findViewById(R.id.CardEditorTagButton).setOnClickListener(new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View v) {\r\n            Timber.i(\"NoteEditor:: Tags button pressed... opening tags editor\");\r\n            showTagsDialog();\r\n        }\r\n    });\r\n    if (!mAddNote && mCurrentEditedCard != null) {\r\n        Timber.i(\"onCollectionLoaded() Edit note activity successfully started with card id %d\", mCurrentEditedCard.getId());\r\n    }\r\n    if (mEditFields != null && !mEditFields.isEmpty()) {\r\n        FieldEditText first = mEditFields.getFirst();\r\n        first.requestFocus();\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    Timber.i(\"NoteEditor:: Cards button pressed. Opening template editor\");\r\n    showCardTemplateEditor();\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    mCurrentDid = mAllDeckIds.get(pos);\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    Timber.i(\"NoteEditor:: Tags button pressed... opening tags editor\");\r\n    showTagsDialog();\r\n}"
}, {
	"Path": "com.ichi2.anki.reviewer.CustomFontsReviewerExt.getDominantFontStyle",
	"Comment": "returns the css that determines font choice in a global fashion.",
	"Method": "String getDominantFontStyle(Context context,Map<String, AnkiFont> customFontsMap){\r\n    if (mDominantFontStyle == null) {\r\n        mDominantFontStyle = getOverrideFontStyle(context, customFontsMap);\r\n        if (TextUtils.isEmpty(mDominantFontStyle)) {\r\n            mDominantFontStyle = getDefaultFontStyle(context, customFontsMap);\r\n            if (TextUtils.isEmpty(mDominantFontStyle)) {\r\n                mDominantFontStyle = getThemeFontStyle();\r\n            }\r\n        }\r\n    }\r\n    return mDominantFontStyle;\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,double[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,short[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.api.Fail.setRemoveAssertJRelatedElementsFromStackTrace",
	"Comment": "sets whether we remove elements related to assertj from assertion error stack trace.",
	"Method": "void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace){\r\n    Failures.instance().setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.PathAndQuery.cachedPaths",
	"Comment": "returns paths that have had their parse result cached. only for use in tests.",
	"Method": "Set<String> cachedPaths(){\r\n    requireNonNull(CACHE, \"CACHE\");\r\n    return CACHE.asMap().keySet();\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.HttpRequest.of",
	"Comment": "creates a new http request with empty content and closes the stream.",
	"Method": "HttpRequest of(HttpMethod method,String path,HttpRequest of,HttpMethod method,String path,MediaType mediaType,String content,HttpRequest of,HttpMethod method,String path,MediaType mediaType,String format,Object args,HttpRequest of,HttpMethod method,String path,MediaType mediaType,byte[] content,HttpRequest of,HttpMethod method,String path,MediaType mediaType,byte[] content,int offset,int length,HttpRequest of,HttpMethod method,String path,MediaType mediaType,HttpData content,HttpRequest of,HttpMethod method,String path,MediaType mediaType,HttpData content,HttpHeaders trailingHeaders,HttpRequest of,HttpHeaders headers,HttpRequest of,HttpHeaders headers,HttpData content,HttpRequest of,HttpHeaders headers,HttpData content,HttpHeaders trailingHeaders,HttpRequest of,HttpHeaders headers,HttpObject objs,HttpRequest of,AggregatedHttpMessage message,HttpRequest of,HttpHeaders headers,Publisher<? extends HttpObject> publisher){\r\n    requireNonNull(publisher, \"publisher\");\r\n    return new PublisherBasedHttpRequest(headers, publisher);\r\n}"
}, {
	"Path": "com.ichi2.anki.tests.ContentProviderTest.testQueryCardFromCertainDeck",
	"Comment": "test that query for the next card in the schedule returns a valid result with a deck selector",
	"Method": "void testQueryCardFromCertainDeck(){\r\n    long deckToTest = mTestDeckIds[0];\r\n    String deckSelector = \"deckID=?\";\r\n    String[] deckArguments = { Long.toString(deckToTest) };\r\n    Collection col;\r\n    col = CollectionHelper.getInstance().getCol(InstrumentationRegistry.getInstrumentation().getTargetContext());\r\n    Sched sched = col.getSched();\r\n    long selectedDeckBeforeTest = col.getDecks().selected();\r\n    col.getDecks().select(1);\r\n    Cursor reviewInfoCursor = InstrumentationRegistry.getInstrumentation().getTargetContext().getContentResolver().query(FlashCardsContract.ReviewInfo.CONTENT_URI, null, deckSelector, deckArguments, null);\r\n    assertNotNull(reviewInfoCursor);\r\n    assertEquals(\"Check that we actually received one card\", 1, reviewInfoCursor.getCount());\r\n    try {\r\n        reviewInfoCursor.moveToFirst();\r\n        int cardOrd = reviewInfoCursor.getInt(reviewInfoCursor.getColumnIndex(FlashCardsContract.ReviewInfo.CARD_ORD));\r\n        long noteID = reviewInfoCursor.getLong(reviewInfoCursor.getColumnIndex(FlashCardsContract.ReviewInfo.NOTE_ID));\r\n        assertEquals(\"Check that the selected deck has not changed\", 1, col.getDecks().selected());\r\n        col.getDecks().select(deckToTest);\r\n        Card nextCard = null;\r\n        for (int i = 0; i < 10; i++) {\r\n            sched.reset();\r\n            nextCard = sched.getCard();\r\n            if (nextCard.note().getId() == noteID && nextCard.getOrd() == cardOrd)\r\n                break;\r\n        }\r\n        assertNotNull(\"Check that there actually is a next scheduled card\", nextCard);\r\n        assertEquals(\"Check that received card and actual card have same note id\", nextCard.note().getId(), noteID);\r\n        assertEquals(\"Check that received card and actual card have same card ord\", nextCard.getOrd(), cardOrd);\r\n    } finally {\r\n        reviewInfoCursor.close();\r\n    }\r\n    col.getDecks().select(selectedDeckBeforeTest);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.setDuration",
	"Comment": "sets the length of each of the current child animations of this animatorset. by default,each child animation will use its own duration. if the duration is set on the animatorset,then each child animation inherits this duration.",
	"Method": "AnimatorSet setDuration(long duration){\r\n    if (duration < 0) {\r\n        throw new IllegalArgumentException(\"duration must be a value of zero or greater\");\r\n    }\r\n    for (Node node : mNodes) {\r\n        node.animation.setDuration(duration);\r\n    }\r\n    mDuration = duration;\r\n    return this;\r\n}"
}, {
	"Path": "org.agrona.collections.Long2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Long, Long>() {\r\n        public Long[] createKeyArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public Long[] createValueArray(final int length) {\r\n            return new Long[length];\r\n        }\r\n        public SampleElements<Map.Entry<Long, Long>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n        }\r\n        public Map<Long, Long> create(final Object... entries) {\r\n            final Long2ObjectHashMap<Long> map = new Long2ObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Long, Long>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Long, Long>> order(final List<Map.Entry<Long, Long>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Long2ObjectHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Long2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Long[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1L, 123L), Helpers.mapEntry(2L, 234L), Helpers.mapEntry(3L, 345L), Helpers.mapEntry(345L, 6L), Helpers.mapEntry(777L, 666L));\r\n}"
}, {
	"Path": "org.agrona.collections.Long2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Long2ObjectHashMap<Long> map = new Long2ObjectHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Long, Long> e = (Map.Entry<Long, Long>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Long2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Long2ObjectHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.Animator.addListener",
	"Comment": "adds a listener to the set of listeners that are sent events through the life of ananimation, such as start, repeat, and end.",
	"Method": "void addListener(AnimatorListener listener){\r\n    if (mListeners == null) {\r\n        mListeners = new ArrayList<AnimatorListener>();\r\n    }\r\n    mListeners.add(listener);\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,char[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.util.Preconditions.checkArgument",
	"Comment": "ensures the truth of an expression involving one or more parameters to the calling method.borrowed from guava.",
	"Method": "void checkArgument(boolean expression,String errorMessageTemplate,Object errorMessageArgs){\r\n    if (!expression)\r\n        throw new IllegalArgumentException(format(errorMessageTemplate, errorMessageArgs));\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.renameFieldDialog",
	"Comment": "creates a dialog to rename the currently selected field, short loading tiprocessing time is constant",
	"Method": "void renameFieldDialog(){\r\n    mFieldNameInput = new EditText(this);\r\n    mFieldNameInput.setSingleLine(true);\r\n    mFieldNameInput.setText(mFieldLabels.get(mCurrentPos));\r\n    mFieldNameInput.setSelection(mFieldNameInput.getText().length());\r\n    new MaterialDialog.Builder(this).title(R.string.rename_model).positiveText(R.string.rename).customView(mFieldNameInput, true).onPositive((dialog, which) -> {\r\n        String fieldLabel = mFieldNameInput.getText().toString().replaceAll(\"[\\'\\\"\\\\n\\\\r\\\\[\\\\]\\\\(\\\\)]\", \"\");\r\n        if (fieldLabel.length() == 0) {\r\n            showToast(getResources().getString(R.string.toast_empty_name));\r\n        } else if (containsField(fieldLabel)) {\r\n            showToast(getResources().getString(R.string.toast_duplicate_field));\r\n        } else {\r\n            try {\r\n                renameField();\r\n            } catch (ConfirmModSchemaException e) {\r\n                ConfirmationDialog c = new ConfirmationDialog();\r\n                c.setArgs(getResources().getString(R.string.full_sync_confirmation));\r\n                Runnable confirm = () -> {\r\n                    try {\r\n                        mCol.modSchema(false);\r\n                        renameField();\r\n                    } catch (ConfirmModSchemaException e1) {\r\n                    }\r\n                    dismissContextMenu();\r\n                };\r\n                c.setConfirm(confirm);\r\n                c.setCancel(mConfirmDialogCancel);\r\n                ModelFieldEditor.this.showDialogFragment(c);\r\n            }\r\n        }\r\n    }).negativeText(R.string.dialog_cancel).show();\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.refreshList",
	"Comment": "updates the arrayadapters for the main listview.arraylists must be manually updated.",
	"Method": "void refreshList(){\r\n    mModelDisplayAdapter.notifyDataSetChanged();\r\n    updateSubtitleText();\r\n}"
}, {
	"Path": "com.actionbarsherlock.ActionBarSherlock.callbackOptionsItemSelected",
	"Comment": "internal method for dispatching options menu selection to the owningactivity callback.",
	"Method": "boolean callbackOptionsItemSelected(MenuItem item){\r\n    if (BuildConfig.DEBUG)\r\n        Log.d(TAG, \"[callbackOptionsItemSelected] item: \" + item.getTitleCondensed());\r\n    boolean result = false;\r\n    if (mActivity instanceof OnMenuItemSelectedListener) {\r\n        OnMenuItemSelectedListener listener = (OnMenuItemSelectedListener) mActivity;\r\n        result = listener.onMenuItemSelected(Window.FEATURE_OPTIONS_PANEL, item);\r\n    } else if (mActivity instanceof OnOptionsItemSelectedListener) {\r\n        OnOptionsItemSelectedListener listener = (OnOptionsItemSelectedListener) mActivity;\r\n        result = listener.onOptionsItemSelected(item);\r\n    }\r\n    if (BuildConfig.DEBUG)\r\n        Log.d(TAG, \"[callbackOptionsItemSelected] returning \" + result);\r\n    return result;\r\n}"
}, {
	"Path": "com.ichi2.anki.StudyOptionsFragment.getDeckTaskListener",
	"Comment": "returns a listener that rebuilds the interface after execute.",
	"Method": "DeckTask.TaskListener getDeckTaskListener(boolean refreshDecklist){\r\n    return new DeckTask.TaskListener() {\r\n        @Override\r\n        public void onPreExecute() {\r\n        }\r\n        @Override\r\n        public void onPostExecute(DeckTask.TaskData result) {\r\n            dismissProgressDialog();\r\n            if (result != null) {\r\n                Object[] obj = result.getObjArray();\r\n                int newCards = (Integer) obj[0];\r\n                int lrnCards = (Integer) obj[1];\r\n                int revCards = (Integer) obj[2];\r\n                int totalNew = (Integer) obj[3];\r\n                int totalCards = (Integer) obj[4];\r\n                int eta = (Integer) obj[5];\r\n                if (getActivity() == null) {\r\n                    Timber.e(\"StudyOptionsFragment.mRefreshFragmentListener :: can't refresh\");\r\n                    return;\r\n                }\r\n                initAllContentViews();\r\n                String fullName;\r\n                JSONObject deck = getCol().getDecks().current();\r\n                try {\r\n                    fullName = deck.getString(\"name\");\r\n                    String[] name = fullName.split(\"::\");\r\n                    StringBuilder nameBuilder = new StringBuilder();\r\n                    if (name.length > 0) {\r\n                        nameBuilder.append(name[0]);\r\n                    }\r\n                    if (name.length > 1) {\r\n                        nameBuilder.append(\"\\n\").append(name[1]);\r\n                    }\r\n                    if (name.length > 3) {\r\n                        nameBuilder.append(\"...\");\r\n                    }\r\n                    if (name.length > 2) {\r\n                        nameBuilder.append(\"\\n\").append(name[name.length - 1]);\r\n                    }\r\n                    mTextDeckName.setText(nameBuilder.toString());\r\n                } catch (JSONException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n                if (mLoadWithDeckOptions) {\r\n                    openFilteredDeckOptions(mLoadWithDeckOptions);\r\n                    mLoadWithDeckOptions = false;\r\n                    return;\r\n                }\r\n                boolean isDynamic = deck.optInt(\"dyn\", 0) != 0;\r\n                if (totalCards == 0 && !isDynamic) {\r\n                    mCurrentContentView = CONTENT_EMPTY;\r\n                    mDeckInfoLayout.setVisibility(View.VISIBLE);\r\n                    mTextCongratsMessage.setVisibility(View.VISIBLE);\r\n                    mTextCongratsMessage.setText(R.string.studyoptions_empty);\r\n                    mButtonStart.setVisibility(View.GONE);\r\n                } else if (newCards + lrnCards + revCards == 0) {\r\n                    mCurrentContentView = CONTENT_CONGRATS;\r\n                    if (!isDynamic) {\r\n                        mDeckInfoLayout.setVisibility(View.GONE);\r\n                        mButtonStart.setVisibility(View.VISIBLE);\r\n                        mButtonStart.setText(R.string.custom_study);\r\n                    } else {\r\n                        mButtonStart.setVisibility(View.GONE);\r\n                    }\r\n                    mTextCongratsMessage.setVisibility(View.VISIBLE);\r\n                    mTextCongratsMessage.setText(getCol().getSched().finishedMsg(getActivity()));\r\n                } else {\r\n                    mCurrentContentView = CONTENT_STUDY_OPTIONS;\r\n                    mDeckInfoLayout.setVisibility(View.VISIBLE);\r\n                    mTextCongratsMessage.setVisibility(View.GONE);\r\n                    mButtonStart.setVisibility(View.VISIBLE);\r\n                    mButtonStart.setText(R.string.studyoptions_start);\r\n                }\r\n                String desc;\r\n                if (isDynamic) {\r\n                    desc = getResources().getString(R.string.dyn_deck_desc);\r\n                } else {\r\n                    desc = getCol().getDecks().getActualDescription();\r\n                }\r\n                if (desc.length() > 0) {\r\n                    mTextDeckDescription.setText(CompatHelper.getCompat().fromHtml(desc));\r\n                    mTextDeckDescription.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    mTextDeckDescription.setVisibility(View.GONE);\r\n                }\r\n                mTextTodayNew.setText(String.valueOf(newCards));\r\n                mTextTodayLrn.setText(String.valueOf(lrnCards));\r\n                mTextTodayRev.setText(String.valueOf(revCards));\r\n                if (totalNew < NEW_CARD_COUNT_TRUNCATE_THRESHOLD) {\r\n                    mTextNewTotal.setText(String.valueOf(totalNew));\r\n                } else {\r\n                    mTextNewTotal.setText(\">1000\");\r\n                    if (mFullNewCountThread != null) {\r\n                        mFullNewCountThread.interrupt();\r\n                    }\r\n                    mFullNewCountThread = new Thread(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            Collection collection = getCol();\r\n                            StringBuilder sbQuery = new StringBuilder();\r\n                            sbQuery.append(\"SELECT count(*) FROM cards WHERE did IN \");\r\n                            sbQuery.append(Utils.ids2str(collection.getDecks().active()));\r\n                            sbQuery.append(\" AND queue = 0\");\r\n                            final int fullNewCount = collection.getDb().queryScalar(sbQuery.toString());\r\n                            if (fullNewCount > 0) {\r\n                                Runnable setNewTotalText = new Runnable() {\r\n                                    @Override\r\n                                    public void run() {\r\n                                        mTextNewTotal.setText(String.valueOf(fullNewCount));\r\n                                    }\r\n                                };\r\n                                if (!Thread.currentThread().isInterrupted()) {\r\n                                    mTextNewTotal.post(setNewTotalText);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    mFullNewCountThread.start();\r\n                }\r\n                mTextTotal.setText(String.valueOf(totalCards));\r\n                if (eta != -1) {\r\n                    mTextETA.setText(Integer.toString(eta));\r\n                } else {\r\n                    mTextETA.setText(\"-\");\r\n                }\r\n                configureToolbar();\r\n            }\r\n            if (mFragmented && refreshDecklist) {\r\n                mListener.onRequireDeckListUpdate();\r\n            }\r\n        }\r\n    };\r\n}"
}, {
	"Path": "com.ichi2.anki.StudyOptionsFragment.getDeckTaskListener",
	"Comment": "returns a listener that rebuilds the interface after execute.",
	"Method": "DeckTask.TaskListener getDeckTaskListener(boolean refreshDecklist){\r\n}"
}, {
	"Path": "com.ichi2.anki.StudyOptionsFragment.getDeckTaskListener",
	"Comment": "returns a listener that rebuilds the interface after execute.",
	"Method": "DeckTask.TaskListener getDeckTaskListener(boolean refreshDecklist){\r\n    dismissProgressDialog();\r\n    if (result != null) {\r\n        Object[] obj = result.getObjArray();\r\n        int newCards = (Integer) obj[0];\r\n        int lrnCards = (Integer) obj[1];\r\n        int revCards = (Integer) obj[2];\r\n        int totalNew = (Integer) obj[3];\r\n        int totalCards = (Integer) obj[4];\r\n        int eta = (Integer) obj[5];\r\n        if (getActivity() == null) {\r\n            Timber.e(\"StudyOptionsFragment.mRefreshFragmentListener :: can't refresh\");\r\n            return;\r\n        }\r\n        initAllContentViews();\r\n        String fullName;\r\n        JSONObject deck = getCol().getDecks().current();\r\n        try {\r\n            fullName = deck.getString(\"name\");\r\n            String[] name = fullName.split(\"::\");\r\n            StringBuilder nameBuilder = new StringBuilder();\r\n            if (name.length > 0) {\r\n                nameBuilder.append(name[0]);\r\n            }\r\n            if (name.length > 1) {\r\n                nameBuilder.append(\"\\n\").append(name[1]);\r\n            }\r\n            if (name.length > 3) {\r\n                nameBuilder.append(\"...\");\r\n            }\r\n            if (name.length > 2) {\r\n                nameBuilder.append(\"\\n\").append(name[name.length - 1]);\r\n            }\r\n            mTextDeckName.setText(nameBuilder.toString());\r\n        } catch (JSONException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        if (mLoadWithDeckOptions) {\r\n            openFilteredDeckOptions(mLoadWithDeckOptions);\r\n            mLoadWithDeckOptions = false;\r\n            return;\r\n        }\r\n        boolean isDynamic = deck.optInt(\"dyn\", 0) != 0;\r\n        if (totalCards == 0 && !isDynamic) {\r\n            mCurrentContentView = CONTENT_EMPTY;\r\n            mDeckInfoLayout.setVisibility(View.VISIBLE);\r\n            mTextCongratsMessage.setVisibility(View.VISIBLE);\r\n            mTextCongratsMessage.setText(R.string.studyoptions_empty);\r\n            mButtonStart.setVisibility(View.GONE);\r\n        } else if (newCards + lrnCards + revCards == 0) {\r\n            mCurrentContentView = CONTENT_CONGRATS;\r\n            if (!isDynamic) {\r\n                mDeckInfoLayout.setVisibility(View.GONE);\r\n                mButtonStart.setVisibility(View.VISIBLE);\r\n                mButtonStart.setText(R.string.custom_study);\r\n            } else {\r\n                mButtonStart.setVisibility(View.GONE);\r\n            }\r\n            mTextCongratsMessage.setVisibility(View.VISIBLE);\r\n            mTextCongratsMessage.setText(getCol().getSched().finishedMsg(getActivity()));\r\n        } else {\r\n            mCurrentContentView = CONTENT_STUDY_OPTIONS;\r\n            mDeckInfoLayout.setVisibility(View.VISIBLE);\r\n            mTextCongratsMessage.setVisibility(View.GONE);\r\n            mButtonStart.setVisibility(View.VISIBLE);\r\n            mButtonStart.setText(R.string.studyoptions_start);\r\n        }\r\n        String desc;\r\n        if (isDynamic) {\r\n            desc = getResources().getString(R.string.dyn_deck_desc);\r\n        } else {\r\n            desc = getCol().getDecks().getActualDescription();\r\n        }\r\n        if (desc.length() > 0) {\r\n            mTextDeckDescription.setText(CompatHelper.getCompat().fromHtml(desc));\r\n            mTextDeckDescription.setVisibility(View.VISIBLE);\r\n        } else {\r\n            mTextDeckDescription.setVisibility(View.GONE);\r\n        }\r\n        mTextTodayNew.setText(String.valueOf(newCards));\r\n        mTextTodayLrn.setText(String.valueOf(lrnCards));\r\n        mTextTodayRev.setText(String.valueOf(revCards));\r\n        if (totalNew < NEW_CARD_COUNT_TRUNCATE_THRESHOLD) {\r\n            mTextNewTotal.setText(String.valueOf(totalNew));\r\n        } else {\r\n            mTextNewTotal.setText(\">1000\");\r\n            if (mFullNewCountThread != null) {\r\n                mFullNewCountThread.interrupt();\r\n            }\r\n            mFullNewCountThread = new Thread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Collection collection = getCol();\r\n                    StringBuilder sbQuery = new StringBuilder();\r\n                    sbQuery.append(\"SELECT count(*) FROM cards WHERE did IN \");\r\n                    sbQuery.append(Utils.ids2str(collection.getDecks().active()));\r\n                    sbQuery.append(\" AND queue = 0\");\r\n                    final int fullNewCount = collection.getDb().queryScalar(sbQuery.toString());\r\n                    if (fullNewCount > 0) {\r\n                        Runnable setNewTotalText = new Runnable() {\r\n                            @Override\r\n                            public void run() {\r\n                                mTextNewTotal.setText(String.valueOf(fullNewCount));\r\n                            }\r\n                        };\r\n                        if (!Thread.currentThread().isInterrupted()) {\r\n                            mTextNewTotal.post(setNewTotalText);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            mFullNewCountThread.start();\r\n        }\r\n        mTextTotal.setText(String.valueOf(totalCards));\r\n        if (eta != -1) {\r\n            mTextETA.setText(Integer.toString(eta));\r\n        } else {\r\n            mTextETA.setText(\"-\");\r\n        }\r\n        configureToolbar();\r\n    }\r\n    if (mFragmented && refreshDecklist) {\r\n        mListener.onRequireDeckListUpdate();\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.StudyOptionsFragment.getDeckTaskListener",
	"Comment": "returns a listener that rebuilds the interface after execute.",
	"Method": "DeckTask.TaskListener getDeckTaskListener(boolean refreshDecklist){\r\n    Collection collection = getCol();\r\n    StringBuilder sbQuery = new StringBuilder();\r\n    sbQuery.append(\"SELECT count(*) FROM cards WHERE did IN \");\r\n    sbQuery.append(Utils.ids2str(collection.getDecks().active()));\r\n    sbQuery.append(\" AND queue = 0\");\r\n    final int fullNewCount = collection.getDb().queryScalar(sbQuery.toString());\r\n    if (fullNewCount > 0) {\r\n        Runnable setNewTotalText = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                mTextNewTotal.setText(String.valueOf(fullNewCount));\r\n            }\r\n        };\r\n        if (!Thread.currentThread().isInterrupted()) {\r\n            mTextNewTotal.post(setNewTotalText);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.StudyOptionsFragment.getDeckTaskListener",
	"Comment": "returns a listener that rebuilds the interface after execute.",
	"Method": "DeckTask.TaskListener getDeckTaskListener(boolean refreshDecklist){\r\n    mTextNewTotal.setText(String.valueOf(fullNewCount));\r\n}"
}, {
	"Path": "trikita.anvil.Anvil.currentView",
	"Comment": "returns currently rendered view. it allows to access the real view frominside the renderable.",
	"Method": "T currentView(View currentView){\r\n    if (currentMount == null) {\r\n        return null;\r\n    }\r\n    return (T) currentMount.iterator.currentView();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.Keyframe.getFraction",
	"Comment": "gets the time for this keyframe, as a fraction of the overall animation duration.",
	"Method": "float getFraction(){\r\n    return mFraction;\r\n}"
}, {
	"Path": "org.assertj.core.util.diff.DiffUtils.parseUnifiedDiff",
	"Comment": "parse the given text in unified format and creates the list of deltas for",
	"Method": "Patch<String> parseUnifiedDiff(List<String> diff){\r\n    boolean inPrelude = true;\r\n    List<String[]> rawChunk = new ArrayList();\r\n    Patch<String> patch = new Patch();\r\n    int old_ln = 0, new_ln = 0;\r\n    String tag;\r\n    String rest;\r\n    for (String line : diff) {\r\n        if (inPrelude) {\r\n            if (line.startsWith(\"+++\")) {\r\n                inPrelude = false;\r\n            }\r\n            continue;\r\n        }\r\n        Matcher m = unifiedDiffChunkRe.matcher(line);\r\n        if (m.find()) {\r\n            if (rawChunk.size() != 0) {\r\n                List<String> oldChunkLines = new ArrayList();\r\n                List<String> newChunkLines = new ArrayList();\r\n                for (String[] raw_line : rawChunk) {\r\n                    tag = raw_line[0];\r\n                    rest = raw_line[1];\r\n                    if (tag.equals(\" \") || tag.equals(\"-\")) {\r\n                        oldChunkLines.add(rest);\r\n                    }\r\n                    if (tag.equals(\" \") || tag.equals(\"+\")) {\r\n                        newChunkLines.add(rest);\r\n                    }\r\n                }\r\n                patch.addDelta(new ChangeDelta(new Chunk(old_ln - 1, oldChunkLines), new Chunk(new_ln - 1, newChunkLines)));\r\n                rawChunk.clear();\r\n            }\r\n            old_ln = m.group(1) == null ? 1 : Integer.parseInt(m.group(1));\r\n            new_ln = m.group(3) == null ? 1 : Integer.parseInt(m.group(3));\r\n            if (old_ln == 0) {\r\n                old_ln += 1;\r\n            }\r\n            if (new_ln == 0) {\r\n                new_ln += 1;\r\n            }\r\n        } else {\r\n            if (line.length() > 0) {\r\n                tag = line.substring(0, 1);\r\n                rest = line.substring(1);\r\n                if (tag.equals(\" \") || tag.equals(\"+\") || tag.equals(\"-\")) {\r\n                    rawChunk.add(new String[] { tag, rest });\r\n                }\r\n            } else {\r\n                rawChunk.add(new String[] { \" \", \"\" });\r\n            }\r\n        }\r\n    }\r\n    if (rawChunk.size() != 0) {\r\n        List<String> oldChunkLines = new ArrayList();\r\n        List<String> newChunkLines = new ArrayList();\r\n        for (String[] raw_line : rawChunk) {\r\n            tag = raw_line[0];\r\n            rest = raw_line[1];\r\n            if (tag.equals(\" \") || tag.equals(\"-\")) {\r\n                oldChunkLines.add(rest);\r\n            }\r\n            if (tag.equals(\" \") || tag.equals(\"+\")) {\r\n                newChunkLines.add(rest);\r\n            }\r\n        }\r\n        patch.addDelta(new ChangeDelta(new Chunk(old_ln - 1, oldChunkLines), new Chunk(new_ln - 1, newChunkLines)));\r\n        rawChunk.clear();\r\n    }\r\n    return patch;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.setIconifiedByDefault",
	"Comment": "sets the default or resting state of the search field. if true, a single search icon isshown by default and expands to show the text field and other buttons when pressed. also,if the default state is iconified, then it collapses to that state when the close buttonis pressed. changes to this property will take effect immediately.the default value is true.",
	"Method": "void setIconifiedByDefault(boolean iconified){\r\n    if (mIconifiedByDefault == iconified)\r\n        return;\r\n    mIconifiedByDefault = iconified;\r\n    updateViewsVisibility(iconified);\r\n    updateQueryHint();\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupBuilder.retryInterval",
	"Comment": "sets the interval between health check requests. must be positive.",
	"Method": "HttpHealthCheckedEndpointGroupBuilder retryInterval(Duration retryInterval){\r\n    requireNonNull(retryInterval, \"retryInterval\");\r\n    checkArgument(!retryInterval.isNegative() && !retryInterval.isZero(), \"retryInterval: %s (expected > 0)\", retryInterval);\r\n    this.retryInterval = retryInterval;\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Maps.assertContainsOnlyKeys",
	"Comment": "verifies that the actual map contains only the given keys and nothing else, in any order.",
	"Method": "void assertContainsOnlyKeys(AssertionInfo info,Map<K, V> actual,K keys){\r\n    assertNotNull(info, actual);\r\n    failIfNull(keys);\r\n    if (actual.isEmpty() && keys.length == 0) {\r\n        return;\r\n    }\r\n    failIfEmpty(keys);\r\n    Set<K> notFound = new LinkedHashSet();\r\n    Set<K> notExpected = new LinkedHashSet();\r\n    compareActualMapAndExpectedKeys(actual, keys, notExpected, notFound);\r\n    if (!notFound.isEmpty() || !notExpected.isEmpty())\r\n        throw failures.failure(info, shouldContainOnlyKeys(actual, keys, notFound, notExpected));\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet.isRunning",
	"Comment": "returns true if any of the child animations of this animatorset have been started and havenot yet ended.",
	"Method": "boolean isRunning(){\r\n    for (Node node : mNodes) {\r\n        if (node.animation.isRunning()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.agrona.collections.ObjectHashSet.resizeThreshold",
	"Comment": "get the actual threshold which when reached the map will resize.this is a function of the current capacity and load factor.",
	"Method": "int resizeThreshold(){\r\n    return resizeThreshold;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.swapTexturesWithPage",
	"Comment": "swap textures of two pages and recycle unused texture idscall this function when page is flipped over in double pages mode",
	"Method": "Page swapTexturesWithPage(Page page){\r\n    mUnusedTexIDs[mUnusedTexSize++] = mTexIDs[SECOND_TEXTURE_ID];\r\n    mTexIDs[SECOND_TEXTURE_ID] = mTexIDs[FIRST_TEXTURE_ID];\r\n    mUnusedTexIDs[mUnusedTexSize++] = mTexIDs[BACK_TEXTURE_ID];\r\n    mTexIDs[BACK_TEXTURE_ID] = page.mTexIDs[FIRST_TEXTURE_ID];\r\n    mTexIDs[FIRST_TEXTURE_ID] = page.mTexIDs[BACK_TEXTURE_ID];\r\n    page.mTexIDs[BACK_TEXTURE_ID] = INVALID_TEXTURE_ID;\r\n    page.mTexIDs[FIRST_TEXTURE_ID] = page.mTexIDs[SECOND_TEXTURE_ID];\r\n    page.mTexIDs[SECOND_TEXTURE_ID] = INVALID_TEXTURE_ID;\r\n    return this;\r\n}"
}, {
	"Path": "com.ichi2.anki.api.AddContentApi.addNewDeck",
	"Comment": "create a new deck with specified name and save the reference to sharedpreferences for later",
	"Method": "Long addNewDeck(String deckName){\r\n    ContentValues values = new ContentValues();\r\n    values.put(Deck.DECK_NAME, deckName);\r\n    Uri newDeckUri = mResolver.insert(Deck.CONTENT_ALL_URI, values);\r\n    if (newDeckUri != null) {\r\n        return Long.parseLong(newDeckUri.getLastPathSegment());\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.ClientFactoryBuilder.connectionPoolListener",
	"Comment": "sets the listener which is notified on a connection pool event.",
	"Method": "ClientFactoryBuilder connectionPoolListener(ConnectionPoolListener connectionPoolListener){\r\n    this.connectionPoolListener = requireNonNull(connectionPoolListener, \"connectionPoolListener\");\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.setProgressDrawable",
	"Comment": "define the drawable used to draw the progress bar inprogress mode.",
	"Method": "void setProgressDrawable(Drawable d){\r\n    boolean needUpdate;\r\n    if (mProgressDrawable != null && d != mProgressDrawable) {\r\n        mProgressDrawable.setCallback(null);\r\n        needUpdate = true;\r\n    } else {\r\n        needUpdate = false;\r\n    }\r\n    if (d != null) {\r\n        d.setCallback(this);\r\n        int drawableHeight = d.getMinimumHeight();\r\n        if (mMaxHeight < drawableHeight) {\r\n            mMaxHeight = drawableHeight;\r\n            requestLayout();\r\n        }\r\n    }\r\n    mProgressDrawable = d;\r\n    if (!mIndeterminate) {\r\n        mCurrentDrawable = d;\r\n        postInvalidate();\r\n    }\r\n    if (needUpdate) {\r\n        updateDrawableBounds(getWidth(), getHeight());\r\n        updateDrawableState();\r\n        doRefreshProgress(android.R.id.progress, mProgress, false, false);\r\n        doRefreshProgress(android.R.id.secondaryProgress, mSecondaryProgress, false, false);\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.ServiceSpecification.services",
	"Comment": "returns the metadata about the services in this specification.",
	"Method": "Set<ServiceInfo> services(){\r\n    return services;\r\n}"
}, {
	"Path": "org.agrona.BitUtil.toHexByteArray",
	"Comment": "generate a byte array that is a hex representation of a given byte array.",
	"Method": "byte[] toHexByteArray(byte[] buffer,byte[] toHexByteArray,byte[] buffer,int offset,int length){\r\n    final byte[] outputBuffer = new byte[length << 1];\r\n    for (int i = 0; i < (length << 1); i += 2) {\r\n        final byte b = buffer[offset + (i >> 1)];\r\n        outputBuffer[i] = HEX_DIGIT_TABLE[(b >> 4) & 0x0F];\r\n        outputBuffer[i + 1] = HEX_DIGIT_TABLE[b & 0x0F];\r\n    }\r\n    return outputBuffer;\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMap.capacity",
	"Comment": "get the total capacity for the map to which the load factor will be a fraction of.",
	"Method": "int capacity(){\r\n    return values.length;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.PathMappingResult.hasLowestScore",
	"Comment": "returns whether the score of this result is the lowest or not.",
	"Method": "boolean hasLowestScore(){\r\n    return LOWEST_SCORE == score();\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.readHeader",
	"Comment": "processes the grpc compression header which is composed of the compression flag and the outerframe length.",
	"Method": "void readHeader(){\r\n    final int type = readUnsignedByte();\r\n    if ((type & RESERVED_MASK) != 0) {\r\n        throw Status.INTERNAL.withDescription(DEBUG_STRING + \": Frame header malformed: reserved bits not zero\").asRuntimeException();\r\n    }\r\n    compressedFlag = (type & COMPRESSED_FLAG_MASK) != 0;\r\n    requiredLength = readInt();\r\n    if (requiredLength < 0 || requiredLength > maxMessageSizeBytes) {\r\n        throw Status.RESOURCE_EXHAUSTED.withDescription(String.format(\"%s: Frame size %d exceeds maximum: %d. \", DEBUG_STRING, requiredLength, maxMessageSizeBytes)).asRuntimeException();\r\n    }\r\n    state = State.BODY;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,Object[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.ServiceSpecification.structs",
	"Comment": "returns the metadata about the structs related with the services in this specification.",
	"Method": "Set<StructInfo> structs(){\r\n    return structs;\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertContainsOnlyOnce",
	"Comment": "asserts that the given array contains only once the given values.",
	"Method": "void assertContainsOnlyOnce(AssertionInfo info,double[] actual,double[] values){\r\n    arrays.assertContainsOnlyOnce(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.spotify.apollo.Request.header",
	"Comment": "a header of the request message, looked up in a case insensitive way,or empty if no header with that name is found.",
	"Method": "Optional<String> header(String name){\r\n    Objects.requireNonNull(name, \"Header names cannot be null\");\r\n    for (Map.Entry<String, String> headerEntry : headerEntries()) {\r\n        if (name.equalsIgnoreCase(headerEntry.getKey())) {\r\n            return Optional.ofNullable(headerEntry.getValue());\r\n        }\r\n    }\r\n    return Optional.empty();\r\n}"
}, {
	"Path": "com.ichi2.anki.AnkiActivity.startLoadingCollection",
	"Comment": "method for loading the collection which is inherited by all ankiactivitys",
	"Method": "void startLoadingCollection(){\r\n    Timber.d(\"AnkiActivity.startLoadingCollection()\");\r\n    if (colIsOpen()) {\r\n        onCollectionLoaded(getCol());\r\n        return;\r\n    }\r\n    showProgressBar();\r\n    CollectionLoader.load(this, col -> {\r\n        if (col != null) {\r\n            onCollectionLoaded(col);\r\n        } else {\r\n            Intent deckPicker = new Intent(this, DeckPicker.class);\r\n            deckPicker.putExtra(\"collectionLoadError\", true);\r\n            deckPicker.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            startActivityWithAnimation(deckPicker, ActivityTransitionAnimation.LEFT);\r\n        }\r\n    });\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.DefaultHttpRequestTest.abortedAggregation",
	"Comment": "the aggregation future must be completed even if the request being aggregated has been aborted.",
	"Method": "void abortedAggregation(){\r\n    final Thread mainThread = Thread.currentThread();\r\n    final DefaultHttpRequest req = new DefaultHttpRequest(HttpHeaders.of(HttpMethod.GET, \"/foo\"));\r\n    final CompletableFuture<AggregatedHttpMessage> future;\r\n    if (executorSpecified) {\r\n        if (withPooledObjects) {\r\n            future = req.aggregateWithPooledObjects(CommonPools.workerGroup().next(), PooledByteBufAllocator.DEFAULT);\r\n        } else {\r\n            future = req.aggregate(CommonPools.workerGroup().next());\r\n        }\r\n    } else {\r\n        if (withPooledObjects) {\r\n            future = req.aggregateWithPooledObjects(PooledByteBufAllocator.DEFAULT);\r\n        } else {\r\n            future = req.aggregate();\r\n        }\r\n    }\r\n    final AtomicReference<Thread> callbackThread = new AtomicReference();\r\n    assertThatThrownBy(() -> {\r\n        final CompletableFuture<AggregatedHttpMessage> f = future.whenComplete((unused, cause) -> callbackThread.set(Thread.currentThread()));\r\n        req.abort();\r\n        f.join();\r\n    }).hasCauseInstanceOf(AbortedStreamException.class);\r\n    assertThat(callbackThread.get()).isNotSameAs(mainThread);\r\n}"
}, {
	"Path": "org.agrona.Strings.parseIntOrDefault",
	"Comment": "parse an int from a string. if the string is null then return the defaultvalue.",
	"Method": "int parseIntOrDefault(String value,int defaultValue){\r\n    if (null == value) {\r\n        return defaultValue;\r\n    }\r\n    return Integer.parseInt(value);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.MethodInfo.exceptionTypeSignatures",
	"Comment": "returns the metadata about the exceptions declared by the function.",
	"Method": "Set<TypeSignature> exceptionTypeSignatures(){\r\n    return exceptionTypeSignatures;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertIsNotExactlyInstanceOf",
	"Comment": "verifies that the actual value is not exactly an instance of given type.",
	"Method": "void assertIsNotExactlyInstanceOf(AssertionInfo info,Object actual,Class<?> type){\r\n    if (actualIsExactlyInstanceOfType(actual, type, info))\r\n        throw failures.failure(info, shouldNotBeExactlyInstance(actual, type));\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.generatePayload",
	"Comment": "generates a payload of desired type and size. reads compressablebuffer oruncompressablebuffer as a circular buffer.",
	"Method": "ByteString generatePayload(ByteString dataBuffer,int offset,int size){\r\n    ByteString payload = ByteString.EMPTY;\r\n    int begin = offset;\r\n    int end = 0;\r\n    int bytesLeft = size;\r\n    while (bytesLeft > 0) {\r\n        end = Math.min(begin + bytesLeft, dataBuffer.size());\r\n        payload = payload.concat(dataBuffer.substring(begin, end));\r\n        bytesLeft -= (end - begin);\r\n        begin = end % dataBuffer.size();\r\n    }\r\n    return payload;\r\n}"
}, {
	"Path": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setExceptionHandlers",
	"Comment": "sets the exception handlers of the annotated service object.",
	"Method": "AnnotatedServiceRegistrationBean setExceptionHandlers(Collection<? extends ExceptionHandlerFunction> exceptionHandlers,AnnotatedServiceRegistrationBean setExceptionHandlers,ExceptionHandlerFunction exceptionHandlers){\r\n    return setExceptionHandlers(ImmutableList.copyOf(exceptionHandlers));\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,long[] actual,long[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getCurrentAnimationsCount",
	"Comment": "return the number of animations currently running.used by strictmode internally to annotate violations.onlycalled on the main thread.",
	"Method": "int getCurrentAnimationsCount(){\r\n    return sAnimations.get().size();\r\n}"
}, {
	"Path": "com.ichi2.utils.VersionUtils.isReleaseVersion",
	"Comment": "return whether the package version code is set to that for release version",
	"Method": "boolean isReleaseVersion(){\r\n    String versionCode = Long.toString(getPkgVersionCode());\r\n    Timber.d(\"isReleaseVersion() versionCode: %s\", versionCode);\r\n    return versionCode.charAt(versionCode.length() - 3) == '3';\r\n}"
}, {
	"Path": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.getExceptionHandlers",
	"Comment": "returns the exception handlers of the annotated service object.",
	"Method": "Collection<? extends ExceptionHandlerFunction> getExceptionHandlers(){\r\n    return exceptionHandlers;\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.changeNoteTypeWithErrorHandling",
	"Comment": "change the note type from oldmodel to newmodel, handling the case where a full sync will be required",
	"Method": "void changeNoteTypeWithErrorHandling(JSONObject oldModel,JSONObject newModel){\r\n    Resources res = getResources();\r\n    try {\r\n        changeNoteType(oldModel, newModel);\r\n    } catch (ConfirmModSchemaException e) {\r\n        ConfirmationDialog dialog = new ConfirmationDialog();\r\n        dialog.setArgs(res.getString(R.string.full_sync_confirmation));\r\n        Runnable confirm = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                getCol().modSchemaNoCheck();\r\n                try {\r\n                    changeNoteType(oldModel, newModel);\r\n                } catch (ConfirmModSchemaException e2) {\r\n                    throw new RuntimeException(e2);\r\n                }\r\n            }\r\n        };\r\n        dialog.setConfirm(confirm);\r\n        showDialogFragment(dialog);\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.changeNoteTypeWithErrorHandling",
	"Comment": "change the note type from oldmodel to newmodel, handling the case where a full sync will be required",
	"Method": "void changeNoteTypeWithErrorHandling(JSONObject oldModel,JSONObject newModel){\r\n    getCol().modSchemaNoCheck();\r\n    try {\r\n        changeNoteType(oldModel, newModel);\r\n    } catch (ConfirmModSchemaException e2) {\r\n        throw new RuntimeException(e2);\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.setOnItemLongClickListener",
	"Comment": "register a callback to be invoked when an item in this adapterview hasbeen clicked and held",
	"Method": "void setOnItemLongClickListener(OnItemLongClickListener listener){\r\n    if (!isLongClickable()) {\r\n        setLongClickable(true);\r\n    }\r\n    mOnItemLongClickListener = listener;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.ActivityChooserView.setOnDismissListener",
	"Comment": "sets a listener to receive a callback when the popup is dismissed.",
	"Method": "void setOnDismissListener(PopupWindow.OnDismissListener listener){\r\n    mOnDismissListener = listener;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetTimeAssert.areEqualIgnoringNanos",
	"Comment": "returns true if both offsettime are in the same hour, minute and second, falseotherwise.",
	"Method": "boolean areEqualIgnoringNanos(OffsetTime actual,OffsetTime other){\r\n    return areEqualIgnoringSeconds(actual, other) && haveSameSecond(actual, other);\r\n}"
}, {
	"Path": "org.assertj.core.util.DateUtil.formatTimeDifference",
	"Comment": "utility method to display a human readable time difference.",
	"Method": "String formatTimeDifference(Date date1,Date date2){\r\n    final long millisecondsDiff = timeDifference(date1, date2);\r\n    final long secondsDiff = millisecondsDiff / SECONDS.toMillis(1);\r\n    final long minutesDiff = millisecondsDiff / MINUTES.toMillis(1);\r\n    final long hoursDiff = millisecondsDiff / HOURS.toMillis(1);\r\n    final long daysDiff = millisecondsDiff / DAYS.toMillis(1);\r\n    final long hourFieldDiff = hoursDiff - DAYS.toHours(daysDiff);\r\n    final long minuteFieldDiff = minutesDiff - HOURS.toMinutes(hoursDiff);\r\n    final long secondFieldDiff = secondsDiff - MINUTES.toSeconds(minutesDiff);\r\n    final long millisecondsFieldDiff = millisecondsDiff % SECONDS.toMillis(1);\r\n    StringBuilder result = new StringBuilder();\r\n    if (daysDiff > 0)\r\n        result.append(format(\"Ý\", daysDiff));\r\n    if (hourFieldDiff > 0) {\r\n        if (daysDiff > 0 && minuteFieldDiff == 0 && secondFieldDiff == 0 && millisecondsFieldDiff == 0) {\r\n            result.append(\" and \");\r\n        } else if (daysDiff > 0) {\r\n            result.append(\" \");\r\n        }\r\n        result.append(format(\"%dh\", hourFieldDiff));\r\n    }\r\n    if (minuteFieldDiff > 0) {\r\n        final boolean notFirstDiff = daysDiff > 0 || hourFieldDiff > 0;\r\n        if (notFirstDiff && secondFieldDiff == 0 && millisecondsFieldDiff == 0) {\r\n            result.append(\" and \");\r\n        } else if (notFirstDiff) {\r\n            result.append(\" \");\r\n        }\r\n        result.append(format(\"%dm\", minuteFieldDiff));\r\n    }\r\n    if (secondFieldDiff > 0) {\r\n        final boolean notFirstDiff = daysDiff > 0 || hourFieldDiff > 0 || minuteFieldDiff > 0;\r\n        if (notFirstDiff && millisecondsFieldDiff == 0) {\r\n            result.append(\" and \");\r\n        } else if (notFirstDiff) {\r\n            result.append(\" \");\r\n        }\r\n        result.append(format(\"%ds\", secondFieldDiff));\r\n    }\r\n    if (millisecondsFieldDiff > 0) {\r\n        if (result.length() > 0)\r\n            result.append(\" and \");\r\n        result.append(format(\"%dms\", millisecondsFieldDiff));\r\n    }\r\n    return result.toString();\r\n}"
}, {
	"Path": "com.ichi2.anki.tests.ACRATest.setAcraConfig",
	"Comment": "helper method to invoke private method to set acra config builder",
	"Method": "void setAcraConfig(String mode,SharedPreferences prefs){\r\n    Method method = app.getClass().getDeclaredMethod(\"set\" + mode + \"ACRAConfig\", SharedPreferences.class);\r\n    method.setAccessible(true);\r\n    method.invoke(app, prefs);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.removeAllViews",
	"Comment": "this method is not supported and throws an unsupportedoperationexception when called.",
	"Method": "void removeAllViews(){\r\n    throw new UnsupportedOperationException(\"removeAllViews() is not supported in AdapterView\");\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.HttpResponse.of",
	"Comment": "creates a new http response of the specified objects and closes the stream.",
	"Method": "HttpResponse of(int statusCode,HttpResponse of,HttpStatus status,HttpResponse of,HttpStatus status,MediaType mediaType,String content,HttpResponse of,String content,HttpResponse of,String format,Object args,HttpResponse of,MediaType mediaType,String content,HttpResponse of,MediaType mediaType,String format,Object args,HttpResponse of,HttpStatus status,MediaType mediaType,String format,Object args,HttpResponse of,HttpStatus status,MediaType mediaType,byte[] content,HttpResponse of,HttpStatus status,MediaType mediaType,byte[] content,int offset,int length,HttpResponse of,HttpStatus status,MediaType mediaType,HttpData content,HttpResponse of,HttpStatus status,MediaType mediaType,HttpData content,HttpHeaders trailingHeaders,HttpResponse of,HttpHeaders headers,HttpResponse of,HttpHeaders headers,HttpData content,HttpResponse of,HttpHeaders headers,HttpData content,HttpHeaders trailingHeaders,HttpResponse of,HttpObject objs,HttpResponse of,AggregatedHttpMessage res,HttpResponse of,Publisher<? extends HttpObject> publisher){\r\n    return new PublisherBasedHttpResponse(publisher);\r\n}"
}, {
	"Path": "com.ichi2.anki.Whiteboard.handleMultiTouchEvent",
	"Comment": "parse multitouch input to scroll the card behind the whiteboard or click on elements",
	"Method": "boolean handleMultiTouchEvent(MotionEvent event){\r\n    if (event.getPointerCount() == 2) {\r\n        switch(event.getActionMasked()) {\r\n            case MotionEvent.ACTION_POINTER_DOWN:\r\n                reinitializeSecondFinger(event);\r\n                return true;\r\n            case MotionEvent.ACTION_MOVE:\r\n                return trySecondFingerScroll(event);\r\n            case MotionEvent.ACTION_POINTER_UP:\r\n                return trySecondFingerClick(event);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Lists.assertIsSortedAccordingToComparator",
	"Comment": "verifies that the actual list is sorted according to the given comparator. empty lists are considered sorted whateverthe comparator is. one element lists are considered sorted if the element is compatible with comparator.",
	"Method": "void assertIsSortedAccordingToComparator(AssertionInfo info,List<?> actual,Comparator<?> comparator){\r\n    assertNotNull(info, actual);\r\n    checkNotNull(comparator, \"The given comparator should not be null\");\r\n    try {\r\n        if (actual.size() == 0)\r\n            return;\r\n        Comparator rawComparator = comparator;\r\n        if (actual.size() == 1) {\r\n            rawComparator.compare(actual.get(0), actual.get(0));\r\n            return;\r\n        }\r\n        for (int i = 0; i < actual.size() - 1; i++) {\r\n            if (rawComparator.compare(actual.get(i), actual.get(i + 1)) > 0)\r\n                throw failures.failure(info, shouldBeSortedAccordingToGivenComparator(i, actual, comparator));\r\n        }\r\n    } catch (ClassCastException e) {\r\n        throw failures.failure(info, shouldHaveComparableElementsAccordingToGivenComparator(actual, comparator));\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.isInFilterMode",
	"Comment": "indicates whether this view is in filter mode. filter mode can for instancebe enabled by a user when typing on the keyboard.",
	"Method": "boolean isInFilterMode(){\r\n    return false;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.removeAllUpdateListeners",
	"Comment": "removes all listeners from the set listening to frame updates for this animation.",
	"Method": "void removeAllUpdateListeners(){\r\n    if (mUpdateListeners == null) {\r\n        return;\r\n    }\r\n    mUpdateListeners.clear();\r\n    mUpdateListeners = null;\r\n}"
}, {
	"Path": "org.assertj.core.api.filter.Filters.isItemInArray",
	"Comment": "returns true if given item is in given array, false otherwise.",
	"Method": "boolean isItemInArray(Object item,Object[] arrayOfValues){\r\n    for (Object value : arrayOfValues) if (areEqual(value, item))\r\n        return true;\r\n    return false;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.TypeSignature.isContainer",
	"Comment": "returns if this type signature represents a container type.",
	"Method": "boolean isContainer(){\r\n    return !typeParameters.isEmpty();\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.limit.ConcurrencyLimitingHttpClientTest.closeAndDrain",
	"Comment": "closes the response returned by the delegate and consumes everything from it, so that its close futureis completed.",
	"Method": "void closeAndDrain(HttpResponseWriter actualRes,HttpResponse deferredRes){\r\n    actualRes.close();\r\n    deferredRes.subscribe(NoopSubscriber.get());\r\n    deferredRes.completionFuture().join();\r\n    waitForEventLoop();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.TypeSignature.ofNamed",
	"Comment": "creates a new named type signature for the provided name and arbitrary descriptor.",
	"Method": "TypeSignature ofNamed(Class<?> namedType,TypeSignature ofNamed,String name,Object namedTypeDescriptor,TypeSignature ofNamed,Class<?> namedType,String parameterName){\r\n    requireNonNull(namedType, parameterName);\r\n    final String typeName = namedType.getName();\r\n    checkArgument(NAMED_PATTERN.matcher(typeName).matches(), \"%s: %s\", parameterName, typeName);\r\n    checkArgument(!namedType.isArray(), \"%s is an array: %s\", parameterName, typeName);\r\n    checkArgument(!namedType.isPrimitive(), \"%s is a primitive type: %s\", parameterName, typeName);\r\n    return new TypeSignature(namedType);\r\n}"
}, {
	"Path": "org.assertj.core.internal.DeepDifference.compareOrderedCollection",
	"Comment": "deeply compare two collections that must be same length and in sameorder.",
	"Method": "boolean compareOrderedCollection(Collection<K> col1,Collection<V> col2,List<String> path,Deque<DualKey> toCompare,Set<DualKey> visited){\r\n    if (col1.size() != col2.size())\r\n        return false;\r\n    Iterator<V> i2 = col2.iterator();\r\n    for (K k : col1) {\r\n        DualKey dk = new DualKey(path, k, i2.next());\r\n        if (!visited.contains(dk))\r\n            toCompare.addFirst(dk);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.DocServicePlugin.guessServiceName",
	"Comment": "guesses the name of the service who handles the specified example request.",
	"Method": "Optional<String> guessServiceName(Object exampleRequest){\r\n    return Optional.empty();\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlServiceProvider.acsConfigs",
	"Comment": "the configurations of the assertion consumer services provided by the service provider.",
	"Method": "Collection<SamlAssertionConsumerConfig> acsConfigs(){\r\n    return acsConfigs;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.PageFlip.setWidthRatioOfClickToFlip",
	"Comment": "set width ratio of clicking to flip, the default is 0.5fwhich area the finger is clicking on will trigger a flip forward orbackward",
	"Method": "PageFlip setWidthRatioOfClickToFlip(float ratio){\r\n    if (ratio <= 0 || ratio > 0.5f) {\r\n        throw new IllegalArgumentException(\"Invalid ratio value: \" + ratio);\r\n    }\r\n    mWidthRationOfClickToFlip = ratio;\r\n    return this;\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return mapTestSuite(new TestMapGenerator<Integer, Integer>() {\r\n        public Integer[] createKeyArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public Integer[] createValueArray(final int length) {\r\n            return new Integer[length];\r\n        }\r\n        public SampleElements<Map.Entry<Integer, Integer>> samples() {\r\n            return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n        }\r\n        public Map<Integer, Integer> create(final Object... entries) {\r\n            final Object2IntHashMap<Integer> map = new Object2IntHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1, false);\r\n            for (final Object o : entries) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n                map.put(e.getKey(), e.getValue());\r\n            }\r\n            return map;\r\n        }\r\n        @SuppressWarnings(\"unchecked\")\r\n        public Map.Entry<Integer, Integer>[] createArray(final int length) {\r\n            return new Map.Entry[length];\r\n        }\r\n        public Iterable<Map.Entry<Integer, Integer>> order(final List<Map.Entry<Integer, Integer>> insertionOrder) {\r\n            return insertionOrder;\r\n        }\r\n    }, Object2IntHashMap.class.getSimpleName());\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Integer[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new SampleElements(Helpers.mapEntry(1, 123), Helpers.mapEntry(2, 234), Helpers.mapEntry(3, 345), Helpers.mapEntry(345, 6), Helpers.mapEntry(777, 666));\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    final Object2IntHashMap<Integer> map = new Object2IntHashMap(entries.length * 2, Hashing.DEFAULT_LOAD_FACTOR, -1, false);\r\n    for (final Object o : entries) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        final Map.Entry<Integer, Integer> e = (Map.Entry<Integer, Integer>) o;\r\n        map.put(e.getKey(), e.getValue());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return new Map.Entry[length];\r\n}"
}, {
	"Path": "org.agrona.collections.Object2IntHashMapConformanceTest.suite",
	"Comment": "generated suite to test conformity to the java.util.set interface",
	"Method": "TestSuite suite(){\r\n    return insertionOrder;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getCurrentPlayTime",
	"Comment": "gets the current position of the animation in time, which is equal to the currenttime minus the time that the animation started. an animation that is not yet started willreturn a value of zero.",
	"Method": "long getCurrentPlayTime(){\r\n    if (!mInitialized || mPlayingState == STOPPED) {\r\n        return 0;\r\n    }\r\n    return AnimationUtils.currentAnimationTimeMillis() - mStartTime;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.delayedAnimationFrame",
	"Comment": "internal function called to process an animation frame on an animation that is currentlysleeping through its startdelay phase. the return value indicates whether itshould be woken up and put on the active animations queue.",
	"Method": "boolean delayedAnimationFrame(long currentTime){\r\n    if (!mStartedDelay) {\r\n        mStartedDelay = true;\r\n        mDelayStartTime = currentTime;\r\n    } else {\r\n        long deltaTime = currentTime - mDelayStartTime;\r\n        if (deltaTime > mStartDelay) {\r\n            mStartTime = currentTime - (deltaTime - mStartDelay);\r\n            mPlayingState = RUNNING;\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,Object[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "org.agrona.BitUtil.calculateShiftForScale",
	"Comment": "calculate the shift value to scale a number based on how refs are compressed or not.",
	"Method": "int calculateShiftForScale(int scale){\r\n    if (4 == scale) {\r\n        return 2;\r\n    } else if (8 == scale) {\r\n        return 3;\r\n    } else {\r\n        throw new IllegalArgumentException(\"unknown pointer size\");\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.api.Assertions.setRemoveAssertJRelatedElementsFromStackTrace",
	"Comment": "sets whether we remove elements related to assertj from assertion error stack trace.",
	"Method": "void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace){\r\n    Fail.setRemoveAssertJRelatedElementsFromStackTrace(removeAssertJRelatedElementsFromStackTrace);\r\n}"
}, {
	"Path": "com.apollographql.apollo.internal.json.JsonWriter.getIndent",
	"Comment": "returns a string containing only whitespace, used for each level ofindentation. if empty, the encoded document will be compact.",
	"Method": "String getIndent(){\r\n    return indent != null ? indent : \"\";\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.util.Exceptions.isVerbose",
	"Comment": "returns whether the verbose exception mode is enabled. when enabled, the exceptions frequently thrown byarmeria will have full stack trace. when disabled, such exceptions will have empty stack trace toeliminate the cost of capturing the stack trace.",
	"Method": "boolean isVerbose(){\r\n    return Flags.verboseExceptions();\r\n}"
}, {
	"Path": "com.ichi2.ui.SlidingTabLayout.setDividerColors",
	"Comment": "sets the colors to be used for tab dividers. these colors are treated as a circular array.providing one color will mean that all tabs are indicated with the same color.",
	"Method": "void setDividerColors(int colors){\r\n    mTabStrip.setDividerColors(colors);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerBuilder.minimumRequestThreshold",
	"Comment": "sets the minimum number of requests within a time window necessary to detect a remote service fault.",
	"Method": "CircuitBreakerBuilder minimumRequestThreshold(long minimumRequestThreshold){\r\n    if (minimumRequestThreshold < 0) {\r\n        throw new IllegalArgumentException(\"minimumRequestThreshold: \" + minimumRequestThreshold + \" (expected: >= 0)\");\r\n    }\r\n    this.minimumRequestThreshold = minimumRequestThreshold;\r\n    return this;\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.ActivityChooserModel.setActivitySorter",
	"Comment": "sets the sorter for ordering activities based on historical data and an intent.",
	"Method": "void setActivitySorter(ActivitySorter activitySorter){\r\n    synchronized (mInstanceLock) {\r\n        if (mActivitySorter == activitySorter) {\r\n            return;\r\n        }\r\n        mActivitySorter = activitySorter;\r\n        sortActivities();\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.MediaType.withoutParameters",
	"Comment": "returns a new instance with the same type and subtype as this instance, but without anyparameters.",
	"Method": "MediaType withoutParameters(){\r\n    return parameters.isEmpty() ? this : create(type, subtype);\r\n}"
}, {
	"Path": "org.assertj.core.util.Strings.escapePercentExceptWhenFollowedBy_n",
	"Comment": "change %%n back to %n which could have been done by calling escapepercent",
	"Method": "String escapePercentExceptWhenFollowedBy_n(String message){\r\n    return revertEscapingPercent_n(escapePercent(message));\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.PageFlipUtils.createGradientBitmap",
	"Comment": "create gradient bitmap for drawing lighting effect on back of fold page",
	"Method": "Bitmap createGradientBitmap(){\r\n    Canvas c = new Canvas();\r\n    Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);\r\n    Bitmap bitmap = Bitmap.createBitmap(256, 1, Bitmap.Config.ARGB_8888);\r\n    c.setBitmap(bitmap);\r\n    int[] colors = new int[] { 0x00FFFFFF, 0x24000000, 0x24101010, 0x48000000 };\r\n    float[] positions = new float[] { 0.5f, 0.9f, 0.94f, 1.0f };\r\n    LinearGradient shader = new LinearGradient(0, 0, 256, 0, colors, positions, Shader.TileMode.CLAMP);\r\n    paint.setShader(shader);\r\n    c.drawRect(0, 0, 256, 1, paint);\r\n    return bitmap;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.setSelectedPositionInt",
	"Comment": "utility to keep mselectedposition and mselectedrowid in sync",
	"Method": "void setSelectedPositionInt(int position){\r\n    mSelectedPosition = position;\r\n    mSelectedRowId = getItemIdAtPosition(position);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ShortArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,short[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.InputStreams.assertHasContent",
	"Comment": "asserts that the given inputstream has the same content as the given string.",
	"Method": "void assertHasContent(AssertionInfo info,InputStream actual,String expected){\r\n    checkNotNull(expected, \"The String to compare to should not be null\");\r\n    assertNotNull(info, actual);\r\n    try {\r\n        List<Delta<String>> diffs = diff.diff(actual, expected);\r\n        if (diffs.isEmpty())\r\n            return;\r\n        throw failures.failure(info, shouldHaveSameContent(actual, expected, diffs));\r\n    } catch (IOException e) {\r\n        String msg = format(\"Unable to compare contents of InputStream:%n  <%s>%nand String:%n  <%s>\", actual, expected);\r\n        throw new InputStreamsException(msg, e);\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of values, without any other values between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,boolean[] actual,boolean[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Arrays.containsSequenceAtGivenIndex",
	"Comment": "return true if actualarray contains exactly the given sequence at given starting index, false otherwise.",
	"Method": "boolean containsSequenceAtGivenIndex(int actualStartIndex,Object actualArray,Object sequence){\r\n    int sequenceSize = sizeOf(sequence);\r\n    for (int i = 0; i < sequenceSize; i++) {\r\n        if (areEqual(Array.get(sequence, i), Array.get(actualArray, i + actualStartIndex)))\r\n            continue;\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.spotify.apollo.test.StubClient.mapRequestToResponses",
	"Comment": "set up a reaction to requests matching certain criteria. the supplied responsesource willbe invoked for each request that matches the supplied matcher.",
	"Method": "void mapRequestToResponses(Matcher<Request> requestMatcher,ResponseSource responses){\r\n    mappings.put(requestMatcher, responses);\r\n}"
}, {
	"Path": "org.agrona.collections.IntHashSet.compact",
	"Comment": "compact the backing arrays by rehashing with a capacity just larger than current sizeand giving consideration to the load factor.",
	"Method": "void compact(){\r\n    @DoNotSub\r\n    final int idealCapacity = (int) Math.round(size() * (1.0 / loadFactor));\r\n    rehash(findNextPositivePowerOfTwo(Math.max(DEFAULT_INITIAL_CAPACITY, idealCapacity)));\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.proposeMax",
	"Comment": "set the value to a new proposedvalue if greater than the current value with memory ordering semantics.",
	"Method": "boolean proposeMax(long proposedValue){\r\n    boolean updated = false;\r\n    if (UnsafeAccess.UNSAFE.getLong(byteArray, addressOffset) < proposedValue) {\r\n        UnsafeAccess.UNSAFE.putLong(byteArray, addressOffset, proposedValue);\r\n        updated = true;\r\n    }\r\n    return updated;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.VirtualHost.hostnamePattern",
	"Comment": "returns the hostname pattern of this virtual host, as defined inthe section 3.1 of rfc2818.",
	"Method": "String hostnamePattern(){\r\n    return hostnamePattern;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Vertexes.set",
	"Comment": "set max vertex amount and create buffer for vertex and texture",
	"Method": "Vertexes set(int capacity,int sizeOfPerVex,boolean hasTexture){\r\n    if (sizeOfPerVex < 2) {\r\n        Log.w(TAG, \"sizeOfPerVex is invalid: \" + sizeOfPerVex);\r\n        throw new IllegalArgumentException(\"sizeOfPerVex:\" + sizeOfPerVex + \"is less than 2!\");\r\n    }\r\n    mNext = 0;\r\n    mVertexes = null;\r\n    mVertexesBuf = null;\r\n    mTextureCoords = null;\r\n    mTextureCoordsBuf = null;\r\n    mSizeOfPerVex = sizeOfPerVex;\r\n    mVertexes = new float[capacity * sizeOfPerVex];\r\n    mVertexesBuf = ByteBuffer.allocateDirect(capacity * sizeOfPerVex * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();\r\n    if (hasTexture) {\r\n        mTextureCoords = new float[capacity << 1];\r\n        mTextureCoordsBuf = ByteBuffer.allocateDirect(capacity << 3).order(ByteOrder.nativeOrder()).asFloatBuffer();\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.agrona.concurrent.broadcast.RecordDescriptor.calculateMaxMessageLength",
	"Comment": "calculate the maximum supported message length for a buffer of given capacity.",
	"Method": "int calculateMaxMessageLength(int capacity){\r\n    return capacity / 8;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.DocServiceBuilder.exampleRequestForMethod",
	"Comment": "adds the example requests for the method with the specified service and method name.",
	"Method": "DocServiceBuilder exampleRequestForMethod(Class<?> serviceType,String methodName,Object exampleRequests,DocServiceBuilder exampleRequestForMethod,Class<?> serviceType,String methodName,Iterable<?> exampleRequests,DocServiceBuilder exampleRequestForMethod,String serviceName,String methodName,Object exampleRequests,DocServiceBuilder exampleRequestForMethod,String serviceName,String methodName,Iterable<?> exampleRequests){\r\n    requireNonNull(serviceName, \"serviceName\");\r\n    requireNonNull(methodName, \"methodName\");\r\n    requireNonNull(exampleRequests, \"exampleRequests\");\r\n    for (Object e : exampleRequests) {\r\n        requireNonNull(e, \"exampleRequests contains null.\");\r\n        exampleRequest0(serviceName, methodName, serializeExampleRequest(serviceName, methodName, e));\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlIdentityProviderConfigBuilder.sloResEndpoint",
	"Comment": "sets a single logout response endpoint of an identity provider.",
	"Method": "SamlIdentityProviderConfigBuilder sloResEndpoint(SamlEndpoint sloResEndpoint){\r\n    this.sloResEndpoint = requireNonNull(sloResEndpoint, \"sloResEndpoint\");\r\n    return this;\r\n}"
}, {
	"Path": "org.agrona.BufferUtil.address",
	"Comment": "get the address at which the underlying buffer storage begins.",
	"Method": "long address(ByteBuffer buffer){\r\n    if (!buffer.isDirect()) {\r\n        throw new IllegalArgumentException(\"buffer.isDirect() must be true\");\r\n    }\r\n    return UNSAFE.getLong(buffer, BYTE_BUFFER_ADDRESS_FIELD_OFFSET);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.retrofit2.ArmeriaRetrofitBuilder.addConverterFactory",
	"Comment": "adds the specified converter factory for serialization and deserialization of objects.",
	"Method": "ArmeriaRetrofitBuilder addConverterFactory(Converter.Factory factory){\r\n    retrofitBuilder.addConverterFactory(requireNonNull(factory, \"factory\"));\r\n    return this;\r\n}"
}, {
	"Path": "org.agrona.IoUtil.mapExistingFile",
	"Comment": "check that file exists, open file, and return mappedbytebuffer for only region specifiedthe file itself will be closed, but the mapping will persist.",
	"Method": "MappedByteBuffer mapExistingFile(File location,String descriptionLabel,MappedByteBuffer mapExistingFile,File location,String descriptionLabel,long offset,long length){\r\n    checkFileExists(location, descriptionLabel);\r\n    MappedByteBuffer mappedByteBuffer = null;\r\n    try (RandomAccessFile file = new RandomAccessFile(location, \"rw\");\r\n        FileChannel channel = file.getChannel()) {\r\n        mappedByteBuffer = channel.map(READ_WRITE, offset, length);\r\n    } catch (final IOException ex) {\r\n        LangUtil.rethrowUnchecked(ex);\r\n    }\r\n    return mappedByteBuffer;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Failures.enablePrintThreadDump",
	"Comment": "set the flag indicating that in case of a failure a threaddump is printed out.",
	"Method": "void enablePrintThreadDump(){\r\n    printThreadDump = true;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.TabsLinearLayout.isMeasureWithLargestChildEnabled",
	"Comment": "when true, all children with a weight will be considered havingthe minimum size of the largest child. if false, all children aremeasured normally.",
	"Method": "boolean isMeasureWithLargestChildEnabled(){\r\n    return mUseLargestChild;\r\n}"
}, {
	"Path": "com.ichi2.anki.NoteEditor.updateFieldsFromMap",
	"Comment": "update all the field edittext views based on the currently selected note type and the mmodelchangefieldmap",
	"Method": "void updateFieldsFromMap(JSONObject newModel){\r\n    String[][] oldFields = mEditorNote.items();\r\n    Map<String, Pair<Integer, JSONObject>> fMapNew = getCol().getModels().fieldMap(newModel);\r\n    String[][] fields = new String[fMapNew.size()][2];\r\n    for (String fname : fMapNew.keySet()) {\r\n        Integer i = fMapNew.get(fname).first;\r\n        if (mModelChangeFieldMap.containsValue(i)) {\r\n            Integer j = getKeyByValue(mModelChangeFieldMap, i);\r\n            if (allowFieldRemapping()) {\r\n                fields[i][0] = String.format(getResources().getString(R.string.field_remapping), fname, oldFields[j][0]);\r\n            } else {\r\n                fields[i][0] = fname;\r\n            }\r\n            fields[i][1] = oldFields[j][1];\r\n        } else {\r\n            fields[i][0] = fname;\r\n            fields[i][1] = \"\";\r\n        }\r\n    }\r\n    populateEditFields(fields, true);\r\n    updateCards(newModel);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.NamedTypeInfo.findNamedTypes",
	"Comment": "returns all enum, struct and exception types referred by this type.",
	"Method": "Set<TypeSignature> findNamedTypes(){\r\n    return ImmutableSet.of();\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SuggestionsAdapter.getView",
	"Comment": "this method is overridden purely to provide a bit of protection againstflaky content providers.",
	"Method": "View getView(int position,View convertView,ViewGroup parent){\r\n    try {\r\n        return super.getView(position, convertView, parent);\r\n    } catch (RuntimeException e) {\r\n        Log.w(LOG_TAG, \"Search suggestions cursor threw exception.\", e);\r\n        View v = newView(mContext, mCursor, parent);\r\n        if (v != null) {\r\n            ChildViewCache views = (ChildViewCache) v.getTag();\r\n            TextView tv = views.mText1;\r\n            tv.setText(e.toString());\r\n        }\r\n        return v;\r\n    }\r\n}"
}, {
	"Path": "com.apollographql.apollo.internal.json.JsonWriter.setSerializeNulls",
	"Comment": "sets whether object members are serialized when their value is null.this has no impact on array elements. the default is false.",
	"Method": "void setSerializeNulls(boolean serializeNulls){\r\n    this.serializeNulls = serializeNulls;\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.HttpClient.execute",
	"Comment": "sends an http request with the specified headers and content.",
	"Method": "HttpResponse execute(HttpRequest req,HttpResponse execute,AggregatedHttpMessage aggregatedReq,HttpResponse execute,HttpHeaders headers,HttpResponse execute,HttpHeaders headers,HttpData content,HttpResponse execute,HttpHeaders headers,byte[] content,HttpResponse execute,HttpHeaders headers,String content,HttpResponse execute,HttpHeaders headers,String content,Charset charset){\r\n    return execute(AggregatedHttpMessage.of(headers, HttpData.of(charset, content)));\r\n}"
}, {
	"Path": "org.assertj.core.extractor.Extractors.resultOf",
	"Comment": "provides extractor for extracting values by method name from any object using reflection",
	"Method": "Function<F, Object> resultOf(String methodName){\r\n    return new ResultOfExtractor(methodName);\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalTimeAssert.areEqualIgnoringSeconds",
	"Comment": "returns true if both localtime are in the same year, month, day of month, hour and minute, false otherwise.",
	"Method": "boolean areEqualIgnoringSeconds(LocalTime actual,LocalTime other){\r\n    return haveSameHourField(actual, other) && actual.getMinute() == other.getMinute();\r\n}"
}, {
	"Path": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setRequestConverters",
	"Comment": "sets the request converters of the annotated service object.",
	"Method": "AnnotatedServiceRegistrationBean setRequestConverters(Collection<? extends RequestConverterFunction> requestConverters,AnnotatedServiceRegistrationBean setRequestConverters,RequestConverterFunction requestConverters){\r\n    return setRequestConverters(ImmutableList.copyOf(requestConverters));\r\n}"
}, {
	"Path": "com.spotify.apollo.example.AlbumResource.parseResponseAlbumIds",
	"Comment": "parses the album ids from a json response from aspotify api search query.",
	"Method": "String parseResponseAlbumIds(String json){\r\n    StringJoiner sj = new StringJoiner(\",\");\r\n    try {\r\n        JsonNode jsonNode = this.objectMapper.readTree(json);\r\n        for (JsonNode node : jsonNode.get(\"albums\").get(\"items\")) {\r\n            sj.add(node.get(\"id\").asText());\r\n        }\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(\"Failed to parse JSON\", e);\r\n    }\r\n    return sj.toString();\r\n}"
}, {
	"Path": "org.agrona.collections.ObjectHashSet.compact",
	"Comment": "compact the backing arrays by rehashing with a capacity just larger than current sizeand giving consideration to the load factor.",
	"Method": "void compact(){\r\n    final int idealCapacity = (int) Math.round(size() * (1.0 / loadFactor));\r\n    rehash(findNextPositivePowerOfTwo(Math.max(DEFAULT_INITIAL_CAPACITY, idealCapacity)));\r\n}"
}, {
	"Path": "com.eschao.android.widget.sample.pageflip.LoadBitmapTask.getBitmap",
	"Comment": "acquire a bitmap to showif there is no cached bitmap, it will load one immediately",
	"Method": "Bitmap getBitmap(){\r\n    Bitmap b = null;\r\n    synchronized (this) {\r\n        if (mQueue.size() > 0) {\r\n            b = mQueue.pop();\r\n        }\r\n        notify();\r\n    }\r\n    if (b == null) {\r\n        Log.d(TAG, \"Load bitmap instantly!\");\r\n        b = getRandomBitmap();\r\n    }\r\n    return b;\r\n}"
}, {
	"Path": "com.apollographql.apollo.api.ResponseField.resolveArgument",
	"Comment": "resolve field argument value by name. if argument represents a references to the variable, it will be resolved fromprovided operation variables values.",
	"Method": "Object resolveArgument(String name,Operation.Variables variables){\r\n    checkNotNull(name, \"name == null\");\r\n    checkNotNull(variables, \"variables == null\");\r\n    Map<String, Object> variableValues = variables.valueMap();\r\n    Object argumentValue = arguments.get(name);\r\n    if (argumentValue instanceof Map) {\r\n        Map<String, Object> argumentValueMap = (Map<String, Object>) argumentValue;\r\n        if (isArgumentValueVariableType(argumentValueMap)) {\r\n            String variableName = argumentValueMap.get(VARIABLE_NAME_KEY).toString();\r\n            return variableValues.get(variableName);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    return argumentValue;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.cors.CorsServiceBuilder.disablePreflightResponseHeaders",
	"Comment": "specifies that no preflight response headers should be added to a preflight response.",
	"Method": "CorsServiceBuilder disablePreflightResponseHeaders(){\r\n    preflightResponseHeadersDisabled = true;\r\n    return this;\r\n}"
}, {
	"Path": "com.apollographql.apollo.internal.json.JsonWriter.getSerializeNulls",
	"Comment": "returns true if object members are serialized when their value is null.this has no impact on array elements. the default is false.",
	"Method": "boolean getSerializeNulls(){\r\n    return serializeNulls;\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.readBody",
	"Comment": "processes the body of the grpc compression frame. a single compression frame may containseveral grpc messages within it.",
	"Method": "void readBody(){\r\n    final ByteBuf buf = readBytes(requiredLength);\r\n    final ByteBufOrStream msg = compressedFlag ? getCompressedBody(buf) : getUncompressedBody(buf);\r\n    listener.messageRead(msg);\r\n    state = State.HEADER;\r\n    requiredLength = HEADER_LENGTH;\r\n}"
}, {
	"Path": "com.ichi2.anki.AnkiFont.createAnkiFont",
	"Comment": "factory for ankifont creation. creates a typeface wrapper from a font file representing.",
	"Method": "AnkiFont createAnkiFont(Context ctx,String path,boolean fromAssets){\r\n    File fontfile = new File(path);\r\n    String name = Utils.splitFilename(fontfile.getName())[0];\r\n    String family = name;\r\n    List<String> attributes = new ArrayList();\r\n    if (fromAssets) {\r\n        path = fAssetPathPrefix.concat(fontfile.getName());\r\n    }\r\n    Typeface tf = getTypeface(ctx, path);\r\n    if (tf == null) {\r\n        return null;\r\n    }\r\n    if (tf.isBold() || name.toLowerCase(Locale.US).contains(\"bold\")) {\r\n        attributes.add(\"font-weight: bolder;\");\r\n        family = family.replaceFirst(\"(?i)-?Bold\", \"\");\r\n    } else if (name.toLowerCase(Locale.US).contains(\"light\")) {\r\n        attributes.add(\"font-weight: lighter;\");\r\n        family = family.replaceFirst(\"(?i)-?Light\", \"\");\r\n    } else {\r\n        attributes.add(\"font-weight: normal;\");\r\n    }\r\n    if (tf.isItalic() || name.toLowerCase(Locale.US).contains(\"italic\")) {\r\n        attributes.add(\"font-style: italic;\");\r\n        family = family.replaceFirst(\"(?i)-?Italic\", \"\");\r\n    } else if (name.toLowerCase(Locale.US).contains(\"oblique\")) {\r\n        attributes.add(\"font-style: oblique;\");\r\n        family = family.replaceFirst(\"(?i)-?Oblique\", \"\");\r\n    } else {\r\n        attributes.add(\"font-style: normal;\");\r\n    }\r\n    if (name.toLowerCase(Locale.US).contains(\"condensed\") || name.toLowerCase(Locale.US).contains(\"narrow\")) {\r\n        attributes.add(\"font-stretch: condensed;\");\r\n        family = family.replaceFirst(\"(?i)-?Condensed\", \"\");\r\n        family = family.replaceFirst(\"(?i)-?Narrow(er)?\", \"\");\r\n    } else if (name.toLowerCase(Locale.US).contains(\"expanded\") || name.toLowerCase(Locale.US).contains(\"wide\")) {\r\n        attributes.add(\"font-stretch: expanded;\");\r\n        family = family.replaceFirst(\"(?i)-?Expanded\", \"\");\r\n        family = family.replaceFirst(\"(?i)-?Wide(r)?\", \"\");\r\n    }\r\n    AnkiFont createdFont = new AnkiFont(name, family, attributes, path);\r\n    SharedPreferences preferences = AnkiDroidApp.getSharedPrefs(ctx);\r\n    String defaultFont = preferences.getString(\"defaultFont\", \"\");\r\n    boolean overrideFont = preferences.getString(\"overrideFontBehavior\", \"0\").equals(\"1\");\r\n    if (defaultFont.equalsIgnoreCase(name)) {\r\n        if (overrideFont) {\r\n            createdFont.setAsOverride();\r\n        } else {\r\n            createdFont.setAsDefault();\r\n        }\r\n    }\r\n    return createdFont;\r\n}"
}, {
	"Path": "org.assertj.core.internal.FloatArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,float[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.getInterpolator",
	"Comment": "gets the acceleration curve type for the indeterminate animation.",
	"Method": "Interpolator getInterpolator(){\r\n    return mInterpolator;\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertContainsOnlyOnce",
	"Comment": "asserts that the given array contains only once the given values.",
	"Method": "void assertContainsOnlyOnce(AssertionInfo info,long[] actual,long[] values){\r\n    arrays.assertContainsOnlyOnce(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.typeAnsAnswerFilter",
	"Comment": "fill the placeholder for the type comparison. show the correct answer, and the comparison if appropriate.",
	"Method": "String typeAnsAnswerFilter(String buf,String userAnswer,String correctAnswer){\r\n    Matcher m = sTypeAnsPat.matcher(buf);\r\n    DiffEngine diffEngine = new DiffEngine();\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"<div\");\r\n    sb.append(\"><code id=typeans>\");\r\n    if (!TextUtils.isEmpty(userAnswer)) {\r\n        if (userAnswer.equals(correctAnswer)) {\r\n            sb.append(DiffEngine.wrapGood(correctAnswer));\r\n            sb.append(\"?\");\r\n        } else {\r\n            String[] diffedStrings = diffEngine.diffedHtmlStrings(correctAnswer, userAnswer);\r\n            sb.append(diffedStrings[0]);\r\n            sb.append(\"<br>&darr;<br>\");\r\n            sb.append(diffedStrings[1]);\r\n        }\r\n    } else {\r\n        if (!mUseInputTag) {\r\n            sb.append(DiffEngine.wrapMissing(correctAnswer));\r\n        } else {\r\n            sb.append(correctAnswer);\r\n        }\r\n    }\r\n    sb.append(\"<\/code><\/div>\");\r\n    return m.replaceAll(sb.toString());\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsLinearLayout.setShowDividers",
	"Comment": "set how dividers should be shown between items in this layout",
	"Method": "void setShowDividers(int showDividers){\r\n    if (showDividers != mShowDividers) {\r\n        requestLayout();\r\n        invalidate();\r\n    }\r\n    mShowDividers = showDividers;\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,int[] actual,int[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.ichi2.anki.servicelayer.NoteService.updateJsonNoteFromMultimediaNote",
	"Comment": "updates the jsonnote field values from multimediaeditablenote when both notes are using the same model, it updaesthe destination field values with source values. if models are different it throws an exception",
	"Method": "void updateJsonNoteFromMultimediaNote(IMultimediaEditableNote noteSrc,Note editorNoteDst){\r\n    if (noteSrc instanceof MultimediaEditableNote) {\r\n        MultimediaEditableNote mmNote = (MultimediaEditableNote) noteSrc;\r\n        if (mmNote.getModelId() != editorNoteDst.getMid()) {\r\n            throw new RuntimeException(\"Source and Destination Note ID do not match.\");\r\n        }\r\n        int totalFields = mmNote.getNumberOfFields();\r\n        for (int i = 0; i < totalFields; i++) {\r\n            editorNoteDst.values()[i] = mmNote.getField(i).getFormattedValue();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.apollographql.apollo.gradle.ApolloCodegenInstallTask.writePackageFile",
	"Comment": "generates a dummy package.json file to silence npm warnings",
	"Method": "void writePackageFile(File apolloPackageFile){\r\n    try {\r\n        JsonWriter writer = JsonWriter.of(Okio.buffer(Okio.sink(apolloPackageFile)));\r\n        writer.beginObject();\r\n        writer.name(\"name\").value(\"apollo-android\");\r\n        writer.name(\"version\").value(\"0.0.1\");\r\n        writer.name(\"description\").value(\"Generates Java code based on a GraphQL schema and query documents. Uses \" + \"apollo-codegen under the hood.\");\r\n        writer.name(\"name\").value(\"apollo-android\");\r\n        writer.name(\"repository\");\r\n        writer.beginObject();\r\n        writer.name(\"type\").value(\"git\");\r\n        writer.name(\"url\").value(\"git+https://github.com/apollostack/apollo-android.git\");\r\n        writer.endObject();\r\n        writer.name(\"author\").value(\"Apollo\");\r\n        writer.name(\"license\").value(\"MIT\");\r\n        writer.endObject();\r\n        writer.close();\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"
}, {
	"Path": "com.ichi2.async.DeckTask.doInBackgroundCheckCardSelection",
	"Comment": "goes through selected cards and checks selected and marked attribute",
	"Method": "TaskData doInBackgroundCheckCardSelection(TaskData params){\r\n    Collection col = CollectionHelper.getInstance().getCol(mContext);\r\n    Object[] objects = params[0].getObjArray();\r\n    Set<Integer> checkedCardPositions = (Set<Integer>) objects[0];\r\n    List<Map<String, String>> cards = (List<Map<String, String>>) objects[1];\r\n    boolean hasUnsuspended = false;\r\n    boolean hasUnmarked = false;\r\n    for (int cardPosition : checkedCardPositions) {\r\n        Card card = col.getCard(Long.parseLong(cards.get(cardPosition).get(\"id\")));\r\n        hasUnsuspended = hasUnsuspended || card.getQueue() != -1;\r\n        hasUnmarked = hasUnmarked || !card.note().hasTag(\"marked\");\r\n        if (hasUnsuspended && hasUnmarked)\r\n            break;\r\n    }\r\n    return new TaskData(new Object[] { hasUnsuspended, hasUnmarked });\r\n}"
}, {
	"Path": "com.ichi2.preferences.StepsPreference.getValidatedStepsInput",
	"Comment": "check if the string is a valid format for steps and return that string, reformatted for better usability ifneeded.",
	"Method": "String getValidatedStepsInput(String steps){\r\n    JSONArray ja = convertToJSON(steps);\r\n    if (ja == null) {\r\n        return null;\r\n    } else {\r\n        StringBuilder sb = new StringBuilder();\r\n        try {\r\n            for (int i = 0; i < ja.length(); i++) {\r\n                sb.append(ja.getString(i)).append(\" \");\r\n            }\r\n            return sb.toString().trim();\r\n        } catch (JSONException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroupBuilder.serverAddresses",
	"Comment": "sets the dns server addresses to send queries to. operating system default is used by default.",
	"Method": "B serverAddresses(InetSocketAddress serverAddresses,B serverAddresses,Iterable<InetSocketAddress> serverAddresses){\r\n    requireNonNull(serverAddresses, \"serverAddresses\");\r\n    final DnsServerAddresses addrs = DnsServerAddresses.sequential(serverAddresses);\r\n    serverAddressStreamProvider = hostname -> addrs.stream();\r\n    return self();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.addUpdateListener",
	"Comment": "adds a listener to the set of listeners that are sent update events through the life ofan animation. this method is called on all listeners for every frame of the animation,after the values for the animation have been calculated.",
	"Method": "void addUpdateListener(AnimatorUpdateListener listener){\r\n    if (mUpdateListeners == null) {\r\n        mUpdateListeners = new ArrayList<AnimatorUpdateListener>();\r\n    }\r\n    mUpdateListeners.add(listener);\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertHasSizeLessThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is less than or equal to the given boundary.",
	"Method": "void assertHasSizeLessThanOrEqualTo(AssertionInfo info,int[] actual,int boundary){\r\n    arrays.assertHasSizeLessThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.cleanTypedAnswer",
	"Comment": "clean up the typed answer text, so it can be used for the comparison with the correct answer",
	"Method": "String cleanTypedAnswer(String answer){\r\n    if (answer == null || answer.equals(\"\")) {\r\n        return \"\";\r\n    }\r\n    return Utils.nfcNormalized(answer.trim());\r\n}"
}, {
	"Path": "com.ichi2.compat.customtabs.CustomTabsHelper.hasSpecializedHandlerIntents",
	"Comment": "used to check whether there is a specialized handler for a given intent.",
	"Method": "boolean hasSpecializedHandlerIntents(Context context,Intent intent){\r\n    try {\r\n        PackageManager pm = context.getPackageManager();\r\n        List<ResolveInfo> handlers = pm.queryIntentActivities(intent, PackageManager.GET_RESOLVED_FILTER);\r\n        if (handlers == null || handlers.size() == 0) {\r\n            return false;\r\n        }\r\n        for (ResolveInfo resolveInfo : handlers) {\r\n            IntentFilter filter = resolveInfo.filter;\r\n            if (filter == null)\r\n                continue;\r\n            if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)\r\n                continue;\r\n            if (resolveInfo.activityInfo == null)\r\n                continue;\r\n            return true;\r\n        }\r\n    } catch (RuntimeException e) {\r\n        Log.e(TAG, \"Runtime exception while getting specialized handlers\");\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.ichi2.anki.dialogs.SyncErrorDialog.newInstance",
	"Comment": "a set of dialogs belonging to ankiactivity which deal with sync problems",
	"Method": "SyncErrorDialog newInstance(int dialogType,String dialogMessage){\r\n    SyncErrorDialog f = new SyncErrorDialog();\r\n    Bundle args = new Bundle();\r\n    args.putInt(\"dialogType\", dialogType);\r\n    args.putString(\"dialogMessage\", dialogMessage);\r\n    f.setArguments(args);\r\n    return f;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalTimeAssert.areEqualIgnoringNanos",
	"Comment": "returns true if both localtime are in the same year, month and day of month, hour, minute and second, falseotherwise.",
	"Method": "boolean areEqualIgnoringNanos(LocalTime actual,LocalTime other){\r\n    return areEqualIgnoringSeconds(actual, other) && actual.getSecond() == other.getSecond();\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.getMaxWidth",
	"Comment": "gets the specified maximum width in pixels, if set. returns zero ifno maximum width was specified.",
	"Method": "int getMaxWidth(){\r\n    return mMaxWidth;\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.onCollectionLoaded",
	"Comment": "finish initializing the activity after the collection has been correctly loaded",
	"Method": "void onCollectionLoaded(Collection col){\r\n    super.onCollectionLoaded(col);\r\n    mSched = col.getSched();\r\n    mBaseUrl = Utils.getBaseUrl(col.getMedia().dir());\r\n    registerExternalStorageListener();\r\n    restoreCollectionPreferences();\r\n    initLayout();\r\n    setTitle();\r\n    if (!mDisableClipboard) {\r\n        clipboardSetText(\"\");\r\n    }\r\n    try {\r\n        mCardTemplate = Utils.convertStreamToString(getAssets().open(\"card_template.html\"));\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    if (mSpeakText) {\r\n        ReadText.initializeTts(this);\r\n    }\r\n    Lookup.initialize(this);\r\n    updateScreenCounts();\r\n    supportInvalidateOptionsMenu();\r\n}"
}, {
	"Path": "com.ichi2.libanki.Tags.canonify",
	"Comment": "strip duplicates, adjust case to match existing tags, and sort.",
	"Method": "TreeSet<String> canonify(List<String> tagList){\r\n    TreeSet<String> strippedTags = new TreeSet(String.CASE_INSENSITIVE_ORDER);\r\n    for (String t : tagList) {\r\n        String s = sCanonify.matcher(t).replaceAll(\"\");\r\n        for (String existingTag : mTags.keySet()) {\r\n            if (s.equalsIgnoreCase(existingTag)) {\r\n                s = existingTag;\r\n            }\r\n        }\r\n        strippedTags.add(s);\r\n    }\r\n    return strippedTags;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.util.AbstractOptionValue.option",
	"Comment": "returns the option that this option value holder belongs to.",
	"Method": "O option(){\r\n    return option;\r\n}"
}, {
	"Path": "com.spotify.apollo.test.experimental.PerformanceFixture.call",
	"Comment": "dummy implementation that should be overriden if doing perf tests with pump.",
	"Method": "ListenableFuture<T> call(){\r\n    return immediateFuture((T) null);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.RouterTest.duplicateMappingsWithRegex",
	"Comment": "should detect the duplicates even if the mappings are split into more than one router.",
	"Method": "void duplicateMappingsWithRegex(){\r\n    assertThat(Routers.routers(ImmutableList.of(PathMapping.of(\"/foo/:bar\"), PathMapping.ofRegex(\"not-trie-compatible\"), PathMapping.of(\"/bar/:baz\")), Function.identity(), REJECT)).hasSize(3);\r\n    testDuplicateMappings(PathMapping.of(\"/foo/:bar\"), PathMapping.ofRegex(\"not-trie-compatible\"), PathMapping.of(\"/foo/:qux\"));\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.logback.RequestContextExportingAppender.addHttpRequestHeader",
	"Comment": "adds the specified http request header name to the export list.",
	"Method": "void addHttpRequestHeader(CharSequence name){\r\n    ensureNotStarted();\r\n    builder.addHttpRequestHeader(name);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsSpinner.setUpChild",
	"Comment": "helper for makeandaddview to set the position of a viewand fill out its layout paramters.",
	"Method": "void setUpChild(View child){\r\n    ViewGroup.LayoutParams lp = child.getLayoutParams();\r\n    if (lp == null) {\r\n        lp = generateDefaultLayoutParams();\r\n    }\r\n    addViewInLayout(child, 0, lp);\r\n    child.setSelected(hasFocus());\r\n    if (mDisableChildrenWhenDisabled) {\r\n        child.setEnabled(isEnabled());\r\n    }\r\n    int childHeightSpec = ViewGroup.getChildMeasureSpec(mHeightMeasureSpec, mSpinnerPadding.top + mSpinnerPadding.bottom, lp.height);\r\n    int childWidthSpec = ViewGroup.getChildMeasureSpec(mWidthMeasureSpec, mSpinnerPadding.left + mSpinnerPadding.right, lp.width);\r\n    child.measure(childWidthSpec, childHeightSpec);\r\n    int childLeft;\r\n    int childRight;\r\n    int childTop = mSpinnerPadding.top + ((getMeasuredHeight() - mSpinnerPadding.bottom - mSpinnerPadding.top - child.getMeasuredHeight()) / 2);\r\n    int childBottom = childTop + child.getMeasuredHeight();\r\n    int width = child.getMeasuredWidth();\r\n    childLeft = 0;\r\n    childRight = childLeft + width;\r\n    child.layout(childLeft, childTop, childRight, childBottom);\r\n}"
}, {
	"Path": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.getResponseConverters",
	"Comment": "returns the response converters of the annotated service object.",
	"Method": "Collection<? extends ResponseConverterFunction> getResponseConverters(){\r\n    return responseConverters;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.isLeftPage",
	"Comment": "is the left page?left page represents the left screen in double pages mode",
	"Method": "boolean isLeftPage(){\r\n    return right <= 0;\r\n}"
}, {
	"Path": "com.ichi2.anki.api.AddContentApi.addNewCustomModel",
	"Comment": "insert a new model into ankidroid.see the anki desktop manual for more help",
	"Method": "Long addNewCustomModel(String name,String[] fields,String[] cards,String[] qfmt,String[] afmt,String css,Long did,Integer sortf){\r\n    if (qfmt.length != cards.length || afmt.length != cards.length) {\r\n        throw new IllegalArgumentException(\"cards, qfmt, and afmt arrays must all be same length\");\r\n    }\r\n    ContentValues values = new ContentValues();\r\n    values.put(Model.NAME, name);\r\n    values.put(Model.FIELD_NAMES, Utils.joinFields(fields));\r\n    values.put(Model.NUM_CARDS, cards.length);\r\n    values.put(Model.CSS, css);\r\n    values.put(Model.DECK_ID, did);\r\n    values.put(Model.SORT_FIELD_INDEX, sortf);\r\n    Uri modelUri = mResolver.insert(Model.CONTENT_URI, values);\r\n    if (modelUri == null) {\r\n        return null;\r\n    }\r\n    Uri templatesUri = Uri.withAppendedPath(modelUri, \"templates\");\r\n    for (int i = 0; i < cards.length; i++) {\r\n        Uri uri = Uri.withAppendedPath(templatesUri, Integer.toString(i));\r\n        values = new ContentValues();\r\n        values.put(CardTemplate.NAME, cards[i]);\r\n        values.put(CardTemplate.QUESTION_FORMAT, qfmt[i]);\r\n        values.put(CardTemplate.ANSWER_FORMAT, afmt[i]);\r\n        values.put(CardTemplate.ANSWER_FORMAT, afmt[i]);\r\n        mResolver.update(uri, values, null, null);\r\n    }\r\n    return Long.parseLong(modelUri.getLastPathSegment());\r\n}"
}, {
	"Path": "org.assertj.core.internal.LongArrays.assertContainsSequence",
	"Comment": "verifies that the given array contains the given sequence of values, without any other values between them.",
	"Method": "void assertContainsSequence(AssertionInfo info,long[] actual,long[] sequence){\r\n    arrays.assertContainsSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertDoesNotHaveSameClassAs",
	"Comment": "verifies that the actual value does not have the same class as the given object.",
	"Method": "void assertDoesNotHaveSameClassAs(AssertionInfo info,Object actual,Object other){\r\n    if (haveSameClass(actual, other, info))\r\n        throw failures.failure(info, shouldNotHaveSameClass(actual, other));\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.KeyframeSet.setEvaluator",
	"Comment": "sets the typeevaluator to be used when calculating animated values. this objectis required only for keyframesets that are not either intkeyframeset or floatkeyframeset,both of which assume their own evaluator to speed up calculations with those primitivetypes.",
	"Method": "void setEvaluator(TypeEvaluator evaluator){\r\n    mEvaluator = evaluator;\r\n}"
}, {
	"Path": "org.assertj.core.internal.IntArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,int[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.get",
	"Comment": "get the latest value for the counter with volatile semantics.",
	"Method": "long get(){\r\n    return UnsafeAccess.UNSAFE.getLongVolatile(byteArray, addressOffset);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.thrift.ThriftStructuredLog.thriftMethodName",
	"Comment": "returns the thrift method name which was called in the context of the log.",
	"Method": "String thriftMethodName(){\r\n    return thriftMethodName;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.initAnimation",
	"Comment": "this function is called immediately before processing the first animationframe of an animation. if there is a nonzero startdelay, thefunction is called after that delay ends.it takes care of the final initialization steps for theanimation. overrides of this method should call the superclass method to ensure that internal mechanisms for the animation are set up correctly.",
	"Method": "void initAnimation(){\r\n    if (!mInitialized) {\r\n        int numValues = mValues.length;\r\n        for (int i = 0; i < numValues; ++i) {\r\n            mValues[i].init();\r\n        }\r\n        mInitialized = true;\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.Iterables.containsSequenceAtGivenIndex",
	"Comment": "return true if actualaslist contains exactly the given sequence at given starting index, false otherwise.",
	"Method": "boolean containsSequenceAtGivenIndex(List<?> actualAsList,Object[] sequence,int startingIndex){\r\n    if (actualAsList.size() - startingIndex < sequence.length)\r\n        return false;\r\n    for (int i = 0; i < sequence.length; i++) {\r\n        if (!areEqual(actualAsList.get(startingIndex + i), sequence[i]))\r\n            return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlServiceProvider.idpConfigSelector",
	"Comment": "a selector which selects an identity provider configuration.",
	"Method": "SamlIdentityProviderConfigSelector idpConfigSelector(){\r\n    return idpConfigSelector;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.setTarget",
	"Comment": "sets the target object whose property will be animated by this animation",
	"Method": "void setTarget(Object target){\r\n    if (mTarget != target) {\r\n        final Object oldTarget = mTarget;\r\n        mTarget = target;\r\n        if (oldTarget != null && target != null && oldTarget.getClass() == target.getClass()) {\r\n            return;\r\n        }\r\n        mInitialized = false;\r\n    }\r\n}"
}, {
	"Path": "org.agrona.concurrent.broadcast.BroadcastReceiver.validate",
	"Comment": "validate that the current received record is still valid and has not been overwritten.if the receiver is not consuming messages fast enough to keep up with the transmitter then losscan be experienced resulting in messages being overwritten thus making them no longer valid.",
	"Method": "boolean validate(boolean validate,long cursor){\r\n    return (cursor + capacity) > buffer.getLongVolatile(tailIntentCounterIndex);\r\n}"
}, {
	"Path": "com.ichi2.preferences.NumberRangePreference.getMinFromAttributes",
	"Comment": "returns the value of the min attribute, or its default value if not specifiedthis method should only be called once from the constructor.",
	"Method": "int getMinFromAttributes(AttributeSet attrs){\r\n    return attrs == null ? 0 : attrs.getAttributeIntValue(AnkiDroidApp.XML_CUSTOM_NAMESPACE, \"min\", 0);\r\n}"
}, {
	"Path": "com.apollographql.apollo.internal.json.JsonWriter.replaceTop",
	"Comment": "replace the value on the top of the stack with the given value.",
	"Method": "void replaceTop(int topOfStack){\r\n    scopes[stackSize - 1] = topOfStack;\r\n}"
}, {
	"Path": "com.actionbarsherlock.ActionBarSherlock.wrap",
	"Comment": "wrap an activity with an action bar abstraction which will enable theuse of a custom implementation on platforms where a native version doesnot exist.",
	"Method": "ActionBarSherlock wrap(Activity activity,ActionBarSherlock wrap,Activity activity,int flags){\r\n    HashMap<Implementation, Class<? extends ActionBarSherlock>> impls = new HashMap<Implementation, Class<? extends ActionBarSherlock>>(IMPLEMENTATIONS);\r\n    boolean hasQualfier;\r\n    hasQualfier = false;\r\n    for (Implementation key : impls.keySet()) {\r\n        if (key.dpi() == DisplayMetrics.DENSITY_TV) {\r\n            hasQualfier = true;\r\n            break;\r\n        }\r\n    }\r\n    if (hasQualfier) {\r\n        final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;\r\n        for (Iterator<Implementation> keys = impls.keySet().iterator(); keys.hasNext(); ) {\r\n            int keyDpi = keys.next().dpi();\r\n            if ((isTvDpi && keyDpi != DisplayMetrics.DENSITY_TV) || (!isTvDpi && keyDpi == DisplayMetrics.DENSITY_TV)) {\r\n                keys.remove();\r\n            }\r\n        }\r\n    }\r\n    hasQualfier = false;\r\n    for (Implementation key : impls.keySet()) {\r\n        if (key.api() != Implementation.DEFAULT_API) {\r\n            hasQualfier = true;\r\n            break;\r\n        }\r\n    }\r\n    if (hasQualfier) {\r\n        final int runtimeApi = Build.VERSION.SDK_INT;\r\n        int bestApi = 0;\r\n        for (Iterator<Implementation> keys = impls.keySet().iterator(); keys.hasNext(); ) {\r\n            int keyApi = keys.next().api();\r\n            if (keyApi > runtimeApi) {\r\n                keys.remove();\r\n            } else if (keyApi > bestApi) {\r\n                bestApi = keyApi;\r\n            }\r\n        }\r\n        for (Iterator<Implementation> keys = impls.keySet().iterator(); keys.hasNext(); ) {\r\n            if (keys.next().api() != bestApi) {\r\n                keys.remove();\r\n            }\r\n        }\r\n    }\r\n    if (impls.size() > 1) {\r\n        throw new IllegalStateException(\"More than one implementation matches configuration.\");\r\n    }\r\n    if (impls.isEmpty()) {\r\n        throw new IllegalStateException(\"No implementations match configuration.\");\r\n    }\r\n    Class<? extends ActionBarSherlock> impl = impls.values().iterator().next();\r\n    if (BuildConfig.DEBUG)\r\n        Log.i(TAG, \"Using implementation: \" + impl.getSimpleName());\r\n    try {\r\n        Constructor<? extends ActionBarSherlock> ctor = impl.getConstructor(CONSTRUCTOR_ARGS);\r\n        return ctor.newInstance(activity, flags);\r\n    } catch (NoSuchMethodException e) {\r\n        throw new RuntimeException(e);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new RuntimeException(e);\r\n    } catch (InstantiationException e) {\r\n        throw new RuntimeException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new RuntimeException(e);\r\n    } catch (InvocationTargetException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.spotify.apollo.request.OngoingRequest.serverInfo",
	"Comment": "returns an identifier for the server where this request originated.",
	"Method": "ServerInfo serverInfo(){\r\n    return UNKNOWN_SERVER_INFO;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.TypeSignature.typeParameters",
	"Comment": "returns the list of the type parameters of this type signature.",
	"Method": "List<TypeSignature> typeParameters(){\r\n    return typeParameters;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Strings.assertIsEqualToIgnoringNewLines",
	"Comment": "verifies that actual is equal to expected ignoring new lines",
	"Method": "void assertIsEqualToIgnoringNewLines(AssertionInfo info,CharSequence actual,CharSequence expected){\r\n    String actualWithoutNewLines = removeNewLines(actual);\r\n    String expectedWithoutNewLines = removeNewLines(expected);\r\n    if (!actualWithoutNewLines.equals(expectedWithoutNewLines))\r\n        throw failures.failure(info, shouldBeEqualIgnoringNewLines(actual, expected), actual, expected);\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.logging.structured.StructuredLog.responseTimeNanos",
	"Comment": "returns the duration in ms of the time that is taken to process the request.",
	"Method": "long responseTimeNanos(){\r\n    return responseTimeNanos;\r\n}"
}, {
	"Path": "org.assertj.core.api.AtomicLongArrayAssert.isSortedAccordingTo",
	"Comment": "verifies that the actual atomiclongarray is sorted according to the given comparator. empty arrays are considered sorted whateverthe comparator is. one element arrays are considered sorted if the element is compatible with comparator, otherwise anassertionerror is thrown.",
	"Method": "AtomicLongArrayAssert isSortedAccordingTo(Comparator<? super Long> comparator){\r\n    arrays.assertIsSortedAccordingToComparator(info, array, comparator);\r\n    return myself;\r\n}"
}, {
	"Path": "com.ichi2.anki.CardBrowser.onTrimMemory",
	"Comment": "we spawn decktasks that may create memory pressure, this transmits it so polling iscancelled sees the pressure",
	"Method": "void onTrimMemory(int pressureLevel){\r\n    DeckTask.cancelTask();\r\n}"
}, {
	"Path": "com.ichi2.libanki.DB.setSqliteOpenHelperFactory",
	"Comment": "you may swap in your own sqlite implementation by altering the factory here. anexample might be to use the framework implementation. if you set to null, we defaultto requery",
	"Method": "void setSqliteOpenHelperFactory(SupportSQLiteOpenHelper.Factory factory){\r\n    sqliteOpenHelperFactory = factory;\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.thrift.ThriftFunction.serviceType",
	"Comment": "returns the thrift service interface this function belongs to.",
	"Method": "Class<?> serviceType(){\r\n    return serviceType;\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.setFirstTextureWithSecond",
	"Comment": "recycle the first texture id and set it with the second texturemanually call this function to set the first texture with the secondone after page forward flipped over in single page mode.",
	"Method": "Page setFirstTextureWithSecond(){\r\n    if (mTexIDs[FIRST_TEXTURE_ID] > INVALID_TEXTURE_ID) {\r\n        mUnusedTexIDs[mUnusedTexSize++] = mTexIDs[FIRST_TEXTURE_ID];\r\n    }\r\n    maskColor[FIRST_TEXTURE_ID][0] = maskColor[SECOND_TEXTURE_ID][0];\r\n    maskColor[FIRST_TEXTURE_ID][1] = maskColor[SECOND_TEXTURE_ID][1];\r\n    maskColor[FIRST_TEXTURE_ID][2] = maskColor[SECOND_TEXTURE_ID][2];\r\n    mTexIDs[FIRST_TEXTURE_ID] = mTexIDs[SECOND_TEXTURE_ID];\r\n    mTexIDs[SECOND_TEXTURE_ID] = INVALID_TEXTURE_ID;\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractLocalDateTimeAssert.haveSameYear",
	"Comment": "returns true if both datetime are in the same year, false otherwise.",
	"Method": "boolean haveSameYear(LocalDateTime actual,LocalDateTime other){\r\n    return actual.getYear() == other.getYear();\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,double[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "org.agrona.BitUtil.fromHexByteArray",
	"Comment": "generate a byte array from the hex representation of the given byte array.",
	"Method": "byte[] fromHexByteArray(byte[] buffer){\r\n    final byte[] outputBuffer = new byte[buffer.length >> 1];\r\n    for (int i = 0; i < buffer.length; i += 2) {\r\n        final int hi = FROM_HEX_DIGIT_TABLE[buffer[i]] << 4;\r\n        final int lo = FROM_HEX_DIGIT_TABLE[buffer[i + 1]];\r\n        outputBuffer[i >> 1] = (byte) (hi | lo);\r\n    }\r\n    return outputBuffer;\r\n}"
}, {
	"Path": "org.agrona.collections.IntArrayList.fastUnorderedRemoveInt",
	"Comment": "remove the first instance of a value if found in the list and replaces it with the last itemin the list. this saves a copy down of all items at the expense of not preserving list order.",
	"Method": "boolean fastUnorderedRemoveInt(int value){\r\n    @DoNotSub\r\n    final int index = indexOf(value);\r\n    if (-1 != index) {\r\n        elements[index] = elements[--size];\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.agrona.collections.Int2ObjectCache.capacity",
	"Comment": "get the total capacity for the map to which the load factor will be a fraction of.",
	"Method": "int capacity(){\r\n    return capacity;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractSoftAssertions.decorateErrorsCollected",
	"Comment": "modifies collected errors. override to customize modification.",
	"Method": "List<Throwable> decorateErrorsCollected(List<Throwable> errors){\r\n    return addLineNumberToErrorMessages(errors);\r\n}"
}, {
	"Path": "snippets.Snippets.dropElements",
	"Comment": "removes elements in an array until the passed function returns true. returns the remaining elements in the array.",
	"Method": "int[] dropElements(int[] elements,IntPredicate condition){\r\n    while (elements.length > 0 && !condition.test(elements[0])) {\r\n        elements = Arrays.copyOfRange(elements, 1, elements.length);\r\n    }\r\n    return elements;\r\n}"
}, {
	"Path": "org.assertj.core.internal.DoubleArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,double[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.agrona.concurrent.status.AtomicCounter.getWeak",
	"Comment": "get the value of the counter using weak ordering semantics. this is the same a standard read of a field.",
	"Method": "long getWeak(){\r\n    return UnsafeAccess.UNSAFE.getLong(byteArray, addressOffset);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.view.menu.MenuItemImpl.invoke",
	"Comment": "invokes the item by calling various listeners or callbacks.",
	"Method": "boolean invoke(){\r\n    if (mClickListener != null && mClickListener.onMenuItemClick(this)) {\r\n        return true;\r\n    }\r\n    if (mMenu.dispatchMenuItemSelected(mMenu.getRootMenu(), this)) {\r\n        return true;\r\n    }\r\n    if (mItemCallback != null) {\r\n        mItemCallback.run();\r\n        return true;\r\n    }\r\n    if (mIntent != null) {\r\n        try {\r\n            mMenu.getContext().startActivity(mIntent);\r\n            return true;\r\n        } catch (ActivityNotFoundException e) {\r\n            Log.e(TAG, \"Can't find activity to handle intent; ignoring\", e);\r\n        }\r\n    }\r\n    if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.ichi2.libanki.Sched._dynOrder",
	"Comment": "generates the required sql for order by and limit clauses, for dynamic decks.",
	"Method": "String _dynOrder(int o,int l){\r\n    String t;\r\n    switch(o) {\r\n        case Consts.DYN_OLDEST:\r\n            t = \"c.mod\";\r\n            break;\r\n        case Consts.DYN_RANDOM:\r\n            t = \"random()\";\r\n            break;\r\n        case Consts.DYN_SMALLINT:\r\n            t = \"ivl\";\r\n            break;\r\n        case Consts.DYN_BIGINT:\r\n            t = \"ivl desc\";\r\n            break;\r\n        case Consts.DYN_LAPSES:\r\n            t = \"lapses desc\";\r\n            break;\r\n        case Consts.DYN_ADDED:\r\n            t = \"n.id\";\r\n            break;\r\n        case Consts.DYN_REVADDED:\r\n            t = \"n.id desc\";\r\n            break;\r\n        case Consts.DYN_DUE:\r\n            t = \"c.due\";\r\n            break;\r\n        case Consts.DYN_DUEPRIORITY:\r\n            t = String.format(Locale.US, \"(case when queue=2 and due <= %d then (ivl / cast(%d-due+0.001 as real)) else 100000+due end)\", mToday, mToday);\r\n            break;\r\n        default:\r\n            t = \"c.due\";\r\n            break;\r\n    }\r\n    return t + \" limit \" + l;\r\n}"
}, {
	"Path": "org.assertj.core.extractor.Extractors.byName",
	"Comment": "provides extractor for extracting multiple fields or properties from any object using reflection",
	"Method": "Function<F, Object> byName(String fieldOrProperty,Function<F, Tuple> byName,String fieldsOrProperties){\r\n    return new ByNameMultipleExtractor(fieldsOrProperties);\r\n}"
}, {
	"Path": "org.agrona.concurrent.errors.DistinctErrorLog.record",
	"Comment": "record an observation of an error. if it is the first observation of this error type for a stack tracethen a new entry will be created. for subsequent observations of the same error type and stack trace acounter and time of last observation will be updated.",
	"Method": "boolean record(Throwable observation){\r\n    final long timestamp = clock.time();\r\n    DistinctObservation distinctObservation;\r\n    synchronized (this) {\r\n        distinctObservation = find(distinctObservations, observation);\r\n        if (null == distinctObservation) {\r\n            distinctObservation = newObservation(timestamp, observation);\r\n            if (INSUFFICIENT_SPACE == distinctObservation) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    final int offset = distinctObservation.offset;\r\n    buffer.getAndAddInt(offset + OBSERVATION_COUNT_OFFSET, 1);\r\n    buffer.putLongOrdered(offset + LAST_OBSERVATION_TIMESTAMP_OFFSET, timestamp);\r\n    return true;\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.PlotSheet.addDrawable",
	"Comment": "add another drawable object that shall be drawn onto the sheetthis adds only drawables for the first screen in multimode plots for",
	"Method": "void addDrawable(Drawable draw){\r\n    this.screenParts.get(0).addDrawable(draw);\r\n    mDrawablesPrepared = false;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertHasSizeGreaterThan",
	"Comment": "asserts that the number of elements in the given array is greater than the given boundary.",
	"Method": "void assertHasSizeGreaterThan(AssertionInfo info,Object[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.DeepDifference.compareSortedMap",
	"Comment": "deeply compare two sortedmap instances. this method walks the maps inorder, taking advantage of the fact that the maps are sortedmaps.",
	"Method": "boolean compareSortedMap(SortedMap<K1, V1> map1,SortedMap<K2, V2> map2,List<String> path,Deque<DualKey> toCompare,Set<DualKey> visited){\r\n    if (map1.size() != map2.size()) {\r\n        return false;\r\n    }\r\n    Iterator<Map.Entry<K2, V2>> i2 = map2.entrySet().iterator();\r\n    for (Map.Entry<K1, V1> entry1 : map1.entrySet()) {\r\n        Map.Entry<K2, V2> entry2 = i2.next();\r\n        DualKey dk = new DualKey(path, entry1.getKey(), entry2.getKey());\r\n        if (!visited.contains(dk)) {\r\n            toCompare.addFirst(dk);\r\n        }\r\n        dk = new DualKey(path, entry1.getValue(), entry2.getValue());\r\n        if (!visited.contains(dk)) {\r\n            toCompare.addFirst(dk);\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.ActionBarSherlockCompat.isReservingOverflow",
	"Comment": "determine whether or not the device has a dedicated menu key.",
	"Method": "boolean isReservingOverflow(){\r\n    if (!mReserveOverflowSet) {\r\n        mReserveOverflow = ActionMenuPresenter.reserveOverflow(mActivity);\r\n        mReserveOverflowSet = true;\r\n    }\r\n    return mReserveOverflow;\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelFieldEditor.addFieldDialog",
	"Comment": "creates a dialog to rename the currently selected field, short loading ti processing time scales with number of items",
	"Method": "void addFieldDialog(){\r\n    mFieldNameInput = new EditText(this);\r\n    mFieldNameInput.setSingleLine(true);\r\n    new MaterialDialog.Builder(this).title(R.string.model_field_editor_add).positiveText(R.string.dialog_ok).customView(mFieldNameInput, true).onPositive((dialog, which) -> {\r\n        String fieldName = mFieldNameInput.getText().toString().replaceAll(\"[\\'\\\"\\\\n\\\\r\\\\[\\\\]\\\\(\\\\)]\", \"\");\r\n        if (fieldName.length() == 0) {\r\n            showToast(getResources().getString(R.string.toast_empty_name));\r\n        } else if (containsField(fieldName)) {\r\n            showToast(getResources().getString(R.string.toast_duplicate_field));\r\n        } else {\r\n            try {\r\n                mCol.modSchema();\r\n                DeckTask.launchDeckTask(DeckTask.TASK_TYPE_ADD_FIELD, mChangeFieldHandler, new DeckTask.TaskData(new Object[] { mMod, fieldName }));\r\n            } catch (ConfirmModSchemaException e) {\r\n                ConfirmationDialog c = new ConfirmationDialog();\r\n                c.setArgs(getResources().getString(R.string.full_sync_confirmation));\r\n                Runnable confirm = () -> {\r\n                    mCol.modSchemaNoCheck();\r\n                    String fieldName1 = mFieldNameInput.getText().toString().replaceAll(\"[\\'\\\"\\\\n\\\\r\\\\[\\\\]\\\\(\\\\)]\", \"\");\r\n                    DeckTask.launchDeckTask(DeckTask.TASK_TYPE_ADD_FIELD, mChangeFieldHandler, new DeckTask.TaskData(new Object[] { mMod, fieldName1 }));\r\n                    dismissContextMenu();\r\n                };\r\n                c.setConfirm(confirm);\r\n                c.setCancel(mConfirmDialogCancel);\r\n                ModelFieldEditor.this.showDialogFragment(c);\r\n            }\r\n            mCol.getModels().update(mMod);\r\n            fullRefreshList();\r\n        }\r\n    }).negativeText(R.string.dialog_cancel).show();\r\n}"
}, {
	"Path": "org.assertj.core.data.TemporalUnitLessThanOffset.isBeyondOffset",
	"Comment": "checks if difference between temporal values is less then offset.",
	"Method": "boolean isBeyondOffset(Temporal temporal1,Temporal temporal2){\r\n    return getDifference(temporal1, temporal2) >= value;\r\n}"
}, {
	"Path": "com.ichi2.anki.ModelBrowser.updateSubtitleText",
	"Comment": "updates the subtitle showing the amount of mmodels availableonly call this after initializing the main list",
	"Method": "void updateSubtitleText(){\r\n    int count = mModelIds.size();\r\n    mActionBar.setSubtitle(getResources().getQuantityString(R.plurals.model_browser_types_available, count, count));\r\n}"
}, {
	"Path": "org.assertj.core.error.MultipleAssertionsError.getErrors",
	"Comment": "returns the causal assertionerrors in the order that they were thrown.",
	"Method": "List<? extends AssertionError> getErrors(){\r\n    return errors;\r\n}"
}, {
	"Path": "org.agrona.concurrent.ringbuffer.RecordDescriptor.typeOffset",
	"Comment": "the offset from the beginning of a record at which the message type field begins.",
	"Method": "int typeOffset(int recordOffset){\r\n    return recordOffset + SIZE_OF_INT;\r\n}"
}, {
	"Path": "org.assertj.core.internal.Iterables.assertIsSubsetOf",
	"Comment": "verifies that the actual iterable is a subset of values iterable. both actual and given iterable are treated as sets, therefore duplicates on either of them are ignored.",
	"Method": "void assertIsSubsetOf(AssertionInfo info,Iterable<?> actual,Iterable<?> values){\r\n    assertNotNull(info, actual);\r\n    checkIterableIsNotNull(values);\r\n    List<Object> extra = stream(actual).filter(actualElement -> !iterableContains(values, actualElement)).collect(toList());\r\n    if (extra.size() > 0)\r\n        throw failures.failure(info, shouldBeSubsetOf(actual, values, extra, comparisonStrategy));\r\n}"
}, {
	"Path": "com.ichi2.anki.AbstractFlashcardViewer.typeAnsQuestionFilter",
	"Comment": "format question field when it contains typeanswer or clozes. if there was an error during type text extraction, awarning is displayed",
	"Method": "String typeAnsQuestionFilter(String buf){\r\n    Matcher m = sTypeAnsPat.matcher(buf);\r\n    if (mTypeWarning != null) {\r\n        return m.replaceFirst(mTypeWarning);\r\n    }\r\n    StringBuilder sb = new StringBuilder();\r\n    if (mUseInputTag) {\r\n        sb.append(\"<center>\\n<input type=text name=typed id=typeans onfocus=\\\"taFocus();\\\" \" + \"onblur=\\\"taBlur(this);\\\" onKeyPress=\\\"return taKey(this, event)\\\" autocomplete=\\\"off\\\" \");\r\n        if (mTypeFont != null && !TextUtils.isEmpty(mTypeFont) && mTypeSize > 0) {\r\n            sb.append(\"style=\\\"font-family: '\").append(mTypeFont).append(\"'; font-size: \").append(Integer.toString(mTypeSize)).append(\"px;\\\" \");\r\n        }\r\n        sb.append(\">\\n<\/center>\\n\");\r\n    } else {\r\n        sb.append(\"<span id=typeans class=\\\"typePrompt\");\r\n        if (mUseInputTag) {\r\n            sb.append(\" typeOff\");\r\n        }\r\n        sb.append(\"\\\">........<\/span>\");\r\n    }\r\n    return m.replaceAll(sb.toString());\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.HttpObjectEncoder.close",
	"Comment": "releases the resources related with this encoder and fails any unfinished writes.",
	"Method": "void close(){\r\n    if (closed) {\r\n        return;\r\n    }\r\n    closed = true;\r\n    doClose();\r\n}"
}, {
	"Path": "com.eschao.android.widget.pageflip.Page.computeIndexOfApexOrder",
	"Comment": "compute index of page apexes order for current original point",
	"Method": "void computeIndexOfApexOrder(){\r\n    mApexOrderIndex = 0;\r\n    if (originP.x < right && originP.y < 0) {\r\n        mApexOrderIndex = 3;\r\n    } else {\r\n        if (originP.y > 0) {\r\n            mApexOrderIndex++;\r\n        }\r\n        if (originP.x < right) {\r\n            mApexOrderIndex++;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.ActionBarSherlock.getMenuInflater",
	"Comment": "get a menu inflater instance which supports the newer menu attributes.",
	"Method": "MenuInflater getMenuInflater(){\r\n    if (BuildConfig.DEBUG)\r\n        Log.d(TAG, \"[getMenuInflater]\");\r\n    if (mMenuInflater == null) {\r\n        if (getActionBar() != null) {\r\n            mMenuInflater = new MenuInflater(getThemedContext(), mActivity);\r\n        } else {\r\n            mMenuInflater = new MenuInflater(mActivity);\r\n        }\r\n    }\r\n    return mMenuInflater;\r\n}"
}, {
	"Path": "com.ichi2.anki.tests.ContentProviderTest.testUnsupportedOperations",
	"Comment": "check that an exception is thrown when unsupported operations are performed",
	"Method": "void testUnsupportedOperations(){\r\n    final ContentResolver cr = InstrumentationRegistry.getInstrumentation().getTargetContext().getContentResolver();\r\n    ContentValues dummyValues = new ContentValues();\r\n    Uri[] updateUris = { FlashCardsContract.Note.CONTENT_URI, FlashCardsContract.Model.CONTENT_URI, FlashCardsContract.Deck.CONTENT_ALL_URI, FlashCardsContract.Note.CONTENT_URI.buildUpon().appendPath(\"1234\").appendPath(\"cards\").build() };\r\n    for (Uri uri : updateUris) {\r\n        try {\r\n            cr.update(uri, dummyValues, null, null);\r\n            fail(\"Update on \" + uri + \" was supposed to throw exception\");\r\n        } catch (UnsupportedOperationException e) {\r\n        } catch (IllegalArgumentException e) {\r\n        }\r\n    }\r\n    Uri[] deleteUris = { FlashCardsContract.Note.CONTENT_URI, FlashCardsContract.Note.CONTENT_URI.buildUpon().appendPath(\"1234\").appendPath(\"cards\").build(), FlashCardsContract.Note.CONTENT_URI.buildUpon().appendPath(\"1234\").appendPath(\"cards\").appendPath(\"2345\").build(), FlashCardsContract.Model.CONTENT_URI, FlashCardsContract.Model.CONTENT_URI.buildUpon().appendPath(\"1234\").build() };\r\n    for (Uri uri : deleteUris) {\r\n        try {\r\n            cr.delete(uri, null, null);\r\n            fail(\"Delete on \" + uri + \" was supposed to throw exception\");\r\n        } catch (UnsupportedOperationException e) {\r\n        }\r\n    }\r\n    Uri[] insertUris = { FlashCardsContract.Note.CONTENT_URI.buildUpon().appendPath(\"1234\").build(), FlashCardsContract.Note.CONTENT_URI.buildUpon().appendPath(\"1234\").appendPath(\"cards\").build(), FlashCardsContract.Note.CONTENT_URI.buildUpon().appendPath(\"1234\").appendPath(\"cards\").appendPath(\"2345\").build(), FlashCardsContract.Model.CONTENT_URI.buildUpon().appendPath(\"1234\").build() };\r\n    for (Uri uri : insertUris) {\r\n        try {\r\n            cr.insert(uri, dummyValues);\r\n            fail(\"Insert on \" + uri + \" was supposed to throw exception\");\r\n        } catch (UnsupportedOperationException e) {\r\n        } catch (IllegalArgumentException e) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertDoesNotContainSequence",
	"Comment": "verifies that the given array does not contain the given sequence of objects in order.",
	"Method": "void assertDoesNotContainSequence(AssertionInfo info,Object[] actual,Object[] sequence){\r\n    arrays.assertDoesNotContainSequence(info, failures, actual, sequence);\r\n}"
}, {
	"Path": "org.agrona.collections.Int2IntCounterMap.compact",
	"Comment": "compact the backing arrays by rehashing with a capacity just larger than current sizeand giving consideration to the load factor.",
	"Method": "void compact(){\r\n    @DoNotSub\r\n    final int idealCapacity = (int) Math.round(size() * (1.0d / loadFactor));\r\n    rehash(findNextPositivePowerOfTwo(Math.max(MIN_CAPACITY, idealCapacity)));\r\n}"
}, {
	"Path": "com.golshadi.majid.report.ReportStructure.calculatePercent",
	"Comment": "calculate download percent from compare chunks size with real file size",
	"Method": "double calculatePercent(Task task,List<Chunk> chunks){\r\n    double report = 0;\r\n    if (task.state != TaskStates.DOWNLOAD_FINISHED) {\r\n        int sum = 0;\r\n        for (Chunk chunk : chunks) {\r\n            this.downloadLength += FileUtils.size(task.save_address, String.valueOf(chunk.id));\r\n        }\r\n        if (task.size > 0) {\r\n            report = ((float) downloadLength / task.size * 100);\r\n        }\r\n    } else {\r\n        this.downloadLength = task.size;\r\n        report = 100;\r\n    }\r\n    return report;\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertHasSize",
	"Comment": "asserts that the number of elements in the given array is equal to the expected one.",
	"Method": "void assertHasSize(AssertionInfo info,char[] actual,int expectedSize){\r\n    arrays.assertHasSize(info, actual, expectedSize);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SuggestionsAdapter.getActivityIconWithCache",
	"Comment": "gets the activity or application icon for an activity.uses the local icon cache for fast repeated lookups.",
	"Method": "Drawable getActivityIconWithCache(ComponentName component){\r\n    String componentIconKey = component.flattenToShortString();\r\n    if (mOutsideDrawablesCache.containsKey(componentIconKey)) {\r\n        Drawable.ConstantState cached = mOutsideDrawablesCache.get(componentIconKey);\r\n        return cached == null ? null : cached.newDrawable(mProviderContext.getResources());\r\n    }\r\n    Drawable drawable = getActivityIcon(component);\r\n    Drawable.ConstantState toCache = drawable == null ? null : drawable.getConstantState();\r\n    mOutsideDrawablesCache.put(componentIconKey, toCache);\r\n    return drawable;\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.thrift.text.BaseContext.getCurrentChild",
	"Comment": "return the json element that should be processed next. used forcontexts that have child jsonelements, e.g. sequences, maps, etc.",
	"Method": "JsonNode getCurrentChild(){\r\n    return unsupportedOperation();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofObject",
	"Comment": "constructs and returns a propertyvaluesholder with a given property name andset of object values. this variant also takes a typeevaluator because the systemcannot automatically interpolate between objects of unknown type.",
	"Method": "PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object values){\r\n    PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);\r\n    pvh.setObjectValues(values);\r\n    pvh.setEvaluator(evaluator);\r\n    return pvh;\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.PlotSheet.yToGraphic",
	"Comment": "converts a given y coordinate from plotting field coordinate to a graphic field coordinate.",
	"Method": "float yToGraphic(double y,RectangleWrap field){\r\n    double yQuotient = (field.height - upperFrameThickness - bottomFrameThickness) / (Math.abs(this.screenParts.get(currentScreen).getyRange()[1] - this.screenParts.get(currentScreen).getyRange()[0]));\r\n    double yDistanceFromTop = this.screenParts.get(currentScreen).getyRange()[1] - y;\r\n    return (float) (field.y + upperFrameThickness + yDistanceFromTop * yQuotient);\r\n}"
}, {
	"Path": "com.spotify.apollo.route.VersionedRoute.of",
	"Comment": "create a new com.spotify.apollo.route.versionedroute, which is valid from version 0.",
	"Method": "VersionedRoute of(Route<AsyncHandler<Response<ByteString>>> route){\r\n    return new AutoValue_VersionedRouteImpl(route, 0, Optional.empty());\r\n}"
}, {
	"Path": "com.ichi2.libanki.DB.update",
	"Comment": "update must always be called via db in order to mark the db as changed",
	"Method": "int update(String table,ContentValues values,int update,String table,ContentValues values,String whereClause,String[] whereArgs){\r\n    mMod = true;\r\n    return getDatabase().update(table, SQLiteDatabase.CONFLICT_NONE, values, whereClause, whereArgs);\r\n}"
}, {
	"Path": "org.assertj.core.internal.CharArrays.assertHasSizeLessThan",
	"Comment": "asserts that the number of elements in the given array is less than the given boundary.",
	"Method": "void assertHasSizeLessThan(AssertionInfo info,char[] actual,int boundary){\r\n    arrays.assertHasSizeLessThan(info, actual, boundary);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Objects.assertIsExactlyInstanceOf",
	"Comment": "verifies that the actual value is exactly an instance of given type.",
	"Method": "void assertIsExactlyInstanceOf(AssertionInfo info,Object actual,Class<?> type){\r\n    if (!actualIsExactlyInstanceOfType(actual, type, info))\r\n        throw failures.failure(info, shouldBeExactlyInstance(actual, type));\r\n}"
}, {
	"Path": "com.ichi2.utils.Threads.checkMainThread",
	"Comment": "checks that it is called from the main thread and fails if it is called from another thread.",
	"Method": "void checkMainThread(){\r\n    if (!isOnMainThread()) {\r\n        Timber.e(\"must be called on the main thread instead of \" + Thread.currentThread());\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.saml.SamlInitializer.unavailabilityCause",
	"Comment": "returns the cause of unavailability of the opensaml library.",
	"Method": "Throwable unavailabilityCause(){\r\n    return UNAVAILABILITY_CAUSE;\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractListAssert.isSortedAccordingTo",
	"Comment": "verifies that the actual list is sorted according to the given comparator. empty lists are considered sorted whateverthe comparator is. one element lists are considered sorted if the element is compatible with comparator.",
	"Method": "SELF isSortedAccordingTo(Comparator<? super ELEMENT> comparator){\r\n    lists.assertIsSortedAccordingToComparator(info, actual, comparator);\r\n    return myself;\r\n}"
}, {
	"Path": "com.actionbarsherlock.view.ActionMode.getTag",
	"Comment": "retrieve the tag object associated with this actionmode.like the tag available to views, this allows applications to associate arbitrarydata with an actionmode for later reference.",
	"Method": "Object getTag(){\r\n    return mTag;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.annotatedService",
	"Comment": "binds the specified annotated service object under the specified path prefix.",
	"Method": "B annotatedService(Object service,B annotatedService,Object service,Object exceptionHandlersAndConverters,B annotatedService,Object service,Function<Service<HttpRequest, HttpResponse>, ? extends Service<HttpRequest, HttpResponse>> decorator,Object exceptionHandlersAndConverters,B annotatedService,String pathPrefix,Object service,B annotatedService,String pathPrefix,Object service,Object exceptionHandlersAndConverters,B annotatedService,String pathPrefix,Object service,Function<Service<HttpRequest, HttpResponse>, ? extends Service<HttpRequest, HttpResponse>> decorator,Object exceptionHandlersAndConverters,B annotatedService,String pathPrefix,Object service,Function<Service<HttpRequest, HttpResponse>, ? extends Service<HttpRequest, HttpResponse>> decorator,Iterable<?> exceptionHandlersAndConverters){\r\n    requireNonNull(pathPrefix, \"pathPrefix\");\r\n    requireNonNull(service, \"service\");\r\n    requireNonNull(decorator, \"decorator\");\r\n    requireNonNull(exceptionHandlersAndConverters, \"exceptionHandlersAndConverters\");\r\n    final List<AnnotatedHttpServiceElement> elements = AnnotatedHttpServiceFactory.find(pathPrefix, service, exceptionHandlersAndConverters);\r\n    elements.forEach(e -> service(e.pathMapping(), decorator.apply(e.decorator().apply(e.service()))));\r\n    return self();\r\n}"
}, {
	"Path": "com.ichi2.libanki.Decks.active",
	"Comment": "the currently active dids. make sure to copy before modifying.",
	"Method": "LinkedList<Long> active(){\r\n    try {\r\n        JSONArray ja = mCol.getConf().getJSONArray(\"activeDecks\");\r\n        LinkedList<Long> result = new LinkedList();\r\n        for (int i = 0; i < ja.length(); i++) {\r\n            result.add(ja.getLong(i));\r\n        }\r\n        return result;\r\n    } catch (JSONException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.ActionBarView.setTitle",
	"Comment": "set the action bar title. this will always replace or override window titles.",
	"Method": "void setTitle(CharSequence title){\r\n    mUserTitle = true;\r\n    setTitleImpl(title);\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.logback.RequestContextExportingAppender.addHttpResponseHeader",
	"Comment": "adds the specified http response header name to the export list.",
	"Method": "void addHttpResponseHeader(CharSequence name){\r\n    ensureNotStarted();\r\n    builder.addHttpResponseHeader(name);\r\n}"
}, {
	"Path": "org.assertj.core.util.Preconditions.checkState",
	"Comment": "ensures the truth of an expression involving the state of the calling instance, but notinvolving any parameters to the calling method.borrowed from guava.",
	"Method": "void checkState(boolean expression,String errorMessageTemplate,Object errorMessageArgs){\r\n    if (!expression) {\r\n        throw new IllegalStateException(format(errorMessageTemplate, errorMessageArgs));\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractListAssert.has",
	"Comment": "verifies that the actual object at the given index in the actual group satisfies the given condition.",
	"Method": "SELF has(Condition<? super ELEMENT> condition,Index index,SELF has,Condition<? super ACTUAL> condition){\r\n    return super.has(condition);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerBuilder.counterSlidingWindow",
	"Comment": "sets the time length of sliding window to accumulate the count of events.",
	"Method": "CircuitBreakerBuilder counterSlidingWindow(Duration counterSlidingWindow){\r\n    requireNonNull(counterSlidingWindow, \"counterSlidingWindow\");\r\n    if (counterSlidingWindow.isNegative() || counterSlidingWindow.isZero()) {\r\n        throw new IllegalArgumentException(\"counterSlidingWindow: \" + counterSlidingWindow + \" (expected: > 0)\");\r\n    }\r\n    this.counterSlidingWindow = counterSlidingWindow;\r\n    return this;\r\n}"
}, {
	"Path": "org.assertj.core.internal.ByteArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,byte[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.SearchView.launchIntent",
	"Comment": "launches an intent, including any special intent handling.",
	"Method": "void launchIntent(Intent intent){\r\n    if (intent == null) {\r\n        return;\r\n    }\r\n    try {\r\n        getContext().startActivity(intent);\r\n    } catch (RuntimeException ex) {\r\n        Log.e(LOG_TAG, \"Failed launch activity: \" + intent, ex);\r\n    }\r\n}"
}, {
	"Path": "com.actionbarsherlock.widget.ShareActionProvider.setActivityChooserPolicyIfNeeded",
	"Comment": "set the activity chooser policy of the model backed by the currentshare history file if needed which is if there is a registered callback.",
	"Method": "void setActivityChooserPolicyIfNeeded(){\r\n    if (mOnShareTargetSelectedListener == null) {\r\n        return;\r\n    }\r\n    if (mOnChooseActivityListener == null) {\r\n        mOnChooseActivityListener = new ShareAcitivityChooserModelPolicy();\r\n    }\r\n    ActivityChooserModel dataModel = ActivityChooserModel.get(mContext, mShareHistoryFileName);\r\n    dataModel.setOnChooseActivityListener(mOnChooseActivityListener);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertDoesNotHaveDuplicates",
	"Comment": "asserts that the given array does not have duplicate values.",
	"Method": "void assertDoesNotHaveDuplicates(AssertionInfo info,Object[] actual){\r\n    arrays.assertDoesNotHaveDuplicates(info, failures, actual);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.AbstractClientOptionsBuilder.defaultMaxResponseLength",
	"Comment": "sets the default maximum allowed length of a server response in bytes.",
	"Method": "B defaultMaxResponseLength(long defaultMaxResponseLength){\r\n    return option(ClientOption.DEFAULT_MAX_RESPONSE_LENGTH, defaultMaxResponseLength);\r\n}"
}, {
	"Path": "org.assertj.core.internal.Dates.areInSameHourWindow",
	"Comment": "returns true if both date are in the same year, month and day of month, hour, minute and second, false otherwise.",
	"Method": "boolean areInSameHourWindow(Date actual,Date other){\r\n    return timeDifference(actual, other) < TimeUnit.HOURS.toMillis(1);\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.DefaultValues.isUnspecified",
	"Comment": "returns whether the specified value is not specified by a user.",
	"Method": "boolean isUnspecified(String value){\r\n    return UNSPECIFIED.equals(value);\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractZonedDateTimeAssert.haveSameYearAndMonth",
	"Comment": "returns true if both datetime are in the same year and month, false otherwise.",
	"Method": "boolean haveSameYearAndMonth(ZonedDateTime actual,ZonedDateTime other){\r\n    return haveSameYear(actual, other) && actual.getMonth() == other.getMonth();\r\n}"
}, {
	"Path": "org.assertj.core.api.AbstractOffsetDateTimeAssert.haveSameNano",
	"Comment": "returns true if both offsetdatetime are in the same nanosecond, false otherwise.",
	"Method": "boolean haveSameNano(OffsetDateTime actual,OffsetDateTime other){\r\n    return actual.getNano() == other.getNano();\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertContainsOnly",
	"Comment": "asserts that the given array contains only the given values and nothing else, in any order.",
	"Method": "void assertContainsOnly(AssertionInfo info,boolean[] actual,boolean[] values){\r\n    arrays.assertContainsOnly(info, failures, actual, values);\r\n}"
}, {
	"Path": "com.wildplot.android.rendering.MultiScreenPart.addDrawable",
	"Comment": "add another drawable object that shall be drawn onto the sheet",
	"Method": "void addDrawable(Drawable draw){\r\n    this.drawables.add(draw);\r\n}"
}, {
	"Path": "com.linecorp.armeria.client.Endpoint.withDefaultPort",
	"Comment": "returns a new host endpoint with the specified default port number.",
	"Method": "Endpoint withDefaultPort(int defaultPort){\r\n    ensureSingle();\r\n    validatePort(\"defaultPort\", defaultPort);\r\n    if (port != 0) {\r\n        return this;\r\n    }\r\n    return new Endpoint(host(), ipAddr(), defaultPort, weight(), hostType);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsAdapterView.dispatchSaveInstanceState",
	"Comment": "override to prevent freezing of any views created by the adapter.",
	"Method": "void dispatchSaveInstanceState(SparseArray<Parcelable> container){\r\n    dispatchFreezeSelfOnly(container);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.PropertyValuesHolder.ofFloat",
	"Comment": "constructs and returns a propertyvaluesholder with a given property name andset of float values.",
	"Method": "PropertyValuesHolder ofFloat(String propertyName,float values){\r\n    return new FloatPropertyValuesHolder(propertyName, values);\r\n}"
}, {
	"Path": "com.ichi2.libanki.Utils.isInside",
	"Comment": "checks to see if a given file path resides inside a given directory.useful for protection against path traversal attacks prior to creating the file",
	"Method": "boolean isInside(File file,File dir){\r\n    return file.getCanonicalPath().startsWith(dir.getCanonicalPath());\r\n}"
}, {
	"Path": "com.ichi2.anki.api.AddContentApi.getModelList",
	"Comment": "get a map of all model ids and names with number of fields larger than minnumfields",
	"Method": "Map<Long, String> getModelList(Map<Long, String> getModelList,int minNumFields){\r\n    final Cursor allModelsCursor = mResolver.query(Model.CONTENT_URI, null, null, null, null);\r\n    if (allModelsCursor == null) {\r\n        return null;\r\n    }\r\n    Map<Long, String> models = new HashMap();\r\n    try {\r\n        while (allModelsCursor.moveToNext()) {\r\n            long modelId = allModelsCursor.getLong(allModelsCursor.getColumnIndex(Model._ID));\r\n            String name = allModelsCursor.getString(allModelsCursor.getColumnIndex(Model.NAME));\r\n            String flds = allModelsCursor.getString(allModelsCursor.getColumnIndex(Model.FIELD_NAMES));\r\n            int numFlds = Utils.splitFields(flds).length;\r\n            if (numFlds >= minNumFields) {\r\n                models.put(modelId, name);\r\n            }\r\n        }\r\n    } finally {\r\n        allModelsCursor.close();\r\n    }\r\n    return models;\r\n}"
}, {
	"Path": "com.ichi2.libanki.Decks._ensureParents",
	"Comment": "ensure parents exist, and return name with case matching parents.",
	"Method": "String _ensureParents(String name){\r\n    String s = \"\";\r\n    List<String> path = _path(name);\r\n    if (path.size() < 2) {\r\n        return name;\r\n    }\r\n    for (String p : path.subList(0, path.size() - 1)) {\r\n        if (TextUtils.isEmpty(s)) {\r\n            s += p;\r\n        } else {\r\n            s += \"::\" + p;\r\n        }\r\n        long did = id(s);\r\n        s = name(did);\r\n    }\r\n    name = s + \"::\" + path.get(path.size() - 1);\r\n    return name;\r\n}"
}, {
	"Path": "com.ichi2.libanki.importer.Anki2Importer._mediaPick",
	"Comment": "return the contents of the given input stream, limited to anki2importer.mediapicklimit bytes this is only usedfor comparison of media files with the limited resources of mobile devices",
	"Method": "byte[] _mediaPick(BufferedInputStream is){\r\n    try {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(MEDIAPICKLIMIT * 2);\r\n        byte[] buf = new byte[MEDIAPICKLIMIT];\r\n        int readLen;\r\n        int readSoFar = 0;\r\n        is.mark(MEDIAPICKLIMIT * 2);\r\n        while (true) {\r\n            readLen = is.read(buf);\r\n            baos.write(buf);\r\n            if (readLen == -1) {\r\n                break;\r\n            }\r\n            readSoFar += readLen;\r\n            if (readSoFar > MEDIAPICKLIMIT) {\r\n                break;\r\n            }\r\n        }\r\n        is.reset();\r\n        byte[] result = new byte[MEDIAPICKLIMIT];\r\n        System.arraycopy(baos.toByteArray(), 0, result, 0, Math.min(baos.size(), MEDIAPICKLIMIT));\r\n        return result;\r\n    } catch (FileNotFoundException e) {\r\n        return null;\r\n    } catch (IOException e) {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.common.stream.AbstractStreamMessage.cleanupQueue",
	"Comment": "helper method for the common case of cleaning up all elements in a queue when shutting down the stream.",
	"Method": "void cleanupQueue(SubscriptionImpl subscription,Queue<Object> queue){\r\n    final Throwable cause = ClosedPublisherException.get();\r\n    for (; ; ) {\r\n        final Object e = queue.poll();\r\n        if (e == null) {\r\n            break;\r\n        }\r\n        try {\r\n            if (e instanceof CloseEvent) {\r\n                notifySubscriberOfCloseEvent(subscription, (CloseEvent) e);\r\n                continue;\r\n            }\r\n            if (e instanceof CompletableFuture) {\r\n                ((CompletableFuture<?>) e).completeExceptionally(cause);\r\n            }\r\n            @SuppressWarnings(\"unchecked\")\r\n            final T obj = (T) e;\r\n            onRemoval(obj);\r\n        } finally {\r\n            ReferenceCountUtil.safeRelease(e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.Failures.setRemoveAssertJRelatedElementsFromStackTrace",
	"Comment": "sets whether we remove elements related to assertj from assertion error stack trace.",
	"Method": "void setRemoveAssertJRelatedElementsFromStackTrace(boolean removeAssertJRelatedElementsFromStackTrace){\r\n    this.removeAssertJRelatedElementsFromStackTrace = removeAssertJRelatedElementsFromStackTrace;\r\n}"
}, {
	"Path": "com.ichi2.anki.MetaDB.updateLanguage",
	"Comment": "associates a language to a deck, model, and card model for a given type.",
	"Method": "void updateLanguage(Context context,long did,int ord,int qa,String language){\r\n    openDBIfClosed(context);\r\n    try {\r\n        mMetaDb.execSQL(\"UPDATE languages SET language = ? WHERE did = ? AND ord = ? AND qa = ?;\", new Object[] { language, did, ord, qa });\r\n        Timber.v(\"Update language for deck %d\", did);\r\n    } catch (Exception e) {\r\n        Timber.e(e, \"Error updating language in MetaDB \");\r\n    }\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertAreNot",
	"Comment": "assert that each element of given array not satisfies the given condition.",
	"Method": "void assertAreNot(AssertionInfo info,E[] actual,Condition<? super E> condition){\r\n    arrays.assertAreNot(info, failures, conditions, actual, condition);\r\n}"
}, {
	"Path": "org.assertj.core.internal.ObjectArrays.assertContainsOnlyOnce",
	"Comment": "asserts that the given array contains only once the given values.",
	"Method": "void assertContainsOnlyOnce(AssertionInfo info,Object[] actual,Object[] values){\r\n    arrays.assertContainsOnlyOnce(info, failures, actual, values);\r\n}"
}, {
	"Path": "org.assertj.core.api.BDDSoftAssertionsTest.class_soft_assertions_should_report_errors_on_final_methods",
	"Comment": "the test would fail if any method was not proxyable as the assertion error would not be softly caught",
	"Method": "void class_soft_assertions_should_report_errors_on_final_methods(){\r\n    Class<AnnotatedClass> actual = AnnotatedClass.class;\r\n    softly.then(actual).hasAnnotations(MyAnnotation.class, AnotherAnnotation.class).hasAnnotations(SafeVarargs.class, VisibleForTesting.class);\r\n    List<Throwable> errorsCollected = softly.errorsCollected();\r\n    assertThat(errorsCollected).hasSize(1);\r\n    assertThat(errorsCollected.get(0)).hasMessageContaining(\"SafeVarargs\").hasMessageContaining(\"VisibleForTesting\");\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ValueAnimator.getDuration",
	"Comment": "gets the length of the animation. the default duration is 300 milliseconds.",
	"Method": "long getDuration(){\r\n    return mDuration;\r\n}"
}, {
	"Path": "org.assertj.core.util.DateUtil.timeDifference",
	"Comment": "compute the time difference between the two given dates in milliseconds, it always gives a positive result.",
	"Method": "long timeDifference(Date date1,Date date2){\r\n    checkArgument(date1 != null && date2 != null, \"Expecting date parameter not to be null\");\r\n    return Math.abs(date1.getTime() - date2.getTime());\r\n}"
}, {
	"Path": "com.linecorp.armeria.internal.grpc.TestServiceImpl.streamingOutputCall",
	"Comment": "given a request that specifies chunk size and interval between responses, creates and schedulesthe response stream.",
	"Method": "void streamingOutputCall(StreamingOutputCallRequest request,StreamObserver<StreamingOutputCallResponse> responseObserver){\r\n    new ResponseDispatcher(responseObserver).enqueue(toChunkQueue(request)).completeInput();\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.nineoldandroids.animation.ObjectAnimator.getTarget",
	"Comment": "the target object whose property will be animated by this animation",
	"Method": "Object getTarget(){\r\n    return mTarget;\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.DocServiceBuilder.guessAndSerializeExampleRequest",
	"Comment": "returns a tuple of a service name, a method name and a serialized example request.",
	"Method": "String[] guessAndSerializeExampleRequest(Object exampleRequest){\r\n    checkArgument(!(exampleRequest instanceof CharSequence), \"can't guess service or method name from a string: \", exampleRequest);\r\n    boolean guessed = false;\r\n    for (DocServicePlugin plugin : DocService.plugins) {\r\n        if (plugin.supportedExampleRequestTypes().stream().noneMatch(type -> type.isInstance(exampleRequest))) {\r\n            continue;\r\n        }\r\n        final Optional<String> serviceName = plugin.guessServiceName(exampleRequest);\r\n        final Optional<String> methodName = plugin.guessServiceMethodName(exampleRequest);\r\n        if (!serviceName.isPresent() || !methodName.isPresent()) {\r\n            continue;\r\n        }\r\n        guessed = true;\r\n        final String s = serviceName.get();\r\n        final String f = methodName.get();\r\n        final Optional<String> serialized = plugin.serializeExampleRequest(s, f, exampleRequest);\r\n        if (serialized.isPresent()) {\r\n            return new String[] { s, f, serialized.get() };\r\n        }\r\n    }\r\n    if (guessed) {\r\n        throw new IllegalArgumentException(\"could not find a plugin that can serialize: \" + exampleRequest);\r\n    } else {\r\n        throw new IllegalArgumentException(\"could not find a plugin that can guess the service and method name from: \" + exampleRequest);\r\n    }\r\n}"
}, {
	"Path": "com.linecorp.armeria.server.docs.MethodInfo.exampleRequests",
	"Comment": "returns the list of the example request serialized in a string. the format of the example request stringdepends on the underlying rpc implementation.",
	"Method": "List<String> exampleRequests(){\r\n    return exampleRequests;\r\n}"
}, {
	"Path": "org.assertj.core.util.Files.fileNamesIn",
	"Comment": "returns the names of the files inside the specified directory.",
	"Method": "List<String> fileNamesIn(String dirName,boolean recurse,List<String> fileNamesIn,File dir,boolean recurse){\r\n    List<String> scriptNames = new ArrayList();\r\n    File[] existingFiles = dir.listFiles();\r\n    if (isNullOrEmpty(existingFiles)) {\r\n        return scriptNames;\r\n    }\r\n    for (File existingFile : existingFiles) {\r\n        if (existingFile.isDirectory()) {\r\n            if (recurse) {\r\n                scriptNames.addAll(fileNamesIn(existingFile, recurse));\r\n            }\r\n            continue;\r\n        }\r\n        String filename = existingFile.getAbsolutePath();\r\n        if (!scriptNames.contains(filename)) {\r\n            scriptNames.add(filename);\r\n        }\r\n    }\r\n    return scriptNames;\r\n}"
}, {
	"Path": "org.assertj.core.internal.BooleanArrays.assertHasSizeGreaterThanOrEqualTo",
	"Comment": "asserts that the number of elements in the given array is greater than or equal to the given boundary.",
	"Method": "void assertHasSizeGreaterThanOrEqualTo(AssertionInfo info,boolean[] actual,int boundary){\r\n    arrays.assertHasSizeGreaterThanOrEqualTo(info, actual, boundary);\r\n}"
}, {
	"Path": "com.actionbarsherlock.internal.widget.IcsProgressBar.isIndeterminate",
	"Comment": "indicate whether this progress bar is in indeterminate mode.",
	"Method": "boolean isIndeterminate(){\r\n    return mIndeterminate;\r\n}"
}]