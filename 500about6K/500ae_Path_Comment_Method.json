[{
	"Path": "org.apache.jmeter.util.keystore.JmeterKeyStore.getIndexAndIncrement",
	"Comment": "gets current index and increment by rolling if index is equal to length",
	"Method": "int getIndexAndIncrement(int length){\r\n    synchronized (this) {\r\n        int result = lastAliasIndex++;\r\n        if (lastAliasIndex >= length) {\r\n            lastAliasIndex = 0;\r\n        }\r\n        return result;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.util.Calculator.addSample",
	"Comment": "add details for a sample result, which may consist of multiple samples.updates the number of bytes read and sent, error count, starttime and elapsedtime",
	"Method": "void addSample(SampleResult res){\r\n    addBytes(res.getBytesAsLong());\r\n    addSentBytes(res.getSentBytes());\r\n    addValue(res.getTime(), res.getSampleCount());\r\n    errors += res.getErrorCount();\r\n    if (startTime == 0) {\r\n        startTime = res.getStartTime();\r\n    } else {\r\n        startTime = Math.min(startTime, res.getStartTime());\r\n    }\r\n    elapsedTime = Math.max(elapsedTime, res.getEndTime() - startTime);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.setCacheManagerProperty",
	"Comment": "private method to allow asyncsample to reset the value without performing checks",
	"Method": "void setCacheManagerProperty(CacheManager value){\r\n    setProperty(new TestElementProperty(CACHE_MANAGER, value));\r\n}"
}, {
	"Path": "org.apache.jmeter.util.JMeterUtils.clearMatcherMemory",
	"Comment": "hack to make matcher clean the two internal buffers it keeps in memory which size is equivalent to the unzipped page size",
	"Method": "void clearMatcherMemory(Perl5Matcher matcher,Pattern pattern){\r\n    try {\r\n        if (pattern != null) {\r\n            matcher.matches(\"\", pattern);\r\n        }\r\n    } catch (Exception e) {\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getAttrForInt",
	"Comment": "returns the value of the named attribute as an object, or null if no attribute of the given name exists.",
	"Method": "Integer getAttrForInt(String name){\r\n    return (Integer) request.getAttribute(name);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.LoopControlPanel.createLoopCountPanel",
	"Comment": "create a gui panel containing the components related to the number ofloops which should be executed.",
	"Method": "JPanel createLoopCountPanel(){\r\n    JPanel loopPanel = new JPanel(new BorderLayout(5, 0));\r\n    JLabel loopsLabel = new JLabel(JMeterUtils.getResString(\"iterator_num\"));\r\n    loopPanel.add(loopsLabel, BorderLayout.WEST);\r\n    JPanel loopSubPanel = new JPanel(new BorderLayout(5, 0));\r\n    loops = new JTextField(\"1\", 5);\r\n    loops.setName(LOOPS);\r\n    loopsLabel.setLabelFor(loops);\r\n    loopSubPanel.add(loops, BorderLayout.CENTER);\r\n    infinite = new JCheckBox(JMeterUtils.getResString(\"infinite\"));\r\n    infinite.setActionCommand(INFINITE);\r\n    infinite.addActionListener(this);\r\n    loopSubPanel.add(infinite, BorderLayout.WEST);\r\n    loopPanel.add(loopSubPanel, BorderLayout.CENTER);\r\n    loopPanel.add(Box.createHorizontalStrut(loopsLabel.getPreferredSize().width + loops.getPreferredSize().width + infinite.getPreferredSize().width), BorderLayout.NORTH);\r\n    return loopPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.XPath2Extractor.getFragment",
	"Comment": "should we return fragment as text, rather than text of fragment?",
	"Method": "boolean getFragment(){\r\n    return getPropertyAsBoolean(FRAGMENT, false);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.UByteIndexer.create",
	"Comment": "creates a byte indexer to access efficiently the data of a pointer.",
	"Method": "UByteIndexer create(byte[] array,UByteIndexer create,ByteBuffer buffer,UByteIndexer create,BytePointer pointer,UByteIndexer create,byte[] array,long[] sizes,long[] strides,UByteIndexer create,ByteBuffer buffer,long[] sizes,long[] strides,UByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,UByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new UByteRawIndexer(pointer, sizes, strides) : new UByteBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        byte[] array = new byte[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new UByteArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.UByteIndexer.create",
	"Comment": "creates a byte indexer to access efficiently the data of a pointer.",
	"Method": "UByteIndexer create(byte[] array,UByteIndexer create,ByteBuffer buffer,UByteIndexer create,BytePointer pointer,UByteIndexer create,byte[] array,long[] sizes,long[] strides,UByteIndexer create,ByteBuffer buffer,long[] sizes,long[] strides,UByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,UByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.StatisticalSampleSender.testEnded",
	"Comment": "checks if any sample events are still present in the samplestore andsends them to the listener. informs the listener that the test ended.",
	"Method": "void testEnded(String host){\r\n    log.info(\"Test Ended on {}\", host);\r\n    try {\r\n        if (!sampleStore.isEmpty()) {\r\n            sendBatch();\r\n        }\r\n        listener.testEnded(host);\r\n    } catch (RemoteException err) {\r\n        log.warn(\"testEnded(hostname)\", err);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.SearchByClass.getSubTree",
	"Comment": "given a specific found node, this method will return the sub tree of thatnode.",
	"Method": "HashTree getSubTree(Object root){\r\n    return subTrees.get(root);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG93Dialect.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    return support.getSpatialAggregateSQL(columnName, aggregation);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.AbstractBackendListenerClient.getNewLogger",
	"Comment": "get a logger instance which can be used by subclasses to log information.as this class is designed to be subclassed this is useful.",
	"Method": "Logger getNewLogger(){\r\n    return log;\r\n}"
}, {
	"Path": "com.jfinal.config.Interceptors.addGlobalActionInterceptor",
	"Comment": "add the global action interceptor to intercept all the actions.",
	"Method": "Interceptors addGlobalActionInterceptor(Interceptor globalActionInterceptor){\r\n    if (globalActionInterceptor == null) {\r\n        throw new IllegalArgumentException(\"globalActionInterceptor can not be null.\");\r\n    }\r\n    InterceptorManager.me().addGlobalActionInterceptor(globalActionInterceptor);\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.sampleEnd",
	"Comment": "record the end time of a sample and calculate the elapsed time",
	"Method": "void sampleEnd(){\r\n    if (endTime == 0) {\r\n        setEndTime(currentTimeInMillis());\r\n    } else {\r\n        log.error(\"sampleEnd called twice\", new Throwable(\"Invalid call sequence\"));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.property.AbstractProperty.getPropertyType",
	"Comment": "get the property type for this property. used to convert raw values intojmeterproperties.",
	"Method": "Class<? extends JMeterProperty> getPropertyType(){\r\n    return getClass();\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.AssertionResult.setResultForNull",
	"Comment": "convenience method for setting up results where the response was null",
	"Method": "AssertionResult setResultForNull(){\r\n    error = false;\r\n    failure = true;\r\n    failureMessage = RESPONSE_WAS_NULL;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.core.TimeHelper.formatTimeStamp",
	"Comment": "format the specified time stamp to string using jmeter properties.",
	"Method": "String formatTimeStamp(long timeStamp,String formatTimeStamp,long timeStamp,String format){\r\n    SimpleDateFormat dateFormat = format != null ? new SimpleDateFormat(format) : new SimpleDateFormat();\r\n    return dateFormat.format(new Date(timeStamp));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ftp.config.gui.FtpConfigGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement element){\r\n    configureTestElement(element);\r\n    element.setProperty(FTPSampler.SERVER, server.getText());\r\n    element.setProperty(FTPSampler.PORT, port.getText());\r\n    element.setProperty(FTPSampler.REMOTE_FILENAME, remoteFile.getText());\r\n    element.setProperty(FTPSampler.LOCAL_FILENAME, localFile.getText());\r\n    element.setProperty(FTPSampler.INPUT_DATA, inputData.getText());\r\n    element.setProperty(FTPSampler.BINARY_MODE, binaryMode.isSelected());\r\n    element.setProperty(FTPSampler.SAVE_RESPONSE, saveResponseData.isSelected());\r\n    element.setProperty(FTPSampler.UPLOAD_FILE, putBox.isSelected());\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.AbstractSampleConsumer.setDataToContext",
	"Comment": "store data in the current sample context with the specified keyidentifier.",
	"Method": "void setDataToContext(String key,Object value){\r\n    getSampleContext().getData().put(key, value);\r\n}"
}, {
	"Path": "org.apache.jorphan.util.Converter.getFloat",
	"Comment": "convert object to float, or defaultvalue if conversion failed",
	"Method": "float getFloat(Object o,float defaultValue,float getFloat,Object o){\r\n    return getFloat(o, 0);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.TCLogParser.parseAndConfigure",
	"Comment": "parse a set number of lines from the access log. keep in mind the numberof lines parsed will depend on the filter and number of lines in the log.the method returns the actual number of lines parsed.",
	"Method": "int parseAndConfigure(int count,TestElement el){\r\n    return this.parse(el, count);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.MainFrame.showStoppingMessage",
	"Comment": "show a dialog indicating that jmeter threads are stopping on a particularhost.",
	"Method": "void showStoppingMessage(String host){\r\n    if (stoppingMessage != null) {\r\n        stoppingMessage.dispose();\r\n    }\r\n    stoppingMessage = new EscapeDialog(this, JMeterUtils.getResString(\"stopping_test_title\"), true);\r\n    String label = JMeterUtils.getResString(\"stopping_test\");\r\n    if (!StringUtils.isEmpty(host)) {\r\n        label = label + JMeterUtils.getResString(\"stopping_test_host\") + \": \" + host;\r\n    }\r\n    JLabel stopLabel = new JLabel(label);\r\n    stopLabel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));\r\n    stoppingMessage.getContentPane().add(stopLabel);\r\n    stoppingMessage.pack();\r\n    ComponentUtil.centerComponentInComponent(this, stoppingMessage);\r\n    SwingUtilities.invokeLater(() -> {\r\n        if (stoppingMessage != null) {\r\n            stoppingMessage.setVisible(true);\r\n        }\r\n    });\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.RunTimeGui.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    if (displayName) {\r\n        setLayout(new BorderLayout(0, 5));\r\n        setBorder(makeBorder());\r\n        add(makeTitlePanel(), BorderLayout.NORTH);\r\n        JPanel mainPanel = new JPanel(new BorderLayout());\r\n        mainPanel.add(createLoopCountPanel(), BorderLayout.NORTH);\r\n        add(mainPanel, BorderLayout.CENTER);\r\n    } else {\r\n        setLayout(new BorderLayout());\r\n        add(createLoopCountPanel(), BorderLayout.NORTH);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextArea.notifyChangeListeners",
	"Comment": "notify all registered change listeners that the text in the text fieldhas changed.",
	"Method": "void notifyChangeListeners(){\r\n    ChangeEvent ce = new ChangeEvent(this);\r\n    for (ChangeListener mChangeListener : mChangeListeners) {\r\n        mChangeListener.stateChanged(ce);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.util.TemplateUtil.processTemplate",
	"Comment": "process a given freemarker template and put its result in a new folder.",
	"Method": "void processTemplate(File template,File outputFile,Configuration templateConfig,Map<String, String> data){\r\n    templateConfig.setDirectoryForTemplateLoading(template.getParentFile());\r\n    freemarker.template.Template temp = templateConfig.getTemplate(template.getName());\r\n    try (FileOutputStream stream = new FileOutputStream(outputFile);\r\n        Writer writer = new OutputStreamWriter(stream, StandardCharsets.UTF_8);\r\n        BufferedWriter bufferedWriter = new BufferedWriter(writer)) {\r\n        temp.process(data, bufferedWriter);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.addNetworkData",
	"Comment": "increment traffic metrics. a parent sampler cumulates its children metrics.",
	"Method": "void addNetworkData(SampleResult result){\r\n    if (!TransactionController.isFromTransactionController(result)) {\r\n        sentBytes += result.getSentBytes();\r\n        receivedBytes += result.getBytesAsLong();\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.cli.avalon.CLArgsParser.getArguments",
	"Comment": "retrieve a list of options that were parsed from command list.",
	"Method": "Vector<CLOption> getArguments(){\r\n    return this.options;\r\n}"
}, {
	"Path": "org.jboss.as.jpa.hibernate5.HibernateExtendedBeanManager.registerLifecycleListener",
	"Comment": "hibernate calls registerlifecyclelistener to register n callbacks to be notified\twhen the cdi beanmanager can safely be used.the cdi beanmanager can safely be used\twhen the cdi afterdeploymentvalidation event is reached.",
	"Method": "void registerLifecycleListener(LifecycleListener lifecycleListener){\r\n    lifecycleListeners.add(lifecycleListener);\r\n}"
}, {
	"Path": "com.jfoenix.controls.cells.editors.base.GenericEditableTreeTableCell.commitHelper",
	"Comment": "any action attempting to commit an edit should call this method rather than commit the edit directly itself. thismethod will perform any validation and conversion required on the value. for text values that normally means thismethod just commits the edit but for numeric values, for example, it may first parse the given input.theonly situation that needs to be treated specially is when the field is losing focus. if you user hits enter tocommit the cell with bad data we can happily cancel the commit and force them to enter a real value. if theyclick away from the cell though we want to give them their old value back.",
	"Method": "void commitHelper(boolean losingFocus){\r\n    if (editorNode == null) {\r\n        return;\r\n    }\r\n    try {\r\n        builder.validateValue();\r\n        commitEdit((T) builder.getValue());\r\n    } catch (Exception ex) {\r\n        if (losingFocus) {\r\n            cancelEdit();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.PublisherSampler.getSupportedEncodings",
	"Comment": "init available encoding using constants, then jvm standard ones",
	"Method": "String[] getSupportedEncodings(){\r\n    return Stream.concat(NO_ENCODING.stream(), Arrays.stream(StandardCharsets.class.getDeclaredFields()).filter(f -> Modifier.isStatic(f.getModifiers()) && Modifier.isPublic(f.getModifiers()) && f.getType() == Charset.class).map(f -> {\r\n        try {\r\n            return (Charset) f.get(null);\r\n        } catch (IllegalArgumentException | IllegalAccessException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }).map(Charset::displayName).sorted()).toArray(String[]::new);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.HalfIndexer.create",
	"Comment": "creates a half float indexer to access efficiently the data of a pointer.",
	"Method": "HalfIndexer create(short[] array,HalfIndexer create,ShortBuffer buffer,HalfIndexer create,ShortPointer pointer,HalfIndexer create,short[] array,long[] sizes,long[] strides,HalfIndexer create,ShortBuffer buffer,long[] sizes,long[] strides,HalfIndexer create,ShortPointer pointer,long[] sizes,long[] strides,HalfIndexer create,ShortPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new HalfRawIndexer(pointer, sizes, strides) : new HalfBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        short[] array = new short[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new HalfArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.HalfIndexer.create",
	"Comment": "creates a half float indexer to access efficiently the data of a pointer.",
	"Method": "HalfIndexer create(short[] array,HalfIndexer create,ShortBuffer buffer,HalfIndexer create,ShortPointer pointer,HalfIndexer create,short[] array,long[] sizes,long[] strides,HalfIndexer create,ShortBuffer buffer,long[] sizes,long[] strides,HalfIndexer create,ShortPointer pointer,long[] sizes,long[] strides,HalfIndexer create,ShortPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.hibernate.jpamodelgen.test.util.TestUtil.assertMetamodelClassGeneratedFor",
	"Comment": "asserts that a metamodel class for the specified class got generated.",
	"Method": "void assertMetamodelClassGeneratedFor(Class<?> clazz){\r\n    assertNotNull(getMetamodelClassFor(clazz));\r\n}"
}, {
	"Path": "cn.hutool.core.date.format.FastDatePrinter.applyRules",
	"Comment": "performs the formatting by applying the rules to the specified calendar.",
	"Method": "B applyRules(Calendar calendar,B buf){\r\n    try {\r\n        for (final Rule rule : this.rules) {\r\n            rule.appendTo(buf, calendar);\r\n        }\r\n    } catch (final IOException e) {\r\n        throw new DateException(e);\r\n    }\r\n    return buf;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.HttpRequestHdr.getMethod",
	"Comment": "returns the method string extracted from the first line of the client request.",
	"Method": "String getMethod(){\r\n    return method;\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.gui.TestBeanGUI.setValues",
	"Comment": "get values from element to fill propertymap and setup customizer",
	"Method": "void setValues(TestElement element){\r\n    for (PropertyIterator jprops = element.propertyIterator(); jprops.hasNext(); ) {\r\n        JMeterProperty jprop = jprops.next();\r\n        propertyMap.put(jprop.getName(), jprop.getObjectValue());\r\n    }\r\n    if (customizer != null) {\r\n        customizer.setObject(propertyMap);\r\n    } else {\r\n        if (initialized) {\r\n            remove(customizerIndexInPanel);\r\n        }\r\n        Customizer c = customizers.get(element);\r\n        if (c == null) {\r\n            c = createCustomizer();\r\n            c.setObject(propertyMap);\r\n            customizers.put(element, c);\r\n        }\r\n        add((Component) c, BorderLayout.CENTER);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.gui.AbstractVisualizer.stateChanged",
	"Comment": "invoked when the target of the listener has changed its state. thisimplementation assumes that the target is the filepanel, and will updatethe result collector for the new filename.",
	"Method": "void stateChanged(ChangeEvent e){\r\n    log.debug(\"getting new collector\");\r\n    collector = (ResultCollector) createTestElement();\r\n    collector.loadExistingFile();\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterThread.processSampler",
	"Comment": "process the current sampler, handling transaction samplers.",
	"Method": "SampleResult processSampler(Sampler current,Sampler parent,JMeterContext threadContext){\r\n    SampleResult transactionResult = null;\r\n    TransactionSampler transactionSampler = null;\r\n    SamplePackage transactionPack = null;\r\n    try {\r\n        if (current instanceof TransactionSampler) {\r\n            transactionSampler = (TransactionSampler) current;\r\n            transactionPack = compiler.configureTransactionSampler(transactionSampler);\r\n            if (transactionSampler.isTransactionDone()) {\r\n                transactionResult = doEndTransactionSampler(transactionSampler, parent, transactionPack, threadContext);\r\n                current = null;\r\n            } else {\r\n                Sampler prev = current;\r\n                current = transactionSampler.getSubSampler();\r\n                if (current instanceof TransactionSampler) {\r\n                    SampleResult res = processSampler(current, prev, threadContext);\r\n                    threadContext.setCurrentSampler(prev);\r\n                    current = null;\r\n                    if (res != null) {\r\n                        transactionSampler.addSubSamplerResult(res);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (current != null) {\r\n            executeSamplePackage(current, transactionSampler, transactionPack, threadContext);\r\n        }\r\n        if (scheduler) {\r\n            stopSchedulerIfNeeded();\r\n        }\r\n    } catch (JMeterStopTestException e) {\r\n        if (log.isInfoEnabled()) {\r\n            log.info(\"Stopping Test: {}\", e.toString());\r\n        }\r\n        shutdownTest();\r\n    } catch (JMeterStopTestNowException e) {\r\n        if (log.isInfoEnabled()) {\r\n            log.info(\"Stopping Test with interruption of current samplers: {}\", e.toString());\r\n        }\r\n        stopTestNow();\r\n    } catch (JMeterStopThreadException e) {\r\n        if (log.isInfoEnabled()) {\r\n            log.info(\"Stopping Thread: {}\", e.toString());\r\n        }\r\n        stopThread();\r\n    } catch (Exception e) {\r\n        if (current != null) {\r\n            log.error(\"Error while processing sampler: '{}'.\", current.getName(), e);\r\n        } else {\r\n            log.error(\"Error while processing sampler.\", e);\r\n        }\r\n    }\r\n    if (!running && transactionResult == null && transactionSampler != null && transactionPack != null) {\r\n        transactionResult = doEndTransactionSampler(transactionSampler, parent, transactionPack, threadContext);\r\n    }\r\n    return transactionResult;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport.getHavingSridSQL",
	"Comment": "returns the sql fragment when parsing a havingsridexpression.",
	"Method": "String getHavingSridSQL(String columnName){\r\n    return String.format(\" (MDSYS.ST_GEOMETRY(%s).ST_SRID() = ?)\", columnName);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG92Dialect.getIsEmptySQL",
	"Comment": "returns the sql fragment when parsing a isemptyexpression or\tisnotempty expression.",
	"Method": "String getIsEmptySQL(String columnName,boolean isEmpty){\r\n    return support.getIsEmptySQL(columnName, isEmpty);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.HeaderAsPropertyRenderer.getText",
	"Comment": "get the text for the value as the translation of the resource name.",
	"Method": "String getText(Object value,int row,int column,String getText,Object value,int row,int column,Object[][] columnsMsgParameters){\r\n    if (value == null) {\r\n        return \"\";\r\n    }\r\n    String label = value.toString();\r\n    return JMeterUtils.getResString(label, label);\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterContext.cleanAfterSample",
	"Comment": "clean cached data after sampleinternally called by jmeter, never call it directly",
	"Method": "void cleanAfterSample(){\r\n    if (previousResult != null) {\r\n        previousResult.cleanAfterSample();\r\n    }\r\n    samplerContext.clear();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.TCLogParser.setUseParsedFile",
	"Comment": "calls this method to set whether or not to use the path in the log. wemay want to provide the ability to filter the log file later on. bydefault, the parser uses the file in the log.",
	"Method": "void setUseParsedFile(boolean file){\r\n    this.useFILE = file;\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getResponse",
	"Comment": "return httpservletresponse. do not use httpservletresponse object in constructor of controller",
	"Method": "HttpServletResponse getResponse(){\r\n    return response;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.Utils.getConnection",
	"Comment": "obtain the queue connection from the context and factory name.",
	"Method": "Connection getConnection(Context ctx,String factoryName){\r\n    Object objfac = null;\r\n    try {\r\n        objfac = ctx.lookup(factoryName);\r\n    } catch (NoClassDefFoundError e) {\r\n        throw new NamingException(\"Lookup failed: \" + e.toString());\r\n    }\r\n    if (objfac instanceof javax.jms.ConnectionFactory) {\r\n        String username = getFromEnvironment(ctx, Context.SECURITY_PRINCIPAL);\r\n        if (username != null) {\r\n            String password = getFromEnvironment(ctx, Context.SECURITY_CREDENTIALS);\r\n            return ((javax.jms.ConnectionFactory) objfac).createConnection(username, password);\r\n        } else {\r\n            return ((javax.jms.ConnectionFactory) objfac).createConnection();\r\n        }\r\n    }\r\n    throw new NamingException(\"Expected javax.jms.ConnectionFactory, found \" + (objfac != null ? objfac.getClass().getName() : \"null\"));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.test.SleepTest.runTest",
	"Comment": "perform a single sample. in this case, this method will simply sleep forsome amount of time. perform a single sample for each iteration. thismethod returns a sampleresult object.sampleresult has many fields which can be used. at aminimum, the test should use sampleresult.samplestart andsampleresult.sampleendto set the time that the testrequired to execute. it is also a good idea to set the samplelabel andthe successful flag.",
	"Method": "SampleResult runTest(JavaSamplerContext context){\r\n    SampleResult results = new SampleResult();\r\n    results.setSampleLabel(name);\r\n    long sleep = sleepTime;\r\n    if (sleepTime > 0 && sleepMask > 0) {\r\n        long start = System.currentTimeMillis();\r\n        sleep = sleepTime + (start % sleepMask);\r\n    }\r\n    results.setSamplerData(\"Sleep Test: time = \" + sleep);\r\n    try {\r\n        results.sampleStart();\r\n        myThread = Thread.currentThread();\r\n        TimeUnit.MILLISECONDS.sleep(sleep);\r\n        myThread = null;\r\n        results.setSuccessful(true);\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"SleepTest: interrupted.\");\r\n        results.setSuccessful(false);\r\n        results.setResponseMessage(e.toString());\r\n        Thread.currentThread().interrupt();\r\n    } catch (Exception e) {\r\n        LOG.error(\"SleepTest: error during sample\", e);\r\n        results.setSuccessful(false);\r\n        results.setResponseMessage(e.toString());\r\n    } finally {\r\n        results.sampleEnd();\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(whoAmI() + \"\\trunTest()\" + \"\\tTime:\\t\" + results.getTime());\r\n        listParameters(context);\r\n    }\r\n    return results;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GuiPackage.getCurrentGui",
	"Comment": "convenience method for grabbing the gui for the current node.",
	"Method": "JMeterGUIComponent getCurrentGui(){\r\n    try {\r\n        updateCurrentNode();\r\n        TestElement curNode = treeListener.getCurrentNode().getTestElement();\r\n        JMeterGUIComponent comp = getGui(curNode);\r\n        if (comp == null) {\r\n            log.debug(\"No Component found for {}.\", treeListener.getCurrentNode().getName());\r\n            return null;\r\n        }\r\n        comp.clearGui();\r\n        log.debug(\"Updating gui to new node\");\r\n        comp.configure(curNode);\r\n        currentNodeUpdated = false;\r\n        return comp;\r\n    } catch (Exception e) {\r\n        log.error(\"Problem retrieving current gui\", e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.dashboard.ReportGenerator.generate",
	"Comment": "generate dashboard reports using the data from the specified csv file.",
	"Method": "void generate(){\r\n    if (resultCollector != null) {\r\n        log.info(\"Flushing result collector before report Generation\");\r\n        resultCollector.flushFile();\r\n    }\r\n    log.debug(\"Start report generation\");\r\n    File tmpDir = configuration.getTempDirectory();\r\n    boolean tmpDirCreated = createTempDir(tmpDir);\r\n    SampleContext sampleContext = new SampleContext();\r\n    sampleContext.setWorkingDirectory(tmpDir);\r\n    SampleSource source = new CsvFileSampleSource(testFile, CSV_DEFAULT_SEPARATOR);\r\n    source.setSampleContext(sampleContext);\r\n    NormalizerSampleConsumer normalizer = new NormalizerSampleConsumer();\r\n    normalizer.setName(NORMALIZER_CONSUMER_NAME);\r\n    FilterConsumer dateRangeConsumer = createFilterByDateRange();\r\n    dateRangeConsumer.addSampleConsumer(createBeginDateConsumer());\r\n    dateRangeConsumer.addSampleConsumer(createEndDateConsumer());\r\n    FilterConsumer nameFilter = createNameFilter();\r\n    FilterConsumer excludeControllerFilter = createExcludeControllerFilter();\r\n    nameFilter.addSampleConsumer(excludeControllerFilter);\r\n    dateRangeConsumer.addSampleConsumer(nameFilter);\r\n    normalizer.addSampleConsumer(dateRangeConsumer);\r\n    source.addSampleConsumer(normalizer);\r\n    Map<String, GraphConfiguration> graphConfigurations = configuration.getGraphConfigurations();\r\n    for (Map.Entry<String, GraphConfiguration> entryGraphCfg : graphConfigurations.entrySet()) {\r\n        addGraphConsumer(nameFilter, excludeControllerFilter, entryGraphCfg);\r\n    }\r\n    log.debug(\"Start samples processing\");\r\n    try {\r\n        source.run();\r\n    } catch (SampleException ex) {\r\n        throw new GenerationException(\"Error while processing samples:\" + ex.getMessage(), ex);\r\n    }\r\n    log.debug(\"End of samples processing\");\r\n    log.debug(\"Start data exporting\");\r\n    String key;\r\n    ExporterConfiguration value;\r\n    for (Map.Entry<String, ExporterConfiguration> entry : configuration.getExportConfigurations().entrySet()) {\r\n        key = entry.getKey();\r\n        value = entry.getValue();\r\n        if (log.isInfoEnabled()) {\r\n            log.info(\"Exporting data using exporter:'{}' of className:'{}'\", key, value.getClassName());\r\n        }\r\n        exportData(sampleContext, key, value);\r\n    }\r\n    log.debug(\"End of data exporting\");\r\n    removeTempDir(tmpDir, tmpDirCreated);\r\n    log.debug(\"End of report generation\");\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXTreeTableColumn.validateValue",
	"Comment": "validates the value of the tree item,this method also hides the column value for the grouped nodes",
	"Method": "boolean validateValue(CellDataFeatures<S, T> param){\r\n    Object rowObject = param.getValue().getValue();\r\n    return !((rowObject instanceof RecursiveTreeObject && rowObject.getClass() == RecursiveTreeObject.class) || (param.getTreeTableView() instanceof JFXTreeTableView && ((JFXTreeTableView<?>) param.getTreeTableView()).getGroupOrder().contains(this) && param.getValue().getParent() != null && param.getValue().getParent().getValue() != null && param.getValue().getParent().getValue().getClass() == RecursiveTreeObject.class));\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.graphite.GraphiteBackendListenerClient.addMetrics",
	"Comment": "add request metrics to metrics manager.note if total number of requests is 0, no response time metrics are sent.",
	"Method": "void addMetrics(long timestampInSeconds,String contextName,SamplerMetric metric){\r\n    if (metric.getTotal() > 0) {\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_COUNT, Integer.toString(metric.getSuccesses()));\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_COUNT, Integer.toString(metric.getFailures()));\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_COUNT, Integer.toString(metric.getTotal()));\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_HITS_COUNT, Integer.toString(metric.getHits()));\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_SENT_BYTES, Long.toString(metric.getSentBytes()));\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_RECEIVED_BYTES, Long.toString(metric.getReceivedBytes()));\r\n        if (metric.getSuccesses() > 0) {\r\n            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_MIN_RESPONSE_TIME, Double.toString(metric.getOkMinTime()));\r\n            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_MAX_RESPONSE_TIME, Double.toString(metric.getOkMaxTime()));\r\n            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_AVG_RESPONSE_TIME, Double.toString(metric.getOkMean()));\r\n            for (Map.Entry<String, Float> entry : okPercentiles.entrySet()) {\r\n                graphiteMetricsManager.addMetric(timestampInSeconds, contextName, entry.getKey(), Double.toString(metric.getOkPercentile(entry.getValue().floatValue())));\r\n            }\r\n        }\r\n        if (metric.getFailures() > 0) {\r\n            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_MIN_RESPONSE_TIME, Double.toString(metric.getKoMinTime()));\r\n            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_MAX_RESPONSE_TIME, Double.toString(metric.getKoMaxTime()));\r\n            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_AVG_RESPONSE_TIME, Double.toString(metric.getKoMean()));\r\n            for (Map.Entry<String, Float> entry : koPercentiles.entrySet()) {\r\n                graphiteMetricsManager.addMetric(timestampInSeconds, contextName, entry.getKey(), Double.toString(metric.getKoPercentile(entry.getValue().floatValue())));\r\n            }\r\n        }\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_MIN_RESPONSE_TIME, Double.toString(metric.getAllMinTime()));\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_MAX_RESPONSE_TIME, Double.toString(metric.getAllMaxTime()));\r\n        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_AVG_RESPONSE_TIME, Double.toString(metric.getAllMean()));\r\n        for (Map.Entry<String, Float> entry : allPercentiles.entrySet()) {\r\n            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, entry.getKey(), Double.toString(metric.getAllPercentile(entry.getValue().floatValue())));\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.Config.getConnection",
	"Comment": "get connection. support transaction if connection in threadlocal",
	"Method": "Connection getConnection(){\r\n    Connection conn = threadLocal.get();\r\n    if (conn != null)\r\n        return conn;\r\n    return showSql ? new SqlReporter(dataSource.getConnection()).getConnection() : dataSource.getConnection();\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXColorPalette.updateSelection",
	"Comment": "the skin can update selection if colorpicker value changes..",
	"Method": "void updateSelection(Color color){\r\n    setFocusedSquare(null);\r\n    for (ColorSquare c : colorPickerGrid.getSquares()) {\r\n        if (c.rectangle.getFill().equals(color)) {\r\n            setFocusedSquare(c);\r\n            return;\r\n        }\r\n    }\r\n    for (Node n : customColorGrid.getChildren()) {\r\n        ColorSquare c = (ColorSquare) n;\r\n        if (c.rectangle.getFill().equals(color)) {\r\n            setFocusedSquare(c);\r\n            return;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.core.Sample.getData",
	"Comment": "gets the data of the column matching the specified name and converts itto an alternative type.",
	"Method": "String getData(int index,String getData,String name,T getData,Class<T> clazz,int index,String fieldName,T getData,Class<T> clazz,String name){\r\n    return getData(clazz, metadata.ensureIndexOf(name), name);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.config.ReportGeneratorConfiguration.getExporterPropertyKey",
	"Comment": "gets the exporter property key from the specified identifier and propertyname.",
	"Method": "String getExporterPropertyKey(String exporterId,String propertyName){\r\n    return getSubConfigurationPropertyPrefix(REPORT_GENERATOR_EXPORTER_KEY_PREFIX, exporterId) + KEY_DELIMITER + propertyName;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GuiPackage.shouldSaveBeforeRun",
	"Comment": "should save before run decide by preference and if not exists by property",
	"Method": "boolean shouldSaveBeforeRun(){\r\n    String sbr = PREFS.get(SBR_PREFS_KEY, null);\r\n    if (sbr == null) {\r\n        return JMeterUtils.getPropDefault(SAVE_BEFORE_RUN_PROPERTY, SAVE_BEFORE_RUN_PROPERTY_DEFAULT_VALUE);\r\n    } else {\r\n        return shouldSaveBeforeRunByPreference();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.core.AbstractSampleWriter.close",
	"Comment": "this method is guaranteed to not throw any exception. if writer is alreadyclosed then does nothing.any buffered data is flushed by this method.",
	"Method": "void close(){\r\n    JOrphanUtils.closeQuietly(writer);\r\n    this.writer = null;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.test.JavaTest.whoAmI",
	"Comment": "generate a string identifier of this test for debugging purposes.",
	"Method": "String whoAmI(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(Thread.currentThread().toString());\r\n    sb.append(\"@\");\r\n    sb.append(Integer.toHexString(hashCode()));\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.RunTimeGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    if (element instanceof RunTime) {\r\n        setState(((RunTime) element).getRuntimeString());\r\n    } else {\r\n        setState(1);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.CacheManager.inCache",
	"Comment": "check the cache, if the entry has an expires header and the entry has notexpired, return true",
	"Method": "boolean inCache(URL url,boolean inCache,URL url,Header[] allHeaders,boolean inCache,URL url,org.apache.jmeter.protocol.http.control.Header[] allHeaders){\r\n    return entryStillValid(url, getEntry(url.toString(), asHeaders(allHeaders)));\r\n}"
}, {
	"Path": "org.apache.jmeter.config.Arguments.getArgumentsAsMap",
	"Comment": "get the arguments as a map. each argument name is used as the key, andits value as the value.",
	"Method": "Map<String, String> getArgumentsAsMap(){\r\n    PropertyIterator iter = getArguments().iterator();\r\n    Map<String, String> argMap = new LinkedHashMap();\r\n    while (iter.hasNext()) {\r\n        Argument arg = (Argument) iter.next().getObjectValue();\r\n        if (!argMap.containsKey(arg.getName())) {\r\n            argMap.put(arg.getName(), arg.getValue());\r\n        }\r\n    }\r\n    return argMap;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler.setLDAPArguments",
	"Comment": "sets the arguments attribute of the ldapconfig object this will collectvalues from the table for user defined test case",
	"Method": "void setLDAPArguments(LDAPArguments value){\r\n    setProperty(new TestElementProperty(LDAPARGUMENTS, value));\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.trustAllCerts",
	"Comment": "configure https connection to trust all certificatesthis method does nothing if the current request is not a https request",
	"Method": "HttpRequest trustAllCerts(){\r\n    final HttpURLConnection connection = getConnection();\r\n    if (connection instanceof HttpsURLConnection)\r\n        ((HttpsURLConnection) connection).setSSLSocketFactory(getTrustedFactory());\r\n    return this;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisSupport.getHavingSridSQL",
	"Comment": "returns the sql fragment when parsing a havingsridexpression.",
	"Method": "String getHavingSridSQL(String columnName){\r\n    return \"( ST_srid(\" + columnName + \") = ?)\";\r\n}"
}, {
	"Path": "org.apache.commons.cli.avalon.CLArgsParser.getErrorString",
	"Comment": "retrieve an error message that occurred during parsing if one existed.",
	"Method": "String getErrorString(){\r\n    return this.errorMessage;\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.Model.use",
	"Comment": "switching data source, dialect and all config by configname",
	"Method": "M use(String configName){\r\n    this.configName = configName;\r\n    return (M) this;\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXMasonryPane.clearLayout",
	"Comment": "this method will clear the layout matrix forcing the bin packing algorithmto recompute the children boxes on the next layout pass",
	"Method": "void clearLayout(){\r\n    matrix = null;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.RandomControlGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement ic){\r\n    configureTestElement(ic);\r\n    if (style.isSelected()) {\r\n        ((RandomController) ic).setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);\r\n    } else {\r\n        ((RandomController) ic).setStyle(InterleaveControl.USE_SUB_CONTROLLERS);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.WhileControllerGui.createConditionPanel",
	"Comment": "create a gui panel containing the condition. todo make use of the field",
	"Method": "JPanel createConditionPanel(){\r\n    JPanel conditionPanel = new JPanel(new BorderLayout(5, 0));\r\n    JLabel conditionLabel = new JLabel(JMeterUtils.getResString(CONDITION_LABEL));\r\n    conditionPanel.add(conditionLabel, BorderLayout.WEST);\r\n    theCondition = JSyntaxTextArea.getInstance(5, 50);\r\n    theCondition.setName(CONDITION);\r\n    conditionLabel.setLabelFor(theCondition);\r\n    conditionPanel.add(JTextScrollPane.getInstance(theCondition), BorderLayout.CENTER);\r\n    conditionPanel.add(Box.createHorizontalGlue(), BorderLayout.NORTH);\r\n    return conditionPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.HTMLAssertion.getResult",
	"Comment": "returns the result of the assertion. if so an assertionresult containinga failuremessage will be returned. otherwise the returned assertionresultwill reflect the success of the sample.",
	"Method": "AssertionResult getResult(SampleResult inResponse){\r\n    log.debug(\"HTMLAssertions.getResult() called\");\r\n    if (inResponse.getResponseData().length == 0) {\r\n        return new AssertionResult(getName()).setResultForNull();\r\n    }\r\n    return runTidy(inResponse);\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.Db.execute",
	"Comment": "execute callback. it is useful when all the api can not satisfy your requirement.",
	"Method": "Object execute(ICallback callback,Object execute,Config config,ICallback callback){\r\n    return MAIN.execute(config, callback);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.DurationAssertionGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    configureTestElement(el);\r\n    if (el instanceof DurationAssertion) {\r\n        DurationAssertion assertion = (DurationAssertion) el;\r\n        assertion.setProperty(DurationAssertion.DURATION_KEY, duration.getText());\r\n        saveScopeSettings(assertion);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.MenuFactory.foundClass",
	"Comment": "is any node an instance of one of the classes, but not an exceptions?",
	"Method": "boolean foundClass(JMeterTreeNode[] nodes,Class<?>[] classes,boolean foundClass,JMeterTreeNode[] nodes,List<Class<?>> classes,List<Class<?>> exceptions){\r\n    return Arrays.stream(nodes).map(DefaultMutableTreeNode::getUserObject).filter(userObj -> exceptions.stream().noneMatch(c -> c.isInstance(userObj))).anyMatch(userObj -> classes.stream().anyMatch(c -> c.isInstance(userObj)));\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.SamplingStatCalculator.getRate",
	"Comment": "returns the throughput associated to this sampler in requests per second.may be slightly skewed because it takes the timestamps of the first andlast samples as the total time passed, and the test may actually havestarted before that start time and ended after that end time.",
	"Method": "double getRate(){\r\n    if (calculator.getCount() == 0) {\r\n        return 0.0;\r\n    }\r\n    return getCurrentSample().getThroughput();\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.XPathAssertion.isNegated",
	"Comment": "negate the xpath test, that is return true if something is not found.",
	"Method": "boolean isNegated(){\r\n    return getPropertyAsBoolean(NEGATE_KEY, false);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.ActionRouter.removeActionListener",
	"Comment": "remove listener from actionslisteners associated to action",
	"Method": "void removeActionListener(Class<?> action,ActionListener listener,Map<String, Set<ActionListener>> actionListeners){\r\n    if (action != null) {\r\n        Set<ActionListener> set = actionListeners.get(action.getName());\r\n        if (set != null) {\r\n            set.remove(listener);\r\n            actionListeners.put(action.getName(), set);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterVariables.putObject",
	"Comment": "creates or updates a variable with a value that does not have to be a string.",
	"Method": "void putObject(String key,Object value){\r\n    variables.put(key, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.getBasicAttribute",
	"Comment": "this will create the basic attribute for the given name value pair.",
	"Method": "BasicAttribute getBasicAttribute(String name,String value){\r\n    BasicAttribute attr = new BasicAttribute(name, value);\r\n    return attr;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.getUserDefinedTest",
	"Comment": "gets the userdefinedtest attribute of the ldapsampler object.",
	"Method": "boolean getUserDefinedTest(){\r\n    return getPropertyAsBoolean(USER_DEFINED);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG94Dialect.getIsEmptySQL",
	"Comment": "returns the sql fragment when parsing a isemptyexpression or\tisnotempty expression.",
	"Method": "String getIsEmptySQL(String columnName,boolean isEmpty){\r\n    return support.getIsEmptySQL(columnName, isEmpty);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.tree.JMeterTreeListener.setActionHandler",
	"Comment": "sets the actionhandler attribute of the jmetertreelistener object.",
	"Method": "void setActionHandler(ActionListener ah){\r\n    actionHandler = ah;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG92Dialect.getHavingSridSQL",
	"Comment": "returns the sql fragment when parsing a havingsridexpression.",
	"Method": "String getHavingSridSQL(String columnName){\r\n    return support.getHavingSridSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RenderAsXPath2.actionPerformed",
	"Comment": "display the response as text or as rendered html. change the text on thebutton appropriate to the current display.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String command = e.getActionCommand();\r\n    if ((sampleResult != null) && (XPATH_TESTER_COMMAND.equals(command))) {\r\n        String response = xmlDataField.getText();\r\n        XPath2Extractor extractor = new XPath2Extractor();\r\n        extractor.setFragment(getFragment.isSelected());\r\n        executeAndShowXPathTester(response, extractor);\r\n    } else if ((sampleResult != null) && (XPATH_NAMESPACES_COMMAND.equals(command))) {\r\n        String response = xmlDataField.getText();\r\n        this.xpathResultField.setText(getDocumentNamespaces(response));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.control.gui.LdapExtTestSamplerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement sampler){\r\n    sampler.clear();\r\n    sampler.addTestElement(ldapDefaultPanel.createTestElement());\r\n    super.configureTestElement(sampler);\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Objects.addObjectToArray",
	"Comment": "append the given object to the given array, returning a new arrayconsisting of the input array contents plus the given object.",
	"Method": "A[] addObjectToArray(A[] array,O obj){\r\n    Class<?> compType = Object.class;\r\n    if (array != null) {\r\n        compType = array.getClass().getComponentType();\r\n    } else if (obj != null) {\r\n        compType = obj.getClass();\r\n    }\r\n    int newArrLength = (array != null ? array.length + 1 : 1);\r\n    @SuppressWarnings(\"unchecked\")\r\n    A[] newArr = (A[]) Array.newInstance(compType, newArrLength);\r\n    if (array != null) {\r\n        System.arraycopy(array, 0, newArr, 0, array.length);\r\n    }\r\n    newArr[newArr.length - 1] = obj;\r\n    return newArr;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ftp.control.gui.FtpTestSamplerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement sampler){\r\n    sampler.clear();\r\n    ftpDefaultPanel.modifyTestElement(sampler);\r\n    loginPanel.modifyTestElement(sampler);\r\n    super.configureTestElement(sampler);\r\n}"
}, {
	"Path": "com.jfoenix.svg.SVGGlyphLoader.getIcoMoonGlyph",
	"Comment": "will retrieve icons from the glyphs map for a certain glyphname",
	"Method": "SVGGlyph getIcoMoonGlyph(String glyphName){\r\n    SVGGlyphBuilder builder = glyphsMap.get(glyphName);\r\n    if (builder == null)\r\n        throw new Exception(\"Glyph '\" + glyphName + \"' not found!\");\r\n    SVGGlyph glyph = builder.build();\r\n    glyph.getTransforms().add(new Scale(1, -1));\r\n    Translate height = new Translate();\r\n    height.yProperty().bind(Bindings.createDoubleBinding(() -> -glyph.getHeight(), glyph.heightProperty()));\r\n    glyph.getTransforms().add(height);\r\n    return glyph;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getKoMinTime",
	"Comment": "get the minimal elapsed time for requests within sliding window",
	"Method": "double getKoMinTime(){\r\n    return koResponsesStats.getMin();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.ProxyControl.filterContentType",
	"Comment": "filter the response based on the content type.if no include nor exclude filter is specified, the result will be included",
	"Method": "boolean filterContentType(SampleResult result){\r\n    String includeExp = getContentTypeInclude();\r\n    String excludeExp = getContentTypeExclude();\r\n    if ((includeExp == null || includeExp.length() == 0) && (excludeExp == null || excludeExp.length() == 0)) {\r\n        return true;\r\n    }\r\n    String sampleContentType = result.getContentType();\r\n    if (sampleContentType == null || sampleContentType.length() == 0) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"No Content-type found for : {}\", result.getUrlAsString());\r\n        }\r\n        return true;\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Content-type to filter : {}\", sampleContentType);\r\n    }\r\n    boolean matched = testPattern(includeExp, sampleContentType, true);\r\n    if (!matched) {\r\n        return false;\r\n    }\r\n    matched = testPattern(excludeExp, sampleContentType, false);\r\n    if (!matched) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getParaToBoolean",
	"Comment": "get para from url and conver to boolean with default value if it is null.",
	"Method": "Boolean getParaToBoolean(String name,Boolean getParaToBoolean,String name,Boolean defaultValue,Boolean getParaToBoolean,Boolean getParaToBoolean,int index,Boolean getParaToBoolean,int index,Boolean defaultValue){\r\n    return toBoolean(getPara(index), defaultValue);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.core.AbstractSampleWriter.setWriter",
	"Comment": "set the new writer on which samples will be written by this sample writer.if any writer exists on the sample writer, it is flushed and closed beforebeing replaced by the new one.",
	"Method": "void setWriter(Writer newWriter){\r\n    Validate.notNull(newWriter, \"writer must not be null.\");\r\n    if (this.writer != null) {\r\n        JOrphanUtils.closeQuietly(this.writer);\r\n    }\r\n    this.writer = new PrintWriter(new BufferedWriter(newWriter, BUF_SIZE), false);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.gui.HttpMirrorControlGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    configureTestElement(el);\r\n    if (el instanceof HttpMirrorControl) {\r\n        mirrorController = (HttpMirrorControl) el;\r\n        mirrorController.setPort(portField.getText());\r\n        mirrorController.setMaxPoolSize(maxPoolSizeField.getText());\r\n        mirrorController.setMaxQueueSize(maxQueueSizeField.getText());\r\n    }\r\n}"
}, {
	"Path": "org.jboss.as.jpa.hibernate5.HibernatePersistenceProviderAdaptor.doesScopedPersistenceUnitNameIdentifyCacheRegionName",
	"Comment": "determine if management console can display the second level cache entries",
	"Method": "boolean doesScopedPersistenceUnitNameIdentifyCacheRegionName(PersistenceUnitMetadata pu){\r\n    String cacheRegionPrefix = pu.getProperties().getProperty(AvailableSettings.CACHE_REGION_PREFIX);\r\n    return cacheRegionPrefix == null || cacheRegionPrefix.equals(pu.getScopedPersistenceUnitName());\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextField.focusLost",
	"Comment": "callback method when the focus to the text field component is lost.",
	"Method": "void focusLost(FocusEvent pFocusEvent){\r\n    if (!oldValue.equals(mTextField.getText())) {\r\n        notifyChangeListeners();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.AssertionGui.createStringPanel",
	"Comment": "create a panel allowing the user to supply a list of string patterns totest against.",
	"Method": "JPanel createStringPanel(){\r\n    tableModel = new PowerTableModel(new String[] { COL_RESOURCE_NAME }, new Class[] { String.class });\r\n    stringTable = new JTable(tableModel);\r\n    stringTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());\r\n    stringTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\r\n    JMeterUtils.applyHiDPI(stringTable);\r\n    TextAreaCellRenderer renderer = new TextAreaCellRenderer();\r\n    stringTable.setRowHeight(renderer.getPreferredHeight());\r\n    stringTable.setDefaultRenderer(String.class, renderer);\r\n    stringTable.setDefaultEditor(String.class, new TextAreaTableCellEditor());\r\n    stringTable.setPreferredScrollableViewportSize(new Dimension(100, 70));\r\n    JPanel panel = new JPanel();\r\n    panel.setLayout(new BorderLayout());\r\n    panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString(\"assertion_patterns_to_test\")));\r\n    panel.add(new JScrollPane(stringTable), BorderLayout.CENTER);\r\n    panel.add(createButtonPanel(), BorderLayout.SOUTH);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.previous",
	"Comment": "sets the current position of the data set to the previous row.",
	"Method": "boolean previous(){\r\n    return --currentPos >= 0;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.BaseJMSSampler.isDestinationStatic",
	"Comment": "return whether the sampler should use a static destination.",
	"Method": "boolean isDestinationStatic(){\r\n    return getPropertyAsBoolean(DESTINATION_STATIC, DESTINATION_STATIC_DEFAULT);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.AbstractBackendListenerClient.getLogger",
	"Comment": "get a logger instance which can be used by subclasses to log information.as this class is designed to be subclassed this is useful.",
	"Method": "org.apache.log.Logger getLogger(){\r\n    return oldLogger;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.BeanShellAssertionGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement te){\r\n    te.clear();\r\n    super.configureTestElement(te);\r\n    te.setProperty(BeanShellAssertion.SCRIPT, scriptField.getText());\r\n    te.setProperty(BeanShellAssertion.FILENAME, filename.getFilename());\r\n    te.setProperty(BeanShellAssertion.PARAMETERS, parameters.getText());\r\n    te.setProperty(new BooleanProperty(BeanShellAssertion.RESET_INTERPRETER, resetInterpreter.isSelected()));\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JLabeledRadioI18N.setText",
	"Comment": "the implementation will iterate through the radio buttons and find thematch. it then sets it to selected and sets all other radio buttons asnot selected.",
	"Method": "void setText(String resourcename){\r\n    Enumeration<AbstractButton> en = this.bGroup.getElements();\r\n    while (en.hasMoreElements()) {\r\n        ButtonModel model = en.nextElement().getModel();\r\n        if (model.getActionCommand().equals(resourcename)) {\r\n            this.bGroup.setSelected(model, true);\r\n        } else {\r\n            this.bGroup.setSelected(model, false);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.BinarySearchTree.addValue",
	"Comment": "add value to the tree and return the node that was added. tree cancontain multiple equal values.",
	"Method": "Node<T> addValue(T value){\r\n    Node<T> newNode = this.creator.createNewNode(null, value);\r\n    if (root == null) {\r\n        root = newNode;\r\n        size++;\r\n        return newNode;\r\n    }\r\n    Node<T> node = root;\r\n    while (node != null) {\r\n        if (newNode.id.compareTo(node.id) <= 0) {\r\n            if (node.lesser == null) {\r\n                node.lesser = newNode;\r\n                newNode.parent = node;\r\n                size++;\r\n                return newNode;\r\n            }\r\n            node = node.lesser;\r\n        } else {\r\n            if (node.greater == null) {\r\n                node.greater = newNode;\r\n                newNode.parent = node;\r\n                size++;\r\n                return newNode;\r\n            }\r\n            node = node.greater;\r\n        }\r\n    }\r\n    return newNode;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.AccessLogSampler.instantiateParser",
	"Comment": "method will instantiate the log parser based on the class in the textfield. this was done to make it easier for people to plugin their own logparser and use different log parser.",
	"Method": "void instantiateParser(){\r\n    if (parser == null) {\r\n        try {\r\n            if (StringUtils.isNotBlank(this.getParserClassName())) {\r\n                if (StringUtils.isNotBlank(this.getLogFile())) {\r\n                    parser = (LogParser) Class.forName(getParserClassName()).getDeclaredConstructor().newInstance();\r\n                    parser.setSourceFile(this.getLogFile());\r\n                    parser.setFilter(filter);\r\n                } else {\r\n                    log.error(\"No log file specified\");\r\n                }\r\n            }\r\n        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {\r\n            log.error(\"\", e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.GuiUtils.cancelEditing",
	"Comment": "cancel any editing that is currently being done on the table.",
	"Method": "void cancelEditing(JTable table){\r\n    if (table != null && table.isEditing()) {\r\n        TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());\r\n        cellEditor.cancelCellEditing();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.ResourcesDownloader.shrink",
	"Comment": "this method will try to shrink the thread pool size as much as possibleit should be called at the end of a test",
	"Method": "void shrink(){\r\n    if (concurrentExecutor.getPoolSize() > MIN_POOL_SIZE) {\r\n        concurrentExecutor.purge();\r\n        List<Runnable> drainList = new ArrayList();\r\n        concurrentExecutor.getQueue().drainTo(drainList);\r\n        if (!drainList.isEmpty()) {\r\n            LOG.warn(\"the pool executor workqueue is not empty size={}\", drainList.size());\r\n            for (Runnable runnable : drainList) {\r\n                if (runnable instanceof Future<?>) {\r\n                    Future<?> f = (Future<?>) runnable;\r\n                    f.cancel(true);\r\n                } else {\r\n                    LOG.warn(\"Content of workqueue is not an instance of Future\");\r\n                }\r\n            }\r\n        }\r\n        concurrentExecutor.setMaximumPoolSize(MIN_POOL_SIZE);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.XPathExtractor.setFragment",
	"Comment": "should we return fragment as text, rather than text of fragment?",
	"Method": "void setFragment(boolean selected){\r\n    setProperty(FRAGMENT, selected, false);\r\n}"
}, {
	"Path": "com.jfinal.config.Constants.setTokenCache",
	"Comment": "set itokencache implementation otherwise jfinal will use the httpsesion to hold the token.",
	"Method": "void setTokenCache(ITokenCache tokenCache){\r\n    this.tokenCache = tokenCache;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.GraphVisualizer.createInfoColumn",
	"Comment": "creates a panel containing two pairs of labels and fields for displayingthe current graph values. this method exists to help with laying out thefields in columns. if one or more components are null then thesecomponents will be represented by blank space.",
	"Method": "Box createInfoColumn(JLabel label1,JTextField field1,JLabel label2,JTextField field2){\r\n    Box row = Box.createHorizontalBox();\r\n    Box col = Box.createVerticalBox();\r\n    col.add(label1 != null ? label1 : Box.createVerticalGlue());\r\n    col.add(label2 != null ? label2 : Box.createVerticalGlue());\r\n    row.add(col);\r\n    row.add(Box.createHorizontalStrut(5));\r\n    col = Box.createVerticalBox();\r\n    col.add(field1 != null ? field1 : Box.createVerticalGlue());\r\n    col.add(field2 != null ? field2 : Box.createVerticalGlue());\r\n    row.add(col);\r\n    row.add(Box.createHorizontalStrut(5));\r\n    return row;\r\n}"
}, {
	"Path": "org.apache.jmeter.save.SaveGraphicsService.saveJComponent",
	"Comment": "method will save the jcomponent as an image. the formats are png, andtiff.",
	"Method": "void saveJComponent(String filename,int type,JComponent component){\r\n    Dimension size = component.getSize();\r\n    BufferedImage image = new BufferedImage(size.width, size.height, BufferedImage.TYPE_BYTE_INDEXED);\r\n    Graphics2D grp = image.createGraphics();\r\n    component.paint(grp);\r\n    if (type == PNG) {\r\n        filename += PNG_EXTENSION;\r\n        this.savePNGWithBatik(filename, image);\r\n    } else if (type == TIFF) {\r\n        filename = filename + TIFF_EXTENSION;\r\n        this.saveTIFFWithBatik(filename, image);\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getParaToLong",
	"Comment": "get para from url and conver to long with default value if it is null.",
	"Method": "Long getParaToLong(String name,Long getParaToLong,String name,Long defaultValue,Long getParaToLong,int index,Long getParaToLong,int index,Long defaultValue,Long getParaToLong){\r\n    return toLong(getPara(), null);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.ActionRouter.addPreActionListener",
	"Comment": "allows an actionlistener to receive notification of a command beingexecuted prior to the actual execution of the command.",
	"Method": "void addPreActionListener(Class<?> action,ActionListener listener){\r\n    addActionListener(action, listener, preActionListeners);\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.getResponseDataAsString",
	"Comment": "gets the responsedata of the sampleresult object as a string",
	"Method": "String getResponseDataAsString(){\r\n    try {\r\n        if (responseDataAsString == null) {\r\n            responseDataAsString = new String(responseData, getDataEncodingWithDefault());\r\n        }\r\n        return responseDataAsString;\r\n    } catch (UnsupportedEncodingException e) {\r\n        log.warn(\"Using platform default as \" + getDataEncodingWithDefault() + \" caused \" + e);\r\n        return new String(responseData, Charset.defaultCharset());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextField.setToolTipText",
	"Comment": "registers the text to display in a tool tip.the text displays when the cursor lingers over the component.",
	"Method": "void setToolTipText(String text){\r\n    mLabel.setToolTipText(text);\r\n    mTextField.setToolTipText(text);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPJavaImpl.setConnectionCookie",
	"Comment": "extracts all the required cookies for that particular url request andsets them in the httpurlconnection passed in.",
	"Method": "String setConnectionCookie(HttpURLConnection conn,URL u,CookieManager cookieManager){\r\n    String cookieHeader = null;\r\n    if (cookieManager != null) {\r\n        cookieHeader = cookieManager.getCookieHeaderForURL(u);\r\n        if (cookieHeader != null) {\r\n            conn.setRequestProperty(HTTPConstants.HEADER_COOKIE, cookieHeader);\r\n        }\r\n    }\r\n    return cookieHeader;\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.setScrollCount",
	"Comment": "sets the number of items in the scrolling portion of the menu.",
	"Method": "void setScrollCount(int scrollCount){\r\n    if (scrollCount <= 0) {\r\n        throw new IllegalArgumentException(\"scrollCount must be greater than 0\");\r\n    }\r\n    this.scrollCount = scrollCount;\r\n    MenuSelectionManager.defaultManager().clearSelectedPath();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel.getMenuCategories",
	"Comment": "this is the list of menu categories this gui component will be availableunder. the ldapargumentspanel is not intended to be used as a standalonecomponent, so this implementation returns null.",
	"Method": "Collection<String> getMenuCategories(){\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.AssertionResult.isFailure",
	"Comment": "check if the assertion failed. if it failed, the failure message may givemore details about the failure.",
	"Method": "boolean isFailure(){\r\n    return failure;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.control.gui.JMSPublisherGui.configure",
	"Comment": "the implementation loads the url and the soap action for the request.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    PublisherSampler sampler = (PublisherSampler) el;\r\n    useProperties.setSelected(sampler.getUseJNDIPropertiesAsBoolean());\r\n    jndiICF.setText(sampler.getJNDIInitialContextFactory());\r\n    urlField.setText(sampler.getProviderUrl());\r\n    jndiConnFac.setText(sampler.getConnectionFactory());\r\n    jmsDestination.setText(sampler.getDestination());\r\n    jmsUser.setText(sampler.getUsername());\r\n    jmsPwd.setText(sampler.getPassword());\r\n    textMessage.setInitialText(sampler.getTextMessage());\r\n    textMessage.setCaretPosition(0);\r\n    messageFile.setFilename(sampler.getInputFile());\r\n    randomFile.setFilename(sampler.getRandomPath());\r\n    configChoice.setText(sampler.getConfigChoice());\r\n    msgChoice.setText(sampler.getMessageChoice());\r\n    fileEncoding.setText(sampler.getFileEncoding());\r\n    iterations.setText(sampler.getIterations());\r\n    expiration.setText(sampler.getExpiration());\r\n    jmsErrorReconnectOnCodes.setText(sampler.getReconnectionErrorCodes());\r\n    priority.setText(sampler.getPriority());\r\n    useAuth.setSelected(sampler.isUseAuth());\r\n    jmsUser.setEnabled(useAuth.isSelected());\r\n    jmsPwd.setEnabled(useAuth.isSelected());\r\n    destSetup.setText(sampler.isDestinationStatic() ? DEST_SETUP_STATIC : DEST_SETUP_DYNAMIC);\r\n    useNonPersistentDelivery.setSelected(sampler.getUseNonPersistentDelivery());\r\n    jmsPropertiesPanel.configure(sampler.getJMSProperties());\r\n    updateChoice(msgChoice.getText());\r\n    updateConfig(sampler.getConfigChoice());\r\n}"
}, {
	"Path": "org.apache.jmeter.NewDriver.getJMeterDir",
	"Comment": "get the directory where jmeter is installed. this is the absolute pathname.",
	"Method": "String getJMeterDir(){\r\n    return JMETER_INSTALLATION_DIRECTORY;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.json.jsonpath.gui.JSONPostProcessorGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement c){\r\n    super.configureTestElement(c);\r\n    if (c instanceof JSONPostProcessor) {\r\n        JSONPostProcessor config = (JSONPostProcessor) c;\r\n        saveScopeSettings(config);\r\n        config.setRefNames(refNamesField.getText());\r\n        config.setJsonPathExpressions(jsonPathExpressionsField.getText());\r\n        config.setDefaultValues(defaultValuesField.getText());\r\n        config.setMatchNumbers(matchNumbersField.getText());\r\n        config.setComputeConcatenation(computeConcatenationField.isSelected());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.ArgumentsPanel.stopTableEditing",
	"Comment": "stop any editing that is currently being done on the table. this willsave any changes that have already been made.needed for subclasses",
	"Method": "void stopTableEditing(){\r\n    GuiUtils.stopTableEditing(table);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.getTopFixedCount",
	"Comment": "returns the number of items fixed at the top of the menu or popup menu.",
	"Method": "int getTopFixedCount(){\r\n    return topFixedCount;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect.supports",
	"Comment": "does this dialect supports the specified spatialfunction.",
	"Method": "boolean supports(SpatialFunction function){\r\n    return support.supports(function);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.graph.AbstractGraphConsumer.aggregateValue",
	"Comment": "aggregate a value to the aggregator defined by the specified parameters.",
	"Method": "void aggregateValue(AggregatorFactory factory,SeriesData data,Double key,double value){\r\n    Map<Double, Aggregator> aggInfo = data.getAggregatorInfo();\r\n    Aggregator aggregator = aggInfo.get(key);\r\n    if (aggregator == null) {\r\n        aggregator = factory.createValueAggregator();\r\n        aggInfo.put(key, aggregator);\r\n    }\r\n    aggregator.addValue(value);\r\n    data.incrementCount();\r\n    Aggregator keysAgg = data.getKeysAggregator();\r\n    if (keysAgg != null) {\r\n        keysAgg.addValue(key.doubleValue());\r\n    }\r\n    Aggregator valuesAgg = data.getValuesAggregator();\r\n    if (valuesAgg != null) {\r\n        valuesAgg.addValue(value);\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG92Dialect.supports",
	"Comment": "does this dialect supports the specified spatialfunction.",
	"Method": "boolean supports(SpatialFunction function){\r\n    return support.supports(function);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.control.gui.JMSPropertiesPanel.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    GuiUtils.stopTableEditing(jmsPropertiesTable);\r\n    JMSProperties jmsProperties = (JMSProperties) el;\r\n    jmsProperties.clear();\r\n    jmsProperties.addTestElement((TestElement) tableModel.jmsProperties.clone());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.ProxyControl.removeValuesFromSampler",
	"Comment": "remove from the sampler all values which match the one provided by thefirst configuration in the given collection which provides a value forthat property.",
	"Method": "void removeValuesFromSampler(HTTPSamplerBase sampler,Collection<ConfigTestElement> configurations){\r\n    for (PropertyIterator props = sampler.propertyIterator(); props.hasNext(); ) {\r\n        JMeterProperty prop = props.next();\r\n        String name = prop.getName();\r\n        String value = prop.getStringValue();\r\n        if (name.equals(TestElement.ENABLED) || name.equals(TestElement.GUI_CLASS) || name.equals(TestElement.NAME) || name.equals(TestElement.TEST_CLASS)) {\r\n            continue;\r\n        }\r\n        for (ConfigTestElement config : configurations) {\r\n            String configValue = config.getPropertyAsString(name);\r\n            if (configValue != null && configValue.length() > 0) {\r\n                if (configValue.equals(value)) {\r\n                    sampler.setProperty(name, \"\");\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.ByteIndexer.create",
	"Comment": "creates a byte indexer to access efficiently the data of a pointer.",
	"Method": "ByteIndexer create(byte[] array,ByteIndexer create,ByteBuffer buffer,ByteIndexer create,BytePointer pointer,ByteIndexer create,byte[] array,long[] sizes,long[] strides,ByteIndexer create,ByteBuffer buffer,long[] sizes,long[] strides,ByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,ByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new ByteRawIndexer(pointer, sizes, strides) : new ByteBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        byte[] array = new byte[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new ByteArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.ByteIndexer.create",
	"Comment": "creates a byte indexer to access efficiently the data of a pointer.",
	"Method": "ByteIndexer create(byte[] array,ByteIndexer create,ByteBuffer buffer,ByteIndexer create,BytePointer pointer,ByteIndexer create,byte[] array,long[] sizes,long[] strides,ByteIndexer create,ByteBuffer buffer,long[] sizes,long[] strides,ByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,ByteIndexer create,BytePointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDecorator.customMaximizeProperty",
	"Comment": "this property is used to replace javafx maximizationwith a custom one that prevents hiding windows taskbar whenthe jfxdecorator is maximized.",
	"Method": "BooleanProperty customMaximizeProperty(){\r\n    return this.customMaximize;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.GraphVisualizer.createChooseCheckBox",
	"Comment": "creates a check box configured to be used to in the choose panel allowingthe user to select whether or not a particular kind of graph data will bedisplayed.",
	"Method": "JCheckBox createChooseCheckBox(String labelResourceName,Color color){\r\n    JCheckBox checkBox = new JCheckBox(JMeterUtils.getResString(labelResourceName));\r\n    checkBox.setSelected(true);\r\n    checkBox.addItemListener(this);\r\n    checkBox.setForeground(color);\r\n    return checkBox;\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDrawer.addInitDrawerCallback",
	"Comment": "the callbacks are used to add conditions to allowstarting the drawer when holding on the side part of the content",
	"Method": "void addInitDrawerCallback(Callback<Void, Boolean> callBack){\r\n    callBacks.add(callBack);\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.gui.TableEditor.setDescriptor",
	"Comment": "for the table editor, the classname attribute must simply be the name of the class of object it will holdwhere each row holds one object.",
	"Method": "void setDescriptor(PropertyDescriptor descriptor){\r\n    this.descriptor = descriptor;\r\n    String value = (String) descriptor.getValue(CLASSNAME);\r\n    if (value == null) {\r\n        throw new RuntimeException(\"The Table Editor requires the CLASSNAME attribute be set - the name of the object to represent a row\");\r\n    }\r\n    try {\r\n        clazz = Class.forName(value);\r\n        initializeModel();\r\n    } catch (ClassNotFoundException e) {\r\n        throw new RuntimeException(\"Could not find the CLASSNAME class \" + value, e);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GuiPackage.getTestElementCheckSum",
	"Comment": "compute checksum of testelement to detect changesthe method calculates properties checksum to detect testelementmodificationstodo would be better to override hashcode for testelement, but i decided not to touch it",
	"Method": "int getTestElementCheckSum(TestElement el){\r\n    int ret = el.getClass().hashCode();\r\n    PropertyIterator it = el.propertyIterator();\r\n    while (it.hasNext()) {\r\n        JMeterProperty obj = it.next();\r\n        if (obj instanceof TestElementProperty) {\r\n            ret ^= getTestElementCheckSum(((TestElementProperty) obj).getElement());\r\n        } else {\r\n            ret ^= obj.getName().hashCode();\r\n            String stringValue = obj.getStringValue();\r\n            if (stringValue != null) {\r\n                ret ^= stringValue.hashCode();\r\n            } else {\r\n                if (log.isDebugEnabled()) {\r\n                    log.debug(\"obj.getStringValue() returned null for test element:\" + el.getName() + \" at property:\" + obj.getName());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.DoubleIndexer.create",
	"Comment": "creates a double indexer to access efficiently the data of a pointer.",
	"Method": "DoubleIndexer create(double[] array,DoubleIndexer create,DoubleBuffer buffer,DoubleIndexer create,DoublePointer pointer,DoubleIndexer create,double[] array,long[] sizes,long[] strides,DoubleIndexer create,DoubleBuffer buffer,long[] sizes,long[] strides,DoubleIndexer create,DoublePointer pointer,long[] sizes,long[] strides,DoubleIndexer create,DoublePointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new DoubleRawIndexer(pointer, sizes, strides) : new DoubleBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        double[] array = new double[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new DoubleArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.DoubleIndexer.create",
	"Comment": "creates a double indexer to access efficiently the data of a pointer.",
	"Method": "DoubleIndexer create(double[] array,DoubleIndexer create,DoubleBuffer buffer,DoubleIndexer create,DoublePointer pointer,DoubleIndexer create,double[] array,long[] sizes,long[] strides,DoubleIndexer create,DoubleBuffer buffer,long[] sizes,long[] strides,DoubleIndexer create,DoublePointer pointer,long[] sizes,long[] strides,DoubleIndexer create,DoublePointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.XPathAssertionGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    super.configureTestElement(el);\r\n    if (el instanceof XPathAssertion) {\r\n        XPathAssertion assertion = (XPathAssertion) el;\r\n        saveScopeSettings(assertion);\r\n        assertion.setNegated(xpath.isNegated());\r\n        assertion.setXPathString(xpath.getXPath());\r\n        xml.modifyTestElement(assertion);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement element){\r\n    element.clear();\r\n    configureTestElement(element);\r\n    element.setProperty(LDAPExtSampler.SERVERNAME, servername.getText());\r\n    element.setProperty(LDAPExtSampler.PORT, port.getText());\r\n    element.setProperty(LDAPExtSampler.ROOTDN, rootdn.getText());\r\n    element.setProperty(LDAPExtSampler.SCOPE, String.valueOf(scope.getSelectedIndex()));\r\n    element.setProperty(LDAPExtSampler.COUNTLIM, countlim.getText());\r\n    element.setProperty(LDAPExtSampler.TIMELIM, timelim.getText());\r\n    element.setProperty(LDAPExtSampler.ATTRIBS, attribs.getText());\r\n    element.setProperty(LDAPExtSampler.RETOBJ, Boolean.toString(retobj.isSelected()));\r\n    element.setProperty(LDAPExtSampler.DEREF, Boolean.toString(deref.isSelected()));\r\n    element.setProperty(LDAPExtSampler.CONNTO, connto.getText());\r\n    element.setProperty(LDAPExtSampler.PARSEFLAG, Boolean.toString(parseflag.isSelected()));\r\n    element.setProperty(LDAPExtSampler.SECURE, Boolean.toString(secure.isSelected()));\r\n    element.setProperty(LDAPExtSampler.USERDN, userdn.getText());\r\n    element.setProperty(LDAPExtSampler.USERPW, userpw.getText());\r\n    element.setProperty(LDAPExtSampler.COMPAREDN, comparedn.getText());\r\n    element.setProperty(LDAPExtSampler.COMPAREFILT, comparefilt.getText());\r\n    element.setProperty(LDAPExtSampler.MODDDN, modddn.getText());\r\n    element.setProperty(LDAPExtSampler.NEWDN, newdn.getText());\r\n    if (addTest.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.ADD));\r\n        element.setProperty(new StringProperty(LDAPExtSampler.BASE_ENTRY_DN, add.getText()));\r\n        element.setProperty(new TestElementProperty(LDAPExtSampler.ARGUMENTS, tableAddPanel.createTestElement()));\r\n    }\r\n    if (modifyTest.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.MODIFY));\r\n        element.setProperty(new StringProperty(LDAPExtSampler.BASE_ENTRY_DN, modify.getText()));\r\n        element.setProperty(new TestElementProperty(LDAPExtSampler.LDAPARGUMENTS, tableModifyPanel.createTestElement()));\r\n    }\r\n    if (deleteTest.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.DELETE));\r\n        element.setProperty(new StringProperty(LDAPExtSampler.DELETE, delete.getText()));\r\n    }\r\n    if (searchTest.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.SEARCH));\r\n        element.setProperty(new StringProperty(LDAPExtSampler.SEARCHBASE, searchbase.getText()));\r\n        element.setProperty(new StringProperty(LDAPExtSampler.SEARCHFILTER, searchfilter.getText()));\r\n    }\r\n    if (bind.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.BIND));\r\n    }\r\n    if (sbind.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.SBIND));\r\n    }\r\n    if (compare.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.COMPARE));\r\n    }\r\n    if (rename.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.RENAME));\r\n    }\r\n    if (unbind.isSelected()) {\r\n        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.UNBIND));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.TestHTTPMirrorThread.startHttpMirror",
	"Comment": "utility method to handle starting the httpmirrorserver for testing. alsoused by testhttpsamplersagainsthttpmirrorserver",
	"Method": "HttpMirrorServer startHttpMirror(int port){\r\n    HttpMirrorServer server;\r\n    server = new HttpMirrorServer(port);\r\n    server.start();\r\n    Exception e;\r\n    for (int i = 0; i < 10; i++) {\r\n        try {\r\n            Thread.sleep(100);\r\n        } catch (InterruptedException ignored) {\r\n        }\r\n        e = server.getException();\r\n        if (e != null) {\r\n            throw new Exception(\"Could not start mirror server on port: \" + port + \". \" + e);\r\n        }\r\n        if (server.isAlive()) {\r\n            break;\r\n        }\r\n    }\r\n    if (!server.isAlive()) {\r\n        throw new Exception(\"Could not start mirror server on port: \" + port);\r\n    }\r\n    return server;\r\n}"
}, {
	"Path": "org.apache.jmeter.timers.gui.ConstantTimerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement timer){\r\n    super.configureTestElement(timer);\r\n    ((ConstantTimer) timer).setDelay(delayField.getText());\r\n}"
}, {
	"Path": "org.apache.jmeter.util.Calculator.getAvgPageBytes",
	"Comment": "calculates the average page size, which means divide the bytes by numberof samples.",
	"Method": "double getAvgPageBytes(){\r\n    if (count > 0 && bytes > 0) {\r\n        return (double) bytes / count;\r\n    }\r\n    return 0.0;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.HTTPArgumentsPanel.transformNameIntoVariable",
	"Comment": "replace the argument value of the selection with a variable the variable name is derived from the parameter name",
	"Method": "void transformNameIntoVariable(){\r\n    int[] rowsSelected = getTable().getSelectedRows();\r\n    for (int selectedRow : rowsSelected) {\r\n        String name = (String) tableModel.getValueAt(selectedRow, 0);\r\n        if (StringUtils.isNotBlank(name)) {\r\n            name = name.trim();\r\n            name = name.replaceAll(\"\\\\$\", \"_\");\r\n            name = name.replaceAll(\"\\\\{\", \"_\");\r\n            name = name.replaceAll(\"\\\\}\", \"_\");\r\n            tableModel.setValueAt(\"${\" + name + \"}\", selectedRow, 1);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.Graph.getScrollableUnitIncrement",
	"Comment": "gets the scrollableunitincrement attribute of the graph object.",
	"Method": "int getScrollableUnitIncrement(Rectangle visibleRect,int orientation,int direction){\r\n    return 5;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.Proxy.writeToClient",
	"Comment": "write output to the output stream, then flush and close the stream.",
	"Method": "void writeToClient(SampleResult res,OutputStream out){\r\n    try {\r\n        String responseHeaders = messageResponseHeaders(res);\r\n        out.write(responseHeaders.getBytes(SampleResult.DEFAULT_HTTP_ENCODING));\r\n        out.write(CRLF_BYTES);\r\n        out.write(res.getResponseData());\r\n        out.flush();\r\n        log.debug(\"{} Done writing to client\", port);\r\n    } catch (IOException e) {\r\n        log.error(\"\", e);\r\n        throw e;\r\n    } finally {\r\n        try {\r\n            out.close();\r\n        } catch (Exception ex) {\r\n            log.warn(\"{} Error while closing socket\", port, ex);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setFilterOption",
	"Comment": "set the filter to apply to each depth frame. each one of the filter isoptimized per the application requirements",
	"Method": "void setFilterOption(int value){\r\n    setOption(RealSense.RS_OPTION_F200_FILTER_OPTION, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.config.ReportGeneratorConfiguration.getSubConfigurationPropertyPrefix",
	"Comment": "gets the sub configuration property prefix from the specified keyprefix and sub configuration identifier.",
	"Method": "String getSubConfigurationPropertyPrefix(String keyPrefix,String subConfId){\r\n    return keyPrefix + KEY_DELIMITER + subConfId;\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.gui.ThreadGroupGui.createDelayPanel",
	"Comment": "create a panel containing the duration field and corresponding label.",
	"Method": "JPanel createDelayPanel(){\r\n    JPanel panel = new JPanel(new BorderLayout(5, 0));\r\n    JLabel label = new JLabel(JMeterUtils.getResString(\"delay\"));\r\n    panel.add(label, BorderLayout.WEST);\r\n    delay = new JTextField();\r\n    panel.add(delay, BorderLayout.CENTER);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.RunTimeGui.createLoopCountPanel",
	"Comment": "create a gui panel containing the components related to the number ofseconds which should be executed.",
	"Method": "JPanel createLoopCountPanel(){\r\n    JPanel loopPanel = new JPanel(new BorderLayout(5, 0));\r\n    JLabel secondsLabel = new JLabel(JMeterUtils.getResString(\"runtime_seconds\"));\r\n    loopPanel.add(secondsLabel, BorderLayout.WEST);\r\n    JPanel loopSubPanel = new JPanel(new BorderLayout(5, 0));\r\n    seconds = new JTextField(\"1\", 5);\r\n    secondsLabel.setLabelFor(seconds);\r\n    loopSubPanel.add(seconds, BorderLayout.CENTER);\r\n    loopPanel.add(loopSubPanel, BorderLayout.CENTER);\r\n    loopPanel.add(Box.createHorizontalStrut(secondsLabel.getPreferredSize().width + seconds.getPreferredSize().width), BorderLayout.NORTH);\r\n    return loopPanel;\r\n}"
}, {
	"Path": "org.apache.log.LogEvent.readResolve",
	"Comment": "helper method that replaces deserialized priority with correct singleton.",
	"Method": "Object readResolve(){\r\n    if (null == m_category) {\r\n        m_category = \"\";\r\n    }\r\n    if (null == m_message) {\r\n        m_message = \"\";\r\n    }\r\n    String priorityName = \"\";\r\n    if (null != m_priority) {\r\n        priorityName = m_priority.getName();\r\n    }\r\n    m_priority = Priority.getPriorityForName(priorityName);\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.control.gui.JMSSubscriberGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement s){\r\n    SubscriberSampler sampler = (SubscriberSampler) s;\r\n    super.configureTestElement(sampler);\r\n    sampler.setUseJNDIProperties(String.valueOf(useProperties.isSelected()));\r\n    sampler.setJNDIIntialContextFactory(jndiICF.getText());\r\n    sampler.setProviderUrl(urlField.getText());\r\n    sampler.setConnectionFactory(jndiConnFac.getText());\r\n    sampler.setDestination(jmsDestination.getText());\r\n    sampler.setDurableSubscriptionId(jmsDurableSubscriptionId.getText());\r\n    sampler.setClientID(jmsClientId.getText());\r\n    sampler.setJmsSelector(jmsSelector.getText());\r\n    sampler.setUsername(jmsUser.getText());\r\n    sampler.setPassword(jmsPwd.getText());\r\n    sampler.setUseAuth(useAuth.isSelected());\r\n    sampler.setIterations(samplesToAggregate.getText());\r\n    sampler.setReadResponse(String.valueOf(storeResponse.isSelected()));\r\n    sampler.setClientChoice(clientChoice.getText());\r\n    sampler.setStopBetweenSamples(stopBetweenSamples.isSelected());\r\n    sampler.setTimeout(timeout.getText());\r\n    sampler.setReconnectionErrorCodes(jmsErrorReconnectOnCodes.getText());\r\n    sampler.setPauseBetweenErrors(jmsErrorPauseBetween.getText());\r\n    sampler.setDestinationStatic(destSetup.getText().equals(DEST_SETUP_STATIC));\r\n    sampler.setSeparator(separator.getText());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.config.JavaConfig.removeArguments",
	"Comment": "removes all of the arguments associated with this javaconfig object.",
	"Method": "void removeArguments(){\r\n    setProperty(new TestElementProperty(JavaSampler.ARGUMENTS, new Arguments()));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.FormCharSetFinder.addFormActionsAndCharSet",
	"Comment": "add form action urls and their corresponding encodings for all forms on the page",
	"Method": "void addFormActionsAndCharSet(String html,Map<String, String> formEncodings,String pageEncoding){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Parsing html of: \" + html);\r\n    }\r\n    Document document = Jsoup.parse(html);\r\n    Elements forms = document.select(\"form\");\r\n    for (Element element : forms) {\r\n        String action = element.attr(\"action\");\r\n        if (!(StringUtils.isEmpty(action))) {\r\n            String formCharSet = pageEncoding;\r\n            String acceptCharSet = element.attr(\"accept-charset\");\r\n            if (acceptCharSet != null) {\r\n                String[] charSets = JOrphanUtils.split(acceptCharSet, \",\");\r\n                if (charSets.length > 0) {\r\n                    formCharSet = charSets[0].trim();\r\n                    if (formCharSet.length() == 0) {\r\n                        formCharSet = null;\r\n                    }\r\n                }\r\n            }\r\n            if (formCharSet != null) {\r\n                synchronized (formEncodings) {\r\n                    formEncodings.put(action, formCharSet);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.TestFragmentControllerGui.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    setLayout(new BorderLayout(0, 5));\r\n    setBorder(makeBorder());\r\n    add(makeTitlePanel(), BorderLayout.NORTH);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.deleteTest",
	"Comment": "this will do the delete test for the user defined testcase as well asinbuilt test case.",
	"Method": "void deleteTest(LdapClient ldap,SampleResult res){\r\n    if (!getPropertyAsBoolean(USER_DEFINED)) {\r\n        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));\r\n        setProperty(new StringProperty(DELETE, getPropertyAsString(ADD)));\r\n    }\r\n    res.sampleStart();\r\n    ldap.deleteTest(getPropertyAsString(DELETE));\r\n    res.sampleEnd();\r\n}"
}, {
	"Path": "com.jfinal.i18n.I18nInterceptor.getLocaleParaName",
	"Comment": "return the localeparaname, which is used as para name to get locale from the request para and the cookie.",
	"Method": "String getLocaleParaName(){\r\n    return localeParaName;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JLabeledRadioI18N.initButtonGroup",
	"Comment": "method is responsible for creating the jradiobuttons and adding them tothe buttongroup.the resource name is used as the action command for the button model,and the resource value is used to set the button label.",
	"Method": "void initButtonGroup(String[] resouces,String selected){\r\n    for (String resource : resouces) {\r\n        JRadioButton btn = new JRadioButton(JMeterUtils.getResString(resource));\r\n        btn.setActionCommand(resource);\r\n        btn.addActionListener(this);\r\n        this.bGroup.add(btn);\r\n        this.add(btn);\r\n        if (selected != null && selected.equals(resource)) {\r\n            btn.setSelected(true);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.BTree.combined",
	"Comment": "combined children keys with parent when size is less than minkeysize.",
	"Method": "boolean combined(Node<T> node){\r\n    Node<T> parent = node.parent;\r\n    int index = parent.indexOf(node);\r\n    int indexOfLeftNeighbor = index - 1;\r\n    int indexOfRightNeighbor = index + 1;\r\n    Node<T> rightNeighbor = null;\r\n    int rightNeighborSize = -minChildrenSize;\r\n    if (indexOfRightNeighbor < parent.numberOfChildren()) {\r\n        rightNeighbor = parent.getChild(indexOfRightNeighbor);\r\n        rightNeighborSize = rightNeighbor.numberOfKeys();\r\n    }\r\n    if (rightNeighbor != null && rightNeighborSize > minKeySize) {\r\n        T removeValue = rightNeighbor.getKey(0);\r\n        int prev = getIndexOfPreviousValue(parent, removeValue);\r\n        T parentValue = parent.removeKey(prev);\r\n        T neighborValue = rightNeighbor.removeKey(0);\r\n        node.addKey(parentValue);\r\n        parent.addKey(neighborValue);\r\n        if (rightNeighbor.numberOfChildren() > 0) {\r\n            node.addChild(rightNeighbor.removeChild(0));\r\n        }\r\n    } else {\r\n        Node<T> leftNeighbor = null;\r\n        int leftNeighborSize = -minChildrenSize;\r\n        if (indexOfLeftNeighbor >= 0) {\r\n            leftNeighbor = parent.getChild(indexOfLeftNeighbor);\r\n            leftNeighborSize = leftNeighbor.numberOfKeys();\r\n        }\r\n        if (leftNeighbor != null && leftNeighborSize > minKeySize) {\r\n            T removeValue = leftNeighbor.getKey(leftNeighbor.numberOfKeys() - 1);\r\n            int prev = getIndexOfNextValue(parent, removeValue);\r\n            T parentValue = parent.removeKey(prev);\r\n            T neighborValue = leftNeighbor.removeKey(leftNeighbor.numberOfKeys() - 1);\r\n            node.addKey(parentValue);\r\n            parent.addKey(neighborValue);\r\n            if (leftNeighbor.numberOfChildren() > 0) {\r\n                node.addChild(leftNeighbor.removeChild(leftNeighbor.numberOfChildren() - 1));\r\n            }\r\n        } else if (rightNeighbor != null && parent.numberOfKeys() > 0) {\r\n            T removeValue = rightNeighbor.getKey(0);\r\n            int prev = getIndexOfPreviousValue(parent, removeValue);\r\n            T parentValue = parent.removeKey(prev);\r\n            parent.removeChild(rightNeighbor);\r\n            node.addKey(parentValue);\r\n            for (int i = 0; i < rightNeighbor.keysSize; i++) {\r\n                T v = rightNeighbor.getKey(i);\r\n                node.addKey(v);\r\n            }\r\n            for (int i = 0; i < rightNeighbor.childrenSize; i++) {\r\n                Node<T> c = rightNeighbor.getChild(i);\r\n                node.addChild(c);\r\n            }\r\n            if (parent.parent != null && parent.numberOfKeys() < minKeySize) {\r\n                this.combined(parent);\r\n            } else if (parent.numberOfKeys() == 0) {\r\n                node.parent = null;\r\n                root = node;\r\n            }\r\n        } else if (leftNeighbor != null && parent.numberOfKeys() > 0) {\r\n            T removeValue = leftNeighbor.getKey(leftNeighbor.numberOfKeys() - 1);\r\n            int prev = getIndexOfNextValue(parent, removeValue);\r\n            T parentValue = parent.removeKey(prev);\r\n            parent.removeChild(leftNeighbor);\r\n            node.addKey(parentValue);\r\n            for (int i = 0; i < leftNeighbor.keysSize; i++) {\r\n                T v = leftNeighbor.getKey(i);\r\n                node.addKey(v);\r\n            }\r\n            for (int i = 0; i < leftNeighbor.childrenSize; i++) {\r\n                Node<T> c = leftNeighbor.getChild(i);\r\n                node.addChild(c);\r\n            }\r\n            if (parent.parent != null && parent.numberOfKeys() < minKeySize) {\r\n                this.combined(parent);\r\n            } else if (parent.numberOfKeys() == 0) {\r\n                node.parent = null;\r\n                root = node;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.apache.jorphan.util.JOrphanUtils.rightAlign",
	"Comment": "right aligns some text in a stringbuilder n.b. modifies the input buffer",
	"Method": "StringBuilder rightAlign(StringBuilder in,int len){\r\n    int pfx = len - in.length();\r\n    if (pfx <= 0) {\r\n        return in;\r\n    }\r\n    if (pfx > SPACES_LEN) {\r\n        pfx = SPACES_LEN;\r\n    }\r\n    in.insert(0, SPACES_CHARS, 0, pfx);\r\n    return in;\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.strings.Rotation.getLexicographicallyMinimalRotation",
	"Comment": "finds lexicographically minimal string rotation.lexicographically minimal string rotation is a rotation of a string possessing thelowest lexicographical order of all such rotations.finding the lexicographically minimal rotation is useful as a way of normalizing strings.",
	"Method": "String getLexicographicallyMinimalRotation(String text){\r\n    return bestRotation(text, false);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.BackendListenerContext.getParameter",
	"Comment": "get the value of a specified parameter as a string, or return thespecified default value if the value was not specified.",
	"Method": "String getParameter(String name,String getParameter,String name,String defaultValue){\r\n    if (params == null || !params.containsKey(name)) {\r\n        return defaultValue;\r\n    }\r\n    return params.get(name);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.parser.HtmlParsingUtils.getDOM",
	"Comment": "returns a node representing a whole xml given an xml document.",
	"Method": "Node getDOM(String text){\r\n    log.debug(\"Start : getDOM1\");\r\n    Node node = getParser().parseDOM(new ByteArrayInputStream(text.getBytes(StandardCharsets.UTF_8)), null);\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"node : \" + node);\r\n    }\r\n    log.debug(\"End : getDOM1\");\r\n    return node;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.HTTPFileArgsPanel.configure",
	"Comment": "a newly created component can be initialized with the contents of ahttpsamplerbase object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement testElement){\r\n    if (testElement instanceof HTTPSamplerBase) {\r\n        HTTPSamplerBase base = (HTTPSamplerBase) testElement;\r\n        tableModel.clearData();\r\n        for (HTTPFileArg file : base.getHTTPFiles()) {\r\n            tableModel.addRow(file);\r\n        }\r\n        checkDeleteAndBrowseStatus();\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.render.RenderFactory.getRender",
	"Comment": "return render by default viewtype which config in jfinalconfig",
	"Method": "Render getRender(String view,Render getRender,String view,Render getRender,String view,Render getRender,String view,Render getRender,String view){\r\n    return mainRenderFactory.getRender(view);\r\n}"
}, {
	"Path": "org.apache.jmeter.util.SSLManager.getKeyStore",
	"Comment": "opens and initializes the keystore. if the password for the keystore isnot set, this method will prompt you to enter it. unfortunately, there isno passwordentryfield available from joptionpane.",
	"Method": "JmeterKeyStore getKeyStore(){\r\n    if (null == this.keyStore) {\r\n        String fileName = System.getProperty(JAVAX_NET_SSL_KEY_STORE, \"\");\r\n        // use the system property to determine the type\r\n        String fileType = // use the system property to determine the type\r\n        System.getProperty(JAVAX_NET_SSL_KEY_STORE_TYPE, fileName.toLowerCase(Locale.ENGLISH).endsWith(\".p12\") ? PKCS12 : \"JKS\");\r\n        log.info(\"JmeterKeyStore Location: {} type {}\", fileName, fileType);\r\n        try {\r\n            this.keyStore = JmeterKeyStore.getInstance(fileType, keystoreAliasStartIndex, keystoreAliasEndIndex, clientCertAliasVarName);\r\n            log.info(\"KeyStore created OK\");\r\n        } catch (Exception e) {\r\n            this.keyStore = null;\r\n            throw new IllegalArgumentException(\"Could not create keystore: \" + e.getMessage(), e);\r\n        }\r\n        try {\r\n            File initStore = new File(fileName);\r\n            if (fileName.length() > 0 && initStore.exists()) {\r\n                try (InputStream fis = new FileInputStream(initStore);\r\n                    InputStream fileInputStream = new BufferedInputStream(fis)) {\r\n                    this.keyStore.load(fileInputStream, getPassword());\r\n                    if (log.isInfoEnabled()) {\r\n                        log.info(\"Total of {} aliases loaded OK from keystore\", keyStore.getAliasCount());\r\n                    }\r\n                }\r\n            } else {\r\n                log.warn(\"Keystore file not found, loading empty keystore\");\r\n                this.defaultpw = \"\";\r\n                this.keyStore.load(null, \"\");\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Problem loading keystore: {}\", e.getMessage(), e);\r\n        }\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"JmeterKeyStore type: {}\", this.keyStore.getClass());\r\n        }\r\n    }\r\n    return this.keyStore;\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getAttr",
	"Comment": "returns the value of the named attribute as an object, or null if no attribute of the given name exists.",
	"Method": "T getAttr(String name,T getAttr,String name,T defaultValue){\r\n    T result = (T) request.getAttribute(name);\r\n    return result != null ? result : defaultValue;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.RegexExtractor.getRefName",
	"Comment": "get the prefix name of the variable to be used to store the regex matches",
	"Method": "String getRefName(){\r\n    return getPropertyAsString(REFNAME);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPJavaImpl.setConnectionAuthorization",
	"Comment": "extracts all the required authorization for that particular url requestand sets it in the httpurlconnection passed in.",
	"Method": "Map<String, String> setConnectionAuthorization(HttpURLConnection conn,URL u,AuthManager authManager){\r\n    if (authManager != null) {\r\n        Authorization auth = authManager.getAuthForURL(u);\r\n        if (auth != null) {\r\n            String headerValue = auth.toBasicHeader();\r\n            conn.setRequestProperty(HTTPConstants.HEADER_AUTHORIZATION, headerValue);\r\n            Map<String, String> map = new HashMap(1);\r\n            map.put(HTTPConstants.HEADER_AUTHORIZATION, headerValue);\r\n            return map;\r\n        }\r\n    }\r\n    return Collections.emptyMap();\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GuiPackage.removeNode",
	"Comment": "remove a test element from the tree. this removes the reference to anyassociated gui component.",
	"Method": "void removeNode(TestElement node){\r\n    nodesToGui.remove(node);\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.RegexExtractor.setRefName",
	"Comment": "set the prefix name of the variable to be used to store the regex matches",
	"Method": "void setRefName(String refName){\r\n    setProperty(REFNAME, refName);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.AuthPanel.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    GuiUtils.stopTableEditing(authTable);\r\n    AuthManager authManager = (AuthManager) el;\r\n    authManager.clear();\r\n    authManager.addTestElement((TestElement) tableModel.manager.clone());\r\n    authManager.setClearEachIteration(clearEachIteration.isSelected());\r\n    configureTestElement(el);\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Collections.arrayToList",
	"Comment": "convert the supplied array into a list. a primitive array getsconverted into a list of the appropriate wrapper type.a null source value will be converted to anempty list.",
	"Method": "List arrayToList(Object source){\r\n    return Arrays.asList(Objects.toObjectArray(source));\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG93Dialect.getHavingSridSQL",
	"Comment": "returns the sql fragment when parsing a havingsridexpression.",
	"Method": "String getHavingSridSQL(String columnName){\r\n    return support.getHavingSridSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler.isRetobj",
	"Comment": "gets the return objects attribute of the ldapsampler object",
	"Method": "boolean isRetobj(){\r\n    return getPropertyAsBoolean(RETOBJ);\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.sortData",
	"Comment": "private method that implements the quicksort algorithm to sort the rowsof the data object.",
	"Method": "void sortData(String column,int start,int end){\r\n    int x = start;\r\n    int y = end - 1;\r\n    String basis = data.get(column).get((x + y) / 2).toString();\r\n    if (x == y) {\r\n        return;\r\n    }\r\n    while (x <= y) {\r\n        while (x < end && data.get(column).get(x).toString().compareTo(basis) < 0) {\r\n            x++;\r\n        }\r\n        while (y >= (start - 1) && data.get(column).get(y).toString().compareTo(basis) > 0) {\r\n            y--;\r\n        }\r\n        if (x <= y) {\r\n            swapRows(x, y);\r\n            x++;\r\n            y--;\r\n        }\r\n    }\r\n    if (x == y) {\r\n        x++;\r\n    }\r\n    y = end - x;\r\n    if (x > 0) {\r\n        sortData(column, start, x);\r\n    }\r\n    if (y > 0) {\r\n        sortData(column, x, end);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GuiPackage.createTestElement",
	"Comment": "create a testelement for a gui or testbean class.this is a utility method to help actions do with one single stringparameter.",
	"Method": "TestElement createTestElement(Class<?> guiClass,Class<?> testClass,TestElement createTestElement,String objClass){\r\n    JMeterGUIComponent comp;\r\n    Class<?> c;\r\n    try {\r\n        c = Class.forName(objClass);\r\n        if (TestBean.class.isAssignableFrom(c)) {\r\n            comp = getGuiFromCache(TestBeanGUI.class, c);\r\n        } else {\r\n            comp = getGuiFromCache(c, null);\r\n        }\r\n        comp.clearGui();\r\n        TestElement node = comp.createTestElement();\r\n        nodesToGui.put(node, comp);\r\n        return node;\r\n    } catch (NoClassDefFoundError e) {\r\n        log.error(\"Problem retrieving gui for \" + objClass, e);\r\n        String msg = \"Cannot find class: \" + e.getMessage();\r\n        JOptionPane.showMessageDialog(null, msg, \"Missing jar? See log file.\", JOptionPane.ERROR_MESSAGE);\r\n        throw new RuntimeException(e.toString(), e);\r\n    } catch (ReflectiveOperationException e) {\r\n        log.error(\"Problem retrieving gui for \" + objClass, e);\r\n        throw new RuntimeException(e.toString(), e);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.tree.JMeterTreeListener.getJTree",
	"Comment": "gets the jtree attribute of the jmetertreelistener object.",
	"Method": "JTree getJTree(){\r\n    return tree;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.AboutCommand.about",
	"Comment": "called by about button. raises about dialog. currently the about box hasthe product image and the copyright notice. the dialog box is centeredover the mainframe.",
	"Method": "void about(){\r\n    JFrame mainFrame = GuiPackage.getInstance().getMainFrame();\r\n    JDialog dialog = initDialog(mainFrame);\r\n    Point p = mainFrame.getLocationOnScreen();\r\n    Dimension d1 = mainFrame.getSize();\r\n    Dimension d2 = dialog.getSize();\r\n    dialog.setLocation(p.x + (d1.width - d2.width) / 2, p.y + (d1.height - d2.height) / 2);\r\n    dialog.setVisible(true);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RunningSample.getNumSamples",
	"Comment": "returns the number of samples that have been recorded by this instance ofthe runningsample class.",
	"Method": "long getNumSamples(){\r\n    return counter;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.modifier.gui.AnchorModifierGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement modifier){\r\n    configureTestElement(modifier);\r\n}"
}, {
	"Path": "org.hibernate.jpamodelgen.test.util.TestUtil.deleteProcessorGeneratedFiles",
	"Comment": "deletes recursively all files found in the output directory for the annotation processor.",
	"Method": "void deleteProcessorGeneratedFiles(){\r\n    for (File file : OUT_BASE_DIR.listFiles()) {\r\n        deleteFilesRecursive(file);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JLabeledRadioI18N.actionPerformed",
	"Comment": "when a radio button is clicked, an actionevent is triggered.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    this.notifyChangeListeners();\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.ComponentUtil.centerComponentInComponent",
	"Comment": "use this static method if you want to center a component over anothercomponent.",
	"Method": "void centerComponentInComponent(Component parent,Component toBeCentered){\r\n    toBeCentered.setLocation(parent.getX() + (parent.getWidth() - toBeCentered.getWidth()) / 2, parent.getY() + (parent.getHeight() - toBeCentered.getHeight()) / 2);\r\n    toBeCentered.validate();\r\n    toBeCentered.repaint();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.Proxy.writeErrorToClient",
	"Comment": "write an error message to the client. the message should be the full httpresponse.",
	"Method": "void writeErrorToClient(String message){\r\n    try {\r\n        OutputStream sockOut = clientSocket.getOutputStream();\r\n        DataOutputStream out = new DataOutputStream(sockOut);\r\n        out.writeBytes(message);\r\n        out.flush();\r\n    } catch (Exception e) {\r\n        log.warn(\"{} Exception while writing error\", port, e);\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.isParaBlank",
	"Comment": "return true if the urlpara value is blank otherwise return false",
	"Method": "boolean isParaBlank(String paraName,boolean isParaBlank,int index){\r\n    return StrKit.isBlank(getPara(index));\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.removeAssertionResults",
	"Comment": "allow custom samplesenders to drop unwanted assertionresults",
	"Method": "void removeAssertionResults(){\r\n    this.assertionResults = null;\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.DbPro.execute",
	"Comment": "execute callback. it is useful when all the api can not satisfy your requirement.",
	"Method": "Object execute(ICallback callback,Object execute,Config config,ICallback callback){\r\n    Connection conn = null;\r\n    try {\r\n        conn = config.getConnection();\r\n        return callback.call(conn);\r\n    } catch (Exception e) {\r\n        throw new ActiveRecordException(e);\r\n    } finally {\r\n        config.close(conn);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.exec.SystemCommand.run",
	"Comment": "helper method to allow input and output to be changed for chaining",
	"Method": "int run(List<String> arguments,int run,List<String> arguments,InputStream in,OutputStream out,OutputStream err,int run,List<String> arguments1,List<String> arguments2){\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    int exitCode = run(arguments1, stdin, out, stderr);\r\n    if (exitCode == 0) {\r\n        exitCode = run(arguments2, new ByteArrayInputStream(out.toByteArray()), stdout, stderr);\r\n    }\r\n    return exitCode;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.MailerVisualizer.initGui",
	"Comment": "initializes the gui. lays out components and adds them to the container.",
	"Method": "void initGui(){\r\n    this.setLayout(new BorderLayout());\r\n    JPanel mainPanel = new VerticalPanel();\r\n    Border margin = new EmptyBorder(5, 10, 5, 10);\r\n    this.setBorder(margin);\r\n    mainPanel.add(makeTitlePanel());\r\n    JPanel attributePane = new VerticalPanel();\r\n    attributePane.setBorder(// $NON-NLS-1$\r\n    BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(\"mailer_title_settings\")));\r\n    attributePane.add(createMailingSettings());\r\n    attributePane.add(createSmtpSettings());\r\n    JPanel testerPanel = new JPanel(new BorderLayout());\r\n    testerButton = new JButton(JMeterUtils.getResString(\"mailer_test_mail\"));\r\n    testerButton.addActionListener(this);\r\n    testerButton.setEnabled(true);\r\n    testerPanel.add(testerButton, BorderLayout.EAST);\r\n    attributePane.add(testerPanel);\r\n    mainPanel.add(attributePane);\r\n    mainPanel.add(Box.createRigidArea(new Dimension(0, 5)));\r\n    JPanel mailerPanel = new JPanel(new BorderLayout());\r\n    mailerPanel.add(new JLabel(JMeterUtils.getResString(\"mailer_failures\")), BorderLayout.WEST);\r\n    failureField = new JTextField(6);\r\n    failureField.setEditable(false);\r\n    mailerPanel.add(failureField, BorderLayout.CENTER);\r\n    mainPanel.add(mailerPanel);\r\n    this.add(mainPanel, BorderLayout.CENTER);\r\n}"
}, {
	"Path": "org.hibernate.spatial.criterion.ExpressionUtil.findColumn",
	"Comment": "determines the column name corresponding to the specified property path.",
	"Method": "String findColumn(String propertyName,Criteria criteria,CriteriaQuery criteriaQuery){\r\n    final String[] columns = criteriaQuery.findColumns(propertyName, criteria);\r\n    if (columns.length != 1) {\r\n        throw new HibernateException(\"Spatial Expression may only be used with single-column properties\");\r\n    }\r\n    return columns[0];\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.LoadRecentProject.setRecentFile",
	"Comment": "set the full path to the recent file where index 0 is the most recent",
	"Method": "void setRecentFile(int index,String fileName){\r\n    prefs.put(USER_PREFS_KEY + index, fileName);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.AssertionResult.isError",
	"Comment": "check if an error occurred while checking the assertion. if an erroroccurred, the failure message may give more details about the error.",
	"Method": "boolean isError(){\r\n    return error;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.CsvFileSampleSource.run",
	"Comment": "run this sample source.this sample source will start reading all inputs csv files and producetheir samples to this sample source registered sample consumers.",
	"Method": "void run(){\r\n    produce();\r\n}"
}, {
	"Path": "com.auth0.jwt.impl.JsonNodeClaim.extractClaim",
	"Comment": "helper method to extract a claim from the given jsonnode tree.",
	"Method": "Claim extractClaim(String claimName,Map<String, JsonNode> tree){\r\n    JsonNode node = tree.get(claimName);\r\n    return claimFromNode(node);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.dashboard.AbstractDataExporter.findData",
	"Comment": "finds a inner resultdata matching the specified data name in a resultdatatree. supports only mapresultdata walking.",
	"Method": "ResultData findData(String data,ResultData root){\r\n    ResultData result = null;\r\n    String[] pathItems = StringUtils.split(data, '.');\r\n    if (pathItems != null) {\r\n        if (root instanceof MapResultData) {\r\n            int count = pathItems.length;\r\n            int index = 0;\r\n            MapResultData map = (MapResultData) root;\r\n            while (index < count && result == null) {\r\n                ResultData current = map.getResult(pathItems[index]);\r\n                if (index == count - 1) {\r\n                    result = current;\r\n                } else {\r\n                    if (current instanceof MapResultData) {\r\n                        map = (MapResultData) current;\r\n                        index++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.parser.HtmlParsingUtils.recurseForm",
	"Comment": "n.b. since the tags are extracted from an html form, any values must already have been encoded",
	"Method": "boolean recurseForm(Node tempNode,LinkedList<HTTPSamplerBase> urlConfigs,URL context,String selectName,boolean inForm){\r\n    NamedNodeMap nodeAtts = tempNode.getAttributes();\r\n    String tag = tempNode.getNodeName();\r\n    try {\r\n        if (inForm) {\r\n            HTTPSamplerBase url = urlConfigs.getLast();\r\n            if (tag.equalsIgnoreCase(\"form\")) {\r\n                try {\r\n                    urlConfigs.add(createFormUrlConfig(tempNode, context));\r\n                } catch (MalformedURLException e) {\r\n                    inForm = false;\r\n                }\r\n            } else if (tag.equalsIgnoreCase(\"input\")) {\r\n                // $NON-NLS-1$\r\n                url.addEncodedArgument(getAttributeValue(nodeAtts, \"name\"), getAttributeValue(nodeAtts, \"value\"));\r\n            } else if (tag.equalsIgnoreCase(\"textarea\")) {\r\n                try {\r\n                    // $NON-NLS-1$\r\n                    url.addEncodedArgument(getAttributeValue(nodeAtts, \"name\"), tempNode.getFirstChild().getNodeValue());\r\n                } catch (NullPointerException e) {\r\n                    url.addArgument(getAttributeValue(nodeAtts, \"name\"), \"\");\r\n                }\r\n            } else if (tag.equalsIgnoreCase(\"select\")) {\r\n                selectName = getAttributeValue(nodeAtts, \"name\");\r\n            } else if (tag.equalsIgnoreCase(\"option\")) {\r\n                String value = getAttributeValue(nodeAtts, \"value\");\r\n                if (value == null) {\r\n                    try {\r\n                        value = tempNode.getFirstChild().getNodeValue();\r\n                    } catch (NullPointerException e) {\r\n                        value = \"\";\r\n                    }\r\n                }\r\n                url.addEncodedArgument(selectName, value);\r\n            }\r\n        } else if (tag.equalsIgnoreCase(\"form\")) {\r\n            try {\r\n                urlConfigs.add(createFormUrlConfig(tempNode, context));\r\n                inForm = true;\r\n            } catch (MalformedURLException e) {\r\n                inForm = false;\r\n            }\r\n        }\r\n    } catch (Exception ex) {\r\n        log.warn(\"Some bad HTML \" + printNode(tempNode), ex);\r\n    }\r\n    NodeList childNodes = tempNode.getChildNodes();\r\n    for (int x = 0; x < childNodes.getLength(); x++) {\r\n        inForm = recurseForm(childNodes.item(x), urlConfigs, context, selectName, inForm);\r\n    }\r\n    return inForm;\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDrawer.isClosed",
	"Comment": "this indicates whether or not the drawer is completely hidden.",
	"Method": "boolean isClosed(){\r\n    if (hasMiniSize()) {\r\n        return resizeTo == getMiniDrawerSize();\r\n    }\r\n    return translateTo == initTranslate.get() && !translateTimer.isRunning();\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.BinarySearchTree.getBFS",
	"Comment": "get an array representation of the tree in breath first search order.",
	"Method": "T[] getBFS(T[] getBFS,Node<T> start,int size){\r\n    final Queue<Node<T>> queue = new ArrayDeque<Node<T>>();\r\n    final T[] values = (T[]) Array.newInstance(start.id.getClass(), size);\r\n    int count = 0;\r\n    Node<T> node = start;\r\n    while (node != null) {\r\n        values[count++] = node.id;\r\n        if (node.lesser != null)\r\n            queue.add(node.lesser);\r\n        if (node.greater != null)\r\n            queue.add(node.greater);\r\n        if (!queue.isEmpty())\r\n            node = queue.remove();\r\n        else\r\n            node = null;\r\n    }\r\n    return values;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG9Dialect.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return support.getDWithinSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.setArguments",
	"Comment": "sets the arguments attribute of the ldapconfig object. this will collectvalues from the table for user defined test case.",
	"Method": "void setArguments(Arguments value){\r\n    setProperty(new TestElementProperty(ARGUMENTS, value));\r\n}"
}, {
	"Path": "org.apache.jmeter.modifiers.gui.CounterConfigGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement c){\r\n    if (c instanceof CounterConfig) {\r\n        CounterConfig config = (CounterConfig) c;\r\n        config.setStart(startField.getText());\r\n        config.setEnd(endField.getText());\r\n        config.setIncrement(incrField.getText());\r\n        config.setVarName(varNameField.getText());\r\n        config.setFormat(formatField.getText());\r\n        config.setIsPerUser(perUserField.isSelected());\r\n        config.setResetOnThreadGroupIteration(resetCounterOnEachThreadGroupIteration.isEnabled() && resetCounterOnEachThreadGroupIteration.isSelected());\r\n    }\r\n    super.configureTestElement(c);\r\n}"
}, {
	"Path": "org.bytedeco.javacv.FFmpegFrameGrabber.setAudioTimestamp",
	"Comment": "settimestamp with resulting audio frame type if there is an audio stream",
	"Method": "void setAudioTimestamp(long timestamp){\r\n    setTimestamp(timestamp, EnumSet.of(Frame.Type.AUDIO));\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.LoopControlPanel.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    if (displayName) {\r\n        setLayout(new BorderLayout(0, 5));\r\n        setBorder(makeBorder());\r\n        add(makeTitlePanel(), BorderLayout.NORTH);\r\n        JPanel mainPanel = new JPanel(new BorderLayout());\r\n        mainPanel.add(createLoopCountPanel(), BorderLayout.NORTH);\r\n        add(mainPanel, BorderLayout.CENTER);\r\n    } else {\r\n        setLayout(new BorderLayout());\r\n        add(createLoopCountPanel(), BorderLayout.NORTH);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.GenericController.getSubControllers",
	"Comment": "gets the subcontrollers attribute of the genericcontroller object",
	"Method": "List<TestElement> getSubControllers(){\r\n    return subControllersAndSamplers;\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDrawer.updateDirection",
	"Comment": "this method will change the drawer behavior according to the argument direction.",
	"Method": "void updateDirection(DrawerDirection dir){\r\n    maxSizeProperty.set(-1);\r\n    prefSizeProperty.set(-1);\r\n    translateProperty.set(0);\r\n    if (dir == DrawerDirection.LEFT || dir == DrawerDirection.RIGHT) {\r\n        translateProperty = sidePane.translateXProperty();\r\n        maxSizeProperty = sidePane.maxWidthProperty();\r\n        prefSizeProperty = sidePane.prefWidthProperty();\r\n        sizeProperty = sidePane.widthProperty();\r\n        paddingSizeProperty = paddingPane.minWidthProperty();\r\n    } else if (dir == DrawerDirection.TOP || dir == DrawerDirection.BOTTOM) {\r\n        translateProperty = sidePane.translateYProperty();\r\n        maxSizeProperty = sidePane.maxHeightProperty();\r\n        prefSizeProperty = sidePane.prefHeightProperty();\r\n        sizeProperty = sidePane.heightProperty();\r\n        paddingSizeProperty = paddingPane.minHeightProperty();\r\n    }\r\n    if (dir == DrawerDirection.LEFT) {\r\n        StackPane.setAlignment(sidePane, Pos.CENTER_LEFT);\r\n    } else if (dir == DrawerDirection.RIGHT) {\r\n        StackPane.setAlignment(sidePane, Pos.CENTER_RIGHT);\r\n    } else if (dir == DrawerDirection.TOP) {\r\n        StackPane.setAlignment(sidePane, Pos.TOP_CENTER);\r\n    } else if (dir == DrawerDirection.BOTTOM) {\r\n        StackPane.setAlignment(sidePane, Pos.BOTTOM_CENTER);\r\n    }\r\n    setDefaultDrawerSize(getDefaultDrawerSize());\r\n    updateDrawerAnimation(initTranslate.get());\r\n    updateContent();\r\n    setMiniDrawerSize(getMiniDrawerSize());\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Collections.findValueOfType",
	"Comment": "find a single value of the given type in the given collection.",
	"Method": "T findValueOfType(Collection<?> collection,Class<T> type,Object findValueOfType,Collection<?> collection,Class<?>[] types){\r\n    if (isEmpty(collection) || Objects.isEmpty(types)) {\r\n        return null;\r\n    }\r\n    for (Class<?> type : types) {\r\n        Object value = findValueOfType(collection, type);\r\n        if (value != null) {\r\n            return value;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Strings.addStringToArray",
	"Comment": "append the given string to the given string array, returning a new arrayconsisting of the input array contents plus the given string.",
	"Method": "String[] addStringToArray(String[] array,String str){\r\n    if (Objects.isEmpty(array)) {\r\n        return new String[] { str };\r\n    }\r\n    String[] newArr = new String[array.length + 1];\r\n    System.arraycopy(array, 0, newArr, 0, array.length);\r\n    newArr[array.length] = str;\r\n    return newArr;\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.BeanInfoSupport.createPropertyGroup",
	"Comment": "utility method to group and order properties.it will assign the given group name to each of the named properties, andset their order attribute so that they are shown in the given order.the created groups will get order 1, 2, 3,... in the order in which theyare created.",
	"Method": "void createPropertyGroup(String group,String[] names){\r\n    String name;\r\n    for (int i = 0; i < names.length; i++) {\r\n        name = names[i];\r\n        log.debug(\"Getting property for: {}\", name);\r\n        PropertyDescriptor p = property(name);\r\n        p.setValue(GenericTestBeanCustomizer.GROUP, group);\r\n        p.setValue(GenericTestBeanCustomizer.ORDER, Integer.valueOf(i));\r\n    }\r\n    numCreatedGroups++;\r\n    getBeanDescriptor().setValue(GenericTestBeanCustomizer.ORDER(group), Integer.valueOf(numCreatedGroups));\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.ModuleControllerGui.findPathInTreeModel",
	"Comment": "recursively traverse module to run tree in order to find jmetertreenode element given by testplanpathin a defaultmutabletreenode tree",
	"Method": "TreeNode[] findPathInTreeModel(int level,TreeNode[] testPlanPath,DefaultMutableTreeNode parent){\r\n    if (level >= testPlanPath.length) {\r\n        return EMPTY_TREE_NODES;\r\n    }\r\n    int childCount = parent.getChildCount();\r\n    JMeterTreeNode searchedTreeNode = (JMeterTreeNode) testPlanPath[level];\r\n    for (int i = 0; i < childCount; i++) {\r\n        DefaultMutableTreeNode child = (DefaultMutableTreeNode) parent.getChildAt(i);\r\n        JMeterTreeNode childUserObj = (JMeterTreeNode) child.getUserObject();\r\n        if (childUserObj.equals(searchedTreeNode)) {\r\n            if (level == (testPlanPath.length - 1)) {\r\n                return child.getPath();\r\n            } else {\r\n                return findPathInTreeModel(level + 1, testPlanPath, child);\r\n            }\r\n        }\r\n    }\r\n    return EMPTY_TREE_NODES;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    servername.setText(element.getPropertyAsString(LDAPExtSampler.SERVERNAME));\r\n    port.setText(element.getPropertyAsString(LDAPExtSampler.PORT));\r\n    rootdn.setText(element.getPropertyAsString(LDAPExtSampler.ROOTDN));\r\n    scope.setSelectedIndex(element.getPropertyAsInt(LDAPExtSampler.SCOPE));\r\n    countlim.setText(element.getPropertyAsString(LDAPExtSampler.COUNTLIM));\r\n    timelim.setText(element.getPropertyAsString(LDAPExtSampler.TIMELIM));\r\n    attribs.setText(element.getPropertyAsString(LDAPExtSampler.ATTRIBS));\r\n    retobj.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.RETOBJ));\r\n    deref.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.DEREF));\r\n    connto.setText(element.getPropertyAsString(LDAPExtSampler.CONNTO));\r\n    parseflag.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.PARSEFLAG));\r\n    secure.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.SECURE));\r\n    userpw.setText(element.getPropertyAsString(LDAPExtSampler.USERPW));\r\n    userdn.setText(element.getPropertyAsString(LDAPExtSampler.USERDN));\r\n    comparedn.setText(element.getPropertyAsString(LDAPExtSampler.COMPAREDN));\r\n    comparefilt.setText(element.getPropertyAsString(LDAPExtSampler.COMPAREFILT));\r\n    modddn.setText(element.getPropertyAsString(LDAPExtSampler.MODDDN));\r\n    newdn.setText(element.getPropertyAsString(LDAPExtSampler.NEWDN));\r\n    CardLayout cl = (CardLayout) (cards.getLayout());\r\n    final String testType = element.getPropertyAsString(LDAPExtSampler.TEST);\r\n    if (testType.equals(LDAPExtSampler.UNBIND)) {\r\n        unbind.setSelected(true);\r\n        cl.show(cards, CARDS_DEFAULT);\r\n    } else if (testType.equals(LDAPExtSampler.BIND)) {\r\n        bind.setSelected(true);\r\n        cl.show(cards, CARDS_BIND);\r\n    } else if (testType.equals(LDAPExtSampler.SBIND)) {\r\n        sbind.setSelected(true);\r\n        cl.show(cards, CARDS_BIND);\r\n    } else if (testType.equals(LDAPExtSampler.COMPARE)) {\r\n        compare.setSelected(true);\r\n        cl.show(cards, CARDS_COMPARE);\r\n    } else if (testType.equals(LDAPExtSampler.ADD)) {\r\n        addTest.setSelected(true);\r\n        add.setText(element.getPropertyAsString(LDAPExtSampler.BASE_ENTRY_DN));\r\n        tableAddPanel.configure((TestElement) element.getProperty(LDAPExtSampler.ARGUMENTS).getObjectValue());\r\n        cl.show(cards, CARDS_ADD);\r\n    } else if (testType.equals(LDAPExtSampler.MODIFY)) {\r\n        modifyTest.setSelected(true);\r\n        modify.setText(element.getPropertyAsString(LDAPExtSampler.BASE_ENTRY_DN));\r\n        tableModifyPanel.configure((TestElement) element.getProperty(LDAPExtSampler.LDAPARGUMENTS).getObjectValue());\r\n        cl.show(cards, CARDS_MODIFY);\r\n    } else if (testType.equals(LDAPExtSampler.DELETE)) {\r\n        deleteTest.setSelected(true);\r\n        delete.setText(element.getPropertyAsString(LDAPExtSampler.DELETE));\r\n        cl.show(cards, CARDS_DELETE);\r\n    } else if (testType.equals(LDAPExtSampler.RENAME)) {\r\n        rename.setSelected(true);\r\n        cl.show(cards, CARDS_RENAME);\r\n    } else if (testType.equals(LDAPExtSampler.SEARCH)) {\r\n        searchTest.setSelected(true);\r\n        searchbase.setText(element.getPropertyAsString(LDAPExtSampler.SEARCHBASE));\r\n        searchfilter.setText(element.getPropertyAsString(LDAPExtSampler.SEARCHFILTER));\r\n        cl.show(cards, CARDS_SEARCH);\r\n    }\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.KdTree.add",
	"Comment": "adds value to the tree. tree can contain multiple equal values.",
	"Method": "boolean add(T value){\r\n    if (value == null)\r\n        return false;\r\n    if (root == null) {\r\n        root = new KdNode(value);\r\n        return true;\r\n    }\r\n    KdNode node = root;\r\n    while (true) {\r\n        if (KdNode.compareTo(node.depth, node.k, value, node.id) <= 0) {\r\n            if (node.lesser == null) {\r\n                KdNode newNode = new KdNode(value, k, node.depth + 1);\r\n                newNode.parent = node;\r\n                node.lesser = newNode;\r\n                break;\r\n            }\r\n            node = node.lesser;\r\n        } else {\r\n            if (node.greater == null) {\r\n                KdNode newNode = new KdNode(value, k, node.depth + 1);\r\n                newNode.parent = node;\r\n                node.greater = newNode;\r\n                break;\r\n            }\r\n            node = node.greater;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.bytedeco.javacv.IPCameraFrameGrabber.ensureBufferCapacity",
	"Comment": "grow the pixel buffer if necessary.using this method instead of allocating a new buffer every time a frameis grabbed improves performance by reducing the frequency of garbage collections.in a simple test, theoriginal version of ipcameraframegrabber that allocated a 4096 element byte array for every readcaused about 200mb of allocations within 13 seconds.in this version, almost no additional heap spaceis typically allocated per frame.",
	"Method": "void ensureBufferCapacity(int desiredCapacity){\r\n    int capacity = pixelBuffer.length;\r\n    while (capacity < desiredCapacity) {\r\n        capacity *= 2;\r\n    }\r\n    if (capacity > pixelBuffer.length) {\r\n        pixelBuffer = new byte[capacity];\r\n    }\r\n}"
}, {
	"Path": "cn.hutool.json.XML.parse",
	"Comment": "scan the content following the named tag, attaching it to the context.",
	"Method": "boolean parse(XMLTokener x,JSONObject context,String name,boolean keepStrings){\r\n    char c;\r\n    int i;\r\n    JSONObject jsonobject = null;\r\n    String string;\r\n    String tagName;\r\n    Object token;\r\n    token = x.nextToken();\r\n    if (token == BANG) {\r\n        c = x.next();\r\n        if (c == '-') {\r\n            if (x.next() == '-') {\r\n                x.skipPast(\"-->\");\r\n                return false;\r\n            }\r\n            x.back();\r\n        } else if (c == '[') {\r\n            token = x.nextToken();\r\n            if (\"CDATA\".equals(token)) {\r\n                if (x.next() == '[') {\r\n                    string = x.nextCDATA();\r\n                    if (string.length() > 0) {\r\n                        context.accumulate(\"content\", string);\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            throw x.syntaxError(\"Expected 'CDATA['\");\r\n        }\r\n        i = 1;\r\n        do {\r\n            token = x.nextMeta();\r\n            if (token == null) {\r\n                throw x.syntaxError(\"Missing '>' after '<!'.\");\r\n            } else if (token == LT) {\r\n                i += 1;\r\n            } else if (token == GT) {\r\n                i -= 1;\r\n            }\r\n        } while (i > 0);\r\n        return false;\r\n    } else if (token == QUEST) {\r\n        x.skipPast(\"?>\");\r\n        return false;\r\n    } else if (token == SLASH) {\r\n        token = x.nextToken();\r\n        if (name == null) {\r\n            throw x.syntaxError(\"Mismatched close tag \" + token);\r\n        }\r\n        if (!token.equals(name)) {\r\n            throw x.syntaxError(\"Mismatched \" + name + \" and \" + token);\r\n        }\r\n        if (x.nextToken() != GT) {\r\n            throw x.syntaxError(\"Misshaped close tag\");\r\n        }\r\n        return true;\r\n    } else if (token instanceof Character) {\r\n        throw x.syntaxError(\"Misshaped tag\");\r\n    } else {\r\n        tagName = (String) token;\r\n        token = null;\r\n        jsonobject = new JSONObject();\r\n        for (; ; ) {\r\n            if (token == null) {\r\n                token = x.nextToken();\r\n            }\r\n            if (token instanceof String) {\r\n                string = (String) token;\r\n                token = x.nextToken();\r\n                if (token == EQ) {\r\n                    token = x.nextToken();\r\n                    if (!(token instanceof String)) {\r\n                        throw x.syntaxError(\"Missing value\");\r\n                    }\r\n                    jsonobject.accumulate(string, keepStrings ? token : InternalJSONUtil.stringToValue((String) token));\r\n                    token = null;\r\n                } else {\r\n                    jsonobject.accumulate(string, \"\");\r\n                }\r\n            } else if (token == SLASH) {\r\n                if (x.nextToken() != GT) {\r\n                    throw x.syntaxError(\"Misshaped tag\");\r\n                }\r\n                if (jsonobject.size() > 0) {\r\n                    context.accumulate(tagName, jsonobject);\r\n                } else {\r\n                    context.accumulate(tagName, \"\");\r\n                }\r\n                return false;\r\n            } else if (token == GT) {\r\n                for (; ; ) {\r\n                    token = x.nextContent();\r\n                    if (token == null) {\r\n                        if (tagName != null) {\r\n                            throw x.syntaxError(\"Unclosed tag \" + tagName);\r\n                        }\r\n                        return false;\r\n                    } else if (token instanceof String) {\r\n                        string = (String) token;\r\n                        if (string.length() > 0) {\r\n                            jsonobject.accumulate(\"content\", keepStrings ? token : InternalJSONUtil.stringToValue(string));\r\n                        }\r\n                    } else if (token == LT) {\r\n                        if (parse(x, jsonobject, tagName, keepStrings)) {\r\n                            if (jsonobject.size() == 0) {\r\n                                context.accumulate(tagName, \"\");\r\n                            } else if (jsonobject.size() == 1 && jsonobject.get(\"content\") != null) {\r\n                                context.accumulate(tagName, jsonobject.get(\"content\"));\r\n                            } else {\r\n                                context.accumulate(tagName, jsonobject);\r\n                            }\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                throw x.syntaxError(\"Misshaped tag\");\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.BooleanIndexer.create",
	"Comment": "creates a boolean indexer to access efficiently the data of a pointer.",
	"Method": "BooleanIndexer create(boolean[] array,BooleanIndexer create,ByteBuffer buffer,BooleanIndexer create,BooleanPointer pointer,BooleanIndexer create,boolean[] array,long[] sizes,long[] strides,BooleanIndexer create,ByteBuffer buffer,long[] sizes,long[] strides,BooleanIndexer create,BooleanPointer pointer,long[] sizes,long[] strides,BooleanIndexer create,BooleanPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new BooleanRawIndexer(pointer, sizes, strides) : new BooleanBufferIndexer(pointer.asByteBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        boolean[] array = new boolean[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new BooleanArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.BooleanIndexer.create",
	"Comment": "creates a boolean indexer to access efficiently the data of a pointer.",
	"Method": "BooleanIndexer create(boolean[] array,BooleanIndexer create,ByteBuffer buffer,BooleanIndexer create,BooleanPointer pointer,BooleanIndexer create,boolean[] array,long[] sizes,long[] strides,BooleanIndexer create,ByteBuffer buffer,long[] sizes,long[] strides,BooleanIndexer create,BooleanPointer pointer,long[] sizes,long[] strides,BooleanIndexer create,BooleanPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.XPathExtractor.getMatchNumberAsString",
	"Comment": "return which match to use. this can be any positive number, indicating theexact match to use, or 0, which is interpreted as meaning random.",
	"Method": "String getMatchNumberAsString(){\r\n    return getPropertyAsString(MATCH_NUMBER, DEFAULT_VALUE_AS_STRING);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GUIFactory.getIcon",
	"Comment": "get an icon which has previously been registered for this class object.",
	"Method": "ImageIcon getIcon(Class<?> elementClass,ImageIcon getIcon,Class<?> elementClass,boolean enabled){\r\n    String key = elementClass.getName();\r\n    ImageIcon icon = enabled ? ICON_MAP.get(key) : DISABLED_ICON_MAP.get(key);\r\n    if (icon != null) {\r\n        return icon;\r\n    }\r\n    if (elementClass.getSuperclass() != null) {\r\n        return getIcon(elementClass.getSuperclass(), enabled);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.jorphan.reflect.ClassFinder.addJarsInPath",
	"Comment": "for each directory in the search path, add all the jars found there",
	"Method": "String[] addJarsInPath(String[] paths){\r\n    Set<String> fullList = new HashSet();\r\n    for (final String path : paths) {\r\n        fullList.add(path);\r\n        File dir = new File(path);\r\n        if (dir.exists() && dir.isDirectory()) {\r\n            String[] jars = dir.list((f, name) -> {\r\n                File fileInDirectory = new File(f, name);\r\n                return fileInDirectory.isFile() && name.endsWith(DOT_JAR);\r\n            });\r\n            if (jars != null) {\r\n                Collections.addAll(fullList, jars);\r\n            }\r\n        }\r\n    }\r\n    return fullList.toArray(new String[fullList.size()]);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.SizeAssertionGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    configureTestElement(el);\r\n    SizeAssertion assertion = (SizeAssertion) el;\r\n    if (responseHeadersButton.isSelected()) {\r\n        assertion.setTestFieldResponseHeaders();\r\n    } else if (responseBodyButton.isSelected()) {\r\n        assertion.setTestFieldResponseBody();\r\n    } else if (responseCodeButton.isSelected()) {\r\n        assertion.setTestFieldResponseCode();\r\n    } else if (responseMessageButton.isSelected()) {\r\n        assertion.setTestFieldResponseMessage();\r\n    } else {\r\n        assertion.setTestFieldNetworkSize();\r\n    }\r\n    assertion.setAllowedSize(size.getText());\r\n    assertion.setCompOper(getState());\r\n    saveScopeSettings(assertion);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.getPortFromHostHeader",
	"Comment": "get port from the value of the host header, or return the givendefaultvalue",
	"Method": "int getPortFromHostHeader(String hostHeaderValue,int defaultValue){\r\n    String[] hostParts = hostHeaderValue.split(\":\");\r\n    if (hostParts.length > 1) {\r\n        String portString = hostParts[hostParts.length - 1];\r\n        if (PORT_PATTERN.matcher(portString).matches()) {\r\n            return Integer.parseInt(portString);\r\n        }\r\n    }\r\n    return defaultValue;\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDisparityMultiplier",
	"Comment": "the disparity scale factor used when in disparity output mode. can onlybe set before streaming",
	"Method": "void setDisparityMultiplier(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DISPARITY_MULTIPLIER, value);\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setColorWhiteBalance",
	"Comment": "controls white balance of color image. setting any value will disableauto white balance",
	"Method": "void setColorWhiteBalance(int value){\r\n    setOption(RealSense.RS_OPTION_COLOR_WHITE_BALANCE, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.ActionRouter.removePreActionListener",
	"Comment": "allows an actionlistener to be removed from receiving notifications of acommand being executed prior to the actual execution of the command.",
	"Method": "void removePreActionListener(Class<?> action,ActionListener listener){\r\n    removeActionListener(action, listener, preActionListeners);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.LoadRecentProject.getRecentFile",
	"Comment": "get the full path to the recent file where index 0 is the most recent",
	"Method": "File getRecentFile(ActionEvent e,String getRecentFile,int index){\r\n    return prefs.get(USER_PREFS_KEY + index, null);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui.createSCPanel",
	"Comment": "this will create the search controls panel in the ldapconfiggui",
	"Method": "JPanel createSCPanel(){\r\n    VerticalPanel scPanel = new VerticalPanel();\r\n    scPanel.add(scope);\r\n    scPanel.add(createLabelPanel(\"countlim\", countlim));\r\n    scPanel.add(createLabelPanel(\"timelim\", timelim));\r\n    scPanel.add(createLabelPanel(\"attrs\", attribs));\r\n    scPanel.add(retobj);\r\n    scPanel.add(deref);\r\n    scPanel.add(parseflag);\r\n    return scPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.config.gui.JavaConfigGui.createParameterPanel",
	"Comment": "create a panel containing components allowing the user to providearguments to be passed to the test class instance.",
	"Method": "JPanel createParameterPanel(){\r\n    argsPanel = new ArgumentsPanel(JMeterUtils.getResString(\"paramtable\"));\r\n    return argsPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.engine.RemoteJMeterEngineImpl.rconfigure",
	"Comment": "adds a feature to the threadgroup attribute of the remotejmeterengineimplobject.",
	"Method": "void rconfigure(HashTree testTree,String hostAndPort,File jmxBase,String scriptName){\r\n    log.info(\"Creating JMeter engine on host {} base '{}'\", hostAndPort, jmxBase);\r\n    try {\r\n        if (log.isInfoEnabled()) {\r\n            log.info(\"Remote client host: {}\", getClientHost());\r\n        }\r\n    } catch (ServerNotActiveException e) {\r\n    }\r\n    synchronized (LOCK) {\r\n        if (backingEngine != null && backingEngine.isActive()) {\r\n            log.warn(\"Engine is busy - cannot create JMeter engine\");\r\n            throw new IllegalStateException(\"Engine is busy - please try later\");\r\n        }\r\n        ownerThread = Thread.currentThread();\r\n        JMeterUtils.setProperty(JMeterUtils.THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME, hostAndPort);\r\n        backingEngine = new StandardJMeterEngine(hostAndPort);\r\n        backingEngine.configure(testTree);\r\n    }\r\n    FileServer.getFileServer().setScriptName(scriptName);\r\n    FileServer.getFileServer().setBase(jmxBase);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.Indexer.index",
	"Comment": "computes the linear index as the dot product of indices and strides.",
	"Method": "long index(long indices){\r\n    long index = 0;\r\n    for (int i = 0; i < indices.length && i < strides.length; i++) {\r\n        index += indices[i] * strides[i];\r\n    }\r\n    return index;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.AssertionResult.setFailureMessage",
	"Comment": "set the failure message giving more details about a failure or error.",
	"Method": "void setFailureMessage(String message){\r\n    failureMessage = message;\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.gui.GenericTestBeanCustomizer.notExpression",
	"Comment": "returns true if the property does not allow jmeter expressions.",
	"Method": "boolean notExpression(PropertyDescriptor descriptor){\r\n    return Boolean.TRUE.equals(descriptor.getValue(NOT_EXPRESSION));\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.TestArgumentsPanel.testArgumentCreation",
	"Comment": "test that adding an argument to the table results in an appropriatetestelement being created.",
	"Method": "void testArgumentCreation(){\r\n    ArgumentsPanel gui = new ArgumentsPanel();\r\n    gui.tableModel.addRow(new Argument());\r\n    gui.tableModel.setValueAt(\"howdy\", 0, 0);\r\n    gui.tableModel.addRow(new Argument());\r\n    gui.tableModel.setValueAt(\"doody\", 0, 1);\r\n    assertEquals(\"=\", ((Argument) ((Arguments) gui.createTestElement()).getArguments().get(0).getObjectValue()).getMetaData());\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDrawer.isOpened",
	"Comment": "this indicates whether or not the drawer is completely shown.",
	"Method": "boolean isOpened(){\r\n    if (hasMiniSize()) {\r\n        return resizeTo == getDefaultDrawerSize() || prefSizeProperty.get() >= getDefaultDrawerSize();\r\n    }\r\n    return (translateTo == 0 || translateProperty.get() == 0) && !translateTimer.isRunning();\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.AssertionResult.getFailureMessage",
	"Comment": "get the message associated with any failure or error. this method mayreturn null if no message was set.",
	"Method": "String getFailureMessage(){\r\n    return failureMessage;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.LogFilter.isFiltered",
	"Comment": "in the case of log filtering the important thing is whether the log entryshould be used. therefore, the method will only return true if the entryshould be used. since the interface defines both inclusion and exclusion,that means by default inclusion filtering assumes all entries areexcluded unless it matches. in the case of exclusion filtering, it assumesall entries are included unless it matches, which means it should beexcluded.",
	"Method": "boolean isFiltered(String path,TestElement el){\r\n    if (this.FILEFILTER) {\r\n        return filterFile(path);\r\n    }\r\n    if (this.PTRNFILTER) {\r\n        return filterPattern(path);\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.jfinal.template.Env.getFunction",
	"Comment": "get function of current template first, getting shared function if null before",
	"Method": "Define getFunction(String functionName){\r\n    Define func = functionMap.get(functionName);\r\n    return func != null ? func : engineConfig.getSharedFunction(functionName);\r\n}"
}, {
	"Path": "cn.hutool.http.HTMLFilter.filter",
	"Comment": "given a user submitted input string, filter out any invalid or restricted html.",
	"Method": "String filter(String input){\r\n    reset();\r\n    String s = input;\r\n    debug(\"************************************************\");\r\n    debug(\"              INPUT: \" + input);\r\n    s = escapeComments(s);\r\n    debug(\"     escapeComments: \" + s);\r\n    s = balanceHTML(s);\r\n    debug(\"        balanceHTML: \" + s);\r\n    s = checkTags(s);\r\n    debug(\"          checkTags: \" + s);\r\n    s = processRemoveBlanks(s);\r\n    debug(\"processRemoveBlanks: \" + s);\r\n    s = validateEntities(s);\r\n    debug(\"    validateEntites: \" + s);\r\n    debug(\"************************************************\\n\\n\");\r\n    return s;\r\n}"
}, {
	"Path": "com.jfoenix.utils.JFXUtilities.runInFXAndWait",
	"Comment": "this method is used to run a specified runnable in the fx application thread,it waits for the task to finish before returning to the main thread.",
	"Method": "void runInFXAndWait(Runnable doRun){\r\n    if (Platform.isFxApplicationThread()) {\r\n        doRun.run();\r\n        return;\r\n    }\r\n    final CountDownLatch doneLatch = new CountDownLatch(1);\r\n    Platform.runLater(() -> {\r\n        try {\r\n            doRun.run();\r\n        } finally {\r\n            doneLatch.countDown();\r\n        }\r\n    });\r\n    try {\r\n        doneLatch.await();\r\n    } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.MenuInfo.getEnabled",
	"Comment": "returns whether the menu item represented by this menuinfo object should be enabled",
	"Method": "boolean getEnabled(String actionCommand){\r\n    if (ActionNames.ADD.equals(actionCommand)) {\r\n        return guiComp.canBeAdded();\r\n    } else {\r\n        return true;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.AuthManager.hasAuthForURL",
	"Comment": "tests whether an authorization record is available for a given url",
	"Method": "boolean hasAuthForURL(URL url){\r\n    return getAuthForURL(url) != null;\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Objects.nullSafeHashCode",
	"Comment": "return a hash code based on the contents of the specified array.if array is null, this method returns 0.",
	"Method": "int nullSafeHashCode(Object obj,int nullSafeHashCode,Object[] array,int nullSafeHashCode,boolean[] array,int nullSafeHashCode,byte[] array,int nullSafeHashCode,char[] array,int nullSafeHashCode,double[] array,int nullSafeHashCode,float[] array,int nullSafeHashCode,int[] array,int nullSafeHashCode,long[] array,int nullSafeHashCode,short[] array){\r\n    if (array == null) {\r\n        return 0;\r\n    }\r\n    int hash = INITIAL_HASH;\r\n    int arraySize = array.length;\r\n    for (int i = 0; i < arraySize; i++) {\r\n        hash = MULTIPLIER * hash + array[i];\r\n    }\r\n    return hash;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.LogFilter.filterFile",
	"Comment": "filter the file. the implementation performs the exclusion first beforethe inclusion. this means if a file name is in both string arrays, theexclusion will take priority. depending on how users expect this to work,we may want to change the priority so that inclusion is performed firstand exclusion second. another possible alternative is to perform bothinclusion and exclusion. doing so would make the most sense if the methodthrows an exception and tells the user the same filename is in both theinclude and exclude array.",
	"Method": "boolean filterFile(String file){\r\n    if (this.EXCFILE != null) {\r\n        return excFile(file);\r\n    } else if (this.INCFILE != null) {\r\n        return !incFile(file);\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.CriticalSectionController.reInitialize",
	"Comment": "called after execution of last child of the controller we release lock",
	"Method": "void reInitialize(){\r\n    if (this.currentLock != null) {\r\n        if (currentLock.isHeldByCurrentThread()) {\r\n            this.currentLock.unlock();\r\n        }\r\n        this.currentLock = null;\r\n    }\r\n    super.reInitialize();\r\n}"
}, {
	"Path": "com.jfoenix.utils.JFXUtilities.runInFX",
	"Comment": "this method is used to run a specified runnable in the fx application thread,it returns before the task finished execution",
	"Method": "void runInFX(Runnable doRun){\r\n    if (Platform.isFxApplicationThread()) {\r\n        doRun.run();\r\n        return;\r\n    }\r\n    Platform.runLater(doRun);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.getscrollCount",
	"Comment": "returns the number of items in the scrolling portion of the menu.",
	"Method": "int getscrollCount(){\r\n    return scrollCount;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.getSendFileAsPostBody",
	"Comment": "determine if the file should be sent as the entire content body,i.e. without any additional wrapping.",
	"Method": "boolean getSendFileAsPostBody(){\r\n    HTTPFileArg[] files = getHTTPFiles();\r\n    return (files.length == 1) && (files[0].getPath().length() > 0) && (files[0].getParamName().length() == 0);\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getAttrNames",
	"Comment": "returns an enumeration containing the names of the attributes available to this request.\tthis method returns an empty enumeration if the request has no attributes available to it.",
	"Method": "Enumeration<String> getAttrNames(){\r\n    return request.getAttributeNames();\r\n}"
}, {
	"Path": "com.jfinal.token.Token.getId",
	"Comment": "returns a string containing the unique identifier assigned to this token.",
	"Method": "String getId(){\r\n    return id;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.parser.URLCollection.addURL",
	"Comment": "convenience method for adding urls to the collection. if the urlparameter is null, empty or url is malformed, nothing isdone",
	"Method": "boolean addURL(String url,URL baseUrl){\r\n    if (url == null || url.length() == 0) {\r\n        return false;\r\n    }\r\n    url = StringEscapeUtils.unescapeXml(url);\r\n    boolean b;\r\n    try {\r\n        b = this.add(ConversionUtils.makeRelativeURL(baseUrl, url));\r\n    } catch (MalformedURLException mfue) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Error occurred building relative url for: {}, message: {}\", url, mfue.getMessage());\r\n        }\r\n        return false;\r\n    }\r\n    return b;\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXNodesList.alignNodeToChild",
	"Comment": "set a child node as the alignment controller when applying alignments onthe nodes list.",
	"Method": "void alignNodeToChild(Node node,Node child){\r\n    setConstraint(node, ALIGN_NODE_CONSTRAINT, child);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getAllMaxTime",
	"Comment": "get the maximal elapsed time for requests within sliding window",
	"Method": "double getAllMaxTime(){\r\n    return allResponsesStats.getMax();\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextField.getToolTipText",
	"Comment": "returns the tooltip string that has been set with settooltiptext",
	"Method": "String getToolTipText(){\r\n    if (mTextField == null) {\r\n        return null;\r\n    }\r\n    return mTextField.getToolTipText();\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.XPath2Extractor.getMatchNumberAsString",
	"Comment": "return which match to use. this can be any positive number, indicating theexact match to use, or 0, which is interpreted as meaning random.",
	"Method": "String getMatchNumberAsString(){\r\n    return getPropertyAsString(MATCH_NUMBER, DEFAULT_VALUE_AS_STRING);\r\n}"
}, {
	"Path": "org.apache.jorphan.util.JOrphanUtils.isXML",
	"Comment": "detects if some content starts with the standard xml prefix.",
	"Method": "boolean isXML(byte[] target){\r\n    return startsWith(target, XML_PFX, 0);\r\n}"
}, {
	"Path": "org.hibernate.spatial.criterion.SpatialRestrictions.spatialRestriction",
	"Comment": "apply the specified spatial relation constraint to the named property.",
	"Method": "Criterion spatialRestriction(int relation,String propertyName,Geometry value){\r\n    switch(relation) {\r\n        case SpatialRelation.CONTAINS:\r\n            return contains(propertyName, value);\r\n        case SpatialRelation.CROSSES:\r\n            return crosses(propertyName, value);\r\n        case SpatialRelation.DISJOINT:\r\n            return disjoint(propertyName, value);\r\n        case SpatialRelation.INTERSECTS:\r\n            return intersects(propertyName, value);\r\n        case SpatialRelation.EQUALS:\r\n            return eq(propertyName, value);\r\n        case SpatialRelation.FILTER:\r\n            return filter(propertyName, value);\r\n        case SpatialRelation.OVERLAPS:\r\n            return overlaps(propertyName, value);\r\n        case SpatialRelation.TOUCHES:\r\n            return touches(propertyName, value);\r\n        case SpatialRelation.WITHIN:\r\n            return within(propertyName, value);\r\n        default:\r\n            throw new IllegalArgumentException(\"Non-existant spatial relation passed.\");\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport.supports",
	"Comment": "does this dialect supports the specified spatialfunction.",
	"Method": "boolean supports(SpatialFunction function){\r\n    return false;\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getParaToInt",
	"Comment": "get para from url and conver to integer with default value if it is null.",
	"Method": "Integer getParaToInt(String name,Integer getParaToInt,String name,Integer defaultValue,Integer getParaToInt,int index,Integer getParaToInt,int index,Integer defaultValue,Integer getParaToInt){\r\n    return toInt(getPara(), null);\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Strings.removeDuplicateStrings",
	"Comment": "remove duplicate strings from the given array.also sorts the array, as it uses a treeset.",
	"Method": "String[] removeDuplicateStrings(String[] array){\r\n    if (Objects.isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Set<String> set = new TreeSet<String>();\r\n    for (String element : array) {\r\n        set.add(element);\r\n    }\r\n    return toStringArray(set);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.DefaultSamplerCreator.computeContentEncoding",
	"Comment": "computes content encoding from request and if not found uses pageencoding and formencoding to see if url was previously computed with a content type",
	"Method": "void computeContentEncoding(HTTPSamplerBase sampler,HttpRequestHdr request,Map<String, String> pageEncodings,Map<String, String> formEncodings,String computeContentEncoding,HttpRequestHdr request,Map<String, String> pageEncodings,Map<String, String> formEncodings,String urlWithoutQuery){\r\n    String contentEncoding = null;\r\n    String requestContentEncoding = ConversionUtils.getEncodingFromContentType(request.getContentType());\r\n    if (requestContentEncoding != null) {\r\n        contentEncoding = requestContentEncoding;\r\n    } else {\r\n        if (pageEncodings != null) {\r\n            synchronized (pageEncodings) {\r\n                contentEncoding = pageEncodings.get(urlWithoutQuery);\r\n            }\r\n        }\r\n        if (formEncodings != null) {\r\n            synchronized (formEncodings) {\r\n                String formEncoding = formEncodings.get(urlWithoutQuery);\r\n                if (formEncoding != null) {\r\n                    contentEncoding = formEncoding;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return contentEncoding;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPJavaImpl.getOnlyCookieFromHeaders",
	"Comment": "get only the cookie headers for the httpurlconnection passed in",
	"Method": "String getOnlyCookieFromHeaders(HttpURLConnection conn,Map<String, String> securityHeaders){\r\n    String cookieHeader = getFromConnectionHeaders(conn, securityHeaders, ONLY_COOKIE, false).trim();\r\n    if (!cookieHeader.isEmpty()) {\r\n        return cookieHeader.substring((HTTPConstants.HEADER_COOKIE_IN_REQUEST).length(), cookieHeader.length()).trim();\r\n    }\r\n    return \"\";\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.BatchSampleSender.sampleOccurred",
	"Comment": "stores sample events until either a time or sample threshold isbreached. both thresholds are reset if one fires. if only one thresholdis set it becomes the only value checked against. when a threshold isbreached the list of sample events is sent to a listener where the eventare fired locally.",
	"Method": "void sampleOccurred(SampleEvent e){\r\n    List<SampleEvent> clonedStore = null;\r\n    synchronized (sampleStore) {\r\n        sampleStore.add(e);\r\n        final int sampleCount = sampleStore.size();\r\n        boolean sendNow = false;\r\n        if (numSamplesThreshold != -1) {\r\n            if (sampleCount >= numSamplesThreshold) {\r\n                sendNow = true;\r\n            }\r\n        }\r\n        long now = 0;\r\n        if (timeThresholdMs != -1) {\r\n            now = System.currentTimeMillis();\r\n            if (batchSendTime == -1) {\r\n                this.batchSendTime = now + timeThresholdMs;\r\n            }\r\n            if (batchSendTime < now && sampleCount > 0) {\r\n                sendNow = true;\r\n            }\r\n        }\r\n        if (sendNow) {\r\n            @SuppressWarnings(\"unchecked\")\r\n            final ArrayList<SampleEvent> clone = (ArrayList<SampleEvent>) ((ArrayList<SampleEvent>) sampleStore).clone();\r\n            clonedStore = clone;\r\n            sampleStore.clear();\r\n            if (timeThresholdMs != -1) {\r\n                this.batchSendTime = now + timeThresholdMs;\r\n            }\r\n        }\r\n    }\r\n    if (clonedStore != null) {\r\n        try {\r\n            log.debug(\"Firing sample\");\r\n            listener.processBatch(clonedStore);\r\n            clonedStore.clear();\r\n        } catch (RemoteException err) {\r\n            log.error(\"sampleOccurred\", err);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JMeterMenuBar.makeMenuItemNoRes",
	"Comment": "make a menuitem using a fixed label which is also used as the item name.this is used for items such as recent files and hostnames which are not resources",
	"Method": "JMenuItem makeMenuItemNoRes(String label,String actionCommand){\r\n    JMenuItem menuItem = new JMenuItem(label);\r\n    menuItem.setName(label);\r\n    menuItem.setActionCommand(actionCommand);\r\n    menuItem.addActionListener(ActionRouter.getInstance());\r\n    return menuItem;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.BackendListenerGui.actionPerformed",
	"Comment": "handle action events for this component. this method currently handlesevents for the classname combo box.",
	"Method": "void actionPerformed(ActionEvent event){\r\n    if (event.getSource() == classnameCombo) {\r\n        String newClassName = ((String) classnameCombo.getSelectedItem()).trim();\r\n        try {\r\n            BackendListenerClient client = createBackendListenerClient(newClassName);\r\n            BackendListenerClient oldClient = createBackendListenerClient(className);\r\n            Arguments currArgs = new Arguments();\r\n            argsPanel.modifyTestElement(currArgs);\r\n            Map<String, String> currArgsMap = currArgs.getArgumentsAsMap();\r\n            Map<String, String> userArgMap = new HashMap();\r\n            userArgMap.putAll(currArgsMap);\r\n            Arguments defaultArgs = extractDefaultArguments(client, userArgMap, oldClient.getDefaultParameters());\r\n            Arguments newArgs = copyDefaultArguments(currArgsMap, defaultArgs);\r\n            userArgMap.forEach(newArgs::addArgument);\r\n            className = newClassName;\r\n            argsPanel.configure(newArgs);\r\n        } catch (Exception e) {\r\n            log.error(\"Error getting argument list for {}\", newClassName, e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.auth0.jwt.JWTVerifier.verify",
	"Comment": "perform the verification against the given token, using any previous configured options.",
	"Method": "DecodedJWT verify(String token){\r\n    DecodedJWT jwt = JWT.decode(token);\r\n    verifyAlgorithm(jwt, algorithm);\r\n    algorithm.verify(jwt);\r\n    verifyClaims(jwt, claims);\r\n    return jwt;\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Collections.contains",
	"Comment": "check whether the given enumeration contains the given element.",
	"Method": "boolean contains(Iterator iterator,Object element,boolean contains,Enumeration enumeration,Object element){\r\n    if (enumeration != null) {\r\n        while (enumeration.hasMoreElements()) {\r\n            Object candidate = enumeration.nextElement();\r\n            if (Objects.nullSafeEquals(candidate, element)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RunningSample.getRate",
	"Comment": "returns the throughput associated to this sampler in requests per second.may be slightly skewed because it takes the timestamps of the first andlast samples as the total time passed, and the test may actually havestarted before that start time and ended after that end time.",
	"Method": "double getRate(){\r\n    if (counter == 0) {\r\n        return 0.0;\r\n    }\r\n    long howLongRunning = lastTime - firstTime;\r\n    if (howLongRunning == 0) {\r\n        return Double.MAX_VALUE;\r\n    }\r\n    return (double) counter / howLongRunning * 1000.0;\r\n}"
}, {
	"Path": "org.apache.jorphan.exec.KeyToolUtils.getCAaliases",
	"Comment": "returns a list of the ca aliases that should be in the keystore.",
	"Method": "String[] getCAaliases(){\r\n    return new String[] { ROOTCA_ALIAS, INTERMEDIATE_CA_ALIAS };\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.GraphVisualizer.createYAxisField",
	"Comment": "creates a text field to be used for the value of a y axis label. thesefields hold the minimum and maximum values for the graph. the units arekept in a separate label outside of this field.",
	"Method": "JTextField createYAxisField(int length){\r\n    JTextField field = new JTextField(length);\r\n    field.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));\r\n    field.setEditable(false);\r\n    field.setForeground(Color.black);\r\n    field.setBackground(getBackground());\r\n    field.setHorizontalAlignment(SwingConstants.RIGHT);\r\n    return field;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.IfControllerPanel.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    if (element instanceof IfController) {\r\n        IfController ifController = (IfController) element;\r\n        theCondition.setText(ifController.getCondition());\r\n        evaluateAll.setSelected(ifController.isEvaluateAll());\r\n        useExpression.setSelected(ifController.isUseExpression());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.HeaderPanel.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    GuiUtils.stopTableEditing(headerTable);\r\n    el.clear();\r\n    el.addTestElement(headerManager);\r\n    configureTestElement(el);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LdapExtClient.searchTest",
	"Comment": "filter the data in the ldap directory for the given search base",
	"Method": "NamingEnumeration<SearchResult> searchTest(DirContext dirContext,String searchBase,String searchFilter,int scope,long countlim,int timelim,String[] attrs,boolean retobj,boolean deref){\r\n    if (dirContext == null) {\r\n        throw new NamingException(CONTEXT_IS_NULL);\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"searchBase=\" + searchBase + \" scope=\" + scope + \" countlim=\" + countlim + \" timelim=\" + timelim + \" attrs=\" + JMeterUtils.unsplit(attrs, \",\") + \" retobj=\" + retobj + \" deref=\" + deref + \" filter=\" + searchFilter);\r\n    }\r\n    SearchControls searchcontrols = new SearchControls(scope, countlim, timelim, attrs, retobj, deref);\r\n    return dirContext.search(searchBase, searchFilter, searchcontrols);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RenderAsRegexp.actionPerformed",
	"Comment": "display the response as text or as rendered html. change the text on thebutton appropriate to the current display.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String command = e.getActionCommand();\r\n    if ((sampleResult != null) && (REGEXP_TESTER_COMMAND.equals(command))) {\r\n        String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);\r\n        executeAndShowRegexpTester(response);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleSaveConfiguration.getterName",
	"Comment": "convert a config name to the method name of the getter.the getter method returns a boolean.",
	"Method": "String getterName(String configName){\r\n    return CONFIG_GETTER_PREFIX + configName;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RenderAsXPath.actionPerformed",
	"Comment": "display the response as text or as rendered html. change the text on thebutton appropriate to the current display.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String command = e.getActionCommand();\r\n    if ((sampleResult != null) && (XPATH_TESTER_COMMAND.equals(command))) {\r\n        String response = xmlDataField.getText();\r\n        XPathExtractor extractor = new XPathExtractor();\r\n        xmlConfPanel.modifyTestElement(extractor);\r\n        extractor.setFragment(getFragment.isSelected());\r\n        executeAndShowXPathTester(response, extractor);\r\n    }\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.setProperty",
	"Comment": "set property to given value.specifying a null value will cause the property to be cleared",
	"Method": "String setProperty(String name,String value){\r\n    final PrivilegedAction<String> action;\r\n    if (value != null)\r\n        action = new PrivilegedAction<String>() {\r\n            public String run() {\r\n                return System.setProperty(name, value);\r\n            }\r\n        };\r\n    else\r\n        action = new PrivilegedAction<String>() {\r\n            public String run() {\r\n                return System.clearProperty(name);\r\n            }\r\n        };\r\n    return AccessController.doPrivileged(action);\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.setProperty",
	"Comment": "set property to given value.specifying a null value will cause the property to be cleared",
	"Method": "String setProperty(String name,String value){\r\n    return System.setProperty(name, value);\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.setProperty",
	"Comment": "set property to given value.specifying a null value will cause the property to be cleared",
	"Method": "String setProperty(String name,String value){\r\n    return System.clearProperty(name);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.ActionRouter.removePostActionListener",
	"Comment": "allows an actionlistener to be removed from receiving notifications of acommand being executed after the command has executed.",
	"Method": "void removePostActionListener(Class<?> action,ActionListener listener){\r\n    removeActionListener(action, listener, postActionListeners);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.XPathAssertion.getXPathString",
	"Comment": "get the xpath string that will be used in matching the document",
	"Method": "String getXPathString(){\r\n    return getPropertyAsString(XPATH_KEY, DEFAULT_XPATH);\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.XPath2Extractor.setFragment",
	"Comment": "should we return fragment as text, rather than text of fragment?",
	"Method": "void setFragment(boolean selected){\r\n    setProperty(FRAGMENT, selected, false);\r\n}"
}, {
	"Path": "com.jfinal.i18n.I18n.use",
	"Comment": "using the base name and locale to get the res object, which is used to get i18n message value from the resource file.",
	"Method": "Res use(String baseName,String locale,Res use,String baseName,Locale locale,Res use,String locale,Res use){\r\n    return use(defaultBaseName, defaultLocale);\r\n}"
}, {
	"Path": "org.apache.jorphan.reflect.Functor.invoke",
	"Comment": "invoke the method with the provided parameters.the invokee must have been provided in the constructor.",
	"Method": "Object invoke(Object invoke,Object p_invokee,Object invoke,Object[] p_args,Object invoke,Object p_invokee,Object[] p_args){\r\n    return doInvoke(clazz != null ? clazz : p_invokee.getClass(), invokee != null ? invokee : p_invokee, args != null ? args : p_args);\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.bufferSize",
	"Comment": "get the configured buffer sizethe default buffer size is 8,192 bytes",
	"Method": "HttpRequest bufferSize(int size,int bufferSize){\r\n    return bufferSize;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.tree.JMeterTreeModel.getNodesOfType",
	"Comment": "returns a list of tree nodes that hold objects of the given class type.if none are found, an empty list is returned.",
	"Method": "List<JMeterTreeNode> getNodesOfType(Class<?> type){\r\n    List<JMeterTreeNode> nodeList = new LinkedList();\r\n    traverseAndFind(type, (JMeterTreeNode) this.getRoot(), nodeList);\r\n    return nodeList;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.control.gui.JMSSubscriberGui.stateChanged",
	"Comment": "when the state of a widget changes, it will notify the gui. the methodthen enables or disables certain parameters.",
	"Method": "void stateChanged(ChangeEvent event){\r\n    if (event.getSource() == useProperties) {\r\n        final boolean isUseProperties = useProperties.isSelected();\r\n        jndiICF.setEnabled(!isUseProperties);\r\n        urlField.setEnabled(!isUseProperties);\r\n        useAuth.setEnabled(!isUseProperties);\r\n    } else if (event.getSource() == useAuth) {\r\n        jmsUser.setEnabled(useAuth.isSelected() && useAuth.isEnabled());\r\n        jmsPwd.setEnabled(useAuth.isSelected() && useAuth.isEnabled());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components",
	"Method": "void modifyTestElement(TestElement te){\r\n    te.clear();\r\n    super.configureTestElement(te);\r\n    te.setProperty(SmtpSampler.SERVER, smtpPanel.getServer());\r\n    te.setProperty(SmtpSampler.SERVER_PORT, smtpPanel.getPort());\r\n    te.setProperty(SmtpSampler.SERVER_TIMEOUT, smtpPanel.getTimeout(), \"\");\r\n    te.setProperty(SmtpSampler.SERVER_CONNECTION_TIMEOUT, smtpPanel.getConnectionTimeout(), \"\");\r\n    te.setProperty(SmtpSampler.MAIL_FROM, smtpPanel.getMailFrom());\r\n    te.setProperty(SmtpSampler.MAIL_REPLYTO, smtpPanel.getMailReplyTo());\r\n    te.setProperty(SmtpSampler.RECEIVER_TO, smtpPanel.getReceiverTo());\r\n    te.setProperty(SmtpSampler.RECEIVER_CC, smtpPanel.getReceiverCC());\r\n    te.setProperty(SmtpSampler.RECEIVER_BCC, smtpPanel.getReceiverBCC());\r\n    te.setProperty(SmtpSampler.SUBJECT, smtpPanel.getSubject());\r\n    te.setProperty(SmtpSampler.SUPPRESS_SUBJECT, Boolean.toString(smtpPanel.isSuppressSubject()));\r\n    te.setProperty(SmtpSampler.INCLUDE_TIMESTAMP, Boolean.toString(smtpPanel.isIncludeTimestamp()));\r\n    te.setProperty(SmtpSampler.MESSAGE, smtpPanel.getBody());\r\n    te.setProperty(SmtpSampler.PLAIN_BODY, Boolean.toString(smtpPanel.isPlainBody()));\r\n    te.setProperty(SmtpSampler.ATTACH_FILE, smtpPanel.getAttachments());\r\n    SecuritySettingsPanel secPanel = smtpPanel.getSecuritySettingsPanel();\r\n    secPanel.modifyTestElement(te);\r\n    te.setProperty(SmtpSampler.USE_EML, smtpPanel.isUseEmlMessage());\r\n    te.setProperty(SmtpSampler.EML_MESSAGE_TO_SEND, smtpPanel.getEmlMessage());\r\n    te.setProperty(SmtpSampler.USE_AUTH, Boolean.toString(smtpPanel.isUseAuth()));\r\n    te.setProperty(SmtpSampler.PASSWORD, smtpPanel.getPassword());\r\n    te.setProperty(SmtpSampler.USERNAME, smtpPanel.getUsername());\r\n    te.setProperty(SmtpSampler.MESSAGE_SIZE_STATS, Boolean.toString(smtpPanel.isMessageSizeStatistics()));\r\n    te.setProperty(SmtpSampler.ENABLE_DEBUG, Boolean.toString(smtpPanel.isEnableDebug()));\r\n    te.setProperty(smtpPanel.getHeaderFields());\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.Model._getAttrs",
	"Comment": "return attribute map.\tdanger! the update method will ignore the attribute if you change it directly.\tyou must use set method to change attribute that update method can handle it.",
	"Method": "Map<String, Object> _getAttrs(){\r\n    return attrs;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.utils.MetricUtils.isSuccessCode",
	"Comment": "determine if the http status code is successful or not i.e. in range 200to 399 inclusive",
	"Method": "boolean isSuccessCode(String codeAsString,boolean isSuccessCode,int code){\r\n    return code >= 200 && code <= 399;\r\n}"
}, {
	"Path": "org.apache.jorphan.util.JOrphanUtils.replaceAllWithRegex",
	"Comment": "replace in source all matches of regex by replacement taking into account case if casesensitive is true",
	"Method": "Object[] replaceAllWithRegex(String source,String regex,String replacement,boolean caseSensitive){\r\n    java.util.regex.Pattern pattern = caseSensitive ? java.util.regex.Pattern.compile(regex) : java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.CASE_INSENSITIVE);\r\n    final String replacementQuoted = Matcher.quoteReplacement(replacement);\r\n    Matcher matcher = pattern.matcher(source);\r\n    int totalReplaced = 0;\r\n    StringBuffer result = new StringBuffer();\r\n    while (matcher.find()) {\r\n        matcher.appendReplacement(result, replacementQuoted);\r\n        totalReplaced++;\r\n    }\r\n    matcher.appendTail(result);\r\n    return new Object[] { result.toString(), totalReplaced };\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.What.getActionNames",
	"Comment": "provide the list of action names that are available in this command.",
	"Method": "Set<String> getActionNames(){\r\n    return commandSet;\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterThread.stop",
	"Comment": "set running flag to false which will interrupt jmeterthread on next flag test.this is a clean shutdown.",
	"Method": "void stop(){\r\n    running = false;\r\n    log.info(\"Stopping: {}\", threadName);\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.XPath2Extractor.getMatchNumber",
	"Comment": "return which match to use. this can be any positive number, indicating theexact match to use, or 0, which is interpreted as meaning random.",
	"Method": "int getMatchNumber(){\r\n    return getPropertyAsInt(MATCH_NUMBER, DEFAULT_VALUE);\r\n}"
}, {
	"Path": "org.apache.jmeter.JMeterVersionTest.testEclipse",
	"Comment": "check eclipse.classpath contains the jars declared in build.properties",
	"Method": "void testEclipse(){\r\n    final BufferedReader eclipse = new BufferedReader(new FileReader(getFileFromHome(\"eclipse.classpath\")));\r\n    final Pattern p = Pattern.compile(\"\\\\s+<classpathentry kind=\\\"lib\\\" path=\\\"lib/(?:api/)?(.+?)-([^-]+(-b\\\\d+|-BETA\\\\d)?)\\\\.jar\\\"/>\");\r\n    final Pattern versionPat = Pattern.compile(\"\\\\$\\\\{(.+)\\\\.version\\\\}\");\r\n    String line;\r\n    final ArrayList<String> toRemove = new ArrayList();\r\n    while ((line = eclipse.readLine()) != null) {\r\n        final Matcher m = p.matcher(line);\r\n        if (m.matches()) {\r\n            String jar = m.group(1);\r\n            String version = m.group(2);\r\n            if (jar.endsWith(\"-jdk15on\")) {\r\n                jar = jar.replace(\"-jdk15on\", \"\");\r\n            } else if (jar.equals(\"commons-jexl\") && version.startsWith(\"2\")) {\r\n                jar = \"commons-jexl2\";\r\n            } else if (jar.equals(\"spock-core-1.0-groovy\")) {\r\n                jar = \"spock-core\";\r\n                version = \"1.0-groovy-2.4\";\r\n            } else if (jar.equals(\"Saxon-HE-9.8.0\")) {\r\n                jar = \"Saxon-HE\";\r\n                version = \"9.8.0-12\";\r\n            } else {\r\n                String tmp = JAR_TO_BUILD_PROP.get(jar);\r\n                if (tmp != null) {\r\n                    jar = tmp;\r\n                }\r\n            }\r\n            String expected = versions.get(jar);\r\n            if (expected == null) {\r\n                final String message = \"Didn't find version for jar name extracted by regexp, jar name extracted:\" + jar + \", version extracted:\" + version + \", current line:\" + line;\r\n                System.err.println(message);\r\n                fail(message);\r\n            }\r\n            final Matcher mp = versionPat.matcher(expected);\r\n            if (mp.matches()) {\r\n                String key = mp.group(1);\r\n                expected = versions.get(key);\r\n                toRemove.add(key);\r\n            }\r\n            propNames.remove(jar);\r\n            if (expected == null) {\r\n                fail(\"Versions list does not contain: \" + jar);\r\n            } else {\r\n                if (!version.equals(expected)) {\r\n                    assertEquals(jar, version, expected);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    propNames.removeAll(toRemove);\r\n    eclipse.close();\r\n    if (propNames.size() > 0) {\r\n        fail(\"Should have no names left: \" + Arrays.toString(propNames.toArray()) + \". Check eclipse.classpath\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    servername.setText(element.getPropertyAsString(LDAPSampler.SERVERNAME));\r\n    port.setText(element.getPropertyAsString(LDAPSampler.PORT));\r\n    rootdn.setText(element.getPropertyAsString(LDAPSampler.ROOTDN));\r\n    CardLayout cl = (CardLayout) (cards.getLayout());\r\n    final String testType = element.getPropertyAsString(LDAPSampler.TEST);\r\n    if (testType.equals(LDAPSampler.ADD)) {\r\n        addTest.setSelected(true);\r\n        add.setText(element.getPropertyAsString(LDAPSampler.BASE_ENTRY_DN));\r\n        tableAddPanel.configure((TestElement) element.getProperty(LDAPSampler.ARGUMENTS).getObjectValue());\r\n        cl.show(cards, \"Add\");\r\n    } else if (testType.equals(LDAPSampler.MODIFY)) {\r\n        modifyTest.setSelected(true);\r\n        modify.setText(element.getPropertyAsString(LDAPSampler.BASE_ENTRY_DN));\r\n        tableModifyPanel.configure((TestElement) element.getProperty(LDAPSampler.ARGUMENTS).getObjectValue());\r\n        cl.show(cards, \"Modify\");\r\n    } else if (testType.equals(LDAPSampler.DELETE)) {\r\n        deleteTest.setSelected(true);\r\n        delete.setText(element.getPropertyAsString(LDAPSampler.DELETE));\r\n        cl.show(cards, \"Delete\");\r\n    } else if (testType.equals(LDAPSampler.SEARCHBASE)) {\r\n        searchTest.setSelected(true);\r\n        searchbase.setText(element.getPropertyAsString(LDAPSampler.SEARCHBASE));\r\n        searchfilter.setText(element.getPropertyAsString(LDAPSampler.SEARCHFILTER));\r\n        cl.show(cards, \"Search\");\r\n    }\r\n    if (element.getPropertyAsBoolean(LDAPSampler.USER_DEFINED)) {\r\n        userDefined.setSelected(true);\r\n    } else {\r\n        userDefined.setSelected(false);\r\n        cl.show(cards, \"\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.util.CPSPauser.pause",
	"Comment": "pause for an appropriate time according to the number of bytes being transferred.",
	"Method": "void pause(int bytes){\r\n    long sleepMS = (bytes * MS_PER_SEC) / charactersPerSecond;\r\n    int sleepNS = Long.valueOf(sleepMS % NS_PER_MS).intValue();\r\n    try {\r\n        if (sleepMS > 0 || sleepNS > 0) {\r\n            Thread.sleep(sleepMS, sleepNS);\r\n        }\r\n    } catch (InterruptedException ignored) {\r\n        Thread.currentThread().interrupt();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.extractClientContextAfterSample",
	"Comment": "store in jmeter variables the usertoken so that the ssl context is reusedsee bug 57804",
	"Method": "void extractClientContextAfterSample(JMeterVariables jMeterVariables,HttpContext localContext){\r\n    Object userToken = localContext.getAttribute(HttpClientContext.USER_TOKEN);\r\n    if (userToken != null) {\r\n        log.debug(\"Extracted from HttpContext user token:{} storing it as JMeter variable:{}\", userToken, JMETER_VARIABLE_USER_TOKEN);\r\n        if (jMeterVariables != null) {\r\n            jMeterVariables.putObject(JMETER_VARIABLE_USER_TOKEN, userToken);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.util.keystore.JmeterKeyStore.load",
	"Comment": "process the input stream and try to read the keys from the store",
	"Method": "void load(InputStream is,String pword){\r\n    char[] pw = pword == null ? null : pword.toCharArray();\r\n    store.load(is, pw);\r\n    List<String> aliasesList = new ArrayList();\r\n    this.privateKeyByAlias = new HashMap();\r\n    this.certsByAlias = new HashMap();\r\n    if (null != is) {\r\n        PrivateKey privateKey = null;\r\n        int index = 0;\r\n        Enumeration<String> aliases = store.aliases();\r\n        while (aliases.hasMoreElements()) {\r\n            String alias = aliases.nextElement();\r\n            if (store.isKeyEntry(alias)) {\r\n                if (index >= startIndex && (endIndex == -1 || index <= endIndex)) {\r\n                    privateKey = (PrivateKey) store.getKey(alias, pw);\r\n                    if (null == privateKey) {\r\n                        throw new IOException(\"No key found for alias: \" + alias);\r\n                    }\r\n                    Certificate[] chain = store.getCertificateChain(alias);\r\n                    if (null == chain) {\r\n                        throw new IOException(\"No certificate chain found for alias: \" + alias);\r\n                    }\r\n                    aliasesList.add(alias);\r\n                    X509Certificate[] x509certs = new X509Certificate[chain.length];\r\n                    for (int i = 0; i < x509certs.length; i++) {\r\n                        x509certs[i] = (X509Certificate) chain[i];\r\n                    }\r\n                    privateKeyByAlias.put(alias, privateKey);\r\n                    certsByAlias.put(alias, x509certs);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n        if (null == privateKey) {\r\n            throw new IOException(\"No key(s) found\");\r\n        }\r\n        if (endIndex != -1 && index <= endIndex - startIndex && log.isWarnEnabled()) {\r\n            log.warn(\"Did not find as much aliases as configured in indexes Start={}, end={}, found={}\", startIndex, endIndex, certsByAlias.size());\r\n        }\r\n    }\r\n    this.names = aliasesList.toArray(new String[aliasesList.size()]);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPJavaImpl.setConnectionHeaders",
	"Comment": "extracts all the required headers for that particular url request andsets them in the httpurlconnection passed in",
	"Method": "void setConnectionHeaders(HttpURLConnection conn,URL u,HeaderManager headerManager,CacheManager cacheManager){\r\n    Header[] arrayOfHeaders = null;\r\n    if (headerManager != null) {\r\n        CollectionProperty headers = headerManager.getHeaders();\r\n        if (headers != null) {\r\n            int i = 0;\r\n            arrayOfHeaders = new Header[headers.size()];\r\n            for (JMeterProperty jMeterProperty : headers) {\r\n                Header header = (Header) jMeterProperty.getObjectValue();\r\n                String n = header.getName();\r\n                String v = header.getValue();\r\n                arrayOfHeaders[i++] = header;\r\n                conn.addRequestProperty(n, v);\r\n            }\r\n        }\r\n    }\r\n    if (cacheManager != null) {\r\n        cacheManager.setHeaders(conn, arrayOfHeaders, u);\r\n    }\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXChipViewSkin.createChip",
	"Comment": "these methods are called inside the chips items change listener",
	"Method": "void createChip(T item){\r\n    JFXChip<T> chip = null;\r\n    try {\r\n        if (getSkinnable().getChipFactory() != null) {\r\n            chip = getSkinnable().getChipFactory().apply(getSkinnable(), item);\r\n        } else {\r\n            chip = new JFXDefaultChip<T>(getSkinnable(), item);\r\n        }\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(\"can't create chip for item '\" + item + \"' make sure to override the string converter and return null if text input is not valid.\", e);\r\n    }\r\n    int size = root.getChildren().size();\r\n    root.getChildren().add(size - 1, chip);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.ModuleController.hasReplacementOccured",
	"Comment": "in gui mode replacement occurs when test startin non gui mode replacement occurs before test runs",
	"Method": "boolean hasReplacementOccured(){\r\n    return GuiPackage.getInstance() == null || isRunningVersion();\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RunningSample.getRatePerMin",
	"Comment": "returns the throughput associated to this sampler in requests per min.may be slightly skewed because it takes the timestamps of the first andlast samples as the total time passed, and the test may actually havestarted before that start time and ended after that end time.",
	"Method": "double getRatePerMin(){\r\n    if (counter == 0) {\r\n        return 0.0;\r\n    }\r\n    long howLongRunning = lastTime - firstTime;\r\n    if (howLongRunning == 0) {\r\n        return Double.MAX_VALUE;\r\n    }\r\n    return (double) counter / howLongRunning * 60000.0;\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Collections.toArray",
	"Comment": "marshal the elements from the given enumeration into an array of the given type.enumeration elements must be assignable to the type of the given array. the arrayreturned will be a different instance than the array given.",
	"Method": "A[] toArray(Enumeration<E> enumeration,A[] array){\r\n    ArrayList<A> elements = new ArrayList<A>();\r\n    while (enumeration.hasMoreElements()) {\r\n        elements.add(enumeration.nextElement());\r\n    }\r\n    return elements.toArray(array);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.getClassInstance",
	"Comment": "if the method is not able to create a new instance of theclass, it returns null and logs all the exceptions atwarning level.",
	"Method": "Object getClassInstance(String className,String label){\r\n    Object testclass = null;\r\n    if (className != null) {\r\n        Constructor<?> con = null;\r\n        Constructor<?> strCon = null;\r\n        Class<?> theclazz = null;\r\n        Object[] strParams = null;\r\n        Object[] params = null;\r\n        try {\r\n            theclazz = Thread.currentThread().getContextClassLoader().loadClass(className.trim());\r\n        } catch (ClassNotFoundException e) {\r\n            log.warn(\"ClassNotFoundException:: {}\", e.getMessage());\r\n        }\r\n        if (theclazz != null) {\r\n            try {\r\n                strCon = theclazz.getDeclaredConstructor(new Class[] { String.class });\r\n                if (label == null || label.length() == 0) {\r\n                    label = className;\r\n                }\r\n                if (strCon.getModifiers() == Modifier.PUBLIC) {\r\n                    strParams = new Object[] { label };\r\n                } else {\r\n                    strCon = null;\r\n                }\r\n            } catch (NoSuchMethodException e) {\r\n                log.info(\"Trying to find constructor with one String parameter returned error: {}\", e.getMessage());\r\n            }\r\n            try {\r\n                con = theclazz.getDeclaredConstructor(new Class[0]);\r\n                if (con != null) {\r\n                    params = new Object[] {};\r\n                }\r\n            } catch (NoSuchMethodException e) {\r\n                log.info(\"Trying to find empty constructor returned error: {}\", e.getMessage());\r\n            }\r\n            try {\r\n                if (strCon != null) {\r\n                    testclass = strCon.newInstance(strParams);\r\n                } else if (con != null) {\r\n                    testclass = con.newInstance(params);\r\n                } else {\r\n                    log.error(\"No empty constructor nor string constructor found for class:{}\", theclazz);\r\n                }\r\n            } catch (InvocationTargetException | IllegalAccessException | InstantiationException e) {\r\n                log.error(\"Error instantiating class:{}:{}\", theclazz, e.getMessage(), e);\r\n            }\r\n        }\r\n    }\r\n    return testclass;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.Proxy.addPageEncoding",
	"Comment": "add the page encoding of the sample result to the map with page encodings",
	"Method": "String addPageEncoding(SampleResult result){\r\n    String pageEncoding = null;\r\n    try {\r\n        pageEncoding = ConversionUtils.getEncodingFromContentType(result.getContentType());\r\n    } catch (IllegalCharsetNameException ex) {\r\n        log.warn(\"Unsupported charset detected in contentType:'{}', will continue processing with default charset\", result.getContentType(), ex);\r\n    }\r\n    if (pageEncoding != null) {\r\n        String urlWithoutQuery = getUrlWithoutQuery(result.getURL());\r\n        pageEncodings.put(urlWithoutQuery, pageEncoding);\r\n    }\r\n    return pageEncoding;\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterContext.getVariables",
	"Comment": "gives access to the jmeter variables for the current thread.",
	"Method": "JMeterVariables getVariables(){\r\n    return (variables != null) ? variables : JMeterContextService.getClientSideVariables();\r\n}"
}, {
	"Path": "org.apache.jmeter.util.JsseSSLManager.getContext",
	"Comment": "returns the sslcontext we are using. this is either a context per thread,or, for backwards compatibility, a single shared context.",
	"Method": "SSLContext getContext(){\r\n    if (SHARED_SESSION_CONTEXT) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Using shared SSL context for: {}\", Thread.currentThread().getName());\r\n        }\r\n        return this.defaultContext;\r\n    }\r\n    SSLContext sslContext = this.threadlocal.get();\r\n    if (sslContext == null) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Creating threadLocal SSL context for: {}\", Thread.currentThread().getName());\r\n        }\r\n        sslContext = createContext();\r\n        this.threadlocal.set(sslContext);\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Using threadLocal SSL context for: {}\", Thread.currentThread().getName());\r\n    }\r\n    return sslContext;\r\n}"
}, {
	"Path": "org.hibernate.jpamodelgen.test.util.TestUtil.getMetamodelClassFor",
	"Comment": "returns the static metamodel class for the specified entity.",
	"Method": "Class<?> getMetamodelClassFor(Class<?> entityClass){\r\n    assertNotNull(\"Class parameter cannot be null\", entityClass);\r\n    String metaModelClassName = entityClass.getName() + META_MODEL_CLASS_POSTFIX;\r\n    try {\r\n        URL outDirUrl = OUT_BASE_DIR.toURI().toURL();\r\n        URL[] urls = new URL[1];\r\n        urls[0] = outDirUrl;\r\n        URLClassLoader classLoader = new URLClassLoader(urls, TestUtil.class.getClassLoader());\r\n        return classLoader.loadClass(metaModelClassName);\r\n    } catch (Exception e) {\r\n        fail(metaModelClassName + \" was not generated.\");\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPJavaImpl.setPostHeaders",
	"Comment": "set request headers in preparation to opening a connection.",
	"Method": "void setPostHeaders(URLConnection conn){\r\n    postOrPutWriter = new PostWriter();\r\n    postOrPutWriter.setHeaders(conn, testElement);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.SelectTemplatesDialog.checkDirtyAndLoad",
	"Comment": "check if existing test plan has been modified and ask user what he wants to do if test plan is dirty. also ask user for parameters in case of customizable templates.",
	"Method": "void checkDirtyAndLoad(ActionEvent actionEvent){\r\n    final String selectedTemplate = templateList.getText();\r\n    final Template template = TemplateManager.getInstance().getTemplateByName(selectedTemplate);\r\n    if (template == null) {\r\n        return;\r\n    }\r\n    templateList.setValues(TemplateManager.getInstance().getTemplateNames());\r\n    final boolean isTestPlan = template.isTestPlan();\r\n    if (isTestPlan && !checkDirty(actionEvent)) {\r\n        return;\r\n    }\r\n    ActionRouter.getInstance().doActionNow(new ActionEvent(actionEvent.getSource(), actionEvent.getID(), ActionNames.STOP_THREAD));\r\n    final File parent = template.getParent();\r\n    File fileToCopy = parent != null ? new File(parent, template.getFileName()) : new File(JMeterUtils.getJMeterHome(), template.getFileName());\r\n    replaceTemplateParametersAndLoad(actionEvent, template, isTestPlan, fileToCopy);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.LoopControlPanel.actionPerformed",
	"Comment": "invoked when an action occurs. this implementation assumes that thetarget component is the infinite loops checkbox.",
	"Method": "void actionPerformed(ActionEvent event){\r\n    if (infinite.isSelected()) {\r\n        loops.setText(\"\");\r\n        loops.setEnabled(false);\r\n    } else {\r\n        loops.setEnabled(true);\r\n        FocusRequester.requestFocus(loops);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.AbstractJMeterGuiComponent.getDocAnchor",
	"Comment": "compute anchor value to find reference in documentation for a particular component",
	"Method": "String getDocAnchor(){\r\n    String label = JMeterUtils.getResString(getLabelResource(), new Locale(\"\", \"\"));\r\n    return label.replace(' ', '_');\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.gui.ThreadGroupGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement tg){\r\n    super.configureTestElement(tg);\r\n    if (tg instanceof AbstractThreadGroup) {\r\n        ((AbstractThreadGroup) tg).setSamplerController((LoopController) loopPanel.createTestElement());\r\n    }\r\n    tg.setProperty(AbstractThreadGroup.NUM_THREADS, threadInput.getText());\r\n    tg.setProperty(ThreadGroup.RAMP_TIME, rampInput.getText());\r\n    if (showDelayedStart) {\r\n        tg.setProperty(ThreadGroup.DELAYED_START, delayedStart.isSelected(), false);\r\n    }\r\n    tg.setProperty(new BooleanProperty(ThreadGroup.SCHEDULER, scheduler.isSelected()));\r\n    tg.setProperty(ThreadGroup.DURATION, duration.getText());\r\n    tg.setProperty(ThreadGroup.DELAY, delay.getText());\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.headers",
	"Comment": "set all headers found in given map where the keys are the header names andthe values are the header values",
	"Method": "HttpRequest headers(Map<String, String> headers,Map<String, List<String>> headers,String[] headers,String name){\r\n    final Map<String, List<String>> headers = headers();\r\n    if (headers == null || headers.isEmpty())\r\n        return EMPTY_STRINGS;\r\n    final List<String> values = headers.get(name);\r\n    if (values != null && !values.isEmpty())\r\n        return values.toArray(new String[values.size()]);\r\n    else\r\n        return EMPTY_STRINGS;\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDrawer.isClosing",
	"Comment": "this indicates whether or not the drawer is in the process of being hidden.",
	"Method": "boolean isClosing(){\r\n    boolean condition = hasMiniSize() ? resizeTo == getMiniDrawerSize() : translateTo == initTranslate.get();\r\n    return condition && translateTimer.isRunning();\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.DurationAssertion.getResult",
	"Comment": "returns the result of the assertion. here it checks whether the sampletook to long to be considered successful. if so an assertionresultcontaining a failuremessage will be returned. otherwise the returnedassertionresult will reflect the success of the sample.",
	"Method": "AssertionResult getResult(SampleResult response){\r\n    AssertionResult result = new AssertionResult(getName());\r\n    result.setFailure(false);\r\n    long duration = getAllowedDuration();\r\n    if (duration > 0) {\r\n        long responseTime = response.getTime();\r\n        if (responseTime > duration) {\r\n            result.setFailure(true);\r\n            Object[] arguments = { Long.valueOf(responseTime), Long.valueOf(duration) };\r\n            String message = // $NON-NLS-1$\r\n            MessageFormat.format(JMeterUtils.getResString(\"duration_assertion_failure\"), arguments);\r\n            result.setFailureMessage(message);\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.ThreadGroup.verifyThreadStopped",
	"Comment": "verify thread stopped and return true if stopped successfully",
	"Method": "boolean verifyThreadStopped(Thread thread){\r\n    boolean stopped = true;\r\n    if (thread != null && thread.isAlive()) {\r\n        try {\r\n            thread.join(WAIT_TO_DIE);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        if (thread.isAlive()) {\r\n            stopped = false;\r\n            if (log.isWarnEnabled()) {\r\n                log.warn(\"Thread won't exit: {}\", thread.getName());\r\n            }\r\n        }\r\n    }\r\n    return stopped;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.setError",
	"Comment": "provide a descriptive error for the test method. fora description of the difference between failure anderror, please refer to thejunit faq",
	"Method": "void setError(String error){\r\n    setProperty(ERROR, error);\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXListCell.makeChildrenTransparent",
	"Comment": "this method is used to set some nodes in cell content as mouse transparent nodesso clicking on them will trigger the ripple effect.",
	"Method": "void makeChildrenTransparent(){\r\n    for (Node child : getChildren()) {\r\n        if (child instanceof Label) {\r\n            Set<Node> texts = child.lookupAll(\"Text\");\r\n            for (Node text : texts) {\r\n                text.setMouseTransparent(true);\r\n            }\r\n        } else if (child instanceof Shape) {\r\n            child.setMouseTransparent(true);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.XPathExtractor.getFragment",
	"Comment": "should we return fragment as text, rather than text of fragment?",
	"Method": "boolean getFragment(){\r\n    return getPropertyAsBoolean(FRAGMENT, false);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.graph.impl.ResponseTimePerSampleGraphConsumer.createGroupInfo",
	"Comment": "creates the group info for elapsed time percentile depending on jmeterproperties.",
	"Method": "GroupInfo createGroupInfo(String propertyKey,int defaultValue){\r\n    int property = JMeterUtils.getPropDefault(propertyKey, defaultValue);\r\n    PercentileAggregatorFactory factory = new PercentileAggregatorFactory();\r\n    factory.setPercentileIndex(property);\r\n    StaticSeriesSelector seriesSelector = new StaticSeriesSelector();\r\n    seriesSelector.setSeriesName(String.format(RESPONSE_TIME_PER_SAMPLE_SERIES_FORMAT, Integer.valueOf(property)));\r\n    return new // We include Transaction Controller results\r\n    GroupInfo(// We include Transaction Controller results\r\n    factory, seriesSelector, new ElapsedTimeValueSelector(false), false, false);\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.property.AbstractProperty.normalizeMap",
	"Comment": "given a map, it converts the map into a collection of jmeterpropertyobjects, appropriate for a mapproperty object.",
	"Method": "Map<String, JMeterProperty> normalizeMap(Map<?, ?> coll){\r\n    try {\r\n        @SuppressWarnings(\"unchecked\")\r\n        Map<String, JMeterProperty> newColl = coll.getClass().getDeclaredConstructor().newInstance();\r\n        for (Map.Entry<?, ?> entry : coll.entrySet()) {\r\n            Object key = entry.getKey();\r\n            Object prop = entry.getValue();\r\n            String item = null;\r\n            if (key instanceof String) {\r\n                item = (String) key;\r\n            } else {\r\n                if (key != null) {\r\n                    log.error(\"Expected key type String, found: {}\", key.getClass());\r\n                    item = key.toString();\r\n                }\r\n            }\r\n            newColl.put(item, convertObject(prop));\r\n        }\r\n        return newColl;\r\n    } catch (Exception e) {\r\n        log.error(\"Cannot create copy of {}\", coll.getClass(), e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler.setArguments",
	"Comment": "sets the arguments attribute of the ldapconfig object this will collectvalues from the table for user defined test case",
	"Method": "void setArguments(Arguments value){\r\n    setProperty(new TestElementProperty(ARGUMENTS, value));\r\n}"
}, {
	"Path": "org.apache.jorphan.util.Converter.getBoolean",
	"Comment": "convert object to boolean, or defaultvalue if conversionfailed",
	"Method": "boolean getBoolean(Object o,boolean getBoolean,Object o,boolean defaultValue){\r\n    if (o == null) {\r\n        return defaultValue;\r\n    } else if (o instanceof Boolean) {\r\n        return ((Boolean) o).booleanValue();\r\n    }\r\n    return Boolean.parseBoolean(o.toString());\r\n}"
}, {
	"Path": "com.jfoenix.responsive.JFXResponsiveHandler.scanAllNodes",
	"Comment": "scans all nodes in the scene and apply the css pseduoclass to them.",
	"Method": "void scanAllNodes(Parent parent,PseudoClass pseudoClass){\r\n    parent.getChildrenUnmodifiable().addListener(new ListChangeListener<Node>() {\r\n        @Override\r\n        public void onChanged(javafx.collections.ListChangeListener.Change<? extends Node> c) {\r\n            while (c.next()) {\r\n                if (!c.wasPermutated() && !c.wasUpdated()) {\r\n                    for (Node addedNode : c.getAddedSubList()) {\r\n                        if (addedNode instanceof Parent) {\r\n                            scanAllNodes((Parent) addedNode, pseudoClass);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    for (Node component : parent.getChildrenUnmodifiable()) {\r\n        if (component instanceof Pane) {\r\n            ((Pane) component).getChildren().addListener(new ListChangeListener<Node>() {\r\n                @Override\r\n                public void onChanged(javafx.collections.ListChangeListener.Change<? extends Node> c) {\r\n                    while (c.next()) {\r\n                        if (!c.wasPermutated() && !c.wasUpdated()) {\r\n                            for (Node addedNode : c.getAddedSubList()) {\r\n                                if (addedNode instanceof Parent) {\r\n                                    scanAllNodes((Parent) addedNode, pseudoClass);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            scanAllNodes((Pane) component, pseudoClass);\r\n        } else if (component instanceof ScrollPane) {\r\n            ((ScrollPane) component).contentProperty().addListener((o, oldVal, newVal) -> {\r\n                scanAllNodes((Parent) newVal, pseudoClass);\r\n            });\r\n            if (((ScrollPane) component).getContent() instanceof Parent) {\r\n                scanAllNodes((Parent) ((ScrollPane) component).getContent(), pseudoClass);\r\n            }\r\n        } else if (component instanceof Control) {\r\n            component.pseudoClassStateChanged(PSEUDO_CLASS_EX_SMALL, pseudoClass == PSEUDO_CLASS_EX_SMALL);\r\n            component.pseudoClassStateChanged(PSEUDO_CLASS_SMALL, pseudoClass == PSEUDO_CLASS_SMALL);\r\n            component.pseudoClassStateChanged(PSEUDO_CLASS_MEDIUM, pseudoClass == PSEUDO_CLASS_MEDIUM);\r\n            component.pseudoClassStateChanged(PSEUDO_CLASS_LARGE, pseudoClass == PSEUDO_CLASS_LARGE);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.jfoenix.responsive.JFXResponsiveHandler.scanAllNodes",
	"Comment": "scans all nodes in the scene and apply the css pseduoclass to them.",
	"Method": "void scanAllNodes(Parent parent,PseudoClass pseudoClass){\r\n    while (c.next()) {\r\n        if (!c.wasPermutated() && !c.wasUpdated()) {\r\n            for (Node addedNode : c.getAddedSubList()) {\r\n                if (addedNode instanceof Parent) {\r\n                    scanAllNodes((Parent) addedNode, pseudoClass);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.jfoenix.responsive.JFXResponsiveHandler.scanAllNodes",
	"Comment": "scans all nodes in the scene and apply the css pseduoclass to them.",
	"Method": "void scanAllNodes(Parent parent,PseudoClass pseudoClass){\r\n    while (c.next()) {\r\n        if (!c.wasPermutated() && !c.wasUpdated()) {\r\n            for (Node addedNode : c.getAddedSubList()) {\r\n                if (addedNode instanceof Parent) {\r\n                    scanAllNodes((Parent) addedNode, pseudoClass);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG93Dialect.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return support.getDWithinSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.HttpRequestHdr.getUrl",
	"Comment": "returns the url string extracted from the first line of the client request.",
	"Method": "String getUrl(){\r\n    return url;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getAllMinTime",
	"Comment": "get the minimal elapsed time for requests within sliding window",
	"Method": "double getAllMinTime(){\r\n    return allResponsesStats.getMin();\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.WhileControllerGui.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    setLayout(new BorderLayout(0, 5));\r\n    setBorder(makeBorder());\r\n    add(makeTitlePanel(), BorderLayout.NORTH);\r\n    JPanel mainPanel = new JPanel(new BorderLayout());\r\n    mainPanel.add(createConditionPanel(), BorderLayout.NORTH);\r\n    add(mainPanel, BorderLayout.CENTER);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.Save.checkAcceptableForTestFragment",
	"Comment": "check nodes does not contain a node of type testplan or threadgroup",
	"Method": "boolean checkAcceptableForTestFragment(JMeterTreeNode[] nodes){\r\n    return Arrays.stream(nodes).map(DefaultMutableTreeNode::getUserObject).noneMatch(o -> o instanceof ThreadGroup || o instanceof TestPlan);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisSupport.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return \"ST_DWithin(\" + columnName + \",?,?)\";\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.TestHC4CookieManager.testRootPath0",
	"Comment": "tests explicit root path with a trivial url fetch from the domain",
	"Method": "void testRootPath0(){\r\n    URL url = new URL(\"http://d.e.f/goo.html\");\r\n    man.addCookieFromHeader(\"test=moo;path=/\", url);\r\n    String s = man.getCookieHeaderForURL(new URL(\"http://d.e.f/\"));\r\n    assertNotNull(s);\r\n    assertEquals(\"test=moo\", s);\r\n}"
}, {
	"Path": "org.apache.jmeter.reporters.gui.ResultSaverGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement te){\r\n    super.configureTestElement(te);\r\n    ResultSaver resultSaver = (ResultSaver) te;\r\n    resultSaver.setFilename(filename.getText());\r\n    resultSaver.setErrorsOnly(errorsOnly.isSelected());\r\n    resultSaver.setSuccessOnly(successOnly.isSelected());\r\n    resultSaver.setSkipSuffix(skipSuffix.isSelected());\r\n    resultSaver.setSkipAutoNumber(skipAutoNumber.isSelected());\r\n    resultSaver.setIgnoreTC(ignoreTC.isSelected());\r\n    resultSaver.setAddTimestamp(addTimestamp.isSelected());\r\n    resultSaver.setVariableName(variableName.getText());\r\n    resultSaver.setNumberPadLength(numberPadLength.getText());\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.property.AbstractProperty.normalizeList",
	"Comment": "convert a collection of objects into jmeterproperty objects.",
	"Method": "Collection<JMeterProperty> normalizeList(Collection<?> coll){\r\n    try {\r\n        @SuppressWarnings(\"unchecked\")\r\n        Collection<JMeterProperty> newColl = coll.getClass().getDeclaredConstructor().newInstance();\r\n        for (Object item : coll) {\r\n            newColl.add(convertObject(item));\r\n        }\r\n        return newColl;\r\n    } catch (Exception e) {\r\n        log.error(\"Cannot create copy of {}\", coll.getClass(), e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.arrayToList",
	"Comment": "represents array of any type as list of objects so we can easily iterate over it",
	"Method": "List<Object> arrayToList(Object array){\r\n    if (array instanceof Object[])\r\n        return Arrays.asList((Object[]) array);\r\n    List<Object> result = new ArrayList<Object>();\r\n    if (array instanceof int[])\r\n        for (int value : (int[]) array) result.add(value);\r\n    else if (array instanceof boolean[])\r\n        for (boolean value : (boolean[]) array) result.add(value);\r\n    else if (array instanceof long[])\r\n        for (long value : (long[]) array) result.add(value);\r\n    else if (array instanceof float[])\r\n        for (float value : (float[]) array) result.add(value);\r\n    else if (array instanceof double[])\r\n        for (double value : (double[]) array) result.add(value);\r\n    else if (array instanceof short[])\r\n        for (short value : (short[]) array) result.add(value);\r\n    else if (array instanceof byte[])\r\n        for (byte value : (byte[]) array) result.add(value);\r\n    else if (array instanceof char[])\r\n        for (char value : (char[]) array) result.add(value);\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.TestCompiler.initialize",
	"Comment": "clears the pairing set called by standardjmeterengine at the start of atest run.",
	"Method": "void initialize(){\r\n    synchronized (PAIRING) {\r\n        PAIRING.clear();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.gui.AbstractVisualizer.setModel",
	"Comment": "provides extending classes the opportunity to set the resultcollectormodel for the visualizer. this is useful to allow maximum reuse of themethods from abstractvisualizer.",
	"Method": "void setModel(ResultCollector collector){\r\n    this.collector = collector;\r\n}"
}, {
	"Path": "org.bytedeco.javacv.IPCameraFrameGrabber.releaseDecoded",
	"Comment": "ensures that if the decoded image is not null that it gets released and set to null.if the image was not set to null then trying to release a null pointer will causeasegfault.",
	"Method": "void releaseDecoded(){\r\n    if (decoded != null) {\r\n        decoded.release();\r\n        decoded = null;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.isEmpty",
	"Comment": "if the hashtree is empty, true is returned, false otherwise.",
	"Method": "boolean isEmpty(){\r\n    return data.isEmpty();\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.addColumnValue",
	"Comment": "adds a value into the data set at the current row, using a column name tofind the column in which to insert the new value.",
	"Method": "void addColumnValue(String column,Object value){\r\n    List<Object> tempList;\r\n    if ((tempList = data.get(column)) == null) {\r\n        tempList = new ArrayList();\r\n        data.put(column, tempList);\r\n    }\r\n    int s = tempList.size();\r\n    if (currentPos == -1) {\r\n        currentPos = size;\r\n    }\r\n    if (currentPos >= size) {\r\n        size = currentPos + 1;\r\n    }\r\n    while (currentPos > s) {\r\n        s++;\r\n        tempList.add(null);\r\n    }\r\n    if (currentPos == s) {\r\n        tempList.add(value);\r\n    } else {\r\n        tempList.set(currentPos, value);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.services.FileServer.getReader",
	"Comment": "return bufferedreader handling close if eof reached and recycle is trueand ignoring first line if ignorefirstline is true",
	"Method": "BufferedReader getReader(String alias,boolean recycle,boolean ignoreFirstLine){\r\n    FileEntry fileEntry = files.get(alias);\r\n    if (fileEntry != null) {\r\n        BufferedReader reader;\r\n        if (fileEntry.inputOutputObject == null) {\r\n            reader = createBufferedReader(fileEntry);\r\n            fileEntry.inputOutputObject = reader;\r\n            if (ignoreFirstLine) {\r\n                reader.readLine();\r\n            }\r\n        } else if (!(fileEntry.inputOutputObject instanceof Reader)) {\r\n            throw new IOException(\"File \" + alias + \" already in use\");\r\n        } else {\r\n            reader = (BufferedReader) fileEntry.inputOutputObject;\r\n            if (recycle) {\r\n                reader.mark(1);\r\n                int peek = reader.read();\r\n                if (peek == -1) {\r\n                    reader.close();\r\n                    reader = createBufferedReader(fileEntry);\r\n                    fileEntry.inputOutputObject = reader;\r\n                    if (ignoreFirstLine) {\r\n                        reader.readLine();\r\n                    }\r\n                } else {\r\n                    reader.reset();\r\n                }\r\n            }\r\n        }\r\n        return reader;\r\n    } else {\r\n        throw new IOException(\"File never reserved: \" + alias);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.Start.keepOnlySelectedThreadGroupsInHashTree",
	"Comment": "keep only thread groups in testtree that are in threadgroupstokeep",
	"Method": "void keepOnlySelectedThreadGroupsInHashTree(HashTree testTree,AbstractThreadGroup[] threadGroupsToKeep){\r\n    LinkedList<Object> copyList = new LinkedList(testTree.list());\r\n    for (Object o : copyList) {\r\n        TestElement item = (TestElement) o;\r\n        if (o instanceof AbstractThreadGroup) {\r\n            if (!isInThreadGroups(item, threadGroupsToKeep)) {\r\n                try {\r\n                    item.setEnabled(false);\r\n                    testTree.remove(item);\r\n                } finally {\r\n                    item.setEnabled(true);\r\n                }\r\n            } else {\r\n                keepOnlySelectedThreadGroupsInHashTree(testTree.getTree(item), threadGroupsToKeep);\r\n            }\r\n        } else {\r\n            keepOnlySelectedThreadGroupsInHashTree(testTree.getTree(item), threadGroupsToKeep);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.SizeAssertion.setCompOper",
	"Comment": "set the operator used for the assertion. has to be one of equal1notequal2greaterthan3lessthan4greaterthanequal5lessthanequal6",
	"Method": "void setCompOper(int operator){\r\n    setProperty(new IntegerProperty(OPERATOR_KEY, operator));\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.BackendListener.whoAmI",
	"Comment": "generate a string identifier of this instance for debugging purposes.",
	"Method": "String whoAmI(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(Thread.currentThread().getName());\r\n    sb.append(\"@\");\r\n    sb.append(Integer.toHexString(hashCode()));\r\n    sb.append(\"-\");\r\n    sb.append(getName());\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.BeanInfoSupport.property",
	"Comment": "get the property descriptor for the property of the given name.sets the guitype to the provided enum.",
	"Method": "PropertyDescriptor property(String name,PropertyDescriptor property,String name,TypeEditor editor,PropertyDescriptor property,String name,Class<? extends Enum<?>> enumClass){\r\n    PropertyDescriptor property = property(name);\r\n    if (property != null) {\r\n        property.setValue(GenericTestBeanCustomizer.GUITYPE, enumClass);\r\n        property.setValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE, getBeanDescriptor().getValue(RESOURCE_BUNDLE));\r\n    }\r\n    return property;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.HeaderManager.getHeaders",
	"Comment": "get the collection of jmeterproperty entries representing the headers.",
	"Method": "CollectionProperty getHeaders(){\r\n    return (CollectionProperty) getProperty(HEADERS);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.HttpReplyHdr.formErrorBody",
	"Comment": "private! builds an http document describing a headers reason.",
	"Method": "String formErrorBody(String error,String description){\r\n    StringBuilder out = new StringBuilder();\r\n    out.append(\"<HTML><HEAD><TITLE>\");\r\n    out.append(error);\r\n    out.append(\"<\/TITLE><\/HEAD>\");\r\n    out.append(\"<BODY><H2>\").append(error).append(\"<\/H2>\\n\");\r\n    out.append(\"<\/P><\/H3>\");\r\n    out.append(description);\r\n    out.append(\"<\/BODY><\/HTML>\");\r\n    return out.toString();\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getOkMinTime",
	"Comment": "get the minimal elapsed time for requests within sliding window",
	"Method": "double getOkMinTime(){\r\n    return okResponsesStats.getMin();\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.ArgumentsPanel.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    if (el instanceof Arguments) {\r\n        tableModel.clearData();\r\n        for (JMeterProperty jMeterProperty : (Arguments) el) {\r\n            Argument arg = (Argument) jMeterProperty.getObjectValue();\r\n            tableModel.addRow(arg);\r\n        }\r\n    }\r\n    checkButtonsStatus();\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG91Dialect.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return support.getDWithinSQL(columnName);\r\n}"
}, {
	"Path": "com.jfinal.render.FreeMarkerRender.getConfiguration",
	"Comment": "freemarker can not load freemarker.properies automatically",
	"Method": "Configuration getConfiguration(){\r\n    return config;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.CacheManager.createCacheManagerProxy",
	"Comment": "create a cache manager that share the underlying cache of the current oneit allows to use the same cache in different threads which does not inherit from each other",
	"Method": "CacheManager createCacheManagerProxy(){\r\n    return new CacheManager(getCache(), this.useExpires);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LDAPArguments.addEmptyArgument",
	"Comment": "add a new empty argument to the list. the new argument will have theempty string as its name and value, and null metadata.",
	"Method": "void addEmptyArgument(){\r\n    addArgument(new LDAPArgument(\"\", \"\", \"\", null));\r\n}"
}, {
	"Path": "org.apache.jmeter.report.config.GraphConfiguration.setExcludeControllers",
	"Comment": "sets a switch used to check if controller samples have to be filtered.",
	"Method": "void setExcludeControllers(boolean excludeControllers){\r\n    this.excludeControllers = excludeControllers;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.PowerTableModel.getValueAt",
	"Comment": "required by table model interface. return the valueat value",
	"Method": "Object getValueAt(int row,int column){\r\n    return model.getColumnValue(column, row);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.control.gui.JMSPublisherGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement s){\r\n    PublisherSampler sampler = (PublisherSampler) s;\r\n    setupSamplerProperties(sampler);\r\n    sampler.setDestinationStatic(destSetup.getText().equals(DEST_SETUP_STATIC));\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.GraphVisualizer.createYAxisPanel",
	"Comment": "creates a panel for an entire y axis label. this includes the dynamicvalue as well as the unit label.",
	"Method": "JPanel createYAxisPanel(String labelResourceName,JTextField field){\r\n    JPanel panel = new JPanel(new FlowLayout());\r\n    JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));\r\n    panel.add(field);\r\n    panel.add(label);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.graph.impl.CustomGraphConsumer.getIsNativeSampleVariableName",
	"Comment": "only used for junit tests.indicates if the samplevariablename is native",
	"Method": "boolean getIsNativeSampleVariableName(){\r\n    return isNativeSampleVariableName;\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.property.AbstractProperty.compareTo",
	"Comment": "compares two jmeterproperty object values. n.b. does not compare names",
	"Method": "int compareTo(JMeterProperty arg0){\r\n    String val = getStringValue();\r\n    String val2 = arg0.getStringValue();\r\n    if (val == null) {\r\n        log.warn(\"Warning: Unexpected null value for property: {}\", name);\r\n        if (val2 == null) {\r\n            return 0;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n    return val.compareTo(val2);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel.actionPerformed",
	"Comment": "invoked when an action occurs. this implementation supports the add anddelete buttons.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String action = e.getActionCommand();\r\n    if (action.equals(DELETE)) {\r\n        deleteArgument();\r\n    } else if (action.equals(ADD)) {\r\n        addArgument();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.SimpleConfigGui.modifyTestElement",
	"Comment": "get all of the values from the gui component and set them in thetestelement.",
	"Method": "void modifyTestElement(TestElement el){\r\n    GuiUtils.stopTableEditing(table);\r\n    Data model = tableModel.getData();\r\n    model.reset();\r\n    while (model.next()) {\r\n        el.setProperty(new StringProperty((String) model.getColumnValue(COLUMN_NAMES_0), (String) model.getColumnValue(COLUMN_NAMES_1)));\r\n    }\r\n    super.configureTestElement(el);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.InterleaveControlGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement ic){\r\n    configureTestElement(ic);\r\n    InterleaveControl controller = (InterleaveControl) ic;\r\n    if (style.isSelected()) {\r\n        controller.setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);\r\n    } else {\r\n        controller.setStyle(InterleaveControl.USE_SUB_CONTROLLERS);\r\n    }\r\n    controller.setInterleaveAccrossThreads(accrossThreads.isSelected());\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.property.AbstractProperty.equals",
	"Comment": "determines if the two objects are equal by comparing names and values",
	"Method": "boolean equals(Object o){\r\n    if (!(o instanceof JMeterProperty)) {\r\n        return false;\r\n    }\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    JMeterProperty jpo = (JMeterProperty) o;\r\n    if (!name.equals(jpo.getName())) {\r\n        return false;\r\n    }\r\n    Object o1 = getObjectValue();\r\n    Object o2 = jpo.getObjectValue();\r\n    return o1 == null ? o2 == null : o1.equals(o2);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.PostWriter.writeStartFileMultipart",
	"Comment": "write the start of a file multipart, up to the point where theactual file content should be written",
	"Method": "void writeStartFileMultipart(OutputStream out,String filename,String nameField,String mimetype){\r\n    write(out, \"Content-Disposition: form-data; name=\\\"\");\r\n    write(out, nameField);\r\n    write(out, \"\\\"; filename=\\\"\");\r\n    write(out, new File(filename).getName());\r\n    writeln(out, \"\\\"\");\r\n    writeln(out, \"Content-Type: \" + mimetype);\r\n    writeln(out, \"Content-Transfer-Encoding: binary\");\r\n    out.write(CRLF);\r\n}"
}, {
	"Path": "org.apache.jmeter.save.converters.SampleResultConverter.saveAssertions",
	"Comment": "save assertion results from the sample result into the stream",
	"Method": "void saveAssertions(HierarchicalStreamWriter writer,MarshallingContext context,SampleResult res,SampleSaveConfiguration save){\r\n    if (save.saveAssertions()) {\r\n        AssertionResult[] assertionResults = res.getAssertionResults();\r\n        for (AssertionResult assertionResult : assertionResults) {\r\n            writeItem(assertionResult, context, writer);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.services.FileServer.setBasedir",
	"Comment": "sets the current base directory for relative file names from the provided path.if the path does not refer to an existing directory, then its parent is used.normally the provided path is a file, so using the parent directory is appropriate.",
	"Method": "void setBasedir(String basedir){\r\n    checkForOpenFiles();\r\n    if (basedir != null) {\r\n        File newBase = new File(basedir);\r\n        if (!newBase.isDirectory()) {\r\n            newBase = newBase.getParentFile();\r\n        }\r\n        base = newBase;\r\n        log.info(\"Set new base='{}'\", base);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.WorkBenchGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    if (el instanceof WorkBench) {\r\n        WorkBench tp = (WorkBench) el;\r\n        saveWorkBench.setSelected(tp.getSaveWorkBench());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.gui.GenericTestBeanCustomizer.createWrapperEditor",
	"Comment": "find the default typeeditor and a suitable guieditor for the givenproperty descriptor, and combine them in a wrappereditor.",
	"Method": "WrapperEditor createWrapperEditor(PropertyEditor typeEditor,PropertyDescriptor descriptor){\r\n    String[] editorTags = typeEditor.getTags();\r\n    String[] additionalTags = (String[]) descriptor.getValue(TAGS);\r\n    String[] tags;\r\n    if (editorTags == null) {\r\n        tags = additionalTags;\r\n    } else if (additionalTags == null) {\r\n        tags = editorTags;\r\n    } else {\r\n        tags = new String[editorTags.length + additionalTags.length];\r\n        int j = 0;\r\n        for (String editorTag : editorTags) {\r\n            tags[j++] = editorTag;\r\n        }\r\n        for (String additionalTag : additionalTags) {\r\n            tags[j++] = additionalTag;\r\n        }\r\n    }\r\n    boolean notNull = notNull(descriptor);\r\n    boolean notExpression = notExpression(descriptor);\r\n    boolean notOther = notOther(descriptor);\r\n    PropertyEditor guiEditor;\r\n    if (notNull && tags == null) {\r\n        guiEditor = new FieldStringEditor();\r\n    } else {\r\n        guiEditor = new ComboStringEditor(tags, notExpression && notOther, notNull, (ResourceBundle) descriptor.getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE));\r\n    }\r\n    return new // acceptsNull\r\n    WrapperEditor(// acceptsNull\r\n    typeEditor, guiEditor, !notNull, !notExpression, !notOther, descriptor.getValue(DEFAULT));\r\n}"
}, {
	"Path": "org.apache.jorphan.exec.SystemCommand.waitForEndWithTimeout",
	"Comment": "wait for end of proc execution or timeout if timeoutinmillis is greater than 0",
	"Method": "int waitForEndWithTimeout(Process proc,long timeoutInMillis){\r\n    if (timeoutInMillis <= 0L) {\r\n        return proc.waitFor();\r\n    } else {\r\n        long now = System.currentTimeMillis();\r\n        long finish = now + timeoutInMillis;\r\n        while (System.currentTimeMillis() < finish) {\r\n            try {\r\n                return proc.exitValue();\r\n            } catch (IllegalThreadStateException e) {\r\n                Thread.sleep(pollInterval);\r\n            }\r\n        }\r\n        try {\r\n            return proc.exitValue();\r\n        } catch (IllegalThreadStateException e) {\r\n            throw new InterruptedException(\"Process timeout out after \" + timeoutInMillis + \" milliseconds\");\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.IconToolbarBean.getActionNameResolve",
	"Comment": "resolve action name id declared in icon set file to actionnames value",
	"Method": "String getActionNameResolve(){\r\n    final String aName;\r\n    try {\r\n        aName = (String) (ActionNames.class.getField(this.actionName).get(null));\r\n    } catch (Exception e) {\r\n        log.warn(\"Toolbar icon Action names error: {}, use unknown action.\", this.actionName);\r\n        return this.actionName;\r\n    }\r\n    return aName;\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getParaToDate",
	"Comment": "returns the value of a request parameter and convert to date with a default value if it is null.",
	"Method": "Date getParaToDate(String name,Date getParaToDate,String name,Date defaultValue,Date getParaToDate){\r\n    return toDate(getPara(), null);\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.BinarySearchTree.getReplacementNode",
	"Comment": "get the proper replacement node according to the binary search treealgorithm from the tree.",
	"Method": "Node<T> getReplacementNode(Node<T> nodeToRemoved){\r\n    Node<T> replacement = null;\r\n    if (nodeToRemoved.greater != null && nodeToRemoved.lesser != null) {\r\n        if (modifications % 2 != 0) {\r\n            replacement = this.getGreatest(nodeToRemoved.lesser);\r\n            if (replacement == null)\r\n                replacement = nodeToRemoved.lesser;\r\n        } else {\r\n            replacement = this.getLeast(nodeToRemoved.greater);\r\n            if (replacement == null)\r\n                replacement = nodeToRemoved.greater;\r\n        }\r\n        modifications++;\r\n    } else if (nodeToRemoved.lesser != null && nodeToRemoved.greater == null) {\r\n        replacement = nodeToRemoved.lesser;\r\n    } else if (nodeToRemoved.greater != null && nodeToRemoved.lesser == null) {\r\n        replacement = nodeToRemoved.greater;\r\n    }\r\n    return replacement;\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequestTest.getWithResponseCharsetAsSecondParam",
	"Comment": "make a get request with a response that includes a charset parameter",
	"Method": "void getWithResponseCharsetAsSecondParam(){\r\n    handler = new RequestHandler() {\r\n        @Override\r\n        public void handle(Request request, HttpServletResponse response) {\r\n            response.setStatus(HTTP_OK);\r\n            response.setContentType(\"text/html; param1=val1; charset=UTF-8\");\r\n        }\r\n    };\r\n    HttpRequest request = get(url);\r\n    assertEquals(HTTP_OK, request.code());\r\n    assertEquals(CHARSET_UTF8, request.charset());\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequestTest.getWithResponseCharsetAsSecondParam",
	"Comment": "make a get request with a response that includes a charset parameter",
	"Method": "void getWithResponseCharsetAsSecondParam(){\r\n    response.setStatus(HTTP_OK);\r\n    response.setContentType(\"text/html; param1=val1; charset=UTF-8\");\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.setMethod",
	"Comment": "method should add the junit testxxx method to the list atthe end, since the sequence matters.",
	"Method": "void setMethod(String methodName){\r\n    setProperty(METHOD, methodName);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.BaseJMSSampler.getUseJNDIProperties",
	"Comment": "return whether the sampler should use properties file instead of uiparameters.",
	"Method": "String getUseJNDIProperties(){\r\n    return getPropertyAsString(USE_PROPERTIES_FILE);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.ResponseAssertion.evaluateResponse",
	"Comment": "make sure the response satisfies the specified assertion requirements.",
	"Method": "AssertionResult evaluateResponse(SampleResult response){\r\n    AssertionResult result = new AssertionResult(getName());\r\n    if (getAssumeSuccess()) {\r\n        response.setSuccessful(true);\r\n    }\r\n    String toCheck = getStringToCheck(response);\r\n    result.setFailure(false);\r\n    result.setError(false);\r\n    boolean notTest = (NOT & getTestType()) > 0;\r\n    boolean orTest = (OR & getTestType()) > 0;\r\n    boolean contains = isContainsType();\r\n    boolean equals = isEqualsType();\r\n    boolean substring = isSubstringType();\r\n    boolean matches = isMatchType();\r\n    log.debug(\"Test Type Info: contains={}, notTest={}, orTest={}\", contains, notTest, orTest);\r\n    if (StringUtils.isEmpty(toCheck)) {\r\n        if (notTest) {\r\n            return result;\r\n        }\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Not checking empty response field in: {}\", response.getSampleLabel());\r\n        }\r\n        return result.setResultForNull();\r\n    }\r\n    try {\r\n        Perl5Matcher localMatcher = JMeterUtils.getMatcher();\r\n        boolean hasTrue = false;\r\n        List<String> allCheckMessage = new ArrayList();\r\n        for (JMeterProperty jMeterProperty : getTestStrings()) {\r\n            String stringPattern = jMeterProperty.getStringValue();\r\n            Pattern pattern = null;\r\n            if (contains || matches) {\r\n                pattern = JMeterUtils.getPatternCache().getPattern(stringPattern, Perl5Compiler.READ_ONLY_MASK);\r\n            }\r\n            boolean found;\r\n            if (contains) {\r\n                found = localMatcher.contains(toCheck, pattern);\r\n            } else if (equals) {\r\n                found = toCheck.equals(stringPattern);\r\n            } else if (substring) {\r\n                found = toCheck.contains(stringPattern);\r\n            } else {\r\n                found = localMatcher.matches(toCheck, pattern);\r\n            }\r\n            boolean pass = notTest ? !found : found;\r\n            if (orTest) {\r\n                if (!pass) {\r\n                    log.debug(\"Failed: {}\", stringPattern);\r\n                    allCheckMessage.add(getFailText(stringPattern, toCheck));\r\n                } else {\r\n                    hasTrue = true;\r\n                    break;\r\n                }\r\n            } else {\r\n                if (!pass) {\r\n                    log.debug(\"Failed: {}\", stringPattern);\r\n                    result.setFailure(true);\r\n                    String customMsg = getCustomFailureMessage();\r\n                    if (StringUtils.isEmpty(customMsg)) {\r\n                        result.setFailureMessage(getFailText(stringPattern, toCheck));\r\n                    } else {\r\n                        result.setFailureMessage(customMsg);\r\n                    }\r\n                    break;\r\n                }\r\n                log.debug(\"Passed: {}\", stringPattern);\r\n            }\r\n        }\r\n        if (orTest && !hasTrue) {\r\n            result.setFailure(true);\r\n            String customMsg = getCustomFailureMessage();\r\n            if (StringUtils.isEmpty(customMsg)) {\r\n                result.setFailureMessage(allCheckMessage.stream().collect(Collectors.joining(\"\\t\", \"\", \"\\t\")));\r\n            } else {\r\n                result.setFailureMessage(customMsg);\r\n            }\r\n        }\r\n    } catch (MalformedCachePatternException e) {\r\n        result.setError(true);\r\n        result.setFailure(false);\r\n        result.setFailureMessage(\"Bad test configuration \" + e);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.reporters.ResultCollector.flushFileOutput",
	"Comment": "flush printwriter, called by shutdown hook to ensure no data is lost",
	"Method": "void flushFileOutput(){\r\n    for (Map.Entry<String, ResultCollector.FileEntry> me : files.entrySet()) {\r\n        String key = me.getKey();\r\n        ResultCollector.FileEntry value = me.getValue();\r\n        log.debug(\"Flushing: {}\", key);\r\n        value.pw.flush();\r\n        if (value.pw.checkError()) {\r\n            log.warn(\"Problem detected during use of {}\", key);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.config.Arguments.addEmptyArgument",
	"Comment": "add a new empty argument to the list. the new argument will have theempty string as its name and value, and null metadata.",
	"Method": "void addEmptyArgument(){\r\n    addArgument(new Argument(\"\", \"\", null));\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.TestPlanGui.getMenuCategories",
	"Comment": "this is the list of menu categories this gui component will be availableunder. this implementation returns null, since the testplan appears atthe top level of the tree and cannot be added elsewhere.",
	"Method": "Collection<String> getMenuCategories(){\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.search",
	"Comment": "searches the hashtree structure for the given key. if it finds the key,it returns the hashtree mapped to the key. if it finds nothing, itreturns null.",
	"Method": "HashTree search(Object key){\r\n    HashTree result = getTree(key);\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    TreeSearcher searcher = new TreeSearcher(key);\r\n    try {\r\n        traverse(searcher);\r\n    } catch (RuntimeException e) {\r\n        if (!e.getMessage().equals(FOUND)) {\r\n            throw e;\r\n        }\r\n    }\r\n    return searcher.getResult();\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXTimePickerSkin.syncWithAutoUpdate",
	"Comment": "this method is called from the behavior class to make suredatepicker button is in sync after the popup is being dismissed",
	"Method": "void syncWithAutoUpdate(){\r\n    if (!getPopup().isShowing() && jfxTimePicker.isShowing()) {\r\n        jfxTimePicker.hide();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.exec.KeyToolUtils.guardSubjectName",
	"Comment": "the subject name of an certificate must not start with a number or else the keytool will bark.to mitigate this prefix the argument with a word, if it starts with a number.",
	"Method": "String guardSubjectName(String subject){\r\n    if (NumberUtils.isDigits(subject.substring(0, 1))) {\r\n        return \"ip\" + subject;\r\n    }\r\n    return subject;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.addTest",
	"Comment": "this will do the add test for the user defined testcase as well asinbuilt test case.",
	"Method": "void addTest(LdapClient ldap,SampleResult res){\r\n    if (getPropertyAsBoolean(USER_DEFINED)) {\r\n        res.sampleStart();\r\n        ldap.createTest(getUserAttributes(), getPropertyAsString(BASE_ENTRY_DN));\r\n        res.sampleEnd();\r\n    } else {\r\n        res.sampleStart();\r\n        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));\r\n        res.sampleEnd();\r\n        ldap.deleteTest(getPropertyAsString(ADD));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.config.ReportGeneratorConfiguration.getGraphPropertyKey",
	"Comment": "gets the graph property key from the specified identifier and propertyname.",
	"Method": "String getGraphPropertyKey(String graphId,String propertyName){\r\n    return getSubConfigurationPropertyPrefix(REPORT_GENERATOR_GRAPH_KEY_PREFIX, graphId) + KEY_DELIMITER + propertyName;\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getParaValuesToInt",
	"Comment": "returns an array of integer objects containing all of the values the given request \tparameter has, or null if the parameter does not exist. if the parameter has a \tsingle value, the array has a length of 1.",
	"Method": "Integer[] getParaValuesToInt(String name){\r\n    String[] values = request.getParameterValues(name);\r\n    if (values == null || values.length == 0) {\r\n        return null;\r\n    }\r\n    Integer[] result = new Integer[values.length];\r\n    for (int i = 0; i < result.length; i++) {\r\n        result[i] = StrKit.isBlank(values[i]) ? null : Integer.parseInt(values[i]);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterThread.getSampleListeners",
	"Comment": "get the samplelisteners for the sampler. listeners who receive transaction samplewill not be in this list.",
	"Method": "List<SampleListener> getSampleListeners(SamplePackage samplePack,SamplePackage transactionPack,TransactionSampler transactionSampler){\r\n    List<SampleListener> sampleListeners = samplePack.getSampleListeners();\r\n    if (transactionSampler != null) {\r\n        List<SampleListener> onlySubSamplerListeners = new ArrayList();\r\n        List<SampleListener> transListeners = transactionPack.getSampleListeners();\r\n        for (SampleListener listener : sampleListeners) {\r\n            boolean found = false;\r\n            for (SampleListener trans : transListeners) {\r\n                if (trans == listener) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                onlySubSamplerListeners.add(listener);\r\n            }\r\n        }\r\n        sampleListeners = onlySubSamplerListeners;\r\n    }\r\n    return sampleListeners;\r\n}"
}, {
	"Path": "com.jfinal.validate.Validator.validateEqualField",
	"Comment": "validate equal field. usually validate password and password again",
	"Method": "void validateEqualField(String field_1,String field_2,String errorKey,String errorMessage){\r\n    String value_1 = controller.getPara(field_1);\r\n    String value_2 = controller.getPara(field_2);\r\n    if (value_1 == null || value_2 == null || (!value_1.equals(value_2))) {\r\n        addError(errorKey, errorMessage);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.render.ObjectMessageRenderer.findEncoding",
	"Comment": "try to determine encoding based on xml prolog, if none null is returned.",
	"Method": "String findEncoding(String filename){\r\n    XMLInputFactory factory = XMLInputFactory.newFactory();\r\n    try (FileInputStream input = new FileInputStream(filename)) {\r\n        XMLStreamReader reader = factory.createXMLStreamReader(input);\r\n        return reader.getEncoding();\r\n    } catch (IOException | XMLStreamException e) {\r\n        throw new RuntimeException(format(\"Unable to read %s\", filename), e);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.BackendListenerGui.createClassnamePanel",
	"Comment": "create a panel with gui components allowing the user to select a testclass.",
	"Method": "JPanel createClassnamePanel(){\r\n    List<String> possibleClasses = new ArrayList();\r\n    try {\r\n        possibleClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { BackendListenerClient.class });\r\n        possibleClasses.remove(BackendListener.class.getName() + \"$ErrorBackendListenerClient\");\r\n    } catch (Exception e) {\r\n        log.debug(\"Exception getting interfaces.\", e);\r\n    }\r\n    JLabel label = new JLabel(JMeterUtils.getResString(\"backend_listener_classname\"));\r\n    classnameCombo = new JComboBox(possibleClasses.toArray(ArrayUtils.EMPTY_STRING_ARRAY));\r\n    classnameCombo.addActionListener(this);\r\n    classnameCombo.setEditable(false);\r\n    label.setLabelFor(classnameCombo);\r\n    HorizontalPanel classNamePanel = new HorizontalPanel();\r\n    classNamePanel.add(label);\r\n    classNamePanel.add(classnameCombo);\r\n    queueSize = new JTextField(BackendListener.DEFAULT_QUEUE_SIZE, 5);\r\n    queueSize.setName(\"Queue Size\");\r\n    JLabel queueSizeLabel = new JLabel(JMeterUtils.getResString(\"backend_listener_queue_size\"));\r\n    queueSizeLabel.setLabelFor(queueSize);\r\n    HorizontalPanel queueSizePanel = new HorizontalPanel();\r\n    queueSizePanel.add(queueSizeLabel, BorderLayout.WEST);\r\n    queueSizePanel.add(queueSize);\r\n    JPanel panel = new JPanel(new BorderLayout(0, 5));\r\n    panel.add(classNamePanel, BorderLayout.NORTH);\r\n    panel.add(queueSizePanel, BorderLayout.CENTER);\r\n    return panel;\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.ShortIndexer.create",
	"Comment": "creates a short indexer to access efficiently the data of a pointer.",
	"Method": "ShortIndexer create(short[] array,ShortIndexer create,ShortBuffer buffer,ShortIndexer create,ShortPointer pointer,ShortIndexer create,short[] array,long[] sizes,long[] strides,ShortIndexer create,ShortBuffer buffer,long[] sizes,long[] strides,ShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,ShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new ShortRawIndexer(pointer, sizes, strides) : new ShortBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        short[] array = new short[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new ShortArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.ShortIndexer.create",
	"Comment": "creates a short indexer to access efficiently the data of a pointer.",
	"Method": "ShortIndexer create(short[] array,ShortIndexer create,ShortBuffer buffer,ShortIndexer create,ShortPointer pointer,ShortIndexer create,short[] array,long[] sizes,long[] strides,ShortIndexer create,ShortBuffer buffer,long[] sizes,long[] strides,ShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,ShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.BoundaryExtractor.process",
	"Comment": "parses the response data using boundaries and saving the resultsinto variables for use later in the test.",
	"Method": "void process(){\r\n    JMeterContext context = getThreadContext();\r\n    SampleResult previousResult = context.getPreviousResult();\r\n    if (previousResult == null) {\r\n        return;\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Boundary Extractor {}: processing result\", getName());\r\n    }\r\n    if (StringUtils.isAnyEmpty(getLeftBoundary(), getRightBoundary(), getRefName())) {\r\n        throw new IllegalArgumentException(\"One of the mandatory properties is missing in Boundary Extractor:\" + getName());\r\n    }\r\n    JMeterVariables vars = context.getVariables();\r\n    String refName = getRefName();\r\n    final String defaultValue = getDefaultValue();\r\n    if (StringUtils.isNotBlank(defaultValue) || isEmptyDefaultValue()) {\r\n        vars.put(refName, defaultValue);\r\n    }\r\n    int matchNumber = getMatchNumber();\r\n    int prevCount = 0;\r\n    int matchCount = 0;\r\n    try {\r\n        prevCount = removePrevCount(vars, refName);\r\n        List<String> matches = extractMatches(previousResult, vars, matchNumber);\r\n        matchCount = saveMatches(vars, refName, matchNumber, matches);\r\n    } catch (RuntimeException e) {\r\n        if (log.isWarnEnabled()) {\r\n            log.warn(\"{}: Error while generating result. {}\", getName(), e.toString());\r\n        }\r\n    } finally {\r\n        for (int i = matchCount + 1; i <= prevCount; i++) {\r\n            vars.remove(refName + UNDERSCORE + i);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXTimePickerContent.createHeaderPane",
	"Comment": "header panel represents the selected timewe keep javafx original style classes",
	"Method": "StackPane createHeaderPane(LocalTime time,boolean _24HourView){\r\n    int hour = time.getHour();\r\n    selectedHourLabel.setText(String.valueOf(hour % (_24HourView ? 24 : 12) == 0 ? (_24HourView ? 0 : 12) : hour % (_24HourView ? 24 : 12)));\r\n    selectedHourLabel.getStyleClass().add(SPINNER_LABEL);\r\n    selectedHourLabel.setTextFill(Color.WHITE);\r\n    selectedHourLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 42));\r\n    selectedHourLabel.setOnMouseClicked((click) -> unit.set(TimeUnit.HOURS));\r\n    selectedHourLabel.setMinWidth(49);\r\n    selectedHourLabel.setAlignment(Pos.CENTER_RIGHT);\r\n    timeLabel.set(selectedHourLabel);\r\n    selectedMinLabel.setText(String.valueOf(unitConverter.toString(time.getMinute())));\r\n    selectedMinLabel.getStyleClass().add(SPINNER_LABEL);\r\n    selectedMinLabel.setTextFill(fadedColor);\r\n    selectedMinLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 42));\r\n    selectedMinLabel.setOnMouseClicked((click) -> unit.set(TimeUnit.MINUTES));\r\n    Label separatorLabel = new Label(\":\");\r\n    separatorLabel.setPadding(new Insets(0, 0, 4, 0));\r\n    separatorLabel.setTextFill(fadedColor);\r\n    separatorLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 42));\r\n    periodPMLabel = new Label(\"PM\");\r\n    periodPMLabel.getStyleClass().add(SPINNER_LABEL);\r\n    periodPMLabel.setTextFill(fadedColor);\r\n    periodPMLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 14));\r\n    periodPMLabel.setOnMouseClicked((click) -> period.set(\"PM\"));\r\n    periodAMLabel = new Label(\"AM\");\r\n    periodAMLabel.getStyleClass().add(SPINNER_LABEL);\r\n    periodAMLabel.setTextFill(fadedColor);\r\n    periodAMLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 14));\r\n    periodAMLabel.setOnMouseClicked((click) -> period.set(\"AM\"));\r\n    if (hour < 12) {\r\n        periodAMLabel.setTextFill(Color.WHITE);\r\n    } else {\r\n        periodPMLabel.setTextFill(Color.WHITE);\r\n    }\r\n    period.set(hour < 12 ? \"AM\" : \"PM\");\r\n    VBox periodContainer = new VBox();\r\n    periodContainer.setPadding(new Insets(0, 0, 0, 4));\r\n    periodContainer.getChildren().addAll(periodAMLabel, periodPMLabel);\r\n    HBox selectedTimeContainer = new HBox();\r\n    selectedTimeContainer.getStyleClass().add(\"spinner\");\r\n    selectedTimeContainer.getChildren().addAll(selectedHourLabel, separatorLabel, selectedMinLabel);\r\n    if (!_24HourView) {\r\n        selectedTimeContainer.getChildren().add(periodContainer);\r\n    }\r\n    selectedTimeContainer.setAlignment(Pos.CENTER);\r\n    selectedTimeContainer.setFillHeight(false);\r\n    StackPane headerPanel = new StackPane();\r\n    headerPanel.getStyleClass().add(\"time-pane\");\r\n    headerPanel.setBackground(new Background(new BackgroundFill(this.timePicker.getDefaultColor(), CornerRadii.EMPTY, Insets.EMPTY)));\r\n    headerPanel.setPadding(new Insets(8, 24, 8, 24));\r\n    headerPanel.getChildren().add(selectedTimeContainer);\r\n    return headerPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.ArgumentsPanel.actionPerformed",
	"Comment": "invoked when an action occurs. this implementation supports the add anddelete buttons.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    if (!disableButtons) {\r\n        String action = e.getActionCommand();\r\n        if (action.equals(DELETE)) {\r\n            deleteArgument();\r\n        } else if (action.equals(ADD)) {\r\n            addArgument();\r\n        } else if (action.equals(ADD_FROM_CLIPBOARD)) {\r\n            addFromClipboard();\r\n        } else if (action.equals(UP)) {\r\n            moveUp();\r\n        } else if (action.equals(DOWN)) {\r\n            moveDown();\r\n        } else if (action.equals(DETAIL)) {\r\n            showDetail();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Objects.containsConstant",
	"Comment": "check whether the given array of enum constants contains a constant with the given name.",
	"Method": "boolean containsConstant(Enum<?>[] enumValues,String constant,boolean containsConstant,Enum<?>[] enumValues,String constant,boolean caseSensitive){\r\n    for (Enum<?> candidate : enumValues) {\r\n        if (caseSensitive ? candidate.toString().equals(constant) : candidate.toString().equalsIgnoreCase(constant)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.Model.get",
	"Comment": "get attribute of any mysql type. returns defaultvalue if null.",
	"Method": "T get(String attr,T get,String attr,Object defaultValue){\r\n    Object result = attrs.get(attr);\r\n    return (T) (result != null ? result : defaultValue);\r\n}"
}, {
	"Path": "org.bytedeco.javacv.Java2DFrameConverter.getFrame",
	"Comment": "returns a frame based on a bufferedimage, given gamma, and inverted channels flag.",
	"Method": "Frame getFrame(BufferedImage image,Frame getFrame,BufferedImage image,double gamma,Frame getFrame,BufferedImage image,double gamma,boolean flipChannels){\r\n    if (image == null) {\r\n        return null;\r\n    }\r\n    SampleModel sm = image.getSampleModel();\r\n    int depth = 0, numChannels = sm.getNumBands();\r\n    switch(image.getType()) {\r\n        case BufferedImage.TYPE_INT_RGB:\r\n        case BufferedImage.TYPE_INT_ARGB:\r\n        case BufferedImage.TYPE_INT_ARGB_PRE:\r\n        case BufferedImage.TYPE_INT_BGR:\r\n            depth = Frame.DEPTH_UBYTE;\r\n            numChannels = 4;\r\n            break;\r\n    }\r\n    if (depth == 0 || numChannels == 0) {\r\n        switch(sm.getDataType()) {\r\n            case DataBuffer.TYPE_BYTE:\r\n                depth = Frame.DEPTH_UBYTE;\r\n                break;\r\n            case DataBuffer.TYPE_USHORT:\r\n                depth = Frame.DEPTH_USHORT;\r\n                break;\r\n            case DataBuffer.TYPE_SHORT:\r\n                depth = Frame.DEPTH_SHORT;\r\n                break;\r\n            case DataBuffer.TYPE_INT:\r\n                depth = Frame.DEPTH_INT;\r\n                break;\r\n            case DataBuffer.TYPE_FLOAT:\r\n                depth = Frame.DEPTH_FLOAT;\r\n                break;\r\n            case DataBuffer.TYPE_DOUBLE:\r\n                depth = Frame.DEPTH_DOUBLE;\r\n                break;\r\n            default:\r\n                assert false;\r\n        }\r\n    }\r\n    if (frame == null || frame.imageWidth != image.getWidth() || frame.imageHeight != image.getHeight() || frame.imageDepth != depth || frame.imageChannels != numChannels) {\r\n        frame = new Frame(image.getWidth(), image.getHeight(), depth, numChannels);\r\n    }\r\n    copy(image, frame, gamma, flipChannels, null);\r\n    return frame;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.core.CsvSampleWriter.writeHeader",
	"Comment": "write the csv header. if samples have already been written then a row withheader information will be written in the middle of the file.",
	"Method": "void writeHeader(){\r\n    Validate.validState(writer != null, \"No writer set! Call setWriter() first!\");\r\n    StringBuilder row = new StringBuilder();\r\n    for (int i = 0; i < columnCount; i++) {\r\n        row.append(metadata.getColumnName(i));\r\n        if (i < columnCount - 1) {\r\n            row.append(separator);\r\n        }\r\n    }\r\n    writer.println(row.toString());\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.Loader.loadProperties",
	"Comment": "for all the classes, loads all properties from each class annotations for the given platform.",
	"Method": "Properties loadProperties(Properties loadProperties,String name,String defaults,ClassProperties loadProperties,Class[] cls,Properties properties,boolean inherit,ClassProperties loadProperties,Class cls,Properties properties,boolean inherit){\r\n    ClassProperties cp = new ClassProperties(properties);\r\n    if (cls != null) {\r\n        cp.load(cls, inherit);\r\n    }\r\n    return cp;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    if (el instanceof LDAPArguments) {\r\n        tableModel.clearData();\r\n        PropertyIterator iter = ((LDAPArguments) el).iterator();\r\n        while (iter.hasNext()) {\r\n            LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();\r\n            tableModel.addRow(arg);\r\n        }\r\n    }\r\n    checkDeleteStatus();\r\n}"
}, {
	"Path": "org.apache.jorphan.reflect.Functor.doInvoke",
	"Comment": "low level invocation routine.should only be called after any defaults have been applied.",
	"Method": "Object doInvoke(Class<?> _class,Object _invokee,Object[] _args){\r\n    Class<?>[] argTypes = getTypes(_args);\r\n    try {\r\n        Method method = doCreateMethod(_class, argTypes);\r\n        if (method == null) {\r\n            final String message = \"Can't find method \" + _class.getName() + \"#\" + methodName + typesToString(argTypes);\r\n            log.error(message, new Throwable());\r\n            throw new JMeterError(message);\r\n        }\r\n        return method.invoke(_invokee, _args);\r\n    } catch (Exception e) {\r\n        final String message = \"Trouble functing: \" + _class.getName() + \".\" + methodName + \"(...) : \" + \" invokee: \" + _invokee + \" \" + e.getMessage();\r\n        log.warn(message, e);\r\n        throw new JMeterError(message, e);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.property.MapProperty.getPropertyType",
	"Comment": "figures out what kind of properties this collection is holding andreturns the class type.",
	"Method": "Class<? extends JMeterProperty> getPropertyType(){\r\n    if (!value.isEmpty()) {\r\n        return valueIterator().next().getClass();\r\n    }\r\n    return NullProperty.class;\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextArea.setToolTipText",
	"Comment": "registers the text to display in a tool tip.the text displays when the cursor lingers over the component.",
	"Method": "void setToolTipText(String text){\r\n    mTextArea.setToolTipText(text);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.followRedirects",
	"Comment": "iteratively download the redirect targets of a redirect response.the returned result will contain one subsample for each request issued,including the original one that was passed in. it will be anhttpsampleresult that should mostly look as if the final destination ofthe redirect chain had been obtained in a single shot.",
	"Method": "HTTPSampleResult followRedirects(HTTPSampleResult res,int frameDepth){\r\n    HTTPSampleResult totalRes = new HTTPSampleResult(res);\r\n    totalRes.addRawSubResult(res);\r\n    HTTPSampleResult lastRes = res;\r\n    int redirect;\r\n    for (redirect = 0; redirect < MAX_REDIRECTS; redirect++) {\r\n        boolean invalidRedirectUrl = false;\r\n        String location = lastRes.getRedirectLocation();\r\n        log.debug(\"Initial location: {}\", location);\r\n        if (REMOVESLASHDOTDOT) {\r\n            location = ConversionUtils.removeSlashDotDot(location);\r\n        }\r\n        location = encodeSpaces(location);\r\n        log.debug(\"Location after /. and space transforms: {}\", location);\r\n        String method = lastRes.getHTTPMethod();\r\n        method = computeMethodForRedirect(method);\r\n        try {\r\n            URL url = ConversionUtils.makeRelativeURL(lastRes.getURL(), location);\r\n            url = ConversionUtils.sanitizeUrl(url).toURL();\r\n            log.debug(\"Location as URL: {}\", url);\r\n            HTTPSampleResult tempRes = sample(url, method, true, frameDepth);\r\n            if (tempRes != null) {\r\n                lastRes = tempRes;\r\n            } else {\r\n                break;\r\n            }\r\n        } catch (MalformedURLException | URISyntaxException e) {\r\n            errorResult(e, lastRes);\r\n            invalidRedirectUrl = true;\r\n        }\r\n        if (lastRes.getSubResults() != null && lastRes.getSubResults().length > 0) {\r\n            SampleResult[] subs = lastRes.getSubResults();\r\n            for (SampleResult sub : subs) {\r\n                totalRes.addSubResult(sub);\r\n            }\r\n        } else {\r\n            if (!invalidRedirectUrl) {\r\n                totalRes.addSubResult(lastRes);\r\n            }\r\n        }\r\n        if (!lastRes.isRedirect()) {\r\n            break;\r\n        }\r\n    }\r\n    if (redirect >= MAX_REDIRECTS) {\r\n        lastRes = errorResult(new IOException(\"Exceeded maximum number of redirects: \" + MAX_REDIRECTS), new HTTPSampleResult(lastRes));\r\n        totalRes.addSubResult(lastRes);\r\n    }\r\n    totalRes.setSampleLabel(totalRes.getSampleLabel() + \"->\" + lastRes.getSampleLabel());\r\n    totalRes.setURL(lastRes.getURL());\r\n    totalRes.setHTTPMethod(lastRes.getHTTPMethod());\r\n    totalRes.setQueryString(lastRes.getQueryString());\r\n    totalRes.setRequestHeaders(lastRes.getRequestHeaders());\r\n    totalRes.setResponseData(lastRes.getResponseData());\r\n    totalRes.setResponseCode(lastRes.getResponseCode());\r\n    totalRes.setSuccessful(lastRes.isSuccessful());\r\n    totalRes.setResponseMessage(lastRes.getResponseMessage());\r\n    totalRes.setDataType(lastRes.getDataType());\r\n    totalRes.setResponseHeaders(lastRes.getResponseHeaders());\r\n    totalRes.setContentType(lastRes.getContentType());\r\n    totalRes.setDataEncoding(lastRes.getDataEncodingNoDefault());\r\n    return totalRes;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG91Dialect.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    return support.getSpatialAggregateSQL(columnName, aggregation);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JavaSamplerContext.containsParameter",
	"Comment": "determine whether or not a value has been specified for the parameterwith this name.",
	"Method": "boolean containsParameter(String name){\r\n    return params.containsKey(name);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.parser.JTidyHTMLParser.getDOM",
	"Comment": "returns a node representing a whole xml given an xml document.",
	"Method": "Node getDOM(byte[] text,String encoding){\r\n    log.debug(\"Start : getDOM\");\r\n    Node node = getTidyParser(encoding).parseDOM(new ByteArrayInputStream(text), null);\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"node : \" + node);\r\n    }\r\n    log.debug(\"End   : getDOM\");\r\n    return node;\r\n}"
}, {
	"Path": "cn.hutool.core.date.format.FastDateParser.readObject",
	"Comment": "create the object after serialization. this implementation reinitializes the transient properties.",
	"Method": "void readObject(ObjectInputStream in){\r\n    in.defaultReadObject();\r\n    final Calendar definingCalendar = Calendar.getInstance(timeZone, locale);\r\n    init(definingCalendar);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.Pointer.limit",
	"Comment": "sets the limit and returns this.used to limit the size of an operation on this object.",
	"Method": "long limit(P limit,long limit){\r\n    this.limit = limit;\r\n    return (P) this;\r\n}"
}, {
	"Path": "org.hibernate.testing.bytecode.enhancement.EnhancerTestUtils.checkDirtyTracking",
	"Comment": "compares the dirty fields of an entity with a set of expected values",
	"Method": "void checkDirtyTracking(Object entityInstance,String dirtyFields){\r\n    SelfDirtinessTracker selfDirtinessTracker = (SelfDirtinessTracker) entityInstance;\r\n    assertEquals(dirtyFields.length > 0, selfDirtinessTracker.$$_hibernate_hasDirtyAttributes());\r\n    String[] tracked = selfDirtinessTracker.$$_hibernate_getDirtyAttributes();\r\n    assertEquals(dirtyFields.length, tracked.length);\r\n    assertTrue(Arrays.asList(tracked).containsAll(Arrays.asList(dirtyFields)));\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.setAttrs",
	"Comment": "stores attributes in this request, key of the map as attribute name and value of the map as attribute value",
	"Method": "Controller setAttrs(Map<String, Object> attrMap){\r\n    for (Map.Entry<String, Object> entry : attrMap.entrySet()) request.setAttribute(entry.getKey(), entry.getValue());\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.ArgumentsPanel.makeMainPanel",
	"Comment": "create the main gui panel which contains the argument table.",
	"Method": "Component makeMainPanel(){\r\n    initializeTableModel();\r\n    table = new JTable(tableModel);\r\n    table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());\r\n    table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\r\n    if (this.background != null) {\r\n        table.setBackground(this.background);\r\n    }\r\n    JMeterUtils.applyHiDPI(table);\r\n    return makeScrollPane(table);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.CollapseExpandTreeBranch.getActionNames",
	"Comment": "gets the actionnames attribute of the collapseexpandtreebranch object.",
	"Method": "Set<String> getActionNames(){\r\n    return commands;\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.SuffixArray.getKMR",
	"Comment": "creates kmr array for new radius from nearly inverted array.elements from inverted array need to be grouped by substring tey represent.",
	"Method": "ArrayList<Integer> getKMR(ArrayList<KMRsWithIndex> KMRinvertedList,int length){\r\n    final ArrayList<Integer> KMR = new ArrayList<Integer>(length * 2);\r\n    for (int i = 0; i < 2 * length; i++) KMR.add(new Integer(-1));\r\n    int counter = 0;\r\n    for (int i = 0; i < length; i++) {\r\n        if (i > 0 && substringsAreEqual(KMRinvertedList, i))\r\n            counter++;\r\n        KMR.set(KMRinvertedList.get(i).index, new Integer(counter));\r\n    }\r\n    return KMR;\r\n}"
}, {
	"Path": "org.apache.jmeter.save.converters.TestResultWrapperConverter.unmarshal",
	"Comment": "read test results from jtl files and pass them to the visualiser directly.if the resultcollector helper object is defined, then pass the samples to thatrather than adding them to the test result wrapper.",
	"Method": "Object unmarshal(HierarchicalStreamReader reader,UnmarshallingContext context){\r\n    TestResultWrapper results = new TestResultWrapper();\r\n    Collection<SampleResult> samples = new ArrayList();\r\n    String ver = reader.getAttribute(\"version\");\r\n    if (ver == null || ver.length() == 0) {\r\n        ver = \"1.0\";\r\n    }\r\n    results.setVersion(ver);\r\n    ConversionHelp.setInVersion(ver);\r\n    final ResultCollectorHelper resultCollectorHelper = (ResultCollectorHelper) context.get(SaveService.RESULTCOLLECTOR_HELPER_OBJECT);\r\n    while (reader.hasMoreChildren()) {\r\n        reader.moveDown();\r\n        SampleResult sample = (SampleResult) readItem(reader, context, results);\r\n        if (resultCollectorHelper != null) {\r\n            resultCollectorHelper.add(sample);\r\n        } else {\r\n            samples.add(sample);\r\n        }\r\n        reader.moveUp();\r\n    }\r\n    results.setSampleResults(samples);\r\n    return results;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.TestHC4CookieManager.testSecureCookieWithHttp",
	"Comment": "test secure cookie is parsed correctly and not transmitted for http",
	"Method": "void testSecureCookieWithHttp(){\r\n    URL url = new URL(\"http://a.b.c/\");\r\n    man.addCookieFromHeader(\"mySASession=s:cafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK/2Bs34MW5kGHmErKzG6r3XI; Path=/;\" + \" Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly; secure\", url);\r\n    assertEquals(1, man.getCookieCount());\r\n    String s = man.getCookieHeaderForURL(url);\r\n    assertNull(s);\r\n}"
}, {
	"Path": "org.apache.jmeter.save.converters.SampleSaveConfigurationConverter.createNode",
	"Comment": "helper method to simplify marshall routine. save if and only if true.",
	"Method": "void createNode(HierarchicalStreamWriter writer,boolean save,String node){\r\n    if (!save) {\r\n        return;\r\n    }\r\n    writer.startNode(node);\r\n    writer.setValue(TRUE);\r\n    writer.endNode();\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG91Dialect.getHavingSridSQL",
	"Comment": "returns the sql fragment when parsing a havingsridexpression.",
	"Method": "String getHavingSridSQL(String columnName){\r\n    return support.getHavingSridSQL(columnName);\r\n}"
}, {
	"Path": "com.jfinal.config.Interceptors.addGlobalServiceInterceptor",
	"Comment": "add the global service interceptor to intercept all the method enhanced by aop enhancer.",
	"Method": "Interceptors addGlobalServiceInterceptor(Interceptor globalServiceInterceptor){\r\n    if (globalServiceInterceptor == null) {\r\n        throw new IllegalArgumentException(\"globalServiceInterceptor can not be null.\");\r\n    }\r\n    InterceptorManager.me().addGlobalServiceInterceptor(globalServiceInterceptor);\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jorphan.util.Converter.getInt",
	"Comment": "converts object to an integer, defaults to 0 if object isnot convertible or is null.",
	"Method": "int getInt(Object o,int defaultValue,int getInt,Object o){\r\n    return getInt(o, 0);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.ResponseAssertion.equalsComparisonText",
	"Comment": "returns some helpful logging text to determine where equality between two stringsis broken, with one pointer working from the front of the strings and another workingbackwards from the end.",
	"Method": "StringBuilder equalsComparisonText(String received,String comparison){\r\n    final int recLength = received.length();\r\n    final int compLength = comparison.length();\r\n    final int minLength = Math.min(recLength, compLength);\r\n    final StringBuilder text = new StringBuilder(Math.max(recLength, compLength) * 2);\r\n    int firstDiff;\r\n    for (firstDiff = 0; firstDiff < minLength; firstDiff++) {\r\n        if (received.charAt(firstDiff) != comparison.charAt(firstDiff)) {\r\n            break;\r\n        }\r\n    }\r\n    final String startingEqSeq;\r\n    if (firstDiff == 0) {\r\n        startingEqSeq = \"\";\r\n    } else {\r\n        startingEqSeq = trunc(false, received.substring(0, firstDiff));\r\n    }\r\n    int lastRecDiff = recLength - 1;\r\n    int lastCompDiff = compLength - 1;\r\n    while ((lastRecDiff > firstDiff) && (lastCompDiff > firstDiff) && received.charAt(lastRecDiff) == comparison.charAt(lastCompDiff)) {\r\n        lastRecDiff--;\r\n        lastCompDiff--;\r\n    }\r\n    String compDeltaSeq;\r\n    String endingEqSeq = trunc(true, received.substring(lastRecDiff + 1, recLength));\r\n    String recDeltaSeq;\r\n    if (endingEqSeq.length() == 0) {\r\n        recDeltaSeq = trunc(true, received.substring(firstDiff, recLength));\r\n        compDeltaSeq = trunc(true, comparison.substring(firstDiff, compLength));\r\n    } else {\r\n        recDeltaSeq = trunc(true, received.substring(firstDiff, lastRecDiff + 1));\r\n        compDeltaSeq = trunc(true, comparison.substring(firstDiff, lastCompDiff + 1));\r\n    }\r\n    final StringBuilder pad = new StringBuilder(Math.abs(recDeltaSeq.length() - compDeltaSeq.length()));\r\n    for (int i = 0; i < pad.capacity(); i++) {\r\n        pad.append(' ');\r\n    }\r\n    if (recDeltaSeq.length() > compDeltaSeq.length()) {\r\n        compDeltaSeq += pad.toString();\r\n    } else {\r\n        recDeltaSeq += pad.toString();\r\n    }\r\n    text.append(\"\\n\\n\");\r\n    text.append(RECEIVED_STR);\r\n    text.append(startingEqSeq);\r\n    text.append(DIFF_DELTA_START);\r\n    text.append(recDeltaSeq);\r\n    text.append(DIFF_DELTA_END);\r\n    text.append(endingEqSeq);\r\n    text.append(\"\\n\\n\");\r\n    text.append(COMPARISON_STR);\r\n    text.append(startingEqSeq);\r\n    text.append(DIFF_DELTA_START);\r\n    text.append(compDeltaSeq);\r\n    text.append(DIFF_DELTA_END);\r\n    text.append(endingEqSeq);\r\n    text.append(\"\\n\\n\");\r\n    return text;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.control.gui.JMSSubscriberGui.configure",
	"Comment": "the implementation loads the url and the soap action for the request.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    SubscriberSampler sampler = (SubscriberSampler) el;\r\n    useProperties.setSelected(sampler.getUseJNDIPropertiesAsBoolean());\r\n    jndiICF.setText(sampler.getJNDIInitialContextFactory());\r\n    urlField.setText(sampler.getProviderUrl());\r\n    jndiConnFac.setText(sampler.getConnectionFactory());\r\n    jmsDestination.setText(sampler.getDestination());\r\n    jmsDurableSubscriptionId.setText(sampler.getDurableSubscriptionId());\r\n    jmsClientId.setText(sampler.getClientId());\r\n    jmsSelector.setText(sampler.getJmsSelector());\r\n    jmsUser.setText(sampler.getUsername());\r\n    jmsPwd.setText(sampler.getPassword());\r\n    samplesToAggregate.setText(sampler.getIterations());\r\n    useAuth.setSelected(sampler.isUseAuth());\r\n    jmsUser.setEnabled(useAuth.isSelected());\r\n    jmsPwd.setEnabled(useAuth.isSelected());\r\n    storeResponse.setSelected(sampler.getReadResponseAsBoolean());\r\n    clientChoice.setText(sampler.getClientChoice());\r\n    stopBetweenSamples.setSelected(sampler.isStopBetweenSamples());\r\n    timeout.setText(sampler.getTimeout());\r\n    separator.setText(sampler.getSeparator());\r\n    destSetup.setText(sampler.isDestinationStatic() ? DEST_SETUP_STATIC : DEST_SETUP_DYNAMIC);\r\n    jmsErrorReconnectOnCodes.setText(sampler.getReconnectionErrorCodes());\r\n    jmsErrorPauseBetween.setText(sampler.getPauseBetweenErrors());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.LogFilter.incPattern",
	"Comment": "by default, the method assumes the entry is not included, unless itmatches. in that case, it will return true.",
	"Method": "boolean incPattern(String text){\r\n    this.USEFILE = false;\r\n    for (Pattern includePattern : this.INCPATTERNS) {\r\n        if (JMeterUtils.getMatcher().contains(text, includePattern)) {\r\n            this.USEFILE = true;\r\n            break;\r\n        }\r\n    }\r\n    return this.USEFILE;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.SizeAssertion.getResult",
	"Comment": "returns the result of the assertion. here it checks the sample responsedata length.",
	"Method": "AssertionResult getResult(SampleResult response){\r\n    AssertionResult result = new AssertionResult(getName());\r\n    result.setFailure(false);\r\n    long resultSize;\r\n    if (isScopeVariable()) {\r\n        String variableName = getVariableName();\r\n        String value = getThreadContext().getVariables().get(variableName);\r\n        try {\r\n            resultSize = Long.parseLong(value);\r\n        } catch (NumberFormatException e) {\r\n            result.setFailure(true);\r\n            result.setFailureMessage(\"Error parsing variable name: \" + variableName + \" value: \" + value);\r\n            return result;\r\n        }\r\n    } else if (isTestFieldResponseHeaders()) {\r\n        resultSize = response.getHeadersSize();\r\n    } else if (isTestFieldResponseBody()) {\r\n        resultSize = response.getBodySizeAsLong();\r\n    } else if (isTestFieldResponseCode()) {\r\n        resultSize = response.getResponseCode().length();\r\n    } else if (isTestFieldResponseMessage()) {\r\n        resultSize = response.getResponseMessage().length();\r\n    } else {\r\n        resultSize = response.getBytesAsLong();\r\n    }\r\n    final String msg = compareSize(resultSize);\r\n    if (msg.length() > 0) {\r\n        result.setFailure(true);\r\n        Object[] arguments = { Long.valueOf(resultSize), msg, Long.valueOf(getAllowedSize()) };\r\n        String message = // $NON-NLS-1$\r\n        MessageFormat.format(JMeterUtils.getResString(\"size_assertion_failure\"), arguments);\r\n        result.setFailureMessage(message);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui.itemStateChanged",
	"Comment": "this itemstatechanged listener for changing the card layout for based onthe test selected in the user defined test case.",
	"Method": "void itemStateChanged(ItemEvent ie){\r\n    CardLayout cl = (CardLayout) (cards.getLayout());\r\n    if (addTest.isSelected()) {\r\n        cl.show(cards, CARDS_ADD);\r\n    } else if (deleteTest.isSelected()) {\r\n        cl.show(cards, CARDS_DELETE);\r\n    } else if (bind.isSelected()) {\r\n        cl.show(cards, CARDS_BIND);\r\n    } else if (sbind.isSelected()) {\r\n        cl.show(cards, CARDS_BIND);\r\n    } else if (rename.isSelected()) {\r\n        cl.show(cards, CARDS_RENAME);\r\n    } else if (compare.isSelected()) {\r\n        cl.show(cards, CARDS_COMPARE);\r\n    } else if (searchTest.isSelected()) {\r\n        cl.show(cards, CARDS_SEARCH);\r\n    } else if (modifyTest.isSelected()) {\r\n        cl.show(cards, CARDS_MODIFY);\r\n    } else {\r\n        cl.show(cards, CARDS_DEFAULT);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.CriticalSectionControllerGui.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    if (displayName) {\r\n        setLayout(new BorderLayout(0, 5));\r\n        setBorder(makeBorder());\r\n        add(makeTitlePanel(), BorderLayout.NORTH);\r\n        JPanel mainPanel = new JPanel(new BorderLayout());\r\n        mainPanel.add(createCriticalSectionPanel(), BorderLayout.NORTH);\r\n        add(mainPanel, BorderLayout.CENTER);\r\n    } else {\r\n        setLayout(new BorderLayout());\r\n        add(createCriticalSectionPanel(), BorderLayout.NORTH);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.config.ReportGeneratorConfiguration.getSubConfigurationPropertyKey",
	"Comment": "gets the sub configuration property key from the specified keyprefix, sub configuration identifier and property name.",
	"Method": "String getSubConfigurationPropertyKey(String keyPrefix,String subConfId,String propertyName){\r\n    return getSubConfigurationPropertyPrefix(keyPrefix, subConfId) + KEY_DELIMITER + propertyName;\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.getBottomFixedCount",
	"Comment": "returns the number of items fixed at the bottom of the menu or popupmenu.",
	"Method": "int getBottomFixedCount(){\r\n    return bottomFixedCount;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisSupport.getIsEmptySQL",
	"Comment": "returns the sql fragment when parsing a isemptyexpression or\tisnotempty expression.",
	"Method": "String getIsEmptySQL(String columnName,boolean isEmpty){\r\n    final String emptyExpr = \" ST_IsEmpty(\" + columnName + \") \";\r\n    return isEmpty ? emptyExpr : \"( NOT \" + emptyExpr + \")\";\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.BaseJMSSampler.setDestinationStatic",
	"Comment": "if the sampler should use a static destination, call the method with true",
	"Method": "void setDestinationStatic(boolean isStatic){\r\n    setProperty(DESTINATION_STATIC, isStatic, DESTINATION_STATIC_DEFAULT);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.tcp.sampler.TCPSampler.tearDown",
	"Comment": "closes all connections, clears map and remove thread local map",
	"Method": "void tearDown(){\r\n    Map<String, Object> cp = tp.get();\r\n    cp.forEach((k, v) -> {\r\n        if (k.startsWith(TCPKEY)) {\r\n            try {\r\n                ((Socket) v).close();\r\n            } catch (IOException e) {\r\n            }\r\n        }\r\n    });\r\n    cp.clear();\r\n    tp.remove();\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Strings.splitArrayElementsIntoProperties",
	"Comment": "take an array strings and split each element based on the given delimiter.a properties instance is then generated, with the left of thedelimiter providing the key, and the right of the delimiter providing the value.will trim both the key and value before adding them to theproperties instance.",
	"Method": "Properties splitArrayElementsIntoProperties(String[] array,String delimiter,Properties splitArrayElementsIntoProperties,String[] array,String delimiter,String charsToDelete){\r\n    if (Objects.isEmpty(array)) {\r\n        return null;\r\n    }\r\n    Properties result = new Properties();\r\n    for (String element : array) {\r\n        if (charsToDelete != null) {\r\n            element = deleteAny(element, charsToDelete);\r\n        }\r\n        String[] splittedElement = split(element, delimiter);\r\n        if (splittedElement == null) {\r\n            continue;\r\n        }\r\n        result.setProperty(splittedElement[0].trim(), splittedElement[1].trim());\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.gui.BoundaryExtractorGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement extractor){\r\n    super.configureTestElement(extractor);\r\n    if (extractor instanceof BoundaryExtractor) {\r\n        BoundaryExtractor boundary = (BoundaryExtractor) extractor;\r\n        saveScopeSettings(boundary);\r\n        boundary.setUseField(group.getSelection().getActionCommand());\r\n        boundary.setRefName(refNameField.getText());\r\n        boundary.setLeftBoundary(leftBoundaryField.getText());\r\n        boundary.setRightBoundary(rightBoundaryField.getText());\r\n        boundary.setDefaultValue(defaultField.getText());\r\n        boundary.setDefaultEmptyValue(emptyDefaultValue.isSelected());\r\n        boundary.setMatchNumber(matchNumberField.getText());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.StatisticalSampleSender.sampleOccurred",
	"Comment": "stores sample events until either a time or sample threshold isbreached. both thresholds are reset if one fires. if only one thresholdis set it becomes the only value checked against. when a threshold isbreached the list of sample events is sent to a listener where the eventare fired locally.",
	"Method": "void sampleOccurred(SampleEvent e){\r\n    synchronized (sampleStore) {\r\n        String key = StatisticalSampleResult.getKey(e, keyOnThreadName);\r\n        StatisticalSampleResult statResult = sampleTable.get(key);\r\n        if (statResult == null) {\r\n            statResult = new StatisticalSampleResult(e.getResult());\r\n            sampleTable.put(key, statResult);\r\n            sampleStore.add(new SampleEvent(statResult, e.getThreadGroup()));\r\n        }\r\n        statResult.add(e.getResult());\r\n        sampleCount++;\r\n        boolean sendNow = false;\r\n        if (numSamplesThreshold != -1) {\r\n            if (sampleCount >= numSamplesThreshold) {\r\n                sendNow = true;\r\n            }\r\n        }\r\n        long now = 0;\r\n        if (timeThresholdMs != -1) {\r\n            now = System.currentTimeMillis();\r\n            if (batchSendTime == -1) {\r\n                this.batchSendTime = now + timeThresholdMs;\r\n            }\r\n            if (batchSendTime < now) {\r\n                sendNow = true;\r\n            }\r\n        }\r\n        if (sendNow) {\r\n            try {\r\n                log.debug(\"Firing sample\");\r\n                sendBatch();\r\n                if (timeThresholdMs != -1) {\r\n                    this.batchSendTime = now + timeThresholdMs;\r\n                }\r\n            } catch (RemoteException err) {\r\n                log.warn(\"sampleOccurred\", err);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.util.Converter.getString",
	"Comment": "converts object to a string, defaults to empty string if object is null.",
	"Method": "String getString(Object o,String defaultValue,String getString,Object o){\r\n    return getString(o, \"\");\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LdapClient.searchTest",
	"Comment": "filter the data in the ldap directory for the given search base.",
	"Method": "boolean searchTest(String searchBase,String searchFilter){\r\n    SearchControls searchcontrols = new // count limit\r\n    SearchControls(SearchControls.SUBTREE_SCOPE, 1L, 0, null, false, false);\r\n    NamingEnumeration<?> ne = dirContext.search(searchBase, searchFilter, searchcontrols);\r\n    return ne.hasMore();\r\n}"
}, {
	"Path": "com.jfinal.config.Interceptors.add",
	"Comment": "the same as addglobalactioninterceptor. it is used to compatible with earlier version of jfinal",
	"Method": "Interceptors add(Interceptor globalActionInterceptor){\r\n    if (globalActionInterceptor == null) {\r\n        throw new IllegalArgumentException(\"globalActionInterceptor can not be null.\");\r\n    }\r\n    InterceptorManager.me().addGlobalActionInterceptor(globalActionInterceptor);\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledChoice.getToolTipText",
	"Comment": "returns the tooltip string that has been set with settooltiptext",
	"Method": "String getToolTipText(){\r\n    if (choiceList == null) {\r\n        return null;\r\n    }\r\n    return choiceList.getToolTipText();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler.setRetobj",
	"Comment": "sets the return objects attribute of the ldapsampler object",
	"Method": "void setRetobj(String newRobj){\r\n    this.setProperty(RETOBJ, newRobj);\r\n}"
}, {
	"Path": "com.jfoenix.transitions.JFXKeyValue.builder",
	"Comment": "this builder is created to ensure type inference from method arguments",
	"Method": "Builder builder(){\r\n    return new Builder();\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXTreeTableView.group",
	"Comment": "this is a blocking method so it should not be called from the ui thread,it will regroup the tree table view",
	"Method": "void group(TreeTableColumn<S, ?> treeTableColumns,Map group,TreeTableColumn<S, ?> column,Map parentGroup,Object key,RecursiveTreeItem<S> root){\r\n    if (parentGroup.isEmpty()) {\r\n        parentGroup = groupByFunction(root.filteredItems, column);\r\n        return parentGroup;\r\n    }\r\n    Object value = parentGroup.get(key);\r\n    if (value instanceof List) {\r\n        Object newGroup = groupByFunction((List) value, column);\r\n        parentGroup.put(key, newGroup);\r\n        return parentGroup;\r\n    } else if (value instanceof Map) {\r\n        for (Object childKey : ((Map) value).keySet()) {\r\n            value = group(column, (Map) value, childKey, root);\r\n        }\r\n        parentGroup.put(key, value);\r\n        return parentGroup;\r\n    } else if (key == null) {\r\n        for (Object childKey : parentGroup.keySet()) {\r\n            parentGroup = group(column, parentGroup, childKey, root);\r\n        }\r\n        return parentGroup;\r\n    }\r\n    return parentGroup;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.Graph.getPreferredScrollableViewportSize",
	"Comment": "gets the preferredscrollableviewportsize attribute of the graph object.",
	"Method": "Dimension getPreferredScrollableViewportSize(){\r\n    return this.getPreferredSize();\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDepthControlSecondPeakThreshold",
	"Comment": "a threshold on how much the minimum correlation score must differ fromthe next best score",
	"Method": "void setDepthControlSecondPeakThreshold(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DEPTH_CONTROL_SECOND_PEAK_THRESHOLD, value);\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDepthControlTextureDifference",
	"Comment": "a parameter for determining whether the texture in the region issufficient to justify a depth result",
	"Method": "void setDepthControlTextureDifference(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DEPTH_CONTROL_TEXTURE_DIFFERENCE_THRESHOLD, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JSyntaxTextArea.createUndoManager",
	"Comment": "override undomanager to allow disabling if feature causes issuessee issue 19 on rsyntaxtextarea",
	"Method": "RUndoManager createUndoManager(){\r\n    RUndoManager undoManager = super.createUndoManager();\r\n    if (disableUndo) {\r\n        undoManager.setLimit(0);\r\n    } else {\r\n        undoManager.setLimit(MAX_UNDOS);\r\n    }\r\n    return undoManager;\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.IntIndexer.create",
	"Comment": "creates a int indexer to access efficiently the data of a pointer.",
	"Method": "IntIndexer create(int[] array,IntIndexer create,IntBuffer buffer,IntIndexer create,IntPointer pointer,IntIndexer create,int[] array,long[] sizes,long[] strides,IntIndexer create,IntBuffer buffer,long[] sizes,long[] strides,IntIndexer create,IntPointer pointer,long[] sizes,long[] strides,IntIndexer create,IntPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new IntRawIndexer(pointer, sizes, strides) : new IntBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        int[] array = new int[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new IntArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.IntIndexer.create",
	"Comment": "creates a int indexer to access efficiently the data of a pointer.",
	"Method": "IntIndexer create(int[] array,IntIndexer create,IntBuffer buffer,IntIndexer create,IntPointer pointer,IntIndexer create,int[] array,long[] sizes,long[] strides,IntIndexer create,IntBuffer buffer,long[] sizes,long[] strides,IntIndexer create,IntPointer pointer,long[] sizes,long[] strides,IntIndexer create,IntPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterContext.setRestartNextLoop",
	"Comment": "if set to true current loop iteration will be interrupted and jmeter will go to next iteration",
	"Method": "void setRestartNextLoop(boolean restartNextLoop){\r\n    setStartNextThreadLoop(restartNextLoop);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.parser.HtmlParsingUtils.createUrlFromAnchor",
	"Comment": "create a new sampler based on an href string plus a contextual urlobject. given that an href string might be of three possible forms, someprocessing is required.",
	"Method": "HTTPSamplerBase createUrlFromAnchor(String parsedUrlString,URL context){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Creating URL from Anchor: \" + parsedUrlString + \", base: \" + context);\r\n    }\r\n    URL url = ConversionUtils.makeRelativeURL(context, parsedUrlString);\r\n    HTTPSamplerBase sampler = HTTPSamplerFactory.newInstance();\r\n    sampler.setDomain(url.getHost());\r\n    sampler.setProtocol(url.getProtocol());\r\n    sampler.setPort(url.getPort());\r\n    sampler.setPath(url.getPath());\r\n    sampler.parseArguments(url.getQuery());\r\n    return sampler;\r\n}"
}, {
	"Path": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory.getNestedFunctionInner",
	"Comment": "returns the result of a nested function call with a parameter inside the inner function",
	"Method": "Map<Integer, Geometry> getNestedFunctionInner(Geometry geom){\r\n    return retrieveExpected(createNativeNestedFunctionInnerStatement(geom), GEOMETRY);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG92Dialect.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return support.getDWithinSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.TestCompiler.configureSampler",
	"Comment": "configures sampler from samplepackage extracted from test plan and returns it",
	"Method": "SamplePackage configureSampler(Sampler sampler){\r\n    SamplePackage pack = samplerConfigMap.get(sampler);\r\n    pack.setSampler(sampler);\r\n    configureWithConfigElements(sampler, pack.getConfigs());\r\n    return pack;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.test.SleepTest.setupTest",
	"Comment": "do any initialization required by this client. in this case,initialization consists of getting the values of the sleeptime andsleepmask parameters. it is generally recommended to do anyinitialization such as getting parameter values in the setuptest methodrather than the runtest method in order to add as little overhead aspossible to the test.",
	"Method": "void setupTest(JavaSamplerContext context){\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(whoAmI() + \"\\tsetupTest()\");\r\n        listParameters(context);\r\n    }\r\n    sleepTime = context.getLongParameter(\"SleepTime\", DEFAULT_SLEEP_TIME);\r\n    sleepMask = context.getLongParameter(\"SleepMask\", DEFAULT_SLEEP_MASK);\r\n    name = context.getParameter(TestElement.NAME);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.client.InitialContextFactory.lookupContext",
	"Comment": "look up the context from the local cache, creating it if necessary.",
	"Method": "Context lookupContext(String initialContextFactory,String providerUrl,boolean useAuth,String securityPrincipal,String securityCredentials){\r\n    String cacheKey = createKey(Thread.currentThread().getId(), initialContextFactory, providerUrl, securityPrincipal, securityCredentials);\r\n    Context ctx = MAP.get(cacheKey);\r\n    if (ctx == null) {\r\n        Properties props = new Properties();\r\n        props.setProperty(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);\r\n        props.setProperty(Context.PROVIDER_URL, providerUrl);\r\n        if (useAuth && securityPrincipal != null && securityCredentials != null && securityPrincipal.length() > 0 && securityCredentials.length() > 0) {\r\n            props.setProperty(Context.SECURITY_PRINCIPAL, securityPrincipal);\r\n            props.setProperty(Context.SECURITY_CREDENTIALS, securityCredentials);\r\n            log.info(\"authentication properties set\");\r\n        }\r\n        try {\r\n            ctx = new InitialContext(props);\r\n        } catch (NoClassDefFoundError | Exception e) {\r\n            throw new NamingException(e.toString());\r\n        }\r\n        Context oldCtx = MAP.putIfAbsent(cacheKey, ctx);\r\n        if (oldCtx != null) {\r\n            try {\r\n                ctx.close();\r\n            } catch (Exception e) {\r\n            }\r\n            ctx = oldCtx;\r\n        }\r\n    }\r\n    return ctx;\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.mathematics.RamerDouglasPeucker.douglasPeucker",
	"Comment": "given a curve composed of line segments find a similar curve with fewer points.",
	"Method": "void douglasPeucker(List<Double[]> list,int s,int e,double epsilon,List<Double[]> resultList,List<Double[]> douglasPeucker,List<Double[]> list,double epsilon){\r\n    final List<Double[]> resultList = new ArrayList<Double[]>();\r\n    douglasPeucker(list, 0, list.size(), epsilon, resultList);\r\n    return resultList;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.sample",
	"Comment": "samples the url passed in and stores the result inhttpsampleresult, following redirects and downloadingpage resources as appropriate.when getting a redirect target, redirects are not followed and resourcesare not downloaded. the caller will take care of this.",
	"Method": "SampleResult sample(Entry e,SampleResult sample,HTTPSampleResult sample,URL u,String method,boolean areFollowingRedirect,int depth){\r\n    SampleResult res = null;\r\n    try {\r\n        res = sample(getUrl(), getMethod(), false, 0);\r\n        if (res != null) {\r\n            res.setSampleLabel(getName());\r\n        }\r\n        return res;\r\n    } catch (Exception e) {\r\n        return errorResult(e, new HTTPSampleResult());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.SizeAssertionGui.createFieldPanel",
	"Comment": "create a panel allowing the user to choose which response field should betested.",
	"Method": "JPanel createFieldPanel(){\r\n    JPanel panel = new JPanel();\r\n    panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString(\"assertion_resp_size_field\")));\r\n    responseNetworkButton = new JRadioButton(JMeterUtils.getResString(\"assertion_network_size\"));\r\n    responseHeadersButton = new JRadioButton(JMeterUtils.getResString(\"assertion_headers\"));\r\n    responseBodyButton = new JRadioButton(JMeterUtils.getResString(\"assertion_body_resp\"));\r\n    responseCodeButton = new JRadioButton(JMeterUtils.getResString(\"assertion_code_resp\"));\r\n    responseMessageButton = new JRadioButton(JMeterUtils.getResString(\"assertion_message_resp\"));\r\n    ButtonGroup group = new ButtonGroup();\r\n    group.add(responseNetworkButton);\r\n    group.add(responseHeadersButton);\r\n    group.add(responseBodyButton);\r\n    group.add(responseCodeButton);\r\n    group.add(responseMessageButton);\r\n    panel.add(responseNetworkButton);\r\n    panel.add(responseHeadersButton);\r\n    panel.add(responseBodyButton);\r\n    panel.add(responseCodeButton);\r\n    panel.add(responseMessageButton);\r\n    responseNetworkButton.setSelected(true);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jmeter.util.SSLManager.reset",
	"Comment": "resets the sslmanager so that we can create a new one with a new keystore",
	"Method": "void reset(){\r\n    SSLManager.manager = null;\r\n}"
}, {
	"Path": "org.apache.commons.cli.avalon.CLOptionDescriptor.getId",
	"Comment": "retrieve the id for option. the id is also the character if using singlecharacter options.",
	"Method": "int getId(){\r\n    return this.id;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.TestPlanGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    if (el instanceof TestPlan) {\r\n        TestPlan tp = (TestPlan) el;\r\n        functionalMode.setSelected(tp.isFunctionalMode());\r\n        serializedMode.setSelected(tp.isSerialized());\r\n        tearDownOnShutdown.setSelected(tp.isTearDownOnShutdown());\r\n        final JMeterProperty udv = tp.getUserDefinedVariablesAsProperty();\r\n        if (udv != null) {\r\n            argsPanel.configure((Arguments) udv.getObjectValue());\r\n        }\r\n        browseJar.setFiles(tp.getTestPlanClasspathArray());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.PostWriter.getFileMultipartEndDivider",
	"Comment": "get the bytes used to end a file multipartencoded using encoding",
	"Method": "byte[] getFileMultipartEndDivider(){\r\n    byte[] ending = getMultipartDivider();\r\n    byte[] completeEnding = new byte[ending.length + CRLF.length];\r\n    System.arraycopy(CRLF, 0, completeEnding, 0, CRLF.length);\r\n    System.arraycopy(ending, 0, completeEnding, CRLF.length, ending.length);\r\n    return completeEnding;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.modifier.gui.RegExUserParametersGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement extractor){\r\n    super.configureTestElement(extractor);\r\n    if (extractor instanceof RegExUserParameters) {\r\n        RegExUserParameters regExUserParams = (RegExUserParameters) extractor;\r\n        regExUserParams.setRegExRefName(refRegExRefNameField.getText());\r\n        regExUserParams.setRegExParamNamesGrNr(paramNamesGrNrField.getText());\r\n        regExUserParams.setRegExParamValuesGrNr(paramValuesGrNrField.getText());\r\n    }\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDrawer.toggle",
	"Comment": "toggles the drawer between open and closed. the drawer will be closed if it is shown or transitioning betweenclosed and open. likewise, it will be opened if it is open or transitioning from open to closed.",
	"Method": "void toggle(){\r\n    if (isOpened() || isOpening()) {\r\n        close();\r\n    } else {\r\n        open();\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG94Dialect.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    return support.getSpatialAggregateSQL(columnName, aggregation);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextArea.focusLost",
	"Comment": "callback method when the focus to the text field component is lost.",
	"Method": "void focusLost(FocusEvent pFocusEvent){\r\n    if (!oldValue.equals(mTextArea.getText())) {\r\n        notifyChangeListeners();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.initMethodObjects",
	"Comment": "method tries to get the setup and teardown method for the class",
	"Method": "void initMethodObjects(Object testObject){\r\n    setUpMethod = null;\r\n    tearDownMethod = null;\r\n    if (!getDoNotSetUpTearDown()) {\r\n        setUpMethod = getJunit4() ? getMethodWithAnnotation(testObject, Before.class) : getMethod(testObject, SETUP);\r\n        tearDownMethod = getJunit4() ? getMethodWithAnnotation(testObject, After.class) : getMethod(testObject, TEARDOWN);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.SwitchControllerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement ic){\r\n    configureTestElement(ic);\r\n    ((SwitchController) ic).setSelection(switchValue.getText());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.isProtocolDefaultPort",
	"Comment": "tell whether the default port for the specified protocol is used",
	"Method": "boolean isProtocolDefaultPort(){\r\n    final int port = getPortIfSpecified();\r\n    final String protocol = getProtocol();\r\n    boolean isDefaultHTTPPort = HTTPConstants.PROTOCOL_HTTP.equalsIgnoreCase(protocol) && port == HTTPConstants.DEFAULT_HTTP_PORT;\r\n    boolean isDefaultHTTPSPort = HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(protocol) && port == HTTPConstants.DEFAULT_HTTPS_PORT;\r\n    return port == UNSPECIFIED_PORT || isDefaultHTTPPort || isDefaultHTTPSPort;\r\n}"
}, {
	"Path": "org.apache.jmeter.NewDriver.listJars",
	"Comment": "generate an array of jar files located in a directory.jar files located in sub directories will not be added.",
	"Method": "File[] listJars(File dir){\r\n    if (dir.isDirectory()) {\r\n        return dir.listFiles((f, name) -> {\r\n            if (name.endsWith(\".jar\")) {\r\n                File jar = new File(f, name);\r\n                return jar.isFile() && jar.canRead();\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    return new File[0];\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getKoMaxTime",
	"Comment": "get the maximal elapsed time for requests within sliding window",
	"Method": "double getKoMaxTime(){\r\n    return koResponsesStats.getMax();\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.Pointer.init",
	"Comment": "called by native libraries to initialize the object fields.",
	"Method": "void init(long allocatedAddress,long allocatedCapacity,long ownerAddress,long deallocatorAddress){\r\n    address = allocatedAddress;\r\n    position = 0;\r\n    limit = allocatedCapacity;\r\n    capacity = allocatedCapacity;\r\n    if (ownerAddress != 0 && deallocatorAddress != 0) {\r\n        deallocator(new NativeDeallocator(this, ownerAddress, deallocatorAddress));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.isConcurrentDwn",
	"Comment": "return if used a concurrent thread pool to get embedded resources.",
	"Method": "boolean isConcurrentDwn(){\r\n    return getPropertyAsBoolean(CONCURRENT_DWN, false);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.StatVisualizer.clearData",
	"Comment": "clears this visualizer and its model, and forces a repaint of the table.",
	"Method": "void clearData(){\r\n    synchronized (lock) {\r\n        model.clearData();\r\n        tableRows.clear();\r\n        newRows.clear();\r\n        tableRows.put(TOTAL_ROW_LABEL, new SamplingStatCalculator(TOTAL_ROW_LABEL));\r\n        model.addRow(tableRows.get(TOTAL_ROW_LABEL));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.HTTPFileArgsPanel.checkDeleteAndBrowseStatus",
	"Comment": "enable or disable the delete button depending on whether or not there isa row to be deleted.",
	"Method": "void checkDeleteAndBrowseStatus(){\r\n    if (tableModel.getRowCount() == 0) {\r\n        browse.setEnabled(false);\r\n        delete.setEnabled(false);\r\n    } else {\r\n        browse.setEnabled(true);\r\n        delete.setEnabled(true);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.timers.gui.AbstractRandomTimerGui.configure",
	"Comment": "configure this gui component from the underlying testelement.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    delayField.setText(el.getPropertyAsString(ConstantTimer.DELAY));\r\n    rangeField.setText(el.getPropertyAsString(RandomTimer.RANGE));\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG9Dialect.supports",
	"Comment": "does this dialect supports the specified spatialfunction.",
	"Method": "boolean supports(SpatialFunction function){\r\n    return support.supports(function);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.HTTPFileArgsPanel.actionPerformed",
	"Comment": "invoked when an action occurs. this implementation supports the add anddelete buttons.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String action = e.getActionCommand();\r\n    if (action.equals(ADD)) {\r\n        addFile(\"\");\r\n    }\r\n    runCommandOnSelectedFile(action);\r\n}"
}, {
	"Path": "com.jfinal.kit.HashKit.generateSalt",
	"Comment": "md5 128bit 16bytes\tsha1 160bit 20bytes\tsha256 256bit 32bytes\tsha384 384bit 48bytes\tsha512 512bit 64bytes",
	"Method": "String generateSalt(int saltLength){\r\n    StringBuilder salt = new StringBuilder(saltLength);\r\n    for (int i = 0; i < saltLength; i++) {\r\n        salt.append(CHAR_ARRAY[random.nextInt(CHAR_ARRAY.length)]);\r\n    }\r\n    return salt.toString();\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    final StringBuffer aggregateFunction = new StringBuffer();\r\n    final SpatialAggregate sa = new SpatialAggregate(aggregation);\r\n    if (sa.getAggregateSyntax() == null) {\r\n        throw new IllegalArgumentException(\"Unknown Spatial Aggregation (\" + aggregation + \").\");\r\n    }\r\n    aggregateFunction.append(sa.getAggregateSyntax());\r\n    aggregateFunction.append(\"(\");\r\n    if (sa.isAggregateType()) {\r\n        aggregateFunction.append(\"SDOAGGRTYPE(\");\r\n    }\r\n    aggregateFunction.append(columnName);\r\n    if (sa.isAggregateType()) {\r\n        aggregateFunction.append(\", \").append(.001).append(\")\");\r\n    }\r\n    aggregateFunction.append(\")\");\r\n    return aggregateFunction.toString();\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.AbstractScopedTestElement.getSampleList",
	"Comment": "generate a list of qualifying sample results,depending on the scope.",
	"Method": "List<SampleResult> getSampleList(SampleResult result){\r\n    List<SampleResult> sampleList = new ArrayList();\r\n    String scope = fetchScope();\r\n    if (isScopeParent(scope) || isScopeAll(scope)) {\r\n        sampleList.add(result);\r\n    }\r\n    if (isScopeChildren(scope) || isScopeAll(scope)) {\r\n        Collections.addAll(sampleList, result.getSubResults());\r\n    }\r\n    return sampleList;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.isSuccessCode",
	"Comment": "determine if the http status code is successful or noti.e. in range 200 to 399 inclusive",
	"Method": "boolean isSuccessCode(int code){\r\n    return MetricUtils.isSuccessCode(code);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.config.gui.JavaConfigGui.createClassnamePanel",
	"Comment": "create a panel with gui components allowing the user to select a testclass.",
	"Method": "JPanel createClassnamePanel(){\r\n    List<String> possibleClasses = new ArrayList();\r\n    try {\r\n        possibleClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { JavaSamplerClient.class });\r\n        possibleClasses.remove(JavaSampler.class.getName() + \"$ErrorSamplerClient\");\r\n    } catch (Exception e) {\r\n        log.debug(\"Exception getting interfaces.\", e);\r\n    }\r\n    classNameLabeledChoice = new JLabeledChoice(JMeterUtils.getResString(\"protocol_java_classname\"), possibleClasses.toArray(ArrayUtils.EMPTY_STRING_ARRAY), true, false);\r\n    classNameLabeledChoice.addChangeListener(this);\r\n    warningLabel.setForeground(Color.RED);\r\n    Font font = warningLabel.getFont();\r\n    warningLabel.setFont(new Font(font.getFontName(), Font.BOLD, (int) (font.getSize() * 1.1)));\r\n    warningLabel.setVisible(false);\r\n    VerticalPanel panel = new VerticalPanel();\r\n    panel.add(classNameLabeledChoice);\r\n    panel.add(warningLabel);\r\n    return panel;\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Strings.commaDelimitedListToSet",
	"Comment": "convenience method to convert a csv string list to a set.note that this will suppress duplicates.",
	"Method": "Set<String> commaDelimitedListToSet(String str){\r\n    Set<String> set = new TreeSet<String>();\r\n    String[] tokens = commaDelimitedListToStringArray(str);\r\n    for (String token : tokens) {\r\n        set.add(token);\r\n    }\r\n    return set;\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.sequence.SubsequenceCounter.getCount",
	"Comment": "finds the number of times a string occurs as a subsequence in a text.",
	"Method": "int getCount(char[] sequence,char[] subSequence){\r\n    try {\r\n        seq = sequence;\r\n        subseq = subSequence;\r\n        tbl = new int[seq.length + 1][subseq.length + 1];\r\n        for (int row = 0; row < tbl.length; row++) for (int col = 0; col < tbl[row].length; col++) tbl[row][col] = countMatches(row, col);\r\n        return tbl[seq.length][subseq.length];\r\n    } finally {\r\n        seq = null;\r\n        subseq = null;\r\n        tbl = null;\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.UShortIndexer.create",
	"Comment": "creates a short indexer to access efficiently the data of a pointer.",
	"Method": "UShortIndexer create(short[] array,UShortIndexer create,ShortBuffer buffer,UShortIndexer create,ShortPointer pointer,UShortIndexer create,short[] array,long[] sizes,long[] strides,UShortIndexer create,ShortBuffer buffer,long[] sizes,long[] strides,UShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,UShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new UShortRawIndexer(pointer, sizes, strides) : new UShortBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        short[] array = new short[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new UShortArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.UShortIndexer.create",
	"Comment": "creates a short indexer to access efficiently the data of a pointer.",
	"Method": "UShortIndexer create(short[] array,UShortIndexer create,ShortBuffer buffer,UShortIndexer create,ShortPointer pointer,UShortIndexer create,short[] array,long[] sizes,long[] strides,UShortIndexer create,ShortBuffer buffer,long[] sizes,long[] strides,UShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,UShortIndexer create,ShortPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.BackendListenerContext.containsParameter",
	"Comment": "determine whether or not a value has been specified for the parameterwith this name.",
	"Method": "boolean containsParameter(String name){\r\n    return params.containsKey(name);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.client.ReceiveSubscriber.getMessage",
	"Comment": "get the next message or null.never blocks for longer than the specified timeout.",
	"Method": "Message getMessage(long timeout){\r\n    Message message = null;\r\n    if (queue != null) {\r\n        try {\r\n            if (timeout < 10) {\r\n                message = queue.poll();\r\n            } else {\r\n                message = queue.poll(timeout, TimeUnit.MILLISECONDS);\r\n            }\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        return message;\r\n    }\r\n    if (timeout < 10) {\r\n        message = subscriber.receiveNoWait();\r\n    } else {\r\n        message = subscriber.receive(timeout);\r\n    }\r\n    return message;\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.CharPointer.putString",
	"Comment": "copies the string chars into native memory, including a terminating null char.sets the limit to just before the terminating null character.",
	"Method": "CharPointer putString(String s){\r\n    char[] chars = s.toCharArray();\r\n    return put(chars).put(chars.length, (char) 0).limit(chars.length);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.LoopController.setContinueForever",
	"Comment": "determines whether the loop will return any samples if it is rerun.",
	"Method": "void setContinueForever(boolean forever){\r\n    setContinueForeverPrivate(forever);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.ModuleControllerGui.isTestElementAllowed",
	"Comment": "check if a given test element can be selected as the target of a module controller",
	"Method": "boolean isTestElementAllowed(TestElement testElement){\r\n    return testElement != null && !(testElement instanceof AbstractThreadGroup) && !(testElement instanceof TestPlan);\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Strings.split",
	"Comment": "split a string at the first occurrence of the delimiter.does not include the delimiter in the result.",
	"Method": "String[] split(String toSplit,String delimiter){\r\n    if (!hasLength(toSplit) || !hasLength(delimiter)) {\r\n        return null;\r\n    }\r\n    int offset = toSplit.indexOf(delimiter);\r\n    if (offset < 0) {\r\n        return null;\r\n    }\r\n    String beforeDelimiter = toSplit.substring(0, offset);\r\n    String afterDelimiter = toSplit.substring(offset + delimiter.length());\r\n    return new String[] { beforeDelimiter, afterDelimiter };\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG91Dialect.getIsEmptySQL",
	"Comment": "returns the sql fragment when parsing a isemptyexpression or\tisnotempty expression.",
	"Method": "String getIsEmptySQL(String columnName,boolean isEmpty){\r\n    return support.getIsEmptySQL(columnName, isEmpty);\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.test.RadixTrieTests.cornerCase",
	"Comment": "this was an error condition previously in converting a black node with children into a white terminating node",
	"Method": "void cornerCase(){\r\n    RadixTrie<String, Integer> map = new RadixTrie<String, Integer>();\r\n    map.put(\"1\", 1);\r\n    map.put(\"112\", 112);\r\n    map.put(\"113\", 1123);\r\n    map.put(\"11\", 11);\r\n    map.remove(\"11\");\r\n    Integer r = map.put(\"11\", 11);\r\n    Assert.assertTrue(r == null);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GuiPackage.updateCurrentGui",
	"Comment": "update the gui for the currently selected node. the gui component isconfigured to reflect the settings in the current tree node.",
	"Method": "void updateCurrentGui(){\r\n    updateCurrentNode();\r\n    refreshCurrentGui();\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getRequest",
	"Comment": "return httpservletrequest. do not use httpservletrequest object in constructor of controller",
	"Method": "HttpServletRequest getRequest(){\r\n    return request;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.tcp.config.gui.TCPConfigGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement element){\r\n    configureTestElement(element);\r\n    element.setProperty(TCPSampler.CLASSNAME, classname.getText(), \"\");\r\n    element.setProperty(TCPSampler.SERVER, serverPanel.getServer());\r\n    element.setProperty(TCPSampler.RE_USE_CONNECTION, reUseConnection.isSelected());\r\n    element.setProperty(TCPSampler.PORT, serverPanel.getPort());\r\n    setNoDelay.setPropertyFromTristate(element, TCPSampler.NODELAY);\r\n    element.setProperty(TCPSampler.TIMEOUT, serverPanel.getResponseTimeout());\r\n    element.setProperty(TCPSampler.TIMEOUT_CONNECT, serverPanel.getConnectTimeout(), \"\");\r\n    element.setProperty(TCPSampler.REQUEST, requestData.getText());\r\n    closeConnection.setPropertyFromTristate(element, TCPSampler.CLOSE_CONNECTION);\r\n    element.setProperty(TCPSampler.SO_LINGER, soLinger.getText(), \"\");\r\n    element.setProperty(TCPSampler.EOL_BYTE, eolByte.getText(), \"\");\r\n}"
}, {
	"Path": "org.apache.jmeter.save.CSVSaveService.resultToDelimitedString",
	"Comment": "convert a result into a string, where the fields of the result areseparated by a specified string.",
	"Method": "String resultToDelimitedString(SampleEvent event,String resultToDelimitedString,SampleEvent event,String delimiter,String resultToDelimitedString,SampleEvent event,SampleResult sample,SampleSaveConfiguration saveConfig,String delimiter){\r\n    StringQuoter text = new StringQuoter(delimiter.charAt(0));\r\n    if (saveConfig.saveTimestamp()) {\r\n        if (saveConfig.printMilliseconds()) {\r\n            text.append(sample.getTimeStamp());\r\n        } else if (saveConfig.threadSafeLenientFormatter() != null) {\r\n            String stamp = saveConfig.threadSafeLenientFormatter().format(new Date(sample.getTimeStamp()));\r\n            text.append(stamp);\r\n        }\r\n    }\r\n    if (saveConfig.saveTime()) {\r\n        text.append(sample.getTime());\r\n    }\r\n    if (saveConfig.saveLabel()) {\r\n        text.append(sample.getSampleLabel());\r\n    }\r\n    if (saveConfig.saveCode()) {\r\n        text.append(sample.getResponseCode());\r\n    }\r\n    if (saveConfig.saveMessage()) {\r\n        text.append(sample.getResponseMessage());\r\n    }\r\n    if (saveConfig.saveThreadName()) {\r\n        text.append(sample.getThreadName());\r\n    }\r\n    if (saveConfig.saveDataType()) {\r\n        text.append(sample.getDataType());\r\n    }\r\n    if (saveConfig.saveSuccess()) {\r\n        text.append(sample.isSuccessful());\r\n    }\r\n    if (saveConfig.saveAssertionResultsFailureMessage()) {\r\n        String message = sample.getFirstAssertionFailureMessage();\r\n        if (message != null) {\r\n            text.append(message);\r\n        } else {\r\n            text.append(\"\");\r\n        }\r\n    }\r\n    if (saveConfig.saveBytes()) {\r\n        text.append(sample.getBytesAsLong());\r\n    }\r\n    if (saveConfig.saveSentBytes()) {\r\n        text.append(sample.getSentBytes());\r\n    }\r\n    if (saveConfig.saveThreadCounts()) {\r\n        text.append(sample.getGroupThreads());\r\n        text.append(sample.getAllThreads());\r\n    }\r\n    if (saveConfig.saveUrl()) {\r\n        text.append(sample.getURL());\r\n    }\r\n    if (saveConfig.saveFileName()) {\r\n        text.append(sample.getResultFileName());\r\n    }\r\n    if (saveConfig.saveLatency()) {\r\n        text.append(sample.getLatency());\r\n    }\r\n    if (saveConfig.saveEncoding()) {\r\n        text.append(sample.getDataEncodingWithDefault());\r\n    }\r\n    if (saveConfig.saveSampleCount()) {\r\n        text.append(sample.getSampleCount());\r\n        text.append(sample.getErrorCount());\r\n    }\r\n    if (saveConfig.saveHostname()) {\r\n        text.append(event.getHostname());\r\n    }\r\n    if (saveConfig.saveIdleTime()) {\r\n        text.append(sample.getIdleTime());\r\n    }\r\n    if (saveConfig.saveConnectTime()) {\r\n        text.append(sample.getConnectTime());\r\n    }\r\n    for (int i = 0; i < SampleEvent.getVarCount(); i++) {\r\n        text.append(event.getVarValue(i));\r\n    }\r\n    return text.toString();\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG9Dialect.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    return support.getSpatialAggregateSQL(columnName, aggregation);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.HTTPFileArg.toString",
	"Comment": "returns path, param name, mime type information ofhttpfilearg object.",
	"Method": "String toString(){\r\n    return \"path:'\" + getPath() + \"'|param:'\" + getParamName() + \"'|mimetype:'\" + getMimeType() + \"'\";\r\n}"
}, {
	"Path": "org.hibernate.spatial.criterion.SpatialRestrictions.filter",
	"Comment": "apply a bounding box overlap constraint to the named property",
	"Method": "SpatialFilter filter(String propertyName,Geometry value,SpatialFilter filter,String propertyName,Envelope envelope,int srid){\r\n    return new SpatialFilter(propertyName, envelope, srid);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.setConnectionCookie",
	"Comment": "extracts all the required cookies for that particular url request andsets them in the httpmethod passed in.",
	"Method": "String setConnectionCookie(HttpRequest request,URL url,CookieManager cookieManager){\r\n    String cookieHeader = null;\r\n    if (cookieManager != null) {\r\n        cookieHeader = cookieManager.getCookieHeaderForURL(url);\r\n        if (cookieHeader != null) {\r\n            request.setHeader(HTTPConstants.HEADER_COOKIE, cookieHeader);\r\n        }\r\n    }\r\n    return cookieHeader;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.control.gui.LdapTestSamplerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement sampler){\r\n    sampler.clear();\r\n    sampler.addTestElement(ldapDefaultPanel.createTestElement());\r\n    sampler.addTestElement(loginPanel.createTestElement());\r\n    super.configureTestElement(sampler);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.DNSCacheManager.getResolver",
	"Comment": "tries to initialize resolver , otherwise sets initfailed to true",
	"Method": "ExtendedResolver getResolver(){\r\n    if (resolver == null && !initFailed) {\r\n        resolver = createResolver();\r\n    }\r\n    return (ExtendedResolver) resolver;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.graph.impl.CustomGraphConsumer.setSampleVariableName",
	"Comment": "sets the samplevariablename.sets the boolean isnativessamplevariablename",
	"Method": "void setSampleVariableName(String sampleVarName){\r\n    sampleVariableName = sampleVarName;\r\n    isNativeSampleVariableName = NATIVE_VARIABLES.contains(sampleVarName);\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.setColumnValue",
	"Comment": "sets the value in the data set at the current row, using a column name tofind the column in which to insert the new value.",
	"Method": "void setColumnValue(String column,Object value){\r\n    List<Object> tempList;\r\n    if ((tempList = data.get(column)) == null) {\r\n        tempList = new ArrayList();\r\n        data.put(column, tempList);\r\n    }\r\n    if (currentPos == -1) {\r\n        currentPos = 0;\r\n    }\r\n    if (currentPos >= size) {\r\n        size++;\r\n        tempList.add(value);\r\n    } else if (currentPos >= tempList.size()) {\r\n        tempList.add(value);\r\n    } else {\r\n        tempList.set(currentPos, value);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.parser.URLCollection.add",
	"Comment": "adds the url to the collection, first wrapping it in the urlstring class",
	"Method": "boolean add(URL u){\r\n    return coll.add(new URLString(u));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui.createServernamePanel",
	"Comment": "this will create the servername panel in the ldapconfiggui.",
	"Method": "JPanel createServernamePanel(){\r\n    return createLabelPanel(\"servername\", servername);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.setConstructorString",
	"Comment": "set the string label used to create an instance of thetest with the string constructor.",
	"Method": "void setConstructorString(String constr){\r\n    setProperty(CONSTRUCTORSTRING, constr);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.control.gui.LdapExtTestSamplerGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    ldapDefaultPanel.configure(element);\r\n}"
}, {
	"Path": "org.apache.jmeter.util.ColorHelper.changeColorCyclicIncrement",
	"Comment": "given the color, get the red, green and blue components.increment the lowest of the components by the indicated increment value.if all the components are the same value increment in the order of red,green and blue.",
	"Method": "Color changeColorCyclicIncrement(Color col,int inc){\r\n    int red = col.getRed();\r\n    int green = col.getGreen();\r\n    int blue = col.getBlue();\r\n    int temp1 = Math.min(red, green);\r\n    int temp2 = Math.min(temp1, blue);\r\n    if (red == temp2) {\r\n        red += inc;\r\n        red %= 256;\r\n    } else if (green == temp2) {\r\n        green += inc;\r\n        green %= 256;\r\n    } else if (blue == temp2) {\r\n        blue += inc;\r\n        blue %= 256;\r\n    }\r\n    return new Color(red, green, blue);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.HTMLAssertionGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement inElement){\r\n    log.debug(\"HTMLAssertionGui.modifyTestElement() called\");\r\n    configureTestElement(inElement);\r\n    String errorThresholdString = errorThresholdField.getText();\r\n    long errorThreshold = 0;\r\n    try {\r\n        errorThreshold = Long.parseLong(errorThresholdString);\r\n    } catch (NumberFormatException e) {\r\n        errorThreshold = 0;\r\n    }\r\n    ((HTMLAssertion) inElement).setErrorThreshold(errorThreshold);\r\n    String warningThresholdString = warningThresholdField.getText();\r\n    long warningThreshold = 0;\r\n    try {\r\n        warningThreshold = Long.parseLong(warningThresholdString);\r\n    } catch (NumberFormatException e) {\r\n        warningThreshold = 0;\r\n    }\r\n    ((HTMLAssertion) inElement).setWarningThreshold(warningThreshold);\r\n    String docTypeString = docTypeBox.getSelectedItem().toString();\r\n    ((HTMLAssertion) inElement).setDoctype(docTypeString);\r\n    boolean trackErrorsOnly = errorsOnly.isSelected();\r\n    ((HTMLAssertion) inElement).setErrorsOnly(trackErrorsOnly);\r\n    if (htmlRadioButton.isSelected()) {\r\n        ((HTMLAssertion) inElement).setHTML();\r\n    } else if (xhtmlRadioButton.isSelected()) {\r\n        ((HTMLAssertion) inElement).setXHTML();\r\n    } else {\r\n        ((HTMLAssertion) inElement).setXML();\r\n    }\r\n    ((HTMLAssertion) inElement).setFilename(filePanel.getFilename());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.SharedTCLogParser.parse",
	"Comment": "the method is responsible for reading each line, and breaking out of thewhile loop if a set number of lines is given.",
	"Method": "int parse(TestElement el,int parseCount,int parse,FileServer breader,TestElement el,int parseCount){\r\n    int actualCount = 0;\r\n    String line = null;\r\n    try {\r\n        line = breader.readLine(FILENAME);\r\n        while (line != null) {\r\n            if (line.length() > 0) {\r\n                actualCount += this.parseLine(line, el);\r\n            }\r\n            if (parseCount != -1 && actualCount >= parseCount) {\r\n                break;\r\n            }\r\n            line = breader.readLine(FILENAME);\r\n        }\r\n        if (line == null) {\r\n            breader.closeFile(FILENAME);\r\n        }\r\n    } catch (IOException ioe) {\r\n        log.error(\"Error reading log file\", ioe);\r\n    }\r\n    return actualCount;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler.singleBindOp",
	"Comment": "this will do the bind and unbind for the user defined testcase",
	"Method": "void singleBindOp(SampleResult res){\r\n    try {\r\n        res.sampleStart();\r\n        DirContext ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(), getUserPw(), getConnTimeOut(), isSecure());\r\n        LdapExtClient.disconnect(ctx);\r\n    } finally {\r\n        res.sampleEnd();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.util.HeapDumper.init",
	"Comment": "initialise the dumper, and report if there is a problem.this is optional, as the dump methods will initialise if necessary.",
	"Method": "void init(){\r\n    Exception e = getInstance().exception;\r\n    if (e != null) {\r\n        throw e;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JLabeledRadioI18N.getText",
	"Comment": "the implementation will get the resource name from the selected radio buttonin the jbuttongroup.",
	"Method": "String getText(){\r\n    return this.bGroup.getSelection().getActionCommand();\r\n}"
}, {
	"Path": "org.apache.jmeter.control.RunTime.getIterCount",
	"Comment": "this is needed for onceonly to work like other loop controllers",
	"Method": "int getIterCount(){\r\n    return loopCount + 1;\r\n}"
}, {
	"Path": "org.apache.jmeter.services.FileServer.readLine",
	"Comment": "get the next line of the named file, first line is name to false",
	"Method": "String readLine(String filename,String readLine,String filename,boolean recycle,String readLine,String filename,boolean recycle,boolean ignoreFirstLine){\r\n    FileEntry fileEntry = files.get(filename);\r\n    if (fileEntry != null) {\r\n        if (fileEntry.inputOutputObject == null) {\r\n            fileEntry.inputOutputObject = createBufferedReader(fileEntry);\r\n        } else if (!(fileEntry.inputOutputObject instanceof Reader)) {\r\n            throw new IOException(\"File \" + filename + \" already in use\");\r\n        }\r\n        BufferedReader reader = (BufferedReader) fileEntry.inputOutputObject;\r\n        String line = reader.readLine();\r\n        if (line == null && recycle) {\r\n            reader.close();\r\n            reader = createBufferedReader(fileEntry);\r\n            fileEntry.inputOutputObject = reader;\r\n            if (ignoreFirstLine) {\r\n                reader.readLine();\r\n            }\r\n            line = reader.readLine();\r\n        }\r\n        log.debug(\"Read:{}\", line);\r\n        return line;\r\n    }\r\n    throw new IOException(\"File never reserved: \" + filename);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.GraphVisualizer.createGraphInfoPanel",
	"Comment": "creates a panel which numerically displays the current graph values.",
	"Method": "Box createGraphInfoPanel(){\r\n    Box graphInfoPanel = Box.createHorizontalBox();\r\n    noSamplesField = createInfoField(Color.black, 6);\r\n    dataField = createInfoField(Color.black, 5);\r\n    averageField = createInfoField(Color.blue, 5);\r\n    deviationField = createInfoField(Color.red, 5);\r\n    throughputField = createInfoField(JMeterColor.DARK_GREEN, 15);\r\n    medianField = createInfoField(JMeterColor.PURPLE, 5);\r\n    graphInfoPanel.add(createInfoColumn(// $NON-NLS-1$\r\n    createInfoLabel(\"graph_results_no_samples\", noSamplesField), // $NON-NLS-1$\r\n    noSamplesField, createInfoLabel(\"graph_results_deviation\", deviationField), deviationField));\r\n    graphInfoPanel.add(Box.createHorizontalGlue());\r\n    graphInfoPanel.add(createInfoColumn(createInfoLabel(\"graph_results_latest_sample\", dataField), // $NON-NLS-1$\r\n    dataField, createInfoLabel(\"graph_results_throughput\", throughputField), throughputField));\r\n    graphInfoPanel.add(Box.createHorizontalGlue());\r\n    graphInfoPanel.add(createInfoColumn(createInfoLabel(\"graph_results_average\", averageField), // $NON-NLS-1$\r\n    averageField, createInfoLabel(\"graph_results_median\", medianField), medianField));\r\n    graphInfoPanel.add(Box.createHorizontalGlue());\r\n    return graphInfoPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.config.MultipartUrlConfig.addNonEncodedArgument",
	"Comment": "add a value that is not url encoded, and make sure itappears in the gui that it will not be encoded whenthe request is sent.",
	"Method": "void addNonEncodedArgument(String name,String value,String contentType){\r\n    Arguments myArgs = getArguments();\r\n    HTTPArgument arg = new HTTPArgument(name, value, false);\r\n    if (!StringUtils.isEmpty(contentType)) {\r\n        int indexOfSemiColon = contentType.indexOf(';');\r\n        if (indexOfSemiColon > 0) {\r\n            arg.setContentType(contentType.substring(0, indexOfSemiColon));\r\n        } else {\r\n            arg.setContentType(contentType);\r\n        }\r\n    }\r\n    arg.setAlwaysEncoded(false);\r\n    myArgs.addArgument(arg);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.TestHC4CookieManager.testMissingPath0",
	"Comment": "tests missing cookie path for a trivial url fetch from the domainnote that this fails prior to a fix for bug 38256",
	"Method": "void testMissingPath0(){\r\n    URL url = new URL(\"http://d.e.f/goo.html\");\r\n    man.addCookieFromHeader(\"test=moo\", url);\r\n    String s = man.getCookieHeaderForURL(new URL(\"http://d.e.f/\"));\r\n    assertNotNull(s);\r\n    assertEquals(\"test=moo\", s);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG93Dialect.getIsEmptySQL",
	"Comment": "returns the sql fragment when parsing a isemptyexpression or\tisnotempty expression.",
	"Method": "String getIsEmptySQL(String columnName,boolean isEmpty){\r\n    return support.getIsEmptySQL(columnName, isEmpty);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledChoice.setToolTipText",
	"Comment": "registers the text to display in a tool tip.the text displays when the cursor lingers over the component.",
	"Method": "void setToolTipText(String text){\r\n    choiceList.setToolTipText(text);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.TimeoutEnabledQueueRequestor.request",
	"Comment": "sends a request and waits for a reply. the temporary queue is used forthe jmsreplyto destination, and only one reply per requestis expected. the method blocks indefinitely until a message arrives!",
	"Method": "Message request(Message message,Message request,Message message,long timeout){\r\n    message.setJMSReplyTo(tempQueue);\r\n    sender.send(message);\r\n    return receiver.receive(timeout);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return \"SDO_WITHIN_DISTANCE (\" + columnName + \",?, ?) = 'TRUE' \";\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.dispose",
	"Comment": "removes this menuscroller from the associated menu and restores thedefault behavior of the menu.",
	"Method": "void dispose(){\r\n    if (menu != null) {\r\n        menu.removePopupMenuListener(menuListener);\r\n        menu.removeMouseWheelListener(mouseWheelListener);\r\n        menu = null;\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacv.FFmpegFrameGrabber.setVideoTimestamp",
	"Comment": "settimestamp with resulting video frame type if there is a video stream",
	"Method": "void setVideoTimestamp(long timestamp){\r\n    setTimestamp(timestamp, EnumSet.of(Frame.Type.VIDEO));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.test.SleepTest.whoAmI",
	"Comment": "generate a string identifier of this test for debugging purposes.",
	"Method": "String whoAmI(){\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(Thread.currentThread().toString());\r\n    sb.append(\"@\");\r\n    sb.append(Integer.toHexString(hashCode()));\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleSaveConfiguration.setterName",
	"Comment": "convert a config name to the method name of the setterthe setter method requires a boolean parameter.",
	"Method": "String setterName(String configName){\r\n    return CONFIG_SETTER_PREFIX + configName;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.GenericController.setFirst",
	"Comment": "if b is true, it means first is reset which means controller has executed all its children",
	"Method": "void setFirst(boolean b){\r\n    first = b;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui.createRootdnPanel",
	"Comment": "this will create the root distinguished name panel in the ldapconfiggui.",
	"Method": "JPanel createRootdnPanel(){\r\n    return createLabelPanel(\"dn\", rootdn);\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.LoginConfigGui.createPasswordPanel",
	"Comment": "create a panel containing the password field and corresponding label.",
	"Method": "JPanel createPasswordPanel(){\r\n    JPanel panel = new JPanel(new BorderLayout(5, 0));\r\n    JLabel label = new JLabel(JMeterUtils.getResString(\"password\"));\r\n    label.setLabelFor(password);\r\n    panel.add(label, BorderLayout.WEST);\r\n    panel.add(password, BorderLayout.CENTER);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.searchTest",
	"Comment": "this will do the search test for the user defined testcase as well asinbuilt test case.",
	"Method": "void searchTest(LdapClient ldap,SampleResult res){\r\n    if (!getPropertyAsBoolean(USER_DEFINED)) {\r\n        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));\r\n        setProperty(new StringProperty(SEARCHBASE, getPropertyAsString(ADD)));\r\n        setProperty(new StringProperty(SEARCHFILTER, getPropertyAsString(ADD)));\r\n    }\r\n    res.sampleStart();\r\n    searchFoundEntries = ldap.searchTest(getPropertyAsString(SEARCHBASE), getPropertyAsString(SEARCHFILTER));\r\n    res.sampleEnd();\r\n    if (!getPropertyAsBoolean(USER_DEFINED)) {\r\n        ldap.deleteTest(getPropertyAsString(ADD));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.TransactionControllerGui.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));\r\n    setBorder(makeBorder());\r\n    add(makeTitlePanel());\r\n    generateParentSample = new JCheckBox(JMeterUtils.getResString(\"transaction_controller_parent\"));\r\n    add(CheckBoxPanel.wrap(generateParentSample));\r\n    includeTimers = new JCheckBox(JMeterUtils.getResString(\"transaction_controller_include_timers\"), true);\r\n    add(CheckBoxPanel.wrap(includeTimers));\r\n}"
}, {
	"Path": "com.auth0.jwt.impl.JsonNodeClaim.claimFromNode",
	"Comment": "helper method to create a claim representation from the given jsonnode.",
	"Method": "Claim claimFromNode(JsonNode node){\r\n    if (node == null || node.isNull() || node.isMissingNode()) {\r\n        return new NullClaim();\r\n    }\r\n    return new JsonNodeClaim(node);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.XPathPanel.setNegated",
	"Comment": "set this to true, if you want success when the xpath does not match.",
	"Method": "void setNegated(boolean negated){\r\n    this.negated.setSelected(negated);\r\n}"
}, {
	"Path": "org.apache.jmeter.functions.FileRowColContainer.nextRow",
	"Comment": "returns the next row to the caller, and updates it, allowing for wrapround",
	"Method": "int nextRow(){\r\n    int row = nextRow;\r\n    nextRow++;\r\n    if (nextRow >= fileData.size()) {\r\n        nextRow = 0;\r\n    }\r\n    log.debug(\"Row: {}\", row);\r\n    return row;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.Graph.getScrollableTracksViewportWidth",
	"Comment": "gets the scrollabletracksviewportwidth attribute of the graph object.",
	"Method": "boolean getScrollableTracksViewportWidth(){\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JMeterMenuBar.addPluginsMenuItems",
	"Comment": "mutate the given menu by, for each menucreator adding a separatorfollowed by each of its menus based upon the menu location.",
	"Method": "void addPluginsMenuItems(JMenu menu,List<MenuCreator> menuCreators,MENU_LOCATION location){\r\n    for (MenuCreator menuCreator : menuCreators) {\r\n        JMenuItem[] menuItems = menuCreator.getMenuItemsAtLocation(location);\r\n        if (menuItems.length != 0) {\r\n            menu.addSeparator();\r\n        }\r\n        Arrays.stream(menuItems).forEachOrdered(menu::add);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui.testPanel",
	"Comment": "this will create the user defined test panel for create or modify ordelete or search based on the panel selected in the itemevent in theldapconfiggui",
	"Method": "JPanel testPanel(){\r\n    cards = new JPanel(new CardLayout());\r\n    cards.add(new JPanel(), CARDS_DEFAULT);\r\n    cards.add(createAddPanel(), CARDS_ADD);\r\n    cards.add(createModifyPanel(), CARDS_MODIFY);\r\n    cards.add(createModdnPanel(), CARDS_RENAME);\r\n    cards.add(createDeletePanel(), CARDS_DELETE);\r\n    cards.add(createSearchPanel(), CARDS_SEARCH);\r\n    cards.add(createBindPanel(), CARDS_BIND);\r\n    cards.add(createComparePanel(), CARDS_COMPARE);\r\n    return cards;\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.BatchSampleSender.testEnded",
	"Comment": "checks if any sample events are still present in the samplestore andsends them to the listener. informs the listener of the testended.",
	"Method": "void testEnded(String host){\r\n    log.info(\"Test Ended on {}\", host);\r\n    try {\r\n        if (!sampleStore.isEmpty()) {\r\n            listener.processBatch(sampleStore);\r\n            sampleStore.clear();\r\n        }\r\n        listener.testEnded(host);\r\n    } catch (RemoteException err) {\r\n        log.error(\"testEnded(host)\", err);\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.testing.SpatialFunctionalTestCase.afterConfigurationBuilt",
	"Comment": "override to also ensure that the spatialtestsupport utility is\tinitialised together with the hibernate configuration.",
	"Method": "void afterConfigurationBuilt(Configuration cfg){\r\n    super.afterConfigurationBuilt(cfg);\r\n    initializeSpatialTestSupport(serviceRegistry());\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.SampleContext.getWorkingDirectory",
	"Comment": "return the root directory that consumers are authorized to use forintermediate work.sampleconsumers are encourage to create their own work directoriesbeneath this root work directory",
	"Method": "File getWorkingDirectory(){\r\n    return workingDirectory;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.ExternalSampleSorter.setChunkSize",
	"Comment": "set the number of samples that will be stored in memory. thisdefines the number of samples that will be written in each chunk filebefore merging step as well.",
	"Method": "void setChunkSize(long chunkSize){\r\n    if (chunkSize < 50000) {\r\n        chunkSize = 50000;\r\n    }\r\n    this.chunkSize = chunkSize;\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.AbstractThreadGroup.getOnErrorStartNextLoop",
	"Comment": "check if a sampler error should cause thread to start next loop.",
	"Method": "boolean getOnErrorStartNextLoop(){\r\n    return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_START_NEXT_LOOP);\r\n}"
}, {
	"Path": "org.apache.jorphan.util.Converter.getChar",
	"Comment": "convert object to char, or defaultvalue if no conversion canbe applied",
	"Method": "char getChar(Object o,char getChar,Object o,char defaultValue){\r\n    try {\r\n        if (o == null) {\r\n            return defaultValue;\r\n        }\r\n        if (o instanceof Character) {\r\n            return ((Character) o).charValue();\r\n        } else if (o instanceof Byte) {\r\n            return (char) ((Byte) o).byteValue();\r\n        } else if (o instanceof Integer) {\r\n            return (char) ((Integer) o).intValue();\r\n        } else {\r\n            String s = o.toString();\r\n            if (s.length() > 0) {\r\n                return o.toString().charAt(0);\r\n            }\r\n            return defaultValue;\r\n        }\r\n    } catch (Exception e) {\r\n        return defaultValue;\r\n    }\r\n}"
}, {
	"Path": "org.apache.log.LogEvent.getRelativeTime",
	"Comment": "get the time of the log event relative to start of application.",
	"Method": "long getRelativeTime(){\r\n    return m_time - START_TIME;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.core.Sample.getSentBytes",
	"Comment": "gets the number of sent bytes stored in the sample.if column is not in results, we return 0",
	"Method": "long getSentBytes(){\r\n    if (metadata.indexOf(CSVSaveService.CSV_SENT_BYTES) >= 0) {\r\n        return getData(long.class, CSVSaveService.CSV_SENT_BYTES).longValue();\r\n    } else {\r\n        return 0L;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.AccessLogSampler.setLogFile",
	"Comment": "set the path where xml messages are stored for random selection.",
	"Method": "void setLogFile(String path){\r\n    logFile = path;\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.ObjectTableModel.checkFunctors",
	"Comment": "check all registered functors.only for use in unit test code",
	"Method": "boolean checkFunctors(Object _value,Class<?> caller){\r\n    Object value;\r\n    if (_value == null && objectClass != null) {\r\n        try {\r\n            value = objectClass.getDeclaredConstructor().newInstance();\r\n        } catch (ReflectiveOperationException e) {\r\n            log.error(\"Cannot create instance of class {}\", objectClass.getName(), e);\r\n            return false;\r\n        }\r\n    } else {\r\n        value = _value;\r\n    }\r\n    boolean status = true;\r\n    for (int i = 0; i < getColumnCount(); i++) {\r\n        Functor setMethod = writeFunctors.get(i);\r\n        if (setMethod != null && !setMethod.checkMethod(value, getColumnClass(i))) {\r\n            status = false;\r\n            log.warn(\"{} is attempting to use nonexistent {}\", caller.getName(), setMethod);\r\n        }\r\n        Functor getMethod = readFunctors.get(i);\r\n        if (getMethod != null && !getMethod.checkMethod(value)) {\r\n            status = false;\r\n            log.warn(\"{} is attempting to use nonexistent {}\", caller.getName(), getMethod);\r\n        }\r\n    }\r\n    return status;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.Save.backupFilesToDelete",
	"Comment": "filters list of backup files to those which are candidates for deletion.",
	"Method": "List<File> backupFilesToDelete(List<File> backupFiles){\r\n    List<File> filesToDelete = new ArrayList();\r\n    if (BACKUP_MAX_HOURS > 0) {\r\n        filesToDelete.addAll(expiredBackupFiles(backupFiles));\r\n    }\r\n    if (BACKUP_MAX_COUNT > 0 && backupFiles.size() > BACKUP_MAX_COUNT) {\r\n        filesToDelete.addAll(backupFiles.subList(0, backupFiles.size() - BACKUP_MAX_COUNT));\r\n    }\r\n    return filesToDelete.stream().distinct().collect(Collectors.toList());\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.equals",
	"Comment": "compares all objects in the tree and verifies that the two trees containthe same objects at the same tree levels. returns true if they do, falseotherwise.",
	"Method": "boolean equals(Object o){\r\n    if (!(o instanceof HashTree)) {\r\n        return false;\r\n    }\r\n    HashTree oo = (HashTree) o;\r\n    if (oo.size() != this.size()) {\r\n        return false;\r\n    }\r\n    return data.equals(oo.data);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RenderAsCssJQuery.actionPerformed",
	"Comment": "display the response as text or as rendered html. change the text on thebutton appropriate to the current display.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String command = e.getActionCommand();\r\n    if ((sampleResult != null) && (CSSJQUEY_TESTER_COMMAND.equals(command))) {\r\n        String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);\r\n        executeAndShowCssJqueryTester(response);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.StandardGenerator.init",
	"Comment": "initialize the generator. it should create the following objects. listedhashtree threadgroup file object writer",
	"Method": "void init(){\r\n    generateRequest();\r\n}"
}, {
	"Path": "org.hibernate.spatial.testing.AbstractExpectationsFactory.getIntersection",
	"Comment": "returns the expected results of the intersection function",
	"Method": "Map<Integer, Geometry> getIntersection(Geometry geom){\r\n    return retrieveExpected(createNativeIntersectionStatement(geom), GEOMETRY);\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.SimpleConfigGui.checkDeleteStatus",
	"Comment": "enable or disable the delete button depending on whether or not there isa row to be deleted.",
	"Method": "void checkDeleteStatus(){\r\n    if (tableModel.getRowCount() == 0) {\r\n        delete.setEnabled(false);\r\n    } else {\r\n        delete.setEnabled(true);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPJavaImpl.sample",
	"Comment": "samples the url passed in and stores the result inhttpsampleresult, following redirects and downloadingpage resources as appropriate.when getting a redirect target, redirects are not followed and resourcesare not downloaded. the caller will take care of this.",
	"Method": "HTTPSampleResult sample(URL url,String method,boolean areFollowingRedirect,int frameDepth){\r\n    HttpURLConnection conn = null;\r\n    String urlStr = url.toString();\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Start : sample {}, method {}, followingRedirect {}, depth {}\", urlStr, method, areFollowingRedirect, frameDepth);\r\n    }\r\n    HTTPSampleResult res = new HTTPSampleResult();\r\n    res.setSampleLabel(this.testElement.getName());\r\n    res.setURL(url);\r\n    res.setHTTPMethod(method);\r\n    res.sampleStart();\r\n    final CacheManager cacheManager = getCacheManager();\r\n    if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {\r\n        if (cacheManager.inCache(url, getHeaders(getHeaderManager()))) {\r\n            return updateSampleResultForResourceInCache(res);\r\n        }\r\n    }\r\n    try {\r\n        int retry = -1;\r\n        for (; retry < MAX_CONN_RETRIES; retry++) {\r\n            try {\r\n                conn = setupConnection(url, method, res);\r\n                savedConn = conn;\r\n                conn.connect();\r\n                break;\r\n            } catch (BindException e) {\r\n                if (retry >= MAX_CONN_RETRIES) {\r\n                    log.error(\"Can't connect after {} retries, message: {}\", retry, e.toString());\r\n                    throw e;\r\n                }\r\n                log.debug(\"Bind exception, try again\");\r\n                if (conn != null) {\r\n                    savedConn = null;\r\n                    conn.disconnect();\r\n                }\r\n                setUseKeepAlive(false);\r\n            } catch (IOException e) {\r\n                log.debug(\"Connection failed, giving up\");\r\n                throw e;\r\n            }\r\n        }\r\n        if (retry > MAX_CONN_RETRIES) {\r\n            throw new BindException();\r\n        }\r\n        if (method.equals(HTTPConstants.POST)) {\r\n            String postBody = sendPostData(conn);\r\n            res.setQueryString(postBody);\r\n        } else if (method.equals(HTTPConstants.PUT)) {\r\n            String putBody = sendPutData(conn);\r\n            res.setQueryString(putBody);\r\n        }\r\n        byte[] responseData = readResponse(conn, res);\r\n        res.sampleEnd();\r\n        res.setResponseData(responseData);\r\n        int errorLevel = conn.getResponseCode();\r\n        String respMsg = conn.getResponseMessage();\r\n        String hdr = conn.getHeaderField(0);\r\n        if (hdr == null) {\r\n            hdr = \"(null)\";\r\n        }\r\n        if (errorLevel == -1) {\r\n            if (respMsg != null) {\r\n                try {\r\n                    errorLevel = Integer.parseInt(respMsg.substring(0, 3));\r\n                    log.warn(\"ResponseCode==-1; parsed {} as {}\", respMsg, errorLevel);\r\n                } catch (NumberFormatException e) {\r\n                    log.warn(\"ResponseCode==-1; could not parse {} hdr: {}\", respMsg, hdr);\r\n                }\r\n            } else {\r\n                respMsg = hdr;\r\n                log.warn(\"ResponseCode==-1 & null ResponseMessage. Header(0)= {} \", hdr);\r\n            }\r\n        }\r\n        if (errorLevel == -1) {\r\n            res.setResponseCode(\"(null)\");\r\n        } else {\r\n            res.setResponseCode(Integer.toString(errorLevel));\r\n        }\r\n        res.setSuccessful(isSuccessCode(errorLevel));\r\n        if (respMsg == null) {\r\n            respMsg = hdr;\r\n        }\r\n        res.setResponseMessage(respMsg);\r\n        String ct = conn.getContentType();\r\n        if (ct != null) {\r\n            res.setContentType(ct);\r\n            res.setEncodingAndType(ct);\r\n        }\r\n        String responseHeaders = getResponseHeaders(conn);\r\n        res.setResponseHeaders(responseHeaders);\r\n        if (res.isRedirect()) {\r\n            res.setRedirectLocation(conn.getHeaderField(HTTPConstants.HEADER_LOCATION));\r\n        }\r\n        // $NON-NLS-1$ $NON-NLS-2$\r\n        res.setHeadersSize(responseHeaders.replaceAll(\"\\n\", \"\\r\\n\").length() + 2);\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Response headersSize={}, bodySize={}, Total={}\", res.getHeadersSize(), res.getBodySizeAsLong(), res.getHeadersSize() + res.getBodySizeAsLong());\r\n        }\r\n        if (getAutoRedirects()) {\r\n            res.setURL(conn.getURL());\r\n        }\r\n        saveConnectionCookies(conn, url, getCookieManager());\r\n        if (cacheManager != null) {\r\n            cacheManager.saveDetails(conn, res);\r\n        }\r\n        res = resultProcessing(areFollowingRedirect, frameDepth, res);\r\n        log.debug(\"End : sample\");\r\n        return res;\r\n    } catch (IOException e) {\r\n        if (res.getEndTime() == 0) {\r\n            res.sampleEnd();\r\n        }\r\n        savedConn = null;\r\n        if (conn != null) {\r\n            conn.disconnect();\r\n        }\r\n        conn = null;\r\n        return errorResult(e, res);\r\n    } finally {\r\n        savedConn = null;\r\n        disconnect(conn);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JMeterMenuBar.createMenuBar",
	"Comment": "creates the menubar for this application. i believe in my heart that thisshould be defined in a file somewhere, but that is for later.",
	"Method": "void createMenuBar(){\r\n    this.menuCreators = findMenuCreators();\r\n    makeFileMenu();\r\n    makeEditMenu();\r\n    makeRunMenu();\r\n    makeSearchMenu();\r\n    makeOptionsMenu();\r\n    makeHelpMenu();\r\n    this.add(fileMenu);\r\n    this.add(editMenu);\r\n    this.add(searchMenu);\r\n    this.add(runMenu);\r\n    this.add(optionsMenu);\r\n    menuCreators.stream().map(MenuCreator::getTopLevelMenus).flatMap(Arrays::stream).forEachOrdered(this::add);\r\n    this.add(helpMenu);\r\n}"
}, {
	"Path": "org.bytedeco.javacv.JavaCV.hysteresisThreshold",
	"Comment": "similar to hysteresis thresholding as used by the canny edge detector",
	"Method": "void hysteresisThreshold(IplImage srcImage,IplImage dstImage,double highThresh,double lowThresh,double maxValue){\r\n    int highThreshold = (int) Math.round(highThresh);\r\n    int lowThreshold = (int) Math.round(lowThresh);\r\n    byte lowValue = 0;\r\n    byte medValue = (byte) Math.round(maxValue / 2);\r\n    byte highValue = (byte) Math.round(maxValue);\r\n    int height = srcImage.height();\r\n    int width = srcImage.width();\r\n    ByteBuffer srcData = srcImage.getByteBuffer();\r\n    ByteBuffer dstData = dstImage.getByteBuffer();\r\n    int srcStep = srcImage.widthStep();\r\n    int dstStep = dstImage.widthStep();\r\n    int srcIndex = 0;\r\n    int dstIndex = 0;\r\n    int i = 0;\r\n    int in = srcData.get(srcIndex + i) & 0xFF;\r\n    if (in >= highThreshold) {\r\n        dstData.put(dstIndex + i, highValue);\r\n    } else if (in < lowThreshold) {\r\n        dstData.put(dstIndex + i, lowValue);\r\n    } else {\r\n        dstData.put(dstIndex + i, medValue);\r\n    }\r\n    for (i = 1; i < width - 1; i++) {\r\n        in = srcData.get(srcIndex + i) & 0xFF;\r\n        if (in >= highThreshold) {\r\n            dstData.put(dstIndex + i, highValue);\r\n        } else if (in < lowThreshold) {\r\n            dstData.put(dstIndex + i, lowValue);\r\n        } else {\r\n            byte prev = dstData.get(dstIndex + i - 1);\r\n            if (prev == highValue) {\r\n                dstData.put(dstIndex + i, highValue);\r\n            } else {\r\n                dstData.put(dstIndex + i, medValue);\r\n            }\r\n        }\r\n    }\r\n    i = width - 1;\r\n    in = srcData.get(srcIndex + i) & 0xFF;\r\n    if (in >= highThreshold) {\r\n        dstData.put(dstIndex + i, highValue);\r\n    } else if (in < lowThreshold) {\r\n        dstData.put(dstIndex + i, lowValue);\r\n    } else {\r\n        byte prev = dstData.get(dstIndex + i - 1);\r\n        if (prev == highValue) {\r\n            dstData.put(dstIndex + i, highValue);\r\n        } else {\r\n            dstData.put(dstIndex + i, medValue);\r\n        }\r\n    }\r\n    height--;\r\n    while (height-- > 0) {\r\n        srcIndex += srcStep;\r\n        dstIndex += dstStep;\r\n        i = 0;\r\n        in = srcData.get(srcIndex + i) & 0xFF;\r\n        if (in >= highThreshold) {\r\n            dstData.put(dstIndex + i, highValue);\r\n        } else if (in < lowThreshold) {\r\n            dstData.put(dstIndex + i, lowValue);\r\n        } else {\r\n            byte prev1 = dstData.get(dstIndex + i - dstStep);\r\n            byte prev2 = dstData.get(dstIndex + i - dstStep + 1);\r\n            if (prev1 == highValue || prev2 == highValue) {\r\n                dstData.put(dstIndex + i, highValue);\r\n            } else {\r\n                dstData.put(dstIndex + i, medValue);\r\n            }\r\n        }\r\n        for (i = 1; i < width - 1; i++) {\r\n            in = srcData.get(srcIndex + i) & 0xFF;\r\n            if (in >= highThreshold) {\r\n                dstData.put(dstIndex + i, highValue);\r\n            } else if (in < lowThreshold) {\r\n                dstData.put(dstIndex + i, lowValue);\r\n            } else {\r\n                byte prev1 = dstData.get(dstIndex + i - 1);\r\n                byte prev2 = dstData.get(dstIndex + i - dstStep - 1);\r\n                byte prev3 = dstData.get(dstIndex + i - dstStep);\r\n                byte prev4 = dstData.get(dstIndex + i - dstStep + 1);\r\n                if (prev1 == highValue || prev2 == highValue || prev3 == highValue || prev4 == highValue) {\r\n                    dstData.put(dstIndex + i, highValue);\r\n                } else {\r\n                    dstData.put(dstIndex + i, medValue);\r\n                }\r\n            }\r\n        }\r\n        i = width - 1;\r\n        in = srcData.get(srcIndex + i) & 0xFF;\r\n        if (in >= highThreshold) {\r\n            dstData.put(dstIndex + i, highValue);\r\n        } else if (in < lowThreshold) {\r\n            dstData.put(dstIndex + i, lowValue);\r\n        } else {\r\n            byte prev1 = dstData.get(dstIndex + i - 1);\r\n            byte prev2 = dstData.get(dstIndex + i - dstStep - 1);\r\n            byte prev3 = dstData.get(dstIndex + i - dstStep);\r\n            if (prev1 == highValue || prev2 == highValue || prev3 == highValue) {\r\n                dstData.put(dstIndex + i, highValue);\r\n            } else {\r\n                dstData.put(dstIndex + i, medValue);\r\n            }\r\n        }\r\n    }\r\n    height = srcImage.height();\r\n    width = srcImage.width();\r\n    dstIndex = (height - 1) * dstStep;\r\n    i = width - 1;\r\n    if (dstData.get(dstIndex + i) == medValue) {\r\n        dstData.put(dstIndex + i, lowValue);\r\n    }\r\n    for (i = width - 2; i > 0; i--) {\r\n        if (dstData.get(dstIndex + i) == medValue) {\r\n            if (dstData.get(dstIndex + i + 1) == highValue) {\r\n                dstData.put(dstIndex + i, highValue);\r\n            } else {\r\n                dstData.put(dstIndex + i, lowValue);\r\n            }\r\n        }\r\n    }\r\n    i = 0;\r\n    if (dstData.get(dstIndex + i) == medValue) {\r\n        if (dstData.get(dstIndex + i + 1) == highValue) {\r\n            dstData.put(dstIndex + i, highValue);\r\n        } else {\r\n            dstData.put(dstIndex + i, lowValue);\r\n        }\r\n    }\r\n    height--;\r\n    while (height-- > 0) {\r\n        dstIndex -= dstStep;\r\n        i = width - 1;\r\n        if (dstData.get(dstIndex + i) == medValue) {\r\n            if (dstData.get(dstIndex + i + dstStep) == highValue || dstData.get(dstIndex + i + dstStep - 1) == highValue) {\r\n                dstData.put(dstIndex + i, highValue);\r\n            } else {\r\n                dstData.put(dstIndex + i, lowValue);\r\n            }\r\n        }\r\n        for (i = width - 2; i > 0; i--) {\r\n            if (dstData.get(dstIndex + i) == medValue) {\r\n                if (dstData.get(dstIndex + i + 1) == highValue || dstData.get(dstIndex + i + dstStep + 1) == highValue || dstData.get(dstIndex + i + dstStep) == highValue || dstData.get(dstIndex + i + dstStep - 1) == highValue) {\r\n                    dstData.put(dstIndex + i, highValue);\r\n                } else {\r\n                    dstData.put(dstIndex + i, lowValue);\r\n                }\r\n            }\r\n        }\r\n        i = 0;\r\n        if (dstData.get(dstIndex + i) == medValue) {\r\n            if (dstData.get(dstIndex + i + 1) == highValue || dstData.get(dstIndex + i + dstStep + 1) == highValue || dstData.get(dstIndex + i + dstStep) == highValue) {\r\n                dstData.put(dstIndex + i, highValue);\r\n            } else {\r\n                dstData.put(dstIndex + i, lowValue);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getHeader",
	"Comment": "returns the value of the specified request header as a string.",
	"Method": "String getHeader(String name){\r\n    return request.getHeader(name);\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.SearchByClass.getSearchResults",
	"Comment": "after traversing the hashtree, call this method to get a collection ofthe nodes that were found.",
	"Method": "Collection<T> getSearchResults(){\r\n    return objectsOfClass;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.HTTPFileArgsPanel.stopTableEditing",
	"Comment": "stop any editing that is currently being done on the table. this willsave any changes that have already been made.",
	"Method": "void stopTableEditing(){\r\n    GuiUtils.stopTableEditing(table);\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.getTimeStamp",
	"Comment": "get the sample timestamp, which may be either the start time or the end time.",
	"Method": "long getTimeStamp(){\r\n    return timeStamp;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.TimeoutEnabledQueueRequestor.close",
	"Comment": "closes the timeoutenabledqueuerequestor and its session.since a provider may allocate some resources on behalf of atimeoutenabledqueuerequestor outside the java virtualmachine, clients should close them when they are not needed. relying ongarbage collection to eventually reclaim these resources may not betimely enough.this method closes the session object passed to thetimeoutenabledqueuerequestor constructor.",
	"Method": "void close(){\r\n    String queueName = tempQueue.getQueueName();\r\n    try {\r\n        sender.close();\r\n    } catch (Exception ex) {\r\n        logger.error(\"Error closing sender\", ex);\r\n    }\r\n    try {\r\n        receiver.close();\r\n    } catch (Exception ex) {\r\n        logger.error(\"Error closing receiver\", ex);\r\n    }\r\n    try {\r\n        tempQueue.delete();\r\n    } catch (Exception ex) {\r\n        logger.error(\"Error deleting tempQueue {}\", queueName, ex);\r\n    }\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequestTest.getWithResponseCharset",
	"Comment": "make a get request with a response that includes a charset parameter",
	"Method": "void getWithResponseCharset(){\r\n    handler = new RequestHandler() {\r\n        @Override\r\n        public void handle(Request request, HttpServletResponse response) {\r\n            response.setStatus(HTTP_OK);\r\n            response.setContentType(\"text/html; charset=UTF-8\");\r\n        }\r\n    };\r\n    HttpRequest request = get(url);\r\n    assertEquals(HTTP_OK, request.code());\r\n    assertEquals(CHARSET_UTF8, request.charset());\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequestTest.getWithResponseCharset",
	"Comment": "make a get request with a response that includes a charset parameter",
	"Method": "void getWithResponseCharset(){\r\n    response.setStatus(HTTP_OK);\r\n    response.setContentType(\"text/html; charset=UTF-8\");\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.BackendListenerContext.getParameterNamesIterator",
	"Comment": "get an iterator of the parameter names. each entry in the iterator is astring.",
	"Method": "Iterator<String> getParameterNamesIterator(){\r\n    return params.keySet().iterator();\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.AssertionGui.createTypePanel",
	"Comment": "create a panel allowing the user to choose what type of test should beperformed.",
	"Method": "JPanel createTypePanel(){\r\n    JPanel panel = new JPanel();\r\n    panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString(\"assertion_pattern_match_rules\")));\r\n    ButtonGroup group = new ButtonGroup();\r\n    containsBox = new JRadioButton(JMeterUtils.getResString(\"assertion_contains\"));\r\n    group.add(containsBox);\r\n    containsBox.setSelected(true);\r\n    panel.add(containsBox);\r\n    matchesBox = new JRadioButton(JMeterUtils.getResString(\"assertion_matches\"));\r\n    group.add(matchesBox);\r\n    panel.add(matchesBox);\r\n    equalsBox = new JRadioButton(JMeterUtils.getResString(\"assertion_equals\"));\r\n    group.add(equalsBox);\r\n    panel.add(equalsBox);\r\n    substringBox = new JRadioButton(JMeterUtils.getResString(\"assertion_substring\"));\r\n    group.add(substringBox);\r\n    panel.add(substringBox);\r\n    notBox = new JCheckBox(JMeterUtils.getResString(\"assertion_not\"));\r\n    panel.add(notBox);\r\n    orBox = new JCheckBox(JMeterUtils.getResString(\"assertion_or\"));\r\n    panel.add(orBox);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.getModificationItem",
	"Comment": "this will create the basic attributes for the inbuilt testcase for modifytest.",
	"Method": "ModificationItem[] getModificationItem(){\r\n    ModificationItem[] mods = new ModificationItem[2];\r\n    Attribute mod0 = new BasicAttribute(\"userpassword\", \"secret\");\r\n    Attribute mod1 = new BasicAttribute(\"mobile\", \"123-456-1234\");\r\n    mods[0] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, mod0);\r\n    mods[1] = new ModificationItem(DirContext.ADD_ATTRIBUTE, mod1);\r\n    return mods;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.LoadRecentProject.updateMenuItems",
	"Comment": "set the content and visibility of menu items and menu separator,based on the recent file stored user preferences.",
	"Method": "void updateMenuItems(List<JComponent> menuItems){\r\n    for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {\r\n        JMenuItem recentFile = (JMenuItem) menuItems.get(i);\r\n        String recentFilePath = getRecentFile(i);\r\n        if (recentFilePath != null) {\r\n            File file = new File(recentFilePath);\r\n            // $NON-NLS-1$\r\n            String sb = String.valueOf(i + 1) + \" \" + getMenuItemDisplayName(file);\r\n            recentFile.setText(sb);\r\n            recentFile.setToolTipText(recentFilePath);\r\n            recentFile.setEnabled(true);\r\n            recentFile.setVisible(true);\r\n        } else {\r\n            recentFile.setEnabled(false);\r\n            recentFile.setVisible(false);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Collections.findCommonElementType",
	"Comment": "find the common element type of the given collection, if any.",
	"Method": "Class<?> findCommonElementType(Collection collection){\r\n    if (isEmpty(collection)) {\r\n        return null;\r\n    }\r\n    Class<?> candidate = null;\r\n    for (Object val : collection) {\r\n        if (val != null) {\r\n            if (candidate == null) {\r\n                candidate = val.getClass();\r\n            } else if (candidate != val.getClass()) {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    return candidate;\r\n}"
}, {
	"Path": "org.apache.jmeter.modifiers.gui.UserParametersGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement params){\r\n    GuiUtils.stopTableEditing(paramTable);\r\n    UserParameters userParams = (UserParameters) params;\r\n    userParams.setNames(new CollectionProperty(UserParameters.NAMES, tableModel.getColumnData(NAME_COL_RESOURCE)));\r\n    CollectionProperty threadLists = new CollectionProperty(UserParameters.THREAD_VALUES, new ArrayList());\r\n    log.debug(\"making threadlists from gui\");\r\n    for (int col = 1; col < tableModel.getColumnCount(); col++) {\r\n        threadLists.addItem(tableModel.getColumnData(getUserColName(col)));\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Adding column to threadlist: {}\", tableModel.getColumnData(getUserColName(col)));\r\n            log.debug(\"Threadlists now = {}\", threadLists);\r\n        }\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"In the end, threadlists = {}\", threadLists);\r\n    }\r\n    userParams.setThreadLists(threadLists);\r\n    userParams.setPerIteration(perIterationCheck.isSelected());\r\n    super.configureTestElement(params);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG94Dialect.supports",
	"Comment": "does this dialect supports the specified spatialfunction.",
	"Method": "boolean supports(SpatialFunction function){\r\n    return support.supports(function);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.setBottomFixedCount",
	"Comment": "sets the number of items to fix at the bottom of the menu or popup menu.",
	"Method": "void setBottomFixedCount(int bottomFixedCount){\r\n    this.bottomFixedCount = bottomFixedCount;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.BoundaryExtractor.getDefaultValue",
	"Comment": "get the default value for the variable if no matches are found",
	"Method": "String getDefaultValue(){\r\n    return getPropertyAsString(DEFAULT);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.finalize",
	"Comment": "ensures that the dispose method of this menuscroller iscalled when there are no more references to it.",
	"Method": "void finalize(){\r\n    dispose();\r\n    super.finalize();\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.CriticalSectionControllerGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    if (element instanceof CriticalSectionController) {\r\n        CriticalSectionController controller = (CriticalSectionController) element;\r\n        tfLockName.setText(controller.getLockName());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RunningSample.getAverage",
	"Comment": "returns the average time in milliseconds that samples ran in.",
	"Method": "long getAverage(){\r\n    if (counter == 0) {\r\n        return 0;\r\n    }\r\n    return runningSum / counter;\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.tools.Builder.createJar",
	"Comment": "stores all the files in the given jar file. also attempts to root the pathsof the filenames to each element of a list of classpaths.",
	"Method": "void createJar(File jarFile,String[] classPath,File files){\r\n    logger.info(\"Creating \" + jarFile);\r\n    JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile));\r\n    for (File f : files) {\r\n        String name = f.getPath();\r\n        if (classPath != null) {\r\n            String[] names = new String[classPath.length];\r\n            for (int i = 0; i < classPath.length; i++) {\r\n                String path = new File(classPath[i]).getCanonicalPath();\r\n                if (name.startsWith(path)) {\r\n                    names[i] = name.substring(path.length() + 1);\r\n                }\r\n            }\r\n            for (int i = 0; i < names.length; i++) {\r\n                if (names[i] != null && names[i].length() < name.length()) {\r\n                    name = names[i];\r\n                }\r\n            }\r\n        }\r\n        ZipEntry e = new ZipEntry(name.replace(File.separatorChar, '/'));\r\n        e.setTime(f.lastModified());\r\n        jos.putNextEntry(e);\r\n        FileInputStream fis = new FileInputStream(f);\r\n        byte[] buffer = new byte[64 * 1024];\r\n        int length;\r\n        while ((length = fis.read(buffer)) != -1) {\r\n            jos.write(buffer, 0, length);\r\n        }\r\n        fis.close();\r\n        jos.closeEntry();\r\n    }\r\n    jos.close();\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG91Dialect.supports",
	"Comment": "does this dialect supports the specified spatialfunction.",
	"Method": "boolean supports(SpatialFunction function){\r\n    return support.supports(function);\r\n}"
}, {
	"Path": "org.apache.jmeter.config.Arguments.setArguments",
	"Comment": "set the list of arguments. any existing arguments will be lost.",
	"Method": "void setArguments(List<Argument> arguments){\r\n    setProperty(new CollectionProperty(ARGUMENTS, arguments));\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.PatriciaTrie.addSequence",
	"Comment": "add charsequence to trie and return the node which represents thesequence.",
	"Method": "Node addSequence(C seq){\r\n    if (root == null)\r\n        root = this.creator.createNewNode(null, null, BLACK);\r\n    int indexIntoParent = -1;\r\n    int indexIntoString = -1;\r\n    Node node = root;\r\n    for (int i = 0; i <= seq.length(); ) {\r\n        indexIntoString = i;\r\n        indexIntoParent++;\r\n        if (i == seq.length())\r\n            break;\r\n        char c = seq.charAt(i);\r\n        if (node.partOfThis(c, indexIntoParent)) {\r\n            i++;\r\n            continue;\r\n        } else if (node.string != null && indexIntoParent < node.string.length) {\r\n            break;\r\n        }\r\n        Node child = node.getChildBeginningWithChar(c);\r\n        if (child != null) {\r\n            indexIntoParent = 0;\r\n            node = child;\r\n            i++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    Node addedNode = null;\r\n    Node parent = node.parent;\r\n    if (node.string != null && indexIntoParent < node.string.length) {\r\n        char[] parentString = Arrays.copyOfRange(node.string, 0, indexIntoParent);\r\n        char[] refactorString = Arrays.copyOfRange(node.string, indexIntoParent, node.string.length);\r\n        if (indexIntoString < seq.length()) {\r\n            if (parent != null)\r\n                parent.removeChild(node);\r\n            Node newParent = this.creator.createNewNode(parent, parentString, BLACK);\r\n            if (parent != null)\r\n                parent.addChild(newParent);\r\n            Node newNode1 = node;\r\n            newNode1.parent = newParent;\r\n            newNode1.string = refactorString;\r\n            newParent.addChild(newNode1);\r\n            CharSequence newString = seq.subSequence(indexIntoString, seq.length());\r\n            Node newNode2 = this.creator.createNewNode(newParent, newString.toString().toCharArray(), WHITE);\r\n            newParent.addChild(newNode2);\r\n            addedNode = newNode2;\r\n        } else {\r\n            if (parent != null)\r\n                parent.removeChild(node);\r\n            Node newParent = this.creator.createNewNode(parent, parentString, WHITE);\r\n            if (parent != null)\r\n                parent.addChild(newParent);\r\n            addedNode = newParent;\r\n            Node newNode1 = node;\r\n            newNode1.parent = newParent;\r\n            newNode1.string = refactorString;\r\n            newParent.addChild(newNode1);\r\n        }\r\n    } else if (node.string != null && seq.length() == indexIntoString) {\r\n        if (node.type == WHITE)\r\n            return null;\r\n        node.type = WHITE;\r\n        addedNode = node;\r\n    } else if (node.string != null) {\r\n        CharSequence newString = seq.subSequence(indexIntoString, seq.length());\r\n        Node newNode = this.creator.createNewNode(node, newString.toString().toCharArray(), WHITE);\r\n        node.addChild(newNode);\r\n        addedNode = newNode;\r\n    } else {\r\n        Node newNode = this.creator.createNewNode(node, seq.toString().toCharArray(), WHITE);\r\n        node.addChild(newNode);\r\n        addedNode = newNode;\r\n    }\r\n    size++;\r\n    return addedNode;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.json.render.RenderAsJsonRenderer.actionPerformed",
	"Comment": "display the response as text or as rendered html. change the text on thebutton appropriate to the current display.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String command = e.getActionCommand();\r\n    if ((sampleResult != null) && (JSONPATH_TESTER_COMMAND.equals(command))) {\r\n        String response = jsonDataField.getText();\r\n        executeAndShowXPathTester(response);\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.cli.avalon.CLArgsParser.getUnparsedArgs",
	"Comment": "retrieve an array of arguments that have not been parsed due to theparser halting.",
	"Method": "String[] getUnparsedArgs(){\r\n    return this.unparsedArgs;\r\n}"
}, {
	"Path": "org.apache.jmeter.util.JMeterUtils.findFile",
	"Comment": "find a file in the current directory or in the jmeter bin directory.",
	"Method": "File findFile(String fileName){\r\n    File f = new File(fileName);\r\n    if (!f.exists()) {\r\n        f = new File(getJMeterBinDir(), fileName);\r\n    }\r\n    return f;\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.BytePointer.putString",
	"Comment": "encodes the string into the named charset and copies it in native memory,including a terminating null byte.sets the limit to just before the terminating null byte.",
	"Method": "BytePointer putString(String s,String charsetName,BytePointer putString,String s){\r\n    byte[] bytes = s.getBytes();\r\n    return put(bytes).put(bytes.length, (byte) 0).limit(bytes.length);\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.graph.AStar.aStar",
	"Comment": "find the path using the a algorithm from start vertex to end vertex or null if no path exists.",
	"Method": "List<Graph.Edge<T>> aStar(Graph<T> graph,Graph.Vertex<T> start,Graph.Vertex<T> goal){\r\n    final int size = graph.getVertices().size();\r\n    final Set<Graph.Vertex<T>> closedSet = new HashSet<Graph.Vertex<T>>(size);\r\n    final List<Graph.Vertex<T>> openSet = new ArrayList<Graph.Vertex<T>>(size);\r\n    openSet.add(start);\r\n    final Map<Graph.Vertex<T>, Graph.Vertex<T>> cameFrom = new HashMap<Graph.Vertex<T>, Graph.Vertex<T>>(size);\r\n    final Map<Graph.Vertex<T>, Integer> gScore = new HashMap<Graph.Vertex<T>, Integer>();\r\n    gScore.put(start, 0);\r\n    final Map<Graph.Vertex<T>, Integer> fScore = new HashMap<Graph.Vertex<T>, Integer>();\r\n    for (Graph.Vertex<T> v : graph.getVertices()) fScore.put(v, Integer.MAX_VALUE);\r\n    fScore.put(start, heuristicCostEstimate(start, goal));\r\n    final Comparator<Graph.Vertex<T>> comparator = new Comparator<Graph.Vertex<T>>() {\r\n        @Override\r\n        public int compare(Vertex<T> o1, Vertex<T> o2) {\r\n            if (fScore.get(o1) < fScore.get(o2))\r\n                return -1;\r\n            if (fScore.get(o2) < fScore.get(o1))\r\n                return 1;\r\n            return 0;\r\n        }\r\n    };\r\n    while (!openSet.isEmpty()) {\r\n        final Graph.Vertex<T> current = openSet.get(0);\r\n        if (current.equals(goal))\r\n            return reconstructPath(cameFrom, goal);\r\n        openSet.remove(0);\r\n        closedSet.add(current);\r\n        for (Graph.Edge<T> edge : current.getEdges()) {\r\n            final Graph.Vertex<T> neighbor = edge.getToVertex();\r\n            if (closedSet.contains(neighbor))\r\n                continue;\r\n            final int tenativeGScore = gScore.get(current) + distanceBetween(current, neighbor);\r\n            if (!openSet.contains(neighbor))\r\n                openSet.add(neighbor);\r\n            else if (tenativeGScore >= gScore.get(neighbor))\r\n                continue;\r\n            cameFrom.put(neighbor, current);\r\n            gScore.put(neighbor, tenativeGScore);\r\n            final int estimatedFScore = gScore.get(neighbor) + heuristicCostEstimate(neighbor, goal);\r\n            fScore.put(neighbor, estimatedFScore);\r\n            Collections.sort(openSet, comparator);\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.graph.AStar.aStar",
	"Comment": "find the path using the a algorithm from start vertex to end vertex or null if no path exists.",
	"Method": "List<Graph.Edge<T>> aStar(Graph<T> graph,Graph.Vertex<T> start,Graph.Vertex<T> goal){\r\n    if (fScore.get(o1) < fScore.get(o2))\r\n        return -1;\r\n    if (fScore.get(o2) < fScore.get(o1))\r\n        return 1;\r\n    return 0;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.getPortIfSpecified",
	"Comment": "get the port number from the port string, allowing for trailing blanks.",
	"Method": "int getPortIfSpecified(){\r\n    String portAsString = getPropertyAsString(PORT);\r\n    if (portAsString == null || portAsString.isEmpty()) {\r\n        return UNSPECIFIED_PORT;\r\n    }\r\n    try {\r\n        return Integer.parseInt(portAsString.trim());\r\n    } catch (NumberFormatException e) {\r\n        return UNSPECIFIED_PORT;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.Graph.getScrollableBlockIncrement",
	"Comment": "gets the scrollableblockincrement attribute of the graph object.",
	"Method": "int getScrollableBlockIncrement(Rectangle visibleRect,int orientation,int direction){\r\n    return (int) (visibleRect.width * .9);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.OnceOnlyControllerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement oc){\r\n    configureTestElement(oc);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.ProxyControl.setTarget",
	"Comment": "sets the target node where the samples generated by the proxy have to bestored.",
	"Method": "void setTarget(JMeterTreeNode target){\r\n    this.target = target;\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequestTest.singleVerifier",
	"Comment": "verify single hostname verifier is created across all calls",
	"Method": "void singleVerifier(){\r\n    HttpRequest request1 = get(\"https://localhost\").trustAllHosts();\r\n    HttpRequest request2 = get(\"https://localhost\").trustAllHosts();\r\n    assertNotNull(((HttpsURLConnection) request1.getConnection()).getHostnameVerifier());\r\n    assertNotNull(((HttpsURLConnection) request2.getConnection()).getHostnameVerifier());\r\n    assertEquals(((HttpsURLConnection) request1.getConnection()).getHostnameVerifier(), ((HttpsURLConnection) request2.getConnection()).getHostnameVerifier());\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.LoopControlPanel.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    if (element instanceof LoopController) {\r\n        setState(((LoopController) element).getLoopString());\r\n    } else {\r\n        setState(1);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.setErrorCode",
	"Comment": "provide an unique error code for when the testdoes not pass the assert test.",
	"Method": "void setErrorCode(String code){\r\n    setProperty(ERRORCODE, code);\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXTreeTableView.propagateMouseEventsToParent",
	"Comment": "propagate any mouse event on the tree table view to its parent",
	"Method": "void propagateMouseEventsToParent(){\r\n    this.addEventHandler(MouseEvent.ANY, e -> {\r\n        e.consume();\r\n        this.getParent().fireEvent(e);\r\n    });\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.ResourcesDownloader.invokeAllAndAwaitTermination",
	"Comment": "this method will block until the downloads complete or it get interruptedthe future list returned by this method only contains tasks that have been scheduled in the threadpool.the status of those futures are either done or cancelled",
	"Method": "List<Future<AsynSamplerResultHolder>> invokeAllAndAwaitTermination(int maxConcurrentDownloads,List<Callable<AsynSamplerResultHolder>> list){\r\n    List<Future<AsynSamplerResultHolder>> submittedTasks = new ArrayList();\r\n    if (list.isEmpty()) {\r\n        return submittedTasks;\r\n    }\r\n    concurrentExecutor.setMaximumPoolSize(MAX_POOL_SIZE);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"PoolSize={} LargestPoolSize={}\", concurrentExecutor.getPoolSize(), concurrentExecutor.getLargestPoolSize());\r\n    }\r\n    CompletionService<AsynSamplerResultHolder> completionService = new ExecutorCompletionService(concurrentExecutor);\r\n    int remainingTasksToTake = list.size();\r\n    try {\r\n        int i = 0;\r\n        for (i = 0; i < Math.min(maxConcurrentDownloads, list.size()); i++) {\r\n            Callable<AsynSamplerResultHolder> task = list.get(i);\r\n            submittedTasks.add(completionService.submit(task));\r\n        }\r\n        for (; i < list.size(); i++) {\r\n            Callable<AsynSamplerResultHolder> task = list.get(i);\r\n            completionService.take();\r\n            remainingTasksToTake--;\r\n            submittedTasks.add(completionService.submit(task));\r\n        }\r\n        while (remainingTasksToTake > 0) {\r\n            completionService.take();\r\n            remainingTasksToTake--;\r\n        }\r\n    } finally {\r\n        if (remainingTasksToTake > 0) {\r\n            LOG.debug(\"Interrupted while waiting for resource downloads : cancelling remaining tasks\");\r\n            for (Future<AsynSamplerResultHolder> future : submittedTasks) {\r\n                if (!future.isDone()) {\r\n                    future.cancel(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return submittedTasks;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getOkPercentile",
	"Comment": "returns an estimate for the requested percentile of the stored values.",
	"Method": "double getOkPercentile(double percentile){\r\n    return okResponsesStats.getPercentile(percentile);\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.TestBeanHelper.isDescriptorIgnored",
	"Comment": "checks whether the descriptor should be ignored, i.e.ishiddenisexpert and jmeter not using expert modeno read methodno write method",
	"Method": "boolean isDescriptorIgnored(PropertyDescriptor descriptor){\r\n    return descriptor.isHidden() || (descriptor.isExpert() && !JMeterUtils.isExpertMode()) || descriptor.getReadMethod() == null || descriptor.getWriteMethod() == null;\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.LoginConfigGui.createUsernamePanel",
	"Comment": "create a panel containing the username field and corresponding label.",
	"Method": "JPanel createUsernamePanel(){\r\n    JPanel panel = new JPanel(new BorderLayout(5, 0));\r\n    JLabel label = new JLabel(JMeterUtils.getResString(\"username\"));\r\n    label.setLabelFor(username);\r\n    panel.add(label, BorderLayout.WEST);\r\n    panel.add(username, BorderLayout.CENTER);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.ForeachControlPanel.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    if (displayName) {\r\n        setLayout(new BorderLayout(0, 5));\r\n        setBorder(makeBorder());\r\n        add(makeTitlePanel(), BorderLayout.NORTH);\r\n        JPanel mainPanel = new JPanel(new BorderLayout());\r\n        mainPanel.add(createLoopCountPanel(), BorderLayout.NORTH);\r\n        add(mainPanel, BorderLayout.CENTER);\r\n    } else {\r\n        setLayout(new BorderLayout());\r\n        add(createLoopCountPanel(), BorderLayout.NORTH);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.graph.TimeStampKeysSelector.selectsBeginTime",
	"Comment": "gets a status defining whether the projection is done with the begin orend time of the sample.",
	"Method": "boolean selectsBeginTime(){\r\n    return selectBeginTime;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LdapClient.createTest",
	"Comment": "create the attribute in the ldap directory for the given string.",
	"Method": "void createTest(BasicAttributes basicattributes,String string){\r\n    dirContext.createSubcontext(string, basicattributes);\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setColorExposure",
	"Comment": "controls exposure time of color camera. setting any value will disableauto exposure",
	"Method": "void setColorExposure(int value){\r\n    setOption(RealSense.RS_OPTION_COLOR_EXPOSURE, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.TestWhileController.runTestLastFailed",
	"Comment": "should behave the same for blank and last because success on input",
	"Method": "void runTestLastFailed(String s){\r\n    GenericController controller = new GenericController();\r\n    controller.addTestElement(new TestSampler(\"1\"));\r\n    WhileController while_cont = new WhileController();\r\n    controller.addTestElement(while_cont);\r\n    while_cont.setCondition(s);\r\n    GenericController sub = new GenericController();\r\n    while_cont.addTestElement(sub);\r\n    sub.addTestElement(new TestSampler(\"2\"));\r\n    sub.addTestElement(new TestSampler(\"3\"));\r\n    controller.addTestElement(new TestSampler(\"4\"));\r\n    setLastSampleStatus(true);\r\n    controller.initialize();\r\n    assertEquals(\"1\", nextName(controller));\r\n    assertEquals(\"2\", nextName(controller));\r\n    setLastSampleStatus(false);\r\n    assertEquals(\"3\", nextName(controller));\r\n    assertEquals(\"4\", nextName(controller));\r\n    assertNull(nextName(controller));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.modifyTest",
	"Comment": "this will do the search test for the user defined testcase as well asinbuilt test case.",
	"Method": "void modifyTest(LdapClient ldap,SampleResult res){\r\n    if (getPropertyAsBoolean(USER_DEFINED)) {\r\n        res.sampleStart();\r\n        ldap.modifyTest(getUserModAttributes(), getPropertyAsString(BASE_ENTRY_DN));\r\n        res.sampleEnd();\r\n    } else {\r\n        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));\r\n        setProperty(new StringProperty(MODIFY, getPropertyAsString(ADD)));\r\n        res.sampleStart();\r\n        ldap.modifyTest(getModificationItem(), getPropertyAsString(MODIFY));\r\n        res.sampleEnd();\r\n        ldap.deleteTest(getPropertyAsString(ADD));\r\n    }\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.form",
	"Comment": "write the values in the map as encoded form data to the request body",
	"Method": "HttpRequest form(Map<?, ?> values,HttpRequest form,Entry<?, ?> entry,HttpRequest form,Entry<?, ?> entry,String charset,HttpRequest form,Object name,Object value,HttpRequest form,Object name,Object value,String charset,HttpRequest form,Map<?, ?> values,String charset){\r\n    if (!values.isEmpty())\r\n        for (Entry<?, ?> entry : values.entrySet()) form(entry, charset);\r\n    return this;\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequestTest.postMultipart",
	"Comment": "verify multipart with file, stream, number, and string parameters",
	"Method": "void postMultipart(){\r\n    final StringBuilder body = new StringBuilder();\r\n    handler = new RequestHandler() {\r\n        @Override\r\n        public void handle(Request request, HttpServletResponse response) {\r\n            response.setStatus(HTTP_OK);\r\n            char[] buffer = new char[8192];\r\n            int read;\r\n            try {\r\n                while ((read = request.getReader().read(buffer)) != -1) body.append(buffer, 0, read);\r\n            } catch (IOException e) {\r\n                fail();\r\n            }\r\n        }\r\n    };\r\n    File file = File.createTempFile(\"body\", \".txt\");\r\n    File file2 = File.createTempFile(\"body\", \".txt\");\r\n    new FileWriter(file).append(\"content1\").close();\r\n    new FileWriter(file2).append(\"content4\").close();\r\n    HttpRequest request = post(url);\r\n    request.part(\"description\", \"content2\");\r\n    request.part(\"size\", file.length());\r\n    request.part(\"body\", file.getName(), file);\r\n    request.part(\"file\", file2);\r\n    request.part(\"stream\", new ByteArrayInputStream(\"content3\".getBytes()));\r\n    assertTrue(request.ok());\r\n    assertTrue(body.toString().contains(\"content1\\r\\n\"));\r\n    assertTrue(body.toString().contains(\"content2\\r\\n\"));\r\n    assertTrue(body.toString().contains(\"content3\\r\\n\"));\r\n    assertTrue(body.toString().contains(\"content4\\r\\n\"));\r\n    assertTrue(body.toString().contains(Long.toString(file.length()) + \"\\r\\n\"));\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequestTest.postMultipart",
	"Comment": "verify multipart with file, stream, number, and string parameters",
	"Method": "void postMultipart(){\r\n    response.setStatus(HTTP_OK);\r\n    char[] buffer = new char[8192];\r\n    int read;\r\n    try {\r\n        while ((read = request.getReader().read(buffer)) != -1) body.append(buffer, 0, read);\r\n    } catch (IOException e) {\r\n        fail();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.SummaryReport.clearData",
	"Comment": "clears this visualizer and its model, and forces a repaint of the table.",
	"Method": "void clearData(){\r\n    synchronized (lock) {\r\n        model.clearData();\r\n        newRows.clear();\r\n        tableRows.clear();\r\n        tableRows.put(TOTAL_ROW_LABEL, new Calculator(TOTAL_ROW_LABEL));\r\n        model.addRow(tableRows.get(TOTAL_ROW_LABEL));\r\n    }\r\n    dataChanged = true;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.JMeterGUIComponent.canBeAdded",
	"Comment": "returns whether a component of this type can be added to the test plan.",
	"Method": "boolean canBeAdded(){\r\n    return true;\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleEvent.getThreadGroup",
	"Comment": "get the name of the thread group for which this event was recorded",
	"Method": "String getThreadGroup(){\r\n    return threadGroup;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.getAppendException",
	"Comment": "if append exception is not set, by default it is set to false.users have to explicitly set it to true to see the exceptionsin the result tree.",
	"Method": "boolean getAppendException(){\r\n    return getPropertyAsBoolean(APPEND_EXCEPTION, false);\r\n}"
}, {
	"Path": "org.apache.jmeter.util.BSFJavaScriptEngine.eval",
	"Comment": "this is used by an application to evaluate a string containingsome expression.",
	"Method": "Object eval(String source,int lineNo,int columnNo,Object oscript){\r\n    String scriptText = oscript.toString();\r\n    Object retval = null;\r\n    Context cx;\r\n    try {\r\n        cx = Context.enter();\r\n        cx.setOptimizationLevel(-1);\r\n        cx.setGeneratingDebug(false);\r\n        cx.setGeneratingSource(false);\r\n        cx.setOptimizationLevel(0);\r\n        cx.setDebugger(null, null);\r\n        retval = cx.evaluateString(global, scriptText, source, lineNo, null);\r\n        if (retval instanceof NativeJavaObject) {\r\n            retval = ((NativeJavaObject) retval).unwrap();\r\n        }\r\n    } catch (Throwable t) {\r\n        handleError(t);\r\n    } finally {\r\n        Context.exit();\r\n    }\r\n    return retval;\r\n}"
}, {
	"Path": "org.hibernate.spatial.testing.dialects.hana.HANAExpectationsFactory.getNestedFunctionOuter",
	"Comment": "returns the result of a nested function call with a parameter inside the outer function",
	"Method": "Map<Integer, Geometry> getNestedFunctionOuter(Geometry geom){\r\n    return retrieveExpected(createNativeNestedFunctionOuterStatement(geom), GEOMETRY);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.ModuleControllerGui.focusSelectedOnTree",
	"Comment": "expand module to run tree to selected jmetertreenode and set selection path to it",
	"Method": "void focusSelectedOnTree(JMeterTreeNode selected){\r\n    TreeNode[] path = selected.getPath();\r\n    TreeNode[] filteredPath = new TreeNode[path.length - 1];\r\n    System.arraycopy(path, 1, filteredPath, 0, path.length - 1);\r\n    DefaultMutableTreeNode root = (DefaultMutableTreeNode) moduleToRunTreeNodes.getModel().getRoot();\r\n    TreeNode[] dmtnPath = this.findPathInTreeModel(1, filteredPath, root);\r\n    if (dmtnPath.length > 0) {\r\n        TreePath treePath = new TreePath(dmtnPath);\r\n        moduleToRunTreeNodes.setSelectionPath(treePath);\r\n        moduleToRunTreeNodes.scrollPathToVisible(treePath);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.LoadRecentProject.getRecentFileMenuItems",
	"Comment": "get the menu items to add to the menu bar, to get recent file functionality",
	"Method": "List<JComponent> getRecentFileMenuItems(){\r\n    LinkedList<JComponent> menuItems = new LinkedList();\r\n    for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {\r\n        JMenuItem recentFile = new JMenuItem();\r\n        recentFile.setName(Integer.toString(i));\r\n        recentFile.addActionListener(ActionRouter.getInstance());\r\n        recentFile.setActionCommand(ActionNames.OPEN_RECENT);\r\n        int shortKey = getShortcutKey(i);\r\n        if (shortKey >= 0) {\r\n            recentFile.setMnemonic(shortKey);\r\n        }\r\n        menuItems.add(recentFile);\r\n    }\r\n    updateMenuItems(menuItems);\r\n    return menuItems;\r\n}"
}, {
	"Path": "com.jfoenix.controls.cells.editors.base.GenericEditableTreeTableCell.getValue",
	"Comment": "provides the string representation of the value of this cell when the cell is not being edited.",
	"Method": "Object getValue(){\r\n    return getItem() == null ? \"\" : getItem();\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.setEncodingAndType",
	"Comment": "extract and save the dataencoding and datatype from the parameter provided.does not save the full content type.",
	"Method": "void setEncodingAndType(String ct){\r\n    if (ct != null) {\r\n        final String charsetPrefix = \"charset=\";\r\n        int cset = ct.toLowerCase(java.util.Locale.ENGLISH).indexOf(charsetPrefix);\r\n        if (cset >= 0) {\r\n            String charSet = ct.substring(cset + charsetPrefix.length());\r\n            int semiColon = charSet.indexOf(';');\r\n            if (semiColon >= 0) {\r\n                charSet = charSet.substring(0, semiColon);\r\n            }\r\n            if (charSet.startsWith(\"\\\"\") || charSet.startsWith(\"\\'\")) {\r\n                setDataEncoding(charSet.substring(1, charSet.length() - 1));\r\n            } else {\r\n                setDataEncoding(charSet);\r\n            }\r\n        }\r\n        if (isBinaryType(ct)) {\r\n            setDataType(BINARY);\r\n        } else {\r\n            setDataType(TEXT);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.control.gui.JMSPublisherGui.updateConfig",
	"Comment": "update config contains the actual logic for enabling or disabling textmessage, file or random path.",
	"Method": "void updateConfig(String command){\r\n    if (command.equals(USE_TEXT_RSC)) {\r\n        textMessage.setEnabled(true);\r\n        messageFile.enableFile(false);\r\n        randomFile.enableFile(false);\r\n    } else if (command.equals(USE_RANDOM_RSC)) {\r\n        textMessage.setEnabled(false);\r\n        messageFile.enableFile(false);\r\n        randomFile.enableFile(true);\r\n    } else {\r\n        textMessage.setEnabled(false);\r\n        messageFile.enableFile(true);\r\n        randomFile.enableFile(false);\r\n    }\r\n    updateFileEncoding();\r\n}"
}, {
	"Path": "org.apache.jmeter.modifiers.gui.SampleTimeoutGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement timer){\r\n    super.configureTestElement(timer);\r\n    ((SampleTimeout) timer).setTimeout(timeoutField.getText());\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDepthControlMedianThreshold",
	"Comment": "a threshold by how much the winning score must beat the median",
	"Method": "void setDepthControlMedianThreshold(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DEPTH_CONTROL_MEDIAN_THRESHOLD, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.setIgnore",
	"Comment": "call this method to tell jmeter to ignore this sampleresult by listeners",
	"Method": "void setIgnore(){\r\n    this.ignore = true;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getKoPercentile",
	"Comment": "returns an estimate for the requested percentile of the stored values.",
	"Method": "double getKoPercentile(double percentile){\r\n    return koResponsesStats.getPercentile(percentile);\r\n}"
}, {
	"Path": "org.apache.jmeter.reporters.gui.ResultActionGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement te){\r\n    super.configureTestElement(te);\r\n    ((OnErrorTestElement) te).setErrorAction(errorPanel.getOnErrorSetting());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.config.gui.JavaConfigGui.stateChanged",
	"Comment": "handle change events for this component. this method currently handlesevents for the classname jlabeledchoice",
	"Method": "void stateChanged(ChangeEvent evt){\r\n    if (evt.getSource() == classNameLabeledChoice) {\r\n        configureClassName();\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisSupport.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    switch(aggregation) {\r\n        case SpatialAggregate.EXTENT:\r\n            final StringBuilder stbuf = new StringBuilder();\r\n            stbuf.append(\"st_extent(\").append(columnName).append(\")::geometry\");\r\n            return stbuf.toString();\r\n        default:\r\n            throw new IllegalArgumentException(\"Aggregation of type \" + aggregation + \" are not supported by this dialect\");\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDepthControlTextureCountThreshold",
	"Comment": "a parameter for determining whether the texture in the region issufficient to justify a depth result",
	"Method": "void setDepthControlTextureCountThreshold(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DEPTH_CONTROL_TEXTURE_COUNT_THRESHOLD, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getAllPercentile",
	"Comment": "returns an estimate for the requested percentile of the stored values.",
	"Method": "double getAllPercentile(double percentile){\r\n    return pctResponseStats.getPercentile(percentile);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.getConcurrentPool",
	"Comment": "get the pool size for concurrent thread pool to get embedded resources.",
	"Method": "String getConcurrentPool(){\r\n    return getPropertyAsString(CONCURRENT_POOL, CONCURRENT_POOL_DEFAULT);\r\n}"
}, {
	"Path": "org.apache.log.Priority.isLowerOrEqual",
	"Comment": "test whether this priority is lower or equal to other priority.",
	"Method": "boolean isLowerOrEqual(Priority other){\r\n    return m_priority <= other.getValue();\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GUIFactory.getGUI",
	"Comment": "get a component instance which has previously been registered for thisclass object.",
	"Method": "JComponent getGUI(Class<?> elementClass){\r\n    String key = elementClass.getName();\r\n    JComponent gui = (JComponent) GUI_MAP.get(key);\r\n    if (gui != null) {\r\n        return gui;\r\n    }\r\n    if (elementClass.getSuperclass() != null) {\r\n        return getGUI(elementClass.getSuperclass());\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXDatePickerContent.createHeaderPane",
	"Comment": "header panel represents the selected datewe keep javafx original style classes",
	"Method": "VBox createHeaderPane(){\r\n    selectedYearLabel = new Label();\r\n    selectedYearLabel.getStyleClass().add(SPINNER_LABEL);\r\n    selectedYearLabel.setTextFill(Color.rgb(255, 255, 255, 0.67));\r\n    selectedYearLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 14));\r\n    HBox yearLabelContainer = new HBox();\r\n    yearLabelContainer.getStyleClass().add(\"spinner\");\r\n    yearLabelContainer.getChildren().addAll(selectedYearLabel);\r\n    yearLabelContainer.setAlignment(Pos.CENTER_LEFT);\r\n    yearLabelContainer.setFillHeight(false);\r\n    yearLabelContainer.setOnMouseClicked((click) -> {\r\n        if (!yearsListView.isVisible()) {\r\n            scrollToYear();\r\n            hideTransition.stop();\r\n            showTransition.play();\r\n        }\r\n    });\r\n    selectedDateLabel = new Label();\r\n    selectedDateLabel.getStyleClass().add(SPINNER_LABEL);\r\n    selectedDateLabel.setTextFill(Color.WHITE);\r\n    selectedDateLabel.setFont(Font.font(ROBOTO, FontWeight.BOLD, 32));\r\n    HBox selectedDateContainer = new HBox(selectedDateLabel);\r\n    selectedDateContainer.getStyleClass().add(\"spinner\");\r\n    selectedDateContainer.setAlignment(Pos.CENTER_LEFT);\r\n    selectedDateContainer.setOnMouseClicked((click) -> {\r\n        if (yearsListView.isVisible()) {\r\n            showTransition.stop();\r\n            hideTransition.play();\r\n        }\r\n    });\r\n    VBox headerPanel = new VBox();\r\n    headerPanel.getStyleClass().add(\"month-year-pane\");\r\n    headerPanel.setBackground(new Background(new BackgroundFill(this.datePicker.getDefaultColor(), CornerRadii.EMPTY, Insets.EMPTY)));\r\n    headerPanel.setPadding(new Insets(12, 24, 12, 24));\r\n    headerPanel.getChildren().add(yearLabelContainer);\r\n    headerPanel.getChildren().add(selectedDateContainer);\r\n    return headerPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel.makeMainPanel",
	"Comment": "create the main gui panel which contains the argument table.",
	"Method": "Component makeMainPanel(){\r\n    initializeTableModel();\r\n    table = new JTable(tableModel);\r\n    JMeterUtils.applyHiDPI(table);\r\n    table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());\r\n    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n    return makeScrollPane(table);\r\n}"
}, {
	"Path": "org.apache.jmeter.JMeter.processLAST",
	"Comment": "checks for last or lastsuffix.returns the last name with .jmx replaced by suffix.",
	"Method": "String processLAST(String jmlogfile,String suffix){\r\n    if (USE_LAST_JMX.equals(jmlogfile) || USE_LAST_JMX.concat(suffix).equals(jmlogfile)) {\r\n        String last = LoadRecentProject.getRecentFile(0);\r\n        if (last.toUpperCase(Locale.ENGLISH).endsWith(JMX_SUFFIX)) {\r\n            return last.substring(0, last.length() - JMX_SUFFIX.length()).concat(suffix);\r\n        }\r\n    }\r\n    return jmlogfile;\r\n}"
}, {
	"Path": "org.apache.jorphan.util.Converter.getDouble",
	"Comment": "convert object to double, or defaultvalue if conversionfailed",
	"Method": "double getDouble(Object o,double defaultValue,double getDouble,Object o){\r\n    return getDouble(o, 0);\r\n}"
}, {
	"Path": "org.apache.jmeter.services.FileServer.setBaseForScript",
	"Comment": "sets the current base directory for relative file names from the provided script file.the parameter is assumed to be the path to a jmx file, so the base directory is derivedfrom its parent.",
	"Method": "void setBaseForScript(File scriptPath){\r\n    if (scriptPath == null) {\r\n        throw new IllegalArgumentException(\"scriptPath must not be null\");\r\n    }\r\n    setScriptName(scriptPath.getName());\r\n    setBase(scriptPath.getAbsoluteFile().getParentFile());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.SubscriberSampler.initListenerClient",
	"Comment": "create the onmessagesubscriber client and set the sampler as the messagelistener.",
	"Method": "void initListenerClient(){\r\n    SUBSCRIBER = new ReceiveSubscriber(0, getUseJNDIPropertiesAsBoolean(), getJNDIInitialContextFactory(), getProviderUrl(), getConnectionFactory(), getDestination(), getDurableSubscriptionId(), getClientId(), getJmsSelector(), isUseAuth(), getUsername(), getPassword());\r\n    log.debug(\"SubscriberSampler.initListenerClient called\");\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.SubscriberSampler.handleErrorAndAddTemporize",
	"Comment": "try to reconnect if configured to or temporize if not or an exception occurred",
	"Method": "void handleErrorAndAddTemporize(boolean reconnect){\r\n    if (reconnect) {\r\n        cleanup();\r\n        initClient();\r\n    }\r\n    if (!reconnect || exceptionDuringInit != null) {\r\n        try {\r\n            long pause = getPauseBetweenErrorsAsLong();\r\n            if (pause > 0) {\r\n                Thread.sleep(pause);\r\n            }\r\n        } catch (InterruptedException ie) {\r\n            log.warn(\"Interrupted {}\", ie.toString(), ie);\r\n            Thread.currentThread().interrupt();\r\n            interrupted = true;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.ProxyControl.setAuthorization",
	"Comment": "find if there is any authmanager in jmetertreemodelif there is no one, create and add it to treeadd authorization object to authmanager",
	"Method": "void setAuthorization(Authorization authorization,JMeterTreeNode target){\r\n    JMeterTreeModel jmeterTreeModel = getJmeterTreeModel();\r\n    List<JMeterTreeNode> authManagerNodes = jmeterTreeModel.getNodesOfType(AuthManager.class);\r\n    if (authManagerNodes.isEmpty()) {\r\n        try {\r\n            log.debug(\"Creating HTTP Authentication manager for authorization: {}\", authorization);\r\n            AuthManager authManager = newAuthorizationManager(authorization);\r\n            jmeterTreeModel.addComponent(authManager, target);\r\n        } catch (IllegalUserActionException e) {\r\n            log.error(\"Failed to add Authorization Manager to target node: {}\", target.getName(), e);\r\n        }\r\n    } else {\r\n        AuthManager authManager = (AuthManager) authManagerNodes.get(0).getTestElement();\r\n        authManager.addAuth(authorization);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.getSendParameterValuesAsPostBody",
	"Comment": "determine if none of the parameters have a name, and if that is the case,it means that the parameter values should be sent as the entity body",
	"Method": "boolean getSendParameterValuesAsPostBody(){\r\n    if (getPostBodyRaw()) {\r\n        return true;\r\n    } else {\r\n        boolean hasArguments = false;\r\n        for (JMeterProperty jMeterProperty : getArguments()) {\r\n            hasArguments = true;\r\n            HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();\r\n            if (arg.getName() != null && arg.getName().length() > 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return hasArguments;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.GenericController.currentReturnedNull",
	"Comment": "if the controller is done, remove it from the list,otherwise increment to next entry in list.",
	"Method": "void currentReturnedNull(Controller c){\r\n    if (c.isDone()) {\r\n        removeCurrentElement();\r\n    } else {\r\n        incrementCurrent();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.core.AbstractSampleWriter.setOutputFile",
	"Comment": "set the destination file in which this sample writer will write samples",
	"Method": "void setOutputFile(File output){\r\n    FileOutputStream fos = null;\r\n    try {\r\n        fos = new FileOutputStream(output);\r\n    } catch (Exception e) {\r\n        throw new SampleException(e.getMessage(), e);\r\n    }\r\n    setOutputStream(fos);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.tree.JMeterTreeListener.getCurrentNode",
	"Comment": "gets the currentnode attribute of the jmetertreelistener object.",
	"Method": "JMeterTreeNode getCurrentNode(){\r\n    if (currentPath != null) {\r\n        if (currentPath.getLastPathComponent() != null) {\r\n            return (JMeterTreeNode) currentPath.getLastPathComponent();\r\n        }\r\n        return (JMeterTreeNode) currentPath.getParentPath().getLastPathComponent();\r\n    }\r\n    return (JMeterTreeNode) model.getRoot();\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDepthControlEstimateMedianDecrement",
	"Comment": "value to subtract when estimating the median of the correlation surface",
	"Method": "void setDepthControlEstimateMedianDecrement(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DEPTH_CONTROL_ESTIMATE_MEDIAN_DECREMENT, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.ForeachControlPanel.createLoopCountPanel",
	"Comment": "create a gui panel containing the components related to the number ofloops which should be executed.",
	"Method": "JPanel createLoopCountPanel(){\r\n    VerticalPanel loopPanel = new VerticalPanel();\r\n    JLabel inputValLabel = new JLabel(JMeterUtils.getResString(\"foreach_input\"));\r\n    JLabel startIndexLabel = new JLabel(JMeterUtils.getResString(\"foreach_start_index\"));\r\n    JLabel endIndexLabel = new JLabel(JMeterUtils.getResString(\"foreach_end_index\"));\r\n    JLabel returnValLabel = new JLabel(JMeterUtils.getResString(\"foreach_output\"));\r\n    JPanel inputValSubPanel = new JPanel(new BorderLayout(5, 0));\r\n    inputVal = new JTextField(\"\", 5);\r\n    inputVal.setName(INPUTVAL);\r\n    inputValLabel.setLabelFor(inputVal);\r\n    inputValSubPanel.add(inputValLabel, BorderLayout.WEST);\r\n    inputValSubPanel.add(inputVal, BorderLayout.CENTER);\r\n    JPanel startIndexSubPanel = new JPanel(new BorderLayout(5, 0));\r\n    startIndex = new JTextField(\"\", 5);\r\n    startIndex.setName(START_INDEX);\r\n    startIndexLabel.setLabelFor(startIndex);\r\n    startIndexSubPanel.add(startIndexLabel, BorderLayout.WEST);\r\n    startIndexSubPanel.add(startIndex, BorderLayout.CENTER);\r\n    JPanel endIndexSubPanel = new JPanel(new BorderLayout(5, 0));\r\n    endIndex = new JTextField(\"\", 5);\r\n    endIndex.setName(END_INDEX);\r\n    endIndexLabel.setLabelFor(endIndex);\r\n    endIndexSubPanel.add(endIndexLabel, BorderLayout.WEST);\r\n    endIndexSubPanel.add(endIndex, BorderLayout.CENTER);\r\n    JPanel returnValSubPanel = new JPanel(new BorderLayout(5, 0));\r\n    returnVal = new JTextField(\"\", 5);\r\n    returnVal.setName(RETURNVAL);\r\n    returnValLabel.setLabelFor(returnVal);\r\n    returnValSubPanel.add(returnValLabel, BorderLayout.WEST);\r\n    returnValSubPanel.add(returnVal, BorderLayout.CENTER);\r\n    useSeparator = new JCheckBox(JMeterUtils.getResString(\"foreach_use_separator\"), true);\r\n    loopPanel.add(inputValSubPanel);\r\n    loopPanel.add(startIndexSubPanel);\r\n    loopPanel.add(endIndexSubPanel);\r\n    loopPanel.add(returnValSubPanel);\r\n    loopPanel.add(useSeparator);\r\n    return loopPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.Proxy.configure",
	"Comment": "configure the proxy.intended to be called directly after construction.should not be called after it has been passed to a new thread,otherwise the variables may not be published correctly.",
	"Method": "void configure(Socket clientSocket,ProxyControl target,Map<String, String> pageEncodings,Map<String, String> formEncodings){\r\n    this.target = target;\r\n    this.clientSocket = clientSocket;\r\n    this.captureHttpHeaders = target.getCaptureHttpHeaders();\r\n    this.pageEncodings = pageEncodings;\r\n    this.formEncodings = formEncodings;\r\n    this.port = \"[\" + clientSocket.getPort() + \"] \";\r\n    this.keyStore = target.getKeyStore();\r\n    this.keyPassword = target.getKeyPassword();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.getBasicAttributes",
	"Comment": "this will create the basic attributes for the in build testcase for addtest.",
	"Method": "BasicAttributes getBasicAttributes(){\r\n    BasicAttributes basicattributes = new BasicAttributes();\r\n    BasicAttribute basicattribute = new BasicAttribute(\"objectclass\");\r\n    basicattribute.add(\"top\");\r\n    basicattribute.add(\"person\");\r\n    basicattribute.add(\"organizationalPerson\");\r\n    basicattribute.add(\"inetOrgPerson\");\r\n    basicattributes.put(basicattribute);\r\n    String s1 = \"User\";\r\n    String s3 = \"Test\";\r\n    String s5 = \"user\";\r\n    String s6 = \"test\";\r\n    COUNTER.incrementAndGet();\r\n    basicattributes.put(new BasicAttribute(\"givenname\", s1));\r\n    basicattributes.put(new BasicAttribute(\"sn\", s3));\r\n    basicattributes.put(new BasicAttribute(\"cn\", \"TestUser\" + COUNTER.get()));\r\n    basicattributes.put(new BasicAttribute(\"uid\", s5));\r\n    basicattributes.put(new BasicAttribute(\"userpassword\", s6));\r\n    setProperty(new StringProperty(ADD, \"cn=TestUser\" + COUNTER.get()));\r\n    return basicattributes;\r\n}"
}, {
	"Path": "org.apache.commons.cli.avalon.CLArgsParser.buildOptionIndex",
	"Comment": "build the this.optionindex lookup map for the parsed options.",
	"Method": "void buildOptionIndex(){\r\n    final int size = this.options.size();\r\n    this.optionIndex = new Hashtable(size * 2);\r\n    for (final CLOption option : this.options) {\r\n        final CLOptionDescriptor optionDescriptor = getDescriptorFor(option.getDescriptor().getId());\r\n        this.optionIndex.put(Integer.valueOf(option.getDescriptor().getId()), option);\r\n        if (null != optionDescriptor && null != optionDescriptor.getName()) {\r\n            this.optionIndex.put(optionDescriptor.getName(), option);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.SMIMEAssertion.readSerialNumber",
	"Comment": "convert the value of serialstring into a biginteger. stringsstarting with 0x or 0x are parsed as hex numbers, otherwise as decimalnumber.",
	"Method": "BigInteger readSerialNumber(String serialString){\r\n    if (serialString.startsWith(\"0x\") || serialString.startsWith(\"0X\")) {\r\n        return new BigInteger(serialString.substring(2), 16);\r\n    }\r\n    return new BigInteger(serialString);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.IntPointer.putString",
	"Comment": "copies the string code points into native memory, including a terminating null int.sets the limit to just before the terminating null code point.",
	"Method": "IntPointer putString(String s){\r\n    int[] codePoints = new int[s.length()];\r\n    for (int i = 0; i < codePoints.length; i++) {\r\n        codePoints[i] = s.codePointAt(i);\r\n    }\r\n    return put(codePoints).put(codePoints.length, (int) 0).limit(codePoints.length);\r\n}"
}, {
	"Path": "com.jfinal.i18n.I18nInterceptor.getResName",
	"Comment": "return the resname, which is used as attribute name to pass the res object to the view.",
	"Method": "String getResName(){\r\n    return resName;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.tree.JMeterTreeListener.setJTree",
	"Comment": "sets the jtree attribute of the jmetertreelistener object.",
	"Method": "void setJTree(JTree tree){\r\n    this.tree = tree;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.ModuleControllerGui.reinitialize",
	"Comment": "reinitializes the visual representation of jmeter tree keeping only the controllers, test fragment, thread groups, test plan rebuilds moduletoruntreemodelselects the node referenced by modulecontroller updates warning label",
	"Method": "void reinitialize(){\r\n    ((DefaultMutableTreeNode) moduleToRunTreeModel.getRoot()).removeAllChildren();\r\n    GuiPackage gp = GuiPackage.getInstance();\r\n    JMeterTreeNode root;\r\n    if (gp != null) {\r\n        root = (JMeterTreeNode) GuiPackage.getInstance().getTreeModel().getRoot();\r\n        buildTreeNodeModel(root, 0, null);\r\n        moduleToRunTreeModel.nodeStructureChanged((TreeNode) moduleToRunTreeModel.getRoot());\r\n    }\r\n    if (selected != null) {\r\n        this.focusSelectedOnTree(selected);\r\n    }\r\n    if (!hasAtLeastOneController) {\r\n        warningLabel.setText(JMeterUtils.getResString(\"module_controller_warning_no_controller\"));\r\n        warningLabel.setVisible(true);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.UndoHistory.add",
	"Comment": "add tree model copy to the historythis method relies on the rule that the record in history made afterchange has been made to test plan",
	"Method": "void add(JMeterTreeModel treeModel,String comment){\r\n    if (!isEnabled()) {\r\n        log.debug(\"undo.history.size is set to 0, undo/redo feature is disabled\");\r\n        return;\r\n    }\r\n    if (working) {\r\n        log.debug(\"Not adding history because of noop\");\r\n        return;\r\n    }\r\n    JMeterTreeNode root = (JMeterTreeNode) treeModel.getRoot();\r\n    if (root.getChildCount() < 1) {\r\n        log.debug(\"Not adding history because of no children\");\r\n        return;\r\n    }\r\n    String name = root.getName();\r\n    log.debug(\"Adding history element {}: {}\", name, comment);\r\n    working = true;\r\n    HashTree tree = treeModel.getCurrentSubTree((JMeterTreeNode) treeModel.getRoot());\r\n    tree = (HashTree) tree.getTree(tree.getArray()[0]).clone();\r\n    HashTree copy = UndoCommand.convertAndCloneSubTree(tree);\r\n    GuiPackage guiPackage = GuiPackage.getInstance();\r\n    boolean dirty = guiPackage != null ? guiPackage.isDirty() : false;\r\n    addEdit(new UndoHistoryItem(copy, comment, TreeState.from(guiPackage), dirty));\r\n    working = false;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler.getBasicAttribute",
	"Comment": "this will create the basic attribute for the give name value pair",
	"Method": "BasicAttribute getBasicAttribute(String name,String value){\r\n    return new BasicAttribute(name, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.PostWriter.getMultipartDivider",
	"Comment": "get the bytes used to separate multipartsencoded using encoding",
	"Method": "byte[] getMultipartDivider(){\r\n    return (DASH_DASH + getBoundary()).getBytes(ENCODING);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.LoadDraggedFile.loadProject",
	"Comment": "loads dragged file asking before for save if current open file is dirty.",
	"Method": "void loadProject(ActionEvent e,File file){\r\n    if (!Close.performAction(e)) {\r\n        return;\r\n    }\r\n    Load.loadProjectFile(e, file, false);\r\n}"
}, {
	"Path": "org.hibernate.spatial.testing.SpatialFunctionalTestCase.addQueryResults",
	"Comment": "adds the query results to a map.\teach row is added as a map entry with the first column the key,\tand the second the value. it is assumed that the first column is an\tidentifier of a type assignable to integer.",
	"Method": "void addQueryResults(Map<Integer, T> result,Query query){\r\n    List<Object[]> rows = (List<Object[]>) query.list();\r\n    if (rows.size() == 0) {\r\n        getLogger().warn(\"No results returned for query!!\");\r\n    }\r\n    for (Object[] row : rows) {\r\n        Integer id = (Integer) row[0];\r\n        T val = (T) row[1];\r\n        result.put(id, val);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.DurationAssertion.getAllowedDuration",
	"Comment": "returns the duration to be asserted. a duration of 0 indicates thisassertion is to be ignored.",
	"Method": "long getAllowedDuration(){\r\n    return getPropertyAsLong(DURATION_KEY);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.BaseJMSSampler.getConnectionFactory",
	"Comment": "return the connection factory parameter used to lookup the connectionfactory from the jms server",
	"Method": "String getConnectionFactory(){\r\n    return getPropertyAsString(CONN_FACTORY);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.CacheManager.isCacheable",
	"Comment": "is the sample result ok to cache?i.e is it in the 2xx range or equal to 304, and is it a cacheable method?",
	"Method": "boolean isCacheable(HTTPSampleResult res,String varyHeader){\r\n    if (\"*\".equals(varyHeader)) {\r\n        return false;\r\n    }\r\n    final String responseCode = res.getResponseCode();\r\n    return isCacheableMethod(res) && ((\"200\".compareTo(responseCode) <= 0 && \"299\".compareTo(responseCode) >= 0) || \"304\".equals(responseCode));\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.GuiPackage.updateCurrentNode",
	"Comment": "this method should be called in order for guipackage to change thecurrent node. this will save any changes made to the earlier node beforechoosing the new node.",
	"Method": "void updateCurrentNode(){\r\n    try {\r\n        if (currentNode != null && !currentNodeUpdated) {\r\n            log.debug(\"Updating current node {}\", currentNode.getName());\r\n            JMeterGUIComponent comp = getGui(currentNode.getTestElement());\r\n            if (comp == null) {\r\n                log.debug(\"No component found for {}\", currentNode.getName());\r\n                return;\r\n            }\r\n            TestElement el = currentNode.getTestElement();\r\n            int before = 0;\r\n            int after = 0;\r\n            final boolean historyEnabled = UndoHistory.isEnabled();\r\n            if (historyEnabled) {\r\n                before = getTestElementCheckSum(el);\r\n            }\r\n            comp.modifyTestElement(el);\r\n            if (historyEnabled) {\r\n                after = getTestElementCheckSum(el);\r\n            }\r\n            if (!historyEnabled || (before != after)) {\r\n                currentNode.nameChanged();\r\n            }\r\n        }\r\n        currentNodeUpdated = true;\r\n        currentNode = treeListener.getCurrentNode();\r\n    } catch (Exception e) {\r\n        log.error(\"Problem retrieving gui\", e);\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.template.Engine.getTemplateByString",
	"Comment": "get template by string content and do not cache the template",
	"Method": "Template getTemplateByString(String content,Template getTemplateByString,String content,boolean cache){\r\n    if (!cache) {\r\n        return buildTemplateBySource(new StringSource(content, cache));\r\n    }\r\n    String cacheKey = HashKit.md5(content);\r\n    Template template = templateCache.get(cacheKey);\r\n    if (template == null) {\r\n        template = buildTemplateBySource(new StringSource(content, cache));\r\n        templateCache.put(cacheKey, template);\r\n    } else if (devMode) {\r\n        if (template.isModified()) {\r\n            template = buildTemplateBySource(new StringSource(content, cache));\r\n            templateCache.put(cacheKey, template);\r\n        }\r\n    }\r\n    return template;\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXDatePickerSkin.syncWithAutoUpdate",
	"Comment": "this method is called from the behavior class to make suredatepicker button is in sync after the popup is being dismissed",
	"Method": "void syncWithAutoUpdate(){\r\n    if (!getPopup().isShowing() && jfxDatePicker.isShowing()) {\r\n        jfxDatePicker.hide();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.GraphVisualizer.createGraphPanel",
	"Comment": "creates a scroll pane containing the actual graph of the results.",
	"Method": "Component createGraphPanel(){\r\n    JScrollPane graphScrollPanel = makeScrollPane(graph, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);\r\n    graphScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));\r\n    graphScrollPanel.setPreferredSize(graphScrollPanel.getMinimumSize());\r\n    return graphScrollPanel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.EncoderCache.getEncoded",
	"Comment": "get the specified value url encoded using the specified encoding",
	"Method": "String getEncoded(String k,String getEncoded,String k,String contentEncoding){\r\n    String cacheKey = k + contentEncoding;\r\n    Object encodedValue = cache.getElement(cacheKey);\r\n    if (encodedValue != null) {\r\n        return (String) encodedValue;\r\n    }\r\n    encodedValue = URLEncoder.encode(k, contentEncoding);\r\n    cache.addElement(cacheKey, encodedValue);\r\n    return (String) encodedValue;\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXNestedTableColumnHeader.createTableColumnHeader",
	"Comment": "protected to allow subclasses to customise the column header types",
	"Method": "TableColumnHeader createTableColumnHeader(TableColumnBase col){\r\n    return col.getColumns().isEmpty() ? new JFXTableColumnHeader(getTableViewSkin(), col) : new NestedTableColumnHeader(getTableViewSkin(), col);\r\n}"
}, {
	"Path": "org.apache.log.Priority.readResolve",
	"Comment": "helper method that replaces deserialized object with correct singleton.",
	"Method": "Object readResolve(){\r\n    return getPriorityForName(m_name);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.graph.impl.ResponseTimePercentilesOverTimeGraphConsumer.createPercentileGroupInfo",
	"Comment": "creates the group info for elapsed time percentile depending on jmeterproperties.",
	"Method": "GroupInfo createPercentileGroupInfo(String propertyKey,int defaultValue,String serieName){\r\n    int property = JMeterUtils.getPropDefault(propertyKey, defaultValue);\r\n    PercentileAggregatorFactory factory = new PercentileAggregatorFactory();\r\n    factory.setPercentileIndex(property);\r\n    StaticSeriesSelector seriesSelector = new StaticSeriesSelector();\r\n    seriesSelector.setSeriesName(serieName);\r\n    return new GroupInfo(factory, seriesSelector, new SuccessfulElapsedTimeValueSelector(), false, false);\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.sequence.LongestIncreasingSubsequence.getLongestIncreasingSubsequence",
	"Comment": "longest increasing subsequence solved using dynamic programming.",
	"Method": "int[] getLongestIncreasingSubsequence(int[] X){\r\n    final int[] P = new int[X.length];\r\n    final int[] M = new int[X.length + 1];\r\n    int L = 0;\r\n    for (int i = 0; i < X.length; i++) {\r\n        int lo = 1;\r\n        int hi = L;\r\n        while (lo <= hi) {\r\n            final int mid = (int) Math.ceil((lo + hi) / 2);\r\n            if (X[M[mid]] < X[i])\r\n                lo = mid + 1;\r\n            else\r\n                hi = mid - 1;\r\n        }\r\n        final int newL = lo;\r\n        P[i] = M[newL - 1];\r\n        M[newL] = i;\r\n        if (newL > L) {\r\n            L = newL;\r\n        }\r\n    }\r\n    final int[] S = new int[L];\r\n    int k = M[L];\r\n    for (int i = L - 1; i >= 0; i--) {\r\n        S[i] = X[k];\r\n        k = P[k];\r\n    }\r\n    return S;\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.getDataAsText",
	"Comment": "returns all the data in the data set as an array of strings. each arraygives a row of data, each column separated by tabs.",
	"Method": "String[] getDataAsText(){\r\n    StringBuilder temp = new StringBuilder(\"\");\r\n    String[] line = new String[size + 1];\r\n    String[] elements = getHeaders();\r\n    for (int count = 0; count < elements.length; count++) {\r\n        temp.append(elements[count]);\r\n        if (count + 1 < elements.length) {\r\n            temp.append(\"\\t\");\r\n        }\r\n    }\r\n    line[0] = temp.toString();\r\n    reset();\r\n    int index = 1;\r\n    temp = new StringBuilder();\r\n    while (next()) {\r\n        temp.setLength(0);\r\n        for (int count = 0; count < elements.length; count++) {\r\n            temp.append(getColumnValue(count));\r\n            if (count + 1 < elements.length) {\r\n                temp.append(\"\\t\");\r\n            }\r\n        }\r\n        line[index++] = temp.toString();\r\n    }\r\n    return line;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG94Dialect.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return support.getDWithinSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LDAPArguments.getArgumentsAsMap",
	"Comment": "get the arguments as a map. each argument name is used as the key, andits value as the value.",
	"Method": "Map<String, String> getArgumentsAsMap(){\r\n    PropertyIterator iter = getArguments().iterator();\r\n    Map<String, String> argMap = new HashMap();\r\n    while (iter.hasNext()) {\r\n        LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();\r\n        argMap.put(arg.getName(), arg.getValue());\r\n    }\r\n    return argMap;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.HtmlExtractor.getDefaultValue",
	"Comment": "get the default value for the variable if no matches are found",
	"Method": "String getDefaultValue(){\r\n    return getPropertyAsString(DEFAULT);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG92Dialect.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    return support.getSpatialAggregateSQL(columnName, aggregation);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.client.ClientPool.addClient",
	"Comment": "add a receiveclient to the clientpool. this is so that we can make sureto close all clients and make sure all threads are destroyed.",
	"Method": "void addClient(Closeable client){\r\n    CLIENTS.add(client);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.control.gui.JUnitTestSamplerGui.actionPerformed",
	"Comment": "handle action events for this component.this method currently handlesevents for the classname combo box, and sets up the associated method names.",
	"Method": "void actionPerformed(ActionEvent evt){\r\n    if (evt.getSource() == classnameCombo) {\r\n        setupMethods();\r\n    }\r\n}"
}, {
	"Path": "com.jfinal.kit.PropKit.use",
	"Comment": "using the properties file bye file object. it will loading the properties file if not loading.",
	"Method": "Prop use(String fileName,Prop use,String fileName,String encoding,Prop use,File file,Prop use,File file,String encoding){\r\n    Prop result = map.get(file.getName());\r\n    if (result == null) {\r\n        synchronized (PropKit.class) {\r\n            result = map.get(file.getName());\r\n            if (result == null) {\r\n                result = new Prop(file, encoding);\r\n                map.put(file.getName(), result);\r\n                if (PropKit.prop == null) {\r\n                    PropKit.prop = result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.gui.ProxyControlGui.deleteRowFromTable",
	"Comment": "delete row from table, select one if possible and enable restart button",
	"Method": "void deleteRowFromTable(PowerTableModel tableModel,JTable table){\r\n    int selectedRow = table.getSelectedRow();\r\n    if (selectedRow >= 0) {\r\n        tableModel.removeRow(table.getSelectedRow());\r\n    } else {\r\n        if (table.getRowCount() > 0) {\r\n            tableModel.removeRow(0);\r\n        }\r\n    }\r\n    tableModel.fireTableDataChanged();\r\n    if (table.getRowCount() > 0) {\r\n        if (selectedRow == -1) {\r\n            table.setRowSelectionInterval(0, 0);\r\n        } else {\r\n            int rowToSelect = selectedRow > 0 ? selectedRow - 1 : 0;\r\n            table.setRowSelectionInterval(rowToSelect, rowToSelect);\r\n        }\r\n    }\r\n    enableRestart();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui.configure",
	"Comment": "copy the data from the test element to the gui, method has to be implemented by interface",
	"Method": "void configure(TestElement element){\r\n    if (smtpPanel == null) {\r\n        smtpPanel = new SmtpPanel();\r\n    }\r\n    smtpPanel.setServer(element.getPropertyAsString(SmtpSampler.SERVER));\r\n    smtpPanel.setPort(element.getPropertyAsString(SmtpSampler.SERVER_PORT));\r\n    smtpPanel.setTimeout(element.getPropertyAsString(SmtpSampler.SERVER_TIMEOUT));\r\n    smtpPanel.setConnectionTimeout(element.getPropertyAsString(SmtpSampler.SERVER_CONNECTION_TIMEOUT));\r\n    smtpPanel.setMailFrom(element.getPropertyAsString(SmtpSampler.MAIL_FROM));\r\n    smtpPanel.setMailReplyTo(element.getPropertyAsString(SmtpSampler.MAIL_REPLYTO));\r\n    smtpPanel.setReceiverTo(element.getPropertyAsString(SmtpSampler.RECEIVER_TO));\r\n    smtpPanel.setReceiverCC(element.getPropertyAsString(SmtpSampler.RECEIVER_CC));\r\n    smtpPanel.setReceiverBCC(element.getPropertyAsString(SmtpSampler.RECEIVER_BCC));\r\n    smtpPanel.setBody(element.getPropertyAsString(SmtpSampler.MESSAGE));\r\n    smtpPanel.setPlainBody(element.getPropertyAsBoolean(SmtpSampler.PLAIN_BODY));\r\n    smtpPanel.setSubject(element.getPropertyAsString(SmtpSampler.SUBJECT));\r\n    smtpPanel.setSuppressSubject(element.getPropertyAsBoolean(SmtpSampler.SUPPRESS_SUBJECT));\r\n    smtpPanel.setIncludeTimestamp(element.getPropertyAsBoolean(SmtpSampler.INCLUDE_TIMESTAMP));\r\n    JMeterProperty headers = element.getProperty(SmtpSampler.HEADER_FIELDS);\r\n    if (headers instanceof CollectionProperty) {\r\n        smtpPanel.setHeaderFields((CollectionProperty) headers);\r\n    } else {\r\n        smtpPanel.setHeaderFields(new CollectionProperty());\r\n    }\r\n    smtpPanel.setAttachments(element.getPropertyAsString(SmtpSampler.ATTACH_FILE));\r\n    smtpPanel.setUseEmlMessage(element.getPropertyAsBoolean(SmtpSampler.USE_EML));\r\n    smtpPanel.setEmlMessage(element.getPropertyAsString(SmtpSampler.EML_MESSAGE_TO_SEND));\r\n    SecuritySettingsPanel secPanel = smtpPanel.getSecuritySettingsPanel();\r\n    secPanel.configure(element);\r\n    smtpPanel.setUseAuth(element.getPropertyAsBoolean(SmtpSampler.USE_AUTH));\r\n    smtpPanel.setUsername(element.getPropertyAsString(SmtpSampler.USERNAME));\r\n    smtpPanel.setPassword(element.getPropertyAsString(SmtpSampler.PASSWORD));\r\n    smtpPanel.setMessageSizeStatistic(element.getPropertyAsBoolean(SmtpSampler.MESSAGE_SIZE_STATS));\r\n    smtpPanel.setEnableDebug(element.getPropertyAsBoolean(SmtpSampler.ENABLE_DEBUG));\r\n    super.configure(element);\r\n}"
}, {
	"Path": "cn.hutool.core.date.format.FastDatePrinter.applyRulesToString",
	"Comment": "creates a string representation of the given calendar by applying the rules of this printer to it.",
	"Method": "String applyRulesToString(Calendar c){\r\n    return applyRules(c, new StringBuilder(mMaxLengthEstimate)).toString();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.Utils.getFromEnvironment",
	"Comment": "get value from context environment taking into account non fullycompliant jndi implementations",
	"Method": "String getFromEnvironment(Context context,String key){\r\n    try {\r\n        Hashtable<?, ?> env = context.getEnvironment();\r\n        if (env != null) {\r\n            return (String) env.get(key);\r\n        } else {\r\n            log.warn(\"context.getEnvironment() returned null (should not happen according to javadoc but non compliant implementation can return this)\");\r\n            return null;\r\n        }\r\n    } catch (javax.naming.OperationNotSupportedException ex) {\r\n        log.warn(\"context.getEnvironment() not supported by implementation \");\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG9Dialect.getIsEmptySQL",
	"Comment": "returns the sql fragment when parsing a isemptyexpression or\tisnotempty expression.",
	"Method": "String getIsEmptySQL(String columnName,boolean isEmpty){\r\n    return support.getIsEmptySQL(columnName, isEmpty);\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.intHeader",
	"Comment": "get an integer header value from the response falling back to the givendefault value if the header is missing or if parsing fails",
	"Method": "int intHeader(String name,int intHeader,String name,int defaultValue){\r\n    closeOutputQuietly();\r\n    return getConnection().getHeaderFieldInt(name, defaultValue);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JLabeledRadioI18N.notifyChangeListeners",
	"Comment": "notify all registered change listeners that the text in the text fieldhas changed.",
	"Method": "void notifyChangeListeners(){\r\n    ChangeEvent ce = new ChangeEvent(this);\r\n    for (ChangeListener mChangeListener : mChangeListeners) {\r\n        mChangeListener.stateChanged(ce);\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.jpamodelgen.util.TypeUtils.getAccessTypeInCaseElementIsRoot",
	"Comment": "iterates all elements of a type to check whether they contain the id annotation. if so the placement of this\tannotation determines the access type",
	"Method": "AccessType getAccessTypeInCaseElementIsRoot(TypeElement searchedElement,Context context){\r\n    List<? extends Element> myMembers = searchedElement.getEnclosedElements();\r\n    for (Element subElement : myMembers) {\r\n        List<? extends AnnotationMirror> entityAnnotations = context.getElementUtils().getAllAnnotationMirrors(subElement);\r\n        for (Object entityAnnotation : entityAnnotations) {\r\n            AnnotationMirror annotationMirror = (AnnotationMirror) entityAnnotation;\r\n            if (isIdAnnotation(annotationMirror)) {\r\n                return getAccessTypeOfIdAnnotation(subElement);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDepthControlMinimumThreshold",
	"Comment": "the minimum correlation score that is considered acceptable",
	"Method": "void setDepthControlMinimumThreshold(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DEPTH_CONTROL_SCORE_MINIMUM_THRESHOLD, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.gui.GenericTestBeanCustomizer.notOther",
	"Comment": "returns true if the property disallows constant values different from the provided tags.",
	"Method": "boolean notOther(PropertyDescriptor descriptor){\r\n    return Boolean.TRUE.equals(descriptor.getValue(NOT_OTHER));\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.CollapseExpand.getActionNames",
	"Comment": "gets the actionnames attribute of the collapseexpand object.",
	"Method": "Set<String> getActionNames(){\r\n    return commands;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.AssertionGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    ResponseAssertion model = (ResponseAssertion) el;\r\n    showScopeSettings(model, true);\r\n    if (model.getCustomFailureMessage() != null) {\r\n        alternativeFailureMessage.setText(model.getCustomFailureMessage());\r\n    }\r\n    if (model.isContainsType()) {\r\n        containsBox.setSelected(true);\r\n    } else if (model.isEqualsType()) {\r\n        equalsBox.setSelected(true);\r\n    } else if (model.isSubstringType()) {\r\n        substringBox.setSelected(true);\r\n    } else {\r\n        matchesBox.setSelected(true);\r\n    }\r\n    notBox.setSelected(model.isNotType());\r\n    orBox.setSelected(model.isOrType());\r\n    if (model.isTestFieldResponseData()) {\r\n        responseStringButton.setSelected(true);\r\n    } else if (model.isTestFieldResponseDataAsDocument()) {\r\n        responseAsDocumentButton.setSelected(true);\r\n    } else if (model.isTestFieldResponseCode()) {\r\n        responseCodeButton.setSelected(true);\r\n    } else if (model.isTestFieldResponseMessage()) {\r\n        responseMessageButton.setSelected(true);\r\n    } else if (model.isTestFieldRequestHeaders()) {\r\n        requestHeadersButton.setSelected(true);\r\n    } else if (model.isTestFieldRequestData()) {\r\n        requestDataButton.setSelected(true);\r\n    } else if (model.isTestFieldResponseHeaders()) {\r\n        responseHeadersButton.setSelected(true);\r\n    } else {\r\n        urlButton.setSelected(true);\r\n    }\r\n    assumeSuccess.setSelected(model.getAssumeSuccess());\r\n    tableModel.clearData();\r\n    for (JMeterProperty jMeterProperty : model.getTestStrings()) {\r\n        tableModel.addRow(new Object[] { jMeterProperty.getStringValue() });\r\n    }\r\n    if (model.getTestStrings().size() == 0) {\r\n        deletePattern.setEnabled(false);\r\n    } else {\r\n        deletePattern.setEnabled(true);\r\n    }\r\n    tableModel.fireTableDataChanged();\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.AbstractSummaryConsumer.suppportsControllersDiscrimination",
	"Comment": "indicates whether this summary can discriminate controller samples",
	"Method": "boolean suppportsControllersDiscrimination(){\r\n    return supportsControllersDiscrimination;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.TCLogParser.parseLine",
	"Comment": "parseline calls the other parse methods to parse the given text.",
	"Method": "int parseLine(String line,TestElement el){\r\n    int count = 0;\r\n    String cleanedLine = this.cleanURL(line);\r\n    log.debug(\"parsing line: \" + line);\r\n    el.setProperty(HTTPSamplerBase.METHOD, RMETHOD);\r\n    if (FILTER != null) {\r\n        log.debug(\"filter is not null\");\r\n        if (!FILTER.isFiltered(line, el)) {\r\n            log.debug(\"line was not filtered\");\r\n            count++;\r\n            line = FILTER.filter(cleanedLine);\r\n            if (line != null) {\r\n                createUrl(line, el);\r\n            }\r\n        } else {\r\n            log.debug(\"Line was filtered\");\r\n        }\r\n    } else {\r\n        log.debug(\"filter was null\");\r\n        count++;\r\n        createUrl(cleanedLine, el);\r\n    }\r\n    return count;\r\n}"
}, {
	"Path": "org.jboss.as.jpa.hibernate5.management.HibernateManagementAdaptor.getInstance",
	"Comment": "the management statistics are shared across all hibernate 4 jpa deployments",
	"Method": "HibernateManagementAdaptor getInstance(){\r\n    return INSTANCE;\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setConfidenceThreshold",
	"Comment": "the confidence level threshold used by the depth algorithm pipe to setwhether a pixel will get a valid range or will be marked with invalidrange",
	"Method": "void setConfidenceThreshold(int value){\r\n    setOption(RealSense.RS_OPTION_F200_CONFIDENCE_THRESHOLD, value);\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.Model.keep",
	"Comment": "keep attributes of this model and remove other attributes.",
	"Method": "M keep(String attrs,M keep,String attr){\r\n    if (attrs.containsKey(attr)) {\r\n        Object keepIt = attrs.get(attr);\r\n        boolean keepFlag = _getModifyFlag().contains(attr);\r\n        attrs.clear();\r\n        _getModifyFlag().clear();\r\n        attrs.put(attr, keepIt);\r\n        if (keepFlag)\r\n            _getModifyFlag().add(attr);\r\n    } else {\r\n        attrs.clear();\r\n        _getModifyFlag().clear();\r\n    }\r\n    return (M) this;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.BaseJMSSampler.getJNDIInitialContextFactory",
	"Comment": "method returns the initial context factory for jndi initial contextlookup.",
	"Method": "String getJNDIInitialContextFactory(){\r\n    return getPropertyAsString(JNDI_INITIAL_CONTEXT_FAC);\r\n}"
}, {
	"Path": "com.jfinal.config.Constants.setMaxPostSize",
	"Comment": "set max size of http post. the upload file size depend on this value.",
	"Method": "void setMaxPostSize(int maxPostSize){\r\n    this.maxPostSize = maxPostSize;\r\n}"
}, {
	"Path": "org.apache.jmeter.timers.TimerService.adjustDelay",
	"Comment": "adjust delay so that initialdelay does not exceed end of test",
	"Method": "long adjustDelay(long initialDelay,long adjustDelay,long initialDelay,long endTime){\r\n    if (endTime > 0) {\r\n        long now = System.currentTimeMillis();\r\n        if (initialDelay > endTime - now) {\r\n            return endTime - now;\r\n        }\r\n    }\r\n    return initialDelay;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui.testPanel",
	"Comment": "this will create the user defined test panel for create or modify ordelete or search based on the panel selected in the itemevent in theldapconfiggui.",
	"Method": "JPanel testPanel(){\r\n    cards = new JPanel(new CardLayout());\r\n    cards.add(new JPanel(), \"\");\r\n    cards.add(createAddPanel(), \"Add\");\r\n    cards.add(createModifyPanel(), \"Modify\");\r\n    cards.add(createDeletePanel(), \"Delete\");\r\n    cards.add(createSearchPanel(), \"Search\");\r\n    return cards;\r\n}"
}, {
	"Path": "org.apache.jmeter.util.JMeterUtils.loadProperties",
	"Comment": "this method loads a property file that may reside in the user space, orin the classpath",
	"Method": "Properties loadProperties(String file,Properties loadProperties,String file,Properties defaultProps){\r\n    Properties p = new Properties(defaultProps);\r\n    InputStream is = null;\r\n    try {\r\n        File f = new File(file);\r\n        is = new FileInputStream(f);\r\n        p.load(is);\r\n    } catch (IOException e) {\r\n        try {\r\n            final URL resource = JMeterUtils.class.getClassLoader().getResource(file);\r\n            if (resource == null) {\r\n                log.warn(\"Cannot find {}\", file);\r\n                return defaultProps;\r\n            }\r\n            is = resource.openStream();\r\n            if (is == null) {\r\n                log.warn(\"Cannot open {}\", file);\r\n                return defaultProps;\r\n            }\r\n            p.load(is);\r\n        } catch (IOException ex) {\r\n            log.warn(\"Error reading {} {}\", file, ex.toString());\r\n            return defaultProps;\r\n        }\r\n    } finally {\r\n        JOrphanUtils.closeQuietly(is);\r\n    }\r\n    return p;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.ProxyControl.addAssertion",
	"Comment": "helper method to add a response assertioncalled from awt event thread",
	"Method": "void addAssertion(JMeterTreeModel model,JMeterTreeNode node){\r\n    ResponseAssertion ra = new ResponseAssertion();\r\n    ra.setProperty(TestElement.GUI_CLASS, ASSERTION_GUI);\r\n    ra.setName(JMeterUtils.getResString(\"assertion_title\"));\r\n    ra.setTestFieldResponseData();\r\n    model.addComponent(ra, node);\r\n}"
}, {
	"Path": "cn.hutool.core.date.format.FastDatePrinter.getTimeZoneDisplay",
	"Comment": "gets the time zone display name, using a cache for performance.",
	"Method": "String getTimeZoneDisplay(TimeZone tz,boolean daylight,int style,Locale locale){\r\n    final TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);\r\n    String value = cTimeZoneDisplayCache.get(key);\r\n    if (value == null) {\r\n        value = tz.getDisplayName(daylight, style, locale);\r\n        final String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);\r\n        if (prior != null) {\r\n            value = prior;\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXDrawer.isOpening",
	"Comment": "this indicates whether or not the drawer is in the process of being shown.",
	"Method": "boolean isOpening(){\r\n    boolean condition = hasMiniSize() ? resizeTo == getDefaultDrawerSize() : translateTo == 0;\r\n    return condition && translateTimer.isRunning();\r\n}"
}, {
	"Path": "org.apache.jmeter.JMeter.setProxy",
	"Comment": "sets a proxy server for the jvm if the command line arguments arespecified.",
	"Method": "void setProxy(CLArgsParser parser){\r\n    if (parser.getArgumentById(PROXY_USERNAME) != null) {\r\n        Properties jmeterProps = JMeterUtils.getJMeterProperties();\r\n        if (parser.getArgumentById(PROXY_PASSWORD) != null) {\r\n            String u = parser.getArgumentById(PROXY_USERNAME).getArgument();\r\n            String p = parser.getArgumentById(PROXY_PASSWORD).getArgument();\r\n            Authenticator.setDefault(new ProxyAuthenticator(u, p));\r\n            log.info(\"Set Proxy login: {}/{}\", u, p);\r\n            jmeterProps.setProperty(HTTP_PROXY_USER, u);\r\n            jmeterProps.setProperty(HTTP_PROXY_PASS, p);\r\n        } else {\r\n            String u = parser.getArgumentById(PROXY_USERNAME).getArgument();\r\n            Authenticator.setDefault(new ProxyAuthenticator(u, \"\"));\r\n            log.info(\"Set Proxy login: {}\", u);\r\n            jmeterProps.setProperty(HTTP_PROXY_USER, u);\r\n        }\r\n    }\r\n    if (parser.getArgumentById(PROXY_HOST) != null && parser.getArgumentById(PROXY_PORT) != null) {\r\n        String h = parser.getArgumentById(PROXY_HOST).getArgument();\r\n        String p = parser.getArgumentById(PROXY_PORT).getArgument();\r\n        System.setProperty(\"http.proxyHost\", h);\r\n        System.setProperty(\"https.proxyHost\", h);\r\n        System.setProperty(\"http.proxyPort\", p);\r\n        System.setProperty(\"https.proxyPort\", p);\r\n        String proxyScheme = parser.getArgumentById(PROXY_SCHEME).getArgument();\r\n        if (!StringUtils.isBlank(proxyScheme)) {\r\n            System.setProperty(\"http.proxyScheme\", proxyScheme);\r\n        }\r\n        log.info(\"Set scheme: {} proxyHost: {} Port: {}\", proxyScheme, h, p);\r\n    } else if (parser.getArgumentById(PROXY_HOST) != null || parser.getArgumentById(PROXY_PORT) != null) {\r\n        throw new IllegalUserActionException(JMeterUtils.getResString(\"proxy_cl_error\"));\r\n    }\r\n    if (parser.getArgumentById(NONPROXY_HOSTS) != null) {\r\n        String n = parser.getArgumentById(NONPROXY_HOSTS).getArgument();\r\n        System.setProperty(\"http.nonProxyHosts\", n);\r\n        System.setProperty(\"https.nonProxyHosts\", n);\r\n        log.info(\"Set http[s].nonProxyHosts: {}\", n);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.getColumnAsObjectArray",
	"Comment": "this method will retrieve every entry in a certain column. it returns anarray of objects from the column.",
	"Method": "List<Object> getColumnAsObjectArray(String columnName){\r\n    return data.get(columnName);\r\n}"
}, {
	"Path": "com.auth0.jwt.JWT.create",
	"Comment": "returns a json web token builder used to create and sign tokens",
	"Method": "JWTCreator.Builder create(){\r\n    return JWTCreator.init();\r\n}"
}, {
	"Path": "org.apache.jmeter.modifiers.gui.UserParametersGui.getMaximalRequiredColumnWidth",
	"Comment": "compute max width between width of the largest column at columnindex and headerwidth",
	"Method": "int getMaximalRequiredColumnWidth(int columnIndex,int headerWidth){\r\n    int maxWidth = headerWidth;\r\n    TableColumn column = paramTable.getColumnModel().getColumn(columnIndex);\r\n    TableCellRenderer cellRenderer = column.getCellRenderer();\r\n    if (cellRenderer == null) {\r\n        cellRenderer = new DefaultTableCellRenderer();\r\n    }\r\n    for (int row = 0; row < paramTable.getModel().getRowCount(); row++) {\r\n        Component rendererComponent = cellRenderer.getTableCellRendererComponent(paramTable, paramTable.getModel().getValueAt(row, columnIndex), false, false, row, columnIndex);\r\n        double valueWidth = rendererComponent.getPreferredSize().getWidth();\r\n        maxWidth = (int) Math.max(maxWidth, valueWidth);\r\n    }\r\n    return maxWidth;\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.RenderAsBoundaryExtractor.actionPerformed",
	"Comment": "display the response as text or as rendered html. change the text on thebutton appropriate to the current display.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String command = e.getActionCommand();\r\n    if ((sampleResult != null) && (BOUNDARY_EXTRACTOR_TESTER_COMMAND.equals(command))) {\r\n        String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);\r\n        executeAndShowBoundaryExtractorTester(response);\r\n    }\r\n}"
}, {
	"Path": "cn.hutool.json.XMLTokener.skipPast",
	"Comment": "skip characters until past the requested string. if it is not found, we are left at the end of the source with a result of false.",
	"Method": "boolean skipPast(String to){\r\n    boolean b;\r\n    char c;\r\n    int i;\r\n    int j;\r\n    int offset = 0;\r\n    int length = to.length();\r\n    char[] circle = new char[length];\r\n    for (i = 0; i < length; i += 1) {\r\n        c = next();\r\n        if (c == 0) {\r\n            return false;\r\n        }\r\n        circle[i] = c;\r\n    }\r\n    for (; ; ) {\r\n        j = offset;\r\n        b = true;\r\n        for (i = 0; i < length; i += 1) {\r\n            if (circle[j] != to.charAt(i)) {\r\n                b = false;\r\n                break;\r\n            }\r\n            j += 1;\r\n            if (j >= length) {\r\n                j -= length;\r\n            }\r\n        }\r\n        if (b) {\r\n            return true;\r\n        }\r\n        c = next();\r\n        if (c == 0) {\r\n            return false;\r\n        }\r\n        circle[offset] = c;\r\n        offset += 1;\r\n        if (offset >= length) {\r\n            offset -= length;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getOkMaxTime",
	"Comment": "get the maximal elapsed time for requests within sliding window",
	"Method": "double getOkMaxTime(){\r\n    return okResponsesStats.getMax();\r\n}"
}, {
	"Path": "org.apache.jmeter.functions.StringFromFileFunctionTest.SFFParams",
	"Comment": "create the stringfromfile function and set its parameters.",
	"Method": "StringFromFile SFFParams(String p1,String p2,String p3,String p4){\r\n    StringFromFile sff = new StringFromFile();\r\n    Collection<CompoundVariable> parms = new LinkedList();\r\n    if (p1 != null) {\r\n        parms.add(new CompoundVariable(p1));\r\n    }\r\n    if (p2 != null) {\r\n        parms.add(new CompoundVariable(p2));\r\n    }\r\n    if (p3 != null) {\r\n        parms.add(new CompoundVariable(p3));\r\n    }\r\n    if (p4 != null) {\r\n        parms.add(new CompoundVariable(p4));\r\n    }\r\n    sff.setParameters(parms);\r\n    return sff;\r\n}"
}, {
	"Path": "org.apache.jmeter.util.JMeterUtils.getResString",
	"Comment": "gets the resource string for this key.if the resource is not found, a warning is logged",
	"Method": "String getResString(String key,String getResString,String key,Locale forcedLocale,String getResString,String key,String defaultValue){\r\n    return getResStringDefault(key, defaultValue);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPJavaImpl.sendPostData",
	"Comment": "send post data from entry to the open connection.this also handles sending data for put requests",
	"Method": "String sendPostData(URLConnection connection){\r\n    return postOrPutWriter.sendPostData(connection, testElement);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG94Dialect.getHavingSridSQL",
	"Comment": "returns the sql fragment when parsing a havingsridexpression.",
	"Method": "String getHavingSridSQL(String columnName){\r\n    return support.getHavingSridSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.functions.AbstractFunction.getVariables",
	"Comment": "gives access to the jmeter variables for the current thread.",
	"Method": "JMeterVariables getVariables(){\r\n    return JMeterContextService.getContext().getVariables();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.setupClientContextBeforeSample",
	"Comment": "configure the usertoken so that the ssl context is reusedsee bug 57804",
	"Method": "void setupClientContextBeforeSample(JMeterVariables jMeterVariables,HttpContext localContext){\r\n    Object userToken = null;\r\n    if (jMeterVariables != null) {\r\n        userToken = jMeterVariables.getObject(JMETER_VARIABLE_USER_TOKEN);\r\n    }\r\n    if (userToken != null) {\r\n        log.debug(\"Found user token:{} as JMeter variable:{}, storing it in HttpContext\", userToken, JMETER_VARIABLE_USER_TOKEN);\r\n        localContext.setAttribute(HttpClientContext.USER_TOKEN, userToken);\r\n    } else {\r\n        String userId = Thread.currentThread().getName();\r\n        log.debug(\"Storing in HttpContext the user token: {}\", userId);\r\n        localContext.setAttribute(HttpClientContext.USER_TOKEN, userId);\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacv.FFmpegFrameGrabber.setFrameNumber",
	"Comment": "default override of super.setframenumber implies setting of a frame close to a video frame having that number",
	"Method": "void setFrameNumber(int frameNumber){\r\n    if (hasVideo())\r\n        setTimestamp(Math.round(1000000L * frameNumber / getFrameRate()));\r\n    else\r\n        super.frameNumber = frameNumber;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LdapClient.modifyTest",
	"Comment": "modify the attribute in the ldap directory for the given string.",
	"Method": "void modifyTest(ModificationItem[] mods,String string){\r\n    dirContext.modifyAttributes(string, mods);\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.LoadRecentProject.updateRecentFileMenuItems",
	"Comment": "update the content and visibility of the menu items for recent files",
	"Method": "void updateRecentFileMenuItems(List<JComponent> menuItems,String loadedFileName){\r\n    LinkedList<String> newRecentFiles = new LinkedList();\r\n    boolean alreadyExists = false;\r\n    for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {\r\n        String recentFilePath = getRecentFile(i);\r\n        if (!loadedFileName.equals(recentFilePath)) {\r\n            newRecentFiles.add(recentFilePath);\r\n        } else {\r\n            alreadyExists = true;\r\n        }\r\n    }\r\n    newRecentFiles.add(0, loadedFileName);\r\n    if (!alreadyExists) {\r\n        newRecentFiles.removeLast();\r\n    }\r\n    for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {\r\n        String fileName = newRecentFiles.get(i);\r\n        if (fileName != null) {\r\n            setRecentFile(i, fileName);\r\n        }\r\n    }\r\n    updateMenuItems(menuItems);\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.getColumn",
	"Comment": "this method will retrieve every entry in a certain column. it returns anarray of strings from the column. even if the data are not strings, theywill be returned as strings in this method.",
	"Method": "String[] getColumn(String columnName){\r\n    String[] returnValue;\r\n    List<?> temp = data.get(columnName);\r\n    if (temp != null) {\r\n        returnValue = new String[temp.size()];\r\n        int index = 0;\r\n        for (Object o : temp) {\r\n            if (o != null) {\r\n                if (o instanceof String) {\r\n                    returnValue[index++] = (String) o;\r\n                } else {\r\n                    returnValue[index++] = o.toString();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        returnValue = new String[0];\r\n    }\r\n    return returnValue;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel.setSuppressSubject",
	"Comment": "sets the property that defines if the subject header should be suppressed",
	"Method": "void setSuppressSubject(boolean emptySubject){\r\n    cbSuppressSubject.setSelected(emptySubject);\r\n}"
}, {
	"Path": "org.apache.jmeter.util.SSLManager.getInstance",
	"Comment": "static accessor for the sslmanager object. the sslmanager is a singleton.",
	"Method": "SSLManager getInstance(){\r\n    if (null == SSLManager.manager) {\r\n        SSLManager.manager = new JsseSSLManager(null);\r\n    }\r\n    return SSLManager.manager;\r\n}"
}, {
	"Path": "org.apache.jmeter.util.XPathUtil.makeDocumentBuilderFactory",
	"Comment": "returns a suitable document builder factory.caches the factory in case the next caller wants the same options.",
	"Method": "DocumentBuilderFactory makeDocumentBuilderFactory(boolean validate,boolean whitespace,boolean namespace){\r\n    if (XPathUtil.documentBuilderFactory == null || documentBuilderFactory.isValidating() != validate || documentBuilderFactory.isNamespaceAware() != namespace || documentBuilderFactory.isIgnoringElementContentWhitespace() != whitespace) {\r\n        documentBuilderFactory = DocumentBuilderFactory.newInstance();\r\n        documentBuilderFactory.setValidating(validate);\r\n        documentBuilderFactory.setNamespaceAware(namespace);\r\n        documentBuilderFactory.setIgnoringElementContentWhitespace(whitespace);\r\n    }\r\n    return XPathUtil.documentBuilderFactory;\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextArea.getToolTipText",
	"Comment": "returns the tooltip string that has been set with settooltiptext",
	"Method": "String getToolTipText(){\r\n    return mTextArea.getToolTipText();\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.WhileControllerGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    if (element instanceof WhileController) {\r\n        theCondition.setText(((WhileController) element).getCondition());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.ArgumentsPanel.getMenuCategories",
	"Comment": "this is the list of menu categories this gui component will be availableunder.",
	"Method": "Collection<String> getMenuCategories(){\r\n    if (standalone) {\r\n        return super.getMenuCategories();\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.LongIndexer.create",
	"Comment": "creates a long indexer to access efficiently the data of a pointer.",
	"Method": "LongIndexer create(long[] array,LongIndexer create,LongBuffer buffer,LongIndexer create,LongPointer pointer,LongIndexer create,long[] array,long[] sizes,long[] strides,LongIndexer create,LongBuffer buffer,long[] sizes,long[] strides,LongIndexer create,LongPointer pointer,long[] sizes,long[] strides,LongIndexer create,LongPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new LongRawIndexer(pointer, sizes, strides) : new LongBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        long[] array = new long[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new LongArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.LongIndexer.create",
	"Comment": "creates a long indexer to access efficiently the data of a pointer.",
	"Method": "LongIndexer create(long[] array,LongIndexer create,LongBuffer buffer,LongIndexer create,LongPointer pointer,LongIndexer create,long[] array,long[] sizes,long[] strides,LongIndexer create,LongBuffer buffer,long[] sizes,long[] strides,LongIndexer create,LongPointer pointer,long[] sizes,long[] strides,LongIndexer create,LongPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getParaNames",
	"Comment": "returns an enumeration of string objects containing the names of the parameters\tcontained in this request. if the request has no parameters, the method returns\tan empty enumeration.",
	"Method": "Enumeration<String> getParaNames(){\r\n    return request.getParameterNames();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.tcp.control.gui.TCPSamplerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement sampler){\r\n    sampler.clear();\r\n    sampler.addTestElement(tcpDefaultPanel.createTestElement());\r\n    sampler.addTestElement(loginPanel.createTestElement());\r\n    super.configureTestElement(sampler);\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.getTree",
	"Comment": "gets the hashtree object mapped to the last key in the sortedset byrecursing through the hashtree structure one key at a time.",
	"Method": "HashTree getTree(Object key,HashTree getTree,Object[] treePath,HashTree getTree,Collection<?> treePath){\r\n    return getTreePath(treePath);\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.send",
	"Comment": "write reader to request bodythe given reader will be closed once sending completes",
	"Method": "HttpRequest send(File input,HttpRequest send,byte[] input,HttpRequest send,InputStream input,HttpRequest send,Reader input,HttpRequest send,CharSequence value){\r\n    try {\r\n        openOutput();\r\n        output.write(value.toString());\r\n    } catch (IOException e) {\r\n        throw new HttpRequestException(e);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jorphan.reflect.ClassFinder.findClasses",
	"Comment": "find all classes in the given jars that passes the class filter.",
	"Method": "List<String> findClasses(String[] searchPathsOrJars,ClassFilter filter){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"findClasses with searchPathsOrJars : {} and classFilter : {}\", Arrays.toString(searchPathsOrJars), filter);\r\n    }\r\n    List<String> strPathsOrJars = Arrays.stream(addJarsInPath(searchPathsOrJars)).map(ClassFinder::fixPathEntry).collect(Collectors.toList());\r\n    List<String> listPaths = getClasspathMatches(strPathsOrJars);\r\n    if (log.isDebugEnabled()) {\r\n        for (String path : listPaths) {\r\n            log.debug(\"listPaths : {}\", path);\r\n        }\r\n    }\r\n    Set<String> listClasses = new TreeSet();\r\n    for (String path : listPaths) {\r\n        findClassesInOnePath(path, listClasses, filter);\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"listClasses.size()={}\", listClasses.size());\r\n        for (String clazz : listClasses) {\r\n            log.debug(\"listClasses : {}\", clazz);\r\n        }\r\n    }\r\n    return new ArrayList(listClasses);\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Collections.isEmpty",
	"Comment": "return true if the supplied map is nullor empty. otherwise, return false.",
	"Method": "boolean isEmpty(Collection collection,boolean isEmpty,Map map){\r\n    return (map == null || map.isEmpty());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.HTTPFileArgs.addEmptyHTTPFileArg",
	"Comment": "add a new empty file to the list. the new file will have theempty string as its path.",
	"Method": "void addEmptyHTTPFileArg(){\r\n    addHTTPFileArg(new HTTPFileArg(\"\"));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LdapExtClient.modifyTest",
	"Comment": "modify the attribute in the ldap directory for the given string",
	"Method": "void modifyTest(DirContext dirContext,ModificationItem[] mods,String string){\r\n    if (dirContext == null) {\r\n        throw new NamingException(CONTEXT_IS_NULL);\r\n    }\r\n    dirContext.modifyAttributes(string, mods);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisSupport.supports",
	"Comment": "does this dialect supports the specified spatialfunction.",
	"Method": "boolean supports(SpatialFunction function){\r\n    return (postgisFunctions.get(function.toString()) != null);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.AbstractSampleConsumer.getDataFromContext",
	"Comment": "gets the data identified by the specified key from the current samplecontext",
	"Method": "Object getDataFromContext(String key){\r\n    return getSampleContext().getData().get(key);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.JMSProperties.setProperties",
	"Comment": "set the list of jmsproperties. any existing jmsproperties will be lost.",
	"Method": "void setProperties(List<JMSProperty> jmsProperties){\r\n    setProperty(new CollectionProperty(JMS_PROPERTIES, jmsProperties));\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement config){\r\n    ConfigTestElement cfg = (ConfigTestElement) config;\r\n    ConfigTestElement el = (ConfigTestElement) urlConfigGui.createTestElement();\r\n    cfg.clear();\r\n    cfg.addConfigElement(el);\r\n    super.configureTestElement(config);\r\n    if (retrieveEmbeddedResources.isSelected()) {\r\n        config.setProperty(new BooleanProperty(HTTPSamplerBase.IMAGE_PARSER, true));\r\n    } else {\r\n        config.removeProperty(HTTPSamplerBase.IMAGE_PARSER);\r\n    }\r\n    enableConcurrentDwn(retrieveEmbeddedResources.isSelected());\r\n    if (concurrentDwn.isSelected()) {\r\n        config.setProperty(new BooleanProperty(HTTPSamplerBase.CONCURRENT_DWN, true));\r\n    } else {\r\n        config.removeProperty(HTTPSamplerBase.CONCURRENT_DWN);\r\n    }\r\n    if (!StringUtils.isEmpty(concurrentPool.getText())) {\r\n        config.setProperty(new StringProperty(HTTPSamplerBase.CONCURRENT_POOL, concurrentPool.getText()));\r\n    } else {\r\n        config.setProperty(new StringProperty(HTTPSamplerBase.CONCURRENT_POOL, String.valueOf(HTTPSamplerBase.CONCURRENT_POOL_SIZE)));\r\n    }\r\n    if (useMD5.isSelected()) {\r\n        config.setProperty(new BooleanProperty(HTTPSamplerBase.MD5, true));\r\n    } else {\r\n        config.removeProperty(HTTPSamplerBase.MD5);\r\n    }\r\n    if (!StringUtils.isEmpty(embeddedRE.getText())) {\r\n        config.setProperty(new StringProperty(HTTPSamplerBase.EMBEDDED_URL_RE, embeddedRE.getText()));\r\n    } else {\r\n        config.removeProperty(HTTPSamplerBase.EMBEDDED_URL_RE);\r\n    }\r\n    if (!StringUtils.isEmpty(sourceIpAddr.getText())) {\r\n        config.setProperty(new StringProperty(HTTPSamplerBase.IP_SOURCE, sourceIpAddr.getText()));\r\n        config.setProperty(new IntegerProperty(HTTPSamplerBase.IP_SOURCE_TYPE, sourceIpType.getSelectedIndex()));\r\n    } else {\r\n        config.removeProperty(HTTPSamplerBase.IP_SOURCE);\r\n        config.removeProperty(HTTPSamplerBase.IP_SOURCE_TYPE);\r\n    }\r\n    config.setProperty(HTTPSamplerBase.PROXYSCHEME, proxyScheme.getText(), \"\");\r\n    config.setProperty(HTTPSamplerBase.PROXYHOST, proxyHost.getText(), \"\");\r\n    config.setProperty(HTTPSamplerBase.PROXYPORT, proxyPort.getText(), \"\");\r\n    config.setProperty(HTTPSamplerBase.PROXYUSER, proxyUser.getText(), \"\");\r\n    config.setProperty(HTTPSamplerBase.PROXYPASS, String.valueOf(proxyPass.getPassword()), \"\");\r\n    config.setProperty(HTTPSamplerBase.IMPLEMENTATION, httpImplementation.getSelectedItem().toString(), \"\");\r\n    config.setProperty(HTTPSamplerBase.CONNECT_TIMEOUT, connectTimeOut.getText());\r\n    config.setProperty(HTTPSamplerBase.RESPONSE_TIMEOUT, responseTimeOut.getText());\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.smtp.sampler.gui.SmtpPanel.getConnectionTimeout",
	"Comment": "returns connection timeout for smtp connection from textfield",
	"Method": "String getConnectionTimeout(){\r\n    return tfMailServerConnectionTimeout.getText();\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getAttrForStr",
	"Comment": "returns the value of the named attribute as an object, or null if no attribute of the given name exists.",
	"Method": "String getAttrForStr(String name){\r\n    return (String) request.getAttribute(name);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.config.gui.UrlConfigGui.stateChanged",
	"Comment": "autoredirects and followredirects cannot both be selected",
	"Method": "void stateChanged(ChangeEvent e){\r\n    Object source = e.getSource();\r\n    if (source == autoRedirects && autoRedirects.isSelected()) {\r\n        followRedirects.setSelected(false);\r\n    } else if (source == followRedirects && followRedirects.isSelected()) {\r\n        autoRedirects.setSelected(false);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.AccessLogSampler.getLogFile",
	"Comment": "get the path where xml messages are stored. this is the directory wherejmeter will randomly select a file.",
	"Method": "String getLogFile(){\r\n    return logFile;\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.DbPro.batchUpdate",
	"Comment": "batch update records with default primary key, using the columns names of the first record in recordlist.ensure all the records can use the same sql as the first record.",
	"Method": "int[] batchUpdate(List<? extends Model> modelList,int batchSize,int[] batchUpdate,String tableName,String primaryKey,List<Record> recordList,int batchSize,int[] batchUpdate,String tableName,List<Record> recordList,int batchSize){\r\n    return batchUpdate(tableName, config.dialect.getDefaultPrimaryKey(), recordList, batchSize);\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.TestCompiler.configureTransactionSampler",
	"Comment": "configures transaction sampler from samplepackage extracted from test plan and returns it",
	"Method": "SamplePackage configureTransactionSampler(TransactionSampler transactionSampler){\r\n    TransactionController controller = transactionSampler.getTransactionController();\r\n    SamplePackage pack = transactionControllerConfigMap.get(controller);\r\n    pack.setSampler(transactionSampler);\r\n    return pack;\r\n}"
}, {
	"Path": "org.apache.jmeter.ProxyAuthenticator.getPasswordAuthentication",
	"Comment": "return a passwordauthentication instance using the username and passwordspecified in the constructor.only applies to proxy request types.",
	"Method": "PasswordAuthentication getPasswordAuthentication(){\r\n    switch(getRequestorType()) {\r\n        case PROXY:\r\n            return new PasswordAuthentication(userName, password);\r\n        case SERVER:\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.jmeter.util.keystore.JmeterKeyStore.getClientAliases",
	"Comment": "compiles the list of all client aliases with a private key.todo currently, keytype and issuers are both ignored.",
	"Method": "String[] getClientAliases(String keyType,Principal[] issuers){\r\n    int count = getAliasCount();\r\n    String[] aliases = new String[count];\r\n    for (int i = 0; i < aliases.length; i++) {\r\n        aliases[i] = this.names[i];\r\n    }\r\n    if (aliases.length > 0) {\r\n        return aliases;\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.parser.HtmlParsingUtils.isArgumentMatched",
	"Comment": "arguments match if the input name matches the corresponding pattern nameand the input value matches the pattern value, where the matching is donefirst using string equals, and then regular expression matching if the equals test fails.",
	"Method": "boolean isArgumentMatched(Argument arg,Argument patternArg){\r\n    final Perl5Matcher matcher = JMeterUtils.getMatcher();\r\n    final PatternCacheLRU patternCache = JMeterUtils.getPatternCache();\r\n    return isEqualOrMatches(arg.getName(), patternArg.getName(), matcher, patternCache) && isEqualOrMatches(arg.getValue(), patternArg.getValue(), matcher, patternCache);\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.XMLAssertion.getResult",
	"Comment": "returns the result of the assertion. here it checks whether the sample data is xml. if so an assertionresult containing a failuremessage will be returned. otherwise the returned assertionresult will reflect the success of the sample.",
	"Method": "AssertionResult getResult(SampleResult response){\r\n    AssertionResult result = new AssertionResult(getName());\r\n    String resultData = response.getResponseDataAsString();\r\n    if (resultData.length() == 0) {\r\n        return result.setResultForNull();\r\n    }\r\n    result.setFailure(false);\r\n    XMLReader builder = XML_READER.get();\r\n    if (builder != null) {\r\n        try {\r\n            builder.setErrorHandler(new LogErrorHandler());\r\n            builder.parse(new InputSource(new StringReader(resultData)));\r\n        } catch (SAXException | IOException e) {\r\n            result.setError(true);\r\n            result.setFailure(true);\r\n            result.setFailureMessage(e.getMessage());\r\n        }\r\n    } else {\r\n        result.setError(true);\r\n        result.setFailureMessage(\"Cannot initialize XMLReader in element:\" + getName() + \", check jmeter.log file\");\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.github.kevinsawicki.http.HttpRequest.bufferedReader",
	"Comment": "get buffered reader to response body using the given character set r andthe configured buffer size",
	"Method": "BufferedReader bufferedReader(String charset,BufferedReader bufferedReader){\r\n    return bufferedReader(charset());\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXTreeTableView.buildGroupedRoot",
	"Comment": "this method is used to update tree items and set the new rootafter grouping the data model",
	"Method": "void buildGroupedRoot(Map<?, ?> groupedItems,RecursiveTreeItem parent,int groupIndex){\r\n    boolean setRoot = false;\r\n    if (parent == null) {\r\n        parent = new RecursiveTreeItem(new RecursiveTreeObject(), RecursiveTreeObject::getChildren);\r\n        setRoot = true;\r\n    }\r\n    for (Map.Entry<?, ?> entry : groupedItems.entrySet()) {\r\n        Object key = entry.getKey();\r\n        RecursiveTreeObject groupItem = new RecursiveTreeObject();\r\n        groupItem.setGroupedValue(key);\r\n        groupItem.setGroupedColumn(groupOrder.get(groupIndex));\r\n        RecursiveTreeItem node = new RecursiveTreeItem(groupItem, RecursiveTreeObject::getChildren);\r\n        node.expandedProperty().addListener((o, oldVal, newVal) -> {\r\n            getSelectionModel().clearSelection();\r\n        });\r\n        parent.originalItems.add(node);\r\n        parent.getChildren().add(node);\r\n        Object children = entry.getValue();\r\n        if (children instanceof List) {\r\n            node.originalItems.addAll((List) children);\r\n            node.getChildren().addAll((List) children);\r\n        } else if (children instanceof Map) {\r\n            buildGroupedRoot((Map) children, node, groupIndex + 1);\r\n        }\r\n    }\r\n    if (setRoot) {\r\n        final RecursiveTreeItem<S> newParent = parent;\r\n        JFXUtilities.runInFX(() -> {\r\n            ArrayList<TreeTableColumn<S, ?>> sortOrder = new ArrayList();\r\n            sortOrder.addAll(getSortOrder());\r\n            internalSetRoot = true;\r\n            setRoot(newParent);\r\n            internalSetRoot = false;\r\n            getSortOrder().addAll(sortOrder);\r\n            getSelectionModel().select(0);\r\n        });\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.CookieManager.getCookieHeaderForURL",
	"Comment": "find cookies applicable to the given url and build the cookie header fromthem.",
	"Method": "String getCookieHeaderForURL(URL url){\r\n    return cookieHandler.getCookieHeaderForURL(getCookies(), url, ALLOW_VARIABLE_COOKIES);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler.unbindOp",
	"Comment": "this will do the unbind for the user defined testcase as well as inbuilttest case",
	"Method": "void unbindOp(DirContext dirContext,SampleResult res){\r\n    try {\r\n        res.sampleStart();\r\n        LdapExtClient.disconnect(dirContext);\r\n    } finally {\r\n        res.sampleEnd();\r\n    }\r\n    ldapContexts.remove(getThreadName());\r\n    log.info(\"context and LdapExtClients removed\");\r\n}"
}, {
	"Path": "cn.hutool.script.ScriptRuntimeException.getMessage",
	"Comment": "returns a message containing the string passed to a constructor as well as line and column numbers and filename if any of these are known.",
	"Method": "String getMessage(){\r\n    String ret = super.getMessage();\r\n    if (fileName != null) {\r\n        ret += (\" in \" + fileName);\r\n        if (lineNumber != -1) {\r\n            ret += \" at line number \" + lineNumber;\r\n        }\r\n        if (columnNumber != -1) {\r\n            ret += \" at column number \" + columnNumber;\r\n        }\r\n    }\r\n    return ret;\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Strings.toStringArray",
	"Comment": "copy the given enumeration into a string array.the enumeration must contain string elements only.",
	"Method": "String[] toStringArray(Collection<String> collection,String[] toStringArray,Enumeration<String> enumeration){\r\n    if (enumeration == null) {\r\n        return null;\r\n    }\r\n    List<String> list = java.util.Collections.list(enumeration);\r\n    return list.toArray(new String[list.size()]);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.JLabeledTextField.notifyChangeListeners",
	"Comment": "notify all registered change listeners that the text in the text fieldhas changed.",
	"Method": "void notifyChangeListeners(){\r\n    ChangeEvent ce = new ChangeEvent(this);\r\n    for (ChangeListener mChangeListener : mChangeListeners) {\r\n        mChangeListener.stateChanged(ce);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.smtp.sampler.SmtpSampler.getPropAsAddresses",
	"Comment": "get the list of addresses or null.null is treated differently from an empty list.",
	"Method": "List<InternetAddress> getPropAsAddresses(String propKey){\r\n    final String propValue = getPropertyAsString(propKey).trim();\r\n    if (!propValue.isEmpty()) {\r\n        List<InternetAddress> addresses = new ArrayList();\r\n        for (String address : propValue.split(\";\")) {\r\n            addresses.add(new InternetAddress(address.trim()));\r\n        }\r\n        return addresses;\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.SimpleConfigGui.actionPerformed",
	"Comment": "invoked when an action occurs. this implementation supports the add anddelete buttons.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String action = e.getActionCommand();\r\n    if (action.equals(DELETE)) {\r\n        deleteArgument();\r\n    } else if (action.equals(ADD)) {\r\n        addArgument();\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect.getDWithinSQL",
	"Comment": "returns the sql fragment when parsing a dwithinexpression.",
	"Method": "String getDWithinSQL(String columnName){\r\n    return support.getDWithinSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.HTTPFileArg.setHeader",
	"Comment": "sets the body header for the httpfilearg object. header contains path, parameter name and mime type information. this is only intended for use by methods which need to store information temporarily whilst creating the http body.",
	"Method": "void setHeader(String newHeader){\r\n    header = newHeader;\r\n}"
}, {
	"Path": "org.apache.jmeter.reporters.SummariserRunningSample.getRate",
	"Comment": "returns the throughput associated to this sampler in requests per second.",
	"Method": "double getRate(){\r\n    if (counter == 0) {\r\n        return 0.0;\r\n    }\r\n    long howLongRunning = endTime - startTime;\r\n    if (howLongRunning == 0) {\r\n        return Double.MAX_VALUE;\r\n    }\r\n    return (double) counter / howLongRunning * 1000.0;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.MenuFactory.canAddTo",
	"Comment": "determine whether or not nodes can be added to this parent.used by dragndrop and paste.",
	"Method": "boolean canAddTo(JMeterTreeNode parentNode,TestElement element,boolean canAddTo,JMeterTreeNode parentNode,JMeterTreeNode[] nodes){\r\n    if (parentNode == null || foundClass(nodes, new Class[] { TestPlan.class })) {\r\n        return false;\r\n    }\r\n    TestElement parent = parentNode.getTestElement();\r\n    if (foundClass(nodes, new Class[] { TestFragmentController.class })) {\r\n        return parent instanceof TestPlan;\r\n    }\r\n    if (foundMenuCategories(nodes, NON_TEST_ELEMENTS) && !(parent instanceof TestPlan || parent instanceof TestFragmentController)) {\r\n        return false;\r\n    }\r\n    if (parent instanceof TestPlan) {\r\n        List<Class<?>> samplerAndController = Arrays.asList(Sampler.class, Controller.class);\r\n        List<Class<?>> exceptions = Arrays.asList(AbstractThreadGroup.class, NonTestElement.class);\r\n        return !foundClass(nodes, samplerAndController, exceptions);\r\n    }\r\n    if (foundClass(nodes, new Class[] { AbstractThreadGroup.class })) {\r\n        return false;\r\n    }\r\n    if (parent instanceof Controller) {\r\n        return true;\r\n    }\r\n    if (parent instanceof Sampler) {\r\n        return !foundClass(nodes, new Class[] { Sampler.class, Controller.class });\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.containsKey",
	"Comment": "if the hashtree contains the given object as a key at the top level, thena true result is returned, otherwise false.",
	"Method": "boolean containsKey(Object o){\r\n    return data.containsKey(o);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.PublisherSampler.getConfigChoice",
	"Comment": "return the source of the message converts from old jmx files which usedthe local language string",
	"Method": "String getConfigChoice(){\r\n    String config = getPropertyAsString(CONFIG_CHOICE);\r\n    if (config.equals(USE_FILE_LOCALNAME) || config.equals(JMSPublisherGui.USE_FILE_RSC)) {\r\n        return JMSPublisherGui.USE_FILE_RSC;\r\n    }\r\n    if (config.equals(USE_RANDOM_LOCALNAME) || config.equals(JMSPublisherGui.USE_RANDOM_RSC)) {\r\n        return JMSPublisherGui.USE_RANDOM_RSC;\r\n    }\r\n    return config;\r\n}"
}, {
	"Path": "com.jfoenix.skins.JFXDatePickerContent.getPrimaryChronology",
	"Comment": "this method must be overriden when implementing other chronolgy",
	"Method": "Chronology getPrimaryChronology(){\r\n    return datePicker.getChronology();\r\n}"
}, {
	"Path": "org.apache.jmeter.timers.gui.ConstantTimerGui.configure",
	"Comment": "configure this gui component from the underlying testelement.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    delayField.setText(((ConstantTimer) el).getDelay());\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXRippler.positionControl",
	"Comment": "override this method to create jfxrippler for a control outside the ripple",
	"Method": "void positionControl(Node control){\r\n    if (this.position.get() == RipplerPos.BACK) {\r\n        getChildren().add(control);\r\n    } else {\r\n        getChildren().add(0, control);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.GuiUtils.stopTableEditing",
	"Comment": "stop any editing that is currently being done on the table. this willsave any changes that have already been made.",
	"Method": "void stopTableEditing(JTable table){\r\n    if (table.isEditing()) {\r\n        TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());\r\n        cellEditor.stopCellEditing();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.getDataEncodingWithDefault",
	"Comment": "returns the dataencoding or the default if no dataencoding was provided.",
	"Method": "String getDataEncodingWithDefault(String getDataEncodingWithDefault,String defaultEncoding){\r\n    if (dataEncoding != null && dataEncoding.length() > 0) {\r\n        return dataEncoding;\r\n    }\r\n    return defaultEncoding;\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.setTopFixedCount",
	"Comment": "sets the number of items to fix at the top of the menu or popup menu.",
	"Method": "void setTopFixedCount(int topFixedCount){\r\n    if (firstIndex <= topFixedCount) {\r\n        firstIndex = topFixedCount;\r\n    } else {\r\n        firstIndex = firstIndex + topFixedCount - this.topFixedCount;\r\n    }\r\n    this.topFixedCount = topFixedCount;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPHC4Impl.getAllHeadersExceptCookie",
	"Comment": "get all the request headers except cookie for the httprequest",
	"Method": "String getAllHeadersExceptCookie(HttpRequest method){\r\n    return getFromHeadersMatchingPredicate(method, ALL_EXCEPT_COOKIE);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.errorResult",
	"Comment": "populates the provided httpsampleresult with details from the exception.does not create a new instance, so should not be used directly to add a subsample.",
	"Method": "HTTPSampleResult errorResult(Throwable e,HTTPSampleResult res){\r\n    res.setSampleLabel(res.getSampleLabel());\r\n    res.setDataType(SampleResult.TEXT);\r\n    ByteArrayOutputStream text = new ByteArrayOutputStream(200);\r\n    e.printStackTrace(new PrintStream(text));\r\n    res.setResponseData(text.toByteArray());\r\n    res.setResponseCode(NON_HTTP_RESPONSE_CODE + \": \" + e.getClass().getName());\r\n    res.setResponseMessage(NON_HTTP_RESPONSE_MESSAGE + \": \" + e.getMessage());\r\n    res.setSuccessful(false);\r\n    return res;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.AssertionGui.createFieldPanel",
	"Comment": "create a panel allowing the user to choose which response field should betested.",
	"Method": "JPanel createFieldPanel(){\r\n    responseStringButton = new JRadioButton(JMeterUtils.getResString(\"assertion_text_resp\"));\r\n    responseAsDocumentButton = new JRadioButton(JMeterUtils.getResString(\"assertion_text_document\"));\r\n    urlButton = new JRadioButton(JMeterUtils.getResString(\"assertion_url_samp\"));\r\n    responseCodeButton = new JRadioButton(JMeterUtils.getResString(\"assertion_code_resp\"));\r\n    responseMessageButton = new JRadioButton(JMeterUtils.getResString(\"assertion_message_resp\"));\r\n    responseHeadersButton = new JRadioButton(JMeterUtils.getResString(\"assertion_headers\"));\r\n    requestHeadersButton = new JRadioButton(JMeterUtils.getResString(\"assertion_req_headers\"));\r\n    requestDataButton = new JRadioButton(JMeterUtils.getResString(\"assertion_req_data\"));\r\n    ButtonGroup group = new ButtonGroup();\r\n    group.add(responseStringButton);\r\n    group.add(responseAsDocumentButton);\r\n    group.add(urlButton);\r\n    group.add(responseCodeButton);\r\n    group.add(responseMessageButton);\r\n    group.add(requestHeadersButton);\r\n    group.add(responseHeadersButton);\r\n    group.add(requestDataButton);\r\n    responseStringButton.setSelected(true);\r\n    assumeSuccess = new JCheckBox(JMeterUtils.getResString(\"assertion_assume_success\"));\r\n    GridBagLayout gridBagLayout = new GridBagLayout();\r\n    GridBagConstraints gbc = new GridBagConstraints();\r\n    initConstraints(gbc);\r\n    JPanel panel = new JPanel(gridBagLayout);\r\n    panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString(\"assertion_resp_field\")));\r\n    addField(panel, responseStringButton, gbc);\r\n    addField(panel, responseCodeButton, gbc);\r\n    addField(panel, responseMessageButton, gbc);\r\n    addField(panel, responseHeadersButton, gbc);\r\n    resetContraints(gbc);\r\n    addField(panel, requestHeadersButton, gbc);\r\n    addField(panel, urlButton, gbc);\r\n    addField(panel, responseAsDocumentButton, gbc);\r\n    addField(panel, assumeSuccess, gbc);\r\n    resetContraints(gbc);\r\n    addField(panel, requestDataButton, gbc);\r\n    return panel;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui.itemStateChanged",
	"Comment": "this itemstatechanged listener for changing the card layout for based onthe test selected in the user defined test case.",
	"Method": "void itemStateChanged(ItemEvent ie){\r\n    CardLayout cl = (CardLayout) (cards.getLayout());\r\n    if (userDefined.isSelected()) {\r\n        if (addTest.isSelected()) {\r\n            cl.show(cards, \"Add\");\r\n            tableModifyPanel.clear();\r\n            modify.setText(\"\");\r\n            searchbase.setText(\"\");\r\n            searchfilter.setText(\"\");\r\n            delete.setText(\"\");\r\n        } else if (deleteTest.isSelected()) {\r\n            cl.show(cards, \"Delete\");\r\n            tableModifyPanel.clear();\r\n            modify.setText(\"\");\r\n            tableAddPanel.clear();\r\n            add.setText(\"\");\r\n            searchbase.setText(\"\");\r\n            searchfilter.setText(\"\");\r\n        } else if (searchTest.isSelected()) {\r\n            cl.show(cards, \"Search\");\r\n            delete.setText(\"\");\r\n            tableModifyPanel.clear();\r\n            modify.setText(\"\");\r\n            tableAddPanel.clear();\r\n            add.setText(\"\");\r\n        } else if (modifyTest.isSelected()) {\r\n            cl.show(cards, \"Modify\");\r\n            tableAddPanel.clear();\r\n            add.setText(\"\");\r\n            searchbase.setText(\"\");\r\n            searchfilter.setText(\"\");\r\n            delete.setText(\"\");\r\n        } else {\r\n            resetCardLayout(cl);\r\n        }\r\n    } else {\r\n        resetCardLayout(cl);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.CsvFileSampleSource.time",
	"Comment": "get a readable time as hours, minutes and seconds from the specified timein milliseconds",
	"Method": "String time(long t){\r\n    return TimeHelper.time(t);\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.gui.HtmlExtractorGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement extractor){\r\n    super.configureTestElement(extractor);\r\n    if (extractor instanceof HtmlExtractor) {\r\n        HtmlExtractor htmlExtractor = (HtmlExtractor) extractor;\r\n        saveScopeSettings(htmlExtractor);\r\n        htmlExtractor.setRefName(refNameField.getText());\r\n        htmlExtractor.setExpression(expressionField.getText());\r\n        htmlExtractor.setAttribute(attributeField.getText());\r\n        htmlExtractor.setDefaultValue(defaultField.getText());\r\n        htmlExtractor.setDefaultEmptyValue(emptyDefaultValue.isSelected());\r\n        htmlExtractor.setMatchNumber(matchNumberField.getText());\r\n        if (extractorImplName.getSelectedIndex() < HtmlExtractor.getImplementations().length) {\r\n            htmlExtractor.setExtractor(HtmlExtractor.getImplementations()[extractorImplName.getSelectedIndex()]);\r\n        } else {\r\n            htmlExtractor.setExtractor(USE_DEFAULT_EXTRACTOR_IMPL);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.util.Converter.getLong",
	"Comment": "converts object to a long, defaults to 0 if object is notconvertible or is null",
	"Method": "long getLong(Object o,long defaultValue,long getLong,Object o){\r\n    return getLong(o, 0);\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Objects.nullSafeEquals",
	"Comment": "determine if the given objects are equal, returning trueif both are null or false if only one isnull.compares arrays with arrays.equals, performing an equalitycheck based on the array elements rather than the array reference.",
	"Method": "boolean nullSafeEquals(Object o1,Object o2){\r\n    if (o1 == o2) {\r\n        return true;\r\n    }\r\n    if (o1 == null || o2 == null) {\r\n        return false;\r\n    }\r\n    if (o1.equals(o2)) {\r\n        return true;\r\n    }\r\n    if (o1.getClass().isArray() && o2.getClass().isArray()) {\r\n        if (o1 instanceof Object[] && o2 instanceof Object[]) {\r\n            return Arrays.equals((Object[]) o1, (Object[]) o2);\r\n        }\r\n        if (o1 instanceof boolean[] && o2 instanceof boolean[]) {\r\n            return Arrays.equals((boolean[]) o1, (boolean[]) o2);\r\n        }\r\n        if (o1 instanceof byte[] && o2 instanceof byte[]) {\r\n            return Arrays.equals((byte[]) o1, (byte[]) o2);\r\n        }\r\n        if (o1 instanceof char[] && o2 instanceof char[]) {\r\n            return Arrays.equals((char[]) o1, (char[]) o2);\r\n        }\r\n        if (o1 instanceof double[] && o2 instanceof double[]) {\r\n            return Arrays.equals((double[]) o1, (double[]) o2);\r\n        }\r\n        if (o1 instanceof float[] && o2 instanceof float[]) {\r\n            return Arrays.equals((float[]) o1, (float[]) o2);\r\n        }\r\n        if (o1 instanceof int[] && o2 instanceof int[]) {\r\n            return Arrays.equals((int[]) o1, (int[]) o2);\r\n        }\r\n        if (o1 instanceof long[] && o2 instanceof long[]) {\r\n            return Arrays.equals((long[]) o1, (long[]) o2);\r\n        }\r\n        if (o1 instanceof short[] && o2 instanceof short[]) {\r\n            return Arrays.equals((short[]) o1, (short[]) o2);\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.bytedeco.javacv.OpenCVFrameRecorder.fourCCCodec",
	"Comment": "videocodec in javacv jargon is the same as fourcc code in opencv speak",
	"Method": "int fourCCCodec(){\r\n    return videoCodec;\r\n}"
}, {
	"Path": "org.apache.jmeter.engine.util.CompoundVariable.getRawParameters",
	"Comment": "allows the retrieval of the original string prior to it being compiled.",
	"Method": "String getRawParameters(){\r\n    return rawParameters;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.jms.sampler.PublisherSampler.sample",
	"Comment": "the implementation will publish n messages within a for loop. once nmessages are published, it sets the attributes of sampleresult.",
	"Method": "SampleResult sample(){\r\n    String configChoice = getConfigChoice();\r\n    if (fileCache == null) {\r\n        fileCache = buildCache(configChoice);\r\n    }\r\n    SampleResult result = new SampleResult();\r\n    result.setSampleLabel(getName());\r\n    result.setSuccessful(false);\r\n    result.setResponseCode(\"000\");\r\n    if (publisher == null) {\r\n        try {\r\n            initClient();\r\n        } catch (JMSException | NamingException e) {\r\n            result.sampleStart();\r\n            result.sampleEnd();\r\n            handleError(result, e, false);\r\n            return result;\r\n        }\r\n    }\r\n    StringBuilder buffer = new StringBuilder();\r\n    StringBuilder propBuffer = new StringBuilder();\r\n    int loop = getIterationCount();\r\n    result.sampleStart();\r\n    String type = getMessageChoice();\r\n    try {\r\n        Map<String, Object> msgProperties = getJMSProperties().getJmsPropertysAsMap();\r\n        int deliveryMode = getUseNonPersistentDelivery() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;\r\n        int priority = Integer.parseInt(getPriority());\r\n        long expiration = Long.parseLong(getExpiration());\r\n        for (int idx = 0; idx < loop; idx++) {\r\n            Message msg;\r\n            if (JMSPublisherGui.TEXT_MSG_RSC.equals(type)) {\r\n                String tmsg = getRenderedContent(String.class, TEXT_FILE_EXTS);\r\n                msg = publisher.publish(tmsg, getDestination(), msgProperties, deliveryMode, priority, expiration);\r\n                buffer.append(tmsg);\r\n            } else if (JMSPublisherGui.MAP_MSG_RSC.equals(type)) {\r\n                @SuppressWarnings(\"unchecked\")\r\n                Map<String, Object> map = getRenderedContent(Map.class, TEXT_FILE_EXTS);\r\n                msg = publisher.publish(map, getDestination(), msgProperties, deliveryMode, priority, expiration);\r\n            } else if (JMSPublisherGui.OBJECT_MSG_RSC.equals(type)) {\r\n                Serializable omsg = getRenderedContent(Serializable.class, TEXT_FILE_EXTS);\r\n                msg = publisher.publish(omsg, getDestination(), msgProperties, deliveryMode, priority, expiration);\r\n            } else if (JMSPublisherGui.BYTES_MSG_RSC.equals(type)) {\r\n                byte[] bmsg = getRenderedContent(byte[].class, BIN_FILE_EXTS);\r\n                msg = publisher.publish(bmsg, getDestination(), msgProperties, deliveryMode, priority, expiration);\r\n            } else {\r\n                throw new JMSException(type + \" is not recognised\");\r\n            }\r\n            Utils.messageProperties(propBuffer, msg);\r\n        }\r\n        result.setResponseCodeOK();\r\n        result.setResponseMessage(loop + \" messages published\");\r\n        result.setSuccessful(true);\r\n        result.setSamplerData(buffer.toString());\r\n        result.setSampleCount(loop);\r\n        result.setRequestHeaders(propBuffer.toString());\r\n    } catch (JMSException e) {\r\n        handleError(result, e, true);\r\n    } catch (Exception e) {\r\n        handleError(result, e, false);\r\n    } finally {\r\n        result.sampleEnd();\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.gui.XMLAssertionGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement el){\r\n    configureTestElement(el);\r\n}"
}, {
	"Path": "org.apache.commons.cli.avalon.CLArgsParser.checkIncompatibilities",
	"Comment": "check for duplicates of an option. it is an error to have duplicatesunless appropriate flags is set in descriptor.",
	"Method": "void checkIncompatibilities(Vector<CLOption> arguments){\r\n    final int size = arguments.size();\r\n    for (int i = 0; i < size; i++) {\r\n        final CLOption option = arguments.elementAt(i);\r\n        final int id = option.getDescriptor().getId();\r\n        final CLOptionDescriptor descriptor = getDescriptorFor(id);\r\n        if (null == descriptor) {\r\n            continue;\r\n        }\r\n        final int[] incompatible = descriptor.getIncompatible();\r\n        checkIncompatible(arguments, incompatible, i);\r\n    }\r\n}"
}, {
	"Path": "org.apache.log.Priority.toString",
	"Comment": "overridden string to display priority in human readable form.",
	"Method": "String toString(){\r\n    return \"Priority[\" + getName() + \"/\" + getValue() + \"]\";\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.TestPlan.addThreadGroup",
	"Comment": "adds a feature to the abstractthreadgroup attribute of the testplan object.",
	"Method": "void addThreadGroup(AbstractThreadGroup group){\r\n    threadGroups.add(group);\r\n}"
}, {
	"Path": "org.apache.jorphan.gui.MenuScroller.setScrollerFor",
	"Comment": "registers a popup menu to be scrolled, with the specified number of itemsto display in the scrolling region, the specified scrolling interval, andthe specified numbers of items fixed at the top and bottom of the popupmenu.",
	"Method": "MenuScroller setScrollerFor(JMenu menu,MenuScroller setScrollerFor,JPopupMenu menu,MenuScroller setScrollerFor,JMenu menu,int scrollCount,MenuScroller setScrollerFor,JPopupMenu menu,int scrollCount,MenuScroller setScrollerFor,JMenu menu,int scrollCount,int interval,MenuScroller setScrollerFor,JPopupMenu menu,int scrollCount,int interval,MenuScroller setScrollerFor,JMenu menu,int scrollCount,int interval,int topFixedCount,int bottomFixedCount,MenuScroller setScrollerFor,JPopupMenu menu,int scrollCount,int interval,int topFixedCount,int bottomFixedCount){\r\n    return new MenuScroller(menu, scrollCount, interval, topFixedCount, bottomFixedCount);\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.list",
	"Comment": "recurses down into the hashtree stucture using each subsequent key in thelist of keys, and returns the set of keys of the hashtree object at theend of the recursion. if the hashtree represented a file system, thiswould be like getting a list of all the files in a directory specified bythe treepath, relative from the current directory.",
	"Method": "Collection<Object> list(Collection<?> list,Object key,Collection<?> list,Object[] treePath,Collection<?> list,Collection<?> treePath){\r\n    HashTree tree = getTreePath(treePath);\r\n    if (tree != null) {\r\n        return tree.list();\r\n    }\r\n    return new HashSet();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JavaSamplerContext.getParameterNamesIterator",
	"Comment": "get an iterator of the parameter names. each entry in the iterator is astring.",
	"Method": "Iterator<String> getParameterNamesIterator(){\r\n    return params.keySet().iterator();\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.AbstractSampleProcessor.getChannelContext",
	"Comment": "get the channelcontext associated to the specified channel. if thespecified channel does not have a context associated to it then one willbe created and associated.",
	"Method": "ChannelContext getChannelContext(int channel){\r\n    while (channelContexts.size() <= channel) {\r\n        channelContexts.add(new ChannelContext());\r\n    }\r\n    return channelContexts.get(channel);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.IfControllerPanel.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    if (displayName) {\r\n        setLayout(new BorderLayout(0, 5));\r\n        setBorder(makeBorder());\r\n        add(makeTitlePanel(), BorderLayout.NORTH);\r\n        JPanel mainPanel = new JPanel(new BorderLayout());\r\n        mainPanel.add(createConditionPanel(), BorderLayout.NORTH);\r\n        add(mainPanel, BorderLayout.CENTER);\r\n    } else {\r\n        setLayout(new BorderLayout());\r\n        add(createConditionPanel(), BorderLayout.NORTH);\r\n    }\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXTreeTableView.unGroup",
	"Comment": "this is a blocking method so it should not be called from the ui thread,it will ungroup the tree table view",
	"Method": "void unGroup(TreeTableColumn<S, ?> treeTableColumns){\r\n    try {\r\n        lock.lock();\r\n        if (groupOrder.size() > 0) {\r\n            groupOrder.removeAll(treeTableColumns);\r\n            List<TreeTableColumn<S, ?>> grouped = new ArrayList();\r\n            grouped.addAll(groupOrder);\r\n            groupOrder.clear();\r\n            JFXUtilities.runInFXAndWait(() -> {\r\n                ArrayList<TreeTableColumn<S, ?>> sortOrder = new ArrayList();\r\n                sortOrder.addAll(getSortOrder());\r\n                List children = Arrays.asList(originalRoot.getChildren().toArray());\r\n                originalRoot.getChildren().clear();\r\n                originalRoot.getChildren().setAll(children);\r\n                internalSetRoot = true;\r\n                setRoot(originalRoot);\r\n                internalSetRoot = false;\r\n                getSelectionModel().select(0);\r\n                getSortOrder().addAll(sortOrder);\r\n                if (grouped.size() != 0) {\r\n                    refreshGroups(grouped);\r\n                }\r\n            });\r\n        }\r\n    } finally {\r\n        lock.unlock();\r\n    }\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect.getSpatialAggregateSQL",
	"Comment": "returns the sql fragment for the specfied spatial aggregate expression.",
	"Method": "String getSpatialAggregateSQL(String columnName,int aggregation){\r\n    return support.getSpatialAggregateSQL(columnName, aggregation);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.Loader.getLoadedLibraries",
	"Comment": "returns a map that relates each library name to the path of the loaded file.",
	"Method": "Map<String, String> getLoadedLibraries(){\r\n    return new HashMap<String, String>(loadedLibraries);\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect.getHavingSridSQL",
	"Comment": "returns the sql fragment when parsing a havingsridexpression.",
	"Method": "String getHavingSridSQL(String columnName){\r\n    return support.getHavingSridSQL(columnName);\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.RegexExtractor.getDefaultValue",
	"Comment": "get the default value for the variable, which should be used, if nomatches are found",
	"Method": "String getDefaultValue(){\r\n    return getPropertyAsString(DEFAULT);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.LineGraph.createShapes",
	"Comment": "since we only have 4 shapes, the method will start with the first shapeand keep cycling through the shapes in order.",
	"Method": "Shape[] createShapes(int count){\r\n    Shape[] shapes = new Shape[count];\r\n    for (int idx = 0; idx < count; idx++) {\r\n        shapes[idx] = nextShape();\r\n    }\r\n    return shapes;\r\n}"
}, {
	"Path": "org.apache.jmeter.control.IncludeController.setIncludePath",
	"Comment": "in the event an user wants to include an external jmx test planthe gui would call this.",
	"Method": "void setIncludePath(String jmxfile){\r\n    this.setProperty(INCLUDE_PATH, jmxfile);\r\n}"
}, {
	"Path": "com.jfoenix.controls.JFXAlert.hideWithAnimation",
	"Comment": "play the hide animation for the dialog, as the java hide method is set to finalso it can not be overridden",
	"Method": "void hideWithAnimation(){\r\n    if (transition == null || transition.getStatus().equals(Animation.Status.STOPPED)) {\r\n        JFXAlertAnimation currentAnimation = getCurrentAnimation();\r\n        Animation animation = currentAnimation.createHidingAnimation(getDialogPane().getContent(), getDialogPane());\r\n        if (animation != null) {\r\n            transition = animation;\r\n            animation.setOnFinished(finish -> {\r\n                animateClosing = false;\r\n                hide();\r\n                transition = null;\r\n            });\r\n            animation.play();\r\n        } else {\r\n            animateClosing = false;\r\n            transition = null;\r\n            Platform.runLater(this::hide);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setDepthControlScoreMaximumThreshold",
	"Comment": "the maximum correlation score that is considered acceptable",
	"Method": "void setDepthControlScoreMaximumThreshold(int value){\r\n    setOption(RealSense.RS_OPTION_R200_DEPTH_CONTROL_SCORE_MAXIMUM_THRESHOLD, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.getQueryString",
	"Comment": "gets the querystring attribute of the urlconfig object, using thespecified encoding to encode the parameter values put into the url",
	"Method": "String getQueryString(String getQueryString,String contentEncoding){\r\n    CollectionProperty arguments = getArguments().getArguments();\r\n    if (arguments.size() == 0) {\r\n        return \"\";\r\n    }\r\n    String lContentEncoding = contentEncoding;\r\n    if (JOrphanUtils.isBlank(lContentEncoding)) {\r\n        lContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;\r\n    }\r\n    StringBuilder buf = new StringBuilder(arguments.size() * 15);\r\n    PropertyIterator iter = arguments.iterator();\r\n    boolean first = true;\r\n    while (iter.hasNext()) {\r\n        HTTPArgument item = null;\r\n        Object objectValue = iter.next().getObjectValue();\r\n        try {\r\n            item = (HTTPArgument) objectValue;\r\n        } catch (ClassCastException e) {\r\n            log.warn(\"Unexpected argument type: {} cannot be cast to HTTPArgument\", objectValue.getClass().getName());\r\n            item = new HTTPArgument((Argument) objectValue);\r\n        }\r\n        final String encodedName = item.getEncodedName();\r\n        if (encodedName.length() == 0) {\r\n            continue;\r\n        }\r\n        if (!first) {\r\n            buf.append(QRY_SEP);\r\n        } else {\r\n            first = false;\r\n        }\r\n        buf.append(encodedName);\r\n        if (item.getMetaData() == null) {\r\n            buf.append(ARG_VAL_SEP);\r\n        } else {\r\n            buf.append(item.getMetaData());\r\n        }\r\n        try {\r\n            buf.append(item.getEncodedValue(lContentEncoding));\r\n        } catch (UnsupportedEncodingException e) {\r\n            log.warn(\"Unable to encode parameter in encoding {}, parameter value not included in query string\", lContentEncoding);\r\n        }\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.sampler.JUnitSampler.getAppendError",
	"Comment": "if append error is not set, by default it is set to false,which means users have to explicitly set the sampler toappend the assert errors. because of how junit works, thereshould only be one error",
	"Method": "boolean getAppendError(){\r\n    return getPropertyAsBoolean(APPEND_ERROR, false);\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.LoginConfigGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    username.setText(element.getPropertyAsString(ConfigTestElement.USERNAME));\r\n    password.setText(element.getPropertyAsString(ConfigTestElement.PASSWORD));\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.SampleResult.setSampleCount",
	"Comment": "the statistical sample sender aggregates several samples to save ontransmission costs.",
	"Method": "void setSampleCount(int count){\r\n    sampleCount = count;\r\n}"
}, {
	"Path": "io.jsonwebtoken.lang.Strings.concatenateStringArrays",
	"Comment": "concatenate the given string arrays into one,with overlapping array elements included twice.the order of elements in the original arrays is preserved.",
	"Method": "String[] concatenateStringArrays(String[] array1,String[] array2){\r\n    if (Objects.isEmpty(array1)) {\r\n        return array2;\r\n    }\r\n    if (Objects.isEmpty(array2)) {\r\n        return array1;\r\n    }\r\n    String[] newArr = new String[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, newArr, 0, array1.length);\r\n    System.arraycopy(array2, 0, newArr, array1.length, array2.length);\r\n    return newArr;\r\n}"
}, {
	"Path": "org.apache.jmeter.assertions.AssertionResult.setError",
	"Comment": "set the flag indicating whether or not an error occurred while evaluating assertion failure clause.",
	"Method": "void setError(boolean e){\r\n    error = e;\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.Top5ErrorsSummaryData.registerError",
	"Comment": "stores the provided error message and counts the number of times it isregistered.",
	"Method": "void registerError(String errorMessage){\r\n    Long value = countPerError.get(errorMessage);\r\n    if (value == null) {\r\n        countPerError.put(errorMessage, ONE);\r\n    } else {\r\n        countPerError.put(errorMessage, Long.valueOf(value.longValue() + 1));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.util.accesslog.OrderPreservingLogParser.parseAndConfigure",
	"Comment": "parse a set number of lines from the access log. keep in mind the numberof lines parsed will depend the filter and number of lines in the log.the method returns the actual lines parsed.",
	"Method": "int parseAndConfigure(int count,TestElement el){\r\n    return this.parse(el, count);\r\n}"
}, {
	"Path": "org.apache.jmeter.modifiers.gui.SampleTimeoutGui.configure",
	"Comment": "configure this gui component from the underlying testelement.",
	"Method": "void configure(TestElement el){\r\n    super.configure(el);\r\n    timeoutField.setText(((SampleTimeout) el).getTimeout());\r\n}"
}, {
	"Path": "org.apache.jmeter.report.config.ReportGeneratorConfiguration.getProperty",
	"Comment": "gets the property matching the specified key in the properties and castsit. returns a default value is the key is not found.",
	"Method": "TProperty getProperty(Props props,String key,TProperty defaultValue,Class<TProperty> clazz){\r\n    String value = props.getValue(key);\r\n    if (value == null) {\r\n        log.info(\"Property '{}' not found, using default value '{}' instead.\", key, defaultValue);\r\n        return defaultValue;\r\n    }\r\n    return ConfigurationUtils.convert(value, clazz);\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.Data.setCurrentPos",
	"Comment": "sets the current pos. if value sent to method is not a valid number, thecurrent position is set to one higher than the maximum.",
	"Method": "void setCurrentPos(int r){\r\n    currentPos = r;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.oracle.OracleSDOSupport.getIsEmptySQL",
	"Comment": "returns the sql fragment when parsing a isemptyexpression or\tisnotempty expression.",
	"Method": "String getIsEmptySQL(String columnName,boolean isEmpty){\r\n    return String.format(\"( MDSYS.ST_GEOMETRY(%s).ST_ISEMPTY() = %d )\", columnName, isEmpty ? 1 : 0);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.sampler.LDAPSampler.setUserDefinedTest",
	"Comment": "sets the userdefinedtest attribute of the ldapsampler object.",
	"Method": "void setUserDefinedTest(boolean value){\r\n    setProperty(new BooleanProperty(USER_DEFINED, value));\r\n}"
}, {
	"Path": "org.bytedeco.javacv.RealSenseFrameGrabber.setAccuracy",
	"Comment": "set the number of patterns projected per frame. the higher the accuracyvalue the more patterns projected. increasing the number of patterns helpto achieve better accuracy. note that this control is affecting the depthfps",
	"Method": "void setAccuracy(int value){\r\n    setOption(RealSense.RS_OPTION_F200_ACCURACY, value);\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.control.gui.LdapTestSamplerGui.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    loginPanel.configure(element);\r\n    ldapDefaultPanel.configure(element);\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.ForeachControlPanel.configure",
	"Comment": "a newly created component can be initialized with the contents of a testelement object by calling this method. the component is responsible forquerying the test element object for the relevant information to displayin its gui.",
	"Method": "void configure(TestElement element){\r\n    super.configure(element);\r\n    inputVal.setText(((ForeachController) element).getInputValString());\r\n    startIndex.setText(((ForeachController) element).getStartIndexAsString());\r\n    endIndex.setText(((ForeachController) element).getEndIndexAsString());\r\n    returnVal.setText(((ForeachController) element).getReturnValString());\r\n    useSeparator.setSelected(((ForeachController) element).getUseSeparator());\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.BackendListenerGui.createParameterPanel",
	"Comment": "create a panel containing components allowing the user to providearguments to be passed to the test class instance.",
	"Method": "JPanel createParameterPanel(){\r\n    argsPanel = new ArgumentsPanel(JMeterUtils.getResString(\"backend_listener_paramtable\"));\r\n    return argsPanel;\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getPara",
	"Comment": "returns the value of a request parameter as a string, or default value if the parameter does not exist.",
	"Method": "String getPara(String name,String getPara,String name,String defaultValue,String getPara,String getPara,int index,String getPara,int index,String defaultValue){\r\n    String result = getPara(index);\r\n    return result != null && !\"\".equals(result) ? result : defaultValue;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.setCookieManagerProperty",
	"Comment": "private method to allow asyncsample to reset the value without performing checks",
	"Method": "void setCookieManagerProperty(CookieManager value){\r\n    setProperty(new TestElementProperty(COOKIE_MANAGER, value));\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JLabeledRadioI18N.init",
	"Comment": "method is responsible for creating the jradiobuttons and adding them tothe buttongroup.the resource name is used as the action command for the button model,and the resource value is used to set the button label.",
	"Method": "void init(String[] resouces,String selected){\r\n    this.add(mLabel);\r\n    initButtonGroup(resouces, selected);\r\n}"
}, {
	"Path": "org.apache.jmeter.samplers.RemoteSampleListenerImpl.processBatch",
	"Comment": "this method is called remotely and fires a list of samples eventsreceived locally. the function is to reduce network load when usingremote testing.",
	"Method": "void processBatch(List<SampleEvent> samples){\r\n    if (samples != null && sampleListener != null) {\r\n        for (SampleEvent e : samples) {\r\n            sampleListener.sampleOccurred(e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.functions.XPathFileContainer.nextRow",
	"Comment": "returns the next row to the caller, and updates it, allowing for wrapround",
	"Method": "int nextRow(){\r\n    int row = nextRow;\r\n    nextRow++;\r\n    if (nextRow >= size()) {\r\n        nextRow = 0;\r\n    }\r\n    log.debug(\"Row: {}\", row);\r\n    return row;\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.getArray",
	"Comment": "recurses down into the hashtree structure using each subsequent key in thetreepath argument, and returns an array of keys of the hashtree object atthe end of the recursion. if the hashtree represented a file system, thiswould be like getting a list of all the files in a directory specified bythe treepath, relative from the current directory.",
	"Method": "Object[] getArray(Object[] getArray,Object key,Object[] getArray,Object[] treePath,Object[] getArray,Collection<?> treePath){\r\n    HashTree tree = getTreePath(treePath);\r\n    return (tree != null) ? tree.getArray() : null;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.tree.JMeterTreeModel.addSubTree",
	"Comment": "adds the sub tree at the given node. returns a boolean indicating whetherthe added sub tree was a full test plan.",
	"Method": "HashTree addSubTree(HashTree subTree,JMeterTreeNode current){\r\n    for (Object o : subTree.list()) {\r\n        TestElement item = (TestElement) o;\r\n        if (item instanceof TestPlan) {\r\n            TestPlan tp = (TestPlan) item;\r\n            current = (JMeterTreeNode) ((JMeterTreeNode) getRoot()).getChildAt(0);\r\n            final TestPlan userObject = (TestPlan) current.getUserObject();\r\n            userObject.addTestElement(item);\r\n            userObject.setName(item.getName());\r\n            userObject.setFunctionalMode(tp.isFunctionalMode());\r\n            userObject.setSerialized(tp.isSerialized());\r\n            addSubTree(subTree.getTree(item), current);\r\n        } else if (item instanceof WorkBench) {\r\n            HashTree workbenchTree = subTree.getTree(item);\r\n            if (!workbenchTree.isEmpty()) {\r\n                moveWorkBenchToTestPlan(current, workbenchTree);\r\n            }\r\n        } else {\r\n            addSubTree(subTree.getTree(item), addComponent(item, current));\r\n        }\r\n    }\r\n    return getCurrentSubTree(current);\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.data_structures.RedBlackTree.replaceWithChild",
	"Comment": "replace entire contents of nodetoreplace with nodetoreplacewith.",
	"Method": "void replaceWithChild(RedBlackNode<T> nodeToReplace,RedBlackNode<T> nodeToReplaceWith){\r\n    nodeToReplace.id = nodeToReplaceWith.id;\r\n    nodeToReplace.color = nodeToReplaceWith.color;\r\n    nodeToReplace.lesser = nodeToReplaceWith.lesser;\r\n    if (nodeToReplace.lesser != null)\r\n        nodeToReplace.lesser.parent = nodeToReplace;\r\n    nodeToReplace.greater = nodeToReplaceWith.greater;\r\n    if (nodeToReplace.greater != null)\r\n        nodeToReplace.greater.parent = nodeToReplace;\r\n}"
}, {
	"Path": "org.apache.jmeter.extractor.gui.RegexExtractorGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement extractor){\r\n    super.configureTestElement(extractor);\r\n    if (extractor instanceof RegexExtractor) {\r\n        RegexExtractor regex = (RegexExtractor) extractor;\r\n        saveScopeSettings(regex);\r\n        regex.setUseField(group.getSelection().getActionCommand());\r\n        regex.setRefName(refNameField.getText());\r\n        regex.setRegex(regexField.getText());\r\n        regex.setTemplate(templateField.getText());\r\n        regex.setDefaultValue(defaultField.getText());\r\n        regex.setDefaultEmptyValue(emptyDefaultValue.isSelected());\r\n        regex.setMatchNumber(matchNumberField.getText());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.util.JLabeledRadioI18N.getComponentList",
	"Comment": "method will return all the label and jradiobuttons. buttongroup isexcluded from the list.",
	"Method": "List<JComponent> getComponentList(){\r\n    List<JComponent> comps = new LinkedList();\r\n    comps.add(mLabel);\r\n    Enumeration<AbstractButton> en = this.bGroup.getElements();\r\n    while (en.hasMoreElements()) {\r\n        comps.add(en.nextElement());\r\n    }\r\n    return comps;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.gui.CookiePanel.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement cm){\r\n    GuiUtils.stopTableEditing(cookieTable);\r\n    cm.clear();\r\n    configureTestElement(cm);\r\n    if (cm instanceof CookieManager) {\r\n        CookieManager cookieManager = (CookieManager) cm;\r\n        for (int i = 0; i < tableModel.getRowCount(); i++) {\r\n            Cookie cookie = createCookie(tableModel.getRowData(i));\r\n            cookieManager.add(cookie);\r\n        }\r\n        cookieManager.setClearEachIteration(clearEachIteration.isSelected());\r\n        cookieManager.setCookiePolicy(policy.getText());\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.TestHC4CookieManager.testSecureCookieWithHttps",
	"Comment": "test secure cookie is parsed correctly and transmitted for https",
	"Method": "void testSecureCookieWithHttps(){\r\n    URL url = new URL(\"https://a.b.c/\");\r\n    man.addCookieFromHeader(\"mySASession=s:cafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK/2Bs34MW5kGHmErKzG6r3XI; Path=/;\" + \" Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly; secure\", url);\r\n    assertEquals(1, man.getCookieCount());\r\n    String s = man.getCookieHeaderForURL(url);\r\n    assertNotNull(s);\r\n    assertEquals(\"mySASession=s:cafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK/2Bs34MW5kGHmErKzG6r3XI\", s);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.tools.Builder.compile",
	"Comment": "launches and waits for the native compiler to produce a native shared library.",
	"Method": "int compile(String[] sourceFilenames,String outputFilename,ClassProperties properties,File workingDirectory,Builder compile,boolean compile){\r\n    this.compile = compile;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.LoadRecentProject.getMenuItemDisplayName",
	"Comment": "get the name to display in the menu item, it will chop the file nameif it is too long to display in the menu bar",
	"Method": "String getMenuItemDisplayName(File file){\r\n    final int maxLength = 40;\r\n    String menuText = file.getName();\r\n    if (menuText.length() > maxLength) {\r\n        menuText = \"...\" + menuText.substring(menuText.length() - maxLength, menuText.length());\r\n    }\r\n    return menuText;\r\n}"
}, {
	"Path": "org.apache.jmeter.testelement.property.CollectionProperty.getPropertyType",
	"Comment": "figures out what kind of properties this collection is holding andreturns the class type.",
	"Method": "Class<? extends JMeterProperty> getPropertyType(){\r\n    if (value != null && !value.isEmpty()) {\r\n        return value.iterator().next().getClass();\r\n    }\r\n    return NullProperty.class;\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.gui.WrapperEditor.isValidValue",
	"Comment": "determine whether a string is a valid value for the property.",
	"Method": "boolean isValidValue(String text){\r\n    if (text == null) {\r\n        return acceptsNull;\r\n    }\r\n    if (acceptsExpressions && isExpression(text)) {\r\n        return true;\r\n    }\r\n    if (isATag(text)) {\r\n        return true;\r\n    }\r\n    if (!acceptsOther) {\r\n        return false;\r\n    }\r\n    try {\r\n        typeEditor.setAsText(text);\r\n    } catch (IllegalArgumentException e1) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.jfinal.plugin.activerecord.Model.put",
	"Comment": "put key value pair to the model without check attribute name.",
	"Method": "M put(String key,Object value,M put,Map<String, Object> map,M put,Model model,M put,Record record){\r\n    attrs.putAll(record.getColumns());\r\n    return (M) this;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel.checkDeleteStatus",
	"Comment": "enable or disable the delete button depending on whether or not there isa row to be deleted.",
	"Method": "void checkDeleteStatus(){\r\n    if (tableModel.getRowCount() == 0) {\r\n        delete.setEnabled(false);\r\n    } else {\r\n        delete.setEnabled(true);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jorphan.collections.HashTree.replaceKey",
	"Comment": "finds the given current key, and replaces it with the given new key. anytree structure found under the original key is moved to the new key.",
	"Method": "void replaceKey(Object currentKey,Object newKey){\r\n    HashTree tree = getTree(currentKey);\r\n    data.remove(currentKey);\r\n    data.put(newKey, tree);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.processor.graph.TimeStampKeysSelector.setSelectBeginTime",
	"Comment": "sets the status defining whether the projection is done with the begin orend time of the sample.",
	"Method": "void setSelectBeginTime(boolean selectBeginTime){\r\n    this.selectBeginTime = selectBeginTime;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.java.control.gui.BeanShellSamplerGui.modifyTestElement",
	"Comment": "modifies a given testelement to mirror the data in the gui components.",
	"Method": "void modifyTestElement(TestElement te){\r\n    te.clear();\r\n    super.configureTestElement(te);\r\n    te.setProperty(BeanShellSampler.SCRIPT, scriptField.getText());\r\n    te.setProperty(BeanShellSampler.FILENAME, filename.getFilename());\r\n    te.setProperty(BeanShellSampler.PARAMETERS, parameters.getText());\r\n    te.setProperty(new BooleanProperty(BeanShellSampler.RESET_INTERPRETER, resetInterpreter.isSelected()));\r\n}"
}, {
	"Path": "com.jwetherell.algorithms.graph.TurboMatching.path",
	"Comment": "searches for an augmenting path for a vertex.refreshes mates map appropriately.",
	"Method": "boolean path(Graph<T> graph,Map<Graph.Vertex<T>, Graph.Vertex<T>> mate,Set<Graph.Vertex<T>> visited,Graph.Vertex<T> vertex){\r\n    if (visited.contains(vertex))\r\n        return false;\r\n    visited.add(vertex);\r\n    for (Graph.Edge<T> edge : vertex.getEdges()) {\r\n        final Graph.Vertex<T> neighbour = edge.getFromVertex().equals(vertex) ? edge.getToVertex() : edge.getFromVertex();\r\n        if (mate.containsKey(neighbour) == false || path(graph, mate, visited, mate.get(neighbour))) {\r\n            mate.put(vertex, neighbour);\r\n            mate.put(neighbour, vertex);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.jfinal.i18n.Res.get",
	"Comment": "get the message value from resourcebundle of the related locale.",
	"Method": "String get(String key){\r\n    return resourceBundle.getString(key);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.backend.SamplerMetric.getSuccesses",
	"Comment": "get the number of successful requests for the current time slot",
	"Method": "int getSuccesses(){\r\n    return successes;\r\n}"
}, {
	"Path": "org.hibernate.spatial.dialect.db2.DB2SpatialDialect.initializeRelationNames",
	"Comment": "set up the map relating hibernate spatial relation constants to db2 function names.",
	"Method": "void initializeRelationNames(){\r\n    spatialRelationNames.put(SpatialRelation.EQUALS, \"ST_EQUALS\");\r\n    spatialRelationNames.put(SpatialRelation.DISJOINT, \"ST_DISJOINT\");\r\n    spatialRelationNames.put(SpatialRelation.TOUCHES, \"ST_TOUCHES\");\r\n    spatialRelationNames.put(SpatialRelation.CROSSES, \"ST_CROSSES\");\r\n    spatialRelationNames.put(SpatialRelation.WITHIN, \"ST_WITHIN\");\r\n    spatialRelationNames.put(SpatialRelation.OVERLAPS, \"ST_OVERLAPS\");\r\n    spatialRelationNames.put(SpatialRelation.CONTAINS, \"ST_CONTAINS\");\r\n    spatialRelationNames.put(SpatialRelation.INTERSECTS, \"ST_INTERSECTS\");\r\n}"
}, {
	"Path": "com.jfinal.core.Controller.getParaValues",
	"Comment": "returns an array of string objects containing all of the values the given request \tparameter has, or null if the parameter does not exist. if the parameter has a \tsingle value, the array has a length of 1.",
	"Method": "String[] getParaValues(String name){\r\n    return request.getParameterValues(name);\r\n}"
}, {
	"Path": "org.apache.jmeter.report.dashboard.AbstractDataExporter.findValue",
	"Comment": "finds a value matching the specified data name in a resultdata tree.supports only mapresultdata walking.",
	"Method": "T findValue(Class<T> clazz,String data,ResultData root){\r\n    T value = null;\r\n    ResultData result = findData(data, root);\r\n    if (result instanceof ValueResultData) {\r\n        ValueResultData valueResult = (ValueResultData) result;\r\n        Object object = valueResult.getValue();\r\n        if (object != null && clazz.isAssignableFrom(object.getClass())) {\r\n            value = clazz.cast(object);\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "com.jfoenix.validation.base.ValidatorBase.onEval",
	"Comment": "this method will update the source control after evaluating the validation condition",
	"Method": "void onEval(){\r\n    Node control = getSrcControl();\r\n    if (hasErrors.get()) {\r\n        control.pseudoClassStateChanged(PSEUDO_CLASS_ERROR, true);\r\n        if (control instanceof Control) {\r\n            Tooltip controlTooltip = ((Control) control).getTooltip();\r\n            if (controlTooltip != null && !controlTooltip.getStyleClass().contains(\"error-tooltip\")) {\r\n                tooltip = ((Control) control).getTooltip();\r\n            }\r\n            errorTooltip.setText(getMessage());\r\n            ((Control) control).setTooltip(errorTooltip);\r\n        }\r\n    } else {\r\n        if (control instanceof Control) {\r\n            Tooltip controlTooltip = ((Control) control).getTooltip();\r\n            if ((controlTooltip != null && controlTooltip.getStyleClass().contains(\"error-tooltip\")) || (controlTooltip == null && tooltip != null)) {\r\n                ((Control) control).setTooltip(tooltip);\r\n            }\r\n            tooltip = null;\r\n        }\r\n        control.pseudoClassStateChanged(PSEUDO_CLASS_ERROR, false);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.control.AuthManager.setupCredentials",
	"Comment": "configure credentials and auth scheme on client if an authorization is",
	"Method": "void setupCredentials(Authorization auth,URL url,HttpClientContext localContext,CredentialsProvider credentialsProvider,String localhost){\r\n    String username = auth.getUser();\r\n    String realm = auth.getRealm();\r\n    String domain = auth.getDomain();\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"{} > D={} R={} M={}\", username, domain, realm, auth.getMechanism());\r\n    }\r\n    if (Mechanism.KERBEROS.equals(auth.getMechanism())) {\r\n        localContext.setAttribute(DynamicKerberosSchemeFactory.CONTEXT_ATTRIBUTE_STRIP_PORT, Boolean.valueOf(isStripPort(url)));\r\n        credentialsProvider.setCredentials(new AuthScope(null, -1, null), USE_JAAS_CREDENTIALS);\r\n    } else {\r\n        credentialsProvider.setCredentials(new AuthScope(url.getHost(), url.getPort(), realm.isEmpty() ? null : realm), new NTCredentials(username, auth.getPass(), localhost, domain));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.testbeans.TestBeanHelper.invokeOrBailOut",
	"Comment": "utility method that invokes a method and does the error handling aroundthe invocation.",
	"Method": "Object invokeOrBailOut(Object invokee,Method method,Object[] params){\r\n    try {\r\n        return method.invoke(invokee, params);\r\n    } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\r\n        throw new Error(createMessage(invokee, method, params), e);\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.control.gui.LogicControllerGui.init",
	"Comment": "initialize the gui components and layout for this component.",
	"Method": "void init(){\r\n    setLayout(new BorderLayout());\r\n    setBorder(makeBorder());\r\n    add(makeTitlePanel(), BorderLayout.NORTH);\r\n}"
}, {
	"Path": "org.apache.jmeter.visualizers.StatGraphVisualizer.clearData",
	"Comment": "clears this visualizer and its model, and forces a repaint of the table.",
	"Method": "void clearData(){\r\n    synchronized (lock) {\r\n        model.clearData();\r\n        tableRows.clear();\r\n        newRows.clear();\r\n        tableRows.put(TOTAL_ROW_LABEL, new SamplingStatCalculator(TOTAL_ROW_LABEL));\r\n        model.addRow(tableRows.get(TOTAL_ROW_LABEL));\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.config.gui.SimpleConfigGui.stopTableEditing",
	"Comment": "stop any editing that is currently being done on the table. this willsave any changes that have already been made.",
	"Method": "void stopTableEditing(){\r\n    GuiUtils.stopTableEditing(table);\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.CharIndexer.create",
	"Comment": "creates a char indexer to access efficiently the data of a pointer.",
	"Method": "CharIndexer create(char[] array,CharIndexer create,CharBuffer buffer,CharIndexer create,CharPointer pointer,CharIndexer create,char[] array,long[] sizes,long[] strides,CharIndexer create,CharBuffer buffer,long[] sizes,long[] strides,CharIndexer create,CharPointer pointer,long[] sizes,long[] strides,CharIndexer create,CharPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    if (direct) {\r\n        return Raw.getInstance() != null ? new CharRawIndexer(pointer, sizes, strides) : new CharBufferIndexer(pointer.asBuffer(), sizes, strides);\r\n    } else {\r\n        final long position = pointer.position();\r\n        char[] array = new char[(int) Math.min(pointer.limit() - position, Integer.MAX_VALUE)];\r\n        pointer.get(array);\r\n        return new CharArrayIndexer(array, sizes, strides) {\r\n            @Override\r\n            public void release() {\r\n                pointer.position(position).put(array);\r\n                super.release();\r\n            }\r\n        };\r\n    }\r\n}"
}, {
	"Path": "org.bytedeco.javacpp.indexer.CharIndexer.create",
	"Comment": "creates a char indexer to access efficiently the data of a pointer.",
	"Method": "CharIndexer create(char[] array,CharIndexer create,CharBuffer buffer,CharIndexer create,CharPointer pointer,CharIndexer create,char[] array,long[] sizes,long[] strides,CharIndexer create,CharBuffer buffer,long[] sizes,long[] strides,CharIndexer create,CharPointer pointer,long[] sizes,long[] strides,CharIndexer create,CharPointer pointer,long[] sizes,long[] strides,boolean direct){\r\n    pointer.position(position).put(array);\r\n    super.release();\r\n}"
}, {
	"Path": "org.apache.jmeter.threads.JMeterThread.shutdownTest",
	"Comment": "clean shutdown of test, which means wait for end of current running samplers",
	"Method": "void shutdownTest(){\r\n    running = false;\r\n    log.info(\"Shutdown Test detected by thread: {}\", threadName);\r\n    if (engine != null) {\r\n        engine.askThreadsToStop();\r\n    }\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.http.proxy.ProxyControl.testPattern",
	"Comment": "returns true if matching pattern was different from expectedtomatch",
	"Method": "boolean testPattern(String expression,String sampleContentType,boolean expectedToMatch){\r\n    if (expression != null && expression.length() > 0) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Testing Expression : {} on sampleContentType: {}, expected to match: {}\", expression, sampleContentType, expectedToMatch);\r\n        }\r\n        Pattern pattern = null;\r\n        try {\r\n            pattern = JMeterUtils.getPatternCache().getPattern(expression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.SINGLELINE_MASK);\r\n            if (JMeterUtils.getMatcher().contains(sampleContentType, pattern) != expectedToMatch) {\r\n                return false;\r\n            }\r\n        } catch (MalformedCachePatternException e) {\r\n            log.warn(\"Skipped invalid content pattern: {}\", expression, e);\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.apache.jmeter.protocol.tcp.sampler.TCPClientImpl.read",
	"Comment": "reads data until the defined eol byte is reached.if there is no eol byte defined, then reads untilthe end of the stream is reached.",
	"Method": "String read(InputStream is,String read,InputStream is,SampleResult sampleResult){\r\n    ByteArrayOutputStream w = new ByteArrayOutputStream();\r\n    try {\r\n        byte[] buffer = new byte[4096];\r\n        int x;\r\n        boolean first = true;\r\n        while ((x = is.read(buffer)) > -1) {\r\n            if (first) {\r\n                sampleResult.latencyEnd();\r\n                first = false;\r\n            }\r\n            w.write(buffer, 0, x);\r\n            if (useEolByte && (buffer[x - 1] == eolByte)) {\r\n                break;\r\n            }\r\n        }\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Read: {}\\n{}\", w.size(), w.toString());\r\n        }\r\n        return w.toString(CHARSET);\r\n    } catch (IOException e) {\r\n        throw new ReadException(\"Error reading from server, bytes read: \" + w.size(), e, w.toString());\r\n    }\r\n}"
}, {
	"Path": "cn.hutool.core.date.format.FastDatePrinter.readObject",
	"Comment": "create the object after serialization. this implementation reinitializes the transient properties.",
	"Method": "void readObject(ObjectInputStream in){\r\n    in.defaultReadObject();\r\n    init();\r\n}"
}, {
	"Path": "org.apache.jmeter.gui.action.CreateFunctionDialog.getActionNames",
	"Comment": "provide the list of action names that are available in this command.",
	"Method": "Set<String> getActionNames(){\r\n    return commands;\r\n}"
}]