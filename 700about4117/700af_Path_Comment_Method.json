[{
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceSystemSettings.getTooling",
	"Comment": "gets the tooling.workspace settings related to the watson assistant tool.",
	"Method": "WorkspaceSystemSettingsTooling getTooling(){\r\n    return tooling;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ValueExport.getMetadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Map getMetadata(){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.EntityExport.getValues",
	"Comment": "gets the values.an array objects describing the entity values.",
	"Method": "List<ValueExport> getValues(){\r\n    return values;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListWorkspacesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.GetMetricsEventRateOptions.resultType",
	"Comment": "gets the resulttype.the type of result to consider when calculating the metric.",
	"Method": "Builder resultType(String resultType,String resultType){\r\n    return resultType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Credentials.getCredentialId",
	"Comment": "gets the credentialid.unique identifier for this set of credentials.",
	"Method": "String getCredentialId(){\r\n    return credentialId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogSuggestion.getValue",
	"Comment": "gets the value.an object defining the message input, intents, and entities to be sent to the watson assistant service if the userselects the corresponding disambiguation option.",
	"Method": "DialogSuggestionValue getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "com.darkprograms.speech.microphone.Microphone.close",
	"Comment": "close the microphone capture, saving all processed audio to the specified file.if already closed, this does nothing",
	"Method": "void close(){\r\n    if (getState() == CaptureState.CLOSED) {\r\n    } else {\r\n        getTargetDataLine().stop();\r\n        getTargetDataLine().close();\r\n        setState(CaptureState.CLOSED);\r\n    }\r\n}"
}, {
	"Path": "com.darkprograms.speech.synthesiser.SynthesiserV2.setPitch",
	"Comment": "sets the pitch of the audio.\tvalid values range from 0 to 2 inclusive.\tvalues above 1 correspond to higher pitch, values below 1 correspond to lower pitch.",
	"Method": "void setPitch(double pitch){\r\n    this.pitch = pitch;\r\n}"
}, {
	"Path": "io.appium.java_client.InteractsWithApps.runAppInBackground",
	"Comment": "runs the current app as a background app for the timerequested. this is a synchronous method, it returns after the back hasbeen returned to the foreground.",
	"Method": "void runAppInBackground(Duration duration){\r\n    execute(RUN_APP_IN_BACKGROUND, ImmutableMap.of(\"seconds\", duration.getSeconds()));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.EntityCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateValue.metadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Builder metadata(Map metadata,Map metadata){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.VisualRecognitionIT.testDetectFacesFromUrlUsingParameters",
	"Comment": "test detect faces from url using the deprecated parameters option.",
	"Method": "void testDetectFacesFromUrlUsingParameters(){\r\n    String parameters = \"{\\\"url\\\":\\\"\" + IMAGE_FACE_URL + \"\\\"}\";\r\n    DetectFacesOptions options = new DetectFacesOptions.Builder().parameters(parameters).build();\r\n    DetectedFaces detectedFaces = service.detectFaces(options).execute();\r\n    assertDetectedFaces(detectedFaces, options);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentEntities.limit",
	"Comment": "gets the limit.the maximum number of entities to extract for each instance of the specified field.",
	"Method": "Builder limit(long limit,Long limit){\r\n    return limit;\r\n}"
}, {
	"Path": "net.spy.memcached.compat.log.AbstractLogger.getThrowable",
	"Comment": "get the throwable from the last element of this array if it is throwable,else null.",
	"Method": "Throwable getThrowable(Object[] args){\r\n    Throwable rv = null;\r\n    if (args.length > 0) {\r\n        if (args[args.length - 1] instanceof Throwable) {\r\n            rv = (Throwable) args[args.length - 1];\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslationModel.getName",
	"Comment": "gets the name.optional name that can be specified when the model is created.",
	"Method": "String getName(){\r\n    return name;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateEntity.description",
	"Comment": "gets the description.the description of the entity. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Entity.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the entity.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.assertSameLength",
	"Comment": "throws sizeexception unless matrices have the same length.",
	"Method": "void assertSameLength(FloatMatrix a){\r\n    if (!sameLength(a)) {\r\n        throw new SizeException(\"Matrices must have same length (is: \" + length + \" and \" + a.length + \")\");\r\n    }\r\n}"
}, {
	"Path": "io.appium.java_client.android.connection.ConnectionStateBuilder.withDataDisabled",
	"Comment": "sets data connection mode to disabled state if it was enabled.this option only works on rooted devices or on emulators.",
	"Method": "ConnectionStateBuilder withDataDisabled(){\r\n    bitMask &= ~DATA_MASK;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.GetMetricsQueryOptions.resultType",
	"Comment": "gets the resulttype.the type of result to consider when calculating the metric.",
	"Method": "Builder resultType(String resultType,String resultType){\r\n    return resultType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateEntity.values",
	"Comment": "gets the values.an array of objects describing the entity values.",
	"Method": "Builder values(List<CreateValue> values,List<CreateValue> values){\r\n    return values;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.EntityMentionCollection.getExamples",
	"Comment": "gets the examples.an array of objects describing the entity mentions defined for an entity.",
	"Method": "List<EntityMention> getExamples(){\r\n    return examples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.EntityMentionCollection.getExamples",
	"Comment": "gets the examples.an array of objects describing the entity mentions defined for an entity.",
	"Method": "List<EntityMention> getExamples(){\r\n    return examples;\r\n}"
}, {
	"Path": "com.darkprograms.speech.microphone.MicrophoneAnalyzer.getAudioVolume",
	"Comment": "gets the volume of the microphone inputinterval is 100ms so allow 100ms for this method to run in your code or specify smaller interval.",
	"Method": "int getAudioVolume(int getAudioVolume,int interval){\r\n    return calculateAudioVolume(this.getNumOfBytes(interval / 1000d));\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.fieldMethodToFieldName",
	"Comment": "given a method used to read a field of an entity, this returns the actual field name on the entity.",
	"Method": "String fieldMethodToFieldName(MethodSignature sig){\r\n    return fieldMethods.get(sig).getName();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.ClassificationCollection.getCollection",
	"Comment": "gets the collection.an array of classifier responses for each submitted phrase.",
	"Method": "List<CollectionItem> getCollection(){\r\n    return collection;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.TopHits.getSize",
	"Comment": "gets the size.number of top hits returned by the aggregation.",
	"Method": "Long getSize(){\r\n    return size;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListIntentsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentFeatures.semanticRoles",
	"Comment": "gets the semanticroles.an object specifiying the semantic roles enrichment and related parameters.",
	"Method": "Builder semanticRoles(NluEnrichmentSemanticRoles semanticRoles,NluEnrichmentSemanticRoles semanticRoles){\r\n    return semanticRoles;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.CreateLanguageModelOptions.description",
	"Comment": "gets the description.a description of the new custom language model. use a localized description that matches the language of the custommodel.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EntitiesResult.getRelevance",
	"Comment": "gets the relevance.relevance score from 0 to 1. higher values indicate greater relevance.",
	"Method": "Double getRelevance(){\r\n    return relevance;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogExport.getResponse",
	"Comment": "gets the response.the response sent by the workspace, including the output text, detected intents and entities, and context.",
	"Method": "MessageResponse getResponse(){\r\n    return response;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Synonym.getUpdated",
	"Comment": "gets the updated.the timestamp for the most recent update to the synonym.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "org.jblas.util.SanityChecks.checkXerbla",
	"Comment": "check whether error handling works. if it works, you should see anok, otherwise, you might see the actual error message and thenthe program exits.",
	"Method": "void checkXerbla(){\r\n    double[] x = new double[9];\r\n    System.out.println(\"Check whether we're catching XERBLA errors. If you see something like \\\"** On entry to DGEMM  parameter number  4 had an illegal value\\\", it didn't work!\");\r\n    try {\r\n        NativeBlas.dgemm('N', 'N', 3, -1, 3, 1.0, x, 0, 3, x, 0, 3, 0.0, x, 0, 3);\r\n    } catch (IllegalArgumentException e) {\r\n        check(\"checking XERBLA\", e.getMessage().contains(\"XERBLA\"));\r\n        return;\r\n    }\r\n    assert (false);\r\n}"
}, {
	"Path": "org.javers.repository.jql.QueryBuilder.limit",
	"Comment": "limits number of snapshots to be fetched from javersrepository in a single query,default is 100.always choose reasonable limits to improve performance of your queries.",
	"Method": "QueryBuilder limit(int limit){\r\n    queryParamsBuilder.limit(limit);\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ValueExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the entity value.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.ClassifierList.getClassifiers",
	"Comment": "gets the classifiers.the classifiers available to the user. returns an empty array if no classifiers are available.",
	"Method": "List<Classifier> getClassifiers(){\r\n    return classifiers;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getVariable",
	"Comment": "gets the variable.the location in the dialog context where output is stored.",
	"Method": "String getVariable(){\r\n    return variable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListDialogNodesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.description",
	"Comment": "gets the description.the description of the dialog node. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getVariable",
	"Comment": "gets the variable.the location in the dialog context where output is stored.",
	"Method": "String getVariable(){\r\n    return variable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listExamples",
	"Comment": "list user input examples.list the user input examples for an intent, optionally including contextual entity mentions.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<ExampleCollection> listExamples(ListExamplesOptions listExamplesOptions){\r\n    Validator.notNull(listExamplesOptions, \"listExamplesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { listExamplesOptions.workspaceId(), listExamplesOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listExamplesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listExamplesOptions.pageLimit()));\r\n    }\r\n    if (listExamplesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listExamplesOptions.includeCount()));\r\n    }\r\n    if (listExamplesOptions.sort() != null) {\r\n        builder.query(\"sort\", listExamplesOptions.sort());\r\n    }\r\n    if (listExamplesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listExamplesOptions.cursor());\r\n    }\r\n    if (listExamplesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listExamplesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ExampleCollection.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newNextStep",
	"Comment": "gets the newnextstep.the next step to be executed in dialog processing.",
	"Method": "Builder newNextStep(DialogNodeNextStep newNextStep,DialogNodeNextStep newNextStep){\r\n    return newNextStep;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.InputData.text",
	"Comment": "gets the text.the text of the user input. this string cannot contain carriage return, newline, or tab characters, and it must beno longer than 2048 characters.",
	"Method": "Builder text(String text,String text){\r\n    return text;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateEnvironmentOptions.size",
	"Comment": "gets the size.size that the environment should be increased to. environment size cannot be modified when using a lite plan.environment size can only increased and not decreased.",
	"Method": "Builder size(String size,String size){\r\n    return size;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ValueExport.getSynonyms",
	"Comment": "gets the synonyms.an array containing any synonyms for the entity value.",
	"Method": "List<String> getSynonyms(){\r\n    return synonyms;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ExampleCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "org.jblas.ComplexDoubleMatrix.load",
	"Comment": "loads a matrix from a file into this matrix. note that the old data\tof this matrix will be discarded.",
	"Method": "void load(String filename){\r\n    FileInputStream fis = new FileInputStream(filename);\r\n    DataInputStream dis = new DataInputStream(fis);\r\n    try {\r\n        this.in(dis);\r\n    } finally {\r\n        dis.close();\r\n        fis.close();\r\n    }\r\n}"
}, {
	"Path": "io.appium.java_client.service.local.AppiumDriverLocalService.stop",
	"Comment": "stops this service is it is currently running. this method will attempt to block until theserver has been fully shutdown.",
	"Method": "void stop(){\r\n    lock.lock();\r\n    try {\r\n        if (process != null) {\r\n            destroyProcess();\r\n        }\r\n        process = null;\r\n    } finally {\r\n        lock.unlock();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslationModel.getName",
	"Comment": "gets the name.optional name that can be specified when the model is created.",
	"Method": "String getName(){\r\n    return name;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.getFullEnumConstantName",
	"Comment": "if classname.name refers to an enum constant, then the method will return the full name of that enum constant so that it can beembedded in a jpql query. otherwise, returns null.",
	"Method": "String getFullEnumConstantName(String className,String name){\r\n    List<Enum<?>> enumConstants = enums.get(className);\r\n    if (enumConstants == null)\r\n        return null;\r\n    for (Enum<?> e : enumConstants) {\r\n        if (e.name().equals(name))\r\n            return className.replace(\"/\", \".\") + \".\" + name;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.previousSibling",
	"Comment": "gets the previoussibling.the id of the previous dialog node.",
	"Method": "Builder previousSibling(String previousSibling,String previousSibling){\r\n    return previousSibling;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newUserLabel",
	"Comment": "gets the newuserlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "Builder newUserLabel(String newUserLabel,String newUserLabel){\r\n    return newUserLabel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.TestConfigurationInEnvironmentOptions.file",
	"Comment": "gets the file.the content of the document to ingest. the maximum supported file size is 50 megabytes. files larger than 50megabytes is rejected.",
	"Method": "Builder file(InputStream file,Builder file,File file,InputStream file){\r\n    return file;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ExampleCollection.getExamples",
	"Comment": "gets the examples.an array of objects describing the examples defined for the intent.",
	"Method": "List<Example> getExamples(){\r\n    return examples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Term.getField",
	"Comment": "gets the field.the field where the aggregation is located in the document.",
	"Method": "String getField(){\r\n    return field;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.NaturalLanguageClassifier.listClassifiers",
	"Comment": "list classifiers.returns an empty array if no classifiers are available.",
	"Method": "ServiceCall<ClassifierList> listClassifiers(ListClassifiersOptions listClassifiersOptions,ServiceCall<ClassifierList> listClassifiers){\r\n    return listClassifiers(null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CreateConfigurationOptions.normalizations",
	"Comment": "gets the normalizations.defines operations that can be used to transform the final output json into a normalized form. operations areexecuted in the order that they appear in the array.",
	"Method": "Builder normalizations(List<NormalizationOperation> normalizations,List<NormalizationOperation> normalizations){\r\n    return normalizations;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteSynonym",
	"Comment": "delete entity value synonym.delete a synonym from an entity value.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteSynonym(DeleteSynonymOptions deleteSynonymOptions){\r\n    Validator.notNull(deleteSynonymOptions, \"deleteSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { deleteSynonymOptions.workspaceId(), deleteSynonymOptions.entity(), deleteSynonymOptions.value(), deleteSynonymOptions.synonym() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "io.appium.java_client.MobileBy.image",
	"Comment": "this locator strategy is available only if opencv libraries andnodejs bindings are installed on the server machine.",
	"Method": "By image(String b64Template){\r\n    return new ByImage(b64Template);\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.isSingularAttributeFieldMethod",
	"Comment": "returns true if a method is used to get a singular attribute field from an entity",
	"Method": "boolean isSingularAttributeFieldMethod(MethodSignature sig){\r\n    return fieldMethods.containsKey(sig);\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.CommonUtils.assertTrue",
	"Comment": "assert that the statement is true, otherwise throw an exception with theprovided message.",
	"Method": "void assertTrue(boolean cond,String message){\r\n    if (!cond) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogExport.getResponse",
	"Comment": "gets the response.the response sent by the workspace, including the output text, detected intents and entities, and context.",
	"Method": "MessageResponse getResponse(){\r\n    return response;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteEntity",
	"Comment": "delete entity.delete an entity from a workspace.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteEntity(DeleteEntityOptions deleteEntityOptions){\r\n    Validator.notNull(deleteEntityOptions, \"deleteEntityOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\" };\r\n    String[] pathParameters = { deleteEntityOptions.workspaceId(), deleteEntityOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.EventData.getDisplayRank",
	"Comment": "gets the displayrank.the rank of the result item which the event is associated with.",
	"Method": "Long getDisplayRank(){\r\n    return displayRank;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageOptions.context",
	"Comment": "gets the context.state information for the conversation. continue a conversation by including the context object from the previousresponse.",
	"Method": "Builder context(Context context,Context context){\r\n    return context;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.CreateModelOptions.name",
	"Comment": "gets the name.an optional model name that you can use to identify the model. valid characters are letters, numbers, dashes,underscores, spaces and apostrophes. the maximum length is 32 characters.",
	"Method": "Builder name(String name,String name){\r\n    return name;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredGroupingPolicy",
	"Comment": "removefilteredgroupingpolicy removes a role inheritance rule from the current policy, field filters can be specified.",
	"Method": "boolean removeFilteredGroupingPolicy(int fieldIndex,String fieldValues){\r\n    return removeFilteredNamedGroupingPolicy(\"g\", fieldIndex, fieldValues);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceSystemSettings.getDisambiguation",
	"Comment": "gets the disambiguation.workspace settings related to the disambiguation feature.this feature is available only to premium users.",
	"Method": "WorkspaceSystemSettingsDisambiguation getDisambiguation(){\r\n    return disambiguation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.CustomWord.getDisplayAs",
	"Comment": "gets the displayas.an alternative spelling for the custom word when it appears in a transcript. use the parameter when you want theword to have a spelling that is different from its usual representation or from its spelling in corpora trainingdata.",
	"Method": "String getDisplayAs(){\r\n    return displayAs;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Configuration.getConfigurationId",
	"Comment": "gets the configurationid.the unique identifier of the configuration.",
	"Method": "String getConfigurationId(){\r\n    return configurationId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listLogs",
	"Comment": "list log events in a workspace.list the events from the log of a specific workspace.is not specified, this operation is limited to 40 requests per 30 minutes. ifspecified, the limit is 120 requests per minute. for more information, see rate limiting",
	"Method": "ServiceCall<LogCollection> listLogs(ListLogsOptions listLogsOptions){\r\n    Validator.notNull(listLogsOptions, \"listLogsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"logs\" };\r\n    String[] pathParameters = { listLogsOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listLogsOptions.sort() != null) {\r\n        builder.query(\"sort\", listLogsOptions.sort());\r\n    }\r\n    if (listLogsOptions.filter() != null) {\r\n        builder.query(\"filter\", listLogsOptions.filter());\r\n    }\r\n    if (listLogsOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listLogsOptions.pageLimit()));\r\n    }\r\n    if (listLogsOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listLogsOptions.cursor());\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(LogCollection.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassResult.getScore",
	"Comment": "gets the score.confidence score for the property in the range of 0 to 1. a higher score indicates greater likelihood that theclass is depicted in the image. the default threshold for returning scores from a classifier is 0.5.",
	"Method": "Float getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogExport.getWorkspaceId",
	"Comment": "gets the workspaceid.the unique identifier of the workspace where the request was made.",
	"Method": "String getWorkspaceId(){\r\n    return workspaceId;\r\n}"
}, {
	"Path": "io.appium.java_client.MobileBy.iOSClassChain",
	"Comment": "this locator strategy is available in xcuitest driver mode.",
	"Method": "By iOSClassChain(String iOSClassChainString){\r\n    return new ByIosClassChain(iOSClassChainString);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.hasNamedGroupingPolicy",
	"Comment": "hasnamedgroupingpolicy determines whether a named role inheritance rule exists.",
	"Method": "boolean hasNamedGroupingPolicy(String ptype,List<String> params,boolean hasNamedGroupingPolicy,String ptype,String params){\r\n    return hasNamedGroupingPolicy(ptype, Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.RelationArgument.getLocation",
	"Comment": "gets the location.character offsets indicating the beginning and end of the mention in the analyzed text.",
	"Method": "List<Long> getLocation(){\r\n    return location;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateWorkspaceOptions.name",
	"Comment": "gets the name.the name of the workspace. this string cannot contain carriage return, newline, or tab characters, and it must beno longer than 64 characters.",
	"Method": "Builder name(String name,String name){\r\n    return name;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Collection.getCollectionId",
	"Comment": "gets the collectionid.the unique identifier of the collection.",
	"Method": "String getCollectionId(){\r\n    return collectionId;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedSubjects",
	"Comment": "getallnamedsubjects gets the list of subjects that show up in the currentnamed policy.",
	"Method": "List<String> getAllNamedSubjects(String ptype){\r\n    return model.getValuesForFieldInPolicy(\"p\", ptype, 0);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Counterexample.getCreated",
	"Comment": "gets the created.the timestamp for creation of the counterexample.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listSynonyms",
	"Comment": "list entity value synonyms.list the synonyms for an entity value.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<SynonymCollection> listSynonyms(ListSynonymsOptions listSynonymsOptions){\r\n    Validator.notNull(listSynonymsOptions, \"listSynonymsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { listSynonymsOptions.workspaceId(), listSynonymsOptions.entity(), listSynonymsOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listSynonymsOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listSynonymsOptions.pageLimit()));\r\n    }\r\n    if (listSynonymsOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listSynonymsOptions.includeCount()));\r\n    }\r\n    if (listSynonymsOptions.sort() != null) {\r\n        builder.query(\"sort\", listSynonymsOptions.sort());\r\n    }\r\n    if (listSynonymsOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listSynonymsOptions.cursor());\r\n    }\r\n    if (listSynonymsOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listSynonymsOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(SynonymCollection.class));\r\n}"
}, {
	"Path": "de.danielbechler.diff.node.DiffNode.getFieldAnnotations",
	"Comment": "if this node represents a bean property this method returns all annotations of its field.\tonly works for fields having a name that matches the name derived from the getter.",
	"Method": "Set<Annotation> getFieldAnnotations(){\r\n    if (accessor instanceof PropertyAwareAccessor) {\r\n        return unmodifiableSet(((PropertyAwareAccessor) accessor).getFieldAnnotations());\r\n    }\r\n    return unmodifiableSet(Collections.<Annotation>emptySet());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.GetPronunciationOptions.format",
	"Comment": "gets the format.the phoneme format in which to return the pronunciation. omit the parameter to obtain the pronunciation in thedefault format.",
	"Method": "Builder format(String format,String format){\r\n    return format;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.CommonUtils.assertNotEmpty",
	"Comment": "check whether the collection is null or empty. if it is, throw anexception and display the message.",
	"Method": "void assertNotEmpty(Collection<?> c,String message){\r\n    assertNotNull(c, message);\r\n    if (c.isEmpty()) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getFilteredGroupingPolicy",
	"Comment": "getfilteredgroupingpolicy gets all the role inheritance rules in the policy, field filters can be specified.",
	"Method": "List<List<String>> getFilteredGroupingPolicy(int fieldIndex,String fieldValues){\r\n    return getFilteredNamedGroupingPolicy(\"g\", fieldIndex, fieldValues);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Behavior.getPercentage",
	"Comment": "gets the percentage.for json content that is timestamped, the percentage of timestamped input data that occurred during that day of theweek or hour of the day. the range is 0 to 1.",
	"Method": "Double getPercentage(){\r\n    return percentage;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ValueExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the entity value.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "net.spy.memcached.internal.OperationFuture.setOperation",
	"Comment": "set the operation associated with this operationfuture.this is intended for internal use only.",
	"Method": "void setOperation(Operation to){\r\n    op = to;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.MultipartRecognition.maxAlternatives",
	"Comment": "gets the maxalternatives.maximum number of alternative transcripts to be returned. by default, a single transcription is returned.",
	"Method": "Builder maxAlternatives(Long maxAlternatives,Long maxAlternatives){\r\n    return maxAlternatives;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.AbstractCasFilter.retrieveTicketFromRequest",
	"Comment": "template method to allow you to change how you retrieve the ticket.",
	"Method": "String retrieveTicketFromRequest(HttpServletRequest request){\r\n    return CommonUtils.safeGetParameter(request, this.protocol.getArtifactParameterName());\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.TapStream.cancel",
	"Comment": "cancels all operations still waiting on an existing tapstream.",
	"Method": "void cancel(){\r\n    for (TapOperation op : ops) {\r\n        op.cancel();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listWorkspaces",
	"Comment": "list workspaces.list the workspaces associated with a conversation service instance.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<WorkspaceCollection> listWorkspaces(ListWorkspacesOptions listWorkspacesOptions,ServiceCall<WorkspaceCollection> listWorkspaces){\r\n    return listWorkspaces(null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CounterexampleCollection.getCounterexamples",
	"Comment": "gets the counterexamples.an array of objects describing the examples marked as irrelevant input.",
	"Method": "List<Counterexample> getCounterexamples(){\r\n    return counterexamples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.LogQueryResponseResultDocumentsResult.getScore",
	"Comment": "gets the score.the raw score of this result. a higher score indicates a greater match to the query parameters.",
	"Method": "Double getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.variable",
	"Comment": "gets the variable.the location in the dialog context where output is stored.",
	"Method": "Builder variable(String variable,String variable){\r\n    return variable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.SourceOptionsObject.getLimit",
	"Comment": "gets the limit.the maximum number of documents to crawl for this document object. by default, all documents in the document objectare crawled.",
	"Method": "Long getLimit(){\r\n    return limit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.digressOut",
	"Comment": "gets the digressout.whether this dialog node can be returned to after a digression.",
	"Method": "Builder digressOut(String digressOut,String digressOut){\r\n    return digressOut;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.VoiceModel.getDescription",
	"Comment": "gets the description.the description of the custom voice model.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "org.jinq.jpa.jpqlquery.QueryGenerationState.generateFromAlias",
	"Comment": "gives a text label that can be used to identify an entry in the from section of a jpql query.",
	"Method": "String generateFromAlias(From from){\r\n    if (fromAliases.containsKey(from))\r\n        return fromAliases.get(from);\r\n    String alias = nextTableAlias();\r\n    fromAliases.put(from, alias);\r\n    return alias;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageOptions.entities",
	"Comment": "gets the entities.entities to use when evaluating the message. include entities from the previous response to continue using thoseentities rather than detecting entities in the new input.",
	"Method": "Builder entities(List<RuntimeEntity> entities,List<RuntimeEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "org.javers.repository.sql.SqlRepositoryBuilder.withGlobalIdCacheDisabled",
	"Comment": "since 2.7.2, javerstransactionaldecorator evicts the cache on transaction rollback,so there are no known reasons to disabling it.",
	"Method": "SqlRepositoryBuilder withGlobalIdCacheDisabled(){\r\n    globalIdCacheDisabled = true;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Filter.getMatch",
	"Comment": "gets the match.the match the aggregated results queried for.",
	"Method": "String getMatch(){\r\n    return match;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.TestDocument.getNotices",
	"Comment": "gets the notices.an array of notice messages about the preview operation.",
	"Method": "List<Notice> getNotices(){\r\n    return notices;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListDialogNodesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.GSpeechDuplex.chunkAudio",
	"Comment": "chunks audio into smaller chunks to stream to the duplex api",
	"Method": "byte[][] chunkAudio(byte[] data){\r\n    if (data.length >= MAX_SIZE) {\r\n        int frame = MAX_SIZE / 2;\r\n        int numOfChunks = (int) (data.length / ((double) frame)) + 1;\r\n        byte[][] data2D = new byte[numOfChunks][];\r\n        for (int i = 0, j = 0; i < data.length && j < data2D.length; i += frame, j++) {\r\n            int length = (data.length - i < frame) ? data.length - i : frame;\r\n            data2D[j] = new byte[length];\r\n            System.arraycopy(data, i, data2D[j], 0, length);\r\n        }\r\n        return data2D;\r\n    } else {\r\n        byte[][] tmpData = new byte[1][data.length];\r\n        System.arraycopy(data, 0, tmpData[0], 0, data.length);\r\n        return tmpData;\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getCreated",
	"Comment": "gets the created.the timestamp for creation of the dialog node.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "io.appium.java_client.ErrorCodesMobile.toStatusCode",
	"Comment": "converts a thrown error into the corresponding status code.",
	"Method": "int toStatusCode(Throwable thrown){\r\n    if (thrown instanceof NoSuchContextException) {\r\n        return NO_SUCH_CONTEXT;\r\n    } else {\r\n        return super.toStatusCode(thrown);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageRequest.getIntents",
	"Comment": "gets the intents.intents to use when evaluating the user input. include intents from the previous response to continue using thoseintents rather than trying to recognize intents in the new input.",
	"Method": "List<RuntimeIntent> getIntents(){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getConditions",
	"Comment": "gets the conditions.the condition that triggers the dialog node.",
	"Method": "String getConditions(){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentFeatures.keywords",
	"Comment": "gets the keywords.an object specifying the keyword enrichment and related parameters.",
	"Method": "Builder keywords(NluEnrichmentKeywords keywords,NluEnrichmentKeywords keywords){\r\n    return keywords;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Example.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the example.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateValueOptions.newMetadata",
	"Comment": "gets the newmetadata.any metadata related to the entity value.",
	"Method": "Builder newMetadata(Map newMetadata,Map newMetadata){\r\n    return newMetadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateIntent.description",
	"Comment": "gets the description.the description of the intent. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.getTrainingData",
	"Comment": "get details about a query.gets details for a specific training data query, including the query string and all examples.",
	"Method": "ServiceCall<TrainingQuery> getTrainingData(GetTrainingDataOptions getTrainingDataOptions){\r\n    Validator.notNull(getTrainingDataOptions, \"getTrainingDataOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\" };\r\n    String[] pathParameters = { getTrainingDataOptions.environmentId(), getTrainingDataOptions.collectionId(), getTrainingDataOptions.queryId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TrainingQuery.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListDialogNodesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.Pronunciation.getPronunciation",
	"Comment": "gets the pronunciation.the pronunciation of the specified text in the requested voice and format. if a custom voice model is specified,the pronunciation also reflects that custom voice.",
	"Method": "String getPronunciation(){\r\n    return pronunciation;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.CoreEnforcer.isFiltered",
	"Comment": "isfiltered returns true if the loaded policy has been filtered.",
	"Method": "boolean isFiltered(){\r\n    return false;\r\n}"
}, {
	"Path": "io.appium.java_client.android.appmanagement.AndroidInstallApplicationOptions.withUseSdcardEnabled",
	"Comment": "forces the application to be installed of sd cardinstead of the internal memory.",
	"Method": "AndroidInstallApplicationOptions withUseSdcardEnabled(){\r\n    this.useSdcard = true;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.Classification.getClassifierId",
	"Comment": "gets the classifierid.unique identifier for this classifier.",
	"Method": "String getClassifierId(){\r\n    return classifierId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentCounts.getFailed",
	"Comment": "gets the failed.the number of documents in the collection that failed to be ingested.",
	"Method": "Long getFailed(){\r\n    return failed;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.model.BuildWithDetails.getConsoleOutputText",
	"Comment": "get build console output log as text.use this method to periodically obtain logs from jenkins and skip chunks that were already received",
	"Method": "String getConsoleOutputText(ConsoleLog getConsoleOutputText,int bufferOffset){\r\n    List<NameValuePair> formData = new ArrayList();\r\n    formData.add(new BasicNameValuePair(\"start\", Integer.toString(bufferOffset)));\r\n    String path = getUrl() + \"logText/progressiveText\";\r\n    HttpResponse httpResponse = client.post_form_with_result(path, formData, false);\r\n    Header moreDataHeader = httpResponse.getFirstHeader(MORE_DATA_HEADER);\r\n    Header textSizeHeader = httpResponse.getFirstHeader(TEXT_SIZE_HEADER);\r\n    String response = EntityUtils.toString(httpResponse.getEntity());\r\n    boolean hasMoreData = false;\r\n    if (moreDataHeader != null) {\r\n        hasMoreData = Boolean.TRUE.toString().equals(moreDataHeader.getValue());\r\n    }\r\n    Integer currentBufferSize = bufferOffset;\r\n    if (textSizeHeader != null) {\r\n        try {\r\n            currentBufferSize = Integer.parseInt(textSizeHeader.getValue());\r\n        } catch (NumberFormatException e) {\r\n            LOGGER.warn(\"Cannot parse buffer size for job {0} build {1}. Using current offset!\", this.getDisplayName(), this.getNumber());\r\n        }\r\n    }\r\n    return new ConsoleLog(response, hasMoreData, currentBufferSize);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.model.Policy.getValuesForFieldInPolicy",
	"Comment": "getvaluesforfieldinpolicy gets all values for a field for all rules in a policy, duplicated values are removed.",
	"Method": "List<String> getValuesForFieldInPolicy(String sec,String ptype,int fieldIndex){\r\n    List<String> values = new ArrayList();\r\n    for (List<String> rule : model.get(sec).get(ptype).policy) {\r\n        values.add(rule.get(fieldIndex));\r\n    }\r\n    Util.arrayRemoveDuplicates(values);\r\n    return values;\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessage.getValue",
	"Comment": "gets the value of the value field. only returned with a tap mutationmessage.",
	"Method": "byte[] getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "org.jinq.jpa.jpqlquery.QueryGenerationState.appendQuery",
	"Comment": "adds some text to the current part of the query string being assembled.",
	"Method": "void appendQuery(String str){\r\n    queryString += str;\r\n}"
}, {
	"Path": "net.spy.memcached.auth.AuthThreadMonitor.authConnection",
	"Comment": "authenticate a new connection. this is typically used by a memcachednode inorder to authenticate a connection right after it has been established.if an old, but not yet completed authentication exists this will stop it inorder to create a new authentication attempt.",
	"Method": "void authConnection(MemcachedConnection conn,OperationFactory opFact,AuthDescriptor authDescriptor,MemcachedNode node){\r\n    interruptOldAuth(node);\r\n    AuthThread newSASLAuthenticator = new AuthThread(conn, opFact, authDescriptor, node);\r\n    nodeMap.put(node, newSASLAuthenticator);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newPreviousSibling",
	"Comment": "gets the newprevioussibling.the id of the previous sibling dialog node.",
	"Method": "Builder newPreviousSibling(String newPreviousSibling,String newPreviousSibling){\r\n    return newPreviousSibling;\r\n}"
}, {
	"Path": "org.jinq.jpa.JinqJPAStreamProvider.registerAttributeConverterType",
	"Comment": "when using fields in jpa with attributeconverters, you need to register the class used by the field with jinq so that it will allow objects of that type to be used in queries",
	"Method": "void registerAttributeConverterType(Class<?> convertedType){\r\n    metamodel.insertConvertedType(convertedType.getName());\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.linspace",
	"Comment": "construct a column vector whose entries are linearly spaced points from lower to upper with sizemany steps.",
	"Method": "FloatMatrix linspace(int lower,int upper,int size){\r\n    FloatMatrix result = new FloatMatrix(size);\r\n    for (int i = 0; i < size; i++) {\r\n        float t = (float) i / (size - 1);\r\n        result.put(i, lower * (1 - t) + t * upper);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Timeslice.getField",
	"Comment": "gets the field.the field where the aggregation is located in the document.",
	"Method": "String getField(){\r\n    return field;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getPreviousSibling",
	"Comment": "gets the previoussibling.the id of the previous sibling dialog node. this property is not returned if the dialog node has no previoussibling.",
	"Method": "String getPreviousSibling(){\r\n    return previousSibling;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceExport.getDialogNodes",
	"Comment": "gets the dialognodes.an array of objects describing the dialog nodes in the workspace.",
	"Method": "List<DialogNode> getDialogNodes(){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.Usage.getTextCharacters",
	"Comment": "gets the textcharacters.number of text characters processed.",
	"Method": "Long getTextCharacters(){\r\n    return textCharacters;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogSuggestionValue.getEntities",
	"Comment": "gets the entities.an array of entities to be sent along with the user input.",
	"Method": "List<RuntimeEntity> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceExport.getCreated",
	"Comment": "gets the created.the timestamp for creation of the workspace.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "org.jinq.jooq.transform.MetamodelUtil.isFieldGetterMethod",
	"Comment": "returns true if a method is used as a getter for reading a field of a table",
	"Method": "boolean isFieldGetterMethod(MethodSignature sig){\r\n    return fieldMethods.containsKey(sig);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.IndexCapacity.getDiskUsage",
	"Comment": "gets the diskusage.summary of the disk usage of the environment.",
	"Method": "DiskUsage getDiskUsage(){\r\n    return diskUsage;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.tone_analyzer.v3.model.SentenceAnalysis.getSentenceId",
	"Comment": "gets the sentenceid.the unique identifier of a sentence of the input content. the first sentence has id 0, and the id of eachsubsequent sentence is incremented by one.",
	"Method": "Long getSentenceId(){\r\n    return sentenceId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listDialogNodes",
	"Comment": "list dialog nodes.list the dialog nodes for a workspace.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNodeCollection> listDialogNodes(ListDialogNodesOptions listDialogNodesOptions){\r\n    Validator.notNull(listDialogNodesOptions, \"listDialogNodesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { listDialogNodesOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listDialogNodesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listDialogNodesOptions.pageLimit()));\r\n    }\r\n    if (listDialogNodesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listDialogNodesOptions.includeCount()));\r\n    }\r\n    if (listDialogNodesOptions.sort() != null) {\r\n        builder.query(\"sort\", listDialogNodesOptions.sort());\r\n    }\r\n    if (listDialogNodesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listDialogNodesOptions.cursor());\r\n    }\r\n    if (listDialogNodesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listDialogNodesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNodeCollection.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.userLabel",
	"Comment": "gets the userlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "Builder userLabel(String userLabel,String userLabel){\r\n    return userLabel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.SourceOptionsSiteColl.getLimit",
	"Comment": "gets the limit.the maximum number of documents to crawl for this site collection. by default, all documents in the site collectionare crawled.",
	"Method": "Long getLimit(){\r\n    return limit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EmotionResult.getTargets",
	"Comment": "gets the targets.the returned emotion results per specified target.",
	"Method": "List<TargetedEmotionResults> getTargets(){\r\n    return targets;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteDialogNode",
	"Comment": "delete dialog node.delete a dialog node from a workspace.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteDialogNode(DeleteDialogNodeOptions deleteDialogNodeOptions){\r\n    Validator.notNull(deleteDialogNodeOptions, \"deleteDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { deleteDialogNodeOptions.workspaceId(), deleteDialogNodeOptions.dialogNode() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateWorkspaceOptions.entities",
	"Comment": "gets the entities.an array of objects defining the entities for the workspace.",
	"Method": "Builder entities(List<CreateEntity> entities,List<CreateEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getUserLabel",
	"Comment": "gets the userlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "String getUserLabel(){\r\n    return userLabel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.CredentialUtils.getAPIUrlTest",
	"Comment": "method for testing the getapiurl method that bypasses the vcapservices to ensure retrieval from jdni.",
	"Method": "String getAPIUrlTest(String serviceName){\r\n    if ((serviceName == null) || serviceName.isEmpty()) {\r\n        return null;\r\n    }\r\n    return getJDNIValue(\"jdni/watson-developer-cloud/\" + serviceName + LOOKUP_NAME_EXTENSION_URL);\r\n}"
}, {
	"Path": "jssc.SerialPort.getNewEventThread",
	"Comment": "create new eventlistener thread depending on the type of operating system",
	"Method": "EventThread getNewEventThread(){\r\n    if (SerialNativeInterface.getOsType() == SerialNativeInterface.OS_LINUX || SerialNativeInterface.getOsType() == SerialNativeInterface.OS_SOLARIS || SerialNativeInterface.getOsType() == SerialNativeInterface.OS_MAC_OS_X) {\r\n        return new LinuxEventThread();\r\n    }\r\n    return new EventThread();\r\n}"
}, {
	"Path": "org.jasig.cas.client.validation.AbstractCasProtocolUrlBasedTicketValidator.retrieveResponseFromServer",
	"Comment": "retrieves the response from the server by opening a connection and merely reading the response.",
	"Method": "String retrieveResponseFromServer(URL validationUrl,String ticket){\r\n    return CommonUtils.getResponseFromServer(validationUrl, getURLConnectionFactory(), getEncoding());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.NaturalLanguageUnderstanding.analyze",
	"Comment": "analyze text, html, or a public webpage.analyzes text, html, or a public webpage with one or more text analysis features, including categories, concepts,emotion, entities, keywords, metadata, relations, semantic roles, and sentiment.",
	"Method": "ServiceCall<AnalysisResults> analyze(AnalyzeOptions analyzeOptions){\r\n    Validator.notNull(analyzeOptions, \"analyzeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/analyze\" };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (analyzeOptions.text() != null) {\r\n        contentJson.addProperty(\"text\", analyzeOptions.text());\r\n    }\r\n    if (analyzeOptions.html() != null) {\r\n        contentJson.addProperty(\"html\", analyzeOptions.html());\r\n    }\r\n    if (analyzeOptions.url() != null) {\r\n        contentJson.addProperty(\"url\", analyzeOptions.url());\r\n    }\r\n    contentJson.add(\"features\", GsonSingleton.getGson().toJsonTree(analyzeOptions.features()));\r\n    if (analyzeOptions.clean() != null) {\r\n        contentJson.addProperty(\"clean\", analyzeOptions.clean());\r\n    }\r\n    if (analyzeOptions.xpath() != null) {\r\n        contentJson.addProperty(\"xpath\", analyzeOptions.xpath());\r\n    }\r\n    if (analyzeOptions.fallbackToRaw() != null) {\r\n        contentJson.addProperty(\"fallback_to_raw\", analyzeOptions.fallbackToRaw());\r\n    }\r\n    if (analyzeOptions.returnAnalyzedText() != null) {\r\n        contentJson.addProperty(\"return_analyzed_text\", analyzeOptions.returnAnalyzedText());\r\n    }\r\n    if (analyzeOptions.language() != null) {\r\n        contentJson.addProperty(\"language\", analyzeOptions.language());\r\n    }\r\n    if (analyzeOptions.limitTextCharacters() != null) {\r\n        contentJson.addProperty(\"limit_text_characters\", analyzeOptions.limitTextCharacters());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(AnalysisResults.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.CreateModelOptions.forcedGlossaryFilename",
	"Comment": "gets the forcedglossaryfilename.the filename for forcedglossary.",
	"Method": "Builder forcedGlossaryFilename(String forcedGlossaryFilename,String forcedGlossaryFilename){\r\n    return forcedGlossaryFilename;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogRuntimeResponseGeneric.getPreference",
	"Comment": "gets the preference.the preferred type of control to display.",
	"Method": "String getPreference(){\r\n    return preference;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.URIBuilder.setPath",
	"Comment": "sets uri path. the value is expected to be unescaped and may contain non ascii characters.",
	"Method": "URIBuilder setPath(String path){\r\n    this.path = path;\r\n    this.encodedSchemeSpecificPart = null;\r\n    this.encodedPath = null;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.createCredentials",
	"Comment": "create credentials.creates a set of credentials to connect to a remote source. created credentials are used in a configuration toassociate a collection with the remote source.all credentials are sent over an encrypted connection and encrypted at rest.",
	"Method": "ServiceCall<Credentials> createCredentials(CreateCredentialsOptions createCredentialsOptions){\r\n    Validator.notNull(createCredentialsOptions, \"createCredentialsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"credentials\" };\r\n    String[] pathParameters = { createCredentialsOptions.environmentId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (createCredentialsOptions.sourceType() != null) {\r\n        contentJson.addProperty(\"source_type\", createCredentialsOptions.sourceType());\r\n    }\r\n    if (createCredentialsOptions.credentialDetails() != null) {\r\n        contentJson.add(\"credential_details\", GsonSingleton.getGson().toJsonTree(createCredentialsOptions.credentialDetails()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Credentials.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.ConceptsResult.getDbpediaResource",
	"Comment": "gets the dbpediaresource.link to the corresponding dbpedia resource.",
	"Method": "String getDbpediaResource(){\r\n    return dbpediaResource;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.CheckJobOptions.id",
	"Comment": "gets the id.the identifier of the asynchronous job that is to be used for the request.",
	"Method": "Builder id(String id,String id){\r\n    return id;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListIntentsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.incr",
	"Comment": "increment the given counter, returning the new value.due to the way the memcached server operates on items, incremented anddecremented items will be returned as strings with any operations thatreturn a value.",
	"Method": "long incr(String key,long by,long incr,String key,int by,long incr,String key,long by,long def,int exp,long incr,String key,int by,long def,int exp,long incr,String key,long by,long def,long incr,String key,int by,long def){\r\n    return mutateWithDefault(Mutator.incr, key, by, def, 0);\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.logRunException",
	"Comment": "log a exception to different levels depending on the state.exceptions get logged at debug level when happening during shutdown, butat warning level when operating normally.",
	"Method": "void logRunException(Exception e){\r\n    if (shutDown) {\r\n        getLogger().debug(\"Exception occurred during shutdown\", e);\r\n    } else {\r\n        getLogger().warn(\"Problem handling memcached IO\", e);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateEntity",
	"Comment": "update entity.update an existing entity with new or modified data. you must provide component objects defining the content of theupdated entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Entity> updateEntity(UpdateEntityOptions updateEntityOptions){\r\n    Validator.notNull(updateEntityOptions, \"updateEntityOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\" };\r\n    String[] pathParameters = { updateEntityOptions.workspaceId(), updateEntityOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateEntityOptions.newFuzzyMatch() != null) {\r\n        contentJson.addProperty(\"fuzzy_match\", updateEntityOptions.newFuzzyMatch());\r\n    }\r\n    if (updateEntityOptions.newEntity() != null) {\r\n        contentJson.addProperty(\"entity\", updateEntityOptions.newEntity());\r\n    }\r\n    if (updateEntityOptions.newMetadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateEntityOptions.newMetadata()));\r\n    }\r\n    if (updateEntityOptions.newValues() != null) {\r\n        contentJson.add(\"values\", GsonSingleton.getGson().toJsonTree(updateEntityOptions.newValues()));\r\n    }\r\n    if (updateEntityOptions.newDescription() != null) {\r\n        contentJson.addProperty(\"description\", updateEntityOptions.newDescription());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Entity.class));\r\n}"
}, {
	"Path": "jssc.SerialPortException.getPortName",
	"Comment": "getting port name during operation with which the exception was called",
	"Method": "String getPortName(){\r\n    return portName;\r\n}"
}, {
	"Path": "org.jasig.cas.client.validation.AbstractTicketValidationFilter.getSSLConfig",
	"Comment": "gets the ssl config to use for https connectionsif one is configured for this filter.",
	"Method": "Properties getSSLConfig(){\r\n    final Properties properties = new Properties();\r\n    final String fileName = getString(ConfigurationKeys.SSL_CONFIG_FILE);\r\n    if (fileName != null) {\r\n        FileInputStream fis = null;\r\n        try {\r\n            fis = new FileInputStream(fileName);\r\n            properties.load(fis);\r\n            logger.trace(\"Loaded {} entries from {}\", properties.size(), fileName);\r\n        } catch (final IOException ioe) {\r\n            logger.error(ioe.getMessage(), ioe);\r\n        } finally {\r\n            CommonUtils.closeQuietly(fis);\r\n        }\r\n    }\r\n    return properties;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListLogsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.RequestUtils.inputStreamBody",
	"Comment": "returns a request body the encapsulates the specified input stream qualified with the specified content type.",
	"Method": "RequestBody inputStreamBody(InputStream stream,String contentType){\r\n    MediaType mediaType = (contentType != null) ? MediaType.parse(contentType) : HttpMediaType.BINARY_FILE;\r\n    return InputStreamRequestBody.create(mediaType, stream);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.EntityCollection.getEntities",
	"Comment": "gets the entities.an array of objects describing the entities defined for the workspace.",
	"Method": "List<EntityExport> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.DetectFacesOptions.imagesFileContentType",
	"Comment": "gets the imagesfilecontenttype.the content type of imagesfile. values for this parameter can be obtained from the httpmediatype class.",
	"Method": "Builder imagesFileContentType(String imagesFileContentType,String imagesFileContentType){\r\n    return imagesFileContentType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogNodeAction.getCredentials",
	"Comment": "gets the credentials.the name of the context variable that the client application will use to pass in credentials for the action.",
	"Method": "String getCredentials(){\r\n    return credentials;\r\n}"
}, {
	"Path": "io.appium.java_client.android.connection.ConnectionStateBuilder.build",
	"Comment": "builds connection state instance, which is ready to be passed as appium server parameter.",
	"Method": "ConnectionState build(){\r\n    return new ConnectionState(bitMask);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.WordAlternativeResults.getStartTime",
	"Comment": "gets the starttime.the start time in seconds of the word from the input audio that corresponds to the word alternatives.",
	"Method": "Double getStartTime(){\r\n    return startTime;\r\n}"
}, {
	"Path": "io.appium.java_client.android.ListensToLogcatMessages.addLogcatErrorsListener",
	"Comment": "adds a new log broadcasting errors handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addLogcatErrorsListener(Consumer<Throwable> handler){\r\n    getLogcatClient().addErrorHandler(handler);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Workspace.getCreated",
	"Comment": "gets the created.the timestamp for creation of the workspace.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.nextStep",
	"Comment": "gets the nextstep.the next step to be executed in dialog processing.",
	"Method": "Builder nextStep(DialogNodeNextStep nextStep,DialogNodeNextStep nextStep){\r\n    return nextStep;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EmotionScores.getAnger",
	"Comment": "gets the anger.anger score from 0 to 1. a higher score means that the text is more likely to convey anger.",
	"Method": "Double getAnger(){\r\n    return anger;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.finishConnect",
	"Comment": "finish the connect phase and potentially verify its liveness.",
	"Method": "void finishConnect(SelectionKey sk,MemcachedNode node){\r\n    if (verifyAliveOnConnect) {\r\n        final CountDownLatch latch = new CountDownLatch(1);\r\n        final OperationFuture<Boolean> rv = new OperationFuture<Boolean>(\"noop\", latch, 2500, listenerExecutorService);\r\n        NoopOperation testOp = opFact.noop(new OperationCallback() {\r\n            public void receivedStatus(OperationStatus status) {\r\n                rv.set(status.isSuccess(), status);\r\n            }\r\n            @Override\r\n            public void complete() {\r\n                latch.countDown();\r\n            }\r\n        });\r\n        testOp.setHandlingNode(node);\r\n        testOp.initialize();\r\n        checkState();\r\n        insertOperation(node, testOp);\r\n        node.copyInputQueue();\r\n        boolean done = false;\r\n        if (sk.isValid()) {\r\n            long timeout = TimeUnit.MILLISECONDS.toNanos(connectionFactory.getOperationTimeout());\r\n            long stop = System.nanoTime() + timeout;\r\n            while (stop > System.nanoTime()) {\r\n                handleWrites(node);\r\n                handleReads(node);\r\n                if (done = (latch.getCount() == 0)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!done || testOp.isCancelled() || testOp.hasErrored() || testOp.isTimedOut()) {\r\n            throw new ConnectException(\"Could not send noop upon connect! \" + \"This may indicate a running, but not responding memcached \" + \"instance.\");\r\n        }\r\n    }\r\n    connected(node);\r\n    addedQueue.offer(node);\r\n    if (node.getWbuf().hasRemaining()) {\r\n        handleWrites(node);\r\n    }\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.finishConnect",
	"Comment": "finish the connect phase and potentially verify its liveness.",
	"Method": "void finishConnect(SelectionKey sk,MemcachedNode node){\r\n    rv.set(status.isSuccess(), status);\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.finishConnect",
	"Comment": "finish the connect phase and potentially verify its liveness.",
	"Method": "void finishConnect(SelectionKey sk,MemcachedNode node){\r\n    latch.countDown();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.userLabel",
	"Comment": "gets the userlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "Builder userLabel(String userLabel,String userLabel){\r\n    return userLabel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateConfigurationOptions.description",
	"Comment": "gets the description.the description of the configuration, if available.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListSynonymsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.GetSessionStatusOptions.sessionId",
	"Comment": "gets the sessionid.the id of the session for the recognition task.",
	"Method": "Builder sessionId(String sessionId,String sessionId){\r\n    return sessionId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogRuntimeResponseGeneric.getMessageToHumanAgent",
	"Comment": "gets the messagetohumanagent.a message to be sent to the human agent who will be taking over the conversation.",
	"Method": "String getMessageToHumanAgent(){\r\n    return messageToHumanAgent;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.CommonUtils.constructServiceUrl",
	"Comment": "constructs a service url from the httpservletrequest or from the givenserviceurl. prefers the serviceurl provided if both a serviceurl and aservicename.",
	"Method": "String constructServiceUrl(HttpServletRequest request,HttpServletResponse response,String service,String serverNames,String artifactParameterName,boolean encode,String constructServiceUrl,HttpServletRequest request,HttpServletResponse response,String service,String serverNames,String serviceParameterName,String artifactParameterName,boolean encode){\r\n    if (CommonUtils.isNotBlank(service)) {\r\n        return encode ? response.encodeURL(service) : service;\r\n    }\r\n    final String serverName = findMatchingServerName(request, serverNames);\r\n    final URIBuilder originalRequestUrl = new URIBuilder(request.getRequestURL().toString(), encode);\r\n    originalRequestUrl.setParameters(request.getQueryString());\r\n    final URIBuilder builder;\r\n    if (!serverName.startsWith(\"https://\") && !serverName.startsWith(\"http://\")) {\r\n        String scheme = request.isSecure() ? \"https://\" : \"http://\";\r\n        builder = new URIBuilder(scheme + serverName, encode);\r\n    } else {\r\n        builder = new URIBuilder(serverName, encode);\r\n    }\r\n    if (builder.getPort() == -1 && !requestIsOnStandardPort(request)) {\r\n        builder.setPort(request.getServerPort());\r\n    }\r\n    builder.setEncodedPath(builder.getEncodedPath() + request.getRequestURI());\r\n    final List<String> serviceParameterNames = Arrays.asList(serviceParameterName.split(\",\"));\r\n    if (!serviceParameterNames.isEmpty() && !originalRequestUrl.getQueryParams().isEmpty()) {\r\n        for (final URIBuilder.BasicNameValuePair pair : originalRequestUrl.getQueryParams()) {\r\n            String name = pair.getName();\r\n            if (!name.equals(artifactParameterName) && !serviceParameterNames.contains(name)) {\r\n                if (name.contains(\"&\") || name.contains(\"=\")) {\r\n                    URIBuilder encodedParamBuilder = new URIBuilder();\r\n                    encodedParamBuilder.setParameters(name);\r\n                    for (final URIBuilder.BasicNameValuePair pair2 : encodedParamBuilder.getQueryParams()) {\r\n                        String name2 = pair2.getName();\r\n                        if (!name2.equals(artifactParameterName) && !serviceParameterNames.contains(name2)) {\r\n                            builder.addParameter(name2, pair2.getValue());\r\n                        }\r\n                    }\r\n                } else {\r\n                    builder.addParameter(name, pair.getValue());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    final String result = builder.toString();\r\n    final String returnValue = encode ? response.encodeURL(result) : result;\r\n    LOGGER.debug(\"serviceUrl generated: {}\", returnValue);\r\n    return returnValue;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogSuggestion.getOutput",
	"Comment": "gets the output.the dialog output that will be returned from the conversation service if the user selects the corresponding option.",
	"Method": "Map getOutput(){\r\n    return output;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.TestUtils.assertNoExceptionsOnCollectionIteration",
	"Comment": "test that collection iteration does not generate exceptions.",
	"Method": "void assertNoExceptionsOnCollectionIteration(Collection objs){\r\n    for (final Object obj : objs) {\r\n        assertNoExceptionsOnGetters(obj);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.createDialogNode",
	"Comment": "create dialog node.create a new dialog node.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNode> createDialogNode(CreateDialogNodeOptions createDialogNodeOptions){\r\n    Validator.notNull(createDialogNodeOptions, \"createDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { createDialogNodeOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"dialog_node\", createDialogNodeOptions.dialogNode());\r\n    if (createDialogNodeOptions.description() != null) {\r\n        contentJson.addProperty(\"description\", createDialogNodeOptions.description());\r\n    }\r\n    if (createDialogNodeOptions.conditions() != null) {\r\n        contentJson.addProperty(\"conditions\", createDialogNodeOptions.conditions());\r\n    }\r\n    if (createDialogNodeOptions.parent() != null) {\r\n        contentJson.addProperty(\"parent\", createDialogNodeOptions.parent());\r\n    }\r\n    if (createDialogNodeOptions.previousSibling() != null) {\r\n        contentJson.addProperty(\"previous_sibling\", createDialogNodeOptions.previousSibling());\r\n    }\r\n    if (createDialogNodeOptions.output() != null) {\r\n        contentJson.add(\"output\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.output()));\r\n    }\r\n    if (createDialogNodeOptions.context() != null) {\r\n        contentJson.add(\"context\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.context()));\r\n    }\r\n    if (createDialogNodeOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.metadata()));\r\n    }\r\n    if (createDialogNodeOptions.nextStep() != null) {\r\n        contentJson.add(\"next_step\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.nextStep()));\r\n    }\r\n    if (createDialogNodeOptions.actions() != null) {\r\n        contentJson.add(\"actions\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.actions()));\r\n    }\r\n    if (createDialogNodeOptions.title() != null) {\r\n        contentJson.addProperty(\"title\", createDialogNodeOptions.title());\r\n    }\r\n    if (createDialogNodeOptions.nodeType() != null) {\r\n        contentJson.addProperty(\"type\", createDialogNodeOptions.nodeType());\r\n    }\r\n    if (createDialogNodeOptions.eventName() != null) {\r\n        contentJson.addProperty(\"event_name\", createDialogNodeOptions.eventName());\r\n    }\r\n    if (createDialogNodeOptions.variable() != null) {\r\n        contentJson.addProperty(\"variable\", createDialogNodeOptions.variable());\r\n    }\r\n    if (createDialogNodeOptions.digressIn() != null) {\r\n        contentJson.addProperty(\"digress_in\", createDialogNodeOptions.digressIn());\r\n    }\r\n    if (createDialogNodeOptions.digressOut() != null) {\r\n        contentJson.addProperty(\"digress_out\", createDialogNodeOptions.digressOut());\r\n    }\r\n    if (createDialogNodeOptions.digressOutSlots() != null) {\r\n        contentJson.addProperty(\"digress_out_slots\", createDialogNodeOptions.digressOutSlots());\r\n    }\r\n    if (createDialogNodeOptions.userLabel() != null) {\r\n        contentJson.addProperty(\"user_label\", createDialogNodeOptions.userLabel());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNode.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ValueExport.getMetadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Map getMetadata(){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryOptions.passagesCharacters",
	"Comment": "gets the passagescharacters.the approximate number of characters that any one passage will have.",
	"Method": "Builder passagesCharacters(long passagesCharacters,Long passagesCharacters){\r\n    return passagesCharacters;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.CreateJobOptions.resultsTtl",
	"Comment": "gets the resultsttl.the number of minutes for which the results are to be available after the job has finished. if not delivered via acallback, the results must be retrieved within this time. omit the parameter to use a time to live of one week. theparameter is valid with or without a callback url.",
	"Method": "Builder resultsTtl(long resultsTtl,Long resultsTtl){\r\n    return resultsTtl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.UpdateVoiceModelOptions.description",
	"Comment": "gets the description.a new description for the custom voice model.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Environment.getSearchStatus",
	"Comment": "gets the searchstatus.information about continuous relevancy training for this environment.",
	"Method": "SearchStatus getSearchStatus(){\r\n    return searchStatus;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryNoticesOptions.aggregation",
	"Comment": "gets the aggregation.an aggregation search that returns an exact answer by combining query search with filters. useful for applicationsto build lists, tables, and time series. for a full list of possible aggregations, see the query reference.",
	"Method": "Builder aggregation(String aggregation,String aggregation){\r\n    return aggregation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.Face.getFaceLocation",
	"Comment": "gets the facelocation.the location of the bounding box around the face.",
	"Method": "FaceLocation getFaceLocation(){\r\n    return faceLocation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalysisResults.getKeywords",
	"Comment": "gets the keywords.the important keywords in content organized by relevance.",
	"Method": "List<KeywordsResult> getKeywords(){\r\n    return keywords;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateConfigurationOptions.normalizations",
	"Comment": "gets the normalizations.defines operations that can be used to transform the final output json into a normalized form. operations areexecuted in the order that they appear in the array.",
	"Method": "Builder normalizations(List<NormalizationOperation> normalizations,List<NormalizationOperation> normalizations){\r\n    return normalizations;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.util.BuiltInFunctions.regexMatch",
	"Comment": "regexmatch determines whether key1 matches the pattern of key2 in regular expression.",
	"Method": "boolean regexMatch(String key1,String key2){\r\n    return Pattern.matches(key2, key1);\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.CommonUtils.assertFalse",
	"Comment": "assert that the statement is true, otherwise throw an exception with theprovided message.",
	"Method": "void assertFalse(boolean cond,String message){\r\n    if (cond) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}"
}, {
	"Path": "net.spy.memcached.compat.SyncThread.run",
	"Comment": "wait for the barrier, invoke the callable and capture the result or anexception.",
	"Method": "void run(){\r\n    try {\r\n        barrier.await();\r\n        rv = callable.call();\r\n    } catch (Throwable t) {\r\n        throwable = t;\r\n    }\r\n    latch.countDown();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.getExample",
	"Comment": "get user input example.get information about a user input example.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Example> getExample(GetExampleOptions getExampleOptions){\r\n    Validator.notNull(getExampleOptions, \"getExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { getExampleOptions.workspaceId(), getExampleOptions.intent(), getExampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getExampleOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getExampleOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Example.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Profile.getWordCountMessage",
	"Comment": "gets the wordcountmessage.when guidance is appropriate, a string that provides a message that indicates the number of words found and wherethat value falls in the range of required or suggested number of words.",
	"Method": "String getWordCountMessage(){\r\n    return wordCountMessage;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.GetMetricsQueryNoResultsOptions.resultType",
	"Comment": "gets the resulttype.the type of result to consider when calculating the metric.",
	"Method": "Builder resultType(String resultType,String resultType){\r\n    return resultType;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.effect.DefaultEffector.mergeEffects",
	"Comment": "mergeeffects merges all matching results collected by the enforcer into a single decision.",
	"Method": "boolean mergeEffects(String expr,Effect[] effects,float[] results){\r\n    boolean result;\r\n    if (expr.equals(\"some(where (p_eft == allow))\")) {\r\n        result = false;\r\n        for (Effect eft : effects) {\r\n            if (eft == Effect.Allow) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n    } else if (expr.equals(\"!some(where (p_eft == deny))\")) {\r\n        result = true;\r\n        for (Effect eft : effects) {\r\n            if (eft == Effect.Deny) {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n    } else if (expr.equals(\"some(where (p_eft == allow)) && !some(where (p_eft == deny))\")) {\r\n        result = false;\r\n        for (Effect eft : effects) {\r\n            if (eft == Effect.Allow) {\r\n                result = true;\r\n            } else if (eft == Effect.Deny) {\r\n                result = false;\r\n                break;\r\n            }\r\n        }\r\n    } else if (expr.equals(\"priority(p_eft) || deny\")) {\r\n        result = false;\r\n        for (Effect eft : effects) {\r\n            if (eft != Effect.Indeterminate) {\r\n                if (eft == Effect.Allow) {\r\n                    result = true;\r\n                } else {\r\n                    result = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        throw new Error(\"unsupported effect\");\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.ListCollectionsResponse.getCollections",
	"Comment": "gets the collections.an array containing information about each collection in the environment.",
	"Method": "List<Collection> getCollections(){\r\n    return collections;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AddWordsOptions.words",
	"Comment": "gets the words.an array of objects that provides information about each custom word that is to be added to or updated in thecustom language model.",
	"Method": "Builder words(List<CustomWord> words,List<CustomWord> words){\r\n    return words;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.FaceAge.getScore",
	"Comment": "gets the score.confidence score in the range of 0 to 1. a higher score indicates greater confidence in the estimated value for theproperty.",
	"Method": "Float getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.VisualRecognition.getClassifier",
	"Comment": "retrieve classifier details.retrieve information about a custom classifier.",
	"Method": "ServiceCall<Classifier> getClassifier(GetClassifierOptions getClassifierOptions){\r\n    Validator.notNull(getClassifierOptions, \"getClassifierOptions cannot be null\");\r\n    String[] pathSegments = { \"v3/classifiers\" };\r\n    String[] pathParameters = { getClassifierOptions.classifierId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Classifier.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.IntentExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the intent.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageOptions.input",
	"Comment": "gets the input.an input object that includes the input text.",
	"Method": "Builder input(InputData input,InputData input){\r\n    return input;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.listExpansions",
	"Comment": "get the expansion list.returns the current expansion list for the specified collection. if an expansion list is not specified, an objectwith empty expansion arrays is returned.",
	"Method": "ServiceCall<Expansions> listExpansions(ListExpansionsOptions listExpansionsOptions){\r\n    Validator.notNull(listExpansionsOptions, \"listExpansionsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"expansions\" };\r\n    String[] pathParameters = { listExpansionsOptions.environmentId(), listExpansionsOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Expansions.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogExport.getResponseTimestamp",
	"Comment": "gets the responsetimestamp.the timestamp for the system response to the message.",
	"Method": "String getResponseTimestamp(){\r\n    return responseTimestamp;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.NaturalLanguageUnderstandingTest.testAnalyzeNullParams",
	"Comment": "test analyze with null parameters. test different constructor",
	"Method": "void testAnalyzeNullParams(){\r\n    NaturalLanguageUnderstanding service1 = new NaturalLanguageUnderstanding(\"2017-02-27\", \"username\", \"password\");\r\n    service1.setUsernameAndPassword(\"\", \"\");\r\n    service1.setEndPoint(getMockWebServerUrl());\r\n    server.enqueue(jsonResponse(analyzeResults));\r\n    Features features = new Features.Builder().concepts(null).categories(null).emotion(null).entities(null).keywords(null).metadata(null).relations(null).semanticRoles(null).sentiment(null).build();\r\n    AnalyzeOptions.Builder builder = new AnalyzeOptions.Builder().features(features);\r\n    final AnalysisResults response = service1.analyze(builder.build()).execute();\r\n    final RecordedRequest request = server.takeRequest();\r\n    assertEquals(ANALYZE_PATH, request.getPath());\r\n    assertEquals(\"POST\", request.getMethod());\r\n    assertEquals(analyzeResults, response);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.addPolicy",
	"Comment": "addpolicy adds an authorization rule to the current policy.if the rule already exists, the function returns false and the rule will not be added.otherwise the function returns true by adding the new rule.",
	"Method": "boolean addPolicy(List<String> params,boolean addPolicy,String params){\r\n    return addPolicy(Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateIntentOptions.description",
	"Comment": "gets the description.the description of the intent. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeAction.getCredentials",
	"Comment": "gets the credentials.the name of the context variable that the client application will use to pass in credentials for the action.",
	"Method": "String getCredentials(){\r\n    return credentials;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.deleteTrainingExample",
	"Comment": "delete example for training data query.deletes the example document with the given id from the training data query.",
	"Method": "ServiceCall<Void> deleteTrainingExample(DeleteTrainingExampleOptions deleteTrainingExampleOptions){\r\n    Validator.notNull(deleteTrainingExampleOptions, \"deleteTrainingExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\", \"examples\" };\r\n    String[] pathParameters = { deleteTrainingExampleOptions.environmentId(), deleteTrainingExampleOptions.collectionId(), deleteTrainingExampleOptions.queryId(), deleteTrainingExampleOptions.exampleId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageRequest.getOutput",
	"Comment": "gets the output.system output. include the output from the previous response to maintain intermediate information over multiplerequests.",
	"Method": "OutputData getOutput(){\r\n    return output;\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessage.getItemExpiry",
	"Comment": "gets the value of the item expiry field. only returned with a tap mutationmessage.",
	"Method": "long getItemExpiry(){\r\n    return itemexpiry;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateValueOptions.metadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Builder metadata(Map metadata,Map metadata){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateEntity",
	"Comment": "update entity.update an existing entity with new or modified data. you must provide component objects defining the content of theupdated entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Entity> updateEntity(UpdateEntityOptions updateEntityOptions){\r\n    Validator.notNull(updateEntityOptions, \"updateEntityOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\" };\r\n    String[] pathParameters = { updateEntityOptions.workspaceId(), updateEntityOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateEntityOptions.newFuzzyMatch() != null) {\r\n        contentJson.addProperty(\"fuzzy_match\", updateEntityOptions.newFuzzyMatch());\r\n    }\r\n    if (updateEntityOptions.newEntity() != null) {\r\n        contentJson.addProperty(\"entity\", updateEntityOptions.newEntity());\r\n    }\r\n    if (updateEntityOptions.newMetadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateEntityOptions.newMetadata()));\r\n    }\r\n    if (updateEntityOptions.newValues() != null) {\r\n        contentJson.add(\"values\", GsonSingleton.getGson().toJsonTree(updateEntityOptions.newValues()));\r\n    }\r\n    if (updateEntityOptions.newDescription() != null) {\r\n        contentJson.addProperty(\"description\", updateEntityOptions.newDescription());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Entity.class));\r\n}"
}, {
	"Path": "net.spy.memcached.compat.log.DefaultLogger.isTraceEnabled",
	"Comment": "always returns false, trace is not enabled on the defaultlogger.",
	"Method": "boolean isTraceEnabled(){\r\n    return (false);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogSuggestion.getValue",
	"Comment": "gets the value.an object defining the message input, intents, and entities to be sent to the conversation service if the userselects the corresponding disambiguation option.",
	"Method": "DialogSuggestionValue getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getNamedPolicy",
	"Comment": "getnamedpolicy gets all the authorization rules in the named policy.",
	"Method": "List<List<String>> getNamedPolicy(String ptype){\r\n    return model.getPolicy(\"p\", ptype);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.ClassificationCollection.getClassifierId",
	"Comment": "gets the classifierid.unique identifier for this classifier.",
	"Method": "String getClassifierId(){\r\n    return classifierId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateExampleOptions.newMentions",
	"Comment": "gets the newmentions.an array of contextual entity mentions.",
	"Method": "Builder newMentions(List<Mentions> newMentions,List<Mentions> newMentions){\r\n    return newMentions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AddAudioOptions.audioResource",
	"Comment": "gets the audioresource.the audio resource that is to be added to the custom acoustic model, an individual audio file or an archive file.",
	"Method": "Builder audioResource(InputStream audioResource,Builder audioResource,File audioResource,InputStream audioResource){\r\n    return audioResource;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogSuggestionValue.getEntities",
	"Comment": "gets the entities.an array of entities to be sent along with the user input.",
	"Method": "List<RuntimeEntity> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Profile.getWarnings",
	"Comment": "gets the warnings.warning messages associated with the input text submitted with the request. the array is empty if the inputgenerated no warnings.",
	"Method": "List<Warning> getWarnings(){\r\n    return warnings;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.KeywordResult.getEndTime",
	"Comment": "gets the endtime.the end time in seconds of the keyword match.",
	"Method": "Double getEndTime(){\r\n    return endTime;\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.Complex.exp",
	"Comment": "return a new complex object whose value is the complex exponential of this",
	"Method": "Complex exp(){\r\n    return new Complex(Math.exp(re) * Math.cos(im), Math.exp(re) * Math.sin(im));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalyzeOptions.features",
	"Comment": "gets the features.specific features to analyze the document for.",
	"Method": "Builder features(Features features,Features features){\r\n    return features;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageRequest.getIntents",
	"Comment": "gets the intents.intents to use when evaluating the user input. include intents from the previous response to continue using thoseintents rather than trying to recognize intents in the new input.",
	"Method": "List<RuntimeIntent> getIntents(){\r\n    return intents;\r\n}"
}, {
	"Path": "io.appium.java_client.ScreenshotState.verifyChanged",
	"Comment": "verifies whether the state of the screenshot provided by stateprovider lambda functionis changed within the given timeout.",
	"Method": "ScreenshotState verifyChanged(Duration timeout,double minScore){\r\n    return checkState((x) -> x < minScore, timeout);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listDialogNodes",
	"Comment": "list dialog nodes.list the dialog nodes for a workspace.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNodeCollection> listDialogNodes(ListDialogNodesOptions listDialogNodesOptions){\r\n    Validator.notNull(listDialogNodesOptions, \"listDialogNodesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { listDialogNodesOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listDialogNodesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listDialogNodesOptions.pageLimit()));\r\n    }\r\n    if (listDialogNodesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listDialogNodesOptions.includeCount()));\r\n    }\r\n    if (listDialogNodesOptions.sort() != null) {\r\n        builder.query(\"sort\", listDialogNodesOptions.sort());\r\n    }\r\n    if (listDialogNodesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listDialogNodesOptions.cursor());\r\n    }\r\n    if (listDialogNodesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listDialogNodesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNodeCollection.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateIntent.examples",
	"Comment": "gets the examples.an array of user input examples for the intent.",
	"Method": "Builder examples(List<CreateExample> examples,List<CreateExample> examples){\r\n    return examples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.LanguageModel.getDescription",
	"Comment": "gets the description.the description of the custom language model.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "org.jinq.hibernate.JinqHibernateStreamProvider.registerAttributeConverterType",
	"Comment": "when using fields in jpa with attributeconverters, you need to register the class used by the field with jinq so that it will allow objects of that type to be used in queries",
	"Method": "void registerAttributeConverterType(Class<?> convertedType){\r\n    metamodel.insertConvertedType(convertedType.getName());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Calculation.getField",
	"Comment": "gets the field.the field where the aggregation is located in the document.",
	"Method": "String getField(){\r\n    return field;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.AddDocumentOptions.fileContentType",
	"Comment": "gets the filecontenttype.the content type of file. values for this parameter can be obtained from the httpmediatype class.",
	"Method": "Builder fileContentType(String fileContentType,String fileContentType){\r\n    return fileContentType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.WatsonServiceUnitTest.jsonResponse",
	"Comment": "create a mockresponse with json content type and the object serialized to json as body.",
	"Method": "MockResponse jsonResponse(Object body){\r\n    return new MockResponse().addHeader(CONTENT_TYPE, HttpMediaType.APPLICATION_JSON).setBody(GSON.toJson(body));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryLogOptions.offset",
	"Comment": "gets the offset.the number of query results to skip at the beginning. for example, if the total number of results that are returnedis 10 and the offset is 8, it returns the last two results.",
	"Method": "Builder offset(long offset,Long offset){\r\n    return offset;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.CoreEnforcer.enableAutoBuildRoleLinks",
	"Comment": "enableautobuildrolelinks controls whether to save a policy ruleautomatically to the adapter when it is added or removed.",
	"Method": "void enableAutoBuildRoleLinks(boolean autoBuildRoleLinks){\r\n    this.autoBuildRoleLinks = autoBuildRoleLinks;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageOptions.output",
	"Comment": "gets the output.system output. include the output from the previous response to maintain intermediate information over multiplerequests.",
	"Method": "Builder output(OutputData output,OutputData output){\r\n    return output;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateValueOptions.newMetadata",
	"Comment": "gets the newmetadata.any metadata related to the entity value.",
	"Method": "Builder newMetadata(Map newMetadata,Map newMetadata){\r\n    return newMetadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryOptions.offset",
	"Comment": "gets the offset.the number of query results to skip at the beginning. for example, if the total number of results that are returnedis 10 and the offset is 8, it returns the last two results.",
	"Method": "Builder offset(long offset,Long offset){\r\n    return offset;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getCreated",
	"Comment": "gets the created.the timestamp for creation of the dialog node.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "io.appium.java_client.android.SupportsNetworkStateManagement.toggleData",
	"Comment": "toggle mobile data and this works on emulator and rooted device.",
	"Method": "void toggleData(){\r\n    CommandExecutionHelper.execute(this, toggleDataCommand());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageInput.options",
	"Comment": "gets the options.properties that control how the assistant responds.",
	"Method": "Builder options(MessageInputOptions options,MessageInputOptions options){\r\n    return options;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateIntentOptions.newExamples",
	"Comment": "gets the newexamples.an array of user input examples for the intent.",
	"Method": "Builder newExamples(List<CreateExample> newExamples,List<CreateExample> newExamples){\r\n    return newExamples;\r\n}"
}, {
	"Path": "de.danielbechler.diff.introspection.PropertyAccessor.getFieldAnnotations",
	"Comment": "private function to allow looking for the field recursively up the superclasses.",
	"Method": "Set<Annotation> getFieldAnnotations(Class<?> clazz,Set<Annotation> getFieldAnnotations){\r\n    return getFieldAnnotations(readMethod.getDeclaringClass());\r\n}"
}, {
	"Path": "org.javers.common.collections.Arrays.equals",
	"Comment": "unfortunately, java forces us to write such complex codejust to compare two arrays ...",
	"Method": "boolean equals(Object arr1,Object arr2){\r\n    Class<?> c = arr1.getClass();\r\n    argumentCheck(c.isArray(), arr1 + \" is not an array\");\r\n    if (!c.getComponentType().isPrimitive()) {\r\n        c = Object[].class;\r\n    }\r\n    try {\r\n        Method eqMethod = java.util.Arrays.class.getMethod(\"equals\", c, c);\r\n        return (Boolean) eqMethod.invoke(null, arr1, arr2);\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceSystemSettingsDisambiguation.getSensitivity",
	"Comment": "gets the sensitivity.the sensitivity of the disambiguation feature to intent detection conflicts. set toif you want thedisambiguation feature to be triggered more often. this can be useful for testing or demonstration purposes.",
	"Method": "String getSensitivity(){\r\n    return sensitivity;\r\n}"
}, {
	"Path": "io.appium.java_client.android.ListensToLogcatMessages.addLogcatDisconnectionListener",
	"Comment": "adds a new log broadcasting disconnection handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addLogcatDisconnectionListener(Runnable handler){\r\n    getLogcatClient().addDisconnectionHandler(handler);\r\n}"
}, {
	"Path": "org.javers.core.JaversBuilder.bootJsonConverter",
	"Comment": "boots jsonconverter and registers domain aware typeadapters",
	"Method": "Collection<JaversType> bootJsonConverter(){\r\n    JsonConverterBuilder jsonConverterBuilder = jsonConverterBuilder();\r\n    addModule(new ChangeTypeAdaptersModule(getContainer()));\r\n    addModule(new CommitTypeAdaptersModule(getContainer()));\r\n    if (new RequiredMongoSupportPredicate().test(repository)) {\r\n        jsonConverterBuilder.registerNativeGsonDeserializer(Long.class, new MongoLong64JsonDeserializer());\r\n    }\r\n    jsonConverterBuilder.registerJsonTypeAdapters(getComponents(JsonTypeAdapter.class));\r\n    jsonConverterBuilder.registerNativeGsonDeserializer(Diff.class, new DiffTypeDeserializer());\r\n    JsonConverter jsonConverter = jsonConverterBuilder.build();\r\n    addComponent(jsonConverter);\r\n    return Lists.transform(jsonConverterBuilder.getValueTypes(), c -> new ValueType(c));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifyOptions.imagesFileContentType",
	"Comment": "gets the imagesfilecontenttype.the content type of imagesfile. values for this parameter can be obtained from the httpmediatype class.",
	"Method": "Builder imagesFileContentType(String imagesFileContentType,String imagesFileContentType){\r\n    return imagesFileContentType;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removeNamedGroupingPolicy",
	"Comment": "removenamedgroupingpolicy removes a role inheritance rule from the current named policy.",
	"Method": "boolean removeNamedGroupingPolicy(String ptype,List<String> params,boolean removeNamedGroupingPolicy,String ptype,String params){\r\n    return removeNamedGroupingPolicy(ptype, Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutputDebug.getNodesVisited",
	"Comment": "gets the nodesvisited.an array of objects containing detailed diagnostic information about the nodes that were triggered duringprocessing of the input message.",
	"Method": "List<DialogNodesVisited> getNodesVisited(){\r\n    return nodesVisited;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.SupportedFeatures.isCustomLanguageModel",
	"Comment": "gets the customlanguagemodel.indicates whether the customization interface can be used to create a custom language model based on the languagemodel.",
	"Method": "Boolean isCustomLanguageModel(){\r\n    return customLanguageModel;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.AbstractCasFilter.setServerName",
	"Comment": "note that trailing slashes should not be used in the servername.as a convenience for this common misconfiguration, we strip them from the providedvalue.",
	"Method": "void setServerName(String serverName){\r\n    if (serverName != null && serverName.endsWith(\"/\")) {\r\n        this.serverName = serverName.substring(0, serverName.length() - 1);\r\n        logger.info(\"Eliminated extra slash from serverName [{}].  It is now [{}]\", serverName, this.serverName);\r\n    } else {\r\n        this.serverName = serverName;\r\n    }\r\n}"
}, {
	"Path": "net.spy.memcached.CASMutator.cas",
	"Comment": "cas a new value in for a key.note that if initial is null, this method will only update existing values.",
	"Method": "T cas(String key,T initial,int initialExp,CASMutation<T> m){\r\n    T rv = initial;\r\n    boolean done = false;\r\n    for (int i = 0; !done && i < max; i++) {\r\n        CASValue<T> casval = client.gets(key, transcoder);\r\n        T current = null;\r\n        if (casval != null) {\r\n            T tmp = casval.getValue();\r\n            current = tmp;\r\n        }\r\n        if (current != null) {\r\n            assert casval != null : \"casval was null with a current value\";\r\n            rv = m.getNewValue(current);\r\n            if (client.cas(key, casval.getCas(), initialExp, rv, transcoder) == CASResponse.OK) {\r\n                done = true;\r\n            }\r\n        } else {\r\n            if (initial == null) {\r\n                done = true;\r\n                rv = null;\r\n            } else if (client.add(key, initialExp, initial, transcoder).get()) {\r\n                done = true;\r\n                rv = initial;\r\n            }\r\n        }\r\n    }\r\n    if (!done) {\r\n        throw new RuntimeException(\"Couldn't get a CAS in \" + max + \" attempts\");\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteCounterexample",
	"Comment": "delete counterexample.delete a counterexample from a workspace. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteCounterexample(DeleteCounterexampleOptions deleteCounterexampleOptions){\r\n    Validator.notNull(deleteCounterexampleOptions, \"deleteCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { deleteCounterexampleOptions.workspaceId(), deleteCounterexampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.DeleteCorpusOptions.corpusName",
	"Comment": "gets the corpusname.the name of the corpus for the custom language model.",
	"Method": "Builder corpusName(String corpusName,String corpusName){\r\n    return corpusName;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.WhereTransform.checkForOrChain",
	"Comment": "identifies a common pattern of a chain of ors so that it can be encoded more simply.",
	"Method": "void checkForOrChain(List<List<TypedValue>> disjunction){\r\n    List<TypedValue> canIgnoreClauses = new ArrayList();\r\n    for (int n = 0; n < disjunction.size(); n++) {\r\n        List<TypedValue> conjunction = disjunction.get(n);\r\n        if (conjunction.size() != 1)\r\n            break;\r\n        TypedValue not = TypedValue.NotValue.invert(conjunction.get(0));\r\n        canIgnoreClauses.add(not);\r\n        for (int i = n + 1; i < disjunction.size(); i++) disjunction.get(i).remove(not);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Profile.getValues",
	"Comment": "gets the values.detailed results for the values characteristics inferred from the input text.",
	"Method": "List<Trait> getValues(){\r\n    return values;\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.StringUtil.substringBetween",
	"Comment": "returns the first instance of string found exclusively between part1 and part2.",
	"Method": "String substringBetween(String s,String part1,String part2){\r\n    String sub = null;\r\n    int i = s.indexOf(part1);\r\n    int j = s.indexOf(part2, i + part1.length());\r\n    if (i != -1 && j != -1) {\r\n        int nStart = i + part1.length();\r\n        sub = s.substring(nStart, j);\r\n    }\r\n    return sub;\r\n}"
}, {
	"Path": "io.appium.java_client.android.HasSupportedPerformanceDataType.getPerformanceData",
	"Comment": "returns the resource usage information of the application. the resource is one of the system statewhich means cpu, memory, network traffic, and battery.",
	"Method": "List<List<Object>> getPerformanceData(String packageName,String dataType,int dataReadTimeout){\r\n    return CommandExecutionHelper.execute(this, getPerformanceDataCommand(packageName, dataType, dataReadTimeout));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateWorkspaceOptions.name",
	"Comment": "gets the name.the name of the workspace. this string cannot contain carriage return, newline, or tab characters, and it must beno longer than 64 characters.",
	"Method": "Builder name(String name,String name){\r\n    return name;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newUserLabel",
	"Comment": "gets the newuserlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "Builder newUserLabel(String newUserLabel,String newUserLabel){\r\n    return newUserLabel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentStatus.getConfigurationId",
	"Comment": "gets the configurationid.the unique identifier for the configuration.",
	"Method": "String getConfigurationId(){\r\n    return configurationId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AcousticModel.getOwner",
	"Comment": "gets the owner.the guid of the service credentials for the instance of the service that owns the custom acoustic model.",
	"Method": "String getOwner(){\r\n    return owner;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListWorkspacesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.deleteCredentials",
	"Comment": "delete credentials.deletes a set of stored credentials from your discovery instance.",
	"Method": "ServiceCall<Void> deleteCredentials(DeleteCredentialsOptions deleteCredentialsOptions){\r\n    Validator.notNull(deleteCredentialsOptions, \"deleteCredentialsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"credentials\" };\r\n    String[] pathParameters = { deleteCredentialsOptions.environmentId(), deleteCredentialsOptions.credentialId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessageBaseCase.testGetEnginePrivate",
	"Comment": "test of getengineprivate method, of class responsemessage.",
	"Method": "void testGetEnginePrivate(){\r\n    long expResult = 0L;\r\n    long result = instance.getEnginePrivate();\r\n    assertEquals(expResult, result);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.ConsumptionPreferencesCategory.getConsumptionPreferences",
	"Comment": "gets the consumptionpreferences.detailed results inferred from the input text for the individual preferences of the category.",
	"Method": "List<ConsumptionPreferences> getConsumptionPreferences(){\r\n    return consumptionPreferences;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.WordAlternativeResults.getEndTime",
	"Comment": "gets the endtime.the end time in seconds of the word from the input audio that corresponds to the word alternatives.",
	"Method": "Double getEndTime(){\r\n    return endTime;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageOptions.output",
	"Comment": "gets the output.system output. include the output from the previous response to maintain intermediate information over multiplerequests.",
	"Method": "Builder output(OutputData output,OutputData output){\r\n    return output;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryOptions.offset",
	"Comment": "gets the offset.the number of query results to skip at the beginning. for example, if the total number of results that are returnedis 10 and the offset is 8, it returns the last two results.",
	"Method": "Builder offset(long offset,Long offset){\r\n    return offset;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteSynonym",
	"Comment": "delete entity value synonym.delete a synonym from an entity value.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteSynonym(DeleteSynonymOptions deleteSynonymOptions){\r\n    Validator.notNull(deleteSynonymOptions, \"deleteSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { deleteSynonymOptions.workspaceId(), deleteSynonymOptions.entity(), deleteSynonymOptions.value(), deleteSynonymOptions.synonym() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "io.appium.java_client.ios.IOSDriver.runAppInBackground",
	"Comment": "runs the current app as a background app for the number of secondsor minimizes the app.",
	"Method": "void runAppInBackground(Duration duration){\r\n    execute(RUN_APP_IN_BACKGROUND, prepareArguments(\"seconds\", prepareArguments(\"timeout\", duration.toMillis())));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ValueExport.getPatterns",
	"Comment": "gets the patterns.an array containing any patterns for the entity value.",
	"Method": "List<String> getPatterns(){\r\n    return patterns;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getConditions",
	"Comment": "gets the conditions.the condition that triggers the dialog node.",
	"Method": "String getConditions(){\r\n    return conditions;\r\n}"
}, {
	"Path": "io.appium.java_client.service.local.AppiumServiceBuilder.usingPort",
	"Comment": "sets which port the appium server should be started on. a value of 0 indicates that anyfree port may be used.",
	"Method": "AppiumServiceBuilder usingPort(int port){\r\n    return super.usingPort(port);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceSystemSettings.getTooling",
	"Comment": "gets the tooling.workspace settings related to the conversation tool.",
	"Method": "WorkspaceSystemSettingsTooling getTooling(){\r\n    return tooling;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listExamples",
	"Comment": "list user input examples.list the user input examples for an intent, optionally including contextual entity mentions.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<ExampleCollection> listExamples(ListExamplesOptions listExamplesOptions){\r\n    Validator.notNull(listExamplesOptions, \"listExamplesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { listExamplesOptions.workspaceId(), listExamplesOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listExamplesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listExamplesOptions.pageLimit()));\r\n    }\r\n    if (listExamplesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listExamplesOptions.includeCount()));\r\n    }\r\n    if (listExamplesOptions.sort() != null) {\r\n        builder.query(\"sort\", listExamplesOptions.sort());\r\n    }\r\n    if (listExamplesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listExamplesOptions.cursor());\r\n    }\r\n    if (listExamplesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listExamplesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ExampleCollection.class));\r\n}"
}, {
	"Path": "jssc.SerialPort.readHexString",
	"Comment": "read all available bytes from port like a hex string with setted separator",
	"Method": "String readHexString(int byteCount,String readHexString,int byteCount,String separator,String readHexString,int byteCount,int timeout,String readHexString,int byteCount,String separator,int timeout,String readHexString,String readHexString,String separator){\r\n    checkPortOpened(\"readHexString()\");\r\n    int byteCount = getInputBufferBytesCount();\r\n    if (byteCount <= 0) {\r\n        return null;\r\n    }\r\n    return readHexString(byteCount, separator);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.CreateModelOptions.parallelCorpus",
	"Comment": "gets the parallelcorpus.a tmx file that contains entries that are treated as a parallel corpus instead of a glossary.",
	"Method": "Builder parallelCorpus(InputStream parallelCorpus,Builder parallelCorpus,File parallelCorpus,InputStream parallelCorpus){\r\n    return parallelCorpus;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListIntentsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateWorkspaceOptions.description",
	"Comment": "gets the description.the description of the workspace. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "de.danielbechler.diff.selector.ElementSelector.toString",
	"Comment": "the string representation will only be used to print readable property paths for debug purposes.",
	"Method": "String toString(){\r\n    return toHumanReadableString();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogSuggestion.getOutput",
	"Comment": "gets the output.the dialog output that will be returned from the watson assistant service if the user selects the correspondingoption.",
	"Method": "Map getOutput(){\r\n    return output;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NormalizationOperation.getDestinationField",
	"Comment": "gets the destinationfield.the destination field for the operation.",
	"Method": "String getDestinationField(){\r\n    return destinationField;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.updateCredentials",
	"Comment": "update credentials.updates an existing set of source credentials.all credentials are sent over an encrypted connection and encrypted at rest.",
	"Method": "ServiceCall<Credentials> updateCredentials(UpdateCredentialsOptions updateCredentialsOptions){\r\n    Validator.notNull(updateCredentialsOptions, \"updateCredentialsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"credentials\" };\r\n    String[] pathParameters = { updateCredentialsOptions.environmentId(), updateCredentialsOptions.credentialId() };\r\n    RequestBuilder builder = RequestBuilder.put(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateCredentialsOptions.sourceType() != null) {\r\n        contentJson.addProperty(\"source_type\", updateCredentialsOptions.sourceType());\r\n    }\r\n    if (updateCredentialsOptions.credentialDetails() != null) {\r\n        contentJson.add(\"credential_details\", GsonSingleton.getGson().toJsonTree(updateCredentialsOptions.credentialDetails()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Credentials.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateDocumentOptions.file",
	"Comment": "gets the file.the content of the document to ingest. the maximum supported file size is 50 megabytes. files larger than 50megabytes is rejected.",
	"Method": "Builder file(InputStream file,Builder file,File file,InputStream file){\r\n    return file;\r\n}"
}, {
	"Path": "com.jenkov.nioserver.Message.writePartialMessageToMessage",
	"Comment": "in case the buffer backing the nextmessage contains more than one http message, move all data after the firstmessage to a new message object.",
	"Method": "void writePartialMessageToMessage(Message message,int endIndex){\r\n    int startIndexOfPartialMessage = message.offset + endIndex;\r\n    int lengthOfPartialMessage = (message.offset + message.length) - endIndex;\r\n    System.arraycopy(message.sharedArray, startIndexOfPartialMessage, this.sharedArray, this.offset, lengthOfPartialMessage);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.Assistant.message",
	"Comment": "send user input to assistant.send user input to an assistant and receive a response.there is no rate limit for this operation.",
	"Method": "ServiceCall<MessageResponse> message(MessageOptions messageOptions){\r\n    Validator.notNull(messageOptions, \"messageOptions cannot be null\");\r\n    String[] pathSegments = { \"v2/assistants\", \"sessions\", \"message\" };\r\n    String[] pathParameters = { messageOptions.assistantId(), messageOptions.sessionId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (messageOptions.input() != null) {\r\n        contentJson.add(\"input\", GsonSingleton.getGson().toJsonTree(messageOptions.input()));\r\n    }\r\n    if (messageOptions.context() != null) {\r\n        contentJson.add(\"context\", GsonSingleton.getGson().toJsonTree(messageOptions.context()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(MessageResponse.class));\r\n}"
}, {
	"Path": "jssc.SerialPortTimeoutException.getPortName",
	"Comment": "getting port name during operation with which the exception was called",
	"Method": "String getPortName(){\r\n    return portName;\r\n}"
}, {
	"Path": "org.javers.core.metamodel.object.ValueObjectId.getFragment",
	"Comment": "path to valueobject, should be unique in the entity instance scope.usually, property name.it works like fragment identifier in url",
	"Method": "String getFragment(){\r\n    return fragment;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Collection.getDiskUsage",
	"Comment": "gets the diskusage.the object providing information about the disk usage of the collection. present only when retrieving details of acollection.",
	"Method": "CollectionDiskUsage getDiskUsage(){\r\n    return diskUsage;\r\n}"
}, {
	"Path": "org.jblas.ComplexDoubleMatrix.diag",
	"Comment": "construct a matrix of arbitrary shape and set the diagonal accordingto a passed vector.length of needs to be smaller than rows or columns.",
	"Method": "ComplexDoubleMatrix diag(ComplexDoubleMatrix x,ComplexDoubleMatrix diag,ComplexDoubleMatrix x,int rows,int columns,ComplexDoubleMatrix diag){\r\n    ComplexDoubleMatrix d = new ComplexDoubleMatrix(rows);\r\n    NativeBlas.zcopy(rows, data, 0, rows + 1, d.data, 0, 1);\r\n    return d;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.IdentifiableLanguages.getLanguages",
	"Comment": "gets the languages.a list of all languages that the service can identify.",
	"Method": "List<IdentifiableLanguage> getLanguages(){\r\n    return languages;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.model.Policy.hasPolicy",
	"Comment": "haspolicy determines whether a model has the specified policy rule.",
	"Method": "boolean hasPolicy(String sec,String ptype,List<String> rule){\r\n    for (List<String> r : model.get(sec).get(ptype).policy) {\r\n        if (Util.arrayEquals(rule, r)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.jblas.Eigen.symmetricEigenvectors",
	"Comment": "computes the eigenvalues and eigenvectors for a symmetric matrix.",
	"Method": "DoubleMatrix[] symmetricEigenvectors(DoubleMatrix A,FloatMatrix[] symmetricEigenvectors,FloatMatrix A){\r\n    A.assertSquare();\r\n    FloatMatrix eigenvalues = new FloatMatrix(A.rows);\r\n    FloatMatrix eigenvectors = A.dup();\r\n    int[] isuppz = new int[2 * A.rows];\r\n    SimpleBlas.syevr('V', 'A', 'U', A.dup(), 0, 0, 0, 0, 0, eigenvalues, eigenvectors, isuppz);\r\n    return new FloatMatrix[] { eigenvectors, FloatMatrix.diag(eigenvalues) };\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImage.getImage",
	"Comment": "gets the image.relative path of the image file if uploaded directly. not returned when the image is passed by url.",
	"Method": "String getImage(){\r\n    return image;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.insertCustomTupleBuilder",
	"Comment": "allows you to register your own java class that can be used as a tuple in some limited situations.",
	"Method": "void insertCustomTupleBuilder(String className,Method builderMethod,Method tupleIndexReaders){\r\n    if (!Modifier.isStatic(builderMethod.getModifiers()))\r\n        throw new IllegalArgumentException(\"Builder method for custom tuple must be a static method\");\r\n    MethodSignature builderSig = MethodSignature.fromMethod(builderMethod);\r\n    safeStaticMethods.add(builderSig);\r\n    insertCustomTupleIndexGetters(tupleIndexReaders);\r\n    CustomTupleInfo tupleInfo = new CustomTupleInfo();\r\n    tupleInfo.className = className;\r\n    tupleInfo.staticBuilder = builderMethod;\r\n    tupleInfo.staticBuilderSig = builderSig;\r\n    customTupleStaticBuilderMethods.put(builderSig, tupleInfo);\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.Recognizer.getRecognizedDataForWave",
	"Comment": "get recognized data from a wave file.this method will encode the wave file to a flac",
	"Method": "GoogleResponse getRecognizedDataForWave(File waveFile,int maxResults,GoogleResponse getRecognizedDataForWave,String waveFile,int maxResults,GoogleResponse getRecognizedDataForWave,File waveFile,GoogleResponse getRecognizedDataForWave,String waveFile){\r\n    return getRecognizedDataForWave(waveFile, 1);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Collection.getSourceCrawl",
	"Comment": "gets the sourcecrawl.object containing source crawl status information.",
	"Method": "SourceStatus getSourceCrawl(){\r\n    return sourceCrawl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageInput.messageType",
	"Comment": "gets the messagetype.the type of user input. currently, only text input is supported.",
	"Method": "Builder messageType(String messageType,String messageType){\r\n    return messageType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEvidenceEntity.getStartOffset",
	"Comment": "gets the startoffset.the start location of the entity text in the identified field. this value is inclusive.",
	"Method": "Long getStartOffset(){\r\n    return startOffset;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEvidence.getEndOffset",
	"Comment": "gets the endoffset.the end location of the evidence in the identified field. this value is inclusive.",
	"Method": "Long getEndOffset(){\r\n    return endOffset;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Intent.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the intent.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutput.getEntities",
	"Comment": "gets the entities.an array of entities identified in the user input.",
	"Method": "List<RuntimeEntity> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListLogsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutputDebug.isBranchExited",
	"Comment": "gets the branchexited.assistant sets this to true when this message response concludes or interrupts a dialog.",
	"Method": "Boolean isBranchExited(){\r\n    return branchExited;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Collection.getDocumentCounts",
	"Comment": "gets the documentcounts.the object providing information about the documents in the collection. present only when retrieving details of acollection.",
	"Method": "DocumentCounts getDocumentCounts(){\r\n    return documentCounts;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.RecognitionJob.getUrl",
	"Comment": "gets the url.the url to use to request information about the job with the check a job method. this field is returned only by create a job method.",
	"Method": "String getUrl(){\r\n    return url;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.NaturalLanguageUnderstandingIT.analyzeTextWithCharacterLimitIsSuccessful",
	"Comment": "analyze text while setting a character limit on the analyzed passage.",
	"Method": "void analyzeTextWithCharacterLimitIsSuccessful(){\r\n    String text = \"But I believe this thinking is wrong. I believe the road of true democracy remains the better path.\" + \" I believe that in the 21st century, economies can only grow to a certain point until they need to open up\" + \" -- because entrepreneurs need to access information in order to invent; young people need a global\" + \" education in order to thrive; independent media needs to check the abuses of power.\";\r\n    Long characterLimit = 10L;\r\n    Features features = new Features.Builder().categories(new CategoriesOptions()).build();\r\n    AnalyzeOptions parameters = new AnalyzeOptions.Builder().text(text).features(features).returnAnalyzedText(true).limitTextCharacters(characterLimit).build();\r\n    AnalysisResults results = service.analyze(parameters).execute();\r\n    assertNotNull(results);\r\n    assertNotNull(results.getAnalyzedText());\r\n    assertTrue(results.getAnalyzedText().length() == characterLimit);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.nextStep",
	"Comment": "gets the nextstep.the next step to be executed in dialog processing.",
	"Method": "Builder nextStep(DialogNodeNextStep nextStep,DialogNodeNextStep nextStep){\r\n    return nextStep;\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.Complex.cos",
	"Comment": "return a new complex object whose value is the complex cosine of this",
	"Method": "Complex cos(){\r\n    return new Complex(Math.cos(re) * Math.cosh(im), -Math.sin(re) * Math.sinh(im));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.TestConfigurationInEnvironmentOptions.fileContentType",
	"Comment": "gets the filecontenttype.the content type of file. values for this parameter can be obtained from the httpmediatype class.",
	"Method": "Builder fileContentType(String fileContentType,String fileContentType){\r\n    return fileContentType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.IdentifiedLanguage.getLanguage",
	"Comment": "gets the language.the language code for an identified language.",
	"Method": "String getLanguage(){\r\n    return language;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageOptions.nodesVisitedDetails",
	"Comment": "gets the nodesvisiteddetails.whether to include additional diagnostic information about the dialog nodes that were visited during processing ofthe message.",
	"Method": "Builder nodesVisitedDetails(Boolean nodesVisitedDetails,Boolean nodesVisitedDetails){\r\n    return nodesVisitedDetails;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.ListVoiceModelsOptions.language",
	"Comment": "gets the language.the language for which custom voice models that are owned by the requesting service credentials are to be returned.omit the parameter to see all custom voice models that are owned by the requester.",
	"Method": "Builder language(String language,String language){\r\n    return language;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.SpeechModels.getModels",
	"Comment": "gets the models.an array of objects that provides information about each available model.",
	"Method": "List<SpeechModel> getModels(){\r\n    return models;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ValueExport.getSynonyms",
	"Comment": "gets the synonyms.an array containing any synonyms for the entity value.",
	"Method": "List<String> getSynonyms(){\r\n    return synonyms;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.http.Headers.values",
	"Comment": "returns an immutable list of the header values for the specified name.",
	"Method": "List<String> values(String name){\r\n    return this.headers.values(name);\r\n}"
}, {
	"Path": "org.jinq.jpa.CreateJpaDb.isRegexMatch_DbFunction",
	"Comment": "used to test the invocation of custom db functions installed on the database",
	"Method": "int isRegexMatch_DbFunction(String str,String regex){\r\n    return str.matches(regex) ? 1 : 0;\r\n}"
}, {
	"Path": "jssc.SerialPortTimeoutException.getMethodName",
	"Comment": "getting method name during execution of which the exception was called",
	"Method": "String getMethodName(){\r\n    return methodName;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.CommonUtils.isBlank",
	"Comment": "determines if a string is blank or not. a string is blank if its empty orif it only contains spaces.",
	"Method": "boolean isBlank(String string){\r\n    return isEmpty(string) || string.trim().isEmpty();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.EventData.getSessionToken",
	"Comment": "gets the sessiontoken.the session token that was returned as part of the query results that this event is associated with.",
	"Method": "String getSessionToken(){\r\n    return sessionToken;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateCounterexample",
	"Comment": "update counterexample.update the text of a counterexample. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Counterexample> updateCounterexample(UpdateCounterexampleOptions updateCounterexampleOptions){\r\n    Validator.notNull(updateCounterexampleOptions, \"updateCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { updateCounterexampleOptions.workspaceId(), updateCounterexampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateCounterexampleOptions.newText() != null) {\r\n        contentJson.addProperty(\"text\", updateCounterexampleOptions.newText());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Counterexample.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AddAudioOptions.audioName",
	"Comment": "gets the audioname.the name of the new audio resource for the custom acoustic model. use a localized name that matches the language ofthe custom model and reflects the contents of the resource.include a maximum of 128 characters in the name.do not include spaces, slashes, or backslashes in the name.do not use the name of an audio resource that has already been added to the custom model.",
	"Method": "Builder audioName(String audioName,String audioName){\r\n    return audioName;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.WordAlternativeResult.getConfidence",
	"Comment": "gets the confidence.a confidence score for the word alternative hypothesis in the range of 0.0 to 1.0.",
	"Method": "Double getConfidence(){\r\n    return confidence;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Intent.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the intent.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageResponse.getOutput",
	"Comment": "gets the output.assistant output to be rendered or processed by the client.",
	"Method": "MessageOutput getOutput(){\r\n    return output;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EntitiesResult.getDisambiguation",
	"Comment": "gets the disambiguation.disambiguation information for the entity.",
	"Method": "DisambiguationResult getDisambiguation(){\r\n    return disambiguation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.nextStep",
	"Comment": "gets the nextstep.the next step to be executed in dialog processing.",
	"Method": "Builder nextStep(DialogNodeNextStep nextStep,DialogNodeNextStep nextStep){\r\n    return nextStep;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.AggregationResult.getAggregations",
	"Comment": "gets the aggregations.aggregations returned in the case of chained aggregations.",
	"Method": "List<QueryAggregation> getAggregations(){\r\n    return aggregations;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.actions",
	"Comment": "gets the actions.an array of objects describing any actions to be invoked by the dialog node.",
	"Method": "Builder actions(List<DialogNodeAction> actions,List<DialogNodeAction> actions){\r\n    return actions;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.model.Policy.getFilteredPolicy",
	"Comment": "getfilteredpolicy gets rules based on field filters from a policy.",
	"Method": "List<List<String>> getFilteredPolicy(String sec,String ptype,int fieldIndex,String fieldValues){\r\n    List<List<String>> res = new ArrayList();\r\n    for (List<String> rule : model.get(sec).get(ptype).policy) {\r\n        boolean matched = true;\r\n        for (int i = 0; i < fieldValues.length; i++) {\r\n            String fieldValue = fieldValues[i];\r\n            if (!fieldValue.equals(\"\") && !rule.get(fieldIndex + i).equals(fieldValue)) {\r\n                matched = false;\r\n                break;\r\n            }\r\n        }\r\n        if (matched) {\r\n            res.add(rule);\r\n        }\r\n    }\r\n    return res;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.SearchStatus.getStatus",
	"Comment": "gets the status.the current status of continuous relevancy training for this environment.",
	"Method": "String getStatus(){\r\n    return status;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.KeywordsResult.getRelevance",
	"Comment": "gets the relevance.relevance score from 0 to 1. higher values indicate greater relevance.",
	"Method": "Double getRelevance(){\r\n    return relevance;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListCounterexamplesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.darkprograms.speech.translator.GoogleTranslate.shr32",
	"Comment": "an implementation of an unsigned right shift.\tnecessary since java does not have unsigned ints.",
	"Method": "int shr32(int x,int bits){\r\n    if (x < 0) {\r\n        long x_l = 0xffffffffl + x + 1;\r\n        return (int) (x_l >> bits);\r\n    }\r\n    return x >> bits;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.TestDocument.getConfigurationId",
	"Comment": "gets the configurationid.the unique identifier for the configuration.",
	"Method": "String getConfigurationId(){\r\n    return configurationId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.EntityCollection.getEntities",
	"Comment": "gets the entities.an array of objects describing the entities defined for the workspace.",
	"Method": "List<EntityExport> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.LanguageTranslator.identify",
	"Comment": "identify language.identifies the language of the input text.",
	"Method": "ServiceCall<IdentifiedLanguages> identify(IdentifyOptions identifyOptions){\r\n    Validator.notNull(identifyOptions, \"identifyOptions cannot be null\");\r\n    String[] pathSegments = { \"v2/identify\" };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));\r\n    builder.bodyContent(identifyOptions.text(), \"text/plain\");\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(IdentifiedLanguages.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.CreateModelOptions.forcedGlossaryFilename",
	"Comment": "gets the forcedglossaryfilename.the filename for forcedglossary.",
	"Method": "Builder forcedGlossaryFilename(String forcedGlossaryFilename,String forcedGlossaryFilename){\r\n    return forcedGlossaryFilename;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.isKnownConvertedType",
	"Comment": "returns true if a class refers to a known type used by attributeconverters",
	"Method": "boolean isKnownConvertedType(String className){\r\n    return convertedTypes.contains(className);\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.project",
	"Comment": "computes the projection coefficient of other on this.the returned scalar times this is the orthogonal projectionof other on this.",
	"Method": "double project(DoubleMatrix other){\r\n    other.checkLength(length);\r\n    double norm = 0, dot = 0;\r\n    for (int i = 0; i < this.length; i++) {\r\n        double x = get(i);\r\n        norm += x * x;\r\n        dot += x * other.get(i);\r\n    }\r\n    return dot / norm;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CreateCollectionOptions.configurationId",
	"Comment": "gets the configurationid.the id of the configuration in which the collection is to be created.",
	"Method": "Builder configurationId(String configurationId,String configurationId){\r\n    return configurationId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogExport.getRequestTimestamp",
	"Comment": "gets the requesttimestamp.the timestamp for receipt of the message.",
	"Method": "String getRequestTimestamp(){\r\n    return requestTimestamp;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Workspace.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the workspace.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEvidenceEntity.getText",
	"Comment": "gets the text.the original text of this entity as found in the evidence field.",
	"Method": "String getText(){\r\n    return text;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.NaturalLanguageUnderstanding.listModels",
	"Comment": "list models.lists available models for relations and entities features, including watson knowledge studio custom models thatyou have created and linked to your natural language understanding service.",
	"Method": "ServiceCall<ListModelsResults> listModels(ListModelsOptions listModelsOptions,ServiceCall<ListModelsResults> listModels){\r\n    return listModels(null);\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.Complex.toString",
	"Comment": "return a string representation of the invoking complex object",
	"Method": "String toString(){\r\n    if (im == 0)\r\n        return re + \"\";\r\n    if (re == 0)\r\n        return im + \"i\";\r\n    if (im < 0)\r\n        return re + \" - \" + (-im) + \"i\";\r\n    return re + \" + \" + im + \"i\";\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Profile.getNeeds",
	"Comment": "gets the needs.detailed results for the needs characteristics inferred from the input text.",
	"Method": "List<Trait> getNeeds(){\r\n    return needs;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.IntentExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the intent.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.LanguageTranslator.createModel",
	"Comment": "create model.uploads a tmx glossary file on top of a domain to customize a translation model.depending on the size of the file, training can range from minutes for a glossary to several hours for a largeparallel corpus. glossary files must be less than 10 mb. the cumulative file size of all uploaded glossary andcorpus files is limited to 250 mb.",
	"Method": "ServiceCall<TranslationModel> createModel(CreateModelOptions createModelOptions){\r\n    Validator.notNull(createModelOptions, \"createModelOptions cannot be null\");\r\n    Validator.isTrue((createModelOptions.forcedGlossary() != null) || (createModelOptions.parallelCorpus() != null) || (createModelOptions.monolingualCorpus() != null), \"At least one of forcedGlossary, parallelCorpus, or monolingualCorpus must be supplied.\");\r\n    String[] pathSegments = { \"v2/models\" };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));\r\n    builder.query(\"base_model_id\", createModelOptions.baseModelId());\r\n    if (createModelOptions.name() != null) {\r\n        builder.query(\"name\", createModelOptions.name());\r\n    }\r\n    MultipartBody.Builder multipartBuilder = new MultipartBody.Builder();\r\n    multipartBuilder.setType(MultipartBody.FORM);\r\n    if (createModelOptions.forcedGlossary() != null) {\r\n        RequestBody forcedGlossaryBody = RequestUtils.inputStreamBody(createModelOptions.forcedGlossary(), \"application/octet-stream\");\r\n        multipartBuilder.addFormDataPart(\"forced_glossary\", createModelOptions.forcedGlossaryFilename(), forcedGlossaryBody);\r\n    }\r\n    if (createModelOptions.parallelCorpus() != null) {\r\n        RequestBody parallelCorpusBody = RequestUtils.inputStreamBody(createModelOptions.parallelCorpus(), \"application/octet-stream\");\r\n        multipartBuilder.addFormDataPart(\"parallel_corpus\", createModelOptions.parallelCorpusFilename(), parallelCorpusBody);\r\n    }\r\n    if (createModelOptions.monolingualCorpus() != null) {\r\n        RequestBody monolingualCorpusBody = RequestUtils.inputStreamBody(createModelOptions.monolingualCorpus(), \"text/plain\");\r\n        multipartBuilder.addFormDataPart(\"monolingual_corpus\", createModelOptions.monolingualCorpusFilename(), monolingualCorpusBody);\r\n    }\r\n    builder.body(multipartBuilder.build());\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TranslationModel.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateEntity.values",
	"Comment": "gets the values.an array of objects describing the entity values.",
	"Method": "Builder values(List<CreateValue> values,List<CreateValue> values){\r\n    return values;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listSynonyms",
	"Comment": "list entity value synonyms.list the synonyms for an entity value.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<SynonymCollection> listSynonyms(ListSynonymsOptions listSynonymsOptions){\r\n    Validator.notNull(listSynonymsOptions, \"listSynonymsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { listSynonymsOptions.workspaceId(), listSynonymsOptions.entity(), listSynonymsOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listSynonymsOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listSynonymsOptions.pageLimit()));\r\n    }\r\n    if (listSynonymsOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listSynonymsOptions.includeCount()));\r\n    }\r\n    if (listSynonymsOptions.sort() != null) {\r\n        builder.query(\"sort\", listSynonymsOptions.sort());\r\n    }\r\n    if (listSynonymsOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listSynonymsOptions.cursor());\r\n    }\r\n    if (listSynonymsOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listSynonymsOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(SynonymCollection.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.SourceOptionsFolder.getLimit",
	"Comment": "gets the limit.the maximum number of documents to crawl for this folder. by default, all documents in the folder are crawled.",
	"Method": "Long getLimit(){\r\n    return limit;\r\n}"
}, {
	"Path": "io.appium.java_client.screenrecording.ScreenRecordingUploadOptions.withRemotePath",
	"Comment": "the path to the remote location, where the resulting video should be uploaded.",
	"Method": "ScreenRecordingUploadOptions withRemotePath(String remotePath){\r\n    this.remotePath = checkNotNull(remotePath);\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListEntitiesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.darkprograms.speech.translator.GoogleTranslate.translate",
	"Comment": "translate text from sourcelanguage to targetlanguage\tspecifying the sourcelanguage greatly improves accuracy over short strings",
	"Method": "String translate(String text,String translate,String targetLanguage,String text,String translate,String sourceLanguage,String targetLanguage,String text){\r\n    String urlText = generateURL(sourceLanguage, targetLanguage, text);\r\n    URL url = new URL(urlText);\r\n    String rawData = urlToText(url);\r\n    if (rawData == null) {\r\n        return null;\r\n    }\r\n    String[] raw = rawData.split(\"\\\"\");\r\n    if (raw.length < 2) {\r\n        return null;\r\n    }\r\n    return raw[1];\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ValueCollection.getPagination",
	"Comment": "gets the pagination.an object defining the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.createWorkspace",
	"Comment": "create workspace.create a workspace based on component objects. you must provide workspace components defining the content of thenew workspace.this operation is limited to 30 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Workspace> createWorkspace(CreateWorkspaceOptions createWorkspaceOptions,ServiceCall<Workspace> createWorkspace){\r\n    return createWorkspace(null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateIntent.description",
	"Comment": "gets the description.the description of the intent. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogRuntimeResponseGeneric.getResponseType",
	"Comment": "gets the responsetype.the type of response returned by the dialog node. the specified response type must be supported by the clientapplication or channel. suggestion response type is part of the disambiguation feature, which is only available forpremium users.",
	"Method": "String getResponseType(){\r\n    return responseType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.deleteTokenizationDictionary",
	"Comment": "delete tokenization dictionary.delete the tokenization dictionary from the collection.",
	"Method": "ServiceCall<Void> deleteTokenizationDictionary(DeleteTokenizationDictionaryOptions deleteTokenizationDictionaryOptions){\r\n    Validator.notNull(deleteTokenizationDictionaryOptions, \"deleteTokenizationDictionaryOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"word_lists/tokenization_dictionary\" };\r\n    String[] pathParameters = { deleteTokenizationDictionaryOptions.environmentId(), deleteTokenizationDictionaryOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "ch.epfl.labos.iu.orm.queryll2.path.SymbExSimplifier.comparisonOpValueWithZero",
	"Comment": "helper for handling comparisons to zero. returns val if nothing is rewritten.",
	"Method": "TypedValue comparisonOpValueWithZero(TypedValue.ComparisonValue val,TypedValue.ComparisonValue.ComparisonOp op,TypedValue other){\r\n    if ((op == TypedValue.ComparisonValue.ComparisonOp.eq || op == TypedValue.ComparisonValue.ComparisonOp.ne) && other instanceof TypedValue.ComparisonValue) {\r\n        if (op != TypedValue.ComparisonValue.ComparisonOp.eq)\r\n            return other;\r\n        else\r\n            return ((TypedValue.ComparisonValue) other).inverseValue();\r\n    }\r\n    if ((op == TypedValue.ComparisonValue.ComparisonOp.eq || op == TypedValue.ComparisonValue.ComparisonOp.ne) && other.getType() == Type.BOOLEAN_TYPE) {\r\n        if (op != TypedValue.ComparisonValue.ComparisonOp.eq)\r\n            return other;\r\n        else\r\n            return new TypedValue.NotValue(other);\r\n    }\r\n    if (other instanceof TypedValue.MathOpValue && ((TypedValue.MathOpValue) other).op == TypedValue.MathOpValue.Op.cmp) {\r\n        TypedValue newLeft = ((TypedValue.MathOpValue) other).left;\r\n        TypedValue newRight = ((TypedValue.MathOpValue) other).right;\r\n        return new TypedValue.ComparisonValue(op, newLeft, newRight);\r\n    }\r\n    return val;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryRelationsFilter.getEntityTypes",
	"Comment": "gets the entitytypes.a list of entity types to include or exclude from the query.",
	"Method": "QueryFilterType getEntityTypes(){\r\n    return entityTypes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.NaturalLanguageUnderstandingTest.testModelOptions",
	"Comment": "test some of the model constructors. pump up the code coverage numbers",
	"Method": "void testModelOptions(){\r\n    Features features = new Features.Builder().concepts(null).categories(null).emotion(null).entities(null).keywords(null).metadata(null).relations(null).semanticRoles(null).sentiment(null).build();\r\n    AnalyzeOptions analyzeOptions = new AnalyzeOptions.Builder().text(\"text\").html(\"html\").url(\"url\").features(features).clean(true).xpath(\"xpath\").fallbackToRaw(false).returnAnalyzedText(true).language(\"language\").build();\r\n    assertEquals(analyzeOptions.text(), \"text\");\r\n    assertEquals(analyzeOptions.html(), \"html\");\r\n    assertEquals(analyzeOptions.url(), \"url\");\r\n    assertEquals(analyzeOptions.features(), features);\r\n    assertEquals(analyzeOptions.clean(), true);\r\n    assertEquals(analyzeOptions.xpath(), \"xpath\");\r\n    assertEquals(analyzeOptions.fallbackToRaw(), false);\r\n    assertEquals(analyzeOptions.returnAnalyzedText(), true);\r\n    assertEquals(analyzeOptions.language(), \"language\");\r\n    analyzeOptions.newBuilder();\r\n    CategoriesOptions categoriesOptions = new CategoriesOptions();\r\n    assertNotNull(categoriesOptions);\r\n    List<String> emotionOptionsTargets = new ArrayList(Arrays.asList(\"target1\", \"target2\"));\r\n    EmotionOptions emotionOptions = new EmotionOptions.Builder().document(true).targets(emotionOptionsTargets).addTargets(\"target3\").build();\r\n    emotionOptionsTargets.add(\"target3\");\r\n    assertEquals(emotionOptions.document(), true);\r\n    assertEquals(emotionOptions.targets(), emotionOptionsTargets);\r\n    emotionOptions.newBuilder();\r\n    EntitiesOptions entitiesOptions = new EntitiesOptions.Builder().emotion(true).limit(10).model(\"model\").sentiment(false).mentions(false).build();\r\n    assertEquals(entitiesOptions.emotion(), true);\r\n    assertEquals(entitiesOptions.limit(), 10, 0);\r\n    assertEquals(entitiesOptions.model(), \"model\");\r\n    assertEquals(entitiesOptions.sentiment(), false);\r\n    assertEquals(entitiesOptions.mentions(), false);\r\n    entitiesOptions.newBuilder();\r\n    assertEquals(features.categories(), null);\r\n    assertEquals(features.concepts(), null);\r\n    assertEquals(features.emotion(), null);\r\n    assertEquals(features.entities(), null);\r\n    assertEquals(features.keywords(), null);\r\n    assertEquals(features.metadata(), null);\r\n    assertEquals(features.relations(), null);\r\n    assertEquals(features.semanticRoles(), null);\r\n    assertEquals(features.sentiment(), null);\r\n    features.newBuilder();\r\n    KeywordsOptions keywordsOptions = new KeywordsOptions.Builder().emotion(true).limit(10).sentiment(false).build();\r\n    assertEquals(keywordsOptions.emotion(), true);\r\n    assertEquals(keywordsOptions.limit(), 10, 0);\r\n    assertEquals(keywordsOptions.sentiment(), false);\r\n    keywordsOptions.newBuilder();\r\n    MetadataOptions metadataOptions = new MetadataOptions();\r\n    assertNotNull(metadataOptions);\r\n    RelationsOptions relationsOptions = new RelationsOptions.Builder().model(\"model\").build();\r\n    assertEquals(relationsOptions.model(), \"model\");\r\n    relationsOptions.newBuilder();\r\n    SemanticRolesOptions semanticRolesOptions = new SemanticRolesOptions.Builder().entities(true).keywords(false).limit(10).build();\r\n    assertEquals(semanticRolesOptions.entities(), true);\r\n    assertEquals(semanticRolesOptions.keywords(), false);\r\n    assertEquals(semanticRolesOptions.limit(), 10, 0);\r\n    semanticRolesOptions.newBuilder();\r\n    List<String> optionsTargets = new ArrayList(Arrays.asList(\"target1\", \"target2\"));\r\n    SentimentOptions sentimentOptions = new SentimentOptions.Builder().document(true).targets(optionsTargets).addTargets(\"target3\").build();\r\n    optionsTargets.add(\"target3\");\r\n    assertEquals(sentimentOptions.document(), true);\r\n    assertEquals(sentimentOptions.targets(), optionsTargets);\r\n    sentimentOptions.newBuilder();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryOptions.passages",
	"Comment": "gets the passages.a passages query that returns the most relevant passages from the results.",
	"Method": "Builder passages(Boolean passages,Boolean passages){\r\n    return passages;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateConfigurationOptions.source",
	"Comment": "gets the source.object containing source parameters for the configuration.",
	"Method": "Builder source(Source source,Source source){\r\n    return source;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.RequestUtils.join",
	"Comment": "creates a string of all elements of an iterable, separated by a separator.",
	"Method": "String join(T[] array,String separator,String join,Iterable<?> iterable,String separator){\r\n    final StringBuilder sb = new StringBuilder();\r\n    boolean first = true;\r\n    for (Object item : iterable) {\r\n        if (first) {\r\n            first = false;\r\n        } else {\r\n            sb.append(separator);\r\n        }\r\n        sb.append(item.toString());\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getUserLabel",
	"Comment": "gets the userlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "String getUserLabel(){\r\n    return userLabel;\r\n}"
}, {
	"Path": "org.jblas.ComplexFloatMatrix.in",
	"Comment": "reads in a matrix from the given data stream. note\tthat the old data of this matrix will be discarded.",
	"Method": "void in(DataInputStream dis){\r\n    if (!dis.readUTF().equals(\"float\"))\r\n        throw new IllegalStateException(\"The matrix in the specified file is not of the correct type!\");\r\n    this.columns = dis.readInt();\r\n    this.rows = dis.readInt();\r\n    final int MAX = dis.readInt();\r\n    data = new float[MAX];\r\n    for (int i = 0; i < MAX; i++) data[i] = dis.readFloat();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getUpdated",
	"Comment": "gets the updated.the timestamp for the most recent update to the dialog node.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListCounterexamplesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "io.appium.java_client.imagecomparison.ComparisonResult.verifyPropertyPresence",
	"Comment": "verifies if the corresponding property is present in the commend resultand throws an exception if not.",
	"Method": "void verifyPropertyPresence(String propertyName){\r\n    if (!commandResult.containsKey(propertyName)) {\r\n        throw new IllegalStateException(String.format(\"There is no '%s' attribute in the resulting command output %s. \" + \"Did you set the options properly?\", propertyName, commandResult));\r\n    }\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.connectionsStatus",
	"Comment": "construct a string containing information about all nodes and their state.",
	"Method": "String connectionsStatus(){\r\n    StringBuilder connStatus = new StringBuilder();\r\n    connStatus.append(\"Connection Status {\");\r\n    for (MemcachedNode node : locator.getAll()) {\r\n        connStatus.append(\" \").append(node.getSocketAddress()).append(\" active: \").append(node.isActive()).append(\", authed: \").append(node.isAuthenticated()).append(MessageFormat.format(\", last read: {0} ms ago\", node.lastReadDelta()));\r\n    }\r\n    connStatus.append(\" }\");\r\n    return connStatus.toString();\r\n}"
}, {
	"Path": "org.jasig.cas.client.jetty.CasAuthenticator.setRoleAttribute",
	"Comment": "sets the name of the cas principal attribute that contains role data.",
	"Method": "void setRoleAttribute(String roleAttribute){\r\n    CommonUtils.isNotBlank(roleAttribute);\r\n    this.roleAttribute = roleAttribute;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getNextStep",
	"Comment": "gets the nextstep.the next step to execute following this dialog node.",
	"Method": "DialogNodeNextStep getNextStep(){\r\n    return nextStep;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.in",
	"Comment": "reads in a matrix from the given data stream. notethat the old data of this matrix will be discarded.",
	"Method": "void in(DataInputStream dis){\r\n    if (!dis.readUTF().equals(\"double\")) {\r\n        throw new IllegalStateException(\"The matrix in the specified file is not of the correct type!\");\r\n    }\r\n    this.columns = dis.readInt();\r\n    this.rows = dis.readInt();\r\n    final int MAX = dis.readInt();\r\n    data = new double[MAX];\r\n    for (int i = 0; i < MAX; i++) {\r\n        data[i] = dis.readDouble();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeCollection.getDialogNodes",
	"Comment": "gets the dialognodes.an array of objects describing the dialog nodes defined for the workspace.",
	"Method": "List<DialogNode> getDialogNodes(){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryPassages.getDocumentId",
	"Comment": "gets the documentid.the unique identifier of the document from which the passage has been extracted.",
	"Method": "String getDocumentId(){\r\n    return documentId;\r\n}"
}, {
	"Path": "org.jinq.hibernate.JinqHibernateStreamProvider.streamAll",
	"Comment": "returns a stream of all the entities of a particular type in a database.",
	"Method": "JPAJinqStream<U> streamAll(Session em,Class<U> entity){\r\n    String entityName = metamodel.entityNameFromClass(entity);\r\n    Optional<JPQLQuery<?>> cachedQuery = hints.useCaching ? cachedQueries.findCachedFindAllEntities(entityName) : null;\r\n    if (cachedQuery == null) {\r\n        JPQLQuery<U> query = JPQLQuery.findAllEntities(entityName);\r\n        cachedQuery = Optional.of(query);\r\n        if (hints.useCaching)\r\n            cachedQuery = cachedQueries.cacheFindAllEntities(entityName, cachedQuery);\r\n    }\r\n    JPQLQuery<U> query = (JPQLQuery<U>) cachedQuery.get();\r\n    return new QueryJPAJinqStream(HibernateQueryComposer.findAllEntities(metamodel, cachedQueries, lambdaAnalyzer, jpqlQueryTransformConfigurationFactory, em, hints, query), new InQueryStreamSource() {\r\n        @Override\r\n        public <S> JinqStream<S> stream(Class<S> entityClass) {\r\n            return streamAll(em, entityClass);\r\n        }\r\n    });\r\n}"
}, {
	"Path": "org.jinq.hibernate.JinqHibernateStreamProvider.streamAll",
	"Comment": "returns a stream of all the entities of a particular type in a database.",
	"Method": "JPAJinqStream<U> streamAll(Session em,Class<U> entity){\r\n    return streamAll(em, entityClass);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogNodesVisited.getConditions",
	"Comment": "gets the conditions.the conditions that trigger the dialog node.",
	"Method": "String getConditions(){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ImageWithFaces.getSourceUrl",
	"Comment": "gets the sourceurl.source of the image before any redirects. not returned when the image is uploaded.",
	"Method": "String getSourceUrl(){\r\n    return sourceUrl;\r\n}"
}, {
	"Path": "de.danielbechler.diff.ObjectDifferBuilder.introspection",
	"Comment": "allows to replace the default bean introspector with a custom\timplementation.",
	"Method": "IntrospectionConfigurer introspection(){\r\n    return introspectionService;\r\n}"
}, {
	"Path": "io.appium.java_client.screenrecording.CanRecordScreen.stopRecordingScreen",
	"Comment": "gather the output from the previously started screen recording to a media filewith default options.",
	"Method": "String stopRecordingScreen(T options,String stopRecordingScreen){\r\n    return this.execute(STOP_RECORDING_SCREEN).getValue().toString();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateExample",
	"Comment": "update user input example.update the text of a user input example.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Example> updateExample(UpdateExampleOptions updateExampleOptions){\r\n    Validator.notNull(updateExampleOptions, \"updateExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { updateExampleOptions.workspaceId(), updateExampleOptions.intent(), updateExampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateExampleOptions.newText() != null) {\r\n        contentJson.addProperty(\"text\", updateExampleOptions.newText());\r\n    }\r\n    if (updateExampleOptions.newMentions() != null) {\r\n        contentJson.add(\"mentions\", GsonSingleton.getGson().toJsonTree(updateExampleOptions.newMentions()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Example.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListSynonymsOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DeleteUserDataOptions.customerId",
	"Comment": "gets the customerid.the customer id for which all data is to be deleted.",
	"Method": "Builder customerId(String customerId,String customerId){\r\n    return customerId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogRuntimeResponseGeneric.getPreference",
	"Comment": "gets the preference.the preferred type of control to display.",
	"Method": "String getPreference(){\r\n    return preference;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateCounterexample",
	"Comment": "update counterexample.update the text of a counterexample. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Counterexample> updateCounterexample(UpdateCounterexampleOptions updateCounterexampleOptions){\r\n    Validator.notNull(updateCounterexampleOptions, \"updateCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { updateCounterexampleOptions.workspaceId(), updateCounterexampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateCounterexampleOptions.newText() != null) {\r\n        contentJson.addProperty(\"text\", updateCounterexampleOptions.newText());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Counterexample.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListCounterexamplesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.JPAQueryComposerCache.findInCache",
	"Comment": "looks up whether a certain transformation is already in the cache or not.",
	"Method": "Optional<JPQLQuery<?>> findInCache(JPQLQuery<?> base,String transformationType,String[] lambdaSources,Optional<JPQLQuery<?>> findInCache,JPQLQuery<?> base1,JPQLQuery<?> base2,String transformationType,String[] lambdaSources){\r\n    return cacheQuery(base1, base2, transformationType, lambdaSources, null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageOptions.nodesVisitedDetails",
	"Comment": "gets the nodesvisiteddetails.whether to include additional diagnostic information about the dialog nodes that were visited during processing ofthe message.",
	"Method": "Builder nodesVisitedDetails(Boolean nodesVisitedDetails,Boolean nodesVisitedDetails){\r\n    return nodesVisitedDetails;\r\n}"
}, {
	"Path": "net.spy.memcached.util.CacheLoader.push",
	"Comment": "push a value into the cache.this is a wrapper around set that throttles and retries on full queues.",
	"Method": "Future<Boolean> push(String k,T value){\r\n    Future<Boolean> rv = null;\r\n    while (rv == null) {\r\n        try {\r\n            rv = client.set(k, expiration, value);\r\n        } catch (IllegalStateException ex) {\r\n            try {\r\n                if (rv != null) {\r\n                    rv.get(250, TimeUnit.MILLISECONDS);\r\n                } else {\r\n                    Thread.sleep(250);\r\n                }\r\n            } catch (InterruptedException ie) {\r\n                Thread.currentThread().interrupt();\r\n            } catch (Exception e2) {\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createExample",
	"Comment": "create user input example.add a new user input example to an intent.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Example> createExample(CreateExampleOptions createExampleOptions){\r\n    Validator.notNull(createExampleOptions, \"createExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { createExampleOptions.workspaceId(), createExampleOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"text\", createExampleOptions.text());\r\n    if (createExampleOptions.mentions() != null) {\r\n        contentJson.add(\"mentions\", GsonSingleton.getGson().toJsonTree(createExampleOptions.mentions()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Example.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryNoticesOptions.deduplicateField",
	"Comment": "gets the deduplicatefield.when specified, duplicate results based on the field specified are removed from the returned results. duplicatecomparison is limited to the current query only,is not considered. this parameter is currently betafunctionality.",
	"Method": "Builder deduplicateField(String deduplicateField,String deduplicateField){\r\n    return deduplicateField;\r\n}"
}, {
	"Path": "net.spy.memcached.internal.OperationFuture.getStatus",
	"Comment": "get the current status of this operation.note that the operation status may change as the operation is tried andpotentially retried against the servers specified by the nodelocator.the interrupted status of the current thread is cleared by this method.inspect the returned operationstatus to check whether an interruption has taken place.",
	"Method": "OperationStatus getStatus(){\r\n    if (status == null) {\r\n        try {\r\n            get();\r\n        } catch (InterruptedException e) {\r\n            status = new OperationStatus(false, \"Interrupted\", StatusCode.INTERRUPTED);\r\n        } catch (ExecutionException e) {\r\n            getLogger().warn(\"Error getting status of operation\", e);\r\n        }\r\n    }\r\n    return status;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListLogsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListEntitiesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "io.appium.java_client.touch.offset.PointOption.withCoordinates",
	"Comment": "it defines x and y coordinates.this is offset from the upper left corner of the screen.",
	"Method": "T withCoordinates(Point offset,T withCoordinates,int xOffset,int yOffset){\r\n    coordinates = new Point(xOffset, yOffset);\r\n    return (T) this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslateOptions.target",
	"Comment": "gets the target.language code of the translation target language. use with source as an alternative way to select a translationmodel.",
	"Method": "Builder target(String target,String target){\r\n    return target;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.CreateClassifierOptions.negativeExamplesFilename",
	"Comment": "gets the negativeexamplesfilename.the filename for negativeexamples.",
	"Method": "Builder negativeExamplesFilename(String negativeExamplesFilename,String negativeExamplesFilename){\r\n    return negativeExamplesFilename;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.LambdaAnalysis.analyzeClassAsLambda",
	"Comment": "used to analyze a lambda when we only have the name of the class used as the lambda and not an actual reference to the lambda.",
	"Method": "LambdaAnalysis analyzeClassAsLambda(MetamodelUtil metamodel,ClassLoader alternateClassLoader,boolean isObjectEqualsSafe,boolean isAllEqualsSafe,boolean isCollectionContainsSafe,LambdaAsClassAnalysisConfig lambdaAsClassConfig,String className,Map<String, TypedValue> indirectParamMapping,boolean throwExceptionOnFailure){\r\n    try {\r\n        Class<?> c = Class.forName(className);\r\n        MethodAnalysisResults analysis = analyzeLambdaClass(c, metamodel, lambdaAsClassConfig, alternateClassLoader, isObjectEqualsSafe, isAllEqualsSafe, isCollectionContainsSafe);\r\n        if (analysis == null) {\r\n            if (throwExceptionOnFailure)\r\n                throw new IllegalArgumentException(\"Could not analyze lambda code\");\r\n            return null;\r\n        }\r\n        return new LambdaAnalysis(analysis, indirectParamMapping, lambdaAsClassConfig.getNumberOfLambdaArguments(c));\r\n    } catch (IOException e) {\r\n        if (throwExceptionOnFailure)\r\n            throw new IllegalArgumentException(\"Encountered problems when trying to load the code for your lambdas. You may need to supply a lambdaClassLoader hint to Jinq to help it find your lambdas.\", e);\r\n        return null;\r\n    } catch (AnalyzerException e) {\r\n        if (throwExceptionOnFailure)\r\n            throw new IllegalArgumentException(\"Could not analyze lambda code\", e);\r\n        return null;\r\n    } catch (ClassNotFoundException e) {\r\n        if (throwExceptionOnFailure)\r\n            throw new IllegalArgumentException(\"Could not load the class of the lambda\", e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removeNamedPolicy",
	"Comment": "removenamedpolicy removes an authorization rule from the current named policy.",
	"Method": "boolean removeNamedPolicy(String ptype,List<String> params,boolean removeNamedPolicy,String ptype,String params){\r\n    return removeNamedPolicy(ptype, Arrays.asList(params));\r\n}"
}, {
	"Path": "okhttp3.internal.ws.WebSocketRecorder.setNextEventDelegate",
	"Comment": "sets a delegate for handling the next callback to this listener. cleared after invoked.",
	"Method": "void setNextEventDelegate(WebSocketListener delegate){\r\n    this.delegate = delegate;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceSystemSettings.getDisambiguation",
	"Comment": "gets the disambiguation.workspace settings related to the disambiguation feature.this feature is available only to premium users.",
	"Method": "WorkspaceSystemSettingsDisambiguation getDisambiguation(){\r\n    return disambiguation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogSuggestionValue.getIntents",
	"Comment": "gets the intents.an array of intents to be sent along with the user input.",
	"Method": "List<RuntimeIntent> getIntents(){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newActions",
	"Comment": "gets the newactions.an array of objects describing any actions to be invoked by the dialog node.",
	"Method": "Builder newActions(List<DialogNodeAction> newActions,List<DialogNodeAction> newActions){\r\n    return newActions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ImageWithFaces.getImage",
	"Comment": "gets the image.relative path of the image file if uploaded directly. not returned when the image is passed by url.",
	"Method": "String getImage(){\r\n    return image;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Conversions.getSegment",
	"Comment": "gets the segment.a list of document segmentation settings.",
	"Method": "SegmentSettings getSegment(){\r\n    return segment;\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.TapStream.hasErrored",
	"Comment": "determine if messages sent to this server and recorded on this tapstreamhave been determined to be in error.",
	"Method": "boolean hasErrored(){\r\n    for (TapOperation op : ops) {\r\n        if (!op.hasErrored()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateValue",
	"Comment": "update entity value.update an existing entity value with new or modified data. you must provide component objects defining the contentof the updated entity value.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Value> updateValue(UpdateValueOptions updateValueOptions){\r\n    Validator.notNull(updateValueOptions, \"updateValueOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { updateValueOptions.workspaceId(), updateValueOptions.entity(), updateValueOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateValueOptions.newSynonyms() != null) {\r\n        contentJson.add(\"synonyms\", GsonSingleton.getGson().toJsonTree(updateValueOptions.newSynonyms()));\r\n    }\r\n    if (updateValueOptions.valueType() != null) {\r\n        contentJson.addProperty(\"type\", updateValueOptions.valueType());\r\n    }\r\n    if (updateValueOptions.newMetadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateValueOptions.newMetadata()));\r\n    }\r\n    if (updateValueOptions.newPatterns() != null) {\r\n        contentJson.add(\"patterns\", GsonSingleton.getGson().toJsonTree(updateValueOptions.newPatterns()));\r\n    }\r\n    if (updateValueOptions.newValue() != null) {\r\n        contentJson.addProperty(\"value\", updateValueOptions.newValue());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Value.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EmotionOptions.targets",
	"Comment": "gets the targets.emotion results will be returned for each target string that is found in the document.",
	"Method": "Builder targets(List<String> targets,List<String> targets){\r\n    return targets;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImage.getResolvedUrl",
	"Comment": "gets the resolvedurl.fully resolved url of the image after redirects are followed. not returned when the image is uploaded.",
	"Method": "String getResolvedUrl(){\r\n    return resolvedUrl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalyzeOptions.fallbackToRaw",
	"Comment": "gets the fallbacktoraw.whether to use raw html content if text cleaning fails.",
	"Method": "Builder fallbackToRaw(Boolean fallbackToRaw,Boolean fallbackToRaw){\r\n    return fallbackToRaw;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.assertMultipliesWith",
	"Comment": "throws sizeexception unless matrices can be multiplied with one another.",
	"Method": "void assertMultipliesWith(FloatMatrix a){\r\n    if (!multipliesWith(a)) {\r\n        throw new SizeException(\"Number of columns of left matrix must be equal to number of rows of right matrix.\");\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentStatus.getStatus",
	"Comment": "gets the status.status of the document in the ingestion process.",
	"Method": "String getStatus(){\r\n    return status;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageOptions.entities",
	"Comment": "gets the entities.entities to use when evaluating the message. include entities from the previous response to continue using thoseentities rather than detecting entities in the new input.",
	"Method": "Builder entities(List<RuntimeEntity> entities,List<RuntimeEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "io.appium.java_client.InteractsWithApps.resetApp",
	"Comment": "resets the currently running app together with the session.",
	"Method": "void resetApp(){\r\n    execute(RESET);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryPassages.getField",
	"Comment": "gets the field.the label of the field from which the passage has been extracted.",
	"Method": "String getField(){\r\n    return field;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteEntity",
	"Comment": "delete entity.delete an entity from a workspace.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteEntity(DeleteEntityOptions deleteEntityOptions){\r\n    Validator.notNull(deleteEntityOptions, \"deleteEntityOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\" };\r\n    String[] pathParameters = { deleteEntityOptions.workspaceId(), deleteEntityOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.DeleteAudioOptions.audioName",
	"Comment": "gets the audioname.the name of the audio resource for the custom acoustic model.",
	"Method": "Builder audioName(String audioName,String audioName){\r\n    return audioName;\r\n}"
}, {
	"Path": "net.spy.memcached.internal.AbstractListenableFuture.addToListeners",
	"Comment": "add the given listener to the total list of listeners to be notified.if the future is already done, the listener will be notifiedimmediately.",
	"Method": "Future<T> addToListeners(GenericCompletionListener<? extends Future<T>> listener){\r\n    if (listener == null) {\r\n        throw new IllegalArgumentException(\"The listener can't be null.\");\r\n    }\r\n    synchronized (this) {\r\n        listeners.add(listener);\r\n    }\r\n    if (isDone()) {\r\n        notifyListeners();\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceSystemSettingsDisambiguation.isEnabled",
	"Comment": "gets the enabled.whether the disambiguation feature is enabled for the workspace.",
	"Method": "Boolean isEnabled(){\r\n    return enabled;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AddWordOptions.displayAs",
	"Comment": "gets the displayas.an alternative spelling for the custom word when it appears in a transcript. use the parameter when you want theword to have a spelling that is different from its usual representation or from its spelling in corpora trainingdata.",
	"Method": "Builder displayAs(String displayAs,String displayAs){\r\n    return displayAs;\r\n}"
}, {
	"Path": "org.jasig.cas.client.jaas.CasLoginModule.removePrincipalsOfType",
	"Comment": "removes all principals of the given type from the jaas subject.",
	"Method": "void removePrincipalsOfType(Class<? extends Principal> clazz){\r\n    this.subject.getPrincipals().removeAll(this.subject.getPrincipals(clazz));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.CreateClassifierOptions.metadataFilename",
	"Comment": "gets the metadatafilename.the filename for trainingmetadata.",
	"Method": "Builder metadataFilename(String metadataFilename,String metadataFilename){\r\n    return metadataFilename;\r\n}"
}, {
	"Path": "com.darkprograms.speech.synthesiser.BaseSynthsiser.parseString",
	"Comment": "separates a string into smaller parts so that google will not reject the request.",
	"Method": "List<String> parseString(String input,List<String> parseString,String input,List<String> fragments){\r\n    if (input.length() <= 100) {\r\n        fragments.add(input);\r\n        return fragments;\r\n    } else {\r\n        int lastWord = findLastWord(input);\r\n        if (lastWord <= 0) {\r\n            fragments.add(input.substring(0, 100));\r\n            return parseString(input.substring(100), fragments);\r\n        } else {\r\n            fragments.add(input.substring(0, lastWord));\r\n            return parseString(input.substring(lastWord), fragments);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.javers.core.metamodel.type.TypeMapper.getJaversType",
	"Comment": "returns mapped type, spawns a new one from a prototype,or infers a new one using default mapping.",
	"Method": "JaversType getJaversType(Type javaType){\r\n    argumentIsNotNull(javaType);\r\n    return state.getJaversType(javaType);\r\n}"
}, {
	"Path": "com.darkprograms.speech.microphone.MicrophoneAnalyzer.calculateFundamentalFrequency",
	"Comment": "this method calculates the fundamental frequency using harmonic product specturm\tit down samples the fftdata four times and multiplies the arrays\ttogether to determine the fundamental frequency. this is slightly more computationally\texpensive, but much more accurate. in simpler terms, the function will remove the harmonic frequencies\twhich occur at every n value by finding the lowest common divisor among them.",
	"Method": "int calculateFundamentalFrequency(Complex[] fftData,int N){\r\n    if (N <= 0 || fftData == null) {\r\n        return -1;\r\n    }\r\n    final int LENGTH = fftData.length;\r\n    fftData = removeNegativeFrequencies(fftData);\r\n    Complex[][] data = new Complex[N][fftData.length / N];\r\n    for (int i = 0; i < N; i++) {\r\n        for (int j = 0; j < data[0].length; j++) {\r\n            data[i][j] = fftData[j * (i + 1)];\r\n        }\r\n    }\r\n    Complex[] result = new Complex[fftData.length / N];\r\n    for (int i = 0; i < result.length; i++) {\r\n        Complex tmp = new Complex(1, 0);\r\n        for (int j = 0; j < N; j++) {\r\n            tmp = tmp.times(data[j][i]);\r\n        }\r\n        result[i] = tmp;\r\n    }\r\n    int index = this.findMaxMagnitude(result);\r\n    return index * getFFTBinSize(LENGTH);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.getDialogNode",
	"Comment": "get dialog node.get information about a dialog node.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNode> getDialogNode(GetDialogNodeOptions getDialogNodeOptions){\r\n    Validator.notNull(getDialogNodeOptions, \"getDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { getDialogNodeOptions.workspaceId(), getDialogNodeOptions.dialogNode() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getDialogNodeOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getDialogNodeOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNode.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEvidenceEntity.getEndOffset",
	"Comment": "gets the endoffset.the end location of the entity text in the identified field. this value is exclusive.",
	"Method": "Long getEndOffset(){\r\n    return endOffset;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.ListConfigurationsResponse.getConfigurations",
	"Comment": "gets the configurations.an array of configurations that are available for the service instance.",
	"Method": "List<Configuration> getConfigurations(){\r\n    return configurations;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.EntityMentionCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newDescription",
	"Comment": "gets the newdescription.the description of the dialog node. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder newDescription(String newDescription,String newDescription){\r\n    return newDescription;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.IamManagerTest.getTokenFromApiKey",
	"Comment": "tests that if only an api key is stored, the user can get back a valid access token.",
	"Method": "void getTokenFromApiKey(){\r\n    server.enqueue(jsonResponse(validTokenData));\r\n    IamOptions options = new IamOptions.Builder().apiKey(API_KEY).url(url).build();\r\n    IamTokenManager manager = new IamTokenManager(options);\r\n    String token = manager.getToken();\r\n    assertEquals(validTokenData.getAccessToken(), token);\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.Complex.sin",
	"Comment": "return a new complex object whose value is the complex sine of this",
	"Method": "Complex sin(){\r\n    return new Complex(Math.sin(re) * Math.cosh(im), Math.cos(re) * Math.sinh(im));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogRuntimeResponseGeneric.getPreference",
	"Comment": "gets the preference.the preferred type of control to display.",
	"Method": "String getPreference(){\r\n    return preference;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListSynonymsOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.assertSameSize",
	"Comment": "throws sizeexception unless two matrices have the same size.",
	"Method": "void assertSameSize(FloatMatrix a){\r\n    if (!sameSize(a)) {\r\n        throw new SizeException(\"Matrices must have the same size.\");\r\n    }\r\n}"
}, {
	"Path": "net.spy.memcached.compat.log.DefaultLogger.isDebugEnabled",
	"Comment": "always returns false, debug is not enabled on the defaultlogger.",
	"Method": "boolean isDebugEnabled(){\r\n    return (false);\r\n}"
}, {
	"Path": "org.jblas.ComplexDoubleMatrix.get",
	"Comment": "get matrix element, passing the variable to store the result.",
	"Method": "ComplexDoubleMatrix get(int[] indices,ComplexDoubleMatrix get,int r,int[] indices,ComplexDoubleMatrix get,int[] indices,int c,ComplexDoubleMatrix get,int[] rindices,int[] cindices,ComplexDoubleMatrix get,ComplexDoubleMatrix indices,ComplexDoubleMatrix get,int r,ComplexDoubleMatrix indices,ComplexDoubleMatrix get,ComplexDoubleMatrix indices,int c,ComplexDoubleMatrix get,ComplexDoubleMatrix rindices,ComplexDoubleMatrix cindices,ComplexDouble get,int rowIndex,int columnIndex,ComplexDouble get,int rowIndex,int columnIndex,ComplexDouble result,ComplexDouble get,int i,ComplexDouble get,int i,ComplexDouble result){\r\n    return result.set(data[i * 2], data[i * 2 + 1]);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.deleteConfiguration",
	"Comment": "delete a configuration.the deletion is performed unconditionally. a configuration deletion request succeeds even if the configuration isreferenced by a collection or document ingestion. however, documents that have already been submitted forprocessing continue to use the deleted configuration. documents are always processed with a snapshot of theconfiguration as it existed at the time the document was submitted.",
	"Method": "ServiceCall<Void> deleteConfiguration(DeleteConfigurationOptions deleteConfigurationOptions){\r\n    Validator.notNull(deleteConfigurationOptions, \"deleteConfigurationOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"configurations\" };\r\n    String[] pathParameters = { deleteConfigurationOptions.environmentId(), deleteConfigurationOptions.configurationId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "io.appium.java_client.TouchAction.waitAction",
	"Comment": "waits for specified amount of time to pass before continue to next touch action.",
	"Method": "T waitAction(T waitAction,WaitOptions waitOptions){\r\n    ActionParameter action = new ActionParameter(\"wait\", waitOptions);\r\n    parameterBuilder.add(action);\r\n    return (T) this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.actions",
	"Comment": "gets the actions.an array of objects describing any actions to be invoked by the dialog node.",
	"Method": "Builder actions(List<DialogNodeAction> actions,List<DialogNodeAction> actions){\r\n    return actions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListValuesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newConditions",
	"Comment": "gets the newconditions.the condition that will trigger the dialog node. this string cannot contain carriage return, newline, or tabcharacters, and it must be no longer than 2048 characters.",
	"Method": "Builder newConditions(String newConditions,String newConditions){\r\n    return newConditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListExamplesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogPagination.getNextCursor",
	"Comment": "gets the nextcursor.a token identifying the next page of results.",
	"Method": "String getNextCursor(){\r\n    return nextCursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Value.getMetadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Map getMetadata(){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AcousticModel.getBaseModelName",
	"Comment": "gets the basemodelname.the name of the language model for which the custom acoustic model was created.",
	"Method": "String getBaseModelName(){\r\n    return baseModelName;\r\n}"
}, {
	"Path": "jssc.SerialPort.closePort",
	"Comment": "close port. this method deletes event listener first, then closes the port",
	"Method": "boolean closePort(){\r\n    checkPortOpened(\"closePort()\");\r\n    if (eventListenerAdded) {\r\n        removeEventListener();\r\n    }\r\n    boolean returnValue = serialInterface.closePort(portHandle);\r\n    if (returnValue) {\r\n        maskAssigned = false;\r\n        portOpened = false;\r\n    }\r\n    return returnValue;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Enrichment.getDescription",
	"Comment": "gets the description.describes what the enrichment step does.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ValueExport.getCreated",
	"Comment": "gets the created.the timestamp for creation of the entity value.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Value.getSynonyms",
	"Comment": "gets the synonyms.an array containing any synonyms for the entity value.",
	"Method": "List<String> getSynonyms(){\r\n    return synonyms;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CreateConfigurationOptions.description",
	"Comment": "gets the description.the description of the configuration, if available.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.SpeechModel.getSupportedFeatures",
	"Comment": "gets the supportedfeatures.describes the additional service features that are supported with the model.",
	"Method": "SupportedFeatures getSupportedFeatures(){\r\n    return supportedFeatures;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.ClassifyInput.getText",
	"Comment": "gets the text.the submitted phrase. the maximum length is 2048 characters.",
	"Method": "String getText(){\r\n    return text;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.model.BuildWithDetails.getChangeSets",
	"Comment": "returns the complete list of change sets for all checkout the build has performed. if nocheckouts have been performed, returns null.",
	"Method": "List<BuildChangeSet> getChangeSets(){\r\n    List<BuildChangeSet> result;\r\n    if (changeSets != null) {\r\n        result = changeSets;\r\n    } else if (changeSet != null) {\r\n        result = Collections.singletonList(changeSet);\r\n    } else {\r\n        result = null;\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.CollectionItem.getText",
	"Comment": "gets the text.the submitted phrase. the maximum length is 2048 characters.",
	"Method": "String getText(){\r\n    return text;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedActions",
	"Comment": "getallnamedactions gets the list of actions that show up in the current named policy.",
	"Method": "List<String> getAllNamedActions(String ptype){\r\n    return model.getValuesForFieldInPolicy(\"p\", ptype, 2);\r\n}"
}, {
	"Path": "net.spy.memcached.internal.OperationFuture.get",
	"Comment": "get the results of the given operation.as with the future interface, this call will block until the results ofthe future operation has been received.",
	"Method": "T get(T get,long duration,TimeUnit units){\r\n    if (!latch.await(duration, units)) {\r\n        MemcachedConnection.opTimedOut(op);\r\n        if (op != null) {\r\n            op.timeOut();\r\n        }\r\n        throw new CheckedOperationTimeoutException(\"Timed out waiting for operation\", op);\r\n    } else {\r\n        MemcachedConnection.opSucceeded(op);\r\n    }\r\n    if (op != null && op.hasErrored()) {\r\n        throw new ExecutionException(op.getException());\r\n    }\r\n    if (isCancelled()) {\r\n        throw new ExecutionException(new CancellationException(\"Cancelled\"));\r\n    }\r\n    if (op != null && op.isTimedOut()) {\r\n        throw new ExecutionException(new CheckedOperationTimeoutException(\"Operation timed out.\", op));\r\n    }\r\n    return objRef.get();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogRuntimeResponseGeneric.getOptions",
	"Comment": "gets the options.an array of objects describing the options from which the user can choose.",
	"Method": "List<DialogNodeOutputOptionsElement> getOptions(){\r\n    return options;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.Enforcer.getRolesForUserInDomain",
	"Comment": "getrolesforuserindomain gets the roles that a user has inside a domain.",
	"Method": "List<String> getRolesForUserInDomain(String name,String domain){\r\n    try {\r\n        return model.model.get(\"g\").get(\"g\").rm.getRoles(name, domain);\r\n    } catch (Error e) {\r\n        if (!e.getMessage().equals(\"error: name does not exist\")) {\r\n            throw e;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.IamManagerTest.getTokenAfterRefresh",
	"Comment": "tests that if the stored access token is expired, it can be refreshed properly.",
	"Method": "void getTokenAfterRefresh(){\r\n    server.enqueue(jsonResponse(expiredTokenData));\r\n    IamOptions options = new IamOptions.Builder().apiKey(API_KEY).url(url).build();\r\n    IamTokenManager manager = new IamTokenManager(options);\r\n    manager.getToken();\r\n    server.enqueue(jsonResponse(validTokenData));\r\n    String newToken = manager.getToken();\r\n    assertEquals(validTokenData.getAccessToken(), newToken);\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.concatVertically",
	"Comment": "concatenates two matrices vertically. matrices must have identicalnumbers of columns.",
	"Method": "DoubleMatrix concatVertically(DoubleMatrix A,DoubleMatrix B){\r\n    if (A.columns != B.columns) {\r\n        throw new SizeException(\"Matrices don't have same number of columns (\" + A.columns + \" != \" + B.columns + \".\");\r\n    }\r\n    DoubleMatrix result = new DoubleMatrix(A.rows + B.rows, A.columns);\r\n    for (int i = 0; i < A.columns; i++) {\r\n        JavaBlas.rcopy(A.rows, A.data, A.index(0, i), 1, result.data, result.index(0, i), 1);\r\n        JavaBlas.rcopy(B.rows, B.data, B.index(0, i), 1, result.data, result.index(A.rows, i), 1);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getNamedGroupingPolicy",
	"Comment": "getnamedgroupingpolicy gets all the role inheritance rules in the policy.",
	"Method": "List<List<String>> getNamedGroupingPolicy(String ptype){\r\n    return model.getPolicy(\"g\", ptype);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListIntentsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.insertOperation",
	"Comment": "insert an operation on the given node to the beginning of the queue.",
	"Method": "void insertOperation(MemcachedNode node,Operation o){\r\n    o.setHandlingNode(node);\r\n    o.initialize();\r\n    node.insertOp(o);\r\n    addedQueue.offer(node);\r\n    metrics.markMeter(OVERALL_REQUEST_METRIC);\r\n    Selector s = selector.wakeup();\r\n    assert s == selector : \"Wakeup returned the wrong selector.\";\r\n    getLogger().debug(\"Added %s to %s\", o, node);\r\n}"
}, {
	"Path": "net.spy.memcached.BaseCacheMap.containsValue",
	"Comment": "this method always returns false, as truth cannot be determined withoutiteration.",
	"Method": "boolean containsValue(Object value){\r\n    return false;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Pagination.getRefreshCursor",
	"Comment": "gets the refreshcursor.a token identifying the current page of results.",
	"Method": "String getRefreshCursor(){\r\n    return refreshCursor;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.diag",
	"Comment": "construct a matrix of arbitrary shape and set the diagonal accordingto a passed vector.length of needs to be smaller than rows or columns.",
	"Method": "FloatMatrix diag(FloatMatrix x,FloatMatrix diag,FloatMatrix x,int rows,int columns,FloatMatrix diag){\r\n    assertSquare();\r\n    FloatMatrix d = new FloatMatrix(rows);\r\n    JavaBlas.rcopy(rows, data, 0, rows + 1, d.data, 0, 1);\r\n    return d;\r\n}"
}, {
	"Path": "org.jblas.ComplexFloatMatrix.diag",
	"Comment": "construct a matrix of arbitrary shape and set the diagonal accordingto a passed vector.length of needs to be smaller than rows or columns.",
	"Method": "ComplexFloatMatrix diag(ComplexFloatMatrix x,ComplexFloatMatrix diag,ComplexFloatMatrix x,int rows,int columns,ComplexFloatMatrix diag){\r\n    ComplexFloatMatrix d = new ComplexFloatMatrix(rows);\r\n    NativeBlas.ccopy(rows, data, 0, rows + 1, d.data, 0, 1);\r\n    return d;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateWorkspaceOptions.systemSettings",
	"Comment": "gets the systemsettings.global settings for the workspace.",
	"Method": "Builder systemSettings(WorkspaceSystemSettings systemSettings,WorkspaceSystemSettings systemSettings){\r\n    return systemSettings;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.cumulativeSum",
	"Comment": "computes the cumulative sum, that is, the sum of all elementsof the matrix up to a given index in linear addressing.",
	"Method": "FloatMatrix cumulativeSum(){\r\n    return dup().cumulativeSumi();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.getValue",
	"Comment": "get entity value.get information about an entity value.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<ValueExport> getValue(GetValueOptions getValueOptions){\r\n    Validator.notNull(getValueOptions, \"getValueOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { getValueOptions.workspaceId(), getValueOptions.entity(), getValueOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getValueOptions.export() != null) {\r\n        builder.query(\"export\", String.valueOf(getValueOptions.export()));\r\n    }\r\n    if (getValueOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getValueOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ValueExport.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ImageWithFaces.getError",
	"Comment": "gets the error.information about what might have caused a failure, such as an image that is too large. not returned when there isno error.",
	"Method": "ErrorInfo getError(){\r\n    return error;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogRuntimeResponseGeneric.getSuggestions",
	"Comment": "gets the suggestions.an array of objects describing the possible matching dialog nodes from which the user can choose. suggestions property is part of the disambiguation feature, which is only available for premiumusers.",
	"Method": "List<DialogSuggestion> getSuggestions(){\r\n    return suggestions;\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.Recognizer.rawRequest",
	"Comment": "performs the request to google with a file request is buffered",
	"Method": "String[] rawRequest(File inputFile,int maxResults,int sampleRate){\r\n    URL url;\r\n    URLConnection urlConn;\r\n    OutputStream outputStream;\r\n    BufferedReader br;\r\n    StringBuilder sb = new StringBuilder(GOOGLE_RECOGNIZER_URL);\r\n    if (language != null) {\r\n        sb.append(\"&lang=\");\r\n        sb.append(language);\r\n    } else {\r\n        sb.append(\"&lang=auto\");\r\n    }\r\n    if (apikey != null) {\r\n        sb.append(\"&key=\");\r\n        sb.append(apikey);\r\n    }\r\n    if (!profanityFilter) {\r\n        sb.append(\"&pfilter=0\");\r\n    }\r\n    sb.append(\"&maxresults=\");\r\n    sb.append(maxResults);\r\n    url = new URL(sb.toString());\r\n    urlConn = url.openConnection();\r\n    urlConn.setDoOutput(true);\r\n    urlConn.setUseCaches(false);\r\n    urlConn.setRequestProperty(\"Content-Type\", \"audio/x-flac; rate=\" + sampleRate);\r\n    urlConn.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (X11; Linux x86_64) \" + \"AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.52 Safari/537.36\");\r\n    outputStream = urlConn.getOutputStream();\r\n    FileInputStream fileInputStream = new FileInputStream(inputFile);\r\n    byte[] buffer = new byte[256];\r\n    while ((fileInputStream.read(buffer, 0, 256)) != -1) {\r\n        outputStream.write(buffer, 0, 256);\r\n    }\r\n    fileInputStream.close();\r\n    outputStream.close();\r\n    br = new BufferedReader(new InputStreamReader(urlConn.getInputStream(), Charset.forName(\"UTF-8\")));\r\n    List<String> completeResponse = new ArrayList<String>();\r\n    String response = br.readLine();\r\n    while (response != null) {\r\n        completeResponse.add(response);\r\n        response = br.readLine();\r\n    }\r\n    br.close();\r\n    return completeResponse.toArray(new String[completeResponse.size()]);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateValue",
	"Comment": "update entity value.update an existing entity value with new or modified data. you must provide component objects defining the contentof the updated entity value.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Value> updateValue(UpdateValueOptions updateValueOptions){\r\n    Validator.notNull(updateValueOptions, \"updateValueOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { updateValueOptions.workspaceId(), updateValueOptions.entity(), updateValueOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateValueOptions.newSynonyms() != null) {\r\n        contentJson.add(\"synonyms\", GsonSingleton.getGson().toJsonTree(updateValueOptions.newSynonyms()));\r\n    }\r\n    if (updateValueOptions.valueType() != null) {\r\n        contentJson.addProperty(\"type\", updateValueOptions.valueType());\r\n    }\r\n    if (updateValueOptions.newMetadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateValueOptions.newMetadata()));\r\n    }\r\n    if (updateValueOptions.newPatterns() != null) {\r\n        contentJson.add(\"patterns\", GsonSingleton.getGson().toJsonTree(updateValueOptions.newPatterns()));\r\n    }\r\n    if (updateValueOptions.newValue() != null) {\r\n        contentJson.addProperty(\"value\", updateValueOptions.newValue());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Value.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeCollection.getDialogNodes",
	"Comment": "gets the dialognodes.an array of objects describing the dialog nodes defined for the workspace.",
	"Method": "List<DialogNode> getDialogNodes(){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.deleteExpansions",
	"Comment": "delete the expansion list.remove the expansion information for this collection. the expansion list must be deleted to disable query expansionfor a collection.",
	"Method": "ServiceCall<Void> deleteExpansions(DeleteExpansionsOptions deleteExpansionsOptions){\r\n    Validator.notNull(deleteExpansionsOptions, \"deleteExpansionsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"expansions\" };\r\n    String[] pathParameters = { deleteExpansionsOptions.environmentId(), deleteExpansionsOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeOutputModifiers.isOverwrite",
	"Comment": "gets the overwrite.whether values in the output will overwrite output values in an array specified by previously executed dialognodes. if this option is set to , new values will be appended to previously specified values.",
	"Method": "Boolean isOverwrite(){\r\n    return overwrite;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateEntityOptions.fuzzyMatch",
	"Comment": "gets the fuzzymatch.whether to use fuzzy matching for the entity.",
	"Method": "Builder fuzzyMatch(Boolean fuzzyMatch,Boolean fuzzyMatch){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "io.appium.java_client.android.connection.ConnectionStateBuilder.withAirplaneModeDisabled",
	"Comment": "sets airplane mode to disabled state if it was enabled.this option only works up to android 6.",
	"Method": "ConnectionStateBuilder withAirplaneModeDisabled(){\r\n    bitMask &= ~AIRPLANE_MODE_MASK;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.RequestUtils.fileBody",
	"Comment": "returns a request body that encapsulates the specified file qualified with the specified content type.",
	"Method": "RequestBody fileBody(File file,String contentType){\r\n    MediaType mediaType = (contentType != null) ? MediaType.parse(contentType) : HttpMediaType.BINARY_FILE;\r\n    return RequestBody.create(mediaType, file);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateDialogNode",
	"Comment": "update dialog node.update an existing dialog node with new or modified data.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNode> updateDialogNode(UpdateDialogNodeOptions updateDialogNodeOptions){\r\n    Validator.notNull(updateDialogNodeOptions, \"updateDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { updateDialogNodeOptions.workspaceId(), updateDialogNodeOptions.dialogNode() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateDialogNodeOptions.nodeType() != null) {\r\n        contentJson.addProperty(\"type\", updateDialogNodeOptions.nodeType());\r\n    }\r\n    if (updateDialogNodeOptions.newActions() != null) {\r\n        contentJson.add(\"actions\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newActions()));\r\n    }\r\n    if (updateDialogNodeOptions.newConditions() != null) {\r\n        contentJson.addProperty(\"conditions\", updateDialogNodeOptions.newConditions());\r\n    }\r\n    if (updateDialogNodeOptions.newContext() != null) {\r\n        contentJson.add(\"context\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newContext()));\r\n    }\r\n    if (updateDialogNodeOptions.newPreviousSibling() != null) {\r\n        contentJson.addProperty(\"previous_sibling\", updateDialogNodeOptions.newPreviousSibling());\r\n    }\r\n    if (updateDialogNodeOptions.newVariable() != null) {\r\n        contentJson.addProperty(\"variable\", updateDialogNodeOptions.newVariable());\r\n    }\r\n    if (updateDialogNodeOptions.newUserLabel() != null) {\r\n        contentJson.addProperty(\"user_label\", updateDialogNodeOptions.newUserLabel());\r\n    }\r\n    if (updateDialogNodeOptions.newMetadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newMetadata()));\r\n    }\r\n    if (updateDialogNodeOptions.newTitle() != null) {\r\n        contentJson.addProperty(\"title\", updateDialogNodeOptions.newTitle());\r\n    }\r\n    if (updateDialogNodeOptions.newDescription() != null) {\r\n        contentJson.addProperty(\"description\", updateDialogNodeOptions.newDescription());\r\n    }\r\n    if (updateDialogNodeOptions.newDigressOut() != null) {\r\n        contentJson.addProperty(\"digress_out\", updateDialogNodeOptions.newDigressOut());\r\n    }\r\n    if (updateDialogNodeOptions.newEventName() != null) {\r\n        contentJson.addProperty(\"event_name\", updateDialogNodeOptions.newEventName());\r\n    }\r\n    if (updateDialogNodeOptions.newDigressOutSlots() != null) {\r\n        contentJson.addProperty(\"digress_out_slots\", updateDialogNodeOptions.newDigressOutSlots());\r\n    }\r\n    if (updateDialogNodeOptions.newNextStep() != null) {\r\n        contentJson.add(\"next_step\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newNextStep()));\r\n    }\r\n    if (updateDialogNodeOptions.newDigressIn() != null) {\r\n        contentJson.addProperty(\"digress_in\", updateDialogNodeOptions.newDigressIn());\r\n    }\r\n    if (updateDialogNodeOptions.newOutput() != null) {\r\n        contentJson.add(\"output\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newOutput()));\r\n    }\r\n    if (updateDialogNodeOptions.newParent() != null) {\r\n        contentJson.addProperty(\"parent\", updateDialogNodeOptions.newParent());\r\n    }\r\n    if (updateDialogNodeOptions.newDialogNode() != null) {\r\n        contentJson.addProperty(\"dialog_node\", updateDialogNodeOptions.newDialogNode());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNode.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutputDebug.getLogMessages",
	"Comment": "gets the logmessages.an array of up to 50 messages logged with the request.",
	"Method": "List<DialogLogMessage> getLogMessages(){\r\n    return logMessages;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listValues",
	"Comment": "list entity values.list the values for an entity.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<ValueCollection> listValues(ListValuesOptions listValuesOptions){\r\n    Validator.notNull(listValuesOptions, \"listValuesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { listValuesOptions.workspaceId(), listValuesOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listValuesOptions.export() != null) {\r\n        builder.query(\"export\", String.valueOf(listValuesOptions.export()));\r\n    }\r\n    if (listValuesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listValuesOptions.pageLimit()));\r\n    }\r\n    if (listValuesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listValuesOptions.includeCount()));\r\n    }\r\n    if (listValuesOptions.sort() != null) {\r\n        builder.query(\"sort\", listValuesOptions.sort());\r\n    }\r\n    if (listValuesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listValuesOptions.cursor());\r\n    }\r\n    if (listValuesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listValuesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ValueCollection.class));\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.touch",
	"Comment": "touch the given key to reset its expiration time with the defaulttranscoder.",
	"Method": "OperationFuture<Boolean> touch(String key,int exp,OperationFuture<Boolean> touch,String key,int exp,Transcoder<T> tc){\r\n    final CountDownLatch latch = new CountDownLatch(1);\r\n    final OperationFuture<Boolean> rv = new OperationFuture<Boolean>(key, latch, operationTimeout, executorService);\r\n    Operation op = opFact.touch(key, exp, new OperationCallback() {\r\n        @Override\r\n        public void receivedStatus(OperationStatus status) {\r\n            rv.set(status.isSuccess(), status);\r\n        }\r\n        @Override\r\n        public void complete() {\r\n            latch.countDown();\r\n            rv.signalComplete();\r\n        }\r\n    });\r\n    rv.setOperation(op);\r\n    mconn.enqueueOperation(key, op);\r\n    return rv;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.touch",
	"Comment": "touch the given key to reset its expiration time with the defaulttranscoder.",
	"Method": "OperationFuture<Boolean> touch(String key,int exp,OperationFuture<Boolean> touch,String key,int exp,Transcoder<T> tc){\r\n    rv.set(status.isSuccess(), status);\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.touch",
	"Comment": "touch the given key to reset its expiration time with the defaulttranscoder.",
	"Method": "OperationFuture<Boolean> touch(String key,int exp,OperationFuture<Boolean> touch,String key,int exp,Transcoder<T> tc){\r\n    latch.countDown();\r\n    rv.signalComplete();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.LogQueryResponseResult.getDocumentType",
	"Comment": "gets the documenttype.the type of log entry returned.indicates that the log represents the results of a call to the single collectionmethod.indicates that the log represents a call to theapi.",
	"Method": "String getDocumentType(){\r\n    return documentType;\r\n}"
}, {
	"Path": "com.darkprograms.speech.microphone.MicrophoneAnalyzer.applyHanningWindow",
	"Comment": "applies a hanning window to the data set.\thanning windows are used to increase the accuracy of the fft.\tone should always apply a window to a dataset before applying an fft",
	"Method": "double[] applyHanningWindow(double[] data,double[] applyHanningWindow,double[] signal_in,int pos,int size){\r\n    for (int i = pos; i < pos + size; i++) {\r\n        int j = i - pos;\r\n        signal_in[i] = (signal_in[i] * 0.5 * (1.0 - Math.cos(2.0 * Math.PI * j / size)));\r\n    }\r\n    return signal_in;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageRequest.getInput",
	"Comment": "gets the input.an input object that includes the input text.",
	"Method": "InputData getInput(){\r\n    return input;\r\n}"
}, {
	"Path": "io.appium.java_client.android.ListensToLogcatMessages.addLogcatConnectionListener",
	"Comment": "adds a new log broadcasting connection handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addLogcatConnectionListener(Runnable handler){\r\n    getLogcatClient().addConnectionHandler(handler);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentStatus.getDocumentId",
	"Comment": "gets the documentid.the unique identifier of the document.",
	"Method": "String getDocumentId(){\r\n    return documentId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createSynonym",
	"Comment": "add entity value synonym.add a new synonym to an entity value.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Synonym> createSynonym(CreateSynonymOptions createSynonymOptions){\r\n    Validator.notNull(createSynonymOptions, \"createSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { createSynonymOptions.workspaceId(), createSynonymOptions.entity(), createSynonymOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"synonym\", createSynonymOptions.synonym());\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Synonym.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DeleteUserDataOptions.customerId",
	"Comment": "gets the customerid.the customer id for which all data is to be deleted.",
	"Method": "Builder customerId(String customerId,String customerId){\r\n    return customerId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImages.getCustomClasses",
	"Comment": "gets the customclasses.number of custom classes identified in the images.",
	"Method": "Long getCustomClasses(){\r\n    return customClasses;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.AddDocumentOptions.file",
	"Comment": "gets the file.the content of the document to ingest. the maximum supported file size is 50 megabytes. files larger than 50megabytes is rejected.",
	"Method": "Builder file(InputStream file,Builder file,File file,InputStream file){\r\n    return file;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEvidence.getField",
	"Comment": "gets the field.the field of the document where the supporting evidence was identified.",
	"Method": "String getField(){\r\n    return field;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.argmin",
	"Comment": "returns the linear index of the minimal element. if there aremore than one elements with this value, the first one is returned.",
	"Method": "int argmin(){\r\n    if (isEmpty()) {\r\n        return -1;\r\n    }\r\n    double v = Double.POSITIVE_INFINITY;\r\n    int a = -1;\r\n    for (int i = 0; i < length; i++) {\r\n        if (!Double.isNaN(get(i)) && get(i) < v) {\r\n            v = get(i);\r\n            a = i;\r\n        }\r\n    }\r\n    return a;\r\n}"
}, {
	"Path": "com.darkprograms.speech.microphone.MicrophoneAnalyzer.findMaxMagnitude",
	"Comment": "calculates index of the maximum magnitude in a complex array.",
	"Method": "int findMaxMagnitude(Complex[] input){\r\n    double max = Double.MIN_VALUE;\r\n    int index = -1;\r\n    for (int i = 0; i < input.length; i++) {\r\n        Complex c = input[i];\r\n        double tmp = c.getMagnitude();\r\n        if (tmp > max) {\r\n            max = tmp;\r\n            ;\r\n            index = i;\r\n        }\r\n    }\r\n    return index;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.CreateClassifierOptions.trainingDataFilename",
	"Comment": "gets the trainingdatafilename.the filename for trainingdata.",
	"Method": "Builder trainingDataFilename(String trainingDataFilename,String trainingDataFilename){\r\n    return trainingDataFilename;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogNodesVisited.getDialogNode",
	"Comment": "gets the dialognode.a dialog node that was triggered during processing of the input message.",
	"Method": "String getDialogNode(){\r\n    return dialogNode;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.TestDocument.getSnapshots",
	"Comment": "gets the snapshots.an array of objects that describe each step in the preview process.",
	"Method": "List<DocumentSnapshot> getSnapshots(){\r\n    return snapshots;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.Assistant.createSession",
	"Comment": "create a session.create a new session. a session is used to send user input to a skill and receive responses. it also maintains thestate of the conversation.",
	"Method": "ServiceCall<SessionResponse> createSession(CreateSessionOptions createSessionOptions){\r\n    Validator.notNull(createSessionOptions, \"createSessionOptions cannot be null\");\r\n    String[] pathSegments = { \"v2/assistants\", \"sessions\" };\r\n    String[] pathParameters = { createSessionOptions.assistantId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(SessionResponse.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListEntitiesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "io.appium.java_client.screenrecording.CanRecordScreen.startRecordingScreen",
	"Comment": "start asynchronous screen recording process with default options.",
	"Method": "String startRecordingScreen(T options,String startRecordingScreen){\r\n    return this.execute(START_RECORDING_SCREEN).getValue().toString();\r\n}"
}, {
	"Path": "org.javers.repository.jql.QueryBuilder.toCommitId",
	"Comment": "only snapshots created before this commit or exactly in this commit.",
	"Method": "QueryBuilder toCommitId(CommitId commitId){\r\n    Validate.argumentIsNotNull(commitId);\r\n    queryParamsBuilder.toCommitId(commitId);\r\n    return this;\r\n}"
}, {
	"Path": "net.spy.memcached.auth.AuthThreadMonitor.getNodeMap",
	"Comment": "returns map of auththread for testingauthentication mechanisms for differentserver versions. it should not be accessedfrom anywhere else.",
	"Method": "Map<Object, AuthThread> getNodeMap(){\r\n    return nodeMap;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.CreateAcousticModelOptions.description",
	"Comment": "gets the description.a description of the new custom acoustic model. use a localized description that matches the language of the custommodel.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Value.getCreated",
	"Comment": "gets the created.the timestamp for creation of the entity value.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceExport.getCreated",
	"Comment": "gets the created.the timestamp for creation of the workspace.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.URIBuilder.addParameter",
	"Comment": "adds parameter to uri query. the parameter name and value are expected to be unescapedand may contain non ascii characters.please note query parameters and custom query component are mutually exclusive. this methodwill remove custom query if present.",
	"Method": "URIBuilder addParameter(String param,String value){\r\n    if (this.queryParams == null) {\r\n        this.queryParams = new ArrayList<BasicNameValuePair>();\r\n    }\r\n    this.queryParams.add(new BasicNameValuePair(param, value));\r\n    this.encodedQuery = null;\r\n    this.encodedSchemeSpecificPart = null;\r\n    this.query = null;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.IntentCollection.getIntents",
	"Comment": "gets the intents.an array of objects describing the intents defined for the workspace.",
	"Method": "List<IntentExport> getIntents(){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.DeleteUserDataOptions.customerId",
	"Comment": "gets the customerid.the customer id for which all data is to be deleted.",
	"Method": "Builder customerId(String customerId,String customerId){\r\n    return customerId;\r\n}"
}, {
	"Path": "io.appium.java_client.android.AndroidDriver.getCapabilities",
	"Comment": "returns capabilities that were provided on instantiation.",
	"Method": "Capabilities getCapabilities(){\r\n    MutableCapabilities capabilities = (MutableCapabilities) super.getCapabilities();\r\n    capabilities.setCapability(PLATFORM_NAME, ANDROID_PLATFORM);\r\n    return capabilities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.TestUtils.streamContentEquals",
	"Comment": "checks if both inputstreams have the same content and length. the streams are closed after reading.",
	"Method": "boolean streamContentEquals(InputStream s1,InputStream s2){\r\n    try {\r\n        int b1;\r\n        int b2;\r\n        do {\r\n            b1 = s1.read();\r\n            b2 = s2.read();\r\n        } while ((b1 == b2) && (b1 != -1));\r\n        return b1 == b2;\r\n    } finally {\r\n        try {\r\n            s1.close();\r\n            s2.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listWorkspaces",
	"Comment": "list workspaces.list the workspaces associated with a watson assistant service instance.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<WorkspaceCollection> listWorkspaces(ListWorkspacesOptions listWorkspacesOptions,ServiceCall<WorkspaceCollection> listWorkspaces){\r\n    return listWorkspaces(null);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getGroupingPolicy",
	"Comment": "getgroupingpolicy gets all the role inheritance rules in the policy.",
	"Method": "List<List<String>> getGroupingPolicy(){\r\n    return getNamedGroupingPolicy(\"g\");\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.EntityExport.isFuzzyMatch",
	"Comment": "gets the fuzzymatch.whether fuzzy matching is used for the entity.",
	"Method": "Boolean isFuzzyMatch(){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEvidence.getEntities",
	"Comment": "gets the entities.an array of entity objects that show evidence of the result.",
	"Method": "List<QueryEvidenceEntity> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CredentialsList.getCredentials",
	"Comment": "gets the credentials.an array of credential definitions that were created for this instance.",
	"Method": "List<Credentials> getCredentials(){\r\n    return credentials;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.repmat",
	"Comment": "generate a new matrix which has the given number of replications of this.",
	"Method": "FloatMatrix repmat(int rowMult,int columnMult){\r\n    FloatMatrix result = new FloatMatrix(rows * rowMult, columns * columnMult);\r\n    for (int c = 0; c < columnMult; c++) {\r\n        for (int r = 0; r < rowMult; r++) {\r\n            for (int i = 0; i < rows; i++) {\r\n                for (int j = 0; j < columns; j++) {\r\n                    result.put(r * rows + i, c * columns + j, get(i, j));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Source.getSchedule",
	"Comment": "gets the schedule.object containing the schedule information for the source.",
	"Method": "SourceSchedule getSchedule(){\r\n    return schedule;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateDocumentOptions.fileContentType",
	"Comment": "gets the filecontenttype.the content type of file. values for this parameter can be obtained from the httpmediatype class.",
	"Method": "Builder fileContentType(String fileContentType,String fileContentType){\r\n    return fileContentType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutput.getIntents",
	"Comment": "gets the intents.an array of intents recognized in the user input, sorted in descending order of confidence.",
	"Method": "List<RuntimeIntent> getIntents(){\r\n    return intents;\r\n}"
}, {
	"Path": "io.appium.java_client.android.ListensToLogcatMessages.addLogcatMessagesListener",
	"Comment": "adds a new log messages broadcasting handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addLogcatMessagesListener(Consumer<String> handler){\r\n    getLogcatClient().addMessageHandler(handler);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listLogs",
	"Comment": "list log events in a workspace.list the events from the log of a specific workspace.is not specified, this operation is limited to 40 requests per 30 minutes. ifspecified, the limit is 120 requests per minute. for more information, see rate limiting",
	"Method": "ServiceCall<LogCollection> listLogs(ListLogsOptions listLogsOptions){\r\n    Validator.notNull(listLogsOptions, \"listLogsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"logs\" };\r\n    String[] pathParameters = { listLogsOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listLogsOptions.sort() != null) {\r\n        builder.query(\"sort\", listLogsOptions.sort());\r\n    }\r\n    if (listLogsOptions.filter() != null) {\r\n        builder.query(\"filter\", listLogsOptions.filter());\r\n    }\r\n    if (listLogsOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listLogsOptions.pageLimit()));\r\n    }\r\n    if (listLogsOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listLogsOptions.cursor());\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(LogCollection.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.getExample",
	"Comment": "get user input example.get information about a user input example.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Example> getExample(GetExampleOptions getExampleOptions){\r\n    Validator.notNull(getExampleOptions, \"getExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { getExampleOptions.workspaceId(), getExampleOptions.intent(), getExampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getExampleOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getExampleOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Example.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.Voice.getCustomization",
	"Comment": "gets the customization.returns information about a specified custom voice model. this field is returned only by the get a voice methodand only when you specify the customization id of a custom voice model.",
	"Method": "VoiceModel getCustomization(){\r\n    return customization;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.Voice.getSupportedFeatures",
	"Comment": "gets the supportedfeatures.describes the additional service features supported with the voice.",
	"Method": "SupportedFeatures getSupportedFeatures(){\r\n    return supportedFeatures;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.JenkinsServer.restart",
	"Comment": "restart jenkins without waiting for any existing build to complete",
	"Method": "void restart(Boolean crumbFlag){\r\n    try {\r\n        client.post(\"/restart\", crumbFlag);\r\n    } catch (org.apache.http.client.ClientProtocolException e) {\r\n        LOGGER.error(\"restart()\", e);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateIntent.examples",
	"Comment": "gets the examples.an array of user input examples for the intent.",
	"Method": "Builder examples(List<CreateExample> examples,List<CreateExample> examples){\r\n    return examples;\r\n}"
}, {
	"Path": "com.sandwich.koan.TestUtils.allowThreadsToFinish",
	"Comment": "will lock thread accessible when called from thread via repetitive sleep\tcalls until the passed in threads are terminated. generally used to keep\tthe test exec thread alive while the other threads are still working.",
	"Method": "void allowThreadsToFinish(Thread[] threads){\r\n    boolean threadsDone = false;\r\n    while (!threadsDone) {\r\n        threadsDone = true;\r\n        for (Thread thread : threads) {\r\n            if (thread.getState() != State.TERMINATED) {\r\n                Thread.sleep(10);\r\n                threadsDone = false;\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Entity.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the entity.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.TargetedEmotionResults.getEmotion",
	"Comment": "gets the emotion.an object containing the emotion results for the target.",
	"Method": "EmotionScores getEmotion(){\r\n    return emotion;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.util.Util.setEquals",
	"Comment": "setequals determines whether two string sets are identical.",
	"Method": "boolean setEquals(List<String> a,List<String> b){\r\n    if (a == null) {\r\n        a = new ArrayList();\r\n    }\r\n    if (b == null) {\r\n        b = new ArrayList();\r\n    }\r\n    if (a.size() != b.size()) {\r\n        return false;\r\n    }\r\n    Collections.sort(a);\r\n    Collections.sort(b);\r\n    for (int i = 0; i < a.size(); i++) {\r\n        if (!a.get(i).equals(b.get(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.listEnvironments",
	"Comment": "list environments.list existing environments for the service instance.",
	"Method": "ServiceCall<ListEnvironmentsResponse> listEnvironments(ListEnvironmentsOptions listEnvironmentsOptions,ServiceCall<ListEnvironmentsResponse> listEnvironments){\r\n    return listEnvironments(null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.AddWordOptions.word",
	"Comment": "gets the word.the word that is to be added or updated for the custom voice model.",
	"Method": "Builder word(String word,String word){\r\n    return word;\r\n}"
}, {
	"Path": "io.appium.java_client.MultiTouchAction.clearActions",
	"Comment": "clears all the existing touch actions and resets the instance to the initial state.",
	"Method": "MultiTouchAction clearActions(){\r\n    actions = ImmutableList.builder();\r\n    return this;\r\n}"
}, {
	"Path": "org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter.preFilter",
	"Comment": "this processes the proxyreceptor request before the ticket validation code executes.",
	"Method": "boolean preFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain){\r\n    final HttpServletRequest request = (HttpServletRequest) servletRequest;\r\n    final HttpServletResponse response = (HttpServletResponse) servletResponse;\r\n    final String requestUri = request.getRequestURI();\r\n    if (CommonUtils.isEmpty(this.proxyReceptorUrl) || !requestUri.endsWith(this.proxyReceptorUrl)) {\r\n        return true;\r\n    }\r\n    try {\r\n        CommonUtils.readAndRespondToProxyReceptorRequest(request, response, this.proxyGrantingTicketStorage);\r\n    } catch (final RuntimeException e) {\r\n        logger.error(e.getMessage(), e);\r\n        throw e;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateValueOptions.metadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Builder metadata(Map metadata,Map metadata){\r\n    return metadata;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.addNamedGroupingPolicy",
	"Comment": "addnamedgroupingpolicy adds a named role inheritance rule to the current policy.if the rule already exists, the function returns false and the rule will not be added.otherwise the function returns true by adding the new rule.",
	"Method": "boolean addNamedGroupingPolicy(String ptype,List<String> params,boolean addNamedGroupingPolicy,String ptype,String params){\r\n    return addNamedGroupingPolicy(ptype, Arrays.asList(params));\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.norm2",
	"Comment": "the euclidean norm of the matrix as vector, also the frobeniusnorm of the matrix.",
	"Method": "double norm2(){\r\n    double norm = 0.0;\r\n    for (int i = 0; i < length; i++) {\r\n        norm += get(i) * get(i);\r\n    }\r\n    return (double) Math.sqrt(norm);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateExampleOptions.newMentions",
	"Comment": "gets the newmentions.an array of contextual entity mentions.",
	"Method": "Builder newMentions(List<Mentions> newMentions,List<Mentions> newMentions){\r\n    return newMentions;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.cumulativeSum",
	"Comment": "computes the cumulative sum, that is, the sum of all elementsof the matrix up to a given index in linear addressing.",
	"Method": "DoubleMatrix cumulativeSum(){\r\n    return dup().cumulativeSumi();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.tone_analyzer.v3.model.ToneChatScore.getScore",
	"Comment": "gets the score.the score for the tone in the range of 0.5 to 1. a score greater than 0.75 indicates a high likelihood that thetone is perceived in the utterance.",
	"Method": "Double getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.GetPronunciationOptions.text",
	"Comment": "gets the text.the word for which the pronunciation is requested.",
	"Method": "Builder text(String text,String text){\r\n    return text;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateIntentOptions.description",
	"Comment": "gets the description.the description of the intent. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.GSpeechDuplex.removeResponseListener",
	"Comment": "removes gspeechresponselisteners that fire when google sends a response.",
	"Method": "void removeResponseListener(GSpeechResponseListener rl){\r\n    responseListeners.remove(rl);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListValuesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.belongsToCluster",
	"Comment": "makes sure that the given node belongs to the current cluster.before trying to connect to a node, make sure it actually belongs to thecurrently connected cluster.",
	"Method": "boolean belongsToCluster(MemcachedNode node){\r\n    for (MemcachedNode n : locator.getAll()) {\r\n        if (n.getSocketAddress().equals(node.getSocketAddress())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.getCounterexample",
	"Comment": "get counterexample.get information about a counterexample. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Counterexample> getCounterexample(GetCounterexampleOptions getCounterexampleOptions){\r\n    Validator.notNull(getCounterexampleOptions, \"getCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { getCounterexampleOptions.workspaceId(), getCounterexampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getCounterexampleOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getCounterexampleOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Counterexample.class));\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByIosUIAutomation.findElementsByIosUIAutomation",
	"Comment": "method performs the searching for a list of elements by ios uiautomation selectorand value of the given selector.",
	"Method": "List<T> findElementsByIosUIAutomation(String using){\r\n    return findElements(MobileSelector.IOS_UI_AUTOMATION.toString(), using);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.getTokenizationDictionaryStatus",
	"Comment": "get tokenization dictionary status.returns the current status of the tokenization dictionary for the specified collection.",
	"Method": "ServiceCall<TokenDictStatusResponse> getTokenizationDictionaryStatus(GetTokenizationDictionaryStatusOptions getTokenizationDictionaryStatusOptions){\r\n    Validator.notNull(getTokenizationDictionaryStatusOptions, \"getTokenizationDictionaryStatusOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"word_lists/tokenization_dictionary\" };\r\n    String[] pathParameters = { getTokenizationDictionaryStatusOptions.environmentId(), getTokenizationDictionaryStatusOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TokenDictStatusResponse.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslationModel.isCustomizable",
	"Comment": "gets the customizable.whether this model can be used as a base for customization. customized models are not further customizable, andsome base models are not customizable.",
	"Method": "Boolean isCustomizable(){\r\n    return customizable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.deleteAllTrainingData",
	"Comment": "delete all training data.deletes all training data from a collection.",
	"Method": "ServiceCall<Void> deleteAllTrainingData(DeleteAllTrainingDataOptions deleteAllTrainingDataOptions){\r\n    Validator.notNull(deleteAllTrainingDataOptions, \"deleteAllTrainingDataOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\" };\r\n    String[] pathParameters = { deleteAllTrainingDataOptions.environmentId(), deleteAllTrainingDataOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslationModel.getModelId",
	"Comment": "gets the modelid.a globally unique string that identifies the underlying model that is used for translation.",
	"Method": "String getModelId(){\r\n    return modelId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.CreateJobOptions.model",
	"Comment": "gets the model.the identifier of the model that is to be used for the recognition request.",
	"Method": "Builder model(String model,String model){\r\n    return model;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.ListEnvironmentsOptions.name",
	"Comment": "gets the name.show only the environment with the given name.",
	"Method": "Builder name(String name,String name){\r\n    return name;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.SourceOptionsFolder.getOwnerUserId",
	"Comment": "gets the owneruserid.the box user id of the user who owns the folder to crawl.",
	"Method": "String getOwnerUserId(){\r\n    return ownerUserId;\r\n}"
}, {
	"Path": "io.appium.java_client.android.AndroidMobileCommandHelper.getPerformanceDataCommand",
	"Comment": "returns the resource usage information of the application. the resource is one of the system statewhich means cpu, memory, network traffic, and battery.",
	"Method": "Map.Entry<String, Map<String, ?>> getPerformanceDataCommand(String packageName,String dataType,int dataReadTimeout){\r\n    String[] parameters = new String[] { \"packageName\", \"dataType\", \"dataReadTimeout\" };\r\n    Object[] values = new Object[] { packageName, dataType, dataReadTimeout };\r\n    return new AbstractMap.SimpleEntry(GET_PERFORMANCE_DATA, prepareArguments(parameters, values));\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessage.getVBucketState",
	"Comment": "gets the state of the vbucket. only returned with a tap vbucket statemessage.",
	"Method": "int getVBucketState(){\r\n    return vbucketstate;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.CreateModelOptions.name",
	"Comment": "gets the name.an optional model name that you can use to identify the model. valid characters are letters, numbers, dashes,underscores, spaces and apostrophes. the maximum length is 32 characters.",
	"Method": "Builder name(String name,String name){\r\n    return name;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListWorkspacesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListCounterexamplesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.CommonUtils.assertNotNull",
	"Comment": "check whether the object is null or not. if it is, throw an exception anddisplay the message.",
	"Method": "void assertNotNull(Object object,String message){\r\n    if (object == null) {\r\n        throw new IllegalArgumentException(message);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteIntent",
	"Comment": "delete intent.delete an intent from a workspace.this operation is limited to 2000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteIntent(DeleteIntentOptions deleteIntentOptions){\r\n    Validator.notNull(deleteIntentOptions, \"deleteIntentOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\" };\r\n    String[] pathParameters = { deleteIntentOptions.workspaceId(), deleteIntentOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.LanguageTranslator.translate",
	"Comment": "translate.translates the input text from the source language to the target language.",
	"Method": "ServiceCall<TranslationResult> translate(TranslateOptions translateOptions){\r\n    Validator.notNull(translateOptions, \"translateOptions cannot be null\");\r\n    String[] pathSegments = { \"v3/translate\" };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.add(\"text\", GsonSingleton.getGson().toJsonTree(translateOptions.text()));\r\n    if (translateOptions.modelId() != null) {\r\n        contentJson.addProperty(\"model_id\", translateOptions.modelId());\r\n    }\r\n    if (translateOptions.source() != null) {\r\n        contentJson.addProperty(\"source\", translateOptions.source());\r\n    }\r\n    if (translateOptions.target() != null) {\r\n        contentJson.addProperty(\"target\", translateOptions.target());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TranslationResult.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageInput.text",
	"Comment": "gets the text.the text of the user input. this string cannot contain carriage return, newline, or tab characters, and it must beno longer than 2048 characters.",
	"Method": "Builder text(String text,String text){\r\n    return text;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogRuntimeResponseGeneric.getTitle",
	"Comment": "gets the title.the title or introductory text to show before the response.",
	"Method": "String getTitle(){\r\n    return title;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListDialogNodesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.SemanticRolesAction.getText",
	"Comment": "gets the text.analyzed text that corresponds to the action.",
	"Method": "String getText(){\r\n    return text;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageInput.intents",
	"Comment": "gets the intents.intents to use when evaluating the user input. include intents from the previous response to continue using thoseintents rather than trying to recognize intents in the new input.",
	"Method": "Builder intents(List<RuntimeIntent> intents,List<RuntimeIntent> intents){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newDigressOut",
	"Comment": "gets the newdigressout.whether this dialog node can be returned to after a digression.",
	"Method": "Builder newDigressOut(String newDigressOut,String newDigressOut){\r\n    return newDigressOut;\r\n}"
}, {
	"Path": "org.jblas.util.LibraryLoader.loadLibraryFromStream",
	"Comment": "load a system library from a stream. copies the library to a temp fileand loads from there.",
	"Method": "void loadLibraryFromStream(String libname,InputStream is){\r\n    try {\r\n        File tempfile = createTempFile(libname);\r\n        OutputStream os = new FileOutputStream(tempfile);\r\n        logger.debug(\"tempfile.getPath() = \" + tempfile.getPath());\r\n        long savedTime = System.currentTimeMillis();\r\n        byte[] buf = new byte[8192];\r\n        int len;\r\n        while ((len = is.read(buf)) > 0) {\r\n            os.write(buf, 0, len);\r\n        }\r\n        os.flush();\r\n        InputStream lock = new FileInputStream(tempfile);\r\n        os.close();\r\n        double seconds = (double) (System.currentTimeMillis() - savedTime) / 1e3;\r\n        logger.debug(\"Copying took \" + seconds + \" seconds.\");\r\n        logger.debug(\"Loading library from \" + tempfile.getPath() + \".\");\r\n        System.load(tempfile.getPath());\r\n        lock.close();\r\n    } catch (IOException io) {\r\n        logger.error(\"Could not create the temp file: \" + io.toString() + \".\\n\");\r\n    } catch (UnsatisfiedLinkError ule) {\r\n        logger.error(\"Couldn't load copied link file: \" + ule.toString() + \".\\n\");\r\n        throw ule;\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListWorkspacesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AudioResource.getDuration",
	"Comment": "gets the duration.the total seconds of audio in the audio resource. the value is always a whole number.",
	"Method": "Double getDuration(){\r\n    return duration;\r\n}"
}, {
	"Path": "org.jblas.util.SanityChecks.checkVectorAddition",
	"Comment": "check whether vector addition works. this is pure java code and should work.",
	"Method": "void checkVectorAddition(){\r\n    DoubleMatrix x = new DoubleMatrix(3, 1, 1.0, 2.0, 3.0);\r\n    DoubleMatrix y = new DoubleMatrix(3, 1, 4.0, 5.0, 6.0);\r\n    DoubleMatrix z = new DoubleMatrix(3, 1, 5.0, 7.0, 9.0);\r\n    check(\"checking vector addition\", x.add(y).equals(z));\r\n}"
}, {
	"Path": "org.jblas.ComplexFloatMatrix.load",
	"Comment": "loads a matrix from a file into this matrix. note that the old data\tof this matrix will be discarded.",
	"Method": "void load(String filename){\r\n    FileInputStream fis = new FileInputStream(filename);\r\n    DataInputStream dis = new DataInputStream(fis);\r\n    try {\r\n        this.in(dis);\r\n    } finally {\r\n        dis.close();\r\n        fis.close();\r\n    }\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.TapStream.addOp",
	"Comment": "add an operation to the stream of tap messages which have been sent to theserver.note this does not represent all messages, just a select few worth keepingtrack of.while a public method, this is not intended for general use but rather onlyfor use when extending the tapclient which manages this tapstream.",
	"Method": "void addOp(TapOperation op){\r\n    ops.add(op);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.addNamedPolicy",
	"Comment": "addnamedpolicy adds an authorization rule to the current named policy.if the rule already exists, the function returns false and the rule will not be added.otherwise the function returns true by adding the new rule.",
	"Method": "boolean addNamedPolicy(String ptype,List<String> params,boolean addNamedPolicy,String ptype,String params){\r\n    return addNamedPolicy(ptype, Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.createSynonym",
	"Comment": "add entity value synonym.add a new synonym to an entity value.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Synonym> createSynonym(CreateSynonymOptions createSynonymOptions){\r\n    Validator.notNull(createSynonymOptions, \"createSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { createSynonymOptions.workspaceId(), createSynonymOptions.entity(), createSynonymOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"synonym\", createSynonymOptions.synonym());\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Synonym.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Histogram.getField",
	"Comment": "gets the field.the field where the aggregation is located in the document.",
	"Method": "String getField(){\r\n    return field;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageOptions.context",
	"Comment": "gets the context.state information for the conversation. continue a conversation by including the context object from the previousresponse.",
	"Method": "Builder context(Context context,Context context){\r\n    return context;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceExport.getMetadata",
	"Comment": "gets the metadata.any metadata that is required by the workspace.",
	"Method": "Map getMetadata(){\r\n    return metadata;\r\n}"
}, {
	"Path": "de.danielbechler.diff.node.DiffNode.addChild",
	"Comment": "adds a child to this node and sets this node as its parent node.",
	"Method": "void addChild(DiffNode node){\r\n    if (node == this) {\r\n        throw new IllegalArgumentException(\"Detected attempt to add a node to itself. \" + \"This would cause inifite loops and must never happen.\");\r\n    } else if (node.isRootNode()) {\r\n        throw new IllegalArgumentException(\"Detected attempt to add root node as child. \" + \"This is not allowed and must be a mistake.\");\r\n    } else if (node.getParentNode() != null && node.getParentNode() != this) {\r\n        throw new IllegalArgumentException(\"Detected attempt to add child node that is already the \" + \"child of another node. Adding nodes multiple times is not allowed, since it could \" + \"cause infinite loops.\");\r\n    }\r\n    if (node.getParentNode() == null) {\r\n        node.setParentNode(this);\r\n    }\r\n    children.put(node.getElementSelector(), node);\r\n    if (state == State.UNTOUCHED && node.hasChanges()) {\r\n        state = State.CHANGED;\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.getTrainingExample",
	"Comment": "get details for training data example.gets the details for this training example.",
	"Method": "ServiceCall<TrainingExample> getTrainingExample(GetTrainingExampleOptions getTrainingExampleOptions){\r\n    Validator.notNull(getTrainingExampleOptions, \"getTrainingExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\", \"examples\" };\r\n    String[] pathParameters = { getTrainingExampleOptions.environmentId(), getTrainingExampleOptions.collectionId(), getTrainingExampleOptions.queryId(), getTrainingExampleOptions.exampleId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TrainingExample.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageOptions.input",
	"Comment": "gets the input.an input object that includes the input text.",
	"Method": "Builder input(InputData input,InputData input){\r\n    return input;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.LanguageTranslator.getModel",
	"Comment": "get model details.gets information about a translation model, including training status for custom models.",
	"Method": "ServiceCall<TranslationModel> getModel(GetModelOptions getModelOptions){\r\n    Validator.notNull(getModelOptions, \"getModelOptions cannot be null\");\r\n    String[] pathSegments = { \"v2/models\" };\r\n    String[] pathParameters = { getModelOptions.modelId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TranslationModel.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifierResult.getClassifierId",
	"Comment": "gets the classifierid.id of a classifier identified in the image.",
	"Method": "String getClassifierId(){\r\n    return classifierId;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.InternalEnforcer.removeFilteredPolicy",
	"Comment": "removefilteredpolicy removes rules based on field filters from the current policy.",
	"Method": "boolean removeFilteredPolicy(String sec,String ptype,int fieldIndex,String fieldValues){\r\n    boolean ruleRemoved = model.removeFilteredPolicy(sec, ptype, fieldIndex, fieldValues);\r\n    if (!ruleRemoved) {\r\n        return false;\r\n    }\r\n    if (adapter != null && autoSave) {\r\n        try {\r\n            adapter.removeFilteredPolicy(sec, ptype, fieldIndex, fieldValues);\r\n        } catch (Error e) {\r\n            if (!e.getMessage().equals(\"not implemented\")) {\r\n                throw e;\r\n            }\r\n        }\r\n        if (watcher != null) {\r\n            watcher.update();\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.client.util.UrlUtils.toViewBaseUrl",
	"Comment": "helper to create the base url for a view, with or without a given folder",
	"Method": "String toViewBaseUrl(FolderJob folder,String name){\r\n    final StringBuilder sb = new StringBuilder(DEFAULT_BUFFER_SIZE);\r\n    final String base = UrlUtils.toBaseUrl(folder);\r\n    sb.append(base);\r\n    if (!base.endsWith(\"/\"))\r\n        sb.append('/');\r\n    sb.append(\"view/\").append(EncodingUtils.encode(name));\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.jinq.orm.stream.LazyWrappedStream.wrap",
	"Comment": "allows subclasses to wrap streams generated by this class with wrappers that provide additional functionality.",
	"Method": "Stream<U> wrap(Stream<U> toWrap){\r\n    return toWrap;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageRequest.getOutput",
	"Comment": "gets the output.system output. include the output from the previous response to maintain intermediate information over multiplerequests.",
	"Method": "OutputData getOutput(){\r\n    return output;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.ListModelsOptions.source",
	"Comment": "gets the source.specify a language code to filter results by source language.",
	"Method": "Builder source(String source,String source){\r\n    return source;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Workspace.getCreated",
	"Comment": "gets the created.the timestamp for creation of the workspace.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.IndexCapacity.getCollections",
	"Comment": "gets the collections.summary of the collection usage in the environment.",
	"Method": "CollectionUsage getCollections(){\r\n    return collections;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListExamplesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateWorkspaceOptions.dialogNodes",
	"Comment": "gets the dialognodes.an array of objects defining the nodes in the workspace dialog.",
	"Method": "Builder dialogNodes(List<CreateDialogNode> dialogNodes,List<CreateDialogNode> dialogNodes){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.http.RequestBuilder.bodyContent",
	"Comment": "sets the request body content from one of three different sources, based on the content type.",
	"Method": "RequestBuilder bodyContent(String content,String contentType,RequestBuilder bodyContent,InputStream stream,String contentType,RequestBuilder bodyContent,String contentType,Object jsonContent,Object jsonPatchContent,InputStream nonJsonContent,RequestBuilder bodyContent,String contentType,Object jsonContent,Object jsonPatchContent,String nonJsonContent){\r\n    InputStream nonJson = null;\r\n    if (nonJsonContent != null) {\r\n        nonJson = StringHelper.toInputStream(nonJsonContent);\r\n    }\r\n    return bodyContent(contentType, jsonContent, jsonPatchContent, nonJson);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.InputData.text",
	"Comment": "gets the text.the text of the user input. this string cannot contain carriage return, newline, or tab characters, and it must beno longer than 2048 characters.",
	"Method": "Builder text(String text,String text){\r\n    return text;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.http.RequestBuilder.addParam",
	"Comment": "adds the name, value par to the parameter list as basicnamevalue.",
	"Method": "void addParam(List<NameValue> params,String name,Object value){\r\n    params.add(new NameValue(name, value == null ? null : String.valueOf(value)));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListWorkspacesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListValuesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteDialogNode",
	"Comment": "delete dialog node.delete a dialog node from a workspace.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteDialogNode(DeleteDialogNodeOptions deleteDialogNodeOptions){\r\n    Validator.notNull(deleteDialogNodeOptions, \"deleteDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { deleteDialogNodeOptions.workspaceId(), deleteDialogNodeOptions.dialogNode() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.CredentialUtils.setContext",
	"Comment": "sets the context variable for jdni. this is a utility method for testing.",
	"Method": "void setContext(Hashtable<String, String> env){\r\n    try {\r\n        CredentialUtils.context = new InitialContext(env);\r\n    } catch (Exception e) {\r\n        log.fine(\"Error setting up JDNI context: \" + e.getMessage());\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Pagination.getNextCursor",
	"Comment": "gets the nextcursor.a token identifying the next page of results.",
	"Method": "String getNextCursor(){\r\n    return nextCursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.DeleteJobOptions.id",
	"Comment": "gets the id.the identifier of the asynchronous job that is to be used for the request.",
	"Method": "Builder id(String id,String id){\r\n    return id;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ImageWithFaces.getResolvedUrl",
	"Comment": "gets the resolvedurl.fully resolved url of the image after redirects are followed. not returned when the image is uploaded.",
	"Method": "String getResolvedUrl(){\r\n    return resolvedUrl;\r\n}"
}, {
	"Path": "io.appium.java_client.ScreenshotState.getComparisonInterval",
	"Comment": "gets the interval value in ms between similarity verification rounds in verify methods.",
	"Method": "Duration getComparisonInterval(){\r\n    return comparisonInterval;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.JenkinsTriggerHelper.triggerJobAndWaitUntilFinished",
	"Comment": "this method will trigger a build of the given job and will wait until thebuilds is ended or if the build has been cancelled.",
	"Method": "BuildWithDetails triggerJobAndWaitUntilFinished(String jobName,BuildWithDetails triggerJobAndWaitUntilFinished,String jobName,Map<String, String> params,BuildWithDetails triggerJobAndWaitUntilFinished,String jobName,Map<String, String> params,boolean crumbFlag,BuildWithDetails triggerJobAndWaitUntilFinished,String jobName,Map<String, String> params,Map<String, File> fileParams,boolean crumbFlag,BuildWithDetails triggerJobAndWaitUntilFinished,String jobName,Map<String, String> params,Map<String, File> fileParams,BuildWithDetails triggerJobAndWaitUntilFinished,String jobName,boolean crumbFlag,BuildWithDetails triggerJobAndWaitUntilFinished,String jobName,QueueReference queueRef){\r\n    JobWithDetails job = this.server.getJob(jobName);\r\n    QueueItem queueItem = this.server.getQueueItem(queueRef);\r\n    while (!queueItem.isCancelled() && job.isInQueue()) {\r\n        Thread.sleep(retryInterval);\r\n        job = this.server.getJob(jobName);\r\n        queueItem = this.server.getQueueItem(queueRef);\r\n    }\r\n    Build build = server.getBuild(queueItem);\r\n    if (queueItem.isCancelled()) {\r\n        return build.details();\r\n    }\r\n    boolean isBuilding = build.details().isBuilding();\r\n    while (isBuilding) {\r\n        Thread.sleep(retryInterval);\r\n        isBuilding = build.details().isBuilding();\r\n    }\r\n    return build.details();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.SpeechToTextIT.testCreateJobWarning",
	"Comment": "test create job with a warning message.this test is currently being ignored as it has a very long runtime and causes travis to timeout.the ignore annotation can be removed to test this locally.",
	"Method": "void testCreateJobWarning(){\r\n    File audio = new File(SAMPLE_WAV);\r\n    CreateJobOptions createOptions = new CreateJobOptions.Builder().audio(audio).contentType(CreateJobOptions.ContentType.AUDIO_WAV).userToken(\"job\").build();\r\n    RecognitionJob job = service.createJob(createOptions).execute();\r\n    try {\r\n        assertNotNull(job.getId());\r\n        assertNotNull(job.getWarnings());\r\n        CheckJobOptions checkOptions = new CheckJobOptions.Builder().id(job.getId()).build();\r\n        for (int x = 0; x < 30 && job.getStatus() != RecognitionJob.Status.COMPLETED; x++) {\r\n            Thread.sleep(3000);\r\n            job = service.checkJob(checkOptions).execute();\r\n        }\r\n        job = service.checkJob(checkOptions).execute();\r\n        assertEquals(RecognitionJob.Status.COMPLETED, job.getStatus());\r\n        assertNotNull(job.getResults());\r\n    } finally {\r\n        DeleteJobOptions deleteOptions = new DeleteJobOptions.Builder().id(job.getId()).build();\r\n        service.deleteJob(deleteOptions).execute();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogRuntimeResponseGeneric.getResponseType",
	"Comment": "gets the responsetype.the type of response returned by the dialog node. the specified response type must be supported by the clientapplication or channel. suggestion response type is part of the disambiguation feature, which is only available forpremium users.",
	"Method": "String getResponseType(){\r\n    return responseType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.tone_analyzer_integration.ToneDetection.updateSocialTone",
	"Comment": "updatesocialtone updates the user with the social tones interpreted based on the specified thresholds.",
	"Method": "void updateSocialTone(Map<String, Object> user,List<ToneScore> socialTone,boolean maintainHistory){\r\n    List<String> currentSocial = new ArrayList<String>();\r\n    Map<String, Object> currentSocialObject = new HashMap<String, Object>();\r\n    for (ToneScore tone : socialTone) {\r\n        if (tone.getScore() >= SOCIAL_HIGH_SCORE_THRESHOLD) {\r\n            currentSocial.add(tone.getToneName().toLowerCase() + \"_high\");\r\n            currentSocialObject.put(\"tone_name\", tone.getToneName().toLowerCase());\r\n            currentSocialObject.put(\"score\", tone.getScore());\r\n            currentSocialObject.put(\"interpretation\", \"likely high\");\r\n        } else if (tone.getScore() <= SOCIAL_LOW_SCORE_THRESHOLD) {\r\n            currentSocial.add(tone.getToneName().toLowerCase() + \"_low\");\r\n            currentSocialObject.put(\"tone_name\", tone.getToneName().toLowerCase());\r\n            currentSocialObject.put(\"score\", tone.getScore());\r\n            currentSocialObject.put(\"interpretation\", \"likely low\");\r\n        } else {\r\n            currentSocialObject.put(\"tone_name\", tone.getToneName().toLowerCase());\r\n            currentSocialObject.put(\"score\", tone.getScore());\r\n            currentSocialObject.put(\"interpretation\", \"likely medium\");\r\n        }\r\n    }\r\n    Map<String, Object> social = (Map<String, Object>) ((Map<String, Object>) user.get(\"tone\")).get(\"social\");\r\n    social.put(\"current\", currentSocial);\r\n    if (maintainHistory) {\r\n        List<Map<String, Object>> history = new ArrayList<Map<String, Object>>();\r\n        if (social.get(\"history\") != null) {\r\n            history = (List<Map<String, Object>>) social.get(\"history\");\r\n        }\r\n        history.add(currentSocialObject);\r\n        social.put(\"history\", history);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryRelationsFilter.getRelationTypes",
	"Comment": "gets the relationtypes.a list of relation types to include or exclude from the query.",
	"Method": "QueryFilterType getRelationTypes(){\r\n    return relationTypes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.EventData.getClientTimestamp",
	"Comment": "gets the clienttimestamp.the optional timestamp for the event that was created. if not provided, the time that the event was created in thelog was used.",
	"Method": "Date getClientTimestamp(){\r\n    return clientTimestamp;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Workspace.getSystemSettings",
	"Comment": "gets the systemsettings.global settings for the workspace.",
	"Method": "WorkspaceSystemSettings getSystemSettings(){\r\n    return systemSettings;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.MetricAggregationResult.getKeyAsString",
	"Comment": "gets the keyasstring.date in string form representing the start of this interval.",
	"Method": "Date getKeyAsString(){\r\n    return keyAsString;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslationModel.isCustomizable",
	"Comment": "gets the customizable.whether this model can be used as a base for customization. customized models are not further customizable, andsome base models are not customizable.",
	"Method": "Boolean isCustomizable(){\r\n    return customizable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryPassages.getPassageText",
	"Comment": "gets the passagetext.the content of the extracted passage.",
	"Method": "String getPassageText(){\r\n    return passageText;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.EntityExport.getValues",
	"Comment": "gets the values.an array objects describing the entity values.",
	"Method": "List<ValueExport> getValues(){\r\n    return values;\r\n}"
}, {
	"Path": "com.darkprograms.speech.synthesiser.BaseSynthsiser.getMP3Data",
	"Comment": "gets an inputstream to mp3data for the returned information from a request",
	"Method": "InputStream getMP3Data(String synthText,InputStream getMP3Data,List<String> synthText){\r\n    ExecutorService pool = Executors.newFixedThreadPool(1000);\r\n    Set<Future<InputStream>> set = new LinkedHashSet<Future<InputStream>>(synthText.size());\r\n    for (String part : synthText) {\r\n        Callable<InputStream> callable = new MP3DataFetcher(part);\r\n        Future<InputStream> future = pool.submit(callable);\r\n        set.add(future);\r\n    }\r\n    List<InputStream> inputStreams = new ArrayList<InputStream>(set.size());\r\n    for (Future<InputStream> future : set) {\r\n        try {\r\n            inputStreams.add(future.get());\r\n        } catch (ExecutionException e) {\r\n            Throwable ex = e.getCause();\r\n            if (ex instanceof IOException) {\r\n                throw (IOException) ex;\r\n            }\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n    return new SequenceInputStream(Collections.enumeration(inputStreams));\r\n}"
}, {
	"Path": "io.appium.java_client.TouchAction.longPress",
	"Comment": "press and hold the at the center of an element until the context menu event has fired.",
	"Method": "T longPress(LongPressOptions longPressOptions,T longPress,PointOption longPressOptions){\r\n    ActionParameter action = new ActionParameter(\"longPress\", longPressOptions);\r\n    parameterBuilder.add(action);\r\n    return (T) this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.digressOut",
	"Comment": "gets the digressout.whether this dialog node can be returned to after a digression.",
	"Method": "Builder digressOut(String digressOut,String digressOut){\r\n    return digressOut;\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.hasMoreMessages",
	"Comment": "decides whether the client has received tap messages or will receive moremessages in the future.",
	"Method": "boolean hasMoreMessages(){\r\n    if (!rqueue.isEmpty()) {\r\n        return true;\r\n    } else {\r\n        synchronized (omap) {\r\n            Iterator<TapStream> itr = omap.keySet().iterator();\r\n            while (itr.hasNext()) {\r\n                TapStream ts = itr.next();\r\n                if (ts.isCompleted() || ts.isCancelled() || ts.hasErrored()) {\r\n                    omap.get(ts).shutdown();\r\n                    omap.remove(ts);\r\n                }\r\n            }\r\n            if (omap.size() > 0) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newNextStep",
	"Comment": "gets the newnextstep.the next step to be executed in dialog processing.",
	"Method": "Builder newNextStep(DialogNodeNextStep newNextStep,DialogNodeNextStep newNextStep){\r\n    return newNextStep;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.previousSibling",
	"Comment": "gets the previoussibling.the id of the previous dialog node.",
	"Method": "Builder previousSibling(String previousSibling,String previousSibling){\r\n    return previousSibling;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentAccepted.getStatus",
	"Comment": "gets the status.status of the document in the ingestion process.",
	"Method": "String getStatus(){\r\n    return status;\r\n}"
}, {
	"Path": "io.appium.java_client.android.SupportsSpecialEmulatorCommands.setGsmSignalStrength",
	"Comment": "emulate gsm signal strength change event on the connected emulator.",
	"Method": "void setGsmSignalStrength(GsmSignalStrength gsmSignalStrength){\r\n    CommandExecutionHelper.execute(this, gsmSignalStrengthCommand(gsmSignalStrength));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateExample",
	"Comment": "update user input example.update the text of a user input example.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Example> updateExample(UpdateExampleOptions updateExampleOptions){\r\n    Validator.notNull(updateExampleOptions, \"updateExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { updateExampleOptions.workspaceId(), updateExampleOptions.intent(), updateExampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateExampleOptions.newText() != null) {\r\n        contentJson.addProperty(\"text\", updateExampleOptions.newText());\r\n    }\r\n    if (updateExampleOptions.newMentions() != null) {\r\n        contentJson.add(\"mentions\", GsonSingleton.getGson().toJsonTree(updateExampleOptions.newMentions()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Example.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentFeatures.categories",
	"Comment": "gets the categories.an object specifying the categories enrichment and related parameters.",
	"Method": "Builder categories(NluEnrichmentCategories categories,NluEnrichmentCategories categories){\r\n    return categories;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.DocumentEmotionResults.getEmotion",
	"Comment": "gets the emotion.an object containing the emotion results for the document.",
	"Method": "EmotionScores getEmotion(){\r\n    return emotion;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AudioResources.getAudio",
	"Comment": "gets the audio.an array of objects that provides information about the audio resources of the custom acoustic model. the array isempty if the custom model has no audio resources.",
	"Method": "List<AudioResource> getAudio(){\r\n    return audio;\r\n}"
}, {
	"Path": "io.appium.java_client.ios.IOSDriver.getCapabilities",
	"Comment": "returns capabilities that were provided on instantiation.",
	"Method": "Capabilities getCapabilities(){\r\n    MutableCapabilities capabilities = (MutableCapabilities) super.getCapabilities();\r\n    capabilities.setCapability(PLATFORM_NAME, IOS_PLATFORM);\r\n    return capabilities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageRequest.getEntities",
	"Comment": "gets the entities.entities to use when evaluating the message. include entities from the previous response to continue using thoseentities rather than detecting entities in the new input.",
	"Method": "List<RuntimeEntity> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateWorkspaceOptions.intents",
	"Comment": "gets the intents.an array of objects defining the intents for the workspace.",
	"Method": "Builder intents(List<CreateIntent> intents,List<CreateIntent> intents){\r\n    return intents;\r\n}"
}, {
	"Path": "org.jasig.cas.client.jaas.CasLoginModule.convertIfNecessary",
	"Comment": "attempts to do simple type conversion from a string value to the type expectedby the given property.currently only conversion to int, long, and boolean are supported.",
	"Method": "Object convertIfNecessary(PropertyDescriptor pd,String value){\r\n    if (String.class.equals(pd.getPropertyType())) {\r\n        return value;\r\n    } else if (boolean.class.equals(pd.getPropertyType())) {\r\n        return Boolean.valueOf(value);\r\n    } else if (int.class.equals(pd.getPropertyType())) {\r\n        return new Integer(value);\r\n    } else if (long.class.equals(pd.getPropertyType())) {\r\n        return new Long(value);\r\n    } else {\r\n        throw new IllegalArgumentException(\"No conversion strategy exists for property \" + pd.getName() + \" of type \" + pd.getPropertyType());\r\n    }\r\n}"
}, {
	"Path": "com.sandwich.util.Strings.createResourceBundle",
	"Comment": "conditionally create messages bundle for proper locale, not on classpath so need to handle manually",
	"Method": "ResourceBundle createResourceBundle(){\r\n    ResourceBundle temp = null;\r\n    try {\r\n        temp = new PropertyResourceBundle(new FileInputStream(DirectoryManager.injectFileSystemSeparators(DirectoryManager.getProjectI18nDir(), new StringBuilder(\"messages_\").append(Locale.getDefault().getLanguage()).append(\".properties\").toString())));\r\n    } catch (FileNotFoundException x) {\r\n        try {\r\n            Logger.getLogger(Strings.class.getName()).log(Level.INFO, \"Your default language is not supported yet. \" + x.getLocalizedMessage());\r\n            temp = new PropertyResourceBundle(new FileInputStream(DirectoryManager.injectFileSystemSeparators(DirectoryManager.getProjectI18nDir(), \"messages_en.properties\")));\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    return temp;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateEntityOptions.values",
	"Comment": "gets the values.an array of objects describing the entity values.",
	"Method": "Builder values(List<CreateValue> values,List<CreateValue> values){\r\n    return values;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.Classifier.getExplanation",
	"Comment": "gets the explanation.if classifier training has failed, this field might explain why.",
	"Method": "String getExplanation(){\r\n    return explanation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.IdentifiedLanguage.getLanguage",
	"Comment": "gets the language.the language code for an identified language.",
	"Method": "String getLanguage(){\r\n    return language;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DeleteCredentialsOptions.credentialId",
	"Comment": "gets the credentialid.the unique identifier for a set of source credentials.",
	"Method": "Builder credentialId(String credentialId,String credentialId){\r\n    return credentialId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.digressOut",
	"Comment": "gets the digressout.whether this dialog node can be returned to after a digression.",
	"Method": "Builder digressOut(String digressOut,String digressOut){\r\n    return digressOut;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.RegisterStatus.getUrl",
	"Comment": "gets the url.the callback url that is successfully registered.",
	"Method": "String getUrl(){\r\n    return url;\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.Complex.conjugate",
	"Comment": "return a new complex object whose value is the conjugate of this",
	"Method": "Complex conjugate(){\r\n    return new Complex(re, -im);\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessageBaseCase.testGetVBucketState",
	"Comment": "test of getvbucketstate method, of class responsemessage.",
	"Method": "void testGetVBucketState(){\r\n    int expResult = 0;\r\n    int result = instance.getVBucketState();\r\n    assertEquals(expResult, result);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceCollection.getPagination",
	"Comment": "gets the pagination.an object defining the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.ListModelsOptions.source",
	"Comment": "gets the source.specify a language code to filter results by source language.",
	"Method": "Builder source(String source,String source){\r\n    return source;\r\n}"
}, {
	"Path": "io.appium.java_client.android.SupportsSpecialEmulatorCommands.setNetworkSpeed",
	"Comment": "emulate network speed change event on the connected emulator.",
	"Method": "void setNetworkSpeed(NetworkSpeed networkSpeed){\r\n    CommandExecutionHelper.execute(this, networkSpeedCommand(networkSpeed));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateIntent",
	"Comment": "update intent.update an existing intent with new or modified data. you must provide component objects defining the content of theupdated intent.this operation is limited to 2000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Intent> updateIntent(UpdateIntentOptions updateIntentOptions){\r\n    Validator.notNull(updateIntentOptions, \"updateIntentOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\" };\r\n    String[] pathParameters = { updateIntentOptions.workspaceId(), updateIntentOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateIntentOptions.newIntent() != null) {\r\n        contentJson.addProperty(\"intent\", updateIntentOptions.newIntent());\r\n    }\r\n    if (updateIntentOptions.newExamples() != null) {\r\n        contentJson.add(\"examples\", GsonSingleton.getGson().toJsonTree(updateIntentOptions.newExamples()));\r\n    }\r\n    if (updateIntentOptions.newDescription() != null) {\r\n        contentJson.addProperty(\"description\", updateIntentOptions.newDescription());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Intent.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.security.IamTokenManager.requestToken",
	"Comment": "request an iam token using an api key. also updates internal managed iam token information.",
	"Method": "String requestToken(){\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(url, new String[0]));\r\n    builder.header(HttpHeaders.CONTENT_TYPE, HttpMediaType.APPLICATION_FORM_URLENCODED);\r\n    builder.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION);\r\n    FormBody formBody = new FormBody.Builder().add(GRANT_TYPE, REQUEST_GRANT_TYPE).add(API_KEY, apiKey).add(RESPONSE_TYPE, CLOUD_IAM).build();\r\n    builder.body(formBody);\r\n    tokenData = callIamApi(builder.build());\r\n    return tokenData.getAccessToken();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AcousticModel.getDescription",
	"Comment": "gets the description.the description of the custom acoustic model.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createEntity",
	"Comment": "create entity.create a new entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Entity> createEntity(CreateEntityOptions createEntityOptions){\r\n    Validator.notNull(createEntityOptions, \"createEntityOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\" };\r\n    String[] pathParameters = { createEntityOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"entity\", createEntityOptions.entity());\r\n    if (createEntityOptions.description() != null) {\r\n        contentJson.addProperty(\"description\", createEntityOptions.description());\r\n    }\r\n    if (createEntityOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(createEntityOptions.metadata()));\r\n    }\r\n    if (createEntityOptions.values() != null) {\r\n        contentJson.add(\"values\", GsonSingleton.getGson().toJsonTree(createEntityOptions.values()));\r\n    }\r\n    if (createEntityOptions.fuzzyMatch() != null) {\r\n        contentJson.addProperty(\"fuzzy_match\", createEntityOptions.fuzzyMatch());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Entity.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateWorkspaceOptions.systemSettings",
	"Comment": "gets the systemsettings.global settings for the workspace.",
	"Method": "Builder systemSettings(WorkspaceSystemSettings systemSettings,WorkspaceSystemSettings systemSettings){\r\n    return systemSettings;\r\n}"
}, {
	"Path": "io.appium.java_client.InteractsWithApps.closeApp",
	"Comment": "close the app which was provided in the capabilities at session creationand quits the session.",
	"Method": "void closeApp(){\r\n    execute(CLOSE_APP);\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.argmax",
	"Comment": "returns the linear index of the maximal element of the matrix. ifthere are more than one elements with this value, the first oneis returned.",
	"Method": "int argmax(){\r\n    if (isEmpty()) {\r\n        return -1;\r\n    }\r\n    double v = Double.NEGATIVE_INFINITY;\r\n    int a = -1;\r\n    for (int i = 0; i < length; i++) {\r\n        if (!Double.isNaN(get(i)) && get(i) > v) {\r\n            v = get(i);\r\n            a = i;\r\n        }\r\n    }\r\n    return a;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.CustomWord.getWord",
	"Comment": "gets the word.a word that is to be added or updated for the custom voice model.",
	"Method": "String getWord(){\r\n    return word;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getDigressOut",
	"Comment": "gets the digressout.whether this dialog node can be returned to after a digression.",
	"Method": "String getDigressOut(){\r\n    return digressOut;\r\n}"
}, {
	"Path": "net.spy.memcached.protocol.BaseOperationImpl.getCallback",
	"Comment": "get the operation callback associated with this operation.",
	"Method": "OperationCallback getCallback(){\r\n    return callback;\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.getNextMessage",
	"Comment": "gets the next tap message from the queue of received tap messages.",
	"Method": "ResponseMessage getNextMessage(ResponseMessage getNextMessage,long time,TimeUnit timeunit){\r\n    try {\r\n        Object m = rqueue.poll(time, timeunit);\r\n        if (m == null) {\r\n            return null;\r\n        } else if (m instanceof ResponseMessage) {\r\n            return (ResponseMessage) m;\r\n        } else if (m instanceof TapAck) {\r\n            TapAck ack = (TapAck) m;\r\n            tapAck(ack.getConn(), ack.getNode(), ack.getOpcode(), ack.getOpaque(), ack.getCallback());\r\n            return null;\r\n        } else {\r\n            throw new RuntimeException(\"Unexpected tap message type\");\r\n        }\r\n    } catch (InterruptedException e) {\r\n        shutdown();\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentSemanticRoles.limit",
	"Comment": "gets the limit.the maximum number of semantic roles enrichments to extact from each instance of the specified field.",
	"Method": "Builder limit(long limit,Long limit){\r\n    return limit;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.model.Job.build",
	"Comment": "trigger a parameterized build with file parameters and crumbflag",
	"Method": "QueueReference build(QueueReference build,boolean crumbFlag,QueueReference build,Map<String, String> params,QueueReference build,Map<String, String> params,boolean crumbFlag,QueueReference build,Map<String, String> params,Map<String, File> fileParams,QueueReference build,Map<String, String> params,Map<String, File> fileParams,boolean crumbFlag){\r\n    String qs = join(Collections2.transform(params.entrySet(), new MapEntryToQueryStringPair()), \"&\");\r\n    ExtractHeader location = client.post(url + \"buildWithParameters?\" + qs, null, ExtractHeader.class, fileParams, crumbFlag);\r\n    return new QueueReference(location.getLocation());\r\n}"
}, {
	"Path": "io.appium.java_client.TouchAction.clearParameters",
	"Comment": "clears all the existing action parameters and resets the instance to the initial state.",
	"Method": "T clearParameters(){\r\n    parameterBuilder = builder();\r\n    return (T) this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateWorkspaceOptions.name",
	"Comment": "gets the name.the name of the workspace. this string cannot contain carriage return, newline, or tab characters, and it must beno longer than 64 characters.",
	"Method": "Builder name(String name,String name){\r\n    return name;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateSynonym",
	"Comment": "update entity value synonym.update an existing entity value synonym with new text.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Synonym> updateSynonym(UpdateSynonymOptions updateSynonymOptions){\r\n    Validator.notNull(updateSynonymOptions, \"updateSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { updateSynonymOptions.workspaceId(), updateSynonymOptions.entity(), updateSynonymOptions.value(), updateSynonymOptions.synonym() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateSynonymOptions.newSynonym() != null) {\r\n        contentJson.addProperty(\"synonym\", updateSynonymOptions.newSynonym());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Synonym.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.previousSibling",
	"Comment": "gets the previoussibling.the id of the previous dialog node.",
	"Method": "Builder previousSibling(String previousSibling,String previousSibling){\r\n    return previousSibling;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Profile.getBehavior",
	"Comment": "gets the behavior.for json content that is timestamped, detailed results about the social behavior disclosed by the input in terms oftemporal characteristics. the results include information about the distribution of the content over the days ofthe week and the hours of the day.",
	"Method": "List<Behavior> getBehavior(){\r\n    return behavior;\r\n}"
}, {
	"Path": "com.darkprograms.speech.synthesiser.SynthesiserV2.setSpeed",
	"Comment": "sets the speed of audio.\tvalid values range from 0 to 2 inclusive.\tvalues higher than one correspond to faster and vice versa.",
	"Method": "void setSpeed(double speed){\r\n    this.speed = speed;\r\n}"
}, {
	"Path": "de.danielbechler.diff.node.DiffNode.isPropertyAware",
	"Comment": "returns true when this node represents a bean property and can therefore be queried for property\tspecific information like annotations or property types. but there will also be nodes that represent collection\titems, map entries, etc. in those cases this method will return false.",
	"Method": "boolean isPropertyAware(){\r\n    return accessor instanceof PropertyAwareAccessor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeOutputOptionsElement.getValue",
	"Comment": "gets the value.an object defining the message input to be sent to the conversation service if the user selects the correspondingoption.",
	"Method": "DialogNodeOutputOptionsElementValue getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "io.appium.java_client.TouchAction.cancel",
	"Comment": "cancel this action, if it was partially completed by the performstouchactions.",
	"Method": "void cancel(){\r\n    ActionParameter action = new ActionParameter(\"cancel\");\r\n    parameterBuilder.add(action);\r\n    this.perform();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Pagination.getNextUrl",
	"Comment": "gets the nexturl.the url that will return the next page of results.",
	"Method": "String getNextUrl(){\r\n    return nextUrl;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.load",
	"Comment": "loads a matrix from a file into this matrix. note that the old dataof this matrix will be discarded.",
	"Method": "void load(String filename){\r\n    FileInputStream fis = new FileInputStream(filename);\r\n    DataInputStream dis = new DataInputStream(fis);\r\n    try {\r\n        this.in(dis);\r\n    } finally {\r\n        dis.close();\r\n        fis.close();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNode.getParent",
	"Comment": "gets the parent.the id of the parent dialog node. this property is not returned if the dialog node has no parent.",
	"Method": "String getParent(){\r\n    return parent;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageOptions.intents",
	"Comment": "gets the intents.intents to use when evaluating the user input. include intents from the previous response to continue using thoseintents rather than trying to recognize intents in the new input.",
	"Method": "Builder intents(List<RuntimeIntent> intents,List<RuntimeIntent> intents){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.getDialogNode",
	"Comment": "get dialog node.get information about a dialog node.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNode> getDialogNode(GetDialogNodeOptions getDialogNodeOptions){\r\n    Validator.notNull(getDialogNodeOptions, \"getDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { getDialogNodeOptions.workspaceId(), getDialogNodeOptions.dialogNode() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getDialogNodeOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getDialogNodeOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNode.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryOptions.bias",
	"Comment": "gets the bias.field which the returned results will be biased against. the specified field must be either aformat. when atype field is specified returned results are biased towards field values closerto the current date. when atype field is specified, returned results are biased towards higher fieldvalues. this parameter cannot be used in the same query as theparameter.",
	"Method": "Builder bias(String bias,String bias){\r\n    return bias;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.Classifier.getClassifierId",
	"Comment": "gets the classifierid.id of a classifier identified in the image.",
	"Method": "String getClassifierId(){\r\n    return classifierId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.description",
	"Comment": "gets the description.the description of the dialog node. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.TestUtils.assertNoExceptionsOnGetters",
	"Comment": "test access to the properties of an object through its accessors.",
	"Method": "void assertNoExceptionsOnGetters(Object obj){\r\n    final Class<?> clazz = obj.getClass();\r\n    final BeanInfo beanInfo = Introspector.getBeanInfo(clazz);\r\n    final PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\r\n    for (final PropertyDescriptor propertyDescriptor : propertyDescriptors) {\r\n        final Method readMethod = propertyDescriptor.getReadMethod();\r\n        if (readMethod != null) {\r\n            try {\r\n                readMethod.invoke(obj, new Object[] {});\r\n            } catch (final InvocationTargetException e) {\r\n                final StringBuffer msg = new StringBuffer();\r\n                msg.append(\"Failure: \" + propertyDescriptor.getName());\r\n                msg.append(\" Exception: \" + e.getCause().getClass());\r\n                msg.append(\" Msg: \" + e.getCause().getMessage());\r\n                throw new AssertionFailedError(msg.toString());\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.CreateModelOptions.parallelCorpusFilename",
	"Comment": "gets the parallelcorpusfilename.the filename for parallelcorpus.",
	"Method": "Builder parallelCorpusFilename(String parallelCorpusFilename,String parallelCorpusFilename){\r\n    return parallelCorpusFilename;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.DisambiguationResult.getDbpediaResource",
	"Comment": "gets the dbpediaresource.link to the corresponding dbpedia resource.",
	"Method": "String getDbpediaResource(){\r\n    return dbpediaResource;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentFeatures.entities",
	"Comment": "gets the entities.an object speficying the entities enrichment and related parameters.",
	"Method": "Builder entities(NluEnrichmentEntities entities,NluEnrichmentEntities entities){\r\n    return entities;\r\n}"
}, {
	"Path": "org.jasig.cas.client.session.SingleSignOutHandler.destroySession",
	"Comment": "destroys the current http session for the given cas logout request.",
	"Method": "void destroySession(HttpServletRequest request){\r\n    String logoutMessage = CommonUtils.safeGetParameter(request, this.logoutParameterName, this.safeParameters);\r\n    if (CommonUtils.isBlank(logoutMessage)) {\r\n        logger.error(\"Could not locate logout message of the request from {}\", this.logoutParameterName);\r\n        return;\r\n    }\r\n    if (!logoutMessage.contains(\"SessionIndex\")) {\r\n        logoutMessage = uncompressLogoutMessage(logoutMessage);\r\n    }\r\n    logger.trace(\"Logout request:\\n{}\", logoutMessage);\r\n    final String token = XmlUtils.getTextForElement(logoutMessage, \"SessionIndex\");\r\n    if (CommonUtils.isNotBlank(token)) {\r\n        final HttpSession session = this.sessionMappingStorage.removeSessionByMappingId(token);\r\n        if (session != null) {\r\n            final String sessionID = session.getId();\r\n            logger.debug(\"Invalidating session [{}] for token [{}]\", sessionID, token);\r\n            try {\r\n                session.invalidate();\r\n            } catch (final IllegalStateException e) {\r\n                logger.debug(\"Error invalidating session.\", e);\r\n            }\r\n            this.logoutStrategy.logout(request);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalysisResults.getSemanticRoles",
	"Comment": "gets the semanticroles.the subjects of actions and the objects the actions act upon.",
	"Method": "List<SemanticRolesResult> getSemanticRoles(){\r\n    return semanticRoles;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslationModel.getOwner",
	"Comment": "gets the owner.either an empty string, indicating the model is not a custom model, or the id of the service instance that createdthe model.",
	"Method": "String getOwner(){\r\n    return owner;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.JenkinsServer.close",
	"Comment": "closes underlying resources.closed instances should no longer be usedclosing an already closed instance has no side effects",
	"Method": "void close(){\r\n    client.close();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImages.getImagesProcessed",
	"Comment": "gets the imagesprocessed.number of images processed for the api call.",
	"Method": "Long getImagesProcessed(){\r\n    return imagesProcessed;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Configuration.getSource",
	"Comment": "gets the source.object containing source parameters for the configuration.",
	"Method": "Source getSource(){\r\n    return source;\r\n}"
}, {
	"Path": "org.javers.repository.jql.QueryBuilder.withCommitProperty",
	"Comment": "only snapshots with a given commit property.all given properties must match with persisted commit properties.",
	"Method": "QueryBuilder withCommitProperty(String name,String value){\r\n    Validate.argumentsAreNotNull(name, value);\r\n    queryParamsBuilder.commitProperty(name, value);\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Value.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the entity value.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedObjects",
	"Comment": "getallnamedobjects gets the list of objects that show up in the current named policy.",
	"Method": "List<String> getAllNamedObjects(String ptype){\r\n    return model.getValuesForFieldInPolicy(\"p\", ptype, 1);\r\n}"
}, {
	"Path": "net.spy.memcached.compat.log.DefaultLogger.isInfoEnabled",
	"Comment": "always returns true, info is always enabled on the defaultlogger.",
	"Method": "boolean isInfoEnabled(){\r\n    return (true);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CollectionUsage.getAvailable",
	"Comment": "gets the available.number of active collections in the environment.",
	"Method": "Long getAvailable(){\r\n    return available;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeOutputGeneric.getResponseType",
	"Comment": "gets the responsetype.the type of response returned by the dialog node. the specified response type must be supported by the clientapplication or channel.",
	"Method": "String getResponseType(){\r\n    return responseType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslationModel.getModelId",
	"Comment": "gets the modelid.a globally unique string that identifies the underlying model that is used for translation.",
	"Method": "String getModelId(){\r\n    return modelId;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getFilteredPolicy",
	"Comment": "getfilteredpolicy gets all the authorization rules in the policy, field filters can be specified.",
	"Method": "List<List<String>> getFilteredPolicy(int fieldIndex,String fieldValues){\r\n    return getFilteredNamedPolicy(\"p\", fieldIndex, fieldValues);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.WatsonService.getToken",
	"Comment": "gets an authorization token that can be use to authorize api calls.",
	"Method": "ServiceCall<String> getToken(){\r\n    HttpUrl url = HttpUrl.parse(getEndPoint()).newBuilder().setPathSegment(0, AUTHORIZATION).addPathSegment(PATH_AUTHORIZATION_V1_TOKEN).build();\r\n    Request request = RequestBuilder.get(url).header(HttpHeaders.ACCEPT, HttpMediaType.TEXT_PLAIN).query(URL, getEndPoint()).build();\r\n    return createServiceCall(request, ResponseConverterUtils.getString());\r\n}"
}, {
	"Path": "io.appium.java_client.ScreenshotState.remember",
	"Comment": "this method allows to pass a custom bitmap for further comparisoninstead of taking one using screenshot provider function. this mightbe useful in some advanced cases.",
	"Method": "ScreenshotState remember(ScreenshotState remember,BufferedImage customInitialState){\r\n    this.previousScreenshot = checkNotNull(customInitialState);\r\n    return this;\r\n}"
}, {
	"Path": "de.danielbechler.diff.ObjectDifferBuilder.circularReferenceHandling",
	"Comment": "allows to define how the circular reference detector compares object\tinstances.",
	"Method": "CircularReferenceConfigurer circularReferenceHandling(){\r\n    return circularReferenceService;\r\n}"
}, {
	"Path": "io.appium.java_client.ios.ListensToSyslogMessages.addSyslogDisconnectionListener",
	"Comment": "adds a new log broadcasting disconnection handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addSyslogDisconnectionListener(Runnable handler){\r\n    getSyslogClient().addDisconnectionHandler(handler);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.VisualRecognitionIT.testClassifyImagesFromUrlUsingParameters",
	"Comment": "test classify images from url using the deprecated parameters option.",
	"Method": "void testClassifyImagesFromUrlUsingParameters(){\r\n    String parameters = \"{\\\"url\\\":\\\"\" + IMAGE_URL + \"\\\"}\";\r\n    ClassifyOptions options = new ClassifyOptions.Builder().parameters(parameters).build();\r\n    ClassifiedImages result = service.classify(options).execute();\r\n    assertClassifyImage(result, options);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListAllLogsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslateOptions.modelId",
	"Comment": "gets the modelid.model id of the translation model to use. if this is specified, theparameters will beignored. the method requires either a model id or both theparameters.",
	"Method": "Builder modelId(String modelId,String modelId){\r\n    return modelId;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getFilteredNamedGroupingPolicy",
	"Comment": "getfilterednamedgroupingpolicy gets all the role inheritance rules in the policy, field filters can be specified.",
	"Method": "List<List<String>> getFilteredNamedGroupingPolicy(String ptype,int fieldIndex,String fieldValues){\r\n    return model.getFilteredPolicy(\"g\", ptype, fieldIndex, fieldValues);\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.concatVertically",
	"Comment": "concatenates two matrices vertically. matrices must have identicalnumbers of columns.",
	"Method": "FloatMatrix concatVertically(FloatMatrix A,FloatMatrix B){\r\n    if (A.columns != B.columns) {\r\n        throw new SizeException(\"Matrices don't have same number of columns (\" + A.columns + \" != \" + B.columns + \".\");\r\n    }\r\n    FloatMatrix result = new FloatMatrix(A.rows + B.rows, A.columns);\r\n    for (int i = 0; i < A.columns; i++) {\r\n        JavaBlas.rcopy(A.rows, A.data, A.index(0, i), 1, result.data, result.index(0, i), 1);\r\n        JavaBlas.rcopy(B.rows, B.data, B.index(0, i), 1, result.data, result.index(A.rows, i), 1);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.potentiallyCloseLeakingChannel",
	"Comment": "make sure channel connections are not leaked and properly close underfaulty reconnect cirumstances.",
	"Method": "void potentiallyCloseLeakingChannel(SocketChannel ch,MemcachedNode node){\r\n    if (ch != null && !ch.isConnected() && !ch.isConnectionPending()) {\r\n        try {\r\n            ch.close();\r\n        } catch (IOException e) {\r\n            getLogger().error(\"Exception closing channel: %s\", node, e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listValues",
	"Comment": "list entity values.list the values for an entity.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<ValueCollection> listValues(ListValuesOptions listValuesOptions){\r\n    Validator.notNull(listValuesOptions, \"listValuesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { listValuesOptions.workspaceId(), listValuesOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listValuesOptions.export() != null) {\r\n        builder.query(\"export\", String.valueOf(listValuesOptions.export()));\r\n    }\r\n    if (listValuesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listValuesOptions.pageLimit()));\r\n    }\r\n    if (listValuesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listValuesOptions.includeCount()));\r\n    }\r\n    if (listValuesOptions.sort() != null) {\r\n        builder.query(\"sort\", listValuesOptions.sort());\r\n    }\r\n    if (listValuesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listValuesOptions.cursor());\r\n    }\r\n    if (listValuesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listValuesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ValueCollection.class));\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.norm2",
	"Comment": "the euclidean norm of the matrix as vector, also the frobeniusnorm of the matrix.",
	"Method": "float norm2(){\r\n    float norm = 0.0f;\r\n    for (int i = 0; i < length; i++) {\r\n        norm += get(i) * get(i);\r\n    }\r\n    return (float) Math.sqrt(norm);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceExport.getSystemSettings",
	"Comment": "gets the systemsettings.global settings for the workspace.",
	"Method": "WorkspaceSystemSettings getSystemSettings(){\r\n    return systemSettings;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.DocumentSentimentResults.getLabel",
	"Comment": "gets the label.indicates whether the sentiment is positive, neutral, or negative.",
	"Method": "String getLabel(){\r\n    return label;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEvidenceEntity.getType",
	"Comment": "gets the type.the entity type for this entity. possible types vary based on model used.",
	"Method": "String getType(){\r\n    return type;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.SearchStatus.getStatusDescription",
	"Comment": "gets the statusdescription.long description of the current continuous relevancy training status.",
	"Method": "String getStatusDescription(){\r\n    return statusDescription;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.actions",
	"Comment": "gets the actions.an array of objects describing any actions to be invoked by the dialog node.",
	"Method": "Builder actions(List<DialogNodeAction> actions,List<DialogNodeAction> actions){\r\n    return actions;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.setAuthDescriptor",
	"Comment": "set the auth descriptor to enable authentication on new connections.",
	"Method": "ConnectionFactoryBuilder setAuthDescriptor(AuthDescriptor to){\r\n    authDescriptor = to;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeVisitedDetails.getDialogNode",
	"Comment": "gets the dialognode.a dialog node that was triggered during processing of the input message.",
	"Method": "String getDialogNode(){\r\n    return dialogNode;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListAllLogsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.LanguageTranslator.translate",
	"Comment": "translate.translates the input text from the source language to the target language.",
	"Method": "ServiceCall<TranslationResult> translate(TranslateOptions translateOptions){\r\n    Validator.notNull(translateOptions, \"translateOptions cannot be null\");\r\n    String[] pathSegments = { \"v2/translate\" };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.add(\"text\", GsonSingleton.getGson().toJsonTree(translateOptions.text()));\r\n    if (translateOptions.modelId() != null) {\r\n        contentJson.addProperty(\"model_id\", translateOptions.modelId());\r\n    }\r\n    if (translateOptions.source() != null) {\r\n        contentJson.addProperty(\"source\", translateOptions.source());\r\n    }\r\n    if (translateOptions.target() != null) {\r\n        contentJson.addProperty(\"target\", translateOptions.target());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TranslationResult.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteCounterexample",
	"Comment": "delete counterexample.delete a counterexample from a workspace. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteCounterexample(DeleteCounterexampleOptions deleteCounterexampleOptions){\r\n    Validator.notNull(deleteCounterexampleOptions, \"deleteCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { deleteCounterexampleOptions.workspaceId(), deleteCounterexampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "io.appium.java_client.MobileBy.iOSNsPredicateString",
	"Comment": "this locator strategy is available in xcuitest driver mode.",
	"Method": "By iOSNsPredicateString(String iOSNsPredicateString){\r\n    return new ByIosNsPredicate(iOSNsPredicateString);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.addGroupingPolicy",
	"Comment": "addgroupingpolicy adds a role inheritance rule to the current policy.if the rule already exists, the function returns false and the rule will not be added.otherwise the function returns true by adding the new rule.",
	"Method": "boolean addGroupingPolicy(List<String> params,boolean addGroupingPolicy,String params){\r\n    return addGroupingPolicy(Arrays.asList(params));\r\n}"
}, {
	"Path": "net.spy.memcached.protocol.BaseOperationImpl.wasCancelled",
	"Comment": "this is called on each subclass whenever an operation was cancelled.",
	"Method": "void wasCancelled(){\r\n    getLogger().debug(\"was cancelled.\");\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateSynonym",
	"Comment": "update entity value synonym.update an existing entity value synonym with new text.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Synonym> updateSynonym(UpdateSynonymOptions updateSynonymOptions){\r\n    Validator.notNull(updateSynonymOptions, \"updateSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { updateSynonymOptions.workspaceId(), updateSynonymOptions.entity(), updateSynonymOptions.value(), updateSynonymOptions.synonym() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateSynonymOptions.newSynonym() != null) {\r\n        contentJson.addProperty(\"synonym\", updateSynonymOptions.newSynonym());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Synonym.class));\r\n}"
}, {
	"Path": "org.jblas.Eigen.eigenvectors",
	"Comment": "computes the eigenvalues and eigenvectors of a general matrix.",
	"Method": "ComplexDoubleMatrix[] eigenvectors(DoubleMatrix A,ComplexFloatMatrix[] eigenvectors,FloatMatrix A){\r\n    A.assertSquare();\r\n    FloatMatrix WR = new FloatMatrix(A.rows);\r\n    FloatMatrix WI = WR.dup();\r\n    FloatMatrix VR = new FloatMatrix(A.rows, A.rows);\r\n    SimpleBlas.geev('N', 'V', A.dup(), WR, WI, dummyFloat, VR);\r\n    ComplexFloatMatrix E = new ComplexFloatMatrix(WR, WI);\r\n    ComplexFloatMatrix V = new ComplexFloatMatrix(A.rows, A.rows);\r\n    for (int i = 0; i < A.rows; i++) {\r\n        if (E.get(i).isReal()) {\r\n            V.putColumn(i, new ComplexFloatMatrix(VR.getColumn(i)));\r\n        } else {\r\n            ComplexFloatMatrix v = new ComplexFloatMatrix(VR.getColumn(i), VR.getColumn(i + 1));\r\n            V.putColumn(i, v);\r\n            V.putColumn(i + 1, v.conji());\r\n            i += 1;\r\n        }\r\n    }\r\n    return new ComplexFloatMatrix[] { V, ComplexFloatMatrix.diag(E) };\r\n}"
}, {
	"Path": "io.appium.java_client.android.AuthenticatesByFinger.fingerPrint",
	"Comment": "authenticate users by using their finger print scans on supported emulators.",
	"Method": "void fingerPrint(int fingerPrintId){\r\n    CommandExecutionHelper.execute(this, fingerPrintCommand(fingerPrintId));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEntitiesResponseItem.getEvidence",
	"Comment": "gets the evidence.list of different evidentiary items to support the result.",
	"Method": "List<QueryEvidence> getEvidence(){\r\n    return evidence;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListDialogNodesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CollectionUsage.getMaximumAllowed",
	"Comment": "gets the maximumallowed.total number of collections allowed in the environment.",
	"Method": "Long getMaximumAllowed(){\r\n    return maximumAllowed;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Value.getPatterns",
	"Comment": "gets the patterns.an array containing any patterns for the entity value.",
	"Method": "List<String> getPatterns(){\r\n    return patterns;\r\n}"
}, {
	"Path": "io.appium.java_client.android.SupportsNetworkStateManagement.toggleAirplaneMode",
	"Comment": "toggle airplane mode and this works on os 6.0 and lesserand does not work on os 7.0 and greater",
	"Method": "void toggleAirplaneMode(){\r\n    CommandExecutionHelper.execute(this, toggleAirplaneCommand());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.deleteTrainingData",
	"Comment": "delete a training data query.removes the training data query and all associated examples from the training data set.",
	"Method": "ServiceCall<Void> deleteTrainingData(DeleteTrainingDataOptions deleteTrainingDataOptions){\r\n    Validator.notNull(deleteTrainingDataOptions, \"deleteTrainingDataOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\" };\r\n    String[] pathParameters = { deleteTrainingDataOptions.environmentId(), deleteTrainingDataOptions.collectionId(), deleteTrainingDataOptions.queryId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeVisitedDetails.getDialogNode",
	"Comment": "gets the dialognode.a dialog node that was triggered during processing of the input message.",
	"Method": "String getDialogNode(){\r\n    return dialogNode;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateEntity.fuzzyMatch",
	"Comment": "gets the fuzzymatch.whether to use fuzzy matching for the entity.",
	"Method": "Builder fuzzyMatch(Boolean fuzzyMatch,Boolean fuzzyMatch){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslateOptions.modelId",
	"Comment": "gets the modelid.model id of the translation model to use. if this is specified, theparameters will beignored. the method requires either a model id or both theparameters.",
	"Method": "Builder modelId(String modelId,String modelId){\r\n    return modelId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.FaceGender.getScore",
	"Comment": "gets the score.confidence score in the range of 0 to 1. a higher score indicates greater confidence in the estimated value for theproperty.",
	"Method": "Float getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateWorkspaceOptions.intents",
	"Comment": "gets the intents.an array of objects defining the intents for the workspace.",
	"Method": "Builder intents(List<CreateIntent> intents,List<CreateIntent> intents){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.CredentialUtilsTest.testGetAPIUrlFromJDNI",
	"Comment": "test getting the api url using jdni. we ignore this test in travis becauseit always fails there.",
	"Method": "void testGetAPIUrlFromJDNI(){\r\n    assertEquals(CredentialUtils.getAPIUrlTest(SERVICE_NAME), PERSONALITY_INSIGHTS_URL);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Nested.getPath",
	"Comment": "gets the path.the area of the results the aggregation was restricted to.",
	"Method": "String getPath(){\r\n    return path;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogNodeAction.getResultVariable",
	"Comment": "gets the resultvariable.the location in the dialog context where the result of the action is stored.",
	"Method": "String getResultVariable(){\r\n    return resultVariable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Configuration.getNormalizations",
	"Comment": "gets the normalizations.defines operations that can be used to transform the final output json into a normalized form. operations areexecuted in the order that they appear in the array.",
	"Method": "List<NormalizationOperation> getNormalizations(){\r\n    return normalizations;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateCollectionOptions.configurationId",
	"Comment": "gets the configurationid.the id of the configuration in which the collection is to be updated.",
	"Method": "Builder configurationId(String configurationId,String configurationId){\r\n    return configurationId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.LanguageModel.getBaseModelName",
	"Comment": "gets the basemodelname.the name of the language model for which the custom language model was created.",
	"Method": "String getBaseModelName(){\r\n    return baseModelName;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getDigressOut",
	"Comment": "gets the digressout.whether this dialog node can be returned to after a digression.",
	"Method": "String getDigressOut(){\r\n    return digressOut;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.SynonymCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogRuntimeResponseGeneric.getDescription",
	"Comment": "gets the description.the description to show with the the response.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.EntityMentionCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Profile.getProcessedLanguage",
	"Comment": "gets the processedlanguage.the language model that was used to process the input.",
	"Method": "String getProcessedLanguage(){\r\n    return processedLanguage;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageContextGlobal.getSystem",
	"Comment": "gets the system.properties interpreted by the assistant that are shared across all skills within the assistant.",
	"Method": "MessageContextGlobalSystem getSystem(){\r\n    return system;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.EntityExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the entity.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Pagination.getNextUrl",
	"Comment": "gets the nexturl.the url that will return the next page of results.",
	"Method": "String getNextUrl(){\r\n    return nextUrl;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.CoreEnforcer.enableLog",
	"Comment": "enablelog changes whether to print casbin log to the standard output.",
	"Method": "void enableLog(boolean enable){\r\n    Util.enableLog = enable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryResultResultMetadata.getScore",
	"Comment": "gets the score.an unbounded measure of the relevance of a particular result, dependent on the query and matching document. ahigher score indicates a greater match to the query parameters.",
	"Method": "Double getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.IdentifiedLanguages.getLanguages",
	"Comment": "gets the languages.a ranking of identified languages with confidence scores.",
	"Method": "List<IdentifiedLanguage> getLanguages(){\r\n    return languages;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.NaturalLanguageClassifier.createClassifier",
	"Comment": "create classifier.sends data to create and train a classifier and returns information about the new classifier.",
	"Method": "ServiceCall<Classifier> createClassifier(CreateClassifierOptions createClassifierOptions,ServiceCall<Classifier> createClassifier,String name,String language,File trainingData){\r\n    Map<String, String> metadataMap = new HashMap();\r\n    metadataMap.put(\"name\", name);\r\n    metadataMap.put(\"language\", language);\r\n    String metadataString = GsonSingleton.getGson().toJson(metadataMap);\r\n    CreateClassifierOptions createClassifierOptions = new CreateClassifierOptions.Builder().metadata(new ByteArrayInputStream(metadataString.getBytes())).trainingData(trainingData).build();\r\n    return createClassifier(createClassifierOptions);\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.model.Build.getTestResult",
	"Comment": "this is to get the information about run tests for a non maven job type.",
	"Method": "TestResult getTestResult(){\r\n    return client.get(this.getUrl() + \"/testReport/?depth=1\", TestResult.class);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeOutputOptionsElement.getValue",
	"Comment": "gets the value.an object defining the message input to be sent to the watson assistant service if the user selects thecorresponding option.",
	"Method": "DialogNodeOutputOptionsElementValue getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateWorkspaceOptions.dialogNodes",
	"Comment": "gets the dialognodes.an array of objects defining the nodes in the workspace dialog.",
	"Method": "Builder dialogNodes(List<CreateDialogNode> dialogNodes,List<CreateDialogNode> dialogNodes){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryNoticesOptions.offset",
	"Comment": "gets the offset.the number of query results to skip at the beginning. for example, if the total number of results that are returnedis 10 and the offset is 8, it returns the last two results.",
	"Method": "Builder offset(long offset,Long offset){\r\n    return offset;\r\n}"
}, {
	"Path": "io.appium.java_client.HasAppStrings.getAppStringMap",
	"Comment": "get all defined strings from an app for the specified language andstrings filename.",
	"Method": "Map<String, String> getAppStringMap(Map<String, String> getAppStringMap,String language,Map<String, String> getAppStringMap,String language,String stringFile){\r\n    String[] parameters = new String[] { \"language\", \"stringFile\" };\r\n    Object[] values = new Object[] { language, stringFile };\r\n    return CommandExecutionHelper.execute(this, new AbstractMap.SimpleEntry(GET_STRINGS, prepareArguments(parameters, values)));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateWorkspaceOptions.description",
	"Comment": "gets the description.the description of the workspace. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageRequest.getContext",
	"Comment": "gets the context.state information for the conversation. continue a conversation by including the context object from the previousresponse.",
	"Method": "Context getContext(){\r\n    return context;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.RelationsResult.getArguments",
	"Comment": "gets the arguments.the extracted relation objects from the text.",
	"Method": "List<RelationArgument> getArguments(){\r\n    return arguments;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.EnrichmentOptions.features",
	"Comment": "gets the features.an object representing the enrichment features that will be applied to the specified field.",
	"Method": "Builder features(NluEnrichmentFeatures features,NluEnrichmentFeatures features){\r\n    return features;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryOptions.passages",
	"Comment": "gets the passages.a passages query that returns the most relevant passages from the results.",
	"Method": "Builder passages(Boolean passages,Boolean passages){\r\n    return passages;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getParent",
	"Comment": "gets the parent.the id of the parent dialog node. this property is not returned if the dialog node has no parent.",
	"Method": "String getParent(){\r\n    return parent;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Pagination.getRefreshUrl",
	"Comment": "gets the refreshurl.the url that will return the same page of results.",
	"Method": "String getRefreshUrl(){\r\n    return refreshUrl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.AudioResources.getTotalMinutesOfAudio",
	"Comment": "gets the totalminutesofaudio.the total minutes of accumulated audio summed over all of the valid audio resources for the custom acoustic model.you can use this value to determine whether the custom model has too little or too much audio to begin training.",
	"Method": "Double getTotalMinutesOfAudio(){\r\n    return totalMinutesOfAudio;\r\n}"
}, {
	"Path": "io.appium.java_client.android.HasSupportedPerformanceDataType.getSupportedPerformanceDataTypes",
	"Comment": "returns the information type of the system state which is supported to readas like cpu, memory, network traffic, and battery.",
	"Method": "List<String> getSupportedPerformanceDataTypes(){\r\n    return CommandExecutionHelper.execute(this, getSupportedPerformanceDataTypesCommand());\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessage.getRevID",
	"Comment": "gets the value of the revid field. only returned with a tap mutationmessage.",
	"Method": "byte[] getRevID(){\r\n    return revid;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalysisResults.getConcepts",
	"Comment": "gets the concepts.the general concepts referenced or alluded to in the specified content.",
	"Method": "List<ConceptsResult> getConcepts(){\r\n    return concepts;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.config.Config.newConfig",
	"Comment": "newconfig create an empty configuration representation from file.",
	"Method": "Config newConfig(String confName){\r\n    Config c = new Config();\r\n    c.parse(confName);\r\n    return c;\r\n}"
}, {
	"Path": "io.appium.java_client.imagecomparison.BaseComparisonOptions.withEnabledVisualization",
	"Comment": "makes the endpoint to return an image,which contains the visualized result of the correspondingpicture matching operation. this option is disabled by default.",
	"Method": "T withEnabledVisualization(){\r\n    visualize = true;\r\n    return (T) this;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.handleReadsWhenChannelEndOfStream",
	"Comment": "deal with an operation where the channel reached the end of a stream.",
	"Method": "Operation handleReadsWhenChannelEndOfStream(Operation currentOp,MemcachedNode node,ByteBuffer rbuf){\r\n    if (currentOp instanceof TapOperation) {\r\n        currentOp.getCallback().complete();\r\n        ((TapOperation) currentOp).streamClosed(OperationState.COMPLETE);\r\n        getLogger().debug(\"Completed read op: %s and giving the next %d bytes\", currentOp, rbuf.remaining());\r\n        Operation op = node.removeCurrentReadOp();\r\n        assert op == currentOp : \"Expected to pop \" + currentOp + \" got \" + op;\r\n        return node.getCurrentReadOp();\r\n    } else {\r\n        throw new IOException(\"Disconnected unexpected, will reconnect.\");\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.updateDocument",
	"Comment": "update a document.replace an existing document. starts ingesting a document with optional metadata.",
	"Method": "ServiceCall<DocumentAccepted> updateDocument(UpdateDocumentOptions updateDocumentOptions){\r\n    Validator.notNull(updateDocumentOptions, \"updateDocumentOptions cannot be null\");\r\n    Validator.isTrue((updateDocumentOptions.file() != null) || (updateDocumentOptions.metadata() != null), \"At least one of file or metadata must be supplied.\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"documents\" };\r\n    String[] pathParameters = { updateDocumentOptions.environmentId(), updateDocumentOptions.collectionId(), updateDocumentOptions.documentId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    MultipartBody.Builder multipartBuilder = new MultipartBody.Builder();\r\n    multipartBuilder.setType(MultipartBody.FORM);\r\n    if (updateDocumentOptions.file() != null) {\r\n        RequestBody fileBody = RequestUtils.inputStreamBody(updateDocumentOptions.file(), updateDocumentOptions.fileContentType());\r\n        multipartBuilder.addFormDataPart(\"file\", updateDocumentOptions.filename(), fileBody);\r\n    }\r\n    if (updateDocumentOptions.metadata() != null) {\r\n        multipartBuilder.addFormDataPart(\"metadata\", updateDocumentOptions.metadata());\r\n    }\r\n    builder.body(multipartBuilder.build());\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DocumentAccepted.class));\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.URIBuilder.setParameter",
	"Comment": "sets parameter of uri query overriding existing value if set. the parameter name and valueare expected to be unescaped and may contain non ascii characters.please note query parameters and custom query component are mutually exclusive. this methodwill remove custom query if present.",
	"Method": "URIBuilder setParameter(String param,String value){\r\n    if (this.queryParams == null) {\r\n        this.queryParams = new ArrayList<BasicNameValuePair>();\r\n    }\r\n    if (!this.queryParams.isEmpty()) {\r\n        for (final Iterator<BasicNameValuePair> it = this.queryParams.iterator(); it.hasNext(); ) {\r\n            final BasicNameValuePair nvp = it.next();\r\n            if (nvp.getName().equals(param)) {\r\n                it.remove();\r\n            }\r\n        }\r\n    }\r\n    this.queryParams.add(new BasicNameValuePair(param, value));\r\n    this.encodedQuery = null;\r\n    this.encodedSchemeSpecificPart = null;\r\n    this.query = null;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogPagination.getNextUrl",
	"Comment": "gets the nexturl.the url that will return the next page of results, if any.",
	"Method": "String getNextUrl(){\r\n    return nextUrl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.SemanticRolesResult.getSentence",
	"Comment": "gets the sentence.sentence from the source that contains the subject, action, and object.",
	"Method": "String getSentence(){\r\n    return sentence;\r\n}"
}, {
	"Path": "org.jasig.cas.client.ssl.HttpsURLConnectionFactory.setHostnameVerifier",
	"Comment": "set the host name verifier for the https connection received.",
	"Method": "void setHostnameVerifier(HostnameVerifier verifier){\r\n    this.hostnameVerifier = verifier;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalyzeOptions.limitTextCharacters",
	"Comment": "gets the limittextcharacters.sets the maximum number of characters that are processed by the service.",
	"Method": "Builder limitTextCharacters(long limitTextCharacters,Long limitTextCharacters){\r\n    return limitTextCharacters;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.SpeechToTextIT.testGetAudio",
	"Comment": "test get audio.this test is currently being ignored as it has a very long runtime and causes travis to timeout.the ignore annotation can be removed to test this locally.",
	"Method": "void testGetAudio(){\r\n    String audioName = \"sample\";\r\n    AddAudioOptions addOptions = new AddAudioOptions.Builder().audioResource(new File(SAMPLE_WAV)).contentType(AddAudioOptions.ContentType.AUDIO_WAV).audioName(audioName).customizationId(acousticCustomizationId).allowOverwrite(true).build();\r\n    service.addAudio(addOptions).execute();\r\n    try {\r\n        GetAudioOptions getOptions = new GetAudioOptions.Builder().customizationId(acousticCustomizationId).audioName(audioName).build();\r\n        AudioListing audio = service.getAudio(getOptions).execute();\r\n        assertNotNull(audio);\r\n        assertEquals(audioName, audio.getName());\r\n    } finally {\r\n        DeleteAudioOptions deleteAudioOptions = new DeleteAudioOptions.Builder().customizationId(acousticCustomizationId).audioName(audioName).build();\r\n        service.deleteAudio(deleteAudioOptions).execute();\r\n    }\r\n}"
}, {
	"Path": "jd.ide.eclipse.preferences.PreferencePage.createFieldEditors",
	"Comment": "creates the field editors. field editors are abstractions of\tthe common gui blocks needed to manipulate various types\tof preferences. each field editor knows how to save and\trestore itself.",
	"Method": "void createFieldEditors(){\r\n    Composite fieldEditorParent = getFieldEditorParent();\r\n    new Label(fieldEditorParent, SWT.NONE);\r\n    addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_ESCAPE_UNICODE_CHARACTERS, \"Escape unicode characters\", fieldEditorParent));\r\n    addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_OMIT_PREFIX_THIS, \"Omit the prefix 'This' if possible\", fieldEditorParent));\r\n    addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_REALIGN_LINE_NUMBERS, \"Realign line numbers\", fieldEditorParent));\r\n    addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_SHOW_LINE_NUMBERS, \"Show original line numbers\", fieldEditorParent));\r\n    addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_SHOW_DEFAULT_CONSTRUCTOR, \"Show default constructor\", fieldEditorParent));\r\n    addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_SHOW_METADATA, \"Show metadata\", fieldEditorParent));\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.compare",
	"Comment": "compare two matrices. returns true if and only if other is also adoublematrix which has the same size and the maximal absolutedifference in matrix elements is smaller than the specified tolerance",
	"Method": "boolean compare(Object o,double tolerance){\r\n    if (!(o instanceof DoubleMatrix)) {\r\n        return false;\r\n    }\r\n    DoubleMatrix other = (DoubleMatrix) o;\r\n    if (!sameSize(other)) {\r\n        return false;\r\n    }\r\n    DoubleMatrix diff = MatrixFunctions.absi(sub(other));\r\n    return diff.max() / (rows * columns) < tolerance;\r\n}"
}, {
	"Path": "net.spy.memcached.KetamaNodeLocator.setKetamaNodes",
	"Comment": "setup the ketamanodelocator with the list of nodes it should use.",
	"Method": "void setKetamaNodes(List<MemcachedNode> nodes){\r\n    TreeMap<Long, MemcachedNode> newNodeMap = new TreeMap<Long, MemcachedNode>();\r\n    int numReps = config.getNodeRepetitions();\r\n    int nodeCount = nodes.size();\r\n    int totalWeight = 0;\r\n    if (isWeightedKetama) {\r\n        for (MemcachedNode node : nodes) {\r\n            totalWeight += weights.get(node.getSocketAddress());\r\n        }\r\n    }\r\n    for (MemcachedNode node : nodes) {\r\n        if (isWeightedKetama) {\r\n            int thisWeight = weights.get(node.getSocketAddress());\r\n            float percent = (float) thisWeight / (float) totalWeight;\r\n            int pointerPerServer = (int) ((Math.floor((float) (percent * (float) config.getNodeRepetitions() / 4 * (float) nodeCount + 0.0000000001))) * 4);\r\n            for (int i = 0; i < pointerPerServer / 4; i++) {\r\n                for (long position : ketamaNodePositionsAtIteration(node, i)) {\r\n                    newNodeMap.put(position, node);\r\n                    getLogger().debug(\"Adding node %s with weight %s in position %d\", node, thisWeight, position);\r\n                }\r\n            }\r\n        } else {\r\n            if (hashAlg == DefaultHashAlgorithm.KETAMA_HASH) {\r\n                for (int i = 0; i < numReps / 4; i++) {\r\n                    for (long position : ketamaNodePositionsAtIteration(node, i)) {\r\n                        newNodeMap.put(position, node);\r\n                        getLogger().debug(\"Adding node %s in position %d\", node, position);\r\n                    }\r\n                }\r\n            } else {\r\n                for (int i = 0; i < numReps; i++) {\r\n                    newNodeMap.put(hashAlg.hash(config.getKeyForNode(node, i)), node);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    assert newNodeMap.size() == numReps * nodes.size();\r\n    ketamaNodes = newNodeMap;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.asyncCAS",
	"Comment": "asynchronous cas operation using the default transcoder with expiration.",
	"Method": "OperationFuture<CASResponse> asyncCAS(String key,long casId,T value,Transcoder<T> tc,OperationFuture<CASResponse> asyncCAS,String key,long casId,int exp,T value,Transcoder<T> tc,OperationFuture<CASResponse> asyncCAS,String key,long casId,Object value,OperationFuture<CASResponse> asyncCAS,String key,long casId,int exp,Object value){\r\n    return asyncCAS(key, casId, exp, value, transcoder);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.updateTrainingExample",
	"Comment": "change label or cross reference for example.changes the label or cross reference query for this training data example.",
	"Method": "ServiceCall<TrainingExample> updateTrainingExample(UpdateTrainingExampleOptions updateTrainingExampleOptions){\r\n    Validator.notNull(updateTrainingExampleOptions, \"updateTrainingExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\", \"examples\" };\r\n    String[] pathParameters = { updateTrainingExampleOptions.environmentId(), updateTrainingExampleOptions.collectionId(), updateTrainingExampleOptions.queryId(), updateTrainingExampleOptions.exampleId() };\r\n    RequestBuilder builder = RequestBuilder.put(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateTrainingExampleOptions.crossReference() != null) {\r\n        contentJson.addProperty(\"cross_reference\", updateTrainingExampleOptions.crossReference());\r\n    }\r\n    if (updateTrainingExampleOptions.relevance() != null) {\r\n        contentJson.addProperty(\"relevance\", updateTrainingExampleOptions.relevance());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TrainingExample.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newPreviousSibling",
	"Comment": "gets the newprevioussibling.the id of the previous sibling dialog node.",
	"Method": "Builder newPreviousSibling(String newPreviousSibling,String newPreviousSibling){\r\n    return newPreviousSibling;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.userLabel",
	"Comment": "gets the userlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "Builder userLabel(String userLabel,String userLabel){\r\n    return userLabel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryOptions.aggregation",
	"Comment": "gets the aggregation.an aggregation search that returns an exact answer by combining query search with filters. useful for applicationsto build lists, tables, and time series. for a full list of possible aggregations, see the query reference.",
	"Method": "Builder aggregation(String aggregation,String aggregation){\r\n    return aggregation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceExport.getSystemSettings",
	"Comment": "gets the systemsettings.global settings for the workspace.",
	"Method": "WorkspaceSystemSettings getSystemSettings(){\r\n    return systemSettings;\r\n}"
}, {
	"Path": "org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl.cleanUp",
	"Comment": "cleans up old, expired proxy tickets. this method must becalled regularly via an external thread or timer.",
	"Method": "void cleanUp(){\r\n    for (final Map.Entry<String, ProxyGrantingTicketHolder> holder : this.cache.entrySet()) {\r\n        if (holder.getValue().isExpired(this.timeout)) {\r\n            this.cache.remove(holder.getKey());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Counterexample.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the counterexample.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListExamplesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.getCredentials",
	"Comment": "view credentials.returns details about the specified credentials.secure credential information such as a password or ssh key is never returned and must be obtained fromthe source system.",
	"Method": "ServiceCall<Credentials> getCredentials(GetCredentialsOptions getCredentialsOptions){\r\n    Validator.notNull(getCredentialsOptions, \"getCredentialsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"credentials\" };\r\n    String[] pathParameters = { getCredentialsOptions.environmentId(), getCredentialsOptions.credentialId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Credentials.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CreateConfigurationOptions.enrichments",
	"Comment": "gets the enrichments.an array of document enrichment settings for the configuration.",
	"Method": "Builder enrichments(List<Enrichment> enrichments,List<Enrichment> enrichments){\r\n    return enrichments;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.concatHorizontally",
	"Comment": "concatenates two matrices horizontally. matrices must have identicalnumbers of rows.",
	"Method": "FloatMatrix concatHorizontally(FloatMatrix A,FloatMatrix B){\r\n    if (A.rows != B.rows) {\r\n        throw new SizeException(\"Matrices don't have same number of rows.\");\r\n    }\r\n    FloatMatrix result = new FloatMatrix(A.rows, A.columns + B.columns);\r\n    SimpleBlas.copy(A, result);\r\n    JavaBlas.rcopy(B.length, B.data, 0, 1, result.data, A.length, 1);\r\n    return result;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.JPAQueryComposerCache.findCachedFindAllEntities",
	"Comment": "checks if a query for finding all the entities of a certain type has already been cached",
	"Method": "Optional<JPQLQuery<?>> findCachedFindAllEntities(String entityName){\r\n    return cacheFindAllEntities(entityName, null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.variable",
	"Comment": "gets the variable.the location in the dialog context where output is stored.",
	"Method": "Builder variable(String variable,String variable){\r\n    return variable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalysisResults.getEntities",
	"Comment": "gets the entities.the important entities in the specified content.",
	"Method": "List<EntitiesResult> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.previousSibling",
	"Comment": "gets the previoussibling.the id of the previous dialog node.",
	"Method": "Builder previousSibling(String previousSibling,String previousSibling){\r\n    return previousSibling;\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessage.getKey",
	"Comment": "gets the value of the key field. only returned with a tap mutationor tap delete message.",
	"Method": "String getKey(){\r\n    return new String(key);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.KeywordResult.getConfidence",
	"Comment": "gets the confidence.a confidence score for the keyword match in the range of 0.0 to 1.0.",
	"Method": "Double getConfidence(){\r\n    return confidence;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.SpeechToTextTest.testListWordsTypeSort",
	"Comment": "test list words with word type all and sort order alphabetical.",
	"Method": "void testListWordsTypeSort(){\r\n    String id = \"foo\";\r\n    String wordsAsStr = getStringFromInputStream(new FileInputStream(\"src/test/resources/speech_to_text/words.json\"));\r\n    JsonObject words = new JsonParser().parse(wordsAsStr).getAsJsonObject();\r\n    server.enqueue(new MockResponse().addHeader(CONTENT_TYPE, HttpMediaType.APPLICATION_JSON).setBody(wordsAsStr));\r\n    ListWordsOptions listOptions = new ListWordsOptions.Builder().customizationId(id).sort(ListWordsOptions.Sort.ALPHABETICAL).wordType(ListWordsOptions.WordType.ALL).build();\r\n    Words result = service.listWords(listOptions).execute();\r\n    final RecordedRequest request = server.takeRequest();\r\n    assertEquals(\"GET\", request.getMethod());\r\n    assertEquals(String.format(PATH_WORDS, id) + \"?word_type=all&sort=alphabetical\", request.getPath());\r\n    assertEquals(words.get(\"words\"), GSON.toJsonTree(result.getWords()));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.CreateModelOptions.forcedGlossary",
	"Comment": "gets the forcedglossary.a tmx file with your customizations. the customizations in the file completely overwrite the domain translatondata, including high frequency or high confidence phrase translations. you can upload only one glossary with a filesize less than 10 mb per call.",
	"Method": "Builder forcedGlossary(InputStream forcedGlossary,Builder forcedGlossary,File forcedGlossary,InputStream forcedGlossary){\r\n    return forcedGlossary;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeOutputGeneric.getResponseType",
	"Comment": "gets the responsetype.the type of response returned by the dialog node. the specified response type must be supported by the clientapplication or channel.",
	"Method": "String getResponseType(){\r\n    return responseType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeNextStep.getSelector",
	"Comment": "gets the selector.which part of the dialog node to process next.",
	"Method": "String getSelector(){\r\n    return selector;\r\n}"
}, {
	"Path": "de.danielbechler.diff.node.DiffNode.getPropertyAnnotations",
	"Comment": "if this node represents a bean property this method returns all annotations of its getter.",
	"Method": "Set<Annotation> getPropertyAnnotations(){\r\n    if (accessor instanceof PropertyAwareAccessor) {\r\n        return unmodifiableSet(((PropertyAwareAccessor) accessor).getReadMethodAnnotations());\r\n    }\r\n    return unmodifiableSet(Collections.<Annotation>emptySet());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.ClassifyOptions.text",
	"Comment": "gets the text.the submitted phrase. the maximum length is 2048 characters.",
	"Method": "Builder text(String text,String text){\r\n    return text;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Notice.getStep",
	"Comment": "gets the step.ingestion or training step in which the notice occurred.",
	"Method": "String getStep(){\r\n    return step;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.util.Util.arrayEquals",
	"Comment": "arrayequals determines whether two string arrays are identical.",
	"Method": "boolean arrayEquals(List<String> a,List<String> b){\r\n    if (a == null) {\r\n        a = new ArrayList();\r\n    }\r\n    if (b == null) {\r\n        b = new ArrayList();\r\n    }\r\n    if (a.size() != b.size()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < a.size(); i++) {\r\n        if (!a.get(i).equals(b.get(i))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return new DefaultConnectionFactory() {\r\n        @Override\r\n        public BlockingQueue<Operation> createOperationQueue() {\r\n            return opQueueFactory == null ? super.createOperationQueue() : opQueueFactory.create();\r\n        }\r\n        @Override\r\n        public BlockingQueue<Operation> createReadOperationQueue() {\r\n            return readQueueFactory == null ? super.createReadOperationQueue() : readQueueFactory.create();\r\n        }\r\n        @Override\r\n        public BlockingQueue<Operation> createWriteOperationQueue() {\r\n            return writeQueueFactory == null ? super.createReadOperationQueue() : writeQueueFactory.create();\r\n        }\r\n        @Override\r\n        public NodeLocator createLocator(List<MemcachedNode> nodes) {\r\n            switch(locator) {\r\n                case ARRAY_MOD:\r\n                    return new ArrayModNodeLocator(nodes, getHashAlg());\r\n                case CONSISTENT:\r\n                    return new KetamaNodeLocator(nodes, getHashAlg());\r\n                default:\r\n                    throw new IllegalStateException(\"Unhandled locator type: \" + locator);\r\n            }\r\n        }\r\n        @Override\r\n        public Transcoder<Object> getDefaultTranscoder() {\r\n            return transcoder == null ? super.getDefaultTranscoder() : transcoder;\r\n        }\r\n        @Override\r\n        public FailureMode getFailureMode() {\r\n            return failureMode == null ? super.getFailureMode() : failureMode;\r\n        }\r\n        @Override\r\n        public HashAlgorithm getHashAlg() {\r\n            return hashAlg == null ? super.getHashAlg() : hashAlg;\r\n        }\r\n        public Collection<ConnectionObserver> getInitialObservers() {\r\n            return initialObservers;\r\n        }\r\n        @Override\r\n        public OperationFactory getOperationFactory() {\r\n            return opFact == null ? super.getOperationFactory() : opFact;\r\n        }\r\n        @Override\r\n        public long getOperationTimeout() {\r\n            return opTimeout == -1 ? super.getOperationTimeout() : opTimeout;\r\n        }\r\n        @Override\r\n        public int getReadBufSize() {\r\n            return readBufSize == -1 ? super.getReadBufSize() : readBufSize;\r\n        }\r\n        @Override\r\n        public boolean isDaemon() {\r\n            return isDaemon;\r\n        }\r\n        @Override\r\n        public boolean shouldOptimize() {\r\n            return shouldOptimize;\r\n        }\r\n        public boolean getKeepAlive() {\r\n            return keepAlive;\r\n        }\r\n        @Override\r\n        public boolean useNagleAlgorithm() {\r\n            return useNagle;\r\n        }\r\n        @Override\r\n        public long getMaxReconnectDelay() {\r\n            return maxReconnectDelay;\r\n        }\r\n        @Override\r\n        public AuthDescriptor getAuthDescriptor() {\r\n            return authDescriptor;\r\n        }\r\n        @Override\r\n        public long getOpQueueMaxBlockTime() {\r\n            return opQueueMaxBlockTime > -1 ? opQueueMaxBlockTime : super.getOpQueueMaxBlockTime();\r\n        }\r\n        @Override\r\n        public int getTimeoutExceptionThreshold() {\r\n            return timeoutExceptionThreshold;\r\n        }\r\n        @Override\r\n        public MetricType enableMetrics() {\r\n            return metricType == null ? super.enableMetrics() : metricType;\r\n        }\r\n        @Override\r\n        public MetricCollector getMetricCollector() {\r\n            return collector == null ? super.getMetricCollector() : collector;\r\n        }\r\n        @Override\r\n        public ExecutorService getListenerExecutorService() {\r\n            return executorService == null ? super.getListenerExecutorService() : executorService;\r\n        }\r\n        @Override\r\n        public boolean isDefaultExecutorService() {\r\n            return executorService == null;\r\n        }\r\n        @Override\r\n        public long getAuthWaitTime() {\r\n            return authWaitTime;\r\n        }\r\n    };\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return opQueueFactory == null ? super.createOperationQueue() : opQueueFactory.create();\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return readQueueFactory == null ? super.createReadOperationQueue() : readQueueFactory.create();\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return writeQueueFactory == null ? super.createReadOperationQueue() : writeQueueFactory.create();\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    switch(locator) {\r\n        case ARRAY_MOD:\r\n            return new ArrayModNodeLocator(nodes, getHashAlg());\r\n        case CONSISTENT:\r\n            return new KetamaNodeLocator(nodes, getHashAlg());\r\n        default:\r\n            throw new IllegalStateException(\"Unhandled locator type: \" + locator);\r\n    }\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return transcoder == null ? super.getDefaultTranscoder() : transcoder;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return failureMode == null ? super.getFailureMode() : failureMode;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return hashAlg == null ? super.getHashAlg() : hashAlg;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return initialObservers;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return opFact == null ? super.getOperationFactory() : opFact;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return opTimeout == -1 ? super.getOperationTimeout() : opTimeout;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return readBufSize == -1 ? super.getReadBufSize() : readBufSize;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return isDaemon;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return shouldOptimize;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return keepAlive;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return useNagle;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return maxReconnectDelay;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return authDescriptor;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return opQueueMaxBlockTime > -1 ? opQueueMaxBlockTime : super.getOpQueueMaxBlockTime();\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return timeoutExceptionThreshold;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return metricType == null ? super.enableMetrics() : metricType;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return collector == null ? super.getMetricCollector() : collector;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return executorService == null ? super.getListenerExecutorService() : executorService;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return executorService == null;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.build",
	"Comment": "get the connectionfactory set up with the provided parameters.",
	"Method": "ConnectionFactory build(){\r\n    return authWaitTime;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllRoles",
	"Comment": "getallroles gets the list of roles that show up in the current policy.",
	"Method": "List<String> getAllRoles(){\r\n    return getAllNamedRoles(\"g\");\r\n}"
}, {
	"Path": "org.javers.guava.MultimapChangeAppender.difference",
	"Comment": "difference that handle properly collections with duplicates.",
	"Method": "Collection difference(Collection first,Collection second){\r\n    if (first == null) {\r\n        return EMPTY_LIST;\r\n    }\r\n    if (second == null) {\r\n        return first;\r\n    }\r\n    Collection difference = new ArrayList(first);\r\n    for (Object current : second) {\r\n        difference.remove(current);\r\n    }\r\n    return difference;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteValue",
	"Comment": "delete entity value.delete a value from an entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteValue(DeleteValueOptions deleteValueOptions){\r\n    Validator.notNull(deleteValueOptions, \"deleteValueOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { deleteValueOptions.workspaceId(), deleteValueOptions.entity(), deleteValueOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.IndexCapacity.getDocuments",
	"Comment": "gets the documents.summary of the document usage statistics for the environment.",
	"Method": "EnvironmentDocuments getDocuments(){\r\n    return documents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.IntentCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredNamedPolicy",
	"Comment": "removefilterednamedpolicy removes an authorization rule from the current named policy, field filters can be specified.",
	"Method": "boolean removeFilteredNamedPolicy(String ptype,int fieldIndex,String fieldValues){\r\n    return removeFilteredPolicy(\"p\", ptype, fieldIndex, fieldValues);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Expansion.getInputTerms",
	"Comment": "gets the inputterms.a list of terms that will be expanded for this expansion. if specified, only the items in this list are expanded.",
	"Method": "List<String> getInputTerms(){\r\n    return inputTerms;\r\n}"
}, {
	"Path": "net.spy.memcached.spring.MemcachedClientFactoryBean.setShutdownTimeoutSeconds",
	"Comment": "the number of seconds to wait for connections to finish before shuttingdown the client.",
	"Method": "void setShutdownTimeoutSeconds(long shutdownTimeoutSeconds){\r\n    this.shutdownTimeoutSeconds = shutdownTimeoutSeconds;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListValuesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.randn",
	"Comment": "create column vector with normally distributed random values.",
	"Method": "DoubleMatrix randn(int rows,int columns,DoubleMatrix randn,int len){\r\n    return randn(len, 1);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteWorkspace",
	"Comment": "delete workspace.delete a workspace from the service instance.this operation is limited to 30 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteWorkspace(DeleteWorkspaceOptions deleteWorkspaceOptions){\r\n    Validator.notNull(deleteWorkspaceOptions, \"deleteWorkspaceOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\" };\r\n    String[] pathParameters = { deleteWorkspaceOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Enrichment.getOptions",
	"Comment": "gets the options.a list of options specific to the enrichment.",
	"Method": "EnrichmentOptions getOptions(){\r\n    return options;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.Enforcer.hasPermissionForUser",
	"Comment": "haspermissionforuser determines whether a user has a permission.",
	"Method": "boolean hasPermissionForUser(String user,String permission,boolean hasPermissionForUser,String user,List<String> permission){\r\n    return hasPermissionForUser(user, permission.toArray(new String[0]));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageContextGlobalSystem.getUserId",
	"Comment": "gets the userid.a string value that identifies the user who is interacting with the assistant. the client must provide a uniqueidentifier for each individual end user who accesses the application. this user id may be used for billing andother purposes.",
	"Method": "String getUserId(){\r\n    return userId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.conditions",
	"Comment": "gets the conditions.the condition that will trigger the dialog node. this string cannot contain carriage return, newline, or tabcharacters, and it must be no longer than 2048 characters.",
	"Method": "Builder conditions(String conditions,String conditions){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CounterexampleCollection.getCounterexamples",
	"Comment": "gets the counterexamples.an array of objects describing the examples marked as irrelevant input.",
	"Method": "List<Counterexample> getCounterexamples(){\r\n    return counterexamples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateWorkspaceOptions.dialogNodes",
	"Comment": "gets the dialognodes.an array of objects defining the nodes in the workspace dialog.",
	"Method": "Builder dialogNodes(List<CreateDialogNode> dialogNodes,List<CreateDialogNode> dialogNodes){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalyzeOptions.clean",
	"Comment": "gets the clean.remove website elements, such as links, ads, etc.",
	"Method": "Builder clean(Boolean clean,Boolean clean){\r\n    return clean;\r\n}"
}, {
	"Path": "net.spy.memcached.KetamaConnectionFactoryTest.testCorrectTypes",
	"Comment": "kinda lame, but it tests the specific differences from thedefaultconnectionfactory.",
	"Method": "void testCorrectTypes(){\r\n    ConnectionFactory factory = new KetamaConnectionFactory();\r\n    NodeLocator locator = factory.createLocator(new ArrayList<MemcachedNode>());\r\n    assertTrue(locator instanceof KetamaNodeLocator);\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.getAndTouch",
	"Comment": "get a single key and reset its expiration using the default transcoder.",
	"Method": "CASValue<T> getAndTouch(String key,int exp,Transcoder<T> tc,CASValue<Object> getAndTouch,String key,int exp){\r\n    return getAndTouch(key, exp, transcoder);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.createTrainingExample",
	"Comment": "add example to training data query.adds a example to this training data query.",
	"Method": "ServiceCall<TrainingExample> createTrainingExample(CreateTrainingExampleOptions createTrainingExampleOptions){\r\n    Validator.notNull(createTrainingExampleOptions, \"createTrainingExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\", \"examples\" };\r\n    String[] pathParameters = { createTrainingExampleOptions.environmentId(), createTrainingExampleOptions.collectionId(), createTrainingExampleOptions.queryId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (createTrainingExampleOptions.documentId() != null) {\r\n        contentJson.addProperty(\"document_id\", createTrainingExampleOptions.documentId());\r\n    }\r\n    if (createTrainingExampleOptions.crossReference() != null) {\r\n        contentJson.addProperty(\"cross_reference\", createTrainingExampleOptions.crossReference());\r\n    }\r\n    if (createTrainingExampleOptions.relevance() != null) {\r\n        contentJson.addProperty(\"relevance\", createTrainingExampleOptions.relevance());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TrainingExample.class));\r\n}"
}, {
	"Path": "org.jblas.MatrixFunctions.abs",
	"Comment": "returns a copy of this matrix where all elements are set to their\tabsolute values.",
	"Method": "DoubleMatrix abs(DoubleMatrix x,double abs,double x,FloatMatrix abs,FloatMatrix x,float abs,float x){\r\n    return (float) Math.abs(x);\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.LambdaAnalysis.analyzeMethod",
	"Comment": "used to analyze a lambda when we only have the name of the method used in the lambda and not an actual reference to the lambda.",
	"Method": "LambdaAnalysis analyzeMethod(MetamodelUtil metamodel,ClassLoader alternateClassLoader,boolean isObjectEqualsSafe,boolean isAllEqualsSafe,boolean isCollectionContainsSafe,Handle lambdaHandle,List<TypedValue> indirectCapturedArgs,boolean throwExceptionOnFailure){\r\n    if (lambdaHandle.getTag() != Opcodes.H_INVOKESTATIC) {\r\n        if (lambdaHandle.getTag() == Opcodes.H_INVOKEVIRTUAL) {\r\n            return analyzeInvokeVirtual(lambdaHandle, indirectCapturedArgs, metamodel, alternateClassLoader, isObjectEqualsSafe, isAllEqualsSafe, isCollectionContainsSafe, throwExceptionOnFailure);\r\n        }\r\n        if (throwExceptionOnFailure)\r\n            throw new IllegalArgumentException(\"Lambda has an unknown format (an unsupported type of method handle is possibly being used here)\");\r\n        return null;\r\n    }\r\n    try {\r\n        MethodAnalysisResults analysis = analyzeLambda(metamodel, alternateClassLoader, isObjectEqualsSafe, isAllEqualsSafe, isCollectionContainsSafe, lambdaHandle.getOwner(), lambdaHandle.getName(), lambdaHandle.getDesc());\r\n        if (analysis == null) {\r\n            if (throwExceptionOnFailure)\r\n                throw new IllegalArgumentException(\"Could not analyze lambda code\");\r\n            return null;\r\n        }\r\n        return new LambdaAnalysis(analysis, indirectCapturedArgs, Type.getArgumentTypes(lambdaHandle.getDesc()).length);\r\n    } catch (IOException e) {\r\n        if (throwExceptionOnFailure)\r\n            throw new IllegalArgumentException(\"Encountered problems when trying to load the code for your lambdas. You may need to supply a lambdaClassLoader hint to Jinq to help it find your lambdas.\", e);\r\n        return null;\r\n    } catch (AnalyzerException e) {\r\n        if (throwExceptionOnFailure)\r\n            throw new IllegalArgumentException(\"Could not analyze lambda code\", e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.GSpeechDuplex.addResponseListener",
	"Comment": "adds gspeechresponse listeners that fire when google sends a response.",
	"Method": "void addResponseListener(GSpeechResponseListener rl){\r\n    responseListeners.add(rl);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogRuntimeResponseGeneric.getMessageToHumanAgent",
	"Comment": "gets the messagetohumanagent.a message to be sent to the human agent who will be taking over the conversation.",
	"Method": "String getMessageToHumanAgent(){\r\n    return messageToHumanAgent;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ExampleCollection.getExamples",
	"Comment": "gets the examples.an array of objects describing the examples defined for the intent.",
	"Method": "List<Example> getExamples(){\r\n    return examples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalysisResults.getRetrievedUrl",
	"Comment": "gets the retrievedurl.url that was used to retrieve html content.",
	"Method": "String getRetrievedUrl(){\r\n    return retrievedUrl;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.IOUtils.readString",
	"Comment": "reads all data from the given stream as character data in the given character set and closes it on completionor errors.",
	"Method": "String readString(InputStream in,String readString,InputStream in,Charset charset){\r\n    final Reader reader = new InputStreamReader(in, charset);\r\n    final StringBuilder builder = new StringBuilder();\r\n    final CharBuffer buffer = CharBuffer.allocate(2048);\r\n    try {\r\n        while (reader.read(buffer) > -1) {\r\n            buffer.flip();\r\n            builder.append(buffer);\r\n        }\r\n    } finally {\r\n        closeQuietly(reader);\r\n    }\r\n    return builder.toString();\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.project",
	"Comment": "computes the projection coefficient of other on this.the returned scalar times this is the orthogonal projectionof other on this.",
	"Method": "float project(FloatMatrix other){\r\n    other.checkLength(length);\r\n    float norm = 0, dot = 0;\r\n    for (int i = 0; i < this.length; i++) {\r\n        float x = get(i);\r\n        norm += x * x;\r\n        dot += x * other.get(i);\r\n    }\r\n    return dot / norm;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.description",
	"Comment": "gets the description.the description of the dialog node. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateEntityOptions.newDescription",
	"Comment": "gets the newdescription.the description of the entity. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder newDescription(String newDescription,String newDescription){\r\n    return newDescription;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.CustomizationsIT.testUpdateVoiceModelWords",
	"Comment": "test update voice model with new name and new custom translations.",
	"Method": "void testUpdateVoiceModelWords(){\r\n    final String newName = \"new test\";\r\n    model = createVoiceModel();\r\n    GetVoiceModelOptions getOptions = new GetVoiceModelOptions.Builder().customizationId(model.getCustomizationId()).build();\r\n    model = service.getVoiceModel(getOptions).execute();\r\n    UpdateVoiceModelOptions updateOptions = new UpdateVoiceModelOptions.Builder().customizationId(model.getCustomizationId()).name(newName).words(instantiateWords()).build();\r\n    service.updateVoiceModel(updateOptions).execute();\r\n    final VoiceModel model2 = service.getVoiceModel(getOptions).execute();\r\n    assertModelsEqual(model, model2);\r\n    assertNotEquals(model.getWords(), model2.getWords());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.getCounterexample",
	"Comment": "get counterexample.get information about a counterexample. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Counterexample> getCounterexample(GetCounterexampleOptions getCounterexampleOptions){\r\n    Validator.notNull(getCounterexampleOptions, \"getCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { getCounterexampleOptions.workspaceId(), getCounterexampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getCounterexampleOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getCounterexampleOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Counterexample.class));\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removePolicy",
	"Comment": "removepolicy removes an authorization rule from the current policy.",
	"Method": "boolean removePolicy(List<String> params,boolean removePolicy,String params){\r\n    return removePolicy(Arrays.asList(params));\r\n}"
}, {
	"Path": "net.spy.memcached.protocol.ascii.OperationImpl.matchStatus",
	"Comment": "match the status line provided against one of the given operationstatusobjects. if none match, return a failure status with the given line.",
	"Method": "OperationStatus matchStatus(String line,OperationStatus statii){\r\n    OperationStatus rv = null;\r\n    for (OperationStatus status : statii) {\r\n        if (line.equals(status.getMessage())) {\r\n            rv = status;\r\n        }\r\n    }\r\n    if (rv == null) {\r\n        rv = new OperationStatus(false, line, StatusCode.fromAsciiLine(line));\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogNodeOutputOptionsElement.getValue",
	"Comment": "gets the value.an object defining the message input to be sent to the assistant if the user selects the corresponding option.",
	"Method": "DialogNodeOutputOptionsElementValue getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.DeleteUserDataOptions.customerId",
	"Comment": "gets the customerid.the customer id for which all data is to be deleted.",
	"Method": "Builder customerId(String customerId,String customerId){\r\n    return customerId;\r\n}"
}, {
	"Path": "jssc.SerialPortException.getMethodName",
	"Comment": "getting method name during execution of which the exception was called",
	"Method": "String getMethodName(){\r\n    return methodName;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.isPluralAttributeLinkMethod",
	"Comment": "returns true if a method is used to get a plural attribute field from an entity",
	"Method": "boolean isPluralAttributeLinkMethod(MethodSignature sig){\r\n    return nLinkMethods.containsKey(sig);\r\n}"
}, {
	"Path": "io.appium.java_client.android.FingerPrintTest.before",
	"Comment": "enable system security which is required for finger print activation.",
	"Method": "void before(){\r\n    initDriver();\r\n    clickOnSecurity();\r\n    findElementByText(\"Screen lock\").click();\r\n    findElementByText(\"PIN\").click();\r\n    enterPasswordAndContinue();\r\n    enterPasswordAndContinue();\r\n    clickNext();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalysisResults.getRelations",
	"Comment": "gets the relations.the relationships between entities in the content.",
	"Method": "List<RelationsResult> getRelations(){\r\n    return relations;\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.RequestMessage.setName",
	"Comment": "sets a name for this tap stream. if the tap stream fails this name can beused to try to restart the tap stream from where it last left off.",
	"Method": "void setName(String n){\r\n    if (n.length() > 65535) {\r\n        throw new IllegalArgumentException(\"Tap name too long\");\r\n    }\r\n    totalbody += n.length() - name.length();\r\n    keylength = (short) n.length();\r\n    name = n;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateWorkspaceOptions.systemSettings",
	"Comment": "gets the systemsettings.global settings for the workspace.",
	"Method": "Builder systemSettings(WorkspaceSystemSettings systemSettings,WorkspaceSystemSettings systemSettings){\r\n    return systemSettings;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslationResult.getCharacterCount",
	"Comment": "gets the charactercount.number of characters in the input text.",
	"Method": "Long getCharacterCount(){\r\n    return characterCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeVisitedDetails.getConditions",
	"Comment": "gets the conditions.the conditions that trigger the dialog node.",
	"Method": "String getConditions(){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateConfigurationOptions.conversions",
	"Comment": "gets the conversions.the document conversion settings for the configuration.",
	"Method": "Builder conversions(Conversions conversions,Conversions conversions){\r\n    return conversions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.IdentifiedLanguage.getConfidence",
	"Comment": "gets the confidence.the confidence score for the identified language.",
	"Method": "Double getConfidence(){\r\n    return confidence;\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByAccessibilityId.findElementByAccessibilityId",
	"Comment": "method performs the searching for a single element by accessibility id selectorand value of the given selector.",
	"Method": "T findElementByAccessibilityId(String using){\r\n    return findElement(MobileSelector.ACCESSIBILITY.toString(), using);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllActions",
	"Comment": "getallactions gets the list of actions that show up in the current policy.",
	"Method": "List<String> getAllActions(){\r\n    return getAllNamedActions(\"p\");\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceSystemSettingsDisambiguation.getPrompt",
	"Comment": "gets the prompt.the text of the introductory prompt that accompanies disambiguation options presented to the user.",
	"Method": "String getPrompt(){\r\n    return prompt;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListDialogNodesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EmotionScores.getDisgust",
	"Comment": "gets the disgust.disgust score from 0 to 1. a higher score means that the text is more likely to convey disgust.",
	"Method": "Double getDisgust(){\r\n    return disgust;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentAccepted.getDocumentId",
	"Comment": "gets the documentid.the unique identifier of the ingested document.",
	"Method": "String getDocumentId(){\r\n    return documentId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "LogPagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.ReflectUtils.getPropertyDescriptor",
	"Comment": "gets the property descriptor for the named property from the bean info describinga particular class to which property belongs.",
	"Method": "PropertyDescriptor getPropertyDescriptor(Class<?> clazz,String propertyName,PropertyDescriptor getPropertyDescriptor,BeanInfo info,String propertyName){\r\n    for (int i = 0; i < info.getPropertyDescriptors().length; i++) {\r\n        final PropertyDescriptor pd = info.getPropertyDescriptors()[i];\r\n        if (pd.getName().equals(propertyName)) {\r\n            return pd;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.IdentifiableLanguage.getLanguage",
	"Comment": "gets the language.the language code for an identifiable language.",
	"Method": "String getLanguage(){\r\n    return language;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.listTrainingExamples",
	"Comment": "list examples for a training data query.list all examples for this training data query.",
	"Method": "ServiceCall<TrainingExampleList> listTrainingExamples(ListTrainingExamplesOptions listTrainingExamplesOptions){\r\n    Validator.notNull(listTrainingExamplesOptions, \"listTrainingExamplesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\", \"examples\" };\r\n    String[] pathParameters = { listTrainingExamplesOptions.environmentId(), listTrainingExamplesOptions.collectionId(), listTrainingExamplesOptions.queryId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TrainingExampleList.class));\r\n}"
}, {
	"Path": "org.jasig.cas.client.session.SingleSignOutHandler.isLogoutRequest",
	"Comment": "determines whether the given request is a caslogout request.",
	"Method": "boolean isLogoutRequest(HttpServletRequest request){\r\n    if (\"POST\".equalsIgnoreCase(request.getMethod())) {\r\n        return !isMultipartRequest(request) && pathEligibleForLogout(request) && CommonUtils.isNotBlank(CommonUtils.safeGetParameter(request, this.logoutParameterName, this.safeParameters));\r\n    }\r\n    if (\"GET\".equalsIgnoreCase(request.getMethod())) {\r\n        return CommonUtils.isNotBlank(CommonUtils.safeGetParameter(request, this.logoutParameterName, this.safeParameters));\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNodeOptions.userLabel",
	"Comment": "gets the userlabel.a label that can be displayed externally to describe the purpose of the node to users. this string must be nolonger than 512 characters.",
	"Method": "Builder userLabel(String userLabel,String userLabel){\r\n    return userLabel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.WatsonService.setIamCredentials",
	"Comment": "sets iam information.be aware that if you pass in an access token using this method, you accept responsibility for managing the accesstoken yourself. you must set a new access token before this one expires. failing to do so will result inauthentication errors after this token expires.",
	"Method": "void setIamCredentials(IamOptions iamOptions){\r\n    this.tokenManager = new IamTokenManager(iamOptions);\r\n}"
}, {
	"Path": "io.appium.java_client.screenrecording.BaseScreenRecordingOptions.build",
	"Comment": "builds a map, which is ready to be passed to the subordinatedappium api.",
	"Method": "Map<String, Object> build(){\r\n    final ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\r\n    ofNullable(uploadOptions).map(x -> builder.putAll(x.build()));\r\n    return builder.build();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.NaturalLanguageClassifierIT.dClassify",
	"Comment": "test classify. use the pre created classifier to avoid waiting for availability",
	"Method": "void dClassify(){\r\n    Classification classification = null;\r\n    try {\r\n        ClassifyOptions classifyOptions = new ClassifyOptions.Builder().classifierId(preCreatedClassifierId).text(\"is it hot outside?\").build();\r\n        classification = service.classify(classifyOptions).execute();\r\n    } catch (NotFoundException e) {\r\n        throw new AssumptionViolatedException(e.getMessage(), e);\r\n    }\r\n    assertNotNull(classification);\r\n    assertEquals(\"temperature\", classification.getTopClass());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogExport.getLanguage",
	"Comment": "gets the language.the language of the workspace where the message request was made.",
	"Method": "String getLanguage(){\r\n    return language;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.EntityExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the entity.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.security.IamTokenManager.refreshToken",
	"Comment": "refresh an iam token using a refresh token. also updates internal managed iam token information.",
	"Method": "String refreshToken(){\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(url, new String[0]));\r\n    builder.header(HttpHeaders.CONTENT_TYPE, HttpMediaType.APPLICATION_FORM_URLENCODED);\r\n    builder.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION);\r\n    FormBody formBody = new FormBody.Builder().add(GRANT_TYPE, REFRESH_GRANT_TYPE).add(REFRESH_TOKEN, tokenData.getRefreshToken()).build();\r\n    builder.body(formBody);\r\n    tokenData = callIamApi(builder.build());\r\n    return tokenData.getAccessToken();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.conditions",
	"Comment": "gets the conditions.the condition that will trigger the dialog node. this string cannot contain carriage return, newline, or tabcharacters, and it must be no longer than 2048 characters.",
	"Method": "Builder conditions(String conditions,String conditions){\r\n    return conditions;\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByAndroidViewTag.findElementsByAndroidViewTag",
	"Comment": "method performs the searching for a list of elements by view tag selectorand value of the given selector.",
	"Method": "List<T> findElementsByAndroidViewTag(String using){\r\n    return findElements(MobileSelector.ANDROID_VIEWTAG.toString(), using);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateConfigurationOptions.enrichments",
	"Comment": "gets the enrichments.an array of document enrichment settings for the configuration.",
	"Method": "Builder enrichments(List<Enrichment> enrichments,List<Enrichment> enrichments){\r\n    return enrichments;\r\n}"
}, {
	"Path": "jssc.SerialPortList.getPortNames",
	"Comment": "get sorted array of serial ports in the system located on searchpath, matched pattern and sorted by comparator",
	"Method": "String[] getPortNames(String[] getPortNames,String searchPath,String[] getPortNames,Pattern pattern,String[] getPortNames,Comparator<String> comparator,String[] getPortNames,String searchPath,Pattern pattern,String[] getPortNames,String searchPath,Comparator<String> comparator,String[] getPortNames,Pattern pattern,Comparator<String> comparator,String[] getPortNames,String searchPath,Pattern pattern,Comparator<String> comparator){\r\n    if (searchPath == null || pattern == null || comparator == null) {\r\n        return new String[] {};\r\n    }\r\n    if (SerialNativeInterface.getOsType() == SerialNativeInterface.OS_WINDOWS) {\r\n        return getWindowsPortNames(pattern, comparator);\r\n    }\r\n    return getUnixBasedPortNames(searchPath, pattern, comparator);\r\n}"
}, {
	"Path": "io.appium.java_client.android.connection.ConnectionStateBuilder.withDataEnabled",
	"Comment": "sets data connection mode to enabled state if it was disabled.this option only works on rooted devices or on emulators.",
	"Method": "ConnectionStateBuilder withDataEnabled(){\r\n    bitMask |= DATA_MASK;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateEntityOptions.newFuzzyMatch",
	"Comment": "gets the newfuzzymatch.whether to use fuzzy matching for the entity.",
	"Method": "Builder newFuzzyMatch(Boolean newFuzzyMatch,Boolean newFuzzyMatch){\r\n    return newFuzzyMatch;\r\n}"
}, {
	"Path": "de.danielbechler.diff.ObjectDiffer.compare",
	"Comment": "recursively inspects the given objects and returns a node representing their differences. both objects\thave be have the same type.",
	"Method": "DiffNode compare(T working,T base){\r\n    dispatcher.resetInstanceMemory();\r\n    try {\r\n        return dispatcher.dispatch(DiffNode.ROOT, Instances.of(working, base), RootAccessor.getInstance());\r\n    } finally {\r\n        dispatcher.clearInstanceMemory();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Pagination.getNextCursor",
	"Comment": "gets the nextcursor.a token identifying the next page of results.",
	"Method": "String getNextCursor(){\r\n    return nextCursor;\r\n}"
}, {
	"Path": "org.jinq.jpa.jpqlquery.QueryGenerationState.registerParameter",
	"Comment": "returns the parameter name that should be used to represent the parameter in a query string. this version is used to handle parameters that are encoded as fields in a lambda object.",
	"Method": "String registerParameter(Object paramNode,int lambdaIndex,int argIndex,String registerParameter,Object paramNode,int lambdaIndex,String fieldName){\r\n    if (!parameterNames.containsKey(paramNode)) {\r\n        String paramName = nextParamIndex();\r\n        parameterNames.put(paramNode, paramName);\r\n        parameters.add(new GeneratedQueryParameter(paramName, lambdaIndex, fieldName));\r\n    }\r\n    return parameterNames.get(paramNode);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Credentials.getCredentialDetails",
	"Comment": "gets the credentialdetails.object containing details of the stored credentials.obtain credentials for your source from the administrator of the source.",
	"Method": "CredentialDetails getCredentialDetails(){\r\n    return credentialDetails;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.GetModelOptions.modelId",
	"Comment": "gets the modelid.the identifier of the model in the form of its name from the output of the get a model method.",
	"Method": "Builder modelId(String modelId,String modelId){\r\n    return modelId;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.CoreEnforcer.enableAutoSave",
	"Comment": "enableautosave controls whether to save a policy rule automatically tothe adapter when it is added or removed.",
	"Method": "void enableAutoSave(boolean autoSave){\r\n    this.autoSave = autoSave;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeAction.getCredentials",
	"Comment": "gets the credentials.the name of the context variable that the client application will use to pass in credentials for the action.",
	"Method": "String getCredentials(){\r\n    return credentials;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryOptions.aggregation",
	"Comment": "gets the aggregation.an aggregation search that returns an exact answer by combining query search with filters. useful for applicationsto build lists, tables, and time series. for a full list of possible aggregations, see the query reference.",
	"Method": "Builder aggregation(String aggregation,String aggregation){\r\n    return aggregation;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newVariable",
	"Comment": "gets the newvariable.the location in the dialog context where output is stored.",
	"Method": "Builder newVariable(String newVariable,String newVariable){\r\n    return newVariable;\r\n}"
}, {
	"Path": "io.appium.java_client.ScreenshotState.setComparisonInterval",
	"Comment": "sets the interval between similarity verification rounds in verify methods.",
	"Method": "ScreenshotState setComparisonInterval(Duration comparisonInterval){\r\n    this.comparisonInterval = comparisonInterval;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.RelationsResult.getSentence",
	"Comment": "gets the sentence.the sentence that contains the relation.",
	"Method": "String getSentence(){\r\n    return sentence;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.variable",
	"Comment": "gets the variable.the location in the dialog context where output is stored.",
	"Method": "Builder variable(String variable,String variable){\r\n    return variable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Entity.isFuzzyMatch",
	"Comment": "gets the fuzzymatch.whether fuzzy matching is used for the entity.",
	"Method": "Boolean isFuzzyMatch(){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.ProfileOptions.consumptionPreferences",
	"Comment": "gets the consumptionpreferences.indicates whether consumption preferences are returned with the results. by default, no consumption preferences arereturned.",
	"Method": "Builder consumptionPreferences(Boolean consumptionPreferences,Boolean consumptionPreferences){\r\n    return consumptionPreferences;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.load",
	"Comment": "loads a matrix from a file into this matrix. note that the old dataof this matrix will be discarded.",
	"Method": "void load(String filename){\r\n    FileInputStream fis = new FileInputStream(filename);\r\n    DataInputStream dis = new DataInputStream(fis);\r\n    try {\r\n        this.in(dis);\r\n    } finally {\r\n        dis.close();\r\n        fis.close();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.IdentifiableLanguage.getLanguage",
	"Comment": "gets the language.the language code for an identifiable language.",
	"Method": "String getLanguage(){\r\n    return language;\r\n}"
}, {
	"Path": "net.spy.memcached.protocol.ascii.OperationImpl.setArguments",
	"Comment": "set some arguments for an operation into the given byte buffer.",
	"Method": "void setArguments(ByteBuffer bb,Object args){\r\n    boolean wasFirst = true;\r\n    for (Object o : args) {\r\n        if (wasFirst) {\r\n            wasFirst = false;\r\n        } else {\r\n            bb.put((byte) ' ');\r\n        }\r\n        bb.put(KeyUtil.getKeyBytes(String.valueOf(o)));\r\n    }\r\n    bb.put(CRLF);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.LanguageTranslator.identify",
	"Comment": "identify language.identifies the language of the input text.",
	"Method": "ServiceCall<IdentifiedLanguages> identify(IdentifyOptions identifyOptions){\r\n    Validator.notNull(identifyOptions, \"identifyOptions cannot be null\");\r\n    String[] pathSegments = { \"v3/identify\" };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));\r\n    builder.query(VERSION, versionDate);\r\n    builder.bodyContent(identifyOptions.text(), \"text/plain\");\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(IdentifiedLanguages.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageRequest.getContext",
	"Comment": "gets the context.state information for the conversation. continue a conversation by including the context object from the previousresponse.",
	"Method": "Context getContext(){\r\n    return context;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.ListCollectionFieldsResponse.getFields",
	"Comment": "gets the fields.an array containing information about each field in the collections.",
	"Method": "List<Field> getFields(){\r\n    return fields;\r\n}"
}, {
	"Path": "io.appium.java_client.android.HasAndroidDeviceDetails.getSystemBars",
	"Comment": "retrieve visibility and bounds information of the status and navigation bars.",
	"Method": "Map<String, String> getSystemBars(){\r\n    return CommandExecutionHelper.execute(this, getSystemBarsCommand());\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.TapStream.isCancelled",
	"Comment": "determine if messages sent to this server and recorded on this tapstreamhave been canceled.",
	"Method": "boolean isCancelled(){\r\n    for (TapOperation op : ops) {\r\n        if (!op.isCancelled()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.hasGroupingPolicy",
	"Comment": "hasgroupingpolicy determines whether a role inheritance rule exists.",
	"Method": "boolean hasGroupingPolicy(List<String> params,boolean hasGroupingPolicy,String params){\r\n    return hasGroupingPolicy(Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.GetAudioOptions.audioName",
	"Comment": "gets the audioname.the name of the audio resource for the custom acoustic model.",
	"Method": "Builder audioName(String audioName,String audioName){\r\n    return audioName;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateWorkspaceOptions.entities",
	"Comment": "gets the entities.an array of objects defining the entities for the workspace.",
	"Method": "Builder entities(List<CreateEntity> entities,List<CreateEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Value.getCreated",
	"Comment": "gets the created.the timestamp for creation of the entity value.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImage.getError",
	"Comment": "gets the error.information about what might have caused a failure, such as an image that is too large. not returned when there isno error.",
	"Method": "ErrorInfo getError(){\r\n    return error;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.getSynonym",
	"Comment": "get entity value synonym.get information about a synonym of an entity value.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Synonym> getSynonym(GetSynonymOptions getSynonymOptions){\r\n    Validator.notNull(getSynonymOptions, \"getSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { getSynonymOptions.workspaceId(), getSynonymOptions.entity(), getSynonymOptions.value(), getSynonymOptions.synonym() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getSynonymOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getSynonymOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Synonym.class));\r\n}"
}, {
	"Path": "org.jblas.MatrixFunctions.acos",
	"Comment": "returns a copy of this matrix where the trigonometric acos function is applied\telement wise.",
	"Method": "DoubleMatrix acos(DoubleMatrix x,double acos,double x,FloatMatrix acos,FloatMatrix x,float acos,float x){\r\n    return (float) Math.acos(x);\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.GSpeechDuplex.openHttpsPostConnection",
	"Comment": "opens a chunked https post connection and returns a scanner with incoming data from google server\tused for to get upstream\tchunked https ensures unlimited file size.",
	"Method": "void openHttpsPostConnection(String murl,TargetDataLine mtl,int sampleRate,Scanner openHttpsPostConnection,String urlStr,byte[][] data,int sampleRate){\r\n    byte[][] mextrad = data;\r\n    int resCode = -1;\r\n    OutputStream out = null;\r\n    try {\r\n        URL url = new URL(urlStr);\r\n        HttpsURLConnection httpConn = getHttpsURLConnection(sampleRate, url);\r\n        out = httpConn.getOutputStream();\r\n        System.out.println(\"Starting to write\");\r\n        for (byte[] dataArray : mextrad) {\r\n            out.write(dataArray);\r\n            try {\r\n                Thread.sleep(1000);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        out.write(FINAL_CHUNK);\r\n        System.out.println(\"IO WRITE DONE\");\r\n        resCode = httpConn.getResponseCode();\r\n        if (resCode / 100 != 2) {\r\n            System.out.println(\"ERROR\");\r\n        }\r\n        if (resCode == HttpsURLConnection.HTTP_OK) {\r\n            return new Scanner(httpConn.getInputStream(), \"UTF-8\");\r\n        } else {\r\n            System.out.println(\"HELP: \" + resCode);\r\n        }\r\n    } catch (MalformedURLException e) {\r\n        e.printStackTrace();\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Counterexample.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the counterexample.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateEntityOptions.newDescription",
	"Comment": "gets the newdescription.the description of the entity. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder newDescription(String newDescription,String newDescription){\r\n    return newDescription;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryOptions.deduplicateField",
	"Comment": "gets the deduplicatefield.when specified, duplicate results based on the field specified are removed from the returned results. duplicatecomparison is limited to the current query only,is not considered. this parameter is currently betafunctionality.",
	"Method": "Builder deduplicateField(String deduplicateField,String deduplicateField){\r\n    return deduplicateField;\r\n}"
}, {
	"Path": "jssc.SerialPort.removeEventListener",
	"Comment": "delete event listener. mask is set to 0. so at the next addition of eventhandler you shall set required event mask again",
	"Method": "boolean removeEventListener(){\r\n    checkPortOpened(\"removeEventListener()\");\r\n    if (!eventListenerAdded) {\r\n        throw new SerialPortException(portName, \"removeEventListener()\", SerialPortException.TYPE_CANT_REMOVE_LISTENER);\r\n    }\r\n    eventThread.terminateThread();\r\n    setEventsMask(0);\r\n    if (Thread.currentThread().getId() != eventThread.getId()) {\r\n        if (eventThread.isAlive()) {\r\n            try {\r\n                eventThread.join(5000);\r\n            } catch (InterruptedException ex) {\r\n                throw new SerialPortException(portName, \"removeEventListener()\", SerialPortException.TYPE_LISTENER_THREAD_INTERRUPTED);\r\n            }\r\n        }\r\n    }\r\n    methodErrorOccurred = null;\r\n    eventListenerAdded = false;\r\n    return true;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.IdentifiedLanguages.getLanguages",
	"Comment": "gets the languages.a ranking of identified languages with confidence scores.",
	"Method": "List<IdentifiedLanguage> getLanguages(){\r\n    return languages;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CounterexampleCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOptions.input",
	"Comment": "gets the input.an input object that includes the input text.",
	"Method": "Builder input(MessageInput input,MessageInput input){\r\n    return input;\r\n}"
}, {
	"Path": "io.appium.java_client.TouchAction.perform",
	"Comment": "perform this chain of actions on the performstouchactions.",
	"Method": "T perform(){\r\n    performsTouchActions.performTouchAction(this);\r\n    return (T) this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.RelationsResult.getScore",
	"Comment": "gets the score.confidence score for the relation. higher values indicate greater confidence.",
	"Method": "Double getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.insertCustomTupleConstructor",
	"Comment": "allows you to register your own java class that can be used as a tuple in some limited situations.",
	"Method": "void insertCustomTupleConstructor(String className,Constructor<?> constructor,Method tupleIndexReaders){\r\n    MethodSignature constructorSig = MethodSignature.fromConstructor(constructor);\r\n    safeMethods.add(constructorSig);\r\n    insertCustomTupleIndexGetters(tupleIndexReaders);\r\n    CustomTupleInfo tupleInfo = new CustomTupleInfo();\r\n    tupleInfo.className = className;\r\n    tupleInfo.constructor = constructor;\r\n    tupleInfo.constructorSig = constructorSig;\r\n    customTupleConstructorMethods.put(constructorSig, tupleInfo);\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.asyncGetBulk",
	"Comment": "varargs wrapper for asynchronous bulk gets with the default transcoder.",
	"Method": "BulkFuture<Map<String, T>> asyncGetBulk(Iterator<String> keyIter,Iterator<Transcoder<T>> tcIter,BulkFuture<Map<String, T>> asyncGetBulk,Collection<String> keys,Iterator<Transcoder<T>> tcIter,BulkFuture<Map<String, T>> asyncGetBulk,Iterator<String> keyIter,Transcoder<T> tc,BulkFuture<Map<String, T>> asyncGetBulk,Collection<String> keys,Transcoder<T> tc,BulkFuture<Map<String, Object>> asyncGetBulk,Iterator<String> keyIter,BulkFuture<Map<String, Object>> asyncGetBulk,Collection<String> keys,BulkFuture<Map<String, T>> asyncGetBulk,Transcoder<T> tc,String keys,BulkFuture<Map<String, Object>> asyncGetBulk,String keys){\r\n    return asyncGetBulk(Arrays.asList(keys), transcoder);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.MultipartRecognition.keywordsThreshold",
	"Comment": "gets the keywordsthreshold.confidence value that is the lower bound for spotting a keyword. a word is considered to match a keyword if itsconfidence is greater than or equal to the threshold. specify a probability between 0 and 1 inclusive. nokeyword spotting is performed if you omit the parameter. if you specify a threshold, you must also specify oneor more keywords.",
	"Method": "Builder keywordsThreshold(Float keywordsThreshold,Float keywordsThreshold){\r\n    return keywordsThreshold;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the workspace.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentCounts.getProcessing",
	"Comment": "gets the processing.the number of documents in the collection that are currently being processed.",
	"Method": "Long getProcessing(){\r\n    return processing;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.createEntity",
	"Comment": "create entity.create a new entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Entity> createEntity(CreateEntityOptions createEntityOptions){\r\n    Validator.notNull(createEntityOptions, \"createEntityOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\" };\r\n    String[] pathParameters = { createEntityOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"entity\", createEntityOptions.entity());\r\n    if (createEntityOptions.description() != null) {\r\n        contentJson.addProperty(\"description\", createEntityOptions.description());\r\n    }\r\n    if (createEntityOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(createEntityOptions.metadata()));\r\n    }\r\n    if (createEntityOptions.values() != null) {\r\n        contentJson.add(\"values\", GsonSingleton.getGson().toJsonTree(createEntityOptions.values()));\r\n    }\r\n    if (createEntityOptions.fuzzyMatch() != null) {\r\n        contentJson.addProperty(\"fuzzy_match\", createEntityOptions.fuzzyMatch());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Entity.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryRelationsOptions.filter",
	"Comment": "gets the filter.filters to apply to the relationship query.",
	"Method": "Builder filter(QueryRelationsFilter filter,QueryRelationsFilter filter){\r\n    return filter;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListSynonymsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.conditions",
	"Comment": "gets the conditions.the condition that will trigger the dialog node. this string cannot contain carriage return, newline, or tabcharacters, and it must be no longer than 2048 characters.",
	"Method": "Builder conditions(String conditions,String conditions){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryNoticesOptions.deduplicateField",
	"Comment": "gets the deduplicatefield.when specified, duplicate results based on the field specified are removed from the returned results. duplicatecomparison is limited to the current query only,is not considered. this parameter is currently betafunctionality.",
	"Method": "Builder deduplicateField(String deduplicateField,String deduplicateField){\r\n    return deduplicateField;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.get",
	"Comment": "get with a single key and decode using the default transcoder.",
	"Method": "T get(String key,Transcoder<T> tc,Object get,String key){\r\n    return get(key, transcoder);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createIntent",
	"Comment": "create intent.create a new intent.this operation is limited to 2000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Intent> createIntent(CreateIntentOptions createIntentOptions){\r\n    Validator.notNull(createIntentOptions, \"createIntentOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\" };\r\n    String[] pathParameters = { createIntentOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"intent\", createIntentOptions.intent());\r\n    if (createIntentOptions.description() != null) {\r\n        contentJson.addProperty(\"description\", createIntentOptions.description());\r\n    }\r\n    if (createIntentOptions.examples() != null) {\r\n        contentJson.add(\"examples\", GsonSingleton.getGson().toJsonTree(createIntentOptions.examples()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Intent.class));\r\n}"
}, {
	"Path": "net.spy.memcached.KetamaNodeKeyFormatter.getKeyForNode",
	"Comment": "returns a uniquely identifying key, suitable for hashing by theketamanodelocator algorithm.",
	"Method": "String getKeyForNode(MemcachedNode node,int repetition){\r\n    String nodeKey = nodeKeys.get(node);\r\n    if (nodeKey == null) {\r\n        switch(this.format) {\r\n            case LIBMEMCACHED:\r\n                InetSocketAddress address = (InetSocketAddress) node.getSocketAddress();\r\n                nodeKey = address.getHostName();\r\n                if (address.getPort() != 11211) {\r\n                    nodeKey += \":\" + address.getPort();\r\n                }\r\n                break;\r\n            case SPYMEMCACHED:\r\n                nodeKey = String.valueOf(node.getSocketAddress());\r\n                if (nodeKey.startsWith(\"/\")) {\r\n                    nodeKey = nodeKey.substring(1);\r\n                }\r\n                break;\r\n            default:\r\n                assert false;\r\n        }\r\n        nodeKeys.put(node, nodeKey);\r\n    }\r\n    return nodeKey + \"-\" + repetition;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateWorkspaceOptions.description",
	"Comment": "gets the description.the description of the workspace. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.toString",
	"Comment": "generate string representation of the matrix, with specifiedformat for the entries, and delimiters.",
	"Method": "String toString(String toString,String fmt,String toString,String fmt,String open,String close,String colSep,String rowSep){\r\n    StringWriter s = new StringWriter();\r\n    PrintWriter p = new PrintWriter(s);\r\n    p.print(open);\r\n    for (int r = 0; r < rows; r++) {\r\n        for (int c = 0; c < columns; c++) {\r\n            p.printf(fmt, get(r, c));\r\n            if (c < columns - 1) {\r\n                p.print(colSep);\r\n            }\r\n        }\r\n        if (r < rows - 1) {\r\n            p.print(rowSep);\r\n        }\r\n    }\r\n    p.print(close);\r\n    return s.toString();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateIntent",
	"Comment": "update intent.update an existing intent with new or modified data. you must provide component objects defining the content of theupdated intent.this operation is limited to 2000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Intent> updateIntent(UpdateIntentOptions updateIntentOptions){\r\n    Validator.notNull(updateIntentOptions, \"updateIntentOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\" };\r\n    String[] pathParameters = { updateIntentOptions.workspaceId(), updateIntentOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateIntentOptions.newIntent() != null) {\r\n        contentJson.addProperty(\"intent\", updateIntentOptions.newIntent());\r\n    }\r\n    if (updateIntentOptions.newExamples() != null) {\r\n        contentJson.add(\"examples\", GsonSingleton.getGson().toJsonTree(updateIntentOptions.newExamples()));\r\n    }\r\n    if (updateIntentOptions.newDescription() != null) {\r\n        contentJson.addProperty(\"description\", updateIntentOptions.newDescription());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Intent.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getNextStep",
	"Comment": "gets the nextstep.the next step to execute following this dialog node.",
	"Method": "DialogNodeNextStep getNextStep(){\r\n    return nextStep;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.ConversationTest.testSendMessageWithAlternateIntents",
	"Comment": "test send message. use some different messageoptions options like context and other public methods",
	"Method": "void testSendMessageWithAlternateIntents(){\r\n    MessageResponse mockResponse = loadFixture(FIXTURE, MessageResponse.class);\r\n    server.enqueue(jsonResponse(mockResponse));\r\n    Context contextTemp = new Context();\r\n    contextTemp.put(\"name\", \"Myname\");\r\n    InputData inputTemp = new InputData.Builder(\"My text\").build();\r\n    MessageOptions options = new MessageOptions.Builder(WORKSPACE_ID).input(inputTemp).alternateIntents(false).context(contextTemp).entities(null).intents(null).build();\r\n    MessageResponse serviceResponse = service.message(options).execute();\r\n    RecordedRequest request = server.takeRequest();\r\n    String path = StringUtils.join(PATH_MESSAGE, \"?\", VERSION, \"=2018-07-10\");\r\n    assertEquals(path, request.getPath());\r\n    assertArrayEquals(new String[] { \"Great choice! Playing some jazz for you.\" }, serviceResponse.getOutput().getText().toArray(new String[0]));\r\n    assertEquals(request.getMethod(), \"POST\");\r\n    assertNotNull(request.getHeader(HttpHeaders.AUTHORIZATION));\r\n    assertEquals(serviceResponse, mockResponse);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutput.getActions",
	"Comment": "gets the actions.an array of objects describing any actions requested by the dialog node.",
	"Method": "List<DialogNodeAction> getActions(){\r\n    return actions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.EventData.getQueryId",
	"Comment": "gets the queryid.the query identifier stored in the log. the query and any events associated with that query are stored with the",
	"Method": "String getQueryId(){\r\n    return queryId;\r\n}"
}, {
	"Path": "io.appium.java_client.android.AndroidMobileCommandHelper.getSupportedPerformanceDataTypesCommand",
	"Comment": "returns the information type of the system state which is supported to readas like cpu, memory, network traffic, and battery.",
	"Method": "Map.Entry<String, Map<String, ?>> getSupportedPerformanceDataTypesCommand(){\r\n    return new AbstractMap.SimpleEntry(GET_SUPPORTED_PERFORMANCE_DATA_TYPES, ImmutableMap.of());\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.RecognizerChunked.addResponseListener",
	"Comment": "adds responselistener that triggers when a response from google is recieved",
	"Method": "void addResponseListener(GSpeechResponseListener rl){\r\n    responseListeners.add(rl);\r\n}"
}, {
	"Path": "org.jinq.jpa.JPQL.isInList",
	"Comment": "checks if an item is in a collection list. this method is normallyused with the list as a parameter to the query.",
	"Method": "Boolean isInList(U item,Collection<U> list){\r\n    return isIn(item, JinqStream.from(list));\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByAndroidViewTag.findElementByAndroidViewTag",
	"Comment": "method performs the searching for a single element by view tag selectorand value of the given selector.",
	"Method": "T findElementByAndroidViewTag(String using){\r\n    return findElement(MobileSelector.ANDROID_VIEWTAG.toString(), using);\r\n}"
}, {
	"Path": "io.appium.java_client.service.local.AppiumDriverLocalService.addOutPutStreams",
	"Comment": "adds other output streams which should accept server output data.",
	"Method": "void addOutPutStreams(List<OutputStream> outputStreams){\r\n    checkNotNull(outputStreams, \"outputStreams parameter is NULL!\");\r\n    for (OutputStream stream : outputStreams) {\r\n        addOutPutStream(stream);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.security.IamTokenManager.isAccessTokenExpired",
	"Comment": "check if currently stored access token is expired.using a buffer to prevent the edge case of thetoken expiring before the request could be made.the buffer will be a fraction of the total ttl. using 80%.",
	"Method": "boolean isAccessTokenExpired(){\r\n    if (tokenData.getExpiresIn() == null || tokenData.getExpiration() == null) {\r\n        return true;\r\n    }\r\n    Double fractionOfTimeToLive = 0.8;\r\n    Long timeToLive = tokenData.getExpiresIn();\r\n    Long expirationTime = tokenData.getExpiration();\r\n    Double refreshTime = expirationTime - (timeToLive * (1.0 - fractionOfTimeToLive));\r\n    Double currentTime = Math.floor(System.currentTimeMillis() / 1000);\r\n    return refreshTime < currentTime;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CreateConfigurationOptions.conversions",
	"Comment": "gets the conversions.the document conversion settings for the configuration.",
	"Method": "Builder conversions(Conversions conversions,Conversions conversions){\r\n    return conversions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.IdentifiableLanguages.getLanguages",
	"Comment": "gets the languages.a list of all languages that the service can identify.",
	"Method": "List<IdentifiableLanguage> getLanguages(){\r\n    return languages;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.append",
	"Comment": "append to an existing value in the cache.if 0 is passed in as the cas identifier, it will override the valueon the server without performing the cas check.note that the return will be false any time a mutation has not occurred.",
	"Method": "OperationFuture<Boolean> append(long cas,String key,Object val,OperationFuture<Boolean> append,String key,Object val,OperationFuture<Boolean> append,long cas,String key,T val,Transcoder<T> tc,OperationFuture<Boolean> append,String key,T val,Transcoder<T> tc){\r\n    return asyncCat(ConcatenationType.append, 0, key, val, tc);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslationModel.getBaseModelId",
	"Comment": "gets the basemodelid.model id of the base model that was used to customize the model. if the model is not a custom model, this will bean empty string.",
	"Method": "String getBaseModelId(){\r\n    return baseModelId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteValue",
	"Comment": "delete entity value.delete a value from an entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteValue(DeleteValueOptions deleteValueOptions){\r\n    Validator.notNull(deleteValueOptions, \"deleteValueOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { deleteValueOptions.workspaceId(), deleteValueOptions.entity(), deleteValueOptions.value() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "org.casbin.jcasbin.config.Config.newConfigFromText",
	"Comment": "newconfigfromtext create an empty configuration representation from text.",
	"Method": "Config newConfigFromText(String text){\r\n    Config c = new Config();\r\n    c.parseBuffer(new BufferedReader(new StringReader(text)));\r\n    return c;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.createExample",
	"Comment": "create user input example.add a new user input example to an intent.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Example> createExample(CreateExampleOptions createExampleOptions){\r\n    Validator.notNull(createExampleOptions, \"createExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { createExampleOptions.workspaceId(), createExampleOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"text\", createExampleOptions.text());\r\n    if (createExampleOptions.mentions() != null) {\r\n        contentJson.add(\"mentions\", GsonSingleton.getGson().toJsonTree(createExampleOptions.mentions()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Example.class));\r\n}"
}, {
	"Path": "net.spy.memcached.internal.OperationFuture.isCancelled",
	"Comment": "whether or not the operation associated with this operationfuture has beencanceled.one scenario in which this can occur is if the connection is lost and theoperation has been sent over the network.in this case, the operation mayor may not have reached the server before the connection was dropped.",
	"Method": "boolean isCancelled(){\r\n    assert op != null : \"No operation\";\r\n    return op.isCancelled();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.GetMetricsQueryEventOptions.resultType",
	"Comment": "gets the resulttype.the type of result to consider when calculating the metric.",
	"Method": "Builder resultType(String resultType,String resultType){\r\n    return resultType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.ConceptsResult.getRelevance",
	"Comment": "gets the relevance.relevance score between 0 and 1. higher scores indicate greater relevance.",
	"Method": "Double getRelevance(){\r\n    return relevance;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.rand",
	"Comment": "creates a column vector with random values uniformly in 0..1.",
	"Method": "FloatMatrix rand(int rows,int columns,FloatMatrix rand,int len){\r\n    return rand(len, 1);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Workspace.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the workspace.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.IntentCollection.getIntents",
	"Comment": "gets the intents.an array of objects describing the intents defined for the workspace.",
	"Method": "List<IntentExport> getIntents(){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogRuntimeResponseGeneric.getSuggestions",
	"Comment": "gets the suggestions.an array of objects describing the possible matching dialog nodes from which the user can choose. suggestions property is part of the disambiguation feature, which is only available for premiumusers.",
	"Method": "List<DialogSuggestion> getSuggestions(){\r\n    return suggestions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryNoticesOptions.offset",
	"Comment": "gets the offset.the number of query results to skip at the beginning. for example, if the total number of results that are returnedis 10 and the offset is 8, it returns the last two results.",
	"Method": "Builder offset(long offset,Long offset){\r\n    return offset;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CounterexampleCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListExamplesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.model.BuildWithDetails.streamConsoleOutput",
	"Comment": "stream build console output log as text using buildconsolestreamlistenermethod can be used to asynchronously obtain logs for running build.",
	"Method": "void streamConsoleOutput(BuildConsoleStreamListener listener,int poolingInterval,int poolingTimeout){\r\n    final long startTime = System.currentTimeMillis();\r\n    final long timeoutTime = startTime + (poolingTimeout * 1000);\r\n    int bufferOffset = 0;\r\n    while (true) {\r\n        Thread.sleep(poolingInterval * 1000);\r\n        ConsoleLog consoleLog = null;\r\n        consoleLog = getConsoleOutputText(bufferOffset);\r\n        String logString = consoleLog.getConsoleLog();\r\n        if (logString != null && !logString.isEmpty()) {\r\n            listener.onData(logString);\r\n        }\r\n        if (consoleLog.getHasMoreData()) {\r\n            bufferOffset = consoleLog.getCurrentBufferSize();\r\n        } else {\r\n            listener.finished();\r\n            break;\r\n        }\r\n        long currentTime = System.currentTimeMillis();\r\n        if (currentTime > timeoutTime) {\r\n            LOGGER.warn(\"Pooling for build {0} for {2} timeout! Check if job stuck in jenkins\", BuildWithDetails.this.getDisplayName(), BuildWithDetails.this.getNumber());\r\n            break;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newDescription",
	"Comment": "gets the newdescription.the description of the dialog node. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder newDescription(String newDescription,String newDescription){\r\n    return newDescription;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.Enforcer.getPermissionsForUser",
	"Comment": "getpermissionsforuser gets permissions for a user or role.",
	"Method": "List<List<String>> getPermissionsForUser(String user){\r\n    return getFilteredPolicy(0, user);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.FederatedQueryOptions.bias",
	"Comment": "gets the bias.field which the returned results will be biased against. the specified field must be either aformat. when atype field is specified returned results are biased towards field values closerto the current date. when atype field is specified, returned results are biased towards higher fieldvalues. this parameter cannot be used in the same query as theparameter.",
	"Method": "Builder bias(String bias,String bias){\r\n    return bias;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteExample",
	"Comment": "delete user input example.delete a user input example from an intent.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteExample(DeleteExampleOptions deleteExampleOptions){\r\n    Validator.notNull(deleteExampleOptions, \"deleteExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { deleteExampleOptions.workspaceId(), deleteExampleOptions.intent(), deleteExampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "org.jblas.ComplexDoubleMatrix.copy",
	"Comment": "copy complexdoublematrix a to this. this a is resized if necessary.",
	"Method": "ComplexDoubleMatrix copy(ComplexDoubleMatrix a){\r\n    if (!sameSize(a))\r\n        resize(a.rows, a.columns);\r\n    SimpleBlas.copy(a, this);\r\n    return a;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.hasPolicy",
	"Comment": "haspolicy determines whether an authorization rule exists.",
	"Method": "boolean hasPolicy(List<String> params,boolean hasPolicy,String params){\r\n    return hasPolicy(Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ValueCollection.getPagination",
	"Comment": "gets the pagination.an object defining the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogExport.getRequest",
	"Comment": "gets the request.a request received by the workspace, including the user input and context.",
	"Method": "MessageRequest getRequest(){\r\n    return request;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Timeslice.isAnomaly",
	"Comment": "gets the anomaly.used to indicate that anomaly detection should be performed. anomaly detection is used to locate unusual datapointswithin a time series.",
	"Method": "Boolean isAnomaly(){\r\n    return anomaly;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.TextToSpeechTest.testSynthesizeAndFixHeader",
	"Comment": "test the fix wave header not having the size due to be streamed.",
	"Method": "void testSynthesizeAndFixHeader(){\r\n    File audio = new File(\"src/test/resources/text_to_speech/numbers.wav\");\r\n    InputStream stream = new FileInputStream(audio);\r\n    assertNotNull(stream);\r\n    stream = WaveUtils.reWriteWaveHeader(stream);\r\n    File tempFile = File.createTempFile(\"output\", \".wav\");\r\n    writeInputStreamToFile(stream, tempFile);\r\n    assertNotNull(AudioSystem.getAudioFileFormat(tempFile));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeVisitedDetails.getConditions",
	"Comment": "gets the conditions.the conditions that trigger the dialog node.",
	"Method": "String getConditions(){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listMentions",
	"Comment": "list entity mentions.list mentions for a contextual entity. an entity mention is an occurrence of a contextual entity in the context ofan intent user input example.this operation is limited to 200 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<EntityMentionCollection> listMentions(ListMentionsOptions listMentionsOptions){\r\n    Validator.notNull(listMentionsOptions, \"listMentionsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"mentions\" };\r\n    String[] pathParameters = { listMentionsOptions.workspaceId(), listMentionsOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listMentionsOptions.export() != null) {\r\n        builder.query(\"export\", String.valueOf(listMentionsOptions.export()));\r\n    }\r\n    if (listMentionsOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listMentionsOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(EntityMentionCollection.class));\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.ThreadLocalXPathExpression.evaluateAsNodeList",
	"Comment": "evaluates the xpath expression and returns the result coerced to a node list.",
	"Method": "NodeList evaluateAsNodeList(Object o){\r\n    return (NodeList) evaluate(o, XPathConstants.NODESET);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.NaturalLanguageClassifier.getClassifier",
	"Comment": "get information about a classifier.returns status and other information about a classifier.",
	"Method": "ServiceCall<Classifier> getClassifier(GetClassifierOptions getClassifierOptions,ServiceCall<Classifier> getClassifier,String classifierId){\r\n    GetClassifierOptions getClassifierOptions = new GetClassifierOptions.Builder().classifierId(classifierId).build();\r\n    return getClassifier(getClassifierOptions);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newConditions",
	"Comment": "gets the newconditions.the condition that will trigger the dialog node. this string cannot contain carriage return, newline, or tabcharacters, and it must be no longer than 2048 characters.",
	"Method": "Builder newConditions(String newConditions,String newConditions){\r\n    return newConditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.DetectedFaces.getImagesProcessed",
	"Comment": "gets the imagesprocessed.number of images processed for the api call.",
	"Method": "Long getImagesProcessed(){\r\n    return imagesProcessed;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.client.util.UrlUtils.toJobBaseUrl",
	"Comment": "helper to create the base url for a job, with or without a given folder",
	"Method": "String toJobBaseUrl(FolderJob folder,String jobName){\r\n    final StringBuilder sb = new StringBuilder(DEFAULT_BUFFER_SIZE);\r\n    sb.append(UrlUtils.toBaseUrl(folder));\r\n    if (sb.charAt(sb.length() - 1) != '/')\r\n        sb.append('/');\r\n    sb.append(\"job/\");\r\n    final String[] jobNameParts = jobName.split(\"/\");\r\n    for (int i = 0; i < jobNameParts.length; i++) {\r\n        sb.append(EncodingUtils.encode(jobNameParts[i]));\r\n        if (i != jobNameParts.length - 1)\r\n            sb.append('/');\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "net.spy.memcached.protocol.TCPMemcachedNodeImpl.lastReadDelta",
	"Comment": "number of milliseconds since the last read of this node completed.",
	"Method": "long lastReadDelta(){\r\n    return TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - lastReadTimestamp);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryPassages.getStartOffset",
	"Comment": "gets the startoffset.the position of the first character of the extracted passage in the originating field.",
	"Method": "Long getStartOffset(){\r\n    return startOffset;\r\n}"
}, {
	"Path": "org.jblas.util.SanityChecks.checkEigenvalues",
	"Comment": "compute eigenvalues. this is a routine not in atlas, but in the originallapack.",
	"Method": "void checkEigenvalues(){\r\n    DoubleMatrix A = new DoubleMatrix(new double[][] { { 3.0, 2.0, 0.0 }, { 2.0, 3.0, 2.0 }, { 0.0, 2.0, 3.0 } });\r\n    DoubleMatrix E = new DoubleMatrix(3, 1);\r\n    NativeBlas.dsyev('N', 'U', 3, A.data, 0, 3, E.data, 0);\r\n    check(\"checking existence of dsyev...\", true);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogPagination.getNextUrl",
	"Comment": "gets the nexturl.the url that will return the next page of results, if any.",
	"Method": "String getNextUrl(){\r\n    return nextUrl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Notice.getNoticeId",
	"Comment": "gets the noticeid.identifies the notice. many notices might have the same id. this field exists so that user applications canprogrammatically identify a notice and take automatic corrective action.",
	"Method": "String getNoticeId(){\r\n    return noticeId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteIntent",
	"Comment": "delete intent.delete an intent from a workspace.this operation is limited to 2000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteIntent(DeleteIntentOptions deleteIntentOptions){\r\n    Validator.notNull(deleteIntentOptions, \"deleteIntentOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\" };\r\n    String[] pathParameters = { deleteIntentOptions.workspaceId(), deleteIntentOptions.intent() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.IdentifiedLanguage.getConfidence",
	"Comment": "gets the confidence.the confidence score for the identified language.",
	"Method": "Double getConfidence(){\r\n    return confidence;\r\n}"
}, {
	"Path": "io.appium.java_client.ios.ListensToSyslogMessages.addSyslogConnectionListener",
	"Comment": "adds a new log broadcasting connection handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addSyslogConnectionListener(Runnable handler){\r\n    getSyslogClient().addConnectionHandler(handler);\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.XmlUtils.getTextForElements",
	"Comment": "retrieve the text for a group of elements. each text element is an entryin a list.this method is currently optimized for the use case of two elements in a list.",
	"Method": "List<String> getTextForElements(String xmlAsString,String element){\r\n    final List<String> elements = new ArrayList<String>(2);\r\n    final XMLReader reader = getXmlReader();\r\n    final DefaultHandler handler = new DefaultHandler() {\r\n        private boolean foundElement = false;\r\n        private StringBuilder buffer = new StringBuilder();\r\n        public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {\r\n            if (localName.equals(element)) {\r\n                this.foundElement = true;\r\n            }\r\n        }\r\n        public void endElement(final String uri, final String localName, final String qName) throws SAXException {\r\n            if (localName.equals(element)) {\r\n                this.foundElement = false;\r\n                elements.add(this.buffer.toString());\r\n                this.buffer = new StringBuilder();\r\n            }\r\n        }\r\n        public void characters(char[] ch, int start, int length) throws SAXException {\r\n            if (this.foundElement) {\r\n                this.buffer.append(ch, start, length);\r\n            }\r\n        }\r\n    };\r\n    reader.setContentHandler(handler);\r\n    reader.setErrorHandler(handler);\r\n    try {\r\n        reader.parse(new InputSource(new StringReader(xmlAsString)));\r\n    } catch (final Exception e) {\r\n        LOGGER.error(e.getMessage(), e);\r\n        return null;\r\n    }\r\n    return elements;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.XmlUtils.getTextForElements",
	"Comment": "retrieve the text for a group of elements. each text element is an entryin a list.this method is currently optimized for the use case of two elements in a list.",
	"Method": "List<String> getTextForElements(String xmlAsString,String element){\r\n    if (localName.equals(element)) {\r\n        this.foundElement = true;\r\n    }\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.XmlUtils.getTextForElements",
	"Comment": "retrieve the text for a group of elements. each text element is an entryin a list.this method is currently optimized for the use case of two elements in a list.",
	"Method": "List<String> getTextForElements(String xmlAsString,String element){\r\n    if (localName.equals(element)) {\r\n        this.foundElement = false;\r\n        elements.add(this.buffer.toString());\r\n        this.buffer = new StringBuilder();\r\n    }\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.XmlUtils.getTextForElements",
	"Comment": "retrieve the text for a group of elements. each text element is an entryin a list.this method is currently optimized for the use case of two elements in a list.",
	"Method": "List<String> getTextForElements(String xmlAsString,String element){\r\n    if (this.foundElement) {\r\n        this.buffer.append(ch, start, length);\r\n    }\r\n}"
}, {
	"Path": "io.appium.java_client.ios.ListensToSyslogMessages.addSyslogMessagesListener",
	"Comment": "adds a new log messages broadcasting handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addSyslogMessagesListener(Consumer<String> handler){\r\n    getSyslogClient().addMessageHandler(handler);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslationModel.getOwner",
	"Comment": "gets the owner.either an empty string, indicating the model is not a custom model, or the id of the service instance that createdthe model.",
	"Method": "String getOwner(){\r\n    return owner;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.CreateModelOptions.monolingualCorpusFilename",
	"Comment": "gets the monolingualcorpusfilename.the filename for monolingualcorpus.",
	"Method": "Builder monolingualCorpusFilename(String monolingualCorpusFilename,String monolingualCorpusFilename){\r\n    return monolingualCorpusFilename;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslationModel.getBaseModelId",
	"Comment": "gets the basemodelid.model id of the base model that was used to customize the model. if the model is not a custom model, this will bean empty string.",
	"Method": "String getBaseModelId(){\r\n    return baseModelId;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.randn",
	"Comment": "create column vector with normally distributed random values.",
	"Method": "FloatMatrix randn(int rows,int columns,FloatMatrix randn,int len){\r\n    return randn(len, 1);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.listConfigurations",
	"Comment": "list configurations.lists existing configurations for the service instance.",
	"Method": "ServiceCall<ListConfigurationsResponse> listConfigurations(ListConfigurationsOptions listConfigurationsOptions){\r\n    Validator.notNull(listConfigurationsOptions, \"listConfigurationsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"configurations\" };\r\n    String[] pathParameters = { listConfigurationsOptions.environmentId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listConfigurationsOptions.name() != null) {\r\n        builder.query(\"name\", listConfigurationsOptions.name());\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ListConfigurationsResponse.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogExport.getRequestTimestamp",
	"Comment": "gets the requesttimestamp.the timestamp for receipt of the message.",
	"Method": "String getRequestTimestamp(){\r\n    return requestTimestamp;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateWorkspaceOptions.intents",
	"Comment": "gets the intents.an array of objects defining the intents for the workspace.",
	"Method": "Builder intents(List<CreateIntent> intents,List<CreateIntent> intents){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.Voice.getName",
	"Comment": "gets the name.the name of the voice. use this as the voice identifier in all requests.",
	"Method": "String getName(){\r\n    return name;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.ReflectUtils.newInstance",
	"Comment": "creates a new instance of the given class by passing the given argumentsto the constructor.",
	"Method": "T newInstance(String className,Object args,T newInstance,Class<T> clazz,Object args){\r\n    final Class<?>[] argClasses = new Class[args.length];\r\n    for (int i = 0; i < args.length; i++) {\r\n        argClasses[i] = args[i].getClass();\r\n    }\r\n    try {\r\n        return clazz.getConstructor(argClasses).newInstance(args);\r\n    } catch (final Exception e) {\r\n        throw new IllegalArgumentException(\"Error creating new instance of \" + clazz, e);\r\n    }\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.compare",
	"Comment": "compare two matrices. returns true if and only if other is also afloatmatrix which has the same size and the maximal absolutedifference in matrix elements is smaller than the specified tolerance",
	"Method": "boolean compare(Object o,float tolerance){\r\n    if (!(o instanceof FloatMatrix)) {\r\n        return false;\r\n    }\r\n    FloatMatrix other = (FloatMatrix) o;\r\n    if (!sameSize(other)) {\r\n        return false;\r\n    }\r\n    FloatMatrix diff = MatrixFunctions.absi(sub(other));\r\n    return diff.max() / (rows * columns) < tolerance;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageInput.entities",
	"Comment": "gets the entities.entities to use when evaluating the message. include entities from the previous response to continue using thoseentities rather than detecting entities in the new input.",
	"Method": "Builder entities(List<RuntimeEntity> entities,List<RuntimeEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createWorkspace",
	"Comment": "create workspace.create a workspace based on component objects. you must provide workspace components defining the content of thenew workspace.this operation is limited to 30 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Workspace> createWorkspace(CreateWorkspaceOptions createWorkspaceOptions,ServiceCall<Workspace> createWorkspace){\r\n    return createWorkspace(null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryOptions.deduplicateField",
	"Comment": "gets the deduplicatefield.when specified, duplicate results based on the field specified are removed from the returned results. duplicatecomparison is limited to the current query only,is not considered. this parameter is currently betafunctionality.",
	"Method": "Builder deduplicateField(String deduplicateField,String deduplicateField){\r\n    return deduplicateField;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.Classifier.getClassifierId",
	"Comment": "gets the classifierid.unique identifier for this classifier.",
	"Method": "String getClassifierId(){\r\n    return classifierId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.createTokenizationDictionary",
	"Comment": "create tokenization dictionary.upload a custom tokenization dictionary to use with the specified collection.",
	"Method": "ServiceCall<TokenDictStatusResponse> createTokenizationDictionary(CreateTokenizationDictionaryOptions createTokenizationDictionaryOptions){\r\n    Validator.notNull(createTokenizationDictionaryOptions, \"createTokenizationDictionaryOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"word_lists/tokenization_dictionary\" };\r\n    String[] pathParameters = { createTokenizationDictionaryOptions.environmentId(), createTokenizationDictionaryOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (createTokenizationDictionaryOptions.tokenizationRules() != null) {\r\n        contentJson.add(\"tokenization_rules\", GsonSingleton.getGson().toJsonTree(createTokenizationDictionaryOptions.tokenizationRules()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TokenDictStatusResponse.class));\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.cas",
	"Comment": "perform a synchronous cas operation with the default transcoder.",
	"Method": "CASResponse cas(String key,long casId,T value,Transcoder<T> tc,CASResponse cas,String key,long casId,int exp,T value,Transcoder<T> tc,CASResponse cas,String key,long casId,Object value,CASResponse cas,String key,long casId,int exp,Object value){\r\n    return cas(key, casId, exp, value, transcoder);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.IntentExport.getExamples",
	"Comment": "gets the examples.an array of objects describing the user input examples for the intent.",
	"Method": "List<Example> getExamples(){\r\n    return examples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateCredentialsOptions.credentialDetails",
	"Comment": "gets the credentialdetails.object containing details of the stored credentials.obtain credentials for your source from the administrator of the source.",
	"Method": "Builder credentialDetails(CredentialDetails credentialDetails,CredentialDetails credentialDetails){\r\n    return credentialDetails;\r\n}"
}, {
	"Path": "net.spy.memcached.compat.SyncThread.getDistinctResultCount",
	"Comment": "get the distinct result count for the given callable at the givenconcurrency.",
	"Method": "int getDistinctResultCount(int num,Callable<T> callable){\r\n    IdentityHashMap<T, Object> found = new IdentityHashMap<T, Object>();\r\n    Collection<SyncThread<T>> threads = getCompletedThreads(num, callable);\r\n    for (SyncThread<T> s : threads) {\r\n        found.put(s.getResult(), new Object());\r\n    }\r\n    return found.size();\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.flush",
	"Comment": "flush all caches from all servers with a delay of application.",
	"Method": "OperationFuture<Boolean> flush(int delay,OperationFuture<Boolean> flush){\r\n    return flush(-1);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogRuntimeResponseGeneric.getResponseType",
	"Comment": "gets the responsetype.the type of response returned by the dialog node. the specified response type must be supported by the clientapplication or channel. suggestion response type is part of the disambiguation feature, which is only available forpremium users.",
	"Method": "String getResponseType(){\r\n    return responseType;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EntitiesResult.getCount",
	"Comment": "gets the count.how many times the entity was mentioned in the text.",
	"Method": "Long getCount(){\r\n    return count;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceExport.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the workspace.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "org.javers.repository.jql.QueryBuilder.to",
	"Comment": "limits to snapshots created before this date or exactly at this date.",
	"Method": "QueryBuilder to(LocalDateTime to,QueryBuilder to,LocalDate toDate){\r\n    return to(toDate.atTime(MIDNIGHT));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.IamManagerTest.getUserManagedTokenFromConstructor",
	"Comment": "tests that if a user passes in an access token during initial iam setup, that access token is passed backduring later retrieval.",
	"Method": "void getUserManagedTokenFromConstructor(){\r\n    IamOptions options = new IamOptions.Builder().accessToken(ACCESS_TOKEN).url(url).build();\r\n    IamTokenManager manager = new IamTokenManager(options);\r\n    String token = manager.getToken();\r\n    assertEquals(ACCESS_TOKEN, token);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogRuntimeResponseGeneric.getDescription",
	"Comment": "gets the description.the description to show with the the response.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.EnvironmentDocuments.getIndexed",
	"Comment": "gets the indexed.number of documents indexed for the environment.",
	"Method": "Long getIndexed(){\r\n    return indexed;\r\n}"
}, {
	"Path": "org.javers.core.graph.NodeReuser.reverseCdoIdMapKey",
	"Comment": "instanceid for entities,system.identityhashcode for valueobjects",
	"Method": "Object reverseCdoIdMapKey(Cdo cdo){\r\n    if (cdo.getGlobalId() instanceof InstanceId) {\r\n        return cdo.getGlobalId();\r\n    }\r\n    return new SystemIdentityWrapper(cdo.getWrappedCdo().get());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageContextGlobalSystem.getTurnCount",
	"Comment": "gets the turncount.a counter that is automatically incremented with each turn of the conversation. a value of 1 indicates that this isthe the first turn of a new conversation, which can affect the behavior of some skills.",
	"Method": "Long getTurnCount(){\r\n    return turnCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListSynonymsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateDialogNodeOptions.newActions",
	"Comment": "gets the newactions.an array of objects describing any actions to be invoked by the dialog node.",
	"Method": "Builder newActions(List<DialogNodeAction> newActions,List<DialogNodeAction> newActions){\r\n    return newActions;\r\n}"
}, {
	"Path": "org.javers.core.diff.Diff.getObjectsWithChangedProperty",
	"Comment": "selects objectswith changed property for given property name",
	"Method": "List getObjectsWithChangedProperty(String propertyName){\r\n    argumentIsNotNull(propertyName);\r\n    return Lists.transform(getPropertyChanges(propertyName), input -> input.getAffectedObject().<JaversException>orElseThrow(() -> new JaversException(AFFECTED_CDO_IS_NOT_AVAILABLE)));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Environment.getEnvironmentId",
	"Comment": "gets the environmentid.unique identifier for the environment.",
	"Method": "String getEnvironmentId(){\r\n    return environmentId;\r\n}"
}, {
	"Path": "org.javers.common.properties.PropertiesUtil.loadProperties",
	"Comment": "loads a properties file from classpath using default classloader",
	"Method": "void loadProperties(String classpathName,Properties toProps){\r\n    Validate.argumentIsNotNull(classpathName);\r\n    Validate.argumentIsNotNull(toProps);\r\n    InputStream inputStream = PropertiesUtil.class.getClassLoader().getResourceAsStream(classpathName);\r\n    if (inputStream == null) {\r\n        throw new JaversException(CLASSPATH_RESOURCE_NOT_FOUND, classpathName);\r\n    }\r\n    try {\r\n        toProps.load(inputStream);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Pagination.getRefreshUrl",
	"Comment": "gets the refreshurl.the url that will return the same page of results.",
	"Method": "String getRefreshUrl(){\r\n    return refreshUrl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.Corpora.getCorpora",
	"Comment": "gets the corpora.an array of objects that provides information about the corpora for the custom model. the array is empty if thecustom model has no corpora.",
	"Method": "List<Corpus> getCorpora(){\r\n    return corpora;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryNoticesOptions.passagesCharacters",
	"Comment": "gets the passagescharacters.the approximate number of characters that any one passage will have.",
	"Method": "Builder passagesCharacters(long passagesCharacters,Long passagesCharacters){\r\n    return passagesCharacters;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.setOpFact",
	"Comment": "set the operation factory.note that the operation factory is used to also imply the type of nodes tocreate.",
	"Method": "ConnectionFactoryBuilder setOpFact(OperationFactory f){\r\n    opFact = f;\r\n    return this;\r\n}"
}, {
	"Path": "net.spy.memcached.internal.OperationFuture.set",
	"Comment": "set the operation associated with this operationfuture.this is intended for internal use only.",
	"Method": "void set(T o,OperationStatus s){\r\n    objRef.set(o);\r\n    status = s;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageContextGlobalSystem.getTimezone",
	"Comment": "gets the timezone.the user time zone. the assistant uses the time zone to correctly resolve relative time references.",
	"Method": "String getTimezone(){\r\n    return timezone;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslationResult.getCharacterCount",
	"Comment": "gets the charactercount.number of characters in the input text.",
	"Method": "Long getCharacterCount(){\r\n    return characterCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateWorkspaceOptions.name",
	"Comment": "gets the name.the name of the workspace. this string cannot contain carriage return, newline, or tab characters, and it must beno longer than 64 characters.",
	"Method": "Builder name(String name,String name){\r\n    return name;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getUpdated",
	"Comment": "gets the updated.the timestamp for the most recent update to the dialog node.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.CredentialUtils.getJDNIValue",
	"Comment": "builds the lookup name to be searched for in jdniand uses it to call the overloaded jdni method.",
	"Method": "String getJDNIValue(String serviceName,String lookupNameExtension,String getJDNIValue,String lookupName){\r\n    if (!isClassAvailable(\"javax.naming.Context\") || !isClassAvailable(\"javax.naming.InitialContext\")) {\r\n        log.info(\"JNDI string lookups is not available.\");\r\n        return null;\r\n    }\r\n    try {\r\n        if (context == null) {\r\n            context = new InitialContext();\r\n        }\r\n        return (String) context.lookup(lookupName);\r\n    } catch (Exception e) {\r\n        log.fine(\"JNDI \" + lookupName + \" not found.\");\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Notice.getQueryId",
	"Comment": "gets the queryid.unique identifier of the query used for relevance training.",
	"Method": "String getQueryId(){\r\n    return queryId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryRelationsRelationship.getFrequency",
	"Comment": "gets the frequency.the number of times the relationship is mentioned.",
	"Method": "Long getFrequency(){\r\n    return frequency;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogRuntimeResponseGeneric.getOptions",
	"Comment": "gets the options.an array of objects describing the options from which the user can choose.",
	"Method": "List<DialogNodeOutputOptionsElement> getOptions(){\r\n    return options;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNodeOptions.actions",
	"Comment": "gets the actions.an array of objects describing any actions to be invoked by the dialog node.",
	"Method": "Builder actions(List<DialogNodeAction> actions,List<DialogNodeAction> actions){\r\n    return actions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.CreateConfigurationOptions.source",
	"Comment": "gets the source.object containing source parameters for the configuration.",
	"Method": "Builder source(Source source,Source source){\r\n    return source;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.GetCorpusOptions.corpusName",
	"Comment": "gets the corpusname.the name of the corpus for the custom language model.",
	"Method": "Builder corpusName(String corpusName,String corpusName){\r\n    return corpusName;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.HttpServletRequestWrapperFilter.doFilter",
	"Comment": "wraps the httpservletrequest in a wrapper class that delegatesrequest.getremoteuser to the underlying assertion objectstored in the user session.",
	"Method": "void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain){\r\n    final AttributePrincipal principal = retrievePrincipalFromSessionOrRequest(servletRequest);\r\n    filterChain.doFilter(new CasHttpServletRequestWrapper((HttpServletRequest) servletRequest, principal), servletResponse);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListValuesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.assertSameLength",
	"Comment": "throws sizeexception unless matrices have the same length.",
	"Method": "void assertSameLength(DoubleMatrix a){\r\n    if (!sameLength(a)) {\r\n        throw new SizeException(\"Matrices must have same length (is: \" + length + \" and \" + a.length + \")\");\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createDialogNode",
	"Comment": "create dialog node.create a new dialog node.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNode> createDialogNode(CreateDialogNodeOptions createDialogNodeOptions){\r\n    Validator.notNull(createDialogNodeOptions, \"createDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { createDialogNodeOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"dialog_node\", createDialogNodeOptions.dialogNode());\r\n    if (createDialogNodeOptions.description() != null) {\r\n        contentJson.addProperty(\"description\", createDialogNodeOptions.description());\r\n    }\r\n    if (createDialogNodeOptions.conditions() != null) {\r\n        contentJson.addProperty(\"conditions\", createDialogNodeOptions.conditions());\r\n    }\r\n    if (createDialogNodeOptions.parent() != null) {\r\n        contentJson.addProperty(\"parent\", createDialogNodeOptions.parent());\r\n    }\r\n    if (createDialogNodeOptions.previousSibling() != null) {\r\n        contentJson.addProperty(\"previous_sibling\", createDialogNodeOptions.previousSibling());\r\n    }\r\n    if (createDialogNodeOptions.output() != null) {\r\n        contentJson.add(\"output\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.output()));\r\n    }\r\n    if (createDialogNodeOptions.context() != null) {\r\n        contentJson.add(\"context\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.context()));\r\n    }\r\n    if (createDialogNodeOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.metadata()));\r\n    }\r\n    if (createDialogNodeOptions.nextStep() != null) {\r\n        contentJson.add(\"next_step\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.nextStep()));\r\n    }\r\n    if (createDialogNodeOptions.actions() != null) {\r\n        contentJson.add(\"actions\", GsonSingleton.getGson().toJsonTree(createDialogNodeOptions.actions()));\r\n    }\r\n    if (createDialogNodeOptions.title() != null) {\r\n        contentJson.addProperty(\"title\", createDialogNodeOptions.title());\r\n    }\r\n    if (createDialogNodeOptions.nodeType() != null) {\r\n        contentJson.addProperty(\"type\", createDialogNodeOptions.nodeType());\r\n    }\r\n    if (createDialogNodeOptions.eventName() != null) {\r\n        contentJson.addProperty(\"event_name\", createDialogNodeOptions.eventName());\r\n    }\r\n    if (createDialogNodeOptions.variable() != null) {\r\n        contentJson.addProperty(\"variable\", createDialogNodeOptions.variable());\r\n    }\r\n    if (createDialogNodeOptions.digressIn() != null) {\r\n        contentJson.addProperty(\"digress_in\", createDialogNodeOptions.digressIn());\r\n    }\r\n    if (createDialogNodeOptions.digressOut() != null) {\r\n        contentJson.addProperty(\"digress_out\", createDialogNodeOptions.digressOut());\r\n    }\r\n    if (createDialogNodeOptions.digressOutSlots() != null) {\r\n        contentJson.addProperty(\"digress_out_slots\", createDialogNodeOptions.digressOutSlots());\r\n    }\r\n    if (createDialogNodeOptions.userLabel() != null) {\r\n        contentJson.addProperty(\"user_label\", createDialogNodeOptions.userLabel());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNode.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.WordAlternativeResult.getWord",
	"Comment": "gets the word.an alternative hypothesis for a word from the input audio.",
	"Method": "String getWord(){\r\n    return word;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.CreateModelOptions.forcedGlossary",
	"Comment": "gets the forcedglossary.a tmx file with your customizations. the customizations in the file completely overwrite the domain translatondata, including high frequency or high confidence phrase translations. you can upload only one glossary with a filesize less than 10 mb per call. a forced glossary should contain single words or short phrases.",
	"Method": "Builder forcedGlossary(InputStream forcedGlossary,Builder forcedGlossary,File forcedGlossary,InputStream forcedGlossary){\r\n    return forcedGlossary;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.rbac.DefaultRoleManager.getRoles",
	"Comment": "getroles gets the roles that a subject inherits.domain is a prefix to the roles.",
	"Method": "List<String> getRoles(String name,String domain,List<String> getRoles){\r\n    if (domain.length == 1) {\r\n        name = domain[0] + \"::\" + name;\r\n    } else if (domain.length > 1) {\r\n        throw new Error(\"error: domain should be 1 parameter\");\r\n    }\r\n    if (!hasRole(name)) {\r\n        throw new Error(\"error: name does not exist\");\r\n    }\r\n    List<String> roles = createRole(name).getRoles();\r\n    if (domain.length == 1) {\r\n        for (int i = 0; i < roles.size(); i++) {\r\n            roles.set(i, roles.get(i).substring(domain[0].length() + 2, roles.get(i).length()));\r\n        }\r\n    }\r\n    return roles;\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.RequestMessage.setFlags",
	"Comment": "sets the flags for the tap stream. these flags decide what kind of tapstream will be received.",
	"Method": "void setFlags(TapRequestFlag f){\r\n    if (!flagList.contains(f)) {\r\n        if (!hasFlags) {\r\n            hasFlags = true;\r\n            extralength += 4;\r\n            totalbody += 4;\r\n        }\r\n        if (f.equals(TapRequestFlag.BACKFILL)) {\r\n            hasBackfill = true;\r\n            totalbody += 8;\r\n        }\r\n        if (f.equals(TapRequestFlag.LIST_VBUCKETS) || f.equals(TapRequestFlag.TAKEOVER_VBUCKETS)) {\r\n            hasVBucketList = true;\r\n            totalbody += 2;\r\n        }\r\n        if (f.equals(TapRequestFlag.CHECKPOINT)) {\r\n            hasVBucketCheckpoints = true;\r\n            totalbody += 2;\r\n        }\r\n        flagList.add(f);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Workspace.getSystemSettings",
	"Comment": "gets the systemsettings.global settings for the workspace.",
	"Method": "WorkspaceSystemSettings getSystemSettings(){\r\n    return systemSettings;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateDialogNode",
	"Comment": "update dialog node.update an existing dialog node with new or modified data.this operation is limited to 500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<DialogNode> updateDialogNode(UpdateDialogNodeOptions updateDialogNodeOptions){\r\n    Validator.notNull(updateDialogNodeOptions, \"updateDialogNodeOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"dialog_nodes\" };\r\n    String[] pathParameters = { updateDialogNodeOptions.workspaceId(), updateDialogNodeOptions.dialogNode() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateDialogNodeOptions.nodeType() != null) {\r\n        contentJson.addProperty(\"type\", updateDialogNodeOptions.nodeType());\r\n    }\r\n    if (updateDialogNodeOptions.newActions() != null) {\r\n        contentJson.add(\"actions\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newActions()));\r\n    }\r\n    if (updateDialogNodeOptions.newConditions() != null) {\r\n        contentJson.addProperty(\"conditions\", updateDialogNodeOptions.newConditions());\r\n    }\r\n    if (updateDialogNodeOptions.newContext() != null) {\r\n        contentJson.add(\"context\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newContext()));\r\n    }\r\n    if (updateDialogNodeOptions.newPreviousSibling() != null) {\r\n        contentJson.addProperty(\"previous_sibling\", updateDialogNodeOptions.newPreviousSibling());\r\n    }\r\n    if (updateDialogNodeOptions.newVariable() != null) {\r\n        contentJson.addProperty(\"variable\", updateDialogNodeOptions.newVariable());\r\n    }\r\n    if (updateDialogNodeOptions.newUserLabel() != null) {\r\n        contentJson.addProperty(\"user_label\", updateDialogNodeOptions.newUserLabel());\r\n    }\r\n    if (updateDialogNodeOptions.newMetadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newMetadata()));\r\n    }\r\n    if (updateDialogNodeOptions.newTitle() != null) {\r\n        contentJson.addProperty(\"title\", updateDialogNodeOptions.newTitle());\r\n    }\r\n    if (updateDialogNodeOptions.newDescription() != null) {\r\n        contentJson.addProperty(\"description\", updateDialogNodeOptions.newDescription());\r\n    }\r\n    if (updateDialogNodeOptions.newDigressOut() != null) {\r\n        contentJson.addProperty(\"digress_out\", updateDialogNodeOptions.newDigressOut());\r\n    }\r\n    if (updateDialogNodeOptions.newEventName() != null) {\r\n        contentJson.addProperty(\"event_name\", updateDialogNodeOptions.newEventName());\r\n    }\r\n    if (updateDialogNodeOptions.newDigressOutSlots() != null) {\r\n        contentJson.addProperty(\"digress_out_slots\", updateDialogNodeOptions.newDigressOutSlots());\r\n    }\r\n    if (updateDialogNodeOptions.newNextStep() != null) {\r\n        contentJson.add(\"next_step\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newNextStep()));\r\n    }\r\n    if (updateDialogNodeOptions.newDigressIn() != null) {\r\n        contentJson.addProperty(\"digress_in\", updateDialogNodeOptions.newDigressIn());\r\n    }\r\n    if (updateDialogNodeOptions.newOutput() != null) {\r\n        contentJson.add(\"output\", GsonSingleton.getGson().toJsonTree(updateDialogNodeOptions.newOutput()));\r\n    }\r\n    if (updateDialogNodeOptions.newParent() != null) {\r\n        contentJson.addProperty(\"parent\", updateDialogNodeOptions.newParent());\r\n    }\r\n    if (updateDialogNodeOptions.newDialogNode() != null) {\r\n        contentJson.addProperty(\"dialog_node\", updateDialogNodeOptions.newDialogNode());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(DialogNode.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogSuggestionValue.getIntents",
	"Comment": "gets the intents.an array of intents to be sent along with the user input.",
	"Method": "List<RuntimeIntent> getIntents(){\r\n    return intents;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListCounterexamplesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.service.security.IamTokenManager.callIamApi",
	"Comment": "executes call to iam api and returns iamtoken object representing the response.",
	"Method": "IamToken callIamApi(Request request){\r\n    Call call = HttpClientSingleton.getInstance().createHttpClient().newCall(request);\r\n    ResponseConverter<IamToken> converter = ResponseConverterUtils.getObject(IamToken.class);\r\n    try {\r\n        okhttp3.Response response = call.execute();\r\n        return converter.convert(response);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.SymbExToSubQuery.handlePossibleNavigationalLink",
	"Comment": "if unknownval is not a handled navigational link, null will bereturned. otherwise, a query representing the link will be returned",
	"Method": "JPQLQuery<?> handlePossibleNavigationalLink(TypedValue unknownVal,boolean expectingPluralLink,SymbExPassDown in){\r\n    if (unknownVal instanceof MethodCallValue.VirtualMethodCallValue) {\r\n        MethodCallValue.VirtualMethodCallValue val = (MethodCallValue.VirtualMethodCallValue) unknownVal;\r\n        MethodSignature sig = val.getSignature();\r\n        if ((expectingPluralLink && config.metamodel.isPluralAttributeLinkMethod(sig)) || (!expectingPluralLink && config.metamodel.isSingularAttributeFieldMethod(sig) && config.metamodel.isFieldMethodAssociationType(sig))) {\r\n            String linkName = expectingPluralLink ? config.metamodel.nLinkMethodToLinkName(sig) : config.metamodel.fieldMethodToFieldName(sig);\r\n            SymbExToColumns translator = config.newSymbExToColumns(argHandler);\r\n            SymbExPassDown passdown = SymbExPassDown.with(val, false);\r\n            ColumnExpressions<?> nLinkBase = val.base.visit(translator, passdown);\r\n            if (nLinkBase.isSingleColumn()) {\r\n                Expression expr = nLinkBase.getOnlyColumn();\r\n                if (!(expr instanceof FromAliasExpression || expr instanceof ReadFieldExpression))\r\n                    return null;\r\n            }\r\n            SelectFromWhere<?> query = new SelectFromWhere();\r\n            From from = From.forNavigationalLinks(new ReadFieldExpression(nLinkBase.getOnlyColumn(), linkName));\r\n            query.cols = ColumnExpressions.singleColumn(new SimpleRowReader(), new FromAliasExpression(from));\r\n            query.froms.add(from);\r\n            return query;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.DetectedFaces.getWarnings",
	"Comment": "gets the warnings.information about what might cause less than optimal output. for example, a request sent with a corrupt .zip fileand a list of image urls will still complete, but does not return the expected output. not returned when there isno warning.",
	"Method": "List<WarningInfo> getWarnings(){\r\n    return warnings;\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.GSpeechDuplex.downChannel",
	"Comment": "this code opens a new thread that connects to the downstream url. due to threading,\tthe best way to handle this is through the use of listeners.",
	"Method": "Thread downChannel(String urlStr){\r\n    final String url = urlStr;\r\n    Thread downChannelThread = new Thread(\"Downstream Thread\") {\r\n        public void run() {\r\n            Scanner inStream = openHttpsConnection(url);\r\n            if (inStream == null) {\r\n                System.out.println(\"Error has occured\");\r\n                return;\r\n            }\r\n            String response;\r\n            while (inStream.hasNext() && (response = inStream.nextLine()) != null) {\r\n                if (response.length() > 17) {\r\n                    GoogleResponse gr = new GoogleResponse();\r\n                    parseResponse(response, gr);\r\n                    fireResponseEvent(gr);\r\n                }\r\n            }\r\n            inStream.close();\r\n            System.out.println(\"Finished write on down stream...\");\r\n        }\r\n    };\r\n    downChannelThread.start();\r\n    return downChannelThread;\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.GSpeechDuplex.downChannel",
	"Comment": "this code opens a new thread that connects to the downstream url. due to threading,\tthe best way to handle this is through the use of listeners.",
	"Method": "Thread downChannel(String urlStr){\r\n    Scanner inStream = openHttpsConnection(url);\r\n    if (inStream == null) {\r\n        System.out.println(\"Error has occured\");\r\n        return;\r\n    }\r\n    String response;\r\n    while (inStream.hasNext() && (response = inStream.nextLine()) != null) {\r\n        if (response.length() > 17) {\r\n            GoogleResponse gr = new GoogleResponse();\r\n            parseResponse(response, gr);\r\n            fireResponseEvent(gr);\r\n        }\r\n    }\r\n    inStream.close();\r\n    System.out.println(\"Finished write on down stream...\");\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.in",
	"Comment": "reads in a matrix from the given data stream. notethat the old data of this matrix will be discarded.",
	"Method": "void in(DataInputStream dis){\r\n    if (!dis.readUTF().equals(\"float\")) {\r\n        throw new IllegalStateException(\"The matrix in the specified file is not of the correct type!\");\r\n    }\r\n    this.columns = dis.readInt();\r\n    this.rows = dis.readInt();\r\n    final int MAX = dis.readInt();\r\n    data = new float[MAX];\r\n    for (int i = 0; i < MAX; i++) {\r\n        data[i] = dis.readFloat();\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.digressOut",
	"Comment": "gets the digressout.whether this dialog node can be returned to after a digression.",
	"Method": "Builder digressOut(String digressOut,String digressOut){\r\n    return digressOut;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.URIBuilder.setUserInfo",
	"Comment": "sets uri user info as a combination of username and password. these values are expected tobe unescaped and may contain non ascii characters.",
	"Method": "URIBuilder setUserInfo(String userInfo,URIBuilder setUserInfo,String username,String password){\r\n    return setUserInfo(username + ':' + password);\r\n}"
}, {
	"Path": "io.appium.java_client.ScreenshotState.verifyNotChanged",
	"Comment": "verifies whether the state of the screenshot provided by stateprovider lambda functionis not changed within the given timeout.",
	"Method": "ScreenshotState verifyNotChanged(Duration timeout,double minScore){\r\n    return checkState((x) -> x >= minScore, timeout);\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.tapDump",
	"Comment": "specifies a tap stream that will take a snapshot of items in memcached andsend them through a tap stream.",
	"Method": "TapStream tapDump(String id){\r\n    final TapConnectionProvider conn = new TapConnectionProvider(addrs);\r\n    final TapStream ts = new TapStream();\r\n    conn.broadcastOp(new BroadcastOpFactory() {\r\n        public Operation newOp(final MemcachedNode n, final CountDownLatch latch) {\r\n            Operation op = conn.getOpFactory().tapDump(id, new TapOperation.Callback() {\r\n                public void receivedStatus(OperationStatus status) {\r\n                }\r\n                public void gotData(ResponseMessage tapMessage) {\r\n                    rqueue.add(tapMessage);\r\n                    messagesRead++;\r\n                }\r\n                public void gotAck(MemcachedNode node, TapOpcode opcode, int opaque) {\r\n                    rqueue.add(new TapAck(conn, node, opcode, opaque, this));\r\n                }\r\n                public void complete() {\r\n                    latch.countDown();\r\n                }\r\n            });\r\n            ts.addOp((TapOperation) op);\r\n            return op;\r\n        }\r\n    });\r\n    synchronized (omap) {\r\n        omap.put(ts, conn);\r\n    }\r\n    return ts;\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.tapDump",
	"Comment": "specifies a tap stream that will take a snapshot of items in memcached andsend them through a tap stream.",
	"Method": "TapStream tapDump(String id){\r\n    Operation op = conn.getOpFactory().tapDump(id, new TapOperation.Callback() {\r\n        public void receivedStatus(OperationStatus status) {\r\n        }\r\n        public void gotData(ResponseMessage tapMessage) {\r\n            rqueue.add(tapMessage);\r\n            messagesRead++;\r\n        }\r\n        public void gotAck(MemcachedNode node, TapOpcode opcode, int opaque) {\r\n            rqueue.add(new TapAck(conn, node, opcode, opaque, this));\r\n        }\r\n        public void complete() {\r\n            latch.countDown();\r\n        }\r\n    });\r\n    ts.addOp((TapOperation) op);\r\n    return op;\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.tapDump",
	"Comment": "specifies a tap stream that will take a snapshot of items in memcached andsend them through a tap stream.",
	"Method": "TapStream tapDump(String id){\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.tapDump",
	"Comment": "specifies a tap stream that will take a snapshot of items in memcached andsend them through a tap stream.",
	"Method": "TapStream tapDump(String id){\r\n    rqueue.add(tapMessage);\r\n    messagesRead++;\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.tapDump",
	"Comment": "specifies a tap stream that will take a snapshot of items in memcached andsend them through a tap stream.",
	"Method": "TapStream tapDump(String id){\r\n    rqueue.add(new TapAck(conn, node, opcode, opaque, this));\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.tapDump",
	"Comment": "specifies a tap stream that will take a snapshot of items in memcached andsend them through a tap stream.",
	"Method": "TapStream tapDump(String id){\r\n    latch.countDown();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.testConfigurationInEnvironment",
	"Comment": "test configuration.runs a sample document through the default or your configuration and returns diagnostic information designed tohelp you understand how the document was processed. the document is not added to the index.",
	"Method": "ServiceCall<TestDocument> testConfigurationInEnvironment(TestConfigurationInEnvironmentOptions testConfigurationInEnvironmentOptions){\r\n    Validator.notNull(testConfigurationInEnvironmentOptions, \"testConfigurationInEnvironmentOptions cannot be null\");\r\n    Validator.isTrue((testConfigurationInEnvironmentOptions.configuration() != null) || (testConfigurationInEnvironmentOptions.file() != null) || (testConfigurationInEnvironmentOptions.metadata() != null), \"At least one of configuration, file, or metadata must be supplied.\");\r\n    String[] pathSegments = { \"v1/environments\", \"preview\" };\r\n    String[] pathParameters = { testConfigurationInEnvironmentOptions.environmentId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (testConfigurationInEnvironmentOptions.step() != null) {\r\n        builder.query(\"step\", testConfigurationInEnvironmentOptions.step());\r\n    }\r\n    if (testConfigurationInEnvironmentOptions.configurationId() != null) {\r\n        builder.query(\"configuration_id\", testConfigurationInEnvironmentOptions.configurationId());\r\n    }\r\n    MultipartBody.Builder multipartBuilder = new MultipartBody.Builder();\r\n    multipartBuilder.setType(MultipartBody.FORM);\r\n    if (testConfigurationInEnvironmentOptions.configuration() != null) {\r\n        multipartBuilder.addFormDataPart(\"configuration\", testConfigurationInEnvironmentOptions.configuration());\r\n    }\r\n    if (testConfigurationInEnvironmentOptions.file() != null) {\r\n        RequestBody fileBody = RequestUtils.inputStreamBody(testConfigurationInEnvironmentOptions.file(), testConfigurationInEnvironmentOptions.fileContentType());\r\n        multipartBuilder.addFormDataPart(\"file\", testConfigurationInEnvironmentOptions.filename(), fileBody);\r\n    }\r\n    if (testConfigurationInEnvironmentOptions.metadata() != null) {\r\n        multipartBuilder.addFormDataPart(\"metadata\", testConfigurationInEnvironmentOptions.metadata());\r\n    }\r\n    builder.body(multipartBuilder.build());\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TestDocument.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListIntentsOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListIntentsOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Synonym.getUpdated",
	"Comment": "gets the updated.the timestamp for the most recent update to the synonym.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.ContentItem.reply",
	"Comment": "gets the reply.indicates whether this content item is a reply to another content item.",
	"Method": "Builder reply(Boolean reply,Boolean reply){\r\n    return reply;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.deleteExample",
	"Comment": "delete user input example.delete a user input example from an intent.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteExample(DeleteExampleOptions deleteExampleOptions){\r\n    Validator.notNull(deleteExampleOptions, \"deleteExampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"intents\", \"examples\" };\r\n    String[] pathParameters = { deleteExampleOptions.workspaceId(), deleteExampleOptions.intent(), deleteExampleOptions.text() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "org.casbin.jcasbin.rbac.DefaultRoleManager.clear",
	"Comment": "clear clears all stored data and resets the role manager to the initial state.",
	"Method": "void clear(){\r\n    allRoles.clear();\r\n}"
}, {
	"Path": "org.jinq.jpa.JinqJPAStreamProvider.streamAll",
	"Comment": "returns a stream of all the entities of a particular type in a database.",
	"Method": "JPAJinqStream<U> streamAll(EntityManager em,Class<U> entity){\r\n    String entityName = metamodel.entityNameFromClass(entity);\r\n    Optional<JPQLQuery<?>> cachedQuery = hints.useCaching ? cachedQueries.findCachedFindAllEntities(entityName) : null;\r\n    if (cachedQuery == null) {\r\n        JPQLQuery<U> query = JPQLQuery.findAllEntities(entityName);\r\n        cachedQuery = Optional.of(query);\r\n        if (hints.useCaching)\r\n            cachedQuery = cachedQueries.cacheFindAllEntities(entityName, cachedQuery);\r\n    }\r\n    JPQLQuery<U> query = (JPQLQuery<U>) cachedQuery.get();\r\n    return new QueryJPAJinqStream(JPAQueryComposer.findAllEntities(metamodel, cachedQueries, lambdaAnalyzer, jpqlQueryTransformConfigurationFactory, em, hints, query), new InQueryStreamSource() {\r\n        @Override\r\n        public <S> JinqStream<S> stream(Class<S> entityClass) {\r\n            return streamAll(em, entityClass);\r\n        }\r\n    });\r\n}"
}, {
	"Path": "org.jinq.jpa.JinqJPAStreamProvider.streamAll",
	"Comment": "returns a stream of all the entities of a particular type in a database.",
	"Method": "JPAJinqStream<U> streamAll(EntityManager em,Class<U> entity){\r\n    return streamAll(em, entityClass);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogRuntimeResponseGeneric.getDescription",
	"Comment": "gets the description.the description to show with the the response.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceSystemSettingsDisambiguation.isEnabled",
	"Comment": "gets the enabled.whether the disambiguation feature is enabled for the workspace.",
	"Method": "Boolean isEnabled(){\r\n    return enabled;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.listTrainingData",
	"Comment": "list training data.lists the training data for the specified collection.",
	"Method": "ServiceCall<TrainingDataSet> listTrainingData(ListTrainingDataOptions listTrainingDataOptions){\r\n    Validator.notNull(listTrainingDataOptions, \"listTrainingDataOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\" };\r\n    String[] pathParameters = { listTrainingDataOptions.environmentId(), listTrainingDataOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TrainingDataSet.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Collection.getTrainingStatus",
	"Comment": "gets the trainingstatus.provides information about the status of relevance training for collection.",
	"Method": "TrainingStatus getTrainingStatus(){\r\n    return trainingStatus;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListExamplesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByIosUIAutomation.findElementByIosUIAutomation",
	"Comment": "method performs the searching for a single element by ios uiautomation selectorand value of the given selector.",
	"Method": "T findElementByIosUIAutomation(String using){\r\n    return findElement(MobileSelector.IOS_UI_AUTOMATION.toString(), using);\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.assertMultipliesWith",
	"Comment": "throws sizeexception unless matrices can be multiplied with one another.",
	"Method": "void assertMultipliesWith(DoubleMatrix a){\r\n    if (!multipliesWith(a)) {\r\n        throw new SizeException(\"Number of columns of left matrix must be equal to number of rows of right matrix.\");\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.updateWorkspace",
	"Comment": "update workspace.update an existing workspace with new or modified data. you must provide component objects defining the content ofthe updated workspace.this operation is limited to 30 request per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Workspace> updateWorkspace(UpdateWorkspaceOptions updateWorkspaceOptions){\r\n    Validator.notNull(updateWorkspaceOptions, \"updateWorkspaceOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\" };\r\n    String[] pathParameters = { updateWorkspaceOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (updateWorkspaceOptions.append() != null) {\r\n        builder.query(\"append\", String.valueOf(updateWorkspaceOptions.append()));\r\n    }\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateWorkspaceOptions.name() != null) {\r\n        contentJson.addProperty(\"name\", updateWorkspaceOptions.name());\r\n    }\r\n    if (updateWorkspaceOptions.description() != null) {\r\n        contentJson.addProperty(\"description\", updateWorkspaceOptions.description());\r\n    }\r\n    if (updateWorkspaceOptions.language() != null) {\r\n        contentJson.addProperty(\"language\", updateWorkspaceOptions.language());\r\n    }\r\n    if (updateWorkspaceOptions.intents() != null) {\r\n        contentJson.add(\"intents\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.intents()));\r\n    }\r\n    if (updateWorkspaceOptions.entities() != null) {\r\n        contentJson.add(\"entities\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.entities()));\r\n    }\r\n    if (updateWorkspaceOptions.dialogNodes() != null) {\r\n        contentJson.add(\"dialog_nodes\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.dialogNodes()));\r\n    }\r\n    if (updateWorkspaceOptions.counterexamples() != null) {\r\n        contentJson.add(\"counterexamples\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.counterexamples()));\r\n    }\r\n    if (updateWorkspaceOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.metadata()));\r\n    }\r\n    if (updateWorkspaceOptions.learningOptOut() != null) {\r\n        contentJson.addProperty(\"learning_opt_out\", updateWorkspaceOptions.learningOptOut());\r\n    }\r\n    if (updateWorkspaceOptions.systemSettings() != null) {\r\n        contentJson.add(\"system_settings\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.systemSettings()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Workspace.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.listCounterexamples",
	"Comment": "list counterexamples.list the counterexamples for a workspace. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<CounterexampleCollection> listCounterexamples(ListCounterexamplesOptions listCounterexamplesOptions){\r\n    Validator.notNull(listCounterexamplesOptions, \"listCounterexamplesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { listCounterexamplesOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listCounterexamplesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listCounterexamplesOptions.pageLimit()));\r\n    }\r\n    if (listCounterexamplesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listCounterexamplesOptions.includeCount()));\r\n    }\r\n    if (listCounterexamplesOptions.sort() != null) {\r\n        builder.query(\"sort\", listCounterexamplesOptions.sort());\r\n    }\r\n    if (listCounterexamplesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listCounterexamplesOptions.cursor());\r\n    }\r\n    if (listCounterexamplesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listCounterexamplesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(CounterexampleCollection.class));\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredPolicy",
	"Comment": "removefilteredpolicy removes an authorization rule from the current policy, field filters can be specified.",
	"Method": "boolean removeFilteredPolicy(int fieldIndex,String fieldValues){\r\n    return removeFilteredNamedPolicy(\"p\", fieldIndex, fieldValues);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.EntityExport.isFuzzyMatch",
	"Comment": "gets the fuzzymatch.whether fuzzy matching is used for the entity.",
	"Method": "Boolean isFuzzyMatch(){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogExport.getResponseTimestamp",
	"Comment": "gets the responsetimestamp.the timestamp for the system response to the message.",
	"Method": "String getResponseTimestamp(){\r\n    return responseTimestamp;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DeleteUserDataOptions.customerId",
	"Comment": "gets the customerid.the customer id for which all data is to be deleted.",
	"Method": "Builder customerId(String customerId,String customerId){\r\n    return customerId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Enrichment.isIgnoreDownstreamErrors",
	"Comment": "gets the ignoredownstreamerrors.if true, then most errors generated during the enrichment process will be treated as warnings and will not causethe document to fail processing.",
	"Method": "Boolean isIgnoreDownstreamErrors(){\r\n    return ignoreDownstreamErrors;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalysisResults.getEmotion",
	"Comment": "gets the emotion.the anger, disgust, fear, joy, or sadness conveyed by the content.",
	"Method": "EmotionResult getEmotion(){\r\n    return emotion;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.StringHelper.toInputStream",
	"Comment": "returns an inputstream that can be used to read the bytes of the specified string.",
	"Method": "InputStream toInputStream(String s){\r\n    return new ByteArrayInputStream(s.getBytes());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateEntity.description",
	"Comment": "gets the description.the description of the entity. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "io.appium.java_client.ios.IOSStartScreenRecordingOptions.withFps",
	"Comment": "the frames per second rate of the recorded video. defaults to 10.",
	"Method": "IOSStartScreenRecordingOptions withFps(int fps){\r\n    this.fps = fps;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceCollection.getPagination",
	"Comment": "gets the pagination.an object defining the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EmotionScores.getSadness",
	"Comment": "gets the sadness.sadness score from 0 to 1. a higher score means that the text is more likely to convey sadness.",
	"Method": "Double getSadness(){\r\n    return sadness;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceSystemSettingsDisambiguation.getSensitivity",
	"Comment": "gets the sensitivity.the sensitivity of the disambiguation feature to intent detection conflicts. set toif you want thedisambiguation feature to be triggered more often. this can be useful for testing or demonstration purposes.",
	"Method": "String getSensitivity(){\r\n    return sensitivity;\r\n}"
}, {
	"Path": "jssc.SerialPort.setParams",
	"Comment": "setting the parameters of port. rts and dtr lines are enabled by default",
	"Method": "boolean setParams(int baudRate,int dataBits,int stopBits,int parity,boolean setParams,int baudRate,int dataBits,int stopBits,int parity,boolean setRTS,boolean setDTR){\r\n    checkPortOpened(\"setParams()\");\r\n    if (stopBits == 1) {\r\n        stopBits = 0;\r\n    } else if (stopBits == 3) {\r\n        stopBits = 1;\r\n    }\r\n    int flags = 0;\r\n    if (System.getProperty(SerialNativeInterface.PROPERTY_JSSC_IGNPAR) != null || System.getProperty(SerialNativeInterface.PROPERTY_JSSC_IGNPAR.toLowerCase()) != null) {\r\n        flags |= PARAMS_FLAG_IGNPAR;\r\n    }\r\n    if (System.getProperty(SerialNativeInterface.PROPERTY_JSSC_PARMRK) != null || System.getProperty(SerialNativeInterface.PROPERTY_JSSC_PARMRK.toLowerCase()) != null) {\r\n        flags |= PARAMS_FLAG_PARMRK;\r\n    }\r\n    return serialInterface.setParams(portHandle, baudRate, dataBits, stopBits, parity, setRTS, setDTR, flags);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.UpdateCredentialsOptions.credentialId",
	"Comment": "gets the credentialid.the unique identifier for a set of source credentials.",
	"Method": "Builder credentialId(String credentialId,String credentialId){\r\n    return credentialId;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.logspace",
	"Comment": "construct a column vector whose entries are logarithmically spaced points from10^lower to 10^upper using the specified number of steps",
	"Method": "FloatMatrix logspace(float lower,float upper,int size){\r\n    FloatMatrix result = new FloatMatrix(size);\r\n    for (int i = 0; i < size; i++) {\r\n        float t = (float) i / (size - 1);\r\n        float e = lower * (1 - t) + t * upper;\r\n        result.put(i, (float) Math.pow(10.0f, e));\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "io.appium.java_client.imagecomparison.BaseComparisonOptions.build",
	"Comment": "builds a map, which is ready to be passed to the subordinatedappium api.",
	"Method": "Map<String, Object> build(){\r\n    final ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\r\n    ofNullable(visualize).map(x -> builder.put(\"visualize\", x));\r\n    return builder.build();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslateOptions.target",
	"Comment": "gets the target.language code of the translation target language. use with source as an alternative way to select a translationmodel.",
	"Method": "Builder target(String target,String target){\r\n    return target;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.conditions",
	"Comment": "gets the conditions.the condition that will trigger the dialog node. this string cannot contain carriage return, newline, or tabcharacters, and it must be no longer than 2048 characters.",
	"Method": "Builder conditions(String conditions,String conditions){\r\n    return conditions;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.VoiceModel.getOwner",
	"Comment": "gets the owner.the guid of the service credentials for the instance of the service that owns the custom voice model.",
	"Method": "String getOwner(){\r\n    return owner;\r\n}"
}, {
	"Path": "de.danielbechler.diff.node.DiffNode.getChild",
	"Comment": "retrieve a child that matches the given path element relative to this node.",
	"Method": "DiffNode getChild(String propertyName,DiffNode getChild,ElementSelector elementSelector,DiffNode getChild,NodePath nodePath,DiffNode getChild,List<ElementSelector> selectors){\r\n    Assert.notEmpty(selectors, \"selectors\");\r\n    final ElementSelector selector = selectors.get(0);\r\n    if (selectors.size() == 1) {\r\n        if (selector == RootElementSelector.getInstance()) {\r\n            return isRootNode() ? this : null;\r\n        } else {\r\n            return getChild(selector);\r\n        }\r\n    } else if (selectors.size() > 1) {\r\n        final DiffNode child;\r\n        if (selector == RootElementSelector.getInstance()) {\r\n            child = isRootNode() ? this : null;\r\n        } else {\r\n            child = getChild(selector);\r\n        }\r\n        if (child != null) {\r\n            return child.getChild(selectors.subList(1, selectors.size()));\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.ListModelsOptions.target",
	"Comment": "gets the target.specify a language code to filter results by target language.",
	"Method": "Builder target(String target,String target){\r\n    return target;\r\n}"
}, {
	"Path": "io.appium.java_client.pagefactory.bys.ContentMappedBy.useContent",
	"Comment": "this method sets required content type for the further searching.",
	"Method": "By useContent(ContentType type){\r\n    checkNotNull(type);\r\n    currentContent = type;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listCounterexamples",
	"Comment": "list counterexamples.list the counterexamples for a workspace. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 2500 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<CounterexampleCollection> listCounterexamples(ListCounterexamplesOptions listCounterexamplesOptions){\r\n    Validator.notNull(listCounterexamplesOptions, \"listCounterexamplesOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { listCounterexamplesOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listCounterexamplesOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listCounterexamplesOptions.pageLimit()));\r\n    }\r\n    if (listCounterexamplesOptions.includeCount() != null) {\r\n        builder.query(\"include_count\", String.valueOf(listCounterexamplesOptions.includeCount()));\r\n    }\r\n    if (listCounterexamplesOptions.sort() != null) {\r\n        builder.query(\"sort\", listCounterexamplesOptions.sort());\r\n    }\r\n    if (listCounterexamplesOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listCounterexamplesOptions.cursor());\r\n    }\r\n    if (listCounterexamplesOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listCounterexamplesOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(CounterexampleCollection.class));\r\n}"
}, {
	"Path": "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap",
	"Comment": "adds the pgturl to the list of parameters to pass to the cas server.",
	"Method": "void populateUrlAttributeMap(Map<String, String> urlParameters){\r\n    urlParameters.put(\"pgtUrl\", this.proxyCallbackUrl);\r\n}"
}, {
	"Path": "com.darkprograms.speech.microphone.MicrophoneAnalyzer.getFrequency",
	"Comment": "calculates the fundamental frequency. in other words, it calculates pitch,\texcept pitch is far more subjective and subtle. also note, that readings may occasionally,\tbe in error due to the complex nature of sound. this feature is in beta",
	"Method": "int getFrequency(int getFrequency,int numOfBytes,int getFrequency,byte[] bytes){\r\n    double[] audioData = this.bytesToDoubleArray(bytes);\r\n    audioData = applyHanningWindow(audioData);\r\n    Complex[] complex = new Complex[audioData.length];\r\n    for (int i = 0; i < complex.length; i++) {\r\n        complex[i] = new Complex(audioData[i], 0);\r\n    }\r\n    Complex[] fftTransformed = FFT.fft(complex);\r\n    return this.calculateFundamentalFrequency(fftTransformed, 4);\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.GoogleResponse.getResponse",
	"Comment": "gets the response text of what was said in the submitted audio to google",
	"Method": "String getResponse(){\r\n    return response;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListEntitiesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.darkprograms.speech.translator.GoogleTranslate.TKK",
	"Comment": "this function generates the int array for translation acting as the seed for the hashing algorithm.",
	"Method": "int[] TKK(){\r\n    int[] tkk = { 0x6337E, 0x217A58DC + 0x5AF91132 };\r\n    return tkk;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.ReflectUtils.getField",
	"Comment": "gets the value of the given declared field on the target object or any of its superclasses.",
	"Method": "Object getField(String fieldName,Object target){\r\n    Class<?> clazz = target.getClass();\r\n    Field field = null;\r\n    do {\r\n        try {\r\n            field = clazz.getDeclaredField(fieldName);\r\n        } catch (NoSuchFieldException e) {\r\n            clazz = clazz.getSuperclass();\r\n        }\r\n    } while (field == null && clazz != null);\r\n    if (field == null) {\r\n        throw new IllegalArgumentException(fieldName + \" does not exist on \" + target);\r\n    }\r\n    try {\r\n        if (!field.isAccessible()) {\r\n            field.setAccessible(true);\r\n        }\r\n        return field.get(target);\r\n    } catch (Exception e) {\r\n        throw new IllegalArgumentException(\"Error getting field \" + fieldName, e);\r\n    }\r\n}"
}, {
	"Path": "org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter.getTicketValidator",
	"Comment": "constructs a cas20serviceticketvalidator or a cas20proxyticketvalidator based on supplied parameters.",
	"Method": "TicketValidator getTicketValidator(FilterConfig filterConfig){\r\n    final boolean allowAnyProxy = getBoolean(ConfigurationKeys.ACCEPT_ANY_PROXY);\r\n    final String allowedProxyChains = getString(ConfigurationKeys.ALLOWED_PROXY_CHAINS);\r\n    final String casServerUrlPrefix = getString(ConfigurationKeys.CAS_SERVER_URL_PREFIX);\r\n    final Class<? extends Cas20ServiceTicketValidator> ticketValidatorClass = getClass(ConfigurationKeys.TICKET_VALIDATOR_CLASS);\r\n    final Cas20ServiceTicketValidator validator;\r\n    if (allowAnyProxy || CommonUtils.isNotBlank(allowedProxyChains)) {\r\n        final Cas20ProxyTicketValidator v = createNewTicketValidator(ticketValidatorClass, casServerUrlPrefix, this.defaultProxyTicketValidatorClass);\r\n        v.setAcceptAnyProxy(allowAnyProxy);\r\n        v.setAllowedProxyChains(CommonUtils.createProxyList(allowedProxyChains));\r\n        validator = v;\r\n    } else {\r\n        validator = createNewTicketValidator(ticketValidatorClass, casServerUrlPrefix, this.defaultServiceTicketValidatorClass);\r\n    }\r\n    validator.setProxyCallbackUrl(getString(ConfigurationKeys.PROXY_CALLBACK_URL));\r\n    validator.setProxyGrantingTicketStorage(this.proxyGrantingTicketStorage);\r\n    final HttpURLConnectionFactory factory = new HttpsURLConnectionFactory(getHostnameVerifier(), getSSLConfig());\r\n    validator.setURLConnectionFactory(factory);\r\n    validator.setProxyRetriever(new Cas20ProxyRetriever(casServerUrlPrefix, getString(ConfigurationKeys.ENCODING), factory));\r\n    validator.setRenew(getBoolean(ConfigurationKeys.RENEW));\r\n    validator.setEncoding(getString(ConfigurationKeys.ENCODING));\r\n    final Map<String, String> additionalParameters = new HashMap<String, String>();\r\n    final List<String> params = Arrays.asList(RESERVED_INIT_PARAMS);\r\n    for (final Enumeration<?> e = filterConfig.getInitParameterNames(); e.hasMoreElements(); ) {\r\n        final String s = (String) e.nextElement();\r\n        if (!params.contains(s)) {\r\n            additionalParameters.put(s, filterConfig.getInitParameter(s));\r\n        }\r\n    }\r\n    validator.setCustomParameters(additionalParameters);\r\n    return validator;\r\n}"
}, {
	"Path": "net.spy.memcached.ConnectionFactoryBuilder.setShouldOptimize",
	"Comment": "set to false if the default operation optimization is not desirable.",
	"Method": "ConnectionFactoryBuilder setShouldOptimize(boolean o){\r\n    shouldOptimize = o;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.ListModelsOptions.target",
	"Comment": "gets the target.specify a language code to filter results by target language.",
	"Method": "Builder target(String target,String target){\r\n    return target;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateEntityOptions.fuzzyMatch",
	"Comment": "gets the fuzzymatch.whether to use fuzzy matching for the entity.",
	"Method": "Builder fuzzyMatch(Boolean fuzzyMatch,Boolean fuzzyMatch){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateWorkspaceOptions.dialogNodes",
	"Comment": "gets the dialognodes.an array of objects defining the nodes in the workspace dialog.",
	"Method": "Builder dialogNodes(List<CreateDialogNode> dialogNodes,List<CreateDialogNode> dialogNodes){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceCollection.getWorkspaces",
	"Comment": "gets the workspaces.an array of objects describing the workspaces associated with the service instance.",
	"Method": "List<Workspace> getWorkspaces(){\r\n    return workspaces;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifiedImage.getSourceUrl",
	"Comment": "gets the sourceurl.source of the image before any redirects. not returned when the image is uploaded.",
	"Method": "String getSourceUrl(){\r\n    return sourceUrl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentFeatures.sentiment",
	"Comment": "gets the sentiment.an object specifying the sentiment extraction enrichment and related parameters.",
	"Method": "Builder sentiment(NluEnrichmentSentiment sentiment,NluEnrichmentSentiment sentiment){\r\n    return sentiment;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.http.Headers.equals",
	"Comment": "returns true if other is a headers object with the same headers, with the same casing, in the same order.",
	"Method": "boolean equals(Object other){\r\n    return this.headers.equals(other);\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.logspace",
	"Comment": "construct a column vector whose entries are logarithmically spaced points from10^lower to 10^upper using the specified number of steps",
	"Method": "DoubleMatrix logspace(double lower,double upper,int size){\r\n    DoubleMatrix result = new DoubleMatrix(size);\r\n    for (int i = 0; i < size; i++) {\r\n        double t = (double) i / (size - 1);\r\n        double e = lower * (1 - t) + t * upper;\r\n        result.put(i, (double) Math.pow(10.0, e));\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "io.appium.java_client.screenrecording.ScreenRecordingUploadOptions.build",
	"Comment": "builds a map, which is ready to be passed to the subordinatedappium api.",
	"Method": "Map<String, Object> build(){\r\n    final ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\r\n    ofNullable(remotePath).map(x -> builder.put(\"remotePath\", x));\r\n    ofNullable(user).map(x -> builder.put(\"user\", x));\r\n    ofNullable(pass).map(x -> builder.put(\"pass\", x));\r\n    ofNullable(method).map(x -> builder.put(\"method\", x));\r\n    return builder.build();\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.delete",
	"Comment": "delete the given key from the cache of the given cas value applies.",
	"Method": "OperationFuture<Boolean> delete(String key,int hold,OperationFuture<Boolean> delete,String key,OperationFuture<Boolean> delete,String key,long cas){\r\n    final CountDownLatch latch = new CountDownLatch(1);\r\n    final OperationFuture<Boolean> rv = new OperationFuture<Boolean>(key, latch, operationTimeout, executorService);\r\n    DeleteOperation.Callback callback = new DeleteOperation.Callback() {\r\n        @Override\r\n        public void receivedStatus(OperationStatus s) {\r\n            rv.set(s.isSuccess(), s);\r\n        }\r\n        @Override\r\n        public void gotData(long cas) {\r\n            rv.setCas(cas);\r\n        }\r\n        @Override\r\n        public void complete() {\r\n            latch.countDown();\r\n            rv.signalComplete();\r\n        }\r\n    };\r\n    DeleteOperation op;\r\n    if (cas == 0) {\r\n        op = opFact.delete(key, callback);\r\n    } else {\r\n        op = opFact.delete(key, cas, callback);\r\n    }\r\n    rv.setOperation(op);\r\n    mconn.enqueueOperation(key, op);\r\n    return rv;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.delete",
	"Comment": "delete the given key from the cache of the given cas value applies.",
	"Method": "OperationFuture<Boolean> delete(String key,int hold,OperationFuture<Boolean> delete,String key,OperationFuture<Boolean> delete,String key,long cas){\r\n    rv.set(s.isSuccess(), s);\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.delete",
	"Comment": "delete the given key from the cache of the given cas value applies.",
	"Method": "OperationFuture<Boolean> delete(String key,int hold,OperationFuture<Boolean> delete,String key,OperationFuture<Boolean> delete,String key,long cas){\r\n    rv.setCas(cas);\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.delete",
	"Comment": "delete the given key from the cache of the given cas value applies.",
	"Method": "OperationFuture<Boolean> delete(String key,int hold,OperationFuture<Boolean> delete,String key,OperationFuture<Boolean> delete,String key,long cas){\r\n    latch.countDown();\r\n    rv.signalComplete();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.LanguageModel.getOwner",
	"Comment": "gets the owner.the guid of the service credentials for the instance of the service that owns the custom language model.",
	"Method": "String getOwner(){\r\n    return owner;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.tone_analyzer.v3.model.ToneInput.text",
	"Comment": "gets the text.the input content that the service is to analyze.",
	"Method": "Builder text(String text,String text){\r\n    return text;\r\n}"
}, {
	"Path": "io.appium.java_client.service.local.AppiumDriverLocalService.addOutPutStream",
	"Comment": "adds other output stream which should accept server output data.",
	"Method": "void addOutPutStream(OutputStream outputStream){\r\n    checkNotNull(outputStream, \"outputStream parameter is NULL!\");\r\n    stream.add(outputStream);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ValueExport.getPatterns",
	"Comment": "gets the patterns.an array containing any patterns for the entity value.",
	"Method": "List<String> getPatterns(){\r\n    return patterns;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogRuntimeResponseGeneric.getOptions",
	"Comment": "gets the options.an array of objects describing the options from which the user can choose.",
	"Method": "List<DialogNodeOutputOptionsElement> getOptions(){\r\n    return options;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.Assistant.deleteSession",
	"Comment": "delete session.deletes a session explicitly before it times out.",
	"Method": "ServiceCall<Void> deleteSession(DeleteSessionOptions deleteSessionOptions){\r\n    Validator.notNull(deleteSessionOptions, \"deleteSessionOptions cannot be null\");\r\n    String[] pathSegments = { \"v2/assistants\", \"sessions\" };\r\n    String[] pathParameters = { deleteSessionOptions.assistantId(), deleteSessionOptions.sessionId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateIntentOptions.examples",
	"Comment": "gets the examples.an array of user input examples for the intent.",
	"Method": "Builder examples(List<CreateExample> examples,List<CreateExample> examples){\r\n    return examples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListEntitiesOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.model.Classifier.getStatusDescription",
	"Comment": "gets the statusdescription.additional detail about the status.",
	"Method": "String getStatusDescription(){\r\n    return statusDescription;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.createCounterexample",
	"Comment": "create counterexample.add a new counterexample to a workspace. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Counterexample> createCounterexample(CreateCounterexampleOptions createCounterexampleOptions){\r\n    Validator.notNull(createCounterexampleOptions, \"createCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { createCounterexampleOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"text\", createCounterexampleOptions.text());\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Counterexample.class));\r\n}"
}, {
	"Path": "com.darkprograms.speech.synthesiser.BaseSynthsiser.detectLanguage",
	"Comment": "automatically determines the language of the original text",
	"Method": "String detectLanguage(String text){\r\n    return GoogleTranslate.detectLanguage(text);\r\n}"
}, {
	"Path": "net.spy.memcached.TapClient.getMessagesRead",
	"Comment": "the number of messages read by all of the tap streams created with thisclient. this will include a count of all tap response types.",
	"Method": "long getMessagesRead(){\r\n    return messagesRead;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.GetWordOptions.word",
	"Comment": "gets the word.the word that is to be queried from the custom voice model.",
	"Method": "Builder word(String word,String word){\r\n    return word;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateWorkspaceOptions.counterexamples",
	"Comment": "gets the counterexamples.an array of objects defining input examples that have been marked as irrelevant input.",
	"Method": "Builder counterexamples(List<CreateCounterexample> counterexamples,List<CreateCounterexample> counterexamples){\r\n    return counterexamples;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.shutdown",
	"Comment": "shut down all connections and do not accept further incoming ops.",
	"Method": "void shutdown(){\r\n    shutDown = true;\r\n    try {\r\n        Selector s = selector.wakeup();\r\n        assert s == selector : \"Wakeup returned the wrong selector.\";\r\n        for (MemcachedNode node : locator.getAll()) {\r\n            if (node.getChannel() != null) {\r\n                node.getChannel().close();\r\n                node.setSk(null);\r\n                if (node.getBytesRemainingToWrite() > 0) {\r\n                    getLogger().warn(\"Shut down with %d bytes remaining to write\", node.getBytesRemainingToWrite());\r\n                }\r\n                getLogger().debug(\"Shut down channel %s\", node.getChannel());\r\n            }\r\n        }\r\n        selector.close();\r\n        getLogger().debug(\"Shut down selector %s\", selector);\r\n    } finally {\r\n        running = false;\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateWorkspaceOptions.entities",
	"Comment": "gets the entities.an array of objects defining the entities for the workspace.",
	"Method": "Builder entities(List<CreateEntity> entities,List<CreateEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "net.spy.memcached.compat.SyncThread.getCompletedThreads",
	"Comment": "get a collection of syncthreads that all began as close to the same time aspossible and have all completed.",
	"Method": "Collection<SyncThread<T>> getCompletedThreads(int num,Callable<T> callable){\r\n    Collection<SyncThread<T>> rv = new ArrayList<SyncThread<T>>(num);\r\n    CyclicBarrier barrier = new CyclicBarrier(num);\r\n    for (int i = 0; i < num; i++) {\r\n        rv.add(new SyncThread<T>(barrier, callable));\r\n    }\r\n    for (SyncThread<T> t : rv) {\r\n        t.join();\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EmotionResult.getDocument",
	"Comment": "gets the document.the returned emotion results across the document.",
	"Method": "DocumentEmotionResults getDocument(){\r\n    return document;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.RecognizeOptions.model",
	"Comment": "gets the model.the identifier of the model that is to be used for the recognition request.",
	"Method": "Builder model(String model,String model){\r\n    return model;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.IntentExport.getExamples",
	"Comment": "gets the examples.an array of objects describing the user input examples for the intent.",
	"Method": "List<Example> getExamples(){\r\n    return examples;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.insertAssociationAttribute",
	"Comment": "the hibernate metamodel seems to hold incorrect information about composite keys or entities that use other entities as keys or something. this method provides a way for programmers to specify correctinformation for those types of mappings.",
	"Method": "void insertAssociationAttribute(MethodSignature sig,MetamodelUtilAttribute attribute,boolean isPlural){\r\n    if (isPlural)\r\n        nLinkMethods.put(sig, attribute);\r\n    else\r\n        fieldMethods.put(sig, attribute);\r\n    safeMethods.add(sig);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Example.getUpdated",
	"Comment": "gets the updated.the timestamp for the last update to the example.",
	"Method": "Date getUpdated(){\r\n    return updated;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.AssistantServiceIT.testSendMessages",
	"Comment": "ignoring while i wait to get access to a new instance for java sdk testing.",
	"Method": "void testSendMessages(){\r\n    CreateSessionOptions createSessionOptions = new CreateSessionOptions.Builder().assistantId(assistantId).build();\r\n    SessionResponse sessionResponse = service.createSession(createSessionOptions).execute();\r\n    String sessionId = sessionResponse.getSessionId();\r\n    final List<String> messages = Arrays.asList(\"I want some pizza.\", \"I'd like 3 pizzas.\", \"Large\");\r\n    MessageContext context = new MessageContext();\r\n    try {\r\n        for (String message : messages) {\r\n            MessageInputOptions inputOptions = new MessageInputOptions();\r\n            inputOptions.setDebug(true);\r\n            MessageInput input = new MessageInput.Builder().text(message).messageType(MessageInput.MessageType.TEXT).options(inputOptions).build();\r\n            MessageOptions messageOptions = new MessageOptions.Builder().assistantId(assistantId).sessionId(sessionId).input(input).context(context).build();\r\n            MessageResponse messageResponse = service.message(messageOptions).execute();\r\n            List<DialogRuntimeResponseGeneric> genericResponses = messageResponse.getOutput().getGeneric();\r\n            assertNotNull(genericResponses);\r\n            boolean foundTextResponse = false;\r\n            for (DialogRuntimeResponseGeneric generic : genericResponses) {\r\n                if (generic.getResponseType().equals(DialogRuntimeResponseGeneric.ResponseType.TEXT)) {\r\n                    foundTextResponse = true;\r\n                    break;\r\n                }\r\n            }\r\n            assertTrue(foundTextResponse);\r\n            assertNotNull(messageResponse.getOutput().getEntities());\r\n            assertNotNull(messageResponse.getOutput().getIntents());\r\n            assertNotNull(messageResponse.getOutput().getDebug());\r\n            context = messageResponse.getContext();\r\n        }\r\n    } finally {\r\n        DeleteSessionOptions deleteSessionOptions = new DeleteSessionOptions.Builder().assistantId(assistantId).sessionId(sessionId).build();\r\n        service.deleteSession(deleteSessionOptions).execute();\r\n    }\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllSubjects",
	"Comment": "getallsubjects gets the list of subjects that show up in the current policy.",
	"Method": "List<String> getAllSubjects(){\r\n    return getAllNamedSubjects(\"p\");\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateEntity.fuzzyMatch",
	"Comment": "gets the fuzzymatch.whether to use fuzzy matching for the entity.",
	"Method": "Builder fuzzyMatch(Boolean fuzzyMatch,Boolean fuzzyMatch){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentStatus.getStatusDescription",
	"Comment": "gets the statusdescription.description of the document status.",
	"Method": "String getStatusDescription(){\r\n    return statusDescription;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.LogQueryResponseResultDocuments.getCount",
	"Comment": "gets the count.the number of results returned in the query associate with this log.",
	"Method": "Long getCount(){\r\n    return count;\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByAndroidUIAutomator.findElementsByAndroidUIAutomator",
	"Comment": "method performs the searching for a list of elements by android uiautomator selectorand value of the given selector.",
	"Method": "List<T> findElementsByAndroidUIAutomator(String using){\r\n    return findElements(MobileSelector.ANDROID_UI_AUTOMATOR.toString(), using);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removeGroupingPolicy",
	"Comment": "removegroupingpolicy removes a role inheritance rule from the current policy.",
	"Method": "boolean removeGroupingPolicy(List<String> params,boolean removeGroupingPolicy,String params){\r\n    return removeGroupingPolicy(Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.IntentCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "Pagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.listCollections",
	"Comment": "list collections.lists existing collections for the service instance.",
	"Method": "ServiceCall<ListCollectionsResponse> listCollections(ListCollectionsOptions listCollectionsOptions){\r\n    Validator.notNull(listCollectionsOptions, \"listCollectionsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\" };\r\n    String[] pathParameters = { listCollectionsOptions.environmentId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listCollectionsOptions.name() != null) {\r\n        builder.query(\"name\", listCollectionsOptions.name());\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(ListCollectionsResponse.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.DocumentCounts.getAvailable",
	"Comment": "gets the available.the total number of available documents in the collection.",
	"Method": "Long getAvailable(){\r\n    return available;\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.StringUtil.trimString",
	"Comment": "gets the string exclusively between the first instance of part1 and the last instance of part2.",
	"Method": "String trimString(String s,String part1,String part2){\r\n    if (!s.contains(part1) || !s.contains(part2)) {\r\n        return null;\r\n    }\r\n    int first = s.indexOf(part1) + part1.length() + 1;\r\n    String tmp = s.substring(first);\r\n    int last = tmp.lastIndexOf(part2);\r\n    tmp = tmp.substring(0, last);\r\n    return tmp;\r\n}"
}, {
	"Path": "com.pengrad.telegrambot.request.BaseRequest.serialize",
	"Comment": "todo move to telegrambotclient, let it serialize everything in request time",
	"Method": "String serialize(Object o){\r\n    return gson.toJson(o);\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllObjects",
	"Comment": "getallobjects gets the list of objects that show up in the current policy.",
	"Method": "List<String> getAllObjects(){\r\n    return getAllNamedObjects(\"p\");\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newVariable",
	"Comment": "gets the newvariable.the location in the dialog context where output is stored.",
	"Method": "Builder newVariable(String newVariable,String newVariable){\r\n    return newVariable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.nextStep",
	"Comment": "gets the nextstep.the next step to be executed in dialog processing.",
	"Method": "Builder nextStep(DialogNodeNextStep nextStep,DialogNodeNextStep nextStep){\r\n    return nextStep;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.TokenDictStatusResponse.getStatus",
	"Comment": "gets the status.current tokenization dictionary status for the specified collection.",
	"Method": "String getStatus(){\r\n    return status;\r\n}"
}, {
	"Path": "io.appium.java_client.service.local.AppiumServiceBuilder.usingAnyFreePort",
	"Comment": "configures the appium server to start on any available port.",
	"Method": "AppiumServiceBuilder usingAnyFreePort(){\r\n    return super.usingAnyFreePort();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Entity.isFuzzyMatch",
	"Comment": "gets the fuzzymatch.whether fuzzy matching is used for the entity.",
	"Method": "Boolean isFuzzyMatch(){\r\n    return fuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Conversions.getJsonNormalizations",
	"Comment": "gets the jsonnormalizations.defines operations that can be used to transform the final output json into a normalized form. operations areexecuted in the order that they appear in the array.",
	"Method": "List<NormalizationOperation> getJsonNormalizations(){\r\n    return jsonNormalizations;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.URIBuilder.setCustomQuery",
	"Comment": "sets custom uri query. the value is expected to be unescaped and may contain non asciicharacters.please note query parameters and custom query component are mutually exclusive. this methodwill remove query parameters if present.",
	"Method": "URIBuilder setCustomQuery(String query){\r\n    this.query = query;\r\n    this.encodedQuery = null;\r\n    this.encodedSchemeSpecificPart = null;\r\n    this.queryParams = null;\r\n    return this;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListEntitiesOptions.includeCount",
	"Comment": "gets the includecount.whether to include information about the number of records returned.",
	"Method": "Builder includeCount(Boolean includeCount,Boolean includeCount){\r\n    return includeCount;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateEntityOptions.description",
	"Comment": "gets the description.the description of the entity. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryAggregation.getAggregations",
	"Comment": "gets the aggregations.aggregations returned by the discovery service.",
	"Method": "List<QueryAggregation> getAggregations(){\r\n    return aggregations;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceExport.getDialogNodes",
	"Comment": "gets the dialognodes.an array of objects describing the dialog nodes in the workspace.",
	"Method": "List<DialogNode> getDialogNodes(){\r\n    return dialogNodes;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateIntentOptions.examples",
	"Comment": "gets the examples.an array of user input examples for the intent.",
	"Method": "Builder examples(List<CreateExample> examples,List<CreateExample> examples){\r\n    return examples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryRelationsOptions.entities",
	"Comment": "gets the entities.an array of entities to find relationships for.",
	"Method": "Builder entities(List<QueryRelationsEntity> entities,List<QueryRelationsEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "org.jasig.cas.client.session.SingleSignOutHandler.isTokenRequest",
	"Comment": "determines whether the given request contains an authentication token.",
	"Method": "boolean isTokenRequest(HttpServletRequest request){\r\n    return CommonUtils.isNotBlank(CommonUtils.safeGetParameter(request, this.artifactParameterName, this.safeParameters));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createCounterexample",
	"Comment": "create counterexample.add a new counterexample to a workspace. counterexamples are examples that have been marked as irrelevant input.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Counterexample> createCounterexample(CreateCounterexampleOptions createCounterexampleOptions){\r\n    Validator.notNull(createCounterexampleOptions, \"createCounterexampleOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"counterexamples\" };\r\n    String[] pathParameters = { createCounterexampleOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"text\", createCounterexampleOptions.text());\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Counterexample.class));\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedConnection.retryOperation",
	"Comment": "add a operation to the retry queue.if the retry queue size is bounded and the size of the queue is reachingthat boundary, the operation is cancelled rather than added to theretry queue.",
	"Method": "void retryOperation(Operation op){\r\n    if (retryQueueSize >= 0 && retryOps.size() >= retryQueueSize) {\r\n        if (!op.isCancelled()) {\r\n            op.cancel();\r\n        }\r\n    }\r\n    retryOps.add(op);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.addTrainingData",
	"Comment": "add query to training data.adds a query to the training data for this collection. the query can contain a filter and natural language query.",
	"Method": "ServiceCall<TrainingQuery> addTrainingData(AddTrainingDataOptions addTrainingDataOptions){\r\n    Validator.notNull(addTrainingDataOptions, \"addTrainingDataOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"collections\", \"training_data\" };\r\n    String[] pathParameters = { addTrainingDataOptions.environmentId(), addTrainingDataOptions.collectionId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (addTrainingDataOptions.naturalLanguageQuery() != null) {\r\n        contentJson.addProperty(\"natural_language_query\", addTrainingDataOptions.naturalLanguageQuery());\r\n    }\r\n    if (addTrainingDataOptions.filter() != null) {\r\n        contentJson.addProperty(\"filter\", addTrainingDataOptions.filter());\r\n    }\r\n    if (addTrainingDataOptions.examples() != null) {\r\n        contentJson.add(\"examples\", GsonSingleton.getGson().toJsonTree(addTrainingDataOptions.examples()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(TrainingQuery.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogSuggestion.getOutput",
	"Comment": "gets the output.the dialog output that will be returned from the watson assistant service if the user selects the correspondingoption.",
	"Method": "Map getOutput(){\r\n    return output;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.argmin",
	"Comment": "returns the linear index of the minimal element. if there aremore than one elements with this value, the first one is returned.",
	"Method": "int argmin(){\r\n    if (isEmpty()) {\r\n        return -1;\r\n    }\r\n    float v = Float.POSITIVE_INFINITY;\r\n    int a = -1;\r\n    for (int i = 0; i < length; i++) {\r\n        if (!Float.isNaN(get(i)) && get(i) < v) {\r\n            v = get(i);\r\n            a = i;\r\n        }\r\n    }\r\n    return a;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentFeatures.relations",
	"Comment": "gets the relations.an object specifying the relations enrichment and related parameters.",
	"Method": "Builder relations(NluEnrichmentRelations relations,NluEnrichmentRelations relations){\r\n    return relations;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryNoticesOptions.passagesCount",
	"Comment": "gets the passagescount.the maximum number of passages to return. the search returns fewer passages if the requested total is not found.",
	"Method": "Builder passagesCount(long passagesCount,Long passagesCount){\r\n    return passagesCount;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.persist.file_adapter.FileAdapter.removeFilteredPolicy",
	"Comment": "removefilteredpolicy removes policy rules that match the filter from the storage.",
	"Method": "void removeFilteredPolicy(String sec,String ptype,int fieldIndex,String fieldValues){\r\n    throw new Error(\"not implemented\");\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.GetCredentialsOptions.credentialId",
	"Comment": "gets the credentialid.the unique identifier for a set of source credentials.",
	"Method": "Builder credentialId(String credentialId,String credentialId){\r\n    return credentialId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogSuggestion.getValue",
	"Comment": "gets the value.an object defining the message input to be sent to the assistant if the user selects the correspondingdisambiguation option.",
	"Method": "DialogSuggestionValue getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "io.appium.java_client.touch.offset.ElementOption.withCoordinates",
	"Comment": "it defines x and y offset from the upper left corner of an element.",
	"Method": "ElementOption withCoordinates(Point offset,ElementOption withCoordinates,int xOffset,int yOffset){\r\n    super.withCoordinates(xOffset, yOffset);\r\n    return this;\r\n}"
}, {
	"Path": "de.danielbechler.diff.ObjectDifferBuilder.filtering",
	"Comment": "allows to exclude nodes from being added to the object graph based on\tcriteria that are only known after the diff for the affected node and all\tits children has been determined.",
	"Method": "FilteringConfigurer filtering(){\r\n    return returnableNodeService;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateWorkspaceOptions.counterexamples",
	"Comment": "gets the counterexamples.an array of objects defining input examples that have been marked as irrelevant input.",
	"Method": "Builder counterexamples(List<CreateCounterexample> counterexamples,List<CreateCounterexample> counterexamples){\r\n    return counterexamples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceCollection.getWorkspaces",
	"Comment": "gets the workspaces.an array of objects describing the workspaces associated with the service instance.",
	"Method": "List<Workspace> getWorkspaces(){\r\n    return workspaces;\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByWindowsAutomation.findElementByWindowsUIAutomation",
	"Comment": "finds the first of elements that match the windows uiautomation selector supplied.",
	"Method": "T findElementByWindowsUIAutomation(String selector){\r\n    return findElement(MobileSelector.WINDOWS_UI_AUTOMATION.toString(), selector);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.createValue",
	"Comment": "add entity value.create a new value for an entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Value> createValue(CreateValueOptions createValueOptions){\r\n    Validator.notNull(createValueOptions, \"createValueOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { createValueOptions.workspaceId(), createValueOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"value\", createValueOptions.value());\r\n    if (createValueOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(createValueOptions.metadata()));\r\n    }\r\n    if (createValueOptions.synonyms() != null) {\r\n        contentJson.add(\"synonyms\", GsonSingleton.getGson().toJsonTree(createValueOptions.synonyms()));\r\n    }\r\n    if (createValueOptions.patterns() != null) {\r\n        contentJson.add(\"patterns\", GsonSingleton.getGson().toJsonTree(createValueOptions.patterns()));\r\n    }\r\n    if (createValueOptions.valueType() != null) {\r\n        contentJson.addProperty(\"type\", createValueOptions.valueType());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Value.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogNodeAction.getResultVariable",
	"Comment": "gets the resultvariable.the location in the dialog context where the result of the action is stored.",
	"Method": "String getResultVariable(){\r\n    return resultVariable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.MetadataResult.getPublicationDate",
	"Comment": "gets the publicationdate.the publication date in the format iso 8601.",
	"Method": "String getPublicationDate(){\r\n    return publicationDate;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.GetVoiceOptions.voice",
	"Comment": "gets the voice.the voice for which information is to be returned.",
	"Method": "Builder voice(String voice,String voice){\r\n    return voice;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.visual_recognition.v3.model.UpdateClassifierOptions.negativeExamplesFilename",
	"Comment": "gets the negativeexamplesfilename.the filename for negativeexamples.",
	"Method": "Builder negativeExamplesFilename(String negativeExamplesFilename,String negativeExamplesFilename){\r\n    return negativeExamplesFilename;\r\n}"
}, {
	"Path": "org.javers.repository.api.JaversExtendedRepository.loadMasterEntitySnapshotIfNecessary",
	"Comment": "required for the corner case, when valueobject snapshots consume all the limit",
	"Method": "List<CdoSnapshot> loadMasterEntitySnapshotIfNecessary(InstanceId instanceId,List<CdoSnapshot> alreadyLoaded){\r\n    if (alreadyLoaded.isEmpty()) {\r\n        return alreadyLoaded;\r\n    }\r\n    if (alreadyLoaded.stream().filter(s -> s.getGlobalId().equals(instanceId)).findFirst().isPresent()) {\r\n        return alreadyLoaded;\r\n    }\r\n    return getLatest(instanceId).map(it -> {\r\n        List<CdoSnapshot> enhanced = new ArrayList(alreadyLoaded);\r\n        enhanced.add(it);\r\n        return java.util.Collections.unmodifiableList(enhanced);\r\n    }).orElse(alreadyLoaded);\r\n}"
}, {
	"Path": "org.jasig.cas.client.jaas.CasLoginModuleTests.testLogout",
	"Comment": "test jaas logout after successful login to ensure subject cleanup.",
	"Method": "void testLogout(){\r\n    testLoginSuccess();\r\n    module.logout();\r\n    assertEquals(0, subject.getPrincipals().size());\r\n    assertEquals(0, subject.getPrivateCredentials().size());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageContext.getGlobal",
	"Comment": "gets the global.contains information that can be shared by all skills within the assistant.",
	"Method": "MessageContextGlobal getGlobal(){\r\n    return global;\r\n}"
}, {
	"Path": "org.jblas.ComplexFloatMatrix.copy",
	"Comment": "copy complexfloatmatrix a to this. this a is resized if necessary.",
	"Method": "ComplexFloatMatrix copy(ComplexFloatMatrix a){\r\n    if (!sameSize(a))\r\n        resize(a.rows, a.columns);\r\n    SimpleBlas.copy(a, this);\r\n    return a;\r\n}"
}, {
	"Path": "com.darkprograms.speech.recognizer.FlacEncoder.truncateNullData",
	"Comment": "used for when the frame length is unknown to shorten the array to prevent huge blank end space",
	"Method": "int[] truncateNullData(int[] sampleData,int index){\r\n    if (index == sampleData.length)\r\n        return sampleData;\r\n    int[] out = new int[index];\r\n    for (int i = 0; i < index; i++) {\r\n        out[i] = sampleData[i];\r\n    }\r\n    return out;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListAllLogsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.SearchStatus.getLastTrained",
	"Comment": "gets the lasttrained.the date stamp of the most recent completed training for this environment.",
	"Method": "Date getLastTrained(){\r\n    return lastTrained;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtilFromMetamodel.entityNameFromClassName",
	"Comment": "returns the name of the entity referred to by the given class name",
	"Method": "String entityNameFromClassName(String className){\r\n    for (EntityType<?> entity : metamodel.getEntities()) {\r\n        if (entity.getJavaType() == null)\r\n            continue;\r\n        if (entity.getJavaType().getName().equals(className)) {\r\n            if (!useHibernateFullEntityNames)\r\n                return entity.getName();\r\n            else\r\n                return className;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListAllLogsOptions.cursor",
	"Comment": "gets the cursor.a token identifying the page of results to retrieve.",
	"Method": "Builder cursor(String cursor,String cursor){\r\n    return cursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListValuesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.NaturalLanguageClassifierIT.fClassifyCollection",
	"Comment": "test classifycollection. use the pre created classifier to avoid waiting for availability",
	"Method": "void fClassifyCollection(){\r\n    ClassificationCollection classificationCollection = null;\r\n    ClassifyInput input1 = new ClassifyInput();\r\n    input1.setText(\"How hot will it be today?\");\r\n    ClassifyInput input2 = new ClassifyInput();\r\n    input2.setText(\"Is it hot outside?\");\r\n    try {\r\n        ClassifyCollectionOptions classifyOptions = new ClassifyCollectionOptions.Builder().classifierId(preCreatedClassifierId).addClassifyInput(input1).addClassifyInput(input2).build();\r\n        classificationCollection = service.classifyCollection(classifyOptions).execute();\r\n    } catch (NotFoundException e) {\r\n        throw new AssumptionViolatedException(e.getMessage(), e);\r\n    }\r\n    assertNotNull(classificationCollection);\r\n    assertEquals(\"temperature\", classificationCollection.getCollection().get(0).getTopClass());\r\n    assertEquals(\"temperature\", classificationCollection.getCollection().get(1).getTopClass());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v3.model.TranslationModel.isDefaultModel",
	"Comment": "gets the defaultmodel.whether or not the model is a default model. a default model is the model for a given language pair that will beused when that language pair is specified in the source and target parameters.",
	"Method": "Boolean isDefaultModel(){\r\n    return defaultModel;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_classifier.v1.NaturalLanguageClassifierIT.eDelete",
	"Comment": "test delete classifier. only delete the classifier we created earlier.",
	"Method": "void eDelete(){\r\n    DeleteClassifierOptions deleteOptions = new DeleteClassifierOptions.Builder().classifierId(classifierId).build();\r\n    service.deleteClassifier(deleteOptions).execute();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryNoticesOptions.passages",
	"Comment": "gets the passages.a passages query that returns the most relevant passages from the results.",
	"Method": "Builder passages(Boolean passages,Boolean passages){\r\n    return passages;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateDialogNode.description",
	"Comment": "gets the description.the description of the dialog node. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.RecognitionJob.getUserToken",
	"Comment": "gets the usertoken.the user token associated with a job that was created with a callback url and a user token. this field can bereturned only by the check jobs method.",
	"Method": "String getUserToken(){\r\n    return userToken;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.rbac.DefaultRoleManager.getUsers",
	"Comment": "getusers gets the users that inherits a subject.domain is an unreferenced parameter here, may be used in other implementations.",
	"Method": "List<String> getUsers(String name){\r\n    if (!hasRole(name)) {\r\n        throw new Error(\"error: name does not exist\");\r\n    }\r\n    List<String> names = new ArrayList();\r\n    for (Role role : allRoles.values()) {\r\n        if (role.hasDirectRole(name)) {\r\n            names.add(role.name);\r\n        }\r\n    }\r\n    return names;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogRuntimeResponseGeneric.getSuggestions",
	"Comment": "gets the suggestions.an array of objects describing the possible matching dialog nodes from which the user can choose. suggestions property is part of the disambiguation feature, which is only available for premiumusers.",
	"Method": "List<DialogSuggestion> getSuggestions(){\r\n    return suggestions;\r\n}"
}, {
	"Path": "net.spy.memcached.util.DefaultKetamaNodeLocatorConfiguration.getNodeRepetitions",
	"Comment": "returns the number of discrete hashes that should be defined for each nodein the continuum.",
	"Method": "int getNodeRepetitions(){\r\n    return numReps;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutput.getGeneric",
	"Comment": "gets the generic.output intended for any channel. it is the responsibility of the client application to implement the supportedresponse types.",
	"Method": "List<DialogRuntimeResponseGeneric> getGeneric(){\r\n    return generic;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.queryLog",
	"Comment": "search the query and event log.searches the query and event log to find query sessions that match the specified criteria. searching theendpoint uses the standard discovery query syntax for the parameters that are supported.",
	"Method": "ServiceCall<LogQueryResponse> queryLog(QueryLogOptions queryLogOptions,ServiceCall<LogQueryResponse> queryLog){\r\n    return queryLog(null);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Source.getOptions",
	"Comment": "gets the options.object defines which items to crawl from the source system.",
	"Method": "SourceOptions getOptions(){\r\n    return options;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.asyncGet",
	"Comment": "get the given key asynchronously and decode with the default transcoder.",
	"Method": "GetFuture<T> asyncGet(String key,Transcoder<T> tc,GetFuture<Object> asyncGet,String key){\r\n    return asyncGet(key, transcoder);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListLogsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateWorkspaceOptions.counterexamples",
	"Comment": "gets the counterexamples.an array of objects defining input examples that have been marked as irrelevant input.",
	"Method": "Builder counterexamples(List<CreateCounterexample> counterexamples,List<CreateCounterexample> counterexamples){\r\n    return counterexamples;\r\n}"
}, {
	"Path": "org.jinq.jpa.transform.MetamodelUtil.insertConvertedType",
	"Comment": "allows you to register the existence of a class that jpa uses attributeconverters toconvert for database use.",
	"Method": "void insertConvertedType(String className){\r\n    convertedTypes.add(className);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.deleteWorkspace",
	"Comment": "delete workspace.delete a workspace from the service instance.this operation is limited to 30 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Void> deleteWorkspace(DeleteWorkspaceOptions deleteWorkspaceOptions){\r\n    Validator.notNull(deleteWorkspaceOptions, \"deleteWorkspaceOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\" };\r\n    String[] pathParameters = { deleteWorkspaceOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.delete(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getVoid());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EntityMention.getLocation",
	"Comment": "gets the location.character offsets indicating the beginning and end of the mention in the analyzed text.",
	"Method": "List<Long> getLocation(){\r\n    return location;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.Discovery.listCredentials",
	"Comment": "list credentials.list all the source credentials that have been created for this service instance.all credentials are sent over an encrypted connection and encrypted at rest.",
	"Method": "ServiceCall<CredentialsList> listCredentials(ListCredentialsOptions listCredentialsOptions){\r\n    Validator.notNull(listCredentialsOptions, \"listCredentialsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/environments\", \"credentials\" };\r\n    String[] pathParameters = { listCredentialsOptions.environmentId() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(CredentialsList.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.MessageOutput.getDebug",
	"Comment": "gets the debug.additional detailed information about a message response and how it was generated.",
	"Method": "MessageOutputDebug getDebug(){\r\n    return debug;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.repmat",
	"Comment": "generate a new matrix which has the given number of replications of this.",
	"Method": "DoubleMatrix repmat(int rowMult,int columnMult){\r\n    DoubleMatrix result = new DoubleMatrix(rows * rowMult, columns * columnMult);\r\n    for (int c = 0; c < columnMult; c++) {\r\n        for (int r = 0; r < rowMult; r++) {\r\n            for (int i = 0; i < rows; i++) {\r\n                for (int j = 0; j < columns; j++) {\r\n                    result.put(r * rows + i, c * columns + j, get(i, j));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.hasNamedPolicy",
	"Comment": "hasnamedpolicy determines whether a named authorization rule exists.",
	"Method": "boolean hasNamedPolicy(String ptype,List<String> params,boolean hasNamedPolicy,String ptype,String params){\r\n    return hasNamedPolicy(ptype, Arrays.asList(params));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Synonym.getCreated",
	"Comment": "gets the created.the timestamp for creation of the synonym.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateWorkspaceOptions.description",
	"Comment": "gets the description.the description of the workspace. this string cannot contain carriage return, newline, or tab characters, and itmust be no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryNoticesOptions.aggregation",
	"Comment": "gets the aggregation.an aggregation search that returns an exact answer by combining query search with filters. useful for applicationsto build lists, tables, and time series. for a full list of possible aggregations, see the query reference.",
	"Method": "Builder aggregation(String aggregation,String aggregation){\r\n    return aggregation;\r\n}"
}, {
	"Path": "org.jblas.FloatMatrix.argmax",
	"Comment": "returns the linear index of the maximal element of the matrix. ifthere are more than one elements with this value, the first oneis returned.",
	"Method": "int argmax(){\r\n    if (isEmpty()) {\r\n        return -1;\r\n    }\r\n    float v = Float.NEGATIVE_INFINITY;\r\n    int a = -1;\r\n    for (int i = 0; i < length; i++) {\r\n        if (!Float.isNaN(get(i)) && get(i) > v) {\r\n            v = get(i);\r\n            a = i;\r\n        }\r\n    }\r\n    return a;\r\n}"
}, {
	"Path": "org.jinq.hibernate.CreateHibernateDb.isRegexMatch_DbFunction",
	"Comment": "used to test the invocation of custom db functions installed on the database",
	"Method": "int isRegexMatch_DbFunction(String str,String regex){\r\n    return str.matches(regex) ? 1 : 0;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Value.getPatterns",
	"Comment": "gets the patterns.an array containing any patterns for the entity value.",
	"Method": "List<String> getPatterns(){\r\n    return patterns;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.KeywordResult.getNormalizedText",
	"Comment": "gets the normalizedtext.a specified keyword normalized to the spoken phrase that matched in the audio input.",
	"Method": "String getNormalizedText(){\r\n    return normalizedText;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.util.WaitFor.waitFor",
	"Comment": "static method used to wait for a specific condition to be satisfied.",
	"Method": "boolean waitFor(Condition condition,long time,TimeUnit unit,long sleepMs){\r\n    long waitMs = unit.toMillis(time);\r\n    long startMs = System.currentTimeMillis();\r\n    while (System.currentTimeMillis() - startMs < waitMs) {\r\n        if (condition.isSatisfied()) {\r\n            return true;\r\n        }\r\n        try {\r\n            Thread.sleep(sleepMs);\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(\"WaitFor aborted\", e);\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogPagination.getNextCursor",
	"Comment": "gets the nextcursor.a token identifying the next page of results.",
	"Method": "String getNextCursor(){\r\n    return nextCursor;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.tone_analyzer.v3.model.UtteranceAnalysis.getUtteranceId",
	"Comment": "gets the utteranceid.the unique identifier of the utterance. the first utterance has id 0, and the id of each subsequent utterance isincremented by one.",
	"Method": "Long getUtteranceId(){\r\n    return utteranceId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listMentions",
	"Comment": "list entity mentions.list mentions for a contextual entity. an entity mention is an occurrence of a contextual entity in the context ofan intent user input example.this operation is limited to 200 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<EntityMentionCollection> listMentions(ListMentionsOptions listMentionsOptions){\r\n    Validator.notNull(listMentionsOptions, \"listMentionsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"mentions\" };\r\n    String[] pathParameters = { listMentionsOptions.workspaceId(), listMentionsOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (listMentionsOptions.export() != null) {\r\n        builder.query(\"export\", String.valueOf(listMentionsOptions.export()));\r\n    }\r\n    if (listMentionsOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(listMentionsOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(EntityMentionCollection.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.AnalyzeOptions.returnAnalyzedText",
	"Comment": "gets the returnanalyzedtext.whether or not to return the analyzed text.",
	"Method": "Builder returnAnalyzedText(Boolean returnAnalyzedText,Boolean returnAnalyzedText){\r\n    return returnAnalyzedText;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.WordAlternativeResults.getAlternatives",
	"Comment": "gets the alternatives.an array of alternative hypotheses for a word from the input audio.",
	"Method": "List<WordAlternativeResult> getAlternatives(){\r\n    return alternatives;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.personality_insights.v3.model.Profile.getWordCount",
	"Comment": "gets the wordcount.the number of words from the input that were used to produce the profile.",
	"Method": "Long getWordCount(){\r\n    return wordCount;\r\n}"
}, {
	"Path": "org.jasig.cas.client.jaas.CasLoginModule.removeCredentialsOfType",
	"Comment": "removes all credentials of the given type from the jaas subject.",
	"Method": "void removeCredentialsOfType(Class<? extends Principal> clazz){\r\n    this.subject.getPrivateCredentials().removeAll(this.subject.getPrivateCredentials(clazz));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Example.getCreated",
	"Comment": "gets the created.the timestamp for creation of the example.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.util.Util.arrayRemoveDuplicates",
	"Comment": "arrayremoveduplicates removes any duplicated elements in a string array.",
	"Method": "boolean arrayRemoveDuplicates(List<String> s){\r\n    return true;\r\n}"
}, {
	"Path": "org.jblas.util.Permutations.randomSubset",
	"Comment": "get a random sample of k out of n elements.see algorithm s, d. e. knuth, the art of computer programming, vol. 2, p.142.",
	"Method": "int[] randomSubset(int k,int n){\r\n    assert (0 < k && k <= n);\r\n    Random r = new Random();\r\n    int t = 0, m = 0;\r\n    int[] result = new int[k];\r\n    while (m < k) {\r\n        double u = r.nextDouble();\r\n        if ((n - t) * u < k - m) {\r\n            result[m] = t;\r\n            m++;\r\n        }\r\n        t++;\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.LogQueryResponseResult.getEnvironmentId",
	"Comment": "gets the environmentid.the environment id that is associated with this log entry.",
	"Method": "String getEnvironmentId(){\r\n    return environmentId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateEntityOptions.description",
	"Comment": "gets the description.the description of the entity. this string cannot contain carriage return, newline, or tab characters, and it mustbe no longer than 128 characters.",
	"Method": "Builder description(String description,String description){\r\n    return description;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryEntitiesOptions.entity",
	"Comment": "gets the entity.a text string that appears within the entity text field.",
	"Method": "Builder entity(QueryEntitiesEntity entity,QueryEntitiesEntity entity){\r\n    return entity;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.decr",
	"Comment": "decrement the given counter, returning the new value.due to the way the memcached server operates on items, incremented anddecremented items will be returned as strings with any operations thatreturn a value.",
	"Method": "long decr(String key,long by,long decr,String key,int by,long decr,String key,long by,long def,int exp,long decr,String key,int by,long def,int exp,long decr,String key,long by,long def,long decr,String key,int by,long def){\r\n    return mutateWithDefault(Mutator.decr, key, by, def, 0);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateWorkspaceOptions.intents",
	"Comment": "gets the intents.an array of objects defining the intents for the workspace.",
	"Method": "Builder intents(List<CreateIntent> intents,List<CreateIntent> intents){\r\n    return intents;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.assertSameSize",
	"Comment": "throws sizeexception unless two matrices have the same size.",
	"Method": "void assertSameSize(DoubleMatrix a){\r\n    if (!sameSize(a)) {\r\n        throw new SizeException(\"Matrices must have the same size.\");\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Synonym.getCreated",
	"Comment": "gets the created.the timestamp for creation of the synonym.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.DeleteUserDataOptions.customerId",
	"Comment": "gets the customerid.the customer id for which all data is to be deleted.",
	"Method": "Builder customerId(String customerId,String customerId){\r\n    return customerId;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.TranslationModel.isDefaultModel",
	"Comment": "gets the defaultmodel.whether or not the model is a default model. a default model is the model for a given language pair that will beused when that language pair is specified in the source and target parameters.",
	"Method": "Boolean isDefaultModel(){\r\n    return defaultModel;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.rand",
	"Comment": "creates a column vector with random values uniformly in 0..1.",
	"Method": "DoubleMatrix rand(int rows,int columns,DoubleMatrix rand,int len){\r\n    return rand(len, 1);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.KeywordResult.getStartTime",
	"Comment": "gets the starttime.the start time in seconds of the keyword match.",
	"Method": "Double getStartTime(){\r\n    return startTime;\r\n}"
}, {
	"Path": "net.spy.memcached.internal.OperationFuture.getCas",
	"Comment": "get the cas for this operation.the interrupted status of the current thread is cleared by this method.inspect the returned operationstatus to check whether an interruption has taken place.",
	"Method": "Long getCas(){\r\n    if (cas == null) {\r\n        try {\r\n            get();\r\n        } catch (InterruptedException e) {\r\n            status = new OperationStatus(false, \"Interrupted\", StatusCode.INTERRUPTED);\r\n        } catch (ExecutionException e) {\r\n            getLogger().warn(\"Error getting cas of operation\", e);\r\n        }\r\n    }\r\n    if (cas == null && status.isSuccess()) {\r\n        throw new UnsupportedOperationException(\"This operation doesn't return\" + \"a cas value.\");\r\n    }\r\n    return cas;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeAction.getResultVariable",
	"Comment": "gets the resultvariable.the location in the dialog context where the result of the action is stored.",
	"Method": "String getResultVariable(){\r\n    return resultVariable;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Value.getSynonyms",
	"Comment": "gets the synonyms.an array containing any synonyms for the entity value.",
	"Method": "List<String> getSynonyms(){\r\n    return synonyms;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.CoreEnforcer.buildRoleLinks",
	"Comment": "buildrolelinks manually rebuild therole inheritance relations.",
	"Method": "void buildRoleLinks(){\r\n    rm.clear();\r\n    model.buildRoleLinks(rm);\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.toString",
	"Comment": "generate string representation of the matrix, with specifiedformat for the entries, and delimiters.",
	"Method": "String toString(String toString,String fmt,String toString,String fmt,String open,String close,String colSep,String rowSep){\r\n    StringWriter s = new StringWriter();\r\n    PrintWriter p = new PrintWriter(s);\r\n    p.print(open);\r\n    for (int r = 0; r < rows; r++) {\r\n        for (int c = 0; c < columns; c++) {\r\n            p.printf(fmt, get(r, c));\r\n            if (c < columns - 1) {\r\n                p.print(colSep);\r\n            }\r\n        }\r\n        if (r < rows - 1) {\r\n            p.print(rowSep);\r\n        }\r\n    }\r\n    p.print(close);\r\n    return s.toString();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.QueryOptions.passagesCharacters",
	"Comment": "gets the passagescharacters.the approximate number of characters that any one passage will have.",
	"Method": "Builder passagesCharacters(long passagesCharacters,Long passagesCharacters){\r\n    return passagesCharacters;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogExport.getLanguage",
	"Comment": "gets the language.the language of the workspace where the message request was made.",
	"Method": "String getLanguage(){\r\n    return language;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.WorkspaceExport.getMetadata",
	"Comment": "gets the metadata.any metadata that is required by the workspace.",
	"Method": "Map getMetadata(){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.tone_analyzer_integration.ToneDetection.updateLanguageTone",
	"Comment": "updatelanguagetone updates the user with the language tones interpreted based on the specified thresholds.",
	"Method": "void updateLanguageTone(Map<String, Object> user,List<ToneScore> languageTone,boolean maintainHistory){\r\n    List<String> currentLanguage = new ArrayList<String>();\r\n    Map<String, Object> currentLanguageObject = new HashMap<String, Object>();\r\n    for (ToneScore tone : languageTone) {\r\n        if (tone.getScore() >= LANGUAGE_HIGH_SCORE_THRESHOLD) {\r\n            currentLanguage.add(tone.getToneName().toLowerCase() + \"_high\");\r\n            currentLanguageObject.put(\"tone_name\", tone.getToneName().toLowerCase());\r\n            currentLanguageObject.put(\"score\", tone.getScore());\r\n            currentLanguageObject.put(\"interpretation\", \"likely high\");\r\n        } else if (tone.getScore() <= LANGUAGE_NO_SCORE_THRESHOLD) {\r\n            currentLanguageObject.put(\"tone_name\", tone.getToneName().toLowerCase());\r\n            currentLanguageObject.put(\"score\", tone.getScore());\r\n            currentLanguageObject.put(\"interpretation\", \"no evidence\");\r\n        } else {\r\n            currentLanguageObject.put(\"tone_name\", tone.getToneName().toLowerCase());\r\n            currentLanguageObject.put(\"score\", tone.getScore());\r\n            currentLanguageObject.put(\"interpretation\", \"likely medium\");\r\n        }\r\n    }\r\n    Map<String, Object> language = (Map<String, Object>) ((Map<String, Object>) user.get(\"tone\")).get(\"language\");\r\n    language.put(\"current\", currentLanguage);\r\n    if (maintainHistory) {\r\n        List<Map<String, Object>> history = new ArrayList<Map<String, Object>>();\r\n        if (language.get(\"history\") != null) {\r\n            history = (List<Map<String, Object>>) language.get(\"history\");\r\n        }\r\n        history.add(currentLanguageObject);\r\n        language.put(\"history\", history);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.LogExport.getRequest",
	"Comment": "gets the request.a request received by the workspace, including the user input and context.",
	"Method": "MessageRequest getRequest(){\r\n    return request;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Configuration.getDescription",
	"Comment": "gets the description.the description of the configuration, if available.",
	"Method": "String getDescription(){\r\n    return description;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.ThreadLocalXPathExpression.evaluateAsString",
	"Comment": "evaluates the xpath expression and returns the result coerced to a string.",
	"Method": "String evaluateAsString(Object o){\r\n    return (String) evaluate(o, XPathConstants.STRING);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v2.model.DialogRuntimeResponseGeneric.getMessageToHumanAgent",
	"Comment": "gets the messagetohumanagent.a message to be sent to the human agent who will be taking over the conversation.",
	"Method": "String getMessageToHumanAgent(){\r\n    return messageToHumanAgent;\r\n}"
}, {
	"Path": "io.appium.java_client.MobileBy.AndroidViewTag",
	"Comment": "this locator strategy is available in espresso driver mode.",
	"Method": "By AndroidViewTag(String tag){\r\n    return new ByAndroidViewTag(tag);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.DialogRuntimeResponseGeneric.getTitle",
	"Comment": "gets the title.the title or introductory text to show before the response.",
	"Method": "String getTitle(){\r\n    return title;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.WorkspaceSystemSettingsDisambiguation.getPrompt",
	"Comment": "gets the prompt.the text of the introductory prompt that accompanies disambiguation options presented to the user.",
	"Method": "String getPrompt(){\r\n    return prompt;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNode.getPreviousSibling",
	"Comment": "gets the previoussibling.the id of the previous sibling dialog node. this property is not returned if the dialog node has no previoussibling.",
	"Method": "String getPreviousSibling(){\r\n    return previousSibling;\r\n}"
}, {
	"Path": "net.spy.memcached.protocol.ascii.TouchOperationImpl.getKeys",
	"Comment": "once touchoperation in ops is unified with the binary touch method impl.",
	"Method": "Collection<String> getKeys(){\r\n    return Collections.singleton(key);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentConcepts.getLimit",
	"Comment": "gets the limit.the maximum number of concepts enrichments to extact from each instance of the specified field.",
	"Method": "Long getLimit(){\r\n    return limit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentKeywords.limit",
	"Comment": "gets the limit.the maximum number of keywords to extract for each instance of the specified field.",
	"Method": "Builder limit(long limit,Long limit){\r\n    return limit;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.speech_to_text.v1.model.UnregisterCallbackOptions.callbackUrl",
	"Comment": "gets the callbackurl.the callback url that is to be unregistered.",
	"Method": "Builder callbackUrl(String callbackUrl,String callbackUrl){\r\n    return callbackUrl;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Configuration.getEnrichments",
	"Comment": "gets the enrichments.an array of document enrichment settings for the configuration.",
	"Method": "List<Enrichment> getEnrichments(){\r\n    return enrichments;\r\n}"
}, {
	"Path": "io.appium.java_client.ios.ListensToSyslogMessages.addSyslogErrorsListener",
	"Comment": "adds a new log broadcasting errors handler.several handlers might be assigned to a single server.multiple calls to this method will cause such handlerto be called multiple times.",
	"Method": "void addSyslogErrorsListener(Consumer<Throwable> handler){\r\n    getSyslogClient().addErrorHandler(handler);\r\n}"
}, {
	"Path": "com.darkprograms.speech.translator.GoogleTranslate.detectLanguage",
	"Comment": "automatically determines the language of the original text",
	"Method": "String detectLanguage(String text){\r\n    String urlText = generateURL(\"auto\", \"en\", text);\r\n    URL url = new URL(urlText);\r\n    String rawData = urlToText(url);\r\n    return findLanguage(rawData);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.createValue",
	"Comment": "add entity value.create a new value for an entity.this operation is limited to 1000 requests per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Value> createValue(CreateValueOptions createValueOptions){\r\n    Validator.notNull(createValueOptions, \"createValueOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\" };\r\n    String[] pathParameters = { createValueOptions.workspaceId(), createValueOptions.entity() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    final JsonObject contentJson = new JsonObject();\r\n    contentJson.addProperty(\"value\", createValueOptions.value());\r\n    if (createValueOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(createValueOptions.metadata()));\r\n    }\r\n    if (createValueOptions.synonyms() != null) {\r\n        contentJson.add(\"synonyms\", GsonSingleton.getGson().toJsonTree(createValueOptions.synonyms()));\r\n    }\r\n    if (createValueOptions.patterns() != null) {\r\n        contentJson.add(\"patterns\", GsonSingleton.getGson().toJsonTree(createValueOptions.patterns()));\r\n    }\r\n    if (createValueOptions.valueType() != null) {\r\n        contentJson.addProperty(\"type\", createValueOptions.valueType());\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Value.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateDialogNodeOptions.newDigressOut",
	"Comment": "gets the newdigressout.whether this dialog node can be returned to after a digression.",
	"Method": "Builder newDigressOut(String newDigressOut,String newDigressOut){\r\n    return newDigressOut;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.NluEnrichmentFeatures.emotion",
	"Comment": "gets the emotion.an object specifying the emotion detection enrichment and related parameters.",
	"Method": "Builder emotion(NluEnrichmentEmotion emotion,NluEnrichmentEmotion emotion){\r\n    return emotion;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.Enforcer.getPermissionsForUserInDomain",
	"Comment": "getpermissionsforuserindomain gets permissions for a user or role inside a domain.",
	"Method": "List<List<String>> getPermissionsForUserInDomain(String user,String domain){\r\n    return getFilteredPolicy(0, user, domain);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.MessageRequest.getInput",
	"Comment": "gets the input.an input object that includes the input text.",
	"Method": "InputData getInput(){\r\n    return input;\r\n}"
}, {
	"Path": "com.darkprograms.speech.microphone.MicrophoneAnalyzer.getNumOfBytes",
	"Comment": "returns the number of bytes over interval for useful when figuring out how long to record.",
	"Method": "int getNumOfBytes(int seconds,int getNumOfBytes,double seconds){\r\n    return (int) (seconds * getAudioFormat().getSampleRate() * getAudioFormat().getFrameSize() + .5);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateDialogNode.variable",
	"Comment": "gets the variable.the location in the dialog context where output is stored.",
	"Method": "Builder variable(String variable,String variable){\r\n    return variable;\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.diag",
	"Comment": "construct a matrix of arbitrary shape and set the diagonal accordingto a passed vector.length of needs to be smaller than rows or columns.",
	"Method": "DoubleMatrix diag(DoubleMatrix x,DoubleMatrix diag,DoubleMatrix x,int rows,int columns,DoubleMatrix diag){\r\n    assertSquare();\r\n    DoubleMatrix d = new DoubleMatrix(rows);\r\n    JavaBlas.rcopy(rows, data, 0, rows + 1, d.data, 0, 1);\r\n    return d;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.DialogNodeNextStep.getSelector",
	"Comment": "gets the selector.which part of the dialog node to process next.",
	"Method": "String getSelector(){\r\n    return selector;\r\n}"
}, {
	"Path": "net.spy.memcached.MemcachedClient.prepend",
	"Comment": "prepend to an existing value in the cache.note that the return will be false any time a mutation has not occurred.",
	"Method": "OperationFuture<Boolean> prepend(long cas,String key,Object val,OperationFuture<Boolean> prepend,String key,Object val,OperationFuture<Boolean> prepend,long cas,String key,T val,Transcoder<T> tc,OperationFuture<Boolean> prepend,String key,T val,Transcoder<T> tc){\r\n    return asyncCat(ConcatenationType.prepend, 0, key, val, tc);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.MessageRequest.getEntities",
	"Comment": "gets the entities.entities to use when evaluating the message. include entities from the previous response to continue using thoseentities rather than detecting entities in the new input.",
	"Method": "List<RuntimeEntity> getEntities(){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.updateWorkspace",
	"Comment": "update workspace.update an existing workspace with new or modified data. you must provide component objects defining the content ofthe updated workspace.this operation is limited to 30 request per 30 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Workspace> updateWorkspace(UpdateWorkspaceOptions updateWorkspaceOptions){\r\n    Validator.notNull(updateWorkspaceOptions, \"updateWorkspaceOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\" };\r\n    String[] pathParameters = { updateWorkspaceOptions.workspaceId() };\r\n    RequestBuilder builder = RequestBuilder.post(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (updateWorkspaceOptions.append() != null) {\r\n        builder.query(\"append\", String.valueOf(updateWorkspaceOptions.append()));\r\n    }\r\n    final JsonObject contentJson = new JsonObject();\r\n    if (updateWorkspaceOptions.name() != null) {\r\n        contentJson.addProperty(\"name\", updateWorkspaceOptions.name());\r\n    }\r\n    if (updateWorkspaceOptions.description() != null) {\r\n        contentJson.addProperty(\"description\", updateWorkspaceOptions.description());\r\n    }\r\n    if (updateWorkspaceOptions.language() != null) {\r\n        contentJson.addProperty(\"language\", updateWorkspaceOptions.language());\r\n    }\r\n    if (updateWorkspaceOptions.intents() != null) {\r\n        contentJson.add(\"intents\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.intents()));\r\n    }\r\n    if (updateWorkspaceOptions.entities() != null) {\r\n        contentJson.add(\"entities\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.entities()));\r\n    }\r\n    if (updateWorkspaceOptions.dialogNodes() != null) {\r\n        contentJson.add(\"dialog_nodes\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.dialogNodes()));\r\n    }\r\n    if (updateWorkspaceOptions.counterexamples() != null) {\r\n        contentJson.add(\"counterexamples\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.counterexamples()));\r\n    }\r\n    if (updateWorkspaceOptions.metadata() != null) {\r\n        contentJson.add(\"metadata\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.metadata()));\r\n    }\r\n    if (updateWorkspaceOptions.learningOptOut() != null) {\r\n        contentJson.addProperty(\"learning_opt_out\", updateWorkspaceOptions.learningOptOut());\r\n    }\r\n    if (updateWorkspaceOptions.systemSettings() != null) {\r\n        contentJson.add(\"system_settings\", GsonSingleton.getGson().toJsonTree(updateWorkspaceOptions.systemSettings()));\r\n    }\r\n    builder.bodyJson(contentJson);\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Workspace.class));\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.language_translator.v2.model.CreateModelOptions.parallelCorpusFilename",
	"Comment": "gets the parallelcorpusfilename.the filename for parallelcorpus.",
	"Method": "Builder parallelCorpusFilename(String parallelCorpusFilename,String parallelCorpusFilename){\r\n    return parallelCorpusFilename;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getFilteredNamedPolicy",
	"Comment": "getfilterednamedpolicy gets all the authorization rules in the named policy, field filters can be specified.",
	"Method": "List<List<String>> getFilteredNamedPolicy(String ptype,int fieldIndex,String fieldValues){\r\n    return model.getFilteredPolicy(\"p\", ptype, fieldIndex, fieldValues);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateWorkspaceOptions.entities",
	"Comment": "gets the entities.an array of objects defining the entities for the workspace.",
	"Method": "Builder entities(List<CreateEntity> entities,List<CreateEntity> entities){\r\n    return entities;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.model.DeleteWordOptions.word",
	"Comment": "gets the word.the word that is to be deleted from the custom voice model.",
	"Method": "Builder word(String word,String word){\r\n    return word;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.CreateValue.metadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Builder metadata(Map metadata,Map metadata){\r\n    return metadata;\r\n}"
}, {
	"Path": "org.jasig.cas.client.tomcat.AssertionCasRealmDelegate.getRoleCollection",
	"Comment": "retrieves the attributes for a principal.to make life easy this should never return null.",
	"Method": "Collection<String> getRoleCollection(Principal p){\r\n    if (!(p instanceof AttributePrincipal)) {\r\n        return Collections.emptyList();\r\n    }\r\n    final Object attributes = ((AttributePrincipal) p).getAttributes().get(this.roleAttributeName);\r\n    if (attributes == null) {\r\n        return Collections.emptyList();\r\n    }\r\n    if (attributes instanceof Collection<?>) {\r\n        return (Collection<String>) attributes;\r\n    }\r\n    return Arrays.asList(attributes.toString());\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.LogCollection.getPagination",
	"Comment": "gets the pagination.the pagination data for the returned objects.",
	"Method": "LogPagination getPagination(){\r\n    return pagination;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.http.RequestBuilder.constructHttpUrl",
	"Comment": "creates a properly encoded httpurl object with path parameters.",
	"Method": "HttpUrl constructHttpUrl(String endPoint,String[] pathSegments,HttpUrl constructHttpUrl,String endPoint,String[] pathSegments,String[] pathParameters){\r\n    HttpUrl.Builder httpUrlBuilder = HttpUrl.parse(endPoint).newBuilder();\r\n    for (int i = 0; i < pathSegments.length; i++) {\r\n        httpUrlBuilder.addPathSegments(pathSegments[i]);\r\n        if (i < pathParameters.length) {\r\n            httpUrlBuilder.addPathSegment(pathParameters[i]);\r\n        }\r\n    }\r\n    return httpUrlBuilder.build();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.UpdateWorkspaceOptions.counterexamples",
	"Comment": "gets the counterexamples.an array of objects defining input examples that have been marked as irrelevant input.",
	"Method": "Builder counterexamples(List<CreateCounterexample> counterexamples,List<CreateCounterexample> counterexamples){\r\n    return counterexamples;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.Value.getMetadata",
	"Comment": "gets the metadata.any metadata related to the entity value.",
	"Method": "Map getMetadata(){\r\n    return metadata;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.CategoriesResult.getScore",
	"Comment": "gets the score.confidence score for the category classification. higher values indicate greater confidence.",
	"Method": "Double getScore(){\r\n    return score;\r\n}"
}, {
	"Path": "org.jasig.cas.client.util.URIBuilder.setFragment",
	"Comment": "sets uri fragment. the value is expected to be unescaped and may contain non asciicharacters.",
	"Method": "URIBuilder setFragment(String fragment){\r\n    this.fragment = fragment;\r\n    this.encodedFragment = null;\r\n    return this;\r\n}"
}, {
	"Path": "com.darkprograms.speech.util.Complex.reciprocal",
	"Comment": "return a new complex object whose value is the reciprocal of this",
	"Method": "Complex reciprocal(){\r\n    double scale = re * re + im * im;\r\n    return new Complex(re / scale, -im / scale);\r\n}"
}, {
	"Path": "net.spy.memcached.tapmessage.ResponseMessage.getItemFlags",
	"Comment": "gets the value of the items flag field. only returned with a tap mutationmessage.",
	"Method": "int getItemFlags(){\r\n    return itemflags;\r\n}"
}, {
	"Path": "org.jblas.ComplexDoubleMatrix.in",
	"Comment": "reads in a matrix from the given data stream. note\tthat the old data of this matrix will be discarded.",
	"Method": "void in(DataInputStream dis){\r\n    if (!dis.readUTF().equals(\"double\"))\r\n        throw new IllegalStateException(\"The matrix in the specified file is not of the correct type!\");\r\n    this.columns = dis.readInt();\r\n    this.rows = dis.readInt();\r\n    final int MAX = dis.readInt();\r\n    data = new double[MAX];\r\n    for (int i = 0; i < MAX; i++) data[i] = dis.readDouble();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.Example.getCreated",
	"Comment": "gets the created.the timestamp for creation of the example.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.ListWorkspacesOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.util.Util.paramsToString",
	"Comment": "paramstostring gets a printable string for variable number of parameters.",
	"Method": "String paramsToString(String[] s){\r\n    return String.join(\", \", s);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.query.AggregationDeserializer.collapseMap",
	"Comment": "condenses the main object map to eliminate unnecessary nesting and allow for proper type conversion when the mapis complete.",
	"Method": "void collapseMap(HashMap<String, Object> objMap){\r\n    while (objMap.keySet().size() == 1 && objMap.keySet().contains(\"\")) {\r\n        HashMap<String, Object> innerMap = (HashMap<String, Object>) objMap.get(\"\");\r\n        objMap.clear();\r\n        objMap.putAll(innerMap);\r\n    }\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.CreateEntityOptions.values",
	"Comment": "gets the values.an array of objects describing the entity values.",
	"Method": "Builder values(List<CreateValue> values,List<CreateValue> values){\r\n    return values;\r\n}"
}, {
	"Path": "io.appium.java_client.FindsByWindowsAutomation.findElementsByWindowsUIAutomation",
	"Comment": "finds a list of elements that match the windows uiautomation selector supplied.",
	"Method": "List<T> findElementsByWindowsUIAutomation(String selector){\r\n    return findElements(MobileSelector.WINDOWS_UI_AUTOMATION.toString(), selector);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.Model.getStatus",
	"Comment": "gets the status.shows as available if the model is ready for use.",
	"Method": "String getStatus(){\r\n    return status;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.Conversation.getSynonym",
	"Comment": "get entity value synonym.get information about a synonym of an entity value.this operation is limited to 6000 requests per 5 minutes. for more information, see rate limiting",
	"Method": "ServiceCall<Synonym> getSynonym(GetSynonymOptions getSynonymOptions){\r\n    Validator.notNull(getSynonymOptions, \"getSynonymOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/workspaces\", \"entities\", \"values\", \"synonyms\" };\r\n    String[] pathParameters = { getSynonymOptions.workspaceId(), getSynonymOptions.entity(), getSynonymOptions.value(), getSynonymOptions.synonym() };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments, pathParameters));\r\n    builder.query(VERSION, versionDate);\r\n    if (getSynonymOptions.includeAudit() != null) {\r\n        builder.query(\"include_audit\", String.valueOf(getSynonymOptions.includeAudit()));\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(Synonym.class));\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedRoles",
	"Comment": "getallnamedroles gets the list of roles that show up in the current named policy.",
	"Method": "List<String> getAllNamedRoles(String ptype){\r\n    return model.getValuesForFieldInPolicy(\"g\", ptype, 1);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.Assistant.listAllLogs",
	"Comment": "list log events in all workspaces.list the events from the logs of all workspaces in the service instance.is not specified, this operation is limited to 40 requests per 30 minutes. ifspecified, the limit is 120 requests per minute. for more information, see rate limiting",
	"Method": "ServiceCall<LogCollection> listAllLogs(ListAllLogsOptions listAllLogsOptions){\r\n    Validator.notNull(listAllLogsOptions, \"listAllLogsOptions cannot be null\");\r\n    String[] pathSegments = { \"v1/logs\" };\r\n    RequestBuilder builder = RequestBuilder.get(RequestBuilder.constructHttpUrl(getEndPoint(), pathSegments));\r\n    builder.query(VERSION, versionDate);\r\n    builder.query(\"filter\", listAllLogsOptions.filter());\r\n    if (listAllLogsOptions.sort() != null) {\r\n        builder.query(\"sort\", listAllLogsOptions.sort());\r\n    }\r\n    if (listAllLogsOptions.pageLimit() != null) {\r\n        builder.query(\"page_limit\", String.valueOf(listAllLogsOptions.pageLimit()));\r\n    }\r\n    if (listAllLogsOptions.cursor() != null) {\r\n        builder.query(\"cursor\", listAllLogsOptions.cursor());\r\n    }\r\n    return createServiceCall(builder.build(), ResponseConverterUtils.getObject(LogCollection.class));\r\n}"
}, {
	"Path": "org.jblas.DoubleMatrix.concatHorizontally",
	"Comment": "concatenates two matrices horizontally. matrices must have identicalnumbers of rows.",
	"Method": "DoubleMatrix concatHorizontally(DoubleMatrix A,DoubleMatrix B){\r\n    if (A.rows != B.rows) {\r\n        throw new SizeException(\"Matrices don't have same number of rows.\");\r\n    }\r\n    DoubleMatrix result = new DoubleMatrix(A.rows, A.columns + B.columns);\r\n    SimpleBlas.copy(A, result);\r\n    JavaBlas.rcopy(B.length, B.data, 0, 1, result.data, A.length, 1);\r\n    return result;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.discovery.v1.model.Configuration.getConversions",
	"Comment": "gets the conversions.the document conversion settings for the configuration.",
	"Method": "Conversions getConversions(){\r\n    return conversions;\r\n}"
}, {
	"Path": "com.offbytwo.jenkins.client.util.UrlUtils.toFullJobPath",
	"Comment": "parses the provided job name for folders to get the full path for the job.",
	"Method": "String toFullJobPath(String jobName){\r\n    final String[] parts = jobName.split(\"/\");\r\n    if (parts.length == 1)\r\n        return parts[0];\r\n    final StringBuilder sb = new StringBuilder(DEFAULT_BUFFER_SIZE);\r\n    for (int i = 0; i < parts.length; i++) {\r\n        sb.append(parts[i]);\r\n        if (i != parts.length - 1)\r\n            sb.append(\"/job/\");\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.conversation.v1.model.UpdateEntityOptions.newFuzzyMatch",
	"Comment": "gets the newfuzzymatch.whether to use fuzzy matching for the entity.",
	"Method": "Builder newFuzzyMatch(Boolean newFuzzyMatch,Boolean newFuzzyMatch){\r\n    return newFuzzyMatch;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ValueExport.getCreated",
	"Comment": "gets the created.the timestamp for creation of the entity value.",
	"Method": "Date getCreated(){\r\n    return created;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.text_to_speech.v1.CustomizationsIT.testUpdateVoiceModel",
	"Comment": "test update voice model with new name and ignored language change.",
	"Method": "void testUpdateVoiceModel(){\r\n    final String newName = \"new test\";\r\n    model = createVoiceModel();\r\n    GetVoiceModelOptions getOptions = new GetVoiceModelOptions.Builder().customizationId(model.getCustomizationId()).build();\r\n    model = service.getVoiceModel(getOptions).execute();\r\n    UpdateVoiceModelOptions updateOptions = new UpdateVoiceModelOptions.Builder().customizationId(model.getCustomizationId()).name(newName).build();\r\n    service.updateVoiceModel(updateOptions).execute();\r\n    final VoiceModel model2 = service.getVoiceModel(getOptions).execute();\r\n    assertModelsEqual(model, model2);\r\n    assertEquals(model2.getLanguage(), MODEL_LANGUAGE);\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.assistant.v1.model.ListSynonymsOptions.pageLimit",
	"Comment": "gets the pagelimit.the number of records to return in each page of results.",
	"Method": "Builder pageLimit(long pageLimit,Long pageLimit){\r\n    return pageLimit;\r\n}"
}, {
	"Path": "org.javers.repository.sql.SqlRepositoryBuilder.withSchema",
	"Comment": "this function sets a schema to be used for creation and updating tables. when passing a schema name make surethat the schema has been created in the database before running javers. if schemaname is null or empty, the defaultschema is used instead.",
	"Method": "SqlRepositoryBuilder withSchema(String schemaName){\r\n    if (schemaName != null && !schemaName.isEmpty()) {\r\n        this.schemaName = schemaName;\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredNamedGroupingPolicy",
	"Comment": "removefilterednamedgroupingpolicy removes a role inheritance rule from the current named policy, field filters can be specified.",
	"Method": "boolean removeFilteredNamedGroupingPolicy(String ptype,int fieldIndex,String fieldValues){\r\n    boolean ruleRemoved = removeFilteredPolicy(\"g\", ptype, fieldIndex, fieldValues);\r\n    if (autoBuildRoleLinks) {\r\n        buildRoleLinks();\r\n    }\r\n    return ruleRemoved;\r\n}"
}, {
	"Path": "com.ibm.watson.developer_cloud.natural_language_understanding.v1.model.EmotionScores.getFear",
	"Comment": "gets the fear.fear score from 0 to 1. a higher score means that the text is more likely to convey fear.",
	"Method": "Double getFear(){\r\n    return fear;\r\n}"
}]