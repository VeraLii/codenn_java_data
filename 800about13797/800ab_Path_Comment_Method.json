[{
	"Path": "com.sun.s1asdev.jdbc.connsharing.nonxa.ejb.SimpleSessionBean.query",
	"Comment": "query the value modified in the second bean and ensure that itis correct.",
	"Method": "boolean query(){\r\n    DataSource ds = (DataSource) ic_.lookup(\"java:comp/env/DataSource\");\r\n    Connection conn = null;\r\n    Statement stmt = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        conn = ds.getConnection();\r\n        stmt = conn.createStatement();\r\n        rs = stmt.executeQuery(\"SELECT * FROM CONNSHARING WHERE c_id=100\");\r\n        if (rs.next()) {\r\n            String str = rs.getString(2);\r\n            System.out.println(\" str => \" + str);\r\n            if (\"CONN_SHARING_BEAN_2\".equals(str.trim())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (rs != null) {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        if (stmt != null) {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        try {\r\n            stmt = conn.createStatement();\r\n            stmt.executeUpdate(\"DELETE FROM CONNSHARING WHERE c_id=100\");\r\n            stmt.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (conn != null) {\r\n            try {\r\n                conn.close();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.glassfish.jdbc.devtests.v3.test.ApplicationAuthTest.testTwiceWithCredentials",
	"Comment": "tests the application authentication when right credentials are specifiedinitially and wrong credentials the second try.",
	"Method": "boolean testTwiceWithCredentials(DataSource ds,PrintWriter out){\r\n    boolean result = false;\r\n    Connection conn = null;\r\n    out.println(\"<h4> App Auth Test with 2 sets of credentials <\/h4>\");\r\n    try {\r\n        out.println(\"<br> Getting a Connection with DBUSER (right credential)\");\r\n        conn = ds.getConnection(\"DBUSER\", \"DBPASSWORD\");\r\n    } catch (Exception ex) {\r\n        HtmlUtil.printException(ex, out);\r\n        return result;\r\n    } finally {\r\n        if (conn != null) {\r\n            try {\r\n                conn.close();\r\n            } catch (Exception e1) {\r\n                HtmlUtil.printException(e1, out);\r\n            }\r\n        }\r\n    }\r\n    try {\r\n        out.println(\"<br> Getting a connection with xyz (wrong credential)\");\r\n        conn = ds.getConnection(\"xyz\", \"xyz\");\r\n    } catch (Exception ex) {\r\n        out.println(\"<br> Failed - Expected Result\");\r\n        result = true;\r\n    } finally {\r\n        if (conn != null) {\r\n            try {\r\n                conn.close();\r\n            } catch (Exception e1) {\r\n                HtmlUtil.printException(e1, out);\r\n            }\r\n        }\r\n    }\r\n    out.println(\"<br> Test result : \" + result);\r\n    return result;\r\n}"
}, {
	"Path": "samples.i18n.simple.servlet.SimpleFilter.destroy",
	"Comment": "called by the web container to indicate to a filter that it is being taken out of service.",
	"Method": "void destroy(){\r\n    this.encoding = null;\r\n    this.filterConfig = null;\r\n}"
}, {
	"Path": "samples.ejb.stateless.simple.servlet.GreeterServlet.doGet",
	"Comment": "the doget method of the servlet. handles all http get request. required by the servlet specification.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    javax.ejb.Handle beanHandle;\r\n    Greeter myGreeterBean;\r\n    GreeterHome myGreeterHome;\r\n    Greeter myGreeterRemote;\r\n    InitialContext initContext = null;\r\n    Hashtable env = new java.util.Hashtable(1);\r\n    ResourceBundle rb = ResourceBundle.getBundle(\"LocalStrings\", Locale.getDefault());\r\n    System.out.println(\"\\n\" + rb.getString(\"greeting_servlet\") + \"...\");\r\n    System.out.println(rb.getString(\"retrieving_jndi\"));\r\n    try {\r\n        initContext = new javax.naming.InitialContext();\r\n    } catch (Exception e) {\r\n        System.out.println(rb.getString(\"exception\") + \": \" + e.toString());\r\n        return;\r\n    }\r\n    try {\r\n        System.out.println(rb.getString(\"looking_up\"));\r\n        String JNDIName = \"java:comp/env/ejb/greeter\";\r\n        System.out.println(rb.getString(\"looking\") + \": \" + JNDIName);\r\n        Object objref = initContext.lookup(JNDIName);\r\n        myGreeterHome = (GreeterHome) PortableRemoteObject.narrow(objref, GreeterHome.class);\r\n    } catch (Exception e) {\r\n        System.out.println(rb.getString(\"greeter_bean\") + \" - \" + rb.getString(\"is_registered\") + \"?: \" + e.toString());\r\n        return;\r\n    }\r\n    try {\r\n        System.out.println(rb.getString(\"creating\"));\r\n        myGreeterRemote = myGreeterHome.create();\r\n    } catch (CreateException e) {\r\n        System.out.println(rb.getString(\"could_not\") + \": \" + e.toString());\r\n        return;\r\n    }\r\n    System.out.println(rb.getString(\"getting\"));\r\n    String theMessage = myGreeterRemote.getGreeting();\r\n    System.out.println(rb.getString(\"got\") + \": \" + theMessage);\r\n    System.out.println(rb.getString(\"storing\"));\r\n    request.setAttribute(\"message\", theMessage);\r\n    System.out.println(rb.getString(\"dispatching\"));\r\n    response.setContentType(\"text/html\");\r\n    RequestDispatcher dispatcher;\r\n    dispatcher = getServletContext().getRequestDispatcher(\"/GreeterView.jsp\");\r\n    dispatcher.include(request, response);\r\n    return;\r\n}"
}, {
	"Path": "osgitest.HelloServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Sample Application Servlet Page<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Sample Application Servlet<\/h1>\");\r\n    writer.println(\"This is the output of a servlet that is part of\");\r\n    writer.println(\"the Hello, World application.  It displays the\");\r\n    writer.println(\"request headers from the request we are currently\");\r\n    writer.println(\"processing.\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basicdbinitsql.BasicDBInitSqlServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic DB InitSQL PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic DB InitSQL PaaS Application<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT c_id, c_name from customer\");\r\n            writer.println(\"<table border=\\\"1\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"Data retrieved from table \\\"customer\\\"\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"<td>\" + \"Customer ID\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Customer Name\" + \"<\/td>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(2) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "test.admin.BaseAdminConsoleTest.checkForAdminConsoleDirectory",
	"Comment": "this method uses the amx api to get the install directory, then checks tosee if the admin console directory is present.",
	"Method": "boolean checkForAdminConsoleDirectory(){\r\n    File directory = new File(this.getDomainRoot().getInstallDir() + GLASSFISH_DIR + CONSOLE_DIR_PATH);\r\n    return directory.exists();\r\n}"
}, {
	"Path": "org.glassfish.jdbc.devtests.v3.util.TablesUtil.verifyTableContent",
	"Comment": "verifies table content by getting the number of rows in it, used by the jdbc devtests. returns a true if there are any rows in the table.",
	"Method": "boolean verifyTableContent(DataSource ds1,PrintWriter out,String tableName,String columnName,String content){\r\n    Connection con = null;\r\n    Statement stmt = null;\r\n    ResultSet rs = null;\r\n    boolean result = false;\r\n    try {\r\n        con = ds1.getConnection();\r\n        stmt = con.createStatement();\r\n        rs = stmt.executeQuery(\"select count(*) ROW_COUNT from \" + tableName + \" where \" + columnName + \" = '\" + content + \"'\");\r\n        if (rs.next()) {\r\n            if (rs.getInt(\"ROW_COUNT\") > 0) {\r\n                result = true;\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        HtmlUtil.printException(e, out);\r\n    } finally {\r\n        try {\r\n            if (stmt != null) {\r\n                stmt.close();\r\n            }\r\n        } catch (Exception e) {\r\n            HtmlUtil.printException(e, out);\r\n        }\r\n        try {\r\n            if (con != null) {\r\n                con.close();\r\n            }\r\n        } catch (Exception e) {\r\n            HtmlUtil.printException(e, out);\r\n        }\r\n        return result;\r\n    }\r\n}"
}, {
	"Path": "taglib.MyListener.contextInitialized",
	"Comment": "receives notification that the web application initializationprocess is starting.",
	"Method": "void contextInitialized(ServletContextEvent sce){\r\n    ServletContext sc = sce.getServletContext();\r\n    try {\r\n        int loginTimeout = ds1.getLoginTimeout();\r\n        sc.log(\"ds1-login-timeout=\" + loginTimeout);\r\n        loginTimeout = ds2.getLoginTimeout();\r\n        sc.log(\",ds2-login-timeout=\" + loginTimeout);\r\n        loginTimeout = ds3.getLoginTimeout();\r\n        sc.log(\",ds3-login-timeout=\" + loginTimeout);\r\n        InitialContext ic = new InitialContext();\r\n        DataSource ds4 = (DataSource) ic.lookup(\"java:comp/env/myDataSource4\");\r\n        loginTimeout = ds4.getLoginTimeout();\r\n        sc.log(\",ds4-login-timeout=\" + loginTimeout);\r\n        DataSource ds5 = (DataSource) ic.lookup(\"java:comp/env/myDataSource5\");\r\n        loginTimeout = ds5.getLoginTimeout();\r\n        sc.log(\",ds5-login-timeout=\" + loginTimeout);\r\n        DataSource ds6 = (DataSource) ic.lookup(\"java:comp/env/jdbc/myDataSource6\");\r\n        loginTimeout = ds6.getLoginTimeout();\r\n        sc.log(\",ds6-login-timeout=\" + loginTimeout);\r\n        sc.setAttribute(\"success\", new Object());\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "samples.i18n.simple.i18ntag.MessageTag.setKey",
	"Comment": "set the message key required to retrieve message from the resource bundle",
	"Method": "void setKey(String key){\r\n    this.key = key;\r\n}"
}, {
	"Path": "test.ConfigListener.contextInitialized",
	"Comment": "receives notification that the web application initializationprocess is starting.",
	"Method": "void contextInitialized(ServletContextEvent sce){\r\n    sce.getServletContext().getSessionCookieConfig().setName(\"MYJSESSIONID\");\r\n}"
}, {
	"Path": "amxtest.AMXTestBase.getAllAMX",
	"Comment": "get all amx mbeans that were found when the test startedcaller should use the querymgr if a fresh set is needed",
	"Method": "Set<AMXProxy> getAllAMX(){\r\n    final Set<AMXProxy> allAMX = getQueryMgr().queryAll();\r\n    assert allAMX.size() >= 30;\r\n    return allAMX;\r\n}"
}, {
	"Path": "samples.i18n.simple.servlet.SimpleI18nServlet.getServletInfo",
	"Comment": "simple servlet to demonstrate i18n capabilities of the application server",
	"Method": "String getServletInfo(){\r\n    return \"This is a simple servlet to demonstrate i18n capabilities of the Application Server\";\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.txlevelswitch.ejb.SimpleSessionBean.test1",
	"Comment": "get connection and do some database updates. then throwan exception before tx commits and ensure that the updatesdid not happen",
	"Method": "boolean test1(){\r\n    DataSource ds = (DataSource) ic_.lookup(\"java:comp/env/DataSource\");\r\n    Connection conn1 = null;\r\n    Statement stmt1 = null;\r\n    ResultSet rs1 = null;\r\n    int keyToCompare = 10;\r\n    boolean passed = false;\r\n    try {\r\n        conn1 = ds.getConnection();\r\n        stmt1 = conn1.createStatement();\r\n        stmt1.executeUpdate(\"DELETE FROM TXLEVELSWITCH\");\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (stmt1 != null) {\r\n            try {\r\n                stmt1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n        if (conn1 != null) {\r\n            try {\r\n                conn1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n    }\r\n    try {\r\n        updateDb(\"TXLEVELSWITCH\", keyToCompare);\r\n    } catch (Exception e) {\r\n        if (!(e instanceof EJBException)) {\r\n            e.printStackTrace();\r\n            return false;\r\n        } else {\r\n            System.out.println(\"Caught expected EJBException\");\r\n        }\r\n    }\r\n    try {\r\n        conn1 = ds.getConnection();\r\n        stmt1 = conn1.createStatement();\r\n        rs1 = stmt1.executeQuery(\"SELECT * FROM TXLEVELSWITCH\");\r\n        while (rs1.next()) {\r\n            int key = rs1.getInt(\"c_id\");\r\n            if (key == 10) {\r\n                System.out.println(\"update happened successfully. It should have failed\");\r\n                return false;\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (rs1 != null) {\r\n            try {\r\n                rs1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n        if (stmt1 != null) {\r\n            try {\r\n                stmt1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n        if (conn1 != null) {\r\n            try {\r\n                conn1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "amxtest.Demo.getAllAMX",
	"Comment": "get all amx mbeans that were found when the test startedcaller should use the querymgr if a fresh set is needed",
	"Method": "Set<AMXProxy> getAllAMX(){\r\n    final Set<AMXProxy> allAMX = mQueryMgr.queryAll();\r\n    assert allAMX.size() >= 30;\r\n    return allAMX;\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.bmp.finder.ejb.EnrollerBean.getCourseIds",
	"Comment": "return an arraylist of courseids that student is enroller in",
	"Method": "ArrayList getCourseIds(String studentId){\r\n    try {\r\n        return selectCourse(studentId);\r\n    } catch (Exception ex) {\r\n        throw new EJBException(\"getCourseIds: \" + ex.getMessage());\r\n    }\r\n}"
}, {
	"Path": "samples.i18n.simple.servlet.SimpleFilter.getEncoding",
	"Comment": "gets the encoding from initialization parameter and sets it to this filter",
	"Method": "String getEncoding(ServletRequest req){\r\n    return this.encoding;\r\n}"
}, {
	"Path": "com.oracle.hk2.devtest.cdi.extension.CDIExtension.beforeShutdown",
	"Comment": "this one is a little different, as it cannot use the application tocommunicate success or failure.instead it writes out a file thatthe test will look for after the application has been undeployed",
	"Method": "void beforeShutdown(BeforeShutdown beforeShutdown){\r\n    ServiceLocator locator = getServiceLocator();\r\n    if (locator == null)\r\n        return;\r\n    File destructoFile = createDestructionFileObject();\r\n    try {\r\n        destructoFile.createNewFile();\r\n    } catch (IOException ioe) {\r\n        System.err.println(\"ERROR:  Failed to create file \" + destructoFile.getAbsolutePath());\r\n        ioe.printStackTrace();\r\n    }\r\n}"
}, {
	"Path": "samples.ejb.stateless.simple.ejb.GreeterEJB.ejbPassivate",
	"Comment": "serializes the state of the bean to secondary storage. required by ejb spec.",
	"Method": "void ejbPassivate(){\r\n    System.out.println(\"ejbPassivate() on obj \" + this);\r\n}"
}, {
	"Path": "org.glassfish.jaccApi.common.TestAuthConfigProvider.getServerAuthConfig",
	"Comment": "the actual factory method that creates the factory used to eventually obtain the delegate for a sam.",
	"Method": "ServerAuthConfig getServerAuthConfig(String layer,String appContext,CallbackHandler handler){\r\n    return new TestServerAuthConfig(layer, appContext, handler == null ? createDefaultCallbackHandler() : handler, providerProperties, serverAuthModule);\r\n}"
}, {
	"Path": "test.MyHttpSessionListener.sessionDestroyed",
	"Comment": "receives notification that a session is about to be invalidated.",
	"Method": "void sessionDestroyed(HttpSessionEvent hse){\r\n    HttpSession session = hse.getSession();\r\n    ServletContext sc = session.getServletContext();\r\n    sc.setAttribute(\"successHttpSessionListener\", new Object());\r\n}"
}, {
	"Path": "persistence.WebCustomer.hashCode",
	"Comment": "returns a hash code value for the object.this implementation computes a hash code value based on the id fields in this object.",
	"Method": "int hashCode(){\r\n    int hash = 0;\r\n    hash += (this.custId != null ? this.custId.hashCode() : 0);\r\n    return hash;\r\n}"
}, {
	"Path": "devtests.deployment.util.DescriptorContentComparator.compareContent",
	"Comment": "use reflection to look at fields for comparison.it is important to note that if instances under comparison are inparameter set, then the comparison result will always betrue. this resolves the issues of circular references.",
	"Method": "boolean compareContent(Descriptor d1,Descriptor d2,boolean compareContent,Field field,Object o1,Object o2,Set set){\r\n    if (o1 == o2 || isNullEquivalent(field, o1) && isNullEquivalent(field, o2)) {\r\n        return true;\r\n    }\r\n    if (o1 == null && o2 != null || o1 != null && o2 == null || !o2.getClass().equals(o1.getClass()) || isExcludedClass(o1.getClass())) {\r\n        if (logger.isLoggable(Level.FINE)) {\r\n            logger.fine(\"... null, class mismatch or excluded for \" + ((field != null) ? field : \"\") + \", o1 = \" + o1 + \", o2 = \" + o2);\r\n        }\r\n        return false;\r\n    }\r\n    Package p1 = o1.getClass().getPackage();\r\n    Package p2 = o2.getClass().getPackage();\r\n    if (p1 != null && !p1.equals(p2) || p1 == null && p2 != null) {\r\n        if (logger.isLoggable(Level.FINE)) {\r\n            logger.fine(\"... diff package: obj1 = \" + o1);\r\n            logger.fine(\"... diff package: obj2 = \" + o2);\r\n        }\r\n        return false;\r\n    } else if (o1.getClass().isArray()) {\r\n        if (!compareArrayContent(o1, o2, set)) {\r\n            if (logger.isLoggable(Level.FINE)) {\r\n                logger.fine(\"... diff array: obj1 = \" + o1);\r\n                logger.fine(\"... diff array: obj2 = \" + o2);\r\n            }\r\n            return false;\r\n        }\r\n    } else if (o1 instanceof Collection) {\r\n        if (!compareCollectionContent((Collection) o1, (Collection) o2, set)) {\r\n            if (logger.isLoggable(Level.FINE)) {\r\n                logger.fine(\"... diff coll: obj1 = \" + o1);\r\n                logger.fine(\"... diff coll: obj2 = \" + o2);\r\n            }\r\n            return false;\r\n        }\r\n    } else if (o1 instanceof Map) {\r\n        if (!compareMapContent((Map) o1, (Map) o2, set)) {\r\n            if (logger.isLoggable(Level.FINE)) {\r\n                logger.fine(\"... diff map: obj1 = \" + o1);\r\n                logger.fine(\"... diff map: obj2 = \" + o2);\r\n            }\r\n            return false;\r\n        }\r\n    } else if (p1 != null && (p1.getName().startsWith(\"com.sun.enterprise.deployment\") || p1.getName().startsWith(\"org.glassfish.ejb.deployment\") || p1.getName().startsWith(\"org.glassfish.web.deployment\"))) {\r\n        if (o1 instanceof Descriptor) {\r\n            ReferencePair rd = new ReferencePair(o1, o2);\r\n            if (!set.add(rd)) {\r\n                return true;\r\n            }\r\n        }\r\n        Class clazz = o2.getClass();\r\n        while (clazz != null && !isExcludedClass(clazz)) {\r\n            if (logger.isLoggable(Level.FINER)) {\r\n                logger.finer(\"clazz = \" + clazz);\r\n            }\r\n            Field[] declaredFields = clazz.getDeclaredFields();\r\n            for (Field df : declaredFields) {\r\n                try {\r\n                    lastField = df;\r\n                    if (logger.isLoggable(Level.FINER)) {\r\n                        logger.finer(\"... \\tdf = \" + df);\r\n                    }\r\n                    if (isExcludedNamedField(df) || Modifier.isStatic(df.getModifiers())) {\r\n                        continue;\r\n                    }\r\n                    df.setAccessible(true);\r\n                    Object v1 = df.get(o1);\r\n                    Object v2 = df.get(o2);\r\n                    if (!compareContent(df, v1, v2, set)) {\r\n                        return false;\r\n                    }\r\n                } catch (Exception ex) {\r\n                    throw new IllegalStateException(ex);\r\n                }\r\n            }\r\n            clazz = clazz.getSuperclass();\r\n        }\r\n    } else {\r\n        boolean result = o1.equals(o2);\r\n        if (!result && logger.isLoggable(Level.FINE)) {\r\n            logger.fine(\"... diff content: obj1 = \" + o1);\r\n            logger.fine(\"... diff content: obj2 = \" + o2);\r\n        }\r\n        return result;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "samples.ejb.stateless.simple.servlet.GreeterServlet.doPost",
	"Comment": "the dopost method of the servlet. handles all http post request. required by the servlet specification.",
	"Method": "void doPost(HttpServletRequest request,HttpServletResponse response){\r\n    doGet(request, response);\r\n}"
}, {
	"Path": "persistence.WebCustomer.equals",
	"Comment": "determines whether another object is equal to this webcustomer.the result is true if and only if the argument is not null and is a webcustomer object that has the same id field values as this object.",
	"Method": "boolean equals(Object object){\r\n    if (!(object instanceof WebCustomer)) {\r\n        return false;\r\n    }\r\n    WebCustomer other = (WebCustomer) object;\r\n    if (this.custId != other.custId && (this.custId == null || !this.custId.equals(other.custId)))\r\n        return false;\r\n    return true;\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.flushconnectionpool.ejb.SimpleBMPBean.test1",
	"Comment": "acquire 4 connections, closing them at the end of the loop.cache the first connection, and before acquiring the last connection, do a flush connection pool. the 5th connection got after the flush should be different from the first connection got.",
	"Method": "boolean test1(){\r\n    Connection firstConnection = null;\r\n    Connection lastConnection = null;\r\n    com.sun.appserv.jdbc.DataSource ds = null;\r\n    ds = this.ds;\r\n    boolean passed = false;\r\n    for (int i = 0; i < 5; i++) {\r\n        Connection conn = null;\r\n        try {\r\n            if (i == 4) {\r\n                if (!flushConnectionPool()) {\r\n                    break;\r\n                }\r\n            }\r\n            conn = ds.getConnection();\r\n            System.out.println(\"********i=\" + i + \"conn=\" + ds.getConnection(conn));\r\n            if (i == 0) {\r\n                firstConnection = ds.getConnection(conn);\r\n            } else if (i == 4) {\r\n                lastConnection = ds.getConnection(conn);\r\n            }\r\n            passed = (firstConnection != lastConnection);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            passed = false;\r\n        } finally {\r\n            if (conn != null) {\r\n                try {\r\n                    conn.close();\r\n                } catch (Exception e1) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return passed;\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.rollbacktest.RollbackTestServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic DB PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic DB PaaS Application<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT TABLENAME from sys.systables\");\r\n            writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"List of Tables in Database\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td align=\\\"right\\\">\" + \" \" + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "test.admin.BaseAdminConsoleTest.getUrl",
	"Comment": "request the specified url and return the contents as a string",
	"Method": "String getUrl(String url){\r\n    GetMethod get = new GetMethod(url);\r\n    get.getParams().setCookiePolicy(CookiePolicy.RFC_2109);\r\n    get.setFollowRedirects(true);\r\n    int statusCode = client.executeMethod(get);\r\n    if ((statusCode != HttpStatus.SC_OK) && (statusCode != HttpStatus.SC_ACCEPTED)) {\r\n        Assert.fail(\"BaseAdminConsoleTest.getUrlAndTestForString() failed.  HTTP Status Code:  \" + statusCode);\r\n    }\r\n    String response = getString(get.getResponseBodyAsStream());\r\n    get.releaseConnection();\r\n    return response;\r\n}"
}, {
	"Path": "test.clusterteardown.ClusterTeardownTest.deleteInstanceTest",
	"Comment": "previously deleteinstancetest would never say boo no matter what happened...",
	"Method": "void deleteInstanceTest(){\r\n    AsadminReturn ar1 = asadminWithOutput(\"stop-local-instance\", \"--kill\", i1name);\r\n    AsadminReturn ar2 = asadminWithOutput(\"stop-local-instance\", \"--kill\", i2name);\r\n    AsadminReturn ar3 = asadminWithOutput(\"delete-local-instance\", i1name);\r\n    AsadminReturn ar4 = asadminWithOutput(\"delete-local-instance\", i2name);\r\n    report(tn + \"stop-local-instance1\", ar1.returnValue);\r\n    report(tn + \"stop-local-instance2\", ar2.returnValue);\r\n    report(tn + \"delete-local-instance1\", ar3.returnValue);\r\n    report(tn + \"delete-local-instance2\", ar4.returnValue);\r\n    Assert.assertTrue(ar1.returnValue, \"Error stopping instance \" + i1name + \": \" + ar1.outAndErr);\r\n    Assert.assertTrue(ar2.returnValue, \"Error stopping instance \" + i2name + \": \" + ar2.outAndErr);\r\n    Assert.assertTrue(ar3.returnValue, \"Error deleting instance \" + i1name + \": \" + ar3.outAndErr);\r\n    Assert.assertTrue(ar4.returnValue, \"Error deleting instance \" + i2name + \": \" + ar4.outAndErr);\r\n}"
}, {
	"Path": "com.sun.devtest.security.plogin.converter.client.ConverterClient.main",
	"Comment": "the main method of the client. this invokes the converterbean to use its services. it then asks the bean to convert 100 dollars to yen and 100 yen to euro. the results are printed at the terminal where the client is run. see appclient documentation in sunone app server to run the clinet.",
	"Method": "void main(String[] args){\r\n    ConverterClient client = new ConverterClient();\r\n    client.run(args);\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.jms.jmsejb.HelloBean.sendAndReceiveMessage",
	"Comment": "tests doing a receive that depends on a send.theymust be in separate transactions.",
	"Method": "void sendAndReceiveMessage(){\r\n    QueueConnection connection = null;\r\n    try {\r\n        if (beanManagedTx) {\r\n            sc.getUserTransaction().begin();\r\n        } else {\r\n            System.out.println(\"Skipping sendAndReceive test b/c CMT\");\r\n            return;\r\n        }\r\n        connection = qcFactory.createQueueConnection();\r\n        QueueSession session = connection.createQueueSession(true, 0);\r\n        String msgText = \"sendandreceive\";\r\n        sendMessageInternal(session, msgText);\r\n        sc.getUserTransaction().commit();\r\n        System.out.println(\"Sent message \" + msgText);\r\n        connection.start();\r\n        sc.getUserTransaction().begin();\r\n        recvMessageInternal(session);\r\n        sc.getUserTransaction().commit();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        try {\r\n            sc.getUserTransaction().rollback();\r\n        } catch (Exception ne) {\r\n        }\r\n        throw new EJBException(e);\r\n    } finally {\r\n        try {\r\n            if (connection != null) {\r\n                connection.close();\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "samples.i18n.simple.i18ntag.MessageTag.getKey",
	"Comment": "get the message key required to retrieve message from the resource bundle",
	"Method": "String getKey(){\r\n    return key;\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.multipleshareddbservicetest.EmployeeServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Multiple Shared DB Service Test<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<img height=\\\"200\\\" width=\\\"200\\\" src=\\\"images/numbers.jpg\\\">\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Multiple Shared DB Service PaaS Application<\/h1>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (hrDs != null && salDs != null) {\r\n        Statement stmt1 = null;\r\n        PreparedStatement stmt2 = null;\r\n        try {\r\n            stmt1 = hrDs.getConnection().createStatement();\r\n            DatabaseMetaData dbMetadata1 = stmt1.getConnection().getMetaData();\r\n            String dbUrl1 = dbMetadata1.getURL();\r\n            writer.println(\"DB URL : \" + dbUrl1 + \"\\n\");\r\n            if (dbUrl1.indexOf(\"hr_database\") == -1) {\r\n                throw new Exception(\"Custom Database [hr_database] is not created while provisioning.\");\r\n            }\r\n            ResultSet rs1 = stmt1.executeQuery(\"SELECT emp_id, emp_name from HR\");\r\n            String salQuery = \"SELECT emp_sal from SALARY WHERE emp_id = ? \";\r\n            stmt2 = salDs.getConnection().prepareStatement(salQuery);\r\n            DatabaseMetaData dbMetadata2 = stmt2.getConnection().getMetaData();\r\n            String dbUrl2 = dbMetadata2.getURL();\r\n            writer.println(\"DB URL : \" + dbUrl2 + \"\\n\");\r\n            if (dbUrl2.indexOf(\"salary_database\") == -1) {\r\n                throw new Exception(\"Custom Database [salary_database] is not created while provisioning.\");\r\n            }\r\n            writer.println(\"<table border=\\\"1\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"Employee Information retrieved\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"<td>\" + \"Employee ID\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Employee Name\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Employee Salary\" + \"<\/td>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs1.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td>\" + rs1.getObject(1) + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs1.getObject(2) + \"<\/td>\");\r\n                stmt2.setInt(1, (Integer) rs1.getObject(1));\r\n                ResultSet rs2 = stmt2.executeQuery();\r\n                while (rs2.next()) {\r\n                    writer.println(\"  <td>\" + rs2.getObject(1) + \"<\/td>\");\r\n                }\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt1 != null) {\r\n                try {\r\n                    stmt1.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            if (stmt2 != null) {\r\n                try {\r\n                    stmt2.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "org.glassfish.jdbc.devtests.v3.test.ApplicationAuthTest.testNoCredentials",
	"Comment": "tests application authentication when username and password are notspecified.",
	"Method": "boolean testNoCredentials(DataSource ds,PrintWriter out){\r\n    boolean result = false;\r\n    Connection conn = null;\r\n    out.println(\"<h4> App Auth Test with no credentials <\/h4>\");\r\n    try {\r\n        out.println(\"<br> Getting a Connection without any credentials\");\r\n        conn = ds.getConnection();\r\n    } catch (Exception ex) {\r\n        out.println(\"<br> in the Exception block since this should not pass\");\r\n        result = true;\r\n    } finally {\r\n        if (conn != null) {\r\n            try {\r\n                conn.close();\r\n            } catch (Exception e1) {\r\n                HtmlUtil.printException(e1, out);\r\n            }\r\n        }\r\n    }\r\n    out.println(\"<br> Test result : \" + result);\r\n    return result;\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.jms.jmsejb.HelloBean.sendMessage1",
	"Comment": "send a message.in bmt case, create session beforestarting tx.",
	"Method": "String sendMessage1(String msg){\r\n    QueueConnection connection = null;\r\n    QueueSession session = null;\r\n    try {\r\n        connection = qcFactory.createQueueConnection();\r\n        session = connection.createQueueSession(true, 0);\r\n        if (beanManagedTx) {\r\n            sc.getUserTransaction().begin();\r\n        }\r\n        sendMessageInternal(session, msg);\r\n        try {\r\n            session.commit();\r\n            throw new java.lang.IllegalStateException(\"Didn't get session.commit exception\");\r\n        } catch (javax.jms.TransactionInProgressException tipe) {\r\n            System.out.println(\"Successfully got tx in progress excep \" + \"after calling session.commit in a global tx\");\r\n        } catch (javax.jms.JMSException jmse) {\r\n            System.out.println(\"Got JMSException - it's also ok - \" + \"after calling session.commit in a global tx\");\r\n        } catch (java.lang.IllegalStateException e) {\r\n            throw new JMSException(\"Should have gotten exception for tx-in-progress\");\r\n        }\r\n        if (beanManagedTx) {\r\n            sc.getUserTransaction().commit();\r\n        }\r\n        try {\r\n            session.commit();\r\n            throw new JMSException(\"Didn't get session.commit exception\");\r\n        } catch (javax.jms.JMSException jmse) {\r\n            System.out.println(\"Successfully got session.commit \" + \"exception in ejb\");\r\n        }\r\n        try {\r\n            session.rollback();\r\n            throw new JMSException(\"Didn't get session.rollback exception\");\r\n        } catch (javax.jms.JMSException jmse) {\r\n            System.out.println(\"Successfully got session.rollback \" + \"exception in ejb\");\r\n        }\r\n        System.out.println(\"Sent message\");\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        if (beanManagedTx) {\r\n            try {\r\n                sc.getUserTransaction().rollback();\r\n            } catch (Exception ne) {\r\n            }\r\n        }\r\n        throw new EJBException(e);\r\n    } finally {\r\n        try {\r\n            if (connection != null) {\r\n                connection.close();\r\n                connection.close();\r\n                try {\r\n                    session.close();\r\n                    session.createObjectMessage();\r\n                    throw new JMSException(\"Didn't get expected illegal state exception\");\r\n                } catch (javax.jms.IllegalStateException j1) {\r\n                    System.out.println(\"Successfully got illegal state exception \" + \"when calling session method after close\");\r\n                } catch (javax.jms.JMSException j2) {\r\n                    throw new JMSException(\"Got wrong jmsexception\");\r\n                }\r\n                try {\r\n                    session.getMessageListener();\r\n                    throw new JMSException(\"Didn't get expected illegal state exception\");\r\n                } catch (javax.jms.IllegalStateException j3) {\r\n                    System.out.println(\"Successfully got illegal state exception \" + \"when calling session method after close\");\r\n                } catch (javax.jms.JMSException j4) {\r\n                    throw new JMSException(\"Got wrong jmsexception\");\r\n                }\r\n            }\r\n        } catch (Exception ne) {\r\n        }\r\n    }\r\n    return msg;\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basicdbwithresourcesxml.CoffeeServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic Db with glassfish-resources.xml PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<img height=\\\"200\\\" width=\\\"200\\\" src=\\\"images/Coffee.jpg\\\">\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic Db with glassfish-resources.xml PaaS Application<\/h1>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            DatabaseMetaData dbMetadata = stmt.getConnection().getMetaData();\r\n            String dbUrl = dbMetadata.getURL();\r\n            writer.println(\"DB URL : \" + dbUrl + \"\\n\");\r\n            if (dbUrl.indexOf(\"foobar\") == -1) {\r\n                throw new Exception(\"Custom Database [foobar] is not created while provisioning.\");\r\n            }\r\n            ResultSet rs = stmt.executeQuery(\"SELECT c_id, c_name from coffee\");\r\n            writer.println(\"<table border=\\\"1\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"Data retrieved from table \\\"coffee\\\"\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"<td>\" + \"Coffee ID\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Coffee Name\" + \"<\/td>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(2) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.lazysharedservice.BasicDBPaaSServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic DB PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic DB PaaS Application<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT TABLENAME from sys.systables\");\r\n            writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"List of Tables in Database\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td align=\\\"right\\\">\" + \" \" + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "persistence.WebCustomer.setCustname",
	"Comment": "sets the custname of this webcustomer to the specified value.",
	"Method": "void setCustname(String custname){\r\n    this.custname = custname;\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.jms.jmsejb.HelloBean.receiveMessage3",
	"Comment": "receive a message using a session that was saved aspart of the ejbs state.then close the sessionand its connection.",
	"Method": "void receiveMessage3(){\r\n    if (savedConnection == null) {\r\n        System.out.println(\"saved connection is null\");\r\n        return;\r\n    }\r\n    try {\r\n        if (beanManagedTx) {\r\n            sc.getUserTransaction().begin();\r\n        }\r\n        savedConnection.start();\r\n        Message message = recvMessageInternal(savedSession);\r\n        if (beanManagedTx) {\r\n            sc.getUserTransaction().commit();\r\n        }\r\n        System.out.println(\"Received message \" + message);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        if (beanManagedTx) {\r\n            try {\r\n                sc.getUserTransaction().rollback();\r\n            } catch (Exception ne) {\r\n            }\r\n        }\r\n        throw new EJBException(e);\r\n    } finally {\r\n        try {\r\n            if (savedConnection != null) {\r\n                savedConnection.close();\r\n                savedConnection = null;\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.ejb30.clientview.adapted.SlessEJB.sharedRemoteLocalBusinessSuper",
	"Comment": "business method declared on a super interface extended by bothremote and local business interface.test that tx attribute isset appropriately for local vs. remote.",
	"Method": "void sharedRemoteLocalBusinessSuper(boolean expectTx){\r\n    boolean hasTx = false;\r\n    try {\r\n        TransactionManager tm = (TransactionManager) new InitialContext().lookup(\"java:appserver/TransactionManager\");\r\n        hasTx = (tm.getStatus() != Status.STATUS_NO_TRANSACTION);\r\n    } catch (Exception e) {\r\n        throw new EJBException(e);\r\n    }\r\n    if (expectTx && hasTx) {\r\n        System.out.println(\"Successfully verified tx\");\r\n    } else if (!expectTx && !hasTx) {\r\n        System.out.println(\"Successfully verified there is no tx\");\r\n    } else {\r\n        throw new EJBException(\"Invalid tx status.  ExpectTx = \" + expectTx + \" hasTx = \" + hasTx);\r\n    }\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.jms.jmsejb.HelloBean.receiveMessage1",
	"Comment": "receive a message. in bmt case, create sessionbefore tx start.",
	"Method": "void receiveMessage1(){\r\n    QueueConnection connection = null;\r\n    try {\r\n        connection = qcFactory.createQueueConnection();\r\n        QueueSession session = connection.createQueueSession(true, 0);\r\n        if (beanManagedTx) {\r\n            sc.getUserTransaction().begin();\r\n        }\r\n        connection.start();\r\n        Message message = recvMessageInternal(session);\r\n        if (beanManagedTx) {\r\n            sc.getUserTransaction().commit();\r\n        }\r\n        System.out.println(\"Received message \" + message);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        if (beanManagedTx) {\r\n            try {\r\n                sc.getUserTransaction().rollback();\r\n            } catch (Exception ne) {\r\n            }\r\n        }\r\n        throw new EJBException(e);\r\n    } finally {\r\n        try {\r\n            if (connection != null) {\r\n                connection.close();\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.scale_service.ScaleServicePaaSServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Simple Servlet<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Simple Servlet<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.connsharing.xa.ejb.SimpleSessionBean.query2",
	"Comment": "query the value modified in the second bean and ensure that itis correct.",
	"Method": "boolean query2(){\r\n    DataSource ds = (DataSource) ic_.lookup(\"java:comp/env/DataSource\");\r\n    Connection conn = null;\r\n    Statement stmt = null;\r\n    ResultSet rs = null;\r\n    ResultSet rs1 = null;\r\n    String str1 = null;\r\n    String str2 = null;\r\n    try {\r\n        conn = ds.getConnection();\r\n        stmt = conn.createStatement();\r\n        rs = stmt.executeQuery(\"SELECT * FROM CONNSHARING WHERE c_id=100\");\r\n        if (rs.next()) {\r\n            str1 = rs.getString(2);\r\n            System.out.println(\" str1 => \" + str1);\r\n        }\r\n        rs1 = stmt.executeQuery(\"SELECT * FROM CONNSHARING WHERE c_id=200\");\r\n        if (rs1.next()) {\r\n            str2 = rs1.getString(2);\r\n            System.out.println(\" str2 => \" + str2);\r\n        }\r\n        if (\"ADITYA\".equals(str1.trim()) && \"ADITYA_BEAN_2_2\".equals(str2.trim())) {\r\n            return true;\r\n        }\r\n        return false;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (rs != null) {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        if (rs1 != null) {\r\n            try {\r\n                rs1.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        if (stmt != null) {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        try {\r\n            stmt = conn.createStatement();\r\n            stmt.executeUpdate(\"DELETE FROM CONNSHARING WHERE c_id=100\");\r\n            stmt.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            stmt = conn.createStatement();\r\n            stmt.executeUpdate(\"DELETE FROM CONNSHARING WHERE c_id=200\");\r\n            stmt.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (conn != null) {\r\n            try {\r\n                conn.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.oracle.hk2.devtest.cdi.runner.BasicCDITest.testBasicHK2CDIInjection",
	"Comment": "ensures that a servicelocator can be injected into a cdi bean",
	"Method": "void testBasicHK2CDIInjection(){\r\n    BasicEjb basic = (BasicEjb) context.lookup(BASIC_EJB_JNDI_NAME);\r\n    Assert.assertNotNull(basic);\r\n    Assert.assertTrue(basic.cdiManagerInjected());\r\n    Assert.assertTrue(basic.serviceLocatorInjected());\r\n    basic.installHK2Service();\r\n    Assert.assertTrue(basic.hk2ServiceInjectedWithEjb());\r\n}"
}, {
	"Path": "samples.ejb.stateless.simple.ejb.GreeterEJB.ejbActivate",
	"Comment": "loads the state of the bean from secondary storage. required by ejb spec.",
	"Method": "void ejbActivate(){\r\n    System.out.println(\"ejbActivate() on obj \" + this);\r\n}"
}, {
	"Path": "samples.i18n.simple.servlet.SimpleFilter.init",
	"Comment": "called by the web container to indicate to a filter that it is being placed into service",
	"Method": "void init(FilterConfig filterConfig){\r\n    try {\r\n        this.filterConfig = filterConfig;\r\n        String param = filterConfig.getInitParameter(\"usefilter\");\r\n        this.encoding = filterConfig.getInitParameter(\"encoding\");\r\n        if (param.equals(\"true\")) {\r\n            this.usefilter = true;\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"
}, {
	"Path": "com.oracle.hk2.devtest.cdi.extension.CDIExtension.afterBeanDiscovery",
	"Comment": "this method will ensure that the file which indicates that theapplication has shut down properly has been removed and thenadds the hk2 service to the system",
	"Method": "void afterBeanDiscovery(AfterBeanDiscovery afterBeanDiscovery){\r\n    ServiceLocator locator = getServiceLocator();\r\n    if (locator == null)\r\n        return;\r\n    HK2ExtensionVerifier verifier = locator.getService(HK2ExtensionVerifier.class);\r\n    verifier.afterBeanDiscoveryCalled();\r\n}"
}, {
	"Path": "samples.i18n.simple.servlet.ForwardedServlet.processRequest",
	"Comment": "processes requests for both http get and post methods.generates response with the information obtained from the forwarding servlet.",
	"Method": "void processRequest(HttpServletRequest req,HttpServletResponse res){\r\n    String charsetval = req.getParameter(\"charsetval\");\r\n    req.setCharacterEncoding(charsetval);\r\n    res.setContentType(\"text/html;charset=\" + charsetval + \"\");\r\n    java.io.PrintWriter out = res.getWriter();\r\n    String name = req.getParameter(\"name\");\r\n    out.println(\"<html>\");\r\n    out.println(\"<head>\");\r\n    out.println(\"<title>Servlet<\/title>\");\r\n    out.println(\"<\/head>\");\r\n    out.println(\"<body>\");\r\n    out.println(\"<H3> This is the name from forwarded servlet <\/H3>\");\r\n    out.println(\"<H4> The name entered was:\" + name + \"<\/h4>\");\r\n    out.println(\"<br>\");\r\n    out.println(\"<P><BR><A HREF=\\\"/i18n-simple\\\">Back to sample home<\/A><\/P>\");\r\n    out.println(\"<\/body>\");\r\n    out.println(\"<\/html>\");\r\n    out.close();\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basicdbteardownsql.DbConnectionDetailsServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            DatabaseMetaData dbMetadata = stmt.getConnection().getMetaData();\r\n            writer.println(dbMetadata.getURL());\r\n            writer.println(dbMetadata.getUserName());\r\n            writer.println(userCredentials.get(dbMetadata.getUserName()));\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "test.admin.BaseAdminConsoleTest.loginBeforeTest",
	"Comment": "this beforetest method will verify that the login form is available.onceit is found, the login form is submitted.if the login succeeds, thenthe tests are allowed to continue.if the login fails, the each test willfail.",
	"Method": "void loginBeforeTest(String url,int port){\r\n    this.adminUrl = url;\r\n    setUpEnvironment(port);\r\n    client = new HttpClient();\r\n    boolean formFound = false;\r\n    int iteration = 0;\r\n    if (!checkForAdminConsoleDirectory()) {\r\n        Assert.fail(\"The admin console directory was not found at \" + this.getDomainRoot().getInstallDir() + GLASSFISH_DIR + CONSOLE_DIR_PATH + \".  Please check your installation.\");\r\n    }\r\n    while (!formFound && iteration < AC_TEST_ITERATIONS) {\r\n        iteration++;\r\n        formFound = getUrlAndTestForStrings(adminUrl + \"login.jsf\", \"id=\\\"Login.username\\\"\");\r\n        if (!formFound) {\r\n            System.err.println(\"***** Login page not found.  Sleeping to allow app to deploy (\" + iteration + \" of \" + AC_TEST_ITERATIONS + \")...\");\r\n            Thread.sleep(AC_TEST_DELAY);\r\n        }\r\n    }\r\n    if (!formFound) {\r\n        Assert.fail(\"The login form was not found.\");\r\n    }\r\n    PostMethod post = new PostMethod(adminUrl + \"j_security_check\");\r\n    post.setRequestBody(new NameValuePair[] { new NameValuePair(\"j_username\", \"admin\"), new NameValuePair(\"j_password\", \"\") });\r\n    post.getParams().setCookiePolicy(CookiePolicy.RFC_2109);\r\n    int statusCode = client.executeMethod(post);\r\n    if (statusCode == 302) {\r\n        Header locationHeader = post.getResponseHeader(\"location\");\r\n        if (locationHeader != null) {\r\n            Assert.assertTrue(locationHeader.getValue().startsWith(this.adminUrl));\r\n        } else {\r\n            Assert.fail(\"Failed to login: no redirect header\");\r\n        }\r\n    } else if (statusCode != HttpStatus.SC_OK) {\r\n        Assert.fail(\"Login failed: \" + post.getStatusLine() + \": \" + statusCode);\r\n    }\r\n}"
}, {
	"Path": "myapp.HelloServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Sample Application Servlet Page<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Sample Application Servlet<\/h1>\");\r\n    writer.println(\"This is the output of a servlet that is part of\");\r\n    writer.println(\"the Hello, World application.  It displays the\");\r\n    writer.println(\"request headers from the request we are currently\");\r\n    writer.println(\"processing.\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.customdbname.CustomDBNameServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Custom DB Name PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Custom DB Name PaaS Application<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            DatabaseMetaData dbMetadata = stmt.getConnection().getMetaData();\r\n            String dbUrl = dbMetadata.getURL();\r\n            writer.println(\"DB URL : \" + dbUrl + \"\\n\");\r\n            if (dbUrl.indexOf(\"foobar\") == -1) {\r\n                throw new Exception(\"Custom Database [foobar] is not created while provisioning.\");\r\n            }\r\n            ResultSet rs = stmt.executeQuery(\"SELECT c_id, c_name from customer\");\r\n            writer.println(\"<table border=\\\"1\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"Data retrieved from table \\\"customer\\\"\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"<td>\" + \"Customer ID\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Customer Name\" + \"<\/td>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(2) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "persistence.WebCustomer.toString",
	"Comment": "returns a string representation of the object.this implementation constructs that representation based on the id fields.",
	"Method": "String toString(){\r\n    return \"persistence.WebCustomer[custId=\" + custId + \"]\";\r\n}"
}, {
	"Path": "com.sun.cb.JAXRRemover.createOrgKey",
	"Comment": "searches for the organization created by the jaxrpublishprogram, verifying it by checking that the key stringsmatch.",
	"Method": "javax.xml.registry.infomodel.Key createOrgKey(String keyStr){\r\n    BusinessLifeCycleManager blcm = null;\r\n    javax.xml.registry.infomodel.Key orgKey = null;\r\n    try {\r\n        rs = connection.getRegistryService();\r\n        blcm = rs.getBusinessLifeCycleManager();\r\n        System.out.println(\"Got registry service and \" + \"life cycle manager\");\r\n        orgKey = blcm.createKey(keyStr);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        if (connection != null) {\r\n            try {\r\n                connection.close();\r\n            } catch (JAXRException je) {\r\n                System.err.println(\"Connection close failed\");\r\n            }\r\n        }\r\n    }\r\n    return orgKey;\r\n}"
}, {
	"Path": "test.MyServletContextListener.contextInitialized",
	"Comment": "receives notification that the web application initializationprocess is starting.",
	"Method": "void contextInitialized(ServletContextEvent sce){\r\n    ServletContext context = sce.getServletContext();\r\n    context.setSessionTimeout(1);\r\n    if (context.getSessionTimeout() != 1) {\r\n        throw new RuntimeException(\"Get a different session timeout\");\r\n    }\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.ejb30.hello.mdb2.MessageBean.setShortValue1",
	"Comment": "value specified in deployment descriptor so this should be called.",
	"Method": "void setShortValue1(short s){\r\n    sv1 = s;\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basic.BookStoreServlet.service",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void service(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Simple PaaS Enabled BookStore Application<\/title>\");\r\n    writeCSS(writer);\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<img height=\\\"200\\\" width=\\\"200\\\" src=\\\"images/bookstore.gif\\\">\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Simple PaaS Enabled BookStore Application<\/h1>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    writer.println(\"<p>This application is served by <b>\" + getServletContext().getServerInfo() + \"<\/b> [\" + System.getProperty(\"com.sun.aas.instanceName\") + \"]<\/p>\");\r\n    writer.println(\"Please wait while accessing the bookstore database.....\");\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        DatabaseOperations operations = new DatabaseOperations();\r\n        String userName = \"World\";\r\n        operations.createAccessInfoTable(ds, writer);\r\n        operations.createBookStoreTable(ds, writer);\r\n        operations.updateAccessInfo(ds, userName, writer);\r\n        operations.addBookToTable(ds, request.getParameter(\"title\"), request.getParameter(\"authors\"), request.getParameter(\"price\"));\r\n        operations.printBooksTable(ds, writer);\r\n        generateNewBookForm(writer);\r\n    }\r\n    writer.println(\"<p/><a href=\\'BookStoreServlet\\'>My Home<\/a>\");\r\n    writer.println(\"<p><font color=red>Thanks for using Oracle PaaS Solutions<\/font><\/p>\");\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "samples.i18n.simple.i18ntag.MessageTag.doEndTag",
	"Comment": "will be called by the jsp engine when it encounters the end of the tag",
	"Method": "int doEndTag(){\r\n    try {\r\n        if (language != null) {\r\n            if (country == null)\r\n                country = \"\";\r\n            if (variant == null)\r\n                variant = \"\";\r\n        } else\r\n            language = \"en\";\r\n        java.util.Locale locale = new Locale(language, country, variant);\r\n        ResourceBundle bundle = ResourceBundle.getBundle(bundleName, locale);\r\n        String message = bundle.getString(key);\r\n        pageContext.getOut().write(\"Message from resource bundle:\" + message);\r\n    } catch (Exception e) {\r\n        throw new JspTagException(\"Error: \" + e);\r\n    }\r\n    return EVAL_PAGE;\r\n}"
}, {
	"Path": "test.admin.BaseAdminConsoleTest.getUrlAndTestForStrings",
	"Comment": "this method will request the specified url and examine the response for theneedle specified.",
	"Method": "boolean getUrlAndTestForStrings(String url,String needles){\r\n    String haystack = getUrl(url);\r\n    boolean allFound = true;\r\n    for (String needle : needles) {\r\n        if (haystack.indexOf(needle) == -1) {\r\n            allFound = false;\r\n        }\r\n    }\r\n    return allFound;\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.notxops.ejb.SimpleSessionBean.test1",
	"Comment": "get connection and do some database updates. then throwan exception before tx commits and ensure that the updatesdid not happen",
	"Method": "boolean test1(){\r\n    DataSource ds = (DataSource) ic_.lookup(\"java:comp/env/DataSource\");\r\n    Connection conn1 = null;\r\n    Statement stmt1 = null;\r\n    ResultSet rs1 = null;\r\n    boolean passed = false;\r\n    try {\r\n        conn1 = ds.getConnection();\r\n        stmt1 = conn1.createStatement();\r\n        stmt1.executeQuery(\"SELECT * FROM NOTXOPS\");\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (stmt1 != null) {\r\n            try {\r\n                stmt1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n        if (conn1 != null) {\r\n            try {\r\n                conn1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n    }\r\n    UserTransaction tx = (UserTransaction) ic_.lookup(\"java:comp/UserTransaction\");\r\n    try {\r\n        tx.begin();\r\n        conn1 = ds.getConnection();\r\n        stmt1 = conn1.createStatement();\r\n        rs1 = stmt1.executeQuery(\"SELECT * FROM NOTXOPS\");\r\n        tx.commit();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (rs1 != null) {\r\n            try {\r\n                rs1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n        if (stmt1 != null) {\r\n            try {\r\n                stmt1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n        if (conn1 != null) {\r\n            try {\r\n                conn1.close();\r\n            } catch (Exception e1) {\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.bmp.handle.mix.ejb.EnrollerBean.getCourseIds",
	"Comment": "return an arraylist of courseids that student is enroller in",
	"Method": "ArrayList getCourseIds(String studentId){\r\n    try {\r\n        return selectCourse(studentId);\r\n    } catch (Exception ex) {\r\n        throw new EJBException(\"getCourseIds: \" + ex.getMessage());\r\n    }\r\n}"
}, {
	"Path": "amxtest.AMXCoreTests.testAMXComplianceMonitorFailureCount",
	"Comment": "if this test fails, do not remove, just comment it out if the need mandates, but only temporarily",
	"Method": "void testAMXComplianceMonitorFailureCount(){\r\n    try {\r\n        final Map<ObjectName, List<String>> failures = getDomainRootProxy().getComplianceFailures();\r\n        assert failures.size() == 0 : \"Server indicates that there are non-compliant AMX MBean validator failures, failure count = \" + failures.size() + \"\\n\" + failures;\r\n    } catch (final Throwable t) {\r\n        System.out.println(\"\\n******* Test testAMXComplianceMonitorFailureCount() IGNORED, see issue #10096 ******* \\n\");\r\n        t.printStackTrace();\r\n    }\r\n}"
}, {
	"Path": "devtests.deployment.DeploymentTest.unsetup",
	"Comment": "cleans up after all tests have run.in this case, undeploys the application.",
	"Method": "void unsetup(){\r\n    undeploy();\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.initsql.ejb.SimpleSessionBean.test1",
	"Comment": "test to select the names from a table. the result set would contain different number of rows based on a session property set during the initialization sql phase. based on the property set, the number of rows are compared to test the feature.",
	"Method": "boolean test1(boolean caseSensitive){\r\n    Connection con = null;\r\n    Statement stmt = null;\r\n    ResultSet rs = null;\r\n    String query = \"Select name from WORKERS where name='Joy Joy'\";\r\n    boolean result = false;\r\n    int size = 0;\r\n    try {\r\n        con = ds1.getConnection();\r\n        stmt = con.createStatement();\r\n        rs = stmt.executeQuery(query);\r\n        if (rs != null) {\r\n            while (rs.next()) {\r\n                size++;\r\n            }\r\n        }\r\n        if (caseSensitive) {\r\n            result = size == 1;\r\n        } else {\r\n            result = size == 3;\r\n        }\r\n    } catch (SQLException ex) {\r\n        result = false;\r\n        ex.printStackTrace();\r\n    } finally {\r\n        if (rs != null) {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n            }\r\n        }\r\n        if (stmt != null) {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception ex) {\r\n            }\r\n        }\r\n        if (con != null) {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception ex) {\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.glassfish.tests.embedded.web.MyServletContextListener.contextInitialized",
	"Comment": "receives notification that the web application initializationprocess is starting.",
	"Method": "void contextInitialized(ServletContextEvent sce){\r\n    sce.getServletContext().addListener(\"org.glassfish.tests.embedded.web.NewServletRequestListener\");\r\n}"
}, {
	"Path": "amxtest.Demo.getAllDescendents",
	"Comment": "get all amx mbeans that are descendendts of the specified mbean",
	"Method": "List<T> getAllDescendents(AMXProxy top,Class<T> clazz){\r\n    final AMXProxy[] a = mQueryMgr.queryDescendants(top.objectName());\r\n    final List<AMXProxy> list = ListUtil.newListFromArray(a);\r\n    return Util.asProxyList(list, clazz);\r\n}"
}, {
	"Path": "devtests.deployment.util.JSR88Deployer.clearReceivedEvents",
	"Comment": "clear the collection of received events recorded by this deployer.",
	"Method": "void clearReceivedEvents(){\r\n    this.receivedEvents.clear();\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basicsd.BasicSDPaaSServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic DB PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic DB PaaS Application<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT TABLENAME from sys.systables\");\r\n            writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"List of Tables in Database\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td align=\\\"right\\\">\" + \" \" + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.javaee_shared_service.BookStoreServlet.service",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void service(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Simple PaaS Enabled BookStore Application<\/title>\");\r\n    writeCSS(writer);\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<img height=\\\"200\\\" width=\\\"200\\\" src=\\\"images/bookstore.gif\\\">\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Simple PaaS Enabled BookStore Application<\/h1>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    writer.println(\"<p>This application is served by <b>\" + getServletContext().getServerInfo() + \"<\/b> [\" + System.getProperty(\"com.sun.aas.instanceName\") + \"]<\/p>\");\r\n    writer.println(\"Please wait while accessing the bookstore database.....\");\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        DatabaseOperations operations = new DatabaseOperations();\r\n        String userName = \"World\";\r\n        operations.createAccessInfoTable(ds, writer);\r\n        operations.createBookStoreTable(ds, writer);\r\n        operations.updateAccessInfo(ds, userName, writer);\r\n        operations.addBookToTable(ds, request.getParameter(\"title\"), request.getParameter(\"authors\"), request.getParameter(\"price\"));\r\n        operations.printBooksTable(ds, writer);\r\n        generateNewBookForm(writer);\r\n    }\r\n    writer.println(\"<p/><a href=\\'BookStoreServlet\\'>My Home<\/a>\");\r\n    writer.println(\"<p><font color=red>Thanks for using Oracle PaaS Solutions<\/font><\/p>\");\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.bmp.readonly.ejb.EnrollerBean.getCourseIds",
	"Comment": "return an arraylist of courseids that student is enroller in",
	"Method": "ArrayList getCourseIds(String studentId){\r\n    try {\r\n        return selectCourse(studentId);\r\n    } catch (Exception ex) {\r\n        throw new EJBException(\"getCourseIds: \" + ex.getMessage());\r\n    }\r\n}"
}, {
	"Path": "com.sun.cb.JAXRPublisher.executePublish",
	"Comment": "creates an organization, its classification, and itsservices, and saves it to the registry.",
	"Method": "String executePublish(String username,String password,String endpoint){\r\n    String id = null;\r\n    RegistryService rs = null;\r\n    BusinessLifeCycleManager blcm = null;\r\n    BusinessQueryManager bqm = null;\r\n    try {\r\n        rs = connection.getRegistryService();\r\n        blcm = rs.getBusinessLifeCycleManager();\r\n        bqm = rs.getBusinessQueryManager();\r\n        System.out.println(\"Got registry service, query \" + \"manager, and life cycle manager\");\r\n        PasswordAuthentication passwdAuth = new PasswordAuthentication(username, password.toCharArray());\r\n        Set creds = new HashSet();\r\n        creds.add(passwdAuth);\r\n        connection.setCredentials(creds);\r\n        System.out.println(\"Established security credentials\");\r\n        ResourceBundle bundle = ResourceBundle.getBundle(\"com.sun.cb.CoffeeRegistry\");\r\n        Organization org = blcm.createOrganization(bundle.getString(\"org.name\"));\r\n        InternationalString s = blcm.createInternationalString(bundle.getString(\"org.description\"));\r\n        org.setDescription(s);\r\n        User primaryContact = blcm.createUser();\r\n        PersonName pName = blcm.createPersonName(bundle.getString(\"person.name\"));\r\n        primaryContact.setPersonName(pName);\r\n        TelephoneNumber tNum = blcm.createTelephoneNumber();\r\n        tNum.setNumber(bundle.getString(\"phone.number\"));\r\n        Collection phoneNums = new ArrayList();\r\n        phoneNums.add(tNum);\r\n        primaryContact.setTelephoneNumbers(phoneNums);\r\n        EmailAddress emailAddress = blcm.createEmailAddress(bundle.getString(\"email.address\"));\r\n        Collection emailAddresses = new ArrayList();\r\n        emailAddresses.add(emailAddress);\r\n        primaryContact.setEmailAddresses(emailAddresses);\r\n        org.setPrimaryContact(primaryContact);\r\n        ClassificationScheme cScheme = bqm.findClassificationSchemeByName(null, bundle.getString(\"classification.scheme\"));\r\n        Classification classification = (Classification) blcm.createClassification(cScheme, bundle.getString(\"classification.name\"), bundle.getString(\"classification.value\"));\r\n        Collection classifications = new ArrayList();\r\n        classifications.add(classification);\r\n        org.addClassifications(classifications);\r\n        Collection services = new ArrayList();\r\n        Service service = blcm.createService(bundle.getString(\"service.name\"));\r\n        InternationalString is = blcm.createInternationalString(bundle.getString(\"service.description\"));\r\n        service.setDescription(is);\r\n        Collection serviceBindings = new ArrayList();\r\n        ServiceBinding binding = blcm.createServiceBinding();\r\n        is = blcm.createInternationalString(bundle.getString(\"service.binding\"));\r\n        binding.setDescription(is);\r\n        binding.setValidateURI(false);\r\n        binding.setAccessURI(endpoint);\r\n        serviceBindings.add(binding);\r\n        service.addServiceBindings(serviceBindings);\r\n        services.add(service);\r\n        org.addServices(services);\r\n        Collection orgs = new ArrayList();\r\n        orgs.add(org);\r\n        BulkResponse response = blcm.saveOrganizations(orgs);\r\n        Collection exceptions = response.getExceptions();\r\n        if (exceptions == null) {\r\n            System.out.println(\"Organization saved\");\r\n            Collection keys = response.getCollection();\r\n            Iterator keyIter = keys.iterator();\r\n            if (keyIter.hasNext()) {\r\n                javax.xml.registry.infomodel.Key orgKey = (javax.xml.registry.infomodel.Key) keyIter.next();\r\n                id = orgKey.getId();\r\n                System.out.println(\"Organization key is \" + id);\r\n            }\r\n        } else {\r\n            Iterator excIter = exceptions.iterator();\r\n            Exception exception = null;\r\n            while (excIter.hasNext()) {\r\n                exception = (Exception) excIter.next();\r\n                System.err.println(\"Exception on save: \" + exception.toString());\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        if (connection != null) {\r\n            try {\r\n                connection.close();\r\n            } catch (JAXRException je) {\r\n                System.err.println(\"Connection close failed\");\r\n            }\r\n        }\r\n    }\r\n    return id;\r\n}"
}, {
	"Path": "com.oracle.hk2.devtest.cdi.runner.BasicCDITest.testCDIExtensionHasAccessToServiceLocatorViaJNDI",
	"Comment": "ensures that the servicelocator is available in all cdi events",
	"Method": "void testCDIExtensionHasAccessToServiceLocatorViaJNDI(){\r\n    BasicEjb basic = (BasicEjb) context.lookup(BASIC_EJB_JNDI_NAME);\r\n    Assert.assertNotNull(basic);\r\n    basic.isServiceLocatorAvailableInAllCDIExtensionEvents();\r\n}"
}, {
	"Path": "samples.i18n.simple.servlet.IncludedServlet.processRequest",
	"Comment": "processes requests for both http get and post methods.generates response with the information obtained from the including servlet.",
	"Method": "void processRequest(HttpServletRequest req,HttpServletResponse res){\r\n    try {\r\n        java.io.PrintWriter out = res.getWriter();\r\n        String name = req.getParameter(\"name\");\r\n        out.println(\"<H3> This is the name from included servlet <\/H3>\");\r\n        out.println(\"<H4> The name entered was:\" + name + \"<\/h4>\");\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}"
}, {
	"Path": "devtests.deployment.ejb.statelesshello.testng.StatelessHelloTest.deployWithAsadminAndRun",
	"Comment": "deploy the app using asadmin and run it, expecting a positive result.",
	"Method": "void deployWithAsadminAndRun(){\r\n    deploy();\r\n    runPositive(\"ejb/statelessejb Test asadmin deploy\");\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basicdb.BasicDBPaaSServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic DB PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic DB PaaS Application<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT TABLENAME from sys.systables\");\r\n            writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"List of Tables in Database\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td align=\\\"right\\\">\" + \" \" + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.jms.jmsejb2.HelloBean.sendMessageNoCommitPart2",
	"Comment": "commit tx started in part1 and receive sent message in a new tx.",
	"Method": "void sendMessageNoCommitPart2(){\r\n    try {\r\n        sc.getUserTransaction().commit();\r\n        sc.getUserTransaction().begin();\r\n        Message message = recvMessageInternal(savedSession);\r\n        if (message != null) {\r\n            System.out.println(\"Received message \" + message);\r\n            sc.getUserTransaction().commit();\r\n        } else {\r\n            throw new EJBException(\"no message received\");\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        try {\r\n            sc.getUserTransaction().rollback();\r\n        } catch (Exception re) {\r\n        }\r\n        throw new EJBException(e);\r\n    } finally {\r\n        try {\r\n            if (savedConnection != null) {\r\n                savedConnection.close();\r\n                savedConnection = null;\r\n                savedSession = null;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.oracle.hk2.devtest.cdi.locator.BasicService.gotInjectedWithBeanManager",
	"Comment": "this method returns true if the beanmanager was injected.this serviceis created with hk2 but still has the cdi created object injected intoit",
	"Method": "boolean gotInjectedWithBeanManager(){\r\n    return (beanManager != null);\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basicdbteardownsql.CoffeeServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic Db with glassfish-resources.xml PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<img height=\\\"200\\\" width=\\\"200\\\" src=\\\"images/Coffee.jpg\\\">\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic Db with glassfish-resources.xml PaaS Application<\/h1>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            DatabaseMetaData dbMetadata = stmt.getConnection().getMetaData();\r\n            String dbUrl = dbMetadata.getURL();\r\n            writer.println(\"DB URL : \" + dbUrl + \"\\n\");\r\n            if (dbUrl.indexOf(\"foobar\") == -1) {\r\n                throw new Exception(\"Custom Database [foobar] is not created while provisioning.\");\r\n            }\r\n            ResultSet rs = stmt.executeQuery(\"SELECT c_id, c_name from coffee\");\r\n            writer.println(\"<table border=\\\"1\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"Data retrieved from table \\\"coffee\\\"\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"<td>\" + \"Coffee ID\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Coffee Name\" + \"<\/td>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(2) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.basic.BasicPaaSServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Simple Servlet<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Simple Servlet<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT TABLENAME from sys.systables\");\r\n            writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"List of Tables in Database\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td align=\\\"right\\\">\" + \" \" + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.dmmcf.ejb.SimpleSessionBean.query2",
	"Comment": "query the value modified in the second bean and ensure that itis correct.",
	"Method": "boolean query2(){\r\n    DataSource ds = (DataSource) ic_.lookup(\"java:comp/env/DataSource\");\r\n    Connection conn = null;\r\n    Statement stmt = null;\r\n    ResultSet rs = null;\r\n    ResultSet rs1 = null;\r\n    String str1 = null;\r\n    String str2 = null;\r\n    try {\r\n        conn = ds.getConnection();\r\n        stmt = conn.createStatement();\r\n        rs = stmt.executeQuery(\"SELECT * FROM CONNSHARING WHERE c_id=100\");\r\n        if (rs.next()) {\r\n            str1 = rs.getString(2);\r\n            System.out.println(\" str1 => \" + str1);\r\n        }\r\n        rs1 = stmt.executeQuery(\"SELECT * FROM CONNSHARING WHERE c_id=200\");\r\n        if (rs1.next()) {\r\n            str2 = rs1.getString(2);\r\n            System.out.println(\" str2 => \" + str2);\r\n        }\r\n        if (\"CONN_SHARING\".equals(str1.trim()) && \"CONN_SHARING_BEAN_2_2\".equals(str2.trim())) {\r\n            return true;\r\n        }\r\n        return false;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (rs != null) {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        if (rs1 != null) {\r\n            try {\r\n                rs1.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        if (stmt != null) {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        try {\r\n            stmt = conn.createStatement();\r\n            stmt.executeUpdate(\"DELETE FROM CONNSHARING WHERE c_id=100\");\r\n            stmt.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            stmt = conn.createStatement();\r\n            stmt.executeUpdate(\"DELETE FROM CONNSHARING WHERE c_id=200\");\r\n            stmt.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (conn != null) {\r\n            try {\r\n                conn.close();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.sun.s1asdev.ejb.ejb31.aroundtimeout.SlessEJB4.cbd",
	"Comment": "aroundtimeout should be still false, and exception is expected.",
	"Method": "void cbd(){\r\n    System.out.println(\"in SlessEJB4:cbd().  aroundTimeoutCalled = \" + aroundTimeoutCalled);\r\n    if (!aroundTimeoutCalled) {\r\n        throw new EJBException(\"bean class aroundTimeout not called - may be correct - check the call stack\");\r\n    }\r\n    aroundTimeoutCalled = false;\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.simple.ejb.SimpleBMPBean.test8",
	"Comment": "use the getconnection api in the connectorruntime use a pmf resource",
	"Method": "boolean test8(){\r\n    System.out.println(\"---------------Running test8-------------\");\r\n    Connection con = null;\r\n    ConnectorRuntime runtime = ConnectorRuntime.getRuntime();\r\n    try {\r\n        con = runtime.getConnection(\"jdo/notpresent\");\r\n    } catch (Exception sqle) {\r\n        System.out.println(\"Caught expected exception\");\r\n        sqle.printStackTrace();\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.simple.ejb.SimpleBMPBean.test7",
	"Comment": "use the getconnection api in the connectorruntime use a jdbc resource jndi name",
	"Method": "boolean test7(){\r\n    System.out.println(\"---------------Running test7---------------\");\r\n    Connection con = null;\r\n    ConnectorRuntime runtime = ConnectorRuntime.getRuntime();\r\n    try {\r\n        con = runtime.getConnection(\"jdbc/notpresent\");\r\n    } catch (Exception sqle) {\r\n        System.out.println(\"Caught expected exception\");\r\n        sqle.printStackTrace();\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.externaldbservicetest.CoffeeServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>External DB Service PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<img height=\\\"200\\\" width=\\\"200\\\" src=\\\"images/Coffee.jpg\\\">\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>External Db Service PaaS Application<\/h1>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            DatabaseMetaData dbMetadata = stmt.getConnection().getMetaData();\r\n            String dbUrl = dbMetadata.getURL();\r\n            writer.println(\"DB URL : \" + dbUrl + \"\\n\");\r\n            if (dbUrl.indexOf(\"foo\") == -1) {\r\n                throw new Exception(\"Custom Database [foo] is not created while provisioning.\");\r\n            }\r\n            ResultSet rs = stmt.executeQuery(\"SELECT c_id, c_name from coffee\");\r\n            writer.println(\"<table border=\\\"1\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"Data retrieved from table \\\"coffee\\\"\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"<td>\" + \"Coffee ID\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Coffee Name\" + \"<\/td>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(2) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.connsharing.xa.ejb.SimpleSessionBean.query",
	"Comment": "query the value modified in the second bean and ensure that itis correct.",
	"Method": "boolean query(){\r\n    DataSource ds = (DataSource) ic_.lookup(\"java:comp/env/DataSource\");\r\n    Connection conn = null;\r\n    Statement stmt = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        conn = ds.getConnection();\r\n        stmt = conn.createStatement();\r\n        rs = stmt.executeQuery(\"SELECT * FROM CONNSHARING WHERE c_id=100\");\r\n        if (rs.next()) {\r\n            String str = rs.getString(2);\r\n            System.out.println(\" str => \" + str);\r\n            if (\"ADITYA_BEAN_2\".equals(str.trim())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return false;\r\n    } finally {\r\n        if (rs != null) {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        if (stmt != null) {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        try {\r\n            stmt = conn.createStatement();\r\n            stmt.executeUpdate(\"DELETE FROM CONNSHARING WHERE c_id=100\");\r\n            stmt.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (conn != null) {\r\n            try {\r\n                conn.close();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "devtests.deployment.util.JavaWithResult.setFailonerror",
	"Comment": "if true, then fail if the command exits with areturncode other than 0",
	"Method": "void setFailonerror(boolean fail){\r\n    super.setFailonerror(fail);\r\n    failOnError = fail;\r\n}"
}, {
	"Path": "test.admin.BaseAdminConsoleTest.getString",
	"Comment": "read the entire contents of the inputstream and return them as a string",
	"Method": "String getString(InputStream in){\r\n    StringBuilder out = new StringBuilder();\r\n    byte[] b = new byte[4096];\r\n    for (int n; (n = in.read(b)) != -1; ) {\r\n        out.append(new String(b, 0, n));\r\n    }\r\n    in.close();\r\n    return out.toString();\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.simple.ejb.SimpleBMPBean.test6",
	"Comment": "use the getconnection api in the connectorruntime use a pmf resource",
	"Method": "boolean test6(){\r\n    System.out.println(\"---------------Running test6-------------\");\r\n    Connection con = null;\r\n    ConnectorRuntime runtime = ConnectorRuntime.getRuntime();\r\n    try {\r\n        con = runtime.getConnection(\"jdo/s1qePM\", \"pbpublic\", \"pbpublic\");\r\n    } catch (Exception sqle) {\r\n        sqle.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.simple.ejb.SimpleBMPBean.test5",
	"Comment": "use the getconnection api in the connectorruntime use a jdbc resource jndi name",
	"Method": "boolean test5(){\r\n    System.out.println(\"---------------Running test5---------------\");\r\n    Connection con = null;\r\n    ConnectorRuntime runtime = ConnectorRuntime.getRuntime();\r\n    try {\r\n        con = runtime.getConnection(\"jdbc/s1qeDB\", \"pbpublic\", \"pbpublic\");\r\n    } catch (Exception sqle) {\r\n        sqle.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.glassfish.tests.paas.enable_disable_test.EnableDisableServlet.doGet",
	"Comment": "respond to a get request for the content produced bythis servlet.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    System.out.println(\"Servlet processing do get..\");\r\n    response.setContentType(\"text/html\");\r\n    PrintWriter writer = response.getWriter();\r\n    writer.println(\"<html>\");\r\n    writer.println(\"<head>\");\r\n    writer.println(\"<title>Basic DB InitSQL PaaS Application<\/title>\");\r\n    writer.println(\"<\/head>\");\r\n    writer.println(\"<body bgcolor=white>\");\r\n    writer.println(\"<table border=\\\"0\\\">\");\r\n    writer.println(\"<tr>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<td>\");\r\n    writer.println(\"<h1>Basic DB InitSQL PaaS Application<\/h1>\");\r\n    writer.println(\"Request headers from the request:\");\r\n    writer.println(\"<\/td>\");\r\n    writer.println(\"<\/tr>\");\r\n    writer.println(\"<\/table>\");\r\n    writer.println(\"<table border=\\\"0\\\" width=\\\"100%\\\">\");\r\n    Enumeration names = request.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = (String) names.nextElement();\r\n        writer.println(\"<tr>\");\r\n        writer.println(\"  <th align=\\\"right\\\">\" + name + \":<\/th>\");\r\n        writer.println(\"  <td>\" + request.getHeader(name) + \"<\/td>\");\r\n        writer.println(\"<\/tr>\");\r\n    }\r\n    writer.println(\"<\/table>\");\r\n    if (ds != null) {\r\n        Statement stmt = null;\r\n        try {\r\n            stmt = ds.getConnection().createStatement();\r\n            ResultSet rs = stmt.executeQuery(\"SELECT c_id, c_name from customer\");\r\n            writer.println(\"<table border=\\\"1\\\" width=\\\"100%\\\">\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"  <th align=\\\"left\\\" colspan=\\\"2\\\">\" + \"Data retrieved from table \\\"customer\\\"\" + \"<\/th>\");\r\n            writer.println(\"<\/tr>\");\r\n            writer.println(\"<tr>\");\r\n            writer.println(\"<td>\" + \"Customer ID\" + \"<\/td>\");\r\n            writer.println(\"<td>\" + \"Customer Name\" + \"<\/td>\");\r\n            writer.println(\"<\/tr>\");\r\n            while (rs.next()) {\r\n                writer.println(\"<tr>\");\r\n                writer.println(\"  <td>\" + rs.getObject(1) + \"<\/td>\");\r\n                writer.println(\"  <td>\" + rs.getObject(2) + \"<\/td>\");\r\n                writer.println(\"<\/tr>\");\r\n            }\r\n            writer.println(\"<\/table>\");\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(writer);\r\n        } finally {\r\n            if (stmt != null) {\r\n                try {\r\n                    stmt.getConnection().close();\r\n                } catch (SQLException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n    }\r\n    writer.println(\"<\/body>\");\r\n    writer.println(\"<\/html>\");\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.simple.ejb.SimpleBMPBean.test4",
	"Comment": "use the getconnection api in the connectorruntime use a pmf resource",
	"Method": "boolean test4(){\r\n    System.out.println(\"---------------Running test4-------------\");\r\n    Connection con = null;\r\n    ConnectorRuntime runtime = ConnectorRuntime.getRuntime();\r\n    try {\r\n        con = runtime.getConnection(\"jdo/s1qePM\");\r\n    } catch (Exception sqle) {\r\n        sqle.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.sun.s1asdev.jdbc.simple.ejb.SimpleBMPBean.test3",
	"Comment": "use the getconnection api in the connectorruntime use a jdbc resource jndi name",
	"Method": "boolean test3(){\r\n    System.out.println(\"---------------Running test3---------------\");\r\n    Connection con = null;\r\n    ConnectorRuntime runtime = ConnectorRuntime.getRuntime();\r\n    try {\r\n        con = runtime.getConnection(\"jdbc/s1qeDB\");\r\n    } catch (SQLException sqle) {\r\n        sqle.printStackTrace();\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}]