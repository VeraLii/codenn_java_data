[{
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JsonTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.WrappedSyntaxView.setSize",
	"Comment": "sets the size of the view.this should cause layout of the view along\tthe given axis, if it has any layout duties.",
	"Method": "void setSize(float width,float height){\r\n    updateMetrics();\r\n    if ((int) width != getWidth()) {\r\n        preferenceChanged(null, true, true);\r\n        widthChanging = true;\r\n    }\r\n    super.setSize(width, height);\r\n    widthChanging = false;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern7.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function7<T1, T2, T3, T4, T5, T6, T7, R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Plan7<T1, T2, T3, T4, T5, T6, T7, R>(this, selector);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.LineNumberList.updateCellWidths",
	"Comment": "changes the width of the cells in the jlist so you can see every digit\tof each.",
	"Method": "void updateCellWidths(){\r\n    int oldCellWidth = cellWidth;\r\n    cellWidth = getRhsBorderWidth();\r\n    if (textArea != null) {\r\n        Font font = getFont();\r\n        if (font != null) {\r\n            FontMetrics fontMetrics = getFontMetrics(font);\r\n            int count = 0;\r\n            int lineCount = textArea.getLineCount() + getLineNumberingStartIndex() - 1;\r\n            do {\r\n                lineCount = lineCount / 10;\r\n                count++;\r\n            } while (lineCount >= 10);\r\n            cellWidth += fontMetrics.charWidth('9') * (count + 1) + 3;\r\n        }\r\n    }\r\n    if (cellWidth != oldCellWidth) {\r\n        revalidate();\r\n    }\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getPendingFederatorPublicKey",
	"Comment": "returns the currently pending federation threshold, or null if none exists",
	"Method": "byte[] getPendingFederatorPublicKey(int index){\r\n    PendingFederation currentPendingFederation = provider.getPendingFederation();\r\n    if (currentPendingFederation == null) {\r\n        return null;\r\n    }\r\n    List<BtcECKey> publicKeys = currentPendingFederation.getPublicKeys();\r\n    if (index < 0 || index >= publicKeys.size()) {\r\n        throw new IndexOutOfBoundsException(String.format(\"Federator index must be between 0 and {}\", publicKeys.size() - 1));\r\n    }\r\n    return publicKeys.get(index).getPubKey();\r\n}"
}, {
	"Path": "org.sakaiproject.lti.impl.BaseLTIService.filterContent",
	"Comment": "adjust the content object based on the settings in the tool object",
	"Method": "void filterContent(Map<String, Object> content,Map<String, Object> tool){\r\n    if (content == null || tool == null)\r\n        return;\r\n    int heightOverride = getInt(tool.get(LTIService.LTI_ALLOWFRAMEHEIGHT));\r\n    int toolHeight = getInt(tool.get(LTIService.LTI_FRAMEHEIGHT));\r\n    int contentHeight = getInt(content.get(LTIService.LTI_FRAMEHEIGHT));\r\n    int frameHeight = 1200;\r\n    if (toolHeight > 0)\r\n        frameHeight = toolHeight;\r\n    if (heightOverride == 1 && contentHeight > 0)\r\n        frameHeight = contentHeight;\r\n    content.put(LTIService.LTI_FRAMEHEIGHT, new Integer(frameHeight));\r\n    int debug = getInt(tool.get(LTIService.LTI_DEBUG));\r\n    if (debug == 2)\r\n        debug = getInt(content.get(LTIService.LTI_DEBUG));\r\n    content.put(LTIService.LTI_DEBUG, debug + \"\");\r\n    int newpage = getInt(tool.get(LTIService.LTI_NEWPAGE));\r\n    if (newpage == 2)\r\n        newpage = getInt(content.get(LTIService.LTI_NEWPAGE));\r\n    content.put(LTIService.LTI_NEWPAGE, newpage + \"\");\r\n}"
}, {
	"Path": "org.sakaiproject.component.section.sakai.CourseSectionImpl.shiftDay",
	"Comment": "check if converted time to the time zone of user is the previous day,the same day or next day.",
	"Method": "int shiftDay(String str){\r\n    if (StringUtils.trimToNull(str) == null) {\r\n        return 0;\r\n    }\r\n    try {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(CourseSectionImpl.TIME_FORMAT_LONG);\r\n        sdf.parse(str);\r\n        return 0;\r\n    } catch (Exception e) {\r\n        try {\r\n            SimpleDateFormat sdf = new SimpleDateFormat(CourseSectionImpl.TIME_FORMAT_DATE_TZ);\r\n            Calendar src = new GregorianCalendar();\r\n            src.setTime(sdf.parse(str));\r\n            TimeZone srcTz = sdf.getTimeZone();\r\n            TimeZone userTz = timeService.getLocalTimeZone();\r\n            Calendar user = new GregorianCalendar(userTz);\r\n            src.set(Calendar.DAY_OF_MONTH, user.get(Calendar.DAY_OF_MONTH));\r\n            src.set(Calendar.YEAR, user.get(Calendar.YEAR));\r\n            src.set(Calendar.MONTH, user.get(Calendar.MONTH));\r\n            user.setTimeInMillis(src.getTimeInMillis());\r\n            src.setTimeZone(srcTz);\r\n            int shift = user.get(Calendar.DAY_OF_MONTH) - src.get(Calendar.DAY_OF_MONTH);\r\n            if (shift > 8) {\r\n                src.add(Calendar.MONTH, -1);\r\n                shift -= src.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);\r\n            } else if (shift < -8) {\r\n                user.add(Calendar.MONTH, -1);\r\n                shift += user.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);\r\n            }\r\n            return shift;\r\n        } catch (Exception ex) {\r\n            if (log.isDebugEnabled())\r\n                log.debug(\"Unable to parse \" + str);\r\n            return 0;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport.install",
	"Comment": "installs this listener on a text area.if it is already installed on\tanother text area, it is uninstalled first.",
	"Method": "void install(RSyntaxTextArea textArea){\r\n    if (this.textArea != null) {\r\n        uninstall();\r\n    }\r\n    this.textArea = textArea;\r\n    textArea.addCaretListener(this);\r\n    if (textArea.getMarkOccurrencesColor() != null) {\r\n        setColor(textArea.getMarkOccurrencesColor());\r\n    }\r\n}"
}, {
	"Path": "net.oauth.OAuthMessage.getHeader",
	"Comment": "the value of the last http header with the given name. the name is caseinsensitive.",
	"Method": "String getHeader(String name){\r\n    String value = null;\r\n    for (Map.Entry<String, String> header : getHeaders()) {\r\n        if (name.equalsIgnoreCase(header.getKey())) {\r\n            value = header.getValue();\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera2Base.setLimitFPSOnFly",
	"Comment": "set limit fps while stream. this will be override when you call to preparevideo method.this could produce a change in iframeinterval.",
	"Method": "void setLimitFPSOnFly(int fps){\r\n    videoEncoder.setFps(fps);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.CodeTemplateManager.saveTemplates",
	"Comment": "saves all templates as xml files in the current template directory.",
	"Method": "boolean saveTemplates(){\r\n    if (templates == null) {\r\n        return true;\r\n    }\r\n    if (directory == null || !directory.isDirectory()) {\r\n        return false;\r\n    }\r\n    File[] oldXMLFiles = directory.listFiles(new XMLFileFilter());\r\n    if (oldXMLFiles == null) {\r\n        return false;\r\n    }\r\n    int count = oldXMLFiles.length;\r\n    for (int i = 0; i < count; i++) {\r\n        oldXMLFiles[i].delete();\r\n    }\r\n    boolean wasSuccessful = true;\r\n    for (CodeTemplate template : templates) {\r\n        File xmlFile = new File(directory, template.getID() + \".xml\");\r\n        try {\r\n            XMLEncoder e = new XMLEncoder(new BufferedOutputStream(new FileOutputStream(xmlFile)));\r\n            e.writeObject(template);\r\n            e.close();\r\n        } catch (IOException ioe) {\r\n            ioe.printStackTrace();\r\n            wasSuccessful = false;\r\n        }\r\n    }\r\n    return wasSuccessful;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.test",
	"Comment": "creates a testsubscriber with the given initial request,optionally cancels it, and subscribes it to this perhaps.",
	"Method": "TestSubscriber<T> test(TestSubscriber<T> test,boolean cancel,TestSubscriber<T> test,long initialRequest,TestSubscriber<T> test,long initialRequest,boolean cancel){\r\n    TestSubscriber<T> ts = new TestSubscriber<T>(initialRequest);\r\n    if (cancel) {\r\n        ts.cancel();\r\n    }\r\n    subscribe(ts);\r\n    return ts;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.FilePickerAction.doCollapse_collection",
	"Comment": "remove the collection id from the expanded collection list",
	"Method": "void doCollapse_collection(RunData data){\r\n    ToolSession toolSession = sessionManager.getCurrentToolSession();\r\n    Set<String> expandedItems = getExpandedCollections(toolSession);\r\n    ParameterParser params = data.getParameters();\r\n    String collectionId = params.getString(\"collectionId\");\r\n    SortedSet newSet = new TreeSet();\r\n    for (String id : expandedItems) {\r\n        if (id.indexOf(collectionId) == -1) {\r\n            newSet.add(id);\r\n        }\r\n    }\r\n    expandedItems.clear();\r\n    expandedItems.addAll(newSet);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doView_grade_private",
	"Comment": "action is to show the graded assignment submission while keeping specific information private",
	"Method": "void doView_grade_private(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    state.setAttribute(VIEW_GRADE_SUBMISSION_ID, params.getString(\"submissionId\"));\r\n    if (getSubmission((String) state.getAttribute(VIEW_GRADE_SUBMISSION_ID), \"doView_grade_private\", state) != null) {\r\n        state.setAttribute(STATE_MODE, MODE_STUDENT_VIEW_GRADE_PRIVATE);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UsersAction.mapHeaderRow",
	"Comment": "takes the header row from the csv to determines the position of the columns so that we can \tcorrectly parse any arbitrary csv file. this is required because when we iterate over the rest of the lines, \twe need to know what the column header is, so we can set the approriate importeduser property\tor add into the resourceproperties list, which ever is required.",
	"Method": "Map<Integer, String> mapHeaderRow(String[] line){\r\n    Map<Integer, String> mapping = new LinkedHashMap<Integer, String>();\r\n    for (int i = 0; i < line.length; i++) {\r\n        mapping.put(i, line[i]);\r\n    }\r\n    return mapping;\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera2Base.disableAudio",
	"Comment": "mute microphone, can be called before, while and after stream.",
	"Method": "void disableAudio(){\r\n    microphoneManager.mute();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MxmlTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.MARKUP_COMMENT:\r\n            state = COMMENT;\r\n            start = text.offset;\r\n            break;\r\n        case Token.MARKUP_DTD:\r\n            state = DTD;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE:\r\n            state = INATTR_DOUBLE;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE:\r\n            state = INATTR_SINGLE;\r\n            start = text.offset;\r\n            break;\r\n        case Token.MARKUP_PROCESSING_INSTRUCTION:\r\n            state = PI;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_INTAG:\r\n            state = INTAG;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_INTAG_SCRIPT:\r\n            state = INTAG_SCRIPT;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT:\r\n            state = INATTR_DOUBLE_SCRIPT;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT:\r\n            state = INATTR_SINGLE_SCRIPT;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_IN_AS:\r\n            state = AS;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_IN_AS_MLC:\r\n            state = AS_MLC;\r\n            start = text.offset;\r\n            break;\r\n        case Token.MARKUP_CDATA:\r\n            state = CDATA;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.PopupWindowDecorator.get",
	"Comment": "returns the singleton instance of this class.this should only be\tcalled on the edt.",
	"Method": "PopupWindowDecorator get(){\r\n    return decorator;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.flatMapAsync",
	"Comment": "maps the upstream values into publisher and merges at most 32 of them at once,collects and emits the items on the specified scheduler.this operator can be considered as a fusion between a flatmapsyncand observeon.",
	"Method": "FlowableTransformer<T, R> flatMapAsync(Function<? super T, ? extends Publisher<? extends R>> mapper,Scheduler scheduler,FlowableTransformer<T, R> flatMapAsync,Function<? super T, ? extends Publisher<? extends R>> mapper,Scheduler scheduler,boolean depthFirst,FlowableTransformer<T, R> flatMapAsync,Function<? super T, ? extends Publisher<? extends R>> mapper,Scheduler scheduler,int maxConcurrency,int bufferSize,boolean depthFirst){\r\n    return new FlowableFlatMapAsync<T, R>(null, mapper, maxConcurrency, bufferSize, depthFirst, scheduler);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ScalaTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.SearchResultBase.expectedNodeCount",
	"Comment": "verify we have the expected number of elements in a node list",
	"Method": "boolean expectedNodeCount(NodeList nodeList,int expected){\r\n    String tag;\r\n    int length;\r\n    if ((length = nodeList.getLength()) == expected) {\r\n        return true;\r\n    }\r\n    tag = \"Element\";\r\n    if (length > 0) {\r\n        tag = nodeList.item(0).getNodeName();\r\n    }\r\n    log.debug(\"Unexpected \" + tag + \" count: \" + length + \" (ignoring entry)\");\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.endorsed.i18n.spi.SakaiDateFormatProvider.getDateFormatString",
	"Comment": "returns a date pattern with the given formatting style for the specified\tlocale.",
	"Method": "String getDateFormatString(int style,Locale locale){\r\n    if (locale == null) {\r\n        throw new NullPointerException(\"locale:null\");\r\n    } else if (!SakaiLocaleServiceProviderUtil.isAvailableLocale(locale)) {\r\n        throw new IllegalArgumentException(\"locale:\" + locale.toString());\r\n    }\r\n    String key;\r\n    switch(style) {\r\n        case DateFormat.SHORT:\r\n            key = \"DateFormat.SHORT\";\r\n            break;\r\n        case DateFormat.MEDIUM:\r\n            key = \"DateFormat.MEDIUM\";\r\n            break;\r\n        case DateFormat.LONG:\r\n            key = \"DateFormat.LONG\";\r\n            break;\r\n        case DateFormat.FULL:\r\n            key = \"DateFormat.FULL\";\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"style:\" + style);\r\n    }\r\n    return SakaiLocaleServiceProviderUtil.getString(key, locale);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.concatArray",
	"Comment": "concatenate the values in order from a sequence of solo sources.",
	"Method": "Flowable<T> concatArray(Solo<? extends T> sources){\r\n    return Flowable.concatArray(sources);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LuaTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.EnrollmentSetEntityProvider.update",
	"Comment": "update an enrollment set. wraps coursemanagementadministration.updateenrollmentset.",
	"Method": "void update(Object entity){\r\n    EnrollmentSetData data = (EnrollmentSetData) entity;\r\n    EnrollmentSet updated = hibernateService.getEnrollmentSetByEid(data.eid);\r\n    updated.setTitle(data.title);\r\n    updated.setDescription(data.description);\r\n    updated.setCategory(data.category);\r\n    updated.setDefaultEnrollmentCredits(data.defaultCredits);\r\n    Set<String> instructors = null;\r\n    if (data.officialInstructors != null) {\r\n        instructors = new HashSet<String>(data.officialInstructors);\r\n    }\r\n    updated.setOfficialInstructors(instructors);\r\n    cmAdmin.updateEnrollmentSet(updated);\r\n    updateSitesWithEnrollmentSet(data.eid);\r\n}"
}, {
	"Path": "org.sakaiproject.dav.DavServlet.isFileNameAllowed",
	"Comment": "determine if this path is one of the prefixes that we have been requested to ignore by the properties settings",
	"Method": "boolean isFileNameAllowed(HttpServletRequest req){\r\n    if (ignorePatterns == null)\r\n        return true;\r\n    String sakaiPath = getRelativePathSAKAI(req);\r\n    for (int i = 0; i < ignorePatterns.length; i++) {\r\n        if (sakaiPath.lastIndexOf(ignorePatterns[i]) > 0)\r\n            return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.FilePickerAction.panelMethodName",
	"Comment": "allow extension classes to control which build method gets called for this pannel",
	"Method": "String panelMethodName(String panel){\r\n    return \"buildMainPanelContext\";\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport.clear",
	"Comment": "removes all highlights added to the text area by this listener.",
	"Method": "void clear(){\r\n    if (textArea != null) {\r\n        RSyntaxTextAreaHighlighter h = (RSyntaxTextAreaHighlighter) textArea.getHighlighter();\r\n        h.clearMarkOccurrencesHighlights();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setHeight",
	"Comment": "height is the height of the media object. it is an optional attribute.",
	"Method": "void setHeight(Integer height){\r\n    this.height = height;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.concatArrayDelayError",
	"Comment": "concatenate the values in order from a sequence of perhaps sources, delayingerrors till all sources terminate.",
	"Method": "Flowable<T> concatArrayDelayError(Perhaps<? extends T> sources){\r\n    return Flowable.concatArrayDelayError(sources);\r\n}"
}, {
	"Path": "org.fife.io.DocumentReader.markSupported",
	"Comment": "tells whether this reader supports the mark operation.\tthis always returns true for documentreader.",
	"Method": "boolean markSupported(){\r\n    return true;\r\n}"
}, {
	"Path": "co.rsk.trie.TrieStoreImpl.retrieve",
	"Comment": "retrieve retrieves a trie instance from store, using hash a key",
	"Method": "Trie retrieve(byte[] hash){\r\n    this.retrieveCount++;\r\n    byte[] message = this.store.get(hash);\r\n    return TrieImpl.fromMessage(message, this);\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.signatureToKey",
	"Comment": "given a piece of text and a message signature encoded in base64, returns an eckeycontaining the public key that was used to sign it. this can then be compared to the expected public key todetermine if the signature was correct.",
	"Method": "ECKey signatureToKey(byte[] messageHash,String signatureBase64){\r\n    byte[] signatureEncoded;\r\n    try {\r\n        signatureEncoded = Base64.decode(signatureBase64);\r\n    } catch (RuntimeException e) {\r\n        throw new SignatureException(\"Could not decode base64\", e);\r\n    }\r\n    if (signatureEncoded.length < 65) {\r\n        throw new SignatureException(\"Signature truncated, expected 65 bytes and got \" + signatureEncoded.length);\r\n    }\r\n    int header = signatureEncoded[0] & 0xFF;\r\n    if (header < 27 || header > 34) {\r\n        throw new SignatureException(\"Header byte out of range: \" + header);\r\n    }\r\n    BigInteger r = new BigInteger(1, Arrays.copyOfRange(signatureEncoded, 1, 33));\r\n    BigInteger s = new BigInteger(1, Arrays.copyOfRange(signatureEncoded, 33, 65));\r\n    ECDSASignature sig = new ECDSASignature(r, s);\r\n    boolean compressed = false;\r\n    if (header >= 31) {\r\n        compressed = true;\r\n        header -= 4;\r\n    }\r\n    int recId = header - 27;\r\n    ECKey key = ECKey.recoverFromSignature(recId, sig, messageHash, compressed);\r\n    if (key == null) {\r\n        throw new SignatureException(\"Could not recover public key from signature\");\r\n    }\r\n    return key;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenMap.isIgnoringCase",
	"Comment": "returns whether this token map ignores case when checking for tokens.\tthis property is set in the constructor and cannot be changed, as this\tis an intrinsic property of a particular programming language.",
	"Method": "boolean isIgnoringCase(){\r\n    return ignoreCase;\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.Price.setPrice",
	"Comment": "price is the price of the media object.this is an optional attribute.",
	"Method": "void setPrice(Double price){\r\n    this.price = price;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.validPointGrade",
	"Comment": "valid grade for point based typereturns a double value in a string from the localized input",
	"Method": "String validPointGrade(SessionState state,String grade,int factor){\r\n    if (grade != null && !\"\".equals(grade)) {\r\n        if (grade.startsWith(\"-\")) {\r\n            addAlert(state, rb.getString(\"plesuse3\"));\r\n        } else {\r\n            int dec = (int) Math.log10(factor);\r\n            NumberFormat nbFormat = formattedText.getNumberFormat();\r\n            DecimalFormat dcFormat = (DecimalFormat) nbFormat;\r\n            String decSeparator = formattedText.getDecimalSeparator();\r\n            if ((\",\".equals(decSeparator) && grade.contains(\".\")) || (\".\".equals(decSeparator) && grade.contains(\",\")) || grade.contains(\" \")) {\r\n                addAlert(state, rb.getString(\"plesuse1\"));\r\n                return grade;\r\n            }\r\n            int index = grade.indexOf(decSeparator);\r\n            if (index != -1) {\r\n                if (!decSeparator.equals(grade)) {\r\n                    if (grade.length() > index + dec + 1) {\r\n                        addAlert(state, rb.getFormattedMessage(\"plesuse2\", String.valueOf(dec)));\r\n                    } else {\r\n                        String zeros = \"\";\r\n                        for (int i = 0; i < dec; i++) {\r\n                            zeros = zeros.concat(\"0\");\r\n                        }\r\n                        String gradeString = grade.endsWith(decSeparator) ? grade.substring(0, index).concat(zeros) : grade.substring(0, index).concat(grade.substring(index + 1));\r\n                        try {\r\n                            nbFormat.parse(gradeString);\r\n                            try {\r\n                                Integer.parseInt(gradeString);\r\n                            } catch (NumberFormatException e) {\r\n                                log.warn(this + \":validPointGrade \" + e.getMessage());\r\n                                alertInvalidPoint(state, gradeString, factor);\r\n                            }\r\n                        } catch (ParseException e) {\r\n                            log.warn(this + \":validPointGrade \" + e.getMessage());\r\n                            addAlert(state, rb.getString(\"plesuse1\"));\r\n                        }\r\n                    }\r\n                } else {\r\n                    addAlert(state, rb.getString(\"plesuse1\"));\r\n                }\r\n            } else {\r\n                String gradeString = grade;\r\n                for (int i = 0; i < dec; i++) {\r\n                    gradeString = gradeString.concat(\"0\");\r\n                }\r\n                try {\r\n                    nbFormat.parse(gradeString);\r\n                    try {\r\n                        Integer.parseInt(gradeString);\r\n                    } catch (NumberFormatException e) {\r\n                        log.warn(this + \":validPointGrade \" + e.getMessage());\r\n                        alertInvalidPoint(state, gradeString, factor);\r\n                    }\r\n                } catch (ParseException e) {\r\n                    log.warn(this + \":validPointGrade \" + e.getMessage());\r\n                    addAlert(state, rb.getString(\"plesuse1\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return grade;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ActionScriptTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.DailyRecurrenceRule.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element rule = doc.createElement(\"rule\");\r\n    ((Element) stack.peek()).appendChild(rule);\r\n    rule.setAttribute(\"class\", \"org.chefproject.osid.calendar.DailyRecurrenceRule\");\r\n    rule.setAttribute(\"name\", \"DailyRecurrenceRule\");\r\n    setBaseClassXML(rule);\r\n    return rule;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.loadDisplayOptionsFromPortletConfig",
	"Comment": "loads the display options object we save in the actionstate with the settings from the portletconfig.",
	"Method": "void loadDisplayOptionsFromPortletConfig(VelocityPortlet portlet,AnnouncementActionState annState){\r\n    AnnouncementActionState.DisplayOptions displayOptions = new AnnouncementActionState.DisplayOptions();\r\n    annState.setDisplayOptions(displayOptions);\r\n    Properties registeredProperties = ToolManager.getCurrentTool().getRegisteredConfig();\r\n    displayOptions.loadProperties((Map) registeredProperties);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.impl.CloneableBean.beanClone",
	"Comment": "makes a deep bean clone of the object passed in the constructor.to be used by classes using cloneablebean in a delegation pattern,",
	"Method": "Object beanClone(Object obj,Set<String> ignoreProperties){\r\n    final Class<?> clazz = obj.getClass();\r\n    try {\r\n        final Object clonedBean = clazz.newInstance();\r\n        final List<PropertyDescriptor> propertyDescriptors = BeanIntrospector.getPropertyDescriptorsWithGettersAndSetters(clazz);\r\n        for (final PropertyDescriptor propertyDescriptor : propertyDescriptors) {\r\n            final String propertyName = propertyDescriptor.getName();\r\n            final boolean ignoredProperty = ignoreProperties.contains(propertyName);\r\n            if (!ignoredProperty) {\r\n                final Method getter = propertyDescriptor.getReadMethod();\r\n                final Method setter = propertyDescriptor.getWriteMethod();\r\n                Object value = getter.invoke(obj, NO_PARAMS);\r\n                if (value != null) {\r\n                    value = doClone(value);\r\n                    setter.invoke(clonedBean, new Object[] { value });\r\n                }\r\n            }\r\n        }\r\n        return clonedBean;\r\n    } catch (final CloneNotSupportedException e) {\r\n        LOG.error(\"Error while cloning bean\", e);\r\n        throw e;\r\n    } catch (final Exception e) {\r\n        LOG.error(\"Error while cloning bean\", e);\r\n        throw new CloneNotSupportedException(\"Cannot clone a \" + clazz + \" object\");\r\n    }\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.ByteUtils.indexOf",
	"Comment": "returns the index in the source array where the first occurrence\tof the specified byte pattern is found",
	"Method": "int indexOf(byte[] source,String matchString,int indexOf,byte[] source,byte[] match){\r\n    for (int i = 0; i < source.length; i++) {\r\n        if (startsWith(source, i, match)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setSource",
	"Comment": "sets the dublincore module source. convenience method that can be used when there is only onesource to set.",
	"Method": "void setSource(String source){\r\n    this.source = Lists.create(source);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doCheck_view",
	"Comment": "action to determine which view do present to user.this method is currently called from calendar events in the alternate calendar tool.",
	"Method": "void doCheck_view(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String assignmentId = params.getString(\"assignmentId\");\r\n    String contextString = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    boolean allowReadAssignment = assignmentService.allowGetAssignment(contextString);\r\n    boolean allowSubmitAssignment = assignmentService.allowAddSubmission(contextString);\r\n    boolean allowAddAssignment = assignmentService.allowAddAssignment(contextString);\r\n    String assignStatus = getAssignmentStatus(assignmentId, state);\r\n    if (assignStatus != null && !assignStatus.equals(rb.getString(\"gen.open\")) && !allowAddAssignment) {\r\n        addAlert(state, rb.getFormattedMessage(\"gen.notavail\", assignStatus));\r\n    }\r\n    if (allowAddAssignment) {\r\n        doView_assignment(data);\r\n    } else if (allowSubmitAssignment) {\r\n        doView_submission(data);\r\n    } else if (allowReadAssignment) {\r\n        doView_assignment_as_student(data);\r\n    } else {\r\n        addAlert(state, rb.getFormattedMessage(\"youarenot_viewAssignment\", assignmentId));\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.AdminSitesAction.doIds",
	"Comment": "handle a request to regenerate the ids in the site under edit.",
	"Method": "void doIds(RunData data,Context context){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    Site site = (Site) state.getAttribute(\"site\");\r\n    site.regenerateIds();\r\n    addAlert(state, rb.getString(\"sitact.thesit\"));\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.getInstructorInfo",
	"Comment": "this will return a map of the information for the instructor such as uem,\tusername, ufn, etc. if the system is configured to use src9 provisioning,\tthis will draw information from the current thread based user. otherwise\tit will use the default instructor information that has been configured\tfor the system.",
	"Method": "Map getInstructorInfo(String siteId,Map getInstructorInfo,String siteId,boolean ignoreUseSource){\r\n    Map togo = new HashMap();\r\n    if (!turnitinConn.isUseSourceParameter() && ignoreUseSource == false) {\r\n        togo.put(\"uem\", turnitinConn.getDefaultInstructorEmail());\r\n        togo.put(\"ufn\", turnitinConn.getDefaultInstructorFName());\r\n        togo.put(\"uln\", turnitinConn.getDefaultInstructorLName());\r\n        togo.put(\"uid\", turnitinConn.getDefaultInstructorId());\r\n    } else {\r\n        String INST_ROLE = \"section.role.instructor\";\r\n        User inst = null;\r\n        try {\r\n            Site site = siteService.getSite(siteId);\r\n            User user = userDirectoryService.getCurrentUser();\r\n            if (site.isAllowed(user.getId(), INST_ROLE)) {\r\n                inst = user;\r\n            } else {\r\n                Set<String> instIds = getActiveInstructorIds(INST_ROLE, site);\r\n                if (instIds.size() > 0) {\r\n                    inst = userDirectoryService.getUser((String) instIds.toArray()[0]);\r\n                }\r\n            }\r\n        } catch (IdUnusedException e) {\r\n            log.error(\"Unable to fetch site in getAbsoluteInstructorInfo: \" + siteId, e);\r\n        } catch (UserNotDefinedException e) {\r\n            log.error(\"Unable to fetch user in getAbsoluteInstructorInfo\", e);\r\n        }\r\n        if (inst == null) {\r\n            log.error(\"Instructor is null in getAbsoluteInstructorInfo\");\r\n        } else {\r\n            togo.put(\"uem\", getEmail(inst));\r\n            togo.put(\"ufn\", inst.getFirstName());\r\n            togo.put(\"uln\", inst.getLastName());\r\n            togo.put(\"uid\", inst.getId());\r\n            togo.put(\"username\", inst.getDisplayName());\r\n        }\r\n    }\r\n    return togo;\r\n}"
}, {
	"Path": "com.pedro.encoder.input.gl.SurfaceManager.setPresentationTime",
	"Comment": "sends the presentation time stamp to egl.time is expressed in nanoseconds.",
	"Method": "void setPresentationTime(long nsecs){\r\n    EGLExt.eglPresentationTimeANDROID(eglDisplay, eglSurface, nsecs);\r\n    GlUtil.checkEglError(\"eglPresentationTimeANDROID\");\r\n}"
}, {
	"Path": "co.rsk.scoring.InetAddressUtils.getAddressForBan",
	"Comment": "convert a text representation to an inetaddressit supports ipv4 and ipv6 formats",
	"Method": "InetAddress getAddressForBan(String hostname){\r\n    if (hostname == null) {\r\n        throw new InvalidInetAddressException(\"null address\", null);\r\n    }\r\n    String name = hostname.trim();\r\n    if (name.length() == 0) {\r\n        throw new InvalidInetAddressException(\"empty address\", null);\r\n    }\r\n    try {\r\n        InetAddress address = InetAddress.getByName(name);\r\n        if (address.isLoopbackAddress() || address.isAnyLocalAddress()) {\r\n            throw new InvalidInetAddressException(\"local address: '\" + name + \"'\", null);\r\n        }\r\n        return address;\r\n    } catch (UnknownHostException ex) {\r\n        throw new InvalidInetAddressException(\"unknown host: '\" + name + \"'\", ex);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LuaTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = LONGSTRING;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setContributor",
	"Comment": "sets the dublincore module contributor. convenience method that can be used when there isonly one contributor to set.",
	"Method": "void setContributor(String contributor){\r\n    contributors = Lists.create(contributor);\r\n}"
}, {
	"Path": "co.rsk.net.BlockStore.removeHeader",
	"Comment": "removeheader removes the given header from the block store.",
	"Method": "void removeHeader(BlockHeader header){\r\n    if (!this.hasHeader(header.getHash())) {\r\n        return;\r\n    }\r\n    this.headers.remove(header.getHash());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getLineHeight",
	"Comment": "returns the height to use for a line of text in this text area.",
	"Method": "int getLineHeight(){\r\n    return lineHeight;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.LineNumberList.setFont",
	"Comment": "overridden to ensure line number cell sizes are updated with the\tfont size change.",
	"Method": "void setFont(Font font){\r\n    super.setFont(font);\r\n    updateCellWidths();\r\n    updateCellHeights();\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.getReviewReportInstructor",
	"Comment": "this uses the default instructor information or current user.",
	"Method": "String getReviewReportInstructor(String contentId,String assignmentRef,String userId){\r\n    Optional<ContentReviewItem> matchingItem = crqs.getQueuedItem(getProviderId(), contentId);\r\n    if (!matchingItem.isPresent()) {\r\n        log.debug(\"Content \" + contentId + \" has not been queued previously\");\r\n        throw new QueueException(\"Content \" + contentId + \" has not been queued previously\");\r\n    }\r\n    ContentReviewItem item = matchingItem.get();\r\n    if (item.getStatus().compareTo(ContentReviewConstants.CONTENT_REVIEW_SUBMITTED_REPORT_AVAILABLE_CODE) != 0) {\r\n        log.debug(\"Report not available: \" + item.getStatus());\r\n        throw new ReportException(\"Report not available: \" + item.getStatus());\r\n    }\r\n    String oid = item.getExternalId();\r\n    String fid = \"6\";\r\n    String fcmd = \"1\";\r\n    String cid = item.getSiteId();\r\n    String assignid = defaultAssignId + item.getSiteId();\r\n    String utp = \"2\";\r\n    Map params = TurnitinAPIUtil.packMap(turnitinConn.getBaseTIIOptions(), \"fid\", fid, \"fcmd\", fcmd, \"assignid\", assignid, \"cid\", cid, \"oid\", oid, \"utp\", utp);\r\n    params.putAll(getInstructorInfo(item.getSiteId()));\r\n    return turnitinConn.buildTurnitinURL(params);\r\n}"
}, {
	"Path": "org.sakaiproject.content.providers.BaseEventDelayHandler.setBaseEventDelayHandlerSqlSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setBaseEventDelayHandlerSqlSql(String vendor){\r\n    this.baseEventDelayHandlerSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.DisplayBase.disableAudio",
	"Comment": "mute microphone, can be called before, while and after stream.",
	"Method": "void disableAudio(){\r\n    microphoneManager.mute();\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getWidth",
	"Comment": "width is the width of the media object. it is an optional attribute.",
	"Method": "Integer getWidth(){\r\n    return width;\r\n}"
}, {
	"Path": "org.sakaiproject.util.DirectRefreshDelivery.compose",
	"Comment": "compose a javascript message for delivery to the browser client window.",
	"Method": "String compose(){\r\n    return \"try { \" + ((m_elementId == null) ? \"\" : m_elementId + \".\") + \"location.replace(\" + ((m_elementId == null) ? \"\" : m_elementId + \".\") + \"location); } catch(error) {}\";\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.model.ChatMessage.setBody",
	"Comment": "set body of chat message, adding html anchor tags as appropriate",
	"Method": "void setBody(String body){\r\n    String formattedBody = body;\r\n    if (formattedBody.matches(bodyRegexp)) {\r\n        String[] parts = formattedBody.split(\"[\\\\s()\\\\\\\\]\");\r\n        for (int i = 0; i < parts.length; i++) {\r\n            if (parts[i].matches(urlRegexp)) {\r\n                StringBuilder href = new StringBuilder(href_1b);\r\n                href.append(parts[i]);\r\n                href.append(href_2);\r\n                href.append(parts[i]);\r\n                href.append(href_3);\r\n                formattedBody = formattedBody.replaceFirst(cleanRegexp + parts[i], href.toString());\r\n                formattedBody = formattedBody.replaceFirst(parenRegexp + parts[i], \"(\" + href.toString());\r\n                formattedBody = formattedBody.replaceFirst(firstRegexp + parts[i], href.toString());\r\n            }\r\n        }\r\n    }\r\n    this.body = formattedBody;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.getString",
	"Comment": "access a value of a structured artifact field of type string.",
	"Method": "String getString(String name){\r\n    if (m_structuredArtifact == null) {\r\n        m_structuredArtifact = new Hashtable();\r\n    }\r\n    Object value = m_structuredArtifact.get(name);\r\n    String rv = \"\";\r\n    if (value == null) {\r\n    } else if (value instanceof String) {\r\n        rv = (String) value;\r\n    } else {\r\n        rv = value.toString();\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getType",
	"Comment": "gets the dublincore module type. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getType(){\r\n    return Lists.firstEntry(type);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxUtilities.getLeadingWhitespace",
	"Comment": "returns the leading whitespace of a specific line in a document.",
	"Method": "String getLeadingWhitespace(String text,String getLeadingWhitespace,Document doc,int offs){\r\n    Element root = doc.getDefaultRootElement();\r\n    int line = root.getElementIndex(offs);\r\n    Element elem = root.getElement(line);\r\n    int startOffs = elem.getStartOffset();\r\n    int endOffs = elem.getEndOffset() - 1;\r\n    String text = doc.getText(startOffs, endOffs - startOffs);\r\n    return getLeadingWhitespace(text);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.setResubmissionProperties",
	"Comment": "set the resubmission related properties in assignmentsubmission object",
	"Method": "void setResubmissionProperties(Assignment a,AssignmentSubmission submission){\r\n    Map<String, String> assignmentProperties = a.getProperties();\r\n    String assignmentAllowResubmitNumber = assignmentProperties.get(AssignmentConstants.ALLOW_RESUBMIT_NUMBER);\r\n    if (assignmentAllowResubmitNumber != null) {\r\n        submission.getProperties().put(AssignmentConstants.ALLOW_RESUBMIT_NUMBER, assignmentAllowResubmitNumber);\r\n        String assignmentAllowResubmitCloseDate = assignmentProperties.get(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME);\r\n        submission.getProperties().put(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME, assignmentAllowResubmitCloseDate != null ? assignmentAllowResubmitCloseDate : String.valueOf(a.getCloseDate().toEpochMilli()));\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.RSS090Parser.getRSSNamespace",
	"Comment": "returns the namespace used by rss elements in document of the rss version the parsersupports.this implementation returns the emtpy namespace.",
	"Method": "Namespace getRSSNamespace(){\r\n    return RSS_NS;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.setForm",
	"Comment": "change the root resourcesmetadata object that defines the form for a structured artifact.",
	"Method": "void setForm(ResourcesMetadata form){\r\n    m_form = form;\r\n}"
}, {
	"Path": "net.oauth.signature.pem.PEMReader.readFile",
	"Comment": "read the pem file and save the der encoded octetstream and begin marker.",
	"Method": "void readFile(){\r\n    String line;\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\r\n    try {\r\n        while ((line = reader.readLine()) != null) {\r\n            if (line.indexOf(BEGIN_MARKER) != -1) {\r\n                beginMarker = line.trim();\r\n                String endMarker = beginMarker.replace(\"BEGIN\", \"END\");\r\n                derBytes = readBytes(reader, endMarker);\r\n                return;\r\n            }\r\n        }\r\n        throw new IOException(\"Invalid PEM file: no begin marker\");\r\n    } finally {\r\n        reader.close();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaEditorKit.createIconRowHeader",
	"Comment": "creates an icon row header to use in the gutter for a text area.",
	"Method": "IconRowHeader createIconRowHeader(RTextArea textArea){\r\n    return new IconRowHeader(textArea);\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.enrollInClass",
	"Comment": "currently public for integration tests. todo revisit visibility of\tmethod.",
	"Method": "void enrollInClass(String userId,String uem,String siteId){\r\n    String uid = userId;\r\n    String cid = siteId;\r\n    String ctl = siteId;\r\n    String fid = \"3\";\r\n    String fcmd = \"2\";\r\n    String tem = getTEM(cid);\r\n    User user;\r\n    try {\r\n        user = userDirectoryService.getUser(userId);\r\n    } catch (Exception t) {\r\n        throw new SubmissionException(\"Cannot get user information\", t);\r\n    }\r\n    log.debug(\"Enrolling user \" + user.getEid() + \"(\" + userId + \")  in class \" + siteId);\r\n    String ufn = getUserFirstName(user);\r\n    if (ufn == null) {\r\n        throw new SubmissionException(\"User has no first name\");\r\n    }\r\n    String uln = getUserLastName(user);\r\n    if (uln == null) {\r\n        throw new SubmissionException(\"User has no last name\");\r\n    }\r\n    String utp = \"1\";\r\n    Map params = new HashMap();\r\n    params = TurnitinAPIUtil.packMap(turnitinConn.getBaseTIIOptions(), \"fid\", fid, \"fcmd\", fcmd, \"cid\", cid, \"tem\", tem, \"ctl\", ctl, \"dis\", studentAccountNotified ? \"0\" : \"1\", \"uem\", uem, \"ufn\", ufn, \"uln\", uln, \"utp\", utp, \"uid\", uid);\r\n    Document document = turnitinConn.callTurnitinReturnDocument(params);\r\n    Element root = document.getDocumentElement();\r\n    String rMessage = ((CharacterData) (root.getElementsByTagName(\"rmessage\").item(0).getFirstChild())).getData();\r\n    String rCode = ((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData();\r\n    if (\"31\".equals(rCode)) {\r\n        log.debug(\"Results from enrollInClass with user + \" + userId + \" and class title: \" + ctl + \".\\n\" + \"rCode: \" + rCode + \" rMessage: \" + rMessage);\r\n    } else {\r\n        log.warn(\"Results from enrollInClass with user + \" + userId + \" and class title: \" + ctl + \". \" + \"rCode: \" + rCode + \", rMessage: \" + rMessage);\r\n    }\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSerializationUtils.serializeElection",
	"Comment": "specs are sorted by their signed byte encoding lexicographically.",
	"Method": "byte[] serializeElection(ABICallElection election){\r\n    byte[][] bytes = new byte[election.getVotes().size() * 2][];\r\n    int n = 0;\r\n    Map<ABICallSpec, List<RskAddress>> votes = election.getVotes();\r\n    ABICallSpec[] specs = votes.keySet().toArray(new ABICallSpec[0]);\r\n    Arrays.sort(specs, ABICallSpec.byBytesComparator);\r\n    for (ABICallSpec spec : specs) {\r\n        bytes[n++] = serializeABICallSpec(spec);\r\n        bytes[n++] = serializeVoters(votes.get(spec));\r\n    }\r\n    return RLP.encodeList(bytes);\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.PropertiesLoader.getPropertiesLoader",
	"Comment": "returns the propertiesloader singleton used by rome to load plugin\tcomponents.",
	"Method": "PropertiesLoader getPropertiesLoader(){\r\n    synchronized (PropertiesLoader.class) {\r\n        final ClassLoader classLoader = ConfigurableClassLoader.INSTANCE.getClassLoader();\r\n        PropertiesLoader loader = clMap.get(classLoader);\r\n        if (loader == null) {\r\n            try {\r\n                loader = new PropertiesLoader(MASTER_PLUGIN_FILE, EXTRA_PLUGIN_FILE);\r\n                clMap.put(classLoader, loader);\r\n            } catch (final IOException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n        }\r\n        return loader;\r\n    }\r\n}"
}, {
	"Path": "co.rsk.crypto.Keccak256.copy",
	"Comment": "returns an identical sha3hash with a copy of the the internal byte array.",
	"Method": "Keccak256 copy(){\r\n    return new Keccak256(ByteUtil.cloneBytes(bytes));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getSubject",
	"Comment": "gets the dublincore module subject. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "DCSubject getSubject(){\r\n    return Lists.firstEntry(subject);\r\n}"
}, {
	"Path": "org.ethereum.util.ByteUtil.matchingNibbleLength",
	"Comment": "returns the amount of nibbles that match each other from 0 ...amount will never be larger than smallest input",
	"Method": "int matchingNibbleLength(byte[] a,byte[] b){\r\n    int i = 0;\r\n    int length = a.length < b.length ? a.length : b.length;\r\n    while (i < length) {\r\n        if (a[i] != b[i]) {\r\n            return i;\r\n        }\r\n        i++;\r\n    }\r\n    return i;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.modelToView",
	"Comment": "provides a mapping from the document model coordinate space\tto the coordinate space of the view mapped to it.",
	"Method": "Shape modelToView(int pos,Shape a,Position.Bias b,Shape modelToView,int p0,Position.Bias b0,int p1,Position.Bias b1,Shape a){\r\n    Shape s0 = modelToView(p0, a, b0);\r\n    Shape s1;\r\n    if (p1 == getEndOffset()) {\r\n        try {\r\n            s1 = modelToView(p1, a, b1);\r\n        } catch (BadLocationException ble) {\r\n            s1 = null;\r\n        }\r\n        if (s1 == null) {\r\n            Rectangle alloc = (a instanceof Rectangle) ? (Rectangle) a : a.getBounds();\r\n            s1 = new Rectangle(alloc.x + alloc.width - 1, alloc.y, 1, alloc.height);\r\n        }\r\n    } else {\r\n        s1 = modelToView(p1, a, b1);\r\n    }\r\n    Rectangle r0 = s0 instanceof Rectangle ? (Rectangle) s0 : s0.getBounds();\r\n    Rectangle r1 = s1 instanceof Rectangle ? (Rectangle) s1 : s1.getBounds();\r\n    if (r0.y != r1.y) {\r\n        Rectangle alloc = (a instanceof Rectangle) ? (Rectangle) a : a.getBounds();\r\n        r0.x = alloc.x;\r\n        r0.width = alloc.width;\r\n    }\r\n    r0.add(r1);\r\n    if (p1 > p0) {\r\n        r0.width -= r1.width;\r\n    }\r\n    return r0;\r\n}"
}, {
	"Path": "org.ethereum.core.Transaction.getEncodedRaw",
	"Comment": "for signatures you have to keep alsorlp of the transaction without any signature data",
	"Method": "byte[] getEncodedRaw(){\r\n    if (!parsed) {\r\n        rlpParse();\r\n    }\r\n    if (rlpRaw != null) {\r\n        return rlpRaw;\r\n    }\r\n    byte[] toEncodeNonce = null;\r\n    if (this.nonce == null || this.nonce.length == 1 && this.nonce[0] == 0) {\r\n        toEncodeNonce = RLP.encodeElement((byte[]) null);\r\n    } else {\r\n        toEncodeNonce = RLP.encodeElement(this.nonce);\r\n    }\r\n    byte[] toEncodeGasPrice = RLP.encodeCoinNonNullZero(this.gasPrice);\r\n    byte[] toEncodeGasLimit = RLP.encodeElement(this.gasLimit);\r\n    byte[] toEncodeReceiveAddress = RLP.encodeRskAddress(this.receiveAddress);\r\n    byte[] toEncodeValue = RLP.encodeCoinNullZero(this.value);\r\n    byte[] toEncodeData = RLP.encodeElement(this.data);\r\n    if (chainId == 0) {\r\n        rlpRaw = RLP.encodeList(toEncodeNonce, toEncodeGasPrice, toEncodeGasLimit, toEncodeReceiveAddress, toEncodeValue, toEncodeData);\r\n    } else {\r\n        byte[] v;\r\n        byte[] r;\r\n        byte[] s;\r\n        v = RLP.encodeByte(chainId);\r\n        r = RLP.encodeElement(EMPTY_BYTE_ARRAY);\r\n        s = RLP.encodeElement(EMPTY_BYTE_ARRAY);\r\n        rlpRaw = RLP.encodeList(toEncodeNonce, toEncodeGasPrice, toEncodeGasLimit, toEncodeReceiveAddress, toEncodeValue, toEncodeData, v, r, s);\r\n    }\r\n    return rlpRaw;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DartTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentModuleImplTest.testContents",
	"Comment": "test of getcontents method, of class com.totsp.xml.syndication.content.contentmoduleimpl.",
	"Method": "void testContents(){\r\n    LOG.debug(\"testContents\");\r\n    final ArrayList<String> contents = new ArrayList<String>();\r\n    contents.add(\"Foo\");\r\n    contents.add(\"Bar\");\r\n    contents.add(\"Baz\");\r\n    module.setContents(contents);\r\n    final List<String> check = module.getContents();\r\n    assertTrue(check.equals(contents));\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.impl.BaseAnnouncementService.newResourceEdit",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Edit newResourceEdit(Entity container,String id,Object[] others,Edit newResourceEdit,Entity container,Element element,Edit newResourceEdit,Entity container,Entity other){\r\n    BaseAnnouncementMessageEdit rv = new BaseAnnouncementMessageEdit((MessageChannel) container, (Message) other);\r\n    rv.activate();\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.allowSubscribeThisCalendar",
	"Comment": "check permissions for subscribing to the implicit calendar.",
	"Method": "boolean allowSubscribeThisCalendar(String ref){\r\n    return unlockCheck(AUTH_READ_CALENDAR, ref);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.DisplayBase.sendIntent",
	"Comment": "create intent used to init screen capture with startactivityforresult.",
	"Method": "Intent sendIntent(){\r\n    return mediaProjectionManager.createScreenCaptureIntent();\r\n}"
}, {
	"Path": "org.sakaiproject.util.foorm.Foorm.formHasConfiguration",
	"Comment": "determines if the tool instance has configurable settings.\tfor instance if the admin tool disallows every type of instructor customization, this method would return false for instructors",
	"Method": "boolean formHasConfiguration(Object controlRow,String[] fieldinfo,String includePattern,String excludePattern){\r\n    if (fieldinfo == null) {\r\n        return false;\r\n    }\r\n    for (String line : fieldinfo) {\r\n        if ((includePattern != null && (!line.matches(includePattern))) || (excludePattern != null && (line.matches(excludePattern)))) {\r\n            continue;\r\n        }\r\n        Properties fields = parseFormString(line);\r\n        String field = fields.getProperty(\"field\", null);\r\n        String type = fields.getProperty(\"type\", null);\r\n        String allowed = fields.getProperty(\"allowed\", null);\r\n        if (field == null || type == null) {\r\n            throw new IllegalArgumentException(\"All model elements must include field name and type\");\r\n        }\r\n        if (\"radio\".equals(type) || \"checkbox\".equals(type)) {\r\n            int value = getInt(getField(controlRow, field));\r\n            if (value == 2 || !isFieldSet(controlRow, field)) {\r\n                return true;\r\n            }\r\n        } else if (isFieldSet(controlRow, \"allow\" + field) && !\"false\".equals(allowed)) {\r\n            Object allowRow = getField(controlRow, \"allow\" + field);\r\n            int value = getInt(allowRow);\r\n            if (value == 1 && !LTIService.LTI_SETTINGS.equals(field)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentModuleGeneratorTest.testGenerate",
	"Comment": "test of generate method, of class com.totsp.xml.syndication.content.contentmodulegenerator.",
	"Method": "void testGenerate(){\r\n    LOG.debug(\"testGenerate\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new XmlReader(new File(getTestFile(\"xml/test-rdf.xml\")).toURI().toURL()));\r\n    final SyndEntry entry = feed.getEntries().get(0);\r\n    entry.getModule(ContentModule.URI);\r\n    final SyndFeedOutput output = new SyndFeedOutput();\r\n    final StringWriter writer = new StringWriter();\r\n    output.output(feed, writer);\r\n    LOG.debug(\"{}\", writer);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.mapError",
	"Comment": "maps the throwable error of this solo into another throwable error type.",
	"Method": "Solo<T> mapError(Function<? super Throwable, ? extends Throwable> errorMapper){\r\n    ObjectHelper.requireNonNull(errorMapper, \"errorMapper is null\");\r\n    return onAssembly(new SoloMapError<T>(this, errorMapper));\r\n}"
}, {
	"Path": "org.sakaiproject.endorsed.i18n.spi.SakaiLocaleServiceProviderUtil.getChar",
	"Comment": "returns a char value for the given key from the\tresource bundle.",
	"Method": "char getChar(String key,Locale locale){\r\n    char value = 0;\r\n    String str = getString(key, locale);\r\n    if (str != null && !str.isEmpty()) {\r\n        value = str.charAt(0);\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "org.sakaibrary.xserver.session.MetasearchSessionManager.getMetasearchSession",
	"Comment": "gets the metasearchsession object out of the metasearchsessionmanagercache indexed by the guid.",
	"Method": "MetasearchSession getMetasearchSession(String guid){\r\n    try {\r\n        MetasearchSession ms = (MetasearchSession) cache.get(guid);\r\n        return ms;\r\n    } catch (Exception ce) {\r\n        log.warn(\"MetasearchSessionManager.getMetasearchSession()\" + \" cannot get cache with guid: \" + guid, ce);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.grade_submission_option",
	"Comment": "common grading routine plus specific operation to differenciate cases when saving, releasing or returning grade.",
	"Method": "void grade_submission_option(RunData data,String gradeOption){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    boolean withGrade = state.getAttribute(WITH_GRADES) != null && (Boolean) state.getAttribute(WITH_GRADES);\r\n    String sId = (String) state.getAttribute(GRADE_SUBMISSION_SUBMISSION_ID);\r\n    String assignmentId = (String) state.getAttribute(GRADE_SUBMISSION_ASSIGNMENT_ID);\r\n    String grade = (String) state.getAttribute(GRADE_SUBMISSION_GRADE);\r\n    AssignmentSubmission submission = getSubmission(sId, \"grade_submission_option\", state);\r\n    if (submission != null) {\r\n        boolean gradeChanged = false;\r\n        if (!StringUtils.equals(StringUtils.trimToNull(submission.getGrade()), StringUtils.trimToNull(grade))) {\r\n            gradeChanged = true;\r\n        }\r\n        Assignment a = submission.getAssignment();\r\n        if (!withGrade) {\r\n            submission.setGraded(true);\r\n            if (gradeChanged) {\r\n                submission.setGradedBy(userDirectoryService.getCurrentUser() == null ? null : userDirectoryService.getCurrentUser().getId());\r\n            }\r\n            if (AssignmentConstants.SUBMISSION_OPTION_RETURN.equals(gradeOption) || AssignmentConstants.SUBMISSION_OPTION_RELEASE.equals(gradeOption)) {\r\n                submission.setGradeReleased(true);\r\n            }\r\n        } else {\r\n            if (StringUtils.isNotBlank(grade)) {\r\n                submission.setGrade(grade);\r\n                submission.setGraded(true);\r\n                if (gradeChanged) {\r\n                    submission.setGradedBy(userDirectoryService.getCurrentUser() == null ? null : userDirectoryService.getCurrentUser().getId());\r\n                }\r\n            } else {\r\n                submission.setGrade(null);\r\n                submission.setGraded(false);\r\n                if (gradeChanged) {\r\n                    submission.setGradedBy(null);\r\n                }\r\n            }\r\n        }\r\n        if (withGrade && a.getIsGroup()) {\r\n            for (AssignmentSubmissionSubmitter submitter : submission.getSubmitters()) {\r\n                String g = (String) state.getAttribute(GRADE_SUBMISSION_GRADE + \"_\" + submitter.getSubmitter());\r\n                if (g != submitter.getGrade())\r\n                    submitter.setGrade(g);\r\n            }\r\n        }\r\n        if (AssignmentConstants.SUBMISSION_OPTION_RELEASE.equals(gradeOption)) {\r\n            submission.setGradeReleased(true);\r\n            submission.setGraded(true);\r\n            if (gradeChanged) {\r\n                submission.setGradedBy(userDirectoryService.getCurrentUser() == null ? null : userDirectoryService.getCurrentUser().getId());\r\n            }\r\n            submission.setReturned(false);\r\n            submission.setDateReturned(null);\r\n        } else if (AssignmentConstants.SUBMISSION_OPTION_RETURN.equals(gradeOption)) {\r\n            submission.setGradeReleased(true);\r\n            submission.setGraded(true);\r\n            if (gradeChanged) {\r\n                submission.setGradedBy(userDirectoryService.getCurrentUser() == null ? null : userDirectoryService.getCurrentUser().getId());\r\n            }\r\n            submission.setReturned(true);\r\n            submission.setDateReturned(Instant.now());\r\n        } else if (AssignmentConstants.SUBMISSION_OPTION_RETRACT.equals(gradeOption)) {\r\n            submission.setGradeReleased(false);\r\n            submission.setReturned(false);\r\n            submission.setDateReturned(null);\r\n        } else if (AssignmentConstants.SUBMISSION_OPTION_SAVE.equals(gradeOption)) {\r\n        }\r\n        Map<String, String> properties = submission.getProperties();\r\n        if (state.getAttribute(AssignmentConstants.ALLOW_RESUBMIT_NUMBER) != null) {\r\n            properties.put(AssignmentConstants.ALLOW_RESUBMIT_NUMBER, (String) state.getAttribute(AssignmentConstants.ALLOW_RESUBMIT_NUMBER));\r\n            if (state.getAttribute(ALLOW_RESUBMIT_CLOSEYEAR) != null) {\r\n                Instant closeTime = getTimeFromState(state, ALLOW_RESUBMIT_CLOSEMONTH, ALLOW_RESUBMIT_CLOSEDAY, ALLOW_RESUBMIT_CLOSEYEAR, ALLOW_RESUBMIT_CLOSEHOUR, ALLOW_RESUBMIT_CLOSEMIN);\r\n                properties.put(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME, String.valueOf(closeTime.toEpochMilli()));\r\n            } else {\r\n                properties.remove(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME);\r\n            }\r\n        } else {\r\n            properties.remove(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME);\r\n            properties.remove(AssignmentConstants.ALLOW_RESUBMIT_NUMBER);\r\n        }\r\n        String feedbackCommentString = StringUtils.trimToNull((String) state.getAttribute(GRADE_SUBMISSION_FEEDBACK_COMMENT));\r\n        if (feedbackCommentString != null) {\r\n            submission.setFeedbackComment(feedbackCommentString);\r\n        } else {\r\n            submission.setFeedbackComment(\"\");\r\n        }\r\n        String feedbackTextString = (String) state.getAttribute(GRADE_SUBMISSION_FEEDBACK_TEXT);\r\n        if (feedbackTextString != null) {\r\n            submission.setFeedbackText(feedbackTextString);\r\n        }\r\n        List<Reference> v = (List<Reference>) state.getAttribute(GRADE_SUBMISSION_FEEDBACK_ATTACHMENT);\r\n        if (v != null) {\r\n            Set<String> feedbackAttachments = submission.getFeedbackAttachments();\r\n            feedbackAttachments.clear();\r\n            for (Reference aV : v) {\r\n                feedbackAttachments.add(aV.getReference());\r\n            }\r\n        }\r\n        String sReference = AssignmentReferenceReckoner.reckoner().submission(submission).reckon().getReference();\r\n        properties.put(AssignmentConstants.PROP_LAST_GRADED_DATE, DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG).withZone(ZoneId.systemDefault()).format(Instant.now()));\r\n        try {\r\n            assignmentService.updateSubmission(submission);\r\n        } catch (PermissionException e) {\r\n            log.warn(\"Could not update submission: {}, {}\", submission.getId(), e.getMessage());\r\n            return;\r\n        }\r\n        String aReference = AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference();\r\n        String associateGradebookAssignment = a.getProperties().get(PROP_ASSIGNMENT_ASSOCIATE_GRADEBOOK_ASSIGNMENT);\r\n        if (!\"remove\".equals(gradeOption)) {\r\n            integrateGradebook(state, aReference, associateGradebookAssignment, null, null, null, -1, null, sReference, \"update\", -1);\r\n        } else {\r\n            integrateGradebook(state, aReference, associateGradebookAssignment, null, null, null, -1, null, sReference, \"remove\", -1);\r\n        }\r\n        if (rubricsService.hasAssociatedRubric(RubricsConstants.RBCS_TOOL_ASSIGNMENT, submission.getAssignment().getId())) {\r\n            for (AssignmentSubmissionSubmitter submitter : submission.getSubmitters()) {\r\n                String submitterId = submitter.getSubmitter();\r\n                rubricsService.saveRubricEvaluation(RubricsConstants.RBCS_TOOL_ASSIGNMENT, submission.getAssignment().getId(), submission.getId(), submitterId, submission.getGradedBy(), getRubricConfigurationParameters(data.getParameters()));\r\n            }\r\n        }\r\n    }\r\n    if (state.getAttribute(STATE_MESSAGE) == null) {\r\n        boolean viewSubsOnlySelected = stringToBool((String) data.getParameters().getString(PARAMS_VIEW_SUBS_ONLY_CHECKBOX));\r\n        putSubmissionInfoIntoState(state, assignmentId, sId, viewSubsOnlySelected);\r\n        state.setAttribute(STATE_MODE, MODE_INSTRUCTOR_GRADE_SUBMISSION);\r\n        state.setAttribute(GRADE_SUBMISSION_DONE, Boolean.TRUE);\r\n    } else {\r\n        state.removeAttribute(GRADE_SUBMISSION_DONE);\r\n    }\r\n    sizeResources(state);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchResult.equals",
	"Comment": "returns whether this search result represents the same logical result\tas another.",
	"Method": "boolean equals(Object other){\r\n    if (other == this) {\r\n        return true;\r\n    }\r\n    if (other instanceof SearchResult) {\r\n        return this.compareTo((SearchResult) other) == 0;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.ethereum.db.IndexedBlockStore.getSiblingsFromBlock",
	"Comment": "when a block is processed on remasc the contract needs to calculate all siblings thatthat should be rewarded when fees on this block are paid",
	"Method": "Map<Long, List<Sibling>> getSiblingsFromBlock(Block block){\r\n    return block.getUncleList().stream().collect(Collectors.groupingBy(BlockHeader::getNumber, Collectors.mapping(header -> new Sibling(header, block.getCoinbase(), block.getNumber()), Collectors.toList())));\r\n}"
}, {
	"Path": "org.fife.util.DynamicIntArray.remove",
	"Comment": "removes the int at the specified location from this array\tobject.",
	"Method": "void remove(int index){\r\n    if (index >= size) {\r\n        throwException(index);\r\n    }\r\n    int toMove = size - index - 1;\r\n    if (toMove > 0) {\r\n        System.arraycopy(data, index + 1, data, index, toMove);\r\n    }\r\n    --size;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CSSTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    cssPrevState = YYINITIAL;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = CSS_STRING;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = CSS_CHAR_LITERAL;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = CSS_C_STYLE_COMMENT;\r\n            break;\r\n        case INTERNAL_CSS_PROPERTY:\r\n            state = CSS_PROPERTY;\r\n            break;\r\n        case INTERNAL_CSS_VALUE:\r\n            state = CSS_VALUE;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_CSS_STRING:\r\n                        state = CSS_STRING;\r\n                        break;\r\n                    case INTERNAL_CSS_CHAR:\r\n                        state = CSS_CHAR_LITERAL;\r\n                        break;\r\n                    case INTERNAL_CSS_MLC:\r\n                        state = CSS_C_STYLE_COMMENT;\r\n                        break;\r\n                }\r\n                cssPrevState = -initialTokenType & 0xff;\r\n            } else {\r\n                state = YYINITIAL;\r\n            }\r\n    }\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.conversion.O11Assignment.setProperties",
	"Comment": "prevents nulling the member properties, this is not need in jackson 2.9",
	"Method": "void setProperties(List<O11Property> properties){\r\n    if (properties != null) {\r\n        this.properties = properties;\r\n    }\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getBtcTxHashProcessedHeight",
	"Comment": "returns the rsk blockchain height a given btc transaction hashwas processed at by the bridge.",
	"Method": "Long getBtcTxHashProcessedHeight(Sha256Hash btcTxHash){\r\n    Map<Sha256Hash, Long> btcTxHashes = provider.getBtcTxHashesAlreadyProcessed();\r\n    if (!btcTxHashes.containsKey(btcTxHash)) {\r\n        return -1L;\r\n    }\r\n    return btcTxHashes.get(btcTxHash);\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.gradesChecked",
	"Comment": "check if grade sync has been run already for the specified site",
	"Method": "boolean gradesChecked(Session sess,String taskId){\r\n    String sessSync = \"\";\r\n    try {\r\n        sessSync = sess.getAttribute(\"sync\").toString();\r\n        if (sessSync.equals(taskId)) {\r\n            return true;\r\n        }\r\n    } catch (Exception e) {\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JSPTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    jspInState = YYINITIAL;\r\n    cssPrevState = CSS;\r\n    int languageIndex = 0;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.MARKUP_COMMENT:\r\n            state = COMMENT;\r\n            break;\r\n        case Token.PREPROCESSOR:\r\n            state = PI;\r\n            break;\r\n        case Token.VARIABLE:\r\n            state = DTD;\r\n            break;\r\n        case INTERNAL_INTAG:\r\n            state = INTAG;\r\n            break;\r\n        case INTERNAL_INTAG_SCRIPT:\r\n            state = INTAG_SCRIPT;\r\n            break;\r\n        case INTERNAL_INTAG_STYLE:\r\n            state = INTAG_STYLE;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE:\r\n            state = INATTR_DOUBLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE:\r\n            state = INATTR_SINGLE;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT:\r\n            state = INATTR_DOUBLE_SCRIPT;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT:\r\n            state = INATTR_SINGLE_SCRIPT;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE_QUOTE_STYLE:\r\n            state = INATTR_DOUBLE_STYLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE_QUOTE_STYLE:\r\n            state = INATTR_SINGLE_STYLE;\r\n            break;\r\n        case INTERNAL_IN_HIDDEN_COMMENT:\r\n            state = HIDDEN_COMMENT;\r\n            break;\r\n        case INTERNAL_IN_JSP_DIRECTIVE:\r\n            state = JSP_DIRECTIVE;\r\n            break;\r\n        case INTERNAL_IN_JS:\r\n            state = JAVASCRIPT;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_MLC:\r\n            state = JS_MLC;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_INVALID:\r\n            state = JS_STRING;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_VALID:\r\n            state = JS_STRING;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_INVALID:\r\n            state = JS_CHAR;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_VALID:\r\n            state = JS_CHAR;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_CSS:\r\n            state = CSS;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_CSS_PROPERTY:\r\n            state = CSS_PROPERTY;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_CSS_VALUE:\r\n            state = CSS_VALUE;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = false;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_IN_JAVA_DOCCOMMENT:\r\n                        state = JAVA_DOCCOMMENT;\r\n                        jspInState = -initialTokenType & 0xff;\r\n                        break;\r\n                    case INTERNAL_IN_JAVA_EXPRESSION:\r\n                        state = JAVA_EXPRESSION;\r\n                        jspInState = -initialTokenType & 0xff;\r\n                        break;\r\n                    case INTERNAL_IN_JAVA_MLC:\r\n                        state = JAVA_MLC;\r\n                        jspInState = -initialTokenType & 0xff;\r\n                        break;\r\n                    case INTERNAL_CSS_STRING:\r\n                        state = CSS_STRING;\r\n                        languageIndex = LANG_INDEX_CSS;\r\n                        cssPrevState = -initialTokenType & 0xff;\r\n                        break;\r\n                    case INTERNAL_CSS_CHAR:\r\n                        state = CSS_CHAR_LITERAL;\r\n                        languageIndex = LANG_INDEX_CSS;\r\n                        cssPrevState = -initialTokenType & 0xff;\r\n                        break;\r\n                    case INTERNAL_CSS_MLC:\r\n                        state = CSS_C_STYLE_COMMENT;\r\n                        languageIndex = LANG_INDEX_CSS;\r\n                        cssPrevState = -initialTokenType & 0xff;\r\n                        break;\r\n                }\r\n            } else {\r\n                state = Token.NULL;\r\n            }\r\n            break;\r\n    }\r\n    setLanguageIndex(languageIndex);\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "com.pedro.encoder.utils.gl.gif.GifHeaderParser.isAnimated",
	"Comment": "determines if the gif is animated by trying to read in the first 2 framesthis method reparses the data even if the header has already been read.",
	"Method": "boolean isAnimated(){\r\n    readHeader();\r\n    if (!err()) {\r\n        readContents(2);\r\n    }\r\n    return header.frameCount > 1;\r\n}"
}, {
	"Path": "org.sakaiproject.service.gradebook.shared.GradebookHelper.validateGradeItemName",
	"Comment": "validate a grade item title by checking against the reserved characters",
	"Method": "void validateGradeItemName(String title){\r\n    if (StringUtils.isBlank(title) || StringUtils.startsWithAny(title, GradebookService.INVALID_CHARS_AT_START_OF_GB_ITEM_NAME)) {\r\n        throw new InvalidGradeItemNameException(\"Grade Item name is invalid: \" + title);\r\n    }\r\n}"
}, {
	"Path": "net.oauth.server.OAuthServlet.htmlEncode",
	"Comment": "return the html representation of the given plain text. characters thatwould have special significance in html are replaced by character entityreferences. whitespace is not converted.",
	"Method": "String htmlEncode(String s){\r\n    if (s == null) {\r\n        return null;\r\n    }\r\n    StringBuilder html = new StringBuilder(s.length());\r\n    for (char c : s.toCharArray()) {\r\n        switch(c) {\r\n            case '<':\r\n                html.append(\"&lt;\");\r\n                break;\r\n            case '>':\r\n                html.append(\"&gt;\");\r\n                break;\r\n            case '&':\r\n                html.append(\"&amp;\");\r\n                break;\r\n            case '\"':\r\n                html.append(\"&quot;\");\r\n                break;\r\n            default:\r\n                html.append(c);\r\n                break;\r\n        }\r\n    }\r\n    return html.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.content.entityproviders.ContentEntityProvider.getResources",
	"Comment": "get the list of resources for a site. the api handles visibility checks automatically.",
	"Method": "List<EntityContent> getResources(EntityView view,Map<String, Object> params,List<ContentItem> getResources,String siteId){\r\n    Site site;\r\n    try {\r\n        site = siteService.getSiteVisit(siteId);\r\n    } catch (IdUnusedException e) {\r\n        throw new EntityNotFoundException(\"Invalid siteId: \" + siteId, siteId);\r\n    } catch (PermissionException e) {\r\n        throw new EntityNotFoundException(\"No access to site: \" + siteId, siteId);\r\n    }\r\n    ToolConfiguration toolConfig = site.getToolForCommonId(\"sakai.resources\");\r\n    if (toolConfig == null || !toolManager.isVisible(site, toolConfig)) {\r\n        throw new EntityNotFoundException(\"No access to tool in site: \" + siteId, siteId);\r\n    }\r\n    List<ContentItem> items = new ArrayList<ContentItem>();\r\n    String currentSiteCollectionId = contentHostingService.getSiteCollection(siteId);\r\n    log.debug(\"currentSiteCollectionId: \" + currentSiteCollectionId);\r\n    List<ContentResource> resources = contentHostingService.getAllResources(currentSiteCollectionId);\r\n    for (ContentResource resource : resources) {\r\n        ContentItem item = new ContentItem();\r\n        ResourceProperties props = resource.getProperties();\r\n        item.setSize(Long.parseLong(props.getProperty(ResourceProperties.PROP_CONTENT_LENGTH)));\r\n        item.setType(props.getProperty(ResourceProperties.PROP_CONTENT_TYPE));\r\n        setContentItemValues(resource, item, props);\r\n        items.add(item);\r\n    }\r\n    return items;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.fromCompletable",
	"Comment": "wrap a completable into a nono and terminate when thesource completable terminates.",
	"Method": "Nono fromCompletable(CompletableSource source){\r\n    ObjectHelper.requireNonNull(source, \"source is null\");\r\n    return onAssembly(new NonoFromCompletable(source));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.JsonFoldParser.popOffTop",
	"Comment": "if the specified value is on top of the stack, pop it off and return\ttrue.otherwise, return false.",
	"Method": "boolean popOffTop(Stack<Object> stack,Object value){\r\n    if (stack.size() > 0 && stack.peek() == value) {\r\n        stack.pop();\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getDate",
	"Comment": "gets the dublincore module date. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "Date getDate(){\r\n    return Lists.firstEntry(date);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HTMLTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.GradeSheetExporter.getGradesSpreadsheet",
	"Comment": "access and output the grades spreadsheet for the reference, either for an assignment or all assignments in a context.",
	"Method": "void getGradesSpreadsheet(OutputStream out,String reference,String query){\r\n    Map<String, String> params = new HashMap();\r\n    Pattern.compile(\"&\").splitAsStream(query).map(p -> Arrays.copyOf(p.split(\"=\"), 2)).forEach(a -> params.put(a[0], a[1]));\r\n    String siteTitle = \"\";\r\n    String sheetName = \"\";\r\n    String context = params.get(\"contextString\");\r\n    Site site = null;\r\n    Group group = null;\r\n    try {\r\n        site = siteService.getSite(context);\r\n        siteTitle = sheetName = site.getTitle();\r\n        if (!\"all\".equals(params.get(\"viewString\"))) {\r\n            group = site.getGroup(params.get(\"viewString\"));\r\n            siteTitle = siteTitle + \"-\" + group.getTitle();\r\n            sheetName = group.getTitle();\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(\"Cannot get site context: {}, {}\", params.get(\"contextString\"), e.getMessage());\r\n        return;\r\n    }\r\n    List<Assignment> downloadable = assignmentService.getAssignmentsForContext(context).stream().filter(a -> !a.getDraft()).filter(a -> assignmentService.allowGradeSubmission(AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference())).sorted(new AssignmentComparator()).collect(Collectors.toList());\r\n    if (downloadable.isEmpty()) {\r\n        log.warn(\"No gradable assignments can be downloaded for reference: {}\", reference);\r\n    } else {\r\n        String refToCheck = group == null ? site.getReference() : group.getReference();\r\n        List<String> allowAddAnySubmissionUsers = assignmentService.allowAddAnySubmissionUsers(refToCheck);\r\n        List<User> members = userDirectoryService.getUsers(allowAddAnySubmissionUsers);\r\n        boolean isNotesEnabled = candidateDetailProvider != null && site != null && candidateDetailProvider.isAdditionalNotesEnabled(site);\r\n        Map<String, Submitter> submitterMap = new HashMap();\r\n        members.sort(new UserComparator());\r\n        for (User user : members) {\r\n            Submitter submitter = new Submitter(user.getDisplayId(), user.getSortName());\r\n            submitterMap.put(user.getId(), submitter);\r\n            if (isNotesEnabled) {\r\n                Optional<List<String>> additionalNotes = candidateDetailProvider.getAdditionalNotes(user, site);\r\n                submitter.setNotes(additionalNotes);\r\n            }\r\n        }\r\n        Workbook wb = new SXSSFWorkbook(6 + members.size());\r\n        Sheet sheet = wb.createSheet(WorkbookUtil.createSafeSheetName(sheetName));\r\n        Row row = sheet.createRow(0);\r\n        row.createCell(0).setCellValue(rb.getString(\"download.spreadsheet.title\"));\r\n        row = sheet.createRow(1);\r\n        row.createCell(0).setCellValue(\"\");\r\n        row = sheet.createRow(2);\r\n        row.createCell(0).setCellValue(rb.getString(\"download.spreadsheet.site\") + siteTitle);\r\n        row = sheet.createRow(3);\r\n        row.createCell(0).setCellValue(rb.getString(\"download.spreadsheet.date\") + assignmentService.getUsersLocalDateTimeString(Instant.now()));\r\n        row = sheet.createRow(4);\r\n        row.createCell(0).setCellValue(\"\");\r\n        CellStyle style = wb.createCellStyle();\r\n        Cell cell;\r\n        final int headerRowNumber = 5;\r\n        row = sheet.createRow(headerRowNumber);\r\n        int cellColumnNum = 0;\r\n        cell = row.createCell(cellColumnNum++);\r\n        cell.setCellStyle(style);\r\n        cell.setCellValue(rb.getString(\"download.spreadsheet.column.name\"));\r\n        cell = row.createCell(cellColumnNum);\r\n        cell.setCellStyle(style);\r\n        cell.setCellValue(rb.getString(\"download.spreadsheet.column.userid\"));\r\n        Map<Submitter, List<Object>> results = new TreeMap();\r\n        int index = 0;\r\n        int assignmentSize = downloadable.size();\r\n        for (Assignment a : downloadable) {\r\n            Assignment.GradeType assignmentType = a.getTypeOfGrade();\r\n            int rowNum = headerRowNumber;\r\n            row = sheet.getRow(rowNum++);\r\n            cellColumnNum = (index + 2);\r\n            cell = row.createCell(cellColumnNum);\r\n            cell.setCellStyle(style);\r\n            cell.setCellValue(a.getTitle());\r\n            for (AssignmentSubmission submission : assignmentService.getSubmissions(a)) {\r\n                if (a.getIsGroup()) {\r\n                    for (AssignmentSubmissionSubmitter submissionSubmitter : submission.getSubmitters()) {\r\n                        String userId = submissionSubmitter.getSubmitter();\r\n                        Submitter submitter = submitterMap.get(userId);\r\n                        if (submitter != null) {\r\n                            if (assignmentService.assignmentUsesAnonymousGrading(a)) {\r\n                                submitter = new Submitter(userId, submitter);\r\n                            }\r\n                            List<Object> objects = results.computeIfAbsent(submitter, k -> new ArrayList(Collections.nCopies(assignmentSize, null)));\r\n                            if (submission.getGraded() && submission.getGrade() != null) {\r\n                                if (assignmentType == Assignment.GradeType.SCORE_GRADE_TYPE) {\r\n                                    try {\r\n                                        int factor = submission.getAssignment().getScaleFactor();\r\n                                        int dec = (int) Math.log10(factor);\r\n                                        final NumberFormat nbFormat = FormattedText.getNumberFormat(dec, dec, null);\r\n                                        float f = nbFormat.parse(getGrade(submissionSubmitter)).floatValue();\r\n                                        style = wb.createCellStyle();\r\n                                        String format = \"#,##0.\";\r\n                                        for (int j = 0; j < dec; j++) {\r\n                                            format = format.concat(\"0\");\r\n                                        }\r\n                                        objects.set(index, new FloatCell(format, f));\r\n                                    } catch (Exception e) {\r\n                                        objects.set(index, submissionSubmitter.getGrade() == null ? submission.getGrade() : submissionSubmitter.getGrade());\r\n                                        log.warn(\"Cannot get grade for assignment submission={}, user={}\", submission.getId(), userId);\r\n                                    }\r\n                                } else {\r\n                                    objects.set(index, submissionSubmitter.getGrade() == null ? submission.getGrade() : submissionSubmitter.getGrade());\r\n                                }\r\n                            } else if (submission.getSubmitted() && submission.getDateSubmitted() != null) {\r\n                                objects.set(index, rb.getString(\"gen.nograd\"));\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    AssignmentSubmissionSubmitter[] submissionSubmitters = submission.getSubmitters().toArray(new AssignmentSubmissionSubmitter[] {});\r\n                    if (submissionSubmitters.length == 0) {\r\n                        continue;\r\n                    }\r\n                    Submitter submitter = submitterMap.get(submissionSubmitters[0].getSubmitter());\r\n                    if (submitter != null) {\r\n                        if (assignmentService.assignmentUsesAnonymousGrading(a)) {\r\n                            submitter = new Submitter(submission.getId() + \" \" + rb.getString(\"grading.anonymous.title\"), submitter);\r\n                        }\r\n                        List<Object> objects = results.computeIfAbsent(submitter, k -> new ArrayList(Collections.nCopies(assignmentSize, null)));\r\n                        if (submission.getGraded() && submission.getGrade() != null) {\r\n                            String grade = assignmentService.getGradeForSubmitter(submission, submissionSubmitters[0].getSubmitter());\r\n                            if (assignmentType == Assignment.GradeType.SCORE_GRADE_TYPE) {\r\n                                try {\r\n                                    int factor = submission.getAssignment().getScaleFactor();\r\n                                    int dec = (int) Math.log10(factor);\r\n                                    NumberFormat nbFormat = FormattedText.getNumberFormat(dec, dec, null);\r\n                                    float f = nbFormat.parse(grade).floatValue();\r\n                                    String format = \"#,##0.\";\r\n                                    for (int j = 0; j < dec; j++) {\r\n                                        format = format.concat(\"0\");\r\n                                    }\r\n                                    style.setDataFormat(wb.createDataFormat().getFormat(format));\r\n                                    cell.setCellStyle(style);\r\n                                    objects.set(index, new FloatCell(format, f));\r\n                                } catch (Exception e) {\r\n                                    objects.set(index, grade);\r\n                                }\r\n                            } else {\r\n                                objects.set(index, grade);\r\n                            }\r\n                        } else if (submission.getSubmitted() && submission.getDateSubmitted() != null) {\r\n                            objects.set(index, rb.getString(\"gen.nograd\"));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            index++;\r\n            if (isNotesEnabled) {\r\n                int cellNum = (index + 2);\r\n                rowNum = headerRowNumber;\r\n                row = sheet.getRow(rowNum++);\r\n                cell = row.createCell(cellNum);\r\n                cell.setCellType(CellType.STRING);\r\n                cell.setCellValue(rb.getString(\"gen.notes\"));\r\n            }\r\n            for (Map.Entry<Submitter, List<Object>> entry : results.entrySet()) {\r\n                Row sheetRow = sheet.createRow(rowNum++);\r\n                Submitter submitter = entry.getKey();\r\n                List<Object> rowValues = entry.getValue();\r\n                int column = 0;\r\n                if (submitter.anonymous) {\r\n                    sheetRow.createCell(column++).setCellValue(\"\");\r\n                    sheetRow.createCell(column++).setCellValue(submitter.id);\r\n                } else {\r\n                    sheetRow.createCell(column++).setCellValue(submitter.sortName);\r\n                    sheetRow.createCell(column++).setCellValue(submitter.id);\r\n                }\r\n                for (Object rowValue : rowValues) {\r\n                    if (rowValue instanceof FloatCell) {\r\n                        FloatCell floatValue = (FloatCell) rowValue;\r\n                        cell = sheetRow.createCell(column++, CellType.NUMERIC);\r\n                        cell.setCellValue(floatValue.value);\r\n                        style = wb.createCellStyle();\r\n                        style.setDataFormat(wb.createDataFormat().getFormat(floatValue.format));\r\n                        cell.setCellStyle(style);\r\n                    } else if (rowValue != null) {\r\n                        cell = sheetRow.createCell(column++, CellType.STRING);\r\n                        cell.setCellValue(rowValue.toString());\r\n                    } else {\r\n                        cell = sheetRow.createCell(column++, CellType.STRING);\r\n                        cell.setCellValue(rb.getString(\"listsub.nosub\"));\r\n                    }\r\n                }\r\n                if (isNotesEnabled) {\r\n                    int col = column;\r\n                    for (String note : submitter.notes) {\r\n                        Cell noteCell = sheetRow.createCell(col++, CellType.STRING);\r\n                        noteCell.setCellValue(note);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            wb.write(out);\r\n        } catch (IOException e) {\r\n            log.warn(\"Failed to write out spreadsheet:\" + e.getMessage());\r\n        } finally {\r\n            try {\r\n                wb.close();\r\n            } catch (IOException e) {\r\n                log.warn(\"Failed to close spreadsheet:\" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "co.rsk.mine.MinerClientImpl.findNonce",
	"Comment": "findnonce will try to find a valid nonce for bitcoinmergedminingblock, that satisfies the given target difficulty.",
	"Method": "boolean findNonce(co.rsk.bitcoinj.core.BtcBlock bitcoinMergedMiningBlock,BigInteger target){\r\n    bitcoinMergedMiningBlock.setNonce(nextNonceToUse++);\r\n    while (!stop && !newBestBlockArrivedFromAnotherNode) {\r\n        BigInteger blockHashBI = bitcoinMergedMiningBlock.getHash().toBigInteger();\r\n        if (blockHashBI.compareTo(target) <= 0) {\r\n            return true;\r\n        }\r\n        bitcoinMergedMiningBlock.setNonce(nextNonceToUse++);\r\n        if (bitcoinMergedMiningBlock.getNonce() % 100000 == 0) {\r\n            logger.debug(\"Solving block. Nonce: \" + bitcoinMergedMiningBlock.getNonce());\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.syncGrades",
	"Comment": "check turnitin for grades and write them to the associated gradebook",
	"Method": "void syncGrades(Map<String, Object> data){\r\n    Session sess = sessionManager.getCurrentSession();\r\n    boolean runOnce = gradesChecked(sess, data.get(\"taskId\").toString());\r\n    boolean isStudent = isUserStudent(data.get(\"siteId\").toString(), sess.getUserId());\r\n    String siteId = data.get(\"siteId\").toString();\r\n    if (turnitinConn.getUseGradeMark() && gradebookService.isGradebookDefined(siteId) && !runOnce && !isStudent) {\r\n        log.info(\"Syncing Grades with Turnitin\");\r\n        String taskId = data.get(\"taskId\").toString();\r\n        HashMap<String, Integer> reportTable = new HashMap<String, Integer>();\r\n        HashMap<String, String> additionalData = new HashMap<String, String>();\r\n        String tiiUserId = \"\";\r\n        String assign = taskId;\r\n        if (data.containsKey(\"assignment1\")) {\r\n            assign = getAssignmentTitle(taskId);\r\n        }\r\n        sess.setAttribute(\"sync\", taskId);\r\n        Map<String, Object> enrollmentInfo = getAllEnrollmentInfo(siteId);\r\n        try {\r\n            Assignment assignment = getAssociatedGbItem(data);\r\n            if (assignment == null) {\r\n                log.warn(\"Failed to find assignment when syncing site: \" + siteId);\r\n                return;\r\n            }\r\n            Map params = new HashMap();\r\n            params = TurnitinAPIUtil.packMap(turnitinConn.getBaseTIIOptions(), \"fid\", \"10\", \"fcmd\", \"2\", \"tem\", getTEM(siteId), \"assign\", assign, \"assignid\", taskId, \"cid\", siteId, \"ctl\", siteId, \"utp\", \"2\");\r\n            params.putAll(getInstructorInfo(siteId));\r\n            Document document = null;\r\n            document = turnitinConn.callTurnitinReturnDocument(params);\r\n            Element root = document.getDocumentElement();\r\n            if (((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim().compareTo(\"72\") == 0) {\r\n                NodeList objects = root.getElementsByTagName(\"object\");\r\n                String grade = \"\";\r\n                log.debug(objects.getLength() + \" objects in the returned list\");\r\n                for (int i = 0; i < objects.getLength(); i++) {\r\n                    tiiUserId = ((CharacterData) (((Element) (objects.item(i))).getElementsByTagName(\"userid\").item(0).getFirstChild())).getData().trim();\r\n                    additionalData.put(\"tiiUserId\", tiiUserId);\r\n                    try {\r\n                        grade = ((CharacterData) (((Element) (objects.item(i))).getElementsByTagName(\"score\").item(0).getFirstChild())).getData().trim();\r\n                        reportTable.put(\"grade\" + tiiUserId, Integer.valueOf(grade));\r\n                    } catch (Exception e) {\r\n                        grade = \"\";\r\n                    }\r\n                    if (!grade.equals(\"\")) {\r\n                        writeGrade(assignment, data, reportTable, additionalData, enrollmentInfo);\r\n                    }\r\n                }\r\n            } else {\r\n                log.debug(\"Report list request not successful\");\r\n                log.debug(document.getTextContent());\r\n            }\r\n        } catch (GradebookNotFoundException e) {\r\n            log.warn(\"Failed to find gradebook for site: \" + e.getMessage());\r\n        } catch (TransientSubmissionException e) {\r\n            log.error(e.getMessage());\r\n        } catch (SubmissionException e) {\r\n            log.warn(\"SubmissionException error. \" + e.getMessage());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.SQLTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = STRING;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = CHAR;\r\n            start = text.offset;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.isSynopticTool",
	"Comment": "returns true if the tool with the id passed in exists in the\tcurrent site.",
	"Method": "boolean isSynopticTool(){\r\n    String curToolId = ToolManager.getCurrentTool().getId();\r\n    if (SYNOPTIC_ANNOUNCEMENT_TOOL.equals(curToolId)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.timeout",
	"Comment": "fall back to another solo if the other publisher signals or completesbefore this solo signals a value.",
	"Method": "Solo<T> timeout(long timeout,TimeUnit unit,Solo<T> timeout,long timeout,TimeUnit unit,Scheduler scheduler,Solo<T> timeout,long timeout,TimeUnit unit,Solo<T> fallback,Solo<T> timeout,long timeout,TimeUnit unit,Scheduler scheduler,Solo<T> fallback,Solo<T> timeout,Publisher<?> other,Solo<T> timeout,Publisher<?> other,Solo<T> fallback){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    ObjectHelper.requireNonNull(fallback, \"fallback is null\");\r\n    return onAssembly(new SoloTimeout<T>(this, other, fallback));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport.getPaintBorder",
	"Comment": "returns whether a border is painted around marked occurrences.",
	"Method": "boolean getPaintBorder(){\r\n    return p.getPaintBorder();\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.SwiftFileSystemHandler.setUseIdForPath",
	"Comment": "whether to use the id for the resource path.the default is false, so the filepath will be used.",
	"Method": "void setUseIdForPath(boolean useIdForPath){\r\n    this.useIdForPath = useIdForPath;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.isUserStudent",
	"Comment": "check if the specified user has the student role on the specified site.",
	"Method": "boolean isUserStudent(String siteId,String userId){\r\n    boolean isStudent = false;\r\n    try {\r\n        Set<String> studentIds = siteService.getSite(siteId).getUsersIsAllowed(\"section.role.student\");\r\n        List<User> activeUsers = userDirectoryService.getUsers(studentIds);\r\n        for (int i = 0; i < activeUsers.size(); i++) {\r\n            User user = activeUsers.get(i);\r\n            if (userId.equals(user.getId())) {\r\n                return true;\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        log.info(\"(isStudentUser)\" + e);\r\n    }\r\n    return isStudent;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getSource",
	"Comment": "gets the dublincore module source. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getSource(){\r\n    return Lists.firstEntry(source);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DockerTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JSPTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.build_student_preview_submission_context",
	"Comment": "build the student preview of showing an assignment submission",
	"Method": "String build_student_preview_submission_context(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    User user = (User) state.getAttribute(STATE_USER);\r\n    String aReference = (String) state.getAttribute(PREVIEW_SUBMISSION_ASSIGNMENT_REFERENCE);\r\n    Assignment assignment = getAssignment(aReference, \"build_student_preview_submission_context\", state);\r\n    if (assignment != null) {\r\n        context.put(\"assignment\", assignment);\r\n        context.put(\"assignmentReference\", AssignmentReferenceReckoner.reckoner().assignment(assignment).reckon().getReference());\r\n        context.put(\"typeOfGradeString\", getTypeOfGradeString(assignment.getTypeOfGrade()));\r\n        context.put(\"canSubmit\", assignmentService.canSubmit(assignment));\r\n        AssignmentSubmission submission = getSubmission(aReference, user, \"build_student_preview_submission_context\", state);\r\n        if (submission != null) {\r\n            context.put(\"submission\", submission);\r\n            String currentUser = userDirectoryService.getCurrentUser().getId();\r\n            String grade = assignmentService.getGradeForSubmitter(submission, currentUser);\r\n            context.put(\"grade\", grade);\r\n            context.put(\"submissionReference\", AssignmentReferenceReckoner.reckoner().submission(submission).reckon().getReference());\r\n        }\r\n        setScoringAgentProperties(context, assignment, submission, false);\r\n        canViewAssignmentIntoContext(context, assignment, submission);\r\n        assignment_resubmission_option_into_context(context, state);\r\n        if (state.getAttribute(SAVED_FEEDBACK) != null) {\r\n            context.put(\"savedFeedback\", Boolean.TRUE);\r\n            state.removeAttribute(SAVED_FEEDBACK);\r\n        }\r\n        if (state.getAttribute(OW_FEEDBACK) != null) {\r\n            context.put(\"overwriteFeedback\", Boolean.TRUE);\r\n            state.removeAttribute(OW_FEEDBACK);\r\n        }\r\n        if (state.getAttribute(RETURNED_FEEDBACK) != null) {\r\n            context.put(\"returnedFeedback\", Boolean.TRUE);\r\n            state.removeAttribute(RETURNED_FEEDBACK);\r\n        }\r\n    }\r\n    context.put(\"text\", state.getAttribute(PREVIEW_SUBMISSION_TEXT));\r\n    if (assignment.getContentReview()) {\r\n        context.put(\"plagiarismStudentPreview\", state.getAttribute(\"plagiarismStudentPreview\"));\r\n        context.put(\"plagiarismFileTypes\", state.getAttribute(\"plagiarismFileTypes\"));\r\n        context.put(\"plagiarismNote\", state.getAttribute(\"plagiarismNote\"));\r\n        context.put(\"name_plagiarism_eula_agreement\", SUBMISSION_REVIEW_SERVICE_EULA_AGREEMENT);\r\n        context.put(\"value_plagiarism_eula_agreement\", state.getAttribute(SUBMISSION_REVIEW_SERVICE_EULA_AGREEMENT));\r\n        context.put(\"plagiarismEULALink\", state.getAttribute(\"eulaServiceLink\"));\r\n        context.put(\"name_check_plagiarism_eula_agreement\", SUBMISSION_REVIEW_CHECK_SERVICE_EULA_AGREEMENT);\r\n    }\r\n    context.put(\"attachments\", stripInvisibleAttachments(state.getAttribute(PREVIEW_SUBMISSION_ATTACHMENTS)));\r\n    context.put(\"contentTypeImageService\", contentTypeImageService);\r\n    String template = (String) getContext(data).get(\"template\");\r\n    return template + TEMPLATE_STUDENT_PREVIEW_SUBMISSION;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.SiteEmailNotificationDragAndDrop.getRecipients",
	"Comment": "get the list of user objects who are eligible to receive the notification email.",
	"Method": "List getRecipients(Event event){\r\n    if (this.isDropboxFolder()) {\r\n        List recipients = new ArrayList();\r\n        String resourceRef = event.getResource();\r\n        Reference ref = entityManager.newReference(resourceRef);\r\n        String siteId = (getSite() != null) ? getSite() : ref.getContext();\r\n        Site site;\r\n        try {\r\n            site = siteService.getSite(siteId);\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"Could not getSite for {} not returning any recipients.\", siteId);\r\n            return recipients;\r\n        }\r\n        ResourceProperties props = ref.getProperties();\r\n        String modifiedBy = userDirectoryService.getCurrentUser().getId();\r\n        String[] parts = resourceRef.split(\"/\");\r\n        if (parts.length >= 4) {\r\n            String dropboxOwnerId = parts[4];\r\n            if (modifiedBy != null && modifiedBy.equals(dropboxOwnerId)) {\r\n                StringBuilder buf = new StringBuilder();\r\n                buf.append(\"/content/group-user/\");\r\n                buf.append(parts[3]);\r\n                buf.append(\"/\");\r\n                String siteDropbox = buf.toString();\r\n                recipients.addAll(securityService.unlockUsers(contentHostingService.AUTH_DROPBOX_MAINTAIN, siteDropbox));\r\n                List<User> dropboxGroupsRecipients = new ArrayList<User>();\r\n                dropboxGroupsRecipients.addAll(securityService.unlockUsers(contentHostingService.AUTH_DROPBOX_GROUPS, siteDropbox));\r\n                recipients.addAll(filterUsersInGroups(dropboxGroupsRecipients, modifiedBy, site));\r\n                refineToSiteMembers(recipients, site);\r\n            } else {\r\n                try {\r\n                    User user = userDirectoryService.getUser(dropboxOwnerId);\r\n                    recipients.add(user);\r\n                } catch (UserNotDefinedException e0) {\r\n                    try {\r\n                        User user = userDirectoryService.getUserByEid(dropboxOwnerId);\r\n                        recipients.add(user);\r\n                    } catch (UserNotDefinedException e1) {\r\n                        log.warn(\"UserNotDefinedException trying to get user: {}\", dropboxOwnerId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return recipients;\r\n    } else {\r\n        return super.getRecipients(event);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.switchFlatMap",
	"Comment": "combination of switchmap and flatmap where there is a limit on the number ofconcurrent sources to be flattened into a single sequence and if the operator is atthe given maximum active count, a newer source publisher will switch out the oldestactive source publisher being merged.",
	"Method": "FlowableTransformer<T, R> switchFlatMap(Function<? super T, ? extends Publisher<? extends R>> mapper,int maxActive,FlowableTransformer<T, R> switchFlatMap,Function<? super T, ? extends Publisher<? extends R>> mapper,int maxActive,int bufferSize){\r\n    ObjectHelper.requireNonNull(mapper, \"mapper is null\");\r\n    ObjectHelper.verifyPositive(maxActive, \"maxActive\");\r\n    ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\r\n    return new FlowableSwitchFlatMap<T, R>(null, mapper, maxActive, bufferSize);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ActionScriptTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.TThRecurrenceRule.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element rule = doc.createElement(\"rule\");\r\n    ((Element) stack.peek()).appendChild(rule);\r\n    rule.setAttribute(\"class\", \"org.chefproject.osid.calendar.TThRecurrenceRule\");\r\n    rule.setAttribute(\"name\", \"TThRecurrenceRule\");\r\n    setBaseClassXML(rule);\r\n    return rule;\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentItemTest.testContentValueNamespace",
	"Comment": "test of contentvaluenamespace method, of class com.totsp.xml.syndication.content.contentitem.",
	"Method": "void testContentValueNamespace(){\r\n    LOG.debug(\"testContentValueNamespace\");\r\n    final String test = \"http://www.w3.org/1999/xhtml\";\r\n    item.setContentFormat(test);\r\n    assertTrue(item.getContentFormat().equals(test));\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentItemTest.testContentFormat",
	"Comment": "test of contentformat method, of class com.totsp.xml.syndication.content.contentitem.",
	"Method": "void testContentFormat(){\r\n    LOG.debug(\"testContentFormat\");\r\n    final String test = \"application/xhtml\";\r\n    item.setContentFormat(test);\r\n    assertTrue(item.getContentFormat().equals(test));\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientMediaEntry.getSlug",
	"Comment": "set string to be used in file name of new media resource on server.",
	"Method": "String getSlug(){\r\n    return slug;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchEngine.getFindInText",
	"Comment": "returns the text in which to search, as a string.this is used\tinternally to grab the smallest buffer possible in which to search.",
	"Method": "String getFindInText(JTextArea textArea,int start,boolean forward){\r\n    String findIn = null;\r\n    try {\r\n        if (forward) {\r\n            findIn = textArea.getText(start, textArea.getDocument().getLength() - start);\r\n        } else {\r\n            findIn = textArea.getText(0, start);\r\n        }\r\n    } catch (BadLocationException ble) {\r\n        ble.printStackTrace();\r\n    }\r\n    return findIn;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.TemplateParseUtil.preprocessTemplate",
	"Comment": "process a template into a preprocessed template which can be cached",
	"Method": "PreProcessedTemplate preprocessTemplate(Template t){\r\n    if (t.incoming) {\r\n        TemplateParseUtil.validateTemplate(t.template);\r\n    } else {\r\n        t.template = TemplateParseUtil.validateOutgoingTemplate(t.template);\r\n    }\r\n    List<String> vars = new ArrayList<String>();\r\n    StringBuilder regex = new StringBuilder();\r\n    String[] parts = t.template.split(BRACES);\r\n    for (int j = 0; j < parts.length; j++) {\r\n        String part = parts[j];\r\n        if (j % 2 == 0) {\r\n            regex.append(part.replace(\"?\", \"\\\\?\").replace(\".\", \"\\\\.\").replace(\"*\", \"\\\\*\").replace(\"+\", \"\\\\+\").replace(\"-\", \"\\\\-\").replace(\"(\", \"\\\\\\\\(\").replace(\")\", \"\\\\\\\\)\"));\r\n        } else {\r\n            vars.add(part);\r\n            regex.append(\"(\");\r\n            regex.append(VALID_VAR_CHARS);\r\n            regex.append(\"+)\");\r\n        }\r\n    }\r\n    return new PreProcessedTemplate(t.templateKey, t.template, regex.toString(), new ArrayList<String>(vars));\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.EntityView.populateInternals",
	"Comment": "populates the internal values based on the view key, map of segments, and extension",
	"Method": "void populateInternals(String viewKey,Map<String, String> segments,String extension){\r\n    setViewKey(viewKey);\r\n    if (VIEW_DELETE.equals(viewKey)) {\r\n        setMethod(Method.DELETE);\r\n    } else if (VIEW_EDIT.equals(viewKey)) {\r\n        setMethod(Method.PUT);\r\n    } else if (VIEW_NEW.equals(viewKey)) {\r\n        setMethod(Method.POST);\r\n    } else {\r\n        setMethod(Method.GET);\r\n    }\r\n    this.extension = extension;\r\n    this.pathSegments = new HashMap<String, String>();\r\n    this.pathSegments.putAll(segments);\r\n    String prefix = null;\r\n    String id = null;\r\n    for (Entry<String, String> se : segments.entrySet()) {\r\n        if (PREFIX.equals(se.getKey())) {\r\n            prefix = se.getValue();\r\n        } else if (ID.equals(se.getKey())) {\r\n            id = se.getValue();\r\n        }\r\n    }\r\n    if (prefix == null) {\r\n        throw new IllegalArgumentException(\"Cannot identify an entity space for this view,\" + \"there appears to be no prefix that was parsed from the url\");\r\n    }\r\n    this.entityReference = new EntityReference(prefix, id == null ? \"\" : id);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.Category.getLabel",
	"Comment": "label is the human readable label that can be displayed in end user applications. it is anoptional attribute.",
	"Method": "String getLabel(){\r\n    return label;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.search.Search.getOrders",
	"Comment": "orders define the order of the returned results of a search, you can add as many orders as you like and they will be applied in the array order",
	"Method": "Order[] getOrders(){\r\n    return orders;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getCurrentLineHighlightColor",
	"Comment": "returns the color being used to highlight the current line.note that\tif highlighting the current line is turned off, you will not be seeing\tthis highlight.",
	"Method": "Color getCurrentLineHighlightColor(){\r\n    return currentLineColor;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.FortranTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = STRING;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = CHAR;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.doDescription",
	"Comment": "action is used when dodescription is requested when the user click on an event",
	"Method": "void doDescription(RunData data,Context context){\r\n    CalendarEvent calendarEventObj = null;\r\n    Calendar calendarObj = null;\r\n    CalendarActionState state = (CalendarActionState) getState(context, data, CalendarActionState.class);\r\n    String peid = ((JetspeedRunData) data).getJs_peid();\r\n    SessionState sstate = ((JetspeedRunData) data).getPortletSessionState(peid);\r\n    Reference ref = EntityManager.newReference(data.getParameters().getString(EVENT_REFERENCE_PARAMETER));\r\n    String eventId = ref.getId();\r\n    String calId = null;\r\n    if (CalendarService.REF_TYPE_EVENT_SUBSCRIPTION.equals(ref.getSubType()))\r\n        calId = CalendarService.calendarSubscriptionReference(ref.getContext(), ref.getContainer());\r\n    else\r\n        calId = CalendarService.calendarReference(ref.getContext(), ref.getContainer());\r\n    try {\r\n        calendarObj = CalendarService.getCalendar(calId);\r\n        try {\r\n            calendarEventObj = calendarObj.getEvent(eventId);\r\n            TimeBreakdown b = calendarEventObj.getRange().firstTime().breakdownLocal();\r\n            sstate.setAttribute(STATE_YEAR, Integer.valueOf(b.getYear()));\r\n            sstate.setAttribute(STATE_MONTH, Integer.valueOf(b.getMonth()));\r\n            sstate.setAttribute(STATE_DAY, Integer.valueOf(b.getDay()));\r\n            sstate.setAttribute(STATE_NAV_DIRECTION, STATE_CURRENT_ACT);\r\n        } catch (IdUnusedException err) {\r\n            log.debug(\".IdUnusedException \" + err);\r\n            state.setCalendarEventId(\"\", \"\");\r\n            String errorCode = rb.getString(\"java.error\");\r\n            addAlert(sstate, errorCode);\r\n            return;\r\n        } catch (PermissionException err) {\r\n            addAlert(sstate, rb.getString(\"java.alert.youcreate\"));\r\n            log.debug(\".PermissionException \" + err);\r\n            return;\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        addAlert(sstate, rb.getString(\"java.alert.noexist\"));\r\n        return;\r\n    } catch (PermissionException e) {\r\n        addAlert(sstate, rb.getString(\"java.alert.youcreate\"));\r\n        return;\r\n    }\r\n    String returnState = state.getState();\r\n    state.setPrevState(CalendarAction.STATE_INITED);\r\n    state.setReturnState(CalendarAction.STATE_INITED);\r\n    state.setState(\"description\");\r\n    state.setAttachments(null);\r\n    state.setCalendarEventId(calId, eventId);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JsonTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.BaseCitationService.getAccessPoint",
	"Comment": "access the partial url that forms the root of calendar urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : m_serverConfigurationService.getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesBrowseItem.setGroups",
	"Comment": "replace the current list of groups with this list of group objects representing the groups that have access to this item.",
	"Method": "void setGroups(Collection groups){\r\n    if (groups == null) {\r\n        return;\r\n    }\r\n    if (m_groups == null) {\r\n        m_groups = new Vector();\r\n    }\r\n    m_groups.clear();\r\n    Iterator it = groups.iterator();\r\n    while (it.hasNext()) {\r\n        Object obj = it.next();\r\n        if (obj instanceof Group && !hasGroup(((Group) obj).getReference())) {\r\n            m_groups.add(obj);\r\n        } else if (obj instanceof String && !hasGroup((String) obj)) {\r\n            addGroup((String) obj);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.network.QTagTxParser.parseDataUsageForUidAndTag",
	"Comment": "reads the qtaguid file and returns a difference from the previous read.",
	"Method": "long parseDataUsageForUidAndTag(int uid){\r\n    StrictMode.ThreadPolicy savedPolicy = StrictMode.allowThreadDiskReads();\r\n    try {\r\n        long tagTxBytes = 0;\r\n        FileInputStream fis = new FileInputStream(mPath);\r\n        sStatsReader.setFileStream(fis);\r\n        byte[] buffer = sLineBuffer.get();\r\n        try {\r\n            int length;\r\n            sStatsReader.skipLine();\r\n            int line = 2;\r\n            while ((length = sStatsReader.readLine(buffer)) != -1) {\r\n                try {\r\n                    sScanner.reset(buffer, length);\r\n                    sScanner.useDelimiter(' ');\r\n                    sScanner.skip();\r\n                    if (sScanner.nextStringEquals(\"lo\")) {\r\n                        continue;\r\n                    }\r\n                    sScanner.skip();\r\n                    if (sScanner.nextInt() != uid) {\r\n                        continue;\r\n                    }\r\n                    sScanner.skip();\r\n                    sScanner.skip();\r\n                    sScanner.skip();\r\n                    int txBytes = sScanner.nextInt();\r\n                    tagTxBytes += txBytes;\r\n                    line++;\r\n                } catch (NumberFormatException e) {\r\n                    Log.e(TAG, \"Cannot parse byte count at line\" + line + \".\");\r\n                    continue;\r\n                } catch (NoSuchElementException e) {\r\n                    Log.e(TAG, \"Invalid number of tokens on line \" + line + \".\");\r\n                    continue;\r\n                }\r\n            }\r\n        } finally {\r\n            fis.close();\r\n        }\r\n        if (sPreviousBytes == -1) {\r\n            sPreviousBytes = tagTxBytes;\r\n            return -1;\r\n        }\r\n        long diff = tagTxBytes - sPreviousBytes;\r\n        sPreviousBytes = tagTxBytes;\r\n        return diff;\r\n    } catch (IOException e) {\r\n        Log.e(TAG, \"Error reading from /proc/net/xt_qtaguid/stats. Please check if this file exists.\");\r\n    } finally {\r\n        StrictMode.setThreadPolicy(savedPolicy);\r\n    }\r\n    return -1;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doChange_submission_list_option",
	"Comment": "action is to view the content of one specific assignment submission",
	"Method": "void doChange_submission_list_option(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String view = params.getString(\"viewgroup\");\r\n    if (view == null) {\r\n        view = params.getString(\"view\");\r\n    }\r\n    state.setAttribute(VIEW_SUBMISSION_LIST_OPTION, view);\r\n}"
}, {
	"Path": "org.sakaibrary.xserver.RegexUtility.test",
	"Comment": "tests whether or not the regular expression is contained in the string.",
	"Method": "boolean test(String string,String regex){\r\n    Pattern pattern = Pattern.compile(regex.trim());\r\n    Matcher matcher = pattern.matcher(string.trim());\r\n    return matcher.find();\r\n}"
}, {
	"Path": "org.sakaiproject.basiclti.UrlUtility.cleanUrl",
	"Comment": "clean an encoded string so it may be embedded as a query parameter.",
	"Method": "String cleanUrl(String encodedUrl){\r\n    return encodedUrl.replaceAll(\"\\\\+\", \"-\").replaceAll(\"/\", \"_\").replaceAll(\"=\", \"\");\r\n}"
}, {
	"Path": "org.sakaiproject.component.section.sakai.CourseSectionImpl.getGroup",
	"Comment": "access the group object being decorated.this field is transient, so this\tis likely to return null.this method should not be added to the coursesection\tinterface, since it is implementation dependent.",
	"Method": "Group getGroup(){\r\n    return group;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.atom.Content.setValue",
	"Comment": "sets the content value.the value being set should be decoded.",
	"Method": "void setValue(String value){\r\n    this.value = value;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.timer",
	"Comment": "signals a 0l after the specified amount of time has passed sincesubscription on the specified scheduler.",
	"Method": "Solo<Long> timer(long delay,TimeUnit unit,Solo<Long> timer,long delay,TimeUnit unit,Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(unit, \"unit is null\");\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new SoloTimer(delay, unit, scheduler));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxUtilities.getDesktopAntiAliasHints",
	"Comment": "returns the rendering hints for text that will most accurately reflect\tthose of the native windowing system.",
	"Method": "Map<?, ?> getDesktopAntiAliasHints(){\r\n    return (Map<?, ?>) Toolkit.getDefaultToolkit().getDesktopProperty(\"awt.font.desktophints\");\r\n}"
}, {
	"Path": "com.rometools.propono.atom.common.rome.AppModuleGenerator.generate",
	"Comment": "generate jdom element for module and add it to parent element",
	"Method": "void generate(Module module,Element parent){\r\n    final AppModule m = (AppModule) module;\r\n    if (m.getDraft() != null) {\r\n        final String draft = m.getDraft().booleanValue() ? \"yes\" : \"no\";\r\n        final Element control = new Element(\"control\", APP_NS);\r\n        control.addContent(generateSimpleElement(\"draft\", draft));\r\n        parent.addContent(control);\r\n    }\r\n    if (m.getEdited() != null) {\r\n        final Element edited = new Element(\"edited\", APP_NS);\r\n        final SimpleDateFormat dateFormater = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US);\r\n        dateFormater.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n        edited.addContent(dateFormater.format(m.getEdited()));\r\n        parent.addContent(edited);\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.doSign",
	"Comment": "signs the given hash and returns the r and s components as bigintegersand put them in ecdsasignature",
	"Method": "ECDSASignature doSign(byte[] input){\r\n    if (priv == null) {\r\n        throw new MissingPrivateKeyException();\r\n    }\r\n    ECDSASigner signer = new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest()));\r\n    ECPrivateKeyParameters privKey = new ECPrivateKeyParameters(priv, CURVE);\r\n    signer.init(true, privKey);\r\n    BigInteger[] components = signer.generateSignature(input);\r\n    return new ECDSASignature(components[0], components[1]).toCanonicalised();\r\n}"
}, {
	"Path": "net.oauth.signature.Base64.encodeBase64Chunked",
	"Comment": "encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks",
	"Method": "byte[] encodeBase64Chunked(byte[] binaryData){\r\n    return encodeBase64(binaryData, true);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ClojureTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.setTextArea",
	"Comment": "sets the text area being displayed.this will clear any tracking\ticons currently displayed.",
	"Method": "void setTextArea(RTextArea textArea){\r\n    if (this.textArea != null) {\r\n        listener.uninstall();\r\n    }\r\n    if (textArea != null) {\r\n        RTextAreaEditorKit kit = (RTextAreaEditorKit) textArea.getUI().getEditorKit(textArea);\r\n        if (lineNumberList == null) {\r\n            lineNumberList = kit.createLineNumberList(textArea);\r\n            lineNumberList.setFont(getLineNumberFont());\r\n            lineNumberList.setForeground(getLineNumberColor());\r\n            lineNumberList.setLineNumberingStartIndex(getLineNumberingStartIndex());\r\n        } else {\r\n            lineNumberList.setTextArea(textArea);\r\n        }\r\n        if (iconArea == null) {\r\n            iconArea = kit.createIconRowHeader(textArea);\r\n            iconArea.setInheritsGutterBackground(getIconRowHeaderInheritsGutterBackground());\r\n        } else {\r\n            iconArea.setTextArea(textArea);\r\n        }\r\n        if (foldIndicator == null) {\r\n            foldIndicator = new FoldIndicator(textArea);\r\n        } else {\r\n            foldIndicator.setTextArea(textArea);\r\n        }\r\n        listener.install(textArea);\r\n    }\r\n    this.textArea = textArea;\r\n}"
}, {
	"Path": "co.rsk.peg.PendingFederation.addPublicKey",
	"Comment": "creates a new pendingfederation with the additional specified public key",
	"Method": "PendingFederation addPublicKey(BtcECKey key){\r\n    List<BtcECKey> newKeys = new ArrayList(publicKeys);\r\n    newKeys.add(key);\r\n    return new PendingFederation(newKeys);\r\n}"
}, {
	"Path": "org.ethereum.vm.program.Program.allocateMemory",
	"Comment": "allocates extra memory in the program fora specified size, calculated from a given offset",
	"Method": "void allocateMemory(int offset,int size){\r\n    memory.extend(offset, size);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.conversion.O11Submission.setProperties",
	"Comment": "prevents nulling the member properties, this is not need in jackson 2.9",
	"Method": "void setProperties(List<O11Property> properties){\r\n    if (properties != null) {\r\n        this.properties = properties;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.XMLTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.EnrollmentSetEntityProvider.get",
	"Comment": "get an enrollment set by eid. wraps coursemanagementservice.getenrollmentsetbyeid.",
	"Method": "Object get(String eid){\r\n    EnrollmentSetCmImpl set = hibernateService.getEnrollmentSetByEid(eid);\r\n    return new EnrollmentSetData(set);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.fireHyperlinkUpdate",
	"Comment": "notifies all listeners that have registered interest for notification\ton this event type.the listener list is processed last to first.",
	"Method": "void fireHyperlinkUpdate(HyperlinkEvent e){\r\n    Object[] listeners = listenerList.getListenerList();\r\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\r\n        if (listeners[i] == HyperlinkListener.class) {\r\n            ((HyperlinkListener) listeners[i + 1]).hyperlinkUpdate(e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "co.rsk.peg.ABICallElection.clearWinners",
	"Comment": "removes the entry votes for the current winner of the election",
	"Method": "void clearWinners(){\r\n    ABICallSpec winner = getWinner();\r\n    if (winner != null) {\r\n        votes.remove(winner);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.CanonicalCourseEntityProvider.get",
	"Comment": "get a canonical course by eid. wraps coursemanageservice.getcanonicalcourse.",
	"Method": "Object get(String eid){\r\n    CanonicalCourse course = cmService.getCanonicalCourse(eid);\r\n    return new CanonicalCourseData(course);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.createWireFeed",
	"Comment": "creates a real feed containing the information of the syndfeedimpl.",
	"Method": "WireFeed createWireFeed(WireFeed createWireFeed,String feedType){\r\n    if (feedType == null) {\r\n        throw new IllegalArgumentException(\"Feed type cannot be null\");\r\n    }\r\n    final Converter converter = CONVERTERS.getConverter(feedType);\r\n    if (converter == null) {\r\n        throw new IllegalArgumentException(\"Invalid feed type [\" + feedType + \"]\");\r\n    }\r\n    return converter.createRealFeed(this);\r\n}"
}, {
	"Path": "org.fife.util.DynamicIntArray.removeRange",
	"Comment": "removes the ints in the specified range from this array\tobject.",
	"Method": "void removeRange(int fromIndex,int toIndex){\r\n    if (fromIndex >= size || toIndex > size) {\r\n        throwException3(fromIndex, toIndex);\r\n    }\r\n    int moveCount = size - toIndex;\r\n    System.arraycopy(data, toIndex, data, fromIndex, moveCount);\r\n    size -= (toIndex - fromIndex);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.CanonicalCourseEntityProvider.delete",
	"Comment": "delete a canonical course by eid. wraps coursemanagementadministration.removecanonicalcourse.",
	"Method": "void delete(String eid){\r\n    cmAdmin.removeCanonicalCourse(eid);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenIteratorTest.testEmptyLines",
	"Comment": "tests empty documents, documents with lots of blank lines, etc.",
	"Method": "void testEmptyLines(){\r\n    RSyntaxDocument doc = new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_JAVA);\r\n    doc.remove(0, doc.getLength());\r\n    assertIteratorMatchesList(doc);\r\n    doc.insertString(0, \"\\n\\n\\n\\n\", null);\r\n    assertIteratorMatchesList(doc);\r\n    doc.insertString(0, \"\\n\\n\\n\\nfor if while\\n\\n\\n\\n\", null);\r\n    assertIteratorMatchesList(doc);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.conversion.O11AssignmentContent.setProperties",
	"Comment": "prevents nulling the member properties, this is not need in jackson 2.9",
	"Method": "void setProperties(List<O11Property> properties){\r\n    if (properties != null) {\r\n        this.properties = properties;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.authz.tool.PermissionsHelperAction.panelMethodName",
	"Comment": "allow extension classes to control which build method gets called for this pannel",
	"Method": "String panelMethodName(String panel){\r\n    return \"buildMainPanelContext\";\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ChangeableHighlightPainter.getRoundedEdges",
	"Comment": "returns whether rounded edges are used when painting selections with\tthis highlight painter.",
	"Method": "boolean getRoundedEdges(){\r\n    return roundedEdges;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.WindowsBatchTokenMakerTest.assertTokenMapContains",
	"Comment": "checks for a token in a token map, and makes sure it is mapped to the\texpected token type.",
	"Method": "void assertTokenMapContains(TokenMap tm,String token,int tokenType){\r\n    int actualType = tm.get(token.toCharArray(), 0, token.length() - 1);\r\n    Assert.assertEquals(\"Token mapped to unexpected type: \" + token, tokenType, actualType);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern9.and",
	"Comment": "creates a pattern that matches when all nine observable sequences have an available element.",
	"Method": "PatternN and(Observable<? extends Object> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    List<Observable<? extends Object>> list = new ArrayList<Observable<? extends Object>>();\r\n    list.add(o1);\r\n    list.add(o2);\r\n    list.add(o3);\r\n    list.add(o4);\r\n    list.add(o5);\r\n    list.add(o6);\r\n    list.add(o7);\r\n    list.add(o8);\r\n    list.add(o9);\r\n    list.add(other);\r\n    return new PatternN(list);\r\n}"
}, {
	"Path": "com.rometools.modules.georss.GeoRSSModuleTest.assertTestInputStream",
	"Comment": "test expected latitude and longitude values in items of test file.",
	"Method": "void assertTestInputStream(InputStream in,Double[] expectedLat,Double[] expectedLng){\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new XmlReader(in));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    for (int i = 0; i < entries.size(); i++) {\r\n        final SyndEntry entry = entries.get(i);\r\n        final GeoRSSModule geoRSSModule = GeoRSSUtils.getGeoRSS(entry);\r\n        final Position position = geoRSSModule.getPosition();\r\n        if (expectedLat[i] == null || expectedLng[i] == null) {\r\n            assertNull(\"position \" + i, position);\r\n        } else {\r\n            assertEquals(\"lat \" + i, expectedLat[i], position.getLatitude(), DELTA);\r\n            assertEquals(\"lng \" + i, expectedLng[i], position.getLongitude(), DELTA);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testTravel2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testTravel2Parse(){\r\n    LOG.debug(\"testTravel2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/travel2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Travel module = (Travel) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Vacation\", \"Train\" }, module.getLabels());\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, module.getCurrency());\r\n    Assert.assertEquals(\"Price\", 250, module.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceUnit\", null, module.getPrice().getUnits());\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, module.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.CHECK, PaymentTypeEnumeration.VISA }, module.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment notes\", \"minimum payment on credit cards:45\", module.getPaymentNotes());\r\n    Assert.assertEquals(\"Quantity\", new Integer(204), module.getQuantity());\r\n    Assert.assertEquals(\"From\", \"Mytown, USA\", module.getFromLocation());\r\n    Assert.assertEquals(\"To\", \"Anytown, USA\", module.getToLocation());\r\n    cal.set(2005, 11, 20, 18, 0, 0);\r\n    Assert.assertEquals(\"Start Date\", cal.getTime(), module.getTravelDateRange().getStart());\r\n    cal.set(2005, 11, 22, 18, 0, 0);\r\n    Assert.assertEquals(\"End Date\", cal.getTime(), module.getTravelDateRange().getEnd());\r\n    Assert.assertEquals(\"Location\", \"123 Main St, Mytown, CA, 12345, USA\", module.getLocation());\r\n    this.assertEquals(\"Shipping\", new ShippingType[] { new ShippingType(new FloatUnit(\"32.95\"), ShippingType.ServiceEnumeration.OVERNIGHT, \"US\") }, module.getShipping());\r\n    Assert.assertEquals(\"Tax Region\", \"California\", module.getTaxRegion());\r\n    Assert.assertEquals(\"Tax Percentage\", new Float(8.25), module.getTaxPercent());\r\n}"
}, {
	"Path": "org.sakaibrary.xserver.XServer.characters",
	"Comment": "receive notification of character data inside an element.",
	"Method": "void characters(char[] buf,int offset,int len){\r\n    String text = new String(buf, offset, len);\r\n    if (textBuffer == null) {\r\n        textBuffer = new StringBuilder(text);\r\n    } else {\r\n        textBuffer.append(text);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.FoldCollapser.collapseImpl",
	"Comment": "collapses the specified fold, and any of its child folds, as\tappropriate.",
	"Method": "void collapseImpl(Fold fold){\r\n    if (getShouldCollapse(fold)) {\r\n        fold.setCollapsed(true);\r\n    }\r\n    for (int i = 0; i < fold.getChildCount(); i++) {\r\n        collapseImpl(fold.getChild(i));\r\n    }\r\n}"
}, {
	"Path": "co.rsk.net.BlockNodeInformation.getBlocksByNode",
	"Comment": "getblocksbynode is a convenient function to avoid creating a nodeid.",
	"Method": "Set<Keccak256> getBlocksByNode(NodeID nodeID,Set<Keccak256> getBlocksByNode,byte[] nodeID){\r\n    return getBlocksByNode(new NodeID(nodeID));\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.EnrollmentEntityProvider.get",
	"Comment": "get an enrollment by enrollment set eid and user eid. wraps coursemanagementservice.findenrollment.",
	"Method": "Object get(String eid){\r\n    String[] eids = splitEid(eid);\r\n    Enrollment enrollment = cmService.findEnrollment(eids[0], eids[1]);\r\n    if (enrollment == null)\r\n        return null;\r\n    EnrollmentData data = new EnrollmentData(enrollment, eids[1]);\r\n    return data;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LatexTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxUtilities.getFoldedLineBottomColor",
	"Comment": "returns the color to use for the line underneath a folded region line.",
	"Method": "Color getFoldedLineBottomColor(RSyntaxTextArea textArea){\r\n    Color color = Color.gray;\r\n    Gutter gutter = RSyntaxUtilities.getGutter(textArea);\r\n    if (gutter != null) {\r\n        color = gutter.getFoldIndicatorForeground();\r\n    }\r\n    return color;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ClipboardHistoryPopup.getPreferredSize",
	"Comment": "overridden to ensure this popup stays in a specific size range.",
	"Method": "Dimension getPreferredSize(){\r\n    Dimension size = super.getPreferredSize();\r\n    if (size != null) {\r\n        size.width = Math.min(size.width, 300);\r\n        size.width = Math.max(size.width, 200);\r\n    }\r\n    return size;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.VisualBasicTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentItemTest.testContentValue",
	"Comment": "test of contentvalue method, of class com.totsp.xml.syndication.content.contentitem.",
	"Method": "void testContentValue(){\r\n    LOG.debug(\"testContentValue\");\r\n    final String test = \"<em>This is<strong>very<\/em> cool<\/strong>.\";\r\n    item.setContentFormat(test);\r\n    assertTrue(item.getContentFormat().equals(test));\r\n}"
}, {
	"Path": "org.ethereum.config.net.RegTestConfig.getDefaultRegTestConfig",
	"Comment": "by default regtestconfig should activate every fork at height 0",
	"Method": "RegTestConfig getDefaultRegTestConfig(){\r\n    RegTestConfig config = new RegTestConfig();\r\n    config.add(0, new RegTestOrchidConfig());\r\n    return config;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getEvents",
	"Comment": "takes several calendar references and merges their events from within a given time range.",
	"Method": "CalendarEventVector getEvents(List references,TimeRange range,boolean reverseOrder,CalendarEventVector getEvents,List references,TimeRange range,List getEvents,TimeRange range,Filter filter,List getEvents,Calendar calendar,List getEvents,Calendar calendar,long l,long m){\r\n    return this.getEvents(references, range, false);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementSingle.ifThen",
	"Comment": "return a single that emits the emissions from one specifiedsingle if a condition evaluates to true, or from another specifiedsingle otherwise.",
	"Method": "Single<R> ifThen(BooleanSupplier condition,SingleSource<? extends R> then,Single<? extends R> orElse){\r\n    ObjectHelper.requireNonNull(condition, \"condition is null\");\r\n    ObjectHelper.requireNonNull(then, \"then is null\");\r\n    ObjectHelper.requireNonNull(orElse, \"orElse is null\");\r\n    return RxJavaPlugins.onAssembly(new SingleIfThen<R>(condition, then, orElse));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.WrappedSyntaxView.getChildAllocation",
	"Comment": "fetches the allocation for the given child view.\toverridden to account for code folding.",
	"Method": "Shape getChildAllocation(int index,Shape a){\r\n    if (a != null) {\r\n        Shape ca = getChildAllocationImpl(index, a);\r\n        if ((ca != null) && (!isAllocationValid())) {\r\n            Rectangle r = (ca instanceof Rectangle) ? (Rectangle) ca : ca.getBounds();\r\n            if ((r.width == 0) && (r.height == 0)) {\r\n                return null;\r\n            }\r\n        }\r\n        return ca;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "co.rsk.core.bc.BlockFork.getCommonAncestor",
	"Comment": "getcommonancestor gets the common ancestor of the two chains.",
	"Method": "Block getCommonAncestor(){\r\n    return commonAncestor;\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setDuration",
	"Comment": "duration is the number of seconds the media object plays. it is an optional attribute.",
	"Method": "void setDuration(Long duration){\r\n    this.duration = duration;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport.uninstall",
	"Comment": "uninstalls this listener from the current text area.does nothing if\tit not currently installed on any text area.",
	"Method": "void uninstall(){\r\n    if (textArea != null) {\r\n        clear();\r\n        textArea.removeCaretListener(this);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.AtomClientServerTest.testMediaPost",
	"Comment": "post media entry to every media colletion avialable on server, then cleanup.",
	"Method": "void testMediaPost(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element2 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element2;\r\n            if (col.accepts(\"image/gif\")) {\r\n                final ClientMediaEntry m1 = col.createMediaEntry(\"duke\" + count, \"duke\" + count, \"image/gif\", new FileInputStream(\"test/testdata/duke-wave-shadow.gif\"));\r\n                col.addEntry(m1);\r\n                final ClientMediaEntry m2 = (ClientMediaEntry) col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                m2.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "org.sakaiproject.endorsed.i18n.spi.SakaiDateFormatProvider.getTimeFormatString",
	"Comment": "returns a time pattern with the given formatting style for the specified\tlocale.",
	"Method": "String getTimeFormatString(int style,Locale locale){\r\n    if (locale == null) {\r\n        throw new NullPointerException(\"locale:null\");\r\n    } else if (!SakaiLocaleServiceProviderUtil.isAvailableLocale(locale)) {\r\n        throw new IllegalArgumentException(\"locale:\" + locale.toString());\r\n    }\r\n    String key;\r\n    switch(style) {\r\n        case DateFormat.SHORT:\r\n            key = \"TimeFormat.SHORT\";\r\n            break;\r\n        case DateFormat.MEDIUM:\r\n            key = \"TimeFormat.MEDIUM\";\r\n            break;\r\n        case DateFormat.LONG:\r\n            key = \"TimeFormat.LONG\";\r\n            break;\r\n        case DateFormat.FULL:\r\n            key = \"TimeFormat.FULL\";\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"style:\" + style);\r\n    }\r\n    return SakaiLocaleServiceProviderUtil.getString(key, locale);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.compose",
	"Comment": "applies a function to this solo and returns the solo it returned.",
	"Method": "Solo<R> compose(Function<? super Solo<T>, ? extends Solo<R>> composer){\r\n    return to(composer);\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getBtcBlockchainBestChainHeight",
	"Comment": "returns the bitcoin blockchain best chain height know by the bridge contract",
	"Method": "int getBtcBlockchainBestChainHeight(){\r\n    return getBtcBlockchainChainHead().getHeight();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.onErrorReturnItem",
	"Comment": "if the upstream signals an error, it is replaced by a signalof the given item and normal completion.",
	"Method": "Perhaps<T> onErrorReturnItem(T item){\r\n    ObjectHelper.requireNonNull(item, \"item is null\");\r\n    return onAssembly(new PerhapsOnErrorReturnItem<T>(this, item));\r\n}"
}, {
	"Path": "com.rometools.modules.ITunesGeneratorTest.testEndToEnd",
	"Comment": "test of generate method, of class com.totsp.xml.syndication.itunes.itunesgenerator.",
	"Method": "void testEndToEnd(){\r\n    LOG.debug(\"testEndToEnd\");\r\n    testFile(\"xml/leshow.xml\");\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.XMLTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.rome.io.ParsingFeedException.getLineNumber",
	"Comment": "returns the line number of the end of the text where the parse error occurred.the first line in the document is line 1.",
	"Method": "int getLineNumber(){\r\n    if (getCause() instanceof JDOMParseException) {\r\n        return ((JDOMParseException) getCause()).getLineNumber();\r\n    } else {\r\n        return -1;\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.getLanguage",
	"Comment": "returns the feed language.this method is a convenience method, it maps to the dublin core module language.",
	"Method": "String getLanguage(){\r\n    return getDCModule().getLanguage();\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sync.setDeleted",
	"Comment": "set an indication of whether this item has been deleted and is a tombstone.",
	"Method": "void setDeleted(Boolean deleted){\r\n    this.deleted = deleted;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ErrorStrip.setShowMarkedOccurrences",
	"Comment": "sets whether marked occurrences are shown in this error strip.",
	"Method": "void setShowMarkedOccurrences(boolean show){\r\n    if (show != showMarkedOccurrences) {\r\n        showMarkedOccurrences = show;\r\n        if (isDisplayable()) {\r\n            refreshMarkers();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getHeight",
	"Comment": "height is the height of the media object. it is an optional attribute.",
	"Method": "Integer getHeight(){\r\n    return height;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.AssignmentServiceImpl.zipSubmissions",
	"Comment": "todo zipsubmissions and zipgroupsubmissions should be combined",
	"Method": "void zipSubmissions(String assignmentReference,String assignmentTitle,Assignment.GradeType gradeType,Assignment.SubmissionType typeOfSubmission,Iterator submissions,OutputStream outputStream,StringBuilder exceptionMessage,boolean withStudentSubmissionText,boolean withStudentSubmissionAttachment,boolean withGradeFile,boolean withFeedbackText,boolean withFeedbackComment,boolean withFeedbackAttachment,boolean withoutFolders,String gradeFileFormat,boolean includeNotSubmitted,String siteId){\r\n    ZipOutputStream out = null;\r\n    boolean isAdditionalNotesEnabled = false;\r\n    Site st = null;\r\n    try {\r\n        st = siteService.getSite(siteId);\r\n        isAdditionalNotesEnabled = candidateDetailProvider != null && candidateDetailProvider.isAdditionalNotesEnabled(st);\r\n    } catch (IdUnusedException e) {\r\n        log.warn(\"Could not find site {} - isAdditionalNotesEnabled set to false\", siteId);\r\n    }\r\n    try {\r\n        out = new ZipOutputStream(outputStream);\r\n        final String root = escapeInvalidCharsEntry(Validator.escapeZipEntry(assignmentTitle)) + Entity.SEPARATOR;\r\n        final SpreadsheetExporter.Type type = SpreadsheetExporter.Type.valueOf(gradeFileFormat.toUpperCase());\r\n        final SpreadsheetExporter sheet = SpreadsheetExporter.getInstance(type, assignmentTitle, gradeType.toString(), getCsvSeparator());\r\n        String submittedText = \"\";\r\n        if (!submissions.hasNext()) {\r\n            exceptionMessage.append(\"There is no submission yet. \");\r\n        }\r\n        if (isAdditionalNotesEnabled) {\r\n            sheet.addHeader(resourceLoader.getString(\"grades.id\"), resourceLoader.getString(\"grades.eid\"), resourceLoader.getString(\"grades.lastname\"), resourceLoader.getString(\"grades.firstname\"), resourceLoader.getString(\"grades.grade\"), resourceLoader.getString(\"grades.submissionTime\"), resourceLoader.getString(\"grades.late\"), resourceLoader.getString(\"gen.notes\"));\r\n        } else {\r\n            sheet.addHeader(resourceLoader.getString(\"grades.id\"), resourceLoader.getString(\"grades.eid\"), resourceLoader.getString(\"grades.lastname\"), resourceLoader.getString(\"grades.firstname\"), resourceLoader.getString(\"grades.grade\"), resourceLoader.getString(\"grades.submissionTime\"), resourceLoader.getString(\"grades.late\"));\r\n        }\r\n        final List<User> allowAddSubmissionUsers = allowAddSubmissionUsers(assignmentReference);\r\n        String caughtException = null;\r\n        String caughtStackTrace = null;\r\n        final StringBuilder submittersAdditionalNotesHtml = new StringBuilder();\r\n        while (submissions.hasNext()) {\r\n            final AssignmentSubmission s = (AssignmentSubmission) submissions.next();\r\n            boolean isAnon = assignmentUsesAnonymousGrading(s.getAssignment());\r\n            if ((s.getSubmitted() && s.getUserSubmission()) || includeNotSubmitted) {\r\n                final Optional<AssignmentSubmissionSubmitter> assignmentSubmitter = s.getSubmitters().stream().findAny();\r\n                try {\r\n                    User u = null;\r\n                    if (assignmentSubmitter.isPresent()) {\r\n                        u = userDirectoryService.getUser(assignmentSubmitter.get().getSubmitter());\r\n                    }\r\n                    if (allowAddSubmissionUsers.contains(u)) {\r\n                        String submittersName = root;\r\n                        final User[] submitters = s.getSubmitters().stream().map(p -> {\r\n                            try {\r\n                                return userDirectoryService.getUser(p.getSubmitter());\r\n                            } catch (UserNotDefinedException e) {\r\n                                log.warn(\"User not found {}, {}\", p.getSubmitter(), e.getMessage());\r\n                            }\r\n                            return null;\r\n                        }).filter(Objects::nonNull).toArray(User[]::new);\r\n                        String submittersString = \"\";\r\n                        for (int i = 0; i < submitters.length; i++) {\r\n                            if (i > 0) {\r\n                                submittersString = submittersString.concat(\"; \");\r\n                            }\r\n                            String fullName = submitters[i].getSortName();\r\n                            if (!fullName.contains(\",\")) {\r\n                                fullName = fullName.concat(\",\");\r\n                            }\r\n                            submittersString = submittersString.concat(fullName);\r\n                            final String userEid = submitters[i].getEid();\r\n                            final String candidateEid = escapeInvalidCharsEntry(userEid);\r\n                            if (candidateEid.equals(userEid)) {\r\n                                submittersString = submittersString + \"(\" + candidateEid + \")\";\r\n                            } else {\r\n                                submittersString = submittersString + \"(\" + submitters[i].getId() + \")\";\r\n                            }\r\n                            submittersString = escapeInvalidCharsEntry(submittersString);\r\n                            final String latenessStatus = whenSubmissionMade(s);\r\n                            log.debug(\"latenessStatus: \" + latenessStatus);\r\n                            final String anonTitle = resourceLoader.getString(\"grading.anonymous.title\");\r\n                            final String fullAnonId = s.getId() + \" \" + anonTitle;\r\n                            String[] params = new String[7];\r\n                            if (isAdditionalNotesEnabled && candidateDetailProvider != null) {\r\n                                final List<String> notes = candidateDetailProvider.getAdditionalNotes(submitters[i], st).orElse(new ArrayList<String>());\r\n                                if (!notes.isEmpty()) {\r\n                                    params = new String[notes.size() + 7];\r\n                                    System.arraycopy(notes.toArray(new String[notes.size()]), 0, params, 7, notes.size());\r\n                                }\r\n                            }\r\n                            if (!isAnon) {\r\n                                log.debug(\"Zip user: \" + submitters[i].toString());\r\n                                params[0] = submitters[i].getDisplayId();\r\n                                params[1] = submitters[i].getEid();\r\n                                params[2] = submitters[i].getLastName();\r\n                                params[3] = submitters[i].getFirstName();\r\n                                params[4] = this.getGradeForSubmitter(s, submitters[i].getId());\r\n                                if (s.getDateSubmitted() != null) {\r\n                                    params[5] = s.getDateSubmitted().toString();\r\n                                } else {\r\n                                    params[5] = \"\";\r\n                                }\r\n                                params[6] = latenessStatus;\r\n                            } else {\r\n                                params[0] = fullAnonId;\r\n                                params[1] = fullAnonId;\r\n                                params[2] = anonTitle;\r\n                                params[3] = anonTitle;\r\n                                params[4] = this.getGradeForSubmitter(s, submitters[i].getId());\r\n                                if (s.getDateSubmitted() != null) {\r\n                                    params[5] = s.getDateSubmitted().toString();\r\n                                } else {\r\n                                    params[5] = \"\";\r\n                                }\r\n                                params[6] = latenessStatus;\r\n                            }\r\n                            sheet.addRow(params);\r\n                        }\r\n                        if (StringUtils.trimToNull(submittersString) != null) {\r\n                            submittersName = submittersName.concat(StringUtils.trimToNull(submittersString));\r\n                            submittedText = s.getSubmittedText();\r\n                            if (isAnon) {\r\n                                submittersString = s.getId() + \" \" + resourceLoader.getString(\"grading.anonymous.title\");\r\n                                submittersName = root + submittersString;\r\n                            }\r\n                            if (!withoutFolders) {\r\n                                submittersName = submittersName.concat(\"/\");\r\n                            } else {\r\n                                submittersName = submittersName.concat(\"_\");\r\n                            }\r\n                            if (!withoutFolders && s.getSubmitted() && s.getDateSubmitted() != null) {\r\n                                final String zipEntryName = submittersName + \"timestamp.txt\";\r\n                                final String textEntryString = s.getDateSubmitted().toString();\r\n                                createTextZipEntry(out, zipEntryName, textEntryString);\r\n                            }\r\n                            if (typeOfSubmission != Assignment.SubmissionType.ATTACHMENT_ONLY_ASSIGNMENT_SUBMISSION && typeOfSubmission != Assignment.SubmissionType.NON_ELECTRONIC_ASSIGNMENT_SUBMISSION) {\r\n                                if (withStudentSubmissionText) {\r\n                                    final StringBuilder submittersNameString = new StringBuilder(submittersName);\r\n                                    if (!withoutFolders) {\r\n                                        submittersNameString.append(submittersString);\r\n                                    }\r\n                                    final String zipEntryName = submittersNameString.append(\"_submissionText\" + AssignmentConstants.ZIP_SUBMITTED_TEXT_FILE_TYPE).toString();\r\n                                    createTextZipEntry(out, zipEntryName, submittedText);\r\n                                }\r\n                                if (withFeedbackText) {\r\n                                    final String zipEntryName = submittersName + \"feedbackText.html\";\r\n                                    final String textEntryString = s.getFeedbackText();\r\n                                    createTextZipEntry(out, zipEntryName, textEntryString);\r\n                                }\r\n                            }\r\n                            if (typeOfSubmission != Assignment.SubmissionType.TEXT_ONLY_ASSIGNMENT_SUBMISSION && typeOfSubmission != Assignment.SubmissionType.NON_ELECTRONIC_ASSIGNMENT_SUBMISSION && withStudentSubmissionAttachment) {\r\n                                String sSubAttachmentFolder = submittersName + resourceLoader.getString(\"stuviewsubm.submissatt\");\r\n                                if (!withoutFolders) {\r\n                                    sSubAttachmentFolder = submittersName + resourceLoader.getString(\"stuviewsubm.submissatt\") + \"/\";\r\n                                    sSubAttachmentFolder = escapeInvalidCharsEntry(sSubAttachmentFolder);\r\n                                    final ZipEntry sSubAttachmentFolderEntry = new ZipEntry(sSubAttachmentFolder);\r\n                                    out.putNextEntry(sSubAttachmentFolderEntry);\r\n                                } else {\r\n                                    sSubAttachmentFolder += \"_\";\r\n                                }\r\n                                zipAttachments(out, submittersName, sSubAttachmentFolder, s.getAttachments());\r\n                                out.closeEntry();\r\n                            }\r\n                            if (withFeedbackComment) {\r\n                                final String zipEntryName = submittersName + \"comments\" + AssignmentConstants.ZIP_COMMENT_FILE_TYPE;\r\n                                final String textEntryString = formattedText.encodeUnicode(s.getFeedbackComment());\r\n                                createTextZipEntry(out, zipEntryName, textEntryString);\r\n                            }\r\n                            if (withFeedbackAttachment) {\r\n                                String feedbackSubAttachmentFolder = submittersName + resourceLoader.getString(\"download.feedback.attachment\");\r\n                                if (!withoutFolders) {\r\n                                    feedbackSubAttachmentFolder += \"/\";\r\n                                    final ZipEntry feedbackSubAttachmentFolderEntry = new ZipEntry(feedbackSubAttachmentFolder);\r\n                                    out.putNextEntry(feedbackSubAttachmentFolderEntry);\r\n                                } else {\r\n                                    submittersName = submittersName.concat(\"_\");\r\n                                }\r\n                                zipAttachments(out, submittersName, feedbackSubAttachmentFolder, s.getFeedbackAttachments());\r\n                                out.closeEntry();\r\n                            }\r\n                        }\r\n                        if (isAdditionalNotesEnabled && candidateDetailProvider != null) {\r\n                            final List<String> notes = candidateDetailProvider.getAdditionalNotes(u, st).orElse(new ArrayList<String>());\r\n                            if (!notes.isEmpty()) {\r\n                                final StringBuilder noteList = new StringBuilder(\"<ul>\");\r\n                                for (String note : notes) {\r\n                                    noteList.append(\"<li>\" + StringEscapeUtils.escapeHtml3(note) + \"<\/li>\");\r\n                                }\r\n                                noteList.append(\"<\/ul>\");\r\n                                submittersAdditionalNotesHtml.append(\"<tr><td style='padding-right:10px;padding-left:10px'>\" + submittersString + \"<\/td><td style='padding-right:10px'>\" + noteList + \"<\/td><\/tr>\");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        log.warn(\"Can't add submission: {} to zip, missing the submittee or they are no longer allowed to submit in the site\", s.getId());\r\n                    }\r\n                } catch (Exception e) {\r\n                    caughtException = e.toString();\r\n                    if (log.isDebugEnabled()) {\r\n                        caughtStackTrace = ExceptionUtils.getStackTrace(e);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (caughtException == null) {\r\n            if (withGradeFile) {\r\n                final ZipEntry gradesCSVEntry = new ZipEntry(root + \"grades.\" + sheet.getFileExtension());\r\n                out.putNextEntry(gradesCSVEntry);\r\n                sheet.write(out);\r\n                out.closeEntry();\r\n            }\r\n            if (isAdditionalNotesEnabled) {\r\n                final ZipEntry additionalEntry = new ZipEntry(root + resourceLoader.getString(\"assignment.additional.notes.file.title\") + \".html\");\r\n                out.putNextEntry(additionalEntry);\r\n                String htmlString = emailUtil.htmlPreamble(\"additionalnotes\");\r\n                htmlString += \"<h1>\" + resourceLoader.getString(\"assignment.additional.notes.export.title\") + \"<\/h1>\";\r\n                htmlString += \"<div>\" + resourceLoader.getString(\"assignment.additional.notes.export.header\") + \"<\/div><br/>\";\r\n                htmlString += \"<table border=\\\"1\\\"  style=\\\"border-collapse:collapse;\\\"><tr><th>\" + resourceLoader.getString(\"gen.student\") + \"<\/th><th>\" + resourceLoader.getString(\"gen.notes\") + \"<\/th>\" + submittersAdditionalNotesHtml + \"<\/table>\";\r\n                htmlString += \"<br/><div>\" + resourceLoader.getString(\"assignment.additional.notes.export.footer\") + \"<\/div>\";\r\n                htmlString += emailUtil.htmlEnd();\r\n                log.debug(\"Additional information html: \" + htmlString);\r\n                final byte[] wes = htmlString.getBytes();\r\n                out.write(wes);\r\n                additionalEntry.setSize(wes.length);\r\n                out.closeEntry();\r\n            }\r\n        } else {\r\n            exceptionMessage.append(\" Exception \" + caughtException + \" for creating submission zip file for assignment \" + \"\\\"\" + assignmentTitle + \"\\\"\\n\");\r\n            if (log.isDebugEnabled()) {\r\n                exceptionMessage.append(caughtStackTrace);\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        exceptionMessage.append(\"IOException for creating submission zip file for assignment \" + \"\\\"\" + assignmentTitle + \"\\\" exception: \" + e + \"\\n\");\r\n    } finally {\r\n        if (out != null) {\r\n            try {\r\n                out.finish();\r\n                out.flush();\r\n            } catch (IOException e) {\r\n            }\r\n            try {\r\n                out.close();\r\n            } catch (IOException e) {\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientCollection.getWorkspace",
	"Comment": "get workspace or null if collection is not associated with a workspace.",
	"Method": "Workspace getWorkspace(){\r\n    return workspace;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.parser.DefaultParserNotice.setShowInEditor",
	"Comment": "sets whether a squiggle underline should be drawn in the editor for\tthis notice.",
	"Method": "void setShowInEditor(boolean show){\r\n    showInEditor = show;\r\n}"
}, {
	"Path": "io.opentracing.testbed.listener_per_request.ResponseListener.onResponse",
	"Comment": "executed when response is received from server. any thread.",
	"Method": "void onResponse(Object response){\r\n    span.finish();\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.requestRelease",
	"Comment": "creates a request for btc release andadds it to the request queue for itto be processed later.",
	"Method": "boolean requestRelease(Address destinationAddress,Coin value){\r\n    if (!value.isGreaterThan(bridgeConstants.getMinimumReleaseTxValue())) {\r\n        return false;\r\n    }\r\n    provider.getReleaseRequestQueue().add(destinationAddress, value);\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.getAssignment",
	"Comment": "works by fetching the instructor user info based on defaults or current\tuser.",
	"Method": "Map getAssignment(String siteId,String taskId){\r\n    String taskTitle = getAssignmentTitle(taskId);\r\n    Map params = TurnitinAPIUtil.packMap(turnitinConn.getBaseTIIOptions(), \"assign\", taskTitle, \"assignid\", taskId, \"cid\", siteId, \"ctl\", siteId, \"fcmd\", \"7\", \"fid\", \"4\", \"utp\", \"2\");\r\n    params.putAll(getInstructorInfo(siteId));\r\n    return turnitinConn.callTurnitinReturnMap(params);\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentItemTest.testContentValueParseType",
	"Comment": "test of contentvalueparsetype method, of class com.totsp.xml.syndication.content.contentitem.",
	"Method": "void testContentValueParseType(){\r\n    LOG.debug(\"testContentValueParseType\");\r\n    final String test = \"Literal\";\r\n    item.setContentFormat(test);\r\n    assertTrue(item.getContentFormat().equals(test));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.PerhapsProcessor.hasThrowable",
	"Comment": "returns true if this perhapsprocessor received an onerror throwable.",
	"Method": "boolean hasThrowable(){\r\n    return subscribers.get() == TERMINATED && error != null;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LuaTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.rome.io.ParsingFeedException.getColumnNumber",
	"Comment": "returns the column number of the end of the text where the parse error occurred.the first column in a line is position 1.",
	"Method": "int getColumnNumber(){\r\n    if (getCause() instanceof JDOMParseException) {\r\n        return ((JDOMParseException) getCause()).getColumnNumber();\r\n    } else {\r\n        return -1;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.doBracketMatching",
	"Comment": "if the caret is on a bracket, this method finds the matching bracket,\tand if it exists, highlights it.",
	"Method": "void doBracketMatching(){\r\n    if (match != null) {\r\n        repaint(match);\r\n        if (dotRect != null) {\r\n            repaint(dotRect);\r\n        }\r\n    }\r\n    int lastCaretBracketPos = bracketInfo == null ? -1 : bracketInfo.x;\r\n    bracketInfo = RSyntaxUtilities.getMatchingBracketPosition(this, bracketInfo);\r\n    if (bracketInfo.y > -1 && (bracketInfo.y != lastBracketMatchPos || bracketInfo.x != lastCaretBracketPos)) {\r\n        try {\r\n            match = modelToView(bracketInfo.y);\r\n            if (match != null) {\r\n                if (getPaintMatchedBracketPair()) {\r\n                    dotRect = modelToView(bracketInfo.x);\r\n                } else {\r\n                    dotRect = null;\r\n                }\r\n                if (getAnimateBracketMatching()) {\r\n                    bracketRepaintTimer.restart();\r\n                }\r\n                repaint(match);\r\n                if (dotRect != null) {\r\n                    repaint(dotRect);\r\n                }\r\n                if (getShowMatchedBracketPopup()) {\r\n                    Container parent = getParent();\r\n                    if (parent instanceof JViewport) {\r\n                        Rectangle visibleRect = this.getVisibleRect();\r\n                        if (match.y + match.height < visibleRect.getY()) {\r\n                            if (matchedBracketPopupTimer == null) {\r\n                                matchedBracketPopupTimer = new MatchedBracketPopupTimer();\r\n                            }\r\n                            matchedBracketPopupTimer.restart(bracketInfo.y);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (BadLocationException ble) {\r\n            ble.printStackTrace();\r\n        }\r\n    } else if (bracketInfo.y == -1) {\r\n        match = null;\r\n        dotRect = null;\r\n        bracketRepaintTimer.stop();\r\n    }\r\n    lastBracketMatchPos = bracketInfo.y;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doReturn_preview_grade_submission",
	"Comment": "action is to return submission with or without grade from preview",
	"Method": "void doReturn_preview_grade_submission(RunData data){\r\n    if (!\"POST\".equals(data.getRequest().getMethod())) {\r\n        return;\r\n    }\r\n    grade_submission_option(data, AssignmentConstants.SUBMISSION_OPTION_RETURN);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextArea.createSpacer",
	"Comment": "creates a string of space characters of the specified size.",
	"Method": "String createSpacer(int size){\r\n    StringBuilder sb = new StringBuilder();\r\n    for (int i = 0; i < size; i++) {\r\n        sb.append(' ');\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchEngine.getNextMatchPosRegEx",
	"Comment": "searches searchin for an occurrence of regex\teither forwards or backwards, matching case or not.",
	"Method": "Point getNextMatchPosRegEx(String regEx,CharSequence searchIn,boolean goForward,boolean matchCase,boolean wholeWord){\r\n    return (Point) getNextMatchPosRegExImpl(regEx, searchIn, goForward, matchCase, wholeWord, null);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setAudioChannels",
	"Comment": "channels is number of audio channels in the media object. it is an optional attribute.",
	"Method": "void setAudioChannels(Integer audioChannels){\r\n    this.audioChannels = audioChannels;\r\n}"
}, {
	"Path": "org.sakaiproject.archive.tool.ArchiveAction.getCurrentBatchArchiveStatusMessage",
	"Comment": "gets the message for the user if a batch archive job is running",
	"Method": "String getCurrentBatchArchiveStatusMessage(){\r\n    String message = batchArchiveMessage;\r\n    isLocked();\r\n    if (StringUtils.equals(batchArchiveStatus, STATUS_COMPLETE)) {\r\n        batchArchiveStatus = null;\r\n        batchArchiveMessage = null;\r\n    }\r\n    return message;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getUserAgent",
	"Comment": "get the user agent we should use for request to get other calendars.",
	"Method": "String getUserAgent(){\r\n    return \"Sakai/\" + m_serverConfigurationService.getString(\"version.sakai\", \"?\") + \" (Calendar Subscription)\";\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DelphiTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_MLC2:\r\n            state = MLC2;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_COMPILER_DIRECTIVE:\r\n            state = COMPILER_DIRECTIVE;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_COMPILER_DIRECTIVE2:\r\n            state = COMPILER_DIRECTIVE2;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentItemTest.testContentEncoding",
	"Comment": "test of contentencoding method, of class com.totsp.xml.syndication.content.contentitem.",
	"Method": "void testContentEncoding(){\r\n    LOG.debug(\"testContentEncoding\");\r\n    final String test = \"http://www.w3.org/TR/REC-xml#dt-wellformed\";\r\n    item.setContentFormat(test);\r\n    assertTrue(item.getContentFormat().equals(test));\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera1Base.switchCamera",
	"Comment": "switch camera used. can be called on preview or while stream, ignored with preview off.",
	"Method": "void switchCamera(){\r\n    if (isStreaming() || onPreview) {\r\n        cameraManager.switchCamera();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.metadata.logic.MetadataServiceFromContent.tempReadOnlyAdvisor",
	"Comment": "generate a temporary advisor to enable reading on a specific content\tany use of this advisor should be temporary as it could create a security breach",
	"Method": "SecurityAdvisor tempReadOnlyAdvisor(String contentReference){\r\n    return new SecurityAdvisor() {\r\n        public SecurityAdvice isAllowed(String userId, String function, String reference) {\r\n            if (ContentHostingService.AUTH_RESOURCE_READ.equals(function) && contentReference.equals(reference))\r\n                return SecurityAdvice.ALLOWED;\r\n            else\r\n                return SecurityAdvice.PASS;\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.metadata.logic.MetadataServiceFromContent.tempReadOnlyAdvisor",
	"Comment": "generate a temporary advisor to enable reading on a specific content\tany use of this advisor should be temporary as it could create a security breach",
	"Method": "SecurityAdvisor tempReadOnlyAdvisor(String contentReference){\r\n    if (ContentHostingService.AUTH_RESOURCE_READ.equals(function) && contentReference.equals(reference))\r\n        return SecurityAdvice.ALLOWED;\r\n    else\r\n        return SecurityAdvice.PASS;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.GradingScale.toGradingScaleDefinition",
	"Comment": "convert this gradeingscale instance to a gradingscaledefinition",
	"Method": "GradingScaleDefinition toGradingScaleDefinition(){\r\n    GradingScaleDefinition scaleDef = new GradingScaleDefinition();\r\n    scaleDef.setUid(this.getUid());\r\n    scaleDef.setName(this.getName());\r\n    Map<String, Double> mapBottomPercents = this.getDefaultBottomPercents();\r\n    scaleDef.setDefaultBottomPercents(mapBottomPercents);\r\n    List<Object> listBottomPercents = new ArrayList();\r\n    List<String> grades = new ArrayList();\r\n    for (Map.Entry<String, Double> pair : mapBottomPercents.entrySet()) {\r\n        listBottomPercents.add(pair.getValue());\r\n        grades.add(pair.getKey());\r\n    }\r\n    scaleDef.setGrades(grades);\r\n    scaleDef.setDefaultBottomPercentsAsList(listBottomPercents);\r\n    return scaleDef;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.tool.MainController.hasInstructorPermissions",
	"Comment": "depending on the assignmentref, a check will be used to determine whether the user should have instructor access",
	"Method": "boolean hasInstructorPermissions(String assignmentRef){\r\n    if (StringUtils.isNotEmpty(assignmentRef)) {\r\n        if (assignmentRef.startsWith(AssignmentServiceConstants.REFERENCE_ROOT)) {\r\n            AssignmentReferenceReckoner.AssignmentReference refReckoner = AssignmentReferenceReckoner.reckoner().reference(assignmentRef).reckon();\r\n            if (\"a\".equals(refReckoner.getSubtype())) {\r\n                return assignmentService.allowGradeSubmission(assignmentRef);\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.PDFExportService.trimTimeRange",
	"Comment": "trim the range that is passed in to the containing time range.",
	"Method": "TimeRange trimTimeRange(TimeRange containingRange,TimeRange rangeToTrim){\r\n    long containingRangeStartTime = containingRange.firstTime().getTime();\r\n    long containingRangeEndTime = containingRange.lastTime().getTime();\r\n    long rangeToTrimStartTime = rangeToTrim.firstTime().getTime();\r\n    long rangeToTrimEndTime = rangeToTrim.lastTime().getTime();\r\n    long trimmedStartTime = 0, trimmedEndTime = 0;\r\n    trimmedStartTime = Math.min(Math.max(containingRangeStartTime, rangeToTrimStartTime), containingRangeEndTime);\r\n    trimmedEndTime = Math.max(Math.min(containingRangeEndTime, rangeToTrimEndTime), rangeToTrimStartTime);\r\n    return timeService.newTimeRange(timeService.newTime(trimmedStartTime), timeService.newTime(trimmedEndTime), true, false);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.AssignmentServiceImpl.zipGroupSubmissions",
	"Comment": "todo zipsubmissions and zipgroupsubmissions should be combined",
	"Method": "void zipGroupSubmissions(String assignmentReference,String assignmentTitle,String gradeTypeString,Assignment.SubmissionType typeOfSubmission,Iterator submissions,OutputStream outputStream,StringBuilder exceptionMessage,boolean withStudentSubmissionText,boolean withStudentSubmissionAttachment,boolean withGradeFile,boolean withFeedbackText,boolean withFeedbackComment,boolean withFeedbackAttachment,String gradeFileFormat,boolean includeNotSubmitted){\r\n    ZipOutputStream out = null;\r\n    try {\r\n        out = new ZipOutputStream(outputStream);\r\n        final String root = escapeInvalidCharsEntry(Validator.escapeZipEntry(assignmentTitle)) + Entity.SEPARATOR;\r\n        final SpreadsheetExporter.Type type = SpreadsheetExporter.Type.valueOf(gradeFileFormat.toUpperCase());\r\n        final SpreadsheetExporter sheet = SpreadsheetExporter.getInstance(type, assignmentTitle, gradeTypeString, getCsvSeparator());\r\n        if (!submissions.hasNext()) {\r\n            exceptionMessage.append(\"There is no submission yet. \");\r\n        }\r\n        sheet.addHeader(resourceLoader.getString(\"group\"), resourceLoader.getString(\"grades.eid\"), resourceLoader.getString(\"grades.members\"), resourceLoader.getString(\"grades.grade\"), resourceLoader.getString(\"grades.submissionTime\"), resourceLoader.getString(\"grades.late\"));\r\n        allowAddSubmissionUsers(assignmentReference);\r\n        String caughtException = null;\r\n        String caughtStackTrace = null;\r\n        while (submissions.hasNext()) {\r\n            final AssignmentSubmission s = (AssignmentSubmission) submissions.next();\r\n            log.debug(this + \" ZIPGROUP \" + (s == null ? \"null\" : s.getId()));\r\n            if ((s.getSubmitted() && s.getUserSubmission()) || includeNotSubmitted) {\r\n                try {\r\n                    final StringBuilder submittersName = new StringBuilder(root);\r\n                    final User[] submitters = s.getSubmitters().stream().map(p -> {\r\n                        try {\r\n                            return userDirectoryService.getUser(p.getSubmitter());\r\n                        } catch (UserNotDefinedException e) {\r\n                            log.warn(\"User not found {}\", p.getSubmitter());\r\n                            return null;\r\n                        }\r\n                    }).filter(Objects::nonNull).toArray(User[]::new);\r\n                    final String groupTitle = siteService.getSite(s.getAssignment().getContext()).getGroup(s.getGroupId()).getTitle();\r\n                    final StringBuilder submittersString = new StringBuilder();\r\n                    final StringBuilder submitters2String = new StringBuilder();\r\n                    for (int i = 0; i < submitters.length; i++) {\r\n                        if (i > 0) {\r\n                            submittersString.append(\"; \");\r\n                            submitters2String.append(\"; \");\r\n                        }\r\n                        String fullName = submitters[i].getSortName();\r\n                        if (fullName.indexOf(\",\") == -1) {\r\n                            fullName = fullName.concat(\",\");\r\n                        }\r\n                        submittersString.append(fullName);\r\n                        submitters2String.append(submitters[i].getDisplayName());\r\n                        submittersString.append(\"(\" + submitters[i].getEid() + \")\");\r\n                    }\r\n                    final String latenessStatus = whenSubmissionMade(s);\r\n                    final String gradeDisplay = getGradeDisplay(s.getGrade(), s.getAssignment().getTypeOfGrade(), s.getAssignment().getScaleFactor());\r\n                    sheet.addRow(groupTitle, s.getGroupId(), submitters2String.toString(), gradeDisplay, s.getDateSubmitted() != null ? s.getDateSubmitted().toString() : StringUtils.EMPTY, latenessStatus);\r\n                    if (StringUtils.trimToNull(groupTitle) != null) {\r\n                        submittersName.append(StringUtils.trimToNull(groupTitle)).append(\" (\").append(s.getGroupId()).append(\")\");\r\n                        final String submittedText = s.getSubmittedText();\r\n                        submittersName.append(\"/\");\r\n                        if (s.getSubmitted() && s.getDateSubmitted() != null) {\r\n                            createTextZipEntry(out, submittersName + \"timestamp.txt\", s.getDateSubmitted().toString());\r\n                        }\r\n                        if (typeOfSubmission != Assignment.SubmissionType.ATTACHMENT_ONLY_ASSIGNMENT_SUBMISSION && typeOfSubmission != Assignment.SubmissionType.NON_ELECTRONIC_ASSIGNMENT_SUBMISSION) {\r\n                            if (withStudentSubmissionText) {\r\n                                final String zipEntryName = submittersName + groupTitle + \"_submissionText\" + AssignmentConstants.ZIP_SUBMITTED_TEXT_FILE_TYPE;\r\n                                createTextZipEntry(out, zipEntryName, submittedText);\r\n                            }\r\n                            if (withFeedbackText) {\r\n                                createTextZipEntry(out, submittersName + \"feedbackText.html\", s.getFeedbackText());\r\n                            }\r\n                        }\r\n                        if (typeOfSubmission != Assignment.SubmissionType.TEXT_ONLY_ASSIGNMENT_SUBMISSION && typeOfSubmission != Assignment.SubmissionType.NON_ELECTRONIC_ASSIGNMENT_SUBMISSION && withStudentSubmissionAttachment) {\r\n                            final String sSubAttachmentFolder = submittersName + resourceLoader.getString(\"stuviewsubm.submissatt\") + \"/\";\r\n                            final ZipEntry sSubAttachmentFolderEntry = new ZipEntry(sSubAttachmentFolder);\r\n                            out.putNextEntry(sSubAttachmentFolderEntry);\r\n                            zipAttachments(out, submittersName.toString(), sSubAttachmentFolder, s.getAttachments());\r\n                            out.closeEntry();\r\n                        }\r\n                        if (withFeedbackComment) {\r\n                            final String zipEntryName = submittersName + \"comments\" + AssignmentConstants.ZIP_COMMENT_FILE_TYPE;\r\n                            final String textEntryString = formattedText.encodeUnicode(s.getFeedbackComment());\r\n                            createTextZipEntry(out, zipEntryName, textEntryString);\r\n                        }\r\n                        if (withFeedbackAttachment) {\r\n                            final String feedbackSubAttachmentFolder = submittersName + resourceLoader.getString(\"download.feedback.attachment\") + \"/\";\r\n                            final ZipEntry feedbackSubAttachmentFolderEntry = new ZipEntry(feedbackSubAttachmentFolder);\r\n                            out.putNextEntry(feedbackSubAttachmentFolderEntry);\r\n                            zipAttachments(out, submittersName.toString(), feedbackSubAttachmentFolder, s.getFeedbackAttachments());\r\n                            out.closeEntry();\r\n                        }\r\n                        if (!submittersString.toString().trim().isEmpty()) {\r\n                            final String zipEntryName = submittersName + \"members\" + AssignmentConstants.ZIP_COMMENT_FILE_TYPE;\r\n                            final String textEntryString = formattedText.encodeUnicode(submittersString.toString());\r\n                            createTextZipEntry(out, zipEntryName, textEntryString);\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    caughtException = e.toString();\r\n                    if (log.isDebugEnabled()) {\r\n                        caughtStackTrace = ExceptionUtils.getStackTrace(e);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (caughtException == null) {\r\n            if (withGradeFile) {\r\n                final ZipEntry gradesCSVEntry = new ZipEntry(root + \"grades.\" + sheet.getFileExtension());\r\n                out.putNextEntry(gradesCSVEntry);\r\n                sheet.write(out);\r\n                out.closeEntry();\r\n            }\r\n        } else {\r\n            exceptionMessage.append(\" Exception \" + caughtException + \" for creating submission zip file for assignment \" + \"\\\"\" + assignmentTitle + \"\\\"\\n\");\r\n            if (log.isDebugEnabled()) {\r\n                exceptionMessage.append(caughtStackTrace);\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        exceptionMessage.append(\"IOException for creating submission zip file for assignment \" + \"\\\"\" + assignmentTitle + \"\\\" exception: \" + e + \"\\n\");\r\n    } finally {\r\n        if (out != null) {\r\n            try {\r\n                out.finish();\r\n                out.flush();\r\n            } catch (IOException e) {\r\n            }\r\n            try {\r\n                out.close();\r\n            } catch (IOException e) {\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.isCalendarToolInitialized",
	"Comment": "checks the calendar has been created. for now just returning true to support the api contract.",
	"Method": "boolean isCalendarToolInitialized(String siteId){\r\n    return true;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.using",
	"Comment": "generate a resource and a perhaps based on that resource and thendispose that resource eagerly when the perhaps terminates or thedownstream cancels the sequence.",
	"Method": "Perhaps<T> using(Callable<R> resourceSupplier,Function<? super R, ? extends Perhaps<? extends T>> sourceSupplier,Consumer<? super R> disposer,Perhaps<T> using,Callable<R> resourceSupplier,Function<? super R, ? extends Perhaps<? extends T>> sourceSupplier,Consumer<? super R> disposer,boolean eager){\r\n    ObjectHelper.requireNonNull(resourceSupplier, \"resourceSupplier is null\");\r\n    ObjectHelper.requireNonNull(sourceSupplier, \"sourceSupplier is null\");\r\n    ObjectHelper.requireNonNull(disposer, \"disposer is null\");\r\n    return onAssembly(new PerhapsUsing<T, R>(resourceSupplier, sourceSupplier, disposer, eager));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PHPTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenMakerBase.isMarkupLanguage",
	"Comment": "the default implementation returns false always.\tsubclasses that are highlighting a markup language should override this\tmethod to return true.",
	"Method": "boolean isMarkupLanguage(){\r\n    return false;\r\n}"
}, {
	"Path": "com.rometools.modules.sle.SimpleListExtensionImpl.copyFrom",
	"Comment": "copies all the properties of the given bean into this one.any existing properties in this bean are lost.this method is useful for moving from one implementation of a bean interface to another. forexample from the default syndfeed bean implementation to a hibernate ready implementation.",
	"Method": "void copyFrom(CopyFrom obj){\r\n    final SimpleListExtension sle = (SimpleListExtension) obj;\r\n    setGroupFields(sle.getGroupFields().clone());\r\n    setSortFields(sle.getSortFields().clone());\r\n    setTreatAs(sle.getTreatAs());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.SQLTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.NonoProcessor.hasThrowable",
	"Comment": "returns true if this nonoprocessor has terminated with an error.",
	"Method": "boolean hasThrowable(){\r\n    return subscribers.get() == TERMINATED && error != null;\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.commitFederation",
	"Comment": "commits the currently pending federation.that is, the retiring federation is set to be the currently active federation,the active federation is replaced with a new federation generated from the pending federation,and the pending federation is wiped out.also, utxos are moved from active to retiring so that the transfer of funds canbegin.",
	"Method": "Integer commitFederation(boolean dryRun,Keccak256 hash){\r\n    PendingFederation currentPendingFederation = provider.getPendingFederation();\r\n    if (currentPendingFederation == null) {\r\n        return -1;\r\n    }\r\n    if (!currentPendingFederation.isComplete()) {\r\n        return -2;\r\n    }\r\n    if (!hash.equals(currentPendingFederation.getHash())) {\r\n        return -3;\r\n    }\r\n    if (dryRun) {\r\n        return 1;\r\n    }\r\n    List<UTXO> utxosToMove = new ArrayList(provider.getNewFederationBtcUTXOs());\r\n    provider.getNewFederationBtcUTXOs().clear();\r\n    List<UTXO> oldFederationUTXOs = provider.getOldFederationBtcUTXOs();\r\n    oldFederationUTXOs.clear();\r\n    utxosToMove.forEach(utxo -> oldFederationUTXOs.add(utxo));\r\n    Instant creationTime = Instant.ofEpochMilli(rskExecutionBlock.getTimestamp());\r\n    provider.setOldFederation(getActiveFederation());\r\n    provider.setNewFederation(currentPendingFederation.buildFederation(creationTime, rskExecutionBlock.getNumber(), bridgeConstants.getBtcParams()));\r\n    provider.setPendingFederation(null);\r\n    provider.getFederationElection(bridgeConstants.getFederationChangeAuthorizer()).clear();\r\n    eventLogger.logCommitFederation(rskExecutionBlock, provider.getOldFederation(), provider.getNewFederation());\r\n    return 1;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getEOLMarkersVisible",
	"Comment": "returns whether an eol marker should be drawn at the end of each line.",
	"Method": "boolean getEOLMarkersVisible(){\r\n    return eolMarkersVisible;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.to",
	"Comment": "applies the function, fluently to this perhaps and returns the value it returns.",
	"Method": "R to(Function<? super Perhaps<T>, R> converter){\r\n    try {\r\n        return converter.apply(this);\r\n    } catch (Throwable ex) {\r\n        throw ExceptionHelper.wrapOrThrow(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.doFinalizeDelete",
	"Comment": "dodelete to delete the selected collection or resource items",
	"Method": "void doFinalizeDelete(RunData data){\r\n    log.debug(\"{}.doFinalizeDelete()\", this);\r\n    if (!\"POST\".equals(data.getRequest().getMethod())) {\r\n        return;\r\n    }\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    String oldCollectionId = (String) state.getAttribute(STATE_COLLECTION_ID);\r\n    if (!Boolean.FALSE.toString().equals(state.getAttribute(STATE_COPY_FLAG))) {\r\n        initCopyContext(state);\r\n    }\r\n    if (!Boolean.FALSE.toString().equals(state.getAttribute(STATE_MOVE_FLAG))) {\r\n        initMoveContext(state);\r\n    }\r\n    List items = (List) state.getAttribute(STATE_DELETE_SET);\r\n    Map deleteItems = new HashMap();\r\n    int maxDepth = 0;\r\n    int depth;\r\n    Iterator it = items.iterator();\r\n    while (it.hasNext()) {\r\n        ListItem item = (ListItem) it.next();\r\n        String[] parts = item.getId().split(Entity.SEPARATOR);\r\n        depth = parts.length;\r\n        if (depth > maxDepth) {\r\n            maxDepth = depth;\r\n        }\r\n        List v = (List) deleteItems.get(depth);\r\n        if (v == null) {\r\n            v = new ArrayList();\r\n        }\r\n        v.add(item);\r\n        deleteItems.put(depth, v);\r\n    }\r\n    boolean isCollection = false;\r\n    for (int j = maxDepth; j > 0; j--) {\r\n        List v = (List) deleteItems.get(j);\r\n        if (v == null) {\r\n            v = new ArrayList();\r\n        }\r\n        ResourceTypeRegistry registry = (ResourceTypeRegistry) state.getAttribute(STATE_RESOURCES_TYPE_REGISTRY);\r\n        Iterator itemIt = v.iterator();\r\n        while (itemIt.hasNext()) {\r\n            ListItem item = (ListItem) itemIt.next();\r\n            try {\r\n                ResourceType typeDef = registry.getType(item.getResourceType());\r\n                ResourceToolAction action = typeDef.getAction(ResourceToolAction.DELETE);\r\n                if (action instanceof ServiceLevelAction) {\r\n                    ServiceLevelAction slAction = (ServiceLevelAction) action;\r\n                    slAction.finalizeAction(entityManager.newReference(contentHostingService.getReference(item.getId())));\r\n                }\r\n                if (item.isCollection()) {\r\n                    if (oldCollectionId.equals(item.getId())) {\r\n                        state.setAttribute(STATE_COLLECTION_ID, item.getParent().getId());\r\n                        log.debug(\"set current collection to parent: {}\", item.getParent().getId());\r\n                    }\r\n                    contentHostingService.removeCollection(item.getId());\r\n                } else {\r\n                    contentHostingService.removeResource(item.getId());\r\n                }\r\n            } catch (PermissionException e) {\r\n                addAlert(state, rb.getFormattedMessage(\"notpermis6\", new Object[] { item.getName() }));\r\n            } catch (IdUnusedException e) {\r\n                addAlert(state, rb.getString(\"notexist1\"));\r\n            } catch (TypeException e) {\r\n                addAlert(state, rb.getFormattedMessage(\"deleteresType\", new Object[] { item.getName() }));\r\n            } catch (ServerOverloadException e) {\r\n                addAlert(state, rb.getString(\"failed\"));\r\n            } catch (InUseException e) {\r\n                addAlert(state, rb.getFormattedMessage(\"deleteresLocked\", new Object[] { item.getName() }));\r\n            } catch (RuntimeException e) {\r\n                log.debug(\"ResourcesAction.doDelete ***** Unknown Exception ***** {}\", e.getMessage());\r\n                addAlert(state, rb.getString(\"failed\"));\r\n            }\r\n        }\r\n    }\r\n    if (state.getAttribute(STATE_MESSAGE) == null) {\r\n        state.setAttribute(STATE_MODE, MODE_LIST);\r\n        state.removeAttribute(STATE_DELETE_SET);\r\n        state.removeAttribute(STATE_NON_EMPTY_DELETE_SET);\r\n        if (((String) state.getAttribute(STATE_SELECT_ALL_FLAG)).equals(Boolean.TRUE.toString())) {\r\n            state.setAttribute(STATE_SELECT_ALL_FLAG, Boolean.FALSE.toString());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.io.DocumentReader.read",
	"Comment": "read array.length characters from the beginning\tof the document into array.",
	"Method": "int read(int read,char[] array,int read,char[] cbuf,int off,int len){\r\n    int k;\r\n    if (position >= document.getLength()) {\r\n        return -1;\r\n    }\r\n    k = len;\r\n    if ((position + k) >= document.getLength()) {\r\n        k = document.getLength() - (int) position;\r\n    }\r\n    if (off + k >= cbuf.length) {\r\n        k = cbuf.length - off;\r\n    }\r\n    try {\r\n        document.getText((int) position, k, segment);\r\n        position += k;\r\n        System.arraycopy(segment.array, segment.offset, cbuf, off, k);\r\n        return k;\r\n    } catch (BadLocationException ble) {\r\n        return -1;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesMetadata.getFlatList",
	"Comment": "recursively traverses a hierarchy of resourcesmetadata objects rooted at this\tnode in the hierarchy and returns a flat list of resourcesmetadata objects.\tthe hierarchy is expressed as references in the list of nested objects. the return\tvalue is a list of objects ordered for rendering as an html form, with at least \tone entry for each html tag required to render the form.",
	"Method": "List getFlatList(){\r\n    List rv = new ArrayList();\r\n    rv.add(this);\r\n    Iterator it = this.getNested().iterator();\r\n    while (it.hasNext()) {\r\n        ResourcesMetadata prop = (ResourcesMetadata) it.next();\r\n        if (prop.getMaxCardinality() > 1) {\r\n            for (int i = 0; i < prop.getCurrentCount(); i++) {\r\n                ResourcesMetadata copy = null;\r\n                if (i < prop.m_instances.size()) {\r\n                    copy = (ResourcesMetadata) prop.m_instances.get(i);\r\n                } else {\r\n                    copy = new ResourcesMetadata(prop);\r\n                    List parts = new ArrayList(this.getDottedparts());\r\n                    parts.add(copy.getLocalname());\r\n                    parts.add(Integer.toString(i));\r\n                    copy.setDottedparts(parts);\r\n                    copy.setContainer(this);\r\n                    if (prop.m_parent == null) {\r\n                        prop.m_instances.add(copy);\r\n                        copy.m_parent = prop;\r\n                    } else {\r\n                        prop.m_parent.m_instances.add(copy);\r\n                    }\r\n                }\r\n                if (copy.getNested().isEmpty()) {\r\n                    rv.add(copy);\r\n                } else {\r\n                    rv.addAll(copy.getFlatList());\r\n                }\r\n            }\r\n        } else {\r\n            ResourcesMetadata copy = null;\r\n            if (prop.m_instances.size() > 0) {\r\n                copy = (ResourcesMetadata) prop.m_instances.get(0);\r\n            } else {\r\n                copy = new ResourcesMetadata(prop);\r\n                List parts = new ArrayList(this.getDottedparts());\r\n                parts.add(copy.getLocalname());\r\n                copy.setDottedparts(parts);\r\n                copy.setContainer(this);\r\n                if (prop.m_parent == null) {\r\n                    prop.m_instances.add(copy);\r\n                    copy.m_parent = prop;\r\n                } else {\r\n                    prop.m_parent.m_instances.add(copy);\r\n                }\r\n            }\r\n            if (copy.getNested().isEmpty()) {\r\n                rv.add(copy);\r\n            } else {\r\n                rv.addAll(copy.getFlatList());\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "com.rometools.utils.Lists.sizeIs",
	"Comment": "checks whether the list has the given size. a null list is treated like a list withoutentries.",
	"Method": "boolean sizeIs(List<?> list,int size){\r\n    if (size == 0) {\r\n        return list == null || list.isEmpty();\r\n    } else {\r\n        return list != null && list.size() == size;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.XMLTokenMaker.getCompleteCloseTags",
	"Comment": "returns whether markup close tags should be completed.for xml, the\tdefault value is true.",
	"Method": "boolean getCompleteCloseTags(){\r\n    return completeCloseTags;\r\n}"
}, {
	"Path": "org.sakaiproject.citation.cover.CitationService.allowAddCitationList",
	"Comment": "checks permissions to add a citationlist.returns true if the user \thas permission to add a resource in the collection identified by the\tparameter.",
	"Method": "boolean allowAddCitationList(String contentCollectionId){\r\n    org.sakaiproject.citation.api.CitationService instance = getInstance();\r\n    if (instance == null) {\r\n        return false;\r\n    }\r\n    return instance.allowAddCitationList(contentCollectionId);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.concatWith",
	"Comment": "emits the success value of this solo followed by the event ofthe other solo.",
	"Method": "Flowable<T> concatWith(Solo<T> other){\r\n    return Flowable.concat(this, other);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.isStackEmpty",
	"Comment": "returns true if the suspended operations stack contains no elements.",
	"Method": "boolean isStackEmpty(SessionState state){\r\n    log.debug(\"ResourcesAction.isStackEmpty()\");\r\n    Stack operations_stack = (Stack) state.getAttribute(STATE_SUSPENDED_OPERATIONS_STACK);\r\n    if (operations_stack == null) {\r\n        operations_stack = new Stack();\r\n        state.setAttribute(STATE_SUSPENDED_OPERATIONS_STACK, operations_stack);\r\n    }\r\n    return operations_stack.isEmpty();\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.isPubKeyCanonical",
	"Comment": "returns true if the given pubkey is canonical, i.e. the correct length taking into account compression.",
	"Method": "boolean isPubKeyCanonical(boolean isPubKeyCanonical,byte[] pubkey){\r\n    if (pubkey[0] == 0x04) {\r\n        if (pubkey.length != 65) {\r\n            return false;\r\n        }\r\n    } else if (pubkey[0] == 0x02 || pubkey[0] == 0x03) {\r\n        if (pubkey.length != 33) {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.pushSecurityAdvisor",
	"Comment": "look up a security advisor from the session with the given key, and then push it on the security service stack.",
	"Method": "SecurityAdvisor pushSecurityAdvisor(Session session,String sessionKey,boolean removeFromSession){\r\n    SecurityAdvisor asgnAdvisor = (SecurityAdvisor) session.getAttribute(sessionKey);\r\n    if (asgnAdvisor != null) {\r\n        securityService.pushAdvisor(asgnAdvisor);\r\n        if (removeFromSession)\r\n            session.removeAttribute(sessionKey);\r\n    }\r\n    return asgnAdvisor;\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.RSS091UserlandParser.parseItem",
	"Comment": "parses an item element of an rss document looking for item information.it first invokes super.parseitem and then parses and injects the description property ifpresent.",
	"Method": "Item parseItem(Element rssRoot,Element eItem,Locale locale){\r\n    final Item item = super.parseItem(rssRoot, eItem, locale);\r\n    final Element description = eItem.getChild(\"description\", getRSSNamespace());\r\n    if (description != null) {\r\n        item.setDescription(parseItemDescription(rssRoot, description));\r\n    }\r\n    final Element encoded = eItem.getChild(\"encoded\", getContentNamespace());\r\n    if (encoded != null) {\r\n        final Content content = new Content();\r\n        content.setType(Content.HTML);\r\n        content.setValue(encoded.getText());\r\n        item.setContent(content);\r\n    }\r\n    return item;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern5.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function5<T1, T2, T3, T4, T5, R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Plan5<T1, T2, T3, T4, T5, R>(this, selector);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ClipboardHistory.get",
	"Comment": "returns the singleton instance of this class, lazily creating it if\tnecessary.\tthis method should only be called on the edt.",
	"Method": "ClipboardHistory get(){\r\n    if (instance == null) {\r\n        instance = new ClipboardHistory();\r\n    }\r\n    return instance;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.changedUpdate",
	"Comment": "gives notification from the document that attributes were changed\tin a location that this view is responsible for.",
	"Method": "void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){\r\n    updateDamage(changes, a, f);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.GradebookAssignment.calculateStatistics",
	"Comment": "calculate the mean score for students with entered grades.",
	"Method": "void calculateStatistics(Collection<AssignmentGradeRecord> gradeRecords){\r\n    int numScored = 0;\r\n    BigDecimal total = new BigDecimal(\"0\");\r\n    BigDecimal pointsTotal = new BigDecimal(\"0\");\r\n    for (final AssignmentGradeRecord record : gradeRecords) {\r\n        if (!record.getGradableObject().equals(this)) {\r\n            continue;\r\n        }\r\n        if (record.getDroppedFromGrade() == null) {\r\n            throw new GradebookException(\"record.droppedFromGrade cannot be null\");\r\n        }\r\n        Double score = null;\r\n        if (!getUngraded() && this.pointsPossible > 0) {\r\n            score = record.getGradeAsPercentage();\r\n        }\r\n        final Double points = record.getPointsEarned();\r\n        if (score == null && points == null || record.getDroppedFromGrade()) {\r\n            continue;\r\n        } else if (score == null) {\r\n            pointsTotal = pointsTotal.add(new BigDecimal(points.toString()));\r\n            numScored++;\r\n        } else {\r\n            total = total.add(new BigDecimal(score.toString()));\r\n            pointsTotal = pointsTotal.add(new BigDecimal(points.toString()));\r\n            numScored++;\r\n        }\r\n    }\r\n    if (numScored == 0) {\r\n        this.mean = null;\r\n        this.averageTotal = null;\r\n    } else {\r\n        final BigDecimal bdNumScored = new BigDecimal(numScored);\r\n        if (!getUngraded() && this.pointsPossible > 0) {\r\n            this.mean = Double.valueOf(total.divide(bdNumScored, GradebookService.MATH_CONTEXT).doubleValue());\r\n        } else {\r\n            this.mean = null;\r\n        }\r\n        this.averageTotal = Double.valueOf(pointsTotal.divide(bdNumScored, GradebookService.MATH_CONTEXT).doubleValue());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JSPTokenMaker.getShouldIndentNextLineAfter",
	"Comment": "overridden to handle newlines in js and css differently than those in\tmarkup.",
	"Method": "boolean getShouldIndentNextLineAfter(Token token){\r\n    int languageIndex = token == null ? 0 : token.getLanguageIndex();\r\n    if (getCurlyBracesDenoteCodeBlocks(languageIndex)) {\r\n        if (token != null && token.length() == 1) {\r\n            char ch = token.charAt(0);\r\n            return ch == '{' || ch == '(';\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.summarycalendar.ui.PrefsBean.getPreferenceList",
	"Comment": "get the current user preference list value. first attempt preferences, then defaults from sakai.properties.",
	"Method": "List getPreferenceList(String name){\r\n    Preferences prefs = M_ps.getPreferences(M_sm.getCurrentSessionUserId());\r\n    ResourceProperties rp = prefs.getProperties(PREFS_KEY);\r\n    List l = rp.getPropertyList(name);\r\n    return l;\r\n}"
}, {
	"Path": "org.sakaiproject.util.CalendarUtil.getFirstDayOfMonth",
	"Comment": "set the calendar to the first day of this month, and return this day of week.",
	"Method": "int getFirstDayOfMonth(int month){\r\n    m_calendar.set(Calendar.MONTH, month);\r\n    m_calendar.set(Calendar.DAY_OF_MONTH, 1);\r\n    return (getDay_Of_Week(true) - 1);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern7.and",
	"Comment": "creates a pattern that matches when all seven observable sequences have an available element.",
	"Method": "Pattern8<T1, T2, T3, T4, T5, T6, T7, T8> and(Observable<T8> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Pattern8<T1, T2, T3, T4, T5, T6, T7, T8>(o1, o2, o3, o4, o5, o6, o7, other);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    nestedMlcDepth = 0;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_BACKQUOTE:\r\n            state = WYSIWYG_STRING_2;\r\n            break;\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = WYSIWYG_STRING_1;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            break;\r\n        case Token.COMMENT_DOCUMENTATION:\r\n            state = DOCCOMMENT;\r\n            break;\r\n        case INTERNAL_IN_NESTABLE_MLC:\r\n            state = NESTABLE_MLC;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_IN_NESTABLE_MLC:\r\n                        state = NESTABLE_MLC;\r\n                        break;\r\n                }\r\n                nestedMlcDepth = -initialTokenType & 0xff;\r\n            } else {\r\n                state = YYINITIAL;\r\n            }\r\n    }\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.getCourseManagementService",
	"Comment": "returns the instance of the coursemanagementservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "CourseManagementService getCourseManagementService(){\r\n    return courseManagementService;\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.SwiftFileSystemHandler.checkAccountSpace",
	"Comment": "checks the space used for the account against the space available.will call the commonlogger to report any warning or error.",
	"Method": "void checkAccountSpace(){\r\n    if (warningLimitForAccountSizeInBytes <= 0L && errorLimitForAccountSizeInBytes <= 0L) {\r\n        return;\r\n    }\r\n    long bytesUsed = swiftApi.getAccountApi(region).get().getBytesUsed();\r\n    if (errorLimitForAccountSizeInBytes > 0L && errorLimitForAccountSizeInBytes < bytesUsed) {\r\n        logger.errorOnAccountSize(errorLimitForAccountSizeInBytes, bytesUsed);\r\n        throw new IOException(\"No more space available for account!\\nMax:\" + errorLimitForAccountSizeInBytes + \"\\nUsed:\" + bytesUsed);\r\n    }\r\n    if (warningLimitForAccountSizeInBytes > 0L && warningLimitForAccountSizeInBytes < bytesUsed) {\r\n        logger.warningOnAccountSize(warningLimitForAccountSizeInBytes, bytesUsed);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.add",
	"Comment": "adds node to parent and creates the nodemodel to store in the tree",
	"Method": "DefaultMutableTreeNode add(DefaultMutableTreeNode parent,List<List> sub,String userId,List<ListOptionSerialized> blankRestrictedTools,boolean addDirectChildren,List<String> accessAdminNodeIds,List<String> subAdminsSiteAccessNodes,boolean shoppingPeriodTool){\r\n    DefaultMutableTreeNode root = null;\r\n    for (List nodeList : sub) {\r\n        HierarchyNodeSerialized node = (HierarchyNodeSerialized) nodeList.get(0);\r\n        List children = (List) nodeList.get(1);\r\n        String realm = \"\";\r\n        String role = \"\";\r\n        boolean directAccess = false;\r\n        Date startDate = null;\r\n        Date endDate = null;\r\n        Date shoppingAdminModified = null;\r\n        String shoppingAdminModifiedBy = null;\r\n        Date modified = null;\r\n        String modifiedBy = null;\r\n        boolean shoppingPeriodRevokeInstructorEditable = false;\r\n        boolean shoppingPeriodRevokeInstructorPublicOpt = false;\r\n        boolean allowBecomeUser = false;\r\n        boolean instructorEdited = false;\r\n        List<ListOptionSerialized> restrictedAuthTools = copyListOptions(blankRestrictedTools);\r\n        List<ListOptionSerialized> restrictedPublicTools = copyListOptions(blankRestrictedTools);\r\n        boolean accessAdmin = accessAdminNodes.contains(node.id);\r\n        boolean shoppingPeriodAdmin = shoppingPeriodAdminNodes.contains(node.id);\r\n        Set<String> perms = null;\r\n        if ((!shoppingPeriodTool && DelegatedAccessConstants.SHOPPING_PERIOD_USER.equals(userId)) || accessNodes.contains(node.id) || shoppingPeriodAdminNodes.contains(node.id)) {\r\n            perms = getPermsForUserNodes(userId, node.id);\r\n            String[] realmRole = getAccessRealmRole(perms);\r\n            realm = realmRole[0];\r\n            role = realmRole[1];\r\n            startDate = getShoppingStartDate(perms);\r\n            endDate = getShoppingEndDate(perms);\r\n            restrictedAuthTools = getRestrictedAuthToolSerializedList(perms, restrictedAuthTools);\r\n            restrictedPublicTools = getRestrictedPublicToolSerializedList(perms, restrictedPublicTools);\r\n            directAccess = getIsDirectAccess(perms);\r\n            shoppingAdminModified = getPermDate(perms, DelegatedAccessConstants.NODE_PERM_SHOPPING_ADMIN_MODIFIED);\r\n            shoppingAdminModifiedBy = getShoppingAdminModifiedBy(perms);\r\n            modified = getPermDate(perms, DelegatedAccessConstants.NODE_PERM_MODIFIED);\r\n            modifiedBy = getModifiedBy(perms);\r\n            shoppingPeriodRevokeInstructorEditable = isShoppingPeriodRevokeInstructorEditable(perms);\r\n            shoppingPeriodRevokeInstructorPublicOpt = isShoppingPeriodRevokeInstructorPublicOpt(perms);\r\n            allowBecomeUser = isAllowBecomeUser(perms);\r\n            instructorEdited = isInstructorEdited(perms);\r\n        }\r\n        NodeModel parentNodeModel = null;\r\n        if (parent != null) {\r\n            parentNodeModel = ((NodeModel) parent.getUserObject());\r\n        }\r\n        DefaultMutableTreeNode child = new DelegatedAccessMutableTreeNode();\r\n        NodeModel childNodeModel = new NodeModel(node.id, node, directAccess, realm, role, parentNodeModel, restrictedAuthTools, restrictedPublicTools, startDate, endDate, addDirectChildren && !children.isEmpty(), shoppingPeriodAdmin, modifiedBy, modified, shoppingAdminModified, shoppingAdminModifiedBy, accessAdmin, shoppingPeriodRevokeInstructorEditable, shoppingPeriodRevokeInstructorPublicOpt, allowBecomeUser, instructorEdited);\r\n        if (accessAdminNodeIds != null) {\r\n            childNodeModel.setEditable(false);\r\n            boolean found = false;\r\n            for (String nodeId : accessAdminNodeIds) {\r\n                if (nodeId.equals(node.id)) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (found) {\r\n                childNodeModel.setEditable(true);\r\n            }\r\n        }\r\n        if (subAdminsSiteAccessNodes != null && subAdminsSiteAccessNodes.size() > 0) {\r\n            for (String nodeId : subAdminsSiteAccessNodes) {\r\n                if (childNodeModel.getNodeId().equals(nodeId)) {\r\n                    Set<String> permsSubAdmin = getPermsForUserNodes(sakaiProxy.getCurrentUserId(), nodeId);\r\n                    String[] realmRole = getAccessRealmRole(permsSubAdmin);\r\n                    childNodeModel.setSubAdminSiteAccess(realmRole);\r\n                }\r\n            }\r\n        }\r\n        child.setUserObject(childNodeModel);\r\n        if (parent == null) {\r\n            root = child;\r\n        } else {\r\n            if (!(DelegatedAccessConstants.SHOPPING_PERIOD_USER.equals(userId) && shoppingPeriodTool && childNodeModel.getNode().title != null && childNodeModel.isSiteNode() && perms != null && !isShoppingAvailable(perms))) {\r\n                parent.add(child);\r\n            }\r\n        }\r\n        if (!children.isEmpty()) {\r\n            add(child, children, userId, blankRestrictedTools, addDirectChildren, accessAdminNodeIds, subAdminsSiteAccessNodes, shoppingPeriodTool);\r\n        }\r\n    }\r\n    return root;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.AtomClientTest.testEntryPostWithCategories",
	"Comment": "test posting an entry to every available collection with a fixed and an unfixed category ifserver support allows, then cleanup.",
	"Method": "void testEntryPostWithCategories(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element2 : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element2;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element3 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element3;\r\n            if (col.accepts(Collection.ENTRY_TYPE)) {\r\n                final ClientEntry m1 = col.createEntry();\r\n                m1.setTitle(\"Test post\");\r\n                final Content c = new Content();\r\n                c.setValue(\"This is a test post\");\r\n                c.setType(\"html\");\r\n                m1.setContent(c);\r\n                Category fixedCat = null;\r\n                Category unfixedCat = null;\r\n                final List<Category> entryCats = new ArrayList<Category>();\r\n                for (int i = 0; i < col.getCategories().size(); i++) {\r\n                    final Categories cats = col.getCategories().get(i);\r\n                    if (cats.isFixed() && fixedCat == null) {\r\n                        final String scheme = cats.getScheme();\r\n                        fixedCat = cats.getCategories().get(0);\r\n                        if (fixedCat.getScheme() == null) {\r\n                            fixedCat.setScheme(scheme);\r\n                        }\r\n                        entryCats.add(fixedCat);\r\n                    } else if (!cats.isFixed() && unfixedCat == null) {\r\n                        final String scheme = cats.getScheme();\r\n                        unfixedCat = new Category();\r\n                        unfixedCat.setScheme(scheme);\r\n                        unfixedCat.setTerm(\"tagster\");\r\n                        entryCats.add(unfixedCat);\r\n                    }\r\n                }\r\n                m1.setCategories(entryCats);\r\n                col.addEntry(m1);\r\n                final ClientEntry m2 = col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                if (fixedCat != null) {\r\n                    boolean foundCat = false;\r\n                    for (final Object element : m2.getCategories()) {\r\n                        final Category cat = (Category) element;\r\n                        if (cat.getTerm().equals(fixedCat.getTerm())) {\r\n                            foundCat = true;\r\n                        }\r\n                    }\r\n                    assertTrue(foundCat);\r\n                }\r\n                if (unfixedCat != null) {\r\n                    boolean foundCat = false;\r\n                    for (final Object element : m2.getCategories()) {\r\n                        final Category cat = (Category) element;\r\n                        if (cat.getTerm().equals(unfixedCat.getTerm())) {\r\n                            foundCat = true;\r\n                        }\r\n                    }\r\n                    assertTrue(foundCat);\r\n                }\r\n                m2.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.getPublishedDate",
	"Comment": "returns the feed published date.this method is a convenience method, it maps to the dublin core module date.",
	"Method": "Date getPublishedDate(){\r\n    return getDCModule().getDate();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.observeOn",
	"Comment": "observes the onerror and oncomplete events on the specifiedscheduler.",
	"Method": "Nono observeOn(Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new NonoObserveOn(this, scheduler));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.toPerhaps",
	"Comment": "convert this nono instance into a perhaps that only terminates.",
	"Method": "Perhaps<T> toPerhaps(){\r\n    return Perhaps.onAssembly(new NonoToPerhaps<T>(this));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxUtilities.getGutter",
	"Comment": "returns the gutter component of the scroll pane containing a text\tarea, if any.",
	"Method": "Gutter getGutter(RTextArea textArea){\r\n    Gutter gutter = null;\r\n    Container parent = textArea.getParent();\r\n    if (parent instanceof JViewport) {\r\n        parent = parent.getParent();\r\n        if (parent instanceof RTextScrollPane) {\r\n            RTextScrollPane sp = (RTextScrollPane) parent;\r\n            gutter = sp.getGutter();\r\n        }\r\n    }\r\n    return gutter;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.repeatWhen",
	"Comment": "repeats this perhaps when the publisher returned by the handler function emitsan item or terminates if this publisher terminates.",
	"Method": "Flowable<T> repeatWhen(Function<? super Flowable<Object>, ? extends Publisher<?>> handler){\r\n    return Flowable.fromPublisher(this).repeatWhen(handler);\r\n}"
}, {
	"Path": "co.rsk.net.BlockStore.getChildrenOf",
	"Comment": "getchildrenof returns all the children of a list of blocks that are in the blockstore.",
	"Method": "List<Block> getChildrenOf(Set<Block> blocks){\r\n    return blocks.stream().flatMap(b -> getBlocksByParentHash(b.getHash()).stream()).distinct().collect(Collectors.toList());\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.isSingleGroupInherited",
	"Comment": "does this entity inherit grouped access mode with a single group that has access?",
	"Method": "boolean isSingleGroupInherited(){\r\n    return AccessMode.GROUPED == this.inheritedAccessMode && this.inheritedGroups != null && this.inheritedGroups.size() == 1;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.paintComponent",
	"Comment": "the paintcomponent method is overridden so we\tapply any necessary rendering hints to the graphics object.",
	"Method": "void paintComponent(Graphics g){\r\n    if (metricsNeverRefreshed) {\r\n        refreshFontMetrics(getGraphics2D(getGraphics()));\r\n        metricsNeverRefreshed = false;\r\n    }\r\n    super.paintComponent(getGraphics2D(g));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.concatDelayError",
	"Comment": "runs the nono sources emitted by the publisher, one after the other, delaying errors from themtill all sources have terminated and prefetching nonos from the upstream.",
	"Method": "Nono concatDelayError(Iterable<? extends Nono> sources,Nono concatDelayError,Publisher<? extends Nono> sources,Nono concatDelayError,Publisher<? extends Nono> sources,int prefetch,boolean tillTheEnd){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.verifyPositive(prefetch, \"prefetch\");\r\n    return onAssembly(new NonoConcat(sources, prefetch, tillTheEnd ? ErrorMode.END : ErrorMode.BOUNDARY));\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.PreferredUrlHandler.getUrl",
	"Comment": "fetch the preferred url.this method is invoked for every result record.",
	"Method": "String getUrl(String connector,Element dataElement){\r\n    if (!_preferredUrlConnectors.contains(connector)) {\r\n        return null;\r\n    }\r\n    if (connector.equals(ASHO_CONNECTOR)) {\r\n        NodeList nodeList = DomUtils.getElementList(dataElement, \"IDENTIFIER\");\r\n        String url = null;\r\n        for (int i = 0; i < nodeList.getLength(); i++) {\r\n            Element element = (Element) nodeList.item(i);\r\n            if (element.getAttribute(\"scheme\").equals(\"URL\")) {\r\n                url = DomUtils.getText(element);\r\n                if (StringUtils.isNull(url)) {\r\n                    url = null;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return url;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip.getImageBase",
	"Comment": "returns the base url to use when loading images in this focusable tip.",
	"Method": "URL getImageBase(){\r\n    return imageBase;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.FoldIndicator.setFoldIcons",
	"Comment": "sets the icons to use to represent collapsed and expanded folds.",
	"Method": "void setFoldIcons(Icon collapsedIcon,Icon expandedIcon){\r\n    this.collapsedFoldIcon = collapsedIcon;\r\n    this.expandedFoldIcon = expandedIcon;\r\n    revalidate();\r\n    repaint();\r\n}"
}, {
	"Path": "com.rometools.rome.io.XmlReaderException.getXmlGuessEncoding",
	"Comment": "returns the encoding guess based on the first bytes of the inputstream.",
	"Method": "String getXmlGuessEncoding(){\r\n    return xmlGuessEncoding;\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentItemTest.testContentAbout",
	"Comment": "test of contentabout method, of class com.totsp.xml.syndication.content.contentitem.",
	"Method": "void testContentAbout(){\r\n    LOG.debug(\"testContentAbout\");\r\n    final String test = \"http://example.org/item/content.svg\";\r\n    item.setContentFormat(test);\r\n    assertTrue(item.getContentFormat().equals(test));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchEngine.getNextMatchPosRegExImpl",
	"Comment": "searches searchin for an occurrence of regex\teither forwards or backwards, matching case or not.",
	"Method": "Object getNextMatchPosRegExImpl(String regEx,CharSequence searchIn,boolean goForward,boolean matchCase,boolean wholeWord,String replaceStr){\r\n    if (wholeWord) {\r\n        regEx = \"\\\\b\" + regEx + \"\\\\b\";\r\n    }\r\n    int flags = Pattern.MULTILINE;\r\n    flags = RSyntaxUtilities.getPatternFlags(matchCase, flags);\r\n    Pattern pattern = null;\r\n    try {\r\n        pattern = Pattern.compile(regEx, flags);\r\n    } catch (PatternSyntaxException pse) {\r\n        return null;\r\n    }\r\n    Matcher m = pattern.matcher(searchIn);\r\n    if (goForward) {\r\n        if (m.find()) {\r\n            if (replaceStr == null) {\r\n                return new Point(m.start(), m.end());\r\n            }\r\n            return new RegExReplaceInfo(m.group(0), m.start(), m.end(), getReplacementText(m, replaceStr));\r\n        }\r\n    } else {\r\n        List<?> matches = getMatches(m, replaceStr);\r\n        if (!matches.isEmpty()) {\r\n            return matches.get(matches.size() - 1);\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.inheritsRoles",
	"Comment": "checks whether the list item has any inherited roles defined.",
	"Method": "boolean inheritsRoles(){\r\n    return this.inheritedRoleIds != null && !this.inheritedRoleIds.isEmpty();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.DefaultTokenFactory.resetAllTokens",
	"Comment": "resets the state of this token maker.this method should be called\tby the tokenmaker every time a token list is generated for\ta new line so the tokens can be reused.",
	"Method": "void resetAllTokens(){\r\n    currentFreeToken = 0;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.createSubmissionSecurityAdvisor",
	"Comment": "this security advisor is used when making an assignment submission so that attachments can be added.",
	"Method": "SecurityAdvisor createSubmissionSecurityAdvisor(){\r\n    return (userId, function, reference) -> {\r\n        if (function.equals(contentHostingService.AUTH_RESOURCE_ADD) || function.equals(contentHostingService.AUTH_RESOURCE_WRITE_OWN) || function.equals(contentHostingService.AUTH_RESOURCE_HIDDEN)) {\r\n            return SecurityAdvisor.SecurityAdvice.ALLOWED;\r\n        } else if (function.equals(contentHostingService.AUTH_RESOURCE_WRITE_ANY)) {\r\n            log.info(userId + \" requested ability to write to any content on \" + reference + \" which we didn't expect, this should be investigated\");\r\n            return SecurityAdvisor.SecurityAdvice.ALLOWED;\r\n        }\r\n        return SecurityAdvisor.SecurityAdvice.PASS;\r\n    };\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testResearch2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testResearch2Parse(){\r\n    LOG.debug(\"testResearch2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/research2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final ScholarlyArticle module = (ScholarlyArticle) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Economy\", \"Tsunami\" }, module.getLabels());\r\n    cal.set(2005, 1, 25);\r\n    Assert.assertEquals(\"PubDate\", cal.getTime(), module.getPublishDate());\r\n    this.assertEquals(\"Authors\", new String[] { \"James Smith\" }, module.getAuthors());\r\n    Assert.assertEquals(\"Pub Name\", \"Tsunami and the Economy\", module.getPublicationName());\r\n    Assert.assertEquals(\"Pub Vol\", \"III\", module.getPublicationVolume());\r\n    Assert.assertEquals(\"Pages\", new Integer(5), module.getPages());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.andThen",
	"Comment": "emits the success value of this solo and then continues withthe events of the other publisher.",
	"Method": "Solo<T> andThen(Nono other,Flowable<T> andThen,Publisher<? extends T> other){\r\n    return Flowable.concat(this, other);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getCreator",
	"Comment": "gets the dublincore module title. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getCreator(){\r\n    return Lists.firstEntry(creator);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setDate",
	"Comment": "sets the dublincore module date. convenience method that can be used when there is only onedate to set.",
	"Method": "void setDate(Date date){\r\n    this.date = Lists.create(date);\r\n}"
}, {
	"Path": "com.rometools.utils.Strings.trimToEmpty",
	"Comment": "removes the whitespace at the beginning and end of a string. when the string only containswhitespace, it returns null.",
	"Method": "String trimToEmpty(String s){\r\n    final String trimmed = trim(s);\r\n    if (trimmed == null || trimmed.isEmpty()) {\r\n        return \"\";\r\n    } else {\r\n        return trimmed;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.getEntireTreePlusUserPerms",
	"Comment": "get the entire tree for a user and populates the information that may exist",
	"Method": "TreeModel getEntireTreePlusUserPerms(String userId){\r\n    getAllNodesForUser(userId);\r\n    Set<HierarchyNodeSerialized> rootSet = new HashSet<HierarchyNodeSerialized>();\r\n    rootSet.add(getRootNode());\r\n    List<List> l1 = getTreeListForUser(userId, false, true, rootSet);\r\n    orderTreeModel(l1);\r\n    return convertToTreeModel(l1, userId, getEntireToolsList(), false, null, null, false);\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.isEmptyTrie",
	"Comment": "isemptytrie checks the existence of subnodes, subnodes hashes or value",
	"Method": "boolean isEmptyTrie(byte[] value,TrieImpl[] nodes,Keccak256[] hashes){\r\n    if (value != null && value.length != 0) {\r\n        return false;\r\n    }\r\n    if (nodes != null) {\r\n        for (int k = 0; k < nodes.length; k++) {\r\n            if (nodes[k] != null) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    if (hashes != null) {\r\n        for (int k = 0; k < hashes.length; k++) {\r\n            if (hashes[k] != null) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTATextTransferHandler.exportDone",
	"Comment": "this method is called after data has been exported.this method should\tremove the data that was transfered if the action was move.",
	"Method": "void exportDone(JComponent source,Transferable data,int action){\r\n    if (shouldRemove && action == MOVE) {\r\n        TextTransferable t = (TextTransferable) data;\r\n        t.removeText();\r\n        if (withinSameComponent) {\r\n            ((RTextArea) source).endAtomicEdit();\r\n            withinSameComponent = false;\r\n        }\r\n    }\r\n    exportComp = null;\r\n    if (data instanceof TextTransferable) {\r\n        ClipboardHistory.get().add(((TextTransferable) data).getPlainData());\r\n    }\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.ByteUtils.getBytes",
	"Comment": "copies bytes from the source byte array to the destination array",
	"Method": "void getBytes(byte[] source,int srcBegin,int srcEnd,byte[] destination,int dstBegin){\r\n    System.arraycopy(source, srcBegin, destination, dstBegin, srcEnd - srcBegin);\r\n}"
}, {
	"Path": "org.sakaiproject.service.gradebook.shared.CategoryDefinition.getTotalPoints",
	"Comment": "helper method to get the total points associated with a category",
	"Method": "Double getTotalPoints(){\r\n    BigDecimal totalPoints = new BigDecimal(0);\r\n    if (getAssignmentList() != null) {\r\n        for (final Assignment assignment : getAssignmentList()) {\r\n            totalPoints = totalPoints.add(BigDecimal.valueOf(assignment.getPoints()));\r\n        }\r\n    }\r\n    return totalPoints.doubleValue();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.GradeMapping.setDefaultValues",
	"Comment": "sets the percentage values for this grademapping to their default values.",
	"Method": "void setDefaultValues(){\r\n    this.gradeMap = new HashMap(getDefaultBottomPercents());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.GradingEvents.getEvents",
	"Comment": "returns a list of grading events, which may be empty if none exist.",
	"Method": "List<GradingEvent> getEvents(String studentId){\r\n    List<GradingEvent> list = studentsToEventsMap.get(studentId);\r\n    if (list == null) {\r\n        list = new ArrayList();\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setFileSize",
	"Comment": "filesize is the number of bytes of the media object. it is an optional attribute.",
	"Method": "void setFileSize(Long fileSize){\r\n    this.fileSize = fileSize;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.mergeArray",
	"Comment": "merge the values in arbitrary order from a sequence of perhaps sources.",
	"Method": "Flowable<T> mergeArray(Perhaps<? extends T> sources,Flowable<T> mergeArray,int maxConcurrency,Perhaps<? extends T> sources){\r\n    return Flowable.mergeArray(maxConcurrency, 1, sources);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ErrorStrip.getDefaultCaretMarkerColor",
	"Comment": "returns the default color for the caret marker.this is a ui\tresource so that it is updated if the lookandfeel is updated,\tbut not if the user overrides it.",
	"Method": "ColorUIResource getDefaultCaretMarkerColor(){\r\n    if (RSyntaxUtilities.isLightForeground(getForeground())) {\r\n        return new ColorUIResource(textArea.getCaretColor());\r\n    }\r\n    return new ColorUIResource(Color.black);\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.AtomClientServerTest.testGetAtomService",
	"Comment": "tests that server has introspection doc with at least one workspace.",
	"Method": "void testGetAtomService(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    for (final Workspace workspace : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) workspace;\r\n        assertNotNull(space.getTitle());\r\n        LOG.debug(\"Workspace: {}\", space.getTitle());\r\n        for (final Object element : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element;\r\n            LOG.debug(\"   Collection: {} Accepts: {}\", col.getTitle(), col.getAccepts());\r\n            LOG.debug(\"      href: {}\", col.getHrefResolved());\r\n            assertNotNull(col.getTitle());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.GroovyTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.ethereum.net.server.ChannelManagerImpl.broadcastBlock",
	"Comment": "broadcastblock propagates a block message across active peers",
	"Method": "Set<NodeID> broadcastBlock(Block block){\r\n    Metrics.broadcastBlock(block);\r\n    final Set<NodeID> nodesIdsBroadcastedTo = new HashSet();\r\n    final BlockIdentifier bi = new BlockIdentifier(block.getHash().getBytes(), block.getNumber());\r\n    final EthMessage newBlock = new RskMessage(new BlockMessage(block));\r\n    final EthMessage newBlockHashes = new RskMessage(new NewBlockHashesMessage(Arrays.asList(bi)));\r\n    synchronized (activePeersLock) {\r\n        activePeers.values().forEach(c -> logger.trace(\"RSK activePeers: {}\", c));\r\n        List<Channel> peers = new ArrayList(activePeers.values());\r\n        Collections.shuffle(peers);\r\n        int sqrt = (int) Math.floor(Math.sqrt(peers.size()));\r\n        for (int i = 0; i < sqrt; i++) {\r\n            Channel peer = peers.get(i);\r\n            nodesIdsBroadcastedTo.add(peer.getNodeId());\r\n            logger.trace(\"RSK propagate: {}\", peer);\r\n            peer.sendMessage(newBlock);\r\n        }\r\n        for (int i = sqrt; i < peers.size(); i++) {\r\n            Channel peer = peers.get(i);\r\n            logger.trace(\"RSK announce: {}\", peer);\r\n            peer.sendMessage(newBlockHashes);\r\n        }\r\n    }\r\n    return nodesIdsBroadcastedTo;\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.model.ChatMessage.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element message = doc.createElement(\"message\");\r\n    if (stack.isEmpty()) {\r\n        doc.appendChild(message);\r\n    } else {\r\n        ((Element) stack.peek()).appendChild(message);\r\n    }\r\n    stack.push(message);\r\n    message.setAttribute(\"body\", getBody());\r\n    message.setAttribute(\"owner\", getOwner());\r\n    message.setAttribute(\"messageDate\", Long.toString(getMessageDate().getTime()));\r\n    message.setAttribute(\"channelId\", getChatChannel().getId());\r\n    stack.pop();\r\n    return message;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.mergeArrayDelayError",
	"Comment": "runs the maximum number of nono sources at once and terminates when all sourcenono terminate, delaying errors in the process.",
	"Method": "Nono mergeArrayDelayError(Nono sources,Nono mergeArrayDelayError,int maxConcurrency,Nono sources){\r\n    ObjectHelper.verifyPositive(maxConcurrency, \"maxConcurrency\");\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    return onAssembly(new NonoMergeArray(sources, true, maxConcurrency));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.removeUpdate",
	"Comment": "gives notification that something was removed from the document\tin a location that this view is responsible for.",
	"Method": "void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){\r\n    updateDamage(changes, a, f);\r\n}"
}, {
	"Path": "com.rometools.utils.Lists.createWhenNull",
	"Comment": "returns the list when it is not null. returns a new list otherwise.",
	"Method": "List<T> createWhenNull(List<T> list){\r\n    if (list == null) {\r\n        return new ArrayList<T>();\r\n    } else {\r\n        return list;\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.flatMapPublisher",
	"Comment": "maps the upstream value into a publisher and emits all of its events.",
	"Method": "Flowable<R> flatMapPublisher(Function<? super T, ? extends Publisher<? extends R>> mapper){\r\n    ObjectHelper.requireNonNull(mapper, \"mapper is null\");\r\n    return RxJavaPlugins.onAssembly(new PerhapsFlatMapPublisher<T, R>(this, mapper));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ConfigurableCaret.mouseClicked",
	"Comment": "called when the mouse is clicked.if the click was generated from\tbutton1, a double click selects a word, and a triple click the\tcurrent line.",
	"Method": "void mouseClicked(MouseEvent e){\r\n    if (!e.isConsumed()) {\r\n        RTextArea textArea = getTextArea();\r\n        int nclicks = e.getClickCount();\r\n        if (SwingUtilities.isLeftMouseButton(e)) {\r\n            if (nclicks > 2) {\r\n                nclicks %= 2;\r\n                switch(nclicks) {\r\n                    case 0:\r\n                        selectWord(e);\r\n                        selectedWordEvent = null;\r\n                        break;\r\n                    case 1:\r\n                        Action a = null;\r\n                        ActionMap map = textArea.getActionMap();\r\n                        if (map != null) {\r\n                            a = map.get(RTextAreaEditorKit.selectLineAction);\r\n                        }\r\n                        if (a == null) {\r\n                            if (selectLine == null) {\r\n                                selectLine = new RTextAreaEditorKit.SelectLineAction();\r\n                            }\r\n                            a = selectLine;\r\n                        }\r\n                        a.actionPerformed(new ActionEvent(textArea, ActionEvent.ACTION_PERFORMED, null, e.getWhen(), e.getModifiers()));\r\n                }\r\n            }\r\n        } else if (SwingUtilities.isMiddleMouseButton(e) && getPasteOnMiddleMouseClick()) {\r\n            if (nclicks == 1 && textArea.isEditable() && textArea.isEnabled()) {\r\n                JTextComponent c = (JTextComponent) e.getSource();\r\n                if (c != null) {\r\n                    try {\r\n                        Toolkit tk = c.getToolkit();\r\n                        Clipboard buffer = tk.getSystemSelection();\r\n                        if (buffer != null) {\r\n                            adjustCaret(e);\r\n                            TransferHandler th = c.getTransferHandler();\r\n                            if (th != null) {\r\n                                Transferable trans = buffer.getContents(null);\r\n                                if (trans != null) {\r\n                                    th.importData(c, trans);\r\n                                }\r\n                            }\r\n                            adjustFocus(true);\r\n                        } else {\r\n                            textArea.paste();\r\n                        }\r\n                    } catch (HeadlessException he) {\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.getTrackingIcons",
	"Comment": "returns the tracking icons at the specified view position.",
	"Method": "GutterIconInfo[] getTrackingIcons(Point p){\r\n    int offs = textArea.viewToModel(new Point(0, p.y));\r\n    int line = textArea.getLineOfOffset(offs);\r\n    return iconArea.getTrackingIcons(line);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera1Base.disableAudio",
	"Comment": "mute microphone, can be called before, while and after stream.",
	"Method": "void disableAudio(){\r\n    microphoneManager.mute();\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.AbstractITunesObject.setExplicit",
	"Comment": "boolean as to whether this feed or entry contains adult content",
	"Method": "void setExplicit(boolean explicit){\r\n    this.explicit = explicit;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.delaySubscription",
	"Comment": "delays the actual subscription to this nono until the giventime passes.",
	"Method": "Nono delaySubscription(Publisher<?> other,Nono delaySubscription,long delay,TimeUnit unit,Nono delaySubscription,long delay,TimeUnit unit,Scheduler scheduler){\r\n    return delaySubscription(timer(delay, unit, scheduler));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.doAfterTerminate",
	"Comment": "executes the callback after this perhaps terminates and the downstreamis notified.",
	"Method": "Perhaps<T> doAfterTerminate(Action onAfterTerminate){\r\n    ObjectHelper.requireNonNull(onAfterTerminate, \"onAfterTerminate is null\");\r\n    return onAssembly(new PerhapsDoOnLifecycle<T>(this, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, onAfterTerminate, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.CodeTemplateManager.getTemplate",
	"Comment": "returns the template that should be inserted at the current caret\tposition, assuming the trigger character was pressed.",
	"Method": "CodeTemplate getTemplate(RSyntaxTextArea textArea){\r\n    int caretPos = textArea.getCaretPosition();\r\n    int charsToGet = Math.min(caretPos, maxTemplateIDLength);\r\n    try {\r\n        Document doc = textArea.getDocument();\r\n        doc.getText(caretPos - charsToGet, charsToGet, s);\r\n        @SuppressWarnings(\"unchecked\")\r\n        int index = Collections.binarySearch(templates, s, comparator);\r\n        return index >= 0 ? (CodeTemplate) templates.get(index) : null;\r\n    } catch (BadLocationException ble) {\r\n        ble.printStackTrace();\r\n        throw new InternalError(\"Error in CodeTemplateManager\");\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.impl.FileBasedCollection.getCategories",
	"Comment": "get list of one categories object containing categories allowed by collection.",
	"Method": "List<Categories> getCategories(boolean inline,List<Categories> getCategories){\r\n    return getCategories(inlineCats);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.net.HttpTransaction.addParametersAndCreateUrl",
	"Comment": "create a url object from the provided url text.if this is a get operation\tand parameters have been set up, add them to the url text first.",
	"Method": "URL addParametersAndCreateUrl(String url){\r\n    StringBuilder urlBuffer = new StringBuilder(url);\r\n    if ((!doPost) && (parameters != null)) {\r\n        String separator = \"?\";\r\n        String cs = getInputCharacterSet();\r\n        Iterator it;\r\n        if (url.indexOf('?') != -1) {\r\n            separator = \"&\";\r\n        }\r\n        it = parameters.getParameterMapIterator();\r\n        while (parameters.nextParameterMapEntry(it)) {\r\n            urlBuffer.append(HttpTransactionUtils.formatParameter(parameters.getParameterNameFromIterator(), parameters.getParameterValueFromIterator(), separator, cs));\r\n            if (separator.equals(\"?\")) {\r\n                separator = \"&\";\r\n            }\r\n        }\r\n    }\r\n    return new URL(urlBuffer.toString());\r\n}"
}, {
	"Path": "restx.factory.alternative.AlternativeTest.should_use_alternative_defined_in_modules_for_named_components",
	"Comment": "this test uses an alternative defined in a module, and the referenced component use a named annotation",
	"Method": "void should_use_alternative_defined_in_modules_for_named_components(){\r\n    Factory factory = Factory.newInstance();\r\n    TestAlternativesFromModule.Flag component = factory.getComponent(TestAlternativesFromModule.Flag.class);\r\n    assertThat(component.value()).isEqualTo(true);\r\n    overrideComponents().set(\"restx.test.alternatives\", \"true\");\r\n    factory = Factory.newInstance();\r\n    component = factory.getComponent(TestAlternativesFromModule.Flag.class);\r\n    assertThat(component.value()).isEqualTo(false);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenImpl.copyFrom",
	"Comment": "makes one token point to the same text segment, and have the same value\tas another token.",
	"Method": "void copyFrom(Token t2){\r\n    text = t2.getTextArray();\r\n    textOffset = t2.getTextOffset();\r\n    textCount = t2.length();\r\n    setOffset(t2.getOffset());\r\n    setType(t2.getType());\r\n    hyperlink = t2.isHyperlink();\r\n    languageIndex = t2.getLanguageIndex();\r\n    nextToken = t2.getNextToken();\r\n}"
}, {
	"Path": "com.rometools.rome.io.WireFeedInput.createSAXBuilder",
	"Comment": "creates and sets up a org.jdom2.input.saxbuilder for parsing.",
	"Method": "SAXBuilder createSAXBuilder(){\r\n    SAXBuilder saxBuilder;\r\n    if (validate) {\r\n        saxBuilder = new SAXBuilder(XMLReaders.DTDVALIDATING);\r\n    } else {\r\n        saxBuilder = new SAXBuilder(XMLReaders.NONVALIDATING);\r\n    }\r\n    saxBuilder.setEntityResolver(RESOLVER);\r\n    try {\r\n        final XMLReader parser = saxBuilder.createParser();\r\n        setFeature(saxBuilder, parser, \"http://xml.org/sax/features/external-general-entities\", false);\r\n        setFeature(saxBuilder, parser, \"http://xml.org/sax/features/external-parameter-entities\", false);\r\n        setFeature(saxBuilder, parser, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\r\n        if (!allowDoctypes) {\r\n            setFeature(saxBuilder, parser, \"http://apache.org/xml/features/disallow-doctype-decl\", true);\r\n        }\r\n    } catch (final JDOMException e) {\r\n        throw new IllegalStateException(\"JDOM could not create a SAX parser\", e);\r\n    }\r\n    saxBuilder.setExpandEntities(false);\r\n    return saxBuilder;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.insertUpdate",
	"Comment": "gives notification that something was inserted into the document\tin a location that this view is responsible for.",
	"Method": "void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){\r\n    updateDamage(changes, a, f);\r\n}"
}, {
	"Path": "co.rsk.net.BlockNodeInformation.addBlockToNode",
	"Comment": "addblocktonode specifies that a given node knows about a given block.",
	"Method": "void addBlockToNode(Keccak256 blockHash,NodeID nodeID){\r\n    Set<Keccak256> nodeBlocks = blocksByNode.get(nodeID);\r\n    if (nodeBlocks == null) {\r\n        nodeBlocks = Collections.newSetFromMap(new LinkedHashMap<Keccak256, Boolean>() {\r\n            protected boolean removeEldestEntry(Map.Entry<Keccak256, Boolean> eldest) {\r\n                return size() > maxBlocks;\r\n            }\r\n        });\r\n        blocksByNode.put(nodeID, nodeBlocks);\r\n    }\r\n    Set<NodeID> blockNodes = nodesByBlock.get(blockHash);\r\n    if (blockNodes == null) {\r\n        blockNodes = new HashSet();\r\n        nodesByBlock.put(blockHash, blockNodes);\r\n    }\r\n    nodeBlocks.add(blockHash);\r\n    blockNodes.add(nodeID);\r\n}"
}, {
	"Path": "co.rsk.net.BlockNodeInformation.addBlockToNode",
	"Comment": "addblocktonode specifies that a given node knows about a given block.",
	"Method": "void addBlockToNode(Keccak256 blockHash,NodeID nodeID){\r\n    return size() > maxBlocks;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.LineNumberList.updateCellHeights",
	"Comment": "changes the height of the cells in the jlist so that they are as tall as\tfont. this function should be called whenever the user changes the font\tof textarea.",
	"Method": "void updateCellHeights(){\r\n    if (textArea != null) {\r\n        cellHeight = textArea.getLineHeight();\r\n        ascent = textArea.getMaxAscent();\r\n    } else {\r\n        cellHeight = 20;\r\n        ascent = 5;\r\n    }\r\n    repaint();\r\n}"
}, {
	"Path": "net.oauth.signature.Base64.encodeBase64",
	"Comment": "encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.",
	"Method": "byte[] encodeBase64(byte[] binaryData,byte[] encodeBase64,byte[] binaryData,boolean isChunked){\r\n    if (binaryData == null || binaryData.length == 0) {\r\n        return binaryData;\r\n    }\r\n    Base64 b64 = isChunked ? new Base64() : new Base64(0);\r\n    long len = (binaryData.length * 4) / 3;\r\n    long mod = len % 4;\r\n    if (mod != 0) {\r\n        len += 4 - mod;\r\n    }\r\n    if (isChunked) {\r\n        len += (1 + (len / CHUNK_SIZE)) * CHUNK_SEPARATOR.length;\r\n    }\r\n    if (len > Integer.MAX_VALUE) {\r\n        throw new IllegalArgumentException(\"Input array too big, output array would be bigger than Integer.MAX_VALUE=\" + Integer.MAX_VALUE);\r\n    }\r\n    byte[] buf = new byte[(int) len];\r\n    b64.setInitialBuffer(buf, 0, buf.length);\r\n    b64.encode(binaryData, 0, binaryData.length);\r\n    b64.encode(binaryData, 0, -1);\r\n    if (b64.buf != buf) {\r\n        b64.readResults(buf, 0, buf.length);\r\n    }\r\n    return buf;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.isClearWhitespaceLinesEnabled",
	"Comment": "returns whether or not lines containing nothing but whitespace are made\tinto blank lines when enter is pressed in them.",
	"Method": "boolean isClearWhitespaceLinesEnabled(){\r\n    return clearWhitespaceLines;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.XMLTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ColorBackgroundPainterStrategy.equals",
	"Comment": "returns whether or not the specified object is equivalent to\tthis one.",
	"Method": "boolean equals(Object o2){\r\n    return o2 != null && (o2 instanceof ColorBackgroundPainterStrategy) && this.color.equals(((ColorBackgroundPainterStrategy) o2).getColor());\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.NumberParser.parseFloat",
	"Comment": "parse a float from a string without exceptions. if the string is not a float then null isreturned",
	"Method": "Float parseFloat(String str,float parseFloat,String str,float def){\r\n    final Float result = parseFloat(str);\r\n    if (result == null) {\r\n        return def;\r\n    } else {\r\n        return result.floatValue();\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.crypto.cryptohash.DigestEngine.flush",
	"Comment": "flush internal buffers, so that less than a block of data\tmay at most be upheld.",
	"Method": "int flush(){\r\n    return inputLen;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.valueDiffFromStateAttribute",
	"Comment": "whether the current input value is different from existing oldvalue",
	"Method": "boolean valueDiffFromStateAttribute(SessionState state,String value,String oldValue){\r\n    boolean rv = false;\r\n    value = StringUtils.trimToNull(value);\r\n    oldValue = StringUtils.trimToNull(oldValue);\r\n    if (oldValue == null && value != null || oldValue != null && value == null || oldValue != null && !normalizeAttributeSpaces(oldValue).equals(normalizeAttributeSpaces(value))) {\r\n        rv = true;\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.content.providers.BaseEventDelayHandler.execute",
	"Comment": "deserializes the context into an event and refires the event.",
	"Method": "void execute(String opaqueContext){\r\n    final Event event = popEventDelay(opaqueContext);\r\n    if (event != null) {\r\n        log.info(\"Refiring delayed event [\" + opaqueContext + \"]\");\r\n        try {\r\n            User user = userDirectoryService.getUser(event.getUserId());\r\n            securityService.pushAdvisor(new SecurityAdvisor() {\r\n                public SecurityAdvice isAllowed(String userId, String function, String reference) {\r\n                    if (securityService.unlock(event.getUserId(), function, reference)) {\r\n                        return SecurityAdvice.ALLOWED;\r\n                    }\r\n                    return SecurityAdvice.PASS;\r\n                }\r\n            });\r\n            eventService.post(event, user);\r\n        } catch (UserNotDefinedException unde) {\r\n            eventService.post(event);\r\n        } finally {\r\n            securityService.popAdvisor();\r\n        }\r\n    } else {\r\n        log.warn(\"Delayed event not found [\" + opaqueContext + \"]\");\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.providers.BaseEventDelayHandler.execute",
	"Comment": "deserializes the context into an event and refires the event.",
	"Method": "void execute(String opaqueContext){\r\n    if (securityService.unlock(event.getUserId(), function, reference)) {\r\n        return SecurityAdvice.ALLOWED;\r\n    }\r\n    return SecurityAdvice.PASS;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doShow_view_student_view",
	"Comment": "action is to show the student view in the view assignment page",
	"Method": "void doShow_view_student_view(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    state.setAttribute(VIEW_ASSIGNMENT_HIDE_STUDENT_VIEW_FLAG, Boolean.FALSE);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.VolatileImageBackgroundPainterStrategy.renderImage",
	"Comment": "renders the image at the proper size into bgimage.\tthis method assumes that bgimage is not\tnull.",
	"Method": "void renderImage(int width,int height,int hint){\r\n    Image master = getMasterImage();\r\n    if (master != null) {\r\n        do {\r\n            Image i = master.getScaledInstance(width, height, hint);\r\n            tracker.addImage(i, 1);\r\n            try {\r\n                tracker.waitForID(1);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n                bgImage = null;\r\n                return;\r\n            } finally {\r\n                tracker.removeImage(i, 1);\r\n            }\r\n            bgImage.getGraphics().drawImage(i, 0, 0, null);\r\n            tracker.addImage(bgImage, 0);\r\n            try {\r\n                tracker.waitForID(0);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n                bgImage = null;\r\n                return;\r\n            } finally {\r\n                tracker.removeImage(bgImage, 0);\r\n            }\r\n        } while (bgImage.contentsLost());\r\n    } else {\r\n        bgImage = null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.oc.ContentReviewServiceTurnitinOC.processQueue",
	"Comment": "processunsubmitted contains stage one and two, checkforreport contains stage three",
	"Method": "void processQueue(){\r\n    log.info(\"Processing Turnitin OC submission queue\");\r\n    final Session session = sessionManager.getCurrentSession();\r\n    ExecutorService executor = Executors.newFixedThreadPool(2);\r\n    executor.execute(new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            sessionManager.setCurrentSession(session);\r\n            processUnsubmitted();\r\n        }\r\n    });\r\n    executor.execute(new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            sessionManager.setCurrentSession(session);\r\n            checkForReport();\r\n        }\r\n    });\r\n    executor.shutdown();\r\n    try {\r\n        if (!executor.awaitTermination(30, TimeUnit.MINUTES)) {\r\n            log.error(\"ContentReviewServiceTurnitinOC.processQueue: time out waiting for executor to complete\");\r\n        }\r\n    } catch (InterruptedException e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.oc.ContentReviewServiceTurnitinOC.processQueue",
	"Comment": "processunsubmitted contains stage one and two, checkforreport contains stage three",
	"Method": "void processQueue(){\r\n    sessionManager.setCurrentSession(session);\r\n    processUnsubmitted();\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.oc.ContentReviewServiceTurnitinOC.processQueue",
	"Comment": "processunsubmitted contains stage one and two, checkforreport contains stage three",
	"Method": "void processQueue(){\r\n    sessionManager.setCurrentSession(session);\r\n    checkForReport();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DartTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    validJSString = true;\r\n    int languageIndex = LANG_INDEX_DEFAULT;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = DART_MULTILINE_STRING_DOUBLE;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = DART_MULTILINE_STRING_SINGLE;\r\n            break;\r\n        case INTERNAL_IN_JS_MLC:\r\n            state = JS_MLC;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_INVALID:\r\n            state = JS_STRING;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_VALID:\r\n            state = JS_STRING;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_INVALID:\r\n            state = JS_CHAR;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_VALID:\r\n            state = JS_CHAR;\r\n            break;\r\n        default:\r\n            state = YYINITIAL;\r\n            break;\r\n    }\r\n    setLanguageIndex(languageIndex);\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.parser.DefaultParseResult.setError",
	"Comment": "sets the error that occurred when last parsing the document, if",
	"Method": "void setError(Exception e){\r\n    this.error = e;\r\n}"
}, {
	"Path": "org.sakaiproject.archive.impl.SiteZipper.unzipArchive",
	"Comment": "unzip a zip file into the unzip directory. only unzips the files that are found within the first folder\tcontained in the zip archive.",
	"Method": "String unzipArchive(String zipFilePath,String m_unzipPath){\r\n    log.debug(\"zipFilePath: \" + zipFilePath);\r\n    ZipFile zipFile = new ZipFile(zipFilePath);\r\n    String unzippedArchivePath = null;\r\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\r\n    while (entries.hasMoreElements()) {\r\n        ZipEntry entry = entries.nextElement();\r\n        File dest = new File(m_unzipPath, entry.getName());\r\n        log.debug(\"Dest: \" + dest.getAbsolutePath());\r\n        if (entry.isDirectory()) {\r\n            if (!dest.mkdir()) {\r\n                throw new IOException(\"Failed to create directory \" + dest);\r\n            }\r\n            if (unzippedArchivePath == null) {\r\n                unzippedArchivePath = entry.getName();\r\n            }\r\n        } else if (unzippedArchivePath != null && entry.getName().startsWith(unzippedArchivePath)) {\r\n            try (InputStream in = zipFile.getInputStream(entry);\r\n                OutputStream out = new FileOutputStream(dest)) {\r\n                IOUtils.copy(in, out);\r\n            }\r\n        } else {\r\n            log.info(\"Ignoring entry: {}\", entry.getName());\r\n        }\r\n    }\r\n    log.debug(\"unzippedArchivePath: \" + unzippedArchivePath);\r\n    return unzippedArchivePath;\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.ITunesGeneratorTest.testEndToEnd",
	"Comment": "test of generate method, of class com.totsp.xml.syndication.itunes.itunesgenerator.",
	"Method": "void testEndToEnd(){\r\n    LOG.debug(\"testEndToEnd\");\r\n    testFile(\"xml/leshow.xml\");\r\n    testFile(\"xml/lr.xml\");\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.setScoringAgentProperties",
	"Comment": "set properties related to grading via an external scoring service. this service may be enabled for theassociated gradebook item.",
	"Method": "void setScoringAgentProperties(Context context,Assignment assignment,AssignmentSubmission submission,boolean gradeView){\r\n    String associatedGbItem = assignment.getProperties().get(PROP_ASSIGNMENT_ASSOCIATE_GRADEBOOK_ASSIGNMENT);\r\n    if (submission != null && StringUtils.isNotBlank(associatedGbItem) && assignment.getTypeOfGrade() == SCORE_GRADE_TYPE) {\r\n        ScoringService scoringService = (ScoringService) ComponentManager.get(\"org.sakaiproject.scoringservice.api.ScoringService\");\r\n        ScoringAgent scoringAgent = scoringService.getDefaultScoringAgent();\r\n        String gradebookUid = toolManager.getCurrentPlacement().getContext();\r\n        boolean scoringAgentEnabled = scoringAgent != null && scoringAgent.isEnabled(gradebookUid, null);\r\n        Set<AssignmentSubmissionSubmitter> submitters = submission.getSubmitters();\r\n        String currentUser = sessionManager.getCurrentSessionUserId();\r\n        AssignmentSubmissionSubmitter submitter = submitters.stream().filter(s -> s.getSubmitter().equals(currentUser)).findAny().orElseGet(() -> submitters.stream().filter(AssignmentSubmissionSubmitter::getSubmittee).findAny().orElse(null));\r\n        if (scoringAgentEnabled && submitter != null) {\r\n            String gbItemName;\r\n            String studentId = submitter.getSubmitter();\r\n            String aRef = AssignmentReferenceReckoner.reckoner().assignment(assignment).reckon().getReference();\r\n            if (aRef.equals(associatedGbItem)) {\r\n                gbItemName = assignment.getTitle();\r\n            } else {\r\n                gbItemName = associatedGbItem;\r\n            }\r\n            org.sakaiproject.service.gradebook.shared.Assignment gbItem = null;\r\n            try {\r\n                gbItem = gradebookService.getAssignment(gradebookUid, gbItemName);\r\n            } catch (SecurityException se) {\r\n                List<org.sakaiproject.service.gradebook.shared.Assignment> viewableGbItems = gradebookService.getViewableAssignmentsForCurrentUser(gradebookUid);\r\n                if (viewableGbItems != null && !viewableGbItems.isEmpty()) {\r\n                    for (org.sakaiproject.service.gradebook.shared.Assignment viewableGbItem : viewableGbItems) {\r\n                        if (gbItemName.equals(viewableGbItem.getName())) {\r\n                            gbItem = viewableGbItem;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (gbItem != null) {\r\n                String gbItemId = Long.toString(gbItem.getId());\r\n                ScoringComponent component = scoringService.getScoringComponent(scoringAgent.getAgentId(), gradebookUid, gbItemId);\r\n                boolean scoringComponentEnabled = component != null && !assignment.getIsGroup();\r\n                context.put(\"scoringComponentEnabled\", scoringComponentEnabled);\r\n                if (scoringComponentEnabled) {\r\n                    context.put(\"scoringAgentImage\", scoringAgent.getImageReference());\r\n                    context.put(\"scoringAgentName\", scoringAgent.getName());\r\n                    if (gradeView) {\r\n                        context.put(\"scoreUrl\", scoringAgent.getScoreLaunchUrl(gradebookUid, gbItemId, studentId));\r\n                        context.put(\"refreshScoreUrl\", scoringService.getDefaultScoringAgent().getScoreUrl(gradebookUid, gbItemId, studentId) + \"&t=gb\");\r\n                        context.put(\"scoreText\", rb.getFormattedMessage(\"scoringAgent.grade\", scoringAgent.getName()));\r\n                    } else {\r\n                        String scoreStudent = null;\r\n                        if (submission.getGradeReleased()) {\r\n                            scoreStudent = studentId;\r\n                        }\r\n                        context.put(\"scoreUrl\", scoringAgent.getViewScoreLaunchUrl(gradebookUid, gbItemId, scoreStudent));\r\n                        context.put(\"scoreText\", rb.getFormattedMessage(\"scoringAgent.view\", scoringAgent.getName()));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.delaySubscription",
	"Comment": "delay the subscription to this perhaps until the other publishersignals an item or completes.",
	"Method": "Perhaps<T> delaySubscription(long delay,TimeUnit unit,Perhaps<T> delaySubscription,long delay,TimeUnit unit,Scheduler scheduler,Perhaps<T> delaySubscription,Publisher<?> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return onAssembly(new PerhapsDelaySubscription<T>(this, other));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DartTokenMaker.isJavaScriptCompatible",
	"Comment": "returns whether features for a specific js version should be honored\twhile highlighting.",
	"Method": "boolean isJavaScriptCompatible(String version){\r\n    return jsVersion.compareTo(version) >= 0;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.build_instructor_view_students_assignment_context",
	"Comment": "build the instructor view to view the list of students for an assignment",
	"Method": "String build_instructor_view_students_assignment_context(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    state.removeAttribute(FROM_VIEW);\r\n    String contextString = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    initViewSubmissionListOption(state);\r\n    String allOrOneGroup = (String) state.getAttribute(VIEW_SUBMISSION_LIST_OPTION);\r\n    String search = (String) state.getAttribute(VIEW_SUBMISSION_SEARCH);\r\n    Boolean searchFilterOnly = (state.getAttribute(SUBMISSIONS_SEARCH_ONLY) != null && ((Boolean) state.getAttribute(SUBMISSIONS_SEARCH_ONLY)) ? Boolean.TRUE : Boolean.FALSE);\r\n    Collection<Assignment> assignments = assignmentService.getAssignmentsForContext(contextString);\r\n    boolean hasAtLeastOneAnonAssigment = false;\r\n    for (Assignment assignment : assignments) {\r\n        if (assignmentService.assignmentUsesAnonymousGrading(assignment)) {\r\n            hasAtLeastOneAnonAssigment = true;\r\n            break;\r\n        }\r\n    }\r\n    context.put(\"hasAtLeastOneAnonAssignment\", hasAtLeastOneAnonAssigment);\r\n    Map<String, User> studentMembers = // flatten to a single List<String>\r\n    assignments.stream().flatMap(// collect into set for uniqueness\r\n    a -> assignmentService.getSubmitterIdList(searchFilterOnly.toString(), allOrOneGroup, search, AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference(), contextString).stream()).collect(Collectors.toSet()).stream().map(s -> {\r\n        try {\r\n            return userDirectoryService.getUser(s);\r\n        } catch (UserNotDefinedException e) {\r\n            log.warn(\"User is not defined {}, {}\", s, e.getMessage());\r\n            return null;\r\n        }\r\n    }).filter(// collect to Map<String, User>\r\n    Objects::nonNull).collect(Collectors.toMap(User::getId, Function.identity()));\r\n    context.put(\"studentMembersMap\", studentMembers);\r\n    context.put(\"studentMembers\", new SortedIterator(studentMembers.values().iterator(), new AssignmentComparator(state, SORTED_USER_BY_SORTNAME, Boolean.TRUE.toString())));\r\n    context.put(\"viewGroup\", state.getAttribute(VIEW_SUBMISSION_LIST_OPTION));\r\n    context.put(\"searchString\", state.getAttribute(VIEW_SUBMISSION_SEARCH) != null ? state.getAttribute(VIEW_SUBMISSION_SEARCH) : \"\");\r\n    context.put(\"showSubmissionByFilterSearchOnly\", state.getAttribute(SUBMISSIONS_SEARCH_ONLY) != null ? (Boolean) state.getAttribute(SUBMISSIONS_SEARCH_ONLY) : Boolean.FALSE);\r\n    Collection groups = getAllGroupsInSite(contextString);\r\n    context.put(\"groups\", new SortedIterator(groups.iterator(), new AssignmentComparator(state, SORTED_BY_GROUP_TITLE, Boolean.TRUE.toString())));\r\n    Map<User, Iterator<Assignment>> showStudentAssignments = new HashMap();\r\n    Set<String> showStudentListSet = (Set<String>) state.getAttribute(STUDENT_LIST_SHOW_TABLE);\r\n    if (showStudentListSet != null) {\r\n        context.put(\"studentListShowSet\", showStudentListSet);\r\n        for (String userId : showStudentListSet) {\r\n            User user = studentMembers.get(userId);\r\n            List<Assignment> rv = assignments.stream().filter(a -> assignmentService.allowGradeSubmission(AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference())).collect(Collectors.toList());\r\n            Iterator assignmentSortFinal = new SortedIterator(rv.iterator(), new AssignmentComparator(state, SORTED_BY_DEFAULT, Boolean.TRUE.toString()));\r\n            showStudentAssignments.put(user, assignmentSortFinal);\r\n        }\r\n    }\r\n    context.put(\"studentAssignmentsTable\", showStudentAssignments);\r\n    context.put(\"currentTime\", Instant.now());\r\n    add2ndToolbarFields(data, context);\r\n    context.put(\"view\", MODE_INSTRUCTOR_VIEW_STUDENTS_ASSIGNMENT);\r\n    return getContext(data).get(\"template\") + TEMPLATE_INSTRUCTOR_VIEW_STUDENTS_ASSIGNMENT;\r\n}"
}, {
	"Path": "org.sakaiproject.citation.tool.CitationHelperAction.initHelper",
	"Comment": "this method is called upon each citations helper request to properly\tinitialize the citations helper in case of a null mode.returns true if\tsucceeded, false otherwise",
	"Method": "boolean initHelper(SessionState state){\r\n    log.debug(\"initHelper()\");\r\n    Mode mode;\r\n    if (getCaller(state) == Caller.EDITOR_INTEGRATION) {\r\n        mode = (Mode) state.getAttribute(CitationHelper.STATE_HELPER_MODE);\r\n        if (mode == null) {\r\n            if (log.isDebugEnabled()) {\r\n                log.debug(\"initHelper(): mode is undefined, using {}\", Mode.NEW_RESOURCE);\r\n            }\r\n            setMode(state, Mode.NEW_RESOURCE);\r\n        }\r\n        if (state.getAttribute(STATE_RESULTS_PAGE_SIZE) == null) {\r\n            if (log.isDebugEnabled()) {\r\n                log.debug(\"initHelper(): result page size is undefined, using {}\", DEFAULT_RESULTS_PAGE_SIZE);\r\n            }\r\n            state.setAttribute(STATE_RESULTS_PAGE_SIZE, DEFAULT_RESULTS_PAGE_SIZE);\r\n        }\r\n        return true;\r\n    }\r\n    ToolSession toolSession = getSessionManager().getCurrentToolSession();\r\n    ResourceToolActionPipe pipe = (ResourceToolActionPipe) toolSession.getAttribute(ResourceToolAction.ACTION_PIPE);\r\n    if (pipe == null) {\r\n        log.warn(\"initHelper() pipe = null\");\r\n        setMode(state, Mode.ERROR_FATAL);\r\n        return true;\r\n    }\r\n    if (pipe.isActionCompleted()) {\r\n        return true;\r\n    }\r\n    if (toolSession.getAttribute(CitationHelper.CITATION_HELPER_INITIALIZED) == null) {\r\n        switch(pipe.getAction().getActionType()) {\r\n            case CREATE_BY_HELPER:\r\n                state.setAttribute(STATE_RESOURCES_ADD, Boolean.TRUE);\r\n                setMode(state, Mode.NEW_RESOURCE);\r\n                break;\r\n            case REVISE_CONTENT:\r\n                state.setAttribute(CitationHelper.RESOURCE_ID, pipe.getContentEntity().getId());\r\n                try {\r\n                    state.setAttribute(STATE_CITATION_COLLECTION_ID, new String(((ContentResource) pipe.getContentEntity()).getContent()));\r\n                } catch (ServerOverloadException e) {\r\n                    log.warn(\"ServerOverloadException \", e);\r\n                }\r\n                state.removeAttribute(STATE_RESOURCES_ADD);\r\n                setMode(state, Mode.NEW_RESOURCE);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        toolSession.setAttribute(CitationHelper.CITATION_HELPER_INITIALIZED, Boolean.toString(true));\r\n    } else {\r\n        mode = (Mode) state.getAttribute(CitationHelper.STATE_HELPER_MODE);\r\n        if (mode == null) {\r\n            setMode(state, Mode.NEW_RESOURCE);\r\n        }\r\n    }\r\n    if (state.getAttribute(STATE_RESULTS_PAGE_SIZE) == null) {\r\n        state.setAttribute(STATE_RESULTS_PAGE_SIZE, DEFAULT_RESULTS_PAGE_SIZE);\r\n    }\r\n    if (state.getAttribute(STATE_LIST_PAGE_SIZE) == null) {\r\n        state.setAttribute(STATE_LIST_PAGE_SIZE, defaultListPageSize);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.flatMapSync",
	"Comment": "maps the upstream values into publisher and merges at most maxconcurrency of them at once,optimized for mainly synchronous sources.",
	"Method": "FlowableTransformer<T, R> flatMapSync(Function<? super T, ? extends Publisher<? extends R>> mapper,FlowableTransformer<T, R> flatMapSync,Function<? super T, ? extends Publisher<? extends R>> mapper,boolean depthFirst,FlowableTransformer<T, R> flatMapSync,Function<? super T, ? extends Publisher<? extends R>> mapper,int maxConcurrency,int bufferSize,boolean depthFirst){\r\n    return new FlowableFlatMapSync<T, R>(null, mapper, maxConcurrency, bufferSize, depthFirst);\r\n}"
}, {
	"Path": "org.ethereum.net.p2p.EIP8P2pTest.test1",
	"Comment": "devp2p hello packet advertising version 55 and containing a few additional list elements",
	"Method": "void test1(){\r\n    HelloMessage msg = new HelloMessage(decode(\"f87137916b6e6574682f76302e39312f706c616e39cdc5836574683dc6846d6f726b1682270fb840\" + \"fda1cff674c90c9a197539fe3dfb53086ace64f83ed7c6eabec741f7f381cc803e52ab2cd55d5569\" + \"bce4347107a310dfd5f88a010cd2ffd1005ca406f1842877c883666f6f836261720304\"));\r\n    assertEquals(55, msg.getP2PVersion());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.fireMarkedOccurrencesChanged",
	"Comment": "notifies listeners that the marked occurrences for this text area\thave changed.",
	"Method": "void fireMarkedOccurrencesChanged(){\r\n    firePropertyChange(RSyntaxTextArea.MARKED_OCCURRENCES_CHANGED_PROPERTY, null, null);\r\n}"
}, {
	"Path": "co.rsk.net.TransactionNodeInformation.getNodesByTransaction",
	"Comment": "getnodesbytransaction retrieves all the nodes that contain a given block.",
	"Method": "Set<NodeID> getNodesByTransaction(Keccak256 transactionHash){\r\n    Set<NodeID> result = nodesByTransaction.get(transactionHash);\r\n    if (result == null) {\r\n        result = new HashSet();\r\n    }\r\n    return Collections.unmodifiableSet(result);\r\n}"
}, {
	"Path": "com.rometools.modules.sle.SimpleListExtensionImpl.getInterface",
	"Comment": "returns the interface the copyfrom works on.this is useful when dealing with properties that may have multiple implementations. forexample, module.",
	"Method": "Class<SimpleListExtension> getInterface(){\r\n    return SimpleListExtension.class;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.observeOn",
	"Comment": "observe the events of this perhaps on the specified scheduler.",
	"Method": "Perhaps<T> observeOn(Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new PerhapsObserveOn<T>(this, scheduler));\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.convertToTreeModel",
	"Comment": "takes a list representation of a tree and creates the treemodel",
	"Method": "TreeModel convertToTreeModel(List<List> map,String userId,List<ListOptionSerialized> blankRestrictedTools,boolean addDirectChildren,List<String> accessAdminNodeIds,List<String> subAdminsSiteAccessNodes,boolean shoppingPeriodTool){\r\n    TreeModel model = null;\r\n    if (!map.isEmpty() && map.size() == 1) {\r\n        DefaultMutableTreeNode rootNode = add(null, map, userId, blankRestrictedTools, addDirectChildren, accessAdminNodeIds, subAdminsSiteAccessNodes, shoppingPeriodTool);\r\n        model = new DefaultTreeModel(rootNode);\r\n    }\r\n    return model;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.readResourcesPage",
	"Comment": "implement this to return alist of all the resources that there are to page. sort them as appropriate.",
	"Method": "List readResourcesPage(SessionState state,int first,int last){\r\n    List returnResources = (List) state.getAttribute(STATE_PAGEING_TOTAL_ITEMS);\r\n    PagingPosition page = new PagingPosition(first, last);\r\n    page.validate(returnResources.size());\r\n    returnResources = returnResources.subList(page.getFirst() - 1, page.getLast());\r\n    return returnResources;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.Gradebook.isCoursePointsDisplayed",
	"Comment": "if the course grade is displayed, should the total points be displayed?",
	"Method": "boolean isCoursePointsDisplayed(){\r\n    return coursePointsDisplayed;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.fromAction",
	"Comment": "executes an action when a subscriber subscribes to the returnednono.",
	"Method": "Nono fromAction(Action action){\r\n    ObjectHelper.requireNonNull(action, \"action is null\");\r\n    return onAssembly(new NonoFromAction(action));\r\n}"
}, {
	"Path": "org.sakaiproject.basiclti.util.SakaiBLTIUtil.checkStrictVersion",
	"Comment": "check the strict version we are complying with because of strange\tanomalies of the certification tests as they evolve over time. the\tbiggest problem is that as the lti 2.1 certification tests are developed,\tsome 2.1 features sneak back into later versions of the lti 2.0\tcertification tests making it impossible. to comply with multiple\tversions at the same time. it is 100% sad that this is necessary.",
	"Method": "boolean checkStrictVersion(String low,String high){\r\n    String sver = ServerConfigurationService.getString(LTI_STRICT_VERSION, LTI_STRICT_VERSION_DEFAULT);\r\n    if (sver == null) {\r\n        return false;\r\n    }\r\n    return (sver.compareTo(low) >= 0 && sver.compareTo(high) <= 0);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.getSupportedFeedTypes",
	"Comment": "returns the real feed types the syndfeedimpl supports when converting from and to.",
	"Method": "List<String> getSupportedFeedTypes(){\r\n    return CONVERTERS.getSupportedFeedTypes();\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.getRubricConfigurationParameters",
	"Comment": "get the rubrics params and includes all them in a hashmap to pass them to the rubrics service.",
	"Method": "HashMap<String, String> getRubricConfigurationParameters(ParameterParser params){\r\n    HashMap<String, String> parametersHash = new HashMap();\r\n    Iterator it2 = params.getNames();\r\n    while (it2.hasNext()) {\r\n        String name = it2.next().toString();\r\n        if (name.startsWith(\"rbcs\")) {\r\n            parametersHash.put(name, params.getString(name));\r\n        }\r\n    }\r\n    return parametersHash;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setType",
	"Comment": "sets the dublincore module type. convenience method that can be used when there is only onetype to set.",
	"Method": "void setType(String type){\r\n    this.type = Lists.create(type);\r\n}"
}, {
	"Path": "restx.security.SecurityModule.startSessions",
	"Comment": "this makes sessions part of the auto started components, thus making it server wide.",
	"Method": "AutoStartable startSessions(Sessions sessions){\r\n    return new AutoStartable() {\r\n        @Override\r\n        public void start() {\r\n            logger.debug(\"starting sessions statistics\");\r\n        }\r\n    };\r\n}"
}, {
	"Path": "restx.security.SecurityModule.startSessions",
	"Comment": "this makes sessions part of the auto started components, thus making it server wide.",
	"Method": "AutoStartable startSessions(Sessions sessions){\r\n    logger.debug(\"starting sessions statistics\");\r\n}"
}, {
	"Path": "com.rometools.modules.sle.GroupAndSortTest.testSort2",
	"Comment": "test of sort method, of class com.rometools.rome.feed.module.sle.groupandsort.",
	"Method": "void testSort2(){\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"data/YahooTopSongs.xml\")));\r\n    final SimpleListExtension sle = (SimpleListExtension) feed.getModule(SimpleListExtension.URI);\r\n    final List<Extendable> entries = new ArrayList<Extendable>(feed.getEntries());\r\n    final List<Extendable> sortedEntries = SleUtility.sort(entries, sle.getSortFields()[0], true);\r\n    for (int i = 0; i < sortedEntries.size(); i++) {\r\n        final SyndEntry entry = (SyndEntry) sortedEntries.get(i);\r\n        LOG.debug(entry.getTitle());\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.to",
	"Comment": "fluently convert this nono via a function callback into some type.",
	"Method": "R to(Function<? super Nono, R> converter){\r\n    try {\r\n        return converter.apply(this);\r\n    } catch (Throwable ex) {\r\n        throw ExceptionHelper.wrapOrThrow(ex);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern5.and",
	"Comment": "creates a pattern that matches when all five observable sequences have an available element.",
	"Method": "Pattern6<T1, T2, T3, T4, T5, T6> and(Observable<T6> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Pattern6<T1, T2, T3, T4, T5, T6>(o1, o2, o3, o4, o5, other);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MxmlTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.fife.util.DynamicIntArray.fill",
	"Comment": "sets the value of all entries in this array to the specified value.",
	"Method": "void fill(int value){\r\n    Arrays.fill(data, value);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.removeCalendarEventFromCalendar",
	"Comment": "retrieves the calendar event associated with the due date and removes it from the calendar.",
	"Method": "void removeCalendarEventFromCalendar(SessionState state,Assignment assignment,Map<String, String> properties,String title,Calendar c,String dueDateProperty){\r\n    if (c != null) {\r\n        CalendarEvent e = null;\r\n        boolean found = false;\r\n        String oldEventId = properties.get(dueDateProperty);\r\n        if (oldEventId != null) {\r\n            try {\r\n                e = c.getEvent(oldEventId);\r\n                found = true;\r\n            } catch (IdUnusedException | PermissionException ee) {\r\n                log.warn(\"Calendar even not found, {}\", ee.getMessage());\r\n            }\r\n        } else {\r\n            Instant b = assignment.getDueDate();\r\n            LocalDateTime startTime = LocalDateTime.of(b.get(ChronoField.YEAR), b.get(ChronoField.MONTH_OF_YEAR), b.get(ChronoField.DAY_OF_MONTH), 0, 0, 0, 0);\r\n            LocalDateTime endTime = LocalDateTime.of(b.get(ChronoField.YEAR), b.get(ChronoField.MONTH_OF_YEAR), b.get(ChronoField.DAY_OF_MONTH), 23, 59, 59, 999);\r\n            try {\r\n                Iterator events = c.getEvents(timeService.newTimeRange(timeService.newTime(startTime.atZone(timeService.getLocalTimeZone().toZoneId()).toInstant().toEpochMilli()), timeService.newTime(endTime.atZone(timeService.getLocalTimeZone().toZoneId()).toInstant().toEpochMilli())), null).iterator();\r\n                while ((!found) && (events.hasNext())) {\r\n                    e = (CalendarEvent) events.next();\r\n                    if ((e.getDisplayName()).contains(rb.getString(\"gen.assig\") + \" \" + title)) {\r\n                        found = true;\r\n                    }\r\n                }\r\n            } catch (PermissionException pException) {\r\n                addAlert(state, rb.getFormattedMessage(\"cannot_getEvents\", c.getReference()));\r\n            }\r\n        }\r\n        if (found) {\r\n            removeOldEvent(title, c, e);\r\n            properties.remove(NEW_ASSIGNMENT_DUE_DATE_SCHEDULED);\r\n            properties.remove(dueDateProperty);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.sru.CqlParser.translateIndex",
	"Comment": "translate a cql index to the appropriate 360 search field name",
	"Method": "String translateIndex(String cqlIndex){\r\n    String s360Index = (String) INDEX_MAP.get(cqlIndex);\r\n    if (s360Index == null || s360Index.equals(\"\")) {\r\n        log.error(\"translateIndex(): bad index, using KEYWORD\");\r\n        s360Index = (String) INDEX_MAP.get(\"keyword\");\r\n    }\r\n    return s360Index;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaUI.create",
	"Comment": "creates the view for an element.returns a wrappedplainview or\tplainview.",
	"Method": "View create(Element elem){\r\n    if (textArea.getLineWrap()) {\r\n        return new WrappedPlainView(elem, textArea.getWrapStyleWord());\r\n    } else {\r\n        return new PlainView(elem);\r\n    }\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.BlobStoreFileSystemHandler.setDeleteEmptyContainers",
	"Comment": "whether to delete empty containers after a resource delete and there is no more resources in the container.the default is false.",
	"Method": "void setDeleteEmptyContainers(boolean deleteEmptyContainers){\r\n    this.deleteEmptyContainers = deleteEmptyContainers;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip.computeTipVisibleBounds",
	"Comment": "compute the bounds in which the user can move the mouse without the\ttip window disappearing.",
	"Method": "void computeTipVisibleBounds(){\r\n    Rectangle r = tipWindow.getBounds();\r\n    Point p = r.getLocation();\r\n    SwingUtilities.convertPointFromScreen(p, textArea);\r\n    r.setLocation(p);\r\n    tipVisibleBounds.setBounds(r.x, r.y - 15, r.width, r.height + 15 * 2);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.network.UploadBandwidthSampler.getInstance",
	"Comment": "retrieval method for the devicebandwidthsampler singleton.",
	"Method": "UploadBandwidthSampler getInstance(){\r\n    return UploadBandwidthSamplerHolder.instance;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.test",
	"Comment": "creates a testsubscriber with the given initial request,optionally cancels it, and subscribes it to this solo.",
	"Method": "TestSubscriber<T> test(TestSubscriber<T> test,boolean cancel,TestSubscriber<T> test,long initialRequest,TestSubscriber<T> test,long initialRequest,boolean cancel){\r\n    TestSubscriber<T> ts = new TestSubscriber<T>(initialRequest);\r\n    if (cancel) {\r\n        ts.cancel();\r\n    }\r\n    subscribe(ts);\r\n    return ts;\r\n}"
}, {
	"Path": "org.sakaiproject.basiclti.util.BlowFish.strengthenKey",
	"Comment": "strengthen a key which might be too short by extending with a salt text",
	"Method": "String strengthenKey(String secret,String salt){\r\n    if (secret.length() > BlowFish.MAX_KEY_LENGTH)\r\n        return secret;\r\n    secret = secret + salt;\r\n    return secret.substring(0, BlowFish.MAX_KEY_LENGTH);\r\n}"
}, {
	"Path": "com.rometools.modules.sle.SleEntryImpl.copyFrom",
	"Comment": "copies all the properties of the given bean into this one.any existing properties in this bean are lost.this method is useful for moving from one implementation of a bean interface to another. forexample from the default syndfeed bean implementation to a hibernate ready implementation.",
	"Method": "void copyFrom(CopyFrom obj){\r\n    final SleEntry entry = (SleEntry) obj;\r\n    setGroupValues(entry.getGroupValues().clone());\r\n    setSortValues(entry.getSortValues().clone());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementMaybe.switchCase",
	"Comment": "return a particular one of several possible maybes based on a caseselector, or a default maybe if the case selector does not map toa particular one.",
	"Method": "Maybe<R> switchCase(Callable<? extends K> caseSelector,Map<? super K, ? extends MaybeSource<? extends R>> mapOfCases,Maybe<R> switchCase,Callable<? extends K> caseSelector,Map<? super K, ? extends MaybeSource<? extends R>> mapOfCases,Scheduler scheduler,Maybe<R> switchCase,Callable<? extends K> caseSelector,Map<? super K, ? extends MaybeSource<? extends R>> mapOfCases,MaybeSource<? extends R> defaultCase){\r\n    ObjectHelper.requireNonNull(caseSelector, \"caseSelector is null\");\r\n    ObjectHelper.requireNonNull(mapOfCases, \"mapOfCases is null\");\r\n    ObjectHelper.requireNonNull(defaultCase, \"defaultCase is null\");\r\n    return RxJavaPlugins.onAssembly(new MaybeSwitchCase<R, K>(caseSelector, mapOfCases, defaultCase));\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.stripInvisibleAttachments",
	"Comment": "returns a clone of the passed in list of attachments minus any attachments that should not be displayed in the ui",
	"Method": "List stripInvisibleAttachments(Object attachments){\r\n    List stripped = new ArrayList();\r\n    if (attachments == null || !(attachments instanceof List)) {\r\n        return stripped;\r\n    }\r\n    Iterator itAttachments = ((List) attachments).iterator();\r\n    while (itAttachments.hasNext()) {\r\n        Object next = itAttachments.next();\r\n        if (next instanceof Reference) {\r\n            Reference attachment = (Reference) next;\r\n            if (!\"true\".equals(attachment.getProperties().getProperty(AssignmentConstants.PROP_INLINE_SUBMISSION))) {\r\n                stripped.add(attachment);\r\n            }\r\n        }\r\n    }\r\n    return stripped;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.compose",
	"Comment": "compose operators fluently via a function callback that returns a nono forthis nono.",
	"Method": "Nono compose(Function<? super Nono, ? extends Nono> composer){\r\n    return to(composer);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.captureAccessRoles",
	"Comment": "set up the access roles as defined by checkboxes in the form.\tshould only be called if it is compatible with the form submission\t e.g.when access mode is not set to groups.",
	"Method": "void captureAccessRoles(ParameterParser params,String index){\r\n    Set<String> formRoleIds = new LinkedHashSet<String>();\r\n    String[] rolesArray = params.getStrings(\"access_roles\" + index);\r\n    if (rolesArray != null) {\r\n        formRoleIds.addAll(Arrays.asList(rolesArray));\r\n        formRoleIds.retainAll(availableRoleIds());\r\n    }\r\n    this.roleIds = formRoleIds;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.tool.PermissionsHelperAction.doView_permission_option",
	"Comment": "to show different permission settings based on user selection of authz group",
	"Method": "void doView_permission_option(RunData data){\r\n    String viewAuthzId = data.getParameters().getString(\"authzGroupSelection\");\r\n    Collection<String> viewAuthzIds = Collections.singletonList(viewAuthzId);\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    state.setAttribute(STATE_REALM_ROLES_IDS, Collections.singletonList(viewAuthzId));\r\n    state.removeAttribute(STATE_VIEW_REALM_EDIT);\r\n    state.removeAttribute(STATE_ABILITIES);\r\n    state.removeAttribute(STATE_ROLES);\r\n    state.removeAttribute(STATE_ROLE_ABILITIES);\r\n}"
}, {
	"Path": "org.sakaiproject.component.section.sakai.SectionManagerImpl.destroy",
	"Comment": "cleans up any resources in use before destroying this service.",
	"Method": "void destroy(){\r\n    if (log.isInfoEnabled())\r\n        log.info(\"destroy()\");\r\n    siteService().removeSiteAdvisor(this);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.CodeTemplateManager.isValidChar",
	"Comment": "returns whether the specified character is a valid character for a\tcodetemplate id.",
	"Method": "boolean isValidChar(char ch){\r\n    return RSyntaxUtilities.isLetterOrDigit(ch) || ch == '_';\r\n}"
}, {
	"Path": "restx.servlet.RestxMainRouterServlet.guessServerType",
	"Comment": "tries to guess server type based on current callstack.it uses the set of registered server types to make the guess, so this can be contributed through plugins.",
	"Method": "String guessServerType(){\r\n    try {\r\n        Set<RegisteredServerType> serverTypes = Factory.getInstance().getComponents(RegisteredServerType.class);\r\n        for (StackTraceElement stackTraceElement : new Exception().fillInStackTrace().getStackTrace()) {\r\n            for (RegisteredServerType registeredServerType : serverTypes) {\r\n                if (stackTraceElement.getClassName().startsWith(registeredServerType.getPackageName())) {\r\n                    return registeredServerType.getServerType();\r\n                }\r\n            }\r\n        }\r\n        return \"unknown\";\r\n    } catch (Exception ex) {\r\n        return \"unknown\";\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sharing.setOrdered",
	"Comment": "set whether subscribers must tread the item list as an ordered set.",
	"Method": "void setOrdered(Boolean ordered){\r\n    this.ordered = ordered;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.STTRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    TimeBreakdown startBreakdown = prototype.firstTime().breakdownLocal();\r\n    List rv = new Vector();\r\n    GregorianCalendar startCalendarDate = TimeService.getCalendar(TimeService.getLocalTimeZone(), 0, 0, 0, 0, 0, 0, 0);\r\n    // may have to move this line ahead\r\n    startCalendarDate.set(// may have to move this line ahead\r\n    startBreakdown.getYear(), // may have to move this line ahead\r\n    startBreakdown.getMonth() - 1, // may have to move this line ahead\r\n    startBreakdown.getDay(), // may have to move this line ahead\r\n    startBreakdown.getHour(), startBreakdown.getMin(), startBreakdown.getSec());\r\n    GregorianCalendar nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    if (((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 1) && (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 3) && ((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 5))) {\r\n        if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 2) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        }\r\n        if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 4) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 6) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 2);\r\n        } else {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        }\r\n    }\r\n    nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    int currentCount = 1;\r\n    int hitCount = 1;\r\n    do {\r\n        Time nextTime = TimeService.newTime(nextCalendarDate);\r\n        if ((getCount() > 0) && (hitCount > getCount()))\r\n            break;\r\n        if ((getUntil() != null) && isAfter(nextTime, getUntil()))\r\n            break;\r\n        TimeRange nextTimeRange = TimeService.newTimeRange(nextTime.getTime(), prototype.duration());\r\n        if (isOverlap(range, nextTimeRange)) {\r\n            TimeRange eventTimeRange = null;\r\n            if (prototype.isSingleTime()) {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime());\r\n            } else {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime(), nextTimeRange.lastTime(), true, false);\r\n            }\r\n            rv.add(new RecurrenceInstance(eventTimeRange, currentCount));\r\n        } else if (isAfter(nextTime, range.lastTime())) {\r\n            break;\r\n        }\r\n        do {\r\n            int weekDay = nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK);\r\n            if ((getInterval() > 1 && (weekDay == 6))) {\r\n                int increment = (((getInterval() - 1) * 7) + 1);\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, increment);\r\n                currentCount += increment;\r\n            } else {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n                currentCount++;\r\n            }\r\n        } while ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 1) && (nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 3) && ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 5));\r\n        hitCount++;\r\n    } while (true);\r\n    return rv;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.FoldParserManager.getFoldParser",
	"Comment": "returns a fold parser to use for an editor highlighting code of a\tspecific language.",
	"Method": "FoldParser getFoldParser(String syntaxStyle){\r\n    return foldParserMap.get(syntaxStyle);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.demo.DemoRootPane.setText",
	"Comment": "sets the content in the text area to that in the specified resource.",
	"Method": "void setText(String resource){\r\n    BufferedReader r;\r\n    try {\r\n        r = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(resource), StandardCharsets.UTF_8));\r\n        textArea.read(r, null);\r\n        r.close();\r\n        textArea.setCaretPosition(0);\r\n        textArea.discardAllEdits();\r\n    } catch (RuntimeException re) {\r\n        throw re;\r\n    } catch (Exception e) {\r\n        textArea.setText(\"Type here to see syntax highlighting\");\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MxmlTokenMaker.getCompleteCloseTags",
	"Comment": "returns whether markup close tags should be completed.for xml, the\tdefault value is true.",
	"Method": "boolean getCompleteCloseTags(){\r\n    return completeCloseTags;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getCaretOffsetFromLineStart",
	"Comment": "gets the position from the beginning of the current line that the caret\tis on.",
	"Method": "int getCaretOffsetFromLineStart(){\r\n    try {\r\n        int pos = getCaretPosition();\r\n        return pos - getLineStartOffset(getLineOfOffset(pos));\r\n    } catch (BadLocationException ble) {\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "restx.entity.StdEntityRoute.getEntityResponseType",
	"Comment": "the java type of o, the entity from which response body will be marshalled.",
	"Method": "Type getEntityResponseType(){\r\n    return entityResponseWriter.getType();\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.DCModuleGenerator.generateSimpleElement",
	"Comment": "utility method to generate a single element containing a string.",
	"Method": "Element generateSimpleElement(String name,String value){\r\n    final Element element = new Element(name, getDCNamespace());\r\n    element.addContent(value);\r\n    return element;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.onErrorComplete",
	"Comment": "if this nono signals an error, signal an oncomplete instead.",
	"Method": "Nono onErrorComplete(){\r\n    return onAssembly(new NonoOnErrorComplete(this));\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testVehicle2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testVehicle2Parse(){\r\n    LOG.debug(\"testVehicle2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/vehicles2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Vehicle module = (Vehicle) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"car\", \"mini\" }, module.getLabels());\r\n    cal.set(2005, 2, 24);\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, module.getCurrency());\r\n    Assert.assertEquals(\"Price\", 24000, module.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, module.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.CHECK, PaymentTypeEnumeration.VISA, PaymentTypeEnumeration.MASTERCARD }, module.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment Notes\", \"financing available\", module.getPaymentNotes());\r\n    Assert.assertEquals(\"Vehicle Type\", \"car\", module.getVehicleType());\r\n    Assert.assertEquals(\"Make\", \"Mini\", module.getMake());\r\n    Assert.assertEquals(\"Model\", \"Cooper S\", module.getModel());\r\n    Assert.assertEquals(\"Year\", \"2006\", module.getYear().toString());\r\n    Assert.assertEquals(\"Mileage\", new Integer(0), module.getMileage());\r\n    this.assertEquals(\"Colors\", new String[] { \"red\" }, module.getColors());\r\n    Assert.assertEquals(\"Vin\", \"1M8GDM9AXKP042788\", module.getVin());\r\n    Assert.assertEquals(\"Location\", \"123 Main Street, Anytown, CA, 12345, USA\", module.getLocation());\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseGeneratorTest.testGenerate",
	"Comment": "test of generate method, of class com.totsp.xml.syndication.base.io.googlebasegenerator.",
	"Method": "void testGenerate(){\r\n    LOG.debug(\"testGenerate\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeedOutput output = new SyndFeedOutput();\r\n    final File testDir = new File(super.getTestFile(\"xml\"));\r\n    final File[] testFiles = testDir.listFiles();\r\n    for (int h = 0; h < testFiles.length; h++) {\r\n        if (!testFiles[h].getName().endsWith(\".xml\")) {\r\n            continue;\r\n        }\r\n        LOG.debug(testFiles[h].getName());\r\n        final SyndFeed feed = input.build(testFiles[h]);\r\n        try {\r\n            output.output(feed, new File(\"target/\" + testFiles[h].getName()));\r\n        } catch (final Exception e) {\r\n            throw new RuntimeException(testFiles[h].getAbsolutePath(), e);\r\n        }\r\n        final SyndFeed feed2 = input.build(new File(\"target/\" + testFiles[h].getName()));\r\n        for (int i = 0; i < feed.getEntries().size(); i++) {\r\n            final SyndEntry entry = feed.getEntries().get(i);\r\n            final SyndEntry entry2 = feed2.getEntries().get(i);\r\n            final GoogleBase base = (GoogleBase) entry.getModule(GoogleBase.URI);\r\n            final GoogleBase base2 = (GoogleBase) entry2.getModule(GoogleBase.URI);\r\n            Assert.assertEquals(testFiles[h].getName(), base, base2);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DtdTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.doOnRequest",
	"Comment": "executes the callback when the downstream requests from this perhaps.",
	"Method": "Perhaps<T> doOnRequest(LongConsumer onRequest){\r\n    ObjectHelper.requireNonNull(onRequest, \"onRequest is null\");\r\n    return onAssembly(new PerhapsDoOnLifecycle<T>(this, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), onRequest, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.WeeklyRecurrenceRule.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element rule = doc.createElement(\"rule\");\r\n    ((Element) stack.peek()).appendChild(rule);\r\n    rule.setAttribute(\"class\", \"org.chefproject.osid.calendar.WeeklyRecurrenceRule\");\r\n    rule.setAttribute(\"name\", \"WeeklyRecurrenceRule\");\r\n    setBaseClassXML(rule);\r\n    return rule;\r\n}"
}, {
	"Path": "com.barbarysoftware.watchservice.AbstractWatchService.checkOpen",
	"Comment": "throws closedwatchserviceexception if watch service is closed",
	"Method": "void checkOpen(){\r\n    if (closed)\r\n        throw new ClosedWatchServiceException();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.TclTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.endorsed.i18n.spi.SakaiLocaleServiceProviderUtil.containsKey",
	"Comment": "determines whether the given key is contained in the resource\tbundle.",
	"Method": "boolean containsKey(String key,Locale locale){\r\n    boolean contain = false;\r\n    if (key != null) {\r\n        ResourceBundle rb = getBundle(locale);\r\n        if (rb != null) {\r\n            contain = rb.containsKey(key);\r\n        }\r\n    }\r\n    return contain;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.LineHighlightManager.getLineHighlightCount",
	"Comment": "returns the current number of line highlights.useful for testing.",
	"Method": "int getLineHighlightCount(){\r\n    return lineHighlights == null ? 0 : lineHighlights.size();\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.AbstractGutterComponent.getChildViewBounds",
	"Comment": "returns the bounds of a child view as a rectangle, since\tviews tend to use shape.",
	"Method": "Rectangle getChildViewBounds(View parent,int line,Rectangle editorRect){\r\n    Shape alloc = parent.getChildAllocation(line, editorRect);\r\n    if (alloc == null) {\r\n        return new Rectangle();\r\n    }\r\n    return alloc instanceof Rectangle ? (Rectangle) alloc : alloc.getBounds();\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.recoverFromSignature",
	"Comment": "given the components of a signature and a selector value, recover and return the public keythat generated the signature according to the algorithm in sec1v2 section 4.1.6.the recid is an index from 0 to 3 which indicates which of the 4 possible keys is the correct one. becausethe key recovery operation yields multiple potential keys, the correct key must either be stored alongside thesignature, or you must be willing to try each recid in turn until you find one that outputs the key you areexpecting.if this method returns null it means recovery was not possible and recid should be iterated.given the above two points, a correct usage of this method is inside a for loop from 0 to 3, and if theoutput is null or a key that is not the one you expect, you try again with the next recid.",
	"Method": "ECKey recoverFromSignature(int recId,ECDSASignature sig,byte[] messageHash,boolean compressed){\r\n    check(recId >= 0, \"recId must be positive\");\r\n    check(sig.r.signum() >= 0, \"r must be positive\");\r\n    check(sig.s.signum() >= 0, \"s must be positive\");\r\n    check(messageHash != null, \"messageHash must not be null\");\r\n    BigInteger n = CURVE.getN();\r\n    BigInteger i = BigInteger.valueOf((long) recId / 2);\r\n    BigInteger x = sig.r.add(i.multiply(n));\r\n    ECCurve.Fp curve = (ECCurve.Fp) CURVE.getCurve();\r\n    BigInteger prime = curve.getQ();\r\n    if (x.compareTo(prime) >= 0) {\r\n        return null;\r\n    }\r\n    ECPoint r = decompressKey(x, (recId & 1) == 1);\r\n    if (!r.multiply(n).isInfinity()) {\r\n        return null;\r\n    }\r\n    BigInteger e = new BigInteger(1, messageHash);\r\n    BigInteger eInv = BigInteger.ZERO.subtract(e).mod(n);\r\n    BigInteger rInv = sig.r.modInverse(n);\r\n    BigInteger srInv = rInv.multiply(sig.s).mod(n);\r\n    BigInteger eInvrInv = rInv.multiply(eInv).mod(n);\r\n    ECPoint.Fp q = (ECPoint.Fp) ECAlgorithms.sumOfTwoMultiplies(CURVE.getG(), eInvrInv, r, srInv);\r\n    return ECKey.fromPublicOnly(q.getEncoded(compressed));\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.net.HttpTransaction.getParameterName",
	"Comment": "get parameter the name of first occurance of the supplied value",
	"Method": "String getParameterName(String value){\r\n    return parameters.getParameterMapName(value);\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.tool.DecoratedChatChannel.processActionEditRoom",
	"Comment": "this method will edit the room from the page listing all the rooms",
	"Method": "String processActionEditRoom(){\r\n    directEdit = false;\r\n    return chatTool.processActionEditRoom(this);\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.releaseBtc",
	"Comment": "initiates the process of sending coins back to btc.this is the default contract method.the funds will be sent to the bitcoin address controlled by the private key that signed the rsk tx.the amount sent to the bridge in this tx will be the amount sent in the btc network minus fees.",
	"Method": "void releaseBtc(Transaction rskTx){\r\n    if (BridgeUtils.isContractTx(rskTx)) {\r\n        logger.trace(\"Contract {} tried to release funds. Release is just allowed from standard accounts.\", rskTx);\r\n        throw new Program.OutOfGasException(\"Contract calling releaseBTC\");\r\n    }\r\n    Context.propagate(btcContext);\r\n    NetworkParameters btcParams = bridgeConstants.getBtcParams();\r\n    Address btcDestinationAddress = BridgeUtils.recoverBtcAddressFromEthTransaction(rskTx, btcParams);\r\n    Coin value = rskTx.getValue().toBitcoin();\r\n    boolean addResult = requestRelease(btcDestinationAddress, value);\r\n    if (addResult) {\r\n        logger.info(\"releaseBtc succesful to {}. Tx {}. Value {}.\", btcDestinationAddress, rskTx, value);\r\n    } else {\r\n        logger.warn(\"releaseBtc ignored because value is considered dust. To {}. Tx {}. Value {}.\", btcDestinationAddress, rskTx, value);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getBackground",
	"Comment": "returns the java.awt.color used as the background color for\tthis text area.if a java.awt.image image is currently\tbeing used instead, null is returned.",
	"Method": "Color getBackground(){\r\n    Object bg = getBackgroundObject();\r\n    return (bg instanceof Color) ? (Color) bg : null;\r\n}"
}, {
	"Path": "co.rsk.remasc.Remasc.addNewSiblings",
	"Comment": "saves uncles of the current block into the siblings map to use in the future for fee distribution",
	"Method": "void addNewSiblings(){\r\n    List<BlockHeader> uncles = executionBlock.getUncleList();\r\n    if (uncles == null) {\r\n        return;\r\n    }\r\n    for (BlockHeader uncleHeader : uncles) {\r\n        List<Sibling> siblings = provider.getSiblings().get(uncleHeader.getNumber());\r\n        if (siblings == null) {\r\n            siblings = new ArrayList();\r\n        }\r\n        siblings.add(new Sibling(uncleHeader, executionBlock.getHeader().getCoinbase(), executionBlock.getNumber()));\r\n        provider.getSiblings().put(uncleHeader.getNumber(), siblings);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.sakaiproject.basiclti.util.SakaiBLTIUtil.setProperty",
	"Comment": "to make absolutely sure we never send an xss, we clean these values",
	"Method": "void setProperty(Properties props,String key,String value){\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    if (props == null) {\r\n        return;\r\n    }\r\n    value = Web.cleanHtml(value);\r\n    if (value.trim().length() < 1) {\r\n        return;\r\n    }\r\n    props.setProperty(key, value);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.FileFileLocation.isLocalAndExists",
	"Comment": "since file locations of this type are guaranteed to be local, this\tmethod returns whether the file exists.",
	"Method": "boolean isLocalAndExists(){\r\n    return file.exists();\r\n}"
}, {
	"Path": "org.sakaiproject.util.foorm.FoormUtil.getLongNull",
	"Comment": "getlong convert various types to a long, returning null on error",
	"Method": "Long getLongNull(Object o){\r\n    if (o == null)\r\n        return null;\r\n    if (o instanceof Number)\r\n        return new Long(((Number) o).longValue());\r\n    if (o instanceof String) {\r\n        try {\r\n            return new Long((String) o);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.debug.validator.RxJavaProtocolValidator.disable",
	"Comment": "disables the validation hooks be resetting the assembly hooksto none.",
	"Method": "void disable(){\r\n    RxJavaPlugins.setOnCompletableAssembly(null);\r\n    RxJavaPlugins.setOnSingleAssembly(null);\r\n    RxJavaPlugins.setOnMaybeAssembly(null);\r\n    RxJavaPlugins.setOnObservableAssembly(null);\r\n    RxJavaPlugins.setOnFlowableAssembly(null);\r\n    RxJavaPlugins.setOnConnectableObservableAssembly(null);\r\n    RxJavaPlugins.setOnConnectableFlowableAssembly(null);\r\n    RxJavaPlugins.setOnParallelAssembly(null);\r\n    enabled = false;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getAccessPoint",
	"Comment": "access the partial url that forms the root of calendar urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : m_serverConfigurationService.getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.impl.FileBasedAtomHandler.validateUser",
	"Comment": "method used for validating user. developers can overwrite this method and use credentialsstored in database or ldap to confirm if the user is allowed to access this service.",
	"Method": "boolean validateUser(String login,String password){\r\n    return true;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementMaybe.ifThen",
	"Comment": "return a maybe that emits the emissions from one specifiedmaybe if a condition evaluates to true, or from another specifiedmaybe otherwise.",
	"Method": "Maybe<R> ifThen(BooleanSupplier condition,MaybeSource<? extends R> then,Maybe<R> ifThen,BooleanSupplier condition,MaybeSource<? extends R> then,Scheduler scheduler,Maybe<R> ifThen,BooleanSupplier condition,MaybeSource<? extends R> then,Maybe<? extends R> orElse){\r\n    ObjectHelper.requireNonNull(condition, \"condition is null\");\r\n    ObjectHelper.requireNonNull(then, \"then is null\");\r\n    ObjectHelper.requireNonNull(orElse, \"orElse is null\");\r\n    return RxJavaPlugins.onAssembly(new MaybeIfThen<R>(condition, then, orElse));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.mergeArrayDelayError",
	"Comment": "merge the values in arbitrary order from a sequence of solo sources,delaying errors till all sources terminate.",
	"Method": "Flowable<T> mergeArrayDelayError(Solo<? extends T> sources,Flowable<T> mergeArrayDelayError,int maxConcurrency,Solo<? extends T> sources){\r\n    return Flowable.mergeArrayDelayError(maxConcurrency, 1, sources);\r\n}"
}, {
	"Path": "org.sakaiproject.component.gradebook.GradebookServiceHibernateImpl.convertGradeRecordToGradeDefinition",
	"Comment": "converts an assignmentgraderecord into a gradedefinition object.",
	"Method": "GradeDefinition convertGradeRecordToGradeDefinition(AssignmentGradeRecord gradeRecord,GradebookAssignment gbo,Gradebook gradebook,String commentText){\r\n    final GradeDefinition gradeDef = new GradeDefinition();\r\n    gradeDef.setStudentUid(gradeRecord.getStudentId());\r\n    gradeDef.setGraderUid(gradeRecord.getGraderId());\r\n    gradeDef.setDateRecorded(gradeRecord.getDateRecorded());\r\n    final int gradeEntryType = gradebook.getGrade_type();\r\n    gradeDef.setGradeEntryType(gradeEntryType);\r\n    String grade = null;\r\n    if (gradeEntryType == GradebookService.GRADE_TYPE_LETTER) {\r\n        grade = gradeRecord.getLetterEarned();\r\n    } else if (gradeEntryType == GradebookService.GRADE_TYPE_PERCENTAGE) {\r\n        final Double percentEarned = gradeRecord.getPercentEarned();\r\n        grade = percentEarned != null ? percentEarned.toString() : null;\r\n    } else {\r\n        final Double pointsEarned = gradeRecord.getPointsEarned();\r\n        grade = pointsEarned != null ? pointsEarned.toString() : null;\r\n    }\r\n    gradeDef.setGrade(grade);\r\n    gradeDef.setGradeReleased(gradebook.isAssignmentsDisplayed() && gbo.isReleased());\r\n    if (commentText != null) {\r\n        gradeDef.setGradeComment(commentText);\r\n    }\r\n    gradeDef.setExcused(gradeRecord.isExcludedFromGrade());\r\n    return gradeDef;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.PerhapsProcessor.hasValue",
	"Comment": "returns true if this perhapsprocessor received an onnext value.",
	"Method": "boolean hasValue(){\r\n    return subscribers.get() == TERMINATED && value != null;\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.openurl.Utils.lookForAuthor",
	"Comment": "attempts to extract the author from the multiple fields in an openurl and return an author string.",
	"Method": "String lookForAuthor(Map<String, List<String>> values){\r\n    StringBuilder author = new StringBuilder();\r\n    if (appendFirst(author, values.get(\"aulast\"), null)) {\r\n        if (values.containsKey(\"au\")) {\r\n            for (String otherAuthor : values.get(\"au\")) {\r\n                if (otherAuthor != null && otherAuthor.toLowerCase().contains(author.toString().toLowerCase())) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        if (!appendFirst(author, values.get(\"aufirst\"), \", \")) {\r\n            if (!appendFirst(author, values.get(\"auinit\"), \", \")) {\r\n                if (appendFirst(author, values.get(\"auinit1\"), \", \")) {\r\n                    appendFirst(author, values.get(\"auinitm\"), \" \");\r\n                }\r\n            }\r\n        }\r\n        return author.toString();\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.toggleBookmark",
	"Comment": "programatically toggles whether there is a bookmark for the specified\tline.if bookmarking is not enabled, this method does nothing.",
	"Method": "boolean toggleBookmark(int line){\r\n    return iconArea.toggleBookmark(line);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ErrorStrip.getLevelThreshold",
	"Comment": "returns the minimum severity a parser notice must be for it to be\tdisplayed in this error strip.this will be one of the constants\tdefined in the parsernotice class.",
	"Method": "ParserNotice.Level getLevelThreshold(){\r\n    return levelThreshold;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CSharpTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.MWRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    TimeBreakdown startBreakdown = prototype.firstTime().breakdownLocal();\r\n    List rv = new Vector();\r\n    GregorianCalendar startCalendarDate = TimeService.getCalendar(TimeService.getLocalTimeZone(), 0, 0, 0, 0, 0, 0, 0);\r\n    // may have to move this line ahead\r\n    startCalendarDate.set(// may have to move this line ahead\r\n    startBreakdown.getYear(), // may have to move this line ahead\r\n    startBreakdown.getMonth() - 1, // may have to move this line ahead\r\n    startBreakdown.getDay(), // may have to move this line ahead\r\n    startBreakdown.getHour(), startBreakdown.getMin(), startBreakdown.getSec());\r\n    GregorianCalendar nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    if (((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 2) && ((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 4))) {\r\n        if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 1) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 3) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 5) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 4);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 6) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 3);\r\n        } else {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 2);\r\n        }\r\n    }\r\n    nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    int currentCount = 1;\r\n    int hitCount = 1;\r\n    do {\r\n        Time nextTime = TimeService.newTime(nextCalendarDate);\r\n        if ((getCount() > 0) && (hitCount > getCount()))\r\n            break;\r\n        if ((getUntil() != null) && isAfter(nextTime, getUntil()))\r\n            break;\r\n        TimeRange nextTimeRange = TimeService.newTimeRange(nextTime.getTime(), prototype.duration());\r\n        if (isOverlap(range, nextTimeRange)) {\r\n            TimeRange eventTimeRange = null;\r\n            if (prototype.isSingleTime()) {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime());\r\n            } else {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime(), nextTimeRange.lastTime(), true, false);\r\n            }\r\n            rv.add(new RecurrenceInstance(eventTimeRange, currentCount));\r\n        } else if (isAfter(nextTime, range.lastTime())) {\r\n            break;\r\n        }\r\n        do {\r\n            int weekDay = nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK);\r\n            log.debug(\"Processing day of week: {}\", weekDay);\r\n            if ((getInterval() > 1 && (weekDay == 5))) {\r\n                int increment = (((getInterval() - 1) * 7) + 1);\r\n                log.debug(\"weekday is 5, adding: {}\", increment);\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, increment);\r\n                currentCount += increment;\r\n            } else {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n                currentCount++;\r\n            }\r\n        } while ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 2) && ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 4));\r\n        hitCount++;\r\n    } while (true);\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.addChildNodeToTree",
	"Comment": "this is a helper function for addchildrennodes.it will add the child nodes to the parent node and create the nodemodel.",
	"Method": "boolean addChildNodeToTree(HierarchyNodeSerialized childNode,DefaultMutableTreeNode parentNode,String userId,List<ListOptionSerialized> blankRestrictedTools,boolean onlyAccessNodes,boolean shoppingPeriodTool){\r\n    boolean added = false;\r\n    if (!doesChildExist(childNode.id, parentNode)) {\r\n        String realm = \"\";\r\n        String role = \"\";\r\n        boolean selected = false;\r\n        Date startDate = null;\r\n        Date endDate = null;\r\n        List<ListOptionSerialized> restrictedAuthTools = copyListOptions(blankRestrictedTools);\r\n        List<ListOptionSerialized> restrictedPublicTools = copyListOptions(blankRestrictedTools);\r\n        boolean shoppingPeriodAdmin = false;\r\n        boolean directAccess = false;\r\n        Date shoppingAdminModified = null;\r\n        String shoppingAdminModifiedBy = null;\r\n        Date modified = null;\r\n        String modifiedBy = null;\r\n        boolean accessAdmin = false;\r\n        boolean shoppingPeriodRevokeInstructorEditable = false;\r\n        boolean shoppingPeriodRevokeInstructorPublicOpt = false;\r\n        boolean allowBecomeUser = false;\r\n        boolean instructorEdited = false;\r\n        DefaultMutableTreeNode child = new DelegatedAccessMutableTreeNode();\r\n        if (!shoppingPeriodTool && DelegatedAccessConstants.SHOPPING_PERIOD_USER.equals(userId)) {\r\n            Set<String> perms = getPermsForUserNodes(userId, childNode.id);\r\n            String[] realmRole = getAccessRealmRole(perms);\r\n            realm = realmRole[0];\r\n            role = realmRole[1];\r\n            startDate = getShoppingStartDate(perms);\r\n            endDate = getShoppingEndDate(perms);\r\n            restrictedAuthTools = getRestrictedAuthToolSerializedList(perms, restrictedAuthTools);\r\n            restrictedPublicTools = getRestrictedPublicToolSerializedList(perms, restrictedPublicTools);\r\n            directAccess = getIsDirectAccess(perms);\r\n            shoppingAdminModified = getPermDate(perms, DelegatedAccessConstants.NODE_PERM_SHOPPING_ADMIN_MODIFIED);\r\n            shoppingAdminModifiedBy = getShoppingAdminModifiedBy(perms);\r\n            modified = getPermDate(perms, DelegatedAccessConstants.NODE_PERM_MODIFIED);\r\n            modifiedBy = getModifiedBy(perms);\r\n            accessAdmin = getIsAccessAdmin(perms);\r\n            shoppingPeriodRevokeInstructorEditable = isShoppingPeriodRevokeInstructorEditable(perms);\r\n            shoppingPeriodRevokeInstructorPublicOpt = isShoppingPeriodRevokeInstructorPublicOpt(perms);\r\n            allowBecomeUser = isAllowBecomeUser(perms);\r\n            instructorEdited = isInstructorEdited(perms);\r\n        }\r\n        NodeModel node = new NodeModel(childNode.id, childNode, directAccess, realm, role, ((NodeModel) parentNode.getUserObject()), restrictedAuthTools, restrictedPublicTools, startDate, endDate, false, shoppingPeriodAdmin, modifiedBy, modified, shoppingAdminModified, shoppingAdminModifiedBy, accessAdmin, shoppingPeriodRevokeInstructorEditable, shoppingPeriodRevokeInstructorPublicOpt, allowBecomeUser, instructorEdited);\r\n        child.setUserObject(node);\r\n        boolean shoppingAvailable = true;\r\n        if (shoppingPeriodTool && node.isSiteNode() && !isShoppingPeriodOpenForSite(node.getNodeShoppingPeriodStartDate(), node.getNodeShoppingPeriodEndDate(), node.getNodeAccessRealmRole(), node.getNodeRestrictedAuthTools(), node.getNodeRestrictedPublicTools())) {\r\n            shoppingAvailable = false;\r\n        }\r\n        if (shoppingAvailable && (!onlyAccessNodes || node.getNodeAccess())) {\r\n            parentNode.add(child);\r\n            added = true;\r\n        }\r\n    }\r\n    return added;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconGroup.getLargeIcon",
	"Comment": "returns the large icon from this icon group with the specified name.\tif this icon group does not have large icons, null is\treturned.",
	"Method": "Icon getLargeIcon(String name){\r\n    return getIconImpl(path + largeIconSubDir + \"/\" + name + \".\" + extension);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.WireFeed.getEncoding",
	"Comment": "returns the charset encoding of a the feed.this property is not set by feed parsers. but it is used by feed generators to set theencoding in the xml prolog.",
	"Method": "String getEncoding(){\r\n    return encoding;\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.fromMessage",
	"Comment": "pool method, to create a newtrie from a serialized messagethe store argument is used to retrieve any subnodeof the subnode",
	"Method": "TrieImpl fromMessage(byte[] message,TrieStore store,TrieImpl fromMessage,byte[] message,int position,int msglength,TrieStore store){\r\n    if (message == null) {\r\n        return null;\r\n    }\r\n    ByteArrayInputStream bstream = new ByteArrayInputStream(message, position, msglength);\r\n    DataInputStream istream = new DataInputStream(bstream);\r\n    try {\r\n        int arity = istream.readByte();\r\n        if (arity != ARITY) {\r\n            throw new IllegalArgumentException(INVALID_ARITY);\r\n        }\r\n        int flags = istream.readByte();\r\n        boolean isSecure = (flags & 0x01) == 1;\r\n        boolean hasLongVal = (flags & 0x02) == 2;\r\n        int bhashes = istream.readShort();\r\n        int lshared = istream.readShort();\r\n        int nhashes = 0;\r\n        int lencoded = TrieImpl.getEncodedPathLength(lshared);\r\n        byte[] encodedSharedPath = null;\r\n        if (lencoded > 0) {\r\n            encodedSharedPath = new byte[lencoded];\r\n            if (istream.read(encodedSharedPath) != lencoded) {\r\n                throw new EOFException();\r\n            }\r\n        }\r\n        Keccak256[] hashes = new Keccak256[arity];\r\n        for (int k = 0; k < arity; k++) {\r\n            if ((bhashes & (1 << k)) == 0) {\r\n                continue;\r\n            }\r\n            byte[] valueHash = new byte[Keccak256Helper.DEFAULT_SIZE_BYTES];\r\n            if (istream.read(valueHash) != Keccak256Helper.DEFAULT_SIZE_BYTES) {\r\n                throw new EOFException();\r\n            }\r\n            hashes[k] = new Keccak256(valueHash);\r\n            nhashes++;\r\n        }\r\n        int offset = MESSAGE_HEADER_LENGTH + lencoded + nhashes * Keccak256Helper.DEFAULT_SIZE_BYTES;\r\n        byte[] value = null;\r\n        if (hasLongVal) {\r\n            byte[] valueHash = new byte[Keccak256Helper.DEFAULT_SIZE_BYTES];\r\n            if (istream.read(valueHash) != Keccak256Helper.DEFAULT_SIZE_BYTES) {\r\n                throw new EOFException();\r\n            }\r\n            value = store.retrieveValue(valueHash);\r\n        } else {\r\n            int lvalue = msglength - offset;\r\n            if (lvalue > 0) {\r\n                value = new byte[lvalue];\r\n                if (istream.read(value) != lvalue) {\r\n                    throw new EOFException();\r\n                }\r\n            }\r\n        }\r\n        TrieImpl trie = new TrieImpl(encodedSharedPath, lshared, value, null, hashes, store).withSecure(isSecure);\r\n        if (store != null) {\r\n            trie.saved = true;\r\n        }\r\n        return trie;\r\n    } catch (IOException ex) {\r\n        logger.error(ERROR_CREATING_TRIE, ex);\r\n        panicProcessor.panic(PANIC_TOPIC, ERROR_CREATING_TRIE + \": \" + ex.getMessage());\r\n        throw new TrieSerializationException(ERROR_CREATING_TRIE, ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.rolesAreAvailable",
	"Comment": "uses availableroleids to determine whether roles are available to be used, includes roleids.",
	"Method": "boolean rolesAreAvailable(){\r\n    return !availableRoleIds().isEmpty();\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera1Base.setLimitFPSOnFly",
	"Comment": "set limit fps while stream. this will be override when you call to preparevideo method.this could produce a change in iframeinterval.",
	"Method": "void setLimitFPSOnFly(int fps){\r\n    videoEncoder.setFps(fps);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.sru.CqlParser.characters",
	"Comment": "receive notification of character data inside an element.",
	"Method": "void characters(char[] buf,int offset,int len){\r\n    String text = new String(buf, offset, len);\r\n    if (textBuffer == null) {\r\n        textBuffer = new StringBuilder(text);\r\n    } else {\r\n        textBuffer.append(text);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.model.NodeModel.setOriginals",
	"Comment": "this function should be called after a save in order to reset the original values to their current value.\tby doing this, you allow the next save the check against the new values",
	"Method": "void setOriginals(){\r\n    directAccessOrig = directAccess;\r\n    accessAdminOrig = accessAdmin;\r\n    shoppingPeriodAdminOrig = shoppingPeriodAdmin;\r\n    realmOrig = realm;\r\n    roleOrig = role;\r\n    restrictedAuthToolsOrig = copyListOptions(restrictedAuthTools);\r\n    restrictedPublicToolsOrig = copyListOptions(restrictedPublicTools);\r\n    shoppingPeriodStartDateOrig = shoppingPeriodStartDate;\r\n    shoppingPeriodEndDateOrig = shoppingPeriodEndDate;\r\n    shoppingPeriodRevokeInstructorEditableOrig = shoppingPeriodRevokeInstructorEditable;\r\n    shoppingPeriodRevokeInstructorPublicOptOrig = shoppingPeriodRevokeInstructorPublicOpt;\r\n    allowBecomeUserOrig = allowBecomeUser;\r\n    instructorEditedOrig = instructorEdited;\r\n}"
}, {
	"Path": "co.rsk.scoring.PeerScoring.getScore",
	"Comment": "returns the current computed score.the score is calculated based on previous event recording.",
	"Method": "int getScore(){\r\n    try {\r\n        rwlock.readLock().lock();\r\n        return score;\r\n    } finally {\r\n        rwlock.readLock().unlock();\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getLanguage",
	"Comment": "gets the dublincore module language. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getLanguage(){\r\n    return Lists.firstEntry(language);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.network.ConnectionClassManager.getInstance",
	"Comment": "retrieval method for the downloadbandwidthmanager singleton.",
	"Method": "ConnectionClassManager getInstance(){\r\n    return ConnectionClassManagerHolder.instance;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.getNextVisualPositionFrom",
	"Comment": "provides a way to determine the next visually represented model\tlocation that one might place a caret.some views may not be visible,\tthey might not be in the same order found in the model, or they just\tmight not allow access to some of the locations in the model.",
	"Method": "int getNextVisualPositionFrom(int pos,Position.Bias b,Shape a,int direction,Position.Bias[] biasRet){\r\n    return RSyntaxUtilities.getNextVisualPositionFrom(pos, b, a, direction, biasRet, this);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MakefileTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ScalaTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.getActiveLineRangeColor",
	"Comment": "returns the color used to paint the active line range, if any.",
	"Method": "Color getActiveLineRangeColor(){\r\n    return iconArea.getActiveLineRangeColor();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CSSTokenMaker.isIdentifierChar",
	"Comment": "overridden to accept letters, digits, underscores, and hyphens.",
	"Method": "boolean isIdentifierChar(int languageIndex,char ch){\r\n    return Character.isLetterOrDigit(ch) || ch == '-' || ch == '.' || ch == '_';\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.retry",
	"Comment": "repeatedly run this nono at most the given number of times if it fails.",
	"Method": "Nono retry(Nono retry,long times,Nono retry,Predicate<? super Throwable> predicate){\r\n    ObjectHelper.requireNonNull(predicate, \"predicate is null\");\r\n    return onAssembly(new NonoRetryWhile(this, predicate));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.YamlTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.SAK11204Fix.checkSAK11204ForUpgrade",
	"Comment": "runs a simple sql statement to check if the databse has been patched",
	"Method": "int checkSAK11204ForUpgrade(){\r\n    String test = \"select count(*) from CALENDAR_EVENT where (RANGE_START is null) or (RANGE_END is null)\";\r\n    Connection connection = null;\r\n    Statement s = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        connection = sqlService.borrowConnection();\r\n        s = connection.createStatement();\r\n        rs = s.executeQuery(test);\r\n        if (rs.next()) {\r\n            long ntodo = rs.getLong(1);\r\n            if (ntodo == 0) {\r\n                log.debug(\"SAK-11204: Database has been migrated\");\r\n                return OK;\r\n            } else {\r\n                log.info(\"SAK-11204: Migration check, there are null range fields\");\r\n                return MIGRATE;\r\n            }\r\n        } else {\r\n            log.warn(\"SAK-11204: Could not count null range fields, assuming migrate\");\r\n            return MIGRATE;\r\n        }\r\n    } catch (SQLException ex) {\r\n        log.info(\"SAK-11204: Migration check, CALENDAR_EVENT schema not uptodate, test query said: {}\", ex.getMessage());\r\n        return UPGRADE_SCHEMA;\r\n    } finally {\r\n        try {\r\n            rs.close();\r\n        } catch (Exception ex) {\r\n        }\r\n        try {\r\n            s.close();\r\n        } catch (Exception ex) {\r\n        }\r\n        try {\r\n            if (connection != null) {\r\n                sqlService.returnConnection(connection);\r\n            }\r\n        } catch (Exception ex) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.saveReviewGradeForm",
	"Comment": "read review grade information form and see if any grading information has been changed",
	"Method": "boolean saveReviewGradeForm(RunData data,SessionState state,String gradeOption){\r\n    String assessorUserId = userDirectoryService.getCurrentUser().getId();\r\n    if (state.getAttribute(PEER_ASSESSMENT_ASSESSOR_ID) != null && !assessorUserId.equals(state.getAttribute(PEER_ASSESSMENT_ASSESSOR_ID))) {\r\n        return false;\r\n    }\r\n    ParameterParser params = data.getParameters();\r\n    String submissionId = params.getString(\"submissionId\");\r\n    if (submissionId != null) {\r\n        AssignmentSubmission s = getSubmission(submissionId, \"saveReviewGradeForm\", state);\r\n        if (s != null) {\r\n            submissionId = s.getId();\r\n        }\r\n        PeerAssessmentItem item = assignmentPeerAssessmentService.getPeerAssessmentItem(submissionId, assessorUserId);\r\n        if (item != null) {\r\n            boolean changed = false;\r\n            if (submissionId.equals(item.getId().getSubmissionId()) && assessorUserId.equals(item.getId().getAssessorUserId())) {\r\n                String g = StringUtils.trimToNull(params.getCleanString(GRADE_SUBMISSION_GRADE));\r\n                Integer score = item.getScore();\r\n                if (StringUtils.isNotEmpty(g)) {\r\n                    try {\r\n                        String assignmentId = (String) state.getAttribute(VIEW_ASSIGNMENT_ID);\r\n                        if (assignmentId == null) {\r\n                            addAlert(state, rb.getString(\"peerassessment.alert.saveerrorunkown\"));\r\n                        } else {\r\n                            Assignment a = getAssignment(assignmentId, \"saveReviewGradeForm\", state);\r\n                            if (a == null) {\r\n                                addAlert(state, rb.getString(\"peerassessment.alert.saveerrorunkown\"));\r\n                            } else {\r\n                                int factor = a.getScaleFactor();\r\n                                int dec = (int) Math.log10(factor);\r\n                                g = validPointGrade(state, g, factor);\r\n                                if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                                    NumberFormat nbFormat = formattedText.getNumberFormat(dec, dec, false);\r\n                                    DecimalFormat dcformat = (DecimalFormat) nbFormat;\r\n                                    Double dScore = dcformat.parse(g).doubleValue();\r\n                                    if (dScore < 0) {\r\n                                        addAlert(state, rb.getString(\"peerassessment.alert.saveinvalidscore\"));\r\n                                    } else if (dScore <= a.getMaxGradePoint() / (double) factor) {\r\n                                        score = (int) Math.round(dScore * factor);\r\n                                    } else {\r\n                                        addAlert(state, rb.getFormattedMessage(\"plesuse4\", g, a.getMaxGradePoint() / (double) factor));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        addAlert(state, rb.getString(\"peerassessment.alert.saveinvalidscore\"));\r\n                    }\r\n                }\r\n                boolean scoreChanged = false;\r\n                if (score != null && item.getScore() == null || score == null && item.getScore() != null || (score != null && item.getScore() != null && !score.equals(item.getScore()))) {\r\n                    changed = true;\r\n                    scoreChanged = true;\r\n                    item.setScore(score);\r\n                }\r\n                String feedbackComment = processFormattedTextFromBrowser(state, params.getCleanString(GRADE_SUBMISSION_FEEDBACK_COMMENT), true);\r\n                if (feedbackComment != null && item.getComment() == null || feedbackComment == null && item.getComment() != null || (feedbackComment != null && item.getComment() != null && !feedbackComment.equals(item.getComment()))) {\r\n                    changed = true;\r\n                    item.setComment(feedbackComment);\r\n                }\r\n                List<PeerAssessmentAttachment> savedAttachments = assignmentPeerAssessmentService.getPeerAssessmentAttachments(submissionId, assessorUserId);\r\n                List submittedAttachmentRefs = null;\r\n                if (state.getAttribute(PEER_ATTACHMENTS) != null && !((List) state.getAttribute(PEER_ATTACHMENTS)).isEmpty()) {\r\n                    submittedAttachmentRefs = (List) state.getAttribute(PEER_ATTACHMENTS);\r\n                }\r\n                boolean attachmentsChanged = false;\r\n                if (submittedAttachmentRefs != null && !submittedAttachmentRefs.isEmpty()) {\r\n                    List<PeerAssessmentAttachment> attachmentsFromForm = new ArrayList();\r\n                    for (Object attachment : submittedAttachmentRefs) {\r\n                        PeerAssessmentAttachment peerAssessmentAttachment = assignmentPeerAssessmentService.getPeerAssessmentAttachment(item.getId().getSubmissionId(), item.getId().getAssessorUserId(), ((Reference) attachment).getId());\r\n                        if (peerAssessmentAttachment != null) {\r\n                            attachmentsFromForm.add(peerAssessmentAttachment);\r\n                        } else {\r\n                            peerAssessmentAttachment = new PeerAssessmentAttachment(item.getId().getSubmissionId(), item.getId().getAssessorUserId(), ((Reference) attachment).getId());\r\n                            attachmentsFromForm.add(peerAssessmentAttachment);\r\n                        }\r\n                    }\r\n                    if (savedAttachments != null && !savedAttachments.isEmpty()) {\r\n                        List<PeerAssessmentAttachment> attachmentsToDelete = new ArrayList(savedAttachments);\r\n                        attachmentsToDelete.removeAll(attachmentsFromForm);\r\n                        if (!attachmentsToDelete.isEmpty()) {\r\n                            attachmentsToDelete.forEach(assignmentPeerAssessmentService::removePeerAttachment);\r\n                        }\r\n                    }\r\n                    item.setAttachmentList(attachmentsFromForm);\r\n                    attachmentsChanged = true;\r\n                } else {\r\n                    if (savedAttachments != null && !savedAttachments.isEmpty()) {\r\n                        savedAttachments.forEach(assignmentPeerAssessmentService::removePeerAttachment);\r\n                        attachmentsChanged = true;\r\n                    }\r\n                    item.setAttachmentList(new ArrayList());\r\n                }\r\n                if (\"submit\".equals(gradeOption)) {\r\n                    if (item.getScore() != null || (item.getComment() != null && !\"\".equals(item.getComment().trim()))) {\r\n                        item.setSubmitted(true);\r\n                        changed = true;\r\n                    } else {\r\n                        addAlert(state, rb.getString(\"peerassessment.alert.savenoscorecomment\"));\r\n                    }\r\n                }\r\n                if ((\"submit\".equals(gradeOption) || \"save\".equals(gradeOption)) && state.getAttribute(STATE_MESSAGE) == null) {\r\n                    if (changed) {\r\n                        assignmentPeerAssessmentService.savePeerAssessmentItem(item);\r\n                        if (scoreChanged) {\r\n                            boolean saved = assignmentPeerAssessmentService.updateScore(submissionId, assessorUserId);\r\n                            if (saved) {\r\n                                String assignmentId = (String) state.getAttribute(VIEW_ASSIGNMENT_ID);\r\n                                if (assignmentId != null) {\r\n                                    Assignment a = getAssignment(assignmentId, \"saveReviewGradeForm\", state);\r\n                                    if (a != null) {\r\n                                        String aReference = AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference();\r\n                                        String associateGradebookAssignment = a.getProperties().get(PROP_ASSIGNMENT_ASSOCIATE_GRADEBOOK_ASSIGNMENT);\r\n                                        integrateGradebook(state, aReference, associateGradebookAssignment, null, null, null, -1, null, submissionId, \"update\", -1);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        state.setAttribute(GRADE_SUBMISSION_DONE, Boolean.TRUE);\r\n                        if (\"submit\".equals(gradeOption)) {\r\n                            state.setAttribute(GRADE_SUBMISSION_SUBMIT, Boolean.TRUE);\r\n                        }\r\n                    }\r\n                    if (attachmentsChanged) {\r\n                        assignmentPeerAssessmentService.savePeerAssessmentAttachments(item);\r\n                    }\r\n                }\r\n                List<PeerAssessmentItem> peerAssessmentItems = (List<PeerAssessmentItem>) state.getAttribute(PEER_ASSESSMENT_ITEMS);\r\n                if (peerAssessmentItems != null) {\r\n                    for (int i = 0; i < peerAssessmentItems.size(); i++) {\r\n                        PeerAssessmentItem sItem = peerAssessmentItems.get(i);\r\n                        if (sItem.getId().getSubmissionId().equals(item.getId().getSubmissionId()) && sItem.getId().getAssessorUserId().equals(item.getId().getAssessorUserId())) {\r\n                            peerAssessmentItems.set(i, item);\r\n                            state.setAttribute(PEER_ASSESSMENT_ITEMS, peerAssessmentItems);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return changed;\r\n        } else {\r\n            addAlert(state, rb.getString(\"peerassessment.alert.saveerrorunkown\"));\r\n        }\r\n    } else {\r\n        addAlert(state, rb.getString(\"peerassessment.alert.saveerrorunkown\"));\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.readGradeForm",
	"Comment": "read grade information form and see if any grading information has been changed",
	"Method": "boolean readGradeForm(RunData data,SessionState state,String gradeOption){\r\n    boolean hasChange = false;\r\n    ParameterParser params = data.getParameters();\r\n    String sId = params.getString(\"submissionId\");\r\n    if (!checkSubmissionStateConsistency(state, sId)) {\r\n        return false;\r\n    }\r\n    AssignmentSubmission submission = getSubmission(sId, \"readGradeForm\", state);\r\n    if (assignmentService.allowGradeSubmission(sId)) {\r\n        boolean withGrade = state.getAttribute(WITH_GRADES) != null ? (Boolean) state.getAttribute(WITH_GRADES) : false;\r\n        String feedbackComment = processFormattedTextFromBrowser(state, params.getCleanString(GRADE_SUBMISSION_FEEDBACK_COMMENT), true);\r\n        hasChange = submission != null && valueDiffFromStateAttribute(state, feedbackComment, submission.getFeedbackComment());\r\n        if (feedbackComment != null) {\r\n            state.setAttribute(GRADE_SUBMISSION_FEEDBACK_COMMENT, feedbackComment);\r\n        }\r\n        String feedbackText = processAssignmentFeedbackFromBrowser(state, params.getCleanString(GRADE_SUBMISSION_FEEDBACK_TEXT));\r\n        hasChange = !hasChange && submission != null ? valueDiffFromStateAttribute(state, feedbackText, submission.getFeedbackText()) : hasChange;\r\n        if (feedbackText != null) {\r\n            state.setAttribute(GRADE_SUBMISSION_FEEDBACK_TEXT, feedbackText);\r\n        }\r\n        if (!hasChange && submission != null) {\r\n            List<Reference> inputAttachments = (List<Reference>) state.getAttribute(ATTACHMENTS);\r\n            Set<String> stateAttachments = submission.getFeedbackAttachments();\r\n            Set<String> inputAttachmentsRefs = inputAttachments.stream().map(Reference::getReference).collect(Collectors.toSet());\r\n            if (!stateAttachments.equals(inputAttachmentsRefs)) {\r\n                hasChange = true;\r\n            }\r\n        }\r\n        state.setAttribute(GRADE_SUBMISSION_FEEDBACK_ATTACHMENT, state.getAttribute(ATTACHMENTS));\r\n        String g = StringUtils.trimToNull(params.getCleanString(GRADE_SUBMISSION_GRADE));\r\n        if (submission != null) {\r\n            Assignment a = submission.getAssignment();\r\n            int factor = a.getScaleFactor() != null ? a.getScaleFactor() : assignmentService.getScaleFactor();\r\n            Assignment.GradeType typeOfGrade = a.getTypeOfGrade();\r\n            if (withGrade) {\r\n                if (!hasChange && typeOfGrade != UNGRADED_GRADE_TYPE) {\r\n                    if (typeOfGrade == SCORE_GRADE_TYPE) {\r\n                        String currentGrade = submission.getGrade();\r\n                        String decSeparator = formattedText.getDecimalSeparator();\r\n                        if (currentGrade != null && currentGrade.contains(decSeparator)) {\r\n                            currentGrade = scalePointGrade(state, submission.getGrade(), factor);\r\n                        }\r\n                        hasChange = valueDiffFromStateAttribute(state, scalePointGrade(state, g, factor), currentGrade);\r\n                    } else {\r\n                        hasChange = valueDiffFromStateAttribute(state, g, submission.getGrade());\r\n                    }\r\n                }\r\n                if (g != null) {\r\n                    state.setAttribute(GRADE_SUBMISSION_GRADE, g);\r\n                } else {\r\n                    state.removeAttribute(GRADE_SUBMISSION_GRADE);\r\n                }\r\n                String grade = (String) state.getAttribute(GRADE_SUBMISSION_GRADE);\r\n                if (typeOfGrade == SCORE_GRADE_TYPE) {\r\n                    if ((grade != null)) {\r\n                        if (!((String) state.getAttribute(STATE_MODE)).equals(MODE_INSTRUCTOR_PREVIEW_GRADE_SUBMISSION)) {\r\n                            if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                                validPointGrade(state, grade, factor);\r\n                                int maxGrade = a.getMaxGradePoint();\r\n                                try {\r\n                                    if (state.getAttribute(STATE_MESSAGE) == null && Integer.parseInt(scalePointGrade(state, grade, factor)) > maxGrade) {\r\n                                        if (state.getAttribute(GRADE_GREATER_THAN_MAX_ALERT) == null) {\r\n                                            addAlert(state, rb.getFormattedMessage(\"grad2\", grade, displayGrade(state, String.valueOf(maxGrade), factor)));\r\n                                            state.setAttribute(GRADE_GREATER_THAN_MAX_ALERT, Boolean.TRUE);\r\n                                        } else {\r\n                                            state.removeAttribute(GRADE_GREATER_THAN_MAX_ALERT);\r\n                                        }\r\n                                    }\r\n                                } catch (NumberFormatException e) {\r\n                                    alertInvalidPoint(state, grade, factor);\r\n                                    log.warn(this + \":readGradeForm \" + e.getMessage());\r\n                                }\r\n                            }\r\n                            state.setAttribute(GRADE_SUBMISSION_GRADE, grade);\r\n                        }\r\n                    }\r\n                }\r\n                if ((grade == null || \"ungraded\".equals(grade)) && (typeOfGrade != UNGRADED_GRADE_TYPE) && \"release\".equals(gradeOption)) {\r\n                    addAlert(state, rb.getString(\"plespethe2\"));\r\n                }\r\n                if (a.getIsGroup()) {\r\n                    HashMap<String, String> scaledValues = new HashMap<String, String>();\r\n                    Set<AssignmentSubmissionSubmitter> submitters = submission.getSubmitters();\r\n                    for (AssignmentSubmissionSubmitter submitter : submitters) {\r\n                        String ug = StringUtils.trimToNull(params.getCleanString(GRADE_SUBMISSION_GRADE + \"_\" + submitter.getSubmitter()));\r\n                        if (\"null\".equals(ug))\r\n                            ug = null;\r\n                        if (!hasChange && typeOfGrade != UNGRADED_GRADE_TYPE) {\r\n                            hasChange = valueDiffFromStateAttribute(state, ug, submitter.getGrade());\r\n                        }\r\n                        if (ug == null) {\r\n                            state.removeAttribute(GRADE_SUBMISSION_GRADE + \"_\" + submitter.getSubmitter());\r\n                        } else {\r\n                            state.setAttribute(GRADE_SUBMISSION_GRADE + \"_\" + submitter.getSubmitter(), ug);\r\n                        }\r\n                        String ugrade = (String) state.getAttribute(GRADE_SUBMISSION_GRADE + \"_\" + submitter.getSubmitter());\r\n                        if (typeOfGrade == SCORE_GRADE_TYPE) {\r\n                            if (ugrade != null && !(ugrade.equals(\"null\"))) {\r\n                                if (!((String) state.getAttribute(STATE_MODE)).equals(MODE_INSTRUCTOR_PREVIEW_GRADE_SUBMISSION)) {\r\n                                    validPointGrade(state, ugrade, factor);\r\n                                    if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                                        int maxGrade = a.getMaxGradePoint();\r\n                                        try {\r\n                                            if (Integer.parseInt(scalePointGrade(state, ugrade, factor)) > maxGrade) {\r\n                                                if (state.getAttribute(GRADE_GREATER_THAN_MAX_ALERT) == null) {\r\n                                                    addAlert(state, rb.getFormattedMessage(\"grad2\", ugrade, displayGrade(state, String.valueOf(maxGrade), factor)));\r\n                                                    state.setAttribute(GRADE_GREATER_THAN_MAX_ALERT, Boolean.TRUE);\r\n                                                } else {\r\n                                                    state.removeAttribute(GRADE_GREATER_THAN_MAX_ALERT);\r\n                                                }\r\n                                            }\r\n                                        } catch (NumberFormatException e) {\r\n                                            alertInvalidPoint(state, ugrade, factor);\r\n                                            log.warn(this + \":readGradeForm User \" + e.getMessage());\r\n                                        }\r\n                                    }\r\n                                    scaledValues.put(GRADE_SUBMISSION_GRADE + \"_\" + submitter.getSubmitter(), scalePointGrade(state, ugrade, factor));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                        for (Map.Entry<String, String> entry : scaledValues.entrySet()) {\r\n                            state.setAttribute(entry.getKey(), entry.getValue());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (params.getString(\"allowResToggle\") != null && params.getString(AssignmentConstants.ALLOW_RESUBMIT_NUMBER) != null) {\r\n                readAllowResubmitParams(params, state, submission.getProperties());\r\n            } else {\r\n                state.removeAttribute(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME);\r\n                state.removeAttribute(AssignmentConstants.ALLOW_RESUBMIT_NUMBER);\r\n                if (!\"read\".equals(gradeOption)) {\r\n                    resetAllowResubmitParams(state);\r\n                }\r\n            }\r\n            hasChange = hasChange || change_resubmit_option(state, submission.getProperties());\r\n            if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                String grade = (String) state.getAttribute(GRADE_SUBMISSION_GRADE);\r\n                grade = (typeOfGrade == SCORE_GRADE_TYPE) ? scalePointGrade(state, grade, factor) : grade;\r\n                state.setAttribute(GRADE_SUBMISSION_GRADE, grade);\r\n            }\r\n            if (state.getAttribute(STATE_MESSAGE) != null) {\r\n                String rubricStateDetails = params.getString(RUBRIC_STATE_DETAILS);\r\n                state.setAttribute(RUBRIC_STATE_DETAILS, rubricStateDetails);\r\n            } else {\r\n                state.removeAttribute(RUBRIC_STATE_DETAILS);\r\n            }\r\n        }\r\n    } else {\r\n        addAlert(state, rb.getFormattedMessage(\"not_allowed_to_grade_submission\", sId));\r\n    }\r\n    return hasChange;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.defer",
	"Comment": "defers the creation of the actual solo to the time when a subscribersubscribes to the returned solo.",
	"Method": "Solo<T> defer(Callable<? extends Solo<T>> supplier){\r\n    ObjectHelper.requireNonNull(supplier, \"supplier is null\");\r\n    return onAssembly(new SoloDefer<T>(supplier));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.error",
	"Comment": "returns a nono that signals a throwable generated by thecallable for each individual subscriber.",
	"Method": "Nono error(Throwable ex,Nono error,Callable<? extends Throwable> errorSupplier){\r\n    ObjectHelper.requireNonNull(errorSupplier, \"errorSupplier is null\");\r\n    return onAssembly(new NonoErrorSupplier(errorSupplier));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.retry",
	"Comment": "retry this perhaps if the predicate returns true for the latest failurethrowable.",
	"Method": "Perhaps<T> retry(Perhaps<T> retry,long times,Perhaps<T> retry,Predicate<? super Throwable> predicate){\r\n    ObjectHelper.requireNonNull(predicate, \"predicate is null\");\r\n    return onAssembly(new PerhapsRetryWhile<T>(this, predicate));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.setFoldIcons",
	"Comment": "sets the icons to use to represent collapsed and expanded folds.",
	"Method": "void setFoldIcons(Icon collapsedIcon,Icon expandedIcon){\r\n    if (foldIndicator != null) {\r\n        foldIndicator.setFoldIcons(collapsedIcon, expandedIcon);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.addOffsetTrackingIcon",
	"Comment": "adds an icon that tracks an offset in the document, and is displayed\tadjacent to the line numbers.this is useful for marking things such\tas source code errors.",
	"Method": "GutterIconInfo addOffsetTrackingIcon(int offs,Icon icon,GutterIconInfo addOffsetTrackingIcon,int offs,Icon icon,String tip){\r\n    return iconArea.addOffsetTrackingIcon(offs, icon, tip);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.expand",
	"Comment": "emits elements from the source and then expands them into another layer of publishers, emittingthose items recursively until all publishers become empty with the specified strategy.",
	"Method": "FlowableTransformer<T, T> expand(Function<? super T, ? extends Publisher<? extends T>> expander,FlowableTransformer<T, T> expand,Function<? super T, ? extends Publisher<? extends T>> expander,ExpandStrategy strategy,FlowableTransformer<T, T> expand,Function<? super T, ? extends Publisher<? extends T>> expander,ExpandStrategy strategy,int capacityHint){\r\n    ObjectHelper.requireNonNull(expander, \"expander is null\");\r\n    ObjectHelper.requireNonNull(strategy, \"strategy is null\");\r\n    ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\r\n    return new FlowableExpand<T>(null, expander, strategy, capacityHint, false);\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getBtcBlockchainInitialBlockHeight",
	"Comment": "returns the bitcoin blockchain initial stored block height",
	"Method": "int getBtcBlockchainInitialBlockHeight(){\r\n    return getLowestBlock().getHeight();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern3.and",
	"Comment": "creates a pattern that matches when all three observable sequences have an available element.",
	"Method": "Pattern4<T1, T2, T3, T4> and(Observable<T4> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Pattern4<T1, T2, T3, T4>(o1, o2, o3, other);\r\n}"
}, {
	"Path": "restx.common.watch.FileWatchEventCoalescorTest.should_send_events",
	"Comment": "no merges here, just very basic events, on separate files",
	"Method": "void should_send_events(){\r\n    TestFileWatchEventCoalescor watchEventCoalescor = new TestFileWatchEventCoalescor();\r\n    watchEventCoalescor.post(\"tmp/foo\", StandardWatchEventKinds.ENTRY_CREATE);\r\n    watchEventCoalescor.post(\"tmp/bar\", StandardWatchEventKinds.ENTRY_DELETE);\r\n    watchEventCoalescor.post(\"tmp/test\", StandardWatchEventKinds.ENTRY_MODIFY);\r\n    watchEventCoalescor.post(\"tmp/another_file.txt\", StandardWatchEventKinds.ENTRY_CREATE);\r\n    assertThat(watchEventCoalescor.scheduledEvents).extracting(\"reference\").extracting(\"path\").containsOnly(Paths.get(\"tmp/foo\"), Paths.get(\"tmp/bar\"), Paths.get(\"tmp/test\"), Paths.get(\"tmp/another_file.txt\"));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.error",
	"Comment": "returns a perhaps that signals the error returned fromthe errorsupplier to each individual subscriber.",
	"Method": "Perhaps<T> error(Throwable error,Perhaps<T> error,Callable<? extends Throwable> errorSupplier){\r\n    ObjectHelper.requireNonNull(errorSupplier, \"errorSupplier is null\");\r\n    return onAssembly(new PerhapsErrorSupplier<T>(errorSupplier));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DtdTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.model.impl.ChatEntityProducer.archiveSynopticOptions",
	"Comment": "try to add synoptic options for this tool to the archive, if they exist",
	"Method": "void archiveSynopticOptions(String siteId,Document doc,Element element){\r\n    try {\r\n        Site site = SiteService.getSite(siteId);\r\n        ToolConfiguration synTool = site.getToolForCommonId(\"sakai.synoptic.\" + getLabel());\r\n        Properties synProp = synTool.getPlacementConfig();\r\n        if (synProp != null && synProp.size() > 0) {\r\n            Element synElement = doc.createElement(SYNOPTIC_TOOL);\r\n            Element synProps = doc.createElement(PROPERTIES);\r\n            Set synPropSet = synProp.keySet();\r\n            Iterator propIter = synPropSet.iterator();\r\n            while (propIter.hasNext()) {\r\n                String propName = (String) propIter.next();\r\n                Element synPropEl = doc.createElement(PROPERTY);\r\n                synPropEl.setAttribute(NAME, propName);\r\n                synPropEl.setAttribute(VALUE, synProp.getProperty(propName));\r\n                synProps.appendChild(synPropEl);\r\n            }\r\n            synElement.appendChild(synProps);\r\n            element.appendChild(synElement);\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(\"archive: exception archiving synoptic options for service: \" + serviceName());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.entityproviders.ContentEntityProvider.getWebLinkResourceUrlString",
	"Comment": "return the original url string based on web link resource content",
	"Method": "String getWebLinkResourceUrlString(ContentResource resource,String contentType){\r\n    String urlString = null;\r\n    if (contentType.equalsIgnoreCase(ResourceProperties.TYPE_URL)) {\r\n        try {\r\n            byte[] content = resource.getContent();\r\n            if (content != null && content.length > 0) {\r\n                try {\r\n                    URI uri = new URI(new String(content, \"UTF-8\"));\r\n                    urlString = uri.toString();\r\n                } catch (UnsupportedEncodingException e) {\r\n                    log.warn(\"UnsupportedEncodingException for \" + new String(content) + \" \" + e.getMessage());\r\n                } catch (URISyntaxException e) {\r\n                    log.warn(\"Error parsing URI for \" + new String(content) + \" \" + e.getMessage());\r\n                }\r\n            }\r\n        } catch (ServerOverloadException e) {\r\n            log.warn(\"Cannot get content for resource ref=\" + resource.getReference() + \" error: \" + e.getMessage());\r\n        }\r\n    }\r\n    return urlString;\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.allOf",
	"Comment": "a compound permission which is true if all underlying permissions are true",
	"Method": "Permission allOf(Permission permissions){\r\n    return new Permission() {\r\n        @Override\r\n        public Optional<? extends Permission> has(RestxPrincipal principal, Map<String, String> roleInterpolationMap) {\r\n            for (Permission permission : permissions) {\r\n                Optional<? extends Permission> p = permission.has(principal, roleInterpolationMap);\r\n                if (!p.isPresent()) {\r\n                    return Optional.absent();\r\n                }\r\n            }\r\n            return Optional.of(this);\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return \"ALL_OF[\" + Arrays.toString(permissions) + \"]\";\r\n        }\r\n    };\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.allOf",
	"Comment": "a compound permission which is true if all underlying permissions are true",
	"Method": "Permission allOf(Permission permissions){\r\n    for (Permission permission : permissions) {\r\n        Optional<? extends Permission> p = permission.has(principal, roleInterpolationMap);\r\n        if (!p.isPresent()) {\r\n            return Optional.absent();\r\n        }\r\n    }\r\n    return Optional.of(this);\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.allOf",
	"Comment": "a compound permission which is true if all underlying permissions are true",
	"Method": "Permission allOf(Permission permissions){\r\n    return \"ALL_OF[\" + Arrays.toString(permissions) + \"]\";\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.cover.AnnouncementService.getChannelIds",
	"Comment": "access a list of channel ids that are defined related to the context.",
	"Method": "java.util.List getChannelIds(java.lang.String param0){\r\n    org.sakaiproject.announcement.api.AnnouncementService service = getInstance();\r\n    if (service == null)\r\n        return null;\r\n    return service.getChannelIds(param0);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getType",
	"Comment": "type is the standard mime type of the object. it is an optional attribute.",
	"Method": "String getType(){\r\n    return type;\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.processReleaseTransactions",
	"Comment": "processes the current btc release transaction set.it basically looks for transactions with enough confirmationsand marks them as ready for signing as well as removes themfrom the set.",
	"Method": "void processReleaseTransactions(Transaction rskTx){\r\n    final Map<Keccak256, BtcTransaction> txsWaitingForSignatures;\r\n    final ReleaseTransactionSet releaseTransactionSet;\r\n    try {\r\n        txsWaitingForSignatures = provider.getRskTxsWaitingForSignatures();\r\n        releaseTransactionSet = provider.getReleaseTransactionSet();\r\n    } catch (IOException e) {\r\n        logger.error(\"Unexpected error accessing storage while attempting to process release btc transactions\", e);\r\n        return;\r\n    }\r\n    Set<BtcTransaction> txsWithEnoughConfirmations = releaseTransactionSet.sliceWithConfirmations(rskExecutionBlock.getNumber(), bridgeConstants.getRsk2BtcMinimumAcceptableConfirmations(), Optional.of(1));\r\n    if (txsWithEnoughConfirmations.size() > 0) {\r\n        txsWaitingForSignatures.put(rskTx.getHash(), txsWithEnoughConfirmations.iterator().next());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getCodeTemplateManager",
	"Comment": "returns the code template manager for all instances of\trsyntaxtextarea.the manager is lazily created.",
	"Method": "CodeTemplateManager getCodeTemplateManager(){\r\n    if (codeTemplateManager == null) {\r\n        codeTemplateManager = new CodeTemplateManager();\r\n    }\r\n    return codeTemplateManager;\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.BaseConfigurationService.getDatabaseHierarchyXml",
	"Comment": "fetch the appropriate xml database hierarchy document for this user",
	"Method": "String getDatabaseHierarchyXml(){\r\n    SiteOsidConfiguration siteConfig = getSiteOsidConfiguration();\r\n    String databaseXml = null;\r\n    if (siteConfig != null) {\r\n        databaseXml = siteConfig.getDatabaseHierarchyXml();\r\n    }\r\n    if (isNull(databaseXml)) {\r\n        databaseXml = m_databaseXml;\r\n    }\r\n    return databaseXml;\r\n}"
}, {
	"Path": "io.rsocket.fragmentation.FrameReassembler.reassemble",
	"Comment": "reassembles a frame. if the frame is not a candidate for fragmentation, emits the frame. ifframe is a candidate for fragmentation, accumulates the content until the final fragment.",
	"Method": "Frame reassemble(Frame frame){\r\n    Objects.requireNonNull(frame, \"frame must not be null\");\r\n    if (!(frame instanceof FragmentableFrame)) {\r\n        return frame;\r\n    }\r\n    FragmentableFrame fragmentableFrame = (FragmentableFrame) frame;\r\n    if (fragmentableFrame.isFollowsFlagSet()) {\r\n        if (state == null) {\r\n            state = new ReassemblyState(fragmentableFrame);\r\n        } else {\r\n            state.accumulate(fragmentableFrame);\r\n        }\r\n    } else if (state != null) {\r\n        state.accumulate(fragmentableFrame);\r\n        Frame reassembledFrame = state.createFrame(byteBufAllocator);\r\n        state.dispose();\r\n        state = null;\r\n        return reassembledFrame;\r\n    } else {\r\n        return fragmentableFrame;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.citation.util.impl.CQL2XServerFindCommand.characters",
	"Comment": "receive notification of character data inside an element.",
	"Method": "void characters(char[] buf,int offset,int len){\r\n    String text = new String(buf, offset, len);\r\n    if (textBuffer == null) {\r\n        textBuffer = new StringBuilder(text);\r\n    } else {\r\n        textBuffer.append(text);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.calculateLineHeight",
	"Comment": "recalculates the height of a line in this text area and the\tmaximum ascent of all fonts displayed.",
	"Method": "void calculateLineHeight(){\r\n    lineHeight = maxAscent = 0;\r\n    for (int i = 0; i < syntaxScheme.getStyleCount(); i++) {\r\n        Style ss = syntaxScheme.getStyle(i);\r\n        if (ss != null && ss.font != null) {\r\n            FontMetrics fm = getFontMetrics(ss.font);\r\n            int height = fm.getHeight();\r\n            if (height > lineHeight) {\r\n                lineHeight = height;\r\n            }\r\n            int ascent = fm.getMaxAscent();\r\n            if (ascent > maxAscent) {\r\n                maxAscent = ascent;\r\n            }\r\n        }\r\n    }\r\n    Font temp = getFont();\r\n    FontMetrics fm = getFontMetrics(temp);\r\n    int height = fm.getHeight();\r\n    if (height > lineHeight) {\r\n        lineHeight = height;\r\n    }\r\n    int ascent = fm.getMaxAscent();\r\n    if (ascent > maxAscent) {\r\n        maxAscent = ascent;\r\n    }\r\n}"
}, {
	"Path": "net.oauth.OAuth.newMap",
	"Comment": "construct a map containing a copy of the given parameters. if severalparameters have the same name, the map will contain the first value,only.",
	"Method": "Map<String, String> newMap(Iterable<? extends Map.Entry> from){\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    if (from != null) {\r\n        for (Map.Entry f : from) {\r\n            String key = toString(f.getKey());\r\n            if (!map.containsKey(key)) {\r\n                map.put(key, toString(f.getValue()));\r\n            }\r\n        }\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.FactoryFinder.newInstance",
	"Comment": "create an instance of a class using the specified classloader and optionally fall back to thecurrent classloader if not found.",
	"Method": "Object newInstance(String className,ClassLoader cl,boolean doFallback){\r\n    try {\r\n        Class<?> providerClass;\r\n        if (cl == null) {\r\n            providerClass = Class.forName(className);\r\n        } else {\r\n            try {\r\n                providerClass = cl.loadClass(className);\r\n            } catch (final ClassNotFoundException x) {\r\n                if (doFallback) {\r\n                    cl = FactoryFinder.class.getClassLoader();\r\n                    providerClass = cl.loadClass(className);\r\n                } else {\r\n                    throw x;\r\n                }\r\n            }\r\n        }\r\n        final Object instance = providerClass.newInstance();\r\n        dPrint(\"created new instance of \" + providerClass + \" using ClassLoader: \" + cl);\r\n        return instance;\r\n    } catch (final ClassNotFoundException x) {\r\n        throw new ConfigurationError(\"Provider \" + className + \" not found\", x);\r\n    } catch (final Exception x) {\r\n        throw new ConfigurationError(\"Provider \" + className + \" could not be instantiated: \" + x, x);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sync.getVersion",
	"Comment": "provides access to a required, integer attribute. this is the modification sequence number ofthe item, starting at 1 and incrementing by 1 indefinitely for each subsequent modification.",
	"Method": "Integer getVersion(){\r\n    return version;\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getLowestBlock",
	"Comment": "returns the first bitcoin block we have. it is either a checkpoint or the genesis",
	"Method": "StoredBlock getLowestBlock(){\r\n    InputStream checkpoints = this.getCheckPoints();\r\n    if (checkpoints == null) {\r\n        BtcBlock genesis = bridgeConstants.getBtcParams().getGenesisBlock();\r\n        return new StoredBlock(genesis, genesis.getWork(), 0);\r\n    }\r\n    CheckpointManager manager = new CheckpointManager(bridgeConstants.getBtcParams(), checkpoints);\r\n    long time = getActiveFederation().getCreationTime().toEpochMilli();\r\n    time -= 86400 * 7;\r\n    return manager.getCheckpointBefore(time);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxDocument.getLanguageIsMarkup",
	"Comment": "returns whether the current language is a markup language, such as\thtml, xml or php.",
	"Method": "boolean getLanguageIsMarkup(){\r\n    return tokenMaker.isMarkupLanguage();\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testCourse2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testCourse2Parse(){\r\n    LOG.debug(\"testCourse2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/courses2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    SyndEntry entry = entries.get(0);\r\n    Course course = (Course) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", course.getImageLinks()[0].toString());\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    cal.set(2005, 10, 30, 0, 0, 0);\r\n    Assert.assertEquals(\"Course Date\", cal.getTime(), course.getExpirationDate());\r\n    String[] labels = new String[] { \"robots\", \"society\", \"computers\" };\r\n    this.assertEquals(\"Labels\", labels, course.getLabels());\r\n    cal.set(2005, 7, 19, 8, 30, 00);\r\n    Assert.assertEquals(\"Start Time\", cal.getTime(), course.getCourseDateRange().getStart());\r\n    cal.set(2005, 11, 20, 9, 45, 00);\r\n    Assert.assertEquals(\"End Time\", cal.getTime(), course.getCourseDateRange().getEnd());\r\n    Assert.assertEquals(\"Course Number\", \"CS 230\", course.getCourseNumber());\r\n    Assert.assertEquals(\"Coutse Times\", \"MWF 08:30-09:00\", course.getCourseTimes());\r\n    this.assertEquals(\"Subject\", new String[] { \"computer science\" }, course.getSubjects());\r\n    Assert.assertEquals(\"University\", \"Johnson State\", course.getUniversity());\r\n    entry = entries.get(1);\r\n    course = (Course) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", course.getImageLinks()[0].toString());\r\n    cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    cal.set(2005, 10, 30, 0, 0, 0);\r\n    Assert.assertEquals(\"Course Date\", cal.getTime(), course.getExpirationDate());\r\n    labels = new String[] { \"film\", \"video\", \"documentary\" };\r\n    this.assertEquals(\"Labels\", labels, course.getLabels());\r\n    cal.set(2005, 7, 19, 8, 30, 00);\r\n    Assert.assertEquals(\"Start Time\", cal.getTime(), course.getCourseDateRange().getStart());\r\n    cal.set(2005, 11, 20, 9, 45, 00);\r\n    Assert.assertEquals(\"End Time\", cal.getTime(), course.getCourseDateRange().getEnd());\r\n    Assert.assertEquals(\"Course Number\", \"FS 192\", course.getCourseNumber());\r\n    Assert.assertEquals(\"Coutse Times\", \"TTh 14:00-16:00\", course.getCourseTimes());\r\n    Assert.assertEquals(\"Subject\", \"film\", course.getSubjects()[0]);\r\n    Assert.assertEquals(\"University\", \"Johnson State\", course.getUniversity());\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.newResource",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Entity newResource(Entity container,String id,Object[] others,Entity newResource,Entity container,Element element,Entity newResource,Entity container,Entity other){\r\n    return new BaseCalendarEventEdit((Calendar) container, (CalendarEvent) other);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.NonoProcessor.hasComplete",
	"Comment": "returns true if this nonoprocessor has completed normally.",
	"Method": "boolean hasComplete(){\r\n    return subscribers.get() == TERMINATED && error == null;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.prepareInlineForContentReview",
	"Comment": "takes the inline submission, prepares it as an attachment to the submission and queues the attachment with the content review service",
	"Method": "void prepareInlineForContentReview(String text,AssignmentSubmission submission,SessionState state,User student){\r\n    Set<String> attachments = submission.getAttachments();\r\n    for (String attachment : attachments) {\r\n        Reference reference = entityManager.newReference(attachment);\r\n        ResourceProperties referenceProperties = reference.getProperties();\r\n        if (\"true\".equals(referenceProperties.getProperty(AssignmentConstants.PROP_INLINE_SUBMISSION))) {\r\n            attachments.remove(attachment);\r\n        }\r\n    }\r\n    User currentUser = userDirectoryService.getCurrentUser();\r\n    String currentDisplayName = currentUser.getDisplayId();\r\n    String siteId = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    SimpleDateFormat dform = ((SimpleDateFormat) DateFormat.getDateInstance());\r\n    dform.applyPattern(\"yyyy-MM-dd_HH-mm-ss\");\r\n    StringBuilder sb_resourceId = new StringBuilder(\"InlineSub_\");\r\n    String u = \"_\";\r\n    sb_resourceId.append(submission.getAssignment().getId()).append(u).append(currentDisplayName).append(u);\r\n    boolean isOnBehalfOfStudent = student != null && !student.equals(currentUser);\r\n    if (isOnBehalfOfStudent) {\r\n        sb_resourceId.append(\"for_\").append(student.getDisplayId()).append(u);\r\n    }\r\n    sb_resourceId.append(dform.format(new Date()));\r\n    String fileExtension = \".html\";\r\n    String toolName = \"Assignments\";\r\n    int maxUuidLength = 36;\r\n    int esl = Entity.SEPARATOR.length();\r\n    int attachmentCollectionLength = ContentHostingService.ATTACHMENTS_COLLECTION.length() + siteId.length() + esl + toolName.length() + esl + maxUuidLength + esl;\r\n    int maxChars = ContentHostingService.MAXIMUM_RESOURCE_ID_LENGTH - attachmentCollectionLength - fileExtension.length() - 1;\r\n    String resourceId = StringUtils.substring(sb_resourceId.toString(), 0, maxChars) + fileExtension;\r\n    ResourcePropertiesEdit inlineProps = contentHostingService.newResourceProperties();\r\n    inlineProps.addProperty(ResourceProperties.PROP_DISPLAY_NAME, rb.getString(\"submission.inline\"));\r\n    inlineProps.addProperty(ResourceProperties.PROP_DESCRIPTION, resourceId);\r\n    inlineProps.addProperty(AssignmentConstants.PROP_INLINE_SUBMISSION, \"true\");\r\n    String toHtml = \"<html><head><\/head><body>\" + text + \"<\/body><\/html>\";\r\n    InputStream contentStream = new ByteArrayInputStream(toHtml.getBytes());\r\n    String contentType = \"text/html\";\r\n    SecurityAdvisor sa = createSubmissionSecurityAdvisor();\r\n    try {\r\n        securityService.pushAdvisor(sa);\r\n        ContentResource attachment = contentHostingService.addAttachmentResource(resourceId, siteId, toolName, contentType, contentStream, inlineProps);\r\n        String contentUserId = isOnBehalfOfStudent ? student.getId() : currentUser.getId();\r\n        contentReviewService.queueContent(contentUserId, siteId, AssignmentReferenceReckoner.reckoner().assignment(submission.getAssignment()).reckon().getReference(), Collections.singletonList(attachment));\r\n        try {\r\n            Reference ref = entityManager.newReference(contentHostingService.getReference(attachment.getId()));\r\n            attachments.add(ref.getReference());\r\n            assignmentService.updateSubmission(submission);\r\n        } catch (Exception e) {\r\n            log.warn(this + \"prepareInlineForContentReview() cannot find reference for \" + attachment.getId() + e.getMessage());\r\n        }\r\n    } catch (PermissionException e) {\r\n        addAlert(state, rb.getString(\"notpermis4\"));\r\n    } catch (RuntimeException e) {\r\n        if (contentHostingService.ID_LENGTH_EXCEPTION.equals(e.getMessage())) {\r\n            addAlert(state, rb.getFormattedMessage(\"alert.toolong\", resourceId));\r\n        }\r\n    } catch (ServerOverloadException e) {\r\n        log.debug(this + \".prepareInlineForContentReview() ***** DISK IO Exception ***** \" + e.getMessage());\r\n        addAlert(state, rb.getString(\"failed.diskio\"));\r\n    } catch (Exception ignore) {\r\n        log.debug(this + \".prepareInlineForContentReview() ***** Unknown Exception ***** \" + ignore.getMessage());\r\n        addAlert(state, rb.getString(\"failed\"));\r\n    } finally {\r\n        securityService.popAdvisor(sa);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RecordableTextAction.isRecordable",
	"Comment": "returns whether or not this action will be recorded and replayed in\ta macro.",
	"Method": "boolean isRecordable(){\r\n    return isRecordable;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextArea.getPopupMenu",
	"Comment": "returns the popup menu for this component, lazily creating it if\tnecessary.",
	"Method": "JPopupMenu getPopupMenu(){\r\n    if (!popupMenuCreated) {\r\n        popupMenu = createPopupMenu();\r\n        if (popupMenu != null) {\r\n            ComponentOrientation orientation = ComponentOrientation.getOrientation(Locale.getDefault());\r\n            popupMenu.applyComponentOrientation(orientation);\r\n        }\r\n        popupMenuCreated = true;\r\n    }\r\n    return popupMenu;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.NSISTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = STRING;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = CHAR_LITERAL;\r\n            break;\r\n        case Token.LITERAL_BACKQUOTE:\r\n            state = BACKTICKS;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            break;\r\n    }\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.fromSingle",
	"Comment": "wrap a single, ignore its success value and terminate ifthe source single terminates.",
	"Method": "Nono fromSingle(SingleSource<?> source){\r\n    ObjectHelper.requireNonNull(source, \"source is null\");\r\n    return onAssembly(new NonoFromSingle(source));\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesBrowseItem.setInheritedGroups",
	"Comment": "replace the current list of groups with this list of group objects representing the groups that have access to this item.",
	"Method": "void setInheritedGroups(Collection groups){\r\n    if (groups == null) {\r\n        return;\r\n    }\r\n    if (m_oldInheritedGroups == null) {\r\n        m_oldInheritedGroups = new Vector();\r\n    }\r\n    m_oldInheritedGroups.clear();\r\n    Iterator it = groups.iterator();\r\n    while (it.hasNext()) {\r\n        Object obj = it.next();\r\n        if (obj instanceof Group && !inheritsGroup(((Group) obj).getReference())) {\r\n            m_oldInheritedGroups.add(obj);\r\n        } else if (obj instanceof String && !hasGroup((String) obj)) {\r\n            addInheritedGroup((String) obj);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera1Base.enableAudio",
	"Comment": "enable a muted microphone, can be called before, while and after stream.",
	"Method": "void enableAudio(){\r\n    microphoneManager.unMute();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.checkQuartzJobAndTrigger",
	"Comment": "check whether there is an quartz job with active trigger for the specified job bean",
	"Method": "boolean checkQuartzJobAndTrigger(String jobBeanName){\r\n    boolean rv = false;\r\n    Scheduler scheduler = schedulerManager.getScheduler();\r\n    try {\r\n        Set<JobKey> jobKeys = scheduler.getJobKeys(null);\r\n        for (JobKey key : jobKeys) {\r\n            JobDetail jobDetail = scheduler.getJobDetail(key);\r\n            String beanName = jobDetail.getJobDataMap().getString(JobBeanWrapper.SPRING_BEAN_NAME);\r\n            if (jobBeanName != null && jobBeanName.equals(beanName)) {\r\n                List<? extends Trigger> triggers = scheduler.getTriggersOfJob(key);\r\n                if (!triggers.isEmpty()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    } catch (SchedulerException e) {\r\n        log.warn(\"{} exception to get Scheduler Jobs {}\", this, e.getMessage());\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TextEditorPane.isModifiedOutsideEditor",
	"Comment": "returns whether the text file has been modified outside of this editor\tsince the last load or save operation.note that if this is a remote\tfile, this method will always return false.\tthis method may be used by applications to implement a reloading\tfeature, where the user is prompted to reload a file if it has been\tmodified since their last open or save.",
	"Method": "boolean isModifiedOutsideEditor(){\r\n    return loc.getActualLastModified() > getLastSaveOrLoadTime();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.fireActiveLineRangeEvent",
	"Comment": "notifies all listeners that the active line range has changed.",
	"Method": "void fireActiveLineRangeEvent(int min,int max){\r\n    ActiveLineRangeEvent e = null;\r\n    Object[] listeners = listenerList.getListenerList();\r\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\r\n        if (listeners[i] == ActiveLineRangeListener.class) {\r\n            if (e == null) {\r\n                e = new ActiveLineRangeEvent(this, min, max);\r\n            }\r\n            ((ActiveLineRangeListener) listeners[i + 1]).activeLineRangeChanged(e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JSPTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.IniTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.mapError",
	"Comment": "maps the upstream error into another throwable via a function.",
	"Method": "Nono mapError(Function<? super Throwable, ? extends Throwable> mapper){\r\n    ObjectHelper.requireNonNull(mapper, \"mapper is null\");\r\n    return onAssembly(new NonoMapError(this, mapper));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.doAfterNext",
	"Comment": "executes a callback after the value is emitted to downstream.",
	"Method": "Solo<T> doAfterNext(Consumer<? super T> onAfterNext){\r\n    ObjectHelper.requireNonNull(onAfterNext, \"onAfterNext is null\");\r\n    return onAssembly(new SoloDoOnLifecycle<T>(this, Functions.emptyConsumer(), onAfterNext, Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.AtomClientServerTest.testEntryPostWithCategories",
	"Comment": "test posting an entry to every available collection with a fixed and an unfixed category ifserver support allows, then cleanup.",
	"Method": "void testEntryPostWithCategories(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element2 : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element2;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element3 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element3;\r\n            if (col.accepts(Collection.ENTRY_TYPE)) {\r\n                final ClientEntry m1 = col.createEntry();\r\n                m1.setTitle(\"Test post\");\r\n                final Content c = new Content();\r\n                c.setValue(\"This is a test post\");\r\n                c.setType(\"html\");\r\n                m1.setContent(c);\r\n                Category fixedCat = null;\r\n                Category unfixedCat = null;\r\n                final List<Category> entryCats = new ArrayList<Category>();\r\n                for (int i = 0; i < col.getCategories().size(); i++) {\r\n                    final Categories cats = col.getCategories().get(i);\r\n                    if (cats.isFixed() && fixedCat == null) {\r\n                        final String scheme = cats.getScheme();\r\n                        fixedCat = cats.getCategories().get(0);\r\n                        if (fixedCat.getScheme() == null) {\r\n                            fixedCat.setScheme(scheme);\r\n                        }\r\n                        entryCats.add(fixedCat);\r\n                    } else if (!cats.isFixed() && unfixedCat == null) {\r\n                        final String scheme = cats.getScheme();\r\n                        unfixedCat = new Category();\r\n                        unfixedCat.setScheme(scheme);\r\n                        unfixedCat.setTerm(\"tagster\");\r\n                        entryCats.add(unfixedCat);\r\n                    }\r\n                }\r\n                m1.setCategories(entryCats);\r\n                col.addEntry(m1);\r\n                final ClientEntry m2 = col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                if (fixedCat != null) {\r\n                    boolean foundCat = false;\r\n                    for (final Object element : m2.getCategories()) {\r\n                        final Category cat = (Category) element;\r\n                        if (cat.getTerm().equals(fixedCat.getTerm())) {\r\n                            foundCat = true;\r\n                        }\r\n                    }\r\n                    assertTrue(foundCat);\r\n                }\r\n                if (unfixedCat != null) {\r\n                    boolean foundCat = false;\r\n                    for (final Object element : m2.getCategories()) {\r\n                        final Category cat = (Category) element;\r\n                        if (cat.getTerm().equals(unfixedCat.getTerm())) {\r\n                            foundCat = true;\r\n                        }\r\n                    }\r\n                    assertTrue(foundCat);\r\n                }\r\n                m2.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.SectionCategoryEntityProvider.getEntities",
	"Comment": "get all section categories. wraps coursemanagementservice.getsectioncategories.",
	"Method": "List getEntities(EntityReference ref,Search search){\r\n    validateUser();\r\n    return cmService.getSectionCategories();\r\n}"
}, {
	"Path": "restx.factory.alternative.AlternativeTest.should_use_alternative_for_provided_named_component_using_same_name",
	"Comment": "this test uses a named component provided by a module, in order to create an alternative, it has to use the same\t\tname as the component.",
	"Method": "void should_use_alternative_for_provided_named_component_using_same_name(){\r\n    Factory factory = Factory.newInstance();\r\n    TestComponentsFromModule.SomeOtherInterface component = factory.getComponent(Name.of(TestComponentsFromModule.SomeOtherInterface.class, \"restx.test.component.productionNamed\"));\r\n    assertThat(component.mode()).isEqualTo(\"production\");\r\n    overrideComponents().set(\"restx.test.alternatives\", \"true\");\r\n    factory = Factory.newInstance();\r\n    component = factory.getComponent(Name.of(TestComponentsFromModule.SomeOtherInterface.class, \"restx.test.component.productionNamed\"));\r\n    assertThat(component.mode()).isEqualTo(\"dev\");\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.nextTabStop",
	"Comment": "returns the next tab stop position after a given reference position.\tthis implementation does not support things like centering so it\tignores the taboffset argument.",
	"Method": "float nextTabStop(float x,int tabOffset){\r\n    if (tabSize == 0) {\r\n        return x;\r\n    }\r\n    int ntabs = (((int) x) - tabBase) / tabSize;\r\n    return tabBase + ((ntabs + 1f) * tabSize);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport.setDelay",
	"Comment": "sets the delay between the last caret position change and when the\ttext is scanned for matching identifiers.a delay is needed to prevent\trepeated scanning while the user is typing.",
	"Method": "void setDelay(int delay){\r\n    timer.setInitialDelay(delay);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ActionScriptTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.Gradebook.setCourseLetterGradeDisplayed",
	"Comment": "set whether or not the letter grade should be displayed. only consulted if course grade is displayed.",
	"Method": "void setCourseLetterGradeDisplayed(boolean courseLetterGradeDisplayed){\r\n    this.courseLetterGradeDisplayed = courseLetterGradeDisplayed;\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentModuleImplTest.testContentItems",
	"Comment": "test of getcontentitems method, of class com.totsp.xml.syndication.content.contentmoduleimpl.",
	"Method": "void testContentItems(){\r\n    LOG.debug(\"testContentItems\");\r\n    module.setContentItems(contentItems);\r\n    assertTrue(module.getContentItems().equals(contentItems));\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.ExclusionSeqRecurrenceRule.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element rule = doc.createElement(\"ex-rule\");\r\n    ((Element) stack.peek()).appendChild(rule);\r\n    rule.setAttribute(\"class\", \"org.chefproject.osid.calendar.ExclusionSeqRecurrenceRule\");\r\n    rule.setAttribute(\"name\", \"ExclusionSeqRecurrenceRule\");\r\n    for (Iterator iSeq = m_exclusions.iterator(); iSeq.hasNext(); ) {\r\n        Integer seq = (Integer) iSeq.next();\r\n        Element exElement = doc.createElement(\"exclude\");\r\n        rule.appendChild(exElement);\r\n        exElement.setAttribute(\"sequence\", seq.toString());\r\n    }\r\n    return rule;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DelphiTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.repeat",
	"Comment": "repeats this perhaps until the given boolean supplier returns true when anrepeat iteration of this perhaps completes.",
	"Method": "Flowable<T> repeat(Flowable<T> repeat,long times,Flowable<T> repeat,BooleanSupplier stop){\r\n    return Flowable.fromPublisher(this).repeatUntil(stop);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getFileSize",
	"Comment": "filesize is the number of bytes of the media object. it is an optional attribute.",
	"Method": "Long getFileSize(){\r\n    return fileSize;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.zip",
	"Comment": "combines the perhaps values of all the sources via a zipper function into asingle resulting value.",
	"Method": "Perhaps<R> zip(Iterable<? extends Perhaps<? extends T>> sources,Function<? super Object[], ? extends R> zipper){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.requireNonNull(zipper, \"zipper is null\");\r\n    return onAssembly(new PerhapsZipIterable<T, R>(sources, zipper));\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.build_instructor_new_edit_assignment_context",
	"Comment": "build the instructor view of creating a new assignment or editing an existing one",
	"Method": "String build_instructor_new_edit_assignment_context(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    state.removeAttribute(CALENDAR_TOOL_EXIST);\r\n    state.removeAttribute(ADDITIONAL_CALENDAR_TOOL_READY);\r\n    initState(state, portlet, (JetspeedRunData) data);\r\n    context.put(\"enableAnonGrading\", serverConfigurationService.getBoolean(SAK_PROP_ENABLE_ANON_GRADING, false));\r\n    boolean forceAnonGrading = false;\r\n    try {\r\n        Site site = siteService.getSite((String) state.getAttribute(STATE_CONTEXT_STRING));\r\n        forceAnonGrading = site.getProperties().getBooleanProperty(SAK_PROP_FORCE_ANON_GRADING);\r\n    } catch (EntityPropertyTypeException | EntityPropertyNotDefinedException | SakaiException se) {\r\n        log.debug(\"Failed to find if anonymous grading is forced.\");\r\n    }\r\n    context.put(\"forceAnonGrading\", forceAnonGrading);\r\n    String assignmentId = (String) state.getAttribute(EDIT_ASSIGNMENT_ID);\r\n    if (assignmentId != null) {\r\n        Assignment a = getAssignment(assignmentId, \"build_instructor_new_edit_assignment_context\", state);\r\n        if (a != null) {\r\n            context.put(\"assignmentId\", assignmentId);\r\n            context.put(\"assignment\", a);\r\n            if (a.getIsGroup()) {\r\n                Collection<String> _dupUsers = usersInMultipleGroups(a);\r\n                if (_dupUsers.size() > 0)\r\n                    context.put(\"multipleGroupUsers\", _dupUsers);\r\n            }\r\n        }\r\n    }\r\n    setAssignmentFormContext(state, context);\r\n    context.put(\"fField\", state.getAttribute(NEW_ASSIGNMENT_FOCUS));\r\n    context.put(\"group_submissions_enabled\", serverConfigurationService.getBoolean(\"assignment.group.submission.enabled\", true));\r\n    context.put(\"visible_date_enabled\", serverConfigurationService.getBoolean(\"assignment.visible.date.enabled\", false));\r\n    String sortedBy = (String) state.getAttribute(SORTED_BY);\r\n    String sortedAsc = (String) state.getAttribute(SORTED_ASC);\r\n    context.put(\"sortedBy\", sortedBy);\r\n    context.put(\"sortedAsc\", sortedAsc);\r\n    String template = (String) getContext(data).get(\"template\");\r\n    return template + TEMPLATE_INSTRUCTOR_NEW_EDIT_ASSIGNMENT;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        case Token.COMMENT_DOCUMENTATION:\r\n            state = DOCCOMMENT;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.convertTabsToSpaces",
	"Comment": "converts all instances of a tab into a number of spaces equivalent\tto a tab in this text area.",
	"Method": "void convertTabsToSpaces(){\r\n    int caretPosition = getCaretPosition();\r\n    int tabSize = getTabSize();\r\n    StringBuilder tabInSpaces = new StringBuilder();\r\n    for (int i = 0; i < tabSize; i++) {\r\n        tabInSpaces.append(' ');\r\n    }\r\n    String text = getText();\r\n    setText(text.replaceAll(\"\\t\", tabInSpaces.toString()));\r\n    setCaretPosition(caretPosition);\r\n}"
}, {
	"Path": "org.sakaibrary.osid.repository.xserver.AssetIterator.createAssets",
	"Comment": "this method parses the xml stringbuilder and creates assets, records\tand parts in the repository with the given repositoryid.",
	"Method": "void createAssets(java.io.ByteArrayInputStream xml,org.osid.shared.Id repositoryId){\r\n    this.repositoryId = repositoryId;\r\n    recordStructureId = RecordStructure.getInstance().getId();\r\n    textBuffer = new StringBuilder();\r\n    javax.xml.parsers.SAXParserFactory factory;\r\n    javax.xml.parsers.SAXParser saxParser;\r\n    factory = javax.xml.parsers.SAXParserFactory.newInstance();\r\n    factory.setNamespaceAware(true);\r\n    try {\r\n        saxParser = factory.newSAXParser();\r\n        saxParser.parse(xml, this);\r\n        xml.close();\r\n    } catch (SAXParseException spe) {\r\n        Exception x = spe;\r\n        if (spe.getException() != null) {\r\n            x = spe.getException();\r\n        }\r\n        log.warn(\"createAssets() parsing exception: \" + spe.getMessage() + \" - xml line \" + spe.getLineNumber() + \", uri \" + spe.getSystemId(), x);\r\n    } catch (SAXException sxe) {\r\n        Exception x = sxe;\r\n        if (sxe.getException() != null) {\r\n            x = sxe.getException();\r\n        }\r\n        log.warn(\"createAssets() SAX exception: \" + sxe.getMessage(), x);\r\n    } catch (ParserConfigurationException pce) {\r\n        log.warn(\"createAssets() SAX parser cannot be built with \" + \"specified options\");\r\n    } catch (IOException ioe) {\r\n        log.warn(\"createAssets() IO exception\", ioe);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.TemplateParseUtil.preprocessTemplates",
	"Comment": "process the templates before attempting to match them, this is here so we can reduce the load of reprocessing the same templates over and over",
	"Method": "List<PreProcessedTemplate> preprocessTemplates(List<Template> templates){\r\n    if (templates == null) {\r\n        templates = defaultTemplates;\r\n    }\r\n    List<PreProcessedTemplate> analyzedTemplates = new ArrayList<PreProcessedTemplate>();\r\n    for (Template t : templates) {\r\n        analyzedTemplates.add(preprocessTemplate(t));\r\n    }\r\n    return analyzedTemplates;\r\n}"
}, {
	"Path": "co.rsk.net.NodeBlockProcessor.processBlockRequest",
	"Comment": "processblockrequest sends a requested block to a peer if the block is available.",
	"Method": "void processBlockRequest(MessageChannel sender,long requestId,byte[] hash){\r\n    logger.trace(\"Processing get block by hash {} {} from {}\", requestId, Hex.toHexString(hash).substring(0, 10), sender.getPeerNodeID().toString());\r\n    final Block block = blockSyncService.getBlockFromStoreOrBlockchain(hash);\r\n    if (block == null) {\r\n        return;\r\n    }\r\n    nodeInformation.addBlockToNode(new Keccak256(hash), sender.getPeerNodeID());\r\n    sender.sendMessage(new BlockResponseMessage(requestId, block));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.setAuthor",
	"Comment": "sets the feed author.this method is a convenience method, it maps to the dublin core module creator.",
	"Method": "void setAuthor(String author){\r\n    getDCModule().setCreator(author);\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testNews2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testNews2Parse(){\r\n    LOG.debug(\"testNews2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/news2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Article module = (Article) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2007, 2, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"news\", \"old\" }, module.getLabels());\r\n    Assert.assertEquals(\"Source\", \"Journal\", module.getNewsSource());\r\n    cal.set(1961, 3, 12, 0, 0, 0);\r\n    Assert.assertEquals(\"Pub Date\", cal.getTime(), module.getPublishDate());\r\n    this.assertEquals(\"Authors\", new String[] { \"James Smith\" }, module.getAuthors());\r\n    Assert.assertEquals(\"Pages\", new Integer(1), module.getPages());\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getDescription",
	"Comment": "gets the dublincore module description. convenience method that can be used to obtain thefirst item, null if none.",
	"Method": "String getDescription(){\r\n    return Lists.firstEntry(description);\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.DateParser.parseUsingMask",
	"Comment": "parses a date out of a string using an array of masks.it uses the masks in order until one of them succedes or all fail.",
	"Method": "Date parseUsingMask(String[] masks,String sDate,Locale locale){\r\n    if (sDate != null) {\r\n        sDate = sDate.trim();\r\n    }\r\n    ParsePosition pp = null;\r\n    Date d = null;\r\n    for (int i = 0; d == null && i < masks.length; i++) {\r\n        final DateFormat df = new SimpleDateFormat(masks[i], locale);\r\n        df.setLenient(true);\r\n        try {\r\n            pp = new ParsePosition(0);\r\n            d = df.parse(sDate, pp);\r\n            if (pp.getIndex() != sDate.length()) {\r\n                d = null;\r\n            }\r\n        } catch (final Exception ex1) {\r\n        }\r\n    }\r\n    return d;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getHyperlinksEnabled",
	"Comment": "returns whether hyperlinks are enabled for this text area.",
	"Method": "boolean getHyperlinksEnabled(){\r\n    return hyperlinksEnabled;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.SectionCategoryEntityProvider.get",
	"Comment": "get a section category by code. wraps coursemanagementservice.getsectioncategorydescription.",
	"Method": "Object get(String eid){\r\n    String description = cmService.getSectionCategoryDescription(eid);\r\n    if (description == null)\r\n        return null;\r\n    SectionCategoryData data = new SectionCategoryData();\r\n    data.code = eid;\r\n    data.description = description;\r\n    return data;\r\n}"
}, {
	"Path": "org.tsugi.lti2.ToolProxy.getMessageOfType",
	"Comment": "retrieve a particular message type from an individual resource handler",
	"Method": "JSONObject getMessageOfType(String messageType,JSONObject getMessageOfType,JSONObject resourceHandler,String messageType){\r\n    if (resourceHandler == null || messageType == null || messageType.length() < 1) {\r\n        return null;\r\n    }\r\n    JSONArray messages = getArray(resourceHandler, LTI2Constants.MESSAGE);\r\n    if (messages == null)\r\n        return null;\r\n    for (Object m : messages) {\r\n        if (!(m instanceof JSONObject))\r\n            return null;\r\n        JSONObject message = (JSONObject) m;\r\n        JSONArray message_type_array = getArray(message, LTI2Constants.MESSAGE_TYPE);\r\n        if (message_type_array == null)\r\n            continue;\r\n        for (Object message_type : message_type_array) {\r\n            if (!(message_type instanceof String))\r\n                continue;\r\n            if (((String) message_type).equals(messageType))\r\n                return message;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.getMessagesByGroups",
	"Comment": "this get the whole list of announcement, find their groups, and list them based on group attribute",
	"Method": "List<AnnouncementWrapper> getMessagesByGroups(Site site,AnnouncementChannel defaultChannel,Filter filter,boolean ascending,AnnouncementActionState state,VelocityPortlet portlet){\r\n    List<AnnouncementWrapper> messageList = getMessages(defaultChannel, filter, ascending, state, portlet);\r\n    List<AnnouncementWrapper> rv = new Vector();\r\n    for (int i = 0; i < messageList.size(); i++) {\r\n        AnnouncementWrapper aMessage = messageList.get(i);\r\n        String pubview = aMessage.getProperties().getProperty(ResourceProperties.PROP_PUBVIEW);\r\n        if (pubview != null && Boolean.valueOf(pubview).booleanValue()) {\r\n            aMessage.setRange(rb.getString(\"range.public\"));\r\n        } else {\r\n            if (aMessage.getAnnouncementHeader().getAccess().equals(MessageHeader.MessageAccess.CHANNEL)) {\r\n                aMessage.setRange(rb.getString(\"range.allgroups\"));\r\n            } else {\r\n                {\r\n                    rv.add(aMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "co.rsk.net.NodeMessageHandler.processBlockMessage",
	"Comment": "processblockmessage processes a blockmessage message, adding the block to the blockchain if appropriate, orforwarding it to peers that are missing the block.",
	"Method": "void processBlockMessage(MessageChannel sender,BlockMessage message){\r\n    final Block block = message.getBlock();\r\n    logger.trace(\"Process block {} {}\", block.getNumber(), block.getShortHash());\r\n    if (block.isGenesis()) {\r\n        logger.trace(\"Skip block processing {} {}\", block.getNumber(), block.getShortHash());\r\n        return;\r\n    }\r\n    long blockNumber = block.getNumber();\r\n    if (this.blockProcessor.isAdvancedBlock(blockNumber)) {\r\n        logger.trace(\"Too advanced block {} {}\", blockNumber, block.getShortHash());\r\n        return;\r\n    }\r\n    Metrics.processBlockMessage(\"start\", block, sender.getPeerNodeID());\r\n    if (!isValidBlock(block)) {\r\n        logger.trace(\"Invalid block {} {}\", blockNumber, block.getShortHash());\r\n        recordEvent(sender, EventType.INVALID_BLOCK);\r\n        return;\r\n    }\r\n    if (blockProcessor.canBeIgnoredForUnclesRewards(block.getNumber())) {\r\n        logger.trace(\"Block ignored: too far from best block {} {}\", blockNumber, block.getShortHash());\r\n        Metrics.processBlockMessage(\"blockIgnored\", block, sender.getPeerNodeID());\r\n        return;\r\n    }\r\n    if (blockProcessor.hasBlockInSomeBlockchain(block.getHash().getBytes())) {\r\n        logger.trace(\"Block ignored: it's included in blockchain {} {}\", blockNumber, block.getShortHash());\r\n        Metrics.processBlockMessage(\"blockIgnored\", block, sender.getPeerNodeID());\r\n        return;\r\n    }\r\n    BlockProcessResult result = this.blockProcessor.processBlock(sender, block);\r\n    Metrics.processBlockMessage(\"blockProcessed\", block, sender.getPeerNodeID());\r\n    tryRelayBlock(sender, block, result);\r\n    recordEvent(sender, EventType.VALID_BLOCK);\r\n    Metrics.processBlockMessage(\"finish\", block, sender.getPeerNodeID());\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseManagementServiceFederatedImpl.setImplList",
	"Comment": "sets the list of implementations to consult.implementations earlier in the list will override later ones.",
	"Method": "void setImplList(List<CourseManagementService> implList){\r\n    this.implList = implList;\r\n}"
}, {
	"Path": "co.rsk.net.BlockStore.hasHeader",
	"Comment": "hasheader returns true if this block store has the header of the corresponding block.",
	"Method": "boolean hasHeader(Keccak256 hash){\r\n    return this.headers.containsKey(hash);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ClojureTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.mapFilter",
	"Comment": "allows mapping or filtering an upstream value through an emitter.",
	"Method": "FlowableTransformer<T, R> mapFilter(BiConsumer<? super T, ? super BasicEmitter<R>> consumer){\r\n    ObjectHelper.requireNonNull(consumer, \"consumer is null\");\r\n    return new FlowableMapFilter<T, R>(null, consumer);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.merge",
	"Comment": "merge the values in arbitrary order from a sequence of solo sources.",
	"Method": "Flowable<T> merge(Iterable<? extends Solo<? extends T>> sources,Flowable<T> merge,Iterable<? extends Solo<? extends T>> sources,int maxConcurrency,Flowable<T> merge,Publisher<? extends Solo<? extends T>> sources,Flowable<T> merge,Publisher<? extends Solo<? extends T>> sources,int maxConcurrency){\r\n    return Flowable.merge(sources, maxConcurrency);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setPublisher",
	"Comment": "sets the dublincore module publisher. convenience method that can be used when there is onlyone publisher to set.",
	"Method": "void setPublisher(String publisher){\r\n    this.publisher = Lists.create(publisher);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MakefileTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.CmProviderHibernateService.getEnrollmentSetByEid",
	"Comment": "needed to get course offering eid in the output for an enrollment set.",
	"Method": "EnrollmentSetCmImpl getEnrollmentSetByEid(String eid){\r\n    HibernateCallback hc = session -> {\r\n        StringBuilder hql = new StringBuilder();\r\n        hql.append(\"from \").append(EnrollmentSetCmImpl.class.getName()).append(\" as obj where obj.eid=:eid\");\r\n        Query q = session.createQuery(hql.toString());\r\n        q.setParameter(\"eid\", eid);\r\n        EnrollmentSetCmImpl result = (EnrollmentSetCmImpl) q.uniqueResult();\r\n        if (result == null) {\r\n            throw new IdNotFoundException(eid, EnrollmentSetCmImpl.class.getName());\r\n        }\r\n        Hibernate.initialize(result.getCourseOffering());\r\n        return result;\r\n    };\r\n    return (EnrollmentSetCmImpl) getHibernateTemplate().execute(hc);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextArea.setCaretStyle",
	"Comment": "sets the style of caret used when in insert or overwrite mode.",
	"Method": "void setCaretStyle(int mode,CaretStyle style){\r\n    if (style == null) {\r\n        style = CaretStyle.THICK_VERTICAL_LINE_STYLE;\r\n    }\r\n    carets[mode] = style;\r\n    if (mode == getTextMode() && getCaret() instanceof ConfigurableCaret) {\r\n        ((ConfigurableCaret) getCaret()).setStyle(style);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.entityprovider.AnnouncementEntityProviderImpl.isMessageWithinPastNDays",
	"Comment": "checks if the given message was posted in the last n days, where n is the value of the maxdaysinpast",
	"Method": "boolean isMessageWithinPastNDays(Message message,int numberOfDaysInPast){\r\n    long timeDeltaMSeconds = timeService.newTime().getTime() - message.getHeader().getDate().getTime();\r\n    long numDays = timeDeltaMSeconds / MILLISECONDS_IN_DAY;\r\n    return (numDays <= numberOfDaysInPast);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.lift",
	"Comment": "map the downstream subscriber into an upstream subscriber.",
	"Method": "Solo<R> lift(Function<Subscriber<? super R>, Subscriber<? super T>> onLift){\r\n    ObjectHelper.requireNonNull(onLift, \"onLift is null\");\r\n    return onAssembly(new SoloLift<T, R>(this, onLift));\r\n}"
}, {
	"Path": "org.ethereum.vm.DataWord.intValueCheck",
	"Comment": "converts this dataword to an int, checking for lost information.if this dataword is out of the possible range for an int resultthen an arithmeticexception is thrown.",
	"Method": "int intValueCheck(){\r\n    if (bitsOccupied() > 31) {\r\n        throw new ArithmeticException();\r\n    }\r\n    return intValue();\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.DisplayBase.setLimitFPSOnFly",
	"Comment": "set limit fps while stream. this will be override when you call to preparevideo method.this could produce a change in iframeinterval.",
	"Method": "void setLimitFPSOnFly(int fps){\r\n    videoEncoder.setFps(fps);\r\n}"
}, {
	"Path": "org.sakaiproject.component.section.sakai.facade.SakaiUtil.convertUser",
	"Comment": "converts a sakai user object into a user object suitable for use in the section\tmanager tool and in section awareness.",
	"Method": "User convertUser(org.sakaiproject.user.api.User sakaiUser){\r\n    UserImpl user = new UserImpl(sakaiUser.getDisplayId(), sakaiUser.getDisplayName(), sakaiUser.getSortName(), sakaiUser.getId());\r\n    return user;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.singlesearch.web2.Web2Query.parseCql",
	"Comment": "parse cql search queries into a crude take on the muse format.",
	"Method": "String parseCql(String cql){\r\n    CqlParser parser;\r\n    String result;\r\n    log.debug(\"Initial CQL Criteria: \" + cql);\r\n    parser = new CqlParser();\r\n    result = parser.doCQL2MetasearchCommand(cql);\r\n    log.debug(\"Processed Result: \" + result);\r\n    return result;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.tool.PermissionsHelperAction.cleanupState",
	"Comment": "remove the state variables used internally, on the way out.",
	"Method": "void cleanupState(SessionState state){\r\n    state.removeAttribute(STATE_REALM_ID);\r\n    state.removeAttribute(STATE_REALM_ROLES_IDS);\r\n    state.removeAttribute(STATE_REALM_EDIT);\r\n    state.removeAttribute(STATE_VIEW_REALM_EDIT);\r\n    state.removeAttribute(STATE_PREFIX);\r\n    state.removeAttribute(STATE_ABILITIES);\r\n    state.removeAttribute(STATE_DESCRIPTION);\r\n    state.removeAttribute(STATE_ROLES);\r\n    state.removeAttribute(STATE_ROLE_ABILITIES);\r\n    state.removeAttribute(STATE_PERMISSION_DESCRIPTIONS);\r\n    state.removeAttribute(STATE_MODE);\r\n    state.removeAttribute(VelocityPortletPaneledAction.STATE_HELPER);\r\n    state.removeAttribute(STATE_GROUP_AWARE);\r\n    VelocityPortletPaneledAction.enableObservers(state);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenImpl.setOffset",
	"Comment": "sets the offset into the document at which this token resides.",
	"Method": "void setOffset(int offset){\r\n    this.offset = offset;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DartTokenMaker.setJavaScriptVersion",
	"Comment": "set the supported javascript version because some keywords were\tintroduced on or after this version.",
	"Method": "void setJavaScriptVersion(String javaScriptVersion){\r\n    jsVersion = javaScriptVersion;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.IniTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "co.rsk.peg.whitelist.LockWhitelist.consume",
	"Comment": "marks the whitelisted address as consumed. this will reduce the number of usages, and if it gets down to zero remaining usages it will remove the address",
	"Method": "void consume(Address address){\r\n    LockWhitelistEntry entry = whitelistedAddresses.get(address);\r\n    if (entry == null) {\r\n        return;\r\n    }\r\n    entry.consume();\r\n    if (entry.isConsumed()) {\r\n        this.remove(address);\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.vm.DataWord.longValueCheck",
	"Comment": "converts this dataword to a long, checking for lost information.if this dataword is out of the possible range for a long resultthen an arithmeticexception is thrown.",
	"Method": "long longValueCheck(){\r\n    if (bitsOccupied() > 63) {\r\n        throw new ArithmeticException();\r\n    }\r\n    return longValue();\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.getCategories",
	"Comment": "returns the feed categories.this method is a convenience method, it maps to the dublin core module subjects.",
	"Method": "List<SyndCategory> getCategories(){\r\n    return new SyndCategoryListFacade(getDCModule().getSubjects());\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.BaseConfigurationService.getConfigurationXml",
	"Comment": "fetch the appropriate xml configuration document for this user",
	"Method": "String getConfigurationXml(){\r\n    SiteOsidConfiguration siteConfig = getSiteOsidConfiguration();\r\n    String configXml = null;\r\n    if (siteConfig != null) {\r\n        configXml = siteConfig.getConfigurationXml();\r\n    }\r\n    if (isNull(configXml)) {\r\n        configXml = m_siteConfigXml;\r\n    }\r\n    return configXml;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil.getScreenBoundsForPoint",
	"Comment": "returns the screen coordinates for the monitor that contains the\tspecified point.this is useful for setups with multiple monitors,\tto ensure that popup windows are positioned properly.",
	"Method": "Rectangle getScreenBoundsForPoint(int x,int y){\r\n    GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n    GraphicsDevice[] devices = env.getScreenDevices();\r\n    for (int i = 0; i < devices.length; i++) {\r\n        GraphicsConfiguration[] configs = devices[i].getConfigurations();\r\n        for (int j = 0; j < configs.length; j++) {\r\n            Rectangle gcBounds = configs[j].getBounds();\r\n            if (gcBounds.contains(x, y)) {\r\n                return gcBounds;\r\n            }\r\n        }\r\n    }\r\n    return env.getMaximumWindowBounds();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CSharpTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "co.rsk.net.BlockNodeInformationTest.createNodeID",
	"Comment": "createnodeid is a convenience function to create a nodeid based on an int.",
	"Method": "NodeID createNodeID(int i){\r\n    return new NodeID(ByteBuffer.allocate(4).putInt(i).array());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.WindowsBatchTokenMaker.addToken",
	"Comment": "checks the token to give it the exact id it deserves before\tbeing passed up to the super method.",
	"Method": "void addToken(Segment segment,int start,int end,int tokenType,int startOffset){\r\n    switch(tokenType) {\r\n        case Token.IDENTIFIER:\r\n            int value = wordsToHighlight.get(segment, start, end);\r\n            if (value != -1)\r\n                tokenType = value;\r\n            break;\r\n    }\r\n    super.addToken(segment, start, end, tokenType, startOffset);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.JoinObservable.and",
	"Comment": "returns a pattern that matches when both observables emit an item.",
	"Method": "Pattern2<T, T2> and(Observable<T2> right){\r\n    return JoinPatterns.and(o, right);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setTitle",
	"Comment": "sets the dublincore module title. convenience method that can be used when there is only onetitle to set.",
	"Method": "void setTitle(String title){\r\n    this.title = Lists.create(title);\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.impl.BaseAnnouncementService.eventId",
	"Comment": "form a tracking event string based on a security function string.",
	"Method": "String eventId(String secure){\r\n    if (StringUtils.isBlank(secure)) {\r\n        try {\r\n            throw new IllegalArgumentException(\"anouncement eventId() input cannot be null or blank\");\r\n        } catch (Exception e) {\r\n            secure = \"INVALID_KEY\";\r\n            log.error(\"Bad call to BaseAnnouncementService.eventId(String) - input string is blank, generating '{}' event name and logging trace\", secure, e);\r\n        }\r\n    }\r\n    return SECURE_ANNC_ROOT + secure;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.WrappedSyntaxView.calculateBreakPosition",
	"Comment": "this is called by the nested wrapped line\tviews to determine the break location.this can\tbe reimplemented to alter the breaking behavior.\tit will either break at word or character boundaries\tdepending upon the break argument given at\tconstruction.",
	"Method": "int calculateBreakPosition(int p0,Token tokenList,float x0){\r\n    int p = p0;\r\n    RSyntaxTextArea textArea = (RSyntaxTextArea) getContainer();\r\n    float currentWidth = getWidth();\r\n    if (currentWidth == Integer.MAX_VALUE) {\r\n        currentWidth = getPreferredSpan(X_AXIS);\r\n    }\r\n    currentWidth = Math.max(currentWidth, MIN_WIDTH);\r\n    Token t = tokenList;\r\n    while (t != null && t.isPaintable()) {\r\n        float tokenWidth = t.getWidth(textArea, this, x0);\r\n        if (tokenWidth > currentWidth) {\r\n            if (p == p0) {\r\n                return t.getOffsetBeforeX(textArea, this, 0, currentWidth);\r\n            }\r\n            return t.isWhitespace() ? p + t.length() : p;\r\n        }\r\n        currentWidth -= tokenWidth;\r\n        x0 += tokenWidth;\r\n        p += t.length();\r\n        t = t.getNextToken();\r\n    }\r\n    return p + 1;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JsonTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doHide_view_student_view",
	"Comment": "action is to hide the student view in the view assignment page",
	"Method": "void doHide_view_student_view(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    state.setAttribute(VIEW_ASSIGNMENT_HIDE_STUDENT_VIEW_FLAG, Boolean.TRUE);\r\n}"
}, {
	"Path": "co.rsk.asm.EVMAssembler.extractInsertBinary",
	"Comment": "to insert an code or a binary string manually by offset, use !num",
	"Method": "String extractInsertBinary(String str){\r\n    if ((str.length() >= 1) && (str.charAt(0) == '!')) {\r\n        return str.substring(1);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.SASTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doView_submission",
	"Comment": "action is to view the content of one specific assignment submission",
	"Method": "void doView_submission(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    resetViewSubmission(state);\r\n    ParameterParser params = data.getParameters();\r\n    String assignmentReference = params.getString(\"assignmentReference\");\r\n    state.setAttribute(VIEW_SUBMISSION_ASSIGNMENT_REFERENCE, assignmentReference);\r\n    User u = (User) state.getAttribute(STATE_USER);\r\n    Assignment a = getAssignment(assignmentReference, \"doView_submission\", state);\r\n    if (a != null && !assignmentService.canSubmit(a)) {\r\n        AssignmentSubmission submission = null;\r\n        try {\r\n            submission = assignmentService.getSubmission(a.getId(), u);\r\n        } catch (PermissionException e) {\r\n            log.warn(\"Could not get submission for assignment: {}, user: {}\", a.getId(), u.getId());\r\n        }\r\n        if (submission != null && a.getTypeOfSubmission() != Assignment.SubmissionType.NON_ELECTRONIC_ASSIGNMENT_SUBMISSION) {\r\n            String submissionReference = AssignmentReferenceReckoner.reckoner().submission(submission).reckon().getReference();\r\n            prepareStudentViewGrade(state, submissionReference);\r\n            return;\r\n        }\r\n    }\r\n    String submitterId = params.get(\"submitterId\");\r\n    String submitterIdInstructor = null;\r\n    submitterIdInstructor = params.getString(\"submitterIdInstructor\");\r\n    try {\r\n        if (securityService.isUserRoleSwapped()) {\r\n            submitterIdInstructor = \"instructor\";\r\n        }\r\n    } catch (IdUnusedException iue) {\r\n        log.warn(this + \":doView_submission: Site not found \" + iue.getMessage());\r\n    }\r\n    if (\"instructor\".equals(submitterIdInstructor)) {\r\n        state.setAttribute(VIEW_SUBMISSION_ASSIGNMENT_INSTRUCTOR, submitterIdInstructor);\r\n    }\r\n    if (submitterId != null && (assignmentService.allowGradeSubmission(assignmentReference))) {\r\n        try {\r\n            u = userDirectoryService.getUser(submitterId);\r\n            state.setAttribute(\"student\", u);\r\n        } catch (UserNotDefinedException ex) {\r\n            log.warn(this + \":doView_submission cannot find user with id \" + submitterId + \" \" + ex.getMessage());\r\n        }\r\n    }\r\n    if (a != null) {\r\n        AssignmentSubmission submission = getSubmission(assignmentReference, u, \"doView_submission\", state);\r\n        if (submission != null) {\r\n            state.setAttribute(VIEW_SUBMISSION_TEXT, submission.getSubmittedText());\r\n            List v = entityManager.newReferenceList();\r\n            submission.getAttachments().forEach(f -> v.add(entityManager.newReference(f)));\r\n            state.setAttribute(ATTACHMENTS, v);\r\n        } else {\r\n            state.setAttribute(ATTACHMENTS, entityManager.newReferenceList());\r\n        }\r\n        assignment_resubmission_option_into_state(a, submission, state);\r\n        String _mode = MODE_STUDENT_VIEW_SUBMISSION;\r\n        if (a.getIsGroup()) {\r\n            Collection<Group> groups = null;\r\n            Site st = null;\r\n            try {\r\n                st = siteService.getSite((String) state.getAttribute(STATE_CONTEXT_STRING));\r\n                groups = getGroupsWithUser(u.getId(), a, st);\r\n                Collection<String> _dupUsers = checkForGroupsInMultipleGroups(a, groups, state, rb.getString(\"group.user.multiple.warning\"));\r\n                if (_dupUsers.size() > 0) {\r\n                    _mode = MODE_STUDENT_VIEW_GROUP_ERROR;\r\n                }\r\n            } catch (IdUnusedException iue) {\r\n                log.warn(this + \":doView_submission: Site not found!\" + iue.getMessage());\r\n            }\r\n        }\r\n        state.setAttribute(STATE_MODE, _mode);\r\n        if (submission != null) {\r\n            LRS_Statement statement = getStatementForViewSubmittedAssignment(submission.getId(), a.getTitle());\r\n            String ref = AssignmentReferenceReckoner.reckoner().submission(submission).reckon().getReference();\r\n            Event event = eventTrackingService.newEvent(AssignmentConstants.EVENT_ACCESS_ASSIGNMENT_SUBMISSION, ref, null, false, NotificationService.NOTI_OPTIONAL, statement);\r\n            eventTrackingService.post(event);\r\n        } else {\r\n            LRS_Statement statement = getStatementForViewAssignment(a.getId(), a.getTitle());\r\n            String ref = AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference();\r\n            Event event = eventTrackingService.newEvent(AssignmentConstants.EVENT_ACCESS_ASSIGNMENT, ref, null, false, NotificationService.NOTI_OPTIONAL, statement);\r\n            eventTrackingService.post(event);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.monthTable",
	"Comment": "construct a hashmap using integer as the key and three character string of the month as the value",
	"Method": "Map<Integer, String> monthTable(){\r\n    Map<Integer, String> n = new HashMap();\r\n    n.put(1, rb.getString(\"jan\"));\r\n    n.put(2, rb.getString(\"feb\"));\r\n    n.put(3, rb.getString(\"mar\"));\r\n    n.put(4, rb.getString(\"apr\"));\r\n    n.put(5, rb.getString(\"may\"));\r\n    n.put(6, rb.getString(\"jun\"));\r\n    n.put(7, rb.getString(\"jul\"));\r\n    n.put(8, rb.getString(\"aug\"));\r\n    n.put(9, rb.getString(\"sep\"));\r\n    n.put(10, rb.getString(\"oct\"));\r\n    n.put(11, rb.getString(\"nov\"));\r\n    n.put(12, rb.getString(\"dec\"));\r\n    return n;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getContributor",
	"Comment": "gets the dublincore module contributor. convenience method that can be used to obtain thefirst item, null if none.",
	"Method": "String getContributor(){\r\n    return Lists.firstEntry(contributors);\r\n}"
}, {
	"Path": "com.rometools.rome.io.XmlReader.isAppXml",
	"Comment": "indicates if the mime type belongs to the application xml family",
	"Method": "boolean isAppXml(String mime){\r\n    return mime != null && (mime.equals(\"application/xml\") || mime.equals(\"application/xml-dtd\") || mime.equals(\"application/xml-external-parsed-entity\") || mime.startsWith(\"application/\") && mime.endsWith(\"+xml\"));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.windowUntil",
	"Comment": "emits elements into a flowable window until the given predicate returns true at whichpoint a new flowable window is emitted.",
	"Method": "FlowableTransformer<T, Flowable<T>> windowUntil(Predicate<? super T> predicate,FlowableTransformer<T, Flowable<T>> windowUntil,Predicate<? super T> predicate,int bufferSize){\r\n    return new FlowableWindowPredicate<T>(null, predicate, FlowableWindowPredicate.Mode.AFTER, bufferSize);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.MWFRecurrenceRule.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element rule = doc.createElement(\"rule\");\r\n    ((Element) stack.peek()).appendChild(rule);\r\n    rule.setAttribute(\"class\", \"org.chefproject.osid.calendar.MWFRecurrenceRule\");\r\n    rule.setAttribute(\"name\", \"MWFRecurrenceRule\");\r\n    setBaseClassXML(rule);\r\n    return rule;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.foldToggled",
	"Comment": "called whenever a fold is collapsed or expanded.this causes the\ttext editor to revalidate.this method is here because of poor design\tand should be removed.",
	"Method": "void foldToggled(Fold fold){\r\n    match = null;\r\n    dotRect = null;\r\n    if (getLineWrap()) {\r\n        SwingUtilities.invokeLater(() -> possiblyUpdateCurrentLineHighlightLocation());\r\n    } else {\r\n        possiblyUpdateCurrentLineHighlightLocation();\r\n    }\r\n    revalidate();\r\n    repaint();\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.RSS10Parser.getRSSNamespace",
	"Comment": "returns the namespace used by rss elements in document of the rss 1.0",
	"Method": "Namespace getRSSNamespace(){\r\n    return Namespace.getNamespace(RSS_URI);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doRestore_confirm_assignment",
	"Comment": "action is to show the restore assigment confirmation screen",
	"Method": "void doRestore_confirm_assignment(RunData data){\r\n    if (!\"POST\".equals(data.getRequest().getMethod())) {\r\n        return;\r\n    }\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String[] assignmentIds = params.getStrings(\"selectedAssignments\");\r\n    if (assignmentIds != null) {\r\n        for (String id : assignmentIds) {\r\n            Assignment a = null;\r\n            try {\r\n                a = assignmentService.getAssignment(id);\r\n                if (a != null) {\r\n                    a.setDeleted(false);\r\n                    assignmentService.updateAssignment(a);\r\n                }\r\n            } catch (IdUnusedException | PermissionException e) {\r\n                addAlert(state, rb.getFormattedMessage(\"youarenot_editAssignment\", id));\r\n                log.warn(e.getMessage());\r\n            }\r\n        }\r\n        if (state.getAttribute(STATE_MESSAGE) == null) {\r\n            state.setAttribute(\"selectedAssignments\", new ArrayList());\r\n            state.setAttribute(STATE_MODE, MODE_LIST_ASSIGNMENTS);\r\n            state.setAttribute(STATE_SELECTED_VIEW, MODE_LIST_ASSIGNMENTS);\r\n        }\r\n    } else {\r\n        addAlert(state, rb.getString(\"youmust6\"));\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.setFunctionManager",
	"Comment": "called by the spring framework to initialize the functionmanager data member specified in the components.xml file via ioc.",
	"Method": "void setFunctionManager(FunctionManager functionManager){\r\n    this.functionManager = functionManager;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.isBlank",
	"Comment": "access marker indicating whether current item is a blank entry",
	"Method": "boolean isBlank(){\r\n    return m_isBlank;\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.model.ChatChannel.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element channel = doc.createElement(\"channel\");\r\n    if (stack.isEmpty()) {\r\n        doc.appendChild(channel);\r\n    } else {\r\n        ((Element) stack.peek()).appendChild(channel);\r\n    }\r\n    stack.push(channel);\r\n    channel.setAttribute(\"context\", getContext());\r\n    channel.setAttribute(\"id\", getId());\r\n    channel.setAttribute(\"description\", getDescription());\r\n    channel.setAttribute(\"title\", getTitle());\r\n    channel.setAttribute(\"creationDate\", Long.toString(getCreationDate().getTime()));\r\n    channel.setAttribute(\"filterType\", getFilterType());\r\n    channel.setAttribute(\"filterParam\", Integer.toString(getFilterParam()));\r\n    channel.setAttribute(\"placementDefaultChannel\", Boolean.toString(isPlacementDefaultChannel()));\r\n    stack.pop();\r\n    return channel;\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.DCModuleParser.parseSubjects",
	"Comment": "utility method to parse a list of subjects out of a list of elements.",
	"Method": "List<DCSubject> parseSubjects(List<Element> eList){\r\n    final List<DCSubject> subjects = new ArrayList<DCSubject>();\r\n    for (final Element eSubject : eList) {\r\n        final Element description = eSubject.getChild(\"Description\", getRDFNamespace());\r\n        if (description != null) {\r\n            final String taxonomy = getTaxonomy(description);\r\n            final List<Element> values = description.getChildren(\"value\", getRDFNamespace());\r\n            for (final Element value : values) {\r\n                final DCSubject subject = new DCSubjectImpl();\r\n                subject.setTaxonomyUri(taxonomy);\r\n                subject.setValue(value.getText());\r\n                subjects.add(subject);\r\n            }\r\n        } else {\r\n            final DCSubject subject = new DCSubjectImpl();\r\n            subject.setValue(eSubject.getText());\r\n            subjects.add(subject);\r\n        }\r\n    }\r\n    return subjects;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.expandDelayError",
	"Comment": "emits elements from the source and then expands them into another layer of publishers, emittingthose items recursively until all publishers become empty with the specified strategy,delaying errors until all sources terminate.",
	"Method": "FlowableTransformer<T, T> expandDelayError(Function<? super T, ? extends Publisher<? extends T>> expander,FlowableTransformer<T, T> expandDelayError,Function<? super T, ? extends Publisher<? extends T>> expander,ExpandStrategy strategy,FlowableTransformer<T, T> expandDelayError,Function<? super T, ? extends Publisher<? extends T>> expander,ExpandStrategy strategy,int capacityHint){\r\n    ObjectHelper.requireNonNull(expander, \"expander is null\");\r\n    ObjectHelper.requireNonNull(strategy, \"strategy is null\");\r\n    ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\r\n    return new FlowableExpand<T>(null, expander, strategy, capacityHint, true);\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.cover.AnnouncementService.cancelMessage",
	"Comment": "cancel the changes made to a messageedit object, and release the lock. the messageedit is disabled, and not to be used after this call.",
	"Method": "void cancelMessage(org.sakaiproject.message.api.MessageEdit param0){\r\n    org.sakaiproject.announcement.api.AnnouncementService service = getInstance();\r\n    if (service == null)\r\n        return;\r\n    service.cancelMessage(param0);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.doFinally",
	"Comment": "executes the callback exactly if the upstream terminates orthe downstream cancels the sequence.",
	"Method": "Nono doFinally(Action onFinally){\r\n    ObjectHelper.requireNonNull(onFinally, \"action is null\");\r\n    return onAssembly(new NonoDoFinally(this, onFinally));\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doSet_defaultNotGradedNonElectronicScore",
	"Comment": "set default score for all ungraded non electronic submissions",
	"Method": "void doSet_defaultNotGradedNonElectronicScore(RunData data){\r\n    if (!\"POST\".equals(data.getRequest().getMethod())) {\r\n        return;\r\n    }\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String grade = StringUtils.trimToNull(params.getString(\"defaultGrade\"));\r\n    if (grade == null) {\r\n        addAlert(state, rb.getString(\"plespethe2\"));\r\n    }\r\n    String assignmentId = (String) state.getAttribute(EXPORT_ASSIGNMENT_REF);\r\n    Assignment a = getAssignment(assignmentId, \"doSet_defaultNotGradedNonElectronicScore\", state);\r\n    if (a != null) {\r\n        if (a.getTypeOfGrade() == SCORE_GRADE_TYPE) {\r\n            if (a.getScaleFactor() == null)\r\n                a.setScaleFactor(assignmentService.getScaleFactor());\r\n            validPointGrade(state, grade, a.getScaleFactor());\r\n            if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                int maxGrade = a.getMaxGradePoint();\r\n                try {\r\n                    if (Integer.parseInt(scalePointGrade(state, grade, a.getScaleFactor())) > maxGrade) {\r\n                        if (state.getAttribute(GRADE_GREATER_THAN_MAX_ALERT) == null) {\r\n                            addAlert(state, rb.getFormattedMessage(\"grad2\", grade, displayGrade(state, String.valueOf(maxGrade), a.getScaleFactor())));\r\n                            state.setAttribute(GRADE_GREATER_THAN_MAX_ALERT, Boolean.TRUE);\r\n                        } else {\r\n                            state.removeAttribute(GRADE_GREATER_THAN_MAX_ALERT);\r\n                        }\r\n                    }\r\n                } catch (NumberFormatException e) {\r\n                    log.warn(this + \":setDefaultNotGradedNonElectronicScore \" + e.getMessage());\r\n                    alertInvalidPoint(state, grade, a.getScaleFactor());\r\n                }\r\n            }\r\n            if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                try {\r\n                    a.getProperties().put(GRADE_NO_SUBMISSION_DEFAULT_GRADE, grade);\r\n                    assignmentService.updateAssignment(a);\r\n                } catch (PermissionException e) {\r\n                    log.warn(\"Could not update assignment: {}, {}\", a.getId(), e.getMessage());\r\n                }\r\n            }\r\n        }\r\n        if (grade != null && state.getAttribute(STATE_MESSAGE) == null) {\r\n            if (a.getTypeOfGrade() == SCORE_GRADE_TYPE) {\r\n                grade = scalePointGrade(state, grade, a.getScaleFactor());\r\n            }\r\n            String aRef = AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference();\r\n            List<AssignmentSubmission> submissions = getFilteredSubmitters(state, aRef);\r\n            for (AssignmentSubmission submission : submissions) {\r\n                if (submission.getSubmitted() && !submission.getGraded()) {\r\n                    submission.setGrade(grade);\r\n                    submission.setGraded(true);\r\n                    submission.setGradedBy(userDirectoryService.getCurrentUser() == null ? null : userDirectoryService.getCurrentUser().getId());\r\n                    try {\r\n                        assignmentService.updateSubmission(submission);\r\n                    } catch (PermissionException e) {\r\n                        log.warn(\"Could not update submission: {}, {}\", submission.getId(), e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return new AbstractMap<String, Object>() {\r\n        public boolean isEmpty() {\r\n            return !resourceProperties.getPropertyNames().hasNext();\r\n        }\r\n        public boolean containsKey(Object key) {\r\n            return resourceProperties.get((String) key) != null;\r\n        }\r\n        public Object get(Object key) {\r\n            return resourceProperties.get((String) key);\r\n        }\r\n        @Override\r\n        public Set<Entry<String, Object>> entrySet() {\r\n            return new AbstractSet<Entry<String, Object>>() {\r\n                @Override\r\n                public Iterator<Entry<String, Object>> iterator() {\r\n                    return new Iterator<Entry<String, Object>>() {\r\n                        private final Iterator<String> propertiesNames = resourceProperties.getPropertyNames();\r\n                        public boolean hasNext() {\r\n                            return propertiesNames.hasNext();\r\n                        }\r\n                        public Entry<String, Object> next() {\r\n                            return new Entry<String, Object>() {\r\n                                private final String key = propertiesNames.next();\r\n                                public String getKey() {\r\n                                    return key;\r\n                                }\r\n                                public Object getValue() {\r\n                                    return resourceProperties.get(key);\r\n                                }\r\n                                public Object setValue(Object value) {\r\n                                    throw new UnsupportedOperationException();\r\n                                }\r\n                            };\r\n                        }\r\n                        public void remove() {\r\n                            throw new UnsupportedOperationException();\r\n                        }\r\n                    };\r\n                }\r\n                @Override\r\n                public int size() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return !resourceProperties.getPropertyNames().hasNext();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return resourceProperties.get((String) key) != null;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return resourceProperties.get((String) key);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return new AbstractSet<Entry<String, Object>>() {\r\n        @Override\r\n        public Iterator<Entry<String, Object>> iterator() {\r\n            return new Iterator<Entry<String, Object>>() {\r\n                private final Iterator<String> propertiesNames = resourceProperties.getPropertyNames();\r\n                public boolean hasNext() {\r\n                    return propertiesNames.hasNext();\r\n                }\r\n                public Entry<String, Object> next() {\r\n                    return new Entry<String, Object>() {\r\n                        private final String key = propertiesNames.next();\r\n                        public String getKey() {\r\n                            return key;\r\n                        }\r\n                        public Object getValue() {\r\n                            return resourceProperties.get(key);\r\n                        }\r\n                        public Object setValue(Object value) {\r\n                            throw new UnsupportedOperationException();\r\n                        }\r\n                    };\r\n                }\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n        @Override\r\n        public int size() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return new Iterator<Entry<String, Object>>() {\r\n        private final Iterator<String> propertiesNames = resourceProperties.getPropertyNames();\r\n        public boolean hasNext() {\r\n            return propertiesNames.hasNext();\r\n        }\r\n        public Entry<String, Object> next() {\r\n            return new Entry<String, Object>() {\r\n                private final String key = propertiesNames.next();\r\n                public String getKey() {\r\n                    return key;\r\n                }\r\n                public Object getValue() {\r\n                    return resourceProperties.get(key);\r\n                }\r\n                public Object setValue(Object value) {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n        public void remove() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return propertiesNames.hasNext();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return new Entry<String, Object>() {\r\n        private final String key = propertiesNames.next();\r\n        public String getKey() {\r\n            return key;\r\n        }\r\n        public Object getValue() {\r\n            return resourceProperties.get(key);\r\n        }\r\n        public Object setValue(Object value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return key;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    return resourceProperties.get(key);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapResourcePropertiesInMap",
	"Comment": "provides a huge wrapper around resourceproperties to use it as a map",
	"Method": "Map<String, Object> wrapResourcePropertiesInMap(ResourceProperties resourceProperties){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "io.rsocket.framing.ResumeFrame.mapResumeIdentificationToken",
	"Comment": "exposes the resume identification token for mapping to a different type.",
	"Method": "T mapResumeIdentificationToken(Function<ByteBuf, T> function){\r\n    Objects.requireNonNull(function, \"function must not be null\");\r\n    return function.apply(getUnsafeResumeIdentificationToken());\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doCancel_student_view_assignment",
	"Comment": "action is to end the user view assignment process and redirect him to the assignment list view",
	"Method": "void doCancel_student_view_assignment(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    state.setAttribute(VIEW_ASSIGNMENT_ID, \"\");\r\n    state.setAttribute(STATE_MODE, MODE_LIST_ASSIGNMENTS);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera2Base.switchCamera",
	"Comment": "switch camera used. can be called on preview or while stream, ignored with preview off.",
	"Method": "void switchCamera(){\r\n    if (isStreaming() || onPreview) {\r\n        cameraManager.switchCamera();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portlets.SakaiIFrame.checkDigits",
	"Comment": "check if the string from user input contains any characters other than digits",
	"Method": "boolean checkDigits(String height){\r\n    for (int i = 0; i < height.length(); i++) {\r\n        if (VALID_DIGITS.indexOf(height.charAt(i)) == -1)\r\n            return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.cleanup",
	"Comment": "iterate over attributes in toolsession and remove all attributes starting with a particular prefix.",
	"Method": "void cleanup(ToolSession toolSession,String prefix){\r\n    log.debug(\"{}.cleanup()\", this);\r\n    Enumeration attributeNames = toolSession.getAttributeNames();\r\n    while (attributeNames.hasMoreElements()) {\r\n        String aName = (String) attributeNames.nextElement();\r\n        if (aName.startsWith(prefix)) {\r\n            toolSession.removeAttribute(aName);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.io.WireFeedInput.setAllowDoctypes",
	"Comment": "since rome 1.5.1 we fixed a security vulnerability by disallowing doctype declarations by default. this change breaks the compatibility with at least rss 0.91n because it requires a doctype declaration. you are able to allow doctype declarations again with this property. you should only activate it when the feeds that you process are absolutely trustful.",
	"Method": "void setAllowDoctypes(boolean allowDoctypes){\r\n    this.allowDoctypes = allowDoctypes;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.debug.RxJavaAssemblyException.appendLast",
	"Comment": "try appending this rxjavaassemblyexception as the very last cause ofthe given throwable.",
	"Method": "Throwable appendLast(Throwable ex){\r\n    Throwable r = ex;\r\n    Set<Throwable> memory = new HashSet<Throwable>();\r\n    while (ex.getCause() != null) {\r\n        if (memory.add(ex)) {\r\n            ex = ex.getCause();\r\n        } else {\r\n            return r;\r\n        }\r\n    }\r\n    try {\r\n        ex.initCause(this);\r\n    } catch (Throwable exc) {\r\n    }\r\n    return r;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.CourseOfferingEntityProvider.get",
	"Comment": "get a course offering. wraps coursemanagementservice.getcourseoffering.",
	"Method": "Object get(String eid){\r\n    CourseOffering course = cmService.getCourseOffering(eid);\r\n    return new CourseOfferingData(course);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.subscribeOn",
	"Comment": "subscribes to the upstream perhaps and requests on thespecified scheduler.",
	"Method": "Perhaps<T> subscribeOn(Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new PerhapsSubscribeOn<T>(this, scheduler));\r\n}"
}, {
	"Path": "restx.stats.RestxStatsCollector.shareStats",
	"Comment": "share the stats to share url. must not be called if sharing is disabled.shareenabled check is not done to avoid double checking.",
	"Method": "void shareStats(){\r\n    try {\r\n        int code = HttpRequest.post(shareURL).connectTimeout(5000).readTimeout(5000).send(objectMapper.writer().writeValueAsString(stats).getBytes(Charsets.UTF_8)).code();\r\n        if (code >= 400) {\r\n            logger.info(\"sharing stats on {} failed. Response code: {}\", shareURL, code);\r\n        }\r\n    } catch (Exception e) {\r\n        logger.info(\"sharing stats on {} failed. Exception: {}\", shareURL, e.getMessage());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.markAsBlank",
	"Comment": "set marker indicating whether current item is a blank entry",
	"Method": "void markAsBlank(boolean isBlank){\r\n    m_isBlank = isBlank;\r\n}"
}, {
	"Path": "co.rsk.core.bc.BlockExecutor.execute",
	"Comment": "execute a block, from initial state, returning the final state data.",
	"Method": "BlockResult execute(Block block,byte[] stateRoot,boolean discardInvalidTxs,BlockResult execute,Block block,byte[] stateRoot,boolean discardInvalidTxs,boolean ignoreReadyToExecute){\r\n    logger.trace(\"applyBlock: block: [{}] tx.list: [{}]\", block.getNumber(), block.getTransactionsList().size());\r\n    Repository initialRepository = repository.getSnapshotTo(stateRoot);\r\n    byte[] lastStateRootHash = initialRepository.getRoot();\r\n    Repository track = initialRepository.startTracking();\r\n    int i = 1;\r\n    long totalGasUsed = 0;\r\n    Coin totalPaidFees = Coin.ZERO;\r\n    List<TransactionReceipt> receipts = new ArrayList();\r\n    List<Transaction> executedTransactions = new ArrayList();\r\n    int txindex = 0;\r\n    for (Transaction tx : block.getTransactionsList()) {\r\n        logger.trace(\"apply block: [{}] tx: [{}] \", block.getNumber(), i);\r\n        TransactionExecutor txExecutor = transactionExecutorFactory.newInstance(tx, txindex++, block.getCoinbase(), track, block, totalGasUsed);\r\n        boolean readyToExecute = txExecutor.init();\r\n        if (!ignoreReadyToExecute && !readyToExecute) {\r\n            if (discardInvalidTxs) {\r\n                logger.warn(\"block: [{}] discarded tx: [{}]\", block.getNumber(), tx.getHash());\r\n                continue;\r\n            } else {\r\n                logger.warn(\"block: [{}] execution interrupted because of invalid tx: [{}]\", block.getNumber(), tx.getHash());\r\n                return BlockResult.INTERRUPTED_EXECUTION_BLOCK_RESULT;\r\n            }\r\n        }\r\n        executedTransactions.add(tx);\r\n        txExecutor.execute();\r\n        txExecutor.go();\r\n        txExecutor.finalization();\r\n        logger.trace(\"tx executed\");\r\n        track.commit();\r\n        logger.trace(\"track commit\");\r\n        long gasUsed = txExecutor.getGasUsed();\r\n        totalGasUsed += gasUsed;\r\n        Coin paidFees = txExecutor.getPaidFees();\r\n        if (paidFees != null) {\r\n            totalPaidFees = totalPaidFees.add(paidFees);\r\n        }\r\n        TransactionReceipt receipt = new TransactionReceipt();\r\n        receipt.setGasUsed(gasUsed);\r\n        receipt.setCumulativeGas(totalGasUsed);\r\n        lastStateRootHash = initialRepository.getRoot();\r\n        receipt.setTxStatus(txExecutor.getReceipt().isSuccessful());\r\n        receipt.setTransaction(tx);\r\n        receipt.setLogInfoList(txExecutor.getVMLogs());\r\n        receipt.setStatus(txExecutor.getReceipt().getStatus());\r\n        logger.trace(\"block: [{}] executed tx: [{}] state: [{}]\", block.getNumber(), tx.getHash(), Hex.toHexString(lastStateRootHash));\r\n        logger.trace(\"tx[{}].receipt\", i);\r\n        i++;\r\n        receipts.add(receipt);\r\n        logger.trace(\"tx done\");\r\n    }\r\n    return new BlockResult(executedTransactions, receipts, lastStateRootHash, totalGasUsed, totalPaidFees);\r\n}"
}, {
	"Path": "com.rometools.rome.io.XmlReader.calculateRawEncoding",
	"Comment": "inputstream is passed for xmlreaderexception creation only",
	"Method": "String calculateRawEncoding(String bomEnc,String xmlGuessEnc,String xmlEnc,InputStream is){\r\n    String encoding;\r\n    if (bomEnc == null) {\r\n        if (xmlGuessEnc == null || xmlEnc == null) {\r\n            if (defaultEncoding == null) {\r\n                encoding = UTF_8;\r\n            } else {\r\n                encoding = defaultEncoding;\r\n            }\r\n        } else if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) {\r\n            encoding = xmlGuessEnc;\r\n        } else {\r\n            encoding = xmlEnc;\r\n        }\r\n    } else if (bomEnc.equals(UTF_8)) {\r\n        if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {\r\n            throw new XmlReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bomEnc, xmlGuessEnc, xmlEnc, is);\r\n        }\r\n        if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {\r\n            throw new XmlReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bomEnc, xmlGuessEnc, xmlEnc, is);\r\n        }\r\n        encoding = UTF_8;\r\n    } else if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {\r\n        if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {\r\n            throw new IOException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }));\r\n        }\r\n        if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {\r\n            throw new XmlReaderException(RAW_EX_1.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bomEnc, xmlGuessEnc, xmlEnc, is);\r\n        }\r\n        encoding = bomEnc;\r\n    } else {\r\n        throw new XmlReaderException(RAW_EX_2.format(new Object[] { bomEnc, xmlGuessEnc, xmlEnc }), bomEnc, xmlGuessEnc, xmlEnc, is);\r\n    }\r\n    return encoding;\r\n}"
}, {
	"Path": "org.ethereum.util.RLP.decodeList",
	"Comment": "parse and verify that the passed data has just one list encoded as rlp",
	"Method": "RLPList decodeList(byte[] msgData){\r\n    List<RLPElement> decoded = RLP.decode2(msgData);\r\n    if (decoded.size() != 1) {\r\n        throw new IllegalArgumentException(String.format(\"Expected one RLP item but got %d\", decoded.size()));\r\n    }\r\n    RLPElement element = decoded.get(0);\r\n    if (!(element instanceof RLPList)) {\r\n        throw new IllegalArgumentException(\"The decoded element wasn't a list\");\r\n    }\r\n    return (RLPList) element;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.doAfterTerminate",
	"Comment": "executes the callback after this solo terminates and the downstreamis notified.",
	"Method": "Solo<T> doAfterTerminate(Action onAfterTerminate){\r\n    ObjectHelper.requireNonNull(onAfterTerminate, \"onAfterTerminate is null\");\r\n    return onAssembly(new SoloDoOnLifecycle<T>(this, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, onAfterTerminate, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchEngine.regexReplace",
	"Comment": "finds the next instance of the regular expression specified from\tthe caret position.if a match is found, it is replaced with\tthe specified replacement string.",
	"Method": "SearchResult regexReplace(RTextArea textArea,SearchContext context){\r\n    Caret c = textArea.getCaret();\r\n    boolean forward = context.getSearchForward();\r\n    int start = makeMarkAndDotEqual(textArea, forward);\r\n    CharSequence findIn = getFindInCharSequence(textArea, start, forward);\r\n    if (findIn == null) {\r\n        return new SearchResult();\r\n    }\r\n    int markAllCount = 0;\r\n    if (context.getMarkAll()) {\r\n        markAllCount = markAllImpl(textArea, context).getMarkedCount();\r\n    }\r\n    RegExReplaceInfo info = getRegExReplaceInfo(findIn, context);\r\n    DocumentRange range = null;\r\n    if (info != null) {\r\n        c.setSelectionVisible(true);\r\n        int matchStart = info.getStartIndex();\r\n        int matchEnd = info.getEndIndex();\r\n        if (forward) {\r\n            matchStart += start;\r\n            matchEnd += start;\r\n        }\r\n        textArea.setSelectionStart(matchStart);\r\n        textArea.setSelectionEnd(matchEnd);\r\n        String replacement = info.getReplacement();\r\n        textArea.replaceSelection(replacement);\r\n        int dot = matchStart + replacement.length();\r\n        findIn = getFindInCharSequence(textArea, dot, forward);\r\n        info = getRegExReplaceInfo(findIn, context);\r\n        if (info != null) {\r\n            matchStart = info.getStartIndex();\r\n            matchEnd = info.getEndIndex();\r\n            if (forward) {\r\n                matchStart += dot;\r\n                matchEnd += dot;\r\n            }\r\n            range = new DocumentRange(matchStart, matchEnd);\r\n        } else {\r\n            range = new DocumentRange(dot, dot);\r\n        }\r\n        RSyntaxUtilities.selectAndPossiblyCenter(textArea, range, true);\r\n    }\r\n    int count = range != null ? 1 : 0;\r\n    return new SearchResult(range, count, markAllCount);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.SizeGrip.applyComponentOrientation",
	"Comment": "overridden to ensure that the cursor for this component is appropriate\tfor the orientation.",
	"Method": "void applyComponentOrientation(ComponentOrientation o){\r\n    possiblyFixCursor(o.isLeftToRight());\r\n    super.applyComponentOrientation(o);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.QueryBase.parseRequest",
	"Comment": "parse user request parameters.this base method supports only\tthe standard, simple query format.override if necessary.",
	"Method": "void parseRequest(Map parameterMap){\r\n    populateRequestParameters(parameterMap);\r\n    if (getRequestParameter(\"database\") == null) {\r\n        throw new IllegalArgumentException(\"Missing database name\");\r\n    }\r\n    if (getRequestParameter(\"searchString\") == null) {\r\n        throw new IllegalArgumentException(\"Missing search text\");\r\n    }\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.retrieveNode",
	"Comment": "retrievenode get the subnode at position n. if it is not present but its hash is known,the node is retrieved from the store",
	"Method": "Trie retrieveNode(int n){\r\n    Trie node = this.getNode(n);\r\n    if (node != null) {\r\n        return node;\r\n    }\r\n    if (this.hashes == null) {\r\n        return null;\r\n    }\r\n    Keccak256 localHash = this.hashes[n];\r\n    if (localHash == null) {\r\n        return null;\r\n    }\r\n    node = this.store.retrieve(localHash.getBytes());\r\n    if (node == null) {\r\n        String strHash = localHash.toHexString();\r\n        logger.error(ERROR_NON_EXISTENT_TRIE_LOGGER, strHash);\r\n        panicProcessor.panic(PANIC_TOPIC, ERROR_NON_EXISTENT_TRIE + \" \" + strHash);\r\n        throw new TrieSerializationException(ERROR_NON_EXISTENT_TRIE + \" \" + strHash, null);\r\n    }\r\n    if (this.nodes == null) {\r\n        this.nodes = new TrieImpl[ARITY];\r\n    }\r\n    this.nodes[n] = (TrieImpl) node;\r\n    return node;\r\n}"
}, {
	"Path": "net.oauth.signature.Base64.hasData",
	"Comment": "returns true if this base64 object has buffered data for reading.",
	"Method": "boolean hasData(){\r\n    return buf != null;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.impl.FileBasedAtomHandler.isCategoriesURI",
	"Comment": "return true if specified pathinfo represents uri of category doc.",
	"Method": "boolean isCategoriesURI(AtomRequest areq){\r\n    LOG.debug(\"isCategoriesDocumentURI\");\r\n    final String[] pathInfo = StringUtils.split(areq.getPathInfo(), \"/\");\r\n    if (pathInfo.length == 3 && \"categories\".equals(pathInfo[2])) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.component.section.sakai.CourseSectionImpl.compareTo",
	"Comment": "compares coursesectionimpls based on their category id and title.sections\twithout a category are sorted last.",
	"Method": "int compareTo(CourseSection other){\r\n    if (other == this) {\r\n        return 0;\r\n    }\r\n    if (this.category != null && other.getCategory() == null) {\r\n        return -1;\r\n    } else if (this.category == null && other.getCategory() != null) {\r\n        return 1;\r\n    }\r\n    if (this.category == null && other.getCategory() == null) {\r\n        return this.title.toLowerCase().compareTo(other.getTitle().toLowerCase());\r\n    }\r\n    int categoryComparison = this.category.compareTo(other.getCategory());\r\n    if (categoryComparison == 0) {\r\n        return this.title.toLowerCase().compareTo(other.getTitle().toLowerCase());\r\n    } else {\r\n        return categoryComparison;\r\n    }\r\n}"
}, {
	"Path": "org.tsugi.basiclti.BasicLTIUtil.convertToMap",
	"Comment": "simple utility method to help with the migration from properties to\tmap.",
	"Method": "Map<String, String> convertToMap(Properties properties){\r\n    final Map<String, String> map = new HashMap(properties);\r\n    return map;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndCategoryListFacade.convertElementsSyndCategoryToSubject",
	"Comment": "returns a list with the dcsubject elements of the syndcategoryimpl list facade. to be used bythe syndfeedimpl class only.",
	"Method": "List<DCSubject> convertElementsSyndCategoryToSubject(List<SyndCategory> cList){\r\n    List<DCSubject> sList = null;\r\n    if (cList != null) {\r\n        sList = new ArrayList<DCSubject>();\r\n        for (int i = 0; i < cList.size(); i++) {\r\n            final SyndCategoryImpl sCat = (SyndCategoryImpl) cList.get(i);\r\n            DCSubject subject = null;\r\n            if (sCat != null) {\r\n                subject = sCat.getSubject();\r\n            }\r\n            sList.add(subject);\r\n        }\r\n    }\r\n    return sList;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CSSTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.BlobStoreFileSystemHandler.setInvalidCharactersRegex",
	"Comment": "the regular expression for all the characters that is not valid for container and resource names.default is null.",
	"Method": "void setInvalidCharactersRegex(String invalidCharactersRegex){\r\n    this.invalidCharactersRegex = invalidCharactersRegex;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.concatArrayDelayError",
	"Comment": "concatenate the values in order from a sequence of solo sources, delayingerrors till all sources terminate.",
	"Method": "Flowable<T> concatArrayDelayError(Solo<? extends T> sources){\r\n    return Flowable.concatArrayDelayError(sources);\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.getRestrictedAuthToolSerializedList",
	"Comment": "returns a list of toolserialized that initialized the selected field",
	"Method": "List<ListOptionSerialized> getRestrictedAuthToolSerializedList(Set<String> perms,List<ListOptionSerialized> getRestrictedAuthToolSerializedList,Set<String> perms,List<ListOptionSerialized> blankList){\r\n    List<String> restrictedTools = getRestrictedAuthToolsForUser(perms);\r\n    for (ListOptionSerialized tool : blankList) {\r\n        if (restrictedTools.contains(tool.getId()))\r\n            tool.setSelected(true);\r\n    }\r\n    return blankList;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextArea.loadMacro",
	"Comment": "loads a macro to be used by all rtextareas in the current\tapplication.",
	"Method": "void loadMacro(Macro macro){\r\n    currentMacro = macro;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.UnixShellTokenMaker.addToken",
	"Comment": "checks the token to give it the exact id it deserves before\tbeing passed up to the super method.",
	"Method": "void addToken(Segment segment,int start,int end,int tokenType,int startOffset){\r\n    switch(tokenType) {\r\n        case Token.IDENTIFIER:\r\n            int value = wordsToHighlight.get(segment, start, end);\r\n            if (value != -1)\r\n                tokenType = value;\r\n            break;\r\n        case Token.WHITESPACE:\r\n        case Token.SEPARATOR:\r\n        case Token.OPERATOR:\r\n        case Token.LITERAL_NUMBER_DECIMAL_INT:\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n        case Token.LITERAL_CHAR:\r\n        case Token.LITERAL_BACKQUOTE:\r\n        case Token.COMMENT_EOL:\r\n        case Token.PREPROCESSOR:\r\n        case Token.VARIABLE:\r\n            break;\r\n        default:\r\n            tokenType = Token.IDENTIFIER;\r\n            break;\r\n    }\r\n    super.addToken(segment, start, end, tokenType, startOffset);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.SMTWRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    TimeBreakdown startBreakdown = prototype.firstTime().breakdownLocal();\r\n    List rv = new Vector();\r\n    GregorianCalendar startCalendarDate = TimeService.getCalendar(TimeService.getLocalTimeZone(), 0, 0, 0, 0, 0, 0, 0);\r\n    // may have to move this line ahead\r\n    startCalendarDate.set(// may have to move this line ahead\r\n    startBreakdown.getYear(), // may have to move this line ahead\r\n    startBreakdown.getMonth() - 1, // may have to move this line ahead\r\n    startBreakdown.getDay(), // may have to move this line ahead\r\n    startBreakdown.getHour(), startBreakdown.getMin(), startBreakdown.getSec());\r\n    GregorianCalendar nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    if (((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 1) && (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 2) && (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 3) && ((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 4))) {\r\n        if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 5) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 3);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 6) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 2);\r\n        } else {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        }\r\n    }\r\n    nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    int currentCount = 1;\r\n    int hitCount = 1;\r\n    do {\r\n        Time nextTime = TimeService.newTime(nextCalendarDate);\r\n        if ((getCount() > 0) && (hitCount > getCount()))\r\n            break;\r\n        if ((getUntil() != null) && isAfter(nextTime, getUntil()))\r\n            break;\r\n        TimeRange nextTimeRange = TimeService.newTimeRange(nextTime.getTime(), prototype.duration());\r\n        if (isOverlap(range, nextTimeRange)) {\r\n            TimeRange eventTimeRange = null;\r\n            if (prototype.isSingleTime()) {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime());\r\n            } else {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime(), nextTimeRange.lastTime(), true, false);\r\n            }\r\n            rv.add(new RecurrenceInstance(eventTimeRange, currentCount));\r\n        } else if (isAfter(nextTime, range.lastTime())) {\r\n            break;\r\n        }\r\n        do {\r\n            int weekDay = nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK);\r\n            if ((getInterval() > 1 && (weekDay == 5))) {\r\n                int increment = (((getInterval() - 1) * 7) + 1);\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, increment);\r\n                currentCount += increment;\r\n            } else {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n                currentCount++;\r\n            }\r\n        } while ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 1) && (nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 2) && (nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 3) && ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 4));\r\n        hitCount++;\r\n    } while (true);\r\n    return rv;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.fromCallable",
	"Comment": "returns a solo that calls the callable and emits its value or error.",
	"Method": "Solo<T> fromCallable(Callable<T> callable){\r\n    ObjectHelper.requireNonNull(callable, \"callable is null\");\r\n    return onAssembly(new SoloFromCallable<T>(callable));\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.reminder.AssignmentDueReminderServiceImpl.getUserEmail",
	"Comment": "these functions should probably be moved to a sakaiproxy implementation",
	"Method": "String getUserEmail(String userId){\r\n    String email = null;\r\n    try {\r\n        email = userDirectoryService.getUser(userId).getEmail();\r\n    } catch (UserNotDefinedException e) {\r\n        log.warn(\"Cannot get email for id: \" + userId + \" : \" + e.getClass() + \" : \" + e.getMessage());\r\n    }\r\n    return email;\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sharing.setUntil",
	"Comment": "set the date where items updated after this date are not included in the feed.",
	"Method": "void setUntil(Date until){\r\n    this.until = until;\r\n}"
}, {
	"Path": "org.sakaiproject.component.gradebook.GradebookServiceHibernateImpl.getAllAssignmentGradeRecordsForGbItems",
	"Comment": "gets all assignmentgraderecords on the gradableobjectids limited to students specified by studentuids",
	"Method": "List<AssignmentGradeRecord> getAllAssignmentGradeRecordsForGbItems(List<Long> gradableObjectIds,List studentUids){\r\n    final HibernateCallback hc = new HibernateCallback() {\r\n        @Override\r\n        public Object doInHibernate(final Session session) throws HibernateException {\r\n            final List<AssignmentGradeRecord> gradeRecords = new ArrayList();\r\n            if (studentUids.isEmpty()) {\r\n                if (log.isDebugEnabled()) {\r\n                    log.debug(\"No enrollments were specified. Returning an empty List of grade records\");\r\n                }\r\n                return gradeRecords;\r\n            }\r\n            int minGbo = 0;\r\n            int maxGbo = Math.min(gradableObjectIds.size(), 1000);\r\n            while (minGbo < gradableObjectIds.size()) {\r\n                int minStudent = 0;\r\n                int maxStudent = Math.min(studentUids.size(), 1000);\r\n                while (minStudent < studentUids.size()) {\r\n                    final Query q = session.createQuery(\"from AssignmentGradeRecord as agr where agr.gradableObject.removed = false and \" + \"agr.gradableObject.id in (:gradableObjectIds) and agr.studentId in (:studentUids)\");\r\n                    q.setParameterList(\"gradableObjectIds\", gradableObjectIds.subList(minGbo, maxGbo));\r\n                    q.setParameterList(\"studentUids\", studentUids.subList(minStudent, maxStudent));\r\n                    gradeRecords.addAll(q.list());\r\n                    minStudent += 1000;\r\n                    maxStudent = Math.min(studentUids.size(), minStudent + 1000);\r\n                }\r\n                minGbo += 1000;\r\n                maxGbo = Math.min(gradableObjectIds.size(), minGbo + 1000);\r\n            }\r\n            return gradeRecords;\r\n        }\r\n    };\r\n    return (List<AssignmentGradeRecord>) getHibernateTemplate().execute(hc);\r\n}"
}, {
	"Path": "org.sakaiproject.component.gradebook.GradebookServiceHibernateImpl.getAllAssignmentGradeRecordsForGbItems",
	"Comment": "gets all assignmentgraderecords on the gradableobjectids limited to students specified by studentuids",
	"Method": "List<AssignmentGradeRecord> getAllAssignmentGradeRecordsForGbItems(List<Long> gradableObjectIds,List studentUids){\r\n    final List<AssignmentGradeRecord> gradeRecords = new ArrayList();\r\n    if (studentUids.isEmpty()) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"No enrollments were specified. Returning an empty List of grade records\");\r\n        }\r\n        return gradeRecords;\r\n    }\r\n    int minGbo = 0;\r\n    int maxGbo = Math.min(gradableObjectIds.size(), 1000);\r\n    while (minGbo < gradableObjectIds.size()) {\r\n        int minStudent = 0;\r\n        int maxStudent = Math.min(studentUids.size(), 1000);\r\n        while (minStudent < studentUids.size()) {\r\n            final Query q = session.createQuery(\"from AssignmentGradeRecord as agr where agr.gradableObject.removed = false and \" + \"agr.gradableObject.id in (:gradableObjectIds) and agr.studentId in (:studentUids)\");\r\n            q.setParameterList(\"gradableObjectIds\", gradableObjectIds.subList(minGbo, maxGbo));\r\n            q.setParameterList(\"studentUids\", studentUids.subList(minStudent, maxStudent));\r\n            gradeRecords.addAll(q.list());\r\n            minStudent += 1000;\r\n            maxStudent = Math.min(studentUids.size(), minStudent + 1000);\r\n        }\r\n        minGbo += 1000;\r\n        maxGbo = Math.min(gradableObjectIds.size(), minGbo + 1000);\r\n    }\r\n    return gradeRecords;\r\n}"
}, {
	"Path": "org.sakaiproject.courier.impl.BasicCourierService.hasDeliveries",
	"Comment": "check to see if there are any deliveries queued up for a particular\tsession client window.",
	"Method": "boolean hasDeliveries(String address){\r\n    log.debug(\"hasDeliveries(String {})\", address);\r\n    List<Delivery> deliveries;\r\n    synchronized (locks[slot(address)]) {\r\n        deliveries = m_addresses.get(address);\r\n    }\r\n    if (deliveries == null)\r\n        return false;\r\n    return (!deliveries.isEmpty());\r\n}"
}, {
	"Path": "org.sakaiproject.dav.DavServlet.sendReport",
	"Comment": "send a multistatus element containing a complete error report to the client.",
	"Method": "void sendReport(HttpServletRequest req,HttpServletResponse resp,Hashtable<String, Integer> errorList){\r\n    resp.setStatus(SakaidavStatus.SC_MULTI_STATUS);\r\n    String absoluteUri = req.getRequestURI();\r\n    String relativePath = getRelativePath(req);\r\n    XMLWriter generatedXML = new XMLWriter();\r\n    generatedXML.writeXMLHeader();\r\n    generatedXML.writeElement(\"D\", \"multistatus\" + generateNamespaceDeclarations(), XMLWriter.OPENING);\r\n    Enumeration<String> pathList = errorList.keys();\r\n    while (pathList.hasMoreElements()) {\r\n        String errorPath = pathList.nextElement();\r\n        int errorCode = ((Integer) errorList.get(errorPath)).intValue();\r\n        generatedXML.writeElement(\"D\", \"response\", XMLWriter.OPENING);\r\n        generatedXML.writeElement(\"D\", \"href\", XMLWriter.OPENING);\r\n        String toAppend = errorPath.substring(relativePath.length());\r\n        if (!toAppend.startsWith(\"/\"))\r\n            toAppend = \"/\" + toAppend;\r\n        generatedXML.writeText(absoluteUri + toAppend);\r\n        generatedXML.writeElement(\"D\", \"href\", XMLWriter.CLOSING);\r\n        generatedXML.writeElement(\"D\", \"status\", XMLWriter.OPENING);\r\n        generatedXML.writeText(\"HTTP/1.1 \" + errorCode + \" \" + SakaidavStatus.getStatusText(errorCode));\r\n        generatedXML.writeElement(\"D\", \"status\", XMLWriter.CLOSING);\r\n        generatedXML.writeElement(\"D\", \"response\", XMLWriter.CLOSING);\r\n    }\r\n    generatedXML.writeElement(\"D\", \"multistatus\", XMLWriter.CLOSING);\r\n    Writer writer = resp.getWriter();\r\n    writer.write(generatedXML.toString());\r\n    writer.close();\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.conversion.CombineDuplicateSubmissionsConversionHandler.getIntegerObject",
	"Comment": "get integer based on passed string. truncate the string if necessary",
	"Method": "Integer getIntegerObject(String timeString){\r\n    Integer rv = null;\r\n    int max_length = Integer.valueOf(Integer.MAX_VALUE).toString().length();\r\n    if (timeString.length() > max_length) {\r\n        timeString = timeString.substring(0, max_length);\r\n    }\r\n    try {\r\n        rv = Integer.parseInt(timeString);\r\n    } catch (Exception e) {\r\n        log.warn(\"{}:getIntegerObject {}\", this, e.getMessage());\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PerlTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = STRING;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = CHAR_LITERAL;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_BACKQUOTE:\r\n            state = BACKTICKS;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOF_UNQUOTED:\r\n            state = HEREDOC_EOF_UNQUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOF_SINGLE_QUOTED:\r\n            state = HEREDOC_EOF_SINGLE_QUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOT_UNQUOTED:\r\n            state = HEREDOC_EOT_UNQUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOT_SINGLE_QUOTED:\r\n            state = HEREDOC_EOT_SINGLE_QUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_POD:\r\n            state = POD;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.VisualBasicTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ErrorStrip.setMarkerToolTipProvider",
	"Comment": "sets the provider of tool tips for markers in this error strip.\tapplications can use this method to control the content and format of\tthe tool tip descriptions of line markers.",
	"Method": "void setMarkerToolTipProvider(ErrorStripMarkerToolTipProvider provider){\r\n    markerToolTipProvider = provider != null ? provider : new DefaultErrorStripMarkerToolTipProvider();\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.LineNumberList.calculateLastVisibleLineNumber",
	"Comment": "calculates the last line number index painted in this component.",
	"Method": "int calculateLastVisibleLineNumber(){\r\n    int lastLine = 0;\r\n    if (textArea != null) {\r\n        lastLine = textArea.getLineCount() + getLineNumberingStartIndex() - 1;\r\n    }\r\n    return lastLine;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconRowHeader.getToolTipText",
	"Comment": "overridden to display the tool tip of any icons on this line.",
	"Method": "String getToolTipText(MouseEvent e){\r\n    try {\r\n        int line = viewToModelLine(e.getPoint());\r\n        if (line > -1) {\r\n            GutterIconInfo[] infos = getTrackingIcons(line);\r\n            if (infos.length > 0) {\r\n                return infos[infos.length - 1].getToolTip();\r\n            }\r\n        }\r\n    } catch (BadLocationException ble) {\r\n        ble.printStackTrace();\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.rometools.rome.io.XmlReaderException.getInputStream",
	"Comment": "returns the unconsumed inputstream to allow the application to do an alternate encodingdetection on the inputstream.",
	"Method": "InputStream getInputStream(){\r\n    return is;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.concatDelayError",
	"Comment": "concatenate the values in order from a sequence of perhaps sources, delayingerrors till a source terminates or the whole sequence terminates.",
	"Method": "Flowable<T> concatDelayError(Iterable<? extends Perhaps<? extends T>> sources,Flowable<T> concatDelayError,Publisher<? extends Perhaps<? extends T>> sources,Flowable<T> concatDelayError,Publisher<? extends Perhaps<? extends T>> sources,int prefetch,Flowable<T> concatDelayError,Publisher<? extends Perhaps<? extends T>> sources,int prefetch,boolean tillTheEnd){\r\n    return Flowable.concatDelayError(sources, prefetch, tillTheEnd);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesBrowseItem.addInheritedGroup",
	"Comment": "add a string reference identifying a group to the list of groups that have access to this item.",
	"Method": "void addInheritedGroup(String groupId){\r\n    if (m_oldInheritedGroups == null) {\r\n        m_oldInheritedGroups = new Vector();\r\n    }\r\n    if (m_container == null) {\r\n        if (m_id == null) {\r\n            m_container = ContentHostingService.getSiteCollection(ToolManager.getCurrentPlacement().getContext());\r\n        } else {\r\n            m_container = ContentHostingService.getContainingCollectionId(m_id);\r\n        }\r\n        if (m_container == null || m_container.trim().length() == 0) {\r\n            m_container = ContentHostingService.getSiteCollection(ToolManager.getCurrentPlacement().getContext());\r\n        }\r\n    }\r\n    boolean found = false;\r\n    Collection groups = ContentHostingService.getGroupsWithReadAccess(m_container);\r\n    Iterator it = groups.iterator();\r\n    while (it.hasNext() && !found) {\r\n        Group group = (Group) it.next();\r\n        String gid = group.getId();\r\n        String gref = group.getReference();\r\n        if (gid.equals(groupId) || gref.equals(groupId)) {\r\n            if (!inheritsGroup(group.getReference())) {\r\n                m_oldInheritedGroups.add(group);\r\n            }\r\n            found = true;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.flatMapPublisher",
	"Comment": "maps the success value of this solo into a publisher andemits its signals.",
	"Method": "Flowable<R> flatMapPublisher(Function<? super T, ? extends Publisher<? extends R>> mapper){\r\n    ObjectHelper.requireNonNull(mapper, \"mapper is null\");\r\n    return RxJavaPlugins.onAssembly(new SoloFlatMapPublisher<T, R>(this, mapper));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaEditorKit.read",
	"Comment": "inserts content from the given stream, which will be\ttreated as plain text.this method is overridden merely\tso we can increase the number of characters read at a time.",
	"Method": "void read(Reader in,Document doc,int pos){\r\n    char[] buff = new char[READBUFFER_SIZE];\r\n    int nch;\r\n    boolean lastWasCR = false;\r\n    boolean isCRLF = false;\r\n    boolean isCR = false;\r\n    int last;\r\n    boolean wasEmpty = (doc.getLength() == 0);\r\n    while ((nch = in.read(buff, 0, buff.length)) != -1) {\r\n        last = 0;\r\n        for (int counter = 0; counter < nch; counter++) {\r\n            switch(buff[counter]) {\r\n                case '\\r':\r\n                    if (lastWasCR) {\r\n                        isCR = true;\r\n                        if (counter == 0) {\r\n                            doc.insertString(pos, \"\\n\", null);\r\n                            pos++;\r\n                        } else {\r\n                            buff[counter - 1] = '\\n';\r\n                        }\r\n                    } else {\r\n                        lastWasCR = true;\r\n                    }\r\n                    break;\r\n                case '\\n':\r\n                    if (lastWasCR) {\r\n                        if (counter > (last + 1)) {\r\n                            doc.insertString(pos, new String(buff, last, counter - last - 1), null);\r\n                            pos += (counter - last - 1);\r\n                        }\r\n                        lastWasCR = false;\r\n                        last = counter;\r\n                        isCRLF = true;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (lastWasCR) {\r\n                        isCR = true;\r\n                        if (counter == 0) {\r\n                            doc.insertString(pos, \"\\n\", null);\r\n                            pos++;\r\n                        } else {\r\n                            buff[counter - 1] = '\\n';\r\n                        }\r\n                        lastWasCR = false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        if (last < nch) {\r\n            if (lastWasCR) {\r\n                if (last < (nch - 1)) {\r\n                    doc.insertString(pos, new String(buff, last, nch - last - 1), null);\r\n                    pos += (nch - last - 1);\r\n                }\r\n            } else {\r\n                doc.insertString(pos, new String(buff, last, nch - last), null);\r\n                pos += (nch - last);\r\n            }\r\n        }\r\n    }\r\n    if (lastWasCR) {\r\n        doc.insertString(pos, \"\\n\", null);\r\n        isCR = true;\r\n    }\r\n    if (wasEmpty) {\r\n        if (isCRLF) {\r\n            doc.putProperty(EndOfLineStringProperty, \"\\r\\n\");\r\n        } else if (isCR) {\r\n            doc.putProperty(EndOfLineStringProperty, \"\\r\");\r\n        } else {\r\n            doc.putProperty(EndOfLineStringProperty, \"\\n\");\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.TypeScriptTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport.setPaintBorder",
	"Comment": "toggles whether a border is painted around marked highlights.",
	"Method": "void setPaintBorder(boolean paint){\r\n    if (paint != p.getPaintBorder()) {\r\n        p.setPaintBorder(paint);\r\n        if (textArea != null) {\r\n            textArea.repaint();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.getMessagesPublic",
	"Comment": "this get the whole list of announcement, find their groups, and list them based on group attribute",
	"Method": "List<AnnouncementWrapper> getMessagesPublic(Site site,AnnouncementChannel defaultChannel,Filter filter,boolean ascending,AnnouncementActionState state,VelocityPortlet portlet){\r\n    List<AnnouncementWrapper> messageList = getMessages(defaultChannel, filter, ascending, state, portlet);\r\n    List<AnnouncementWrapper> rv = new Vector();\r\n    for (int i = 0; i < messageList.size(); i++) {\r\n        AnnouncementWrapper aMessage = messageList.get(i);\r\n        String pubview = aMessage.getProperties().getProperty(ResourceProperties.PROP_PUBVIEW);\r\n        if (pubview != null && Boolean.valueOf(pubview).booleanValue()) {\r\n            rv.add(aMessage);\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.merge",
	"Comment": "runs the maximum number of nono sources emitted by the publisher at once and completes when all sourcenono complete.",
	"Method": "Nono merge(Iterable<? extends Nono> sources,Nono merge,Iterable<? extends Nono> sources,int maxConcurrency,Nono merge,Publisher<? extends Nono> sources,Nono merge,Publisher<? extends Nono> sources,int maxConcurrency){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.verifyPositive(maxConcurrency, \"maxConcurrency\");\r\n    return onAssembly(new NonoMerge(sources, false, maxConcurrency));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.observeOn",
	"Comment": "returns a solo that delivers the onnext, onerror and oncomplete signalsfrom this solo on the specified scheduler.",
	"Method": "Solo<T> observeOn(Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new SoloObserveOn<T>(this, scheduler));\r\n}"
}, {
	"Path": "restx.server.WebServers.register",
	"Comment": "registers a webserver instance.this should be used by webserver impl only. make sure to call unregister when server is stopped.",
	"Method": "void register(WebServer server){\r\n    servers.putIfAbsent(server.getServerId(), server);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.convertSpacesToTabs",
	"Comment": "converts all instances of a number of spaces equal to a tab size\tinto a tab in this text area.",
	"Method": "void convertSpacesToTabs(){\r\n    int caretPosition = getCaretPosition();\r\n    int tabSize = getTabSize();\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    for (int i = 0; i < tabSize; i++) {\r\n        stringBuilder.append(\" \");\r\n    }\r\n    String text = getText();\r\n    setText(text.replaceAll(stringBuilder.toString(), \"\\t\"));\r\n    int newDocumentLength = getDocument().getLength();\r\n    if (caretPosition < newDocumentLength) {\r\n        setCaretPosition(caretPosition);\r\n    } else {\r\n        setCaretPosition(newDocumentLength - 1);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.repeat",
	"Comment": "repeats this solo until the given boolean supplier returns true when anrepeat iteration of this solo completes.",
	"Method": "Flowable<T> repeat(Flowable<T> repeat,long times,Flowable<T> repeat,BooleanSupplier stop){\r\n    return Flowable.fromPublisher(this).repeatUntil(stop);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.AssemblerX86TokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PHPTokenMaker.getShouldIndentNextLineAfter",
	"Comment": "overridden to handle newlines in js and css differently than those in\tmarkup.",
	"Method": "boolean getShouldIndentNextLineAfter(Token token){\r\n    int languageIndex = token == null ? 0 : token.getLanguageIndex();\r\n    if (getCurlyBracesDenoteCodeBlocks(languageIndex)) {\r\n        if (token != null && token.length() == 1) {\r\n            char ch = token.charAt(0);\r\n            return ch == '{' || ch == '(';\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getPaintMarkOccurrencesBorder",
	"Comment": "returns whether a border is painted around marked occurrences.",
	"Method": "boolean getPaintMarkOccurrencesBorder(){\r\n    return paintMarkOccurrencesBorder;\r\n}"
}, {
	"Path": "org.sakaiproject.component.section.sakai.SectionManagerImpl.getSectionIdsInCategory",
	"Comment": "like getsectionsincategory but returns ids which are more useful to other methods",
	"Method": "List<String> getSectionIdsInCategory(String siteContext,String categoryId){\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"Getting \" + categoryId + \" sections for context \" + siteContext);\r\n    List<String> sectionList = new ArrayList<String>();\r\n    Collection sections;\r\n    try {\r\n        sections = getSiteGroups(getSite(siteContext));\r\n    } catch (IdUnusedException e) {\r\n        log.error(\"No site with id = \" + siteContext);\r\n        return sectionList;\r\n    }\r\n    for (Iterator iter = sections.iterator(); iter.hasNext(); ) {\r\n        Group group = (Group) iter.next();\r\n        if (categoryId.equals(group.getProperties().getProperty(CourseSectionImpl.CATEGORY))) {\r\n            sectionList.add(group.getReference());\r\n        }\r\n    }\r\n    return sectionList;\r\n}"
}, {
	"Path": "restx.factory.conditional.ConditionalTest.deactivateElementsFromConfig",
	"Comment": "elementsfromconfig component can not be build, because of module testmandatorydependency\twhich use a missing dependency.",
	"Method": "void deactivateElementsFromConfig(){\r\n    System.setProperty(\"restx.activation::restx.factory.FactoryMachine::ElementsFromConfig\", \"false\");\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.RSS090Parser.getContentNamespace",
	"Comment": "returns the namespace used by content module elements in document.this implementation returns the emtpy namespace.",
	"Method": "Namespace getContentNamespace(){\r\n    return CONTENT_NS;\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.fromPublicOnly",
	"Comment": "creates an eckey that cannot be used for signing, only verifying signatures, from the given encoded point.the compression state of pub will be preserved.",
	"Method": "ECKey fromPublicOnly(ECPoint pub,ECKey fromPublicOnly,byte[] pub){\r\n    return new ECKey(null, CURVE.getCurve().decodePoint(pub));\r\n}"
}, {
	"Path": "com.rometools.propono.blogclient.SimpleBlogClientTest.testMediaPost",
	"Comment": "post media entry to every media colletion avialable on server, then cleanup.",
	"Method": "void testMediaPost(String type,String endpoint){\r\n    final BlogConnection conn = BlogConnectionFactory.getBlogConnection(type, endpoint, username, password);\r\n    assertNotNull(conn);\r\n    assertTrue(!conn.getBlogs().isEmpty());\r\n    int count = 0;\r\n    for (final Blog blog2 : conn.getBlogs()) {\r\n        final Blog blog = blog2;\r\n        assertNotNull(blog.getName());\r\n        for (final Collection collection : blog.getCollections()) {\r\n            final Blog.Collection col = collection;\r\n            if (col.accepts(\"image/gif\")) {\r\n                final BlogResource m1 = col.newResource(\"duke\" + count, \"image/gif\", Utilities.getBytesFromFile(new File(\"test/testdata/duke-wave-shadow.gif\")));\r\n                col.saveResource(m1);\r\n                if (\"atom\".equals(type)) {\r\n                    final BlogResource m2 = (BlogResource) blog.getEntry(m1.getToken());\r\n                    assertNotNull(m2);\r\n                    m2.delete();\r\n                    boolean failed = false;\r\n                    try {\r\n                        blog.getEntry(m1.getToken());\r\n                    } catch (final Exception e) {\r\n                        failed = true;\r\n                    }\r\n                    assertTrue(failed);\r\n                }\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getIdentifier",
	"Comment": "gets the dublincore module identifier. convenience method that can be used to obtain thefirst item, null if none.",
	"Method": "String getIdentifier(){\r\n    return Lists.firstEntry(identifier);\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.getHash",
	"Comment": "gethash get hash associated to subnode at positin n. if the hash is knownbecause it is in the internal hash cache, no access to subnode is needed.",
	"Method": "Keccak256 getHash(Keccak256 getHash,int n){\r\n    if (this.hashes != null && this.hashes[n] != null) {\r\n        return this.hashes[n];\r\n    }\r\n    if (this.nodes == null || this.nodes[n] == null) {\r\n        return null;\r\n    }\r\n    TrieImpl node = this.nodes[n];\r\n    if (isEmptyTrie(node.value, node.nodes, node.hashes)) {\r\n        return null;\r\n    }\r\n    Keccak256 localHash = node.getHash();\r\n    this.setHash(n, localHash);\r\n    return localHash;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementActionState.recycle",
	"Comment": "release any resources and restore the object to initial conditions to be reused.",
	"Method": "void recycle(){\r\n    super.recycle();\r\n}"
}, {
	"Path": "com.github.faucamp.simplertmp.io.ChunkStreamInfo.setPrevHeaderRx",
	"Comment": "sets the previous header that was received on this channel, or null if no previous header was sent",
	"Method": "void setPrevHeaderRx(RtmpHeader previousHeader){\r\n    this.prevHeaderRx = previousHeader;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.WireFeed.setEncoding",
	"Comment": "sets the charset encoding of a the feed.this property is not set by feed parsers. but it is used by feed generators to set theencoding in the xml prolog.",
	"Method": "void setEncoding(String encoding){\r\n    this.encoding = encoding;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.ambWith",
	"Comment": "signal the events of this or the other solo whicheversignals first.",
	"Method": "Solo<T> ambWith(Solo<? extends T> other){\r\n    return ambArray(this, other);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.newResourceEdit",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Edit newResourceEdit(Entity container,String id,Object[] others,Edit newResourceEdit,Entity container,Element element,Edit newResourceEdit,Entity container,Entity other){\r\n    BaseCalendarEventEdit rv = new BaseCalendarEventEdit((Calendar) container, (CalendarEvent) other);\r\n    rv.activate();\r\n    return rv;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndEntryImpl.setPublishedDate",
	"Comment": "sets the entry published date.this method is a convenience method, it maps to the dublin core module date.",
	"Method": "void setPublishedDate(Date publishedDate){\r\n    getDCModule().setDate(publishedDate);\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.AbstractITunesObject.setKeywords",
	"Comment": "a list of keywords for this feed or entrymust not contain spaces",
	"Method": "void setKeywords(String[] keywords){\r\n    this.keywords = keywords;\r\n}"
}, {
	"Path": "com.rometools.opml.feed.opml.Outline.getHtmlUrl",
	"Comment": "a convenience method to return the value of the htmlurl attribute.",
	"Method": "String getHtmlUrl(){\r\n    return getAttributeValue(\"htmlUrl\");\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.concatArray",
	"Comment": "concatenate the values in order from a sequence of perhaps sources.",
	"Method": "Flowable<T> concatArray(Perhaps<? extends T> sources){\r\n    return Flowable.concatArray(sources);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.EntityReference.makeEntityReference",
	"Comment": "override this if you are making a new class to define your entity reference",
	"Method": "String makeEntityReference(boolean spaceOnly){\r\n    if (getPrefix() == null) {\r\n        throw new IllegalStateException(\"prefix is null, cannot generate the string reference\");\r\n    }\r\n    String ref = null;\r\n    if (spaceOnly || getId() == null) {\r\n        ref = SEPARATOR + getPrefix();\r\n    } else {\r\n        ref = SEPARATOR + getPrefix() + SEPARATOR + getId();\r\n    }\r\n    return ref;\r\n}"
}, {
	"Path": "org.sakaiproject.lti.impl.UserLocaleSetterImpl.setupUserLocale",
	"Comment": "email trusted consumer case we are not creating the user, we look up the user based on the email address. snd user locale must already be set and simply return",
	"Method": "void setupUserLocale(Map payload,User user,boolean isTrustedConsumer,boolean isEmailTrustedConsumer){\r\n    if (isTrustedConsumer)\r\n        return;\r\n    if (isEmailTrustedConsumer)\r\n        return;\r\n    String locale = (String) payload.get(BasicLTIConstants.LAUNCH_PRESENTATION_LOCALE);\r\n    if (locale != null && locale.length() > 0) {\r\n        try {\r\n            PreferencesEdit pe = null;\r\n            try {\r\n                pe = preferencesService.edit(user.getId());\r\n            } catch (IdUnusedException idue) {\r\n                pe = preferencesService.add(user.getId());\r\n            }\r\n            ResourcePropertiesEdit propsEdit = pe.getPropertiesEdit(\"sakai:resourceloader\");\r\n            propsEdit.removeProperty(Preferences.FIELD_LOCALE);\r\n            propsEdit.addProperty(Preferences.FIELD_LOCALE, locale);\r\n            preferencesService.commit(pe);\r\n        } catch (Exception e) {\r\n            log.error(\"Failed to setup launcher's locale\", e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.retry",
	"Comment": "retry this solo if the predicate returns true for the latest failurethrowable.",
	"Method": "Solo<T> retry(Solo<T> retry,long times,Solo<T> retry,Predicate<? super Throwable> predicate){\r\n    ObjectHelper.requireNonNull(predicate, \"predicate is null\");\r\n    return onAssembly(new SoloRetryWhile<T>(this, predicate));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTATextTransferHandler.canImport",
	"Comment": "this method indicates if a component would accept an import of the\tgiven set of data flavors prior to actually attempting to import it.",
	"Method": "boolean canImport(JComponent comp,DataFlavor[] flavors){\r\n    JTextComponent c = (JTextComponent) comp;\r\n    if (!(c.isEditable() && c.isEnabled())) {\r\n        return false;\r\n    }\r\n    return (getImportFlavor(flavors, c) != null);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.AssemblerX86TokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.portlets.IMSBLTIPortlet.getCorrectProperty",
	"Comment": "portlet preferences, sakai tool properties, and then default",
	"Method": "String getCorrectProperty(PortletRequest request,String propName,String defaultValue){\r\n    Placement placement = ToolManager.getCurrentPlacement();\r\n    String propertyName = placement.getToolId() + \".\" + propName;\r\n    String propValue = ServerConfigurationService.getString(propertyName, null);\r\n    if (propValue != null && propValue.trim().length() > 0) {\r\n        log.debug(\"Sakai.home {}={}\", propName, propValue);\r\n        return propValue;\r\n    }\r\n    Properties config = placement.getConfig();\r\n    propValue = getSakaiProperty(config, \"imsti.\" + propName);\r\n    if (propValue != null && \"true\".equals(config.getProperty(\"final.\" + propName))) {\r\n        log.debug(\"Frozen {} ={}\", propName, propValue);\r\n        return propValue;\r\n    }\r\n    PortletPreferences prefs = request.getPreferences();\r\n    propValue = prefs.getValue(\"imsti.\" + propName, null);\r\n    if (propValue != null) {\r\n        log.debug(\"Portlet {} ={}\", propName, propValue);\r\n        return propValue;\r\n    }\r\n    propValue = getSakaiProperty(config, \"imsti.\" + propName);\r\n    if (propValue != null) {\r\n        log.debug(\"Tool {} ={}\", propName, propValue);\r\n        return propValue;\r\n    }\r\n    if (defaultValue != null) {\r\n        log.debug(\"Default {} ={}\", propName, defaultValue);\r\n        return defaultValue;\r\n    }\r\n    log.debug(\"Fell through {}\", propName);\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ChangeableHighlightPainter.setRoundedEdges",
	"Comment": "sets whether rounded edges are used when painting this highlight.",
	"Method": "void setRoundedEdges(boolean rounded){\r\n    roundedEdges = rounded;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.onAssembly",
	"Comment": "optionally apply a function to the raw source and return apotentially modified nono instance.",
	"Method": "Nono onAssembly(Nono source){\r\n    Function<Nono, Nono> f = onAssemblyHandler;\r\n    if (f != null) {\r\n        try {\r\n            return ObjectHelper.requireNonNull(f.apply(source), \"The onAssemblyHandler returned a null Nono\");\r\n        } catch (Throwable ex) {\r\n            throw ExceptionHelper.wrapOrThrow(ex);\r\n        }\r\n    }\r\n    return source;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.gradeTypeTable",
	"Comment": "construct a hashmap using the integer as the key and grade type string as the value",
	"Method": "Map<Integer, String> gradeTypeTable(){\r\n    Map<Integer, String> gradeTypeTable = new HashMap();\r\n    gradeTypeTable.put(1, rb.getString(AssignmentConstants.ASSN_GRADE_TYPE_NOGRADE_PROP));\r\n    gradeTypeTable.put(2, rb.getString(AssignmentConstants.ASSN_GRADE_TYPE_LETTER_PROP));\r\n    gradeTypeTable.put(3, rb.getString(AssignmentConstants.ASSN_GRADE_TYPE_POINTS_PROP));\r\n    gradeTypeTable.put(4, rb.getString(AssignmentConstants.ASSN_GRADE_TYPE_PASS_FAIL_PROP));\r\n    gradeTypeTable.put(5, rb.getString(AssignmentConstants.ASSN_GRADE_TYPE_CHECK_PROP));\r\n    return gradeTypeTable;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LatexTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DockerTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = TokenTypes.NULL;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.error",
	"Comment": "returns a solo that signals the error returned fromthe errorsupplier to each individual subscriber.",
	"Method": "Solo<T> error(Throwable error,Solo<T> error,Callable<? extends Throwable> errorSupplier){\r\n    ObjectHelper.requireNonNull(errorSupplier, \"errorSupplier is null\");\r\n    return onAssembly(new SoloErrorSupplier<T>(errorSupplier));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CPlusPlusTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case Token.COMMENT_EOL:\r\n            state = EOL_COMMENT;\r\n            start = text.offset;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = YYINITIAL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HTMLTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PythonTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "co.rsk.net.TransactionNodeInformationTest.createNodeID",
	"Comment": "createnodeid is a convenience function to create a nodeid based on an int.",
	"Method": "NodeID createNodeID(int i){\r\n    return new NodeID(ByteBuffer.allocate(4).putInt(i).array());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenIterator.hasNext",
	"Comment": "returns whether any more paintable tokens are in the document.",
	"Method": "boolean hasNext(){\r\n    return token != null;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.getPortletConfigParameterNameForLoadOnly",
	"Comment": "this is a cover to return the right config parameter name, regardless of whether the parameter is using an older, deprecated name or the newer version.",
	"Method": "String getPortletConfigParameterNameForLoadOnly(VelocityPortlet portlet){\r\n    String configParameter = StringUtils.trimToNull(portlet.getPortletConfig().getInitParameter(PORTLET_CONFIG_PARM_NON_MERGED_CHANNELS));\r\n    String configParameterName = configParameter != null ? PORTLET_CONFIG_PARM_NON_MERGED_CHANNELS : PORTLET_CONFIG_PARM_MERGED_CHANNELS;\r\n    return configParameterName;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.BBCodeTokenMaker.getCompleteCloseTags",
	"Comment": "sets whether markup close tags should be completed.the default value\tfor bbcode is true.",
	"Method": "boolean getCompleteCloseTags(){\r\n    return completeCloseTags;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.adjustAttachmentsToSingleUpload",
	"Comment": "used when students are selecting from a list of previous attachments for their single uploaded file",
	"Method": "void adjustAttachmentsToSingleUpload(RunData data,SessionState state,Assignment a,List nonInlineAttachments){\r\n    if (a == null || a.getTypeOfSubmission() != Assignment.SubmissionType.SINGLE_ATTACHMENT_SUBMISSION) {\r\n        throw new IllegalArgumentException(\"adjustAttachmentsToSingleUpload called, but the assignment type is not Single Uploaded File\");\r\n    }\r\n    if (nonInlineAttachments == null) {\r\n        throw new IllegalArgumentException(\"adjustAttachmentsToSingleUpload called, but nonInlineAttachments is null\");\r\n    }\r\n    String selection = data.getParameters().get(\"attachmentSelection\");\r\n    if (\"newAttachment\".equals(selection)) {\r\n        Reference attachment = (Reference) state.getAttribute(\"newSingleUploadedFile\");\r\n        if (attachment == null) {\r\n            List l = (List) state.getAttribute(\"newSingleAttachmentList\");\r\n            if (l != null && !l.isEmpty()) {\r\n                attachment = (Reference) l.get(0);\r\n            }\r\n        }\r\n        if (attachment != null) {\r\n            List attachments = entityManager.newReferenceList();\r\n            attachments.add(attachment);\r\n            state.setAttribute(ATTACHMENTS, attachments);\r\n            state.removeAttribute(\"newSingleUploadedFile\");\r\n            state.removeAttribute(\"newSingleAttachmentList\");\r\n            state.removeAttribute(VIEW_SUBMISSION_TEXT);\r\n        }\r\n    } else {\r\n        boolean error = false;\r\n        int index = -1;\r\n        try {\r\n            index = Integer.parseInt(selection);\r\n            if (nonInlineAttachments.size() <= index) {\r\n                error = true;\r\n            }\r\n        } catch (NumberFormatException nfe) {\r\n            error = true;\r\n        }\r\n        if (error) {\r\n            log.warn(\"adjustAttachmentsToSingleUpload() - couldn't parse the selected index as an integer, or the selected index wasn't in the range of attachment indices\");\r\n        } else {\r\n            Reference attachment = (Reference) nonInlineAttachments.get(index);\r\n            List attachments = (List) state.getAttribute(ATTACHMENTS);\r\n            attachments.clear();\r\n            attachments.add(attachment);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PropertiesFileTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HtaccessTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.buildCancelContext",
	"Comment": "build the context for cancelling the operation and going back to list view",
	"Method": "String buildCancelContext(VelocityPortlet portlet,Context context,RunData rundata,AnnouncementActionState state){\r\n    String template = (String) getContext(rundata).get(\"template\");\r\n    return template;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.SectionEntityProvider.create",
	"Comment": "create a new section. wraps coursemanagementadministration.createsection.",
	"Method": "void create(Object entity){\r\n    SectionData data = (SectionData) entity;\r\n    cmAdmin.createSection(data.eid, data.title, data.description, data.category, data.parent, data.courseOffering, data.enrollmentSet);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.FromFileBase.setLimitFPSOnFly",
	"Comment": "set limit fps while stream. this will be override when you call to preparevideo method.this could produce a change in iframeinterval.",
	"Method": "void setLimitFPSOnFly(int fps){\r\n    videoEncoder.setFps(fps);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.copyDocument",
	"Comment": "copy an xml document, adding it as a child of the target document root",
	"Method": "void copyDocument(Document source,Document target){\r\n    Node node = target.importNode(source.getDocumentElement(), true);\r\n    target.getDocumentElement().appendChild(node);\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.receiveHeaders",
	"Comment": "receives an array of serialized bitcoin block headers and adds them to the internal blockchain structure.",
	"Method": "void receiveHeaders(BtcBlock[] headers){\r\n    if (headers.length > 0) {\r\n        logger.debug(\"Received {} headers. First {}, last {}.\", headers.length, headers[0].getHash(), headers[headers.length - 1].getHash());\r\n    } else {\r\n        logger.warn(\"Received 0 headers\");\r\n    }\r\n    Context.propagate(btcContext);\r\n    this.ensureBtcBlockChain();\r\n    for (int i = 0; i < headers.length; i++) {\r\n        try {\r\n            btcBlockChain.add(headers[i]);\r\n        } catch (Exception e) {\r\n            logger.warn(\"Exception adding btc header\", e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HostsTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "net.oauth.client.ExcerptInputStream.getExcerpt",
	"Comment": "the first few bytes of data, plus ellipsis if there are more bytes.",
	"Method": "byte[] getExcerpt(){\r\n    if (taken < excerpt.length) {\r\n        final int mark = Math.min(given, taken);\r\n        given = Integer.MAX_VALUE;\r\n        while (taken < excerpt.length) {\r\n            read(excerpt, taken, LIMIT - taken);\r\n        }\r\n        given = mark;\r\n    }\r\n    return excerpt;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.ExclusionSeqRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    return new Vector();\r\n}"
}, {
	"Path": "org.sakaiproject.component.privacy.PrivacyManagerImpl.setMaxResultSetNumber",
	"Comment": "set maximum result set number for database query, defulat is 1000.",
	"Method": "void setMaxResultSetNumber(int maxResultSetNumber){\r\n    this.maxResultSetNumber = maxResultSetNumber;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.ExclusionRecurrenceRule.excludeInstances",
	"Comment": "remove from the ranges list any recurrenceinstance excluded by this rule.",
	"Method": "void excludeInstances(List ranges){\r\n    Vector rv = new Vector();\r\n    for (Iterator iInstances = ranges.iterator(); iInstances.hasNext(); ) {\r\n        RecurrenceInstance ri = (RecurrenceInstance) iInstances.next();\r\n        if (!m_ranges.contains(ri.getRange())) {\r\n            rv.add(ri);\r\n        }\r\n    }\r\n    ranges.clear();\r\n    ranges.addAll(rv);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MxmlTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaibrary.xserver.XServer.getFindResultSets",
	"Comment": "returns the list of find result sets found during this session.this\tmethod should be called only after calling the findurl method.",
	"Method": "ArrayList getFindResultSets(){\r\n    return findResultSets;\r\n}"
}, {
	"Path": "co.rsk.core.bc.BlockChainImpl.setStatus",
	"Comment": "change the blockchain status, to a new best block with difficulty",
	"Method": "void setStatus(Block block,BlockDifficulty totalDifficulty){\r\n    synchronized (accessLock) {\r\n        status = new BlockChainStatus(block, totalDifficulty);\r\n        blockStore.saveBlock(block, totalDifficulty, true);\r\n        repository.syncToRoot(block.getStateRoot());\r\n    }\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.isInputSignedByThisFederator",
	"Comment": "check if the p2sh multisig scriptsig of the given input was already signed by federatorpublickey.",
	"Method": "boolean isInputSignedByThisFederator(BtcECKey federatorPublicKey,Sha256Hash sighash,TransactionInput input){\r\n    List<ScriptChunk> chunks = input.getScriptSig().getChunks();\r\n    for (int j = 1; j < chunks.size() - 1; j++) {\r\n        ScriptChunk chunk = chunks.get(j);\r\n        if (chunk.data.length == 0) {\r\n            continue;\r\n        }\r\n        TransactionSignature sig2 = TransactionSignature.decodeFromBitcoin(chunk.data, false, false);\r\n        if (federatorPublicKey.verify(sighash, sig2)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.zip",
	"Comment": "combines the solo values of all the sources via a zipper function into asingle resulting value.",
	"Method": "Solo<R> zip(Iterable<? extends Solo<? extends T>> sources,Function<? super Object[], ? extends R> zipper){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.requireNonNull(zipper, \"zipper is null\");\r\n    return onAssembly(new SoloZipIterable<T, R>(sources, zipper));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getRoundedSelectionEdges",
	"Comment": "returns whether selection edges are rounded in this text area.",
	"Method": "boolean getRoundedSelectionEdges(){\r\n    return roundedSelectionEdges;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern2.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(BiFunction<T1, T2, R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Plan2<T1, T2, R>(this, selector);\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.setHash",
	"Comment": "sethash save subnode hash at position n, in order to keep an internal cache",
	"Method": "void setHash(int n,Keccak256 hash){\r\n    if (this.hashes == null) {\r\n        this.hashes = new Keccak256[ARITY];\r\n    }\r\n    this.hashes[n] = hash;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.FactoryFinder.find",
	"Comment": "finds the implementation class object in the specified order. main entry point.",
	"Method": "Object find(String factoryId,String fallbackClassName){\r\n    ClassLoader classLoader = ss.getContextClassLoader();\r\n    if (classLoader == null) {\r\n        classLoader = FactoryFinder.class.getClassLoader();\r\n    }\r\n    dPrint(\"find factoryId =\" + factoryId);\r\n    try {\r\n        final String systemProp = ss.getSystemProperty(factoryId);\r\n        if (systemProp != null) {\r\n            dPrint(\"found system property, value=\" + systemProp);\r\n            return newInstance(systemProp, classLoader, true);\r\n        }\r\n    } catch (final SecurityException se) {\r\n    }\r\n    try {\r\n        final String configFile = \"/propono.properties\";\r\n        String factoryClassName = null;\r\n        if (firstTime) {\r\n            synchronized (cacheProps) {\r\n                if (firstTime) {\r\n                    try {\r\n                        final InputStream is = FactoryFinder.class.getResourceAsStream(configFile);\r\n                        firstTime = false;\r\n                        if (is != null) {\r\n                            dPrint(\"Read properties file: \" + configFile);\r\n                            cacheProps.load(is);\r\n                        }\r\n                    } catch (final Exception intentionallyIgnored) {\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        factoryClassName = cacheProps.getProperty(factoryId);\r\n        if (factoryClassName != null) {\r\n            dPrint(\"found in $java.home/propono.properties, value=\" + factoryClassName);\r\n            return newInstance(factoryClassName, classLoader, true);\r\n        }\r\n    } catch (final Exception ex) {\r\n        if (debug) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n    final Object provider = findJarServiceProvider(factoryId);\r\n    if (provider != null) {\r\n        return provider;\r\n    }\r\n    if (fallbackClassName == null) {\r\n        throw new ConfigurationError(\"Provider for \" + factoryId + \" cannot be found\", null);\r\n    }\r\n    dPrint(\"loaded from fallback value: \" + fallbackClassName);\r\n    return newInstance(fallbackClassName, classLoader, true);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.RubyTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.common.Collection.getHrefResolved",
	"Comment": "get resolved uri of the collection, or null if impossible to determine",
	"Method": "String getHrefResolved(String getHrefResolved,String relativeUri){\r\n    if (Atom10Parser.isAbsoluteURI(relativeUri)) {\r\n        return relativeUri;\r\n    } else if (baseURI != null && collectionElement != null) {\r\n        final int lastslash = baseURI.lastIndexOf(\"/\");\r\n        return Atom10Parser.resolveURI(baseURI.substring(0, lastslash), collectionElement, relativeUri);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientMediaEntry.getInputStream",
	"Comment": "get input stream for media resource associated with this entry.",
	"Method": "InputStream getInputStream(){\r\n    return inputStream;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.doList",
	"Comment": "action dolist is requested when the user click on the list in the toolbar",
	"Method": "void doList(RunData data,Context context){\r\n    CalendarActionState state = (CalendarActionState) getState(context, data, CalendarActionState.class);\r\n    String peid = ((JetspeedRunData) data).getJs_peid();\r\n    SessionState sstate = ((JetspeedRunData) data).getPortletSessionState(peid);\r\n    Time m_time = TimeService.newTime();\r\n    TimeBreakdown b = m_time.breakdownLocal();\r\n    int stateYear = b.getYear();\r\n    int stateMonth = b.getMonth();\r\n    int stateDay = b.getDay();\r\n    if ((sstate.getAttribute(STATE_YEAR) != null) && (sstate.getAttribute(STATE_MONTH) != null) && (sstate.getAttribute(STATE_DAY) != null)) {\r\n        stateYear = ((Integer) sstate.getAttribute(STATE_YEAR)).intValue();\r\n        stateMonth = ((Integer) sstate.getAttribute(STATE_MONTH)).intValue();\r\n        stateDay = ((Integer) sstate.getAttribute(STATE_DAY)).intValue();\r\n    }\r\n    String sM;\r\n    String eM;\r\n    String sD;\r\n    String eD;\r\n    String sY;\r\n    String eY;\r\n    CalendarUtil calObj = new CalendarUtil();\r\n    calObj.setDay(stateYear, stateMonth, stateDay);\r\n    String prevState = state.getState().toString();\r\n    if (prevState.equals(\"day\")) {\r\n        sY = Integer.valueOf(calObj.getYear()).toString();\r\n        sM = Integer.valueOf(calObj.getMonthInteger()).toString();\r\n        sD = Integer.valueOf(calObj.getDayOfMonth()).toString();\r\n        eY = Integer.valueOf(calObj.getYear()).toString();\r\n        eM = Integer.valueOf(calObj.getMonthInteger()).toString();\r\n        eD = Integer.valueOf(calObj.getDayOfMonth()).toString();\r\n    } else if (prevState.equals(\"week\")) {\r\n        int dayofweek = calObj.getDay_Of_Week(true);\r\n        calObj.setPrevDate(dayofweek - 1);\r\n        sY = Integer.valueOf(calObj.getYear()).toString();\r\n        sM = Integer.valueOf(calObj.getMonthInteger()).toString();\r\n        sD = Integer.valueOf(calObj.getDayOfMonth()).toString();\r\n        for (int i = 0; i < 6; i++) {\r\n            calObj.getNextDate();\r\n        }\r\n        eY = Integer.valueOf(calObj.getYear()).toString();\r\n        eM = Integer.valueOf(calObj.getMonthInteger()).toString();\r\n        eD = Integer.valueOf(calObj.getDayOfMonth()).toString();\r\n    } else if (prevState.equals(\"month\")) {\r\n        sY = Integer.valueOf(calObj.getYear()).toString();\r\n        sM = Integer.valueOf(calObj.getMonthInteger()).toString();\r\n        sD = String.valueOf(\"1\");\r\n        calObj.setDay(stateYear, stateMonth, 1);\r\n        GregorianCalendar cal = new GregorianCalendar(calObj.getYear(), calObj.getMonthInteger() - 1, 1);\r\n        int daysInMonth = cal.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);\r\n        for (int i = 1; i < daysInMonth; i++) calObj.getNextDate();\r\n        eY = Integer.valueOf(calObj.getYear()).toString();\r\n        eM = Integer.valueOf(calObj.getMonthInteger()).toString();\r\n        eD = Integer.valueOf(calObj.getDayOfMonth()).toString();\r\n    } else {\r\n        sY = Integer.valueOf(stateYear).toString();\r\n        sM = \"1\";\r\n        sD = \"1\";\r\n        eY = Integer.valueOf(stateYear).toString();\r\n        eM = \"12\";\r\n        eD = \"31\";\r\n    }\r\n    if (sM.length() == 1)\r\n        sM = \"0\" + sM;\r\n    if (eM.length() == 1)\r\n        eM = \"0\" + eM;\r\n    if (sD.length() == 1)\r\n        sD = \"0\" + sD;\r\n    if (eD.length() == 1)\r\n        eD = \"0\" + eD;\r\n    sY = sY.substring(2);\r\n    eY = eY.substring(2);\r\n    String startingDateStr = sM + \"/\" + sD + \"/\" + sY;\r\n    String endingDateStr = eM + \"/\" + eD + \"/\" + eY;\r\n    state.getCalendarFilter().setListViewFilterMode(CalendarFilter.SHOW_CUSTOM_RANGE);\r\n    sstate.removeAttribute(STATE_SCHEDULE_TO);\r\n    sstate.removeAttribute(STATE_SCHEDULE_TO_GROUPS);\r\n    StringBuilder errorMessage = new StringBuilder();\r\n    if (!state.getCalendarFilter().setStartAndEndListViewDates(startingDateStr, endingDateStr, errorMessage)) {\r\n        addAlert(sstate, errorMessage.toString());\r\n    }\r\n    state.setState(\"list\");\r\n    this.defaultStateView = \"list\";\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.saveSubmitInputs",
	"Comment": "saves the current input before navigating off to other pages",
	"Method": "void saveSubmitInputs(SessionState state,ParameterParser params){\r\n    String text = processFormattedTextFromBrowser(state, params.getCleanString(VIEW_SUBMISSION_TEXT), true);\r\n    state.setAttribute(VIEW_SUBMISSION_TEXT, text);\r\n    if (params.getString(SUBMISSION_REVIEW_SERVICE_EULA_AGREEMENT) != null) {\r\n        state.setAttribute(SUBMISSION_REVIEW_SERVICE_EULA_AGREEMENT, \"true\");\r\n    } else {\r\n        state.removeAttribute(SUBMISSION_REVIEW_SERVICE_EULA_AGREEMENT);\r\n    }\r\n    String assignmentRef = (String) state.getAttribute(VIEW_SUBMISSION_ASSIGNMENT_REFERENCE);\r\n    try {\r\n        Assignment assignment = assignmentService.getAssignment(assignmentRef);\r\n        if (assignment.getIsGroup()) {\r\n            String[] groupChoice = params.getStrings(\"selectedGroups\");\r\n            if (groupChoice != null && groupChoice.length != 0) {\r\n                if (groupChoice.length > 1) {\r\n                    state.setAttribute(VIEW_SUBMISSION_GROUP, null);\r\n                    addAlert(state, rb.getString(\"java.alert.youchoosegroup\"));\r\n                } else {\r\n                    state.setAttribute(VIEW_SUBMISSION_GROUP, groupChoice[0]);\r\n                }\r\n            } else {\r\n                state.setAttribute(VIEW_SUBMISSION_GROUP, null);\r\n                addAlert(state, rb.getString(\"java.alert.youchoosegroup\"));\r\n            }\r\n            String original_group_id = params.getString(\"originalGroup\") == null || params.getString(\"originalGroup\").trim().length() == 0 ? null : params.getString(\"originalGroup\");\r\n            if (original_group_id != null) {\r\n                state.setAttribute(VIEW_SUBMISSION_ORIGINAL_GROUP, original_group_id);\r\n            } else {\r\n                state.setAttribute(VIEW_SUBMISSION_ORIGINAL_GROUP, null);\r\n            }\r\n        }\r\n    } catch (PermissionException p) {\r\n        log.debug(this + \" :saveSubmitInputs permission error getting assignment. \");\r\n    } catch (IdUnusedException e) {\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.SoloProcessor.hasThrowable",
	"Comment": "returns true if this soloprocessor received an onerror throwable.",
	"Method": "boolean hasThrowable(){\r\n    return subscribers.get() == TERMINATED && error != null;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.templates.StaticCodeTemplate.getTextIndented",
	"Comment": "returns text with newlines indented by the specified amount.",
	"Method": "String getTextIndented(String text,int firstNewline,String indent){\r\n    if (firstNewline == -1) {\r\n        return text;\r\n    }\r\n    int pos = 0;\r\n    int old = firstNewline + 1;\r\n    StringBuilder sb = new StringBuilder(text.substring(0, old));\r\n    sb.append(indent);\r\n    while ((pos = text.indexOf('\\n', old)) > -1) {\r\n        sb.append(text.substring(old, pos + 1));\r\n        sb.append(indent);\r\n        old = pos + 1;\r\n    }\r\n    if (old < text.length()) {\r\n        sb.append(text.substring(old));\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTATextTransferHandler.createTransferable",
	"Comment": "create a transferable to use as the source for a data transfer.",
	"Method": "Transferable createTransferable(JComponent comp){\r\n    exportComp = (JTextComponent) comp;\r\n    shouldRemove = true;\r\n    p0 = exportComp.getSelectionStart();\r\n    p1 = exportComp.getSelectionEnd();\r\n    return (p0 != p1) ? (new TextTransferable(exportComp, p0, p1)) : null;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.TThRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    TimeBreakdown startBreakdown = prototype.firstTime().breakdownLocal();\r\n    List rv = new Vector();\r\n    GregorianCalendar startCalendarDate = TimeService.getCalendar(TimeService.getLocalTimeZone(), 0, 0, 0, 0, 0, 0, 0);\r\n    // may have to move this line ahead\r\n    startCalendarDate.set(// may have to move this line ahead\r\n    startBreakdown.getYear(), // may have to move this line ahead\r\n    startBreakdown.getMonth() - 1, // may have to move this line ahead\r\n    startBreakdown.getDay(), // may have to move this line ahead\r\n    startBreakdown.getHour(), startBreakdown.getMin(), startBreakdown.getSec());\r\n    GregorianCalendar nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    if (((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 3) && ((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 5))) {\r\n        if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 1) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 2);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 2) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 4) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 6) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 4);\r\n        } else {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 3);\r\n        }\r\n    }\r\n    nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    int currentCount = 1;\r\n    int hitCount = 1;\r\n    do {\r\n        Time nextTime = TimeService.newTime(nextCalendarDate);\r\n        if ((getCount() > 0) && (hitCount > getCount()))\r\n            break;\r\n        if ((getUntil() != null) && isAfter(nextTime, getUntil()))\r\n            break;\r\n        TimeRange nextTimeRange = TimeService.newTimeRange(nextTime.getTime(), prototype.duration());\r\n        if (isOverlap(range, nextTimeRange)) {\r\n            TimeRange eventTimeRange = null;\r\n            if (prototype.isSingleTime()) {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime());\r\n            } else {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime(), nextTimeRange.lastTime(), true, false);\r\n            }\r\n            rv.add(new RecurrenceInstance(eventTimeRange, currentCount));\r\n        } else if (isAfter(nextTime, range.lastTime())) {\r\n            break;\r\n        }\r\n        do {\r\n            nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n            nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, currentCount);\r\n            int weekDay = nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK);\r\n            if ((getInterval() > 1 && (weekDay == 6))) {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, ((getInterval() - 1) * 7) + currentCount + 2);\r\n                currentCount += ((getInterval() - 1) * 7) + 2;\r\n            } else {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n                currentCount++;\r\n            }\r\n        } while (((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 3) && ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 5)));\r\n        hitCount++;\r\n    } while (true);\r\n    return rv;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ParserManager.addParserNoticeHighlights",
	"Comment": "adds highlights for a list of parser notices.any current notices\tfrom the same parser, in the same parsed range, are removed.",
	"Method": "void addParserNoticeHighlights(ParseResult res){\r\n    if (res == null) {\r\n        return;\r\n    }\r\n    if (DEBUG_PARSING) {\r\n        System.out.println(\"[DEBUG]: Adding parser notices from \" + res.getParser());\r\n    }\r\n    if (noticeHighlightPairs == null) {\r\n        noticeHighlightPairs = new ArrayList<NoticeHighlightPair>();\r\n    }\r\n    removeParserNotices(res);\r\n    List<ParserNotice> notices = res.getNotices();\r\n    if (notices.size() > 0) {\r\n        RSyntaxTextAreaHighlighter h = (RSyntaxTextAreaHighlighter) textArea.getHighlighter();\r\n        for (ParserNotice notice : notices) {\r\n            if (DEBUG_PARSING) {\r\n                System.out.println(\"[DEBUG]: ... adding: \" + notice);\r\n            }\r\n            try {\r\n                HighlightInfo highlight = null;\r\n                if (notice.getShowInEditor()) {\r\n                    highlight = h.addParserHighlight(notice, parserErrorHighlightPainter);\r\n                }\r\n                noticeHighlightPairs.add(new NoticeHighlightPair(notice, highlight));\r\n            } catch (BadLocationException ble) {\r\n                ble.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    if (DEBUG_PARSING) {\r\n        System.out.println(\"[DEBUG]: Done adding parser notices from \" + res.getParser());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ClipboardHistory.trim",
	"Comment": "ensures the remembered set of strings is not larger than the maximum\tallowed size.",
	"Method": "void trim(){\r\n    while (history.size() > maxSize) {\r\n        history.remove(0);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.isTooBigNav",
	"Comment": "hides href on resource folders based on a configurable limit sakai.content.resourcelimit",
	"Method": "boolean isTooBigNav(){\r\n    return this.isTooBigNav;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxScheme.equals",
	"Comment": "tests whether this color scheme is the same as another color scheme.",
	"Method": "boolean equals(Object otherScheme){\r\n    if (!(otherScheme instanceof SyntaxScheme)) {\r\n        return false;\r\n    }\r\n    Style[] otherSchemes = ((SyntaxScheme) otherScheme).styles;\r\n    int length = styles.length;\r\n    for (int i = 0; i < length; i++) {\r\n        if (styles[i] == null) {\r\n            if (otherSchemes[i] != null) {\r\n                return false;\r\n            }\r\n        } else if (!styles[i].equals(otherSchemes[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.tsugi.lti2.ContentItem.buildLaunch",
	"Comment": "build up a contentitem launch url from a base url, return url and extra data",
	"Method": "String buildLaunch(String contentLaunch,String contentReturn,Properties contentData){\r\n    StringBuffer sb = new StringBuffer(contentLaunch);\r\n    if (contentLaunch.indexOf(\"?\") > 1) {\r\n        sb.append(\"&\");\r\n    } else {\r\n        sb.append(\"?\");\r\n    }\r\n    sb.append(\"contentReturn=\");\r\n    sb.append(URLEncoder.encode(contentReturn));\r\n    if (contentData == null)\r\n        return sb.toString();\r\n    Enumeration en = contentData.keys();\r\n    while (en.hasMoreElements()) {\r\n        String key = (String) en.nextElement();\r\n        String value = contentData.getProperty(key);\r\n        if (value == null)\r\n            continue;\r\n        sb.append(\"&\");\r\n        sb.append(URLEncoder.encode(key));\r\n        sb.append(\"=\");\r\n        sb.append(URLEncoder.encode(value));\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.AtomServlet.doGet",
	"Comment": "handles an atom get by calling handler and writing results to response.",
	"Method": "void doGet(HttpServletRequest req,HttpServletResponse res){\r\n    LOG.debug(\"Entering\");\r\n    final AtomHandler handler = createAtomRequestHandler(req, res);\r\n    final String userName = handler.getAuthenticatedUsername();\r\n    if (userName != null) {\r\n        final AtomRequest areq = new AtomRequestImpl(req);\r\n        try {\r\n            if (handler.isAtomServiceURI(areq)) {\r\n                final AtomService service = handler.getAtomService(areq);\r\n                final Document doc = service.serviceToDocument();\r\n                res.setContentType(\"application/atomsvc+xml; charset=utf-8\");\r\n                final Writer writer = res.getWriter();\r\n                final XMLOutputter outputter = new XMLOutputter();\r\n                outputter.setFormat(Format.getPrettyFormat());\r\n                outputter.output(doc, writer);\r\n                writer.close();\r\n                res.setStatus(HttpServletResponse.SC_OK);\r\n            } else if (handler.isCategoriesURI(areq)) {\r\n                final Categories cats = handler.getCategories(areq);\r\n                res.setContentType(\"application/xml\");\r\n                final Writer writer = res.getWriter();\r\n                final Document catsDoc = new Document();\r\n                catsDoc.setRootElement(cats.categoriesToElement());\r\n                final XMLOutputter outputter = new XMLOutputter();\r\n                outputter.output(catsDoc, writer);\r\n                writer.close();\r\n                res.setStatus(HttpServletResponse.SC_OK);\r\n            } else if (handler.isCollectionURI(areq)) {\r\n                final Feed col = handler.getCollection(areq);\r\n                col.setFeedType(FEED_TYPE);\r\n                final WireFeedOutput wireFeedOutput = new WireFeedOutput();\r\n                final Document feedDoc = wireFeedOutput.outputJDom(col);\r\n                res.setContentType(\"application/atom+xml; charset=utf-8\");\r\n                final Writer writer = res.getWriter();\r\n                final XMLOutputter outputter = new XMLOutputter();\r\n                outputter.setFormat(Format.getPrettyFormat());\r\n                outputter.output(feedDoc, writer);\r\n                writer.close();\r\n                res.setStatus(HttpServletResponse.SC_OK);\r\n            } else if (handler.isEntryURI(areq)) {\r\n                final Entry entry = handler.getEntry(areq);\r\n                if (entry != null) {\r\n                    res.setContentType(\"application/atom+xml; type=entry; charset=utf-8\");\r\n                    final Writer writer = res.getWriter();\r\n                    Atom10Generator.serializeEntry(entry, writer);\r\n                    writer.close();\r\n                } else {\r\n                    res.setStatus(HttpServletResponse.SC_NOT_FOUND);\r\n                }\r\n            } else if (handler.isMediaEditURI(areq)) {\r\n                final AtomMediaResource entry = handler.getMediaResource(areq);\r\n                res.setContentType(entry.getContentType());\r\n                res.setContentLength((int) entry.getContentLength());\r\n                Utilities.copyInputToOutput(entry.getInputStream(), res.getOutputStream());\r\n                res.getOutputStream().flush();\r\n                res.getOutputStream().close();\r\n            } else {\r\n                res.setStatus(HttpServletResponse.SC_NOT_FOUND);\r\n            }\r\n        } catch (final AtomException ae) {\r\n            res.sendError(ae.getStatus(), ae.getMessage());\r\n            LOG.debug(\"An error occured while processing GET\", ae);\r\n        } catch (final Exception e) {\r\n            res.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\r\n            LOG.debug(\"An error occured while processing GET\", e);\r\n        }\r\n    } else {\r\n        res.setHeader(\"WWW-Authenticate\", \"BASIC realm=\\\"AtomPub\\\"\");\r\n        res.sendError(HttpServletResponse.SC_UNAUTHORIZED);\r\n    }\r\n    LOG.debug(\"Exiting\");\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.doOnNext",
	"Comment": "executes a callback before the value is emitted to downstream.",
	"Method": "Perhaps<T> doOnNext(Consumer<? super T> onNext){\r\n    ObjectHelper.requireNonNull(onNext, \"onNext is null\");\r\n    return onAssembly(new PerhapsDoOnLifecycle<T>(this, onNext, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getRights",
	"Comment": "gets the dublincore module rights. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getRights(){\r\n    return Lists.firstEntry(rights);\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.impl.SiteEmailNotificationAnnc.execute",
	"Comment": "implementation of command pattern. will be called by scheduledinvocationmanager \tfor delayed announcement notifications",
	"Method": "void execute(String opaqueContext){\r\n    final Reference ref = entityManager.newReference(opaqueContext);\r\n    try {\r\n        enableSecurityAdvisorToGetAnnouncement();\r\n        final AnnouncementMessage msg = (AnnouncementMessage) ref.getEntity();\r\n        if (msg != null) {\r\n            final AnnouncementMessageHeader hdr = (AnnouncementMessageHeader) msg.getAnnouncementHeader();\r\n            final String notification = msg.getProperties().getProperty(\"notificationLevel\");\r\n            int noti = NotificationService.NOTI_OPTIONAL;\r\n            if (\"r\".equals(notification)) {\r\n                noti = NotificationService.NOTI_REQUIRED;\r\n            } else if (\"n\".equals(notification)) {\r\n                noti = NotificationService.NOTI_NONE;\r\n            }\r\n            final Event delayedNotificationEvent = eventTrackingService.newEvent(\"annc.schInv.notify\", msg.getReference(), true, noti);\r\n            NotificationEdit notify = notificationService.addTransientNotification();\r\n            super.notify(notify, delayedNotificationEvent);\r\n        }\r\n    } finally {\r\n        disableSecurityAdvisor();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LispTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.openurl.Utils.appendFirst",
	"Comment": "simple utility function for adding the first value of the list of strings to the buffer.",
	"Method": "boolean appendFirst(StringBuilder buffer,List<String> values,String seperator){\r\n    if (values != null && !values.isEmpty()) {\r\n        String value = values.get(0);\r\n        if (value != null) {\r\n            if (seperator != null) {\r\n                buffer.append(seperator);\r\n            }\r\n            buffer.append(value);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ConfigurableCaret.damage",
	"Comment": "overridden to damage the correct width of the caret, since this caret\tcan be different sizes.",
	"Method": "void damage(Rectangle r){\r\n    if (r != null) {\r\n        validateWidth(r);\r\n        x = r.x - 1;\r\n        y = r.y;\r\n        width = r.width + 4;\r\n        height = r.height;\r\n        repaint();\r\n    }\r\n}"
}, {
	"Path": "co.rsk.scoring.PeerScoringManager.getPeersInformation",
	"Comment": "returns the list of peer scoring informationit contains the information recorded by node id and by address",
	"Method": "List<PeerScoringInformation> getPeersInformation(){\r\n    synchronized (accessLock) {\r\n        List<PeerScoringInformation> list = new ArrayList(this.peersByNodeID.size() + this.peersByAddress.size());\r\n        list.addAll(this.peersByNodeID.entrySet().stream().map(entry -> new PeerScoringInformation(entry.getValue(), Hex.toHexString(entry.getKey().getID()).substring(0, 8), \"node\")).collect(Collectors.toList()));\r\n        list.addAll(this.peersByAddress.entrySet().stream().map(entry -> new PeerScoringInformation(entry.getValue(), entry.getKey().getHostAddress(), \"address\")).collect(Collectors.toList()));\r\n        return list;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.parser.AbstractParser.getImageBase",
	"Comment": "returns null.parsers that wish to show images in their\ttool tips should override this method to return the image base url.",
	"Method": "URL getImageBase(){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.ExclusionSeqRecurrenceRule.excludeInstances",
	"Comment": "remove from the ranges list any recurrenceinstance excluded by this rule.",
	"Method": "void excludeInstances(List ranges){\r\n    Vector rv = new Vector();\r\n    for (Iterator iInstances = ranges.iterator(); iInstances.hasNext(); ) {\r\n        RecurrenceInstance ri = (RecurrenceInstance) iInstances.next();\r\n        if (!m_exclusions.contains(ri.getSequence())) {\r\n            rv.add(ri);\r\n        }\r\n    }\r\n    ranges.clear();\r\n    ranges.addAll(rv);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.setIsTooBigNav",
	"Comment": "hides href on resource folders based on a configurable limit sakai.content.resourcelimit",
	"Method": "void setIsTooBigNav(boolean isTooBigNav){\r\n    this.isTooBigNav = isTooBigNav;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.extension.BrowseEntity.addEntityViewKeys",
	"Comment": "adds a view key which is known to be supported by this entity types access provider",
	"Method": "void addEntityViewKeys(String entityViewKey){\r\n    if (this.entityAccessViews == null) {\r\n        this.entityAccessViews = new Vector<String>();\r\n    }\r\n    if (!this.entityAccessViews.contains(entityViewKey)) {\r\n        this.entityAccessViews.add(entityViewKey);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.isGroupShowing",
	"Comment": "query whether the indicated metadata group is showing for the item",
	"Method": "boolean isGroupShowing(String group){\r\n    return m_metadataGroupsShowing.contains(group) || m_metadataGroupsShowing.contains(Validator.escapeUrl(group));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MxmlTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JsonTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.doOnCancel",
	"Comment": "executes the callback if the downstream cancels the sequence.",
	"Method": "Perhaps<T> doOnCancel(Action onCancel){\r\n    ObjectHelper.requireNonNull(onCancel, \"onCancel is null\");\r\n    return onAssembly(new PerhapsDoOnLifecycle<T>(this, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, onCancel));\r\n}"
}, {
	"Path": "org.sakaiproject.content.entityproviders.DropboxEntityProvider.canAccessDropbox",
	"Comment": "can the current user actually access the requested dropbox?\tadmin, dropbox.maintain and dropbox.own are allowed",
	"Method": "boolean canAccessDropbox(String siteId,String dropboxUserId){\r\n    String currentUserId = userDirectoryService.getCurrentUser().getId();\r\n    if (securityService.isSuperUser(currentUserId)) {\r\n        return true;\r\n    }\r\n    String siteRef = \"\";\r\n    if (siteId != null && !siteId.startsWith(SiteService.REFERENCE_ROOT)) {\r\n        siteRef = SiteService.REFERENCE_ROOT + Entity.SEPARATOR + siteId;\r\n    }\r\n    if (StringUtils.equals(currentUserId, dropboxUserId) && securityService.unlock(currentUserId, ContentHostingService.AUTH_DROPBOX_OWN, siteRef)) {\r\n        return true;\r\n    }\r\n    if (securityService.unlock(currentUserId, ContentHostingService.AUTH_DROPBOX_MAINTAIN, siteRef)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HostsTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    first = true;\r\n    int state = YYINITIAL;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.endorsed.i18n.spi.SakaiNumberFormatProvider.getInstance",
	"Comment": "returns a new numberformat instance for the specified key and locale.",
	"Method": "NumberFormat getInstance(String key,Locale locale){\r\n    if (locale == null) {\r\n        throw new NullPointerException(\"locale:null\");\r\n    } else if (!SakaiLocaleServiceProviderUtil.isAvailableLocale(locale)) {\r\n        throw new IllegalArgumentException(\"locale:\" + locale.toString());\r\n    }\r\n    DecimalFormat format = new DecimalFormat();\r\n    format.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(locale));\r\n    String pattern = SakaiLocaleServiceProviderUtil.getString(key, locale);\r\n    format.applyLocalizedPattern(pattern);\r\n    return format;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.GroovyTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "net.oauth.OAuth.newList",
	"Comment": "construct a list of parameters from name, value, name, value...",
	"Method": "List<Parameter> newList(String parameters){\r\n    List<Parameter> list = new ArrayList<Parameter>(parameters.length / 2);\r\n    for (int p = 0; p + 1 < parameters.length; p += 2) {\r\n        list.add(new Parameter(parameters[p], parameters[p + 1]));\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "org.sakaiproject.blti.tool.LTIAdminTool.buildErrorPanelContext",
	"Comment": "setup the velocity context and choose the template for the response.",
	"Method": "String buildErrorPanelContext(VelocityPortlet portlet,Context context,RunData rundata,SessionState state){\r\n    context.put(\"tlang\", rb);\r\n    context.put(\"includeLatestJQuery\", PortalUtils.includeLatestJQuery(\"LTIAdminTool\"));\r\n    state.removeAttribute(STATE_ID);\r\n    state.removeAttribute(STATE_TOOL_ID);\r\n    state.removeAttribute(STATE_POST);\r\n    state.removeAttribute(STATE_SUCCESS);\r\n    state.removeAttribute(STATE_REDIRECT_URL);\r\n    return \"lti_error\";\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.RubyTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.eventReference",
	"Comment": "access the internal reference which can be used to access the event from within the system.",
	"Method": "String eventReference(String context,String calendarId,String id){\r\n    return getAccessPoint(true) + Entity.SEPARATOR + REF_TYPE_EVENT + Entity.SEPARATOR + context + Entity.SEPARATOR + calendarId + Entity.SEPARATOR + id;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.UnixShellTokenMakerTest.assertTokenMapContains",
	"Comment": "checks for a token in a token map, and makes sure it is mapped to the\texpected token type.",
	"Method": "void assertTokenMapContains(TokenMap tm,String token,int tokenType){\r\n    int actualType = tm.get(token.toCharArray(), 0, token.length() - 1);\r\n    Assert.assertEquals(\"Token mapped to unexpected type: \" + token, tokenType, actualType);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ChangeableHighlightPainter.getAlphaComposite",
	"Comment": "returns the alpha composite to use when rendering highlights with this\tpainter.",
	"Method": "AlphaComposite getAlphaComposite(){\r\n    if (alphaComposite == null) {\r\n        alphaComposite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha);\r\n    }\r\n    return alphaComposite;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.toFlowable",
	"Comment": "convert this nono instance into a flowable that only terminates.",
	"Method": "Flowable<T> toFlowable(){\r\n    return (Flowable) Flowable.fromPublisher(this);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getBitrate",
	"Comment": "bitrate is the kilobits per second rate of media. it is an optional attribute.",
	"Method": "Float getBitrate(){\r\n    return bitrate;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.HttpTransactionQueryBase.getParameterName",
	"Comment": "get the parameter name associated with the 1st occurance of this value",
	"Method": "String getParameterName(String value){\r\n    return _transaction.getParameterName(value);\r\n}"
}, {
	"Path": "co.rsk.net.NodeBlockProcessor.processBodyRequest",
	"Comment": "processbodyrequest sends the requested block body to a peer if it is available.",
	"Method": "void processBodyRequest(MessageChannel sender,long requestId,byte[] hash){\r\n    logger.trace(\"Processing body request {} {} from {}\", requestId, Hex.toHexString(hash).substring(0, 10), sender.getPeerNodeID());\r\n    final Block block = blockSyncService.getBlockFromStoreOrBlockchain(hash);\r\n    if (block == null) {\r\n        return;\r\n    }\r\n    Message responseMessage = new BodyResponseMessage(requestId, block.getTransactionsList(), block.getUncleList());\r\n    sender.sendMessage(responseMessage);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.PatternN.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function<? super Object[], R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new PlanN<R>(this, selector);\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testPersona2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testPersona2Parse(){\r\n    LOG.debug(\"testPerson2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/personals2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Person module = (Person) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Personals\", \"m4w\" }, module.getLabels());\r\n    this.assertEquals(\"Ethnicity\", new String[] { \"South Asian\" }, module.getEthnicities());\r\n    Assert.assertEquals(\"Gender\", GenderEnumeration.MALE, module.getGender());\r\n    Assert.assertEquals(\"Sexual Orientation\", \"straight\", module.getSexualOrientation());\r\n    this.assertEquals(\"Interested In\", new String[] { \"Single Women\" }, module.getInterestedIn());\r\n    Assert.assertEquals(\"Marital Status\", \"single\", module.getMaritalStatus());\r\n    Assert.assertEquals(\"Occupation\", \"Sales\", module.getOccupation());\r\n    Assert.assertEquals(\"Employer\", \"Google, Inc.\", module.getEmployer());\r\n    Assert.assertEquals(\"Age\", new Integer(23), module.getAge());\r\n    Assert.assertEquals(\"Location\", \"Anytown, 12345, USA\", module.getLocation());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.amb",
	"Comment": "returns a nono that terminates when the first nono from thesources sequence terminates.",
	"Method": "Nono amb(Iterable<? extends Nono> sources){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    return onAssembly(new NonoAmbIterable(sources));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.atom.Content.getValue",
	"Comment": "returns the content value.the return value should be decoded.",
	"Method": "String getValue(){\r\n    return value;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.onErrorResumeWith",
	"Comment": "if the upstream signals an error, switch to the given fallbackperhaps.",
	"Method": "Perhaps<T> onErrorResumeWith(Perhaps<? extends T> fallback){\r\n    ObjectHelper.requireNonNull(fallback, \"fallback is null\");\r\n    return onAssembly(new PerhapsOnErrorResumeWith<T>(this, fallback));\r\n}"
}, {
	"Path": "com.rometools.rome.io.SyndFeedInput.setAllowDoctypes",
	"Comment": "since rome 1.5.1 we fixed a security vulnerability by disallowing doctype declarations by default. this change breaks the compatibility with at least rss 0.91n because it requires a doctype declaration. you are able to allow doctype declarations again with this property. you should only activate it when the feeds that you process are absolutely trustful.",
	"Method": "void setAllowDoctypes(boolean allowDoctypes){\r\n    feedInput.setAllowDoctypes(allowDoctypes);\r\n}"
}, {
	"Path": "co.rsk.net.NodeBlockProcessor.hasBlock",
	"Comment": "hasblock checks if a given hash is in the store or in the blockchain, or in the blockchain index.",
	"Method": "boolean hasBlock(byte[] hash){\r\n    return hasBlockInProcessorStore(hash) || hasBlockInSomeBlockchain(hash);\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.getDirectChildren",
	"Comment": "returns direct children for the parent.children will have empty lists.",
	"Method": "List<List> getDirectChildren(HierarchyNodeSerialized parent){\r\n    List<List> returnList = new ArrayList<List>();\r\n    if (parent != null) {\r\n        Set<String> parentChildren = parent.directChildNodeIds;\r\n        Map<String, HierarchyNodeSerialized> childreNodes = getCachedNodes(parentChildren.toArray(new String[parentChildren.size()]));\r\n        for (String childId : parentChildren) {\r\n            if (childreNodes.containsKey(childId)) {\r\n                List child = new ArrayList();\r\n                child.add(childreNodes.get(childId));\r\n                child.add(new ArrayList());\r\n                returnList.add(child);\r\n            }\r\n        }\r\n    }\r\n    return returnList;\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.RSS090Generator.populateChannel",
	"Comment": "populates the given channel with parsed data from the rome element that holds the channeldata.",
	"Method": "void populateChannel(Channel channel,Element eChannel){\r\n    final String title = channel.getTitle();\r\n    if (title != null) {\r\n        eChannel.addContent(generateSimpleElement(\"title\", title));\r\n    }\r\n    final String link = channel.getLink();\r\n    if (link != null) {\r\n        eChannel.addContent(generateSimpleElement(\"link\", link));\r\n    }\r\n    final String description = channel.getDescription();\r\n    if (description != null) {\r\n        eChannel.addContent(generateSimpleElement(\"description\", description));\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconRowHeader.getActiveLineRangeColor",
	"Comment": "returns the color used to paint the active line range, if any.",
	"Method": "Color getActiveLineRangeColor(){\r\n    return activeLineRangeColor;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.cover.AnnouncementService.channelReference",
	"Comment": "access the internal reference which can be used to access the channel from within the system.",
	"Method": "java.lang.String channelReference(java.lang.String param0,java.lang.String param1){\r\n    org.sakaiproject.announcement.api.AnnouncementService service = getInstance();\r\n    if (service == null)\r\n        return null;\r\n    return service.channelReference(param0, param1);\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.isOkToShowMergeButton",
	"Comment": "returns true if it is okay to show the merge button in the menu.",
	"Method": "boolean isOkToShowMergeButton(String statusName){\r\n    String displayMerge = serverConfigurationService.getString(\"announcement.merge.display\", \"1\");\r\n    if (displayMerge != null && !displayMerge.equals(\"1\"))\r\n        return false;\r\n    return SiteService.allowUpdateSite(ToolManager.getCurrentPlacement().getContext()) && !isOnWorkspaceTab();\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.setSiteService",
	"Comment": "called by the spring framework to initialize the siteservice data member specified in the components.xml file via ioc.",
	"Method": "void setSiteService(SiteService siteService){\r\n    this.siteService = siteService;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DartTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.concat",
	"Comment": "concatenate the values in order from a sequence of perhaps sources.",
	"Method": "Flowable<T> concat(Iterable<? extends Perhaps<? extends T>> sources,Flowable<T> concat,Publisher<? extends Perhaps<? extends T>> sources,Flowable<T> concat,Publisher<? extends Perhaps<? extends T>> sources,int prefetch){\r\n    return Flowable.concat(sources, prefetch);\r\n}"
}, {
	"Path": "co.rsk.blockchain.utils.BlockMiner.findNonce",
	"Comment": "findnonce will try to find a valid nonce for bitcoinmergedminingblock, that satisfies the given target difficulty.",
	"Method": "void findNonce(co.rsk.bitcoinj.core.BtcBlock bitcoinMergedMiningBlock,BigInteger target){\r\n    bitcoinMergedMiningBlock.setNonce(nextNonceToUse++);\r\n    while (true) {\r\n        BigInteger blockHashBI = bitcoinMergedMiningBlock.getHash().toBigInteger();\r\n        if (blockHashBI.compareTo(target) <= 0)\r\n            return;\r\n        bitcoinMergedMiningBlock.setNonce(nextNonceToUse++);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.CurlyFoldParser.isLeftCurly",
	"Comment": "returns whether the token is a left curly brace.this method exists\tso subclasses can provide their own curly brace definition.",
	"Method": "boolean isLeftCurly(Token t){\r\n    return t.isLeftCurly();\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getUTXOBasedWalletForLiveFederations",
	"Comment": "get the wallet for the currently live federationsbut limited to a specific list of utxos",
	"Method": "Wallet getUTXOBasedWalletForLiveFederations(List<UTXO> utxos){\r\n    return BridgeUtils.getFederationsSpendWallet(btcContext, getLiveFederations(), utxos);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.JoinPatterns.then",
	"Comment": "matches when the observable sequence has an available element and projects the element by invoking the selector function.",
	"Method": "Plan<R> then(Observable<T1> source,Function<? super T1, ? extends R> selector){\r\n    if (source == null) {\r\n        throw new NullPointerException(\"source\");\r\n    }\r\n    if (selector == null) {\r\n        throw new NullPointerException(\"selector\");\r\n    }\r\n    return new Pattern1<T1>(source).then(selector);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.removeAnnouncement",
	"Comment": "private function to remove assignment related announcement",
	"Method": "void removeAnnouncement(SessionState state,Map<String, String> properties){\r\n    AnnouncementChannel channel = (AnnouncementChannel) state.getAttribute(ANNOUNCEMENT_CHANNEL);\r\n    if (channel != null) {\r\n        String openDateAnnounced = StringUtils.trimToNull(properties.get(NEW_ASSIGNMENT_OPEN_DATE_ANNOUNCED));\r\n        String openDateAnnouncementId = StringUtils.trimToNull(properties.get(ResourceProperties.PROP_ASSIGNMENT_OPENDATE_ANNOUNCEMENT_MESSAGE_ID));\r\n        if (openDateAnnounced != null && openDateAnnouncementId != null) {\r\n            try {\r\n                channel.removeMessage(openDateAnnouncementId);\r\n            } catch (PermissionException e) {\r\n                log.warn(\"Could not remove Announcement: {}, {}\", openDateAnnouncementId, e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.rometools.opml.feed.opml.Outline.getXmlUrl",
	"Comment": "a convenience method to return the value of the xmlurl attribute.",
	"Method": "String getXmlUrl(){\r\n    return getAttributeValue(\"xmlUrl\");\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.dao.impl.DelegatedAccessDaoImpl.initStatements",
	"Comment": "loads our sql statements from the appropriate properties file",
	"Method": "void initStatements(String vendor){\r\n    URL url = getClass().getClassLoader().getResource(vendor + \".properties\");\r\n    try {\r\n        statements = new PropertiesConfiguration();\r\n        statements.setReloadingStrategy(new InvariantReloadingStrategy());\r\n        statements.setThrowExceptionOnMissing(true);\r\n        statements.setDelimiterParsingDisabled(true);\r\n        statements.load(url);\r\n    } catch (ConfigurationException e) {\r\n        log.error(e.getClass() + \": \" + e.getMessage(), e);\r\n        return;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.getPreferredSpan",
	"Comment": "determines the preferred span for this view along an\taxis.",
	"Method": "float getPreferredSpan(int axis){\r\n    updateMetrics();\r\n    switch(axis) {\r\n        case View.X_AXIS:\r\n            float span = longLineWidth + getRhsCorrection();\r\n            if (host.getEOLMarkersVisible()) {\r\n                span += metrics.charWidth('?');\r\n            }\r\n            return span;\r\n        case View.Y_AXIS:\r\n            lineHeight = host != null ? host.getLineHeight() : lineHeight;\r\n            int visibleLineCount = getElement().getElementCount();\r\n            if (host.isCodeFoldingEnabled()) {\r\n                visibleLineCount -= host.getFoldManager().getHiddenLineCount();\r\n            }\r\n            return visibleLineCount * (float) lineHeight;\r\n        default:\r\n            throw new IllegalArgumentException(\"Invalid axis: \" + axis);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getCalendarReferences",
	"Comment": "javadoc can be found org.sakaiproject.calendar.api.calendarservice.",
	"Method": "List<String> getCalendarReferences(String siteId){\r\n    String initMergeList = null;\r\n    try {\r\n        ToolConfiguration tc = m_siteService.getSite(siteId).getToolForCommonId(\"sakai.schedule\");\r\n        if (tc != null) {\r\n            initMergeList = tc.getPlacementConfig().getProperty(\"mergedCalendarReferences\");\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        initMergeList = null;\r\n    }\r\n    String primaryCalendarReference = calendarReference(siteId, SiteService.MAIN_CONTAINER);\r\n    MergedList mergedCalendarList = loadChannels(siteId, primaryCalendarReference, initMergeList, null);\r\n    List referenceList = mergedCalendarList.getReferenceList();\r\n    Set<ExternalSubscriptionDetails> subscriptionDetailsList = externalCalendarSubscriptionService.getCalendarSubscriptionChannelsForChannels(primaryCalendarReference, referenceList);\r\n    subscriptionDetailsList.stream().forEach(x -> referenceList.add(x.getReference()));\r\n    return referenceList;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.GroovyTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = MULTILINE_STRING_DOUBLE;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = MULTILINE_STRING_SINGLE;\r\n            start = text.offset;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        case Token.COMMENT_DOCUMENTATION:\r\n            state = DOCCOMMENT;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.verify",
	"Comment": "verifies the given ecdsa signature against the message bytes using the public key bytes.when using native ecdsa verification, data must be 32 bytes, and no element may belarger than 520 bytes.",
	"Method": "boolean verify(byte[] data,ECDSASignature signature,byte[] pub,boolean verify,byte[] sigHash,ECDSASignature signature){\r\n    return ECKey.verify(sigHash, signature, getPubKey());\r\n}"
}, {
	"Path": "org.ethereum.vm.DataWord.longValue",
	"Comment": "converts this dataword to a long.if data overflows, it will consider only the last 8 bytes",
	"Method": "long longValue(){\r\n    long longVal = 0;\r\n    for (int i = data.length - 8; i < data.length; i++) {\r\n        longVal = (longVal << 8) + (data[i] & 0xff);\r\n    }\r\n    return longVal;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ConfigurableCaret.mousePressed",
	"Comment": "overridden to also focus the text component on right mouse clicks.",
	"Method": "void mousePressed(MouseEvent e){\r\n    super.mousePressed(e);\r\n    if (!e.isConsumed() && SwingUtilities.isRightMouseButton(e)) {\r\n        JTextComponent c = getComponent();\r\n        if (c != null && c.isEnabled() && c.isRequestFocusEnabled()) {\r\n            c.requestFocusInWindow();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.cover.AnnouncementService.getMessage",
	"Comment": "get a message, given a reference. this call avoids the need to have channel security, as long as the user has permissions to the message.",
	"Method": "org.sakaiproject.message.api.Message getMessage(org.sakaiproject.entity.api.Reference param0){\r\n    org.sakaiproject.announcement.api.AnnouncementService service = getInstance();\r\n    if (service == null)\r\n        return null;\r\n    return service.getMessage(param0);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.selectElementsByAttributeValue",
	"Comment": "return a list of named elements with a specific attribute value.",
	"Method": "List selectElementsByAttributeValue(Element element,String name,String attribute,String value,List selectElementsByAttributeValue,Element element,String name,String attribute,String value,boolean returnFirst){\r\n    NodeList elementList = element.getElementsByTagName(name);\r\n    List resultList = new ArrayList();\r\n    for (int i = 0; i < elementList.getLength(); i++) {\r\n        if (getAttribute((Element) elementList.item(i), attribute).equals(value)) {\r\n            resultList.add(elementList.item(i));\r\n            if (returnFirst) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return resultList;\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testHousing2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testHousing2Parse(){\r\n    LOG.debug(\"testHousing2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/housing2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    SyndEntry entry = entries.get(0);\r\n    Housing module = (Housing) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2007, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Housing\", \"New House\", \"Sale\" }, module.getLabels());\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, module.getCurrency());\r\n    Assert.assertEquals(\"Price\", 350000, module.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceUnit\", null, module.getPrice().getUnits());\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, module.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.CASH, PaymentTypeEnumeration.CHECK, PaymentTypeEnumeration.VISA }, module.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment Notes\", \"1000 deposit\", module.getPaymentNotes());\r\n    Assert.assertEquals(\"Listing Type\", new Boolean(true), module.getListingType());\r\n    this.assertEquals(\"PropertyTypes\", new String[] { \"Townhouse\" }, module.getPropertyTypes());\r\n    Assert.assertEquals(\"Location\", \"123 Main St, Anytown, CA, 12345, USA\", module.getLocation());\r\n    Assert.assertEquals(\"Bedrooms\", new Integer(3), module.getBedrooms());\r\n    Assert.assertEquals(\"Bathrooms\", new Float(3), module.getBathrooms());\r\n    Assert.assertEquals(\"Area\", 1300, module.getArea().getValue());\r\n    Assert.assertEquals(\"Area Units\", null, module.getArea().getUnits());\r\n    Assert.assertEquals(\"School District\", \"Union School District\", module.getSchoolDistrict());\r\n    Assert.assertEquals(\"HOA Dues\", new Float(120), module.getHoaDues());\r\n    Assert.assertEquals(\"Year\", \"2005\", module.getYear().toString());\r\n    this.assertEquals(\"Agents\", new String[] { \"Sue Smith\" }, module.getAgents());\r\n    Assert.assertEquals(\"Tax Region\", \"California\", module.getTaxRegion());\r\n    Assert.assertEquals(\"Tax Percentage\", new Float(8.25), module.getTaxPercent());\r\n    entry = entries.get(1);\r\n    module = (Housing) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image2.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2008, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Housing\", \"rent\", \"lease\" }, module.getLabels());\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, module.getCurrency());\r\n    Assert.assertEquals(\"Price\", 1400, module.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceUnit\", null, module.getPrice().getUnits());\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, module.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.CHECK }, module.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment Notes\", \"1000 deposit\", module.getPaymentNotes());\r\n    Assert.assertEquals(\"Listing Type\", new Boolean(false), module.getListingType());\r\n    this.assertEquals(\"PropertyTypes\", new String[] { \"apartment\" }, module.getPropertyTypes());\r\n    Assert.assertEquals(\"Location\", \"123 Main St, Anytown, CA, 12345, USA\", module.getLocation());\r\n    Assert.assertEquals(\"Bedrooms\", new Integer(2), module.getBedrooms());\r\n    Assert.assertEquals(\"Bathrooms\", new Float(2), module.getBathrooms());\r\n    Assert.assertEquals(\"Area\", 1100, module.getArea().getValue());\r\n    Assert.assertEquals(\"Area Units\", null, module.getArea().getUnits());\r\n    Assert.assertEquals(\"School District\", \"Union School District\", module.getSchoolDistrict());\r\n    Assert.assertEquals(\"HOA Dues\", null, module.getHoaDues());\r\n    Assert.assertEquals(\"Year\", \"2004\", module.getYear().toString());\r\n    this.assertEquals(\"Agents\", new String[] { \"Sue Smith\" }, module.getAgents());\r\n    Assert.assertEquals(\"Tax Region\", null, module.getTaxRegion());\r\n    Assert.assertEquals(\"Tax Percentage\", null, module.getTaxPercent());\r\n}"
}, {
	"Path": "co.rsk.mine.BlockToMineBuilder.build",
	"Comment": "build creates a block to mine based on the given block as parent.",
	"Method": "Block build(Block newBlockParent,byte[] extraData){\r\n    List<BlockHeader> uncles = FamilyUtils.getUnclesHeaders(blockStore, newBlockParent.getNumber() + 1, newBlockParent.getHash().getBytes(), miningConfig.getUncleGenerationLimit());\r\n    if (uncles.size() > miningConfig.getUncleListLimit()) {\r\n        uncles = uncles.subList(0, miningConfig.getUncleListLimit());\r\n    }\r\n    Coin minimumGasPrice = minimumGasPriceCalculator.calculate(newBlockParent.getMinimumGasPrice(), minerMinGasPriceTarget);\r\n    final List<Transaction> txsToRemove = new ArrayList();\r\n    final List<Transaction> txs = getTransactions(txsToRemove, newBlockParent, minimumGasPrice);\r\n    minimumAcceptableTime = newBlockParent.getTimestamp() + 1;\r\n    final Block newBlock = createBlock(newBlockParent, uncles, txs, minimumGasPrice);\r\n    newBlock.setExtraData(extraData);\r\n    removePendingTransactions(txsToRemove);\r\n    executor.executeAndFill(newBlock, newBlockParent);\r\n    return newBlock;\r\n}"
}, {
	"Path": "co.rsk.scoring.PeerScoringManager.unbanAddressBlock",
	"Comment": "removes a network address block from the set of banned blocks",
	"Method": "void unbanAddressBlock(InetAddressBlock addressBlock){\r\n    this.addressTable.removeAddressBlock(addressBlock);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.concat",
	"Comment": "concatenate the values in order from a sequence of solo sources.",
	"Method": "Flowable<T> concat(Iterable<? extends Solo<? extends T>> sources,Flowable<T> concat,Publisher<? extends Solo<? extends T>> sources,Flowable<T> concat,Publisher<? extends Solo<? extends T>> sources,int prefetch){\r\n    return Flowable.concat(sources, prefetch);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.getCalendarReferenceList",
	"Comment": "gets an array of all the calendars whose events we can access.",
	"Method": "List getCalendarReferenceList(VelocityPortlet portlet,String primaryCalendarReference,boolean isOnWorkspaceTab){\r\n    MergedList mergedCalendarList = loadChannels(primaryCalendarReference, portlet.getPortletConfig().getInitParameter(PORTLET_CONFIG_PARM_MERGED_CALENDARS), null);\r\n    List referenceList = mergedCalendarList.getReferenceList();\r\n    Set<ExternalSubscriptionDetails> subscriptionDetailsList = externalCalendarSubscriptionService.getCalendarSubscriptionChannelsForChannels(primaryCalendarReference, referenceList);\r\n    subscriptionDetailsList.stream().forEach(x -> referenceList.add(x.getReference()));\r\n    return referenceList;\r\n}"
}, {
	"Path": "org.sakaibrary.osid.repository.xserver.AssetIterator.recordHasPart",
	"Comment": "this method searches the current record for a part using its\tpartstructure type.",
	"Method": "org.osid.repository.Part recordHasPart(org.osid.shared.Type partStructureType){\r\n    try {\r\n        org.osid.repository.PartIterator pit = record.getParts();\r\n        while (pit.hasNextPart()) {\r\n            org.osid.repository.Part part = pit.nextPart();\r\n            if (part.getPartStructure().getType().isEqual(partStructureType)) {\r\n                return part;\r\n            }\r\n        }\r\n    } catch (org.osid.repository.RepositoryException re) {\r\n        log.warn(\"recordHasPart() failed getting Parts.\", re);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.BaseSearchManager.getSaveciteUrl",
	"Comment": "supply the url for the savecite servlet to add a citation to a particular citation list.",
	"Method": "String getSaveciteUrl(String resourceId,String saveciteClientId){\r\n    StringBuilder buf = new StringBuilder();\r\n    String serverUrl = serverConfigurationService.getServerUrl();\r\n    buf.append(serverUrl);\r\n    buf.append(Entity.SEPARATOR);\r\n    buf.append(SERVLET_NAME);\r\n    buf.append(Entity.SEPARATOR);\r\n    buf.append(resourceId);\r\n    buf.append('?');\r\n    buf.append(SAKAI_SESSION);\r\n    buf.append(\"=nada&client=\");\r\n    buf.append(saveciteClientId);\r\n    return buf.toString();\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientMediaEntry.setSlug",
	"Comment": "get string to be used in file name of new media resource on server.",
	"Method": "void setSlug(String slug){\r\n    this.slug = slug;\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.orderTreeModel",
	"Comment": "takes a list representation of the tree and orders it alphabetically",
	"Method": "void orderTreeModel(List<List> hierarchy){\r\n    if (hierarchy != null) {\r\n        for (List nodeList : hierarchy) {\r\n            orderTreeModel((List) nodeList.get(1));\r\n        }\r\n        Collections.sort(hierarchy, new NodeListComparator());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.viewToModel",
	"Comment": "provides a mapping from the view coordinate space to the logical\tcoordinate space of the model.",
	"Method": "int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){\r\n    bias[0] = Position.Bias.Forward;\r\n    Rectangle alloc = a.getBounds();\r\n    RSyntaxDocument doc = (RSyntaxDocument) getDocument();\r\n    int x = (int) fx;\r\n    int y = (int) fy;\r\n    if (y < alloc.y) {\r\n        return getStartOffset();\r\n    } else if (y > alloc.y + alloc.height) {\r\n        return host.getLastVisibleOffset();\r\n    } else {\r\n        Element map = doc.getDefaultRootElement();\r\n        lineHeight = host != null ? host.getLineHeight() : lineHeight;\r\n        int lineIndex = Math.abs((y - alloc.y) / lineHeight);\r\n        FoldManager fm = host.getFoldManager();\r\n        lineIndex += fm.getHiddenLineCountAbove(lineIndex, true);\r\n        if (lineIndex >= map.getElementCount()) {\r\n            return host.getLastVisibleOffset();\r\n        }\r\n        Element line = map.getElement(lineIndex);\r\n        if (x < alloc.x) {\r\n            return line.getStartOffset();\r\n        } else if (x > alloc.x + alloc.width) {\r\n            return line.getEndOffset() - 1;\r\n        } else {\r\n            int p0 = line.getStartOffset();\r\n            Token tokenList = doc.getTokenListForLine(lineIndex);\r\n            tabBase = alloc.x;\r\n            int offs = tokenList.getListOffset((RSyntaxTextArea) getContainer(), this, tabBase, x);\r\n            return offs != -1 ? offs : p0;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.OnlyAudioBase.disableAudio",
	"Comment": "mute microphone, can be called before, while and after stream.",
	"Method": "void disableAudio(){\r\n    microphoneManager.mute();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.flatMap",
	"Comment": "maps the success value or the failure of this solo into anothersolo and emits its signal.",
	"Method": "Solo<R> flatMap(Function<? super T, ? extends Solo<? extends R>> mapper,Solo<R> flatMap,Function<? super T, ? extends Solo<? extends R>> onSuccessMapper,Function<? super Throwable, ? extends Solo<? extends R>> onErrorMapper){\r\n    ObjectHelper.requireNonNull(onSuccessMapper, \"onSuccessMapper is null\");\r\n    ObjectHelper.requireNonNull(onErrorMapper, \"onErrorMapper is null\");\r\n    return onAssembly(new SoloFlatMapSignal<T, R>(this, onSuccessMapper, onErrorMapper));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ClipboardHistoryPopup.insertSelectedItem",
	"Comment": "inserts the selected item into the editor and disposes of this popup.",
	"Method": "void insertSelectedItem(){\r\n    Object lvp = list.getSelectedValue();\r\n    if (lvp != null) {\r\n        listener.uninstallAndHide();\r\n        String text = ((LabelValuePair) lvp).value;\r\n        textArea.replaceSelection(text);\r\n        ClipboardHistory.get().add(text);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.DCModuleParser.parseElementList",
	"Comment": "utility method to parse a list of strings out of a list of elements.",
	"Method": "List<String> parseElementList(List<Element> elements){\r\n    final List<String> values = new ArrayList<String>();\r\n    for (final Element element : elements) {\r\n        values.add(element.getText());\r\n    }\r\n    return values;\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.getSecurityService",
	"Comment": "returns the instance of the securityservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "SecurityService getSecurityService(){\r\n    return securityService;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.compose",
	"Comment": "applies a function to this perhaps and returns the perhaps it returned.",
	"Method": "Perhaps<R> compose(Function<? super Perhaps<T>, ? extends Perhaps<R>> composer){\r\n    return to(composer);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip.setImageBase",
	"Comment": "sets the base url to use when loading images in this focusable tip.",
	"Method": "void setImageBase(URL url){\r\n    imageBase = url;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconRowHeader.setBookmarkIcon",
	"Comment": "sets the icon to use for bookmarks.any previous bookmark icons\tare removed.",
	"Method": "void setBookmarkIcon(Icon icon){\r\n    removeBookmarkTrackingIcons();\r\n    bookmarkIcon = icon;\r\n    repaint();\r\n}"
}, {
	"Path": "co.rsk.mine.AutoMinerClient.findNonce",
	"Comment": "find a valid nonce for bitcoinmergedminingblock, that satisfies the given target difficulty.",
	"Method": "boolean findNonce(co.rsk.bitcoinj.core.BtcBlock bitcoinMergedMiningBlock,BigInteger target){\r\n    long nextNonceToUse = 0;\r\n    bitcoinMergedMiningBlock.setNonce(nextNonceToUse++);\r\n    while (true) {\r\n        BigInteger blockHashBI = bitcoinMergedMiningBlock.getHash().toBigInteger();\r\n        if (blockHashBI.compareTo(target) <= 0) {\r\n            return true;\r\n        }\r\n        bitcoinMergedMiningBlock.setNonce(nextNonceToUse++);\r\n        if (bitcoinMergedMiningBlock.getNonce() % 100000 == 0) {\r\n            logger.debug(\"Solving block. Nonce: {}\", bitcoinMergedMiningBlock.getNonce());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.vm.DataWord.intValue",
	"Comment": "converts this dataword to an int.does not throw exception on overflow",
	"Method": "int intValue(){\r\n    int intVal = 0;\r\n    for (int i = data.length - 4; i < data.length; i++) {\r\n        intVal = (intVal << 8) + (data[i] & 0xff);\r\n    }\r\n    return intVal;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaScriptTokenMaker.isJavaScriptCompatible",
	"Comment": "returns whether features for a specific js version should be honored\twhile highlighting.",
	"Method": "boolean isJavaScriptCompatible(String version){\r\n    return jsVersion.compareTo(version) >= 0;\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.setSecurityService",
	"Comment": "called by the spring framework to initialize the securityservice data member specified in the components.xml file via ioc.",
	"Method": "void setSecurityService(SecurityService securityService){\r\n    this.securityService = securityService;\r\n}"
}, {
	"Path": "org.sakaiproject.courier.impl.BasicCourierService.deliver",
	"Comment": "queue up a delivery for the client window identified in the delivery \tobject. the particular form of delivery is determined by the type of \tdelivery object sent.",
	"Method": "void deliver(Delivery delivery){\r\n    log.debug(\"deliver(Delivery {})\", delivery);\r\n    final String address = delivery.getAddress();\r\n    synchronized (locks[slot(address)]) {\r\n        List<Delivery> deliveries = m_addresses.computeIfAbsent(address, k -> new ArrayList());\r\n        if (!deliveries.contains(delivery)) {\r\n            deliveries.add(delivery);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.impl.FileBasedAtomHandler.isEntryURI",
	"Comment": "return true if specified pathinfo represents uri of an atom entry.",
	"Method": "boolean isEntryURI(AtomRequest areq){\r\n    LOG.debug(\"isEntryURI\");\r\n    final String[] pathInfo = StringUtils.split(areq.getPathInfo(), \"/\");\r\n    if (pathInfo.length == 3) {\r\n        final String handle = pathInfo[0];\r\n        final String collection = pathInfo[1];\r\n        if (service.findCollectionByHandle(handle, collection) != null) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PHPTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.getValues",
	"Comment": "access the entire set of values stored in the structured artifact",
	"Method": "Map getValues(){\r\n    return m_structuredArtifact;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getSyntaxEditingStyle",
	"Comment": "returns what type of syntax highlighting this editor is doing.",
	"Method": "String getSyntaxEditingStyle(){\r\n    return syntaxStyleKey;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.onErrorResumeWith",
	"Comment": "if the upstream signals an error, switch over to the next soloand emits its signal instead.",
	"Method": "Solo<T> onErrorResumeWith(Solo<T> next){\r\n    ObjectHelper.requireNonNull(next, \"next is null\");\r\n    return onAssembly(new SoloOnErrorResumeWith<T>(this, next));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.getCopyright",
	"Comment": "returns the feed copyright.this method is a convenience method, it maps to the dublin core module rights.",
	"Method": "String getCopyright(){\r\n    return getDCModule().getRights();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.inheritsRole",
	"Comment": "checks whether the list item inherits a given role.used in the ui to determine whether some elements should be displayed",
	"Method": "boolean inheritsRole(String roleId){\r\n    return this.inheritedRoleIds != null && this.inheritedRoleIds.contains(roleId);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.isSingleGroupInherited",
	"Comment": "does this entity inherit grouped access mode with a single group that has access?",
	"Method": "boolean isSingleGroupInherited(){\r\n    return AccessMode.GROUPED.toString().equals(this.m_inheritedAccess) && this.m_inheritedGroupRefs != null && this.m_inheritedGroupRefs.size() == 1;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.entityprovider.AnnouncementEntityProviderImpl.getAnnouncement",
	"Comment": "get a decoratedannouncement given the siteid, channelid and announcementid",
	"Method": "DecoratedAnnouncement getAnnouncement(String siteId,String channelId,String announcementId){\r\n    if (announcementId == null || announcementId.length() == 0) {\r\n        throw new IllegalArgumentException(\"You must supply an announcementId\");\r\n    }\r\n    if (siteId == null || siteId.length() == 0) {\r\n        throw new IllegalArgumentException(\"You must supply the siteId.\");\r\n    }\r\n    if (channelId == null || channelId.length() == 0) {\r\n        throw new IllegalArgumentException(\"You must supply an channelId\");\r\n    }\r\n    String ref = announcementService.channelReference(siteId, channelId);\r\n    try {\r\n        AnnouncementChannel channel = announcementService.getAnnouncementChannel(ref);\r\n        AnnouncementMessage message = channel.getAnnouncementMessage(announcementId);\r\n        return createDecoratedAnnouncement(message, null);\r\n    } catch (IdUnusedException e) {\r\n        throw new EntityNotFoundException(\"Couldn't find: \" + e.getId(), e.getId());\r\n    } catch (PermissionException e) {\r\n        throw new EntityException(\"You don't have permissions to access this channel.\", e.getResource(), 403);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SmartHighlightPainter.getPaintBorder",
	"Comment": "returns whether a border is painted around marked occurrences.",
	"Method": "boolean getPaintBorder(){\r\n    return paintBorder;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchEngineTest.assertResult",
	"Comment": "checks whether the result of the last find or replace operation matches\tthe given criteria.",
	"Method": "void assertResult(SearchResult expected){\r\n    assertEquals(expected, this.result);\r\n}"
}, {
	"Path": "org.sakaiproject.citation.cover.ConfigurationService.getDatabaseHierarchyXml",
	"Comment": "fetch the appropriate xml database hierarchy document for this user",
	"Method": "String getDatabaseHierarchyXml(){\r\n    org.sakaiproject.citation.api.ConfigurationService instance = getInstance();\r\n    if (instance == null) {\r\n        return null;\r\n    }\r\n    return instance.getDatabaseHierarchyXml();\r\n}"
}, {
	"Path": "net.oauth.signature.pem.PEMReader.readBytes",
	"Comment": "read the lines between begin and end marker and convertthe base64 encoded content into binary byte array.",
	"Method": "byte[] readBytes(BufferedReader reader,String endMarker){\r\n    String line = null;\r\n    StringBuffer buf = new StringBuffer();\r\n    while ((line = reader.readLine()) != null) {\r\n        if (line.indexOf(endMarker) != -1) {\r\n            return OAuthSignatureMethod.decodeBase64(buf.toString());\r\n        }\r\n        buf.append(line.trim());\r\n    }\r\n    throw new IOException(\"Invalid PEM file: No end marker\");\r\n}"
}, {
	"Path": "org.sakaiproject.service.gradebook.shared.CategoryDefinition.setWeight",
	"Comment": "the weight set for this category if part of a weighted gradebook.null if gradebook is not weighted",
	"Method": "void setWeight(Double weight){\r\n    this.weight = weight;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.sameAssignmentTitleInContext",
	"Comment": "check to see whether there is already an assignment with the same title in the site",
	"Method": "boolean sameAssignmentTitleInContext(String assignmentRef,String title,String contextString){\r\n    boolean rv = false;\r\n    Collection<Assignment> assignments = assignmentService.getAssignmentsForContext(contextString);\r\n    for (Assignment a : assignments) {\r\n        if (assignmentRef == null || !assignmentRef.equals(AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference())) {\r\n            String aTitle = a.getTitle();\r\n            if (aTitle != null && aTitle.length() > 0 && title.equals(aTitle)) {\r\n                if (!a.getDeleted()) {\r\n                    rv = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementFlowable.ifThen",
	"Comment": "return an flowable that emits the emissions from one specifiedflowable if a condition evaluates to true, or from another specifiedflowable otherwise.",
	"Method": "Flowable<R> ifThen(BooleanSupplier condition,Publisher<? extends R> then,Flowable<R> ifThen,BooleanSupplier condition,Publisher<? extends R> then,Scheduler scheduler,Flowable<R> ifThen,BooleanSupplier condition,Publisher<? extends R> then,Flowable<? extends R> orElse){\r\n    ObjectHelper.requireNonNull(condition, \"condition is null\");\r\n    ObjectHelper.requireNonNull(then, \"then is null\");\r\n    ObjectHelper.requireNonNull(orElse, \"orElse is null\");\r\n    return RxJavaPlugins.onAssembly(new FlowableIfThen<R>(condition, then, orElse));\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.EnrollmentSetEntityProvider.create",
	"Comment": "create a new enrollment set. wraps coursemanagementadministration.createenrollmentset.",
	"Method": "void create(Object entity){\r\n    EnrollmentSetData data = (EnrollmentSetData) entity;\r\n    Set<String> instructors = null;\r\n    if (data.officialInstructors != null) {\r\n        instructors = new HashSet<String>(data.officialInstructors);\r\n    }\r\n    cmAdmin.createEnrollmentSet(data.eid, data.title, data.description, data.category, data.defaultCredits, data.courseOffering, instructors);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconGroup.hasSeparateLargeIcons",
	"Comment": "returns whether a separate directory for the large icons exists.",
	"Method": "boolean hasSeparateLargeIcons(){\r\n    return separateLargeIcons;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.NonoProcessor.create",
	"Comment": "creates a nonoprocessor instance ready to receive events and subscribers.",
	"Method": "NonoProcessor create(){\r\n    return new NonoProcessor();\r\n}"
}, {
	"Path": "org.fife.util.DynamicIntArray.clear",
	"Comment": "removes all values from this array object.capacity will remain the\tsame.",
	"Method": "void clear(){\r\n    size = 0;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.onErrorResumeNext",
	"Comment": "if this nono signals an error, subscribe to the fallback nonoreturned by the error handler function.",
	"Method": "Nono onErrorResumeNext(Function<? super Throwable, ? extends Nono> errorHandler){\r\n    ObjectHelper.requireNonNull(errorHandler, \"errorHandler is null\");\r\n    return onAssembly(new NonoOnErrorResume(this, errorHandler));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PlainTextTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.tool.ChatTool.getChatRoomsSelectItems",
	"Comment": "this creates select items out of the channels available to the tool",
	"Method": "List<SelectItem> getChatRoomsSelectItems(){\r\n    List<SelectItem> items = new ArrayList<SelectItem>();\r\n    for (ChatChannel channel : getSiteChannels()) {\r\n        items.add(createSelect(channel.getId(), channel.getTitle()));\r\n    }\r\n    return items;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.calendarReference",
	"Comment": "access the internal reference which can be used to access the calendar from within the system.",
	"Method": "String calendarReference(String context,String id){\r\n    return getAccessPoint(true) + Entity.SEPARATOR + REF_TYPE_CALENDAR + Entity.SEPARATOR + context + Entity.SEPARATOR + id;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinSessionFuncs.getTurnitinSession",
	"Comment": "logs in to turnitin.scrapes the response xml and returns the session id\tor throws an exception if it was unable to log in.",
	"Method": "String getTurnitinSession(TurnitinAccountConnection conn,Map params){\r\n    Map finalParams = new HashMap();\r\n    finalParams.putAll(params);\r\n    finalParams.put(\"fid\", \"17\");\r\n    finalParams.put(\"fcmd\", \"2\");\r\n    Document doc = conn.callTurnitinReturnDocument(finalParams);\r\n    Element root = doc.getDocumentElement();\r\n    int rcode = new Integer(((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim()).intValue();\r\n    String message = ((CharacterData) (root.getElementsByTagName(\"rmessage\").item(0).getFirstChild())).getData().trim();\r\n    if (!(rcode > 0 && rcode < 100)) {\r\n        throw new TransientSubmissionException(\"Error logging in to turnitin: \" + message);\r\n    }\r\n    String sessionId = ((CharacterData) (root.getElementsByTagName(\"sessionid\").item(0).getFirstChild())).getData().trim();\r\n    log.debug(\"Log in results. rcode: \" + rcode + \" message: \" + message + \" sessionId: \" + sessionId);\r\n    return sessionId;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.concat",
	"Comment": "runs the nono sources emitted by the publisher one after the other,prefetching the given number of nono sources.",
	"Method": "Nono concat(Iterable<? extends Nono> sources,Nono concat,Publisher<? extends Nono> sources,Nono concat,Publisher<? extends Nono> sources,int prefetch){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.verifyPositive(prefetch, \"prefetch\");\r\n    return onAssembly(new NonoConcat(sources, prefetch, ErrorMode.IMMEDIATE));\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UsersAction.isProvidedType",
	"Comment": "check to see if the type is in the list of known provided types",
	"Method": "boolean isProvidedType(String userType){\r\n    boolean provided = false;\r\n    String[] providedTypes = ServerConfigurationService.getStrings(\"user.type.provided\");\r\n    if (providedTypes != null && providedTypes.length > 0) {\r\n        List<String> typeList = Arrays.asList(providedTypes);\r\n        if (typeList.contains(userType))\r\n            provided = true;\r\n    }\r\n    return provided;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.defer",
	"Comment": "defers the creation of the actual nono instance until a subscribersubscribes.",
	"Method": "Nono defer(Callable<? extends Nono> supplier){\r\n    ObjectHelper.requireNonNull(supplier, \"supplier is null\");\r\n    return onAssembly(new NonoDefer(supplier));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setRelation",
	"Comment": "sets the dublincore module relation. convenience method that can be used when there is onlyone relation to set.",
	"Method": "void setRelation(String relation){\r\n    this.relation = Lists.create(relation);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getDefaultForeground",
	"Comment": "returns the default foreground color for text in this text area.",
	"Method": "Color getDefaultForeground(){\r\n    return Color.BLACK;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.RubyTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.COMMENT_DOCUMENTATION:\r\n            state = DOCCOMMENT;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = STRING;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = CHAR_LITERAL;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_BACKQUOTE:\r\n            state = BACKTICKS;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOF_UNQUOTED:\r\n            state = HEREDOC_EOF_UNQUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOF_SINGLE_QUOTED:\r\n            state = HEREDOC_EOF_SINGLE_QUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOF_DOUBLE_QUOTED:\r\n            state = HEREDOC_EOF_DOUBLE_QUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOT_UNQUOTED:\r\n            state = HEREDOC_EOT_UNQUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOT_SINGLE_QUOTED:\r\n            state = HEREDOC_EOT_SINGLE_QUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_HEREDOC_EOT_DOUBLE_QUOTED:\r\n            state = HEREDOC_EOT_DOUBLE_QUOTED;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_STRING_Q_BANG:\r\n            state = STRING_Q_BANG;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_STRING_Q_CURLY_BRACE:\r\n            state = STRING_Q_CURLY_BRACE;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_STRING_Q_LT:\r\n            state = STRING_Q_LT;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_STRING_Q_PAREN:\r\n            state = STRING_Q_PAREN;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_STRING_Q_SLASH:\r\n            state = STRING_Q_SLASH;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_STRING_Q_SQUARE_BRACKET:\r\n            state = STRING_Q_SQUARE_BRACKET;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "net.oauth.client.OAuthClient.invoke",
	"Comment": "send a request message to the service provider and get the response.",
	"Method": "OAuthMessage invoke(OAuthAccessor accessor,String httpMethod,String url,Collection<? extends Map.Entry> parameters,OAuthMessage invoke,OAuthAccessor accessor,String url,Collection<? extends Map.Entry> parameters,OAuthMessage invoke,OAuthMessage request,net.oauth.ParameterStyle style,OAuthMessage invoke,OAuthMessage request,ParameterStyle style){\r\n    return invoke(request, style.getReplacement());\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.getDayTimeRange",
	"Comment": "given a current date in the year, month, and day parameters, returns a timerange for the day.",
	"Method": "TimeRange getDayTimeRange(int year,int month,int day){\r\n    Time startTime = TimeService.newTimeLocal(year, month, day, 00, 00, 00, 000);\r\n    Time endTime = TimeService.newTimeLocal(year, month, day, 23, 59, 59, 000);\r\n    return TimeService.newTimeRange(startTime, endTime, true, true);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setWidth",
	"Comment": "width is the width of the media object. it is an optional attribute.",
	"Method": "void setWidth(Integer width){\r\n    this.width = width;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return new AbstractMap<String, Object>() {\r\n        public boolean isEmpty() {\r\n            return !params.getNames().hasNext();\r\n        }\r\n        public boolean containsKey(Object key) {\r\n            return params.get((String) key) != null;\r\n        }\r\n        public Object get(Object key) {\r\n            String[] value = params.getStrings((String) key);\r\n            if (value == null || value.length == 0)\r\n                return null;\r\n            else if (value.length > 1) {\r\n                return value;\r\n            } else\r\n                return value[0];\r\n        }\r\n        @Override\r\n        public Set<Entry<String, Object>> entrySet() {\r\n            return new AbstractSet<Entry<String, Object>>() {\r\n                @Override\r\n                public Iterator<Entry<String, Object>> iterator() {\r\n                    return new Iterator<Entry<String, Object>>() {\r\n                        private final Iterator<String> parametersNames = params.getNames();\r\n                        public boolean hasNext() {\r\n                            return parametersNames.hasNext();\r\n                        }\r\n                        public Entry<String, Object> next() {\r\n                            return new Entry<String, Object>() {\r\n                                private final String key = parametersNames.next();\r\n                                public String getKey() {\r\n                                    return key;\r\n                                }\r\n                                public Object getValue() {\r\n                                    String[] value = params.getStrings(key);\r\n                                    if (value == null || value.length == 0)\r\n                                        return null;\r\n                                    else if (value.length > 1) {\r\n                                        return value;\r\n                                    } else\r\n                                        return value[0];\r\n                                }\r\n                                public Object setValue(Object value) {\r\n                                    throw new UnsupportedOperationException();\r\n                                }\r\n                            };\r\n                        }\r\n                        public void remove() {\r\n                            throw new UnsupportedOperationException();\r\n                        }\r\n                    };\r\n                }\r\n                @Override\r\n                public int size() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return !params.getNames().hasNext();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return params.get((String) key) != null;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    String[] value = params.getStrings((String) key);\r\n    if (value == null || value.length == 0)\r\n        return null;\r\n    else if (value.length > 1) {\r\n        return value;\r\n    } else\r\n        return value[0];\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return new AbstractSet<Entry<String, Object>>() {\r\n        @Override\r\n        public Iterator<Entry<String, Object>> iterator() {\r\n            return new Iterator<Entry<String, Object>>() {\r\n                private final Iterator<String> parametersNames = params.getNames();\r\n                public boolean hasNext() {\r\n                    return parametersNames.hasNext();\r\n                }\r\n                public Entry<String, Object> next() {\r\n                    return new Entry<String, Object>() {\r\n                        private final String key = parametersNames.next();\r\n                        public String getKey() {\r\n                            return key;\r\n                        }\r\n                        public Object getValue() {\r\n                            String[] value = params.getStrings(key);\r\n                            if (value == null || value.length == 0)\r\n                                return null;\r\n                            else if (value.length > 1) {\r\n                                return value;\r\n                            } else\r\n                                return value[0];\r\n                        }\r\n                        public Object setValue(Object value) {\r\n                            throw new UnsupportedOperationException();\r\n                        }\r\n                    };\r\n                }\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n        @Override\r\n        public int size() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return new Iterator<Entry<String, Object>>() {\r\n        private final Iterator<String> parametersNames = params.getNames();\r\n        public boolean hasNext() {\r\n            return parametersNames.hasNext();\r\n        }\r\n        public Entry<String, Object> next() {\r\n            return new Entry<String, Object>() {\r\n                private final String key = parametersNames.next();\r\n                public String getKey() {\r\n                    return key;\r\n                }\r\n                public Object getValue() {\r\n                    String[] value = params.getStrings(key);\r\n                    if (value == null || value.length == 0)\r\n                        return null;\r\n                    else if (value.length > 1) {\r\n                        return value;\r\n                    } else\r\n                        return value[0];\r\n                }\r\n                public Object setValue(Object value) {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n        public void remove() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return parametersNames.hasNext();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return new Entry<String, Object>() {\r\n        private final String key = parametersNames.next();\r\n        public String getKey() {\r\n            return key;\r\n        }\r\n        public Object getValue() {\r\n            String[] value = params.getStrings(key);\r\n            if (value == null || value.length == 0)\r\n                return null;\r\n            else if (value.length > 1) {\r\n                return value;\r\n            } else\r\n                return value[0];\r\n        }\r\n        public Object setValue(Object value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    return key;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    String[] value = params.getStrings(key);\r\n    if (value == null || value.length == 0)\r\n        return null;\r\n    else if (value.length > 1) {\r\n        return value;\r\n    } else\r\n        return value[0];\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.wrapParametersInMap",
	"Comment": "provides a huge wrapper around parameterparser to use it as a map",
	"Method": "Map<String, ?> wrapParametersInMap(ParameterParser params){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.unsubscribeOn",
	"Comment": "if the downstream cancels the sequence, the cancellation towardsthe upstream will happen on the specified scheduler.",
	"Method": "Nono unsubscribeOn(Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new NonoUnsubscribeOn(this, scheduler));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.functions.FunctionTagging.justThrow",
	"Comment": "return an exception to be thrown by the caller or sneak out the original throwable.",
	"Method": "Exception justThrow(Throwable error){\r\n    if (error instanceof Exception) {\r\n        return (Exception) error;\r\n    }\r\n    throw (E) error;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HTMLTokenMaker.getShouldIndentNextLineAfter",
	"Comment": "overridden to handle newlines in js and css differently than those in\tmarkup.",
	"Method": "boolean getShouldIndentNextLineAfter(Token token){\r\n    int languageIndex = token == null ? 0 : token.getLanguageIndex();\r\n    if (getCurlyBracesDenoteCodeBlocks(languageIndex)) {\r\n        if (token != null && token.length() == 1) {\r\n            char ch = token.charAt(0);\r\n            return ch == '{' || ch == '(';\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getLiveFederations",
	"Comment": "returns the currently live federationsthis would be the active federation pluspotentially the retiring federation",
	"Method": "List<Federation> getLiveFederations(){\r\n    List<Federation> liveFederations = new ArrayList();\r\n    liveFederations.add(getActiveFederation());\r\n    Federation retiringFederation = getRetiringFederation();\r\n    if (retiringFederation != null) {\r\n        liveFederations.add(retiringFederation);\r\n    }\r\n    return liveFederations;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TextEditorPane.isDirty",
	"Comment": "returns whether or not the text in this editor has unsaved changes.",
	"Method": "boolean isDirty(){\r\n    return dirty;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.mergeDelayError",
	"Comment": "merge the values in arbitrary order from a sequence of perhaps sources,delaying errors till all sources terminate.",
	"Method": "Flowable<T> mergeDelayError(Iterable<? extends Perhaps<? extends T>> sources,Flowable<T> mergeDelayError,Iterable<? extends Perhaps<? extends T>> sources,int maxConcurrency,Flowable<T> mergeDelayError,Publisher<? extends Perhaps<? extends T>> sources,Flowable<T> mergeDelayError,Publisher<? extends Perhaps<? extends T>> sources,int maxConcurrency){\r\n    return Flowable.mergeDelayError(sources, maxConcurrency);\r\n}"
}, {
	"Path": "com.github.faucamp.simplertmp.io.ChunkStreamInfo.setPrevHeaderTx",
	"Comment": "sets the previous header that was transmitted on this channel",
	"Method": "void setPrevHeaderTx(RtmpHeader prevHeaderTx){\r\n    this.prevHeaderTx = prevHeaderTx;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getDefaultHandler",
	"Comment": "get a defaulthandler so that the storageuser here can parse using sax events.",
	"Method": "DefaultEntityHandler getDefaultHandler(Map<String, Object> services){\r\n    return new DefaultEntityHandler() {\r\n        @Override\r\n        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\r\n            if (doStartElement(uri, localName, qName, attributes)) {\r\n                if (entity == null) {\r\n                    if (\"calendar\".equals(qName)) {\r\n                        BaseCalendarEdit bce = new BaseCalendarEdit();\r\n                        entity = bce;\r\n                        setContentHandler(bce.getContentHandler(services), uri, localName, qName, attributes);\r\n                    } else if (\"event\".equals(qName)) {\r\n                        BaseCalendarEventEdit bcee = new BaseCalendarEventEdit(container);\r\n                        entity = bcee;\r\n                        setContentHandler(bcee.getContentHandler(services), uri, localName, qName, attributes);\r\n                    } else {\r\n                        log.warn(\"Unexpected Element in XML [\" + qName + \"]\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getDefaultHandler",
	"Comment": "get a defaulthandler so that the storageuser here can parse using sax events.",
	"Method": "DefaultEntityHandler getDefaultHandler(Map<String, Object> services){\r\n    if (doStartElement(uri, localName, qName, attributes)) {\r\n        if (entity == null) {\r\n            if (\"calendar\".equals(qName)) {\r\n                BaseCalendarEdit bce = new BaseCalendarEdit();\r\n                entity = bce;\r\n                setContentHandler(bce.getContentHandler(services), uri, localName, qName, attributes);\r\n            } else if (\"event\".equals(qName)) {\r\n                BaseCalendarEventEdit bcee = new BaseCalendarEventEdit(container);\r\n                entity = bcee;\r\n                setContentHandler(bcee.getContentHandler(services), uri, localName, qName, attributes);\r\n            } else {\r\n                log.warn(\"Unexpected Element in XML [\" + qName + \"]\");\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.AtomClientFactory.getAtomService",
	"Comment": "create atomservice by reading service doc from atom server.",
	"Method": "ClientAtomService getAtomService(String uri,AuthStrategy authStrategy){\r\n    return new ClientAtomService(uri, authStrategy);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.repeatWhen",
	"Comment": "repeats this solo when the publisher returned by the handler function emitsan item or terminates if this publisher terminates.",
	"Method": "Flowable<T> repeatWhen(Function<? super Flowable<Object>, ? extends Publisher<?>> handler){\r\n    return Flowable.fromPublisher(this).repeatWhen(handler);\r\n}"
}, {
	"Path": "com.rometools.rome.io.SyndFeedOutput.outputString",
	"Comment": "creates a string with the xml representation for the given syndfeedimpl.if the feed encoding is not null, it will be used in the xml prolog encoding attribute. it isthe responsibility of the developer to ensure that if the string is written to a characterstream the stream charset is the same as the feed encoding property.",
	"Method": "String outputString(SyndFeed feed,String outputString,SyndFeed feed,boolean prettyPrint){\r\n    return feedOutput.outputString(feed.createWireFeed(), prettyPrint);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.FilePickerAction.readAllResources",
	"Comment": "develop a list of all the site collections that there are to page.\t sort them as appropriate, and apply search criteria.",
	"Method": "List<ListItem> readAllResources(SessionState state){\r\n    ToolSession toolSession = sessionManager.getCurrentToolSession();\r\n    ContentHostingService contentService = (ContentHostingService) toolSession.getAttribute(STATE_CONTENT_SERVICE);\r\n    ResourceTypeRegistry registry = (ResourceTypeRegistry) toolSession.getAttribute(STATE_RESOURCES_TYPE_REGISTRY);\r\n    if (registry == null) {\r\n        registry = (ResourceTypeRegistry) ComponentManager.get(\"org.sakaiproject.content.api.ResourceTypeRegistry\");\r\n        toolSession.setAttribute(STATE_RESOURCES_TYPE_REGISTRY, registry);\r\n    }\r\n    List<ListItem> other_sites = new Vector<ListItem>();\r\n    String homeCollectionId = (String) toolSession.getAttribute(STATE_HOME_COLLECTION_ID);\r\n    String collectionId = (String) toolSession.getAttribute(STATE_DEFAULT_COLLECTION_ID);\r\n    if (collectionId == null) {\r\n        collectionId = homeCollectionId;\r\n    }\r\n    Set<String> expandedCollections = getExpandedCollections(toolSession);\r\n    Comparator userSelectedSort = (Comparator) toolSession.getAttribute(STATE_LIST_VIEW_SORT);\r\n    ContentResourceFilter filter = (ContentResourceFilter) state.getAttribute(STATE_ATTACHMENT_FILTER);\r\n    User user = userDirectoryService.getCurrentUser();\r\n    String userId = user.getId();\r\n    String wsId = siteService.getUserSiteId(userId);\r\n    String wsCollectionId = contentService.getSiteCollection(wsId);\r\n    if (!collectionId.equals(wsCollectionId)) {\r\n        try {\r\n            ContentCollection wsCollection = contentService.getCollection(wsCollectionId);\r\n            ListItem wsRoot = ListItem.getListItem(wsCollection, null, registry, false, expandedCollections, null, null, 0, userSelectedSort, false, filter);\r\n            other_sites.add(wsRoot);\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"IdUnusedException \", e);\r\n        } catch (TypeException e) {\r\n            log.warn(\"TypeException \", e);\r\n        } catch (PermissionException e) {\r\n            log.warn(\"PermissionException \", e);\r\n        }\r\n    }\r\n    Map othersites = contentService.getCollectionMap();\r\n    SortedSet sort = new TreeSet();\r\n    for (Iterator<Entry<String, String>> mapIter = othersites.entrySet().iterator(); mapIter.hasNext(); ) {\r\n        Entry<String, String> entry = mapIter.next();\r\n        sort.add(entry.getValue() + ResourcesAction.DELIM + entry.getKey());\r\n    }\r\n    Iterator<String> sortIt = sort.iterator();\r\n    while (sortIt.hasNext()) {\r\n        String keyvalue = sortIt.next();\r\n        String displayName = keyvalue.substring(0, keyvalue.lastIndexOf(ResourcesAction.DELIM));\r\n        String collId = keyvalue.substring(keyvalue.lastIndexOf(ResourcesAction.DELIM) + 1);\r\n        if (!collectionId.equals(collId) && !wsCollectionId.equals(collId)) {\r\n            ContentCollection collection;\r\n            try {\r\n                collection = contentService.getCollection(collId);\r\n                ListItem root = ListItem.getListItem(collection, null, registry, false, expandedCollections, null, null, 0, null, false, null);\r\n                root.setName(displayName);\r\n                other_sites.add(root);\r\n            } catch (IdUnusedException e) {\r\n                log.debug(\"IdUnusedException (FilePickerAction.readAllResources()) collId == \" + collId + \" --> \" + e);\r\n            } catch (TypeException e) {\r\n                log.warn(\"TypeException (FilePickerAction.readAllResources()) collId == \" + collId + \" --> \" + e);\r\n            } catch (PermissionException e) {\r\n                log.debug(\"PermissionException (FilePickerAction.readAllResources()) collId == \" + collId + \" --> \" + e);\r\n            }\r\n        }\r\n    }\r\n    return other_sites;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.debug.validator.RxJavaProtocolValidator.enableAndChain",
	"Comment": "enable the protocol violation hooks by chaining itbefore any existing hook.",
	"Method": "SavedHooks enableAndChain(){\r\n    return enable(true);\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.PropertiesLoader.getTokenizedProperty",
	"Comment": "returns an array of tokenized values stored under a property key in all\tproperties files. if the master file has this property its tokens will be\tthe first ones in the array.",
	"Method": "String[] getTokenizedProperty(String key,String separator){\r\n    final List<String> entriesList = new ArrayList<String>();\r\n    for (final Properties property : properties) {\r\n        final String values = property.getProperty(key);\r\n        if (values != null) {\r\n            final StringTokenizer st = new StringTokenizer(values, separator);\r\n            while (st.hasMoreTokens()) {\r\n                final String token = st.nextToken();\r\n                entriesList.add(token);\r\n            }\r\n        }\r\n    }\r\n    final String[] entries = new String[entriesList.size()];\r\n    entriesList.toArray(entries);\r\n    return entries;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.TemplateParseUtil.parseTemplate",
	"Comment": "parse a string and attempt to match it to a template and thenreturn the match information along with all the parsed out keys and values",
	"Method": "ProcessedTemplate parseTemplate(String input,List<PreProcessedTemplate> preprocessed){\r\n    if (preprocessed == null) {\r\n        preprocessed = defaultPreprocessedTemplates;\r\n    }\r\n    if (input == null || \"\".equals(input)) {\r\n        throw new IllegalArgumentException(\"input cannot be null or empty\");\r\n    }\r\n    if (!input.matches(VALID_INPUT_CHARS + \"+\")) {\r\n        throw new IllegalArgumentException(\"input must consist of the following chars only (not counting []): \" + VALID_INPUT_CHARS);\r\n    }\r\n    ProcessedTemplate analysis = null;\r\n    Map<String, String> segments = new HashMap<String, String>();\r\n    String[] ext = findExtension(input);\r\n    input = ext[1];\r\n    String extension = ext[2];\r\n    for (PreProcessedTemplate ppt : preprocessed) {\r\n        segments.clear();\r\n        String regex = ppt.regex + \"(?:/\" + VALID_INPUT_CHARS + \"+|$)\";\r\n        Pattern p = Pattern.compile(regex);\r\n        Matcher m = p.matcher(input);\r\n        if (m.matches()) {\r\n            if (m.groupCount() == ppt.variableNames.size()) {\r\n                for (int j = 0; j < m.groupCount(); j++) {\r\n                    String subseq = m.group(j + 1);\r\n                    if (subseq != null) {\r\n                        segments.put(ppt.variableNames.get(j), subseq);\r\n                    }\r\n                }\r\n                analysis = new ProcessedTemplate(ppt.templateKey, ppt.template, regex, new ArrayList<String>(ppt.variableNames), new HashMap<String, String>(segments), extension);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (analysis == null) {\r\n    }\r\n    return analysis;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.ObservableTransformers.mapAsync",
	"Comment": "maps each upstream value into a single value provided by a generated observablesource for thatinput value and combines the original and generated single value into a final result itemto be emitted to downstream.only the first item emitted by the inner observablesource are considered. ifthe inner observablesource is empty, no resulting item is generated for that input value.the inner observablesources are consumed in order and one at a time.",
	"Method": "ObservableTransformer<T, R> mapAsync(Function<? super T, ? extends ObservableSource<? extends R>> mapper,ObservableTransformer<T, R> mapAsync,Function<? super T, ? extends ObservableSource<? extends R>> mapper,int capacityHint,ObservableTransformer<T, R> mapAsync,Function<? super T, ? extends ObservableSource<? extends U>> mapper,BiFunction<? super T, ? super U, ? extends R> combiner,ObservableTransformer<T, R> mapAsync,Function<? super T, ? extends ObservableSource<? extends U>> mapper,BiFunction<? super T, ? super U, ? extends R> combiner,int capacityHint){\r\n    ObjectHelper.requireNonNull(mapper, \"mapper is null\");\r\n    ObjectHelper.requireNonNull(combiner, \"combiner is null\");\r\n    ObjectHelper.verifyPositive(capacityHint, \"capacityHint\");\r\n    return new ObservableMapAsync<T, U, R>(null, mapper, combiner, capacityHint);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.putSupplementItemAttachmentStateIntoContext",
	"Comment": "put supplement item attachment state attribute value into context",
	"Method": "void putSupplementItemAttachmentStateIntoContext(SessionState state,Context context,String attachmentsKind){\r\n    List refs = new ArrayList();\r\n    String attachmentsFor = (String) state.getAttribute(ATTACHMENTS_FOR);\r\n    if (attachmentsFor != null && attachmentsFor.equals(attachmentsKind)) {\r\n        ToolSession session = sessionManager.getCurrentToolSession();\r\n        if (session.getAttribute(FilePickerHelper.FILE_PICKER_CANCEL) == null && session.getAttribute(FilePickerHelper.FILE_PICKER_ATTACHMENTS) != null) {\r\n            refs = (List) session.getAttribute(FilePickerHelper.FILE_PICKER_ATTACHMENTS);\r\n            state.setAttribute(attachmentsKind, refs);\r\n        }\r\n        session.removeAttribute(FilePickerHelper.FILE_PICKER_ATTACHMENTS);\r\n        session.removeAttribute(FilePickerHelper.FILE_PICKER_CANCEL);\r\n        state.removeAttribute(ATTACHMENTS_FOR);\r\n    }\r\n    if (state.getAttribute(attachmentsKind) != null) {\r\n        context.put(attachmentsKind, state.getAttribute(attachmentsKind));\r\n    }\r\n    context.put(\"attachments_for\", attachmentsKind);\r\n}"
}, {
	"Path": "co.rsk.scoring.PeerScoring.recordEvent",
	"Comment": "records an event.current implementation has a counter by event type.the score is incremented or decremented, acoording to the kind of the event.some negative events alters the score to a negative level, withouttaking into account its previous positive value",
	"Method": "void recordEvent(EventType evt){\r\n    try {\r\n        rwlock.writeLock().lock();\r\n        counters[evt.ordinal()]++;\r\n        switch(evt) {\r\n            case INVALID_NETWORK:\r\n            case INVALID_BLOCK:\r\n            case INVALID_TRANSACTION:\r\n            case INVALID_MESSAGE:\r\n            case INVALID_HEADER:\r\n                if (score > 0) {\r\n                    score = 0;\r\n                }\r\n                score--;\r\n                break;\r\n            case UNEXPECTED_MESSAGE:\r\n            case FAILED_HANDSHAKE:\r\n            case SUCCESSFUL_HANDSHAKE:\r\n            case REPEATED_MESSAGE:\r\n                break;\r\n            default:\r\n                if (score >= 0) {\r\n                    score++;\r\n                }\r\n                break;\r\n        }\r\n    } finally {\r\n        rwlock.writeLock().unlock();\r\n    }\r\n}"
}, {
	"Path": "com.pedro.encoder.input.gl.SurfaceManager.eglSetup",
	"Comment": "prepares egl.we want a gles 2.0 context and a surface that supports recording.",
	"Method": "void eglSetup(Surface surface,EGLContext eglSharedContext){\r\n    eglDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\r\n    if (eglDisplay == EGL14.EGL_NO_DISPLAY) {\r\n        throw new RuntimeException(\"unable to get EGL14 display\");\r\n    }\r\n    int[] version = new int[2];\r\n    if (!EGL14.eglInitialize(eglDisplay, version, 0, version, 1)) {\r\n        throw new RuntimeException(\"unable to initialize EGL14\");\r\n    }\r\n    int[] attribList;\r\n    if (eglSharedContext == null) {\r\n        attribList = new int[] { EGL14.EGL_RED_SIZE, 8, EGL14.EGL_GREEN_SIZE, 8, EGL14.EGL_BLUE_SIZE, 8, EGL14.EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT, EGL14.EGL_NONE };\r\n    } else {\r\n        attribList = new int[] { EGL14.EGL_RED_SIZE, 8, EGL14.EGL_GREEN_SIZE, 8, EGL14.EGL_BLUE_SIZE, 8, EGL14.EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT, EGL_RECORDABLE_ANDROID, 1, EGL14.EGL_NONE };\r\n    }\r\n    EGLConfig[] configs = new EGLConfig[1];\r\n    int[] numConfigs = new int[1];\r\n    EGL14.eglChooseConfig(eglDisplay, attribList, 0, configs, 0, configs.length, numConfigs, 0);\r\n    GlUtil.checkEglError(\"eglCreateContext RGB888+recordable ES2\");\r\n    int[] attrib_list = { EGL14.EGL_CONTEXT_CLIENT_VERSION, 2, EGL14.EGL_NONE };\r\n    eglContext = EGL14.eglCreateContext(eglDisplay, configs[0], eglSharedContext == null ? EGL14.EGL_NO_CONTEXT : eglSharedContext, attrib_list, 0);\r\n    GlUtil.checkEglError(\"eglCreateContext\");\r\n    if (surface == null) {\r\n        int[] surfaceAttribs = { EGL14.EGL_WIDTH, 1, EGL14.EGL_HEIGHT, 1, EGL14.EGL_NONE };\r\n        eglSurface = EGL14.eglCreatePbufferSurface(eglDisplay, configs[0], surfaceAttribs, 0);\r\n    } else {\r\n        int[] surfaceAttribs = { EGL14.EGL_NONE };\r\n        eglSurface = EGL14.eglCreateWindowSurface(eglDisplay, configs[0], surface, surfaceAttribs, 0);\r\n    }\r\n    GlUtil.checkEglError(\"eglCreateWindowSurface\");\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testEvent2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testEvent2Parse(){\r\n    LOG.debug(\"testEvent2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/events2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    SyndEntry entry = entries.get(0);\r\n    Event event = (Event) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", event.getImageLinks()[0].toString());\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), event.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Festival\", \"Halloween\", \"Party\", \"Costumes\" }, event.getLabels());\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, event.getCurrency());\r\n    Assert.assertEquals(\"Price\", 10, event.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceUnit\", null, event.getPrice().getUnits());\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, event.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.CASH, PaymentTypeEnumeration.CHECK, PaymentTypeEnumeration.VISA }, event.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment Notes\", \"Cash only for local orders\", event.getPaymentNotes());\r\n    cal.set(2005, 06, 04, 20, 00, 00);\r\n    Assert.assertEquals(\"Start Time\", cal.getTime(), event.getEventDateRange().getStart());\r\n    cal.set(2005, 06, 04, 23, 00, 00);\r\n    Assert.assertEquals(\"End Time\", cal.getTime(), event.getEventDateRange().getEnd());\r\n    Assert.assertEquals(\"Location\", \"1600 Amphitheatre Parkway, Mountain View, CA, 94043\", event.getLocation());\r\n    Assert.assertEquals(\"Shipping Price\", (float) 32.95, event.getShipping()[0].getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"Shipping Country\", \"US\", event.getShipping()[0].getCountry());\r\n    Assert.assertEquals(\"Tax Region\", \"California\", event.getTaxRegion());\r\n    Assert.assertEquals(\"Tax Percentage\", new Float(8.25), event.getTaxPercent());\r\n    entry = entries.get(1);\r\n    event = (Event) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image2.jpg\", event.getImageLinks()[0].toString());\r\n    cal.setTimeInMillis(0);\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), event.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Concert\", \"festival\", \"music\" }, event.getLabels());\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, event.getCurrency());\r\n    Assert.assertEquals(\"Price\", 50, event.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceUnit\", null, event.getPrice().getUnits());\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, event.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.CASH, PaymentTypeEnumeration.CHECK, PaymentTypeEnumeration.VISA }, event.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment Notes\", \"Cash only for local orders\", event.getPaymentNotes());\r\n    cal.set(2005, 07, 23, 20, 00, 00);\r\n    Assert.assertEquals(\"Start Time\", cal.getTime(), event.getEventDateRange().getStart());\r\n    cal.set(2005, 07, 23, 23, 00, 00);\r\n    Assert.assertEquals(\"End Time\", cal.getTime(), event.getEventDateRange().getEnd());\r\n    Assert.assertEquals(\"Location\", \"123 Main St, Anytown, CA, 12345, USA\", event.getLocation());\r\n    Assert.assertEquals(\"Shipping Price\", (float) 32.95, event.getShipping()[0].getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"Shipping Country\", \"US\", event.getShipping()[0].getCountry());\r\n    Assert.assertEquals(\"Tax Region\", \"California\", event.getTaxRegion());\r\n    Assert.assertEquals(\"Tax Percentage\", new Float(8.25), event.getTaxPercent());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ScalaTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = MULTILINE_STRING_DOUBLE;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            break;\r\n        default:\r\n            state = YYINITIAL;\r\n    }\r\n    s = text;\r\n    start = text.offset;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.impl.FileBasedAtomHandler.postEntry",
	"Comment": "create a new entry specified by pathinfo and posted entry. we save the submitted atom entryverbatim, but we do set the id and reset the update time.",
	"Method": "Entry postEntry(AtomRequest areq,Entry entry){\r\n    LOG.debug(\"postEntry\");\r\n    final String[] pathInfo = StringUtils.split(areq.getPathInfo(), \"/\");\r\n    final String handle = pathInfo[0];\r\n    final String collection = pathInfo[1];\r\n    final FileBasedCollection col = service.findCollectionByHandle(handle, collection);\r\n    try {\r\n        return col.addEntry(entry);\r\n    } catch (final Exception fe) {\r\n        fe.printStackTrace();\r\n        throw new AtomException(fe);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.AcademicSessionEntityProvider.get",
	"Comment": "get an academic session by eid. wraps coursemanagementservice.getacademicsession.",
	"Method": "Object get(String eid){\r\n    AcademicSession session = cmService.getAcademicSession(eid);\r\n    return new AcademicSessionData(session);\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.AtomClientTest.testSimpleEntryPostUpdateAndRemove",
	"Comment": "tests that entries can be posted, updated and removed in all collections that accept entries.fails if no collections found that accept entries.",
	"Method": "void testSimpleEntryPostUpdateAndRemove(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element2 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element2;\r\n            if (col.accepts(Collection.ENTRY_TYPE)) {\r\n                final ClientEntry m1 = col.createEntry();\r\n                m1.setTitle(col.getTitle() + \": Test post\");\r\n                final Content c = new Content();\r\n                c.setValue(\"This is a test post\");\r\n                c.setType(\"html\");\r\n                m1.setContent(c);\r\n                col.addEntry(m1);\r\n                final ClientEntry m2 = col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                m2.setTitle(col.getTitle() + \": Updated title\");\r\n                m2.update();\r\n                final ClientEntry m3 = col.getEntry(m1.getEditURI());\r\n                assertEquals(col.getTitle() + \": Updated title\", m3.getTitle());\r\n                m3.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.getLineWidth",
	"Comment": "calculates the width of the line represented by the given element.",
	"Method": "float getLineWidth(int lineNumber){\r\n    Token tokenList = ((RSyntaxDocument) getDocument()).getTokenListForLine(lineNumber);\r\n    return RSyntaxUtilities.getTokenListWidth(tokenList, (RSyntaxTextArea) getContainer(), this);\r\n}"
}, {
	"Path": "com.rometools.modules.sle.io.ModuleParserTest.testParse",
	"Comment": "test of parse method, of class com.rometools.rome.feed.module.sle.io.moduleparser.",
	"Method": "void testParse(){\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"data/bookexample.xml\")));\r\n    final SimpleListExtension sle = (SimpleListExtension) feed.getModule(SimpleListExtension.URI);\r\n    assertEquals(\"list\", sle.getTreatAs());\r\n    final Group[] groups = sle.getGroupFields();\r\n    assertEquals(\"genre\", groups[0].getElement());\r\n    assertEquals(\"Genre\", groups[0].getLabel());\r\n    final Sort[] sorts = sle.getSortFields();\r\n    assertEquals(\"Relevance\", sorts[0].getLabel());\r\n    assertTrue(sorts[0].getDefaultOrder());\r\n    assertEquals(sorts[1].getNamespace(), Namespace.getNamespace(\"http://www.example.com/book\"));\r\n    assertEquals(sorts[1].getDataType(), Sort.DATE_TYPE);\r\n    assertEquals(sorts[1].getElement(), \"firstedition\");\r\n    final SyndEntry entry = feed.getEntries().get(0);\r\n    final SleEntry sleEntry = (SleEntry) entry.getModule(SleEntry.URI);\r\n    LOG.debug(\"{}\", sleEntry);\r\n    LOG.debug(\"getGroupByElement\");\r\n    LOG.debug(\"{}\", sleEntry.getGroupByElement(groups[0]));\r\n    LOG.debug(\"getSortByElement\");\r\n    LOG.debug(\"{}\", sleEntry.getSortByElement(sorts[0]));\r\n}"
}, {
	"Path": "io.rsocket.client.LoadBalancedRSocketMono.updateAperture",
	"Comment": "update the aperture value and ensure its value stays in the right range.",
	"Method": "void updateAperture(int newValue,long now){\r\n    int previous = targetAperture;\r\n    targetAperture = newValue;\r\n    targetAperture = Math.max(minAperture, targetAperture);\r\n    int maxAperture = Math.min(this.maxAperture, activeSockets.size() + pool.poolSize());\r\n    targetAperture = Math.min(maxAperture, targetAperture);\r\n    lastApertureRefresh = now;\r\n    pendings.reset((minPendings + maxPendings) / 2);\r\n    if (targetAperture != previous) {\r\n        logger.debug(\"Current pending={}, new target={}, previous target={}\", pendings.value(), targetAperture, previous);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setType",
	"Comment": "type is the standard mime type of the object. it is an optional attribute.",
	"Method": "void setType(String type){\r\n    this.type = type;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PHPTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.PropertiesLoader.getProperty",
	"Comment": "returns an array of values stored under a property key in all properties\tfiles. if the master file has this property it will be the first ones in\tthe array.",
	"Method": "String[] getProperty(String key){\r\n    final List<String> entriesList = new ArrayList<String>();\r\n    for (final Properties property : properties) {\r\n        final String values = property.getProperty(key);\r\n        if (values != null) {\r\n            entriesList.add(values);\r\n        }\r\n    }\r\n    final String[] entries = new String[entriesList.size()];\r\n    entriesList.toArray(entries);\r\n    return entries;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MarkOccurrencesSupport.doMarkOccurrences",
	"Comment": "immediately marks all occurrences of the token at the current caret\tposition.",
	"Method": "void doMarkOccurrences(){\r\n    timer.stop();\r\n    actionPerformed(null);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.entityproviders.CalendarEventEntityProvider.getMergedCalendarEventsForSite",
	"Comment": "get events for all the internal merged calendars for a given site",
	"Method": "List getMergedCalendarEventsForSite(String siteId,TimeRange range){\r\n    final List mergeCal = new ArrayList();\r\n    Map<String, String> eventIconMap = CalendarEventType.getIcons();\r\n    CalendarEventVector calendarEventVector = calendarService.getEvents(calendarService.getCalendarReferences(siteId), range);\r\n    for (Object o : calendarEventVector) {\r\n        CalendarEvent event = (CalendarEvent) o;\r\n        CalendarEventDetails eventDetails = new CalendarEventDetails(event);\r\n        eventDetails.setEventIcon(eventIconMap.get(event.getType()));\r\n        Reference reference = entityManager.newReference(event.getCalendarReference());\r\n        eventDetails.setSiteId(reference.getContext());\r\n        mergeCal.add(eventDetails);\r\n    }\r\n    return mergeCal;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.AcademicSessionEntityProvider.getEntities",
	"Comment": "get all academic sessions. wraps coursemanagementservice.getacademicsessions.",
	"Method": "List getEntities(EntityReference ref,Search search){\r\n    validateUser();\r\n    List<AcademicSessionData> sessions = new ArrayList<AcademicSessionData>();\r\n    for (AcademicSession session : cmService.getAcademicSessions()) {\r\n        sessions.add(new AcademicSessionData(session));\r\n    }\r\n    return sessions;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.writeGrade",
	"Comment": "write a grade to the gradebook for the current specified user",
	"Method": "boolean writeGrade(Assignment assignment,Map<String, Object> data,HashMap reportTable,HashMap additionalData,Map enrollmentInfo){\r\n    boolean success = false;\r\n    String grade = null;\r\n    String siteId = data.get(\"siteId\").toString();\r\n    String currentStudentUserId = additionalData.get(\"tiiUserId\").toString();\r\n    String tiiExternalId = \"\";\r\n    if (!enrollmentInfo.isEmpty()) {\r\n        if (enrollmentInfo.containsKey(currentStudentUserId)) {\r\n            tiiExternalId = enrollmentInfo.get(currentStudentUserId).toString();\r\n            log.info(\"tiiExternalId: \" + tiiExternalId);\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    grade = processGrade(reportTable.get(\"grade\" + currentStudentUserId).toString(), assignment);\r\n    SecurityAdvisor advisor = pushAdvisor();\r\n    try {\r\n        if (grade != null) {\r\n            try {\r\n                if (data.containsKey(\"assignment1\")) {\r\n                    gradebookExternalAssessmentService.updateExternalAssessmentScore(siteId, assignment.getExternalId(), tiiExternalId, grade);\r\n                } else {\r\n                    gradebookService.setAssignmentScoreString(siteId, data.get(\"taskTitle\").toString(), tiiExternalId, grade, \"SYNC\");\r\n                }\r\n                log.info(\"UPDATED GRADE (\" + grade + \") FOR USER (\" + tiiExternalId + \") IN ASSIGNMENT (\" + assignment.getName() + \")\");\r\n                success = true;\r\n            } catch (GradebookNotFoundException e) {\r\n                log.error(\"Error update grade GradebookNotFoundException \" + e.toString());\r\n            } catch (Exception e) {\r\n                log.error(\"Error update grade \" + e.toString());\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        log.error(\"Error setting grade \" + e.toString());\r\n    } finally {\r\n        popAdvisor(advisor);\r\n    }\r\n    return success;\r\n}"
}, {
	"Path": "org.sakaiproject.service.gradebook.shared.GradeMappingDefinition.isModified",
	"Comment": "determines if the grade mapping is different to the defaults",
	"Method": "boolean isModified(){\r\n    final Map<String, Double> left = new HashMap(this.gradeMap);\r\n    final Map<String, Double> right = new HashMap(this.defaultBottomPercents);\r\n    return !left.equals(right);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RDocument.charAt",
	"Comment": "returns the character in the document at the specified offset.",
	"Method": "char charAt(int offset,char charAt,int offset){\r\n    return ((RGapContent) getContent()).charAt(offset);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setCreator",
	"Comment": "sets the dublincore module creator. convenience method that can be used when there is onlyone creator to set.",
	"Method": "void setCreator(String creator){\r\n    this.creator = Lists.create(creator);\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.impl.BaseAnnouncementService.getReferenceRoot",
	"Comment": "return the reference rooot for use in resource references and urls.",
	"Method": "String getReferenceRoot(){\r\n    return REFERENCE_ROOT;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HostsTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.CourseGradeRecord.getCourseGrade",
	"Comment": "convenience method to get the correctly cast coursegrade that this coursegraderecord references.",
	"Method": "CourseGrade getCourseGrade(){\r\n    return (CourseGrade) super.getGradableObject();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.templates.StaticCodeTemplate.invoke",
	"Comment": "invokes this code template.the changes are made to the given text\tarea.",
	"Method": "void invoke(RSyntaxTextArea textArea){\r\n    Caret c = textArea.getCaret();\r\n    int dot = c.getDot();\r\n    int mark = c.getMark();\r\n    int p0 = Math.min(dot, mark);\r\n    int p1 = Math.max(dot, mark);\r\n    RSyntaxDocument doc = (RSyntaxDocument) textArea.getDocument();\r\n    Element map = doc.getDefaultRootElement();\r\n    int lineNum = map.getElementIndex(dot);\r\n    Element line = map.getElement(lineNum);\r\n    int start = line.getStartOffset();\r\n    int end = line.getEndOffset() - 1;\r\n    String s = textArea.getText(start, end - start);\r\n    int len = s.length();\r\n    int endWS = 0;\r\n    while (endWS < len && RSyntaxUtilities.isWhitespace(s.charAt(endWS))) {\r\n        endWS++;\r\n    }\r\n    s = s.substring(0, endWS);\r\n    p0 -= getID().length();\r\n    String beforeText = getBeforeTextIndented(s);\r\n    String afterText = getAfterTextIndented(s);\r\n    doc.replace(p0, p1 - p0, beforeText + afterText, null);\r\n    textArea.setCaretPosition(p0 + beforeText.length());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.SoloProcessor.hasValue",
	"Comment": "returns true if this soloprocessor received an onnext value.",
	"Method": "boolean hasValue(){\r\n    return subscribers.get() == TERMINATED && value != null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.Category.getIsCategory",
	"Comment": "the methods below are used with the gradableobjects because all three are displayed in a datatable together",
	"Method": "boolean getIsCategory(){\r\n    return true;\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getDuration",
	"Comment": "duration is the number of seconds the media object plays. it is an optional attribute.",
	"Method": "Long getDuration(){\r\n    return duration;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.setPaintMarkOccurrencesBorder",
	"Comment": "toggles whether a border should be painted around marked occurrences.",
	"Method": "void setPaintMarkOccurrencesBorder(boolean paintBorder){\r\n    paintMarkOccurrencesBorder = paintBorder;\r\n    if (markOccurrencesSupport != null) {\r\n        markOccurrencesSupport.setPaintBorder(paintBorder);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.createClass",
	"Comment": "this method was originally private, but is being made public for the\tmoment so we can run integration tests. todo revisit this decision.",
	"Method": "void createClass(String siteId){\r\n    log.debug(\"Creating class for site: \" + siteId);\r\n    String cpw = defaultClassPassword;\r\n    String ctl = siteId;\r\n    String fcmd = \"2\";\r\n    String fid = \"2\";\r\n    String utp = \"2\";\r\n    String cid = siteId;\r\n    Document document = null;\r\n    Map params = TurnitinAPIUtil.packMap(turnitinConn.getBaseTIIOptions(), \"cid\", cid, \"cpw\", cpw, \"ctl\", ctl, \"fcmd\", fcmd, \"fid\", fid, \"utp\", utp);\r\n    params.putAll(getInstructorInfo(siteId));\r\n    document = turnitinConn.callTurnitinReturnDocument(params);\r\n    Element root = document.getDocumentElement();\r\n    String rcode = ((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim();\r\n    if (((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim().compareTo(\"20\") == 0 || ((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim().compareTo(\"21\") == 0) {\r\n        log.debug(\"Create Class successful\");\r\n    } else {\r\n        if (\"218\".equals(rcode) || \"9999\".equals(rcode)) {\r\n            throw new TransientSubmissionException(\"Create Class not successful. Message: \" + ((CharacterData) (root.getElementsByTagName(\"rmessage\").item(0).getFirstChild())).getData().trim() + \". Code: \" + ((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim());\r\n        } else {\r\n            throw new SubmissionException(\"Create Class not successful. Message: \" + ((CharacterData) (root.getElementsByTagName(\"rmessage\").item(0).getFirstChild())).getData().trim() + \". Code: \" + ((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.takeUntil",
	"Comment": "signal a nosuchelementexception if the other signals before thissolo signals.",
	"Method": "Solo<T> takeUntil(Publisher<?> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return onAssembly(new SoloTakeUntil<T>(this, other));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.test",
	"Comment": "create a testsubscriber, optionally cancel it, subscribe it to this nono and returnthe testsubscriber itself.",
	"Method": "TestSubscriber<Void> test(TestSubscriber<Void> test,boolean cancelled){\r\n    TestSubscriber<Void> ts = new TestSubscriber<Void>();\r\n    if (cancelled) {\r\n        ts.cancel();\r\n    }\r\n    subscribe(ts);\r\n    return ts;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.search.Search.getRestrictionByProperties",
	"Comment": "finds if there are any search restrictions with one of the given properties,if so it returns the first of the found restriction, otherwise returns null",
	"Method": "Restriction getRestrictionByProperties(String[] properties){\r\n    Restriction togo = null;\r\n    for (int i = 0; i < properties.length; i++) {\r\n        String property = properties[i];\r\n        Restriction r = this.getRestrictionByProperty(property);\r\n        if (r != null) {\r\n            togo = r;\r\n            break;\r\n        }\r\n    }\r\n    return togo;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.CurlyFoldParser.isRightCurly",
	"Comment": "returns whether the token is a right curly brace.this method exists\tso subclasses can provide their own curly brace definition.",
	"Method": "boolean isRightCurly(Token t){\r\n    return t.isRightCurly();\r\n}"
}, {
	"Path": "restx.stats.RestxStatsCollector.notifyRequest",
	"Comment": "this method is called by restxstatscollectionfilter, to collect stats about requests.",
	"Method": "void notifyRequest(RestxRequest req,RestxResponse resp,Stopwatch stop){\r\n    RequestStats requestStats = stats.getRequestStats().get(req.getHttpMethod());\r\n    if (requestStats != null) {\r\n        requestStats.getRequestsCount().incrementAndGet();\r\n        long duration = stop.elapsed(TimeUnit.MICROSECONDS);\r\n        requestStats.getTotalDuration().addAndGet(duration);\r\n        long minDuration;\r\n        while ((minDuration = requestStats.getMinDuration().get()) > duration) {\r\n            if (requestStats.getMinDuration().compareAndSet(minDuration, duration)) {\r\n                break;\r\n            }\r\n        }\r\n        long maxDuration;\r\n        while ((maxDuration = requestStats.getMaxDuration().get()) < duration) {\r\n            if (requestStats.getMaxDuration().compareAndSet(maxDuration, duration)) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    touch();\r\n}"
}, {
	"Path": "org.sakaiproject.dav.DavPrincipal.hasRole",
	"Comment": "does the user represented by this principal possess the specified role?",
	"Method": "boolean hasRole(String role){\r\n    if (role == null)\r\n        return (false);\r\n    return (true);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.debug.RxJavaAssemblyException.find",
	"Comment": "tries to locate the rxjavaassemblyexception in the chain of causes of thegiven throwable.",
	"Method": "RxJavaAssemblyException find(Throwable ex){\r\n    Set<Throwable> memory = new HashSet<Throwable>();\r\n    while (ex != null) {\r\n        if (ex instanceof RxJavaAssemblyException) {\r\n            return (RxJavaAssemblyException) ex;\r\n        }\r\n        if (memory.add(ex)) {\r\n            ex = ex.getCause();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.MakefileTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(Token.NULL);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.Thumbnail.getTime",
	"Comment": "returns the time that the thumbnail was captured from its source",
	"Method": "Time getTime(){\r\n    return time;\r\n}"
}, {
	"Path": "org.sakaiproject.emailtemplateservice.service.impl.EmailTemplateServiceImpl.importTemplateFromXmlFile",
	"Comment": "registers a new template with the service, defined by the given xml file",
	"Method": "boolean importTemplateFromXmlFile(InputStream templateResourceStream,String templateRegistrationKey){\r\n    if (templateResourceStream == null) {\r\n        log.error(String.format(\"Unable to register template under key '%s': Could not load resource, input stream is null.\", templateRegistrationKey));\r\n        return false;\r\n    }\r\n    SecurityAdvisor yesMan = (String userId, String function, String reference) -> SecurityAdvice.ALLOWED;\r\n    try {\r\n        securityService.pushAdvisor(yesMan);\r\n        Document document = new SAXBuilder().build(templateResourceStream);\r\n        List<Element> childTemplates = document.getRootElement().getChildren(\"emailTemplate\");\r\n        childTemplates.stream().forEach((element) -> {\r\n            xmlToTemplate(element, templateRegistrationKey);\r\n        });\r\n    } catch (JDOMException | IOException e) {\r\n        log.error(String.format(\"Error registering template under key '%s': \", templateRegistrationKey), e);\r\n        return false;\r\n    } finally {\r\n        securityService.popAdvisor(yesMan);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.timer",
	"Comment": "completes after the specified amount of time on the specified scheduler.",
	"Method": "Nono timer(long delay,TimeUnit unit,Nono timer,long delay,TimeUnit unit,Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(unit, \"unit is null\");\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new NonoTimer(delay, unit, scheduler));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.Gradebook.isCourseAverageDisplayed",
	"Comment": "if the course grade is displayed, should the percentage be displayed?",
	"Method": "boolean isCourseAverageDisplayed(){\r\n    return courseAverageDisplayed;\r\n}"
}, {
	"Path": "net.oauth.client.OAuthClient.getHttpParameters",
	"Comment": "http client parameters, as a map from parameter name to value.",
	"Method": "Map<String, Object> getHttpParameters(){\r\n    return httpParameters;\r\n}"
}, {
	"Path": "com.pedro.encoder.input.gl.SurfaceManager.release",
	"Comment": "discards all resources held by this class, notably the egl context.",
	"Method": "void release(){\r\n    if (eglDisplay != EGL14.EGL_NO_DISPLAY) {\r\n        EGL14.eglMakeCurrent(eglDisplay, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_CONTEXT);\r\n        EGL14.eglDestroySurface(eglDisplay, eglSurface);\r\n        EGL14.eglDestroyContext(eglDisplay, eglContext);\r\n        EGL14.eglReleaseThread();\r\n        EGL14.eglTerminate(eglDisplay);\r\n    }\r\n    eglDisplay = EGL14.EGL_NO_DISPLAY;\r\n    eglContext = EGL14.EGL_NO_CONTEXT;\r\n    eglSurface = EGL14.EGL_NO_SURFACE;\r\n}"
}, {
	"Path": "org.sakaiproject.lti13.LineItemUtil.getAssignmentsForToolDAO",
	"Comment": "return a list of assignments associated with this tool in a site",
	"Method": "List<Assignment> getAssignmentsForToolDAO(String context_id,Long tool_id){\r\n    List retval = new ArrayList();\r\n    GradebookService g = (GradebookService) ComponentManager.get(\"org.sakaiproject.service.gradebook.GradebookService\");\r\n    pushAdvisor();\r\n    try {\r\n        List gradebookAssignments = g.getAssignments(context_id);\r\n        for (Iterator i = gradebookAssignments.iterator(); i.hasNext(); ) {\r\n            Assignment gAssignment = (Assignment) i.next();\r\n            if (gAssignment.isExternallyMaintained()) {\r\n                continue;\r\n            }\r\n            if (!GB_EXTERNAL_APP_NAME.equals(gAssignment.getExternalAppName())) {\r\n                continue;\r\n            }\r\n            String external_id = gAssignment.getExternalId();\r\n            if (external_id == null || external_id.length() < 1)\r\n                continue;\r\n            String[] parts = external_id.split(ID_SEPARATOR_REGEX);\r\n            if (parts.length < 1 || !parts[0].equals(tool_id.toString()))\r\n                continue;\r\n            retval.add(gAssignment);\r\n        }\r\n    } catch (GradebookNotFoundException e) {\r\n        log.error(\"Gradebook not found context_id={}\", context_id);\r\n        retval = null;\r\n    } catch (Throwable e) {\r\n        log.error(\"Unexpected Throwable\", e.getMessage());\r\n        e.printStackTrace();\r\n        retval = null;\r\n    } finally {\r\n        popAdvisor();\r\n    }\r\n    return retval;\r\n}"
}, {
	"Path": "net.oauth.OAuthMessage.getBodyAsStream",
	"Comment": "get a stream from which to read the body of the http request or response.this is designed to support efficient streaming of a large message.the caller must close the returned stream, to release the underlyingresources such as the tcp connection for an http response.",
	"Method": "InputStream getBodyAsStream(){\r\n    return bodyAsStream;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HTMLTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    cssPrevState = CSS;\r\n    int languageIndex = 0;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.MARKUP_COMMENT:\r\n            state = COMMENT;\r\n            break;\r\n        case Token.PREPROCESSOR:\r\n            state = PI;\r\n            break;\r\n        case Token.VARIABLE:\r\n            state = DTD;\r\n            break;\r\n        case INTERNAL_INTAG:\r\n            state = INTAG;\r\n            break;\r\n        case INTERNAL_INTAG_SCRIPT:\r\n            state = INTAG_SCRIPT;\r\n            break;\r\n        case INTERNAL_INTAG_STYLE:\r\n            state = INTAG_STYLE;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE:\r\n            state = INATTR_DOUBLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE:\r\n            state = INATTR_SINGLE;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT:\r\n            state = INATTR_DOUBLE_SCRIPT;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT:\r\n            state = INATTR_SINGLE_SCRIPT;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE_QUOTE_STYLE:\r\n            state = INATTR_DOUBLE_STYLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE_QUOTE_STYLE:\r\n            state = INATTR_SINGLE_STYLE;\r\n            break;\r\n        case INTERNAL_IN_JS:\r\n            state = JAVASCRIPT;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_MLC:\r\n            state = JS_MLC;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_INVALID:\r\n            state = JS_STRING;\r\n            validJSString = false;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_VALID:\r\n            state = JS_STRING;\r\n            validJSString = true;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_INVALID:\r\n            state = JS_CHAR;\r\n            validJSString = false;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_VALID:\r\n            state = JS_CHAR;\r\n            validJSString = true;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_CSS:\r\n            state = CSS;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_CSS_PROPERTY:\r\n            state = CSS_PROPERTY;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_CSS_VALUE:\r\n            state = CSS_VALUE;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            validJSString = true;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            validJSString = false;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_CSS_STRING:\r\n                        state = CSS_STRING;\r\n                        break;\r\n                    case INTERNAL_CSS_CHAR:\r\n                        state = CSS_CHAR_LITERAL;\r\n                        break;\r\n                    case INTERNAL_CSS_MLC:\r\n                        state = CSS_C_STYLE_COMMENT;\r\n                        break;\r\n                }\r\n                cssPrevState = -initialTokenType & 0xff;\r\n                languageIndex = LANG_INDEX_CSS;\r\n            } else {\r\n                state = Token.NULL;\r\n            }\r\n            break;\r\n    }\r\n    setLanguageIndex(languageIndex);\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.tsugi.basiclti.BasicLTIUtil.isRequest",
	"Comment": "returns true if this is a basic lti message with minimum values to meet the protocol",
	"Method": "boolean isRequest(HttpServletRequest request){\r\n    String message_type = request.getParameter(LTI_MESSAGE_TYPE);\r\n    if (message_type == null)\r\n        return false;\r\n    if (message_type.equals(LTI_MESSAGE_TYPE_BASICLTILAUNCHREQUEST) || message_type.equals(LTI_MESSAGE_TYPE_TOOLPROXYREGISTRATIONREQUEST) || message_type.equals(LTI_MESSAGE_TYPE_TOOLPROXY_RE_REGISTRATIONREQUEST) || message_type.equals(LTI_MESSAGE_TYPE_CONTENTITEMSELECTIONREQUEST)) {\r\n    } else {\r\n        return false;\r\n    }\r\n    String version = request.getParameter(LTI_VERSION);\r\n    if (version == null)\r\n        return true;\r\n    if (version.equals(LTI_VERSION_1) || version.equals(LTI_VERSION_2)) {\r\n    } else {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaibrary.xserver.XServer.presentURL",
	"Comment": "presents records found in the given set.displays records in full marc\tformat.",
	"Method": "ByteArrayOutputStream presentURL(String setNumber,String setEntry){\r\n    StringBuilder query = new StringBuilder(xserverBaseUrl);\r\n    query.append(\"?op=present_request\" + \"&set_number=\" + setNumber + \"&set_entry=\" + setEntry + \"&format=marc\" + \"&view=full\" + \"&session_id=\" + sessionId);\r\n    ByteArrayOutputStream xml = doURLConnection(query.toString());\r\n    if (printXML) {\r\n        log.debug(xml.toString());\r\n    }\r\n    return xml;\r\n}"
}, {
	"Path": "org.ethereum.rpc.Web3Impl.sco_peerList",
	"Comment": "returns the collected peer scoring informationsince the start of the node start",
	"Method": "PeerScoringInformation[] sco_peerList(){\r\n    if (this.peerScoringManager != null) {\r\n        return this.peerScoringManager.getPeersInformation().toArray(new PeerScoringInformation[0]);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconRowHeader.setTextArea",
	"Comment": "sets the text area being displayed.this will clear any tracking\ticons currently displayed.",
	"Method": "void setTextArea(RTextArea textArea){\r\n    removeAllTrackingIcons();\r\n    super.setTextArea(textArea);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.PDFExportService.getXSLFileNameForScheduleType",
	"Comment": "given a schedule type, the appropriate xslt file is returned",
	"Method": "String getXSLFileNameForScheduleType(int scheduleType){\r\n    String baseFileName = \"\";\r\n    switch(scheduleType) {\r\n        case BaseCalendarService.WEEK_VIEW:\r\n            baseFileName = WEEK_VIEW_XSLT_FILENAME;\r\n            break;\r\n        case BaseCalendarService.DAY_VIEW:\r\n            baseFileName = DAY_VIEW_XSLT_FILENAME;\r\n            break;\r\n        case BaseCalendarService.MONTH_VIEW:\r\n            baseFileName = MONTH_VIEW_XSLT_FILENAME;\r\n            break;\r\n        case BaseCalendarService.LIST_VIEW:\r\n            baseFileName = LIST_VIEW_XSLT_FILENAME;\r\n            break;\r\n        default:\r\n            log.debug(\"PrintFileGeneration.getXSLFileNameForScheduleType(): unexpected scehdule type = \" + scheduleType);\r\n            break;\r\n    }\r\n    return baseFileName;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.RecurrenceRuleBase.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    GregorianCalendar firstEventCalendarDate = null;\r\n    GregorianCalendar nextFirstEventCalendarDate = null;\r\n    TimeBreakdown startBreakdown = prototype.firstTime().breakdownLocal();\r\n    GregorianCalendar startCalendarDate = TimeService.getCalendar(TimeService.getLocalTimeZone(), 0, 0, 0, 0, 0, 0, 0);\r\n    startCalendarDate.set(startBreakdown.getYear(), startBreakdown.getMonth() - 1, startBreakdown.getDay(), startBreakdown.getHour(), startBreakdown.getMin(), startBreakdown.getSec());\r\n    boolean differentTimeZone = false;\r\n    if (TimeService.getLocalTimeZone().getID().equals(timeZone.getID())) {\r\n        differentTimeZone = false;\r\n    } else {\r\n        differentTimeZone = true;\r\n    }\r\n    if (differentTimeZone) {\r\n        firstEventCalendarDate = TimeService.getCalendar(timeZone, 0, 0, 0, 0, 0, 0, 0);\r\n        firstEventCalendarDate.setTimeInMillis(startCalendarDate.getTimeInMillis());\r\n        nextFirstEventCalendarDate = (GregorianCalendar) firstEventCalendarDate.clone();\r\n    }\r\n    List rv = new Vector();\r\n    GregorianCalendar nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    int currentCount = 1;\r\n    do {\r\n        if (differentTimeZone) {\r\n            nextCalendarDate.setTimeInMillis(nextFirstEventCalendarDate.getTimeInMillis());\r\n        }\r\n        Time nextTime = TimeService.newTime(nextCalendarDate);\r\n        if ((getCount() > 0) && (currentCount > getCount()))\r\n            break;\r\n        if ((getUntil() != null) && isAfter(nextTime, getUntil()))\r\n            break;\r\n        TimeRange nextTimeRange = TimeService.newTimeRange(nextTime.getTime(), prototype.duration());\r\n        if (isOverlap(range, nextTimeRange)) {\r\n            TimeRange eventTimeRange = null;\r\n            if (prototype.isSingleTime()) {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime());\r\n            } else {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime(), nextTimeRange.lastTime(), true, false);\r\n            }\r\n            rv.add(new RecurrenceInstance(eventTimeRange, currentCount));\r\n        } else if (isAfter(nextTime, range.lastTime()))\r\n            break;\r\n        if (differentTimeZone) {\r\n            nextFirstEventCalendarDate = (GregorianCalendar) firstEventCalendarDate.clone();\r\n            nextFirstEventCalendarDate.add(getRecurrenceType(), getInterval() * currentCount);\r\n        } else {\r\n            nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n            nextCalendarDate.add(getRecurrenceType(), getInterval() * currentCount);\r\n        }\r\n        currentCount++;\r\n    } while (true);\r\n    return rv;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ParserManager.shouldRemoveNotice",
	"Comment": "returns whether a parser notice should be removed, based on a parse\tresult.",
	"Method": "boolean shouldRemoveNotice(ParserNotice notice,ParseResult res){\r\n    if (DEBUG_PARSING) {\r\n        System.out.println(\"[DEBUG]: ... ... shouldRemoveNotice \" + notice + \": \" + (notice.getParser() == res.getParser()));\r\n    }\r\n    return notice.getParser() == res.getParser();\r\n}"
}, {
	"Path": "com.rometools.utils.Longs.parseDecimal",
	"Comment": "converts a string into a long by first parsing it as double and then casting it to long.",
	"Method": "Long parseDecimal(String s){\r\n    Long parsed = null;\r\n    try {\r\n        if (s != null) {\r\n            parsed = (long) Double.parseDouble(s);\r\n        }\r\n    } catch (final NumberFormatException e) {\r\n    }\r\n    return parsed;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndEntryImpl.setAuthor",
	"Comment": "sets the entry author.this method is a convenience method, it maps to the dublin core module creator.",
	"Method": "void setAuthor(String author){\r\n    final DCModule dcModule = getDCModule();\r\n    final String currentValue = dcModule.getCreator();\r\n    if (Strings.isEmpty(currentValue)) {\r\n        getDCModule().setCreator(author);\r\n    }\r\n}"
}, {
	"Path": "io.rsocket.util.AbstractionLeakingFrameUtils.toAbstractionLeakingFrame",
	"Comment": "returns an abstraction leaking frame with the stream id and frame. this adds the frame lengthand stream id header to the frame.",
	"Method": "Frame toAbstractionLeakingFrame(ByteBufAllocator byteBufAllocator,int streamId,io.rsocket.framing.Frame frame){\r\n    Objects.requireNonNull(byteBufAllocator, \"byteBufAllocator must not be null\");\r\n    Objects.requireNonNull(frame, \"frame must not be null\");\r\n    StreamIdFrame streamIdFrame = null;\r\n    FrameLengthFrame frameLengthFrame = null;\r\n    try {\r\n        streamIdFrame = createStreamIdFrame(byteBufAllocator, streamId, frame);\r\n        frameLengthFrame = createFrameLengthFrame(byteBufAllocator, streamIdFrame);\r\n        return frameLengthFrame.mapFrame(byteBuf -> Frame.from(byteBuf.retain()));\r\n    } finally {\r\n        disposeQuietly(frame, streamIdFrame, frameLengthFrame);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.addLineTrackingIcon",
	"Comment": "adds an icon that tracks an offset in the document, and is displayed\tadjacent to the line numbers.this is useful for marking things such\tas source code errors.",
	"Method": "GutterIconInfo addLineTrackingIcon(int line,Icon icon,GutterIconInfo addLineTrackingIcon,int line,Icon icon,String tip){\r\n    int offs = textArea.getLineStartOffset(line);\r\n    return addOffsetTrackingIcon(offs, icon, tip);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.mergeArray",
	"Comment": "runs the maximum number of nono sources at once and completes when all sourcenono complete.",
	"Method": "Nono mergeArray(Nono sources,Nono mergeArray,int maxConcurrency,Nono sources){\r\n    ObjectHelper.verifyPositive(maxConcurrency, \"maxConcurrency\");\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    return onAssembly(new NonoMergeArray(sources, false, maxConcurrency));\r\n}"
}, {
	"Path": "com.pedro.rtpstreamer.displayexample.DisplayRtmpActivity.initNotification",
	"Comment": "this notification is to solve mediaprojection problem that only render surface if something changed.it could produce problem in some server like in youtube that need send video and audio all time to work.",
	"Method": "void initNotification(){\r\n    Notification.Builder notificationBuilder = new Notification.Builder(this).setSmallIcon(R.drawable.notification_anim).setContentTitle(\"Streaming\").setContentText(\"Display mode stream\").setTicker(\"Stream in progress\");\r\n    notificationBuilder.setAutoCancel(true);\r\n    if (notificationManager != null)\r\n        notificationManager.notify(12345, notificationBuilder.build());\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.tool.ChatTool.getEnterTool",
	"Comment": "this is called from the first page to redirect the user to the proper view. this is the first call after jsf creates a new instance, so initialization isdone here. if the tool is set to go to the select a chat room view and there are multiple chat rooms, then it will go to the select a room page.if the user is to select a room and there is only one room, then it will go to that room.",
	"Method": "String getEnterTool(){\r\n    setupTool();\r\n    String url = PAGE_ENTER_ROOM;\r\n    if (currentChannel == null)\r\n        url = PAGE_LIST_ROOMS;\r\n    ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();\r\n    HttpServletRequest req = (HttpServletRequest) context.getRequest();\r\n    req.setAttribute(Tool.NATIVE_URL, null);\r\n    setToolContext(req.getContextPath());\r\n    req.setAttribute(Tool.NATIVE_URL, Tool.NATIVE_URL);\r\n    try {\r\n        context.redirect(url);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(\"Failed to redirect to \" + url, e);\r\n    }\r\n    return \"\";\r\n}"
}, {
	"Path": "net.oauth.signature.Base64.isArrayByteBase64",
	"Comment": "tests a given byte array to see if it contains only valid characters within the base64 alphabet.currently the method treats whitespace as valid.",
	"Method": "boolean isArrayByteBase64(byte[] arrayOctet){\r\n    for (int i = 0; i < arrayOctet.length; i++) {\r\n        if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "co.rsk.net.NodeBlockProcessor.getBlockFromBlockchainStore",
	"Comment": "getblockfromblockchainstore retrieves the block with the given height from the blockchain, if available.",
	"Method": "Block getBlockFromBlockchainStore(long height){\r\n    return this.blockchain.getBlockByNumber(height);\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.model.impl.ChatDataMigration.init",
	"Comment": "called on after the startup of the singleton.this sets the global list of functions which will have permission managed by sakai",
	"Method": "void init(){\r\n    log.info(\"init()\");\r\n    try {\r\n        if (performChatMigration) {\r\n            new ChatDataMigrationThread();\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(\"Error with ChatDataMigration.init()\", e);\r\n    }\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.network.UploadBandwidthSampler.stopSampling",
	"Comment": "finish sampling and prevent further changes to theconnectionclass until another timer is started.",
	"Method": "void stopSampling(){\r\n    if (mSamplingCounter.decrementAndGet() == 0) {\r\n        mHandler.sendEmptyMessage(SamplingHandler.MSG_STOP);\r\n    }\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.copyDocumentNode",
	"Comment": "copy a node from one source document, adding it to the documentroot of a different, target document",
	"Method": "void copyDocumentNode(Node source,Document target){\r\n    Node node = target.importNode(source, true);\r\n    target.getDocumentElement().appendChild(node);\r\n}"
}, {
	"Path": "co.rsk.core.bc.FamilyUtils.getUsedUncles",
	"Comment": "calculate the set of already used hashes in the chain of a block",
	"Method": "Set<Keccak256> getUsedUncles(BlockStore blockStore,Block block,int limitNum,Set<Keccak256> getUsedUncles,BlockStore blockStore,long blockNumber,byte[] parentHash,int limitNum){\r\n    Set<Keccak256> ret = new HashSet();\r\n    if (blockStore == null) {\r\n        return ret;\r\n    }\r\n    long minNumber = max(0, blockNumber - limitNum);\r\n    Block it = blockStore.getBlockByHash(parentHash);\r\n    while (it != null && it.getNumber() >= minNumber) {\r\n        for (BlockHeader uncle : it.getUncleList()) {\r\n            ret.add(uncle.getHash());\r\n        }\r\n        it = blockStore.getBlockByHash(it.getParentHash().getBytes());\r\n    }\r\n    return ret;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.SectionCategoryEntityProvider.create",
	"Comment": "create a new section category. wraps coursemanagementadministration.addsectioncategory.",
	"Method": "void create(Object entity){\r\n    SectionCategoryData data = (SectionCategoryData) entity;\r\n    cmAdmin.addSectionCategory(data.code, data.description);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentActionTestTools.getScaleFactor",
	"Comment": "this probably should also be moved from assignmentaction to a util or something",
	"Method": "Integer getScaleFactor(Integer decimals){\r\n    return (int) Math.pow(10.0, decimals);\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.DCModuleParser.parseElementListDate",
	"Comment": "utility method to parse a list of dates out of a list of elements.",
	"Method": "List<Date> parseElementListDate(List<Element> elements,Locale locale){\r\n    final List<Date> values = new ArrayList<Date>();\r\n    for (final Element element : elements) {\r\n        values.add(DateParser.parseDate(element.getText(), locale));\r\n    }\r\n    return values;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.extension.EntityData.setDisplayTitle",
	"Comment": "a string which is suitable for display and provides a short summary of the entity,typically 100 chars or less, this may be the name or title of the data represented by an entity",
	"Method": "void setDisplayTitle(String displayTitle){\r\n    this.entityDisplayTitle = displayTitle;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ParserManager.noticeContainsPosition",
	"Comment": "returns whether a parser notice contains the specified offset.",
	"Method": "boolean noticeContainsPosition(ParserNotice notice,int offs){\r\n    if (notice.getKnowsOffsetAndLength()) {\r\n        return notice.containsPosition(offs);\r\n    }\r\n    Document doc = textArea.getDocument();\r\n    Element root = doc.getDefaultRootElement();\r\n    int line = notice.getLine();\r\n    if (line < 0) {\r\n        return false;\r\n    }\r\n    Element elem = root.getElement(line);\r\n    return elem != null && offs >= elem.getStartOffset() && offs < elem.getEndOffset();\r\n}"
}, {
	"Path": "co.rsk.net.TransactionNodeInformation.addTransactionToNode",
	"Comment": "addtransactiontonode specifies that a given node knows about a given transaction.",
	"Method": "void addTransactionToNode(Keccak256 transactionHash,NodeID nodeID){\r\n    Set<NodeID> transactionNodes = nodesByTransaction.get(transactionHash);\r\n    if (transactionNodes == null) {\r\n        transactionNodes = new HashSet();\r\n        nodesByTransaction.put(transactionHash, transactionNodes);\r\n    }\r\n    transactionNodes.add(nodeID);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.uploadZipAttachments",
	"Comment": "this is to get the submission or feedback attachment from the upload zip file into the submission object",
	"Method": "Map<String, UploadGradeWrapper> uploadZipAttachments(SessionState state,Map<String, UploadGradeWrapper> submissionTable,InputStream zin,ZipEntry entry,String entryName,String userEid,String submissionOrFeedback){\r\n    String fName = entryName.substring(entryName.lastIndexOf(\"/\") + 1, entryName.length());\r\n    ContentTypeImageService iService = contentTypeImageService;\r\n    try {\r\n        String extension = \"\";\r\n        if (!fName.contains(\".\") || (fName.contains(\".\") && fName.indexOf(\".\") != 0)) {\r\n            ResourceProperties properties = contentHostingService.newResourceProperties();\r\n            properties.addProperty(ResourceProperties.PROP_DISPLAY_NAME, fName);\r\n            String[] parts = fName.split(\"\\\\.\");\r\n            if (parts.length > 1) {\r\n                extension = parts[parts.length - 1];\r\n            }\r\n            try {\r\n                String contentType = iService.getContentType(extension);\r\n                ContentResourceEdit attachment = contentHostingService.addAttachmentResource(fName);\r\n                attachment.setContent(zin);\r\n                attachment.setContentType(contentType);\r\n                attachment.getPropertiesEdit().addAll(properties);\r\n                contentHostingService.commitResource(attachment);\r\n                UploadGradeWrapper r = (UploadGradeWrapper) submissionTable.get(userEid);\r\n                List attachments = \"submission\".equals(submissionOrFeedback) ? r.getSubmissionAttachments() : r.getFeedbackAttachments();\r\n                attachments.add(entityManager.newReference(attachment.getReference()));\r\n                if (\"submission\".equals(submissionOrFeedback)) {\r\n                    r.setSubmissionAttachments(attachments);\r\n                } else {\r\n                    r.setFeedbackAttachments(attachments);\r\n                }\r\n                submissionTable.put(userEid, r);\r\n            } catch (Exception e) {\r\n                log.warn(this + \":doUploadZipAttachments problem commit resource \" + e.getMessage());\r\n            }\r\n        }\r\n    } catch (Exception ee) {\r\n        log.warn(this + \":doUploadZipAttachments \" + ee.getMessage());\r\n    }\r\n    return submissionTable;\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sync.setConflict",
	"Comment": "set an indication of whether there was an update conflict detected when processing an updateof this item.",
	"Method": "void setConflict(Boolean conflict){\r\n    this.conflict = conflict;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaEditorKit.getActions",
	"Comment": "fetches the set of commands that can be used\ton a text component that is using a model and\tview produced by this kit.",
	"Method": "Action[] getActions(){\r\n    return defaultActions;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.service.ContentReviewService.getProviderId",
	"Comment": "provides a default implementation for uniquely identifying a provider",
	"Method": "Integer getProviderId(){\r\n    return Math.abs(this.getServiceName().hashCode());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementObservable.ifThen",
	"Comment": "return an observable that emits the emissions from one specifiedobservable if a condition evaluates to true, or from another specifiedobservable otherwise.",
	"Method": "Observable<R> ifThen(BooleanSupplier condition,ObservableSource<? extends R> then,Observable<R> ifThen,BooleanSupplier condition,ObservableSource<? extends R> then,Scheduler scheduler,Observable<R> ifThen,BooleanSupplier condition,ObservableSource<? extends R> then,Observable<? extends R> orElse){\r\n    ObjectHelper.requireNonNull(condition, \"condition is null\");\r\n    ObjectHelper.requireNonNull(then, \"then is null\");\r\n    ObjectHelper.requireNonNull(orElse, \"orElse is null\");\r\n    return RxJavaPlugins.onAssembly(new ObservableIfThen<R>(condition, then, orElse));\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.CitationListAccessServlet.handleAccess",
	"Comment": "handle an http request for access. the request and response objects are provider.\tthe access is for the referenced entity.\tuse the response object to send the headers, length, content type, and bytes of the response in whatever manner needed.\tmake the response only if it is permitted and exists and otherwise valid. use the exceptions for any error handling.",
	"Method": "void handleAccess(HttpServletRequest req,HttpServletResponse res,Reference ref,Collection copyrightAcceptedRefs){\r\n    String subtype = ref.getSubType();\r\n    if (org.sakaiproject.citation.api.CitationService.REF_TYPE_EXPORT_RIS_SEL.equals(subtype) || org.sakaiproject.citation.api.CitationService.REF_TYPE_EXPORT_RIS_ALL.equals(subtype)) {\r\n        handleExportRequest(req, res, ref, org.sakaiproject.citation.api.CitationService.RIS_FORMAT, subtype);\r\n    } else if (org.sakaiproject.citation.api.CitationService.REF_TYPE_VIEW_LIST.equals(subtype)) {\r\n        handleViewRequest(req, res, ref);\r\n    } else {\r\n        throw new EntityNotDefinedException(ref.getReference());\r\n    }\r\n    Event e = EventTrackingService.newEvent(ContentHostingService.EVENT_RESOURCE_READ, \"/content\" + ref.getId(), false);\r\n    EventTrackingService.post(e);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.coalesce",
	"Comment": "coalesces items from upstream into a container via a consumer and emits the container ifthere is a downstream demand, otherwise it keeps coalescing into the same container.",
	"Method": "FlowableTransformer<T, R> coalesce(Callable<R> containerSupplier,BiConsumer<R, T> coalescer,FlowableTransformer<T, R> coalesce,Callable<R> containerSupplier,BiConsumer<R, T> coalescer,int bufferSize){\r\n    ObjectHelper.requireNonNull(containerSupplier, \"containerSupplier is null\");\r\n    ObjectHelper.requireNonNull(coalescer, \"coalescer is null\");\r\n    ObjectHelper.verifyPositive(bufferSize, \"bufferSize\");\r\n    return new FlowableCoalesce<T, R>(null, containerSupplier, coalescer, bufferSize);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PropertiesFileTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchResult.toString",
	"Comment": "returns a string representation of this object.useful for debugging.",
	"Method": "String toString(){\r\n    return \"[SearchResult: \" + \"count=\" + getCount() + \", markedCount=\" + getMarkedCount() + \", matchRange=\" + getMatchRange() + \"]\";\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.setMatchedBracketBGColor",
	"Comment": "sets the color used as the background for a matched bracket.",
	"Method": "void setMatchedBracketBGColor(Color color){\r\n    matchedBracketBGColor = color;\r\n    if (match != null) {\r\n        repaint();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.FocusableTip.possiblyDisposeOfTipWindow",
	"Comment": "disposes of the focusable tip currently displayed, if any.",
	"Method": "void possiblyDisposeOfTipWindow(){\r\n    if (tipWindow != null) {\r\n        tipWindow.dispose();\r\n        tipWindow = null;\r\n        textAreaListener.uninstall();\r\n        tipVisibleBounds.setBounds(-1, -1, 0, 0);\r\n        lastText = null;\r\n        textArea.requestFocus();\r\n    }\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.BlobStoreFileSystemHandler.setUseIdForPath",
	"Comment": "whether to use the id for the resource path.the default is false, so the filepath will be used.",
	"Method": "void setUseIdForPath(boolean useIdForPath){\r\n    this.useIdForPath = useIdForPath;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ClojureTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doHardRemove_confirm_assignment",
	"Comment": "action is to delete the assignment and also the related assignmentsubmission",
	"Method": "void doHardRemove_confirm_assignment(RunData data){\r\n    if (!\"POST\".equals(data.getRequest().getMethod())) {\r\n        return;\r\n    }\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String[] assignmentIds = params.getStrings(\"selectedAssignments\");\r\n    if (assignmentIds != null) {\r\n        for (String id : assignmentIds) {\r\n            Assignment a = null;\r\n            try {\r\n                a = assignmentService.getAssignment(id);\r\n                if (a != null) {\r\n                    if (taggingManager.isTaggable()) {\r\n                        for (TaggingProvider provider : taggingManager.getProviders()) {\r\n                            provider.removeTags(assignmentActivityProducer.getActivity(a));\r\n                        }\r\n                    }\r\n                    assignmentService.deleteAssignment(a);\r\n                }\r\n            } catch (IdUnusedException | PermissionException e) {\r\n                addAlert(state, rb.getFormattedMessage(\"youarenot_editAssignment\", id));\r\n                log.warn(e.getMessage());\r\n            }\r\n        }\r\n        if (state.getAttribute(STATE_MESSAGE) == null) {\r\n            state.setAttribute(\"selectedAssignments\", new ArrayList());\r\n            state.setAttribute(STATE_MODE, MODE_LIST_ASSIGNMENTS);\r\n            state.setAttribute(STATE_SELECTED_VIEW, MODE_LIST_ASSIGNMENTS);\r\n        }\r\n    } else {\r\n        addAlert(state, rb.getString(\"youmust6\"));\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.gradebook.GradebookPermissionServiceImpl.toPermissionDefinition",
	"Comment": "maps a permission to a permissiondefinition\t note that the persistent groupid is actually the group reference",
	"Method": "PermissionDefinition toPermissionDefinition(Permission permission){\r\n    PermissionDefinition rval = new PermissionDefinition();\r\n    if (permission != null) {\r\n        rval.setId(permission.getId());\r\n        rval.setUserId(permission.getUserId());\r\n        rval.setCategoryId(permission.getCategoryId());\r\n        rval.setFunction(permission.getFunction());\r\n        rval.setGroupReference(permission.getGroupId());\r\n    }\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarActionState.getCalendarFilter",
	"Comment": "returns the calendar filter that is currently being used for the list\tview and printing.",
	"Method": "CalendarFilter getCalendarFilter(){\r\n    return calendarFilter;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientEntry.getEditURI",
	"Comment": "get the uri that can be used to edit the entry via http put or delete.",
	"Method": "String getEditURI(){\r\n    for (int i = 0; i < getOtherLinks().size(); i++) {\r\n        final Link link = getOtherLinks().get(i);\r\n        if (link.getRel() != null && link.getRel().equals(\"edit\")) {\r\n            return link.getHrefResolved();\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.lti.impl.FoormMapRowMapper.getColumnKey",
	"Comment": "determine the key to use for the given column in the column map.",
	"Method": "String getColumnKey(String columnName){\r\n    for (String s : columns) {\r\n        if (s.equalsIgnoreCase(columnName))\r\n            return s;\r\n    }\r\n    return columnName;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.isOkToShowPermissionsButton",
	"Comment": "returns true if it is okay to show the permissions button in the menu.",
	"Method": "boolean isOkToShowPermissionsButton(String statusName){\r\n    return SiteService.allowUpdateSite(ToolManager.getCurrentPlacement().getContext());\r\n}"
}, {
	"Path": "org.sakaiproject.component.gradebook.BaseHibernateManager.convertPointsToPercentage",
	"Comment": "converts points to percentage for the given assignmentgraderecords",
	"Method": "List convertPointsToPercentage(Gradebook gradebook,List studentRecordsFromDB){\r\n    final List percentageList = new ArrayList();\r\n    for (int i = 0; i < studentRecordsFromDB.size(); i++) {\r\n        final AssignmentGradeRecord agr = (AssignmentGradeRecord) studentRecordsFromDB.get(i);\r\n        if (agr != null) {\r\n            final Double pointsPossible = agr.getAssignment().getPointsPossible();\r\n            if (pointsPossible == null || agr.getPointsEarned() == null) {\r\n                agr.setPercentEarned(null);\r\n                percentageList.add(agr);\r\n            } else {\r\n                agr.setDateRecorded(agr.getDateRecorded());\r\n                agr.setGraderId(agr.getGraderId());\r\n                agr.setPercentEarned(calculateEquivalentPercent(pointsPossible, agr.getPointsEarned()));\r\n                percentageList.add(agr);\r\n            }\r\n        }\r\n    }\r\n    return percentageList;\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setBitrate",
	"Comment": "bitrate is the kilobits per second rate of media. it is an optional attribute.",
	"Method": "void setBitrate(Float bitrate){\r\n    this.bitrate = bitrate;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.cover.AnnouncementService.cancelChannel",
	"Comment": "cancel the changes made to a messagechanneledit object, and release the lock. the messagechanneledit is disabled, and not to be used after this call.",
	"Method": "void cancelChannel(org.sakaiproject.message.api.MessageChannelEdit param0){\r\n    org.sakaiproject.announcement.api.AnnouncementService service = getInstance();\r\n    if (service == null)\r\n        return;\r\n    service.cancelChannel(param0);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.Flowables.repeatCallable",
	"Comment": "repeatedly calls the given callable to produce items indefinitely.",
	"Method": "Flowable<T> repeatCallable(Callable<T> callable){\r\n    ObjectHelper.requireNonNull(callable, \"callable is null\");\r\n    return RxJavaPlugins.onAssembly(new FlowableRepeatCallable<T>(callable));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.string.StringFlowable.split",
	"Comment": "splits the input sequence of strings based on a pattern even across subsequentelements if needed.",
	"Method": "FlowableTransformer<String, String> split(Pattern pattern,FlowableTransformer<String, String> split,Pattern pattern,int bufferSize,FlowableTransformer<String, String> split,String pattern,FlowableTransformer<String, String> split,String pattern,int bufferSize){\r\n    return split(Pattern.compile(pattern), bufferSize);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndCategoryImpl.getSubject",
	"Comment": "package private constructor, used by syndcategorylistfacade.",
	"Method": "DCSubject getSubject(){\r\n    return subject;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.doOnRequest",
	"Comment": "executes the callback when the downstream requests from this nolo.",
	"Method": "Nono doOnRequest(LongConsumer onRequest){\r\n    ObjectHelper.requireNonNull(onRequest, \"onRequest is null\");\r\n    return onAssembly(new NonoDoOnLifecycle(this, Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), onRequest, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "org.ethereum.solidity.SolidityType.getName",
	"Comment": "the type name as it was specified in the interface description",
	"Method": "String getName(){\r\n    return name;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.DefaultFoldManager.updateFoldParser",
	"Comment": "updates the fold parser to be the one appropriate for the language\tcurrently being highlighted.",
	"Method": "void updateFoldParser(){\r\n    foldParser = FoldParserManager.get().getFoldParser(textArea.getSyntaxEditingStyle());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.windowWhile",
	"Comment": "emits elements into a flowable window while the given predicate returns true. if thepredicate returns false, a new flowable window is emitted.",
	"Method": "FlowableTransformer<T, Flowable<T>> windowWhile(Predicate<? super T> predicate,FlowableTransformer<T, Flowable<T>> windowWhile,Predicate<? super T> predicate,int bufferSize){\r\n    return new FlowableWindowPredicate<T>(null, predicate, FlowableWindowPredicate.Mode.BEFORE, bufferSize);\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testReview2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testReview2Parse(){\r\n    LOG.debug(\"testReview2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/reviews2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Review module = (Review) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Review\", \"Earth\", \"Google\" }, module.getLabels());\r\n    cal.set(2005, 2, 24);\r\n    Assert.assertEquals(\"PubDate\", cal.getTime(), module.getPublishDate());\r\n    this.assertEquals(\"Authors\", new String[] { \"Jimmy Smith\" }, module.getAuthors());\r\n    Assert.assertEquals(\"Name of Item Rev\", \"Google Earth\", module.getNameOfItemBeingReviewed());\r\n    Assert.assertEquals(\"Type\", \"Product\", module.getReviewType());\r\n    Assert.assertEquals(\"Rever Type\", \"editorial\", module.getReviewerType());\r\n    Assert.assertEquals(\"Rating\", new Float(5), module.getRating());\r\n    Assert.assertEquals(\"URL of Item\", new URL(\"http://earth.google.com/\"), module.getUrlOfItemBeingReviewed());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxUtilities.getTokenListWidth",
	"Comment": "determines the width of the given token list taking tabs\tinto consideration.this is implemented in a 1.1 style coordinate\tsystem where ints are used and 72dpi is assumed.",
	"Method": "float getTokenListWidth(Token tokenList,RSyntaxTextArea textArea,TabExpander e,float getTokenListWidth,Token tokenList,RSyntaxTextArea textArea,TabExpander e,float x0){\r\n    float width = x0;\r\n    for (Token t = tokenList; t != null && t.isPaintable(); t = t.getNextToken()) {\r\n        width += t.getWidth(textArea, e, width);\r\n    }\r\n    return width - x0;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.TipUtil.getToolTipBackground",
	"Comment": "returns the default background color to use for tool tip windows.",
	"Method": "Color getToolTipBackground(){\r\n    Color c = UIManager.getColor(\"ToolTip.background\");\r\n    boolean isNimbus = isNimbusLookAndFeel();\r\n    if (c == null || isNimbus) {\r\n        c = UIManager.getColor(\"info\");\r\n        if (c == null || (isNimbus && isDerivedColor(c))) {\r\n            c = SystemColor.info;\r\n        }\r\n    }\r\n    if (c instanceof ColorUIResource) {\r\n        c = new Color(c.getRGB());\r\n    }\r\n    return c;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getUnderlineForToken",
	"Comment": "returns whether the specified token should be underlined.\ta token is underlined if its syntax style includes underlining,\tor if it is a hyperlink and hyperlinks are enabled.",
	"Method": "boolean getUnderlineForToken(Token t){\r\n    return (getHyperlinksEnabled() && (t.isHyperlink() || (linkGeneratorResult != null && linkGeneratorResult.getSourceOffset() == t.getOffset()))) || syntaxScheme.getStyle(t.getType()).underline;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.blockingAwait",
	"Comment": "blockingly await for the given timeout the termination of this nono and returnthe throwable if this nono terminated with an error, nullotherwise.",
	"Method": "Throwable blockingAwait(Throwable blockingAwait,long timeout,TimeUnit unit){\r\n    if (this instanceof Callable) {\r\n        try {\r\n            ((Callable<?>) this).call();\r\n            return null;\r\n        } catch (Throwable ex) {\r\n            Exceptions.throwIfFatal(ex);\r\n            return ex;\r\n        }\r\n    }\r\n    ObjectHelper.requireNonNull(unit, \"unit is null\");\r\n    NonoBlockingAwaitSubscriber s = new NonoBlockingAwaitSubscriber();\r\n    subscribe(s);\r\n    return s.blockingAwait(timeout, unit);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doShow_view_assignment",
	"Comment": "action is to show the assignment content in the view assignment page",
	"Method": "void doShow_view_assignment(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    state.setAttribute(VIEW_ASSIGNMENT_HIDE_ASSIGNMENT_FLAG, Boolean.FALSE);\r\n}"
}, {
	"Path": "io.rsocket.RSocketFactory.receive",
	"Comment": "creates a factory that receives server connections from client rsockets.",
	"Method": "ServerRSocketFactory receive(){\r\n    return new ServerRSocketFactory();\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.tool.pages.BasePage.renderHead",
	"Comment": "this block adds the required wrapper markup to style it like a sakai tool. \tadd to this any additional css or js references that you need.",
	"Method": "void renderHead(IHeaderResponse response){\r\n    String skinRepo = sakaiProxy.getSkinRepoProperty();\r\n    String toolCSS = sakaiProxy.getToolSkinCSS(skinRepo);\r\n    String toolBaseCSS = skinRepo + \"/tool_base.css\";\r\n    response.render(JavaScriptHeaderItem.forUrl(\"/library/js/headscripts.js\"));\r\n    response.render(CssHeaderItem.forUrl(toolBaseCSS));\r\n    response.render(CssHeaderItem.forUrl(toolCSS));\r\n    response.render(OnDomReadyHeaderItem.forScript(\"setMainFrameHeight( window.name )\"));\r\n    StringBuilder headJs = new StringBuilder();\r\n    headJs.append(\"var sakai = sakai || {}; sakai.editor = sakai.editor || {}; \" + \"sakai.editor.editors = sakai.editor.editors || {}; \" + \"sakai.editor.editors.ckeditor = sakai.editor.editors.ckeditor || {}; \" + \"sakai.locale = sakai.locale || {};\\n\");\r\n    headJs.append(\"sakai.locale.userCountry = '\" + rloader.getLocale().getCountry() + \"';\\n\");\r\n    headJs.append(\"sakai.locale.userLanguage = '\" + rloader.getLocale().getLanguage() + \"';\\n\");\r\n    headJs.append(\"sakai.locale.userLocale = '\" + rloader.getLocale().toString() + \"';\\n\");\r\n    response.render(JavaScriptHeaderItem.forScript(headJs, null));\r\n    response.render(StringHeaderItem.forString(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\"));\r\n    response.render(JavaScriptHeaderItem.forUrl(\"/library/webjars/jquery/1.12.4/jquery.min.js\"));\r\n    response.render(JavaScriptHeaderItem.forUrl(\"/library/webjars/jquery-ui/1.12.1/jquery-ui.min.js\"));\r\n    response.render(CssHeaderItem.forUrl(\"/library/webjars/jquery-ui/1.12.1/jquery-ui.css\"));\r\n    response.render(JavaScriptHeaderItem.forUrl(\"javascript/jquery.asmselect.js\"));\r\n    response.render(CssHeaderItem.forUrl(\"css/jquery.asmselect.css\"));\r\n    response.render(JavaScriptHeaderItem.forUrl(\"/library/js/lang-datepicker/lang-datepicker.js\"));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementCompletable.switchCase",
	"Comment": "return a particular one of several possible completables based on a caseselector, or a default completable if the case selector does not map toa particular one.",
	"Method": "Completable switchCase(Callable<? extends K> caseSelector,Map<? super K, ? extends CompletableSource> mapOfCases,CompletableSource defaultCase){\r\n    ObjectHelper.requireNonNull(caseSelector, \"caseSelector is null\");\r\n    ObjectHelper.requireNonNull(mapOfCases, \"mapOfCases is null\");\r\n    ObjectHelper.requireNonNull(defaultCase, \"defaultCase is null\");\r\n    return RxJavaPlugins.onAssembly(new CompletableSwitchCase<K>(caseSelector, mapOfCases, defaultCase));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.JoinObservable.when",
	"Comment": "joins together the results from nine patterns via their plans.",
	"Method": "JoinObservable<R> when(Iterable<? extends Plan<R>> plans,JoinObservable<R> when,Plan<R> plans,JoinObservable<R> when,Plan<R> p1,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,Plan<R> p3,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6,Plan<R> p7,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6,Plan<R> p7,Plan<R> p8,JoinObservable<R> when,Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6,Plan<R> p7,Plan<R> p8,Plan<R> p9){\r\n    return from(JoinPatterns.when(p1, p2, p3, p4, p5, p6, p7, p8, p9));\r\n}"
}, {
	"Path": "restx.specs.RestxSpecRecorder.record",
	"Comment": "start recording a request and response.make sure to use the recording request and response provided by the returned recorder in followingrequest handling.",
	"Method": "RestxSpecTape record(RestxRequest restxRequest,RestxResponse restxResponse,Optional<String> recordPath,Optional<String> recordTitle){\r\n    return new RestxSpecTape(restxRequest, restxResponse, recorders, sessionFilter, storageSettings).doRecord(recordPath, recordTitle);\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sync.setId",
	"Comment": "set the identifier for the item. the id must be globally unique within the feed and it mustbe identical across feeds if an item is being shared or replicated as part of multipledistinct independent feeds.",
	"Method": "void setId(String id){\r\n    this.id = id;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.unsubscribeOn",
	"Comment": "returns a solo which when cancelled, cancels this solo on thespecified scheduler.",
	"Method": "Solo<T> unsubscribeOn(Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new SoloUnsubscribeOn<T>(this, scheduler));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getForegroundForTokenType",
	"Comment": "returns the foreground color to use when painting a token.this does\tnot take into account whether the token is a hyperlink.",
	"Method": "Color getForegroundForTokenType(int type){\r\n    Color fg = syntaxScheme.getStyle(type).foreground;\r\n    return fg != null ? fg : getForeground();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.retryWhen",
	"Comment": "retry this perhaps if the publisher returned by the handler signals an itemin response to the failure throwable.",
	"Method": "Perhaps<T> retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler){\r\n    ObjectHelper.requireNonNull(handler, \"handler is null\");\r\n    return onAssembly(new PerhapsRetryWhen<T>(this, handler));\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.isAllowInline",
	"Comment": "determine whether or not the given entity is configured to allow inline html.",
	"Method": "boolean isAllowInline(ContentEntity entity){\r\n    if (entity == null)\r\n        return false;\r\n    try {\r\n        return entity.getProperties().getBooleanProperty(ResourceProperties.PROP_ALLOW_INLINE);\r\n    } catch (EntityPropertyNotDefinedException e) {\r\n        return false;\r\n    } catch (EntityPropertyTypeException e) {\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.HtmlUtil.getHexString",
	"Comment": "returns a hex string for the specified color, suitable for html.",
	"Method": "String getHexString(Color c){\r\n    if (c == null) {\r\n        return null;\r\n    }\r\n    StringBuilder sb = new StringBuilder(\"#\");\r\n    int r = c.getRed();\r\n    if (r < 16) {\r\n        sb.append('0');\r\n    }\r\n    sb.append(Integer.toHexString(r));\r\n    int g = c.getGreen();\r\n    if (g < 16) {\r\n        sb.append('0');\r\n    }\r\n    sb.append(Integer.toHexString(g));\r\n    int b = c.getBlue();\r\n    if (b < 16) {\r\n        sb.append('0');\r\n    }\r\n    sb.append(Integer.toHexString(b));\r\n    return sb.toString();\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getLockWhitelistSize",
	"Comment": "returns the lock whitelist size, that is,the number of whitelisted addresses",
	"Method": "Integer getLockWhitelistSize(){\r\n    return provider.getLockWhitelist().getSize();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.fromObservable",
	"Comment": "wrap a general observable, ignore all of its values and terminate ifthe source observable terminates.",
	"Method": "Nono fromObservable(ObservableSource<?> source){\r\n    ObjectHelper.requireNonNull(source, \"source is null\");\r\n    return onAssembly(new NonoFromObservable(source));\r\n}"
}, {
	"Path": "org.tsugi.lti2.ToolProxy.getParameterFromMessage",
	"Comment": "retrieve a parameter bundle for a message fromthe toolproxy",
	"Method": "JSONArray getParameterFromMessage(JSONObject message){\r\n    if (message == null)\r\n        return null;\r\n    JSONArray parameter = getArray(message, \"parameter\");\r\n    return parameter;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.MembershipEntityProvider.getEntities",
	"Comment": "gets the list of all memberships for the current user if no params provided, otherwise getsmemberships in a specified location or for a specified user",
	"Method": "List<EntityData> getEntities(EntityReference ref,Search search){\r\n    String currentUserId = developerHelperService.getCurrentUserId();\r\n    String userId = null;\r\n    String locationReference = null;\r\n    String roleId = null;\r\n    boolean includeSites = true;\r\n    boolean includeGroups = false;\r\n    boolean includeMemberDetails = true;\r\n    Map<String, String> siteTypes = new HashMap<String, String>();\r\n    if (search == null) {\r\n        search = new Search();\r\n    }\r\n    if (!search.isEmpty()) {\r\n        roleId = (String) search.getRestrictionValueByProperties(new String[] { \"role\", \"roleId\" });\r\n        Restriction userRes = search.getRestrictionByProperty(CollectionResolvable.SEARCH_USER_REFERENCE);\r\n        if (userRes != null) {\r\n            String userRef = userRes.getStringValue();\r\n            userId = EntityReference.getIdFromRef(userRef);\r\n        }\r\n        Restriction locRes = search.getRestrictionByProperty(CollectionResolvable.SEARCH_LOCATION_REFERENCE);\r\n        if (locRes != null) {\r\n            locationReference = locRes.getStringValue();\r\n        }\r\n        Restriction incSites = search.getRestrictionByProperty(\"includeSites\");\r\n        if (incSites != null) {\r\n            includeSites = incSites.getBooleanValue();\r\n        }\r\n        Restriction incGroups = search.getRestrictionByProperty(\"includeGroups\");\r\n        if (incGroups != null) {\r\n            includeGroups = incGroups.getBooleanValue();\r\n        }\r\n        Restriction incMemberDetails = search.getRestrictionByProperty(\"includeMemberDetails\");\r\n        if (incMemberDetails != null) {\r\n            includeMemberDetails = incMemberDetails.getBooleanValue();\r\n        }\r\n    }\r\n    if (locationReference == null && userId == null) {\r\n        if (currentUserId != null) {\r\n            userId = currentUserId;\r\n        }\r\n    }\r\n    if (locationReference == null && userId == null) {\r\n        throw new IllegalArgumentException(\"There must be a current user logged in \" + \"OR you must provide a search with the following restrictions (getting all is not supported): \" + \"siteId, locationReference, groupId AND (optionally) roleId OR userReference, userId, user\");\r\n    }\r\n    List<EntityMember> members = new ArrayList<EntityMember>();\r\n    boolean findByLocation = false;\r\n    if (locationReference != null) {\r\n        findByLocation = true;\r\n        members = getMembers(locationReference);\r\n    } else {\r\n        if (!includeGroups && !includeSites) {\r\n            throw new IllegalArgumentException(\"includesSites and includesGroups cannot both be false\");\r\n        }\r\n        userId = userEntityProvider.findAndCheckUserId(userId, null);\r\n        if (userId == null) {\r\n            throw new IllegalArgumentException(\"unable to find user with id (\" + userId + \")\");\r\n        }\r\n        List<Site> allUserSites = siteService.getUserSites(false, userId);\r\n        List<Site> sites = new ArrayList();\r\n        boolean userCurrent = userId.equals(currentUserId);\r\n        if (!userCurrent) {\r\n            for (Site site : allUserSites) {\r\n                if (siteService.allowViewRoster(site.getId())) {\r\n                    sites.add(site);\r\n                }\r\n            }\r\n        } else {\r\n            sites = allUserSites;\r\n        }\r\n        if (includeMemberDetails) {\r\n            for (Site site : sites) {\r\n                Member sm = site.getMember(userId);\r\n                if (sm != null) {\r\n                    if (includeSites) {\r\n                        EntityMember em = new EntityMember(sm, site.getReference(), null);\r\n                        members.add(em);\r\n                        siteTypes.put(em.getId(), site.getType());\r\n                    }\r\n                    if (includeGroups) {\r\n                        Collection<Group> groups = site.getGroups();\r\n                        for (Group group : groups) {\r\n                            Member gm = group.getMember(userId);\r\n                            if (gm != null) {\r\n                                members.add(new EntityMember(gm, group.getReference(), null));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            Map<String, String> userRoles = authzGroupService.getUserRoles(userId, null);\r\n            for (Site site : sites) {\r\n                EntityMember em = new EntityMember(userId, site.getReference(), userRoles.get(site.getReference()), true, null);\r\n                members.add(em);\r\n            }\r\n        }\r\n    }\r\n    ArrayList<EntityMember> sortedMembers = new ArrayList<EntityMember>();\r\n    int count = 0;\r\n    for (EntityMember em : members) {\r\n        if (count < search.getStart()) {\r\n            continue;\r\n        } else if (search.getLimit() > 0 && count > search.getLimit()) {\r\n            break;\r\n        } else {\r\n            if (roleId != null) {\r\n                if (!roleId.equals(em.getMemberRole())) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (findByLocation) {\r\n                if (userId != null) {\r\n                    if (!userId.equals(em.getUserId())) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n            sortedMembers.add(em);\r\n        }\r\n        count++;\r\n    }\r\n    Comparator<EntityMember> memberComparator = new EntityMember.MemberSortName();\r\n    if (search.getOrders().length > 0) {\r\n        Order order = search.getOrders()[0];\r\n        if (\"email\".equals(order.getProperty())) {\r\n            memberComparator = new EntityMember.MemberEmail();\r\n        } else if (\"displayName\".equals(order.getProperty())) {\r\n            memberComparator = new EntityMember.MemberDisplayName();\r\n        } else if (\"lastLogin\".equals(order.getProperty())) {\r\n            memberComparator = new EntityMember.MemberLastLogin();\r\n        }\r\n    }\r\n    Collections.sort(sortedMembers, memberComparator);\r\n    ArrayList<EntityData> l = new ArrayList<EntityData>();\r\n    for (EntityMember em : sortedMembers) {\r\n        Map<String, Object> props = new HashMap<String, Object>();\r\n        String siteType = siteTypes.get(em.getId());\r\n        props.put(\"siteType\", siteType);\r\n        EntityData ed = new EntityData(new EntityReference(PREFIX, em.getId()), null, em, props);\r\n        l.add(ed);\r\n    }\r\n    return l;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.mergeWith",
	"Comment": "merges this perhaps with another publisher and emits all theirvalues.",
	"Method": "Flowable<T> mergeWith(Publisher<? extends T> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return Flowable.merge(this, other);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.andThen",
	"Comment": "when this nono completes, it is continued by the events ofthe other publisher.",
	"Method": "Flowable<T> andThen(Publisher<? extends T> other,Nono andThen,Nono other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return onAssembly(new NonoAndThen(this, other));\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.io.RSS20YahooParser.getRSSNamespace",
	"Comment": "returns the namespace used by rss elements in document of the rss 1.0",
	"Method": "Namespace getRSSNamespace(){\r\n    return Namespace.getNamespace(RSS_URI);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.getOnAssemblyHandler",
	"Comment": "returns the current onassembly handler function or null if not set.",
	"Method": "Function<Nono, Nono> getOnAssemblyHandler(){\r\n    return onAssemblyHandler;\r\n}"
}, {
	"Path": "com.rometools.modules.base.types.PriceTypeEnumeration.findByValue",
	"Comment": "returns a pricetypeenumeration based on the string value or null.",
	"Method": "PriceTypeEnumeration findByValue(String value){\r\n    if (value.equalsIgnoreCase(\"negotiable\")) {\r\n        return PriceTypeEnumeration.NEGOTIABLE;\r\n    } else {\r\n        return PriceTypeEnumeration.STARTING;\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.fromPublisher",
	"Comment": "wraps a publisher into a solo and signals its only value,nosuchelementexception if empty or indexoutofboundsexception if it hasmore than one element.",
	"Method": "Solo<T> fromPublisher(Publisher<T> source){\r\n    if (source instanceof Solo) {\r\n        return (Solo<T>) source;\r\n    }\r\n    ObjectHelper.requireNonNull(source, \"source is null\");\r\n    return onAssembly(new SoloFromPublisher<T>(source));\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.ByteUtils.lastIndexOf",
	"Comment": "returns the index in the source array where the last occurrence\tof the specified byte pattern is found",
	"Method": "int lastIndexOf(byte[] source,String matchString,int lastIndexOf,byte[] source,byte[] match){\r\n    if (source.length < match.length) {\r\n        return -1;\r\n    }\r\n    for (int i = (source.length - match.length); i >= 0; i--) {\r\n        if (startsWith(source, i, match)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.concatWith",
	"Comment": "runs this perhaps and emits its value followed by runningthe other publisher and emitting its values.",
	"Method": "Flowable<T> concatWith(Publisher<? extends T> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return Flowable.concat(this, other);\r\n}"
}, {
	"Path": "com.rometools.rome.io.SyndFeedOutput.outputW3CDom",
	"Comment": "creates a w3c dom document for the given syndfeedimpl.this method does not use the feed encoding property.",
	"Method": "org.w3c.dom.Document outputW3CDom(SyndFeed feed){\r\n    return feedOutput.outputW3CDom(feed.createWireFeed());\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.openurl.OpenURLServiceImplTest.testSamplePrimoJournalCorrect",
	"Comment": "we had an issue with this one where both the title and sourcetitle ended up with being the the same.",
	"Method": "void testSamplePrimoJournalCorrect(){\r\n    HttpServletRequest req = createRequest(SamplePrimoOpenURLs.CORRECT_JOURNAL);\r\n    ContextObject co = service.parse(req);\r\n    ContextObjectEntity entity = co.getEntity(Entity.REFERENT);\r\n    Assert.assertEquals(\"Theory and practice of logic programming\", entity.getValue(\"jtitle\"));\r\n    Citation citation = service.convert(co);\r\n    Assert.assertEquals(\"Theory and practice of logic programming\", citation.getCitationProperty(\"title\", false));\r\n    Assert.assertEquals(\"\", citation.getCitationProperty(\"sourceTitle\", false));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.onErrorResumeNext",
	"Comment": "if the upstream signals an error, apply the given function to thatthrowable error and resume with the returned perhaps.",
	"Method": "Perhaps<T> onErrorResumeNext(Function<? super Throwable, ? extends Perhaps<? extends T>> fallbackSupplier){\r\n    ObjectHelper.requireNonNull(fallbackSupplier, \"fallbackSupplier is null\");\r\n    return onAssembly(new PerhapsOnErrorResumeNext<T>(this, fallbackSupplier));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HtaccessTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.util.ObservingCourier.justDelivered",
	"Comment": "accept notification that the portal element has just been delivered. if there are pending requests to deliver, they can be cleared.",
	"Method": "void justDelivered(){\r\n    m_courierService.clear(getDeliveryId(), getElementId());\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ConfigurableCaret.deinstall",
	"Comment": "called when the ui is being removed from the\tinterface of a jtextcomponent.this is used to\tunregister any listeners that were attached.",
	"Method": "void deinstall(JTextComponent c){\r\n    if (!(c instanceof RTextArea)) {\r\n        throw new IllegalArgumentException(\"c must be instance of RTextArea\");\r\n    }\r\n    super.deinstall(c);\r\n    c.setNavigationFilter(null);\r\n}"
}, {
	"Path": "com.rometools.utils.Strings.trimToNull",
	"Comment": "removes the whitespace at the beginning and end of a string. when the string only containswhitespace, it returns null.",
	"Method": "String trimToNull(String s){\r\n    final String trimmed = trim(s);\r\n    if (trimmed == null || trimmed.isEmpty()) {\r\n        return null;\r\n    } else {\r\n        return trimmed;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.parser.DefaultParseResult.setParseTime",
	"Comment": "sets the amount of time it took for this parser to parse the document.",
	"Method": "void setParseTime(long time){\r\n    parseTime = time;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.SASTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.common.Workspace.workspaceToElement",
	"Comment": "serialize an atomservice.defaultworkspace object into an xml element",
	"Method": "Element workspaceToElement(){\r\n    final Workspace space = this;\r\n    final Element element = new Element(\"workspace\", AtomService.ATOM_PROTOCOL);\r\n    final Element titleElem = new Element(\"title\", AtomService.ATOM_FORMAT);\r\n    titleElem.setText(space.getTitle());\r\n    if (space.getTitleType() != null && !space.getTitleType().equals(\"TEXT\")) {\r\n        titleElem.setAttribute(\"type\", space.getTitleType(), AtomService.ATOM_FORMAT);\r\n    }\r\n    element.addContent(titleElem);\r\n    for (final Collection col : space.getCollections()) {\r\n        element.addContent(col.collectionToElement());\r\n    }\r\n    return element;\r\n}"
}, {
	"Path": "org.sakaiproject.test.section.SectionAwarenessImplTest.tearDown",
	"Comment": "remove the newly created objects, so we can run more tests with a clean slate.",
	"Method": "void tearDown(){\r\n    siteService.removeSite(site);\r\n    UserEdit user1 = userDirService.editUser(\"test.user.a\");\r\n    userDirService.removeUser(user1);\r\n    UserEdit user2 = userDirService.editUser(\"test.user.b\");\r\n    userDirService.removeUser(user2);\r\n    sessionManager.getCurrentSession().invalidate();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.WrappedSyntaxView.getChildAllocationImpl",
	"Comment": "fetches the allocation for the given child view to render into.\toverridden to account for lines hidden by collapsed folded regions.",
	"Method": "Shape getChildAllocationImpl(int line,Shape a){\r\n    Rectangle alloc = getInsideAllocation(a);\r\n    host = (RSyntaxTextArea) getContainer();\r\n    FoldManager fm = host.getFoldManager();\r\n    int y = alloc.y;\r\n    for (int i = 0; i < line; i++) {\r\n        y += getSpan(Y_AXIS, i);\r\n        Fold fold = fm.getFoldForLine(i);\r\n        if (fold != null && fold.isCollapsed()) {\r\n            i += fold.getCollapsedLineCount();\r\n        }\r\n    }\r\n    childAllocation2(line, y, alloc);\r\n    return alloc;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.setEncoding",
	"Comment": "sets the charset encoding of a the feed. this is not set by rome parsers.",
	"Method": "void setEncoding(String encoding){\r\n    this.encoding = encoding;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.EntityView.preloadParseTemplates",
	"Comment": "special efficiency method to reduce reloading of custom templates,do not use this unless you wrote it or really know what you are doing",
	"Method": "void preloadParseTemplates(List<PreProcessedTemplate> preprocessedTemplates){\r\n    parseTemplates = new ArrayList<Template>();\r\n    anazlyzedTemplates = new ArrayList<PreProcessedTemplate>();\r\n    if (preprocessedTemplates == null || preprocessedTemplates.isEmpty()) {\r\n        parseTemplates.addAll(TemplateParseUtil.defaultTemplates);\r\n        anazlyzedTemplates = new ArrayList<PreProcessedTemplate>(TemplateParseUtil.defaultPreprocessedTemplates);\r\n    } else {\r\n        for (PreProcessedTemplate preProcessedTemplate : preprocessedTemplates) {\r\n            anazlyzedTemplates.add(preProcessedTemplate);\r\n            parseTemplates.add(new Template(preProcessedTemplate.templateKey, preProcessedTemplate.template));\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconRowHeader.toggleBookmark",
	"Comment": "programatically toggles whether there is a bookmark for the specified\tline.if bookmarking is not enabled, this method does nothing.",
	"Method": "boolean toggleBookmark(int line){\r\n    if (!isBookmarkingEnabled() || getBookmarkIcon() == null) {\r\n        return false;\r\n    }\r\n    GutterIconInfo[] icons = getTrackingIcons(line);\r\n    if (icons.length == 0) {\r\n        int offs = textArea.getLineStartOffset(line);\r\n        addOffsetTrackingIcon(offs, bookmarkIcon);\r\n        return true;\r\n    }\r\n    boolean found = false;\r\n    for (int i = 0; i < icons.length; i++) {\r\n        if (icons[i].getIcon() == bookmarkIcon) {\r\n            removeTrackingIcon(icons[i]);\r\n            found = true;\r\n        }\r\n    }\r\n    if (!found) {\r\n        int offs = textArea.getLineStartOffset(line);\r\n        addOffsetTrackingIcon(offs, bookmarkIcon);\r\n    }\r\n    return !found;\r\n}"
}, {
	"Path": "restx.server.WebServers.getServerById",
	"Comment": "returns a currently registered server by id.servers are registered once startup, and unregistered when stopped.",
	"Method": "Optional<WebServer> getServerById(String serverId){\r\n    return Optional.fromNullable(servers.get(serverId));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.subscribe",
	"Comment": "subscribes to this solo and calls the appropriate callback for the resulting signal.",
	"Method": "void subscribe(Subscriber<? super T> s,Disposable subscribe,Disposable subscribe,Consumer<? super T> onNext,Disposable subscribe,Consumer<? super T> onNext,Consumer<? super Throwable> onError,Disposable subscribe,Consumer<? super T> onNext,Consumer<? super Throwable> onError,Action onComplete){\r\n    LambdaSubscriber<T> s = new LambdaSubscriber<T>(onNext, onError, onComplete, Functions.REQUEST_MAX);\r\n    subscribe(s);\r\n    return s;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientMediaEntry.getMediaLinkURI",
	"Comment": "get media link uri for editing the media resource associated with this entry via http put ordelete.",
	"Method": "String getMediaLinkURI(){\r\n    for (int i = 0; i < getOtherLinks().size(); i++) {\r\n        final Link link = getOtherLinks().get(i);\r\n        if (link.getRel() != null && link.getRel().equals(\"edit-media\")) {\r\n            return link.getHrefResolved();\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getPublisher",
	"Comment": "gets the dublincore module title. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getPublisher(){\r\n    return Lists.firstEntry(publisher);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.WrappedSyntaxView.nextTabStop",
	"Comment": "returns the next tab stop position after a given reference position.\tthis implementation does not support things like centering so it\tignores the taboffset argument.",
	"Method": "float nextTabStop(float x,int tabOffset){\r\n    if (tabSize == 0) {\r\n        return x;\r\n    }\r\n    int ntabs = ((int) x - tabBase) / tabSize;\r\n    return tabBase + ((ntabs + 1f) * tabSize);\r\n}"
}, {
	"Path": "org.sakaiproject.dav.DavServlet.generateLockDiscovery",
	"Comment": "print the lock discovery information associated with a path.",
	"Method": "boolean generateLockDiscovery(String path,XMLWriter generatedXML){\r\n    LockInfo resourceLock = (LockInfo) resourceLocks.get(path);\r\n    Enumeration<LockInfo> collectionLocksList = collectionLocks.elements();\r\n    boolean wroteStart = false;\r\n    if (resourceLock != null) {\r\n        wroteStart = true;\r\n        generatedXML.writeElement(\"D\", \"lockdiscovery\", XMLWriter.OPENING);\r\n        resourceLock.toXML(generatedXML);\r\n    }\r\n    while (collectionLocksList.hasMoreElements()) {\r\n        LockInfo currentLock = (LockInfo) collectionLocksList.nextElement();\r\n        if (path.startsWith(currentLock.path)) {\r\n            if (!wroteStart) {\r\n                wroteStart = true;\r\n                generatedXML.writeElement(\"D\", \"lockdiscovery\", XMLWriter.OPENING);\r\n            }\r\n            currentLock.toXML(generatedXML);\r\n        }\r\n    }\r\n    if (wroteStart) {\r\n        generatedXML.writeElement(\"D\", \"lockdiscovery\", XMLWriter.CLOSING);\r\n    } else {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HTMLTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "com.rometools.opml.feed.opml.Outline.getUrl",
	"Comment": "a convenience method to return the value of the url attribute.",
	"Method": "String getUrl(){\r\n    return getAttributeValue(\"url\");\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CSSTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.string.StringObservable.characters",
	"Comment": "signals each character of the given string charsequence as integers.",
	"Method": "Observable<Integer> characters(CharSequence string){\r\n    return RxJavaPlugins.onAssembly(new ObservableCharSequence(string));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.LineNumberList.removeNotify",
	"Comment": "called when this component is removed from the view hierarchy.",
	"Method": "void removeNotify(){\r\n    super.removeNotify();\r\n    if (textArea != null) {\r\n        l.uninstall(textArea);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.mergeArray",
	"Comment": "merge the values in arbitrary order from a sequence of solo sources.",
	"Method": "Flowable<T> mergeArray(Solo<? extends T> sources,Flowable<T> mergeArray,int maxConcurrency,Solo<? extends T> sources){\r\n    return Flowable.mergeArray(maxConcurrency, 1, sources);\r\n}"
}, {
	"Path": "com.rometools.certiorem.hub.notify.standard.AbstractNotifier.notifySubscribers",
	"Comment": "this method will serialize the synd feed and build notifications for the implementation classto handle.",
	"Method": "void notifySubscribers(List<? extends Subscriber> subscribers,SyndFeed value,SubscriptionSummaryCallback callback){\r\n    String mimeType = null;\r\n    if (value.getFeedType().startsWith(\"rss\")) {\r\n        mimeType = \"application/rss+xml\";\r\n    } else {\r\n        mimeType = \"application/atom+xml\";\r\n    }\r\n    final SyndFeedOutput output = new SyndFeedOutput();\r\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    try {\r\n        output.output(value, new OutputStreamWriter(baos));\r\n        baos.close();\r\n    } catch (final IOException ex) {\r\n        LOG.error(\"Unable to output the feed\", ex);\r\n        throw new RuntimeException(\"Unable to output the feed.\", ex);\r\n    } catch (final FeedException ex) {\r\n        LOG.error(\"Unable to output the feed\", ex);\r\n        throw new RuntimeException(\"Unable to output the feed.\", ex);\r\n    }\r\n    final byte[] payload = baos.toByteArray();\r\n    for (final Subscriber s : subscribers) {\r\n        final Notification not = new Notification();\r\n        not.callback = callback;\r\n        not.lastRun = 0;\r\n        not.mimeType = mimeType;\r\n        not.payload = payload;\r\n        not.retryCount = 0;\r\n        not.subscriber = s;\r\n        enqueueNotification(not);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.mergeDelayError",
	"Comment": "runs the maximum number of nono sources emitted by the publisherat once and terminates when all source nono terminate,delaying errors in the process.",
	"Method": "Nono mergeDelayError(Iterable<? extends Nono> sources,Nono mergeDelayError,Iterable<? extends Nono> sources,int maxConcurrency,Nono mergeDelayError,Publisher<? extends Nono> sources,Nono mergeDelayError,Publisher<? extends Nono> sources,int maxConcurrency){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.verifyPositive(maxConcurrency, \"maxConcurrency\");\r\n    return onAssembly(new NonoMerge(sources, true, maxConcurrency));\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.BasicRightsAssignment.getString",
	"Comment": "access a string from the resource bundle identified by a key.",
	"Method": "String getString(String key,String getString,String category,String item){\r\n    return getString(category + \".\" + item);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.Camera2Base.enableAudio",
	"Comment": "enable a muted microphone, can be called before, while and after stream.",
	"Method": "void enableAudio(){\r\n    microphoneManager.unMute();\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.updateObservation",
	"Comment": "setup our observer to be watching for change events for the collection",
	"Method": "void updateObservation(SessionState state,String peid){\r\n    log.debug(\"{}.updateObservation()\", this);\r\n}"
}, {
	"Path": "org.sakaiproject.basiclti.util.SakaiBLTIUtil.getToolConsumerInfo",
	"Comment": "look through a series of secrets from the properties based on the launchurl",
	"Method": "String getToolConsumerInfo(String launchUrl,String data){\r\n    String default_secret = ServerConfigurationService.getString(\"basiclti.consumer_instance_\" + data, null);\r\n    log.debug(\"launchUrl = {}\", launchUrl);\r\n    URL url;\r\n    try {\r\n        url = new URL(launchUrl);\r\n    } catch (MalformedURLException e) {\r\n        url = null;\r\n    }\r\n    if (url == null) {\r\n        return default_secret;\r\n    }\r\n    String hostName = url.getHost();\r\n    log.debug(\"host = {}\", hostName);\r\n    if (hostName == null || hostName.length() < 1) {\r\n        return default_secret;\r\n    }\r\n    String org_info = ServerConfigurationService.getString(\"basiclti.consumer_instance_\" + data + \".\" + hostName, null);\r\n    if (org_info != null) {\r\n        return org_info;\r\n    }\r\n    for (int i = 0; i < hostName.length(); i++) {\r\n        if (hostName.charAt(i) != '.') {\r\n            continue;\r\n        }\r\n        if (i > hostName.length() - 2) {\r\n            continue;\r\n        }\r\n        String hostPart = hostName.substring(i + 1);\r\n        String propName = \"basiclti.consumer_instance_\" + data + \".\" + hostPart;\r\n        org_info = ServerConfigurationService.getString(propName, null);\r\n        if (org_info != null) {\r\n            return org_info;\r\n        }\r\n    }\r\n    return default_secret;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.sru.ss360search.ResultUtils.normalize",
	"Comment": "normalize one 360 search result data item.essentially, just dispatchthe proper normalization method for this result, based on the dataelement name and origin database",
	"Method": "String normalize(String resultData,String partDataName,String database){\r\n    String result = resultData.trim();\r\n    log.debug(\"normalize() called with \" + result + \" -- \" + partDataName + \" -- \" + database);\r\n    if ((partDataName == null) || (database == null)) {\r\n        return result;\r\n    }\r\n    if (ANTHRO_PLUS.equals(database)) {\r\n        if (\"issue\".equals(partDataName)) {\r\n            return normalizeAnthroPlusIssue(result);\r\n        }\r\n        if (\"title\".equals(partDataName)) {\r\n            return normalizeAnthroPlusTitle(result);\r\n        }\r\n        return result;\r\n    }\r\n    if (JSTOR.equals(database)) {\r\n        if (\"pages\".equals(partDataName)) {\r\n            return normalizeJstorPageRange(result);\r\n        }\r\n        if (\"spage\".equals(partDataName)) {\r\n            return normalizeJstorStartPage(result);\r\n        }\r\n        return result;\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.SwiftFileSystemHandler.setDeleteEmptyContainers",
	"Comment": "whether to delete empty containers after a resource delete and there is no more resources in the container.the default is false.",
	"Method": "void setDeleteEmptyContainers(boolean deleteEmptyContainers){\r\n    this.deleteEmptyContainers = deleteEmptyContainers;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.WrappedSyntaxView.setSegment",
	"Comment": "makes a segment point to the text in our\tdocument between the given positions.note that the positions must be\tvalid positions in the document.",
	"Method": "void setSegment(int p0,int p1,Document document,Segment seg){\r\n    try {\r\n        document.getText(p0, p1 - p0, seg);\r\n    } catch (BadLocationException ble) {\r\n        ble.printStackTrace();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.SQLTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.logic.ProjectLogicImpl.getCachedNode",
	"Comment": "checks nodecache for node with given id.if not found,\tlooks up the node in the db and saves it in the cache",
	"Method": "HierarchyNodeSerialized getCachedNode(String id){\r\n    Object el = nodeCache.get(id);\r\n    HierarchyNodeSerialized node = null;\r\n    if (el == null) {\r\n        node = getNode(id);\r\n        try {\r\n            nodeCache.put(id, node);\r\n        } catch (Exception e) {\r\n            log.error(\"getCachedNode: \" + id, e);\r\n        }\r\n    } else if (el instanceof HierarchyNodeSerialized) {\r\n        node = (HierarchyNodeSerialized) el;\r\n    }\r\n    return node;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.focusabletip.SizeGrip.possiblyFixCursor",
	"Comment": "ensures that the cursor for this component is appropriate for the\torientation.",
	"Method": "void possiblyFixCursor(boolean ltr){\r\n    int cursor = Cursor.NE_RESIZE_CURSOR;\r\n    if (ltr) {\r\n        cursor = Cursor.NW_RESIZE_CURSOR;\r\n    }\r\n    if (cursor != getCursor().getType()) {\r\n        setCursor(Cursor.getPredefinedCursor(cursor));\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.doFinally",
	"Comment": "executes the callback exactly if the upstream terminates orthe downstream cancels the sequence.",
	"Method": "Solo<T> doFinally(Action onFinally){\r\n    ObjectHelper.requireNonNull(onFinally, \"onFinally is null\");\r\n    return onAssembly(new SoloDoFinally<T>(this, onFinally));\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.dumpTimeRange",
	"Comment": "debugging routine to get a string for a timerange. this should probably be in the timerange class.",
	"Method": "String dumpTimeRange(TimeRange timeRange){\r\n    String returnString = \"\";\r\n    if (timeRange != null) {\r\n        returnString = timeRange.firstTime().toStringLocalFull() + \" - \" + timeRange.lastTime().toStringLocalFull();\r\n    }\r\n    return returnString;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.setAccessRoles",
	"Comment": "sets the access roles on the entity when saving the listitem.",
	"Method": "void setAccessRoles(GroupAwareEdit entityEdit){\r\n    Set<String> rolesToSave = new LinkedHashSet<String>(roleIds);\r\n    rolesToSave.retainAll(availableRoleIds());\r\n    Set<String> currentRoles = entityEdit.getRoleAccessIds();\r\n    Set<String> rolesToAdd = new LinkedHashSet<String>(rolesToSave);\r\n    rolesToAdd.removeAll(currentRoles);\r\n    rolesToAdd.removeAll(inheritedRoleIds);\r\n    for (String role : rolesToAdd) {\r\n        entityEdit.addRoleAccess(role);\r\n    }\r\n    Set<String> rolesToRemove = new LinkedHashSet<String>(currentRoles);\r\n    rolesToRemove.removeAll(rolesToSave);\r\n    rolesToRemove.removeAll(inheritedRoleIds);\r\n    for (String role : rolesToRemove) {\r\n        entityEdit.removeRoleAccess(role);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.subscribeOn",
	"Comment": "returns a solo that subscribes to this solo on the specified schedulerand makes sure downstream requests are forwarded there as well.",
	"Method": "Solo<T> subscribeOn(Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new SoloSubscribeOn<T>(this, scheduler));\r\n}"
}, {
	"Path": "org.ethereum.rpc.HttpUtils.getMimeType",
	"Comment": "this function is strongly based on the function from netty 4.1, since we have an older version from it and do not need the overhead of checking the rest of the implementation for security reasons.",
	"Method": "String getMimeType(String contentTypeValue){\r\n    if (contentTypeValue == null) {\r\n        return null;\r\n    }\r\n    int indexOfSemicolon = contentTypeValue.indexOf(';');\r\n    if (indexOfSemicolon != -1) {\r\n        return contentTypeValue.substring(0, indexOfSemicolon);\r\n    } else {\r\n        return contentTypeValue.length() > 0 ? contentTypeValue : null;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextScrollPane.getFirstRTextAreaDescendant",
	"Comment": "returns the first descendant of a component that is an\trtextarea.this is primarily here to support\tjavax.swing.jlayers that wrap rtextareas.",
	"Method": "RTextArea getFirstRTextAreaDescendant(Component comp){\r\n    Stack<Component> stack = new Stack<Component>();\r\n    stack.add(comp);\r\n    while (!stack.isEmpty()) {\r\n        Component current = stack.pop();\r\n        if (current instanceof RTextArea) {\r\n            return (RTextArea) current;\r\n        }\r\n        if (current instanceof Container) {\r\n            Container container = (Container) current;\r\n            stack.addAll(Arrays.asList(container.getComponents()));\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.toFuture",
	"Comment": "converts this nono into a future and signals its singlevalue.",
	"Method": "Future<Void> toFuture(){\r\n    FuturePerhapsSubscriber<Void> fs = new FuturePerhapsSubscriber<Void>();\r\n    subscribe(fs);\r\n    return fs;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern8.and",
	"Comment": "creates a pattern that matches when all eight observable sequences have an available element.",
	"Method": "Pattern9<T1, T2, T3, T4, T5, T6, T7, T8, T9> and(Observable<T9> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Pattern9<T1, T2, T3, T4, T5, T6, T7, T8, T9>(o1, o2, o3, o4, o5, o6, o7, o8, other);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.Fold.compareTo",
	"Comment": "two folds are considered equal if they start at the same offset.",
	"Method": "int compareTo(Fold otherFold){\r\n    int result = -1;\r\n    if (otherFold != null) {\r\n        result = startOffs.getOffset() - otherFold.startOffs.getOffset();\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.RSS10Parser.parseItem",
	"Comment": "parses an item element of an rss document looking for item information.it first invokes super.parseitem and then parses and injects the description property ifpresent.",
	"Method": "Item parseItem(Element rssRoot,Element eItem,Locale locale){\r\n    final Item item = super.parseItem(rssRoot, eItem, locale);\r\n    final Element description = eItem.getChild(\"description\", getRSSNamespace());\r\n    if (description != null) {\r\n        item.setDescription(parseItemDescription(rssRoot, description));\r\n    }\r\n    final Element encoded = eItem.getChild(\"encoded\", getContentNamespace());\r\n    if (encoded != null) {\r\n        final Content content = new Content();\r\n        content.setType(Content.HTML);\r\n        content.setValue(encoded.getText());\r\n        item.setContent(content);\r\n    }\r\n    final String about = eItem.getAttributeValue(\"about\", getRDFNamespace());\r\n    if (about != null) {\r\n        item.setUri(about);\r\n    }\r\n    return item;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.flatMap",
	"Comment": "maps the upstream completion or error into a publisher and emitits events as a flowable.",
	"Method": "Flowable<T> flatMap(Function<? super Throwable, ? extends Publisher<? extends T>> onErrorMapper,Callable<? extends Publisher<? extends T>> onCompleteMapper){\r\n    ObjectHelper.requireNonNull(onErrorMapper, \"onErrorMapper is null\");\r\n    ObjectHelper.requireNonNull(onCompleteMapper, \"onCompleteMapper is null\");\r\n    return RxJavaPlugins.onAssembly(new NonoFlatMapSignal<T>(this, onErrorMapper, onCompleteMapper));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setSubject",
	"Comment": "sets the dcsubject element. convenience method that can be used when there is only onesubject to set.",
	"Method": "void setSubject(DCSubject subject){\r\n    this.subject = Lists.create(subject);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.hide",
	"Comment": "hides the identity of this perhaps instance, includingits subscriber.this allows preventing cerain optimizations as wellfor diagnostic purposes.",
	"Method": "Perhaps<T> hide(){\r\n    return onAssembly(new PerhapsHide<T>(this));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LispTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.CourseOfferingEntityProvider.create",
	"Comment": "create a new course offering. wraps coursemanagementadministration.createcourseoffering.",
	"Method": "void create(Object entity){\r\n    CourseOfferingData data = (CourseOfferingData) entity;\r\n    validateDates(data);\r\n    cmAdmin.createCourseOffering(data.eid, data.title, data.description, data.status, data.academicSession, data.canonicalCourse, DateUtils.stringToDate(data.startDate), DateUtils.stringToDate(data.endDate));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.doOnCancel",
	"Comment": "executes the callback if the downstream cancels the sequence.",
	"Method": "Solo<T> doOnCancel(Action onCancel){\r\n    ObjectHelper.requireNonNull(onCancel, \"onCancel is null\");\r\n    return onAssembly(new SoloDoOnLifecycle<T>(this, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, onCancel));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.SASTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = STRING;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = CHAR;\r\n            start = text.offset;\r\n            break;\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.doFinally",
	"Comment": "executes the callback exactly if the upstream terminates orthe downstream cancels the sequence.",
	"Method": "Perhaps<T> doFinally(Action onFinally){\r\n    ObjectHelper.requireNonNull(onFinally, \"onFinally is null\");\r\n    return onAssembly(new PerhapsDoFinally<T>(this, onFinally));\r\n}"
}, {
	"Path": "org.sakaiproject.archive.impl.SiteMerger.processMerge",
	"Comment": "read in an archive file and merge the entries into the specified site.",
	"Method": "void processMerge(String fileName,String siteId,StringBuilder results,Map attachmentNames,String creatorId,boolean filterSakaiService,String[] filteredSakaiService,boolean filterSakaiRoles,String[] filteredSakaiRoles){\r\n    fileName = fileName.replace('\\\\', '/');\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"merge(): processing file: \" + fileName);\r\n    Site theSite = null;\r\n    try {\r\n        theSite = m_siteService.getSite(siteId);\r\n    } catch (IdUnusedException ignore) {\r\n        log.info(\"Site not found for id:\" + siteId + \". New site will be created.\");\r\n    }\r\n    Document doc = Xml.readDocument(fileName);\r\n    if (doc == null) {\r\n        results.append(\"Error reading xml from: \" + fileName + \"\\n\");\r\n        return;\r\n    }\r\n    Element root = doc.getDocumentElement();\r\n    if (!root.getTagName().equals(\"archive\")) {\r\n        results.append(\"File: \" + fileName + \" does not contain archive xml.  Found this root tag: \" + root.getTagName() + \"\\n\");\r\n        return;\r\n    }\r\n    String fromSite = root.getAttribute(\"source\");\r\n    String system = root.getAttribute(\"system\");\r\n    NodeList children = root.getChildNodes();\r\n    final int length = children.getLength();\r\n    for (int i = 0; i < length; i++) {\r\n        Node child = children.item(i);\r\n        if (child.getNodeType() != Node.ELEMENT_NODE)\r\n            continue;\r\n        Element element = (Element) child;\r\n        if (element.getTagName().equals(SiteService.APPLICATION_ID)) {\r\n            mergeSite(siteId, fromSite, element, new HashMap(), creatorId, filterSakaiRoles, filteredSakaiRoles);\r\n        } else if (element.getTagName().equals(UserDirectoryService.APPLICATION_ID)) {\r\n            ;\r\n        } else {\r\n            if (theSite == null) {\r\n                results.append(\"Site: \" + siteId + \" not found.\\n\");\r\n                return;\r\n            }\r\n            String serviceName;\r\n            if (element.getTagName().equals(ContentHostingService.APPLICATION_ID)) {\r\n                serviceName = \"org.sakaiproject.content.api.ContentHostingService\";\r\n            } else {\r\n                serviceName = translateServiceName(element.getTagName());\r\n            }\r\n            try {\r\n                EntityProducer service = (EntityProducer) ComponentManager.get(serviceName);\r\n                if (service == null) {\r\n                    List<EntityProducer> entityProducers = m_entityManager.getEntityProducers();\r\n                    for (EntityProducer entityProducer : entityProducers) {\r\n                        if (serviceName.equals(entityProducer.getClass().getName()) || serviceName.equals(entityProducer.getLabel())) {\r\n                            service = entityProducer;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                try {\r\n                    String msg = \"\";\r\n                    if (service != null) {\r\n                        if ((system.equalsIgnoreCase(ArchiveService.FROM_SAKAI) || system.equalsIgnoreCase(ArchiveService.FROM_SAKAI_2_8))) {\r\n                            if (checkSakaiService(filterSakaiService, filteredSakaiService, serviceName)) {\r\n                                if (log.isDebugEnabled())\r\n                                    log.debug(\"Merging archive data for \" + serviceName + \" (\" + fileName + \") to site \" + siteId);\r\n                                msg = service.merge(siteId, element, fileName, fromSite, attachmentNames, new HashMap(), usersListAllowImport);\r\n                            } else {\r\n                                log.warn(\"Skipping merge archive data for \" + serviceName + \" (\" + fileName + \") to site \" + siteId + \", checked filter failed (filtersOn=\" + filterSakaiService + \", filters=\" + Arrays.toString(filteredSakaiService) + \")\");\r\n                            }\r\n                        } else {\r\n                            log.warn(\"Skipping archive data for for \" + serviceName + \" (\" + fileName + \") to site \" + siteId + \", this does not appear to be a sakai archive\");\r\n                        }\r\n                    } else {\r\n                        log.warn(\"Skipping archive data for for \" + serviceName + \" (\" + fileName + \") to site \" + siteId + \", no service (EntityProducer) could be found to deal with this data\");\r\n                    }\r\n                    results.append(msg);\r\n                } catch (Throwable t) {\r\n                    results.append(\"Error merging: \" + serviceName + \" in file: \" + fileName + \" : \" + t.toString() + \"\\n\");\r\n                    log.warn(\"Error merging: \" + serviceName + \" in file: \" + fileName + \" : \" + t.toString(), t);\r\n                }\r\n            } catch (Throwable t) {\r\n                results.append(\"Did not recognize the resource service: \" + serviceName + \" in file: \" + fileName + \"\\n\");\r\n                log.warn(\"Did not recognize the resource service: \" + serviceName + \" in file: \" + fileName, t);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.mergeDelayError",
	"Comment": "merge the values in arbitrary order from a sequence of solo sources,delaying errors till all sources terminate.",
	"Method": "Flowable<T> mergeDelayError(Iterable<? extends Solo<? extends T>> sources,Flowable<T> mergeDelayError,Iterable<? extends Solo<? extends T>> sources,int maxConcurrency,Flowable<T> mergeDelayError,Publisher<? extends Solo<? extends T>> sources,Flowable<T> mergeDelayError,Publisher<? extends Solo<? extends T>> sources,int maxConcurrency){\r\n    return Flowable.mergeDelayError(sources, maxConcurrency);\r\n}"
}, {
	"Path": "restx.factory.alternative.AlternativeTest.should_use_alternative_for_named_components",
	"Comment": "this test uses the testcomponentnamed and testcomponentnamedalternative, the alternative\t\tshould be registered under the name defined in the reference component",
	"Method": "void should_use_alternative_for_named_components(){\r\n    Factory factory = Factory.newInstance();\r\n    TestComponentNamed component = factory.getComponent(Name.of(TestComponentNamed.class, \"restx.test.component.speed\"));\r\n    assertThat(component.speed()).isEqualTo(\"slow\");\r\n    overrideComponents().set(\"restx.test.alternatives\", \"true\");\r\n    factory = Factory.newInstance();\r\n    component = factory.getComponent(Name.of(TestComponentNamed.class, \"restx.test.component.speed\"));\r\n    assertThat(component.speed()).isEqualTo(\"fast\");\r\n}"
}, {
	"Path": "com.rometools.propono.atom.common.CollectionTest.testAccepts",
	"Comment": "test of accepts method, of class com.rometools.rome.propono.atom.common.collection.",
	"Method": "void testAccepts(){\r\n    final Collection col = new Collection(\"dummy_title\", \"dummy_titletype\", \"dummy_href\");\r\n    col.setAccepts(Collections.singletonList(\"image/*\"));\r\n    assertTrue(col.accepts(\"image/gif\"));\r\n    assertTrue(col.accepts(\"image/jpg\"));\r\n    assertTrue(col.accepts(\"image/png\"));\r\n    assertFalse(col.accepts(\"test/html\"));\r\n    final List<String> accepts = new ArrayList<String>();\r\n    accepts.add(\"image/*\");\r\n    accepts.add(\"text/*\");\r\n    col.setAccepts(accepts);\r\n    assertTrue(col.accepts(\"image/gif\"));\r\n    assertTrue(col.accepts(\"image/jpg\"));\r\n    assertTrue(col.accepts(\"image/png\"));\r\n    assertTrue(col.accepts(\"text/html\"));\r\n    col.setAccepts(Collections.singletonList(\"*/*\"));\r\n    assertTrue(col.accepts(\"image/gif\"));\r\n    assertTrue(col.accepts(\"image/jpg\"));\r\n    assertTrue(col.accepts(\"image/png\"));\r\n    assertTrue(col.accepts(\"text/html\"));\r\n}"
}, {
	"Path": "net.oauth.http.HttpMessage.removeHeaders",
	"Comment": "remove all headers of the given name. the name is case insensitive.",
	"Method": "String removeHeaders(String name){\r\n    String value = null;\r\n    for (Iterator<Map.Entry<String, String>> i = headers.iterator(); i.hasNext(); ) {\r\n        Map.Entry<String, String> header = i.next();\r\n        if (equalsIgnoreCase(name, header.getKey())) {\r\n            value = header.getValue();\r\n            i.remove();\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LispTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.COMMENT_MULTILINE:\r\n            state = MLC;\r\n            start = text.offset;\r\n            break;\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = STRING;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.doAfterTerminate",
	"Comment": "executes the callback after this nono terminates and the downstreamis notified.",
	"Method": "Nono doAfterTerminate(Action onAfterTerminate){\r\n    ObjectHelper.requireNonNull(onAfterTerminate, \"onAfterTerminate is null\");\r\n    return onAssembly(new NonoDoOnLifecycle(this, Functions.emptyConsumer(), Functions.EMPTY_ACTION, onAfterTerminate, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getSyntaxScheme",
	"Comment": "returns all of the colors currently being used in syntax highlighting\tby this text component.",
	"Method": "SyntaxScheme getSyntaxScheme(){\r\n    return syntaxScheme;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.impl.FileBasedAtomHandler.isCollectionURI",
	"Comment": "return true if specified pathinfo represents uri of a collection.",
	"Method": "boolean isCollectionURI(AtomRequest areq){\r\n    LOG.debug(\"isCollectionURI\");\r\n    final String[] pathInfo = StringUtils.split(areq.getPathInfo(), \"/\");\r\n    if (pathInfo.length == 2) {\r\n        final String handle = pathInfo[0];\r\n        final String collection = pathInfo[1];\r\n        if (service.findCollectionByHandle(handle, collection) != null) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.github.faucamp.simplertmp.packets.Data.writeBody",
	"Comment": "this method is public for data to make it easy to dump its contents toanother output stream",
	"Method": "void writeBody(OutputStream out){\r\n    AmfString.writeStringTo(out, type, false);\r\n    writeVariableData(out);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.toObservable",
	"Comment": "convert this nono instance into an observable that only terminates.",
	"Method": "Observable<T> toObservable(){\r\n    return (Observable) Observable.fromPublisher(this);\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.getFunctionManager",
	"Comment": "returns the instance of the functionmanager injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "FunctionManager getFunctionManager(){\r\n    return functionManager;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.AssemblerX86TokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.AcademicSessionEntityProvider.create",
	"Comment": "create a new academic session. wraps courseadministration.createacademicsession.",
	"Method": "void create(Object entity){\r\n    AcademicSessionData data = (AcademicSessionData) entity;\r\n    validateDates(data);\r\n    cmAdmin.createAcademicSession(data.eid, data.title, data.description, DateUtils.stringToDate(data.startDate), DateUtils.stringToDate(data.endDate));\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.doRevise",
	"Comment": "action is used when the user click on the dorevise in the menu",
	"Method": "void doRevise(RunData data,Context context){\r\n    CalendarEvent calendarEventObj = null;\r\n    Calendar calendarObj = null;\r\n    CalendarActionState state = (CalendarActionState) getState(context, data, CalendarActionState.class);\r\n    String peid = ((JetspeedRunData) data).getJs_peid();\r\n    SessionState sstate = ((JetspeedRunData) data).getPortletSessionState(peid);\r\n    String calId = state.getPrimaryCalendarReference();\r\n    state.setPrevState(state.getState());\r\n    state.setState(\"goToReviseCalendar\");\r\n    state.setIsNewCalendar(false);\r\n    state.setfromAttachmentFlag(\"false\");\r\n    sstate.setAttribute(FREQUENCY_SELECT, null);\r\n    sstate.setAttribute(CalendarAction.SSTATE__RECURRING_RULE, null);\r\n    state.clearData();\r\n    try {\r\n        calendarObj = CalendarService.getCalendar(calId);\r\n        try {\r\n            String eventId = state.getCalendarEventId();\r\n            CalendarEventEdit edit = calendarObj.getEditEvent(eventId, org.sakaiproject.calendar.api.CalendarService.EVENT_MODIFY_CALENDAR);\r\n            state.setEdit(edit);\r\n            state.setPrimaryCalendarEdit(edit);\r\n            calendarEventObj = calendarObj.getEvent(eventId);\r\n            state.setAttachments(calendarEventObj.getAttachments());\r\n        } catch (IdUnusedException err) {\r\n            log.debug(\".IdUnusedException \" + err);\r\n            state.setState(\"description\");\r\n            state.setCalendarEventId(\"\", \"\");\r\n            String errorCode = rb.getString(\"java.alert.event\");\r\n            addAlert(sstate, errorCode);\r\n        } catch (PermissionException err) {\r\n            log.debug(\".PermissionException \" + err);\r\n        } catch (InUseException err) {\r\n            log.debug(\".InUseException \" + err);\r\n            state.setState(\"description\");\r\n            String errorCode = rb.getString(\"java.alert.eventbeing\");\r\n            addAlert(sstate, errorCode);\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        addAlert(sstate, rb.getString(\"java.alert.noexist\"));\r\n    } catch (PermissionException e) {\r\n        addAlert(sstate, rb.getString(\"java.alert.youcreate\"));\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.BBCodeTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.NumberParser.parseInt",
	"Comment": "parse an integer from a string. if the string is not an integer null is returned andno exception is thrown.",
	"Method": "Integer parseInt(String str){\r\n    if (null != str) {\r\n        try {\r\n            return new Integer(Integer.parseInt(str.trim()));\r\n        } catch (final Exception e) {\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.doAfterNext",
	"Comment": "executes a callback after the value is emitted to downstream.",
	"Method": "Perhaps<T> doAfterNext(Consumer<? super T> onAfterNext){\r\n    ObjectHelper.requireNonNull(onAfterNext, \"onAfterNext is null\");\r\n    return onAssembly(new PerhapsDoOnLifecycle<T>(this, Functions.emptyConsumer(), onAfterNext, Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.hide",
	"Comment": "hides the identity of this solo, including its subscription andallows preventing fusion and other optimizations for diagnosticpurposes.",
	"Method": "Solo<T> hide(){\r\n    return onAssembly(new SoloHide<T>(this));\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.submissionTypeTable",
	"Comment": "construct a hashmap using the integer as the key and submission type string as the value",
	"Method": "Map<Integer, String> submissionTypeTable(){\r\n    Map<Integer, String> submissionTypeTable = new HashMap();\r\n    submissionTypeTable.put(1, rb.getString(AssignmentConstants.ASSN_SUBMISSION_TYPE_INLINE_PROP));\r\n    submissionTypeTable.put(2, rb.getString(AssignmentConstants.ASSN_SUBMISSION_TYPE_ATTACHMENTS_ONLY_PROP));\r\n    submissionTypeTable.put(3, rb.getString(AssignmentConstants.ASSN_SUBMISSION_TYPE_INLINE_AND_ATTACHMENTS_PROP));\r\n    submissionTypeTable.put(4, rb.getString(AssignmentConstants.ASSN_SUBMISSION_TYPE_NON_ELECTRONIC_PROP));\r\n    submissionTypeTable.put(5, rb.getString(AssignmentConstants.ASSN_SUBMISSION_TYPE_SINGLE_ATTACHMENT_PROP));\r\n    return submissionTypeTable;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setFormat",
	"Comment": "sets the dublincore module format. convenience method that can be used when there is only oneformat to set.",
	"Method": "void setFormat(String format){\r\n    this.format = Lists.create(format);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CPlusPlusTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.demo.SyntaxSchemeDemo.actionPerformed",
	"Comment": "listens for the selection of a menu item and performs an action accordingly.",
	"Method": "void actionPerformed(ActionEvent e){\r\n    String command = e.getActionCommand();\r\n    if (\"ChangeProgrammatically\".equals(command)) {\r\n        changeStyleProgrammatically();\r\n    } else if (\"ChangeViaThemes\".equals(command)) {\r\n        changeStyleViaThemeXml();\r\n    }\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.net.HttpAuthenticator.getPasswordAuthentication",
	"Comment": "override the default implementation to provide the credentials requiredfor our network authentication",
	"Method": "PasswordAuthentication getPasswordAuthentication(){\r\n    Credentials credential;\r\n    int attempts;\r\n    log.debug(\"Authorization requested for \\\"\" + getRequestingPrompt() + \"\\\", scheme: \\\"\" + getRequestingScheme() + \"\\\", site: \\\"\" + getRequestingSite() + \"\\\"\");\r\n    credential = (Credentials) credentialMap.get(getRequestingPrompt());\r\n    if (credential == null) {\r\n        log.warn(\"No credentials configured\");\r\n        return null;\r\n    }\r\n    attempts = credential.getAuthorizationAttempts() + 1;\r\n    credential.setAuthorizationAttempts(attempts);\r\n    if (attempts > 1) {\r\n        if ((attempts % 3) == 0) {\r\n            credential.setAuthorizationAttempts(0);\r\n        }\r\n        log.warn(\"Authorization refused\");\r\n        return null;\r\n    }\r\n    log.warn(\"Returning credentials for authorization\");\r\n    return new PasswordAuthentication(credential.getUsername(), credential.getPassword());\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.model.impl.ChatManagerImpl.init",
	"Comment": "called on after the startup of the singleton.this sets the globallist of functions which will have permission managed by sakai",
	"Method": "void init(){\r\n    log.info(\"init()\");\r\n    try {\r\n        if (functionManager.getRegisteredFunctions(ChatFunctions.CHAT_FUNCTION_PREFIX).size() == 0) {\r\n            functionManager.registerFunction(ChatFunctions.CHAT_FUNCTION_READ);\r\n            functionManager.registerFunction(ChatFunctions.CHAT_FUNCTION_NEW);\r\n            functionManager.registerFunction(ChatFunctions.CHAT_FUNCTION_DELETE_ANY);\r\n            functionManager.registerFunction(ChatFunctions.CHAT_FUNCTION_DELETE_OWN);\r\n            functionManager.registerFunction(ChatFunctions.CHAT_FUNCTION_DELETE_CHANNEL);\r\n            functionManager.registerFunction(ChatFunctions.CHAT_FUNCTION_NEW_CHANNEL);\r\n            functionManager.registerFunction(ChatFunctions.CHAT_FUNCTION_EDIT_CHANNEL);\r\n        }\r\n        pollInterval = serverConfigurationService.getInt(\"chat.pollInterval\", 5000);\r\n        messageMap = // .recordStats()\r\n        CacheBuilder.newBuilder().expireAfterAccess(5, TimeUnit.MINUTES).build();\r\n        heartbeatMap = // .recordStats()\r\n        CacheBuilder.newBuilder().expireAfterWrite(1, TimeUnit.HOURS).build();\r\n        timezoneCache = CacheBuilder.newBuilder().maximumSize(1000).expireAfterWrite(600, TimeUnit.SECONDS).build();\r\n        try {\r\n            String channelId = serverConfigurationService.getString(\"chat.cluster.channel\", \"\");\r\n            if (StringUtils.isNotBlank(channelId)) {\r\n                URL jgroupsConfigURL = null;\r\n                File jgroupsConfig = new File(serverConfigurationService.getSakaiHomePath() + File.separator + \"jgroups-chat-config.xml\");\r\n                if (jgroupsConfig.exists()) {\r\n                    log.debug(\"Using custom jgroups config file: {}\", jgroupsConfig.getAbsolutePath());\r\n                    clusterChannel = new JChannel(jgroupsConfig);\r\n                } else if ((jgroupsConfigURL = this.getClass().getClassLoader().getResource(\"jgroups-config.xml\")) != null) {\r\n                    log.debug(\"Using default jgroups config file: {}\", jgroupsConfigURL);\r\n                    clusterChannel = new JChannel(jgroupsConfigURL);\r\n                } else {\r\n                    log.debug(\"No jgroups config file. Using jgroup defaults.\");\r\n                    clusterChannel = new JChannel();\r\n                }\r\n                log.debug(\"JGROUPS PROTOCOL: {}\", clusterChannel.getProtocolStack().printProtocolSpecAsXML());\r\n                clusterChannel.setReceiver(this);\r\n                clusterChannel.connect(channelId);\r\n                clusterChannel.setDiscardOwnMessages(true);\r\n                clustered = true;\r\n                log.info(\"Chat is connected on JGroups channel '\" + channelId + \"'\");\r\n            } else {\r\n                log.info(\"No 'chat.cluster.channel' specified in sakai.properties. JGroups will not be used and chat messages will not be replicated.\");\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"Error creating JGroups channel. Chat messages will now NOT BE KEPT IN SYNC\", e);\r\n            if (clusterChannel != null && clusterChannel.isConnected()) {\r\n                clusterChannel.close();\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(\"Error with ChatManager.init()\", e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.buildMainPanelContext",
	"Comment": "central place for dispatching the build routines based on the state name",
	"Method": "String buildMainPanelContext(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    String template = null;\r\n    context.put(\"action\", \"AssignmentAction\");\r\n    context.put(\"tlang\", rb);\r\n    context.put(\"dateFormat\", getDateFormatString());\r\n    context.put(\"cheffeedbackhelper\", this);\r\n    context.put(\"service\", assignmentService);\r\n    context.put(\"rubricsService\", rubricsService);\r\n    String contextString = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    boolean allowAddAssignment = assignmentService.allowAddAssignment(contextString);\r\n    context.put(\"allowAddAssignment\", Boolean.valueOf(allowAddAssignment));\r\n    Object allowGradeSubmission = state.getAttribute(STATE_ALLOW_GRADE_SUBMISSION);\r\n    boolean allowUpdateSite = siteService.allowUpdateSite((String) state.getAttribute(STATE_CONTEXT_STRING));\r\n    context.put(\"allowUpdateSite\", Boolean.valueOf(allowUpdateSite));\r\n    context.put(\"siteAccess\", Assignment.Access.SITE);\r\n    context.put(\"groupAccess\", Assignment.Access.GROUP);\r\n    boolean allowAllGroups = assignmentService.allowAllGroups(contextString);\r\n    context.put(\"allowAllGroups\", Boolean.valueOf(allowAllGroups));\r\n    boolean allowRecoverAssignment = assignmentService.allowRemoveAssignmentInContext(contextString);\r\n    context.put(\"allowRecoverAssignment\", allowRecoverAssignment);\r\n    Site s = null;\r\n    try {\r\n        s = siteService.getSite((String) state.getAttribute(STATE_CONTEXT_STRING));\r\n    } catch (IdUnusedException iue) {\r\n        log.warn(this + \":buildMainPanelContext: Site not found!\" + iue.getMessage());\r\n    }\r\n    context.put(\"allowReviewService\", assignmentService.allowReviewService(s));\r\n    if (assignmentService.allowReviewService(s)) {\r\n        String reviewServiceName = contentReviewService.getServiceName();\r\n        String reviewServiceTitle = rb.getFormattedMessage(\"review.title\", new Object[] { reviewServiceName });\r\n        String reviewServiceUse = rb.getFormattedMessage(\"review.use\", new Object[] { reviewServiceName });\r\n        String reviewServiceNonElectronic1 = rb.getFormattedMessage(\"review.switch.ne.1\", reviewServiceName);\r\n        String reviewServiceNonElectronic2 = rb.getFormattedMessage(\"review.switch.ne.2\", reviewServiceName);\r\n        context.put(\"reviewServiceName\", reviewServiceName);\r\n        context.put(\"reviewServiceProviderId\", contentReviewService.getProviderId());\r\n        context.put(\"turnitinProviderId\", ContentReviewConstants.TURNITIN_PROVIDER_ID);\r\n        context.put(\"turnitinOCProviderId\", ContentReviewConstants.TURNITINOC_PROVIDER_ID);\r\n        context.put(\"reviewServiceTitle\", reviewServiceTitle);\r\n        context.put(\"reviewServiceUse\", reviewServiceUse);\r\n        context.put(\"reviewIndicator\", rb.getFormattedMessage(\"review.contentReviewIndicator\", new Object[] { reviewServiceName }));\r\n        context.put(\"reviewSwitchNe1\", reviewServiceNonElectronic1);\r\n        context.put(\"reviewSwitchNe2\", reviewServiceNonElectronic2);\r\n    }\r\n    context.put(\"allowPeerAssessment\", serverConfigurationService.getBoolean(\"assignment.usePeerAssessment\", true));\r\n    if ((Boolean) serverConfigurationService.getBoolean(\"assignment.usePeerAssessment\", true)) {\r\n        context.put(\"peerAssessmentName\", rb.getFormattedMessage(\"peerAssessmentName\"));\r\n        context.put(\"peerAssessmentUse\", rb.getFormattedMessage(\"peerAssessmentUse\"));\r\n    }\r\n    context.put(\"withGrade\", state.getAttribute(WITH_GRADES));\r\n    context.put(\"gradeTypeTable\", gradeTypeTable());\r\n    context.put(\"allowSubmitByInstructor\", assignmentService.getAllowSubmitByInstructor());\r\n    context.put(\"enableViewOption\", serverConfigurationService.getBoolean(\"assignment.enableViewOption\", true));\r\n    String mode = StringUtils.defaultIfBlank((String) state.getAttribute(STATE_MODE), MODE_LIST_ASSIGNMENTS);\r\n    if (!MODE_LIST_ASSIGNMENTS.equals(mode)) {\r\n        if (state.getAttribute(STATE_ALLOW_GRADE_SUBMISSION) == null) {\r\n            state.setAttribute(STATE_ALLOW_GRADE_SUBMISSION, Boolean.FALSE);\r\n        }\r\n        context.put(\"allowGradeSubmission\", state.getAttribute(STATE_ALLOW_GRADE_SUBMISSION));\r\n    }\r\n    switch(mode) {\r\n        case MODE_LIST_ASSIGNMENTS:\r\n            template = build_list_assignments_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_STUDENT_VIEW_ASSIGNMENT:\r\n            template = build_student_view_assignment_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_STUDENT_VIEW_GROUP_ERROR:\r\n            justDelivered(state);\r\n            template = build_student_view_group_error_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_STUDENT_VIEW_SUBMISSION:\r\n            justDelivered(state);\r\n            template = build_student_view_submission_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_STUDENT_VIEW_SUBMISSION_CONFIRMATION:\r\n            context.put(\"site\", s);\r\n            template = build_student_view_submission_confirmation_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_STUDENT_PREVIEW_SUBMISSION:\r\n            template = build_student_preview_submission_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_STUDENT_VIEW_GRADE_PRIVATE:\r\n            context.put(\"privateView\", true);\r\n        case MODE_STUDENT_VIEW_GRADE:\r\n            context.put(\"site\", s);\r\n            justDelivered(state);\r\n            template = build_student_view_grade_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_INSTRUCTOR_NEW_EDIT_ASSIGNMENT:\r\n            boolean allowAddSiteAssignment = assignmentService.allowAddSiteAssignment(contextString);\r\n            context.put(\"allowAddSiteAssignment\", allowAddSiteAssignment);\r\n            justDelivered(state);\r\n            template = build_instructor_new_edit_assignment_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_INSTRUCTOR_DELETE_ASSIGNMENT:\r\n            if (state.getAttribute(DELETE_ASSIGNMENT_IDS) != null) {\r\n                justDelivered(state);\r\n                template = build_instructor_delete_assignment_context(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_GRADE_ASSIGNMENT:\r\n            if (allowGradeSubmission != null && (Boolean) allowGradeSubmission) {\r\n                template = build_instructor_grade_assignment_context(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_GRADE_SUBMISSION:\r\n            context.put(\"site\", s);\r\n            if (allowGradeSubmission != null && (Boolean) allowGradeSubmission) {\r\n                justDelivered(state);\r\n                template = build_instructor_grade_submission_context(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_PREVIEW_GRADE_SUBMISSION:\r\n            if (allowGradeSubmission != null && (Boolean) allowGradeSubmission) {\r\n                template = build_instructor_preview_grade_submission_context(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_PREVIEW_ASSIGNMENT:\r\n            template = build_instructor_preview_assignment_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_INSTRUCTOR_VIEW_ASSIGNMENT:\r\n            context.put(\"site\", s);\r\n            justDelivered(state);\r\n            template = build_instructor_view_assignment_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_INSTRUCTOR_VIEW_STUDENTS_ASSIGNMENT:\r\n            if (allowGradeSubmission != null && (Boolean) allowGradeSubmission) {\r\n                template = build_instructor_view_students_assignment_context(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_REPORT_SUBMISSIONS:\r\n            context.put(\"site\", s);\r\n            if (allowGradeSubmission != null && (Boolean) allowGradeSubmission) {\r\n                template = build_instructor_report_submissions(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_DOWNLOAD_ALL:\r\n            if (allowGradeSubmission != null && (Boolean) allowGradeSubmission) {\r\n                template = build_instructor_download_upload_all(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_UPLOAD_ALL:\r\n            if (allowGradeSubmission != null && (Boolean) allowGradeSubmission) {\r\n                template = build_instructor_download_upload_all(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_INSTRUCTOR_REORDER_ASSIGNMENT:\r\n            context.put(\"site\", s);\r\n            justDelivered(state);\r\n            template = build_instructor_reorder_assignment_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_OPTIONS:\r\n            if (allowUpdateSite) {\r\n                template = build_options_context(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_STUDENT_REVIEW_EDIT:\r\n            template = build_student_review_edit_context(portlet, context, data, state);\r\n            break;\r\n        case MODE_LIST_DELETED_ASSIGNMENTS:\r\n            if (allowRecoverAssignment) {\r\n                template = build_list_deleted_assignments_context(portlet, context, data, state);\r\n            }\r\n            break;\r\n        case MODE_STUDENT_VIEW_ASSIGNMENT_HONORPLEDGE:\r\n            template = build_student_view_assignment_honorPledge_context(portlet, context, data, state);\r\n            break;\r\n    }\r\n    if (template == null) {\r\n        state.setAttribute(STATE_MODE, MODE_LIST_ASSIGNMENTS);\r\n        template = build_list_assignments_context(portlet, context, data, state);\r\n    }\r\n    if (state.getAttribute(HAS_MULTIPLE_ASSIGNMENTS) != null) {\r\n        context.put(\"assignmentscheck\", state.getAttribute(HAS_MULTIPLE_ASSIGNMENTS));\r\n    }\r\n    context.put(RUBRIC_TOKEN, rubricsService.generateJsonWebToken(RubricsConstants.RBCS_TOOL_ASSIGNMENT));\r\n    return template;\r\n}"
}, {
	"Path": "com.rometools.modules.sle.SleUtility.sort",
	"Comment": "sorts a list of values based on a given sort field using a selection sort.",
	"Method": "List<T> sort(List<T> values,Sort sort,boolean ascending){\r\n    final SortableList<T> list = getSortableList(values);\r\n    list.sortOnProperty(sort, ascending, new SortStrategy());\r\n    return list;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.debug.multihook.MultiHandlerManager.clear",
	"Comment": "removes all handlers from this multihandlermanager.this method is threadsafe.",
	"Method": "void clear(){\r\n    handlers.clear();\r\n}"
}, {
	"Path": "com.rometools.fetcher.impl.HashMapFeedInfoCache.setInfoCache",
	"Comment": "the api of this class indicates that map must thread safe. in other words, be sure to wrap itin a synchronized map unless you know what you are doing.",
	"Method": "void setInfoCache(Map<String, SyndFeedInfo> map){\r\n    infoCache = map;\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.RSS090Parser.getRDFNamespace",
	"Comment": "returns the namespace used by rdf elements in document of the rss version the parsersupports.this implementation returns the emtpy namespace.",
	"Method": "Namespace getRDFNamespace(){\r\n    return RDF_NS;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.parser.DefaultParserNotice.equals",
	"Comment": "returns whether this parser notice is equal to another one.",
	"Method": "boolean equals(Object obj){\r\n    if (!(obj instanceof ParserNotice)) {\r\n        return false;\r\n    }\r\n    return compareTo((ParserNotice) obj) == 0;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.build_student_view_submission_confirmation_context",
	"Comment": "build the student view of showing an assignment submission confirmation",
	"Method": "String build_student_view_submission_confirmation_context(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    String contextString = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    context.put(\"context\", contextString);\r\n    String invokedByStatus = (String) state.getAttribute(INVOKE);\r\n    if (invokedByStatus != null) {\r\n        if (invokedByStatus.equalsIgnoreCase(INVOKE_BY_LINK)) {\r\n            context.put(\"linkInvoked\", Boolean.valueOf(true));\r\n            state.setAttribute(STATE_MODE, MODE_LIST_ASSIGNMENTS);\r\n        } else {\r\n            context.put(\"linkInvoked\", Boolean.valueOf(false));\r\n        }\r\n    } else {\r\n        context.put(\"linkInvoked\", Boolean.valueOf(false));\r\n    }\r\n    context.put(\"view\", MODE_LIST_ASSIGNMENTS);\r\n    User user = (User) state.getAttribute(STATE_USER);\r\n    String submitterId = (String) state.getAttribute(STATE_SUBMITTER);\r\n    User submitter = user;\r\n    if (submitterId != null) {\r\n        try {\r\n            submitter = userDirectoryService.getUser(submitterId);\r\n        } catch (UserNotDefinedException ex) {\r\n            log.warn(this + \":build_student_view_submission cannot find user with id \" + submitterId + \" \" + ex.getMessage());\r\n        }\r\n    }\r\n    context.put(\"user_name\", submitter.getDisplayName());\r\n    context.put(\"user_id\", submitter.getDisplayId());\r\n    if (StringUtils.trimToNull(user.getEmail()) != null)\r\n        context.put(\"user_email\", user.getEmail());\r\n    try {\r\n        Site site = siteService.getSite(contextString);\r\n        context.put(\"site_title\", site.getTitle());\r\n    } catch (Exception ignore) {\r\n        log.warn(this + \":buildStudentViewSubmission \" + ignore.getMessage() + \" siteId= \" + contextString);\r\n    }\r\n    String currentAssignmentReference = (String) state.getAttribute(VIEW_SUBMISSION_ASSIGNMENT_REFERENCE);\r\n    Assignment currentAssignment = getAssignment(currentAssignmentReference, \"build_student_view_submission_confirmation_context\", state);\r\n    if (currentAssignment != null) {\r\n        context.put(\"assignment\", currentAssignment);\r\n        Assignment.SubmissionType submissionType = currentAssignment.getTypeOfSubmission();\r\n        if (submissionType == Assignment.SubmissionType.ATTACHMENT_ONLY_ASSIGNMENT_SUBMISSION || submissionType == Assignment.SubmissionType.SINGLE_ATTACHMENT_SUBMISSION) {\r\n            context.put(\"attachmentSubmissionOnly\", Boolean.TRUE);\r\n        } else {\r\n            context.put(\"attachmentSubmissionOnly\", Boolean.FALSE);\r\n        }\r\n        if (submissionType == Assignment.SubmissionType.TEXT_ONLY_ASSIGNMENT_SUBMISSION) {\r\n            context.put(\"textSubmissionOnly\", Boolean.TRUE);\r\n        } else {\r\n            context.put(\"textSubmissionOnly\", Boolean.FALSE);\r\n        }\r\n        AssignmentSubmission s = getSubmission(currentAssignmentReference, submitter, \"build_student_view_submission_confirmation_context\", state);\r\n        if (s != null) {\r\n            context.put(\"submission\", s);\r\n            Map<String, Reference> attachmentReferences = new HashMap();\r\n            s.getAttachments().forEach(r -> attachmentReferences.put(r, entityManager.newReference(r)));\r\n            context.put(\"attachmentReferences\", attachmentReferences);\r\n            context.put(\"submit_text\", StringUtils.trimToNull(s.getSubmittedText()));\r\n            context.put(\"email_confirmation\", serverConfigurationService.getBoolean(\"assignment.submission.confirmation.email\", true));\r\n            if (currentAssignment.getIsGroup()) {\r\n                final Map<String, User> users = getSubmitters(s, \"build_student_view_submission_confirmation_context\").collect(Collectors.toMap(User::getId, Function.identity()));\r\n                final String submitterNames = users.values().stream().map(u -> u.getDisplayName() + \" (\" + u.getDisplayId() + \")\").collect(Collectors.joining(\", \"));\r\n                context.put(\"submitterNames\", formattedText.escapeHtml(submitterNames));\r\n            }\r\n        }\r\n    }\r\n    state.removeAttribute(STATE_SUBMITTER);\r\n    String template = (String) getContext(data).get(\"template\");\r\n    return template + TEMPLATE_STUDENT_VIEW_SUBMISSION_CONFIRMATION;\r\n}"
}, {
	"Path": "restx.factory.Factory.prepare",
	"Comment": "prepares all the autopreparable components of this factory.",
	"Method": "Factory prepare(){\r\n    for (AutoPreparable preparable : queryByClass(AutoPreparable.class).findAsComponents()) {\r\n        preparable.prepare();\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.SwiftFileSystemHandler.setInvalidCharactersRegex",
	"Comment": "the regular expression for all the characters that is not valid for container and resource names.default is null.",
	"Method": "void setInvalidCharactersRegex(String invalidCharactersRegex){\r\n    this.invalidCharactersRegex = invalidCharactersRegex;\r\n}"
}, {
	"Path": "org.tsugi.basiclti.BasicLTIUtil.getRealPath",
	"Comment": "simple utility method deal with a request that has the wrong url when behind a proxy.",
	"Method": "String getRealPath(String servletUrl,String extUrl,String getRealPath,HttpServletRequest request,String extUrl){\r\n    String URLstr = request.getRequestURL().toString();\r\n    String retval = getRealPath(URLstr, extUrl);\r\n    return retval;\r\n}"
}, {
	"Path": "co.rsk.scoring.PeerScoringManager.getBannedAddresses",
	"Comment": "returns the list of banned addresses, represented by a textual descriptionthe list includes the banned addresses and the banned blocks",
	"Method": "List<String> getBannedAddresses(){\r\n    List<String> list = new ArrayList();\r\n    list.addAll(this.addressTable.getAddressList().stream().map(entry -> entry.getHostAddress()).collect(Collectors.toList()));\r\n    list.addAll(this.addressTable.getAddressBlockList().stream().map(entry -> entry.getDescription()).collect(Collectors.toList()));\r\n    return list;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.EnrollmentSetEntityProvider.delete",
	"Comment": "delete an enrollment set by eid. wraps coursemanagementadministration.removeenrollmentset.",
	"Method": "void delete(String eid){\r\n    cmAdmin.removeEnrollmentSet(eid);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PerlTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "com.rometools.modules.base.types.ShippingType.getService",
	"Comment": "returns the serviceenumeration instance for the shipping service used.",
	"Method": "ServiceEnumeration getService(){\r\n    return service;\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getFramerate",
	"Comment": "framerate is the number of frames per second for the media object. it is an optionalattribute.",
	"Method": "Float getFramerate(){\r\n    return framerate;\r\n}"
}, {
	"Path": "org.sakaibrary.xserver.session.MetasearchSessionManager.putMetasearchSession",
	"Comment": "puts the metasearchsession object into the metasearchsessionmanagercache indexed by the guid.if the guid already exists, themetasearchsession object is updated with the given object.",
	"Method": "void putMetasearchSession(String guid,MetasearchSession ms){\r\n    if (!ms.getGuid().equals(guid)) {\r\n        log.warn(\"putMetasearchSession(): putting MetasearchSession into \" + \"cache with mismatched guids...\");\r\n    }\r\n    cache.put(guid, ms);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.URLFileLocation.isLocalAndExists",
	"Comment": "returns whether this file location is a local file and already\texists.this method always returns false since we\tcannot check this value easily.",
	"Method": "boolean isLocalAndExists(){\r\n    return false;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.fromPublisher",
	"Comment": "wraps a publisher and signals its single value or completion signal orsignals indexoutofboundsexception if the publisher has more than one element.",
	"Method": "Perhaps<T> fromPublisher(Publisher<T> source){\r\n    ObjectHelper.requireNonNull(source, \"source is null\");\r\n    return onAssembly(new PerhapsFromPublisher<T>(source));\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.build_student_view_group_error_context",
	"Comment": "build the student view of showing a group assignment error with eligible groupsa user can only be in one eligible group",
	"Method": "String build_student_view_group_error_context(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    String contextString = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    context.put(\"context\", contextString);\r\n    User user = (User) state.getAttribute(STATE_USER);\r\n    if (log.isDebugEnabled())\r\n        log.debug(this + \" BUILD SUBMISSION GROUP ERROR WITH USER \" + user.getId() + \" NAME \" + user.getDisplayName());\r\n    String currentAssignmentReference = (String) state.getAttribute(VIEW_SUBMISSION_ASSIGNMENT_REFERENCE);\r\n    Assignment assignment = getAssignment(currentAssignmentReference, \"build_student_view_submission_context\", state);\r\n    if (assignment != null) {\r\n        context.put(\"assignment\", assignment);\r\n        if (assignment.getIsGroup()) {\r\n            context.put(\"assignmentService\", assignmentService);\r\n            Collection<Group> groups = null;\r\n            Site st = null;\r\n            try {\r\n                st = siteService.getSite((String) state.getAttribute(STATE_CONTEXT_STRING));\r\n                context.put(\"site\", st);\r\n                groups = getGroupsWithUser(user.getId(), assignment, st);\r\n                context.put(\"group_size\", String.valueOf(groups.size()));\r\n                context.put(\"groups\", new SortedIterator(groups.iterator(), new AssignmentComparator(state, SORTED_BY_GROUP_TITLE, Boolean.TRUE.toString())));\r\n            } catch (IdUnusedException iue) {\r\n                log.warn(this + \":buildStudentViewSubmissionContext: Site not found!\" + iue.getMessage());\r\n            }\r\n        }\r\n    }\r\n    if (taggingManager.isTaggable() && assignment != null) {\r\n        addProviders(context, state);\r\n        addActivity(context, assignment);\r\n        context.put(\"taggable\", Boolean.TRUE);\r\n    }\r\n    context.put(\"userDirectoryService\", userDirectoryService);\r\n    context.put(\"currentTime\", Instant.now());\r\n    String template = (String) getContext(data).get(\"template\");\r\n    return template + TEMPLATE_STUDENT_VIEW_GROUP_ERROR;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.WrappedSyntaxView.changedUpdate",
	"Comment": "gives notification from the document that attributes were changed\tin a location that this view is responsible for.",
	"Method": "void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){\r\n    updateChildren(e, a);\r\n}"
}, {
	"Path": "restx.admin.AdminPage.rootOn",
	"Comment": "returns a new adminpage instance which path is a full uri for the page, based on the provided baseuri.",
	"Method": "AdminPage rootOn(String baseUri){\r\n    return new AdminPage(baseUri + path, title);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setIdentifier",
	"Comment": "sets the dublincore module identifier. convenience method that can be used when there is onlyone identifier to set.",
	"Method": "void setIdentifier(String identifier){\r\n    this.identifier = Lists.create(identifier);\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentModuleImplTest.testCopyFrom",
	"Comment": "test of copyfrom method, of class com.totsp.xml.syndication.content.contentmoduleimpl.",
	"Method": "void testCopyFrom(){\r\n    LOG.debug(\"testCopyFrom\");\r\n    final ContentModule test = new ContentModuleImpl();\r\n    test.copyFrom(module);\r\n    assertTrue(test.getContentItems().equals(module.getContentItems()) & test.getContents().equals(module.getContents()) & test.getEncodeds().equals(module.getEncodeds()));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.repeatWhen",
	"Comment": "repeat when the publisher returned by the handler function signalsa value or terminate accordingly.",
	"Method": "Nono repeatWhen(Function<? super Flowable<Object>, ? extends Publisher<?>> handler){\r\n    ObjectHelper.requireNonNull(handler, \"handler is null\");\r\n    return onAssembly(new NonoRepeatWhen(this, handler));\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.ITunesParserTest.testGetNamespaceUri",
	"Comment": "test of getnamespaceuri method, of class com.totsp.xml.syndication.itunes.itunesparser.",
	"Method": "void testGetNamespaceUri(){\r\n    LOG.debug(\"testGetNamespaceUri\");\r\n    assertEquals(\"Namespace\", \"http://www.itunes.com/dtds/podcast-1.0.dtd\", new ITunesGenerator().getNamespaceUri());\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.getWeekTimeRange",
	"Comment": "given a current date via the calendarutil paramter, returns a timerange for the week.",
	"Method": "TimeRange getWeekTimeRange(CalendarUtil calendarUtil){\r\n    int dayofweek = 0;\r\n    dayofweek = calendarUtil.getDay_Of_Week(true) - 1;\r\n    int tempCurrentYear = calendarUtil.getYear();\r\n    int tempCurrentMonth = calendarUtil.getMonthInteger();\r\n    int tempCurrentDay = calendarUtil.getDayOfMonth();\r\n    calendarUtil.setPrevDate(dayofweek);\r\n    Time startTime = TimeService.newTimeLocal(calendarUtil.getYear(), calendarUtil.getMonthInteger(), calendarUtil.getDayOfMonth(), 00, 00, 00, 000);\r\n    calendarUtil.setDay(tempCurrentYear, tempCurrentMonth, tempCurrentDay);\r\n    dayofweek = calendarUtil.getDay_Of_Week(true);\r\n    if (dayofweek < 7) {\r\n        for (int i = dayofweek; i <= 6; i++) {\r\n            calendarUtil.nextDate();\r\n        }\r\n    }\r\n    Time endTime = TimeService.newTimeLocal(calendarUtil.getYear(), calendarUtil.getMonthInteger(), calendarUtil.getDayOfMonth(), 23, 59, 59, 000);\r\n    return TimeService.newTimeRange(startTime, endTime, true, true);\r\n}"
}, {
	"Path": "restx.entity.StdEntityRoute.hasRole",
	"Comment": "aliases to permissionfactory allowing to have a more readable generated code through apt",
	"Method": "Permission hasRole(String role){\r\n    return permissionFactory.hasRole(role);\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.ITunesParserTest.testParseItem",
	"Comment": "test of parse method, of class com.rometools.modules.itunes.io.itunesparser.",
	"Method": "void testParseItem(){\r\n    File feed = new File(getTestFile(\"xml/leshow.xml\"));\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    SyndFeed syndfeed = input.build(new XmlReader(feed.toURI().toURL()));\r\n    SyndEntry entry = syndfeed.getEntries().get(0);\r\n    EntryInformationImpl entryInfo = (EntryInformationImpl) entry.getModule(AbstractITunesObject.URI);\r\n    assertEquals(true, entryInfo.getClosedCaptioned());\r\n    assertEquals(Integer.valueOf(2), entryInfo.getOrder());\r\n    assertEquals(\"http://example.org/image.png\", entryInfo.getImage().toString());\r\n    assertFalse(entryInfo.getExplicit());\r\n    assertEquals(\"test-itunes-title\", entryInfo.getTitle());\r\n    SyndEntry entry1 = syndfeed.getEntries().get(1);\r\n    EntryInformationImpl entryInfo1 = (EntryInformationImpl) entry1.getModule(AbstractITunesObject.URI);\r\n    assertTrue(entryInfo1.getExplicit());\r\n    SyndEntry entry2 = syndfeed.getEntries().get(2);\r\n    EntryInformationImpl entryInfo2 = (EntryInformationImpl) entry2.getModule(AbstractITunesObject.URI);\r\n    assertFalse(entryInfo2.getExplicit());\r\n    assertNull(entryInfo2.getExplicitNullable());\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.putReleaseResubmissionNotificationOptionIntoContext",
	"Comment": "put the release resubmission grade notification options into context",
	"Method": "void putReleaseResubmissionNotificationOptionIntoContext(SessionState state,Context context,Assignment a){\r\n    if (state.getAttribute(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE) == null && a != null) {\r\n        state.setAttribute(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE, a.getProperties().get(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE));\r\n    }\r\n    if (state.getAttribute(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE) == null) {\r\n        state.setAttribute(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE, AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_NONE);\r\n    }\r\n    context.put(\"name_assignment_releasereturn_notification\", ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION);\r\n    context.put(\"value_assignment_releasereturn_notification\", state.getAttribute(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE));\r\n    context.put(\"value_assignment_releasereturn_notification_none\", AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_NONE);\r\n    context.put(\"value_assignment_releasereturn_notification_each\", AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_EACH);\r\n}"
}, {
	"Path": "org.sakaiproject.endorsed.i18n.spi.SakaiLocaleServiceProviderUtil.isAvailableLocale",
	"Comment": "determines whether the given locale is available\tfor the resource bundles.",
	"Method": "boolean isAvailableLocale(Locale locale){\r\n    boolean isAvailable = false;\r\n    if (getBundle(locale) != null) {\r\n        isAvailable = true;\r\n    }\r\n    return isAvailable;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.zipWith",
	"Comment": "combines the values of this and the other solo via a bifunction.",
	"Method": "Solo<R> zipWith(Solo<U> other,BiFunction<? super T, ? super U, ? extends R> zipper){\r\n    return Solo.zipArray(Functions.toFunction(zipper), this, other);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CSharpTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.tool.ChatTool.getCanRenderMessageOptions",
	"Comment": "determins if the message option display dropdown gets rendered or not",
	"Method": "boolean getCanRenderMessageOptions(){\r\n    DecoratedChatChannel dChannel = getCurrentChannel();\r\n    return dChannel != null ? dChannel.getChatChannel().isEnableUserOverride() : false;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RecordableTextAction.setRecordable",
	"Comment": "sets whether or not this action will be recorded and replayed in\ta macro.",
	"Method": "void setRecordable(boolean recordable){\r\n    isRecordable = recordable;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.doUpdate",
	"Comment": "handles the user clicking on the save button on the page to specify which calendars will be merged into the present schedule.",
	"Method": "void doUpdate(RunData runData,Context context){\r\n    AnnouncementActionState state = (AnnouncementActionState) getState(context, runData, AnnouncementActionState.class);\r\n    if (!SiteService.allowUpdateSite(ToolManager.getCurrentPlacement().getContext())) {\r\n        log.debug(\"{}.doUpdate - Do not have permission to update\", this);\r\n        state.setStatus(CANCEL_STATUS);\r\n        return;\r\n    }\r\n    if (state.getStatus().equals(MERGE_STATUS)) {\r\n        doMergeUpdate(runData, context);\r\n    } else if (state.getStatus().equals(OPTIONS_STATUS)) {\r\n        doOptionsUpdate(runData, context);\r\n    } else if (state.getStatus().equals(REORDER_STATUS)) {\r\n        doReorderUpdate(runData, context);\r\n    } else {\r\n        log.debug(\"{}.doUpdate - Unexpected status\", this);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.MembershipEntityProvider.addUsersToGroup",
	"Comment": "this adds the users to the group provided in the site provided",
	"Method": "void addUsersToGroup(Site site,Group group,List<String> userIds){\r\n    for (String user : userIds) {\r\n        String userId = user.trim();\r\n        Role role = site.getUserRole(userId);\r\n        Member m = site.getMember(userId);\r\n        if (group.getUserRole(userId) == null && role.getId() != null) {\r\n            try {\r\n                group.insertMember(userId, role.getId(), m != null ? m.isActive() : true, false);\r\n            } catch (IllegalArgumentException e) {\r\n                log.error(\".addUsersToGroup: User with id {} cannot be inserted in group with id {} because the group is locked\", userId, group.getId());\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.YamlTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sharing.setWindow",
	"Comment": "set an integer that expresses the size of the window of change history kept by the publisher.",
	"Method": "void setWindow(Integer window){\r\n    this.window = window;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesMetadata.initNamespaceMaps",
	"Comment": "make sure that maps are defined and default values for dublin core \tand xmlschema datatypes are included",
	"Method": "void initNamespaceMaps(){\r\n    if (m_ns2abbrev == null) {\r\n        m_ns2abbrev = new HashMap();\r\n    }\r\n    if (m_abbrev2ns == null) {\r\n        m_abbrev2ns = new HashMap();\r\n    }\r\n    setNamespaceAbbrev(NAMESPACE_DC, NAMESPACE_DC_ABBREV);\r\n    setNamespaceAbbrev(NAMESPACE_DCTERMS, NAMESPACE_DCTERMS_ABBREV);\r\n    setNamespaceAbbrev(NAMESPACE_XSD, NAMESPACE_XSD_ABBREV);\r\n    setNamespaceAbbrev(NAMESPACE_LOM, NAMESPACE_LOM_ABBREV);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaScriptTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.setCopyright",
	"Comment": "sets the feed copyright.this method is a convenience method, it maps to the dublin core module rights.",
	"Method": "void setCopyright(String copyright){\r\n    getDCModule().setRights(copyright);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getTimeRangeFromParameters",
	"Comment": "gets the time range parameter from a properties object filled from url parameters.",
	"Method": "TimeRange getTimeRangeFromParameters(Properties parameters){\r\n    return getTimeRangeParameterByName(parameters, TIME_RANGE_PARAMETER_NAME);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.delaySubscription",
	"Comment": "delay the subscription to this solo until the specified delay elapses.",
	"Method": "Solo<T> delaySubscription(Publisher<?> other,Solo<T> delaySubscription,long delay,TimeUnit unit,Solo<T> delaySubscription,long delay,TimeUnit unit,Scheduler scheduler){\r\n    return delaySubscription(timer(delay, unit, scheduler));\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDelivery.getElement",
	"Comment": "access the html element id that this delivery is in reference to.",
	"Method": "String getElement(){\r\n    return m_elementId;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.currentAssignmentGradebookIntegrationIntoContext",
	"Comment": "how many gradebook items has been assoicated with assignment",
	"Method": "void currentAssignmentGradebookIntegrationIntoContext(Context context,SessionState state,String gradebookUid,String aTitle){\r\n    String contextString = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    Collection<Assignment> assignments = assignmentService.getAssignmentsForContext(contextString);\r\n    HashMap<String, String> gAssignmentIdTitles = new HashMap<String, String>();\r\n    HashMap<String, String> gradebookAssignmentsSelectedDisabled = new HashMap<String, String>();\r\n    HashMap<String, String> gradebookAssignmentsLabel = new HashMap<String, String>();\r\n    for (Assignment a : assignments) {\r\n        String gradebookItem = a.getProperties().get(PROP_ASSIGNMENT_ASSOCIATE_GRADEBOOK_ASSIGNMENT);\r\n        if (StringUtils.isNotBlank(gradebookItem)) {\r\n            String associatedAssignmentTitles = \"\";\r\n            if (gAssignmentIdTitles.containsKey(gradebookItem)) {\r\n                associatedAssignmentTitles = gAssignmentIdTitles.get(gradebookItem) + \", \";\r\n            }\r\n            associatedAssignmentTitles += a.getTitle();\r\n            gAssignmentIdTitles.put(gradebookItem, associatedAssignmentTitles);\r\n        }\r\n    }\r\n    try {\r\n        List gradebookAssignments = gradebookService.getAssignments(gradebookUid);\r\n        for (Iterator i = gradebookAssignments.iterator(); i.hasNext(); ) {\r\n            org.sakaiproject.service.gradebook.shared.Assignment gAssignment = (org.sakaiproject.service.gradebook.shared.Assignment) i.next();\r\n            if (!gAssignment.isExternallyMaintained() || gAssignment.isExternallyMaintained() && gAssignment.getExternalAppName().equals(assignmentService.getToolTitle())) {\r\n                String gaId = gAssignment.isExternallyMaintained() ? gAssignment.getExternalId() : gAssignment.getName();\r\n                String status = \"\";\r\n                if (gAssignmentIdTitles.containsKey(gaId)) {\r\n                    String assignmentTitle = gAssignmentIdTitles.get(gaId);\r\n                    if (aTitle != null && aTitle.equals(assignmentTitle)) {\r\n                        status = \"selected\";\r\n                    }\r\n                }\r\n                if (StringUtils.equals((String) state.getAttribute(PROP_ASSIGNMENT_ASSOCIATE_GRADEBOOK_ASSIGNMENT), gaId)) {\r\n                    status = \"selected\";\r\n                }\r\n                gradebookAssignmentsSelectedDisabled.put(formattedText.escapeHtml(gaId), status);\r\n                String label = gAssignment.getName();\r\n                if (gAssignmentIdTitles.containsKey(gaId)) {\r\n                    label += \" ( \" + rb.getFormattedMessage(\"usedGradebookAssignment\", new Object[] { gAssignmentIdTitles.get(gaId) }) + \" )\";\r\n                }\r\n                gradebookAssignmentsLabel.put(formattedText.escapeHtml(gaId), label);\r\n            }\r\n        }\r\n    } catch (GradebookNotFoundException e) {\r\n        log.debug(this + \":currentAssignmentGradebookIntegrationIntoContext \" + rb.getFormattedMessage(\"addtogradebook.alertMessage\", new Object[] { e.getMessage() }));\r\n    }\r\n    context.put(\"gradebookAssignmentsSelectedDisabled\", gradebookAssignmentsSelectedDisabled);\r\n    context.put(\"gradebookAssignmentsLabel\", gradebookAssignmentsLabel);\r\n}"
}, {
	"Path": "restx.security.RestxSessionLogFilter.prepareSessionStatsMetadata",
	"Comment": "prepares the metadata to be used for session stats monitoring.if you override this method, make sure to include the map built by the default implementation if you wantthe monitor admin session view to work properly, unless you override it too.",
	"Method": "ImmutableMap<String, String> prepareSessionStatsMetadata(RestxRequest req,RestxSession session){\r\n    return ImmutableMap.of(\"clientAddress\", req.getClientAddress(), \"userAgent\", req.getHeader(\"User-Agent\").or(\"Unknown\"));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.defer",
	"Comment": "defers the creation of the actual perhaps instance untilsubscription time and for each downstream subscriber the givencallable is called.",
	"Method": "Perhaps<T> defer(Callable<? extends Perhaps<? extends T>> supplier){\r\n    ObjectHelper.requireNonNull(supplier, \"supplier is null\");\r\n    return onAssembly(new PerhapsDefer<T>(supplier));\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.SearchSource.getQueryHandler",
	"Comment": "return a new querybase object for the specified search source.class loading is defered until request time.",
	"Method": "QueryBase getQueryHandler(){\r\n    synchronized (this) {\r\n        if (_queryClass == null) {\r\n            _queryClass = Class.forName(_queryClassName);\r\n        }\r\n        return (QueryBase) _queryClass.newInstance();\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.zipArray",
	"Comment": "combines the perhaps values of all the sources via a zipper function into asingle resulting value.",
	"Method": "Perhaps<R> zipArray(Function<? super Object[], ? extends R> zipper,Perhaps<? extends T> sources){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.requireNonNull(zipper, \"zipper is null\");\r\n    return onAssembly(new PerhapsZipArray<T, R>(sources, zipper));\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.SearchSource.getSearchResultHandler",
	"Comment": "return a new searchresultbase object for the specified search source.class loading is defered until request time.",
	"Method": "SearchResultBase getSearchResultHandler(){\r\n    synchronized (this) {\r\n        if (_searchResultClass == null) {\r\n            _searchResultClass = Class.forName(_searchResultClassName);\r\n        }\r\n        return (SearchResultBase) _searchResultClass.newInstance();\r\n    }\r\n}"
}, {
	"Path": "net.oauth.OAuthMessage.requireParameters",
	"Comment": "verify that the required parameter names are contained in the actualcollection.",
	"Method": "void requireParameters(String names){\r\n    Set<String> present = getParameterMap().keySet();\r\n    List<String> absent = new ArrayList<String>();\r\n    for (String required : names) {\r\n        if (!present.contains(required)) {\r\n            absent.add(required);\r\n        }\r\n    }\r\n    if (!absent.isEmpty()) {\r\n        OAuthProblemException problem = new OAuthProblemException(OAuth.Problems.PARAMETER_ABSENT);\r\n        problem.setParameter(OAuth.Problems.OAUTH_PARAMETERS_ABSENT, OAuth.percentEncode(absent));\r\n        throw problem;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.DefaultTokenFactory.augmentTokenList",
	"Comment": "adds tokens to the internal token list.this is called whenever a\trequest is made and no more tokens are available.",
	"Method": "void augmentTokenList(){\r\n    TokenImpl[] temp = new TokenImpl[size + increment];\r\n    System.arraycopy(tokenList, 0, temp, 0, size);\r\n    size += increment;\r\n    tokenList = temp;\r\n    for (int i = 0; i < increment; i++) {\r\n        tokenList[size - i - 1] = new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxDocument.getTokenListForLine",
	"Comment": "returns a token list for the specified segment of text representing\tthe specified line number.this method is basically a wrapper for\ttokenmaker.gettokenlist that takes into account the last\ttoken on the previous line to assure token accuracy.",
	"Method": "Token getTokenListForLine(int line){\r\n    tokenRetrievalCount++;\r\n    if (line == lastLine && cachedTokenList != null) {\r\n        if (DEBUG_TOKEN_CACHING) {\r\n            useCacheCount++;\r\n            System.err.println(\"--- Using cached line; ratio now: \" + useCacheCount + \"/\" + tokenRetrievalCount);\r\n        }\r\n        return cachedTokenList;\r\n    }\r\n    lastLine = line;\r\n    Element map = getDefaultRootElement();\r\n    Element elem = map.getElement(line);\r\n    int startOffset = elem.getStartOffset();\r\n    int endOffset = elem.getEndOffset() - 1;\r\n    try {\r\n        getText(startOffset, endOffset - startOffset, s);\r\n    } catch (BadLocationException ble) {\r\n        ble.printStackTrace();\r\n        return null;\r\n    }\r\n    int initialTokenType = line == 0 ? Token.NULL : getLastTokenTypeOnLine(line - 1);\r\n    cachedTokenList = tokenMaker.getTokenList(s, initialTokenType, startOffset);\r\n    return cachedTokenList;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.ActionScriptTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PythonTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PlainTextTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.parser.XmlParser.setValidating",
	"Comment": "sets whether this parser will use dtd validation if required.",
	"Method": "void setValidating(boolean validating){\r\n    spf.setValidating(validating);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern6.and",
	"Comment": "creates a pattern that matches when all six observable sequences have an available element.",
	"Method": "Pattern7<T1, T2, T3, T4, T5, T6, T7> and(Observable<T7> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Pattern7<T1, T2, T3, T4, T5, T6, T7>(o1, o2, o3, o4, o5, o6, other);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.bufferUntil",
	"Comment": "buffers elements into a custom collection until the given predicate returns true at whichpoint a new empty custom collection is started.",
	"Method": "FlowableTransformer<T, List<T>> bufferUntil(Predicate<? super T> predicate,FlowableTransformer<T, C> bufferUntil,Predicate<? super T> predicate,Callable<C> bufferSupplier){\r\n    return new FlowableBufferPredicate<T, C>(null, predicate, FlowableBufferPredicate.Mode.AFTER, bufferSupplier);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.EntityView.getEntityURL",
	"Comment": "get an entityurl by merging a specific template with the data in this eb object",
	"Method": "String getEntityURL(String getEntityURL,String viewKey,String extension){\r\n    TemplateParseUtil.validateTemplateKey(viewKey);\r\n    if (viewKey == null) {\r\n        if (entityReference == null || pathSegments == null || pathSegments.isEmpty()) {\r\n            throw new IllegalArgumentException(\"There is no entity reference information or path segments in this view to process into a URL\");\r\n        }\r\n        if (entityReference.getId() == null || pathSegments.size() == 1) {\r\n            viewKey = VIEW_LIST;\r\n        } else {\r\n            viewKey = VIEW_SHOW;\r\n        }\r\n    } else {\r\n        if (VIEW_NEW.equals(viewKey) || VIEW_LIST.equals(viewKey)) {\r\n        } else {\r\n            if (entityReference.getId() == null || pathSegments.size() == 1) {\r\n                viewKey = VIEW_LIST;\r\n            }\r\n        }\r\n    }\r\n    String template = getParseTemplate(viewKey);\r\n    if (template == null) {\r\n        throw new IllegalStateException(\"parseTemplates contains no template for key: \" + viewKey);\r\n    }\r\n    String url = TemplateParseUtil.mergeTemplate(template, pathSegments);\r\n    if (extension != null && !\"\".equals(extension)) {\r\n        url += PERIOD + extension;\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DelphiTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.common.Collection.elementToCollection",
	"Comment": "deserialize an atom service collection xml element into an object",
	"Method": "Collection elementToCollection(Element element){\r\n    return new Collection(element);\r\n}"
}, {
	"Path": "com.rometools.modules.sle.SleEntryImpl.getInterface",
	"Comment": "returns the interface the copyfrom works on.this is useful when dealing with properties that may have multiple implementations. forexample, module.",
	"Method": "Class<SleEntry> getInterface(){\r\n    return SleEntry.class;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.Fold.setCollapsed",
	"Comment": "sets whether this fold is collapsed.calling this method\twill update both the text area and all gutter components.",
	"Method": "void setCollapsed(boolean collapsed){\r\n    if (collapsed != this.collapsed) {\r\n        int lineCount = getLineCount();\r\n        int linesToCollapse = lineCount - childCollapsedLineCount;\r\n        if (!collapsed) {\r\n            linesToCollapse = -linesToCollapse;\r\n        }\r\n        this.collapsed = collapsed;\r\n        if (parent != null) {\r\n            parent.updateChildCollapsedLineCount(linesToCollapse);\r\n        }\r\n        if (collapsed) {\r\n            int dot = textArea.getSelectionStart();\r\n            Element root = textArea.getDocument().getDefaultRootElement();\r\n            int dotLine = root.getElementIndex(dot);\r\n            boolean updateCaret = containsLine(dotLine);\r\n            if (!updateCaret) {\r\n                int mark = textArea.getSelectionEnd();\r\n                if (mark != dot) {\r\n                    int markLine = root.getElementIndex(mark);\r\n                    updateCaret = containsLine(markLine);\r\n                }\r\n            }\r\n            if (updateCaret) {\r\n                dot = root.getElement(getStartLine()).getEndOffset() - 1;\r\n                textArea.setCaretPosition(dot);\r\n            }\r\n        }\r\n        textArea.foldToggled(this);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.doBack",
	"Comment": "action is used when the doback is called when the user click on the back on the eventactivity view",
	"Method": "void doBack(RunData data,Context context){\r\n    CalendarActionState state = (CalendarActionState) getState(context, data, CalendarActionState.class);\r\n    String peid = ((JetspeedRunData) data).getJs_peid();\r\n    SessionState sstate = ((JetspeedRunData) data).getPortletSessionState(peid);\r\n    Calendar calendarObj = null;\r\n    String calId = state.getPrimaryCalendarReference();\r\n    try {\r\n        calendarObj = CalendarService.getCalendar(calId);\r\n        calendarObj.cancelEvent(state.getPrimaryCalendarEdit());\r\n        state.setPrimaryCalendarEdit(null);\r\n        state.setEdit(null);\r\n    } catch (IdUnusedException e) {\r\n        addAlert(sstate, rb.getString(\"java.alert.noexist\"));\r\n    } catch (PermissionException e) {\r\n        addAlert(sstate, rb.getString(\"java.alert.youcreate\"));\r\n    }\r\n    String returnState = state.getReturnState();\r\n    state.setState(returnState);\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.DateParser.formatRFC822",
	"Comment": "create a rfc822 representation of a date.refer to the java.text.simpledateformat javadocs for details on the format of each element.",
	"Method": "String formatRFC822(Date date,Locale locale){\r\n    final SimpleDateFormat dateFormater = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\", locale);\r\n    dateFormater.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n    return dateFormater.format(date);\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UsersAction.mapLine",
	"Comment": "takes a row of data and maps it into the appropriate importeduser properties\twe have a fixed list of properties, anything else goes into resourceproperties",
	"Method": "ImportedUser mapLine(String[] line,Map<Integer, String> mapping){\r\n    ImportedUser u = new ImportedUser();\r\n    ResourceProperties p = new BaseResourcePropertiesEdit();\r\n    for (Map.Entry<Integer, String> entry : mapping.entrySet()) {\r\n        int i = entry.getKey();\r\n        String col = entry.getValue();\r\n        if (StringUtils.equals(col, IMPORT_USER_ID)) {\r\n            u.setEid(line[i]);\r\n        } else if (StringUtils.equals(col, IMPORT_FIRST_NAME)) {\r\n            u.setFirstName(line[i]);\r\n        } else if (StringUtils.equals(col, IMPORT_LAST_NAME)) {\r\n            u.setLastName(line[i]);\r\n        } else if (StringUtils.equals(col, IMPORT_EMAIL)) {\r\n            u.setEmail(line[i]);\r\n        } else if (StringUtils.equals(col, IMPORT_PASSWORD)) {\r\n            u.setPassword(line[i]);\r\n        } else if (StringUtils.equals(col, IMPORT_TYPE)) {\r\n            u.setType(line[i]);\r\n        } else {\r\n            if (StringUtils.isNotBlank(line[i])) {\r\n                p.addProperty(col, line[i]);\r\n            }\r\n        }\r\n    }\r\n    u.setProperties(p);\r\n    return u;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ImageBackgroundPainterStrategy.paint",
	"Comment": "paints the image at the specified location and at the specified size.",
	"Method": "void paint(Graphics g,Rectangle bounds){\r\n    if (bounds.width != oldWidth || bounds.height != oldHeight) {\r\n        rescaleImage(bounds.width, bounds.height, getScalingHint());\r\n        oldWidth = bounds.width;\r\n        oldHeight = bounds.height;\r\n    }\r\n    paintImage(g, bounds.x, bounds.y);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.categoryTable",
	"Comment": "add the list of categories from the gradebook toolconstruct a hashmap using the integer as the key and category string as the value",
	"Method": "Map<Long, String> categoryTable(){\r\n    boolean gradebookExists = isGradebookDefined();\r\n    Map<Long, String> catTable = new HashMap();\r\n    if (gradebookExists) {\r\n        String gradebookUid = toolManager.getCurrentPlacement().getContext();\r\n        List<CategoryDefinition> categoryDefinitions = gradebookService.getCategoryDefinitions(gradebookUid);\r\n        catTable.put((long) -1, rb.getString(\"grading.unassigned\"));\r\n        for (CategoryDefinition category : categoryDefinitions) {\r\n            catTable.put(category.getId(), category.getName());\r\n        }\r\n    }\r\n    return catTable;\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentModuleImplTest.testEncodeds",
	"Comment": "test of getencodeds method, of class com.totsp.xml.syndication.content.contentmoduleimpl.",
	"Method": "void testEncodeds(){\r\n    final ArrayList<String> encodeds = new ArrayList<String>();\r\n    encodeds.add(\"Foo\");\r\n    encodeds.add(\"Bar\");\r\n    encodeds.add(\"Baz\");\r\n    module.setEncodeds(encodeds);\r\n    final List<String> check = module.getEncodeds();\r\n    assertTrue(check.equals(encodeds));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.mergeArrayDelayError",
	"Comment": "merge the values in arbitrary order from a sequence of perhaps sources,delaying errors till all sources terminate.",
	"Method": "Flowable<T> mergeArrayDelayError(Perhaps<? extends T> sources,Flowable<T> mergeArrayDelayError,int maxConcurrency,Perhaps<? extends T> sources){\r\n    return Flowable.mergeArrayDelayError(maxConcurrency, 1, sources);\r\n}"
}, {
	"Path": "co.rsk.net.Metrics.newBlockHeader",
	"Comment": "this function should be called when a node has a new block header and can start mining.",
	"Method": "void newBlockHeader(BlockHeader header,NodeID sender){\r\n    String event = String.format(\"event: %s hash: %s number: %d parent: %s sender: %s\", \"newBlockHeader\", HashUtil.shortHash(header.getHash().getBytes()), header.getNumber(), HashUtil.shortHash(header.getParentHash().getBytes()), HashUtil.shortHash(sender.getID()));\r\n    logEvent(event);\r\n}"
}, {
	"Path": "co.rsk.net.TransactionNodeInformationTest.createBlockHash",
	"Comment": "createblockhash is a convenience function to create a keccak256 wrapping an int.",
	"Method": "Keccak256 createBlockHash(int i){\r\n    return new Keccak256(ByteBuffer.allocate(32).putInt(i).array());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.fromMaybe",
	"Comment": "wrap a maybe, ignore its success value and terminate ifthe source maybe terminates.",
	"Method": "Nono fromMaybe(MaybeSource<?> source){\r\n    ObjectHelper.requireNonNull(source, \"source is null\");\r\n    return onAssembly(new NonoFromMaybe(source));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ErrorStrip.doLayout",
	"Comment": "manually manages layout since this component uses no layout manager.",
	"Method": "void doLayout(){\r\n    for (int i = 0; i < getComponentCount(); i++) {\r\n        Marker m = (Marker) getComponent(i);\r\n        m.updateLocation();\r\n    }\r\n    listener.caretUpdate(null);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaScriptTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    validJSString = true;\r\n    e4x_prevState = YYINITIAL;\r\n    e4x_inInternalDtd = false;\r\n    int languageIndex = LANG_INDEX_DEFAULT;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case INTERNAL_IN_JS_MLC:\r\n            state = JS_MLC;\r\n            break;\r\n        case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:\r\n            state = JS_DOCCOMMENT;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_INVALID:\r\n            state = JS_STRING;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_VALID:\r\n            state = JS_STRING;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_INVALID:\r\n            state = JS_CHAR;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_VALID:\r\n            state = JS_CHAR;\r\n            break;\r\n        case INTERNAL_E4X:\r\n            state = E4X;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_INTAG:\r\n            state = E4X_INTAG;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION:\r\n            state = E4X_PI;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_DTD:\r\n            state = E4X_DTD;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_DTD_INTERNAL:\r\n            state = E4X_DTD;\r\n            e4x_inInternalDtd = true;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_ATTR_SINGLE:\r\n            state = E4X_INATTR_SINGLE;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_ATTR_DOUBLE:\r\n            state = E4X_INATTR_DOUBLE;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_MARKUP_CDATA:\r\n            state = E4X_CDATA;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            validJSString = false;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_IN_E4X_COMMENT:\r\n                        state = E4X_COMMENT;\r\n                        break;\r\n                }\r\n                e4x_prevState = -initialTokenType & 0xff;\r\n                languageIndex = LANG_INDEX_E4X;\r\n            } else {\r\n                state = Token.NULL;\r\n            }\r\n    }\r\n    setLanguageIndex(languageIndex);\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.sle.GroupAndSortTest.testSortAndGroup",
	"Comment": "test of sortandgroup method, of class com.rometools.rome.feed.module.sle.groupandsort.",
	"Method": "void testSortAndGroup(){\r\n    final File testdata = new File(super.getTestFile(\"data/bookexample.xml\"));\r\n    final SyndFeed feed = new SyndFeedInput().build(testdata);\r\n    final List<SyndEntry> feedEntries = feed.getEntries();\r\n    final List<Extendable> entries = new ArrayList<Extendable>(feedEntries);\r\n    final SimpleListExtension sle = (SimpleListExtension) feed.getModule(SimpleListExtension.URI);\r\n    final Sort[] sortFields = sle.getSortFields();\r\n    final Sort sortByTitle = sortFields[2];\r\n    final List<Extendable> sortedEntries = SleUtility.sortAndGroup(entries, sle.getGroupFields(), sortByTitle, true);\r\n    final SyndEntry entry = (SyndEntry) sortedEntries.get(0);\r\n    assertEquals(\"Horror Stories, vol 16\", entry.getTitle());\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getFormat",
	"Comment": "gets the dublincore module format. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getFormat(){\r\n    return Lists.firstEntry(format);\r\n}"
}, {
	"Path": "org.fife.io.DocumentReader.ready",
	"Comment": "tells whether this reader is ready to be read without\tblocking for input.documentreader will\talways return true.",
	"Method": "boolean ready(){\r\n    return true;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.parser.ToolTipInfo.getHyperlinkListener",
	"Comment": "returns the listener to call when hyperlinks are clicked in the tool",
	"Method": "HyperlinkListener getHyperlinkListener(){\r\n    return listener;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.doOnRequest",
	"Comment": "executes the callback when the downstream requests from this solo.",
	"Method": "Solo<T> doOnRequest(LongConsumer onRequest){\r\n    ObjectHelper.requireNonNull(onRequest, \"onRequest is null\");\r\n    return onAssembly(new SoloDoOnLifecycle<T>(this, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), onRequest, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.eventId",
	"Comment": "form a tracking event string based on a security function string.",
	"Method": "String eventId(String secure){\r\n    return SECURE_SCHEDULE_ROOT + secure;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HtaccessTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case INTERNAL_ATTR_DOUBLE:\r\n            state = INATTR_DOUBLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE:\r\n            state = INATTR_SINGLE;\r\n            break;\r\n        case INTERNAL_INTAG:\r\n            state = INTAG;\r\n            break;\r\n        default:\r\n            state = YYINITIAL;\r\n    }\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "net.oauth.OAuth.addParameters",
	"Comment": "construct a url like the given one, but with the given parameters addedto its query string.",
	"Method": "String addParameters(String url,String parameters,String addParameters,String url,Iterable<? extends Map.Entry<String, String>> parameters){\r\n    String form = formEncode(parameters);\r\n    if (form == null || form.length() <= 0) {\r\n        return url;\r\n    } else {\r\n        return url + ((url.indexOf(\"?\") < 0) ? '?' : '&') + form;\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern8.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Plan8<T1, T2, T3, T4, T5, T6, T7, T8, R>(this, selector);\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testProduct2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testProduct2Parse(){\r\n    LOG.debug(\"testProduct2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/products2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Product module = (Product) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.googlestore.com/appliance/images/products/GO0144E.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"web search\", \"appliance\" }, module.getLabels());\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, module.getCurrency());\r\n    Assert.assertEquals(\"Price\", 2995, module.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, module.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.CHECK, PaymentTypeEnumeration.MASTERCARD }, module.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment Notes\", \"financing available\", module.getPaymentNotes());\r\n    Assert.assertEquals(\"Brand\", \"Google\", module.getBrand());\r\n    Assert.assertEquals(\"UPC\", \"12348573\", module.getUpc());\r\n    Assert.assertEquals(\"Manufacturer\", \"Google\", module.getManufacturer());\r\n    Assert.assertEquals(\"ManufacturerId\", \"2325\", module.getManufacturerId());\r\n    Assert.assertEquals(\"Model number\", \"234\", module.getModelNumber());\r\n    LOG.debug(\"{}\", module.getSize());\r\n    Assert.assertEquals(\"Size\", 10, module.getSize().getLength().getValue(), 0);\r\n    Assert.assertEquals(\"Size\", 50, module.getSize().getWidth().getValue(), 0);\r\n    Assert.assertEquals(\"Size\", 20, module.getSize().getHeight().getValue(), 0);\r\n    Assert.assertEquals(\"Weight\", 2, module.getWeight().getValue(), 0);\r\n    Assert.assertEquals(\"Quantity\", new Integer(300), module.getQuantity());\r\n    Assert.assertEquals(\"Condition\", \"new\", module.getCondition());\r\n    this.assertEquals(\"Colors\", new String[] { \"blue\" }, module.getColors());\r\n    Assert.assertEquals(\"Location\", \"1600 Amphitheatre Pkwy Mountain View, CA 94043-1351, US\", module.getLocation());\r\n}"
}, {
	"Path": "org.sakaiproject.util.foorm.Foorm.formInput",
	"Comment": "produce a form for creating a new object or editing an existing object",
	"Method": "String formInput(Object row,String fieldinfo,String formInput,Object row,String fieldinfo,Object loader,String formInput,Object row,String[] formDefinition,String formInput,Object row,String[] formDefinition,Object loader){\r\n    StringBuffer sb = new StringBuffer();\r\n    String header = null;\r\n    String[] fieldList = null;\r\n    boolean inCheckboxes = false;\r\n    for (String inp : formDefinition) {\r\n        String tmp = formInput(row, inp, loader);\r\n        if (tmp.length() < 1)\r\n            continue;\r\n        Properties info = parseFormString(inp);\r\n        String type = info.getProperty(\"type\", null);\r\n        String field = info.getProperty(\"field\", null);\r\n        if (inCheckboxes && !\"checkbox\".equals(type)) {\r\n            sb.append(\"<\/ol>\\n\");\r\n            inCheckboxes = false;\r\n        }\r\n        if (\"header\".equals(type)) {\r\n            String fields = info.getProperty(\"fields\", \"\");\r\n            fieldList = fields.split(\",\");\r\n            if (fieldList.length > 1) {\r\n                header = tmp;\r\n                continue;\r\n            }\r\n        }\r\n        if (header != null && Arrays.asList(fieldList).contains(field)) {\r\n            sb.append(header);\r\n            sb.append(\"\\n\");\r\n            header = null;\r\n            fieldList = null;\r\n        }\r\n        if (!inCheckboxes && \"checkbox\".equals(type)) {\r\n            sb.append(\"<ol id=\\\"\" + field + \"-checkbox-start\\\" style=\\\"list-style-type:none\\\">\\n\");\r\n            inCheckboxes = true;\r\n        }\r\n        sb.append(tmp);\r\n        sb.append(\"\\n\");\r\n    }\r\n    if (inCheckboxes) {\r\n        sb.append(\"<\/ol>\\n\");\r\n        inCheckboxes = false;\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PythonTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = LONG_STRING_2;\r\n            break;\r\n        case Token.LITERAL_CHAR:\r\n            state = LONG_STRING_1;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "net.oauth.OAuthMessage.getDump",
	"Comment": "construct a verbose description of this message and its origins.",
	"Method": "Map<String, Object> getDump(){\r\n    Map<String, Object> into = new HashMap<String, Object>();\r\n    dump(into);\r\n    return into;\r\n}"
}, {
	"Path": "co.rsk.mine.MinerServerImpl.buildBlockToMine",
	"Comment": "buildblocktomine creates a block to mine based on the given block as parent.",
	"Method": "void buildBlockToMine(Block newBlockParent,boolean createCompetitiveBlock){\r\n    if (createCompetitiveBlock) {\r\n        newBlockParent = blockchain.getBlockByHash(newBlockParent.getParentHash().getBytes());\r\n    }\r\n    logger.info(\"Starting block to mine from parent {} {}\", newBlockParent.getNumber(), newBlockParent.getHash());\r\n    final Block newBlock = builder.build(newBlockParent, extraData);\r\n    if (autoSwitchBetweenNormalAndFallbackMining) {\r\n        setFallbackMining(ProofOfWorkRule.isFallbackMiningPossible(config, newBlock.getHeader()));\r\n    }\r\n    synchronized (lock) {\r\n        Keccak256 parentHash = newBlockParent.getHash();\r\n        boolean notify = this.getNotify(newBlock, parentHash);\r\n        if (notify) {\r\n            latestPaidFeesWithNotify = newBlock.getFeesPaidToMiner();\r\n        }\r\n        latestParentHash = parentHash;\r\n        latestBlock = newBlock;\r\n        currentWork = updateGetWork(newBlock, notify);\r\n        Keccak256 latestBlockHashWaitingForPoW = new Keccak256(newBlock.getHashForMergedMining());\r\n        blocksWaitingforPoW.put(latestBlockHashWaitingForPoW, latestBlock);\r\n        logger.debug(\"blocksWaitingForPoW size {}\", blocksWaitingforPoW.size());\r\n    }\r\n    logger.debug(\"Built block {}. Parent {}\", newBlock.getShortHashForMergedMining(), newBlockParent.getShortHashForMergedMining());\r\n    for (BlockHeader uncleHeader : newBlock.getUncleList()) {\r\n        logger.debug(\"With uncle {}\", uncleHeader.getShortHashForMergedMining());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxDocumentTest.assertDocumentEvent",
	"Comment": "verifies that the type, offset, and length of a\tdocumentevent have expected values.",
	"Method": "void assertDocumentEvent(DocumentEvent e,DocumentEvent.EventType eventType,int offs,int len){\r\n    Assert.assertEquals(eventType, e.getType());\r\n    Assert.assertEquals(offs, e.getOffset());\r\n    Assert.assertEquals(len, e.getLength());\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.updateAssignmentWithEventId",
	"Comment": "add event to calendar and then persist the event id to the assignment properties",
	"Method": "void updateAssignmentWithEventId(SessionState state,Assignment a,String title,Instant dueTime,Calendar c,String dueDateProperty){\r\n    CalendarEvent e;\r\n    if (a != null) {\r\n        try {\r\n            e = null;\r\n            CalendarEvent.EventAccess eAccess = CalendarEvent.EventAccess.SITE;\r\n            List<Group> eGroups = new ArrayList();\r\n            if (a.getTypeOfAccess().equals(Assignment.Access.GROUP)) {\r\n                eAccess = CalendarEvent.EventAccess.GROUPED;\r\n                Collection<String> groupRefs = a.getGroups();\r\n                Site site = siteService.getSite((String) state.getAttribute(STATE_CONTEXT_STRING));\r\n                for (String groupRef : groupRefs) {\r\n                    Group group = site.getGroup(groupRef);\r\n                    if (group != null)\r\n                        eGroups.add(group);\r\n                }\r\n            }\r\n            e = c.addEvent(timeService.newTimeRange(dueTime.toEpochMilli(), 0), rb.getString(\"gen.due\") + \" \" + title, rb.getFormattedMessage(\"assign_due_event_desc\", title, dueTime.toString()), \"Deadline\", \"\", eAccess, eGroups, null);\r\n            a.getProperties().put(NEW_ASSIGNMENT_DUE_DATE_SCHEDULED, Boolean.TRUE.toString());\r\n            if (e != null) {\r\n                a.getProperties().put(dueDateProperty, e.getId());\r\n                addAssignmentIdToCalendar(a, c, e);\r\n            }\r\n        } catch (IdUnusedException ee) {\r\n            log.warn(this + \":updateAssignmentWithEventId \" + ee.getMessage());\r\n        } catch (PermissionException ee) {\r\n            log.warn(this + \":updateAssignmentWithEventId \" + rb.getString(\"cannotfin1\"));\r\n        } catch (Exception ee) {\r\n            log.warn(this + \":updateAssignmentWithEventId \" + ee.getMessage());\r\n        }\r\n        try {\r\n            assignmentService.updateAssignment(a);\r\n        } catch (PermissionException e1) {\r\n            log.warn(\"Cannot update assignment, {}\", e1.getMessage());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.gradebook.BaseHibernateManager.getCourseGradeRecord",
	"Comment": "gets the course grade record for a student, or null if it does not yet exist.",
	"Method": "CourseGradeRecord getCourseGradeRecord(Gradebook gradebook,String studentId){\r\n    return (CourseGradeRecord) getSessionFactory().getCurrentSession().createQuery(\"from CourseGradeRecord as cgr where cgr.studentId = :studentid and cgr.gradableObject.gradebook = :gradebook\").setString(\"studentid\", studentId).setEntity(\"gradebook\", gradebook).uniqueResult();\r\n}"
}, {
	"Path": "org.ethereum.net.rlpx.HandshakeHandler.decodeHandshake",
	"Comment": "consume handshake, producing no resulting message to upper layers",
	"Method": "void decodeHandshake(ChannelHandlerContext ctx,ByteBuf buffer){\r\n    if (handshake.isInitiator()) {\r\n        if (frameCodec == null) {\r\n            byte[] responsePacket = new byte[AuthResponseMessage.getLength() + ECIESCoder.getOverhead()];\r\n            if (!buffer.isReadable(responsePacket.length)) {\r\n                return;\r\n            }\r\n            buffer.readBytes(responsePacket);\r\n            try {\r\n                AuthResponseMessage response = handshake.handleAuthResponse(myKey, initiatePacket, responsePacket);\r\n                loggerNet.trace(\"From: \\t{} \\tRecv: \\t{}\", ctx.channel().remoteAddress(), response);\r\n            } catch (Throwable t) {\r\n                responsePacket = readEIP8Packet(buffer, responsePacket);\r\n                if (responsePacket == null) {\r\n                    return;\r\n                }\r\n                AuthResponseMessageV4 response = handshake.handleAuthResponseV4(myKey, initiatePacket, responsePacket);\r\n                loggerNet.trace(\"From: \\t{} \\tRecv: \\t{}\", ctx.channel().remoteAddress(), response);\r\n            }\r\n            EncryptionHandshake.Secrets secrets = this.handshake.getSecrets();\r\n            this.frameCodec = new FrameCodec(secrets);\r\n            loggerNet.trace(\"auth exchange done\");\r\n            channel.sendHelloMessage(ctx, frameCodec, Hex.toHexString(nodeId), null);\r\n        } else {\r\n            loggerWire.debug(\"MessageCodec: Buffer bytes: {}\", buffer.readableBytes());\r\n            List<Frame> frames = frameCodec.readFrames(buffer);\r\n            if (frames == null || frames.isEmpty()) {\r\n                return;\r\n            }\r\n            Frame frame = frames.get(0);\r\n            byte[] payload = ByteStreams.toByteArray(frame.getStream());\r\n            if (frame.getType() == P2pMessageCodes.HELLO.asByte()) {\r\n                HelloMessage helloMessage = new HelloMessage(payload);\r\n                loggerNet.trace(\"From: \\t{} \\tRecv: \\t{}\", ctx.channel().remoteAddress(), helloMessage);\r\n                processHelloMessage(ctx, helloMessage);\r\n            } else {\r\n                DisconnectMessage message = new DisconnectMessage(payload);\r\n                loggerNet.trace(\"From: \\t{} \\tRecv: \\t{}\", channel, message);\r\n                channel.getNodeStatistics().nodeDisconnectedRemote(message.getReason());\r\n            }\r\n        }\r\n    } else {\r\n        loggerWire.debug(\"Not initiator.\");\r\n        if (frameCodec == null) {\r\n            loggerWire.debug(\"FrameCodec == null\");\r\n            byte[] authInitPacket = new byte[AuthInitiateMessage.getLength() + ECIESCoder.getOverhead()];\r\n            if (!buffer.isReadable(authInitPacket.length)) {\r\n                return;\r\n            }\r\n            buffer.readBytes(authInitPacket);\r\n            this.handshake = new EncryptionHandshake();\r\n            byte[] responsePacket;\r\n            try {\r\n                AuthInitiateMessage initiateMessage = handshake.decryptAuthInitiate(authInitPacket, myKey);\r\n                loggerNet.trace(\"From: \\t{} \\tRecv: \\t{}\", ctx.channel().remoteAddress(), initiateMessage);\r\n                AuthResponseMessage response = handshake.makeAuthInitiate(initiateMessage, myKey);\r\n                loggerNet.trace(\"To: \\t{} \\tSend: \\t{}\", ctx.channel().remoteAddress(), response);\r\n                responsePacket = handshake.encryptAuthResponse(response);\r\n            } catch (Throwable t) {\r\n                try {\r\n                    authInitPacket = readEIP8Packet(buffer, authInitPacket);\r\n                    if (authInitPacket == null) {\r\n                        return;\r\n                    }\r\n                    AuthInitiateMessageV4 initiateMessage = handshake.decryptAuthInitiateV4(authInitPacket, myKey);\r\n                    loggerNet.trace(\"From: \\t{} \\tRecv: \\t{}\", ctx.channel().remoteAddress(), initiateMessage);\r\n                    AuthResponseMessageV4 response = handshake.makeAuthInitiateV4(initiateMessage, myKey);\r\n                    loggerNet.trace(\"To: \\t{} \\tSend: \\t{}\", ctx.channel().remoteAddress(), response);\r\n                    responsePacket = handshake.encryptAuthResponseV4(response);\r\n                } catch (InvalidCipherTextException ce) {\r\n                    loggerNet.warn(\"Can't decrypt AuthInitiateMessage from {}. Most likely the remote peer used wrong public key (NodeID) to encrypt message.\", ctx.channel().remoteAddress());\r\n                    return;\r\n                }\r\n            }\r\n            handshake.agreeSecret(authInitPacket, responsePacket);\r\n            EncryptionHandshake.Secrets secrets = this.handshake.getSecrets();\r\n            this.frameCodec = new FrameCodec(secrets);\r\n            ECPoint remotePubKey = this.handshake.getRemotePublicKey();\r\n            byte[] compressed = remotePubKey.getEncoded(false);\r\n            this.remoteId = new byte[compressed.length - 1];\r\n            System.arraycopy(compressed, 1, this.remoteId, 0, this.remoteId.length);\r\n            channel.setNode(remoteId);\r\n            final ByteBuf byteBufMsg = ctx.alloc().buffer(responsePacket.length);\r\n            byteBufMsg.writeBytes(responsePacket);\r\n            ctx.writeAndFlush(byteBufMsg).sync();\r\n        } else {\r\n            List<Frame> frames = frameCodec.readFrames(buffer);\r\n            if (frames == null || frames.isEmpty()) {\r\n                return;\r\n            }\r\n            Frame frame = frames.get(0);\r\n            Message message = new P2pMessageFactory().create((byte) frame.getType(), ByteStreams.toByteArray(frame.getStream()));\r\n            loggerNet.trace(\"From: \\t{} \\tRecv: \\t{}\", ctx.channel().remoteAddress(), message);\r\n            if (frame.getType() == P2pMessageCodes.DISCONNECT.asByte()) {\r\n                loggerNet.info(\"Active remote peer disconnected right after handshake.\");\r\n                return;\r\n            }\r\n            if (frame.getType() != P2pMessageCodes.HELLO.asByte()) {\r\n                throw new RuntimeException(\"The message type is not HELLO or DISCONNECT: \" + message);\r\n            }\r\n            HelloMessage inboundHelloMessage = (HelloMessage) message;\r\n            channel.sendHelloMessage(ctx, frameCodec, Hex.toHexString(nodeId), inboundHelloMessage);\r\n            processHelloMessage(ctx, inboundHelloMessage);\r\n        }\r\n    }\r\n    channel.getNodeStatistics().rlpxInHello.add();\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.isOkToShowOptionsButton",
	"Comment": "returns true if it is ok to show the options button in the toolbar.",
	"Method": "boolean isOkToShowOptionsButton(String statusName){\r\n    return SiteService.allowUpdateSite(ToolManager.getCurrentPlacement().getContext()) && !isOnWorkspaceTab();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.CodeTemplateManager.addTemplate",
	"Comment": "registers the specified template with this template manager.",
	"Method": "void addTemplate(CodeTemplate template){\r\n    if (template == null) {\r\n        throw new IllegalArgumentException(\"template cannot be null\");\r\n    }\r\n    templates.add(template);\r\n    sortTemplates();\r\n}"
}, {
	"Path": "restx.entity.StdEntityRoute.getEntityRequestBodyType",
	"Comment": "the java type of i, the entity into which request body will be unmarshalled.",
	"Method": "Type getEntityRequestBodyType(){\r\n    return entityRequestBodyReader.getType();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern4.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function4<T1, T2, T3, T4, R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Plan4<T1, T2, T3, T4, R>(this, selector);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.operators.FlowableTransformers.timeoutLastAbsolute",
	"Comment": "emit the last item when the upstream completes or thethe latest received if the specified timeout elapsessince the start of the sequence.",
	"Method": "FlowableTransformer<T, T> timeoutLastAbsolute(long timeout,TimeUnit unit,FlowableTransformer<T, T> timeoutLastAbsolute,long timeout,TimeUnit unit,Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(unit, \"unit is null\");\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return new FlowableTimeoutLast<T>(null, timeout, unit, scheduler, true);\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.OnlyAudioBase.enableAudio",
	"Comment": "enable a muted microphone, can be called before, while and after stream.",
	"Method": "void enableAudio(){\r\n    microphoneManager.unMute();\r\n}"
}, {
	"Path": "com.rometools.fetcher.impl.HttpURLFeedFetcher.setRequestHeaders",
	"Comment": "set appropriate http headers, including conditional get and gzip encoding headers",
	"Method": "void setRequestHeaders(URLConnection connection,SyndFeedInfo syndFeedInfo,String userAgent){\r\n    if (syndFeedInfo != null) {\r\n        if (syndFeedInfo.getLastModified() != null) {\r\n            final Object lastModified = syndFeedInfo.getLastModified();\r\n            if (lastModified instanceof Long) {\r\n                connection.setIfModifiedSince((Long) syndFeedInfo.getLastModified());\r\n            }\r\n        }\r\n        if (syndFeedInfo.getETag() != null) {\r\n            connection.setRequestProperty(\"If-None-Match\", syndFeedInfo.getETag());\r\n        }\r\n    }\r\n    connection.setRequestProperty(\"Accept-Encoding\", \"gzip\");\r\n    connection.addRequestProperty(\"User-Agent\", userAgent);\r\n    if (isUsingDeltaEncoding()) {\r\n        connection.addRequestProperty(\"A-IM\", \"feed\");\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientCollection.createMediaEntry",
	"Comment": "create new media entry assocaited with collection, but do not save. server. depending on theatom server, you may or may not be able to. persist the properties of the entry that isreturned.",
	"Method": "ClientMediaEntry createMediaEntry(String title,String slug,String contentType,byte[] bytes,ClientMediaEntry createMediaEntry,String title,String slug,String contentType,InputStream is){\r\n    if (!isWritable()) {\r\n        throw new ProponoException(\"Collection is not writable\");\r\n    }\r\n    return new ClientMediaEntry(service, this, title, slug, contentType, is);\r\n}"
}, {
	"Path": "restx.factory.alternative.AlternativeTest.should_use_alternative_with_higher_priority",
	"Comment": "this test defines two alternatives, with different priorities, check that the higher is used.",
	"Method": "void should_use_alternative_with_higher_priority(){\r\n    Factory factory = Factory.newInstance();\r\n    TestAlternativesFromModule.Priority component = factory.getComponent(TestAlternativesFromModule.Priority.class);\r\n    assertThat(component.value()).isEqualTo(Integer.MAX_VALUE);\r\n    overrideComponents().set(\"restx.test.alternatives\", \"true\");\r\n    factory = Factory.newInstance();\r\n    component = factory.getComponent(TestAlternativesFromModule.Priority.class);\r\n    assertThat(component.value()).isEqualTo(Integer.MIN_VALUE);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getBackgroundImage",
	"Comment": "returns the image currently used for the background.\tif the current background is currently a java.awt.color and\tnot a java.awt.image, then null is returned.",
	"Method": "Image getBackgroundImage(){\r\n    Object bg = getBackgroundObject();\r\n    return (bg instanceof Image) ? (Image) bg : null;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.setPublishedDate",
	"Comment": "sets the feed published date.this method is a convenience method, it maps to the dublin core module date.",
	"Method": "void setPublishedDate(Date publishedDate){\r\n    getDCModule().setDate(publishedDate);\r\n}"
}, {
	"Path": "org.sakaiproject.service.gradebook.shared.CourseGrade.getTotalPointsPossible",
	"Comment": "this value is only accurate when there are no weighted categories.\tif weighting is enabled, this value will not be what you expect.\tfor this reason, this value should not be used when weighted categories are enabled.",
	"Method": "Double getTotalPointsPossible(){\r\n    return this.totalPointsPossible;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.getMonthTimeRange",
	"Comment": "given a current date via the calendarutil paramter, returns a timerange for the month.",
	"Method": "TimeRange getMonthTimeRange(CalendarUtil calendarUtil){\r\n    int dayofweek = 0;\r\n    calendarUtil.setDay(calendarUtil.getYear(), calendarUtil.getMonthInteger(), 1);\r\n    int numberOfCurrentDays = calendarUtil.getNumberOfDays();\r\n    int tempCurrentMonth = calendarUtil.getMonthInteger();\r\n    int tempCurrentYear = calendarUtil.getYear();\r\n    int firstDay_of_Month = calendarUtil.getDay_Of_Week(true) - 1;\r\n    calendarUtil.setPrevDate(firstDay_of_Month);\r\n    Time startTime = TimeService.newTimeLocal(calendarUtil.getYear(), calendarUtil.getMonthInteger(), calendarUtil.getDayOfMonth(), 00, 00, 00, 000);\r\n    calendarUtil.setDay(tempCurrentYear, tempCurrentMonth, numberOfCurrentDays);\r\n    dayofweek = calendarUtil.getDay_Of_Week(true);\r\n    if (dayofweek < 7) {\r\n        for (int i = dayofweek; i <= 6; i++) {\r\n            calendarUtil.nextDate();\r\n        }\r\n    }\r\n    Time endTime = TimeService.newTimeLocal(calendarUtil.getYear(), calendarUtil.getMonthInteger(), calendarUtil.getDayOfMonth(), 23, 59, 59, 000);\r\n    return TimeService.newTimeRange(startTime, endTime, true, true);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.getResourcesBrowseItem",
	"Comment": "get an resourcesbrowseitem object based on a given contentresource object",
	"Method": "ResourcesBrowseItem getResourcesBrowseItem(ContentResource resource){\r\n    ResourceProperties props = resource.getProperties();\r\n    String itemType = ((ContentResource) resource).getContentType();\r\n    String itemName = props.getProperty(ResourceProperties.PROP_DISPLAY_NAME);\r\n    ResourcesBrowseItem newItem = new ResourcesBrowseItem(resource.getId(), itemName, itemType);\r\n    try {\r\n        Time modTime = props.getTimeProperty(ResourceProperties.PROP_MODIFIED_DATE);\r\n        String modifiedTime = modTime.toStringLocalShortDate() + \" \" + modTime.toStringLocalShort();\r\n        newItem.setModifiedTime(modifiedTime);\r\n    } catch (Exception e) {\r\n        String modifiedTimeString = props.getProperty(ResourceProperties.PROP_MODIFIED_DATE);\r\n        newItem.setModifiedTime(modifiedTimeString);\r\n    }\r\n    try {\r\n        String modifiedBy = getUserProperty(props, ResourceProperties.PROP_MODIFIED_BY).getDisplayName();\r\n        newItem.setModifiedBy(modifiedBy);\r\n    } catch (Exception e) {\r\n        String modifiedBy = props.getProperty(ResourceProperties.PROP_MODIFIED_BY);\r\n        newItem.setModifiedBy(modifiedBy);\r\n    }\r\n    return newItem;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.doOnCancel",
	"Comment": "executes the callback if the downstream cancels the sequence.",
	"Method": "Nono doOnCancel(Action onCancel){\r\n    ObjectHelper.requireNonNull(onCancel, \"action is null\");\r\n    return onAssembly(new NonoDoOnLifecycle(this, Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, onCancel));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HostsTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.toFuture",
	"Comment": "converts this perhaps into a future and signals its singlevalue or null if this perhaps is empty.",
	"Method": "Future<T> toFuture(){\r\n    FuturePerhapsSubscriber<T> fs = new FuturePerhapsSubscriber<T>();\r\n    subscribe(fs);\r\n    return fs;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.PDFExportService.makeListViewTimeRangeList",
	"Comment": "make a list of days for use in generating an xml document for the list view.",
	"Method": "List makeListViewTimeRangeList(TimeRange timeRange,List calendarReferenceList,BaseCalendarService baseCalendarService,boolean reverseOrder){\r\n    final int DEFAULT_INITIAL_HASH_CAPACITY = 150;\r\n    List listOfDays = new ArrayList();\r\n    CalendarEventVector calendarEventVector = baseCalendarService.getEvents(calendarReferenceList, timeRange, reverseOrder);\r\n    Iterator itEvents = calendarEventVector.iterator();\r\n    HashMap datesSeenSoFar = new HashMap(DEFAULT_INITIAL_HASH_CAPACITY);\r\n    while (itEvents.hasNext()) {\r\n        CalendarEvent event = (CalendarEvent) itEvents.next();\r\n        List timeRangeList = splitTimeRangeIntoListOfSingleDayTimeRanges(event.getRange(), null);\r\n        Iterator itDatesInRange = timeRangeList.iterator();\r\n        while (itDatesInRange.hasNext()) {\r\n            TimeRange curDay = (TimeRange) itDatesInRange.next();\r\n            String curDate = curDay.firstTime().toStringLocalDate();\r\n            if (!datesSeenSoFar.containsKey(curDate)) {\r\n                TimeBreakdown startBreakDown = curDay.firstTime().breakdownLocal();\r\n                listOfDays.add(getFullDayTimeRangeFromYMD(startBreakDown.getYear(), startBreakDown.getMonth(), startBreakDown.getDay()));\r\n                datesSeenSoFar.put(curDate, \"\");\r\n            }\r\n        }\r\n    }\r\n    return listOfDays;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.summarycalendar.ui.PrefsBean.getPreferenceString",
	"Comment": "get the current user preference value. first attempt preferences, then defaults from sakai.properties.",
	"Method": "String getPreferenceString(String name){\r\n    Preferences prefs = M_ps.getPreferences(M_sm.getCurrentSessionUserId());\r\n    ResourceProperties rp = prefs.getProperties(PREFS_KEY);\r\n    String value = rp.getProperty(name);\r\n    return value;\r\n}"
}, {
	"Path": "restx.WebException.writeTo",
	"Comment": "writes this web exception in a restxresponse.this implementation uses the status, contenttype and content found on the exception.override it to provide custom response.note that the implementation is also responsible for logging the exception.",
	"Method": "void writeTo(RestxRequest restxRequest,RestxResponse restxResponse){\r\n    if (logger.isDebugEnabled()) {\r\n        logger.debug(\"request raised WebException - \" + restxRequest, this);\r\n    }\r\n    restxResponse.setStatus(getStatus());\r\n    restxResponse.setContentType(getContentType());\r\n    restxResponse.getWriter().print(getContent());\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ListItem.hasRoleEnabled",
	"Comment": "checks whether the list item has the role access set for this role.",
	"Method": "boolean hasRoleEnabled(String roleId){\r\n    return this.roleIds.contains(roleId);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LatexTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.ParameterMap.getParameterMapName",
	"Comment": "get the parameter name associated with the 1st occurance of this value",
	"Method": "String getParameterMapName(String value){\r\n    Iterator iterator = getParameterMapIterator();\r\n    while (iterator.hasNext()) {\r\n        Map.Entry entry = (Map.Entry) iterator.next();\r\n        String mapValue = (String) ((String) entry.getValue());\r\n        if (mapValue.equals(value)) {\r\n            return (String) ((String) entry.getKey()).substring(PREFIXSIZE);\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.rometools.utils.Lists.firstEntry",
	"Comment": "extracts the first entry of the list when it is not null and contains values.",
	"Method": "T firstEntry(List<T> list){\r\n    if (list != null && !list.isEmpty()) {\r\n        return list.get(0);\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LispTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.util.CalendarUtil.getCalendarInstance",
	"Comment": "this creates a calendar based on the clock. this is to allow testing of the class.",
	"Method": "Calendar getCalendarInstance(){\r\n    Calendar instance = Calendar.getInstance();\r\n    instance.setTime(Date.from(clock.instant()));\r\n    return instance;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.updateAssignment",
	"Comment": "update assignment. this method is not currently called by assignments 1.",
	"Method": "void updateAssignment(String siteId,String taskId){\r\n    log.info(\"updateAssignment(\" + siteId + \" , \" + taskId + \")\");\r\n    String taskTitle = getAssignmentTitle(taskId);\r\n    log.debug(\"Creating assignment for site: \" + siteId + \", task: \" + taskId + \" tasktitle: \" + taskTitle);\r\n    SimpleDateFormat dform = ((SimpleDateFormat) DateFormat.getDateInstance());\r\n    dform.applyPattern(TURNITIN_DATETIME_FORMAT);\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.add(Calendar.DAY_OF_MONTH, -1);\r\n    String dtstart = dform.format(cal.getTime());\r\n    cal.add(Calendar.MONTH, 5);\r\n    String dtdue = dform.format(cal.getTime());\r\n    String fcmd = \"3\";\r\n    String fid = \"4\";\r\n    String utp = \"2\";\r\n    String s_view_report = \"1\";\r\n    String erater = \"0\";\r\n    String ets_handbook = \"1\";\r\n    String ets_dictionary = \"en\";\r\n    String ets_spelling = \"1\";\r\n    String ets_style = \"1\";\r\n    String ets_grammar = \"1\";\r\n    String ets_mechanics = \"1\";\r\n    String ets_usage = \"1\";\r\n    String cid = siteId;\r\n    String assignid = taskId;\r\n    String assign = taskTitle;\r\n    String ctl = siteId;\r\n    String assignEnc = assign;\r\n    try {\r\n        if (assign.contains(\"&\")) {\r\n            assign = assign.replace('&', 'n');\r\n        }\r\n        assignEnc = assign;\r\n        log.debug(\"Assign title is \" + assignEnc);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    Map params = TurnitinAPIUtil.packMap(turnitinConn.getBaseTIIOptions(), \"assign\", assignEnc, \"assignid\", assignid, \"cid\", cid, \"ctl\", ctl, \"dtdue\", dtdue, \"dtstart\", dtstart, \"fcmd\", fcmd, \"fid\", fid, \"s_view_report\", s_view_report, \"utp\", utp, \"erater\", erater, \"ets_handbook\", ets_handbook, \"ets_dictionary\", ets_dictionary, \"ets_spelling\", ets_spelling, \"ets_style\", ets_style, \"ets_grammar\", ets_grammar, \"ets_mechanics\", ets_mechanics, \"ets_usage\", ets_usage);\r\n    params.putAll(getInstructorInfo(siteId));\r\n    Document document = null;\r\n    try {\r\n        document = turnitinConn.callTurnitinReturnDocument(params);\r\n    } catch (TransientSubmissionException tse) {\r\n        log.error(\"Error on API call in updateAssignment siteid: \" + siteId + \" taskid: \" + taskId, tse);\r\n        return;\r\n    } catch (SubmissionException se) {\r\n        log.error(\"Error on API call in updateAssignment siteid: \" + siteId + \" taskid: \" + taskId, se);\r\n        return;\r\n    }\r\n    Element root = document.getDocumentElement();\r\n    int rcode = new Integer(((CharacterData) (root.getElementsByTagName(\"rcode\").item(0).getFirstChild())).getData().trim()).intValue();\r\n    if ((rcode > 0 && rcode < 100) || rcode == 419) {\r\n        log.debug(\"Create Assignment successful\");\r\n    } else {\r\n        log.debug(\"Assignment creation failed with message: \" + ((CharacterData) (root.getElementsByTagName(\"rmessage\").item(0).getFirstChild())).getData().trim() + \". Code: \" + rcode);\r\n        throw new SubmissionException(\"Create Assignment not successful. Message: \" + ((CharacterData) (root.getElementsByTagName(\"rmessage\").item(0).getFirstChild())).getData().trim() + \". Code: \" + rcode);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.FortranTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaibrary.osid.repository.xserver.AssetIterator.characters",
	"Comment": "receive notification of character data inside an element.",
	"Method": "void characters(char[] buf,int offset,int len){\r\n    String text = new String(buf, offset, len);\r\n    if (textBuffer == null) {\r\n        textBuffer = new StringBuilder(text);\r\n    } else {\r\n        textBuffer.append(text);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.openurl.URLBuilder.append",
	"Comment": "append some existing data that has already been encoded and put together.",
	"Method": "URLBuilder append(String key,String value,URLBuilder append,String data){\r\n    if (url.length() > 0 && !data.startsWith(SEPERATOR)) {\r\n        this.url.append(SEPERATOR);\r\n    }\r\n    this.url.append(data);\r\n    return this;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern1.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function<? super T1, ? extends R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Plan1<T1, R>(this, selector);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.CanonicalCourseEntityProvider.create",
	"Comment": "create a new canonical course. wraps coursemanagementadministration.createcanonicalcourse.",
	"Method": "void create(Object entity){\r\n    CanonicalCourseData data = (CanonicalCourseData) entity;\r\n    cmAdmin.createCanonicalCourse(data.eid, data.title, data.description);\r\n}"
}, {
	"Path": "com.rometools.modules.cc.types.License.clear",
	"Comment": "this is just useful for testing to allow clearing of the looked up licenses.",
	"Method": "void clear(){\r\n    lookupLicense.clear();\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDelivery.setElement",
	"Comment": "set the html element id that this delivery is in reference to.",
	"Method": "void setElement(String id){\r\n    m_elementId = id;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getRelation",
	"Comment": "gets the dublincore module relation. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getRelation(){\r\n    return Lists.firstEntry(relation);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.retryWhen",
	"Comment": "retry this nono when the publisher returned by the handler functionsignals a normal item or terminate if the publisher terminates.",
	"Method": "Nono retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler){\r\n    ObjectHelper.requireNonNull(handler, \"handler is null\");\r\n    return onAssembly(new NonoRetryWhen(this, handler));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.subscribeWith",
	"Comment": "subscribe with the given subscriber and return the same subscriber, allowingchaining methods on it or fluently reusing the instance.",
	"Method": "E subscribeWith(E subscriber){\r\n    subscribe((Subscriber<Object>) subscriber);\r\n    return subscriber;\r\n}"
}, {
	"Path": "com.rometools.modules.atom.AtomLinkTest.testGetNamespaceUri",
	"Comment": "test of getnamespaceuri method, of class com.rometools.rome.feed.module.sse.sse091",
	"Method": "void testGetNamespaceUri(){\r\n    assertEquals(\"Namespace\", AtomLinkModule.URI, new AtomModuleGenerator().getNamespaceUri());\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.extension.EntityData.getEntityProperties",
	"Comment": "a set of properties to return along with the entity information,this may be presented and used for filtering,this will be empty if it is not used",
	"Method": "Map<String, Object> getEntityProperties(){\r\n    if (entityProperties == null) {\r\n        entityProperties = new HashMap<String, Object>(0);\r\n    }\r\n    return entityProperties;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.timeout",
	"Comment": "switch to the fallback perhaps if the other publisher signals an item orcompletes before this perhaps does.",
	"Method": "Perhaps<T> timeout(long timeout,TimeUnit unit,Perhaps<T> timeout,long timeout,TimeUnit unit,Scheduler scheduler,Perhaps<T> timeout,long timeout,TimeUnit unit,Perhaps<? extends T> fallback,Perhaps<T> timeout,long timeout,TimeUnit unit,Scheduler scheduler,Perhaps<? extends T> fallback,Perhaps<T> timeout,Publisher<?> other,Perhaps<T> timeout,Publisher<?> other,Perhaps<? extends T> fallback){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    ObjectHelper.requireNonNull(fallback, \"fallback is null\");\r\n    return onAssembly(new PerhapsTimeout<T>(this, other, fallback));\r\n}"
}, {
	"Path": "net.oauth.signature.RSA_SHA1.loadPublicKey",
	"Comment": "load a public key from key file or certificate. it can load fromdifferent sources depending on the type of the input,a publickey objecta x509certificate objecta string buffer for pema byte array with x509 encoded key or certificate",
	"Method": "PublicKey loadPublicKey(Object publicKeyObject,boolean isCert){\r\n    PublicKey publicKey;\r\n    if (publicKeyObject instanceof PublicKey) {\r\n        publicKey = (PublicKey) publicKeyObject;\r\n    } else if (publicKeyObject instanceof X509Certificate) {\r\n        publicKey = ((X509Certificate) publicKeyObject).getPublicKey();\r\n    } else if (publicKeyObject instanceof String) {\r\n        try {\r\n            publicKey = getPublicKeyFromPem((String) publicKeyObject);\r\n        } catch (IOException e) {\r\n            if (isCert)\r\n                throw e;\r\n            publicKey = getPublicKeyFromDer(decodeBase64((String) publicKeyObject));\r\n        }\r\n    } else if (publicKeyObject instanceof byte[]) {\r\n        if (isCert)\r\n            publicKey = getPublicKeyFromDerCert((byte[]) publicKeyObject);\r\n        else\r\n            publicKey = getPublicKeyFromDer((byte[]) publicKeyObject);\r\n    } else {\r\n        String source;\r\n        if (isCert)\r\n            source = \"RSA_SHA1.X509_CERTIFICATE\";\r\n        else\r\n            source = \"RSA_SHA1.PUBLIC_KEY\";\r\n        throw new IllegalArgumentException(\"Public key or certificate set through \" + source + \" must be of \" + \"type PublicKey, String or byte[], and not \" + publicKeyObject.getClass().getName());\r\n    }\r\n    return publicKey;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.LatexTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.eventSubscriptionReference",
	"Comment": "access the internal reference which can be used to access the subscripted event from within the system.",
	"Method": "String eventSubscriptionReference(String context,String calendarId,String id){\r\n    return getAccessPoint(true) + Entity.SEPARATOR + REF_TYPE_EVENT_SUBSCRIPTION + Entity.SEPARATOR + context + Entity.SEPARATOR + calendarId + Entity.SEPARATOR + id;\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.fromPrivateAndPrecalculatedPublic",
	"Comment": "creates an eckey that simply trusts the caller to ensure that point is really the result of multiplying thegenerator point by the private key. this is used to speed things up when you know you have the right valuesalready. the compression state of the point will be preserved.",
	"Method": "ECKey fromPrivateAndPrecalculatedPublic(BigInteger priv,ECPoint pub,ECKey fromPrivateAndPrecalculatedPublic,byte[] priv,byte[] pub){\r\n    check(priv != null, \"Private key must not be null\");\r\n    check(pub != null, \"Public key must not be null\");\r\n    return new ECKey(new BigInteger(1, priv), CURVE.getCurve().decodePoint(pub));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.ambWith",
	"Comment": "signals the events of this or the other perhaps whicheversignals first.",
	"Method": "Perhaps<T> ambWith(Perhaps<? extends T> other){\r\n    return ambArray(this, other);\r\n}"
}, {
	"Path": "org.sakaiproject.service.gradebook.shared.CourseGrade.getDisplayGrade",
	"Comment": "helper to get a grade override preferentially, or fallback to the standard mapped grade.",
	"Method": "String getDisplayGrade(){\r\n    return (StringUtils.isNotBlank(getEnteredGrade()) ? getEnteredGrade() : getMappedGrade());\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.put",
	"Comment": "put string key to value, the key is converted to byte arrayutility method to be used from testing",
	"Method": "Trie put(byte[] key,byte[] value,Trie put,String key,byte[] value,TrieImpl put,byte[] key,int length,int keyPosition,byte[] value){\r\n    TrieImpl trie = this.internalPut(key, length, keyPosition, value);\r\n    if (trie == null || value != null) {\r\n        return trie;\r\n    }\r\n    if (isEmptyTrie(trie.value, trie.nodes, trie.hashes)) {\r\n        return null;\r\n    }\r\n    if (trie.value != null || trie.getNodeCount() != 1) {\r\n        return trie;\r\n    }\r\n    TrieImpl firstChild = null;\r\n    int firstChildPosition = 0;\r\n    for (int k = 0; firstChild == null && k < ARITY; k++) {\r\n        firstChildPosition = k;\r\n        firstChild = (TrieImpl) trie.retrieveNode(k);\r\n    }\r\n    if (firstChild == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    byte[] trieSharedPath;\r\n    byte[] positionPath = new byte[] { (byte) firstChildPosition };\r\n    if (trie.sharedPathLength == 0) {\r\n        trieSharedPath = positionPath;\r\n    } else {\r\n        trieSharedPath = ByteUtils.concatenate(PathEncoder.decode(trie.encodedSharedPath, trie.sharedPathLength), positionPath);\r\n    }\r\n    byte[] newSharedPath;\r\n    if (firstChild.sharedPathLength == 0) {\r\n        newSharedPath = trieSharedPath;\r\n    } else {\r\n        byte[] childSharedPath = PathEncoder.decode(firstChild.encodedSharedPath, firstChild.sharedPathLength);\r\n        newSharedPath = ByteUtils.concatenate(trieSharedPath, childSharedPath);\r\n    }\r\n    TrieImpl newTrie = (TrieImpl) firstChild.cloneTrie();\r\n    newTrie.sharedPathLength = newSharedPath.length;\r\n    newTrie.encodedSharedPath = PathEncoder.encode(newSharedPath);\r\n    return newTrie;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.HtaccessTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PHPTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    phpInState = YYINITIAL;\r\n    cssPrevState = CSS;\r\n    int languageIndex = LANG_INDEX_DEFAULT;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.MARKUP_COMMENT:\r\n            state = COMMENT;\r\n            break;\r\n        case Token.VARIABLE:\r\n            state = DTD;\r\n            break;\r\n        case INTERNAL_INTAG:\r\n            state = INTAG;\r\n            break;\r\n        case INTERNAL_INTAG_SCRIPT:\r\n            state = INTAG_SCRIPT;\r\n            break;\r\n        case INTERNAL_INTAG_STYLE:\r\n            state = INTAG_STYLE;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE:\r\n            state = INATTR_DOUBLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE:\r\n            state = INATTR_SINGLE;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT:\r\n            state = INATTR_DOUBLE_SCRIPT;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT:\r\n            state = INATTR_SINGLE_SCRIPT;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE_QUOTE_STYLE:\r\n            state = INATTR_DOUBLE_STYLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE_QUOTE_STYLE:\r\n            state = INATTR_SINGLE_STYLE;\r\n            break;\r\n        case INTERNAL_IN_JS:\r\n            state = JAVASCRIPT;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_MLC:\r\n            state = JS_MLC;\r\n            languageIndex = LANG_INDEX_JS;\r\n            break;\r\n        case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:\r\n            state = JS_DOCCOMMENT;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_INVALID:\r\n            state = JS_STRING;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_VALID:\r\n            state = JS_STRING;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_INVALID:\r\n            state = JS_CHAR;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_VALID:\r\n            state = JS_CHAR;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_CSS:\r\n            state = CSS;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_CSS_PROPERTY:\r\n            state = CSS_PROPERTY;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_CSS_VALUE:\r\n            state = CSS_VALUE;\r\n            languageIndex = LANG_INDEX_CSS;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            languageIndex = LANG_INDEX_JS;\r\n            validJSString = false;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0x0000ff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_IN_PHP:\r\n                        state = PHP;\r\n                        languageIndex = LANG_INDEX_PHP;\r\n                        phpInState = -initialTokenType & 0xff;\r\n                        phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;\r\n                        break;\r\n                    case INTERNAL_IN_PHP_MLC:\r\n                        state = PHP_MLC;\r\n                        languageIndex = LANG_INDEX_PHP;\r\n                        phpInState = -initialTokenType & 0xff;\r\n                        phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;\r\n                        break;\r\n                    case INTERNAL_IN_PHP_STRING:\r\n                        state = PHP_STRING;\r\n                        languageIndex = LANG_INDEX_PHP;\r\n                        phpInState = -initialTokenType & 0xff;\r\n                        phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;\r\n                        break;\r\n                    case INTERNAL_IN_PHP_CHAR:\r\n                        state = PHP_CHAR;\r\n                        languageIndex = LANG_INDEX_PHP;\r\n                        phpInState = -initialTokenType & 0xff;\r\n                        phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;\r\n                        break;\r\n                    case INTERNAL_CSS_STRING:\r\n                        state = CSS_STRING;\r\n                        languageIndex = LANG_INDEX_CSS;\r\n                        cssPrevState = -initialTokenType & 0xff;\r\n                        break;\r\n                    case INTERNAL_CSS_CHAR:\r\n                        state = CSS_CHAR_LITERAL;\r\n                        languageIndex = LANG_INDEX_CSS;\r\n                        cssPrevState = -initialTokenType & 0xff;\r\n                        break;\r\n                    case INTERNAL_CSS_MLC:\r\n                        state = CSS_C_STYLE_COMMENT;\r\n                        languageIndex = LANG_INDEX_CSS;\r\n                        cssPrevState = -initialTokenType & 0xff;\r\n                        break;\r\n                }\r\n            } else {\r\n                state = YYINITIAL;\r\n            }\r\n            break;\r\n    }\r\n    setLanguageIndex(languageIndex);\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "restx.stats.RestxStatsCollector.getStats",
	"Comment": "get the current stats.this also updates the stats with latest heap size and uptime information.",
	"Method": "RestxStats getStats(){\r\n    updateUptime();\r\n    updateHeapSize();\r\n    touch();\r\n    return stats;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconGroup.getIcon",
	"Comment": "returns the icon from this icon group with the specified name.",
	"Method": "Icon getIcon(String name){\r\n    Icon icon = getIconImpl(path + name + \".\" + extension);\r\n    if (icon != null && (icon.getIconWidth() < 1 || icon.getIconHeight() < 1)) {\r\n        icon = null;\r\n    }\r\n    return icon;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.entityproviders.AssignmentEntityProvider.getHandledOutputFormats",
	"Comment": "html is deliberately not handled here, so that it will be handled by redirectingassignmententityservlet",
	"Method": "String[] getHandledOutputFormats(){\r\n    return new String[] { Formats.XML, Formats.JSON, Formats.FORM };\r\n}"
}, {
	"Path": "co.rsk.crypto.Keccak256.getBytes",
	"Comment": "returns the internal byte array, without defensively copying. therefore do not modify the returned array.",
	"Method": "byte[] getBytes(){\r\n    return bytes;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.LineHighlightManager.repaintLine",
	"Comment": "repaints the line pointed to by the specified highlight information.",
	"Method": "void repaintLine(LineHighlightInfo lhi){\r\n    int offs = lhi.getOffset();\r\n    if (offs >= 0 && offs <= textArea.getDocument().getLength()) {\r\n        try {\r\n            int y = textArea.yForLineContaining(offs);\r\n            if (y > -1) {\r\n                textArea.repaint(0, y, textArea.getWidth(), textArea.getLineHeight());\r\n            }\r\n        } catch (BadLocationException ble) {\r\n            ble.printStackTrace();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern4.and",
	"Comment": "creates a pattern that matches when all four observable sequences have an available element.",
	"Method": "Pattern5<T1, T2, T3, T4, T5> and(Observable<T5> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Pattern5<T1, T2, T3, T4, T5>(o1, o2, o3, o4, other);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.demo.SyntaxSchemeDemo.changeStyleViaThemeXml",
	"Comment": "changes the styles used by the editor via an xml file specification. this method is preferred because of its ease and modularity.",
	"Method": "void changeStyleViaThemeXml(){\r\n    try {\r\n        Theme theme = Theme.load(getClass().getResourceAsStream(\"/org/fife/ui/rsyntaxtextarea/themes/eclipse.xml\"));\r\n        theme.apply(textArea);\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementSingle.switchCase",
	"Comment": "return a particular one of several possible singles based on a caseselector, or a default single if the case selector does not map toa particular one.",
	"Method": "Single<R> switchCase(Callable<? extends K> caseSelector,Map<? super K, ? extends SingleSource<? extends R>> mapOfCases,SingleSource<? extends R> defaultCase){\r\n    ObjectHelper.requireNonNull(caseSelector, \"caseSelector is null\");\r\n    ObjectHelper.requireNonNull(mapOfCases, \"mapOfCases is null\");\r\n    ObjectHelper.requireNonNull(defaultCase, \"defaultCase is null\");\r\n    return RxJavaPlugins.onAssembly(new SingleSwitchCase<R, K>(caseSelector, mapOfCases, defaultCase));\r\n}"
}, {
	"Path": "com.pedro.encoder.video.VideoEncoder.extractVpsSpsPpsFromH265",
	"Comment": "you need find 0 0 0 1 byte sequence that is the initiation of vps, sps and ppsbuffers.",
	"Method": "List<ByteBuffer> extractVpsSpsPpsFromH265(ByteBuffer csd0byteBuffer){\r\n    List<ByteBuffer> byteBufferList = new ArrayList();\r\n    int vpsPosition = -1;\r\n    int spsPosition = -1;\r\n    int ppsPosition = -1;\r\n    int contBufferInitiation = 0;\r\n    byte[] csdArray = csd0byteBuffer.array();\r\n    for (int i = 0; i < csdArray.length; i++) {\r\n        if (contBufferInitiation == 3 && csdArray[i] == 1) {\r\n            if (vpsPosition == -1) {\r\n                vpsPosition = i - 3;\r\n            } else if (spsPosition == -1) {\r\n                spsPosition = i - 3;\r\n            } else {\r\n                ppsPosition = i - 3;\r\n            }\r\n        }\r\n        if (csdArray[i] == 0) {\r\n            contBufferInitiation++;\r\n        } else {\r\n            contBufferInitiation = 0;\r\n        }\r\n    }\r\n    byte[] vps = new byte[spsPosition];\r\n    byte[] sps = new byte[ppsPosition - spsPosition];\r\n    byte[] pps = new byte[csdArray.length - ppsPosition];\r\n    for (int i = 0; i < csdArray.length; i++) {\r\n        if (i < spsPosition) {\r\n            vps[i] = csdArray[i];\r\n        } else if (i < ppsPosition) {\r\n            sps[i - spsPosition] = csdArray[i];\r\n        } else {\r\n            pps[i - ppsPosition] = csdArray[i];\r\n        }\r\n    }\r\n    byteBufferList.add(ByteBuffer.wrap(vps));\r\n    byteBufferList.add(ByteBuffer.wrap(sps));\r\n    byteBufferList.add(ByteBuffer.wrap(pps));\r\n    return byteBufferList;\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.hasRole",
	"Comment": "this permission is true as soon as the principal has the given role",
	"Method": "Permission hasRole(String role){\r\n    return new Permission() {\r\n        public final String TO_STRING = \"HAS_ROLE[\" + role + \"]\";\r\n        @Override\r\n        public Optional<? extends Permission> has(RestxPrincipal principal, Map<String, String> roleInterpolationMap) {\r\n            if (principal.getPrincipalRoles().contains(\"*\")) {\r\n                return Optional.of(this);\r\n            }\r\n            String interpolatedRole = interpolateRole(role, roleInterpolationMap);\r\n            if (principal.getPrincipalRoles().contains(interpolatedRole)) {\r\n                return Optional.of(this);\r\n            }\r\n            return Optional.absent();\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return TO_STRING;\r\n        }\r\n    };\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.hasRole",
	"Comment": "this permission is true as soon as the principal has the given role",
	"Method": "Permission hasRole(String role){\r\n    if (principal.getPrincipalRoles().contains(\"*\")) {\r\n        return Optional.of(this);\r\n    }\r\n    String interpolatedRole = interpolateRole(role, roleInterpolationMap);\r\n    if (principal.getPrincipalRoles().contains(interpolatedRole)) {\r\n        return Optional.of(this);\r\n    }\r\n    return Optional.absent();\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.hasRole",
	"Comment": "this permission is true as soon as the principal has the given role",
	"Method": "Permission hasRole(String role){\r\n    return TO_STRING;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getCoverage",
	"Comment": "gets the dublincore module coverage. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getCoverage(){\r\n    return Lists.firstEntry(coverage);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.fireParserNoticesChange",
	"Comment": "fires a notification that the parser notices for this text area have\tchanged.",
	"Method": "void fireParserNoticesChange(){\r\n    firePropertyChange(PARSER_NOTICES_PROPERTY, null, null);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchContext.getSearchSelectionOnly",
	"Comment": "returns whether the search should only be done in the selected text.\tthis flag is currently not supported.",
	"Method": "boolean getSearchSelectionOnly(){\r\n    return selectionOnly;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.sru.CqlParser.translateBooleanRelation",
	"Comment": "translate a cql boolean term to the appropriate 360 search syntax",
	"Method": "String translateBooleanRelation(String booleanRelation){\r\n    String s360Boolean = (String) BOOL_RELATION_MAP.get(booleanRelation);\r\n    if (s360Boolean == null || s360Boolean.equals(\"\")) {\r\n        log.error(\"translateBooleanRelation(): bad boolean relation, using AND\");\r\n        s360Boolean = (String) BOOL_RELATION_MAP.get(\"and\");\r\n    }\r\n    return s360Boolean;\r\n}"
}, {
	"Path": "com.rometools.rome.feed.impl.BeanIntrospector.decapitalize",
	"Comment": "make first character lower case unless the second character is upper case.",
	"Method": "String decapitalize(String name){\r\n    if (name.isEmpty() || (name.length() > 1 && Character.isUpperCase(name.charAt(1)))) {\r\n        return name;\r\n    }\r\n    char[] chars = name.toCharArray();\r\n    chars[0] = Character.toLowerCase(chars[0]);\r\n    return new String(chars);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.TypeScriptTokenMaker.setE4xSupported",
	"Comment": "sets whether e4x should be highlighted.a repaint should be forced on\tall rsyntaxtextareas editing javascript if this property\tis changed to see the difference.",
	"Method": "void setE4xSupported(boolean supported){\r\n    e4xSupported = supported;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.EntityView.setEntityReference",
	"Comment": "allows for easy chained construction of entityviews by setting an entityreference,does not set the viewkey or extension unless they are unset, maintains current extension",
	"Method": "EntityView setEntityReference(EntityReference ref){\r\n    if (ref == null) {\r\n        throw new IllegalArgumentException(\"ref cannot be null\");\r\n    }\r\n    if (this.pathSegments == null) {\r\n        this.pathSegments = new HashMap<String, String>();\r\n    }\r\n    this.pathSegments.put(PREFIX, ref.getPrefix());\r\n    if (ref.getId() != null) {\r\n        this.pathSegments.put(ID, ref.getId());\r\n    }\r\n    if (this.viewKey == null) {\r\n        String viewKey = VIEW_LIST;\r\n        if (ref.getId() != null) {\r\n            viewKey = VIEW_SHOW;\r\n        }\r\n        setViewKey(viewKey);\r\n    } else {\r\n        if (VIEW_SHOW.equals(this.viewKey) && ref.getId() == null) {\r\n            this.viewKey = VIEW_LIST;\r\n        }\r\n    }\r\n    this.entityReference = ref;\r\n    return this;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SquiggleUnderlineHighlightPainter.paintSquiggle",
	"Comment": "paints a squiggle underneath text in the specified rectangle.",
	"Method": "void paintSquiggle(Graphics g,Rectangle r){\r\n    int x = r.x;\r\n    int y = r.y + r.height - AMT;\r\n    int delta = -AMT;\r\n    while (x < r.x + r.width) {\r\n        g.drawLine(x, y, x + AMT, y + delta);\r\n        y += delta;\r\n        delta = -delta;\r\n        x += AMT;\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.io.XmlReaderException.getXmlEncoding",
	"Comment": "returns the encoding found in the xml prolog of the inputstream.",
	"Method": "String getXmlEncoding(){\r\n    return xmlEncoding;\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Sharing.getWindow",
	"Comment": "provides an integer that expresses the size of the window of change history kept by thepublisher. subscribers may use this value to determine the frequency with which they mustread a feed.",
	"Method": "Integer getWindow(){\r\n    return window;\r\n}"
}, {
	"Path": "com.github.faucamp.simplertmp.io.ChunkStreamInfo.markDeltaTimestampTx",
	"Comment": "utility method for calculating & synchronizing transmitted timestamp deltas",
	"Method": "long markDeltaTimestampTx(){\r\n    long currentTimestamp = System.nanoTime() / 1000000;\r\n    long diffTimestamp = currentTimestamp - realLastTimestamp;\r\n    realLastTimestamp = currentTimestamp;\r\n    return diffTimestamp;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.extension.EntityData.getEntityRef",
	"Comment": "the entity reference object which makes it easy to get to the prefix or id of this entity if needed",
	"Method": "EntityReference getEntityRef(){\r\n    return entityRef;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.MembershipEntityProvider.handleSiteMemberships",
	"Comment": "handle the special needs of ux site membership settings, either getting the current list ofsite memberships via a get request, or creating a new batch of site memberships via a postrequest. in the case of a post, special http response headers will be used to communicatesuccess or warning conditions to the client.",
	"Method": "ActionReturn handleSiteMemberships(EntityView view,Map<String, Object> params){\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"handleSiteMemberships method=\" + view.getMethod() + \", params=\" + params);\r\n    String siteId = view.getPathSegment(2);\r\n    if (siteId == null) {\r\n        siteId = (String) params.get(\"siteId\");\r\n        if (siteId == null) {\r\n            throw new IllegalArgumentException(\"siteId must be set in order to get site memberships, set in params or in the URL /membership/site/siteId\");\r\n        }\r\n    }\r\n    String locationReference = \"/site/\" + siteId;\r\n    Map<String, String> extraResponseHeaders = null;\r\n    if (EntityView.Method.POST.name().equals(view.getMethod())) {\r\n        extraResponseHeaders = createBatchMemberships(view, params, locationReference);\r\n    }\r\n    List<EntityData> l = getEntities(new EntityReference(PREFIX, \"\"), new Search(CollectionResolvable.SEARCH_LOCATION_REFERENCE, locationReference));\r\n    ActionReturn actionReturn = new ActionReturn(l, view.getFormat());\r\n    if ((extraResponseHeaders != null) && !extraResponseHeaders.isEmpty()) {\r\n        actionReturn.setHeaders(extraResponseHeaders);\r\n    }\r\n    return actionReturn;\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Related.getTitle",
	"Comment": "title an optional, string attribute. the name or description of the related feed.",
	"Method": "String getTitle(){\r\n    return title;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.merge",
	"Comment": "merge the values in arbitrary order from a sequence of perhaps sources.",
	"Method": "Flowable<T> merge(Iterable<? extends Perhaps<? extends T>> sources,Flowable<T> merge,Iterable<? extends Perhaps<? extends T>> sources,int maxConcurrency,Flowable<T> merge,Publisher<? extends Perhaps<? extends T>> sources,Flowable<T> merge,Publisher<? extends Perhaps<? extends T>> sources,int maxConcurrency){\r\n    return Flowable.merge(sources, maxConcurrency);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.WireFeed.setFeedType",
	"Comment": "sets the feedtype of a the feed. do not use, for bean cloning purposes only.",
	"Method": "void setFeedType(String feedType){\r\n    this.feedType = feedType;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit.getActions",
	"Comment": "fetches the set of commands that can be used\ton a text component that is using a model and\tview produced by this kit.",
	"Method": "Action[] getActions(){\r\n    return TextAction.augmentList(super.getActions(), RSyntaxTextAreaEditorKit.defaultActions);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.retryWhen",
	"Comment": "retry this solo if the publisher returned by the handler signals an itemin response to the failure throwable.",
	"Method": "Solo<T> retryWhen(Function<? super Flowable<Throwable>, ? extends Publisher<?>> handler){\r\n    ObjectHelper.requireNonNull(handler, \"handler is null\");\r\n    return onAssembly(new SoloRetryWhen<T>(this, handler));\r\n}"
}, {
	"Path": "co.rsk.scoring.ScoringCalculator.hasGoodReputation",
	"Comment": "calculates the reputation of a peer scoringcurrent implementation assigns not good reputation to peershaving any invalid transaction or invalid block recorded events",
	"Method": "boolean hasGoodReputation(PeerScoring scoring){\r\n    return scoring.getEventCounter(EventType.INVALID_BLOCK) < 1 && scoring.getEventCounter(EventType.INVALID_MESSAGE) < 1 && scoring.getEventCounter(EventType.INVALID_HEADER) < 1;\r\n}"
}, {
	"Path": "com.pedro.encoder.utils.gl.gif.GifHeaderParser.skip",
	"Comment": "skips variable length blocks up to and including next zero length block.",
	"Method": "void skip(){\r\n    try {\r\n        int blockSize;\r\n        do {\r\n            blockSize = read();\r\n            rawData.position(rawData.position() + blockSize);\r\n        } while (blockSize > 0);\r\n    } catch (IllegalArgumentException ex) {\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testJobs2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testJobs2Parse(){\r\n    LOG.debug(\"testJobs2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/jobs2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Job module = (Job) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Coordinator\", \"Google\", \"Online Support\" }, module.getLabels());\r\n    this.assertEquals(\"Industriy\", new String[] { \"Internet\" }, module.getJobIndustries());\r\n    Assert.assertEquals(\"Employer\", \"Google, Inc\", module.getEmployer());\r\n    this.assertEquals(\"Job Function\", new String[] { \"Google Coordinator\" }, module.getJobFunctions());\r\n    LOG.debug(\"{}\", new Object[] { module.getJobTypes() });\r\n    this.assertEquals(\"Job Type\", new String[] { \"full-time\" }, module.getJobTypes());\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, module.getCurrency());\r\n    Assert.assertEquals(\"Salary\", new Float(40000), module.getSalary());\r\n    Assert.assertEquals(\"Salary Type\", PriceTypeEnumeration.STARTING, module.getSalaryType());\r\n    Assert.assertEquals(\"Education\", \"BS\", module.getEducation());\r\n    Assert.assertEquals(\"Immigration\", \"Permanent Resident\", module.getImmigrationStatus());\r\n    Assert.assertEquals(\"Location\", \"1600 Amphitheatre Parkway, Mountain View, CA, 94043, USA\", module.getLocation());\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesMetadata.incrementCount",
	"Comment": "increments the currentcount if it is less than maxcardinality.",
	"Method": "void incrementCount(){\r\n    if (this.getCurrentCount() < m_maxCardinality) {\r\n        this.setCurrentCount(this.m_currentCount + 1);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextArea.createPopupMenuItem",
	"Comment": "creates and configures a menu item for used in the popup menu.",
	"Method": "JMenuItem createPopupMenuItem(Action a){\r\n    JMenuItem item = new JMenuItem(a) {\r\n        @Override\r\n        public void setToolTipText(String text) {\r\n        }\r\n    };\r\n    item.setAccelerator(null);\r\n    return item;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextArea.createPopupMenuItem",
	"Comment": "creates and configures a menu item for used in the popup menu.",
	"Method": "JMenuItem createPopupMenuItem(Action a){\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenMakerBase.createOccurrenceMarker",
	"Comment": "returns the occurrence marker to use for this token maker.subclasses\tcan override to use different implementations.",
	"Method": "OccurrenceMarker createOccurrenceMarker(){\r\n    return new DefaultOccurrenceMarker();\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.AtomClientServerTest.testSimpleEntryPostUpdateAndRemove",
	"Comment": "tests that entries can be posted, updated and removed in all collections that accept entries.fails if no collections found that accept entries.",
	"Method": "void testSimpleEntryPostUpdateAndRemove(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element2 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element2;\r\n            if (col.accepts(Collection.ENTRY_TYPE)) {\r\n                final ClientEntry m1 = col.createEntry();\r\n                m1.setTitle(col.getTitle() + \": Test post\");\r\n                final Content c = new Content();\r\n                c.setValue(\"This is a test post\");\r\n                c.setType(\"html\");\r\n                m1.setContent(c);\r\n                col.addEntry(m1);\r\n                final ClientEntry m2 = col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                m2.setTitle(col.getTitle() + \": Updated title\");\r\n                m2.update();\r\n                final ClientEntry m3 = col.getEntry(m1.getEditURI());\r\n                assertEquals(col.getTitle() + \": Updated title\", m3.getTitle());\r\n                m3.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.AbstractITunesObject.getExplicit",
	"Comment": "boolean as to whether this feed or entry contains adult content",
	"Method": "boolean getExplicit(){\r\n    return explicit != null ? explicit : false;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.subscribe",
	"Comment": "subscribes to this perhaps and calls the appropriate callback for the resulting signal.",
	"Method": "void subscribe(Subscriber<? super T> s,Disposable subscribe,Disposable subscribe,Consumer<? super T> onNext,Disposable subscribe,Consumer<? super T> onNext,Consumer<? super Throwable> onError,Disposable subscribe,Consumer<? super T> onNext,Consumer<? super Throwable> onError,Action onComplete){\r\n    LambdaSubscriber<T> s = new LambdaSubscriber<T>(onNext, onError, onComplete, Functions.REQUEST_MAX);\r\n    subscribe(s);\r\n    return s;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.SearchEngine.getNextMatchPos",
	"Comment": "searches searchin for an occurrence of\tsearchfor either forwards or backwards, matching\tcase or not.\tmost clients will have no need to call this method directly.",
	"Method": "int getNextMatchPos(String searchFor,String searchIn,boolean forward,boolean matchCase,boolean wholeWord){\r\n    if (!matchCase) {\r\n        return getNextMatchPosImpl(searchFor.toLowerCase(), searchIn.toLowerCase(), forward, matchCase, wholeWord);\r\n    }\r\n    return getNextMatchPosImpl(searchFor, searchIn, forward, matchCase, wholeWord);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getSecondaryLanguageBackground",
	"Comment": "returns the background color for the specified secondary language.",
	"Method": "Color getSecondaryLanguageBackground(int index){\r\n    return secondaryLanguageBackgrounds[index - 1];\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.using",
	"Comment": "generate a resource and a solo based on that resource and thendispose that resource eagerly when the solo terminates or thedownstream cancels the sequence.",
	"Method": "Solo<T> using(Callable<R> resourceSupplier,Function<? super R, ? extends Solo<T>> sourceSupplier,Consumer<? super R> disposer,Solo<T> using,Callable<R> resourceSupplier,Function<? super R, ? extends Solo<T>> sourceSupplier,Consumer<? super R> disposer,boolean eager){\r\n    ObjectHelper.requireNonNull(resourceSupplier, \"resourceSupplier is null\");\r\n    ObjectHelper.requireNonNull(sourceSupplier, \"sourceSupplier is null\");\r\n    ObjectHelper.requireNonNull(disposer, \"disposer is null\");\r\n    return onAssembly(new SoloUsing<T, R>(resourceSupplier, sourceSupplier, disposer, eager));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.getAuthor",
	"Comment": "returns the feed author.this method is a convenience method, it maps to the dublin core module creator.",
	"Method": "String getAuthor(){\r\n    return getDCModule().getCreator();\r\n}"
}, {
	"Path": "org.ethereum.net.server.ChannelManagerImpl.broadcastTransaction",
	"Comment": "broadcasttransaction propagates a transaction message across active peers with exclusion ofthe peers with an id belonging to the skip set.",
	"Method": "Set<NodeID> broadcastTransaction(Transaction transaction,Set<NodeID> skip){\r\n    Metrics.broadcastTransaction(transaction);\r\n    List<Transaction> transactions = Collections.singletonList(transaction);\r\n    final Set<NodeID> nodesIdsBroadcastedTo = new HashSet();\r\n    final EthMessage newTransactions = new RskMessage(new TransactionsMessage(transactions));\r\n    activePeers.values().stream().filter(p -> !skip.contains(p.getNodeId())).forEach(peer -> {\r\n        peer.sendMessage(newTransactions);\r\n        nodesIdsBroadcastedTo.add(peer.getNodeId());\r\n    });\r\n    return nodesIdsBroadcastedTo;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.NonoProcessor.hasSubscribers",
	"Comment": "returns true if this nonoprocessor currently has subscribers.",
	"Method": "boolean hasSubscribers(){\r\n    return subscribers.get().length != 0;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.toFuture",
	"Comment": "converts this solo into a future and signals its singlevalue.",
	"Method": "Future<T> toFuture(){\r\n    FuturePerhapsSubscriber<T> fs = new FuturePerhapsSubscriber<T>();\r\n    subscribe(fs);\r\n    return fs;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.andThen",
	"Comment": "runs this perhaps and emits its value followed by runningthe other publisher and emitting its values.",
	"Method": "Perhaps<T> andThen(Nono other,Flowable<T> andThen,Publisher<? extends T> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return Flowable.concat(this, other);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.restoreDefaultSyntaxScheme",
	"Comment": "sets the colors used for syntax highlighting to their defaults.",
	"Method": "void restoreDefaultSyntaxScheme(){\r\n    setSyntaxScheme(getDefaultSyntaxScheme());\r\n}"
}, {
	"Path": "restx.security.SecurityModule.securitySettings",
	"Comment": "hide the other restx.security.securitysettingsconfig classes",
	"Method": "SecuritySettings securitySettings(RestxConfig config){\r\n    return new SecuritySettings() {\r\n        @Override\r\n        public int sessionsLimit() {\r\n            return config.getInt(\"restx.sessions.stats.limit\").or(100);\r\n        }\r\n    };\r\n}"
}, {
	"Path": "restx.security.SecurityModule.securitySettings",
	"Comment": "hide the other restx.security.securitysettingsconfig classes",
	"Method": "SecuritySettings securitySettings(RestxConfig config){\r\n    return config.getInt(\"restx.sessions.stats.limit\").or(100);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.Price.getPrice",
	"Comment": "price is the price of the media object.this is an optional attribute.",
	"Method": "Double getPrice(){\r\n    return price;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.never",
	"Comment": "returns a perhaps that never signals any item or terminal event.",
	"Method": "Perhaps<T> never(){\r\n    return onAssembly(PerhapsNever.<T>instance());\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.tool.AnnouncementAction.trimListToMaxNumberOfAnnouncements",
	"Comment": "this will limit the maximum number of announcements that is shown.",
	"Method": "List<AnnouncementWrapper> trimListToMaxNumberOfAnnouncements(List<AnnouncementWrapper> messageList,AnnouncementActionState.DisplayOptions options){\r\n    if (options != null && options.isEnforceNumberOfAnnouncementsLimit() && !isOnWorkspaceTab()) {\r\n        int numberOfAnnouncements = options.getNumberOfAnnouncements();\r\n        ArrayList<AnnouncementWrapper> destList = new ArrayList();\r\n        for (int i = 0, curAnnouncementCount = 0; i < messageList.size() && curAnnouncementCount < numberOfAnnouncements; i++) {\r\n            AnnouncementWrapper message = messageList.get(i);\r\n            destList.add(message);\r\n            curAnnouncementCount++;\r\n        }\r\n        return destList;\r\n    } else {\r\n        return messageList;\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.AtomClientServerTest.testSimpleEntryPostAndRemove",
	"Comment": "tests that entries can be posted and removed in all collections that accept entries. fails ifno collections found that accept entries.",
	"Method": "void testSimpleEntryPostAndRemove(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element2 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element2;\r\n            if (col.accepts(Collection.ENTRY_TYPE)) {\r\n                final ClientEntry m1 = col.createEntry();\r\n                m1.setTitle(\"Test post\");\r\n                final Content c = new Content();\r\n                c.setValue(\"This is a test post\");\r\n                c.setType(\"html\");\r\n                m1.setContent(c);\r\n                col.addEntry(m1);\r\n                final ClientEntry m2 = col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                m2.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.hasEnoughSignatures",
	"Comment": "checks whether a btc tx has been signed by the required number of federators.",
	"Method": "boolean hasEnoughSignatures(BtcTransaction btcTx){\r\n    Context.propagate(btcContext);\r\n    for (TransactionInput input : btcTx.getInputs()) {\r\n        Script scriptSig = input.getScriptSig();\r\n        List<ScriptChunk> chunks = scriptSig.getChunks();\r\n        for (int i = 1; i < chunks.size(); i++) {\r\n            ScriptChunk chunk = chunks.get(i);\r\n            if (!chunk.isOpCode() && chunk.data.length == 0) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.JoinObservable.then",
	"Comment": "matches when the observable has an available item and projects the item by invoking the selectorfunction.",
	"Method": "Plan<R> then(Function<? super T, ? extends R> selector){\r\n    return JoinPatterns.then(o, selector);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.search.Order.isAscending",
	"Comment": "if true then the return order is ascending, if false then return order is descending",
	"Method": "boolean isAscending(){\r\n    return ascending;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.SMWRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    TimeBreakdown startBreakdown = prototype.firstTime().breakdownLocal();\r\n    List rv = new Vector();\r\n    GregorianCalendar startCalendarDate = TimeService.getCalendar(TimeService.getLocalTimeZone(), 0, 0, 0, 0, 0, 0, 0);\r\n    // may have to move this line ahead\r\n    startCalendarDate.set(// may have to move this line ahead\r\n    startBreakdown.getYear(), // may have to move this line ahead\r\n    startBreakdown.getMonth() - 1, // may have to move this line ahead\r\n    startBreakdown.getDay(), // may have to move this line ahead\r\n    startBreakdown.getHour(), startBreakdown.getMin(), startBreakdown.getSec());\r\n    GregorianCalendar nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    if (((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 1) && (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 2) && ((startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 4))) {\r\n        if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 3) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 5) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 3);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 6) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 2);\r\n        } else {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        }\r\n    }\r\n    nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    int currentCount = 1;\r\n    int hitCount = 1;\r\n    do {\r\n        Time nextTime = TimeService.newTime(nextCalendarDate);\r\n        if ((getCount() > 0) && (hitCount > getCount()))\r\n            break;\r\n        if ((getUntil() != null) && isAfter(nextTime, getUntil()))\r\n            break;\r\n        TimeRange nextTimeRange = TimeService.newTimeRange(nextTime.getTime(), prototype.duration());\r\n        if (isOverlap(range, nextTimeRange)) {\r\n            TimeRange eventTimeRange = null;\r\n            if (prototype.isSingleTime()) {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime());\r\n            } else {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime(), nextTimeRange.lastTime(), true, false);\r\n            }\r\n            rv.add(new RecurrenceInstance(eventTimeRange, currentCount));\r\n        } else if (isAfter(nextTime, range.lastTime())) {\r\n            break;\r\n        }\r\n        do {\r\n            int weekDay = nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK);\r\n            if ((getInterval() > 1 && (weekDay == 5))) {\r\n                int increment = (((getInterval() - 1) * 7) + 1);\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, increment);\r\n                currentCount += increment;\r\n            } else {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n                currentCount++;\r\n            }\r\n        } while ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 1) && (nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) != 2) && ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK)) != 4));\r\n        hitCount++;\r\n    } while (true);\r\n    return rv;\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.getNodeId",
	"Comment": "generates the nodeid based on this key, that is the public key without first format byte",
	"Method": "byte[] getNodeId(){\r\n    if (nodeId == null) {\r\n        byte[] nodeIdWithFormat = getPubKey();\r\n        nodeId = new byte[nodeIdWithFormat.length - 1];\r\n        System.arraycopy(nodeIdWithFormat, 1, nodeId, 0, nodeId.length);\r\n    }\r\n    return nodeId;\r\n}"
}, {
	"Path": "com.rometools.modules.sse.modules.Update.setBy",
	"Comment": "sets a text attribute identifying the unique endpoint that made a modification.",
	"Method": "void setBy(String by){\r\n    this.by = by;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.AtomClientTest.testSimpleEntryPostAndRemove",
	"Comment": "tests that entries can be posted and removed in all collections that accept entries. fails ifno collections found that accept entries.",
	"Method": "void testSimpleEntryPostAndRemove(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element2 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element2;\r\n            if (col.accepts(Collection.ENTRY_TYPE)) {\r\n                final ClientEntry m1 = col.createEntry();\r\n                m1.setTitle(\"Test post\");\r\n                final Content c = new Content();\r\n                c.setValue(\"This is a test post\");\r\n                c.setType(\"html\");\r\n                m1.setContent(c);\r\n                col.addEntry(m1);\r\n                final ClientEntry m2 = col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                m2.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.templates.StaticCodeTemplate.readObject",
	"Comment": "called when reading a serialized version of this document.this is\toverridden to initialize the transient members of this class.",
	"Method": "void readObject(ObjectInputStream in){\r\n    in.defaultReadObject();\r\n    setBeforeCaretText(this.beforeCaret);\r\n    setAfterCaretText(this.afterCaret);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextArea.getIconGroup",
	"Comment": "returns the icon group being used for the actions of this text area.",
	"Method": "IconGroup getIconGroup(){\r\n    return iconGroup;\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.SectionEntityProvider.get",
	"Comment": "get a section by eid. wraps coursemanagementservice.getsection.",
	"Method": "Object get(String eid){\r\n    Section section = cmService.getSection(eid);\r\n    return new SectionData(section);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.BasicRightsAssignment.captureValues",
	"Comment": "retrieve values for the rights assignment from a velocity context.",
	"Method": "void captureValues(ParameterParser params){\r\n    if (usingCreativeCommons) {\r\n        String terms = params.getString(getFieldNameTerms());\r\n        if (terms != null) {\r\n            this.setTerms(terms);\r\n        }\r\n        String myCopyrightYear = params.getString(getFieldNameMyCopyrightYear());\r\n        if (myCopyrightYear != null) {\r\n            this.setMyCopyrightYear(myCopyrightYear);\r\n        }\r\n        String myCopyrightOwner = params.getString(getFieldNameMyCopyrightOwner());\r\n        if (myCopyrightOwner != null) {\r\n            this.setMyCopyrightOwner(myCopyrightOwner);\r\n        }\r\n        String otherCopyrightYear = params.getString(getFieldNameOtherCopyrightYear());\r\n        if (otherCopyrightYear != null) {\r\n            this.setOtherCopyrightYear(otherCopyrightYear);\r\n        }\r\n        String otherCopyrightOwner = params.getString(getFieldNameOtherCopyrightOwner());\r\n        if (otherCopyrightOwner != null) {\r\n            this.setOtherCopyrightOwner(otherCopyrightOwner);\r\n        }\r\n        String offer = params.getString(getFieldNameOffer());\r\n        if (offer != null) {\r\n            this.setOffer(offer);\r\n        }\r\n        String ccModifications = params.getString(getFieldNameModifications());\r\n        if (ccModifications != null) {\r\n            this.setCcModifications(ccModifications);\r\n        }\r\n        String otherModifications = params.getString(getFieldNameOtherModifications());\r\n        if (otherModifications != null) {\r\n            this.setOtherModifications(otherModifications);\r\n        }\r\n        String ccCommercialUse = params.getString(getFieldNameCommercialUse());\r\n        if (ccCommercialUse != null) {\r\n            this.setCcCommercialUse(ccCommercialUse);\r\n        }\r\n        String otherCommercialUse = params.getString(getFieldNameOtherCommercialUse());\r\n        if (otherCommercialUse != null) {\r\n            this.setOtherCommercialUse(otherCommercialUse);\r\n        }\r\n    } else {\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.test.section.CourseManagementIntegrationTest.tearDown",
	"Comment": "remove the newly created objects, so we can run more tests with a clean slate.",
	"Method": "void tearDown(){\r\n    if (siteId != null) {\r\n        Site site = siteService.getSite(siteId);\r\n        siteService.removeSite(site);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaScriptTokenMaker.setJavaScriptVersion",
	"Comment": "set the supported javascript version because some keywords were\tintroduced on or after this version.",
	"Method": "void setJavaScriptVersion(String javaScriptVersion){\r\n    jsVersion = javaScriptVersion;\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.AbstractITunesObject.getKeywords",
	"Comment": "a list of keywords for this feed or entrymust not contain spaces",
	"Method": "String[] getKeywords(){\r\n    return keywords == null ? new String[0] : keywords;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.EntityReference.getSpaceReference",
	"Comment": "get the space reference for this entity reference,this ignored any id and only returns the reference to the entity space",
	"Method": "String getSpaceReference(){\r\n    return makeEntityReference(true);\r\n}"
}, {
	"Path": "org.sakaiproject.commons.impl.CommonsSecurityManagerImpl.filter",
	"Comment": "tests whether the current user can read each post and if not, filtersthat post out of the resulting list",
	"Method": "List<Post> filter(List<Post> posts,String siteId,String embedder){\r\n    if (posts != null && posts.size() > 0) {\r\n        long now = Instant.now().toEpochMilli();\r\n        posts = posts.stream().filter(p -> p.getReleaseDate() <= now).collect(Collectors.toList());\r\n        if (embedder.equals(CommonsConstants.SITE)) {\r\n            boolean readAny = securityService.unlock(CommonsFunctions.POST_READ_ANY, \"/site/\" + siteId);\r\n            return (readAny) ? posts : new ArrayList();\r\n        } else if (embedder.equals(CommonsConstants.ASSIGNMENT)) {\r\n            boolean readAny = securityService.unlock(AssignmentServiceConstants.SECURE_ADD_ASSIGNMENT_SUBMISSION, \"/site/\" + siteId);\r\n            return (readAny) ? posts : new ArrayList();\r\n        } else if (embedder.equals(CommonsConstants.SOCIAL)) {\r\n            return posts;\r\n        } else {\r\n            return new ArrayList();\r\n        }\r\n    } else {\r\n        return posts;\r\n    }\r\n}"
}, {
	"Path": "net.oauth.client.OAuthClient.getAccessToken",
	"Comment": "get an access token from the service provider, in exchange for anauthorized request token.",
	"Method": "OAuthMessage getAccessToken(OAuthAccessor accessor,String httpMethod,Collection<? extends Map.Entry> parameters){\r\n    if (accessor.requestToken != null) {\r\n        if (parameters == null) {\r\n            parameters = OAuth.newList(OAuth.OAUTH_TOKEN, accessor.requestToken);\r\n        } else if (!OAuth.newMap(parameters).containsKey(OAuth.OAUTH_TOKEN)) {\r\n            List<Map.Entry> p = new ArrayList<Map.Entry>(parameters);\r\n            p.add(new OAuth.Parameter(OAuth.OAUTH_TOKEN, accessor.requestToken));\r\n            parameters = p;\r\n        }\r\n    }\r\n    OAuthMessage response = invoke(accessor, httpMethod, accessor.consumer.serviceProvider.accessTokenURL, parameters);\r\n    response.requireParameters(OAuth.OAUTH_TOKEN, OAuth.OAUTH_TOKEN_SECRET);\r\n    accessor.accessToken = response.getParameter(OAuth.OAUTH_TOKEN);\r\n    accessor.tokenSecret = response.getParameter(OAuth.OAUTH_TOKEN_SECRET);\r\n    return response;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.getNonInlineAttachments",
	"Comment": "when using content review, inline text gets turned into an attachment. this method returns all the attachments that do not represent inline text",
	"Method": "List<Reference> getNonInlineAttachments(SessionState state,Assignment a){\r\n    List<Reference> attachments = (List<Reference>) state.getAttribute(ATTACHMENTS);\r\n    List<Reference> nonInlineAttachments = new ArrayList();\r\n    nonInlineAttachments.addAll(attachments);\r\n    if (a.getContentReview()) {\r\n        for (Reference attachment : attachments) {\r\n            if (\"true\".equals(attachment.getProperties().getProperty(AssignmentConstants.PROP_INLINE_SUBMISSION))) {\r\n                nonInlineAttachments.remove(attachment);\r\n            }\r\n        }\r\n    }\r\n    return nonInlineAttachments;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.string.StringFlowable.characters",
	"Comment": "signals each character of the given string charsequence as integers.",
	"Method": "Flowable<Integer> characters(CharSequence string){\r\n    ObjectHelper.requireNonNull(string, \"string is null\");\r\n    return RxJavaPlugins.onAssembly(new FlowableCharSequence(string));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern2.and",
	"Comment": "creates a pattern that matches when all three observable sequences have an available element.",
	"Method": "Pattern3<T1, T2, T3> and(Observable<T3> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Pattern3<T1, T2, T3>(o1, o2, other);\r\n}"
}, {
	"Path": "com.github.faucamp.simplertmp.packets.Acknowledgement.setSequenceNumber",
	"Comment": "sets the sequence number, which is the number of the bytes received so far",
	"Method": "void setSequenceNumber(int numBytesRead){\r\n    this.sequenceNumber = numBytesRead;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.takeUntil",
	"Comment": "try consuming this perhaps until the other publisher signals an itemor completes which then completes the perhaps.",
	"Method": "Perhaps<T> takeUntil(Publisher<?> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return onAssembly(new PerhapsTakeUntil<T>(this, other));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getLastVisibleOffset",
	"Comment": "returns the last visible offset in this text area.this may not be the\tlength of the document if code folding is enabled.",
	"Method": "int getLastVisibleOffset(){\r\n    if (isCodeFoldingEnabled()) {\r\n        int lastVisibleLine = foldManager.getLastVisibleLine();\r\n        if (lastVisibleLine < getLineCount() - 1) {\r\n            try {\r\n                return getLineEndOffset(lastVisibleLine) - 1;\r\n            } catch (BadLocationException ble) {\r\n                ble.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    return getDocument().getLength();\r\n}"
}, {
	"Path": "com.rometools.propono.atom.common.Categories.getHrefResolved",
	"Comment": "get unresolved uri of the collection, or null if impossible to determine",
	"Method": "String getHrefResolved(){\r\n    if (Atom10Parser.isAbsoluteURI(href)) {\r\n        return href;\r\n    } else if (baseURI != null && categoriesElement != null) {\r\n        return Atom10Parser.resolveURI(baseURI, categoriesElement, href);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RtfGenerator.reset",
	"Comment": "resets this generator.all document information and content is\tcleared.",
	"Method": "void reset(){\r\n    fontList.clear();\r\n    colorList.clear();\r\n    document.setLength(0);\r\n    lastWasControlWord = false;\r\n    lastFontIndex = 0;\r\n    lastFGIndex = 0;\r\n    lastBold = false;\r\n    lastItalic = false;\r\n    lastFontSize = DEFAULT_FONT_SIZE;\r\n    screenRes = Toolkit.getDefaultToolkit().getScreenResolution();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.NSISTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.filter",
	"Comment": "applies a predicate to the value and emits it if the predicatereturns true, completes otherwise.",
	"Method": "Perhaps<T> filter(Predicate<? super T> predicate){\r\n    ObjectHelper.requireNonNull(predicate, \"predicate is null\");\r\n    return Perhaps.onAssembly(new SoloFilter<T>(this, predicate));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.debug.multihook.OnScheduleMultiHandlerManager.enable",
	"Comment": "enables this manager by replacing any existing onschedule hook in rxjavaplugins.",
	"Method": "void enable(){\r\n    RxJavaPlugins.setScheduleHandler(this);\r\n}"
}, {
	"Path": "com.rometools.modules.sle.GroupAndSortTest.testSort",
	"Comment": "test of sort method, of class com.rometools.rome.feed.module.sle.groupandsort.",
	"Method": "void testSort(){\r\n    final File testdata = new File(super.getTestFile(\"data/bookexample.xml\"));\r\n    final SyndFeed feed = new SyndFeedInput().build(testdata);\r\n    List<SyndEntry> entries = feed.getEntries();\r\n    final SimpleListExtension extention = (SimpleListExtension) feed.getModule(SimpleListExtension.URI);\r\n    final Sort[] sortFields = extention.getSortFields();\r\n    final Sort sortByDate = sortFields[1];\r\n    final Sort sortByTitle = sortFields[2];\r\n    List<SyndEntry> sortedEntries = SleUtility.sort(entries, sortByDate, true);\r\n    SyndEntry entry = sortedEntries.get(0);\r\n    assertEquals(\"Great Journeys of the Past\", entry.getTitle());\r\n    sortedEntries = SleUtility.sort(entries, sortByDate, false);\r\n    entry = sortedEntries.get(0);\r\n    assertEquals(\"Horror Stories, vol 16\", entry.getTitle());\r\n    sortedEntries = SleUtility.sort(entries, sortByDate, true);\r\n    entry = sortedEntries.get(0);\r\n    entry.setTitle(\"ZZZZZ\");\r\n    SleUtility.initializeForSorting(feed);\r\n    entries = feed.getEntries();\r\n    sortedEntries = SleUtility.sort(entries, sortByTitle, false);\r\n    entry = sortedEntries.get(0);\r\n    assertEquals(\"ZZZZZ\", entry.getTitle());\r\n    sortedEntries = SleUtility.sort(entries, sortByTitle, true);\r\n    entry = sortedEntries.get(0);\r\n    assertEquals(\"Horror Stories, vol 16\", entry.getTitle());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PlainTextTokenMaker.getLastTokenTypeOnLine",
	"Comment": "always returns token.null, as there are no multiline\ttokens in properties files.",
	"Method": "int getLastTokenTypeOnLine(Segment text,int initialTokenType){\r\n    return Token.NULL;\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.isDefaultContent",
	"Comment": "isdefault determines if this is the default object that should be used for the .there should only be one default object per . it is an optional attribute.",
	"Method": "boolean isDefaultContent(){\r\n    return defaultContent;\r\n}"
}, {
	"Path": "com.rometools.modules.itunes.ITunesParserTest.testParse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.itunes.itunesparser.",
	"Method": "void testParse(){\r\n    File feed = new File(getTestFile(\"itunes/leshow.xml\"));\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    SyndFeed syndfeed = input.build(new XmlReader(feed.toURI().toURL()));\r\n    final Module module = syndfeed.getModule(AbstractITunesObject.URI);\r\n    final FeedInformationImpl feedInfo = (FeedInformationImpl) module;\r\n    assertTrue(feedInfo.getBlock());\r\n    assertEquals(\"owner\", \"Harry Shearer\", feedInfo.getOwnerName());\r\n    assertEquals(\"email\", \"\", feedInfo.getOwnerEmailAddress());\r\n    assertEquals(\"image\", \"http://a1.phobos.apple.com/Music/y2005/m06/d26/h21/mcdrrifv.jpg\", feedInfo.getImage().toExternalForm());\r\n    assertEquals(\"category1\", \"Comedy\", feedInfo.getCategories().get(0).getName());\r\n    assertEquals(\"category2\", \"Arts & Entertainment\", feedInfo.getCategories().get(1).getName());\r\n    assertEquals(\"subCategory\", \"Entertainment\", feedInfo.getCategories().get(1).getSubcategories().get(0).getName());\r\n    assertEquals(\"summary\", \"A weekly, hour-long romp through the worlds of media, politics, sports and show business, leavened with an eclectic mix of mysterious music, hosted by Harry Shearer.\", feedInfo.getSummary());\r\n    assertEquals(true, feedInfo.getComplete());\r\n    assertEquals(\"http://example.org\", feedInfo.getNewFeedUrl());\r\n    List<SyndEntry> entries = syndfeed.getEntries();\r\n    Iterator<SyndEntry> it = entries.iterator();\r\n    while (it.hasNext()) {\r\n        final SyndEntry entry = it.next();\r\n        final EntryInformationImpl entryInfo = (EntryInformationImpl) entry.getModule(AbstractITunesObject.URI);\r\n        LOG.debug(\"{}\", entryInfo);\r\n    }\r\n    feed = new File(getTestFile(\"xml/rsr.xml\"));\r\n    syndfeed = input.build(new XmlReader(feed.toURI().toURL()));\r\n    entries = syndfeed.getEntries();\r\n    it = entries.iterator();\r\n    while (it.hasNext()) {\r\n        final SyndEntry entry = it.next();\r\n        final EntryInformationImpl entryInfo = (EntryInformationImpl) entry.getModule(AbstractITunesObject.URI);\r\n        LOG.debug(\"{}\", entryInfo.getDuration());\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.delay",
	"Comment": "delay the emission of the signals of this perhaps tillthe other publisher signals an item or completes.",
	"Method": "Perhaps<T> delay(long delay,TimeUnit unit,Perhaps<T> delay,long delay,TimeUnit unit,Scheduler scheduler,Perhaps<T> delay,Publisher<?> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return onAssembly(new PerhapsDelayPublisher<T>(this, other));\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.EnrollmentEntityProvider.updateSitesWithEnrollment",
	"Comment": "right now this is equivalent to our nightly update participants job.",
	"Method": "void updateSitesWithEnrollment(String userEid,String enrollmentSetEid){\r\n    Set<String> groupIds = authzGroupService.getAuthzGroupIds(enrollmentSetEid);\r\n    for (String id : groupIds) {\r\n        try {\r\n            AuthzGroup group = authzGroupService.getAuthzGroup(id);\r\n            authzGroupService.save(group);\r\n        } catch (GroupNotDefinedException ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            throw new RuntimeException(\"An error occured updating site \" + id + \" with provider id \" + enrollmentSetEid);\r\n        } catch (AuthzPermissionException ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            throw new RuntimeException(\"An error occured updating site \" + id + \" with provider id \" + enrollmentSetEid);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.paint",
	"Comment": "actually paints the text area.only lines that have been damaged are\trepainted.",
	"Method": "void paint(Graphics g,Shape a){\r\n    RSyntaxDocument document = (RSyntaxDocument) getDocument();\r\n    Rectangle alloc = a.getBounds();\r\n    tabBase = alloc.x;\r\n    host = (RSyntaxTextArea) getContainer();\r\n    Rectangle clip = g.getClipBounds();\r\n    clipStart = clip.x;\r\n    clipEnd = clipStart + clip.width;\r\n    lineHeight = host.getLineHeight();\r\n    ascent = host.getMaxAscent();\r\n    int heightAbove = clip.y - alloc.y;\r\n    int linesAbove = Math.max(0, heightAbove / lineHeight);\r\n    FoldManager fm = host.getFoldManager();\r\n    linesAbove += fm.getHiddenLineCountAbove(linesAbove, true);\r\n    Rectangle lineArea = lineToRect(a, linesAbove);\r\n    int y = lineArea.y + ascent;\r\n    int x = lineArea.x;\r\n    Element map = getElement();\r\n    int lineCount = map.getElementCount();\r\n    int selStart = host.getSelectionStart();\r\n    int selEnd = host.getSelectionEnd();\r\n    RSyntaxTextAreaHighlighter h = (RSyntaxTextAreaHighlighter) host.getHighlighter();\r\n    Graphics2D g2d = (Graphics2D) g;\r\n    Token token;\r\n    TokenPainter painter = host.getTokenPainter();\r\n    int line = linesAbove;\r\n    while (y < clip.y + clip.height + ascent && line < lineCount) {\r\n        Fold fold = fm.getFoldForLine(line);\r\n        Element lineElement = map.getElement(line);\r\n        int startOffset = lineElement.getStartOffset();\r\n        int endOffset = lineElement.getEndOffset() - 1;\r\n        h.paintLayeredHighlights(g2d, startOffset, endOffset, a, host, this);\r\n        token = document.getTokenListForLine(line);\r\n        if (selStart == selEnd || startOffset >= selEnd || endOffset < selStart) {\r\n            drawLine(painter, token, g2d, x, y, line);\r\n        } else {\r\n            drawLineWithSelection(painter, token, g2d, x, y, selStart, selEnd);\r\n        }\r\n        if (fold != null && fold.isCollapsed()) {\r\n            Color c = RSyntaxUtilities.getFoldedLineBottomColor(host);\r\n            if (c != null) {\r\n                g.setColor(c);\r\n                g.drawLine(x, y + lineHeight - ascent - 1, host.getWidth(), y + lineHeight - ascent - 1);\r\n            }\r\n            do {\r\n                int hiddenLineCount = fold.getLineCount();\r\n                if (hiddenLineCount == 0) {\r\n                    break;\r\n                }\r\n                line += hiddenLineCount;\r\n                fold = fm.getFoldForLine(line);\r\n            } while (fold != null && fold.isCollapsed());\r\n        }\r\n        y += lineHeight;\r\n        line++;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.MatchedBracketPopup.getPreferredSize",
	"Comment": "overridden to ensure this popup stays in a specific size range.",
	"Method": "Dimension getPreferredSize(){\r\n    Dimension size = super.getPreferredSize();\r\n    if (size != null) {\r\n        size.width = Math.min(size.width, 800);\r\n    }\r\n    return size;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.readers.Reader.getColumnHeaderMap",
	"Comment": "gets the mapping of text column header labels in the import file to\tcalendar event properties.",
	"Method": "Map getColumnHeaderMap(){\r\n    return columnHeaderMap;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.concatArrayDelayError",
	"Comment": "runs the nono sources one after the other, delaying errors from themtill all sources have terminated.",
	"Method": "Nono concatArrayDelayError(Nono sources){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    return onAssembly(new NonoConcatArray(sources, true));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.NSISTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.cover.AnnouncementService.commitChannel",
	"Comment": "commit the changes made to a messagechanneledit object, and release the lock. the messagechanneledit is disabled, and not to be used after this call.",
	"Method": "void commitChannel(org.sakaiproject.message.api.MessageChannelEdit param0){\r\n    org.sakaiproject.announcement.api.AnnouncementService service = getInstance();\r\n    if (service == null)\r\n        return;\r\n    service.commitChannel(param0);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getFractionalFontMetricsEnabled",
	"Comment": "returns whether fractional font metrics are enabled for this text area.",
	"Method": "boolean getFractionalFontMetricsEnabled(){\r\n    return fractionalFontMetricsEnabled;\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.getSiteService",
	"Comment": "returns the instance of the siteservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "SiteService getSiteService(){\r\n    return siteService;\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.open",
	"Comment": "this is the only permission that can allow access to a resource without being authenticated.",
	"Method": "Permission open(){\r\n    return OPEN;\r\n}"
}, {
	"Path": "co.rsk.net.BlockNodeInformation.getNodesByBlock",
	"Comment": "getnodesbyblock is a convenient function to avoid creating a keccak256.",
	"Method": "Set<NodeID> getNodesByBlock(Keccak256 blockHash,Set<NodeID> getNodesByBlock,byte[] blockHash){\r\n    return getNodesByBlock(new Keccak256(blockHash));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.GradeMapping.getMappedGrade",
	"Comment": "get the mapped grade based on the persistent grade mappings",
	"Method": "String getMappedGrade(Double value,String getMappedGrade,Map<String, Double> gradeMap,Double value){\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    for (final Map.Entry<String, Double> entry : sortGradeMapping(gradeMap).entrySet()) {\r\n        final String grade = entry.getKey();\r\n        final Double mapVal = entry.getValue();\r\n        if (mapVal != null && mapVal.compareTo(value) <= 0) {\r\n            return grade;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTATextTransferHandler.importData",
	"Comment": "this method causes a transfer to a component from a clipboard or a\tdnd drop operation.the transferable represents the data to be\timported into the component.",
	"Method": "boolean importData(JComponent comp,Transferable t){\r\n    JTextComponent c = (JTextComponent) comp;\r\n    withinSameComponent = c == exportComp;\r\n    if (withinSameComponent && c.getCaretPosition() >= p0 && c.getCaretPosition() <= p1) {\r\n        shouldRemove = false;\r\n        return true;\r\n    }\r\n    boolean imported = false;\r\n    DataFlavor importFlavor = getImportFlavor(t.getTransferDataFlavors(), c);\r\n    if (importFlavor != null) {\r\n        try {\r\n            InputContext ic = c.getInputContext();\r\n            if (ic != null) {\r\n                ic.endComposition();\r\n            }\r\n            Reader r = importFlavor.getReaderForText(t);\r\n            handleReaderImport(r, c);\r\n            imported = true;\r\n        } catch (UnsupportedFlavorException ufe) {\r\n            ufe.printStackTrace();\r\n        } catch (IOException ioe) {\r\n            ioe.printStackTrace();\r\n        }\r\n    }\r\n    return imported;\r\n}"
}, {
	"Path": "co.rsk.net.NodeBlockProcessor.processGetBlock",
	"Comment": "processgetblock sends a requested block to a peer if the block is available.",
	"Method": "void processGetBlock(MessageChannel sender,byte[] hash){\r\n    logger.trace(\"Processing get block {} from {}\", Hex.toHexString(hash).substring(0, 10), sender.getPeerNodeID().toString());\r\n    final Block block = blockSyncService.getBlockFromStoreOrBlockchain(hash);\r\n    if (block == null) {\r\n        return;\r\n    }\r\n    nodeInformation.addBlockToNode(new Keccak256(hash), sender.getPeerNodeID());\r\n    sender.sendMessage(new BlockMessage(block));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern3.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function3<T1, T2, T3, R> selector){\r\n    if (selector == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new Plan3<T1, T2, T3, R>(this, selector);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxUtilities.selectAndPossiblyCenter",
	"Comment": "selects a range of text in a text component.if the new selection is\toutside of the previous viewable rectangle, then the view is centered\taround the new selection.",
	"Method": "void selectAndPossiblyCenter(JTextArea textArea,DocumentRange range,boolean select){\r\n    int start = range.getStartOffset();\r\n    int end = range.getEndOffset();\r\n    boolean foldsExpanded = false;\r\n    if (textArea instanceof RSyntaxTextArea) {\r\n        RSyntaxTextArea rsta = (RSyntaxTextArea) textArea;\r\n        FoldManager fm = rsta.getFoldManager();\r\n        if (fm.isCodeFoldingSupportedAndEnabled()) {\r\n            foldsExpanded = fm.ensureOffsetNotInClosedFold(start);\r\n            foldsExpanded |= fm.ensureOffsetNotInClosedFold(end);\r\n        }\r\n    }\r\n    if (select) {\r\n        textArea.setSelectionStart(start);\r\n        textArea.setSelectionEnd(end);\r\n    }\r\n    Rectangle r = null;\r\n    try {\r\n        r = textArea.modelToView(start);\r\n        if (r == null) {\r\n            return;\r\n        }\r\n        if (end != start) {\r\n            r = r.union(textArea.modelToView(end));\r\n        }\r\n    } catch (BadLocationException ble) {\r\n        ble.printStackTrace();\r\n        if (select) {\r\n            textArea.setSelectionStart(start);\r\n            textArea.setSelectionEnd(end);\r\n        }\r\n        return;\r\n    }\r\n    Rectangle visible = textArea.getVisibleRect();\r\n    if (!foldsExpanded && visible.contains(r)) {\r\n        if (select) {\r\n            textArea.setSelectionStart(start);\r\n            textArea.setSelectionEnd(end);\r\n        }\r\n        return;\r\n    }\r\n    visible.x = r.x - (visible.width - r.width) / 2;\r\n    visible.y = r.y - (visible.height - r.height) / 2;\r\n    Rectangle bounds = textArea.getBounds();\r\n    Insets i = textArea.getInsets();\r\n    bounds.x = i.left;\r\n    bounds.y = i.top;\r\n    bounds.width -= i.left + i.right;\r\n    bounds.height -= i.top + i.bottom;\r\n    if (visible.x < bounds.x) {\r\n        visible.x = bounds.x;\r\n    }\r\n    if (visible.x + visible.width > bounds.x + bounds.width) {\r\n        visible.x = bounds.x + bounds.width - visible.width;\r\n    }\r\n    if (visible.y < bounds.y) {\r\n        visible.y = bounds.y;\r\n    }\r\n    if (visible.y + visible.height > bounds.y + bounds.height) {\r\n        visible.y = bounds.y + bounds.height - visible.height;\r\n    }\r\n    textArea.scrollRectToVisible(visible);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doSave_preview_grade_submission",
	"Comment": "action is to save submission with or without grade from preview",
	"Method": "void doSave_preview_grade_submission(RunData data){\r\n    if (!\"POST\".equals(data.getRequest().getMethod())) {\r\n        return;\r\n    }\r\n    grade_submission_option(data, AssignmentConstants.SUBMISSION_OPTION_SAVE);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doHide_view_assignment",
	"Comment": "action is to hide the assignment content in the view assignment page",
	"Method": "void doHide_view_assignment(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    state.setAttribute(VIEW_ASSIGNMENT_HIDE_ASSIGNMENT_FLAG, Boolean.TRUE);\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.BaseConfigurationService.populateConfig",
	"Comment": "populate cached values from a configuration xml resource.we always tryto parse the resource, regardless of any prior success or failure.",
	"Method": "void populateConfig(String configurationXml,InputStream stream){\r\n    org.w3c.dom.Document document;\r\n    String value;\r\n    if ((document = parseXmlFromStream(stream)) == null) {\r\n        return;\r\n    }\r\n    synchronized (this) {\r\n        Map<String, String> parameterMap;\r\n        if ((parameterMap = m_configMaps.get(configurationXml)) == null) {\r\n            parameterMap = new HashMap<String, String>();\r\n        }\r\n        parameterMap.clear();\r\n        saveParameter(document, parameterMap, \"citations-enabled-by-default\");\r\n        saveParameter(document, parameterMap, \"citations-enabled-site-by-site\");\r\n        saveParameter(document, parameterMap, \"google-scholar-enabled\");\r\n        saveParameter(document, parameterMap, \"library-search-enabled\");\r\n        saveParameter(document, parameterMap, \"osid-impl\");\r\n        saveParameter(document, parameterMap, \"extended-repository-id\");\r\n        saveParameter(document, parameterMap, \"metasearch-username\");\r\n        saveParameter(document, parameterMap, \"metasearch-password\");\r\n        saveParameter(document, parameterMap, \"metasearch-baseurl\");\r\n        saveParameter(document, parameterMap, \"metasearch-enabled\");\r\n        saveParameter(document, parameterMap, \"openurl-label\");\r\n        saveParameter(document, parameterMap, \"openurl-resolveraddress\");\r\n        saveParameter(document, parameterMap, \"provide-direct-url\");\r\n        saveParameter(document, parameterMap, \"direct-url-prefix\");\r\n        saveParameter(document, parameterMap, \"google-baseurl\");\r\n        saveParameter(document, parameterMap, \"sakai-serverkey\");\r\n        saveParameter(document, parameterMap, \"searchable-databases\");\r\n        saveParameter(document, parameterMap, \"config-id\");\r\n        saveParameter(document, parameterMap, \"database-xml\");\r\n        saveParameter(document, parameterMap, PARAM_SECONDS_BETWEEN_SAVECITE_REFRESHES);\r\n        saveServletClientMappings(document);\r\n        m_configMaps.put(configurationXml, parameterMap);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.BBCodeTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.AcademicSessionEntityProvider.update",
	"Comment": "update an academic session. wraps coursemanagementadministration.updateacademicsession.",
	"Method": "void update(Object entity){\r\n    AcademicSessionData data = (AcademicSessionData) entity;\r\n    validateDates(data);\r\n    AcademicSession updated = cmService.getAcademicSession(data.eid);\r\n    updated.setTitle(data.title);\r\n    updated.setDescription(data.description);\r\n    updated.setStartDate(DateUtils.stringToDate(data.startDate));\r\n    updated.setEndDate(DateUtils.stringToDate(data.endDate));\r\n    cmAdmin.updateAcademicSession(updated);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.search.Search.isConjunction",
	"Comment": "if true then all restrictions are run using and, if false then all restrictions are run using or",
	"Method": "boolean isConjunction(){\r\n    return conjunction;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TextEditorPane.getEncoding",
	"Comment": "returns the encoding to use when reading or writing this file.",
	"Method": "String getEncoding(){\r\n    return charSet;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientCollection.getHttpClient",
	"Comment": "package access to httpclient to allow use by cliententry and clientmediaentry.",
	"Method": "HttpClient getHttpClient(){\r\n    return httpClient;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.doOnNext",
	"Comment": "executes a callback before the value is emitted to downstream.",
	"Method": "Solo<T> doOnNext(Consumer<? super T> onNext){\r\n    ObjectHelper.requireNonNull(onNext, \"onNext is null\");\r\n    return onAssembly(new SoloDoOnLifecycle<T>(this, onNext, Functions.emptyConsumer(), Functions.emptyConsumer(), Functions.EMPTY_ACTION, Functions.EMPTY_ACTION, Functions.emptyConsumer(), Functions.EMPTY_LONG_CONSUMER, Functions.EMPTY_ACTION));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.zipArray",
	"Comment": "combines the solo values of all the sources via a zipper function into asingle resulting value.",
	"Method": "Solo<R> zipArray(Function<? super Object[], ? extends R> zipper,Solo<? extends T> sources){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    ObjectHelper.requireNonNull(zipper, \"zipper is null\");\r\n    return onAssembly(new SoloZipArray<T, R>(sources, zipper));\r\n}"
}, {
	"Path": "org.sakaiproject.lti13.LTI13Servlet.handleLineItemsGet",
	"Comment": "list all lineitems for this placement ore retrieve the single lineitem created for this placement",
	"Method": "void handleLineItemsGet(String signed_placement,boolean all,LineItem filter,HttpServletRequest request,HttpServletResponse response){\r\n    log.debug(\"signed_placement={}\", signed_placement);\r\n    SakaiAccessToken sat = getSakaiAccessToken(tokenKeyPair.getPublic(), request, response);\r\n    if (sat == null) {\r\n        return;\r\n    }\r\n    if (!(sat.hasScope(SakaiAccessToken.SCOPE_LINEITEMS_READONLY) || sat.hasScope(SakaiAccessToken.SCOPE_LINEITEMS))) {\r\n        LTI13Util.return400(response, \"Scope lineitems.readonly not in access token\");\r\n        log.error(\"Scope lineitems.readonly not in access token\");\r\n        return;\r\n    }\r\n    Map<String, Object> content = loadContentCheckSignature(signed_placement, response);\r\n    if (content == null) {\r\n        LTI13Util.return400(response, \"Could not load content from signed placement\");\r\n        log.error(\"Could not load content from signed placement = {}\", signed_placement);\r\n        return;\r\n    }\r\n    Site site = loadSiteFromContent(content, signed_placement, response);\r\n    if (site == null) {\r\n        LTI13Util.return400(response, \"Could not load site associated with content\");\r\n        log.error(\"Could not load site associated with content={}\", content.get(LTIService.LTI_ID));\r\n        return;\r\n    }\r\n    Map<String, Object> tool = loadToolForContent(content, site, sat.tool_id, response);\r\n    if (tool == null) {\r\n        log.error(\"Could not load tool={} associated with content={}\", sat.tool_id, content.get(LTIService.LTI_ID));\r\n        return;\r\n    }\r\n    if (!all) {\r\n        response.setContentType(LineItem.MIME_TYPE);\r\n        LineItem item = LineItemUtil.getLineItem(content);\r\n        PrintWriter out = response.getWriter();\r\n        out.print(JacksonUtil.prettyPrint(item));\r\n        return;\r\n    }\r\n    List<LineItem> preItems = LineItemUtil.getPreCreatedLineItems(site, sat.tool_id, filter);\r\n    List<LineItem> toolItems = LineItemUtil.getLineItemsForTool(signed_placement, site, sat.tool_id, filter);\r\n    response.setContentType(LineItem.MIME_TYPE_CONTAINER);\r\n    PrintWriter out = response.getWriter();\r\n    out.print(\"[\");\r\n    boolean first = true;\r\n    for (LineItem item : preItems) {\r\n        out.println(first ? \"\" : \",\");\r\n        first = false;\r\n        out.print(JacksonUtil.prettyPrint(item));\r\n    }\r\n    for (LineItem item : toolItems) {\r\n        out.println(first ? \"\" : \",\");\r\n        first = false;\r\n        out.print(JacksonUtil.prettyPrint(item));\r\n    }\r\n    out.println(\"\");\r\n    out.println(\"]\");\r\n}"
}, {
	"Path": "com.rometools.certiorem.hub.notify.standard.ThreadPoolNotifier.enqueueNotification",
	"Comment": "enqueues a notification to run. if the notification fails, it will be retried every twominutes until 5 attempts are completed. notifications to the same callback should bedelivered successfully in order.",
	"Method": "void enqueueNotification(Notification not){\r\n    final Runnable r = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            not.lastRun = System.currentTimeMillis();\r\n            final SubscriptionSummary summary = postNotification(not.subscriber, not.mimeType, not.payload);\r\n            if (!summary.isLastPublishSuccessful()) {\r\n                not.retryCount++;\r\n                if (not.retryCount <= 5) {\r\n                    retry(not);\r\n                }\r\n            }\r\n            not.callback.onSummaryInfo(summary);\r\n        }\r\n    };\r\n    exeuctor.execute(r);\r\n}"
}, {
	"Path": "com.rometools.certiorem.hub.notify.standard.ThreadPoolNotifier.enqueueNotification",
	"Comment": "enqueues a notification to run. if the notification fails, it will be retried every twominutes until 5 attempts are completed. notifications to the same callback should bedelivered successfully in order.",
	"Method": "void enqueueNotification(Notification not){\r\n    not.lastRun = System.currentTimeMillis();\r\n    final SubscriptionSummary summary = postNotification(not.subscriber, not.mimeType, not.payload);\r\n    if (!summary.isLastPublishSuccessful()) {\r\n        not.retryCount++;\r\n        if (not.retryCount <= 5) {\r\n            retry(not);\r\n        }\r\n    }\r\n    not.callback.onSummaryInfo(summary);\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.conversion.O11Assignment.setGroups",
	"Comment": "prevents nulling the member groups, this is not need in jackson 2.9",
	"Method": "void setGroups(List<O11Group> groups){\r\n    if (groups != null) {\r\n        this.groups = groups;\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.net.server.Channel.isActive",
	"Comment": "indicates whether this connection was initiated by our peer",
	"Method": "boolean isActive(){\r\n    return isActive;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ConfigurableCaret.setSelectionVisible",
	"Comment": "overridden to always render the selection, even when the text component\tloses focus.",
	"Method": "void setSelectionVisible(boolean visible){\r\n    super.setSelectionVisible(true);\r\n}"
}, {
	"Path": "com.pedro.rtpstreamer.displayexample.DisplayRtspActivity.initNotification",
	"Comment": "this notification is to solve mediaprojection problem that only render surface if something changed.it could produce problem in some server like in youtube that need send video and audio all time to work.",
	"Method": "void initNotification(){\r\n    Notification.Builder notificationBuilder = new Notification.Builder(this).setSmallIcon(R.drawable.notification_anim).setContentTitle(\"Streaming\").setContentText(\"Display mode stream\").setTicker(\"Stream in progress\");\r\n    notificationBuilder.setAutoCancel(true);\r\n    if (notificationManager != null)\r\n        notificationManager.notify(1234, notificationBuilder.build());\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.stopScanningForLinks",
	"Comment": "resets the editor state after the user clicks on a hyperlink or releases\tthe hyperlink modifier.",
	"Method": "void stopScanningForLinks(){\r\n    if (isScanningForLinks) {\r\n        Cursor c = getCursor();\r\n        isScanningForLinks = false;\r\n        linkGeneratorResult = null;\r\n        hoveredOverLinkOffset = -1;\r\n        if (c != null && c.getType() == Cursor.HAND_CURSOR) {\r\n            setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));\r\n            repaint();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PropertiesFileTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case Token.LITERAL_STRING_DOUBLE_QUOTE:\r\n            state = VALUE;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portlets.SakaiIFrame.patchContentItem",
	"Comment": "patch the content item if it was copied from the !user template.\twe only do this once is there is a source, and we cannot get it,\twe either make a new content item from the tool or we empty the\tsource property.",
	"Method": "Map<String, Object> patchContentItem(Long key,Placement placement){\r\n    Map<String, Object> content = m_ltiService.getContentDao(key);\r\n    if (content == null)\r\n        return null;\r\n    Long tool_id = getLongNull(content.get(\"tool_id\"));\r\n    String siteId = placement.getContext();\r\n    Map<String, Object> tool = m_ltiService.getTool(tool_id, siteId);\r\n    if (tool == null)\r\n        return null;\r\n    Properties props = new Properties();\r\n    for (Map.Entry<String, Object> entry : content.entrySet()) {\r\n        String k = entry.getKey();\r\n        Object value = entry.getValue();\r\n        if (value == null)\r\n            continue;\r\n        if (k.endsWith(\"_at\"))\r\n            continue;\r\n        props.put(k, value.toString());\r\n    }\r\n    props.put(LTIService.LTI_TOOL_ID, tool_id.toString());\r\n    props.put(LTIService.LTI_SITE_ID, siteId);\r\n    props.put(LTIService.LTI_PLACEMENT, placement.getId());\r\n    Object retval = m_ltiService.insertContentDao(props, siteId, m_ltiService.isAdmin(siteId), true);\r\n    if (retval == null || retval instanceof String) {\r\n        log.error(\"Unable to insert LTILinkItem tool={} placement={}\", tool_id, placement.getId());\r\n        placement.getPlacementConfig().setProperty(SOURCE, \"\");\r\n        placement.save();\r\n        return null;\r\n    }\r\n    Long contentKey = (Long) retval;\r\n    Map<String, Object> newContent = m_ltiService.getContent(contentKey, siteId);\r\n    String contentUrl = m_ltiService.getContentLaunch(newContent);\r\n    if (newContent == null || contentUrl == null) {\r\n        log.error(\"Unable to set contentUrl tool={} placement={}\", tool_id, placement.getId());\r\n        placement.getPlacementConfig().setProperty(SOURCE, \"\");\r\n        placement.save();\r\n        return null;\r\n    }\r\n    placement.getPlacementConfig().setProperty(SOURCE, contentUrl);\r\n    placement.save();\r\n    log.debug(\"Patched contentUrl tool={} placement={} url={}\", tool_id, placement.getId(), contentUrl);\r\n    return newContent;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.singlesearch.web2.Web2Query.doWeb2InputHeader",
	"Comment": "create the web2 input document, add the standard web2 xml header",
	"Method": "void doWeb2InputHeader(){\r\n    setTransactionId();\r\n    _web2Document = DomUtils.createXmlDocument(\"MUSEWEB2-INPUT\");\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PlainTextTokenMaker.addToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addToken(int tokenType,boolean link){\r\n    int so = zzStartRead + offsetShift;\r\n    super.addToken(zzBuffer, zzStartRead, zzMarkedPos - 1, tokenType, so, link);\r\n    zzStartRead = zzMarkedPos;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.readAllResources",
	"Comment": "develop a list of all the site collections that there are to page.\t sort them as appropriate, and apply search criteria.",
	"Method": "List<ListItem> readAllResources(SessionState state){\r\n    log.debug(\"{}.readAllResources()\", this);\r\n    ResourceTypeRegistry registry = (ResourceTypeRegistry) state.getAttribute(STATE_RESOURCES_TYPE_REGISTRY);\r\n    if (registry == null) {\r\n        registry = (ResourceTypeRegistry) ComponentManager.get(\"org.sakaiproject.content.api.ResourceTypeRegistry\");\r\n        state.setAttribute(STATE_RESOURCES_TYPE_REGISTRY, registry);\r\n    }\r\n    List<ListItem> other_sites = new ArrayList();\r\n    String collectionId = (String) state.getAttribute(STATE_COLLECTION_ID);\r\n    Set<String> expandedCollections = getExpandedCollections(state);\r\n    Comparator userSelectedSort = (Comparator) state.getAttribute(STATE_LIST_VIEW_SORT);\r\n    Boolean showRemove = (Boolean) state.getAttribute(STATE_SHOW_REMOVE_ACTION);\r\n    boolean showRemoveAction = showRemove != null && showRemove;\r\n    Boolean showMove = (Boolean) state.getAttribute(STATE_SHOW_MOVE_ACTION);\r\n    boolean showMoveAction = showMove != null && showMove;\r\n    Boolean showCopy = (Boolean) state.getAttribute(STATE_SHOW_COPY_ACTION);\r\n    boolean showCopyAction = showCopy != null && showCopy;\r\n    User user = userDirectoryService.getCurrentUser();\r\n    String userId = user.getId();\r\n    String wsId = siteService.getUserSiteId(userId);\r\n    String wsCollectionId = contentHostingService.getSiteCollection(wsId);\r\n    List<String> items_to_be_copied = (List<String>) state.getAttribute(STATE_ITEMS_TO_BE_COPIED);\r\n    List<String> items_to_be_moved = (List<String>) state.getAttribute(STATE_ITEMS_TO_BE_MOVED);\r\n    if (!collectionId.equals(wsCollectionId)) {\r\n        try {\r\n            ContentCollection wsCollection = contentHostingService.getCollection(wsCollectionId);\r\n            ListItem wsRoot = ListItem.getListItem(wsCollection, null, registry, false, expandedCollections, items_to_be_moved, items_to_be_copied, 0, userSelectedSort, false, null);\r\n            other_sites.add(wsRoot);\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"IdUnusedException \", e);\r\n        } catch (TypeException e) {\r\n            log.warn(\"TypeException \", e);\r\n        } catch (PermissionException e) {\r\n            log.warn(\"PermissionException \", e);\r\n        }\r\n    }\r\n    Map othersites = contentHostingService.getCollectionMap();\r\n    SortedSet sort = new TreeSet();\r\n    for (Iterator<Entry<String, String>> mapIter = othersites.entrySet().iterator(); mapIter.hasNext(); ) {\r\n        Entry<String, String> entry = mapIter.next();\r\n        sort.add(entry.getValue() + DELIM + entry.getKey());\r\n    }\r\n    Iterator sortIt = sort.iterator();\r\n    while (sortIt.hasNext()) {\r\n        String keyvalue = (String) sortIt.next();\r\n        String displayName = keyvalue.substring(0, keyvalue.lastIndexOf(DELIM));\r\n        String collId = keyvalue.substring(keyvalue.lastIndexOf(DELIM) + 1);\r\n        if (!collectionId.equals(collId) && !wsCollectionId.equals(collId)) {\r\n            ContentCollection collection;\r\n            try {\r\n                collection = contentHostingService.getCollection(collId);\r\n                ListItem root = ListItem.getListItem(collection, null, registry, false, expandedCollections, items_to_be_moved, items_to_be_copied, 0, null, false, null);\r\n                root.setName(displayName);\r\n                other_sites.add(root);\r\n            } catch (IdUnusedException e) {\r\n                log.warn(\"IdUnusedException {}\", (Object) e);\r\n            } catch (TypeException e) {\r\n                log.warn(\"TypeException {}\", (Object) e);\r\n            } catch (PermissionException e) {\r\n                log.warn(\"PermissionException {}\", (Object) e);\r\n            }\r\n        }\r\n    }\r\n    return other_sites;\r\n}"
}, {
	"Path": "com.rometools.certiorem.hub.DeltaSyndFeedInfo.setSyndFeed",
	"Comment": "overrides super class method to update changedmap and entrytagsmap for tracking changedentries.",
	"Method": "void setSyndFeed(SyndFeed feed){\r\n    super.setSyndFeed(feed);\r\n    changedMap.clear();\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    for (final SyndEntry entry : entries) {\r\n        final String currentEntryTag = computeEntryTag(entry);\r\n        final String previousEntryTag = entryTagsMap.get(entry.getUri());\r\n        if (previousEntryTag == null || !currentEntryTag.equals(previousEntryTag)) {\r\n            changedMap.put(entry.getUri(), Boolean.TRUE);\r\n        }\r\n        entryTagsMap.put(entry.getUri(), currentEntryTag);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setDefaultContent",
	"Comment": "isdefault determines if this is the default object that should be used for the .there should only be one default object per . it is an optional attribute.",
	"Method": "void setDefaultContent(boolean defaultContent){\r\n    this.defaultContent = defaultContent;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getGraphics2D",
	"Comment": "returns a graphics2d version of the specified graphics\tthat has been initialized with the proper rendering hints.",
	"Method": "Graphics2D getGraphics2D(Graphics g){\r\n    Graphics2D g2d = (Graphics2D) g;\r\n    if (aaHints != null) {\r\n        g2d.addRenderingHints(aaHints);\r\n    }\r\n    if (fractionalFontMetricsEnabled) {\r\n        g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\r\n    }\r\n    return g2d;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getLineEndOffsetOfCurrentLine",
	"Comment": "returns the offset of the last character of the line that the caret is",
	"Method": "int getLineEndOffsetOfCurrentLine(){\r\n    try {\r\n        return getLineEndOffset(getCaretLineNumber());\r\n    } catch (BadLocationException ble) {\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.TclTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.takeUntil",
	"Comment": "run this nono and cancel it when the other publisher signalsan item or completes.",
	"Method": "Nono takeUntil(Publisher<?> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return onAssembly(new NonoTakeUntil(this, other));\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.entityprovider.extension.EntityData.getDisplayTitle",
	"Comment": "a string which is suitable for display and provides a short summary of the entity,typically 100 chars or less, this may be the name or title of the data represented by an entity",
	"Method": "String getDisplayTitle(){\r\n    if (this.entityDisplayTitle == null) {\r\n        if (this.entityRef != null) {\r\n            return this.entityRef.getPrefix() + \" : \" + entityReference;\r\n        } else {\r\n            return \"data\";\r\n        }\r\n    }\r\n    return entityDisplayTitle;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.toMaybe",
	"Comment": "convert this nono instance into a maybe that only terminates.",
	"Method": "Maybe<T> toMaybe(){\r\n    return RxJavaPlugins.onAssembly(new NonoToMaybe<T>(this));\r\n}"
}, {
	"Path": "restx.factory.alternative.AlternativeTest.should_use_alternative_for_basic_components",
	"Comment": "this test uses the testcomponentsimple, and testcomponentsimplealternative. it uses the default alternative\t\tmechanism without using named annotation.",
	"Method": "void should_use_alternative_for_basic_components(){\r\n    Factory factory = Factory.newInstance();\r\n    TestComponentSimple component = factory.getComponent(TestComponentSimple.class);\r\n    assertThat(component.greet()).isEqualTo(\"hello\");\r\n    overrideComponents().set(\"restx.test.alternatives\", \"true\");\r\n    factory = Factory.newInstance();\r\n    component = factory.getComponent(TestComponentSimple.class);\r\n    assertThat(component.greet()).isEqualTo(\"bonjour\");\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentItemTest.testContentResource",
	"Comment": "test of contentresource method, of class com.totsp.xml.syndication.content.contentitem.",
	"Method": "void testContentResource(){\r\n    LOG.debug(\"testContentResource\");\r\n    final String test = \"http://www.w3.org/2000/svg\";\r\n    item.setContentResource(test);\r\n    assertTrue(item.getContentResource().equals(test));\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.singlesearch.CqlParser.characters",
	"Comment": "receive notification of character data inside an element.",
	"Method": "void characters(char[] buf,int offset,int len){\r\n    String text = new String(buf, offset, len);\r\n    if (textBuffer == null) {\r\n        textBuffer = new StringBuilder(text);\r\n    } else {\r\n        textBuffer.append(text);\r\n    }\r\n}"
}, {
	"Path": "restx.factory.alternative.AlternativeTest.deactivateElementsFromConfig",
	"Comment": "elementsfromconfig component can not be build, because of module testmandatorydependency\twhich use a missing dependency.",
	"Method": "void deactivateElementsFromConfig(){\r\n    System.setProperty(\"restx.activation::restx.factory.FactoryMachine::ElementsFromConfig\", \"false\");\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.RecurrenceRuleBase.setBaseClassXML",
	"Comment": "set base class attributes in the element rule during xml serialization.",
	"Method": "void setBaseClassXML(Element rule){\r\n    rule.setAttribute(\"interval\", Integer.toString(getInterval()));\r\n    if (getCount() > 0) {\r\n        rule.setAttribute(\"count\", Integer.toString(getCount()));\r\n    } else if (getUntil() != null) {\r\n        rule.setAttribute(\"until\", getUntil().toString());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.IniTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.SyntaxView.calculateLongestLine",
	"Comment": "iterate over the lines represented by the child elements\tof the element this view represents, looking for the line\tthat is the longest.the longline variable is updated to\trepresent the longest line contained.the font variable\tis updated to indicate the font used to calculate the\tlongest line.",
	"Method": "void calculateLongestLine(){\r\n    Component c = getContainer();\r\n    font = c.getFont();\r\n    metrics = c.getFontMetrics(font);\r\n    tabSize = getTabSize() * metrics.charWidth(' ');\r\n    Element lines = getElement();\r\n    int n = lines.getElementCount();\r\n    for (int i = 0; i < n; i++) {\r\n        Element line = lines.getElement(i);\r\n        float w = getLineWidth(i);\r\n        if (w > longLineWidth) {\r\n            longLineWidth = w;\r\n            longLine = line;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.subscribe",
	"Comment": "subscribe to this nono and execute the given action if this nonocompletes or call the consumer if this nono terminates with an error.",
	"Method": "void subscribe(Subscriber<? super Void> s,Disposable subscribe,Disposable subscribe,Action onComplete,Disposable subscribe,Action onComplete,Consumer<? super Throwable> onError){\r\n    ObjectHelper.requireNonNull(onComplete, \"onComplete is null\");\r\n    ObjectHelper.requireNonNull(onError, \"onError is null\");\r\n    NonoLambdaSubscriber s = new NonoLambdaSubscriber(onComplete, onError);\r\n    subscribe(s);\r\n    return s;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.PDFExportService.getNumberDaysGivenTwoDates",
	"Comment": "calculate the number of days in a range of time given two dates.",
	"Method": "long getNumberDaysGivenTwoDates(int startYear,int startMonth,int startDay,int endYear,int endMonth,int endDay){\r\n    GregorianCalendar startDate = new GregorianCalendar();\r\n    GregorianCalendar endDate = new GregorianCalendar();\r\n    startDate.set(startYear, startMonth, startDay, 0, 0, 0);\r\n    endDate.set(endYear, endMonth, endDay, 0, 0, 0);\r\n    long duration = endDate.getTime().getTime() - startDate.getTime().getTime();\r\n    return ((duration + MILLISECONDS_IN_HOUR) / (24 * MILLISECONDS_IN_HOUR)) + 1;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.ExternalEmailNotification.addMessage",
	"Comment": "to be called when a new event is being created. allows the event to set the emailbody content for thenotification.",
	"Method": "void addMessage(String emailBody){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Adding new request!\\nemailBody: \" + emailBody);\r\n    }\r\n    message.set(emailBody);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ThemeTest.createSyntaxScheme",
	"Comment": "creates and returns a syntax scheme where all styles have the same\tfont and foreground color.",
	"Method": "SyntaxScheme createSyntaxScheme(Font font,Color fg){\r\n    SyntaxScheme scheme = new SyntaxScheme(true);\r\n    for (int i = 0; i < scheme.getStyleCount(); i++) {\r\n        Style style = scheme.getStyle(i);\r\n        if (style != null) {\r\n            style.background = style.foreground = fg;\r\n            style.font = font;\r\n            if (i == 5) {\r\n                style.underline = true;\r\n            } else if (i == 6) {\r\n                style.font = font.deriveFont(Font.BOLD, 24f);\r\n            } else if (i == 7) {\r\n                style.font = font.deriveFont(Font.ITALIC, 25f);\r\n            }\r\n        }\r\n    }\r\n    return scheme;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.Fold.equals",
	"Comment": "two folds are considered equal if they have the same starting offset.",
	"Method": "boolean equals(Object otherFold){\r\n    return otherFold instanceof Fold && compareTo((Fold) otherFold) == 0;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DelphiTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getPendingFederationHash",
	"Comment": "returns the currently pending federation hash, or null if none exists",
	"Method": "byte[] getPendingFederationHash(){\r\n    PendingFederation currentPendingFederation = provider.getPendingFederation();\r\n    if (currentPendingFederation == null) {\r\n        return null;\r\n    }\r\n    return currentPendingFederation.getHash().getBytes();\r\n}"
}, {
	"Path": "com.github.faucamp.simplertmp.io.ChunkStreamInfo.markAbsoluteTimestampTx",
	"Comment": "utility method for calculating & synchronizing transmitted timestamps",
	"Method": "long markAbsoluteTimestampTx(){\r\n    return System.nanoTime() / 1000000 - sessionBeginTimestamp;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DartTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesEditItem.getForm",
	"Comment": "access the root resourcesmetadata object that defines the form for a structured artifact.",
	"Method": "ResourcesMetadata getForm(){\r\n    return m_form;\r\n}"
}, {
	"Path": "org.sakaiproject.component.gradebook.BaseHibernateManager.convertPointsToLetterGrade",
	"Comment": "converts points to letter grade for the given assignmentgraderecords",
	"Method": "List convertPointsToLetterGrade(Gradebook gradebook,List studentRecordsFromDB){\r\n    final List letterGradeList = new ArrayList();\r\n    final LetterGradePercentMapping lgpm = getLetterGradePercentMapping(gradebook);\r\n    for (int i = 0; i < studentRecordsFromDB.size(); i++) {\r\n        final AssignmentGradeRecord agr = (AssignmentGradeRecord) studentRecordsFromDB.get(i);\r\n        if (agr != null) {\r\n            final Double pointsPossible = agr.getAssignment().getPointsPossible();\r\n            agr.setDateRecorded(agr.getDateRecorded());\r\n            agr.setGraderId(agr.getGraderId());\r\n            if (pointsPossible == null || agr.getPointsEarned() == null) {\r\n                agr.setLetterEarned(null);\r\n                letterGradeList.add(agr);\r\n            } else {\r\n                final String letterGrade = lgpm.getGrade(calculateEquivalentPercent(pointsPossible, agr.getPointsEarned()));\r\n                agr.setLetterEarned(letterGrade);\r\n                letterGradeList.add(agr);\r\n            }\r\n        }\r\n    }\r\n    return letterGradeList;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getCloseCurlyBraces",
	"Comment": "returns whether curly braces should be automatically closed when a\tnewline is entered after an opening curly brace.note that this\tproperty is only honored for languages that use curly braces to denote\tcode blocks.",
	"Method": "boolean getCloseCurlyBraces(){\r\n    return closeCurlyBraces;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.fromFuture",
	"Comment": "blockingly waits the given future for the given timeout to terminate,relaying any error the future signals.",
	"Method": "Nono fromFuture(Future<?> future,Nono fromFuture,Future<?> future,long timeout,TimeUnit unit){\r\n    ObjectHelper.requireNonNull(future, \"future is null\");\r\n    ObjectHelper.requireNonNull(unit, \"unit is null\");\r\n    return onAssembly(new NonoFromFuture(future, timeout, unit));\r\n}"
}, {
	"Path": "org.sakaiproject.delegatedaccess.tool.pages.BaseTreePage.updateNodeAccess",
	"Comment": "this saves the state of the tree.it goes through the entire structure and saves the access and role information\tfor each node.it will remove and add all information.",
	"Method": "void updateNodeAccess(String userId,String[] defaultRole){\r\n    if (getTree() != null) {\r\n        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) getTree().getModelObject().getRoot();\r\n        if (rootNode != null) {\r\n            updateNodeAccessHelper(rootNode, userId, defaultRole);\r\n        }\r\n        projectLogic.syncMyworkspaceToolForUser(userId);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.ambArray",
	"Comment": "returns a nono that terminates when the first nono from thearray terminates.",
	"Method": "Nono ambArray(Nono sources){\r\n    ObjectHelper.requireNonNull(sources, \"sources is null\");\r\n    return onAssembly(new NonoAmbArray(sources));\r\n}"
}, {
	"Path": "co.rsk.net.NodeBlockProcessor.processBlockHeadersRequest",
	"Comment": "processblockheadersrequest sends a list of block headers.",
	"Method": "void processBlockHeadersRequest(MessageChannel sender,long requestId,byte[] hash,int count){\r\n    logger.trace(\"Processing headers request {} {} from {}\", requestId, Hex.toHexString(hash).substring(0, 10), sender.getPeerNodeID());\r\n    Block block = blockSyncService.getBlockFromStoreOrBlockchain(hash);\r\n    if (block == null) {\r\n        return;\r\n    }\r\n    List<BlockHeader> headers = new ArrayList();\r\n    headers.add(block.getHeader());\r\n    for (int k = 1; k < count; k++) {\r\n        block = blockSyncService.getBlockFromStoreOrBlockchain(block.getParentHash().getBytes());\r\n        if (block == null) {\r\n            break;\r\n        }\r\n        headers.add(block.getHeader());\r\n    }\r\n    BlockHeadersResponseMessage response = new BlockHeadersResponseMessage(requestId, headers);\r\n    sender.sendMessage(response);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementObservable.switchCase",
	"Comment": "return a particular one of several possible observables based on a caseselector, or a default observable if the case selector does not map toa particular one.",
	"Method": "Observable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K, ? extends ObservableSource<? extends R>> mapOfCases,Observable<R> switchCase,Callable<? extends K> caseSelector,Map<? super K, ? extends ObservableSource<? extends R>> mapOfCases,Scheduler scheduler,Observable<R> switchCase,Callable<? extends K> caseSelector,Map<? super K, ? extends ObservableSource<? extends R>> mapOfCases,ObservableSource<? extends R> defaultCase){\r\n    ObjectHelper.requireNonNull(caseSelector, \"caseSelector is null\");\r\n    ObjectHelper.requireNonNull(mapOfCases, \"mapOfCases is null\");\r\n    ObjectHelper.requireNonNull(defaultCase, \"defaultCase is null\");\r\n    return RxJavaPlugins.onAssembly(new ObservableSwitchCase<R, K>(caseSelector, mapOfCases, defaultCase));\r\n}"
}, {
	"Path": "com.rometools.rome.io.SyndFeedOutput.outputJDom",
	"Comment": "creates a jdom document for the given syndfeedimpl.this method does not use the feed encoding property.",
	"Method": "Document outputJDom(SyndFeed feed){\r\n    return feedOutput.outputJDom(feed.createWireFeed());\r\n}"
}, {
	"Path": "com.pedro.encoder.input.gl.render.SimpleCameraRender.initGl",
	"Comment": "initializes gl state.call this after the egl surface has been created and made current.",
	"Method": "void initGl(Context context){\r\n    GlUtil.checkGlError(\"initGl start\");\r\n    String vertexShader = GlUtil.getStringFromRaw(context, R.raw.simple_vertex);\r\n    String fragmentShader = GlUtil.getStringFromRaw(context, R.raw.camera_fragment);\r\n    program = GlUtil.createProgram(vertexShader, fragmentShader);\r\n    aPositionHandle = GLES20.glGetAttribLocation(program, \"aPosition\");\r\n    aTextureCoordHandle = GLES20.glGetAttribLocation(program, \"aTextureCoord\");\r\n    uMVPMatrixHandle = GLES20.glGetUniformLocation(program, \"uMVPMatrix\");\r\n    uSTMatrixHandle = GLES20.glGetUniformLocation(program, \"uSTMatrix\");\r\n    uOnFlipHandle = GLES20.glGetUniformLocation(program, \"uOnFlip\");\r\n    GlUtil.createExternalTextures(1, texturesID, 0);\r\n    textureID = texturesID[0];\r\n    surfaceTexture = new SurfaceTexture(textureID);\r\n    surface = new Surface(surfaceTexture);\r\n    GlUtil.checkGlError(\"initGl end\");\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.debug.multihook.MultiHandlerManager.hasHandlers",
	"Comment": "returns true if this manager has any handlers registered.this method is threadsafe.",
	"Method": "boolean hasHandlers(){\r\n    return !handlers.isEmpty();\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testWanted2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testWanted2Parse(){\r\n    LOG.debug(\"testVehicle2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/wanted2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Wanted module = (Wanted) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Wanted\", \"Truck\" }, module.getLabels());\r\n    Assert.assertEquals(\"Location\", \"123 Main Street, Anytown, CA, 12345, USA\", module.getLocation());\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.getUserLastName",
	"Comment": "get user last name. if turnitin.generate.last.name is set to true last\tname is anonamised",
	"Method": "String getUserLastName(User user){\r\n    String uln = user.getLastName().trim();\r\n    if (uln == null || uln.equals(\"\")) {\r\n        boolean genLN = serverConfigurationService.getBoolean(\"turnitin.generate.last.name\", false);\r\n        if (genLN) {\r\n            String eid = user.getEid();\r\n            if (eid != null && eid.length() > 0) {\r\n                uln = eid.substring(0, 1);\r\n            } else {\r\n                uln = \"X\";\r\n            }\r\n        }\r\n    }\r\n    return uln;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.selectFirstElementByAttributeValue",
	"Comment": "return the first named element with a specific attribute value.",
	"Method": "Element selectFirstElementByAttributeValue(Element element,String name,String attribute,String value){\r\n    ArrayList resultList = (ArrayList) selectElementsByAttributeValue(element, name, attribute, value, true);\r\n    return (resultList.size() == 0) ? null : (Element) resultList.get(0);\r\n}"
}, {
	"Path": "org.sakaiproject.authz.tool.RealmsAction.readRoleSaveAsForm",
	"Comment": "read the role save as form and make the new role in the realm in edit.",
	"Method": "boolean readRoleSaveAsForm(RunData data,SessionState state){\r\n    AuthzGroup realm = (AuthzGroup) state.getAttribute(\"realm\");\r\n    Role role = (Role) state.getAttribute(\"role\");\r\n    String id = StringUtils.trimToNull(data.getParameters().getString(\"id\"));\r\n    if (id == null) {\r\n        addAlert(state, rb.getString(\"realm.please\"));\r\n        return false;\r\n    }\r\n    if (realm != null) {\r\n        try {\r\n            realm.addRole(id, role);\r\n        } catch (RoleAlreadyDefinedException e) {\r\n            addAlert(state, rb.getFormattedMessage(\"realm.defined\", new Object[] { id }));\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.Base64.decode",
	"Comment": "dencodes a com.rometools.rome.io.impl.base64 byte array.",
	"Method": "String decode(String s,byte[] decode,byte[] eData){\r\n    if (eData == null) {\r\n        throw new IllegalArgumentException(\"Cannot decode null\");\r\n    }\r\n    final byte[] cleanEData = eData.clone();\r\n    int cleanELength = 0;\r\n    for (final byte element : eData) {\r\n        if (element < 256 && CODES[element] < 64) {\r\n            cleanEData[cleanELength++] = element;\r\n        }\r\n    }\r\n    int dLength = cleanELength / 4 * 3;\r\n    switch(cleanELength % 4) {\r\n        case 3:\r\n            dLength += 2;\r\n            break;\r\n        case 2:\r\n            dLength++;\r\n            break;\r\n    }\r\n    final byte[] dData = new byte[dLength];\r\n    int dIndex = 0;\r\n    for (int i = 0; i < eData.length; i += 4) {\r\n        if (i + 3 > eData.length) {\r\n            throw new IllegalArgumentException(\"byte array is not a valid com.rometools.rome.io.impl.Base64 encoding\");\r\n        }\r\n        final int e1 = CODES[cleanEData[i]];\r\n        final int e2 = CODES[cleanEData[i + 1]];\r\n        final int e3 = CODES[cleanEData[i + 2]];\r\n        final int e4 = CODES[cleanEData[i + 3]];\r\n        dData[dIndex++] = (byte) (e1 << 2 | e2 >> 4);\r\n        if (dIndex < dData.length) {\r\n            dData[dIndex++] = (byte) (e2 << 4 | e3 >> 2);\r\n        }\r\n        if (dIndex < dData.length) {\r\n            dData[dIndex++] = (byte) (e3 << 6 | e4);\r\n        }\r\n    }\r\n    return dData;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ConfigurableCaret.getSelectionPainter",
	"Comment": "gets the painter for the highlighter.this is overridden to return\tour custom selection painter.",
	"Method": "Highlighter.HighlightPainter getSelectionPainter(){\r\n    return selectionPainter;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.extractContent",
	"Comment": "utility method to get revised content either from a byte array or a stream.",
	"Method": "void extractContent(ResourceToolActionPipe pipe,ContentResourceEdit resource){\r\n    log.debug(\"ResourcesAction.extractContent()\");\r\n    byte[] content = pipe.getRevisedContent();\r\n    if (content == null) {\r\n        InputStream stream = pipe.getRevisedContentStream();\r\n        if (stream == null) {\r\n            log.debug(\"pipe with null content and null stream: {}\", pipe.getFileName());\r\n        } else {\r\n            resource.setContent(stream);\r\n        }\r\n    } else {\r\n        resource.setContent(content);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.rome.io.impl.DateParser.formatW3CDateTime",
	"Comment": "create a w3c date time representation of a date.refer to the java.text.simpledateformat javadocs for details on the format of each element.",
	"Method": "String formatW3CDateTime(Date date,Locale locale){\r\n    final SimpleDateFormat dateFormater = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", locale);\r\n    dateFormater.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n    return dateFormater.format(date);\r\n}"
}, {
	"Path": "org.sakaiproject.basiclti.UrlUtility.decodeUrl",
	"Comment": "decode a url encoded by this class, typically from a query parameter.",
	"Method": "String decodeUrl(String encodedUrl){\r\n    return rawDecodeUrl(repairUrl(encodedUrl));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.setLanguage",
	"Comment": "sets the feed language.this method is a convenience method, it maps to the dublin core module language.",
	"Method": "void setLanguage(String language){\r\n    getDCModule().setLanguage(language);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TokenImpl.toString",
	"Comment": "returns this token as a string, which is useful for\tdebugging.",
	"Method": "String toString(){\r\n    return \"[Token: \" + (getType() == Token.NULL ? \"<null token>\" : \"text: '\" + (text == null ? \"<null>\" : getLexeme() + \"'; \" + \"offset: \" + getOffset() + \"; type: \" + getType() + \"; \" + \"isPaintable: \" + isPaintable() + \"; nextToken==null: \" + (nextToken == null))) + \"]\";\r\n}"
}, {
	"Path": "com.pedro.rtplibrary.base.DisplayBase.enableAudio",
	"Comment": "enable a muted microphone, can be called before, while and after stream.",
	"Method": "void enableAudio(){\r\n    microphoneManager.unMute();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.expr.StatementCompletable.ifThen",
	"Comment": "return a completable that emits the emissions from one specifiedcompletable if a condition evaluates to true, or from another specifiedcompletable otherwise.",
	"Method": "Completable ifThen(BooleanSupplier condition,CompletableSource then,Completable orElse){\r\n    ObjectHelper.requireNonNull(condition, \"condition is null\");\r\n    ObjectHelper.requireNonNull(then, \"then is null\");\r\n    ObjectHelper.requireNonNull(orElse, \"orElse is null\");\r\n    return RxJavaPlugins.onAssembly(new CompletableIfThen(condition, then, orElse));\r\n}"
}, {
	"Path": "org.fife.util.DynamicIntArray.set",
	"Comment": "sets the int value at the specified position in this\tarray object.",
	"Method": "void set(int index,int value){\r\n    if (index >= size) {\r\n        throwException(index);\r\n    }\r\n    data[index] = value;\r\n}"
}, {
	"Path": "com.rometools.modules.photocast.io.GeneratorTest.testGenerate",
	"Comment": "test of generate method, of class com.rometools.rome.feed.module.photocast.io.generator.",
	"Method": "void testGenerate(){\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"index.rss\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    for (int i = 0; i < entries.size(); i++) {\r\n        LOG.debug(\"{}\", entries.get(i).getModule(PhotocastModule.URI));\r\n    }\r\n    final SyndFeedOutput output = new SyndFeedOutput();\r\n    output.output(feed, new File(\"target/index.rss\"));\r\n    final SyndFeed feed2 = input.build(new File(\"target/index.rss\"));\r\n    final List<SyndEntry> entries2 = feed2.getEntries();\r\n    for (int i = 0; i < entries.size(); i++) {\r\n        assertEquals(\"Module test\", entries.get(i).getModule(PhotocastModule.URI), entries2.get(i).getModule(PhotocastModule.URI));\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.onErrorResumeNext",
	"Comment": "if the upstream signals an error, call a function and subscribe tothe solo it returns.",
	"Method": "Solo<T> onErrorResumeNext(Function<? super Throwable, ? extends Solo<T>> errorHandler){\r\n    ObjectHelper.requireNonNull(errorHandler, \"errorHandler is null\");\r\n    return onAssembly(new SoloOnErrorResumeNext<T>(this, errorHandler));\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.rollbackFederation",
	"Comment": "rolls back the currently pending federationthat is, the pending federation is wiped out.",
	"Method": "Integer rollbackFederation(boolean dryRun){\r\n    PendingFederation currentPendingFederation = provider.getPendingFederation();\r\n    if (currentPendingFederation == null) {\r\n        return -1;\r\n    }\r\n    if (dryRun) {\r\n        return 1;\r\n    }\r\n    provider.setPendingFederation(null);\r\n    provider.getFederationElection(bridgeConstants.getFederationChangeAuthorizer()).clear();\r\n    return 1;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.delay",
	"Comment": "delay the emission of the terminal events of this nonoby the given time amount.",
	"Method": "Nono delay(long delay,TimeUnit unit,Nono delay,long delay,TimeUnit unit,Scheduler scheduler){\r\n    ObjectHelper.requireNonNull(unit, \"unit is null\");\r\n    ObjectHelper.requireNonNull(scheduler, \"scheduler is null\");\r\n    return onAssembly(new NonoDelay(this, delay, unit, scheduler));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setLanguage",
	"Comment": "sets the dublincore module language. convenience method that can be used when there is onlyone language to set.",
	"Method": "void setLanguage(String language){\r\n    this.language = Lists.create(language);\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.CanonicalCourseEntityProvider.update",
	"Comment": "update a canonical course. wraps coursemanagementadministration.updatecanonicalcourse.",
	"Method": "void update(Object entity){\r\n    CanonicalCourseData data = (CanonicalCourseData) entity;\r\n    CanonicalCourse updated = cmService.getCanonicalCourse(data.eid);\r\n    updated.setTitle(data.title);\r\n    updated.setDescription(data.description);\r\n    cmAdmin.updateCanonicalCourse(updated);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.FortranTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.MWFRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    TimeBreakdown startBreakdown = prototype.firstTime().breakdownLocal();\r\n    List rv = new Vector();\r\n    GregorianCalendar startCalendarDate = TimeService.getCalendar(TimeService.getLocalTimeZone(), 0, 0, 0, 0, 0, 0, 0);\r\n    // may have to move this line ahead\r\n    startCalendarDate.set(// may have to move this line ahead\r\n    startBreakdown.getYear(), // may have to move this line ahead\r\n    startBreakdown.getMonth() - 1, // may have to move this line ahead\r\n    startBreakdown.getDay(), // may have to move this line ahead\r\n    startBreakdown.getHour(), startBreakdown.getMin(), startBreakdown.getSec());\r\n    GregorianCalendar nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) % 2 != 0) {\r\n        if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 7) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 2);\r\n        } else if (startCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 6) {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 3);\r\n        } else {\r\n            startCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n        }\r\n    }\r\n    nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n    int currentCount = 1;\r\n    int hitCount = 1;\r\n    do {\r\n        Time nextTime = TimeService.newTime(nextCalendarDate);\r\n        if ((getCount() > 0) && (hitCount > getCount()))\r\n            break;\r\n        if ((getUntil() != null) && isAfter(nextTime, getUntil()))\r\n            break;\r\n        TimeRange nextTimeRange = TimeService.newTimeRange(nextTime.getTime(), prototype.duration());\r\n        if (isOverlap(range, nextTimeRange)) {\r\n            TimeRange eventTimeRange = null;\r\n            if (prototype.isSingleTime()) {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime());\r\n            } else {\r\n                eventTimeRange = TimeService.newTimeRange(nextTimeRange.firstTime(), nextTimeRange.lastTime(), true, false);\r\n            }\r\n            rv.add(new RecurrenceInstance(eventTimeRange, currentCount));\r\n        } else if (isAfter(nextTime, range.lastTime())) {\r\n            break;\r\n        }\r\n        do {\r\n            nextCalendarDate = (GregorianCalendar) startCalendarDate.clone();\r\n            nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, currentCount);\r\n            if ((getInterval() > 1 && (nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) == 7))) {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, ((getInterval() - 1) * 7) + currentCount);\r\n                currentCount += ((getInterval() - 1) * 7) + 1;\r\n            } else {\r\n                nextCalendarDate.add(java.util.Calendar.DAY_OF_MONTH, 1);\r\n                currentCount++;\r\n            }\r\n        } while ((nextCalendarDate.get(GregorianCalendar.DAY_OF_WEEK) % 2 != 0));\r\n        hitCount++;\r\n    } while (true);\r\n    return rv;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.singlesearch.web2.Web2Response.recordHasPart",
	"Comment": "this method searches the current record for a part using its\tpartstructure type.",
	"Method": "boolean recordHasPart(org.osid.shared.Id partStructureId,MatchItem item){\r\n    if (this.getPartPair(partStructureId, item) == null) {\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.using",
	"Comment": "generate a resource and a nono based on that resource and thendispose that resource optionally eagerly when the nono terminates or thedownstream cancels the sequence.",
	"Method": "Nono using(Callable<R> resourceSupplier,Function<? super R, ? extends Nono> sourceSupplier,Consumer<? super R> disposer,Nono using,Callable<R> resourceSupplier,Function<? super R, ? extends Nono> sourceSupplier,Consumer<? super R> disposer,boolean eager){\r\n    ObjectHelper.requireNonNull(resourceSupplier, \"resourceSupplier is null\");\r\n    ObjectHelper.requireNonNull(sourceSupplier, \"sourceSupplier is null\");\r\n    ObjectHelper.requireNonNull(disposer, \"disposer is null\");\r\n    return onAssembly(new NonoUsing<R>(resourceSupplier, sourceSupplier, disposer, eager));\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.cover.AnnouncementService.messageReference",
	"Comment": "access the internal reference which can be used to access the message from within the system.",
	"Method": "java.lang.String messageReference(java.lang.String param0,java.lang.String param1,java.lang.String param2,java.lang.String messageReference,java.lang.String param0,java.lang.String param1){\r\n    org.sakaiproject.announcement.api.AnnouncementService service = getInstance();\r\n    if (service == null)\r\n        return null;\r\n    return service.messageReference(param0, param1);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.doFilter",
	"Comment": "action dofilter is requested when the user clicks on the list box\tto select a filtering mode for the list view.",
	"Method": "void doFilter(RunData data,Context context){\r\n    CalendarActionState state = (CalendarActionState) getState(context, data, CalendarActionState.class);\r\n    state.getCalendarFilter().setListViewFilterMode(data.getParameters().getString(TIME_FILTER_OPTION_VAR));\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.getText",
	"Comment": "get the text associated with a specified element, at this level only",
	"Method": "String getText(Node parent,String getText,Node parent,String elementName){\r\n    Element element = getElement((Element) parent, elementName);\r\n    if (element == null) {\r\n        return null;\r\n    }\r\n    return textSearch(element, false);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DtdTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    prevState = YYINITIAL;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case INTERNAL_INTAG_START:\r\n            state = INTAG_START;\r\n            break;\r\n        case INTERNAL_INTAG_ELEMENT:\r\n            state = INTAG_ELEMENT;\r\n            break;\r\n        case INTERNAL_INTAG_ATTLIST:\r\n            state = INTAG_ATTLIST;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_IN_COMMENT:\r\n                        state = COMMENT;\r\n                        break;\r\n                }\r\n                prevState = -initialTokenType & 0xff;\r\n            } else {\r\n                state = YYINITIAL;\r\n            }\r\n    }\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.VisualBasicTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UsersAction.validatePassword",
	"Comment": "check to see if password meets requirements set in password policy.\tif current user is admin, ignores password policy.",
	"Method": "boolean validatePassword(String pw,User user,SessionState state){\r\n    if (pw != null && !securityService.isSuperUser() && pwHelper.validatePassword(pw, user) == PasswordRating.FAILED) {\r\n        addAlert(state, rb.getString(MSG_KEY_PASSWORD_WEAK) + \" \" + rb.getString(MSG_KEY_PW_STRENGTH_INFO));\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "co.rsk.net.NodeMessageHandler.processMessage",
	"Comment": "processmessage processes a rsk message, doing the appropriate action based on the message type.",
	"Method": "void processMessage(MessageChannel sender,Message message){\r\n    long start = System.nanoTime();\r\n    logger.trace(\"Process message type: {}\", message.getMessageType());\r\n    MessageType mType = message.getMessageType();\r\n    if (mType == MessageType.GET_BLOCK_MESSAGE) {\r\n        this.processGetBlockMessage(sender, (GetBlockMessage) message);\r\n    } else if (mType == MessageType.BLOCK_MESSAGE) {\r\n        this.processBlockMessage(sender, (BlockMessage) message);\r\n    } else if (mType == MessageType.STATUS_MESSAGE) {\r\n        this.processStatusMessage(sender, (StatusMessage) message);\r\n    } else if (mType == MessageType.BLOCK_REQUEST_MESSAGE) {\r\n        this.processBlockRequestMessage(sender, (BlockRequestMessage) message);\r\n    } else if (mType == MessageType.BLOCK_RESPONSE_MESSAGE) {\r\n        this.processBlockResponseMessage(sender, (BlockResponseMessage) message);\r\n    } else if (mType == MessageType.BODY_REQUEST_MESSAGE) {\r\n        this.processBodyRequestMessage(sender, (BodyRequestMessage) message);\r\n    } else if (mType == MessageType.BODY_RESPONSE_MESSAGE) {\r\n        this.processBodyResponseMessage(sender, (BodyResponseMessage) message);\r\n    } else if (mType == MessageType.BLOCK_HEADERS_REQUEST_MESSAGE) {\r\n        this.processBlockHeadersRequestMessage(sender, (BlockHeadersRequestMessage) message);\r\n    } else if (mType == MessageType.BLOCK_HEADERS_RESPONSE_MESSAGE) {\r\n        this.processBlockHeadersResponseMessage(sender, (BlockHeadersResponseMessage) message);\r\n    } else if (mType == MessageType.BLOCK_HASH_REQUEST_MESSAGE) {\r\n        this.processBlockHashRequestMessage(sender, (BlockHashRequestMessage) message);\r\n    } else if (mType == MessageType.BLOCK_HASH_RESPONSE_MESSAGE) {\r\n        this.processBlockHashResponseMessage(sender, (BlockHashResponseMessage) message);\r\n    } else if (mType == MessageType.SKELETON_REQUEST_MESSAGE) {\r\n        this.processSkeletonRequestMessage(sender, (SkeletonRequestMessage) message);\r\n    } else if (mType == MessageType.SKELETON_RESPONSE_MESSAGE) {\r\n        this.processSkeletonResponseMessage(sender, (SkeletonResponseMessage) message);\r\n    } else if (mType == MessageType.NEW_BLOCK_HASH_MESSAGE) {\r\n        this.processNewBlockHashMessage(sender, (NewBlockHashMessage) message);\r\n    } else if (!blockProcessor.hasBetterBlockToSync()) {\r\n        if (mType == MessageType.NEW_BLOCK_HASHES) {\r\n            this.processNewBlockHashesMessage(sender, (NewBlockHashesMessage) message);\r\n        } else if (mType == MessageType.TRANSACTIONS) {\r\n            this.processTransactionsMessage(sender, (TransactionsMessage) message);\r\n        }\r\n    } else {\r\n        loggerMessageProcess.debug(\"Message[{}] not processed.\", message.getMessageType());\r\n    }\r\n    loggerMessageProcess.debug(\"Message[{}] processed after [{}] nano.\", message.getMessageType(), System.nanoTime() - start);\r\n}"
}, {
	"Path": "co.rsk.net.NodeBlockProcessor.isAdvancedBlock",
	"Comment": "detect a block number that is too advancedbased on sync chunk size and maximum number of chuncks",
	"Method": "boolean isAdvancedBlock(long blockNumber){\r\n    int syncMaxDistance = syncConfiguration.getChunkSize() * syncConfiguration.getMaxSkeletonChunks();\r\n    long bestBlockNumber = this.getBestBlockNumber();\r\n    return blockNumber > bestBlockNumber + syncMaxDistance;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.TypeScriptTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    validJSString = true;\r\n    e4x_prevState = YYINITIAL;\r\n    e4x_inInternalDtd = false;\r\n    int languageIndex = LANG_INDEX_DEFAULT;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case INTERNAL_IN_JS_MLC:\r\n            state = JS_MLC;\r\n            break;\r\n        case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:\r\n            state = JS_DOCCOMMENT;\r\n            start = text.offset;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_INVALID:\r\n            state = JS_STRING;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_STRING_VALID:\r\n            state = JS_STRING;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_INVALID:\r\n            state = JS_CHAR;\r\n            validJSString = false;\r\n            break;\r\n        case INTERNAL_IN_JS_CHAR_VALID:\r\n            state = JS_CHAR;\r\n            break;\r\n        case INTERNAL_E4X:\r\n            state = E4X;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_INTAG:\r\n            state = E4X_INTAG;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION:\r\n            state = E4X_PI;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_DTD:\r\n            state = E4X_DTD;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_DTD_INTERNAL:\r\n            state = E4X_DTD;\r\n            e4x_inInternalDtd = true;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_ATTR_SINGLE:\r\n            state = E4X_INATTR_SINGLE;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_ATTR_DOUBLE:\r\n            state = E4X_INATTR_DOUBLE;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_E4X_MARKUP_CDATA:\r\n            state = E4X_CDATA;\r\n            languageIndex = LANG_INDEX_E4X;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_VALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            validJSString = true;\r\n            break;\r\n        case INTERNAL_IN_JS_TEMPLATE_LITERAL_INVALID:\r\n            state = JS_TEMPLATE_LITERAL;\r\n            validJSString = false;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_IN_E4X_COMMENT:\r\n                        state = E4X_COMMENT;\r\n                        break;\r\n                }\r\n                e4x_prevState = -initialTokenType & 0xff;\r\n                languageIndex = LANG_INDEX_E4X;\r\n            } else {\r\n                state = Token.NULL;\r\n            }\r\n    }\r\n    setLanguageIndex(languageIndex);\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.deserialize",
	"Comment": "deserialize returns a newtrieimpl, from its serialized bytes",
	"Method": "Trie deserialize(byte[] bytes){\r\n    ByteArrayInputStream bstream = new ByteArrayInputStream(bytes);\r\n    DataInputStream dstream = new DataInputStream(bstream);\r\n    try {\r\n        dstream.readShort();\r\n        byte[] root = new byte[Keccak256Helper.DEFAULT_SIZE_BYTES];\r\n        if (dstream.read(root) != Keccak256Helper.DEFAULT_SIZE_BYTES) {\r\n            throw new EOFException();\r\n        }\r\n        TrieStoreImpl store = TrieStoreImpl.deserialize(bytes, Short.BYTES + Keccak256Helper.DEFAULT_SIZE_BYTES, bytes.length - Short.BYTES - Keccak256Helper.DEFAULT_SIZE_BYTES, new HashMapDB());\r\n        Trie newTrie = store.retrieve(root);\r\n        if (newTrie == null) {\r\n            String strHash = Hex.toHexString(root);\r\n            logger.error(ERROR_NON_EXISTENT_TRIE_LOGGER, strHash);\r\n            panicProcessor.panic(PANIC_TOPIC, ERROR_CREATING_TRIE + \" \" + strHash);\r\n            throw new TrieSerializationException(ERROR_CREATING_TRIE + \" \" + strHash, null);\r\n        }\r\n        return newTrie;\r\n    } catch (IOException ex) {\r\n        logger.error(ERROR_CREATING_TRIE, ex);\r\n        panicProcessor.panic(PANIC_TOPIC, ERROR_CREATING_TRIE + \": \" + ex.getMessage());\r\n        throw new TrieSerializationException(ERROR_CREATING_TRIE, ex);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.AbstractGutterComponent.setTextArea",
	"Comment": "sets the text area being displayed.subclasses can override, but\tshould call the super implementation.",
	"Method": "void setTextArea(RTextArea textArea){\r\n    this.textArea = textArea;\r\n    int lineCount = textArea == null ? 0 : textArea.getLineCount();\r\n    if (currentLineCount != lineCount) {\r\n        currentLineCount = lineCount;\r\n        repaint();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.GroovyTokenMaker.regexCanFollow",
	"Comment": "returns whether a regular expression token can follow the specified\ttoken.",
	"Method": "boolean regexCanFollow(Token t){\r\n    char ch;\r\n    return t == null || (t.length() == 1 && ((ch = t.charAt(0)) == '=' || ch == '(' || ch == ',' || ch == '?' || ch == ':' || ch == '[')) || (t.getType() == Token.OPERATOR && ((ch = t.charAt(t.length() - 1)) == '=' || ch == '~'));\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Perhaps.fromAction",
	"Comment": "run an action for each individual subscriber and terminate.",
	"Method": "Perhaps<T> fromAction(Action action){\r\n    ObjectHelper.requireNonNull(action, \"action is null\");\r\n    return onAssembly(new PerhapsFromAction<T>(action));\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.getEncoding",
	"Comment": "returns the charset encoding of a the feed. this is not set by rome parsers.",
	"Method": "String getEncoding(){\r\n    return encoding;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.normalizeAttributeSpaces",
	"Comment": "remove extraneous spaces between tag attributes, to allow a betterequality test in valuedifffromstateattribute.",
	"Method": "String normalizeAttributeSpaces(String s){\r\n    if (s == null) {\r\n        return null;\r\n    }\r\n    Pattern p = Pattern.compile(\"(=\\\".*?\\\")( +)\");\r\n    Matcher m = p.matcher(s);\r\n    return m.replaceAll(\"$1 \");\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.fixAssignmentFeedback",
	"Comment": "apply the fix to pre 1.1.05 assignments submissions feedback.",
	"Method": "String fixAssignmentFeedback(String value){\r\n    if (value == null || value.length() == 0)\r\n        return value;\r\n    StringBuilder buf = new StringBuilder(value);\r\n    int pos = -1;\r\n    while ((pos = buf.indexOf(\"<br/>\")) != -1) {\r\n        buf.replace(pos, pos + \"<br/>\".length(), \"\\n\");\r\n    }\r\n    while ((pos = buf.indexOf(\"<span class='chefAlert'>(\")) != -1) {\r\n        buf.replace(pos, pos + \"<span class='chefAlert'>(\".length(), \"{{\");\r\n    }\r\n    while ((pos = buf.indexOf(\")<\/span>\")) != -1) {\r\n        buf.replace(pos, pos + \")<\/span>\".length(), \"}}\");\r\n    }\r\n    while ((pos = buf.indexOf(\"<ins>\")) != -1) {\r\n        buf.replace(pos, pos + \"<ins>\".length(), \"{{\");\r\n    }\r\n    while ((pos = buf.indexOf(\"<\/ins>\")) != -1) {\r\n        buf.replace(pos, pos + \"<\/ins>\".length(), \"}}\");\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doHelp_item",
	"Comment": "action is to tag an individual item via an item tagging helper",
	"Method": "void doHelp_item(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    TaggingProvider provider = taggingManager.findProviderById(params.getString(PROVIDER_ID));\r\n    String itemRef = params.getString(ITEM_REF);\r\n    TaggingHelperInfo helperInfo = provider.getItemHelperInfo(itemRef);\r\n    startHelper(data.getRequest(), helperInfo.getHelperId());\r\n    Map<String, ? extends Object> helperParms = helperInfo.getParameterMap();\r\n    for (Map.Entry<String, ? extends Object> entry : helperParms.entrySet()) {\r\n        state.setAttribute(entry.getKey(), entry.getValue());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.XMLTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    prevState = YYINITIAL;\r\n    inInternalDtd = false;\r\n    int state = YYINITIAL;\r\n    switch(initialTokenType) {\r\n        case Token.MARKUP_COMMENT:\r\n            state = COMMENT;\r\n            break;\r\n        case INTERNAL_DTD:\r\n            state = DTD;\r\n            break;\r\n        case INTERNAL_DTD_INTERNAL:\r\n            state = DTD;\r\n            inInternalDtd = true;\r\n            break;\r\n        case INTERNAL_ATTR_DOUBLE:\r\n            state = INATTR_DOUBLE;\r\n            break;\r\n        case INTERNAL_ATTR_SINGLE:\r\n            state = INATTR_SINGLE;\r\n            break;\r\n        case Token.MARKUP_PROCESSING_INSTRUCTION:\r\n            state = PI;\r\n            break;\r\n        case INTERNAL_INTAG:\r\n            state = INTAG;\r\n            break;\r\n        case Token.MARKUP_CDATA:\r\n            state = CDATA;\r\n            break;\r\n        default:\r\n            if (initialTokenType < -1024) {\r\n                int main = -(-initialTokenType & 0xffffff00);\r\n                switch(main) {\r\n                    default:\r\n                    case INTERNAL_IN_XML_COMMENT:\r\n                        state = COMMENT;\r\n                        break;\r\n                }\r\n                prevState = -initialTokenType & 0xff;\r\n            } else {\r\n                state = Token.NULL;\r\n            }\r\n    }\r\n    start = text.offset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "co.rsk.net.BlockNodeInformationTest.createBlockHash",
	"Comment": "createblockhash is a convenience function to create a bytearraywrapper wrapping an int.",
	"Method": "Keccak256 createBlockHash(int i){\r\n    return new Keccak256(ByteBuffer.allocate(32).putInt(i).array());\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.singlesearch.musepeer.Response.recordHasPart",
	"Comment": "this method searches the current record for a part using its\tpartstructure type.",
	"Method": "boolean recordHasPart(org.osid.shared.Id partStructureId,MatchItem item){\r\n    if (this.getPartPair(partStructureId, item) == null) {\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.section.sakai.SectionManagerImpl.ensureInternallyManaged",
	"Comment": "throws a securityexception if an attempt is made to modify a section or its\tstudent memberships when the site is configured for external management.",
	"Method": "void ensureInternallyManaged(String courseUuid){\r\n    if (isExternallyManaged(courseUuid)) {\r\n        throw new SecurityException(\"Can not make changes to sections or student memberships in site \" + courseUuid + \".  It is externally managed.\");\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentModuleParserTest.testParse",
	"Comment": "test of parse method, of class com.rometools.rome.feed.module.content.contentmoduleparser.it will test through the whole rome framework.",
	"Method": "void testParse(){\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeed feed = input.build(new XmlReader(new File(getTestFile(\"xml/test-rdf.xml\")).toURI().toURL()));\r\n    final SyndEntry entry = feed.getEntries().get(0);\r\n    final ContentModule module = (ContentModule) entry.getModule(ContentModule.URI);\r\n    final List<ContentItem> items = module.getContentItems();\r\n    for (int i = 0; i < items.size(); i++) {\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.post_save_assignment",
	"Comment": "post or save assignmenttodo much of the logic in this method should be moved to the assignment service",
	"Method": "void post_save_assignment(RunData data,String postOrSave){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String siteId = (String) state.getAttribute(STATE_CONTEXT_STRING);\r\n    boolean post = (postOrSave != null) && \"post\".equals(postOrSave);\r\n    String aOldTitle;\r\n    Assignment.Access aOldAccess = null;\r\n    Collection<String> aOldGroups = new ArrayList<String>();\r\n    Instant oldOpenTime;\r\n    Instant oldDueTime;\r\n    Instant oldCloseTime = null;\r\n    String mode = (String) state.getAttribute(STATE_MODE);\r\n    if (!MODE_INSTRUCTOR_PREVIEW_ASSIGNMENT.equals(mode)) {\r\n        setNewAssignmentParameters(data, true);\r\n    }\r\n    boolean isGroupSubmit = \"1\".equals((String) state.getAttribute(NEW_ASSIGNMENT_GROUP_SUBMIT));\r\n    if (isGroupSubmit) {\r\n        if (!siteService.allowUpdateSite(siteId)) {\r\n            addAlert(state, rb.getFormattedMessage(\"group.editsite.nopermission\"));\r\n        }\r\n    }\r\n    String assignmentId = params.getString(\"assignmentId\");\r\n    boolean bool_change_from_non_point = false;\r\n    boolean bool_change_resubmit_option = false;\r\n    if (StringUtils.isNotBlank((String) state.getAttribute(STATE_MESSAGE))) {\r\n        return;\r\n    }\r\n    Assignment a;\r\n    boolean newAssignment = false;\r\n    if (StringUtils.isBlank(assignmentId)) {\r\n        try {\r\n            a = assignmentService.addAssignment(siteId);\r\n            newAssignment = true;\r\n        } catch (PermissionException e) {\r\n            log.warn(\"Could not create new assignment for site: {}, {}\", siteId, e.getMessage());\r\n            addAlert(state, rb.getFormattedMessage(\"youarenot_editAssignment\", siteId));\r\n            return;\r\n        }\r\n    } else {\r\n        a = getAssignment(assignmentId, \"post_save_assignment\", state);\r\n    }\r\n    if (a == null) {\r\n        log.warn(\"Could not create/retrieve assignment in/for site: {}, assignment is null\", siteId);\r\n        addAlert(state, rb.getFormattedMessage(\"theisno\"));\r\n    } else {\r\n        Map<String, String> p = a.getProperties();\r\n        if ((a.getTypeOfGrade() != SCORE_GRADE_TYPE) && ((Integer) state.getAttribute(NEW_ASSIGNMENT_GRADE_TYPE) == SCORE_GRADE_TYPE.ordinal())) {\r\n            bool_change_from_non_point = true;\r\n        }\r\n        if (propertyValueChanged(state, p, AssignmentConstants.ALLOW_RESUBMIT_NUMBER) || propertyValueChanged(state, p, AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME)) {\r\n            bool_change_resubmit_option = true;\r\n        }\r\n        String assignmentReference = AssignmentReferenceReckoner.reckoner().assignment(a).reckon().getReference();\r\n        String title = (String) state.getAttribute(NEW_ASSIGNMENT_TITLE);\r\n        String order = (String) state.getAttribute(NEW_ASSIGNMENT_ORDER);\r\n        Instant openTime = getTimeFromState(state, NEW_ASSIGNMENT_OPENMONTH, NEW_ASSIGNMENT_OPENDAY, NEW_ASSIGNMENT_OPENYEAR, NEW_ASSIGNMENT_OPENHOUR, NEW_ASSIGNMENT_OPENMIN);\r\n        boolean enableVisibleTime = serverConfigurationService.getBoolean(\"assignment.visible.date.enabled\", false);\r\n        Instant visibleTime = null;\r\n        if (enableVisibleTime) {\r\n            if (((Boolean) state.getAttribute(NEW_ASSIGNMENT_VISIBLETOGGLE)))\r\n                visibleTime = getTimeFromState(state, NEW_ASSIGNMENT_VISIBLEMONTH, NEW_ASSIGNMENT_VISIBLEDAY, NEW_ASSIGNMENT_VISIBLEYEAR, NEW_ASSIGNMENT_VISIBLEHOUR, NEW_ASSIGNMENT_VISIBLEMIN);\r\n        }\r\n        Instant dueTime = getTimeFromState(state, NEW_ASSIGNMENT_DUEMONTH, NEW_ASSIGNMENT_DUEDAY, NEW_ASSIGNMENT_DUEYEAR, NEW_ASSIGNMENT_DUEHOUR, NEW_ASSIGNMENT_DUEMIN);\r\n        Instant closeTime = dueTime;\r\n        boolean enableCloseDate = (Boolean) state.getAttribute(NEW_ASSIGNMENT_ENABLECLOSEDATE);\r\n        if (enableCloseDate) {\r\n            closeTime = getTimeFromState(state, NEW_ASSIGNMENT_CLOSEMONTH, NEW_ASSIGNMENT_CLOSEDAY, NEW_ASSIGNMENT_CLOSEYEAR, NEW_ASSIGNMENT_CLOSEHOUR, NEW_ASSIGNMENT_CLOSEMIN);\r\n        }\r\n        String section = (String) state.getAttribute(NEW_ASSIGNMENT_SECTION);\r\n        Assignment.SubmissionType submissionType = Assignment.SubmissionType.values()[(Integer) state.getAttribute(NEW_ASSIGNMENT_SUBMISSION_TYPE)];\r\n        Assignment.GradeType gradeType = values()[(Integer) state.getAttribute(NEW_ASSIGNMENT_GRADE_TYPE)];\r\n        String gradePoints = (String) state.getAttribute(NEW_ASSIGNMENT_GRADE_POINTS);\r\n        String description = (String) state.getAttribute(NEW_ASSIGNMENT_DESCRIPTION);\r\n        String checkAddDueTime = state.getAttribute(ResourceProperties.NEW_ASSIGNMENT_CHECK_ADD_DUE_DATE) != null ? (String) state.getAttribute(ResourceProperties.NEW_ASSIGNMENT_CHECK_ADD_DUE_DATE) : null;\r\n        Boolean hideDueDate = (Boolean) state.getAttribute(NEW_ASSIGNMENT_CHECK_HIDE_DUE_DATE);\r\n        String checkAutoAnnounce = (String) state.getAttribute(ResourceProperties.NEW_ASSIGNMENT_CHECK_AUTO_ANNOUNCE);\r\n        String valueOpenDateNotification = (String) state.getAttribute(AssignmentConstants.ASSIGNMENT_OPENDATE_NOTIFICATION);\r\n        Boolean checkAddHonorPledge = (Boolean) state.getAttribute(NEW_ASSIGNMENT_CHECK_ADD_HONOR_PLEDGE);\r\n        String addtoGradebook = StringUtils.isNotBlank((String) state.getAttribute(NEW_ASSIGNMENT_ADD_TO_GRADEBOOK)) ? (String) state.getAttribute(NEW_ASSIGNMENT_ADD_TO_GRADEBOOK) : GRADEBOOK_INTEGRATION_NO;\r\n        long category = state.getAttribute(NEW_ASSIGNMENT_CATEGORY) != null ? (Long) state.getAttribute(NEW_ASSIGNMENT_CATEGORY) : -1;\r\n        String associateGradebookAssignment = (String) state.getAttribute(PROP_ASSIGNMENT_ASSOCIATE_GRADEBOOK_ASSIGNMENT);\r\n        String allowResubmitNumber = state.getAttribute(AssignmentConstants.ALLOW_RESUBMIT_NUMBER) != null ? (String) state.getAttribute(AssignmentConstants.ALLOW_RESUBMIT_NUMBER) : null;\r\n        Boolean checkAnonymousGrading = state.getAttribute(NEW_ASSIGNMENT_CHECK_ANONYMOUS_GRADING) != null ? (Boolean) state.getAttribute(NEW_ASSIGNMENT_CHECK_ANONYMOUS_GRADING) : Boolean.FALSE;\r\n        boolean usePeerAssessment = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_USE_PEER_ASSESSMENT));\r\n        Instant peerPeriodTime = getTimeFromState(state, NEW_ASSIGNMENT_PEERPERIODMONTH, NEW_ASSIGNMENT_PEERPERIODDAY, NEW_ASSIGNMENT_PEERPERIODYEAR, NEW_ASSIGNMENT_PEERPERIODHOUR, NEW_ASSIGNMENT_PEERPERIODMIN);\r\n        boolean peerAssessmentAnonEval = (Boolean) state.getAttribute(NEW_ASSIGNMENT_PEER_ASSESSMENT_ANON_EVAL);\r\n        boolean peerAssessmentStudentViewReviews = (Boolean) state.getAttribute(NEW_ASSIGNMENT_PEER_ASSESSMENT_STUDENT_VIEW_REVIEWS);\r\n        int peerAssessmentNumReviews = 0;\r\n        if (state.getAttribute(NEW_ASSIGNMENT_PEER_ASSESSMENT_NUM_REVIEWS) != null) {\r\n            peerAssessmentNumReviews = (Integer) state.getAttribute(NEW_ASSIGNMENT_PEER_ASSESSMENT_NUM_REVIEWS);\r\n        }\r\n        String peerAssessmentInstructions = (String) state.getAttribute(NEW_ASSIGNMENT_PEER_ASSESSMENT_INSTRUCTIONS);\r\n        boolean useReviewService = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_USE_REVIEW_SERVICE));\r\n        boolean allowStudentViewReport = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_ALLOW_STUDENT_VIEW));\r\n        if (submissionType == Assignment.SubmissionType.NON_ELECTRONIC_ASSIGNMENT_SUBMISSION) {\r\n            useReviewService = a.getContentReview();\r\n            allowStudentViewReport = Boolean.valueOf(p.get(NEW_ASSIGNMENT_ALLOW_STUDENT_VIEW));\r\n        }\r\n        String submitReviewRepo = (String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_SUBMIT_RADIO);\r\n        String generateOriginalityReport = (String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_REPORT_RADIO);\r\n        boolean checkTurnitin = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_CHECK_TURNITIN));\r\n        boolean checkInternet = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_CHECK_INTERNET));\r\n        boolean checkPublications = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_CHECK_PUB));\r\n        boolean checkInstitution = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_CHECK_INSTITUTION));\r\n        boolean excludeBibliographic = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_EXCLUDE_BIBLIOGRAPHIC));\r\n        boolean excludeQuoted = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_EXCLUDE_QUOTED));\r\n        boolean excludeSelfPlag = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_EXCLUDE_SELF_PLAG));\r\n        boolean storeInstIndex = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_STORE_INST_INDEX));\r\n        boolean studentPreview = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_STUDENT_PREVIEW));\r\n        boolean excludeSmallMatches = \"true\".equalsIgnoreCase((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_EXCLUDE_SMALL_MATCHES));\r\n        int excludeType = 0;\r\n        int excludeValue = 1;\r\n        if (excludeSmallMatches) {\r\n            try {\r\n                excludeType = Integer.parseInt((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_EXCLUDE_TYPE));\r\n                if (excludeType != 0 && excludeType != 1 && excludeType != 2) {\r\n                    excludeType = 0;\r\n                }\r\n            } catch (Exception e) {\r\n            }\r\n            try {\r\n                excludeValue = Integer.parseInt((String) state.getAttribute(NEW_ASSIGNMENT_REVIEW_SERVICE_EXCLUDE_VALUE));\r\n                if (excludeValue < 0 || excludeValue > 100) {\r\n                    excludeValue = 1;\r\n                }\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        List attachments = (List) state.getAttribute(NEW_ASSIGNMENT_ATTACHMENT);\r\n        String range = (String) state.getAttribute(NEW_ASSIGNMENT_RANGE);\r\n        Collection<Group> groups = new ArrayList();\r\n        try {\r\n            Site site = siteService.getSite(siteId);\r\n            Collection groupChoice = (Collection) state.getAttribute(NEW_ASSIGNMENT_GROUPS);\r\n            if (Assignment.Access.GROUP.toString().equals(range) && (groupChoice == null || groupChoice.size() == 0)) {\r\n                addAlert(state, rb.getString(\"java.alert.youchoosegroup\"));\r\n            } else if (groupChoice != null) {\r\n                for (Iterator iGroups = groupChoice.iterator(); iGroups.hasNext(); ) {\r\n                    String groupId = (String) iGroups.next();\r\n                    Group _aGroup = site.getGroup(groupId);\r\n                    if (_aGroup != null)\r\n                        groups.add(_aGroup);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.warn(this + \":post_save_assignment \" + e.getMessage());\r\n        }\r\n        if ((state.getAttribute(STATE_MESSAGE) == null) && (a != null)) {\r\n            aOldTitle = a.getTitle();\r\n            aOldAccess = a.getTypeOfAccess();\r\n            aOldGroups.addAll(a.getGroups());\r\n            oldOpenTime = a.getOpenDate();\r\n            oldDueTime = a.getDueDate();\r\n            oldCloseTime = a.getCloseDate();\r\n            Map<String, String> aProperties = a.getProperties();\r\n            String oAssociateGradebookAssignment = aProperties.get(PROP_ASSIGNMENT_ASSOCIATE_GRADEBOOK_ASSIGNMENT);\r\n            Instant resubmitCloseTime = getTimeFromState(state, ALLOW_RESUBMIT_CLOSEMONTH, ALLOW_RESUBMIT_CLOSEDAY, ALLOW_RESUBMIT_CLOSEYEAR, ALLOW_RESUBMIT_CLOSEHOUR, ALLOW_RESUBMIT_CLOSEMIN);\r\n            editAssignmentProperties(a, checkAddDueTime, checkAutoAnnounce, addtoGradebook, associateGradebookAssignment, allowResubmitNumber, aProperties, post, resubmitCloseTime, checkAnonymousGrading);\r\n            if (state.getAttribute(AssignmentConstants.ASSIGNMENT_INSTRUCTOR_NOTIFICATIONS_VALUE) != null) {\r\n                aProperties.put(AssignmentConstants.ASSIGNMENT_INSTRUCTOR_NOTIFICATIONS_VALUE, (String) state.getAttribute(AssignmentConstants.ASSIGNMENT_INSTRUCTOR_NOTIFICATIONS_VALUE));\r\n            }\r\n            if (state.getAttribute(AssignmentConstants.ASSIGNMENT_RELEASEGRADE_NOTIFICATION_VALUE) != null) {\r\n                aProperties.put(AssignmentConstants.ASSIGNMENT_RELEASEGRADE_NOTIFICATION_VALUE, (String) state.getAttribute(AssignmentConstants.ASSIGNMENT_RELEASEGRADE_NOTIFICATION_VALUE));\r\n            }\r\n            if (state.getAttribute(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE) != null) {\r\n                aProperties.put(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE, (String) state.getAttribute(AssignmentConstants.ASSIGNMENT_RELEASERESUBMISSION_NOTIFICATION_VALUE));\r\n            }\r\n            commitAssignment(state, post, a, assignmentReference, title, submissionType, useReviewService, allowStudentViewReport, gradeType, gradePoints, description, checkAddHonorPledge, attachments, section, range, visibleTime, openTime, dueTime, closeTime, hideDueDate, enableCloseDate, isGroupSubmit, groups, usePeerAssessment, peerPeriodTime, peerAssessmentAnonEval, peerAssessmentStudentViewReviews, peerAssessmentNumReviews, peerAssessmentInstructions, submitReviewRepo, generateOriginalityReport, checkTurnitin, checkInternet, checkPublications, checkInstitution, excludeBibliographic, excludeQuoted, excludeSelfPlag, storeInstIndex, studentPreview, excludeType, excludeValue);\r\n            rubricsService.saveRubricAssociation(RubricsConstants.RBCS_TOOL_ASSIGNMENT, a.getId(), getRubricConfigurationParameters(params));\r\n            List<String> lockedGroupsReferences = new ArrayList<String>();\r\n            if (post && isGroupSubmit && !groups.isEmpty()) {\r\n                for (Group group : groups) {\r\n                    String groupAssignmentReference = group.getReference() + \"/assignment/\" + a.getId();\r\n                    log.debug(\"Getting groups from reference: {}\", groupAssignmentReference);\r\n                    lockedGroupsReferences.add(group.getReference());\r\n                    log.debug(\"Adding group: {}\", group.getReference());\r\n                    if (!aOldGroups.contains(group.getReference()) || !group.isLocked(groupAssignmentReference, Group.LockMode.ALL)) {\r\n                        log.debug(\"locking group: {}\", group.getReference());\r\n                        group.lockGroup(groupAssignmentReference, Group.LockMode.ALL);\r\n                        log.debug(\"locked group: {}\", group.getReference());\r\n                        try {\r\n                            siteService.save(group.getContainingSite());\r\n                        } catch (IdUnusedException e) {\r\n                            log.warn(\".post_save_assignment: Cannot find site with id {}\", siteId);\r\n                            addAlert(state, rb.getFormattedMessage(\"options_cannotFindSite\", siteId));\r\n                        } catch (PermissionException e) {\r\n                            log.warn(\".post_save_assignment: Do not have permission to edit site with id {}\", siteId);\r\n                            addAlert(state, rb.getFormattedMessage(\"options_cannotEditSite\", siteId));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (post && !aOldGroups.isEmpty()) {\r\n                try {\r\n                    Site site = siteService.getSite(siteId);\r\n                    for (String reference : aOldGroups) {\r\n                        if (!lockedGroupsReferences.contains(reference)) {\r\n                            log.debug(\"Not contains: {}\", reference);\r\n                            Group group = site.getGroup(reference);\r\n                            if (group != null) {\r\n                                String groupReferenceAssignment = group.getReference() + \"/assignment/\" + a.getId();\r\n                                group.unlockGroup(groupReferenceAssignment, Group.LockMode.ALL);\r\n                                siteService.save(group.getContainingSite());\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (IdUnusedException e) {\r\n                    log.warn(\".post_save_assignment: Cannot find site with id {}\", siteId);\r\n                    addAlert(state, rb.getFormattedMessage(\"options_cannotFindSite\", siteId));\r\n                } catch (PermissionException e) {\r\n                    log.warn(\".post_save_assignment: Do not have permission to edit site with id {}\", siteId);\r\n                    addAlert(state, rb.getFormattedMessage(\"options_cannotEditSite\", siteId));\r\n                }\r\n            }\r\n            if (post) {\r\n                if (bool_change_from_non_point || bool_change_resubmit_option) {\r\n                    Set<AssignmentSubmission> submissions = assignmentService.getSubmissions(a);\r\n                    if (submissions != null) {\r\n                        for (AssignmentSubmission s : submissions) {\r\n                            if (s != null) {\r\n                                Map<String, String> sProperties = s.getProperties();\r\n                                if (bool_change_from_non_point) {\r\n                                    s.setGrade(\"\");\r\n                                    s.setGraded(false);\r\n                                    s.setGradedBy(null);\r\n                                    s.setGradeReleased(false);\r\n                                    s.setReturned(false);\r\n                                }\r\n                                if (bool_change_resubmit_option) {\r\n                                    String aAllowResubmitNumber = a.getProperties().get(AssignmentConstants.ALLOW_RESUBMIT_NUMBER);\r\n                                    if (aAllowResubmitNumber == null || aAllowResubmitNumber.length() == 0 || \"0\".equals(aAllowResubmitNumber)) {\r\n                                        sProperties.remove(AssignmentConstants.ALLOW_RESUBMIT_NUMBER);\r\n                                        sProperties.remove(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME);\r\n                                    } else {\r\n                                        sProperties.put(AssignmentConstants.ALLOW_RESUBMIT_NUMBER, a.getProperties().get(AssignmentConstants.ALLOW_RESUBMIT_NUMBER));\r\n                                        sProperties.put(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME, a.getProperties().get(AssignmentConstants.ALLOW_RESUBMIT_CLOSETIME));\r\n                                    }\r\n                                }\r\n                                try {\r\n                                    assignmentService.updateSubmission(s);\r\n                                } catch (PermissionException e) {\r\n                                    log.warn(\"Could not update submission: {}, {}\", s.getId(), e.getMessage());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            saveAssignmentSupplementItem(state, params, siteId, a);\r\n            setDefaultSort(state);\r\n            if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                state.setAttribute(STATE_MODE, MODE_LIST_ASSIGNMENTS);\r\n                state.setAttribute(ATTACHMENTS, entityManager.newReferenceList());\r\n                resetAssignment(state);\r\n                if (post) {\r\n                    integrateWithCalendar(state, a, title, dueTime, checkAddDueTime, oldDueTime, aProperties);\r\n                    integrateWithAnnouncement(state, aOldTitle, a, title, openTime, checkAutoAnnounce, valueOpenDateNotification, oldOpenTime);\r\n                    try {\r\n                        initIntegrateWithGradebook(state, siteId, aOldTitle, oAssociateGradebookAssignment, a, title, dueTime, gradeType, gradePoints, addtoGradebook, associateGradebookAssignment, range, category);\r\n                    } catch (AssignmentHasIllegalPointsException e) {\r\n                        addAlert(state, rb.getString(\"addtogradebook.illegalPoints\"));\r\n                        log.warn(this + \":post_save_assignment \" + e.getMessage());\r\n                    }\r\n                    if (!StringUtils.equals(aOldTitle, title)) {\r\n                        eventTrackingService.post(eventTrackingService.newEvent(AssignmentConstants.EVENT_UPDATE_ASSIGNMENT_TITLE, assignmentId, true));\r\n                    }\r\n                    if (!aOldAccess.equals(a.getTypeOfAccess())) {\r\n                        eventTrackingService.post(eventTrackingService.newEvent(AssignmentConstants.EVENT_UPDATE_ASSIGNMENT_ACCESS, assignmentId, true));\r\n                    } else {\r\n                        Collection aGroups = a.getGroups();\r\n                        if (!(aOldGroups == null && aGroups == null) && !(aOldGroups != null && aGroups != null && aGroups.containsAll(aOldGroups) && aOldGroups.containsAll(aGroups))) {\r\n                            eventTrackingService.post(eventTrackingService.newEvent(AssignmentConstants.EVENT_UPDATE_ASSIGNMENT_ACCESS, assignmentId, true));\r\n                        }\r\n                    }\r\n                    if (oldOpenTime != null && !oldOpenTime.equals(a.getOpenDate())) {\r\n                        eventTrackingService.post(eventTrackingService.newEvent(AssignmentConstants.EVENT_UPDATE_ASSIGNMENT_OPENDATE, assignmentId, true));\r\n                    }\r\n                    if (oldDueTime != null && !oldDueTime.equals(a.getDueDate())) {\r\n                        eventTrackingService.post(eventTrackingService.newEvent(AssignmentConstants.EVENT_UPDATE_ASSIGNMENT_DUEDATE, assignmentId, true));\r\n                    }\r\n                    if (oldCloseTime != null && !oldCloseTime.equals(a.getCloseDate())) {\r\n                        eventTrackingService.post(eventTrackingService.newEvent(AssignmentConstants.EVENT_UPDATE_ASSIGNMENT_CLOSEDATE, assignmentId, true));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (newAssignment) {\r\n            eventTrackingService.post(eventTrackingService.newEvent(AssignmentConstants.EVENT_ADD_ASSIGNMENT, assignmentReference, true));\r\n        }\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.to",
	"Comment": "applies the function, fluently to this solo and returns the value it returns.",
	"Method": "R to(Function<? super Solo<T>, R> converter){\r\n    try {\r\n        return converter.apply(this);\r\n    } catch (Throwable ex) {\r\n        throw ExceptionHelper.wrapOrThrow(ex);\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaScriptTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.TextEditorPane.init",
	"Comment": "initializes this editor with the specified file location.",
	"Method": "void init(FileLocation loc,String defaultEnc){\r\n    if (loc == null) {\r\n        this.loc = FileLocation.create(DEFAULT_FILE_NAME);\r\n        charSet = defaultEnc == null ? getDefaultEncoding() : defaultEnc;\r\n        setLineSeparator(System.getProperty(\"line.separator\"));\r\n    } else {\r\n        load(loc, defaultEnc);\r\n    }\r\n    if (this.loc.isLocalAndExists()) {\r\n        File file = new File(this.loc.getFileFullPath());\r\n        lastSaveOrLoadTime = file.lastModified();\r\n        setReadOnly(!file.canWrite());\r\n    } else {\r\n        lastSaveOrLoadTime = LAST_MODIFIED_UNKNOWN;\r\n        setReadOnly(false);\r\n    }\r\n    setDirty(false);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.VisualBasicTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndFeedImpl.setCategories",
	"Comment": "sets the feed categories.this method is a convenience method, it maps to the dublin core module subjects.",
	"Method": "void setCategories(List<SyndCategory> categories){\r\n    getDCModule().setSubjects(SyndCategoryListFacade.convertElementsSyndCategoryToSubject(categories));\r\n}"
}, {
	"Path": "org.fife.io.UnicodeWriter.init",
	"Comment": "initializes the internal output stream and writes the bom if the\tspecified encoding is a unicode encoding.",
	"Method": "void init(OutputStream out,String encoding){\r\n    internalOut = new OutputStreamWriter(out, encoding);\r\n    if (\"UTF-8\".equals(encoding)) {\r\n        if (getWriteUtf8BOM()) {\r\n            out.write(UTF8_BOM, 0, UTF8_BOM.length);\r\n        }\r\n    } else if (\"UTF-16LE\".equals(encoding)) {\r\n        out.write(UTF16LE_BOM, 0, UTF16LE_BOM.length);\r\n    } else if (\"UTF-16BE\".equals(encoding)) {\r\n        out.write(UTF16BE_BOM, 0, UTF16BE_BOM.length);\r\n    } else if (\"UTF-32LE\".equals(encoding)) {\r\n        out.write(UTF32LE_BOM, 0, UTF32LE_BOM.length);\r\n    } else if (\"UTF-32\".equals(encoding) || \"UTF-32BE\".equals(encoding)) {\r\n        out.write(UTF32BE_BOM, 0, UTF32BE_BOM.length);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.setFramerate",
	"Comment": "framerate is the number of frames per second for the media object. it is an optionalattribute.",
	"Method": "void setFramerate(Float framerate){\r\n    this.framerate = framerate;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.impl.BaseAnnouncementService.newResource",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Entity newResource(Entity container,String id,Object[] others,Entity newResource,Entity container,Element element,Entity newResource,Entity container,Entity other){\r\n    return new BaseAnnouncementMessageEdit((MessageChannel) container, (Message) other);\r\n}"
}, {
	"Path": "org.sakaiproject.citation.impl.BaseCitationService.allowAddCitationList",
	"Comment": "checks permissions to add a citationlist.returns true if the user\thas permission to add a resource in the collection identified by the\tparameter.",
	"Method": "boolean allowAddCitationList(String contentCollectionId){\r\n    return m_contentHostingService.allowAddResource(contentCollectionId + \"testing\");\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.getLineStartOffsetOfCurrentLine",
	"Comment": "returns the offset of the first character of the line that the caret is",
	"Method": "int getLineStartOffsetOfCurrentLine(){\r\n    try {\r\n        return getLineStartOffset(getCaretLineNumber());\r\n    } catch (BadLocationException ble) {\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.tool.MainController.hasStudentPermission",
	"Comment": "depending on the assignmentref, a check will be used to determine whether the user should have student access",
	"Method": "boolean hasStudentPermission(String assignmentRef,String contentId){\r\n    ContentReviewItem item = contentReviewService.getContentReviewItemByContentId(contentId);\r\n    if (item != null && sessionManager.getCurrentSessionUserId().equals(item.getUserId())) {\r\n        return true;\r\n    } else {\r\n        if (assignmentRef.startsWith(AssignmentServiceConstants.REFERENCE_ROOT)) {\r\n            try {\r\n                AssignmentReferenceReckoner.AssignmentReference refReckoner = AssignmentReferenceReckoner.reckoner().reference(assignmentRef).reckon();\r\n                if (\"a\".equals(refReckoner.getSubtype())) {\r\n                    AssignmentSubmission submission = assignmentService.getSubmission(refReckoner.getId(), sessionManager.getCurrentSessionUserId());\r\n                    return submission != null && submission.getAttachments().contains(AssignmentServiceConstants.REF_PREFIX + contentId);\r\n                }\r\n            } catch (Exception e) {\r\n                log.error(e.getMessage(), e);\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.AtomClientTest.testMediaPost",
	"Comment": "post media entry to every media colletion avialable on server, then cleanup.",
	"Method": "void testMediaPost(){\r\n    assertNotNull(service);\r\n    assertTrue(!service.getWorkspaces().isEmpty());\r\n    int count = 0;\r\n    for (final Object element : service.getWorkspaces()) {\r\n        final ClientWorkspace space = (ClientWorkspace) element;\r\n        assertNotNull(space.getTitle());\r\n        for (final Object element2 : space.getCollections()) {\r\n            final ClientCollection col = (ClientCollection) element2;\r\n            if (col.accepts(\"image/gif\")) {\r\n                final ClientMediaEntry m1 = col.createMediaEntry(\"duke\" + count, \"duke\" + count, \"image/gif\", new FileInputStream(\"test/testdata/duke-wave-shadow.gif\"));\r\n                col.addEntry(m1);\r\n                final ClientMediaEntry m2 = (ClientMediaEntry) col.getEntry(m1.getEditURI());\r\n                assertNotNull(m2);\r\n                m2.remove();\r\n                boolean failed = false;\r\n                try {\r\n                    col.getEntry(m1.getEditURI());\r\n                } catch (final ProponoException e) {\r\n                    failed = true;\r\n                }\r\n                assertTrue(failed);\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    assertTrue(count > 0);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.fromPublisher",
	"Comment": "wrap a general publisher, ignore all of its values and terminate ifthe source publisher terminates.",
	"Method": "Nono fromPublisher(Publisher<?> source){\r\n    if (source instanceof Nono) {\r\n        return (Nono) source;\r\n    }\r\n    ObjectHelper.requireNonNull(source, \"source is null\");\r\n    return onAssembly(new NonoFromPublisher(source));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.DefaultOccurrenceMarker.markOccurrencesOfToken",
	"Comment": "highlights all instances of tokens identical to t in the\tspecified document.",
	"Method": "void markOccurrencesOfToken(RSyntaxDocument doc,Token t,RSyntaxTextAreaHighlighter h,SmartHighlightPainter p){\r\n    char[] lexeme = t.getLexeme().toCharArray();\r\n    int type = t.getType();\r\n    int lineCount = doc.getDefaultRootElement().getElementCount();\r\n    for (int i = 0; i < lineCount; i++) {\r\n        Token temp = doc.getTokenListForLine(i);\r\n        while (temp != null && temp.isPaintable()) {\r\n            if (temp.is(type, lexeme)) {\r\n                try {\r\n                    int end = temp.getEndOffset();\r\n                    h.addMarkedOccurrenceHighlight(temp.getOffset(), end, p);\r\n                } catch (BadLocationException ble) {\r\n                    ble.printStackTrace();\r\n                }\r\n            }\r\n            temp = temp.getNextToken();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.tool.AssignmentAction.doSort_grade_submission",
	"Comment": "sort submission based on the given property in instructor grade view",
	"Method": "void doSort_grade_submission(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    resetPaging(state);\r\n    ParameterParser params = data.getParameters();\r\n    String criteria = params.getString(\"criteria\");\r\n    String asc = \"\";\r\n    if (!criteria.equals(state.getAttribute(SORTED_GRADE_SUBMISSION_BY))) {\r\n        state.setAttribute(SORTED_GRADE_SUBMISSION_BY, criteria);\r\n        if (criteria.equals(SORTED_GRADE_SUBMISSION_CONTENTREVIEW))\r\n            asc = Boolean.FALSE.toString();\r\n        else\r\n            asc = Boolean.TRUE.toString();\r\n        state.setAttribute(SORTED_GRADE_SUBMISSION_ASC, asc);\r\n    } else {\r\n        state.setAttribute(SORTED_GRADE_SUBMISSION_BY, criteria);\r\n        asc = (String) state.getAttribute(SORTED_GRADE_SUBMISSION_ASC);\r\n        if (asc.equals(Boolean.TRUE.toString())) {\r\n            asc = Boolean.FALSE.toString();\r\n        } else {\r\n            asc = Boolean.TRUE.toString();\r\n        }\r\n        state.setAttribute(SORTED_GRADE_SUBMISSION_ASC, asc);\r\n    }\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.mergeWith",
	"Comment": "merges the values of this solo and the other solo into aflowable sequence.",
	"Method": "Flowable<T> mergeWith(Solo<T> other){\r\n    return Flowable.merge(this, other);\r\n}"
}, {
	"Path": "org.ethereum.crypto.ECKey.getPubKeyPoint",
	"Comment": "gets the public key in the form of an elliptic curve point object from bouncy castle.",
	"Method": "ECPoint getPubKeyPoint(){\r\n    return pub;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaEditorKit.createLineNumberList",
	"Comment": "creates a line number list to use in the gutter for a text area.",
	"Method": "LineNumberList createLineNumberList(RTextArea textArea){\r\n    return new LineNumberList(textArea);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CPlusPlusTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndEntryImpl.getPublishedDate",
	"Comment": "returns the entry published date.this method is a convenience method, it maps to the dublin core module date.",
	"Method": "Date getPublishedDate(){\r\n    return getDCModule().getDate();\r\n}"
}, {
	"Path": "com.rometools.modules.base.types.IntUnitTest.testIntUnit",
	"Comment": "test of getunits method, of class com.totsp.xml.syndication.base.types.intunit.",
	"Method": "void testIntUnit(){\r\n    LOG.debug(\"testIntUnit\");\r\n    IntUnit fu = new IntUnit(\"1km\");\r\n    assertEquals(1, fu.getValue());\r\n    assertEquals(\"km\", fu.getUnits());\r\n    fu = new IntUnit(\"1 gb\");\r\n    assertEquals(1, fu.getValue());\r\n    assertEquals(\"gb\", fu.getUnits());\r\n    fu = new IntUnit(\"-3\");\r\n    assertEquals(-3, fu.getValue());\r\n    assertEquals(null, fu.getUnits());\r\n}"
}, {
	"Path": "net.oauth.signature.OAuthSignatureMethod.getParameters",
	"Comment": "retrieve the original parameters from a sorted collection.",
	"Method": "List<Map.Entry> getParameters(Collection<ComparableParameter> parameters){\r\n    if (parameters == null) {\r\n        return null;\r\n    }\r\n    List<Map.Entry> list = new ArrayList<Map.Entry>(parameters.size());\r\n    for (ComparableParameter parameter : parameters) {\r\n        list.add(parameter.value);\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PlainTextTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(YYINITIAL);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.Gutter.setActiveLineRange",
	"Comment": "highlights a range of lines in the icon area.this, of course, will\tonly be visible if the icon area is visible.",
	"Method": "void setActiveLineRange(int startLine,int endLine){\r\n    iconArea.setActiveLineRange(startLine, endLine);\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.buildListContext",
	"Comment": "build the context for the new list view, which uses the resources type registry",
	"Method": "String buildListContext(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    log.debug(\"{}.buildListContext()\", this);\r\n    context.put(\"clang\", rb);\r\n    context.put(\"tlang\", trb);\r\n    context.put(\"slang\", srb);\r\n    ResourceLoader pRb = new ResourceLoader(\"permissions\");\r\n    HashMap<String, String> pRbValues = new HashMap();\r\n    for (Iterator<Entry<String, String>> mapIter = pRb.entrySet().iterator(); mapIter.hasNext(); ) {\r\n        Entry<String, String> entry = mapIter.next();\r\n        pRbValues.put(entry.getKey(), entry.getValue());\r\n    }\r\n    state.setAttribute(\"permissionDescriptions\", pRbValues);\r\n    context.put(\"contentTypeImageService\", state.getAttribute(STATE_CONTENT_TYPE_IMAGE_SERVICE));\r\n    context.put(\"TYPE_UPLOAD\", TYPE_UPLOAD);\r\n    context.put(\"SITE_ACCESS\", AccessMode.SITE);\r\n    context.put(\"GROUP_ACCESS\", AccessMode.GROUPED);\r\n    context.put(\"INHERITED_ACCESS\", AccessMode.INHERITED);\r\n    context.put(\"PUBLIC_ACCESS\", PUBLIC_ACCESS);\r\n    context.put(\"ACTION_DELIMITER\", ResourceToolAction.ACTION_DELIMITER);\r\n    Set selectedItems = (Set) state.getAttribute(STATE_LIST_SELECTIONS);\r\n    if (selectedItems == null) {\r\n        selectedItems = new TreeSet();\r\n        state.setAttribute(STATE_LIST_SELECTIONS, selectedItems);\r\n    }\r\n    context.put(\"selectedItems\", selectedItems);\r\n    Integer dropboxHighlightObj = (Integer) state.getAttribute(STATE_DROPBOX_HIGHLIGHT);\r\n    context.put(\"dropboxHighlight\", dropboxHighlightObj);\r\n    ContentHostingService contentService = contentHostingService;\r\n    ResourceTypeRegistry registry = (ResourceTypeRegistry) state.getAttribute(STATE_RESOURCES_TYPE_REGISTRY);\r\n    if (registry == null) {\r\n        registry = (ResourceTypeRegistry) ComponentManager.get(\"org.sakaiproject.content.api.ResourceTypeRegistry\");\r\n        state.setAttribute(STATE_RESOURCES_TYPE_REGISTRY, registry);\r\n    }\r\n    String currentSiteId = toolManager.getCurrentPlacement().getContext();\r\n    boolean inMyWorkspace = siteService.isUserSite(currentSiteId);\r\n    boolean isSpecialSite = false;\r\n    if (\"!admin\".equals(currentSiteId) || \"~admin\".equals(currentSiteId)) {\r\n        isSpecialSite = true;\r\n        context.put(\"showJumpToResourceForm\", true);\r\n    }\r\n    context.put(\"inMyWorkspace\", Boolean.toString(inMyWorkspace));\r\n    boolean atHome = false;\r\n    boolean dropboxMode = RESOURCES_MODE_DROPBOX.equalsIgnoreCase((String) state.getAttribute(STATE_MODE_RESOURCES));\r\n    if (dropboxMode) {\r\n        context.put(\"dropboxMode\", Boolean.TRUE);\r\n        Boolean showDropboxGroupFilter = isDropboxMaintainer() || isDropboxGroupMaintainer();\r\n        if (showDropboxGroupFilter) {\r\n            List<Group> site_groups = new ArrayList();\r\n            try {\r\n                Site site = siteService.getSite(toolManager.getCurrentPlacement().getContext());\r\n                site_groups.addAll(site.getGroups());\r\n                if (site_groups.size() > 0) {\r\n                    Collections.sort(site_groups, new Comparator<Group>() {\r\n                        public int compare(Group g0, Group g1) {\r\n                            return g0.getTitle().compareToIgnoreCase(g1.getTitle());\r\n                        }\r\n                    });\r\n                    context.put(\"dropboxGroupFilter_groups\", site_groups);\r\n                    context.put(\"showDropboxGroupFilter\", showDropboxGroupFilter.toString());\r\n                    String dropboxGroupFilter_groupId = (String) state.getAttribute(\"dropboxGroupFilter_groupId\");\r\n                    if (StringUtils.isNotBlank(dropboxGroupFilter_groupId)) {\r\n                        context.put(\"dropboxGroupFiltered\", Boolean.TRUE);\r\n                        context.put(\"dropboxGroupFilter_groupId\", dropboxGroupFilter_groupId);\r\n                        context.put(\"dropboxGroupFilter_groupUsers\", (Set) state.getAttribute(\"dropboxGroupFilter_groupUsers\"));\r\n                    }\r\n                }\r\n            } catch (IdUnusedException e) {\r\n            }\r\n        }\r\n        try {\r\n            String currentUser = sessionManager.getCurrentSessionUserId();\r\n            Site site = siteService.getSite(currentSiteId);\r\n            if ((!contentHostingService.isDropboxMaintainer(currentSiteId)) && (contentHostingService.isDropboxGroups(currentSiteId))) {\r\n                context.put(\"dropboxGroupPermission_enabled\", Boolean.TRUE);\r\n                List<Group> site_groups = new ArrayList();\r\n                Set allGroupsUsers = new TreeSet();\r\n                site_groups.addAll(site.getGroupsWithMember(currentUser));\r\n                if (site_groups.size() > 0) {\r\n                    for (Group g : site_groups) {\r\n                        allGroupsUsers.addAll(g.getUsers());\r\n                    }\r\n                }\r\n                context.put(\"dropboxGroupPermission_allGroupsUsers\", allGroupsUsers);\r\n            } else {\r\n                context.put(\"dropboxGroupPermission_enabled\", Boolean.FALSE);\r\n            }\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"DropboxGroupPermission error: {}\", (Object) e);\r\n        }\r\n    } else {\r\n    }\r\n    String collectionId = (String) state.getAttribute(STATE_COLLECTION_ID);\r\n    context.put(\"collectionId\", collectionId);\r\n    String navRoot = (String) state.getAttribute(STATE_NAVIGATION_ROOT);\r\n    String homeCollectionId = (String) state.getAttribute(STATE_HOME_COLLECTION_ID);\r\n    String siteTitle = (String) state.getAttribute(STATE_SITE_TITLE);\r\n    if (collectionId.equals(homeCollectionId)) {\r\n        atHome = true;\r\n        context.put(\"collectionDisplayName\", state.getAttribute(STATE_HOME_COLLECTION_DISPLAY_NAME));\r\n    } else {\r\n        try {\r\n            context.put(\"collectionDisplayName\", contentService.getCollection(collectionId).getProperties().getProperty(ResourceProperties.PROP_DISPLAY_NAME));\r\n        } catch (IdUnusedException e) {\r\n        } catch (TypeException e) {\r\n        } catch (PermissionException e) {\r\n        }\r\n    }\r\n    boolean allowUpdateSite = siteService.allowUpdateSite(toolManager.getCurrentPlacement().getContext());\r\n    if (atHome && siteService.allowUpdateSite(toolManager.getCurrentPlacement().getContext())) {\r\n        if (dropboxMode) {\r\n            context.put(\"showDropboxOptions\", Boolean.TRUE.toString());\r\n            context.put(\"showDropboxMultipleFoldersUpload\", Boolean.TRUE.toString());\r\n        } else {\r\n            if (!inMyWorkspace && !isSpecialSite) {\r\n                context.put(\"showPermissions\", Boolean.TRUE.toString());\r\n            }\r\n            String home = (String) state.getAttribute(STATE_HOME_COLLECTION_ID);\r\n            Reference ref = entityManager.newReference(contentHostingService.getReference(home));\r\n            String siteId = ref.getContext();\r\n            Map<String, Boolean> statusMap = registry.getMapOfResourceTypesForContext(siteId);\r\n            if (statusMap != null && !statusMap.isEmpty() && !isSpecialSite) {\r\n                context.put(\"showOptions\", Boolean.TRUE.toString());\r\n            }\r\n        }\r\n    }\r\n    if (!isSpecialSite) {\r\n        context.put(\"showQuota\", dropboxMode || allowUpdateSite);\r\n    } else {\r\n        context.put(\"showQuota\", false);\r\n    }\r\n    context.put(\"atHome\", Boolean.toString(atHome));\r\n    if (contentHostingService.isAvailabilityEnabled()) {\r\n        context.put(\"availability_is_enabled\", Boolean.TRUE);\r\n    }\r\n    boolean showWebdavLink = ServerConfigurationService.getBoolean(\"resources.show_webdav.link\", Boolean.TRUE);\r\n    if (showWebdavLink) {\r\n        context.put(\"showWebdavLink\", Boolean.TRUE);\r\n    }\r\n    Comparator userSelectedSort = (Comparator) state.getAttribute(STATE_LIST_VIEW_SORT);\r\n    List cPath = getCollectionPath(state);\r\n    context.put(\"collectionPath\", cPath);\r\n    String sortedBy = (String) state.getAttribute(STATE_SORT_BY);\r\n    String sortedAsc = (String) state.getAttribute(STATE_SORT_ASC);\r\n    context.put(\"currentSortedBy\", sortedBy);\r\n    context.put(\"currentSortAsc\", sortedAsc);\r\n    context.put(\"TRUE\", Boolean.TRUE.toString());\r\n    boolean showRemoveAction = false;\r\n    boolean showMoveAction = false;\r\n    boolean showCopyAction = false;\r\n    Set highlightedItems = new TreeSet();\r\n    boolean showHotDropboxWidget = false;\r\n    try {\r\n        try {\r\n            contentService.checkCollection(collectionId);\r\n            context.put(\"collectionFlag\", Boolean.TRUE.toString());\r\n        } catch (IdUnusedException ex) {\r\n            log.warn(\"{}IdUnusedException: {}\", this, collectionId);\r\n            try {\r\n                ContentCollectionEdit coll = contentService.addCollection(collectionId);\r\n                contentService.commitCollection(coll);\r\n            } catch (IdUsedException inner) {\r\n                log.warn(\"{}IdUsedException: {}\", this, collectionId);\r\n                throw ex;\r\n            } catch (IdInvalidException inner) {\r\n                log.warn(\"{}IdInvalidException: {}\", this, collectionId);\r\n                throw ex;\r\n            } catch (InconsistentException inner) {\r\n                log.warn(\"{}InconsistentException: {}\", this, collectionId);\r\n                throw ex;\r\n            }\r\n        } catch (TypeException ex) {\r\n            log.warn(\"{}TypeException.\", this);\r\n            throw ex;\r\n        } catch (PermissionException ex) {\r\n            log.warn(\"{}PermissionException.\", this);\r\n            throw ex;\r\n        }\r\n        String copyFlag = (String) state.getAttribute(STATE_COPY_FLAG);\r\n        if (Boolean.TRUE.toString().equals(copyFlag)) {\r\n            context.put(\"copyFlag\", copyFlag);\r\n            List copiedItems = (List) state.getAttribute(STATE_COPIED_IDS);\r\n            highlightedItems.addAll(copiedItems);\r\n        }\r\n        String moveFlag = (String) state.getAttribute(STATE_MOVE_FLAG);\r\n        if (Boolean.TRUE.toString().equals(moveFlag)) {\r\n            context.put(\"moveFlag\", moveFlag);\r\n            List movedItems = (List) state.getAttribute(STATE_MOVED_IDS);\r\n            highlightedItems.addAll(movedItems);\r\n        }\r\n        state.removeAttribute(STATE_PASTE_ALLOWED_FLAG);\r\n        List<String> items_to_be_copied = (List<String>) state.getAttribute(STATE_ITEMS_TO_BE_COPIED);\r\n        List<String> items_to_be_moved = (List<String>) state.getAttribute(STATE_ITEMS_TO_BE_MOVED);\r\n        boolean need_to_expand_all = Boolean.TRUE.toString().equals((String) state.getAttribute(STATE_NEED_TO_EXPAND_ALL));\r\n        Set<String> expandedCollections = getExpandedCollections(state);\r\n        expandedCollections.add(collectionId);\r\n        ContentCollection collection = contentHostingService.getCollection(collectionId);\r\n        ListItem item = ListItem.getListItem(collection, null, registry, need_to_expand_all, expandedCollections, items_to_be_moved, items_to_be_copied, 0, userSelectedSort, false, null);\r\n        Map<String, ResourceToolAction> listActions = new HashMap();\r\n        List<ListItem> items = item.convert2list();\r\n        for (ListItem lItem : items) {\r\n            if (lItem.hasMultipleItemActions()) {\r\n                for (String listActionId : lItem.getMultipleItemActions().keySet()) {\r\n                    ServiceLevelAction listAction = registry.getMultiItemAction(listActionId);\r\n                    if (listAction != null) {\r\n                        listActions.put(listActionId, listAction);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        boolean canShowHide = canReviseOwn() || canReviseAny();\r\n        context.put(\"canShowHide\", canShowHide);\r\n        boolean canViewHidden = canViewHidden();\r\n        context.put(\"canViewHidden\", canViewHidden);\r\n        String zipMaxIndividualFileSizeString = ServerConfigurationService.getString(\"content.zip.download.maxindividualfilesize\", \"0\");\r\n        String zipMaxTotalSizeString = ServerConfigurationService.getString(\"content.zip.download.maxtotalsize\", \"0\");\r\n        boolean canZipDownload = (!zipMaxIndividualFileSizeString.equals(\"0\") && !zipMaxTotalSizeString.equals(\"0\"));\r\n        context.put(\"canZipDownload\", canZipDownload);\r\n        String containingCollectionId = contentService.getContainingCollectionId(item.getId());\r\n        if (ContentHostingService.COLLECTION_DROPBOX.equals(containingCollectionId)) {\r\n            Reference ref = entityManager.newReference(contentService.getReference(item.getId()));\r\n            Site site = siteService.getSite(ref.getContext());\r\n            String[] args = { site.getTitle() };\r\n            item.setName(trb.getFormattedMessage(\"title.dropbox\", (Object[]) args));\r\n            showHotDropboxWidget = true;\r\n        } else if (ContentHostingService.COLLECTION_SITE.equals(containingCollectionId)) {\r\n            Reference ref = entityManager.newReference(contentService.getReference(item.getId()));\r\n            Site site = siteService.getSite(ref.getContext());\r\n            String[] args = { site.getTitle() };\r\n            item.setName(trb.getFormattedMessage(\"title.resources\", (Object[]) args));\r\n        }\r\n        context.put(\"site\", items);\r\n        boolean show_all_sites = false;\r\n        String allowed_to_see_other_sites = (String) state.getAttribute(STATE_SHOW_ALL_SITES);\r\n        String show_other_sites = (String) state.getAttribute(STATE_SHOW_OTHER_SITES);\r\n        context.put(\"show_other_sites\", show_other_sites);\r\n        if (Boolean.TRUE.toString().equals(allowed_to_see_other_sites) && canReviseAny()) {\r\n            context.put(\"allowed_to_see_other_sites\", Boolean.TRUE.toString());\r\n            show_all_sites = Boolean.TRUE.toString().equals(show_other_sites);\r\n        }\r\n        if (atHome && show_all_sites) {\r\n            state.setAttribute(STATE_HIGHLIGHTED_ITEMS, highlightedItems);\r\n            List<ListItem> siteCollections = prepPage(state);\r\n            List<ListItem> otherSites = new ArrayList();\r\n            for (ListItem siteCollection : siteCollections) {\r\n                otherSites.addAll(siteCollection.convert2list());\r\n                if (siteCollection.isDropbox()) {\r\n                    if (ContentHostingService.COLLECTION_DROPBOX.equals(siteCollection.getEntity().getContainingCollection().getId())) {\r\n                        if (need_to_expand_all || expandedCollections.contains(siteCollection.getId())) {\r\n                            showHotDropboxWidget = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            context.put(\"other_sites\", otherSites);\r\n            for (ListItem lItem : otherSites) {\r\n                if (lItem.hasMultipleItemActions()) {\r\n                    for (String listActionId : lItem.getMultipleItemActions().keySet()) {\r\n                        ServiceLevelAction listAction = registry.getMultiItemAction(listActionId);\r\n                        if (listAction != null) {\r\n                            listActions.put(listActionId, listAction);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (state.getAttribute(STATE_NUM_MESSAGES) != null) {\r\n                context.put(\"allMsgNumber\", state.getAttribute(STATE_NUM_MESSAGES).toString());\r\n                context.put(\"allMsgNumberInt\", state.getAttribute(STATE_NUM_MESSAGES));\r\n            }\r\n            if ((state.getAttribute(STATE_TOP_MESSAGE_INDEX) != null) && (state.getAttribute(STATE_PAGESIZE) != null)) {\r\n                context.put(\"pagesize\", ((Integer) state.getAttribute(STATE_PAGESIZE)).toString());\r\n                int topMsgPos = ((Integer) state.getAttribute(STATE_TOP_MESSAGE_INDEX)) + 1;\r\n                context.put(\"topMsgPos\", Integer.toString(topMsgPos));\r\n                int btmMsgPos = topMsgPos + ((Integer) state.getAttribute(STATE_PAGESIZE)) - 1;\r\n                if (state.getAttribute(STATE_NUM_MESSAGES) != null) {\r\n                    int allMsgNumber = ((Integer) state.getAttribute(STATE_NUM_MESSAGES));\r\n                    if (btmMsgPos > allMsgNumber)\r\n                        btmMsgPos = allMsgNumber;\r\n                }\r\n                context.put(\"btmMsgPos\", Integer.toString(btmMsgPos));\r\n            }\r\n            boolean goPPButton = state.getAttribute(STATE_PREV_PAGE_EXISTS) != null;\r\n            context.put(\"goPPButton\", Boolean.toString(goPPButton));\r\n            boolean goNPButton = state.getAttribute(STATE_NEXT_PAGE_EXISTS) != null;\r\n            context.put(\"goNPButton\", Boolean.toString(goNPButton));\r\n            context.put(\"pagesize\", state.getAttribute(STATE_PAGESIZE));\r\n        }\r\n        if (showHotDropboxWidget) {\r\n            context.put(\"showHotDropboxWidget\", Boolean.TRUE.toString());\r\n        }\r\n        context.put(\"listActions\", listActions);\r\n        context.put(\"counter\", new EntityCounter());\r\n        if (state.getAttribute(STATE_PASTE_ALLOWED_FLAG) != null) {\r\n            context.put(\"paste_place_showing\", state.getAttribute(STATE_PASTE_ALLOWED_FLAG));\r\n        }\r\n        if (showRemoveAction) {\r\n            context.put(\"showRemoveAction\", Boolean.TRUE.toString());\r\n        }\r\n        if (showMoveAction) {\r\n            context.put(\"showMoveAction\", Boolean.TRUE.toString());\r\n        }\r\n        if (showCopyAction) {\r\n            context.put(\"showCopyAction\", Boolean.TRUE.toString());\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        addAlert(state, rb.getString(\"cannotfind\"));\r\n        context.put(\"collectionFlag\", Boolean.FALSE.toString());\r\n    } catch (TypeException e) {\r\n        log.warn(\"{}TypeException.\", this);\r\n        context.put(\"collectionFlag\", Boolean.FALSE.toString());\r\n    } catch (PermissionException e) {\r\n        addAlert(state, rb.getString(\"notpermis1\"));\r\n        context.put(\"collectionFlag\", Boolean.FALSE.toString());\r\n    }\r\n    context.put(\"homeCollection\", (String) state.getAttribute(STATE_HOME_COLLECTION_ID));\r\n    context.put(\"siteTitle\", state.getAttribute(STATE_SITE_TITLE));\r\n    context.put(\"resourceProperties\", contentService.newResourceProperties());\r\n    try {\r\n        Site site = siteService.getSite(toolManager.getCurrentPlacement().getContext());\r\n        context.put(\"siteTitle\", site.getTitle());\r\n    } catch (IdUnusedException e) {\r\n        log.debug(\"{}{}\", this, e);\r\n    }\r\n    context.put(\"expandallflag\", state.getAttribute(STATE_EXPAND_ALL_FLAG));\r\n    state.removeAttribute(STATE_NEED_TO_EXPAND_ALL);\r\n    justDelivered(state);\r\n    context.put(\"labeler\", new ResourceTypeLabeler());\r\n    contentPrintResultIntoContext(data, context, state);\r\n    context.put(\"canDeleteResource\", canDeleteResource());\r\n    context.put(\"userId\", sessionManager.getCurrentSessionUserId());\r\n    return TEMPLATE_NEW_LIST;\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.buildListContext",
	"Comment": "build the context for the new list view, which uses the resources type registry",
	"Method": "String buildListContext(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    return g0.getTitle().compareToIgnoreCase(g1.getTitle());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.gradebook.Gradebook.isCourseLetterGradeDisplayed",
	"Comment": "if the course grade is displayed, should the letter grade be displayed?",
	"Method": "boolean isCourseLetterGradeDisplayed(){\r\n    return courseLetterGradeDisplayed;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.PerlTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.delay",
	"Comment": "delay the emission of the signal until the other publisher signalsan item or completes.",
	"Method": "Solo<T> delay(long delay,TimeUnit unit,Solo<T> delay,long delay,TimeUnit unit,Scheduler scheduler,Solo<T> delay,Publisher<?> other){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    return onAssembly(new SoloDelayPublisher<T>(this, other));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JavaScriptTokenMaker.setE4xSupported",
	"Comment": "sets whether e4x should be highlighted.a repaint should be forced on\tall rsyntaxtextareas editing javascript if this property\tis changed to see the difference.",
	"Method": "void setE4xSupported(boolean supported){\r\n    e4xSupported = supported;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDelivery.compose",
	"Comment": "compose a javascript message for delivery to the browser client window.",
	"Method": "String compose(){\r\n    return \"\";\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Nono.timeout",
	"Comment": "switch to the fallback nono if the other publisher signals anitem or completes before this nono completes.",
	"Method": "Nono timeout(long timeout,TimeUnit unit,Nono timeout,long timeout,TimeUnit unit,Nono fallback,Nono timeout,long timeout,TimeUnit unit,Scheduler scheduler,Nono timeout,long timeout,TimeUnit unit,Scheduler scheduler,Nono fallback,Nono timeout,Publisher<?> other,Nono timeout,Publisher<?> other,Nono fallback){\r\n    ObjectHelper.requireNonNull(other, \"other is null\");\r\n    ObjectHelper.requireNonNull(fallback, \"fallback is null\");\r\n    return onAssembly(new NonoTimeout(this, other, fallback));\r\n}"
}, {
	"Path": "restx.stats.RestxStatsCollector.getMachineId",
	"Comment": "returns an id to identify this machine.instead of making a guess based on mac address and other related stuff, we only rely on a stored uuid to makeit faster. it means that when storage is disabled, the machine id will be different at each run, preventing toconsolidate information at machine level.",
	"Method": "String getMachineId(){\r\n    if (!storageEnabled) {\r\n        return uuidGenerator.doGenerate();\r\n    }\r\n    File machineIdFile = new File(storageStatsDir, \"machineId\");\r\n    if (machineIdFile.exists()) {\r\n        try {\r\n            return Files.asCharSource(machineIdFile, Charsets.UTF_8).read();\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n    String machineId = uuidGenerator.doGenerate();\r\n    try {\r\n        Files.asCharSink(machineIdFile, Charsets.UTF_8).write(machineId);\r\n    } catch (Exception e) {\r\n    }\r\n    return machineId;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientCollection.getEntry",
	"Comment": "get full entry specified by entry edit uri. note that entry may or may not be associated withthis collection.",
	"Method": "ClientEntry getEntry(String uri){\r\n    final GetMethod method = new GetMethod(uri);\r\n    authStrategy.addAuthentication(httpClient, method);\r\n    try {\r\n        httpClient.executeMethod(method);\r\n        if (method.getStatusCode() != 200) {\r\n            throw new ProponoException(\"ERROR HTTP status code=\" + method.getStatusCode());\r\n        }\r\n        final Entry romeEntry = Atom10Parser.parseEntry(new InputStreamReader(method.getResponseBodyAsStream()), uri, Locale.US);\r\n        if (!romeEntry.isMediaEntry()) {\r\n            return new ClientEntry(service, this, romeEntry, false);\r\n        } else {\r\n            return new ClientMediaEntry(service, this, romeEntry, false);\r\n        }\r\n    } catch (final Exception e) {\r\n        throw new ProponoException(\"ERROR: getting or parsing entry/media, HTTP code: \", e);\r\n    } finally {\r\n        method.releaseConnection();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.BaseCalendarService.getDailyStartTimeFromParameters",
	"Comment": "gets the daily start time parameter from a properties object filled from url parameters.",
	"Method": "TimeRange getDailyStartTimeFromParameters(Properties parameters){\r\n    return getTimeRangeParameterByName(parameters, DAILY_START_TIME_PARAMETER_NAME);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.EntityView.copy",
	"Comment": "makes a copy of an entityview which can be changed independently",
	"Method": "EntityView copy(EntityView copy,EntityView ev){\r\n    if (ev == null) {\r\n        throw new IllegalArgumentException(\"input entity view must not be null\");\r\n    }\r\n    if (ev.viewKey == null || ev.entityReference == null) {\r\n        throw new IllegalArgumentException(\"input entity view must be completely constructed\");\r\n    }\r\n    EntityView togo = new EntityView();\r\n    EntityReference ref = ev.getEntityReference();\r\n    togo.setEntityReference(new EntityReference(ref.getPrefix(), ref.getId() == null ? \"\" : ref.getId()));\r\n    togo.preloadParseTemplates(ev.getAnazlyzedTemplates());\r\n    togo.setExtension(ev.getExtension());\r\n    togo.setViewKey(ev.getViewKey());\r\n    return togo;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaUI.refreshSyntaxHighlighting",
	"Comment": "updates the view.this should be called when the underlying\trsyntaxtextarea changes its syntax editing style.",
	"Method": "void refreshSyntaxHighlighting(){\r\n    modelChanged();\r\n}"
}, {
	"Path": "co.rsk.trie.TrieImpl.save",
	"Comment": "save saves the unsaved current trie and subnodes to their associated store",
	"Method": "void save(){\r\n    if (this.saved) {\r\n        return;\r\n    }\r\n    if (this.nodes != null) {\r\n        for (TrieImpl node : this.nodes) {\r\n            if (node != null) {\r\n                node.save();\r\n            }\r\n        }\r\n    }\r\n    this.store.save(this);\r\n    this.saved = true;\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.PerhapsProcessor.hasComplete",
	"Comment": "returns true if this perhapsprocessor completed without any value.",
	"Method": "boolean hasComplete(){\r\n    return subscribers.get() == TERMINATED && value == null;\r\n}"
}, {
	"Path": "co.rsk.scoring.InetAddressBlock.contains",
	"Comment": "returns if a given address is included or not in the address block",
	"Method": "boolean contains(InetAddress address){\r\n    byte[] addressBytes = address.getAddress();\r\n    if (addressBytes.length != this.bytes.length) {\r\n        return false;\r\n    }\r\n    int k;\r\n    for (k = 0; k < this.nbytes; k++) {\r\n        if (addressBytes[k] != this.bytes[k]) {\r\n            return false;\r\n        }\r\n    }\r\n    if (this.mask != (byte) 0xff) {\r\n        return (addressBytes[k] & this.mask) == (this.bytes[k] & this.mask);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.tool.CalendarAction.doOk",
	"Comment": "action is used when dook is requested when user click on back button",
	"Method": "void doOk(RunData data,Context context){\r\n    CalendarActionState state = (CalendarActionState) getState(context, data, CalendarActionState.class);\r\n    String returnState = state.getReturnState();\r\n    if (\"\".equals(returnState) || CalendarAction.STATE_INITED.equals(returnState)) {\r\n        returnState = this.defaultStateView;\r\n    }\r\n    state.setState(returnState);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.TypeScriptTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "restx.factory.alternative.AlternativeTest.should_use_alternative_referencing_an_interface",
	"Comment": "this test uses component based on an interface, the alternative reference the interface and force to be registered\t\t with the same name\tas the original component.",
	"Method": "void should_use_alternative_referencing_an_interface(){\r\n    Factory factory = Factory.newInstance();\r\n    TestComponentInterface component = factory.getComponent(Name.of(TestComponentInterface.class, \"restx.test.component.name\"));\r\n    assertThat(component.name()).isEqualTo(\"original\");\r\n    overrideComponents().set(\"restx.test.alternatives\", \"true\");\r\n    factory = Factory.newInstance();\r\n    component = factory.getComponent(Name.of(TestComponentInterface.class, \"restx.test.component.name\"));\r\n    assertThat(component.name()).isEqualTo(\"alternative\");\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.getAttribute",
	"Comment": "get an attribute from an element.returns an empty string if none found",
	"Method": "String getAttribute(Element element,String name){\r\n    return element.getAttribute(name);\r\n}"
}, {
	"Path": "co.rsk.mine.MainNetMinerTest.submitBitcoinBlockInvalidBlockDoesntEliminateCache",
	"Comment": "this test is much more likely to fail than thesubmitbitcoinblockproofofworknotgoodenough test. even thenit should almost never fail.",
	"Method": "void submitBitcoinBlockInvalidBlockDoesntEliminateCache(){\r\n    Genesis gen = (Genesis) BlockChainImplTest.getGenesisBlock(blockchain);\r\n    gen.getHeader().setDifficulty(new BlockDifficulty(BigInteger.valueOf(300000)));\r\n    blockchain.setStatus(gen, gen.getCumulativeDifficulty());\r\n    EthereumImpl ethereumImpl = Mockito.mock(EthereumImpl.class);\r\n    Mockito.when(ethereumImpl.addNewMinedBlock(Mockito.any())).thenReturn(ImportResult.IMPORTED_BEST);\r\n    MinerServer minerServer = new MinerServerImpl(config, ethereumImpl, this.blockchain, blockProcessor, DIFFICULTY_CALCULATOR, new ProofOfWorkRule(config).setFallbackMiningEnabled(false), blockToMineBuilder(), ConfigUtils.getDefaultMiningConfig());\r\n    try {\r\n        minerServer.start();\r\n        MinerWork work = minerServer.getWork();\r\n        co.rsk.bitcoinj.core.BtcBlock bitcoinMergedMiningBlock = getMergedMiningBlock(work);\r\n        bitcoinMergedMiningBlock.setNonce(1);\r\n        SubmitBlockResult result1 = minerServer.submitBitcoinBlock(work.getBlockHashForMergedMining(), bitcoinMergedMiningBlock);\r\n        Assert.assertEquals(\"ERROR\", result1.getStatus());\r\n        Assert.assertNull(result1.getBlockInfo());\r\n        Mockito.verify(ethereumImpl, Mockito.times(0)).addNewMinedBlock(Mockito.any());\r\n    } finally {\r\n        minerServer.stop();\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.config.net.DevNetConfig.getDefaultDevNetConfig",
	"Comment": "by default devnetconfig should activate every fork at height 0",
	"Method": "DevNetConfig getDefaultDevNetConfig(){\r\n    DevNetConfig config = new DevNetConfig();\r\n    config.add(0, new DevNetOrchidConfig());\r\n    return config;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxUtilities.regexCanFollowInJavaScript",
	"Comment": "returns whether a regular expression token can follow the specified\ttoken in javascript.",
	"Method": "boolean regexCanFollowInJavaScript(Token t){\r\n    char ch;\r\n    return t == null || (t.length() == 1 && ((ch = t.charAt(0)) == '=' || ch == '(' || ch == ',' || ch == '?' || ch == ':' || ch == '[' || ch == '!' || ch == '&')) || (t.getType() == Token.OPERATOR && (t.charAt(t.length() - 1) == '=' || t.is(JS_AND) || t.is(JS_OR))) || t.is(Token.RESERVED_WORD_2, JS_KEYWORD_RETURN);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea.getMatchedBracketBGColor",
	"Comment": "gets the color used as the background for a matched bracket.",
	"Method": "Color getMatchedBracketBGColor(){\r\n    return matchedBracketBGColor;\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getMinimumLockTxValue",
	"Comment": "returns the minimum amount of satoshis a user should send to the federation.",
	"Method": "Coin getMinimumLockTxValue(){\r\n    return bridgeConstants.getMinimumLockTxValue();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.ErrorStrip.getShowMarkedOccurrences",
	"Comment": "returns whether marked occurrences are shown in this error strip.",
	"Method": "boolean getShowMarkedOccurrences(){\r\n    return showMarkedOccurrences;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.CodeTemplateManager.replaceTemplates",
	"Comment": "replaces the current set of available templates with the ones\tspecified.",
	"Method": "void replaceTemplates(CodeTemplate[] newTemplates){\r\n    templates.clear();\r\n    if (newTemplates != null) {\r\n        for (int i = 0; i < newTemplates.length; i++) {\r\n            templates.add(newTemplates[i]);\r\n        }\r\n    }\r\n    sortTemplates();\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.ExclusionRecurrenceRule.generateInstances",
	"Comment": "return a list of all recurrenceinstance objects generated by this rule within the given time range, based on the\t prototype first range, in time order.",
	"Method": "List generateInstances(TimeRange prototype,TimeRange range,TimeZone timeZone){\r\n    return new Vector();\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.impl.PDFExportService.shrinkTimeRangeToCurrentMonth",
	"Comment": "the time ranges that we get from the calendaraction class have days in the week of the first and last weeks padded out to make a full week. this function will shrink this range to only one month.",
	"Method": "TimeRange shrinkTimeRangeToCurrentMonth(TimeRange expandedTimeRange){\r\n    long millisecondsInWeek = (7 * MILLISECONDS_IN_DAY);\r\n    Time startTime = expandedTimeRange.firstTime();\r\n    Time somewhereInTheMonthTime = timeService.newTime(startTime.getTime() + 2 * millisecondsInWeek);\r\n    TimeBreakdown somewhereInTheMonthBreakdown = somewhereInTheMonthTime.breakdownLocal();\r\n    CalendarUtil calendar = new CalendarUtil(rb);\r\n    calendar.setDay(somewhereInTheMonthBreakdown.getYear(), somewhereInTheMonthBreakdown.getMonth(), somewhereInTheMonthBreakdown.getDay());\r\n    int numDaysInMonth = calendar.getNumberOfDays();\r\n    return timeService.newTimeRange(timeService.newTimeLocal(somewhereInTheMonthBreakdown.getYear(), somewhereInTheMonthBreakdown.getMonth(), 1, 0, 0, 0, 0), timeService.newTimeLocal(somewhereInTheMonthBreakdown.getYear(), somewhereInTheMonthBreakdown.getMonth(), numDaysInMonth, 23, 59, 59, 999));\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.JSPTokenMaker.yypushback",
	"Comment": "pushes the specified amount of characters back into the input stream.they will be read again by then next call of the scanning method",
	"Method": "void yypushback(int number){\r\n    if (number > yylength())\r\n        zzScanError(ZZ_PUSHBACK_2BIG);\r\n    zzMarkedPos -= number;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.folding.Fold.getLineCount",
	"Comment": "returns the number of lines that are hidden when this fold is\tcollapsed.",
	"Method": "int getLineCount(){\r\n    return getEndLine() - getStartLine();\r\n}"
}, {
	"Path": "net.oauth.signature.Base64.containsBase64Byte",
	"Comment": "tests a given byte array to see if it contains only valid characters within the base64 alphabet.",
	"Method": "boolean containsBase64Byte(byte[] arrayOctet){\r\n    for (int i = 0; i < arrayOctet.length; i++) {\r\n        if (isBase64(arrayOctet[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.textSearch",
	"Comment": "get the text associated with this element at this level only, orrecursivley, searching through all child elements",
	"Method": "String textSearch(Node parent,boolean recursiveSearch){\r\n    String text = null;\r\n    if (parent != null) {\r\n        for (Node child = parent.getFirstChild(); child != null; child = child.getNextSibling()) {\r\n            switch(child.getNodeType()) {\r\n                case Node.TEXT_NODE:\r\n                    text = normalizeText(text, child.getNodeValue());\r\n                    break;\r\n                case Node.ELEMENT_NODE:\r\n                    if (recursiveSearch) {\r\n                        text = normalizeText(text, getText(child));\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    return text == null ? text : text.trim();\r\n}"
}, {
	"Path": "org.tsugi.basiclti.BasicLTIUtil.convertToProperties",
	"Comment": "simple utility method to help with the migration from map\tto properties.",
	"Method": "Properties convertToProperties(Map<String, String> map){\r\n    final Properties properties = new Properties();\r\n    if (map != null) {\r\n        for (Entry<String, String> entry : map.entrySet()) {\r\n            properties.setProperty(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n    return properties;\r\n}"
}, {
	"Path": "org.sakaiproject.contentreview.turnitin.TurnitinReviewServiceImpl.getUserFirstName",
	"Comment": "gets a first name for a user or generates an initial from the eid",
	"Method": "String getUserFirstName(User user){\r\n    String ufn = user.getFirstName().trim();\r\n    if (ufn == null || ufn.equals(\"\")) {\r\n        boolean genFN = (boolean) serverConfigurationService.getBoolean(\"turnitin.generate.first.name\", true);\r\n        if (genFN) {\r\n            String eid = user.getEid();\r\n            if (eid != null && eid.length() > 0) {\r\n                ufn = eid.substring(0, 1);\r\n            } else {\r\n                ufn = \"X\";\r\n            }\r\n        }\r\n    }\r\n    return ufn;\r\n}"
}, {
	"Path": "co.rsk.remasc.Remasc.payWithSiblings",
	"Comment": "pay the mainchain block miner, its siblings miners and the publisher miners",
	"Method": "void payWithSiblings(BlockHeader processingBlockHeader,Coin fullBlockReward,List<Sibling> siblings,boolean previousBrokenSelectionRule){\r\n    SiblingPaymentCalculator paymentCalculator = new SiblingPaymentCalculator(fullBlockReward, previousBrokenSelectionRule, siblings.size(), this.remascConstants);\r\n    byte[] processingBlockHeaderHash = processingBlockHeader.getHash().getBytes();\r\n    this.payPublishersWhoIncludedSiblings(processingBlockHeaderHash, siblings, paymentCalculator.getIndividualPublisherReward());\r\n    provider.addToBurnBalance(paymentCalculator.getPublishersSurplus());\r\n    provider.addToBurnBalance(paymentCalculator.getMinersSurplus());\r\n    this.payIncludedSiblings(processingBlockHeaderHash, siblings, paymentCalculator.getIndividualMinerReward());\r\n    if (previousBrokenSelectionRule) {\r\n        provider.addToBurnBalance(paymentCalculator.getPunishment().multiply(BigInteger.valueOf(siblings.size() + 1L)));\r\n    }\r\n    feesPayer.payMiningFees(processingBlockHeaderHash, paymentCalculator.getIndividualMinerReward(), processingBlockHeader.getCoinbase(), logs);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.BBCodeTokenMaker.getTokenList",
	"Comment": "returns the first token in the linked list of tokens generated\tfrom text.this method must be implemented by\tsubclasses so they can correctly implement syntax highlighting.",
	"Method": "Token getTokenList(Segment text,int initialTokenType,int startOffset){\r\n    resetTokenList();\r\n    this.offsetShift = -text.offset + startOffset;\r\n    int state = Token.NULL;\r\n    switch(initialTokenType) {\r\n        case INTERNAL_INTAG:\r\n            state = INTAG;\r\n            start = text.offset;\r\n            break;\r\n        default:\r\n            state = Token.NULL;\r\n    }\r\n    s = text;\r\n    try {\r\n        yyreset(zzReader);\r\n        yybegin(state);\r\n        return yylex();\r\n    } catch (IOException ioe) {\r\n        ioe.printStackTrace();\r\n        return new TokenImpl();\r\n    }\r\n}"
}, {
	"Path": "com.rometools.propono.atom.server.impl.FileBasedAtomHandler.isAtomServiceURI",
	"Comment": "return true if specified pathinfo represents uri of service doc.",
	"Method": "boolean isAtomServiceURI(AtomRequest areq){\r\n    final String[] pathInfo = StringUtils.split(areq.getPathInfo(), \"/\");\r\n    if (pathInfo.length == 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.emailtemplateservice.service.impl.EmailTemplateServiceImpl.deleteAllTemplates",
	"Comment": "delete all templates in the database\tonly used in unit tests so not in api\ttodo rewrite for efficiency",
	"Method": "void deleteAllTemplates(){\r\n    log.debug(\"deleteAllTemplates\");\r\n    List<EmailTemplate> templates = dao.findAll(EmailTemplate.class);\r\n    for (int i = 0; i < templates.size(); i++) {\r\n        EmailTemplate template = templates.get(i);\r\n        log.debug(\"deleting template: \" + template.getId());\r\n        dao.delete(template);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.SectionEntityProvider.delete",
	"Comment": "delete a section by eid. wraps coursemanagementadministration.removesection.",
	"Method": "void delete(String eid){\r\n    cmAdmin.removeSection(eid);\r\n}"
}, {
	"Path": "org.sakaiproject.calendar.api.CalendarEventVector.getEvents",
	"Comment": "return an iterator on events in the calendareventvector.\t the order in which the events will be found in the iteration is by event start date.",
	"Method": "Iterator getEvents(TimeRange range){\r\n    Vector events = new Vector();\r\n    Iterator it = iterator();\r\n    while (it.hasNext()) {\r\n        CalendarEvent test = (CalendarEvent) it.next();\r\n        if (range.overlaps(test.getRange())) {\r\n            events.add(test);\r\n        }\r\n    }\r\n    return events.iterator();\r\n}"
}, {
	"Path": "com.rometools.modules.base.io.GoogleBaseParserTest.testService2Parse",
	"Comment": "test of parse method, of class com.totsp.xml.syndication.base.io.googlebaseparser.",
	"Method": "void testService2Parse(){\r\n    LOG.debug(\"testService2Parse\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final Calendar cal = Calendar.getInstance();\r\n    cal.setTimeInMillis(0);\r\n    final SyndFeed feed = input.build(new File(super.getTestFile(\"xml/services2.xml\")));\r\n    final List<SyndEntry> entries = feed.getEntries();\r\n    final SyndEntry entry = entries.get(0);\r\n    final Service module = (Service) entry.getModule(GoogleBase.URI);\r\n    Assert.assertEquals(\"Image Link\", \"http://www.providers-website.com/image1.jpg\", module.getImageLinks()[0].toString());\r\n    cal.set(2005, 11, 20, 0, 0, 0);\r\n    Assert.assertEquals(\"Expiration Date\", cal.getTime(), module.getExpirationDate());\r\n    this.assertEquals(\"Labels\", new String[] { \"Food delivery\" }, module.getLabels());\r\n    cal.set(2005, 2, 24);\r\n    Assert.assertEquals(\"Currency\", CurrencyEnumeration.USD, module.getCurrency());\r\n    Assert.assertEquals(\"Price\", 15, module.getPrice().getValue(), 0);\r\n    Assert.assertEquals(\"PriceType\", PriceTypeEnumeration.STARTING, module.getPriceType());\r\n    this.assertEquals(\"Payment Accepted\", new PaymentTypeEnumeration[] { PaymentTypeEnumeration.VISA, PaymentTypeEnumeration.MASTERCARD }, module.getPaymentAccepted());\r\n    Assert.assertEquals(\"Payment Notes\", \"minimum payment on credit cards:45\", module.getPaymentNotes());\r\n    Assert.assertEquals(\"Service Type\", \"delivery\", module.getServiceType());\r\n    Assert.assertEquals(\"Location\", \"Anytown, CA, USA\", module.getLocation());\r\n    Assert.assertEquals(\"DeliveryRad\", 20, module.getDeliveryRadius().getValue(), 0);\r\n    Assert.assertEquals(\"Delivery Notes\", \"will deliver between 9am -5pm\", module.getDeliveryNotes());\r\n}"
}, {
	"Path": "com.rometools.certiorem.hub.notify.standard.UnthreadedNotifier.enqueueNotification",
	"Comment": "a blocking call that performs a notification. if there are pending retries that are olderthan two minutes old, they will be retried before the method returns.",
	"Method": "void enqueueNotification(Notification not){\r\n    not.lastRun = System.currentTimeMillis();\r\n    final SubscriptionSummary summary = postNotification(not.subscriber, not.mimeType, not.payload);\r\n    not.callback.onSummaryInfo(summary);\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.isAuthenticated",
	"Comment": "this is the most basic permission which is true as soon as a principal is authenticated.",
	"Method": "Permission isAuthenticated(){\r\n    return IS_AUTHENTICATED;\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.IconRowHeader.addOffsetTrackingIcon",
	"Comment": "adds an icon that tracks an offset in the document, and is displayed\tadjacent to the line numbers.this is useful for marking things such\tas source code errors.",
	"Method": "GutterIconInfo addOffsetTrackingIcon(int offs,Icon icon,GutterIconInfo addOffsetTrackingIcon,int offs,Icon icon,String tip){\r\n    if (offs < 0 || offs > textArea.getDocument().getLength()) {\r\n        throw new BadLocationException(\"Offset \" + offs + \" not in \" + \"required range of 0-\" + textArea.getDocument().getLength(), offs);\r\n    }\r\n    Position pos = textArea.getDocument().createPosition(offs);\r\n    GutterIconImpl ti = new GutterIconImpl(icon, pos, tip);\r\n    if (trackingIcons == null) {\r\n        trackingIcons = new ArrayList<GutterIconImpl>(1);\r\n    }\r\n    int index = Collections.binarySearch(trackingIcons, ti);\r\n    if (index < 0) {\r\n        index = -(index + 1);\r\n    }\r\n    trackingIcons.add(index, ti);\r\n    repaint();\r\n    return ti;\r\n}"
}, {
	"Path": "org.sakaiproject.citation.cover.ConfigurationService.getConfigurationXml",
	"Comment": "fetch the appropriate xml configuration document for this user",
	"Method": "String getConfigurationXml(){\r\n    org.sakaiproject.citation.api.ConfigurationService instance = getInstance();\r\n    if (instance == null) {\r\n        return null;\r\n    }\r\n    return instance.getConfigurationXml();\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.templates.StaticCodeTemplate.toString",
	"Comment": "returns a string representation of this template for debugging\tpurposes.",
	"Method": "String toString(){\r\n    return \"[StaticCodeTemplate: id=\" + getID() + \", text=\" + getBeforeCaretText() + \"|\" + getAfterCaretText() + \"]\";\r\n}"
}, {
	"Path": "co.rsk.mine.GenesisMerkleProofBuilder.getBitcoinMergedMerkleBranch",
	"Comment": "getbitcoinmergedmerklebranch returns the partial merkle branch needed to validate that the coinbase txis part of the merkle tree.",
	"Method": "PartialMerkleTree getBitcoinMergedMerkleBranch(List<Sha256Hash> txHashes,NetworkParameters params){\r\n    byte[] bitvector = new byte[(txHashes.size() + 7) / 8];\r\n    Utils.setBitLE(bitvector, 0);\r\n    return PartialMerkleTree.buildFromLeaves(params, bitvector, txHashes);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.AbstractTokenMakerTest2.assertAllTokensOfType",
	"Comment": "verifies that all tokens in an array have a specific token t ype.",
	"Method": "void assertAllTokensOfType(String[] tokens,int expectedType){\r\n    for (String token : tokens) {\r\n        Segment segment = createSegment(token);\r\n        TokenMaker tm = createTokenMaker();\r\n        Token t = tm.getTokenList(segment, TokenTypes.NULL, 0);\r\n        Assert.assertEquals(\"Token has unexpected type: orig=\" + token + \", actual=\" + t, expectedType, t.getType());\r\n    }\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.TypeScriptTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.anyOf",
	"Comment": "a compound permission which is true if any of the underlying permissions is true",
	"Method": "Permission anyOf(Permission permissions){\r\n    return new Permission() {\r\n        @Override\r\n        public Optional<? extends Permission> has(RestxPrincipal principal, Map<String, String> roleInterpolationMap) {\r\n            for (Permission permission : permissions) {\r\n                Optional<? extends Permission> p = permission.has(principal, roleInterpolationMap);\r\n                if (p.isPresent()) {\r\n                    return p;\r\n                }\r\n            }\r\n            return Optional.absent();\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return \"ANY_OF[\" + Arrays.toString(permissions) + \"]\";\r\n        }\r\n    };\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.anyOf",
	"Comment": "a compound permission which is true if any of the underlying permissions is true",
	"Method": "Permission anyOf(Permission permissions){\r\n    for (Permission permission : permissions) {\r\n        Optional<? extends Permission> p = permission.has(principal, roleInterpolationMap);\r\n        if (p.isPresent()) {\r\n            return p;\r\n        }\r\n    }\r\n    return Optional.absent();\r\n}"
}, {
	"Path": "restx.security.PermissionFactory.anyOf",
	"Comment": "a compound permission which is true if any of the underlying permissions is true",
	"Method": "Permission anyOf(Permission permissions){\r\n    return \"ANY_OF[\" + Arrays.toString(permissions) + \"]\";\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.setDescription",
	"Comment": "sets the dublincore module description. convenience method that can be used when there isonly one description to set.",
	"Method": "void setDescription(String description){\r\n    this.description = Lists.create(description);\r\n}"
}, {
	"Path": "org.ethereum.ConcatKDFBytesGenerator.generateBytes",
	"Comment": "fill len bytes of the output buffer with bytes generated from thederivation function.",
	"Method": "int generateBytes(byte[] out,int outOff,int len){\r\n    if ((out.length - len) < outOff) {\r\n        throw new DataLengthException(\"output buffer too small\");\r\n    }\r\n    long oBytes = len;\r\n    int outLen = digest.getDigestSize();\r\n    if (oBytes > ((2L << 32) - 1)) {\r\n        throw new IllegalArgumentException(\"Output length too large\");\r\n    }\r\n    int cThreshold = (int) ((oBytes + outLen - 1) / outLen);\r\n    byte[] dig = new byte[digest.getDigestSize()];\r\n    byte[] c = new byte[4];\r\n    Pack.intToBigEndian(counterStart, c, 0);\r\n    int counterBase = counterStart & ~0xFF;\r\n    for (int i = 0; i < cThreshold; i++) {\r\n        digest.update(c, 0, c.length);\r\n        digest.update(shared, 0, shared.length);\r\n        if (iv != null) {\r\n            digest.update(iv, 0, iv.length);\r\n        }\r\n        digest.doFinal(dig, 0);\r\n        if (len > outLen) {\r\n            System.arraycopy(dig, 0, out, outOff, outLen);\r\n            outOff += outLen;\r\n            len -= outLen;\r\n        } else {\r\n            System.arraycopy(dig, 0, out, outOff, len);\r\n        }\r\n        if (++c[3] == 0) {\r\n            counterBase += 0x100;\r\n            Pack.intToBigEndian(counterBase, c, 0);\r\n        }\r\n    }\r\n    digest.reset();\r\n    return (int) oBytes;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientCollection.createEntry",
	"Comment": "create new entry associated with collection, but do not save to server.",
	"Method": "ClientEntry createEntry(){\r\n    if (!isWritable()) {\r\n        throw new ProponoException(\"Collection is not writable\");\r\n    }\r\n    return new ClientEntry(service, this);\r\n}"
}, {
	"Path": "com.rometools.modules.sse.SSEParserTest.testGetNamespaceUri",
	"Comment": "test of getnamespaceuri method, of class com.rometools.rome.feed.module.sse.sse091",
	"Method": "void testGetNamespaceUri(){\r\n    assertEquals(\"Namespace\", SSEModule.SSE_SCHEMA_URI, new SSE091Generator().getNamespaceUri());\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.concatDelayError",
	"Comment": "concatenate the values in order from a sequence of solo sources, delayingerrors till a source terminates or the whole sequence terminates.",
	"Method": "Flowable<T> concatDelayError(Iterable<? extends Solo<? extends T>> sources,Flowable<T> concatDelayError,Publisher<? extends Solo<? extends T>> sources,Flowable<T> concatDelayError,Publisher<? extends Solo<? extends T>> sources,int prefetch,Flowable<T> concatDelayError,Publisher<? extends Solo<? extends T>> sources,int prefetch,boolean tillTheEnd){\r\n    return Flowable.concatDelayError(sources, prefetch, tillTheEnd);\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.setCourseManagementService",
	"Comment": "called by the spring framework to initialize the coursemanagementservice data member specified in the components.xml file via ioc.",
	"Method": "void setCourseManagementService(CourseManagementService courseManagementService){\r\n    this.courseManagementService = courseManagementService;\r\n}"
}, {
	"Path": "com.rometools.propono.atom.client.ClientEntry.getContent",
	"Comment": "convenience method to get first content object in content collection. atom 1.0 allows onlyone content element per entry.",
	"Method": "Content getContent(){\r\n    if (getContents() != null && !getContents().isEmpty()) {\r\n        final Content c = getContents().get(0);\r\n        return c;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.rometools.modules.yahooweather.io.WeatherGeneratorTest.testGenerate",
	"Comment": "test of generate method, of class com.totsp.xml.syndication.base.io.slashgenerator.",
	"Method": "void testGenerate(){\r\n    LOG.debug(\"testGenerate\");\r\n    final SyndFeedInput input = new SyndFeedInput();\r\n    final SyndFeedOutput output = new SyndFeedOutput();\r\n    final File testDir = new File(super.getTestFile(\"xml\"));\r\n    final File[] testFiles = testDir.listFiles();\r\n    for (int h = 0; h < testFiles.length; h++) {\r\n        if (!testFiles[h].getName().endsWith(\".xml\")) {\r\n            continue;\r\n        }\r\n        LOG.debug(\"processing\" + testFiles[h]);\r\n        final SyndFeed feed = input.build(testFiles[h]);\r\n        output.output(feed, new File(\"target/\" + testFiles[h].getName()));\r\n        final SyndFeed feed2 = input.build(new File(\"target/\" + testFiles[h].getName()));\r\n        final YWeatherModule weather = (YWeatherModule) feed.getModule(YWeatherModule.URI);\r\n        final YWeatherModule weather2 = (YWeatherModule) feed2.getModule(YWeatherModule.URI);\r\n        Assert.assertEquals(testFiles[h].getName(), weather, weather2);\r\n        for (int i = 0; i < feed.getEntries().size(); i++) {\r\n            final SyndEntry entry = feed.getEntries().get(i);\r\n            final SyndEntry entry2 = feed2.getEntries().get(i);\r\n            final YWeatherModule weatherEntry = (YWeatherModule) entry.getModule(YWeatherModule.URI);\r\n            final YWeatherModule weatherEntry2 = (YWeatherModule) entry2.getModule(YWeatherModule.URI);\r\n            assertEquals(testFiles[h].getName(), weatherEntry, weatherEntry2);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.ethereum.net.rlpx.HandshakeHandlerTest.simulateHandshakeStartedByPeer",
	"Comment": "in the future, the handshake classes should be rewritten to allow unit testing.",
	"Method": "void simulateHandshakeStartedByPeer(List<Capability> capabilities){\r\n    ECKey remoteKey = new ECKey();\r\n    handler.setRemoteId(\"\", channel);\r\n    handler.internalChannelActive(ctx);\r\n    EncryptionHandshake handshake = new EncryptionHandshake(hhKey.getPubKeyPoint());\r\n    AuthInitiateMessageV4 initiateMessage = handshake.createAuthInitiateV4(remoteKey);\r\n    byte[] initiatePacket = handshake.encryptAuthInitiateV4(initiateMessage);\r\n    ch.writeInbound(Unpooled.copiedBuffer(initiatePacket));\r\n    ByteBuf responsePacketByteBuf = (ByteBuf) ch.readOutbound();\r\n    byte[] responsePacket = new byte[responsePacketByteBuf.readableBytes()];\r\n    responsePacketByteBuf.readBytes(responsePacket);\r\n    handshake.handleAuthResponseV4(remoteKey, initiatePacket, responsePacket);\r\n    HelloMessage helloMessage = new HelloMessage(P2pHandler.VERSION, \"\", capabilities, 4321, Hex.toHexString(HashUtil.randomPeerId()));\r\n    byte[] payload = helloMessage.getEncoded();\r\n    FrameCodec frameCodec = new FrameCodec(handshake.getSecrets());\r\n    ByteBuf byteBufMsg = ch.alloc().buffer();\r\n    frameCodec.writeFrame(new FrameCodec.Frame(helloMessage.getCode(), payload), byteBufMsg);\r\n    ch.writeInbound(byteBufMsg);\r\n}"
}, {
	"Path": "org.fife.util.DynamicIntArray.get",
	"Comment": "returns the int at the specified position in this array\tobject.",
	"Method": "int get(int index){\r\n    if (index >= size) {\r\n        throwException(index);\r\n    }\r\n    return data[index];\r\n}"
}, {
	"Path": "org.sakaiproject.content.tool.ResourcesAction.doCollapse_collection",
	"Comment": "remove the collection id from the expanded collection list",
	"Method": "void doCollapse_collection(RunData data){\r\n    log.debug(\"{}.doCollapse_collection()\", this);\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    Set<String> expandedItems = getExpandedCollections(state);\r\n    Map folderSortMap = setStateAttributeExpandedFolderSortMap(state);\r\n    ParameterParser params = data.getParameters();\r\n    String collectionId = params.getString(\"collectionId\");\r\n    Set selectedSet = new TreeSet();\r\n    String[] selectedItems = data.getParameters().getStrings(\"selectedMembers\");\r\n    if (selectedItems != null) {\r\n        selectedSet.addAll(Arrays.asList(selectedItems));\r\n    }\r\n    state.setAttribute(STATE_LIST_SELECTIONS, selectedSet);\r\n    SortedSet newSet = new TreeSet();\r\n    for (String id : expandedItems) {\r\n        if (id.startsWith(collectionId)) {\r\n            String refstr = contentHostingService.getReference(id);\r\n            if (refstr != null) {\r\n                Reference reference = entityManager.newReference(refstr);\r\n                if (reference != null) {\r\n                    ContentEntity entity = (ContentEntity) reference.getEntity();\r\n                    if (entity != null) {\r\n                        String typeId = entity.getResourceType();\r\n                        ResourceTypeRegistry registry = (ResourceTypeRegistry) state.getAttribute(STATE_RESOURCES_TYPE_REGISTRY);\r\n                        if (typeId != null && registry != null) {\r\n                            ResourceType typeDef = registry.getType(typeId);\r\n                            if (typeDef != null && typeDef.isExpandable()) {\r\n                                ServiceLevelAction collapseAction = ((ExpandableResourceType) typeDef).getCollapseAction();\r\n                                if (collapseAction != null && collapseAction.available(entity)) {\r\n                                    collapseAction.initializeAction(reference);\r\n                                    collapseAction.finalizeAction(reference);\r\n                                    folderSortMap.remove(id);\r\n                                    addObservingPattern(id, state);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            newSet.add(id);\r\n        }\r\n    }\r\n    expandedItems.clear();\r\n    expandedItems.addAll(newSet);\r\n    removeObservingPattern(collectionId, state);\r\n}"
}, {
	"Path": "com.rometools.modules.mediarss.types.MediaContent.getAudioChannels",
	"Comment": "channels is number of audio channels in the media object. it is an optional attribute.",
	"Method": "Integer getAudioChannels(){\r\n    return audioChannels;\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.util.DomUtils.getAllTextAtNode",
	"Comment": "get the text associated with this element, at all suboordinate levels",
	"Method": "String getAllTextAtNode(Node parent){\r\n    return textSearch(parent, true);\r\n}"
}, {
	"Path": "edu.indiana.lib.twinpeaks.search.sru.ss360search.Query.parseStatusRecord",
	"Comment": "parse the status record.we establish the global search status block here, saving the result setid, estimated hit count, etc.",
	"Method": "void parseStatusRecord(Document responseDocument){\r\n    SessionContext sessionContext = getSessionContext();\r\n    Element responseRoot = responseDocument.getDocumentElement();\r\n    Element element;\r\n    List providerList;\r\n    NodeList counterList;\r\n    int active, total;\r\n    saveResultSetId(responseDocument);\r\n    element = DomUtils.getElementNS(NS_CS, responseRoot, \"searchProfile\");\r\n    providerList = DomUtils.selectElementsByAttributeValueNS(NS_CS, element, \"searchProfile\", \"level\", \"database\");\r\n    if (providerList.isEmpty()) {\r\n        String message = \"No database specified for provider in 360 Search response\";\r\n        log.error(message);\r\n        displayXml(element);\r\n        throw new SearchException(message);\r\n    }\r\n    active = 0;\r\n    total = 0;\r\n    for (int i = 0; i < providerList.size(); i++) {\r\n        Element provider;\r\n        String target;\r\n        Map map;\r\n        int estimate, hits;\r\n        provider = (Element) providerList.get(i);\r\n        target = provider.getAttribute(\"id\");\r\n        map = StatusUtils.getStatusMapForTarget(sessionContext, target);\r\n        if (map == null) {\r\n            StatusUtils.initialize(sessionContext, target);\r\n            map = StatusUtils.getStatusMapForTarget(sessionContext, target);\r\n        }\r\n        element = DomUtils.selectFirstElementByAttributeValueNS(NS_CS, provider, \"citationCount\", \"type\", \"total\");\r\n        estimate = Integer.parseInt(DomUtils.getText(element));\r\n        element = DomUtils.selectFirstElementByAttributeValueNS(NS_CS, provider, \"citationCount\", \"type\", \"partial\");\r\n        hits = Integer.parseInt(DomUtils.getText(element));\r\n        log.debug(\"*** Estimated hits: \" + estimate + \", actual hits: \" + hits);\r\n        map.put(\"ESTIMATE\", \"0\");\r\n        map.put(\"STATUS\", \"DONE\");\r\n        if ((estimate > 0) && (hits > 0)) {\r\n            total += estimate;\r\n            map.put(\"ESTIMATE\", String.valueOf(estimate));\r\n            map.put(\"STATUS\", \"ACTIVE\");\r\n            active++;\r\n        }\r\n        log.debug(\"Database details: \" + map);\r\n    }\r\n    sessionContext.put(\"maxRecords\", String.valueOf(total));\r\n    sessionContext.putInt(\"active\", active);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.module.DCModuleImpl.getTitle",
	"Comment": "gets the dublincore module title. convenience method that can be used to obtain the firstitem, null if none.",
	"Method": "String getTitle(){\r\n    return Lists.firstEntry(title);\r\n}"
}, {
	"Path": "com.rometools.rome.feed.synd.SyndEntryImpl.setCategories",
	"Comment": "sets the entry categories.this method is a convenience method, it maps to the dublin core module subjects.",
	"Method": "void setCategories(List<SyndCategory> categories){\r\n    this.categories = categories;\r\n}"
}, {
	"Path": "co.rsk.net.NodeMessageHandlerTest.processInvalidPoWMessageUsingProcessor",
	"Comment": "this should be executed in a special mode where difficulty is high.",
	"Method": "void processInvalidPoWMessageUsingProcessor(){\r\n    SimpleMessageChannel sender = new SimpleMessageChannel();\r\n    PeerScoringManager scoring = createPeerScoringManager();\r\n    SimpleBlockProcessor sbp = new SimpleBlockProcessor();\r\n    NodeMessageHandler processor = new NodeMessageHandler(config, sbp, null, null, null, scoring, new ProofOfWorkRule(config).setFallbackMiningEnabled(false));\r\n    Block block = BlockChainBuilder.ofSize(1, true).getBestBlock();\r\n    byte[] mergedMiningHeader = block.getBitcoinMergedMiningHeader();\r\n    mergedMiningHeader[76] += 3;\r\n    Message message = new BlockMessage(block);\r\n    processor.processMessage(sender, message);\r\n    Assert.assertNotNull(sbp.getBlocks());\r\n    Assert.assertEquals(0, sbp.getBlocks().size());\r\n    Assert.assertFalse(scoring.isEmpty());\r\n    PeerScoring pscoring = scoring.getPeerScoring(sender.getPeerNodeID());\r\n    Assert.assertNotNull(pscoring);\r\n    Assert.assertFalse(pscoring.isEmpty());\r\n    Assert.assertEquals(1, pscoring.getTotalEventCounter());\r\n    Assert.assertEquals(1, pscoring.getEventCounter(EventType.INVALID_BLOCK));\r\n}"
}, {
	"Path": "org.sakaiproject.cmprovider.EnrollmentEntityProvider.update",
	"Comment": "add or update an enrollment. wraps coursemanagementadministration.addorupdateenrollment",
	"Method": "void update(Object entity){\r\n    createOrUpdateEnrollment(entity);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.basetypes.Solo.ignoreElement",
	"Comment": "ignore the solo value of this solo and only signal the terminal events.",
	"Method": "Nono ignoreElement(){\r\n    return Nono.onAssembly(new NonoFromPublisher(this));\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTATextTransferHandler.getSourceActions",
	"Comment": "this is the type of transfer actions supported by the source.some\tmodels are not mutable, so a transfer operation of copy only should\tbe advertised in that case.",
	"Method": "int getSourceActions(JComponent c){\r\n    if (((JTextComponent) c).isEditable()) {\r\n        return COPY_OR_MOVE;\r\n    } else {\r\n        return COPY;\r\n    }\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.isBtcTxHashAlreadyProcessed",
	"Comment": "returns whether a given btc transaction hash has alreadybeen processed by the bridge.",
	"Method": "Boolean isBtcTxHashAlreadyProcessed(Sha256Hash btcTxHash){\r\n    return provider.getBtcTxHashesAlreadyProcessed().containsKey(btcTxHash);\r\n}"
}, {
	"Path": "co.rsk.peg.BridgeSupport.getLockWhitelistEntryByIndex",
	"Comment": "returns the lock whitelist address storedat the given index, or null if theindex is out of bounds",
	"Method": "LockWhitelistEntry getLockWhitelistEntryByIndex(int index){\r\n    List<LockWhitelistEntry> entries = provider.getLockWhitelist().getAll();\r\n    if (index < 0 || index >= entries.size()) {\r\n        return null;\r\n    }\r\n    return entries.get(index);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.GroovyTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.Pattern9.then",
	"Comment": "matches when all observable sequences have an availableelement and projects the elements by invoking the selector function.",
	"Method": "Plan<R> then(Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> selector){\r\n    ObjectHelper.requireNonNull(selector, \"selector is null\");\r\n    return new Plan9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>(this, selector);\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.RTextAreaBase.setMargin",
	"Comment": "overridden to update the current line highlight location.",
	"Method": "void setMargin(Insets insets){\r\n    Insets old = getInsets();\r\n    int oldTop = old != null ? old.top : 0;\r\n    int newTop = insets != null ? insets.top : 0;\r\n    if (oldTop != newTop) {\r\n        previousCaretY = currentCaretY = newTop;\r\n    }\r\n    super.setMargin(insets);\r\n}"
}, {
	"Path": "com.rometools.modules.content.ContentModuleImplTest.testInterface",
	"Comment": "test of getinterface method, of class com.totsp.xml.syndication.content.contentmoduleimpl.",
	"Method": "void testInterface(){\r\n    LOG.debug(\"testInterface\");\r\n    assertTrue(module.getInterface().equals(ContentModule.class));\r\n}"
}, {
	"Path": "org.sakaiproject.chat2.tool.ChatNavigationHandler.handleNavigation",
	"Comment": "perform navigation processing based on the state information in the specified facescontext, plus the outcome string returned by an executed application action.",
	"Method": "void handleNavigation(FacesContext facesContext,String fromAction,String outcome){\r\n    if (!facesContext.getResponseComplete()) {\r\n        navbase.handleNavigation(facesContext, fromAction, outcome);\r\n    }\r\n}"
}, {
	"Path": "com.rometools.modules.base.types.FloatUnitTest.testFloatUnit",
	"Comment": "test of getunits method, of class com.totsp.xml.syndication.base.types.floatunit.",
	"Method": "void testFloatUnit(){\r\n    LOG.debug(\"testFloatUnit\");\r\n    FloatUnit fu = new FloatUnit(\"1.22km\");\r\n    assertEquals((float) 1.22, fu.getValue(), 0);\r\n    assertEquals(\"km\", fu.getUnits());\r\n    fu = new FloatUnit(\"1 gb\");\r\n    assertEquals(1, fu.getValue(), 0);\r\n    assertEquals(\"gb\", fu.getUnits());\r\n    fu = new FloatUnit(\"-3.1\");\r\n    assertEquals((float) -3.1, fu.getValue(), 0);\r\n    assertEquals(null, fu.getUnits());\r\n}"
}, {
	"Path": "org.fife.ui.rtextarea.ClipboardHistory.getMaxSize",
	"Comment": "returns the maximum number of clipboard values remembered.",
	"Method": "int getMaxSize(){\r\n    return maxSize;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.DockerTokenMaker.yytext",
	"Comment": "returns the text matched by the current regular expression.",
	"Method": "String yytext(){\r\n    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);\r\n}"
}, {
	"Path": "net.oauth.client.OAuthResponseMessage.toOAuthProblemException",
	"Comment": "encapsulate this message as an exception. read and close the body of thismessage.",
	"Method": "OAuthProblemException toOAuthProblemException(){\r\n    OAuthProblemException problem = new OAuthProblemException();\r\n    try {\r\n        getParameters();\r\n    } catch (IOException ignored) {\r\n    }\r\n    problem.getParameters().putAll(getDump());\r\n    try {\r\n        InputStream b = getBodyAsStream();\r\n        if (b != null) {\r\n            b.close();\r\n        }\r\n    } catch (IOException ignored) {\r\n    }\r\n    return problem;\r\n}"
}, {
	"Path": "org.sakaiproject.assignment.impl.AssignmentServiceImpl.getAllAcceptableAttachments",
	"Comment": "gets all attachments in the submission that are acceptable to the content review service",
	"Method": "List<ContentResource> getAllAcceptableAttachments(AssignmentSubmission s){\r\n    List<ContentResource> attachments = new ArrayList();\r\n    for (String attachment : s.getAttachments()) {\r\n        Reference attachmentRef = entityManager.newReference(attachment);\r\n        try {\r\n            ContentResource resource = contentHostingService.getResource(attachmentRef.getId());\r\n            if (contentReviewService.isAcceptableContent(resource)) {\r\n                attachments.add(resource);\r\n            }\r\n        } catch (Exception e) {\r\n            log.warn(\":getAllAcceptableAttachments() {} \", e.getMessage());\r\n        }\r\n    }\r\n    return attachments;\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.DocumentRange.equals",
	"Comment": "returns whether this document range is equal to another one.",
	"Method": "boolean equals(Object other){\r\n    if (other == this) {\r\n        return true;\r\n    }\r\n    if (other instanceof DocumentRange) {\r\n        return this.compareTo((DocumentRange) other) == 0;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.announcement.entityprovider.AnnouncementEntityProviderImpl.getChannels",
	"Comment": "helper to get the channels for a site. \tif user site and not superuser, returns all available channels for this user.\tif user site and superuser, return all merged channels.\tif normal site, returns all merged channels.\tif motd site, returns the motd channel.",
	"Method": "List<String> getChannels(String siteId){\r\n    List<String> channels = new ArrayList<String>();\r\n    if (StringUtils.equals(siteId, MOTD_SITEID)) {\r\n        log.debug(\"is motd site, returning motd channel\");\r\n        channels = Collections.singletonList(announcementService.channelReference(siteId, MOTD_CHANNEL_SUFFIX));\r\n        return channels;\r\n    }\r\n    if (siteService.isUserSite(siteId)) {\r\n        if (!securityService.isSuperUser()) {\r\n            log.debug(\"is user site and not super user, returning all permitted channels\");\r\n            channels = Arrays.asList(new MergedList().getAllPermittedChannels(new AnnouncementChannelReferenceMaker()));\r\n            return channels;\r\n        }\r\n    }\r\n    Site site = null;\r\n    try {\r\n        site = siteService.getSite(siteId);\r\n    } catch (IdUnusedException e) {\r\n        return channels;\r\n    }\r\n    if (site != null) {\r\n        ToolConfiguration toolConfig = site.getToolForCommonId(\"sakai.announcements\");\r\n        if (toolConfig != null) {\r\n            Properties props = toolConfig.getPlacementConfig();\r\n            if (props.isEmpty()) {\r\n                props = toolConfig.getConfig();\r\n            }\r\n            if (props != null) {\r\n                String mergeProp = (String) props.get(PORTLET_CONFIG_PARAM_MERGED_CHANNELS);\r\n                if (StringUtils.isNotBlank(mergeProp)) {\r\n                    log.debug(\"is normal site or super user, returning all merged channels in this site\");\r\n                    log.debug(\"mergeProp: {}\", mergeProp);\r\n                    channels = Arrays.asList(new MergedList().getChannelReferenceArrayFromDelimitedString(new AnnouncementChannelReferenceMaker().makeReference(siteId), mergeProp));\r\n                } else {\r\n                    log.debug(\"is normal site or super user but no merged channels, using original siteId channel\");\r\n                    channels = Collections.singletonList(announcementService.channelReference(siteId, SiteService.MAIN_CONTAINER));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return channels;\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.CourseSitePublishServiceImpl.init",
	"Comment": "called by the spring framework after this class has been instantiated, this method registers the permissions necessary to invoke the course site removal service.",
	"Method": "void init(){\r\n    log.debug(\"init()\");\r\n    functionManager.registerFunction(PERMISSION_COURSE_SITE_PUBLISH);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.PopupWindowDecorator.set",
	"Comment": "sets the singleton instance of this class.this should only be called\ton the edt.",
	"Method": "void set(PopupWindowDecorator decorator){\r\n    PopupWindowDecorator.decorator = decorator;\r\n}"
}, {
	"Path": "coza.opencollab.sakai.cloudcontent.SwiftFileSystemHandler.checkContainerSpace",
	"Comment": "checks the space used for the container against the space available.will call the commonlogger to report any warning or error.",
	"Method": "void checkContainerSpace(String container){\r\n    if (warningLimitForContainerSizeInBytes <= 0L && errorLimitForContainerSizeInBytes <= 0L) {\r\n        return;\r\n    }\r\n    long bytesUsed = swiftApi.getContainerApi(region).get(container).getBytesUsed();\r\n    if (errorLimitForContainerSizeInBytes > 0L && errorLimitForContainerSizeInBytes < bytesUsed) {\r\n        logger.errorOnContainerSize(errorLimitForContainerSizeInBytes, bytesUsed);\r\n        throw new IOException(\"No more space available for container!\\nMax:\" + errorLimitForContainerSizeInBytes + \"\\nUsed:\" + bytesUsed);\r\n    }\r\n    if (warningLimitForContainerSizeInBytes > 0L && warningLimitForContainerSizeInBytes < bytesUsed) {\r\n        logger.warningOnContainerSize(warningLimitForContainerSizeInBytes, bytesUsed);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.test.section.SectionIntegrationTestSuite.suite",
	"Comment": "runs only once for the entire testsuite, so we can keep the same component manager\trather than rebuilding it for each test case.",
	"Method": "Test suite(){\r\n    TestSuite suite = new TestSuite();\r\n    suite.addTestSuite(SectionAwarenessImplTest.class);\r\n    suite.addTestSuite(CourseManagementIntegrationTest.class);\r\n    TestSetup setup = new TestSetup(suite) {\r\n        protected void setUp() throws Exception {\r\n            log.debug(\"starting setup\");\r\n            oneTimeSetup();\r\n            log.debug(\"finished setup\");\r\n        }\r\n        protected void tearDown() throws Exception {\r\n            oneTimeTearDown();\r\n        }\r\n    };\r\n    return setup;\r\n}"
}, {
	"Path": "org.sakaiproject.test.section.SectionIntegrationTestSuite.suite",
	"Comment": "runs only once for the entire testsuite, so we can keep the same component manager\trather than rebuilding it for each test case.",
	"Method": "Test suite(){\r\n    log.debug(\"starting setup\");\r\n    oneTimeSetup();\r\n    log.debug(\"finished setup\");\r\n}"
}, {
	"Path": "org.sakaiproject.test.section.SectionIntegrationTestSuite.suite",
	"Comment": "runs only once for the entire testsuite, so we can keep the same component manager\trather than rebuilding it for each test case.",
	"Method": "Test suite(){\r\n    oneTimeTearDown();\r\n}"
}, {
	"Path": "hu.akarnokd.rxjava2.joins.PatternN.and",
	"Comment": "creates a pattern that matches when all previous observable sequences have an available element.",
	"Method": "PatternN and(Observable<? extends Object> other){\r\n    if (other == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    return new PatternN(observables, other);\r\n}"
}, {
	"Path": "org.fife.ui.rsyntaxtextarea.modes.CPlusPlusTokenMaker.addHyperlinkToken",
	"Comment": "adds the token specified to the current linked list of tokens.",
	"Method": "void addHyperlinkToken(int start,int end,int tokenType){\r\n    int so = start + offsetShift;\r\n    addToken(zzBuffer, start, end, tokenType, so, true);\r\n}"
}]