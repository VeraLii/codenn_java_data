[{
	"Path": "au.edu.anu.portal.portlets.rss.utils.Messages.getString",
	"Comment": "get a parameterised message from the bundle and perform the parameter substitution on it",
	"Method": "String getString(String key,String getString,String key,Object[] arguments){\r\n    return MessageFormat.format(getMessage(key), arguments);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.integration.helper.integrated.GradebookHelperImpl.getGradebookUId",
	"Comment": "get current gradebook uid.this willunless called from an integrated sakai context!",
	"Method": "String getGradebookUId(String siteId){\r\n    String context;\r\n    Placement placement = null;\r\n    try {\r\n        placement = ToolManager.getInstance().getCurrentPlacement();\r\n    } catch (Exception ex) {\r\n        log.warn(ex.getMessage(), ex);\r\n        placement = null;\r\n    }\r\n    if (placement == null) {\r\n        log.warn(\"getGradebookUId() - no tool placement found, probably taking an \" + \"assessment via URL.\");\r\n        if (siteId == null) {\r\n            log.warn(\"getGradebookUId() - siteId is null too.\");\r\n            return null;\r\n        } else {\r\n            return siteId;\r\n        }\r\n    }\r\n    context = placement.getContext();\r\n    return context;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.myers.PathNode.isBootstrap",
	"Comment": "is this a bootstrap node?\tin bottstrap nodes one of the two corrdinates is less than zero.",
	"Method": "boolean isBootstrap(){\r\n    return i < 0 || j < 0;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.processCancel",
	"Comment": "allows the cancel button to return control to the tool calling this helper",
	"Method": "String processCancel(){\r\n    resetTargettedMessageList();\r\n    ToolSession session = sessionManager.getCurrentToolSession();\r\n    session.setAttribute(ATTR_TOP_REFRESH, Boolean.TRUE);\r\n    session.setAttribute(SiteConstants.STATE_TEMPLATE_INDEX, SiteConstants.SITE_INFO_TEMPLATE_INDEX);\r\n    return \"done\";\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doUpdate_related_group_participants",
	"Comment": "update realted group realm setting according to parent site realm changes",
	"Method": "void doUpdate_related_group_participants(Site s,String realmId){\r\n    Collection groups = s.getGroups();\r\n    boolean trackIndividualChange = ServerConfigurationService.getBoolean(SiteHelper.WSETUP_TRACK_USER_MEMBERSHIP_CHANGE, false);\r\n    if (groups != null) {\r\n        try {\r\n            for (Iterator iGroups = groups.iterator(); iGroups.hasNext(); ) {\r\n                Group g = (Group) iGroups.next();\r\n                if (g != null) {\r\n                    try {\r\n                        Set gMembers = g.getMembers();\r\n                        for (Iterator iGMembers = gMembers.iterator(); iGMembers.hasNext(); ) {\r\n                            Member gMember = (Member) iGMembers.next();\r\n                            String gMemberId = gMember.getUserId();\r\n                            Member siteMember = s.getMember(gMemberId);\r\n                            if (siteMember == null) {\r\n                                try {\r\n                                    g.deleteMember(gMemberId);\r\n                                } catch (IllegalStateException e) {\r\n                                    log.error(\".doUpdate_related_group_participants: User with id {} cannot be deleted from group with id {} because the group is locked\", gMemberId, g.getId());\r\n                                }\r\n                            } else {\r\n                                String gProp = g.getProperties().getProperty(g.GROUP_PROP_WSETUP_CREATED);\r\n                                Role groupRole = g.getUserRole(gMemberId);\r\n                                Role siteRole = siteMember.getRole();\r\n                                if (gProp != null && gProp.equals(Boolean.TRUE.toString()) && groupRole != null && siteRole != null && !groupRole.equals(siteRole)) {\r\n                                    if (g.getRole(siteRole.getId()) == null) {\r\n                                        g.addRole(siteRole.getId(), siteRole);\r\n                                    }\r\n                                    try {\r\n                                        g.deleteMember(gMemberId);\r\n                                        g.insertMember(gMemberId, siteRole.getId(), siteMember.isActive(), false);\r\n                                    } catch (IllegalStateException e) {\r\n                                        log.error(\".doUpdate_related_group_participants: User with id {} cannot be deleted from group with id {} because the group is locked\", gMemberId, g.getId());\r\n                                    }\r\n                                    if (trackIndividualChange) {\r\n                                        EventTrackingService.post(EventTrackingService.newEvent(org.sakaiproject.site.api.SiteService.EVENT_USER_GROUP_MEMBERSHIP_UPDATE, \"uid=\" + gMemberId + \";groupId=\" + g.getId() + \";oldRole=\" + groupRole + \";newRole=\" + siteRole + \";active=\" + siteMember.isActive() + \";provided=false\", true));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        EventTrackingService.post(EventTrackingService.newEvent(SiteService.SECURE_UPDATE_GROUP_MEMBERSHIP, g.getId(), true));\r\n                    } catch (Exception ee) {\r\n                        log.error(this + \".doUpdate_related_group_participants: \" + ee.getMessage() + g.getId(), ee);\r\n                    }\r\n                }\r\n            }\r\n            SiteService.save(s);\r\n        } catch (Exception e) {\r\n            log.error(this + \".doUpdate_related_group_participants: \" + e.getMessage() + s.getId(), e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.LessonsSubnavEnabler.prepareSiteForSave",
	"Comment": "when user selects to enable the lessons subnav, update the site property",
	"Method": "boolean prepareSiteForSave(Site site,SessionState state){\r\n    if (site == null || state == null) {\r\n        return false;\r\n    }\r\n    if (state.getAttribute(STATE_KEY) != null) {\r\n        final boolean isEnabled = (Boolean) state.getAttribute(STATE_KEY);\r\n        final ResourcePropertiesEdit props = site.getPropertiesEdit();\r\n        if (isEnabled) {\r\n            props.addProperty(SITE_PROPERTY, Boolean.TRUE.toString());\r\n        } else {\r\n            props.removeProperty(SITE_PROPERTY);\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.roster.impl.SakaiProxyImpl.getEnrollmentMembership",
	"Comment": "returns the enrollment set members for the specified site and enrollment",
	"Method": "List<RosterMember> getEnrollmentMembership(Site site,String enrollmentSetId,String enrollmentStatusId,String currentUserId){\r\n    if (site == null) {\r\n        return null;\r\n    }\r\n    if (!isAllowed(currentUserId, RosterFunctions.ROSTER_FUNCTION_VIEWENROLLMENTSTATUS, site.getReference())) {\r\n        return null;\r\n    }\r\n    Map<String, List<RosterMember>> membersMap = getAndCacheSortedEnrollmentSet(site, enrollmentSetId);\r\n    String key = (enrollmentStatusId == null) ? enrollmentSetId + \"#all\" : enrollmentSetId + \"#\" + enrollmentStatusId;\r\n    log.debug(\"Trying to get members list {} from membersMap ...\", key);\r\n    List<RosterMember> members = membersMap.get(key);\r\n    if (members != null) {\r\n        return filterMembers(site, currentUserId, members, null);\r\n    } else {\r\n        log.error(\"No enrollment set\");\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.components.SakaiPagingNavigator.newPagingNavigationIncrementLink",
	"Comment": "create a new increment link. may be subclassed to make use of specialized links, e.g. ajaxian\tlinks.",
	"Method": "Link newPagingNavigationIncrementLink(String id,IPageable pageable,int increment){\r\n    return new AjaxPagingNavigationIncrementLink(id, pageable, increment);\r\n}"
}, {
	"Path": "org.sakaiproject.roster.impl.SakaiProxyImpl.isAllowed",
	"Comment": "calls the securityservice unlock method. this is the method you must use in order for delegated access to work.\tnote that the securityservice automatically handles super users.",
	"Method": "boolean isAllowed(String userId,String permission,String reference){\r\n    return securityService.unlock(userId, permission, reference);\r\n}"
}, {
	"Path": "org.radeox.regex.Compiler.create",
	"Comment": "create a new compiler object depending on the used implementation",
	"Method": "Compiler create(){\r\n    return new JdkCompiler();\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.AlertImpl.getAlert",
	"Comment": "access the alert message. once accessed, the message is cleared.",
	"Method": "String getAlert(){\r\n    String tmp = m_msg;\r\n    m_msg = null;\r\n    return tmp;\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.UnboundidDirectoryProvider.setEidValidator",
	"Comment": "assign the service used to verify eids prior to executing\tsearches on those values. this field defaults to null\tindicating that all eids are searchable.",
	"Method": "void setEidValidator(EidValidator eidValidator){\r\n    this.eidValidator = eidValidator;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.FakeBeginDeliveryActionListener.populateBeanFromCourse",
	"Comment": "this takes the course information and puts it in the deliverybean.just getting course and instructor for now, could be extended later.",
	"Method": "void populateBeanFromCourse(DeliveryBean delivery,CourseManagementBean course){\r\n    delivery.setCourseName(course.getCourseName());\r\n    delivery.setInstructorName(course.getInstructor());\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.findSitesByTitle",
	"Comment": "get all site ids for which the criteria fully or partially matches the title, the description or the skin.",
	"Method": "String findSitesByTitle(String sessionid,String criteria){\r\n    Session s = establishSession(sessionid);\r\n    String siteIDs = \"\";\r\n    try {\r\n        List<String> siteIdsList = siteService.getSiteIds(SelectionType.ANY, null, criteria, null, SortType.NONE, null);\r\n        if (siteIdsList != null && !siteIdsList.isEmpty()) {\r\n            StringBuilder sb = new StringBuilder();\r\n            for (String siteId : siteIdsList) {\r\n                sb.append(siteId).append(\",\");\r\n            }\r\n            siteIDs = sb.substring(0, sb.length() - 1);\r\n        }\r\n    } catch (Throwable t) {\r\n        log.warn(\"Error encountered {}\", t.getMessage());\r\n    }\r\n    return siteIDs;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateSitesGroups.isSiteOrGroupTruncated",
	"Comment": "it will show whether there is a site or group get truncated due to\tpermissions",
	"Method": "boolean isSiteOrGroupTruncated(){\r\n    return siteOrGroupTruncated;\r\n}"
}, {
	"Path": "org.sakaiproject.provider.user.SampleUserDirectoryProvider.getUser",
	"Comment": "access a user object. update the object with the information found.",
	"Method": "boolean getUser(UserEdit edit){\r\n    if (edit == null)\r\n        return false;\r\n    if (!userExists(edit.getEid()))\r\n        return false;\r\n    Info info = (Info) m_info.get(edit.getEid());\r\n    if (info == null) {\r\n        edit.setFirstName(edit.getEid());\r\n        edit.setLastName(edit.getEid());\r\n        edit.setEmail(edit.getEid());\r\n        edit.setPassword(edit.getEid());\r\n        edit.setType(\"registered\");\r\n    } else {\r\n        if (edit.getEid().equals(\"student0001\")) {\r\n            edit.getProperties().addProperty(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\"user1encrypted\", 0));\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(\"Additional notes encrypted\", 0));\r\n        }\r\n        if (edit.getEid().equals(\"student0002\")) {\r\n            edit.getProperties().addProperty(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\"2notes\", 20));\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(\"Additional notes encrypted student0002\", 60));\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(\"Additional notes encrypted again\", 60));\r\n        }\r\n        if (edit.getEid().equals(\"student0003\")) {\r\n            edit.getProperties().addPropertyToList(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\"id1of2\", 0));\r\n            edit.getProperties().addPropertyToList(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\"id2of2\", 0));\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(\"Additional notes encrypted again2\", 0));\r\n        }\r\n        if (edit.getEid().equals(\"student0004\")) {\r\n            edit.getProperties().addProperty(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\"\", 0));\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(\"\", 0));\r\n        }\r\n        if (edit.getEid().equals(\"student0005\")) {\r\n            edit.getProperties().addProperty(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\"\", 0));\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(\"\", 0));\r\n        }\r\n        if (edit.getEid().equals(\"student0006\")) {\r\n            edit.getProperties().addProperty(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\" \", 0));\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(\" \", 0));\r\n        }\r\n        if (edit.getEid().equals(\"student0007\")) {\r\n            edit.getProperties().addProperty(USER_PROP_CANDIDATE_ID, encryptionUtilities.encrypt(\"student0007\", 0));\r\n            String reallyLongString = \"abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,\" + \"abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,\" + \"abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,\" + \"abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,\" + \"abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 abcdefghijklmnopqrstuvwxyz1234567890 ,up_until_10 0 0 _char\";\r\n            edit.getProperties().addPropertyToList(USER_PROP_ADDITIONAL_INFO, encryptionUtilities.encrypt(reallyLongString, 0));\r\n        }\r\n        edit.setFirstName(info.firstName);\r\n        edit.setLastName(info.lastName);\r\n        edit.setEmail(info.email);\r\n        edit.setPassword(\"sakai\");\r\n        edit.setType(\"registered\");\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.getEvaluationModel",
	"Comment": "get the evaluationmodel of the person who last modified assessmentbasefacade",
	"Method": "EvaluationModelIfc getEvaluationModel(){\r\n    try {\r\n        this.data = (AssessmentBaseIfc) assessment.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getEvaluationModel();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateSitesGroups.isAtleastASiteOrGroupSelected",
	"Comment": "this is a validation method. it will make sure that one site or group is\tselected.",
	"Method": "boolean isAtleastASiteOrGroupSelected(SignupSiteWrapper currentSite,List<SignupSiteWrapper> otherSites){\r\n    if (currentSite != null && currentSite.isSelected())\r\n        return true;\r\n    if (currentSite != null) {\r\n        List<SignupGroupWrapper> currentGroupsW = currentSite.getSignupGroupWrappers();\r\n        for (SignupGroupWrapper wrapper : currentGroupsW) {\r\n            if (wrapper.isSelected())\r\n                return true;\r\n        }\r\n    }\r\n    if (otherSites != null) {\r\n        for (SignupSiteWrapper siteW : otherSites) {\r\n            if (siteW.isSelected())\r\n                return true;\r\n            List<SignupGroupWrapper> otherGroupsW = siteW.getSignupGroupWrappers();\r\n            for (SignupGroupWrapper groupW : otherGroupsW) {\r\n                if (groupW.isSelected())\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UserPrefsTool.getRegisteredNotificationItems",
	"Comment": "get the current preference settings for this registration item",
	"Method": "List<DecoratedNotificationPreference> getRegisteredNotificationItems(List<DecoratedNotificationPreference> getRegisteredNotificationItems,UserNotificationPreferencesRegistration upr){\r\n    log.debug(\"getRegisteredNotificationItems(UserNotificationPreferencesRegistration)\");\r\n    List<DecoratedNotificationPreference> selNotiItems = new ArrayList<DecoratedNotificationPreference>();\r\n    Preferences prefs = m_preferencesService.getPreferences(getUserId());\r\n    List<SiteOverrideBean> siteOverrides = new ArrayList<SiteOverrideBean>();\r\n    if (upr.isOverrideBySite()) {\r\n        siteOverrides = buildOverrideTypePrefsContext(upr.getType() + NotificationService.NOTI_OVERRIDE_EXTENSION, upr.getPrefix(), null, prefs);\r\n    }\r\n    DecoratedNotificationPreference dnp = new DecoratedNotificationPreference(upr, siteOverrides);\r\n    String regItem = buildTypePrefsContext(upr.getType(), upr.getPrefix(), dnp.getSelectedOption(), prefs);\r\n    if (hasValue(regItem)) {\r\n        dnp.setSelectedOption(regItem);\r\n    } else {\r\n        dnp.setSelectedOption(upr.getDefaultValue());\r\n    }\r\n    selNotiItems.add(dnp);\r\n    return selNotiItems;\r\n}"
}, {
	"Path": "org.sakaiproject.samigo.search.QuestionElasticSearchIndexBuilder.search",
	"Comment": "this is a new search that accepts additionalsearchinformation. we need it for our complex question searches.we have duplicated the methods that need this parameter, like preparesearchrequest",
	"Method": "SearchResponse search(String searchTerms,List<String> references,List<String> siteIds,int start,int end,SearchResponse search,String searchTerms,List<String> references,List<String> siteIds,int start,int end,Map<String, String> additionalSearchInformation){\r\n    final Pair<SearchRequestBuilder, QueryBuilder> searchBuilders = prepareSearchRequest(searchTerms, references, siteIds, start, end, additionalSearchInformation);\r\n    final SearchRequestBuilder searchRequestBuilder = searchBuilders.getLeft();\r\n    final QueryBuilder queryBuilder = searchBuilders.getRight();\r\n    getLog().debug(\"Search request from index builder [\" + getName() + \"]: \" + searchRequestBuilder.toString());\r\n    ValidateQueryRequest validateQueryRequest = new ValidateQueryRequest(indexName);\r\n    QuerySourceBuilder querySourceBuilder = new QuerySourceBuilder().setQuery(queryBuilder);\r\n    validateQueryRequest.source(querySourceBuilder);\r\n    validateQueryRequest.explain(true);\r\n    try {\r\n        ActionFuture<ValidateQueryResponse> future = client.admin().indices().validateQuery(validateQueryRequest);\r\n        ValidateQueryResponse responseV = future.get();\r\n        if (responseV.isValid()) {\r\n            SearchResponse response = searchRequestBuilder.execute().actionGet();\r\n            getLog().debug(\"Search request from index builder [\" + getName() + \"] took: \" + response.getTook().format());\r\n            eventTrackingService.post(eventTrackingService.newEvent(SearchService.EVENT_SEARCH, SearchService.EVENT_SEARCH_REF + queryBuilder.toString(), true, NotificationService.PREF_IMMEDIATE));\r\n            return response;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (Exception ex) {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.pageOrderToolTitleIntoContext",
	"Comment": "put customized page title into context during an editing process for an existing site and the pageorder tool is enabled for this site",
	"Method": "void pageOrderToolTitleIntoContext(Context context,SessionState state,String siteType,boolean newSite,String overrideSitePageOrderSetting){\r\n    if (!newSite && notStealthOrHiddenTool(\"sakai-site-pageorder-helper\") && isPageOrderAllowed(siteType, overrideSitePageOrderSetting)) {\r\n        context.put(STATE_TOOL_REGISTRATION_TITLE_LIST, state.getAttribute(STATE_TOOL_REGISTRATION_TITLE_LIST));\r\n        context.put(\"allowPageOrderHelper\", Boolean.TRUE);\r\n    } else {\r\n        context.put(\"allowPageOrderHelper\", Boolean.FALSE);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.elfinder.sakai.SakaiFsService.getSiteVolume",
	"Comment": "this is useful in all the tool implementations when you need the parent item from the parent volume.",
	"Method": "FsVolume getSiteVolume(String siteId){\r\n    return new SiteFsVolume(siteId, this);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseTransformableNode.select",
	"Comment": "sets this as the selected node in the transformationsystem if there is no currently selectednode or if the currently selected node is not actively being transformed.",
	"Method": "boolean select(){\r\n    return transformationSystem.selectNode(this);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.business.questionpool.QuestionPoolTreeImpl.getChildren",
	"Comment": "get map of questionpoolimpls retricted to childeren of the currentlyselected pool id string",
	"Method": "Map getChildren(Long parentId,Map getChildren){\r\n    return getChildren(getCurrentId());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.StudentScoreListener.studentScores",
	"Comment": "this will populate the studentscoresbean with the data associated with theparticular versioned assessment based on the publishedid.",
	"Method": "boolean studentScores(String publishedId,StudentScoresBean bean,boolean isValueChange){\r\n    log.debug(\"studentScores()\");\r\n    try {\r\n        bean.setPublishedId(publishedId);\r\n        String studentId = ContextUtil.lookupParam(\"studentid\");\r\n        bean.setStudentId(studentId);\r\n        AgentFacade agent = new AgentFacade(studentId);\r\n        bean.setStudentName(agent.getFirstName() + \" \" + agent.getLastName());\r\n        bean.setLastName(agent.getLastName());\r\n        bean.setFirstName(agent.getFirstName());\r\n        bean.setAssessmentGradingId(ContextUtil.lookupParam(\"gradingData\"));\r\n        bean.setItemId(ContextUtil.lookupParam(\"itemId\"));\r\n        bean.setEmail(agent.getEmail());\r\n        DeliveryBean dbean = (DeliveryBean) ContextUtil.lookupBean(\"delivery\");\r\n        dbean.setActionString(\"gradeAssessment\");\r\n        DeliveryActionListener listener = new DeliveryActionListener();\r\n        listener.processAction(null);\r\n        DeliveryBean updatedDeliveryBean = (DeliveryBean) ContextUtil.lookupBean(\"delivery\");\r\n        List<SectionContentsBean> parts = updatedDeliveryBean.getPageContents().getPartsContents();\r\n        for (SectionContentsBean part : parts) {\r\n            List<ItemContentsBean> items = part.getItemContents();\r\n            for (ItemContentsBean question : items) {\r\n                question.setRubricStateDetails(\"\");\r\n                if (question.getGradingComment() != null && !question.getGradingComment().equals(\"\")) {\r\n                    question.setGradingComment(FormattedText.convertFormattedTextToPlaintext(question.getGradingComment()));\r\n                }\r\n            }\r\n        }\r\n        GradingService service = new GradingService();\r\n        AssessmentGradingData adata = (AssessmentGradingData) service.load(bean.getAssessmentGradingId(), false);\r\n        bean.setComments(FormattedText.convertFormattedTextToPlaintext(adata.getComments()));\r\n        buildItemContentsMap(dbean, publishedId);\r\n        return true;\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.utility.Query.isThrowSQLException",
	"Comment": "whether the query should throw a sql exception on an error duringexecution.",
	"Method": "boolean isThrowSQLException(){\r\n    return throwSQLException;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.menu.MenuField.getForm",
	"Comment": "access the form name whose values will be used when this item is selected.",
	"Method": "String getForm(){\r\n    return m_form;\r\n}"
}, {
	"Path": "schemacrawler.tools.commandline.SchemaCrawlerCommandLine.loadConfig",
	"Comment": "loads configuration from a number of sources, in order of priority.",
	"Method": "Config loadConfig(Config argsMap){\r\n    return CommandLineUtility.loadConfig(argsMap, databaseConnector);\r\n}"
}, {
	"Path": "schemacrawler.utility.Identifiers.isQuotedName",
	"Comment": "checks if an identifier name is quoted using the identifier quotecharacter.",
	"Method": "boolean isQuotedName(String name){\r\n    if (isBlank(name) || identifierQuoteString.isEmpty() || identifierQuotingStrategy == IdentifierQuotingStrategy.quote_none) {\r\n        return false;\r\n    }\r\n    final int quoteLength = identifierQuoteString.length();\r\n    return name.startsWith(identifierQuoteString) && name.endsWith(identifierQuoteString) && name.length() >= quoteLength * 2;\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.BaseShortenedUrlService.init",
	"Comment": "this init method sets up the implementing class that will be used.",
	"Method": "void init(){\r\n    log.info(\"BaseShortenedUrlService init()\");\r\n    String implementingClass = serverConfigurationService.getString(ShortenedUrlService.IMPLEMENTATION_PROP_NAME, ShortenedUrlService.DEFAULT_IMPLEMENTATION);\r\n    service = (ShortenedUrlService) ComponentManager.get(implementingClass);\r\n    log.info(\"BaseShortenedUrlService init(): Registered implementation: \" + implementingClass);\r\n}"
}, {
	"Path": "org.sakaiproject.portal.util.PortalUtils.includeLatestJQuery",
	"Comment": "returns the text to intelligently include the latest version of jquery",
	"Method": "String includeLatestJQuery(String where){\r\n    String retval = \"<script type=\\\"text/javascript\\\">\\n\" + \"var needJQuery = true;\\n\" + \"if ( window.jQuery ) {\\n\" + \"       tver = jQuery.fn.jquery;\\n\" + \"       if ( tver.indexOf('1.12.') == 0 ) {\\n\" + \"               window.console && console.log('\" + where + \" PortalUtils.includeLatestJquery() detected jQuery '+tver);\\n\" + \"               needJQuery = false;\\n\" + \"       } else {\\n\" + \"               var overrideJQuery = true;\\n\" + \"               window.console && console.log('\" + where + \" PortalUtils.includeLatestJquery() found jQuery '+tver);\\n\" + \"       }\\n\" + \"}\\n\" + \"if ( needJQuery ) {\\n\" + \"   document.write('\\\\x3Cscript type=\\\"text/javascript\\\" src=\\\"\" + getLatestJQueryPath() + getCDNQuery() + \"\\\">'+'\\\\x3C/script>')\\n\" + \"   document.write('\\\\x3Cscript type=\\\"text/javascript\\\" src=\\\"\" + getWebjarsPath() + \"jquery-migrate/1.4.1/jquery-migrate.min.js\" + getCDNQuery() + \"\\\">'+'\\\\x3C/script>')\\n\" + \"   document.write('\\\\x3Cscript type=\\\"text/javascript\\\" src=\\\"\" + getWebjarsPath() + \"bootstrap/3.3.7/js/bootstrap.min.js\" + getCDNQuery() + \"\\\">'+'\\\\x3C/script>')\\n\" + \"   document.write('\\\\x3Cscript type=\\\"text/javascript\\\" src=\\\"\" + getWebjarsPath() + \"jquery-ui/1.12.1/jquery-ui.min.js\" + getCDNQuery() + \"\\\">'+'\\\\x3C/script>')\\n\" + \"   document.write('\\\\x3Clink rel=\\\"stylesheet\\\" href=\\\"\" + getWebjarsPath() + \"jquery-ui/1.12.1/jquery-ui.min.css\" + getCDNQuery() + \"\\\"/>')\\n\" + \"} else { \\n\" + \"   window.console && console.log('jQuery already loaded '+jQuery.fn.jquery+' in '+'\" + where + \"');\\n\" + \"   if (typeof jQuery.migrateWarnings == 'undefined') {\\n\" + \"           document.write('\\\\x3Cscript type=\\\"text/javascript\\\" src=\\\"\" + getWebjarsPath() + \"jquery/jquery-migrate-1.4.1.min.js\" + getCDNQuery() + \"\\\">'+'\\\\x3C/script>')\\n\" + \"           window.console && console.log('Adding jQuery migrate');\\n\" + \"   }\\n\" + \"   if ( typeof jQuery.fn.popover == 'undefined') {\\n\" + \"           document.write('\\\\x3Cscript type=\\\"text/javascript\\\" src=\\\"\" + getWebjarsPath() + \"bootstrap/3.3.7/js/bootstrap.min.js\" + getCDNQuery() + \"\\\">'+'\\\\x3C/script>')\\n\" + \"           window.console && console.log('Adding Bootstrap');\\n\" + \"   }\\n\" + \"   if (typeof jQuery.ui == 'undefined') {\\n\" + \"           document.write('\\\\x3Cscript type=\\\"text/javascript\\\" src=\\\"\" + getWebjarsPath() + \"jquery-ui/1.12.1/jquery-ui.min.js\" + getCDNQuery() + \"\\\">'+'\\\\x3C/script>')\\n\" + \"           document.write('\\\\x3Clink rel=\\\"stylesheet\\\" href=\\\"\" + getWebjarsPath() + \"jquery-ui/1.12.1/jquery-ui.min.css\" + getCDNQuery() + \"\\\"/>')\\n\" + \"           window.console && console.log('Adding jQuery UI');\\n\" + \"   }\\n\" + \"}\\n\" + \"<\/script>\\n\" + \"<script type=\\\"text/javascript\\\">\\n\" + \"if ( needJQuery ) {\\n\" + \"       window.console && console.log('\" + where + \" PortalUtils.includeLatestJquery() loaded jQuery+migrate+Bootstrap+UI '+$.fn.jquery);\\n\" + \"}\\n\" + \"$PBJQ = jQuery;\\n\" + \"<\/script>\\n\";\r\n    return retval;\r\n}"
}, {
	"Path": "org.sakaiproject.poll.tool.entityproviders.PollVoteEntityProvider.vote",
	"Comment": "allows a user to create multiple vote objects at once, taking one or more\tpolloption parameters.",
	"Method": "List<Vote> vote(EntityView view,EntityReference ref,String prefix,Search search,OutputStream out,Map<String, Object> params){\r\n    Long pollId = null;\r\n    try {\r\n        pollId = Long.valueOf((String) params.get(\"pollId\"));\r\n    } catch (NumberFormatException nfe) {\r\n        throw new IllegalArgumentException(\"No pollId found.\");\r\n    }\r\n    String userId = userDirectoryService.getCurrentUser().getId();\r\n    Poll poll = pollListManager.getPollById(pollId, false);\r\n    if (poll == null) {\r\n        throw new IllegalArgumentException(\"No poll found to update for the given reference: \" + ref);\r\n    }\r\n    if (!pollVoteManager.isUserAllowedVote(userId, poll.getPollId(), false)) {\r\n        throw new SecurityException(\"User (\" + userId + \") is not allowed to vote in this poll (\" + poll.getPollId() + \")\");\r\n    }\r\n    Set<String> optionIds = new HashSet<String>();\r\n    Object param = params.get(\"pollOption\");\r\n    if (param == null) {\r\n        throw new IllegalArgumentException(\"At least one pollOption parameter must be provided to vote.\");\r\n    } else if (param instanceof String) {\r\n        optionIds.add((String) param);\r\n    } else if (param instanceof Iterable<?>) {\r\n        for (Object o : (Iterable<?>) param) if (o instanceof String)\r\n            optionIds.add((String) o);\r\n        else\r\n            throw new IllegalArgumentException(\"Each pollOption must be a String, not \" + o.getClass().getName());\r\n    } else if (param instanceof Object[]) {\r\n        for (Object o : (Object[]) param) if (o instanceof String)\r\n            optionIds.add((String) o);\r\n        else\r\n            throw new IllegalArgumentException(\"Each pollOption must be a String, not \" + o.getClass().getName());\r\n    } else\r\n        throw new IllegalArgumentException(\"pollOption must be String, String[] or List<String>, not \" + param.getClass().getName());\r\n    Map<Long, Option> options = new HashMap<Long, Option>();\r\n    for (String optionId : optionIds) {\r\n        try {\r\n            Option option = pollListManager.getOptionById(Long.valueOf(optionId));\r\n            if (!poll.getPollId().equals(option.getPollId()))\r\n                throw new Exception();\r\n            options.put(option.getOptionId(), option);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(\"Invalid pollOption: \" + optionId);\r\n        }\r\n    }\r\n    if (options.size() < poll.getMinOptions())\r\n        throw new IllegalArgumentException(\"You must provide at least \" + poll.getMinOptions() + \" options, not \" + options.size() + \".\");\r\n    if (options.size() > poll.getMaxOptions())\r\n        throw new IllegalArgumentException(\"You may provide at most \" + poll.getMaxOptions() + \" options, not \" + options.size() + \".\");\r\n    UsageSession usageSession = usageSessionService.getSession();\r\n    List<Vote> votes = new ArrayList<Vote>();\r\n    for (Option option : options.values()) {\r\n        Vote vote = new Vote();\r\n        vote.setVoteDate(new Date());\r\n        vote.setUserId(userId);\r\n        vote.setPollId(poll.getPollId());\r\n        vote.setPollOption(option.getOptionId());\r\n        if (vote.getSubmissionId() == null) {\r\n            String sid = userId + \":\" + UUID.randomUUID();\r\n            vote.setSubmissionId(sid);\r\n        }\r\n        if (usageSession != null)\r\n            vote.setIp(usageSession.getIpAddress());\r\n        boolean saved = pollVoteManager.saveVote(vote);\r\n        if (!saved) {\r\n            throw new IllegalStateException(\"Unable to save vote (\" + vote + \") for user (\" + userId + \"): \" + ref);\r\n        }\r\n        votes.add(vote);\r\n    }\r\n    return votes;\r\n}"
}, {
	"Path": "schemacrawler.crawl.AbstractRetriever.belongsToSchema",
	"Comment": "checks whether the provided database object belongs to thespecified schema.",
	"Method": "boolean belongsToSchema(DatabaseObject dbObject,String catalogName,String schemaName){\r\n    if (dbObject == null) {\r\n        return false;\r\n    }\r\n    final boolean supportsCatalogs = retrieverConnection.isSupportsCatalogs();\r\n    boolean belongsToCatalog = true;\r\n    boolean belongsToSchema = true;\r\n    if (supportsCatalogs) {\r\n        final String dbObjectCatalogName = dbObject.getSchema().getCatalogName();\r\n        if (catalogName != null && !catalogName.equals(dbObjectCatalogName)) {\r\n            belongsToCatalog = false;\r\n        }\r\n    }\r\n    final String dbObjectSchemaName = dbObject.getSchema().getName();\r\n    if (schemaName != null && !schemaName.equals(dbObjectSchemaName)) {\r\n        belongsToSchema = false;\r\n    }\r\n    return belongsToCatalog && belongsToSchema;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.QuestionPoolFacadeQueries.deletePool",
	"Comment": "delete pool and questions attached to it plus any subpool under it",
	"Method": "void deletePool(Long poolId,String agent,Tree tree){\r\n    try {\r\n        QuestionPoolData questionPool = (QuestionPoolData) getHibernateTemplate().load(QuestionPoolData.class, poolId);\r\n        List itemList = getAllItemsInThisPoolOnlyAndDetachFromAssessment(poolId);\r\n        int retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n        while (retryCount > 0) {\r\n            try {\r\n                getHibernateTemplate().deleteAll(itemList);\r\n                retryCount = 0;\r\n            } catch (DataAccessException e) {\r\n                log.warn(\"problem delete all items in pool: \" + e.getMessage());\r\n                retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n            }\r\n        }\r\n        retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n        while (retryCount > 0) {\r\n            try {\r\n                final HibernateCallback<List> hcb = session -> {\r\n                    Query q = session.createQuery(\"select qpi from QuestionPoolItemData as qpi where qpi.questionPoolId = :id\");\r\n                    q.setLong(\"id\", poolId);\r\n                    return q.list();\r\n                };\r\n                List list = getHibernateTemplate().execute(hcb);\r\n                List<ItemMetaDataIfc> metaList = new ArrayList();\r\n                for (int j = 0; j < list.size(); j++) {\r\n                    Long itemId = ((QuestionPoolItemData) list.get(j)).getItemId();\r\n                    String query = \"from ItemMetaData as meta where meta.item.itemId = :id and meta.label = :label\";\r\n                    List m = getHibernateTemplate().findByNamedParam(query, new String[] { \"id\", \"label\" }, new Object[] { itemId, ItemMetaDataIfc.POOLID });\r\n                    if (m.size() > 0) {\r\n                        ItemMetaDataIfc meta = (ItemMetaDataIfc) m.get(0);\r\n                        meta.setEntry(null);\r\n                        metaList.add(meta);\r\n                    }\r\n                }\r\n                try {\r\n                    for (ItemMetaDataIfc meta : metaList) {\r\n                        getHibernateTemplate().saveOrUpdate(meta);\r\n                    }\r\n                    retryCount = 0;\r\n                } catch (DataAccessException e) {\r\n                    log.warn(\"problem delete question and questionpool map inside itemMetaData: {}\", e.getMessage());\r\n                    retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n                }\r\n                if (list.size() > 0) {\r\n                    questionPool.setQuestionPoolItems(new HashSet());\r\n                    getHibernateTemplate().deleteAll(list);\r\n                    retryCount = 0;\r\n                } else\r\n                    retryCount = 0;\r\n            } catch (DataAccessException e) {\r\n                log.warn(\"problem delete question and questionpool map: \" + e.getMessage());\r\n                retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n            }\r\n        }\r\n        final HibernateCallback<List> hcb = session -> {\r\n            Query q = session.createQuery(\"select qpa from QuestionPoolAccessData as qpa, QuestionPoolData as qpp \" + \"where qpa.questionPoolId = qpp.questionPoolId and (qpp.questionPoolId = :qid or qpp.parentPoolId = :pid) \");\r\n            q.setLong(\"qid\", poolId);\r\n            q.setLong(\"pid\", poolId);\r\n            return q.list();\r\n        };\r\n        List qpaList = getHibernateTemplate().execute(hcb);\r\n        retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n        while (retryCount > 0) {\r\n            try {\r\n                getHibernateTemplate().deleteAll(qpaList);\r\n                retryCount = 0;\r\n            } catch (DataAccessException e) {\r\n                log.warn(\"problem delete question pool access data: \" + e.getMessage());\r\n                retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n            }\r\n        }\r\n        final HibernateCallback<List> hcb2 = session -> {\r\n            Query q = session.createQuery(\"select qp from QuestionPoolData as qp where qp.id = :id\");\r\n            q.setLong(\"id\", poolId);\r\n            return q.list();\r\n        };\r\n        List qppList = getHibernateTemplate().execute(hcb2);\r\n        retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n        while (retryCount > 0) {\r\n            try {\r\n                getHibernateTemplate().deleteAll(qppList);\r\n                retryCount = 0;\r\n            } catch (DataAccessException e) {\r\n                log.warn(\"problem delete all pools: \" + e.getMessage());\r\n                retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n            }\r\n        }\r\n        Iterator citer = (tree.getChildList(poolId)).iterator();\r\n        while (citer.hasNext()) {\r\n            deletePool((Long) citer.next(), agent, tree);\r\n        }\r\n    } catch (DataAccessException e) {\r\n        log.warn(\"error deleting pool. \" + e.getMessage());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.MyPictures.populateGallery",
	"Comment": "populates gallery using galleryimagedataprovider for given user. the\tpagetodisplay allows us to return the user to the gallery page they were\tpreviously viewing after removing an image from the gallery.",
	"Method": "void populateGallery(Form galleryForm,String userUuid,long pageToDisplay){\r\n    IDataProvider dataProvider = new GalleryImageDataProvider(userUuid);\r\n    long numImages = dataProvider.size();\r\n    gridView = new GridView(\"rows\", dataProvider) {\r\n        private static final long serialVersionUID = 1L;\r\n        @Override\r\n        protected void populateItem(Item item) {\r\n            final GalleryImage image = (GalleryImage) item.getModelObject();\r\n            final GalleryImageRenderer galleryImageThumbnailRenderer = new GalleryImageRenderer(\"galleryImageThumbnailRenderer\", image.getThumbnailResource());\r\n            AjaxLink galleryImageLink = new AjaxLink(\"galleryItem\") {\r\n                public void onClick(AjaxRequestTarget target) {\r\n                    setResponsePage(new MyPicture(userUuid, image, getCurrentPage()));\r\n                }\r\n            };\r\n            galleryImageLink.add(galleryImageThumbnailRenderer);\r\n            item.add(galleryImageLink);\r\n        }\r\n        @Override\r\n        protected void populateEmptyItem(Item item) {\r\n            Link galleryImageLink = new Link(\"galleryItem\") {\r\n                @Override\r\n                public void onClick() {\r\n                }\r\n            };\r\n            galleryImageLink.add(new Label(\"galleryImageThumbnailRenderer\"));\r\n            item.add(galleryImageLink);\r\n        }\r\n    };\r\n    gridView.setRows(3);\r\n    gridView.setColumns(4);\r\n    galleryForm.add(gridView);\r\n    Label noPicturesLabel;\r\n    if (numImages == 0) {\r\n        galleryForm.add(new PagingNavigator(\"navigator\", gridView).setVisible(false));\r\n        noPicturesLabel = new Label(\"noPicturesLabel\", new ResourceModel(\"text.gallery.pictures.num.none\"));\r\n    } else if (numImages <= ProfileConstants.MAX_GALLERY_IMAGES_PER_PAGE) {\r\n        galleryForm.add(new PagingNavigator(\"navigator\", gridView).setVisible(false));\r\n        noPicturesLabel = new Label(\"noPicturesLabel\");\r\n        noPicturesLabel.setVisible(false);\r\n    } else {\r\n        galleryForm.add(new PagingNavigator(\"navigator\", gridView));\r\n        noPicturesLabel = new Label(\"noPicturesLabel\");\r\n        noPicturesLabel.setVisible(false);\r\n    }\r\n    galleryForm.add(noPicturesLabel);\r\n    if (pageToDisplay > 0) {\r\n        if (pageToDisplay < gridView.getPageCount()) {\r\n            gridView.setCurrentPage(pageToDisplay);\r\n        } else {\r\n            gridView.setCurrentPage(gridView.getPageCount() - 1);\r\n        }\r\n    } else {\r\n        gridView.setCurrentPage(0);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.MyPictures.populateGallery",
	"Comment": "populates gallery using galleryimagedataprovider for given user. the\tpagetodisplay allows us to return the user to the gallery page they were\tpreviously viewing after removing an image from the gallery.",
	"Method": "void populateGallery(Form galleryForm,String userUuid,long pageToDisplay){\r\n    final GalleryImage image = (GalleryImage) item.getModelObject();\r\n    final GalleryImageRenderer galleryImageThumbnailRenderer = new GalleryImageRenderer(\"galleryImageThumbnailRenderer\", image.getThumbnailResource());\r\n    AjaxLink galleryImageLink = new AjaxLink(\"galleryItem\") {\r\n        public void onClick(AjaxRequestTarget target) {\r\n            setResponsePage(new MyPicture(userUuid, image, getCurrentPage()));\r\n        }\r\n    };\r\n    galleryImageLink.add(galleryImageThumbnailRenderer);\r\n    item.add(galleryImageLink);\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.MyPictures.populateGallery",
	"Comment": "populates gallery using galleryimagedataprovider for given user. the\tpagetodisplay allows us to return the user to the gallery page they were\tpreviously viewing after removing an image from the gallery.",
	"Method": "void populateGallery(Form galleryForm,String userUuid,long pageToDisplay){\r\n    setResponsePage(new MyPicture(userUuid, image, getCurrentPage()));\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.MyPictures.populateGallery",
	"Comment": "populates gallery using galleryimagedataprovider for given user. the\tpagetodisplay allows us to return the user to the gallery page they were\tpreviously viewing after removing an image from the gallery.",
	"Method": "void populateGallery(Form galleryForm,String userUuid,long pageToDisplay){\r\n    Link galleryImageLink = new Link(\"galleryItem\") {\r\n        @Override\r\n        public void onClick() {\r\n        }\r\n    };\r\n    galleryImageLink.add(new Label(\"galleryImageThumbnailRenderer\"));\r\n    item.add(galleryImageLink);\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.MyPictures.populateGallery",
	"Comment": "populates gallery using galleryimagedataprovider for given user. the\tpagetodisplay allows us to return the user to the gallery page they were\tpreviously viewing after removing an image from the gallery.",
	"Method": "void populateGallery(Form galleryForm,String userUuid,long pageToDisplay){\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.setToolRegistrationList",
	"Comment": "set the state variables for tool registration list basd on site type",
	"Method": "void setToolRegistrationList(SessionState state,String type){\r\n    state.removeAttribute(STATE_TOOL_REGISTRATION_SELECTED_LIST);\r\n    state.removeAttribute(STATE_TOOL_REGISTRATION_OLD_SELECTED_LIST);\r\n    state.removeAttribute(STATE_TOOL_REGISTRATION_OLD_SELECTED_HOME);\r\n    state.removeAttribute(STATE_MULTIPLE_TOOL_ID_SET);\r\n    Set multipleToolIdSet = new HashSet();\r\n    HashMap multipleToolConfiguration = new HashMap<String, HashMap<String, String>>();\r\n    Set<Tool> toolRegistrations = getToolRegistrations(state, type);\r\n    List tools = new Vector();\r\n    SortedIterator i = new SortedIterator(toolRegistrations.iterator(), new ToolComparator());\r\n    for (; i.hasNext(); ) {\r\n        Tool tr = (Tool) i.next();\r\n        MyTool newTool = new MyTool();\r\n        newTool.title = tr.getTitle();\r\n        newTool.id = tr.getId();\r\n        newTool.description = tr.getDescription();\r\n        String originalToolId = findOriginalToolId(state, tr.getId());\r\n        if (isMultipleInstancesAllowed(originalToolId)) {\r\n            multipleToolIdSet.add(tr.getId());\r\n            HashMap<String, String> toolConfigurations = getMultiToolConfiguration(originalToolId, null);\r\n            multipleToolConfiguration.put(tr.getId(), toolConfigurations);\r\n        }\r\n        tools.add(newTool);\r\n    }\r\n    state.setAttribute(STATE_TOOL_REGISTRATION_LIST, tools);\r\n    state.setAttribute(STATE_MULTIPLE_TOOL_ID_SET, multipleToolIdSet);\r\n    state.setAttribute(STATE_MULTIPLE_TOOL_CONFIGURATION, multipleToolConfiguration);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.evaluation.SubmissionStatusBean.setAnsweredItems",
	"Comment": "this stores a map of which items actually have answers.used by questionscores.",
	"Method": "void setAnsweredItems(Map newItems){\r\n    answeredItems = newItems;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.MessageForums.addMessage",
	"Comment": "adds a message to an existing forum or if there are no forums to add, adds a forumand then adds a message.",
	"Method": "String addMessage(String sessionid,String context,String forum,String topic,String user,String title,String body){\r\n    Session s = establishSession(sessionid);\r\n    try {\r\n        Site site = siteService.getSite(context);\r\n        ToolConfiguration tool = site.getToolForCommonId(\"sakai.forums\");\r\n        if (tool == null) {\r\n            return \"Tool sakai.forums not found in site=\" + context;\r\n        }\r\n        threadLocalManager.set(CURRENT_PLACEMENT, tool);\r\n        threadLocalManager.set(CURRENT_TOOL, tool.getTool());\r\n        List<DiscussionForum> forums = messageForumsForumManager.getForumsForMainPage();\r\n        Topic selectedTopic = null;\r\n        Topic anyTopic = null;\r\n        DiscussionForum selectedForum = null;\r\n        DiscussionForum anyForum = null;\r\n        DiscussionTopic dTopic = null;\r\n        for (DiscussionForum dForum : forums) {\r\n            anyForum = dForum;\r\n            if (forum.equals(dForum.getTitle()))\r\n                selectedForum = dForum;\r\n            log.debug(\"forum = \" + dForum + \" ID=\" + dForum.getId());\r\n        }\r\n        if (selectedForum == null)\r\n            selectedForum = anyForum;\r\n        if (selectedForum == null) {\r\n            Area area = areaManager.getAreaByContextIdAndTypeId(context, messageForumsTypeManager.getDiscussionForumType());\r\n            if (area == null) {\r\n                area = areaManager.createArea(messageForumsTypeManager.getDiscussionForumType(), context);\r\n                area.setName(\"AREA 51\");\r\n                area.setEnabled(Boolean.TRUE);\r\n                area.setHidden(Boolean.TRUE);\r\n                area.setLocked(Boolean.FALSE);\r\n                area.setModerated(Boolean.FALSE);\r\n                area.setPostFirst(Boolean.FALSE);\r\n                area.setAutoMarkThreadsRead(false);\r\n                area.setSendEmailOut(Boolean.TRUE);\r\n                area.setAvailabilityRestricted(Boolean.FALSE);\r\n                area = areaManager.saveArea(area);\r\n                log.debug(\"Created area...\");\r\n            }\r\n            selectedForum = messageForumsForumManager.createDiscussionForum();\r\n            selectedForum.setArea(area);\r\n            selectedForum.setCreatedBy(user);\r\n            selectedForum.setTitle(forum);\r\n            selectedForum.setDraft(false);\r\n            selectedForum.setModerated(false);\r\n            selectedForum.setPostFirst(false);\r\n            selectedForum = messageForumsForumManager.saveDiscussionForum(selectedForum);\r\n            log.debug(\"Created forum=\" + forum);\r\n            dTopic = messageForumsForumManager.createDiscussionForumTopic(selectedForum);\r\n            dTopic.setTitle(topic);\r\n            dTopic.setCreatedBy(user);\r\n            messageForumsForumManager.saveDiscussionForumTopic(dTopic, false);\r\n            log.debug(\"Created topic=\" + topic);\r\n            forums = messageForumsForumManager.getForumsForMainPage();\r\n            selectedForum = null;\r\n            for (DiscussionForum dForum : forums) {\r\n                anyForum = dForum;\r\n                if (forum.equals(dForum.getTitle()))\r\n                    selectedForum = dForum;\r\n                log.debug(\"forum = \" + dForum + \" ID=\" + dForum.getId());\r\n            }\r\n        }\r\n        if (selectedForum == null)\r\n            selectedForum = anyForum;\r\n        if (selectedForum == null)\r\n            return \"No forums found in site=\" + context;\r\n        for (Object o : selectedForum.getTopicsSet()) {\r\n            dTopic = (DiscussionTopic) o;\r\n            anyTopic = dTopic;\r\n            if (topic.equals(dTopic.getTitle()))\r\n                selectedTopic = dTopic;\r\n            if (dTopic.getDraft().equals(Boolean.FALSE)) {\r\n                log.debug(\"Topic ID=\" + dTopic.getId() + \" title=\" + dTopic.getTitle());\r\n            }\r\n        }\r\n        if (selectedTopic == null)\r\n            selectedTopic = anyTopic;\r\n        if (selectedTopic == null)\r\n            return \"No topic\";\r\n        DiscussionTopic topicWithMsgs = (DiscussionTopic) discussionForumManager.getTopicByIdWithMessages(selectedTopic.getId());\r\n        List tempList = topicWithMsgs.getMessages();\r\n        Message replyMessage = null;\r\n        if (tempList != null && tempList.size() > 0) {\r\n            replyMessage = (Message) tempList.get(tempList.size() - 1);\r\n        }\r\n        Message aMsg;\r\n        aMsg = messageForumsMessageManager.createDiscussionMessage();\r\n        aMsg.setTitle(title);\r\n        aMsg.setBody(body);\r\n        aMsg.setAuthor(user);\r\n        aMsg.setDraft(Boolean.FALSE);\r\n        aMsg.setDeleted(Boolean.FALSE);\r\n        aMsg.setApproved(Boolean.TRUE);\r\n        aMsg.setTopic(selectedTopic);\r\n        if (replyMessage != null) {\r\n            aMsg.setInReplyTo(replyMessage);\r\n        }\r\n        discussionForumManager.saveMessage(aMsg);\r\n        return \"Success\";\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    return \"Failure\";\r\n}"
}, {
	"Path": "edu.amc.sakai.user.PooledLDAPConnectionFactory.getConnectionManager",
	"Comment": "gives the ldapconnectionmananger that the factory is using\tto configure its pooledldapconnections.",
	"Method": "LdapConnectionManager getConnectionManager(){\r\n    return connectionManager;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupEmailFacadeImpl.formatICSAttachment",
	"Comment": "helper to create an ics calendar from a list of vevents, then turn it into an attachment",
	"Method": "Attachment formatICSAttachment(List<VEvent> vevents,String method){\r\n    String path = calendarHelper.createCalendarFile(vevents, method);\r\n    if (StringUtils.isBlank(path)) {\r\n        return null;\r\n    }\r\n    String filename = StringUtils.substringAfterLast(path, File.separator);\r\n    String type = String.format(\"text/calendar; charset=\\\"utf-8\\\"; method=%s; name=signup-invite.ics\", method);\r\n    File file = new File(path);\r\n    DataSource dataSource = new Attachment.RenamedDataSource(new FileDataSource(file), filename);\r\n    return new Attachment(dataSource, type, Attachment.ContentDisposition.INLINE);\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.handlers.SiteHandler.doGet",
	"Comment": "this extra method is so that we can pass in a different siteid to the one in the url.",
	"Method": "int doGet(String[] parts,HttpServletRequest req,HttpServletResponse res,Session session,int doGet,String[] parts,HttpServletRequest req,HttpServletResponse res,Session session,String siteId){\r\n    String pageId = null;\r\n    String toolId = null;\r\n    if ((parts.length >= 5) && (parts[3].equals(\"page\"))) {\r\n        pageId = parts[4];\r\n    }\r\n    if ((siteId != null) && (parts.length == 5) && (parts[3].equals(\"tool-reset\"))) {\r\n        toolId = parts[4];\r\n        String toolUrl = req.getContextPath() + \"/site/\" + siteId + \"/tool\" + Web.makePath(parts, 4, parts.length);\r\n        String queryString = Validator.generateQueryString(req);\r\n        if (queryString != null) {\r\n            toolUrl = toolUrl + \"?\" + queryString;\r\n        }\r\n        portalService.setResetState(\"true\");\r\n        res.sendRedirect(toolUrl);\r\n        return RESET_DONE;\r\n    }\r\n    if ((siteId != null) && (parts.length == 5) && (parts[3].equals(\"page-reset\"))) {\r\n        pageId = parts[4];\r\n        Site site = null;\r\n        try {\r\n            site = portal.getSiteHelper().getSiteVisit(siteId);\r\n        } catch (Exception e) {\r\n            site = null;\r\n        }\r\n        SitePage page = null;\r\n        if (site != null)\r\n            page = portal.getSiteHelper().lookupSitePage(pageId, site);\r\n        boolean hasJSR168 = false;\r\n        if (page != null) {\r\n            Session s = SessionManager.getCurrentSession();\r\n            Iterator<ToolConfiguration> toolz = page.getTools().iterator();\r\n            while (toolz.hasNext()) {\r\n                ToolConfiguration pageTool = toolz.next();\r\n                ToolSession ts = s.getToolSession(pageTool.getId());\r\n                ts.clearAttributes();\r\n                if (portal.isPortletPlacement(pageTool))\r\n                    hasJSR168 = true;\r\n            }\r\n        }\r\n        String pageUrl = req.getContextPath() + \"/site/\" + siteId + \"/page\" + Web.makePath(parts, 4, parts.length);\r\n        String queryString = Validator.generateQueryString(req);\r\n        if (queryString != null) {\r\n            pageUrl = pageUrl + \"?\" + queryString;\r\n            if (hasJSR168)\r\n                pageUrl = pageUrl + \"&sakai.state.reset=true\";\r\n        } else {\r\n            if (hasJSR168)\r\n                pageUrl = pageUrl + \"?sakai.state.reset=true\";\r\n        }\r\n        portalService.setResetState(\"true\");\r\n        res.sendRedirect(pageUrl);\r\n        return RESET_DONE;\r\n    }\r\n    if ((parts.length >= 5) && (parts[3].equals(\"tool\"))) {\r\n        toolId = parts[4];\r\n    }\r\n    String commonToolId = null;\r\n    if (parts.length == 4) {\r\n        commonToolId = parts[3];\r\n    }\r\n    doSite(req, res, session, siteId, pageId, toolId, commonToolId, parts, req.getContextPath() + req.getServletPath());\r\n    return END;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.addUserToGroup",
	"Comment": "helper to add a user to a group. takes care of the role selection.",
	"Method": "void addUserToGroup(String id,Group g){\r\n    if (!isValidSiteUser(id)) {\r\n        return;\r\n    }\r\n    if (g.getUserRole(id) != null) {\r\n        return;\r\n    }\r\n    Role r = site.getUserRole(id);\r\n    Member m = site.getMember(id);\r\n    Role memberRole = m != null ? m.getRole() : null;\r\n    try {\r\n        g.insertMember(id, r != null ? r.getId() : memberRole != null ? memberRole.getId() : \"\", m != null ? m.isActive() : true, false);\r\n    } catch (IllegalStateException e) {\r\n        log.error(\".addUserToGroup: User with id {} cannot be inserted in group with id {} because the group is locked\", id, g.getId());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.site.PortalSiteHelperImpl.convertSitesToMaps",
	"Comment": "this method takes a list of sites and organizes it into a list of maps of\tproperties. there is an additional complication that the depth contains\tinformaiton arround.",
	"Method": "List<Map> convertSitesToMaps(HttpServletRequest req,List mySites,String prefix,String currentSiteId,String myWorkspaceSiteId,boolean includeSummary,boolean expandSite,boolean resetTools,boolean doPages,String toolContextPath,boolean loggedIn){\r\n    List<Map> l = new ArrayList<Map>();\r\n    Map<String, Integer> depthChart = new HashMap<String, Integer>();\r\n    boolean motdDone = false;\r\n    boolean computeDepth = true;\r\n    Session session = SessionManager.getCurrentSession();\r\n    List favorites = Collections.emptyList();\r\n    if (session != null) {\r\n        Preferences prefs = PreferencesService.getPreferences(session.getUserId());\r\n        ResourceProperties props = prefs.getProperties(org.sakaiproject.user.api.PreferencesService.SITENAV_PREFS_KEY);\r\n        List propList = props.getPropertyList(\"order\");\r\n        if (propList != null) {\r\n            computeDepth = false;\r\n            favorites = propList;\r\n        }\r\n    }\r\n    Map<String, List<String>> realmProviderMap = getProviderIDsForSites(mySites);\r\n    for (Iterator i = mySites.iterator(); i.hasNext(); ) {\r\n        Site s = (Site) i.next();\r\n        if (currentSiteId == null)\r\n            currentSiteId = s.getId();\r\n        Integer cDepth = Integer.valueOf(0);\r\n        if (computeDepth) {\r\n            ResourceProperties rp = s.getProperties();\r\n            String ourParent = rp.getProperty(PROP_PARENT_ID);\r\n            log.debug(\"Depth Site:{} parent={}\", s.getTitle(), ourParent);\r\n            if (ourParent != null) {\r\n                Integer pDepth = depthChart.get(ourParent);\r\n                if (pDepth != null) {\r\n                    cDepth = pDepth + 1;\r\n                }\r\n            }\r\n            depthChart.put(s.getId(), cDepth);\r\n            log.debug(\"Depth = {}\", cDepth);\r\n        }\r\n        Map m = convertSiteToMap(req, s, prefix, currentSiteId, myWorkspaceSiteId, includeSummary, expandSite, resetTools, doPages, toolContextPath, loggedIn, realmProviderMap.get(s.getReference()));\r\n        m.put(\"depth\", cDepth);\r\n        m.put(\"favorite\", favorites.contains(s.getId()));\r\n        if (includeSummary && m.get(\"rssDescription\") == null) {\r\n            if (!motdDone) {\r\n                summarizeTool(m, s, \"sakai.motd\");\r\n                motdDone = true;\r\n            } else {\r\n                summarizeTool(m, s, \"sakai.announcements\");\r\n            }\r\n        }\r\n        l.add(m);\r\n    }\r\n    return l;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.site.PortalSiteHelperImpl.getSiteEffectiveId",
	"Comment": "if this is a user site, return an id based on the user eid, otherwise\tjust return the site id.",
	"Method": "String getSiteEffectiveId(Site site){\r\n    if (SiteService.isUserSite(site.getId())) {\r\n        try {\r\n            String userId = SiteService.getSiteUserId(site.getId());\r\n            String eid = UserDirectoryService.getUserEid(userId);\r\n            if (StringUtils.isAlphanumeric(eid)) {\r\n                return SiteService.getUserSiteId(eid);\r\n            }\r\n        } catch (UserNotDefinedException e) {\r\n            log.warn(\"getSiteEffectiveId: user eid not found for user site: \" + site.getId());\r\n        }\r\n    } else {\r\n        String displayId = portal.getSiteNeighbourhoodService().lookupSiteAlias(site.getReference(), null);\r\n        if (displayId != null) {\r\n            return displayId;\r\n        }\r\n    }\r\n    return site.getId();\r\n}"
}, {
	"Path": "org.sakaiproject.util.MergedList.makeChannelMap",
	"Comment": "create a channel reference map from an array of channel references.",
	"Method": "Map makeChannelMap(String[] mergedChannelArray){\r\n    Map currentlyMergedchannels = new HashMap();\r\n    if (mergedChannelArray != null) {\r\n        for (int i = 0; i < mergedChannelArray.length; i++) {\r\n            currentlyMergedchannels.put(mergedChannelArray[i], Boolean.valueOf(true));\r\n        }\r\n    }\r\n    return currentlyMergedchannels;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingsBean.getIframeId",
	"Comment": "this is a getter method which provide current iframe id for refresh\tiframe purpose.",
	"Method": "String getIframeId(){\r\n    HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\r\n    String iFrameId = (String) request.getAttribute(\"sakai.tool.placement.id\");\r\n    return iFrameId;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.item.ItemHelper12Impl.setItemTextMatching",
	"Comment": "matching only, sets each source to be matched to.it also sets the the matching target.",
	"Method": "void setItemTextMatching(List<ItemTextIfc> itemTextList,Item itemXml){\r\n    String xpath = MATCH_XPATH;\r\n    Map allTargets = new HashMap();\r\n    itemXml.add(xpath, \"response_label\");\r\n    String randomNumber = (\"\" + Math.random()).substring(2);\r\n    Iterator iter = itemTextList.iterator();\r\n    double itSize = itemTextList.size();\r\n    if (itSize > 0) {\r\n        currentPerItemScore = currentMaxScore.doubleValue() / itSize;\r\n        currentPerItemDiscount = currentMinScore.doubleValue();\r\n    }\r\n    int respCondCount = 0;\r\n    while (iter.hasNext()) {\r\n        ItemTextIfc itemText = (ItemTextIfc) iter.next();\r\n        String text = itemText.getText();\r\n        Long sequence = itemText.getSequence();\r\n        String responseLabelIdent = \"MS-\" + randomNumber + \"-\" + sequence;\r\n        List answerList = itemText.getAnswerArray();\r\n        Iterator aiter = answerList.iterator();\r\n        int noSources = answerList.size();\r\n        while (aiter.hasNext()) {\r\n            respCondCount++;\r\n            AnswerIfc answer = (AnswerIfc) aiter.next();\r\n            String answerText = answer.getText();\r\n            String label = answer.getLabel();\r\n            Long answerSequence = answer.getSequence();\r\n            Boolean correct = answer.getIsCorrect();\r\n            String responseFeedback = \"\";\r\n            if (correct.booleanValue()) {\r\n                responseFeedback = answer.getAnswerFeedback(AnswerFeedbackIfc.CORRECT_FEEDBACK);\r\n            } else {\r\n                responseFeedback = answer.getAnswerFeedback(AnswerFeedbackIfc.INCORRECT_FEEDBACK);\r\n            }\r\n            if (responseFeedback == null) {\r\n                responseFeedback = \"\";\r\n            }\r\n            String responseNo = \"\" + (answerSequence.longValue() - noSources + 1);\r\n            String respIdent = \"MT-\" + randomNumber + \"-\" + label;\r\n            String respCondNo = \"\" + respCondCount;\r\n            responseFeedback = XmlUtil.convertStrforCDATA(responseFeedback);\r\n            if (Boolean.TRUE.equals(correct)) {\r\n                log.debug(\"Matching: matched.\");\r\n                if (!allIdents.contains(respIdent)) {\r\n                    allIdents.add(respIdent);\r\n                }\r\n                allTargets.put(respIdent, answerText);\r\n                addMatchingRespcondition(true, itemXml, respCondNo, respIdent, responseLabelIdent, responseFeedback);\r\n            } else {\r\n                log.debug(\"Matching: NOT matched.\");\r\n                addMatchingRespcondition(false, itemXml, respCondNo, respIdent, responseLabelIdent, responseFeedback);\r\n                continue;\r\n            }\r\n        }\r\n        String responseNo = \"\" + sequence;\r\n        addMatchingResponseLabelSource(itemXml, responseNo, responseLabelIdent, text, 1);\r\n    }\r\n    for (int i = 0; i < allIdents.size(); i++) {\r\n        String respIdent = (String) allIdents.get(i);\r\n        String answerText = (String) allTargets.get(respIdent);\r\n        String responseNo = \"\" + (i + 1);\r\n        addMatchingResponseLabelTarget(itemXml, responseNo, respIdent, answerText);\r\n    }\r\n}"
}, {
	"Path": "au.edu.anu.portal.portlets.rss.SimpleRSSPortlet.getConfiguredPortletTitle",
	"Comment": "get the preferred portlet title if set, or default from constants",
	"Method": "String getConfiguredPortletTitle(RenderRequest request){\r\n    PortletPreferences pref = request.getPreferences();\r\n    return pref.getValue(PREF_PORTLET_TITLE, Constants.PORTLET_TITLE_DEFAULT);\r\n}"
}, {
	"Path": "edu.amc.sakai.user.RegexpBlacklistEidValidator.isBlackListedEid",
	"Comment": "encapsulates the logic for actually checking a user eid\tagainst the configured blacklist. if no blacklist is\tconfigured, will return false",
	"Method": "boolean isBlackListedEid(String eid){\r\n    if (eidBlacklist == null || eidBlacklist.isEmpty()) {\r\n        return false;\r\n    }\r\n    for (Pattern pattern : eidBlacklist) {\r\n        if (pattern.matcher(eid).matches()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.InclusionRuleWithRegularExpression.getInclusionPattern",
	"Comment": "returns the regular expression for the inclusion rule. not allinclusion rules are based on regular expressions, so this methodindicates that all strings should be considered for inclusion bydefault.",
	"Method": "Pattern getInclusionPattern(){\r\n    return Pattern.compile(\".*\");\r\n}"
}, {
	"Path": "schemacrawler.crawl.MetadataResultSet.getBoolean",
	"Comment": "checks if the value of a column from the result set evaluates totrue.",
	"Method": "boolean getBoolean(String columnName){\r\n    if (useColumn(columnName)) {\r\n        try {\r\n            final Object booleanValue = results.getObject(columnName);\r\n            final String stringBooleanValue;\r\n            if (results.wasNull() || booleanValue == null) {\r\n                LOGGER.log(Level.FINER, new StringFormat(\"NULL value for column <%s>, so evaluating to 'false'\", columnName));\r\n                return false;\r\n            } else {\r\n                stringBooleanValue = String.valueOf(booleanValue).trim();\r\n            }\r\n            if (isIntegral(stringBooleanValue)) {\r\n                return !stringBooleanValue.equals(\"0\");\r\n            } else if (stringBooleanValue.equalsIgnoreCase(\"yes\") || stringBooleanValue.equalsIgnoreCase(\"true\")) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (final SQLException e) {\r\n            LOGGER.log(Level.WARNING, new StringFormat(\"Could not read boolean value for column <%s>\", columnName), e);\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Version.compareTo",
	"Comment": "compares two versions in lexigographical order.unlike compareversions, this comparison is not done inthe way usual for versions numbers. the order relationshipstablished here is the one cvs used to store nodes into archivefiles.",
	"Method": "int compareTo(Object other){\r\n    if (other == this) {\r\n        return 0;\r\n    } else if (!(other instanceof Version)) {\r\n        throw new IllegalArgumentException(other.toString());\r\n    } else {\r\n        Version otherVer = (Version) other;\r\n        if (this.size() != otherVer.size()) {\r\n            return this.size() - otherVer.size();\r\n        } else {\r\n            return -compareVersions(otherVer);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.SectionFacade.getCreatedBy",
	"Comment": "get createdby for sectionfacade. this represents the agentid of the personwho created the record",
	"Method": "String getCreatedBy(){\r\n    try {\r\n        this.data = (SectionDataIfc) section.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getCreatedBy();\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.panels.TwitterPrefsPane.getOAuthAccessToken",
	"Comment": "helper to get the user access token from the request token and supplied access code",
	"Method": "AccessToken getOAuthAccessToken(String accessCode){\r\n    Map<String, String> config = externalIntegrationLogic.getTwitterOAuthConsumerDetails();\r\n    Twitter twitter = new TwitterFactory().getInstance();\r\n    twitter.setOAuthConsumer(config.get(\"key\"), config.get(\"secret\"));\r\n    try {\r\n        return twitter.getOAuthAccessToken(requestToken, accessCode);\r\n    } catch (TwitterException e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getCourseSet",
	"Comment": "get courseset from coursemanagementservice and update state attribute",
	"Method": "Set getCourseSet(SessionState state){\r\n    Set courseSet = null;\r\n    if (state.getAttribute(STATE_COURSE_SET) != null) {\r\n        courseSet = (Set) state.getAttribute(STATE_COURSE_SET);\r\n    } else {\r\n        courseSet = cms.getCourseSets();\r\n        state.setAttribute(STATE_COURSE_SET, courseSet);\r\n    }\r\n    return courseSet;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Revision.patch",
	"Comment": "applies the series of deltas in this revision as patches to the given\ttext.",
	"Method": "Object[] patch(Object[] src){\r\n    List target = new ArrayList(Arrays.asList(src));\r\n    applyTo(target);\r\n    return target.toArray();\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.RandomisedUrlService.getExistingKey",
	"Comment": "checks if a key already exists for a given url, if so returns it else returns null",
	"Method": "String getExistingKey(String url){\r\n    if (StringUtils.isBlank(url)) {\r\n        return null;\r\n    }\r\n    String value = (String) cache.get(url);\r\n    if (value != null) {\r\n        return value;\r\n    }\r\n    RandomisedUrl randomisedUrl = null;\r\n    HibernateCallback<RandomisedUrl> hcb = session -> {\r\n        Query q = session.getNamedQuery(QUERY_GET_KEY);\r\n        q.setParameter(URL, url, StringType.INSTANCE);\r\n        q.setMaxResults(1);\r\n        return (RandomisedUrl) q.uniqueResult();\r\n    };\r\n    randomisedUrl = getHibernateTemplate().execute(hcb);\r\n    if (randomisedUrl == null) {\r\n        return null;\r\n    }\r\n    String key = randomisedUrl.getKey();\r\n    addToCache(url, key);\r\n    return key;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.downloadEvents.EventWorksheet.getValidAttendees",
	"Comment": "clean the list of attendees by checking that each user is valid. this is a duplicate of the signupuibasebean method.",
	"Method": "List<SignupAttendee> getValidAttendees(List<SignupAttendee> attendees){\r\n    List<SignupAttendee> cleanedList = new ArrayList<SignupAttendee>();\r\n    for (SignupAttendee attendee : attendees) {\r\n        if (sakaiFacade.checkForUser(attendee.getAttendeeUserId())) {\r\n            cleanedList.add(attendee);\r\n        }\r\n    }\r\n    return cleanedList;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaRetrievalOptionsBuilder.withDoesNotSupportCatalogs",
	"Comment": "overrides the jdbc driver provided information about whether thedatabase supports catalogs.",
	"Method": "SchemaRetrievalOptionsBuilder withDoesNotSupportCatalogs(){\r\n    overridesSupportsCatalogs = Optional.of(false);\r\n    return this;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.solarsystem.DemoUtils.createArSession",
	"Comment": "creates an arcore session. this checks for the camera permission, and if granted, checks thestate of the arcore installation. if there is a problem an exception is thrown. care must betaken to update the installrequested flag as needed to avoid an infinite checking loop. itshould be set to true if null is returned from this method, and called again when theapplication is resumed.",
	"Method": "Session createArSession(Activity activity,boolean installRequested){\r\n    Session session = null;\r\n    if (hasCameraPermission(activity)) {\r\n        switch(ArCoreApk.getInstance().requestInstall(activity, !installRequested)) {\r\n            case INSTALL_REQUESTED:\r\n                return null;\r\n            case INSTALLED:\r\n                break;\r\n        }\r\n        session = new Session(activity);\r\n        Config config = new Config(session);\r\n        config.setUpdateMode(Config.UpdateMode.LATEST_CAMERA_IMAGE);\r\n        session.configure(config);\r\n    }\r\n    return session;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.CalculatedQuestionBean.getFormulasList",
	"Comment": "getformulaslist returns a list of all formulas, sorted by formula name",
	"Method": "List<CalculatedQuestionFormulaBean> getFormulasList(){\r\n    List<CalculatedQuestionFormulaBean> beanList = new ArrayList<CalculatedQuestionFormulaBean>(formulas.values());\r\n    Collections.sort(beanList, new Comparator<CalculatedQuestionFormulaBean>() {\r\n        public int compare(CalculatedQuestionFormulaBean bean1, CalculatedQuestionFormulaBean bean2) {\r\n            return new NullComparator().compare(bean1.getName(), bean2.getName());\r\n        }\r\n    });\r\n    return beanList;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.CalculatedQuestionBean.getFormulasList",
	"Comment": "getformulaslist returns a list of all formulas, sorted by formula name",
	"Method": "List<CalculatedQuestionFormulaBean> getFormulasList(){\r\n    return new NullComparator().compare(bean1.getName(), bean2.getName());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.assessment.AssessmentHelperBase.updateAttachmentSet",
	"Comment": "if there are attachments set put them into attachment field in xml.",
	"Method": "void updateAttachmentSet(Assessment assessmentXml,Set attachmentSet){\r\n    Iterator iter = attachmentSet.iterator();\r\n    AttachmentData attachmentData = null;\r\n    StringBuffer attachment = new StringBuffer();\r\n    while (iter.hasNext()) {\r\n        attachmentData = (AttachmentData) iter.next();\r\n        attachment.append(attachmentData.getResourceId().replaceAll(\" \", \"\"));\r\n        attachment.append(\"|\");\r\n        attachment.append(attachmentData.getFilename());\r\n        attachment.append(\"|\");\r\n        attachment.append(attachmentData.getMimeType());\r\n        attachment.append(\"\\n\");\r\n    }\r\n    assessmentXml.setFieldentry(\"ATTACHMENT\", attachment.toString());\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.syllabus.SyllabusManagerImpl.getSyllabusItemByUserAndContextIds",
	"Comment": "getsyllabusitembyuserandcontextids finds a syllabusitem",
	"Method": "SyllabusItem getSyllabusItemByUserAndContextIds(String userId,String contextId){\r\n    if (userId == null || contextId == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    HibernateCallback<SyllabusItem> hcb = session -> {\r\n        Query q = session.getNamedQuery(QUERY_BY_USERID_AND_CONTEXTID);\r\n        q.setParameter(USER_ID, userId, StringType.INSTANCE);\r\n        q.setParameter(CONTEXT_ID, contextId, StringType.INSTANCE);\r\n        return (SyllabusItem) q.uniqueResult();\r\n    };\r\n    return getHibernateTemplate().execute(hcb);\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.syllabus.SyllabusManagerImpl.swapSyllabusDataPositions",
	"Comment": "swapsyllabusdatapositions swaps positions for two syllabusdata objects",
	"Method": "void swapSyllabusDataPositions(SyllabusItem syllabusItem,SyllabusData d1,SyllabusData d2){\r\n    if (syllabusItem == null || d1 == null || d2 == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    } else {\r\n        HibernateCallback hcb = session -> {\r\n            SyllabusData data1 = (SyllabusData) session.get(SyllabusDataImpl.class, d1.getSyllabusId());\r\n            SyllabusData data2 = (SyllabusData) session.get(SyllabusDataImpl.class, d2.getSyllabusId());\r\n            Integer temp = data1.getPosition();\r\n            data1.setPosition(data2.getPosition());\r\n            data2.setPosition(temp);\r\n            return null;\r\n        };\r\n        getHibernateTemplate().execute(hcb);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.syllabus.SyllabusManagerImpl.getSyllabiForSyllabusItem",
	"Comment": "getsyllabiforsyllabusitem returns the collection of syllabi",
	"Method": "Set getSyllabiForSyllabusItem(SyllabusItem syllabusItem){\r\n    if (syllabusItem == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    } else {\r\n        HibernateCallback<Set> hcb = session -> {\r\n            Criteria crit = session.createCriteria(SyllabusItemImpl.class).add(Expression.eq(SURROGATE_KEY, syllabusItem.getSurrogateKey())).setFetchMode(SYLLABI, FetchMode.EAGER);\r\n            SyllabusItem syllabusItem1 = (SyllabusItem) crit.uniqueResult();\r\n            if (syllabusItem1 != null) {\r\n                return syllabusItem1.getSyllabi();\r\n            }\r\n            return new TreeSet();\r\n        };\r\n        return getHibernateTemplate().execute(hcb);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tags.impl.common.DB.transaction",
	"Comment": "run some database queries within a transaction with a helpful message if something goes wrong.",
	"Method": "E transaction(DBAction<E> action,E transaction,String actionDescription,DBAction<E> action){\r\n    try {\r\n        Connection db = borrowConnection();\r\n        DBConnection dbc = wrapConnection(db);\r\n        boolean autocommit = db.getAutoCommit();\r\n        try {\r\n            db.setAutoCommit(false);\r\n            return action.call(dbc);\r\n        } finally {\r\n            if (!dbc.wasResolved()) {\r\n                log.warn(\"**************\\nDB Transaction was neither committed nor rolled back.  Committing for you.\");\r\n                dbc.commit();\r\n            }\r\n            if (autocommit) {\r\n                db.setAutoCommit(true);\r\n            }\r\n            db.close();\r\n        }\r\n    } catch (SQLException e) {\r\n        throw new RuntimeException(\"Failure in database action: \" + actionDescription, e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileImageLogicImpl.getUploadedProfileImage",
	"Comment": "get the profile image for the given user, allowing fallback if no thumbnail exists.",
	"Method": "MimeTypeByteArray getUploadedProfileImage(String userUuid,int size){\r\n    MimeTypeByteArray mtba = new MimeTypeByteArray();\r\n    ProfileImageUploaded profileImage = dao.getCurrentProfileImageRecord(userUuid);\r\n    if (profileImage == null) {\r\n        log.debug(\"ProfileLogic.getUploadedProfileImage() null for userUuid: \" + userUuid);\r\n        return null;\r\n    }\r\n    if (size == ProfileConstants.PROFILE_IMAGE_MAIN) {\r\n        mtba = sakaiProxy.getResource(profileImage.getMainResource());\r\n    }\r\n    if (size == ProfileConstants.PROFILE_IMAGE_THUMBNAIL) {\r\n        mtba = sakaiProxy.getResource(profileImage.getThumbnailResource());\r\n        if (mtba == null || mtba.getBytes() == null) {\r\n            mtba = sakaiProxy.getResource(profileImage.getMainResource());\r\n        }\r\n    }\r\n    if (size == ProfileConstants.PROFILE_IMAGE_AVATAR) {\r\n        mtba = sakaiProxy.getResource(profileImage.getAvatarResource());\r\n        if (mtba == null || mtba.getBytes() == null) {\r\n            mtba = sakaiProxy.getResource(profileImage.getMainResource());\r\n        }\r\n    }\r\n    return mtba;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.SimpleLdapConnectionManager.connect",
	"Comment": "connects the specified ldapconnection to\tthe currently configured host and port.",
	"Method": "void connect(LDAPConnection conn){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"connect()\");\r\n    }\r\n    conn.connect(config.getLdapHost(), config.getLdapPort());\r\n    try {\r\n        postConnect(conn);\r\n    } catch (LDAPException e) {\r\n        log.error(\"Failed to completely initialize a connection [host = \" + config.getLdapHost() + \"][port = \" + config.getLdapPort() + \"]\", e);\r\n        try {\r\n            conn.disconnect();\r\n        } catch (LDAPException ee) {\r\n        }\r\n        throw e;\r\n    } catch (Throwable e) {\r\n        log.error(\"Failed to completely initialize a connection [host = \" + config.getLdapHost() + \"][port = \" + config.getLdapPort() + \"]\", e);\r\n        try {\r\n            conn.disconnect();\r\n        } catch (LDAPException ee) {\r\n        }\r\n        if (e instanceof Error) {\r\n            throw (Error) e;\r\n        }\r\n        if (e instanceof RuntimeException) {\r\n            throw (RuntimeException) e;\r\n        }\r\n        throw new RuntimeException(\"LDAPConnection allocation failure\", e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.util.MediaContentConverter.convert",
	"Comment": "convert mediadata objects with blobs in the database to use content\thosting.",
	"Method": "void convert(){\r\n    log.info(\"Starting Samigo Media Conversion...\");\r\n    List<Long> ids = gq.getMediaConversionBatch();\r\n    if (ids.isEmpty()) {\r\n        String summary = outstandingSummary();\r\n        if (\"\".equals(summary)) {\r\n            log.info(\"No remaining Media to convert.\");\r\n        } else {\r\n            log.info(\"No Media can be converted, but there are outstanding errors:\\n\" + outstandingSummary());\r\n        }\r\n    } else {\r\n        while (!ids.isEmpty()) {\r\n            gq.markMediaForConversion(ids);\r\n            for (Long mediaId : ids) {\r\n                convertMedia(mediaId);\r\n            }\r\n            log.info(\"Samigo Media Conversion in progress... \" + summary());\r\n            ids = gq.getMediaConversionBatch();\r\n        }\r\n        log.info(\"Samigo Media Conversion finished... \" + summary());\r\n        log.info(outstandingSummary());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.integration.helper.integrated.AgentHelperImpl.getRoleForCurrentAgent",
	"Comment": "called by agentfacade from an instance.in integrated just wrap the above.",
	"Method": "String getRoleForCurrentAgent(String agentString){\r\n    return this.getRole(agentString);\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.removeMemberFromSiteBatch",
	"Comment": "removes a member from a given site, similar to removemembeforauthzgroup but acts on site directly and uses alist of users",
	"Method": "String removeMemberFromSiteBatch(String sessionid,String siteid,String eids){\r\n    Session session = establishSession(sessionid);\r\n    if (!securityService.isSuperUser(session.getUserId())) {\r\n        log.warn(\"NonSuperUser trying to removeMemberFromSiteBatch: \" + session.getUserId());\r\n        throw new RuntimeException(\"NonSuperUser trying to removeMemberFromSiteBatch: \" + session.getUserId());\r\n    }\r\n    try {\r\n        Site site = siteService.getSite(siteid);\r\n        List<String> eidsList = Arrays.asList(eids.split(\",\"));\r\n        for (String eid : eidsList) {\r\n            String userid = userDirectoryService.getUserByEid(eid).getId();\r\n            site.removeMember(userid);\r\n        }\r\n        siteService.save(site);\r\n    } catch (Exception e) {\r\n        log.error(\"WS removeMemberFromSiteBatch(): \" + e.getClass().getName() + \" : \" + e.getMessage());\r\n        return e.getClass().getName() + \" : \" + e.getMessage();\r\n    }\r\n    return \"success\";\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.SkinnableCharonPortal.includePortal",
	"Comment": "produce a portlet like view with the navigation all at the top with\timplicit reset",
	"Method": "PortalRenderContext includePortal(HttpServletRequest req,HttpServletResponse res,Session session,String siteId,String toolId,String toolContextPath,String prefix,boolean doPages,boolean resetTools,boolean includeSummary,boolean expandSite){\r\n    String errorMessage = null;\r\n    Site site = null;\r\n    try {\r\n        site = siteHelper.getSiteVisit(siteId);\r\n    } catch (IdUnusedException e) {\r\n        errorMessage = \"Unable to find site: \" + siteId;\r\n        siteId = null;\r\n        toolId = null;\r\n    } catch (PermissionException e) {\r\n        if (session.getUserId() == null) {\r\n            errorMessage = \"No permission for anonymous user to view site: \" + siteId;\r\n        } else {\r\n            errorMessage = \"No permission to view site: \" + siteId;\r\n        }\r\n        siteId = null;\r\n        toolId = null;\r\n    }\r\n    ToolConfiguration placement = null;\r\n    if (site != null && toolId != null) {\r\n        placement = SiteService.findTool(toolId);\r\n        if (placement == null) {\r\n            errorMessage = \"Unable to find tool placement \" + toolId;\r\n            toolId = null;\r\n        }\r\n        boolean thisTool = siteHelper.allowTool(site, placement);\r\n        if (!thisTool) {\r\n            errorMessage = \"No permission to view tool placement \" + toolId;\r\n            toolId = null;\r\n            placement = null;\r\n        }\r\n    }\r\n    String title = ServerConfigurationService.getString(\"ui.service\", \"Sakai\");\r\n    if (site != null) {\r\n        title = title + \":\" + siteHelper.getUserSpecificSiteTitle(site, false);\r\n        if (placement != null)\r\n            title = title + \" : \" + placement.getTitle();\r\n    }\r\n    String siteType = null;\r\n    String siteSkin = null;\r\n    if (site != null) {\r\n        siteType = calcSiteType(siteId);\r\n        siteSkin = site.getSkin();\r\n    }\r\n    PortalRenderContext rcontext = startPageContext(siteType, title, siteSkin, req, site);\r\n    String portalTopUrl = Web.serverUrl(req) + ServerConfigurationService.getString(\"portalPath\") + \"/\";\r\n    if (prefix != null)\r\n        portalTopUrl = portalTopUrl + prefix + \"/\";\r\n    rcontext.put(\"portalTopUrl\", portalTopUrl);\r\n    rcontext.put(\"loggedIn\", StringUtils.isNotBlank(session.getUserId()));\r\n    rcontext.put(\"siteId\", siteId);\r\n    if (placement != null) {\r\n        Map m = includeTool(res, req, placement);\r\n        if (m != null)\r\n            rcontext.put(\"currentPlacement\", m);\r\n    }\r\n    if (site != null) {\r\n        SiteView siteView = siteHelper.getSitesView(SiteView.View.CURRENT_SITE_VIEW, req, session, siteId);\r\n        siteView.setPrefix(prefix);\r\n        siteView.setResetTools(resetTools);\r\n        siteView.setToolContextPath(toolContextPath);\r\n        siteView.setIncludeSummary(includeSummary);\r\n        siteView.setDoPages(doPages);\r\n        if (!siteView.isEmpty()) {\r\n            rcontext.put(\"currentSite\", siteView.getRenderContextObject());\r\n        }\r\n    }\r\n    SiteView siteView = siteHelper.getSitesView(SiteView.View.ALL_SITES_VIEW, req, session, siteId);\r\n    siteView.setPrefix(prefix);\r\n    siteView.setResetTools(resetTools);\r\n    siteView.setToolContextPath(toolContextPath);\r\n    siteView.setIncludeSummary(includeSummary);\r\n    siteView.setDoPages(doPages);\r\n    siteView.setExpandSite(expandSite);\r\n    rcontext.put(\"allSites\", siteView.getRenderContextObject());\r\n    includeLogin(rcontext, req, session);\r\n    includeBottom(rcontext, site);\r\n    return rcontext;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.CopyMeetingSignupMBean.reset",
	"Comment": "this reset information which contains in this uibean lived in a session\tscope",
	"Method": "void reset(){\r\n    unlimited = false;\r\n    keepAttendees = false;\r\n    assignParicitpantsToAllRecurEvents = false;\r\n    sendEmail = DEFAULT_SEND_EMAIL;\r\n    if (NEW_MEETING_SEND_EMAIL) {\r\n        sendEmail = true;\r\n    }\r\n    sendEmailToSelectedPeopleOnly = DEFAULT_SEND_EMAIL_TO_SELECTED_PEOPLE_ONLY;\r\n    publishToCalendar = DEFAULT_EXPORT_TO_CALENDAR_TOOL;\r\n    Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime(new Date());\r\n    calendar.set(Calendar.MINUTE, 0);\r\n    calendar.set(Calendar.SECOND, 0);\r\n    repeatUntil = calendar.getTime();\r\n    recurLengthChoice = \"1\";\r\n    occurrences = 0;\r\n    repeatType = ONCE_ONLY;\r\n    repeatTypeUnknown = true;\r\n    showAttendeeName = false;\r\n    missingSitGroupWarning = false;\r\n    if (this.signupMeeting != null)\r\n        cleanUpUnusedAttachmentCopies(this.signupMeeting.getSignupAttachments());\r\n    this.signupMeeting = signupMeetingService.loadSignupMeeting(meetingWrapper.getMeeting().getId(), sakaiFacade.getCurrentUserId(), sakaiFacade.getCurrentLocationId());\r\n    title = this.signupMeeting.getTitle();\r\n    assignMainAttachmentsCopyToSignupMeeting();\r\n    List<SignupTimeslot> signupTimeSlots = signupMeeting.getSignupTimeSlots();\r\n    if (signupTimeSlots != null && !signupTimeSlots.isEmpty()) {\r\n        SignupTimeslot ts = (SignupTimeslot) signupTimeSlots.get(0);\r\n        maxNumOfAttendees = ts.getMaxNoOfAttendees();\r\n        this.unlimited = ts.isUnlimitedAttendee();\r\n        showAttendeeName = ts.isDisplayAttendees();\r\n        this.numberOfSlots = signupTimeSlots.size();\r\n    } else {\r\n        setNumberOfSlots(1);\r\n    }\r\n    this.selectedLocation = this.signupMeeting.getLocation();\r\n    this.selectedCategory = this.signupMeeting.getCategory();\r\n    this.customLocation = \"\";\r\n    this.customCategory = \"\";\r\n    this.categories = null;\r\n    this.locations = null;\r\n    populateDataForBeginDeadline(this.signupMeeting);\r\n    prepareRecurredEvents();\r\n    initializeSitesGroups();\r\n    this.customTimeSlotWrpList = null;\r\n    this.userDefinedTS = false;\r\n    updateTimeSlotWrappers(this.meetingWrapper);\r\n    if (CUSTOM_TIMESLOTS.equals(this.signupMeeting.getMeetingType())) {\r\n        this.userDefinedTS = true;\r\n        this.customTimeSlotWrpList = getTimeslotWrappers();\r\n        markerTimeslots(this.customTimeSlotWrpList);\r\n    }\r\n    getUserDefineTimeslotBean().init(this.signupMeeting, COPTY_MEETING_PAGE_URL, this.customTimeSlotWrpList, UserDefineTimeslotBean.COPY_MEETING);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupTimeslotItem.getAttendees",
	"Comment": "get a list of signupparticipant objects, who have signed up in the time",
	"Method": "List<SignupParticipant> getAttendees(){\r\n    return attendees;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileConnectionsLogicImpl.getConnectedUsers",
	"Comment": "check auth, privacy and get the list of users that are connected to this user.",
	"Method": "List<User> getConnectedUsers(String userUuid){\r\n    String currentUserUuid = sakaiProxy.getCurrentUserId();\r\n    if (currentUserUuid == null) {\r\n        throw new SecurityException(\"You must be logged in to get a connection list.\");\r\n    }\r\n    List<User> users = new ArrayList();\r\n    if (!privacyLogic.isActionAllowed(userUuid, currentUserUuid, PrivacyType.PRIVACY_OPTION_MYFRIENDS)) {\r\n        return users;\r\n    }\r\n    users = sakaiProxy.getUsers(getConfirmedConnectionUserIdsForUser(userUuid));\r\n    return users;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.getSitesUserCanAccess",
	"Comment": "return xml document listing all sites the given user has read or write access to.",
	"Method": "String getSitesUserCanAccess(String sessionid,String eid){\r\n    String newsessionid = getSessionForUser(sessionid, eid, true);\r\n    Session session = establishSession(newsessionid);\r\n    return getSitesCurrentUserCanAccess(newsessionid);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.goToRightQuestionFromTOC",
	"Comment": "sets the delivery bean to the right place when navigating from toc",
	"Method": "void goToRightQuestionFromTOC(DeliveryBean delivery){\r\n    if (ContextUtil.lookupParam(\"partnumber\") != null && !ContextUtil.lookupParam(\"partnumber\").trim().equals(\"\") && !ContextUtil.lookupParam(\"partnumber\").trim().equals(\"null\") && ContextUtil.lookupParam(\"questionnumber\") != null && !ContextUtil.lookupParam(\"questionnumber\").trim().equals(\"\") && !ContextUtil.lookupParam(\"questionnumber\").trim().equals(\"null\")) {\r\n        delivery.setPartIndex(Integer.valueOf(ContextUtil.lookupParam(\"partnumber\")).intValue() - 1);\r\n        delivery.setQuestionIndex(Integer.valueOf(ContextUtil.lookupParam(\"questionnumber\")).intValue() - 1);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.BitlyUrlService.doGet",
	"Comment": "make a get request and append the map of parameters onto the query string.",
	"Method": "String doGet(String address,String doGet,String address,Map<String, String> parameters){\r\n    try {\r\n        List<NameValuePair> queryParams = new ArrayList<NameValuePair>();\r\n        for (Map.Entry<String, String> entry : parameters.entrySet()) {\r\n            queryParams.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));\r\n        }\r\n        URI uri = URIUtils.createURI(null, address, -1, null, URLEncodedUtils.format(queryParams, \"UTF-8\"), null);\r\n        log.info(uri.toString());\r\n        return doGet(uri.toString());\r\n    } catch (URISyntaxException e) {\r\n        log.error(e.getClass() + \":\" + e.getMessage());\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.SkinnableCharonPortal.includeTool",
	"Comment": "the session for neo tools with the sessio reset, helpurl and reseturl",
	"Method": "Map includeTool(HttpServletResponse res,HttpServletRequest req,ToolConfiguration placement,Map includeTool,HttpServletResponse res,HttpServletRequest req,ToolConfiguration placement,boolean toolInline){\r\n    RenderResult renderResult = null;\r\n    if (!toolInline) {\r\n        renderResult = this.getInlineRenderingForTool(res, req, placement);\r\n        if (renderResult != null) {\r\n            log.debug(\"Using buffered content rendering\");\r\n            toolInline = true;\r\n        }\r\n    }\r\n    ActiveTool tool = ActiveToolManager.getActiveTool(placement.getToolId());\r\n    if (tool == null) {\r\n        return null;\r\n    }\r\n    String siteId = placement.getSiteId();\r\n    Site site = null;\r\n    try {\r\n        site = SiteService.getSiteVisit(siteId);\r\n    } catch (IdUnusedException e) {\r\n        site = null;\r\n    } catch (PermissionException e) {\r\n        site = null;\r\n    }\r\n    String titleString = Web.escapeHtml(placement.getTitle());\r\n    String toolId = Web.escapeHtml(placement.getToolId());\r\n    String toolUrl = ServerConfigurationService.getToolUrl() + \"/\" + Web.escapeUrl(placement.getId()) + \"/\";\r\n    log.debug(\"includeTool toolInline={} toolUrl={}\", toolInline, toolUrl);\r\n    if (toolInline) {\r\n        String newUrl = ToolUtils.getPageUrlForTool(req, site, placement);\r\n        if (newUrl != null)\r\n            toolUrl = newUrl;\r\n    }\r\n    if (portalService.isResetRequested(req)) {\r\n        Session s = SessionManager.getCurrentSession();\r\n        ToolSession ts = s.getToolSession(placement.getId());\r\n        ts.clearAttributes();\r\n        portalService.setResetState(null);\r\n        log.debug(\"includeTool state reset\");\r\n    }\r\n    boolean showResetButton = !\"false\".equals(placement.getConfig().getProperty(Portal.TOOLCONFIG_SHOW_RESET_BUTTON));\r\n    String resetActionUrl = PortalStringUtil.replaceFirst(toolUrl, \"/tool/\", \"/tool-reset/\");\r\n    log.debug(\"includeTool resetActionUrl={}\", resetActionUrl);\r\n    String sakaiAction = req.getParameter(\"sakai_action\");\r\n    if (sakaiAction != null && sakaiAction.matches(\".*[\\\"'<>].*\"))\r\n        sakaiAction = null;\r\n    if (sakaiAction != null)\r\n        resetActionUrl = URLUtils.addParameter(resetActionUrl, \"sakai_action\", sakaiAction);\r\n    if (isPortletPlacement(placement)) {\r\n        resetActionUrl = Web.serverUrl(req) + ServerConfigurationService.getString(\"portalPath\") + URLUtils.getSafePathInfo(req) + \"?sakai.state.reset=true\";\r\n    }\r\n    boolean helpEnabledGlobally = ServerConfigurationService.getBoolean(\"display.help.icon\", true);\r\n    boolean helpEnabledInTool = !\"false\".equals(placement.getConfig().getProperty(Portal.TOOLCONFIG_SHOW_HELP_BUTTON));\r\n    boolean showHelpButton = helpEnabledGlobally && helpEnabledInTool;\r\n    String helpActionUrl = \"\";\r\n    if (showHelpButton) {\r\n        String helpDocUrl = placement.getConfig().getProperty(Portal.TOOLCONFIG_HELP_DOCUMENT_URL);\r\n        String helpDocId = placement.getConfig().getProperty(Portal.TOOLCONFIG_HELP_DOCUMENT_ID);\r\n        if (helpDocUrl != null && helpDocUrl.length() > 0) {\r\n            helpActionUrl = helpDocUrl;\r\n        } else {\r\n            if (helpDocId == null || helpDocId.length() == 0) {\r\n                helpDocId = tool.getId();\r\n            }\r\n            helpActionUrl = ServerConfigurationService.getHelpUrl(helpDocId);\r\n        }\r\n    }\r\n    Map<String, Object> toolMap = new HashMap<String, Object>();\r\n    toolMap.put(\"toolInline\", Boolean.valueOf(toolInline));\r\n    if (renderResult == null) {\r\n        log.debug(\"Using standard iframe rendering\");\r\n        renderResult = ToolRenderService.render(this, placement, req, res, getServletContext());\r\n    }\r\n    if (renderResult.getJSR168HelpUrl() != null) {\r\n        toolMap.put(\"toolJSR168Help\", Web.serverUrl(req) + renderResult.getJSR168HelpUrl());\r\n    }\r\n    if (renderResult.getJSR168EditUrl() != null && site != null) {\r\n        if (securityService.unlock(SiteService.SECURE_UPDATE_SITE, site.getReference())) {\r\n            String editUrl = Web.serverUrl(req) + renderResult.getJSR168EditUrl();\r\n            toolMap.put(\"toolJSR168Edit\", editUrl);\r\n            toolMap.put(\"toolJSR168EditEncode\", URLUtils.encodeUrl(editUrl));\r\n        }\r\n    }\r\n    toolMap.put(\"toolRenderResult\", renderResult);\r\n    toolMap.put(\"hasRenderResult\", Boolean.TRUE);\r\n    toolMap.put(\"toolUrl\", toolUrl);\r\n    boolean suppressTitle = BooleanUtils.toBoolean(placement.getConfig().getProperty(\"suppressTitle\"));\r\n    toolMap.put(\"suppressTitle\", suppressTitle);\r\n    Session s = SessionManager.getCurrentSession();\r\n    ToolSession ts = s.getToolSession(placement.getId());\r\n    if (isPortletPlacement(placement)) {\r\n        String doPreFetch = placement.getConfig().getProperty(Portal.JSR_168_PRE_RENDER);\r\n        if (!\"false\".equals(doPreFetch)) {\r\n            try {\r\n                renderResult.getContent();\r\n            } catch (Throwable t) {\r\n                ErrorReporter err = new ErrorReporter();\r\n                String str = err.reportFragment(req, res, t);\r\n                renderResult.setContent(str);\r\n            }\r\n        }\r\n        toolMap.put(\"toolPlacementIDJS\", \"_self\");\r\n        toolMap.put(\"isPortletPlacement\", Boolean.TRUE);\r\n    } else {\r\n        toolMap.put(\"toolPlacementIDJS\", Web.escapeJavascript(\"Main\" + placement.getId()));\r\n    }\r\n    toolMap.put(\"toolResetActionUrl\", resetActionUrl);\r\n    toolMap.put(\"toolResetActionUrlEncode\", URLUtils.encodeUrl(resetActionUrl));\r\n    toolMap.put(\"toolTitle\", titleString);\r\n    toolMap.put(\"toolTitleEncode\", URLUtils.encodeUrl(titleString));\r\n    toolMap.put(\"toolShowResetButton\", Boolean.valueOf(showResetButton));\r\n    toolMap.put(\"toolShowHelpButton\", Boolean.valueOf(showHelpButton));\r\n    toolMap.put(\"toolHelpActionUrl\", helpActionUrl);\r\n    toolMap.put(\"toolId\", toolId);\r\n    toolMap.put(\"toolInline\", Boolean.valueOf(toolInline));\r\n    String directToolUrl = ServerConfigurationService.getPortalUrl() + \"/\" + DirectToolHandler.URL_FRAGMENT + \"/\" + Web.escapeUrl(placement.getId()) + \"/\";\r\n    toolMap.put(\"directToolUrl\", directToolUrl);\r\n    boolean showDirectToolUrl = !\"false\".equals(placement.getConfig().getProperty(Portal.TOOL_DIRECTURL_ENABLED_PROP));\r\n    toolMap.put(\"showDirectToolUrl\", showDirectToolUrl);\r\n    return toolMap;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.GenericDiffBean.getUnixDiffString",
	"Comment": "gets the difference between the left and right as a unix diff",
	"Method": "String getUnixDiffString(){\r\n    return difference.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.business.entity.RecordingData.unitTest",
	"Comment": "unit test for use with junit etc. this only tests the file namecomputation, the other methods are pretty trivial",
	"Method": "void unitTest(){\r\n    RecordingData rd = new RecordingData(\"Ed Smiley\", \"esmiley\", \"Intro to Wombats 101\", \"10\", \"30\");\r\n    log.debug(\"esmiley file:\" + rd.getFileName() + \".\" + rd.getFileExtension());\r\n    log.debug(\"limit =\" + rd.getLimit());\r\n    log.debug(\"seconds=\" + rd.getSeconds());\r\n    rd = new RecordingData(\"Rachel Gollub\", \"rgollub\", \"Rachel's Intro to Wolverines and Aardvarks 221B\", \"10\", \"25\");\r\n    log.debug(\"rgollub file:\" + rd.getFileName() + \".\" + rd.getFileExtension());\r\n    log.debug(\"limit =\" + rd.getLimit());\r\n    log.debug(\"seconds=\" + rd.getSeconds());\r\n    rd = new RecordingData(\"Rachel Gollub\", \"rgollub\", \"Intro to Wolverines and Aardvarks 221B\", \"10\", \"25\");\r\n    log.debug(\"rgollub file:\" + rd.getFileName() + \".\" + rd.getFileExtension());\r\n    log.debug(\"limit =\" + rd.getLimit());\r\n    log.debug(\"seconds=\" + rd.getSeconds());\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    Source xmlSource = new DOMSource(rd.getXMLDataModel());\r\n    Result outputTarget = new StreamResult(out);\r\n    Transformer tf;\r\n    try {\r\n        tf = TransformerFactory.newInstance().newTransformer();\r\n        tf.transform(xmlSource, outputTarget);\r\n    } catch (TransformerException e) {\r\n        log.debug(\"cannot serialize\" + e);\r\n    }\r\n    rd = new RecordingData(null, null, null, null, null);\r\n    log.debug(\"NULL file: \" + rd.getFileName() + \".\" + rd.getFileExtension());\r\n    log.debug(\"limit =\" + rd.getLimit());\r\n    log.debug(\"seconds=\" + rd.getSeconds());\r\n    rd = new RecordingData(null, null, null, null, null);\r\n    log.debug(\"NULL file: \" + rd.getFileName() + \".\" + rd.getFileExtension());\r\n    log.debug(\"limit =\" + rd.getLimit());\r\n    log.debug(\"seconds=\" + rd.getSeconds());\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.OrganizerSignupMBean.swapAttendees",
	"Comment": "the logic below assumes an attendee appears only once in a timeslot",
	"Method": "SignupEventTrackingInfo swapAttendees(){\r\n    SwapAttendee swapAttendee = new SwapAttendee(currentUserId(), currentSiteId(), signupMeetingService);\r\n    TimeslotWrapper currentTimeslotWrapper = (TimeslotWrapper) timeslotWrapperTable.getRowData();\r\n    swapAttendee.swapAttendee(getMeetingWrapper().getMeeting(), currentTimeslotWrapper.getTimeSlot(), this.selectedFirstUser, (String) attendeeTimeSlotWithId.getValue());\r\n    return swapAttendee.getSignupEventTrackingInfo();\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseArFragment.loadPlaneDiscoveryView",
	"Comment": "load the default view we use for the plane discovery instructions.",
	"Method": "View loadPlaneDiscoveryView(LayoutInflater inflater,ViewGroup container){\r\n    return inflater.inflate(R.layout.sceneform_plane_discovery_layout, container, false);\r\n}"
}, {
	"Path": "org.sakaiproject.umem.tool.ui.SiteListBean.doSearch",
	"Comment": "uses complex sql for site membership, user role and group membership.\tfor a 12 site users it takes1 secs!",
	"Method": "void doSearch(){\r\n    userSitesRows = new ArrayList();\r\n    Connection c = null;\r\n    PreparedStatement pst = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        c = M_sql.borrowConnection();\r\n        String sql = \"select ss.SITE_ID, ss.TITLE, ss.TYPE, ss.PUBLISHED, srr.ROLE_NAME, srrg.ACTIVE, \" + \" (select VALUE from SAKAI_SITE_PROPERTY ssp where ss.SITE_ID = ssp.SITE_ID and ssp.NAME = 'term') TERM \" + \"from SAKAI_SITE ss, SAKAI_REALM sr, SAKAI_REALM_RL_GR srrg, SAKAI_REALM_ROLE srr \" + \"where sr.REALM_ID = CONCAT('/site/',ss.SITE_ID) \" + \"and sr.REALM_KEY = srrg.REALM_KEY \" + \"and srrg.ROLE_KEY = srr.ROLE_KEY \" + \"and srrg.USER_ID = ? \" + \"and ss.IS_USER = 0 \" + \"and ss.IS_SPECIAL = 0 \" + \"ORDER BY ss.TITLE\";\r\n        pst = c.prepareStatement(sql);\r\n        pst.setString(1, userId);\r\n        rs = pst.executeQuery();\r\n        while (rs.next()) {\r\n            String id = rs.getString(\"SITE_ID\");\r\n            String t = rs.getString(\"TITLE\");\r\n            String tp = rs.getString(\"TYPE\");\r\n            String pv = rs.getString(\"PUBLISHED\");\r\n            if (\"1\".equals(pv)) {\r\n                pv = msgs.getString(\"status_published\");\r\n            } else {\r\n                pv = msgs.getString(\"status_unpublished\");\r\n            }\r\n            String rn = rs.getString(\"ROLE_NAME\");\r\n            String grps = getGroups(userId, id);\r\n            String active = rs.getString(\"ACTIVE\").trim().equals(\"1\") ? msgs.getString(\"site_user_status_active\") : msgs.getString(\"site_user_status_inactive\");\r\n            String term = rs.getString(\"TERM\");\r\n            if (term == null)\r\n                term = \"\";\r\n            userSitesRows.add(new UserSitesRow(id, t, tp, grps, rn, pv, active, term));\r\n        }\r\n    } catch (SQLException e) {\r\n        log.warn(\"SQL error occurred while retrieving user memberships for user: \" + userId, e);\r\n        log.warn(\"UserMembership will use alternative methods for retrieving user memberships.\");\r\n        doSearch3();\r\n    } finally {\r\n        try {\r\n            if (rs != null)\r\n                rs.close();\r\n        } finally {\r\n            try {\r\n                if (pst != null)\r\n                    pst.close();\r\n            } finally {\r\n                if (c != null)\r\n                    M_sql.returnConnection(c);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.search.elasticsearch.ElasticSearchService.init",
	"Comment": "register a notification action to listen to events and modify the searchindex",
	"Method": "void init(){\r\n    if (!isEnabled()) {\r\n        log.info(\"ElasticSearch is not enabled. Set search.enable=true to change that.\");\r\n        return;\r\n    }\r\n    initializeElasticSearch();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.AddAttendee.checkForPromotion",
	"Comment": "this check required only if version exception is thrown during add signup\tto ensure that no one else promoted the current user",
	"Method": "void checkForPromotion(SignupMeeting meeting,SignupAttendee newAttendee){\r\n    String attendeeUserId = newAttendee.getAttendeeUserId();\r\n    List<SignupTimeslot> signupTimeSlots = meeting.getSignupTimeSlots();\r\n    int totalSignupSlots = 0;\r\n    for (SignupTimeslot timeslot : signupTimeSlots) {\r\n        List<SignupAttendee> attendees = timeslot.getAttendees();\r\n        for (SignupAttendee attendee : attendees) {\r\n            if (attendee.getAttendeeUserId().equals(attendeeUserId)) {\r\n                totalSignupSlots++;\r\n            }\r\n        }\r\n    }\r\n    int preferredSlot = meeting.getMaxNumOfSlots().intValue();\r\n    if (totalSignupSlots >= preferredSlot) {\r\n        throw new SignupUserActionException(Utilities.rb.getString(\"you.promoted.to.another.ts_meanwhile\"));\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.rubrics.logic.RubricsServiceImpl.getRubricAssociation",
	"Comment": "returns the toolitemrubricassociation for the given tool and associated item id, wrapped as an optional.",
	"Method": "Optional<ToolItemRubricAssociation> getRubricAssociation(String toolId,String associatedToolItemId,Optional<ToolItemRubricAssociation> getRubricAssociation,String toolId,String associatedToolItemId,String siteId){\r\n    Optional<ToolItemRubricAssociation> association = Optional.empty();\r\n    Optional<Resource<ToolItemRubricAssociation>> associationResource = getRubricAssociationResource(toolId, associatedToolItemId, siteId);\r\n    if (associationResource.isPresent()) {\r\n        association = Optional.of(associationResource.get().getContent());\r\n    }\r\n    return association;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.LessonsSubnavEnabler.addSettingsToEditToolsConfirmationContext",
	"Comment": "add lessons subnav settings to the context for the edit tools confirmation page",
	"Method": "boolean addSettingsToEditToolsConfirmationContext(Context context,Site site,SessionState state){\r\n    if (site == null || context == null || state == null) {\r\n        return false;\r\n    }\r\n    final boolean isEnabled = (Boolean) state.getAttribute(STATE_KEY);\r\n    if (isEnabled) {\r\n        context.put(CONTEXT_ENABLED_KEY, Boolean.TRUE);\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.isMandatorySendEmail",
	"Comment": "this is for ui page to determine whether the email checkbox should be checked and disabled to change",
	"Method": "boolean isMandatorySendEmail(){\r\n    return this.mandatorySendEmail;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.components.StylableSelectOptions.setRecreateChoices",
	"Comment": "controls whether or not selectchoice objects are recreated every request",
	"Method": "StylableSelectOptions setRecreateChoices(boolean refresh){\r\n    recreateChoices = refresh;\r\n    return this;\r\n}"
}, {
	"Path": "org.sakaiproject.web.tool.IFrameAction.buildOptionsPanelContext",
	"Comment": "setup the velocity context and choose the template for options.",
	"Method": "String buildOptionsPanelContext(VelocityPortlet portlet,Context context,RunData data,SessionState state){\r\n    String special = (String) state.getAttribute(SPECIAL);\r\n    String source = \"\";\r\n    String siteId = \"\";\r\n    if (special == null) {\r\n        source = (String) state.getAttribute(SOURCE);\r\n        if (source == null)\r\n            source = \"\";\r\n        context.put(SOURCE, source);\r\n        context.put(\"heading\", rb.getString(\"gen.custom\"));\r\n    } else {\r\n        if (SPECIAL_SITE.equals(special)) {\r\n            context.put(\"heading\", rb.getString(\"gen.custom.site\"));\r\n        } else if (SPECIAL_WORKSPACE.equals(special)) {\r\n            context.put(\"heading\", rb.getString(\"gen.custom.workspace\"));\r\n        } else if (SPECIAL_WORKSITE.equals(special)) {\r\n            context.put(\"heading\", rb.getString(\"gen.custom.worksite\"));\r\n            try {\r\n                Site s = SiteService.getSite(ToolManager.getCurrentPlacement().getContext());\r\n                siteId = s.getId();\r\n                String infoUrl = StringUtils.trimToNull(s.getInfoUrl());\r\n                if (infoUrl != null) {\r\n                    context.put(\"info_url\", infoUrl);\r\n                }\r\n                String description = StringUtils.trimToNull(s.getDescription());\r\n                if (description != null) {\r\n                    description = FormattedText.escapeHtmlFormattedTextarea(description);\r\n                    context.put(\"description\", description);\r\n                }\r\n            } catch (Throwable e) {\r\n            }\r\n        } else if (SPECIAL_ANNOTATEDURL.equals(special)) {\r\n            context.put(\"heading\", rb.getString(\"gen.custom.annotatedurl\"));\r\n            try {\r\n                String desp = state.getAttribute(ANNOTATED_TEXT).toString();\r\n                context.put(\"description\", desp);\r\n            } catch (Throwable e) {\r\n            }\r\n        } else {\r\n            context.put(\"heading\", rb.getString(\"gen.custom\"));\r\n        }\r\n    }\r\n    boolean selected = false;\r\n    String height = state.getAttribute(HEIGHT).toString();\r\n    for (int i = 0; i < ourPixels.length; i++) {\r\n        if (height.equals(ourPixels[i])) {\r\n            selected = true;\r\n            continue;\r\n        }\r\n    }\r\n    if (!selected) {\r\n        String[] strings = height.trim().split(\"px\");\r\n        context.put(\"custom_height\", strings[0]);\r\n        height = rb.getString(\"gen.heisomelse\");\r\n    }\r\n    context.put(HEIGHT, height);\r\n    context.put(TITLE, state.getAttribute(TITLE));\r\n    context.put(\"tlang\", rb);\r\n    context.put(\"doUpdate\", BUTTON + \"doConfigure_update\");\r\n    context.put(\"doCancel\", BUTTON + \"doCancel\");\r\n    context.put(\"form_tool_title\", FORM_TOOL_TITLE);\r\n    context.put(\"form_page_title\", FORM_PAGE_TITLE);\r\n    Placement placement = ToolManager.getCurrentPlacement();\r\n    ToolConfiguration toolConfig = SiteService.findTool(placement.getId());\r\n    if ((state.getAttribute(SPECIAL) == null) && (toolConfig != null)) {\r\n        try {\r\n            Site site = SiteService.getSite(toolConfig.getSiteId());\r\n            siteId = site.getId();\r\n            SitePage page = site.getPage(toolConfig.getPageId());\r\n            if ((page.getTools() != null) && (page.getTools().size() == 1)) {\r\n                context.put(\"showPopup\", Boolean.TRUE);\r\n                context.put(\"popup\", Boolean.valueOf(page.isPopUp()));\r\n                context.put(\"pageTitleEditable\", Boolean.TRUE);\r\n                context.put(\"page_title\", (String) state.getAttribute(STATE_PAGE_TITLE));\r\n            }\r\n        } catch (Throwable e) {\r\n        }\r\n    }\r\n    String template = (String) getContext(data).get(\"template\");\r\n    if (SPECIAL_WORKSITE.equals(special)) {\r\n        template = template + \"-site-customize\";\r\n    } else if (SPECIAL_WORKSPACE.equals(special)) {\r\n        template = template + \"-customize\";\r\n    } else if (SPECIAL_ANNOTATEDURL.equals(special)) {\r\n        template = template + \"-annotatedurl-customize\";\r\n    } else {\r\n        template = template + \"-customize\";\r\n    }\r\n    if (siteId.length() == 0) {\r\n        try {\r\n            Site s = SiteService.getSite(ToolManager.getCurrentPlacement().getContext());\r\n            siteId = s.getId();\r\n        } catch (Throwable e) {\r\n        }\r\n    }\r\n    if (special == null) {\r\n        if (state.getAttribute(EVENT_REVISE_WEB_CONTENT) == null) {\r\n            m_eventTrackingService.post(m_eventTrackingService.newEvent(EVENT_REVISE_WEB_CONTENT, source, siteId, true, NotificationService.NOTI_NONE));\r\n        } else {\r\n            m_eventTrackingService.post(m_eventTrackingService.newEvent((String) state.getAttribute(EVENT_REVISE_WEB_CONTENT), source, siteId, true, NotificationService.NOTI_NONE));\r\n        }\r\n    } else {\r\n        if (state.getAttribute(EVENT_REVISE_WEB_CONTENT) != null) {\r\n            m_eventTrackingService.post(m_eventTrackingService.newEvent((String) state.getAttribute(EVENT_REVISE_WEB_CONTENT), source, siteId, true, NotificationService.NOTI_NONE));\r\n        }\r\n    }\r\n    context.put(\"max_length_title\", MAX_TITLE_LENGTH);\r\n    context.put(\"max_length_info_url\", MAX_SITE_INFO_URL_LENGTH);\r\n    return template;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.hasContent",
	"Comment": "helper to check if a tool in a site has content. \tthis leverages the entityproducer system and then checks each producer to see if it is the one we are interested in\tif the tool implements the contentexistsaware interface, then it asks the tool explicitly if it has content.\tif the tool does not implement this interface, then we have no way to tell, so for backwards compatibility we assume it has content.",
	"Method": "boolean hasContent(String toolId,String siteId){\r\n    for (Object o : EntityManager.getEntityProducers()) {\r\n        EntityProducer ep = (EntityProducer) o;\r\n        if (ep instanceof EntityTransferrer) {\r\n            EntityTransferrer et = (EntityTransferrer) ep;\r\n            if (ArrayUtils.contains(et.myToolIds(), toolId)) {\r\n                if (ep instanceof ContentExistsAware) {\r\n                    ContentExistsAware cea = (ContentExistsAware) ep;\r\n                    log.debug(\"Checking tool content for site:\" + siteId + \", tool: \" + et.myToolIds());\r\n                    return cea.hasContent(siteId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.SearchAdminBeanImpl.doRefreshStatus",
	"Comment": "refresh the status of the search engine index, does nothing",
	"Method": "void doRefreshStatus(){\r\n    commandFeedback = Messages.getString(\"searchadmin_statok\");\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doFinish",
	"Comment": "dofinish is called when a site has enough information to be saved as an\tunpublished site",
	"Method": "void doFinish(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    if (state.getAttribute(STATE_MESSAGE) == null) {\r\n        state.setAttribute(STATE_TEMPLATE_INDEX, params.getString(\"continue\"));\r\n        addNewSite(params, state);\r\n        Site site = getStateSite(state);\r\n        setNewSiteStateParameters(site, state);\r\n        if (aliasAssignmentForNewSitesEnabled(state)) {\r\n            SecurityService.pushAdvisor(new SecurityAdvisor() {\r\n                public SecurityAdvice isAllowed(String userId, String function, String reference) {\r\n                    if (AliasService.SECURE_ADD_ALIAS.equals(function) || AliasService.SECURE_UPDATE_ALIAS.equals(function)) {\r\n                        return SecurityAdvice.ALLOWED;\r\n                    }\r\n                    return SecurityAdvice.PASS;\r\n                }\r\n            });\r\n            try {\r\n                setSiteReferenceAliases(state, site.getId());\r\n            } finally {\r\n                SecurityService.popAdvisor();\r\n            }\r\n        }\r\n        SiteInfo siteInfo = (SiteInfo) state.getAttribute(STATE_SITE_INFO);\r\n        if (siteInfo != null) {\r\n            for (String role : siteInfo.additionalRoles) {\r\n                updateAdditionalRole(state, site, role, true);\r\n            }\r\n        }\r\n        Site templateSite = (Site) state.getAttribute(STATE_TEMPLATE_SITE);\r\n        if (templateSite == null) {\r\n            saveFeatures(params, state, site);\r\n            try {\r\n                site = SiteService.getSite(site.getId());\r\n            } catch (Exception ee) {\r\n                log.error(this + \"doFinish: unable to reload site \" + site.getId() + \" after copying tools\");\r\n            }\r\n        } else {\r\n            if (state.getAttribute(STATE_TEMPLATE_SITE_COPY_CONTENT) != null) {\r\n                siteManageService.importToolContent(templateSite.getId(), site, true);\r\n                try {\r\n                    site = SiteService.getSite(site.getId());\r\n                } catch (Exception ee) {\r\n                    log.error(this + \"doFinish: unable to reload site \" + site.getId() + \" after importing tools\");\r\n                }\r\n            }\r\n            if (state.getAttribute(STATE_TEMPLATE_SITE_COPY_USERS) != null) {\r\n                try {\r\n                    AuthzGroup templateGroup = authzGroupService.getAuthzGroup(templateSite.getReference());\r\n                    AuthzGroup newGroup = authzGroupService.getAuthzGroup(site.getReference());\r\n                    for (Iterator mi = templateGroup.getMembers().iterator(); mi.hasNext(); ) {\r\n                        Member member = (Member) mi.next();\r\n                        if (newGroup.getMember(member.getUserId()) == null) {\r\n                            newGroup.addMember(member.getUserId(), member.getRole().getId(), member.isActive(), member.isProvided());\r\n                        }\r\n                    }\r\n                    authzGroupService.save(newGroup);\r\n                } catch (Exception copyUserException) {\r\n                    log.warn(this + \"doFinish: copy user exception template site =\" + templateSite.getReference() + \" new site =\" + site.getReference() + \" \" + copyUserException.getMessage());\r\n                }\r\n            } else {\r\n                try {\r\n                    AuthzGroup newGroup = authzGroupService.getAuthzGroup(site.getReference());\r\n                    newGroup.setProviderGroupId(null);\r\n                    authzGroupService.save(newGroup);\r\n                    newGroup = authzGroupService.getAuthzGroup(site.getReference());\r\n                    String currentUserId = UserDirectoryService.getCurrentUser().getId();\r\n                    if (newGroup.getUserRole(currentUserId) == null) {\r\n                        SecurityService.pushAdvisor(new SecurityAdvisor() {\r\n                            public SecurityAdvice isAllowed(String userId, String function, String reference) {\r\n                                return SecurityAdvice.ALLOWED;\r\n                            }\r\n                        });\r\n                        newGroup.addMember(currentUserId, newGroup.getMaintainRole(), true, false);\r\n                        authzGroupService.save(newGroup);\r\n                        SecurityService.popAdvisor();\r\n                    }\r\n                } catch (Exception removeProviderException) {\r\n                    log.warn(this + \"doFinish: remove provider id \" + \" new site =\" + site.getReference() + \" \" + removeProviderException.getMessage());\r\n                }\r\n                try {\r\n                    site = SiteService.getSite(site.getId());\r\n                } catch (Exception ee) {\r\n                    log.error(this + \"doFinish: unable to reload site \" + site.getId() + \" after updating roster.\");\r\n                }\r\n            }\r\n            String skin = templateSite.getSkin();\r\n            if (StringUtils.isNotBlank(skin)) {\r\n                site.setSkin(skin);\r\n            }\r\n            site.getPropertiesEdit().removeProperty(\"template\");\r\n            site.setPublished(state.getAttribute(STATE_TEMPLATE_PUBLISH) != null ? true : false);\r\n            String newSiteIconUrl = siteManageService.transferSiteResource(templateSite.getId(), site.getId(), site.getIconUrl());\r\n            site.setIconUrl(newSiteIconUrl);\r\n            userNotificationProvider.notifyTemplateUse(templateSite, UserDirectoryService.getCurrentUser(), site);\r\n        }\r\n        ResourcePropertiesEdit rp = site.getPropertiesEdit();\r\n        String siteType = site.getType();\r\n        if (SiteTypeUtil.isCourseSite(siteType)) {\r\n            AcademicSession term = null;\r\n            if (state.getAttribute(STATE_TERM_SELECTED) != null) {\r\n                term = (AcademicSession) state.getAttribute(STATE_TERM_SELECTED);\r\n                rp.addProperty(Site.PROP_SITE_TERM, term.getTitle());\r\n                rp.addProperty(Site.PROP_SITE_TERM_EID, term.getEid());\r\n            }\r\n            updateCourseSiteSections(state, site.getId(), rp, term);\r\n        } else {\r\n            sendSiteNotification(state, getStateSite(state), null);\r\n        }\r\n        commitSite(site);\r\n        if (state.getAttribute(STATE_CREATE_FROM_ARCHIVE) == Boolean.TRUE) {\r\n            doMergeArchiveIntoNewSite(site.getId(), state);\r\n        }\r\n        if (templateSite == null) {\r\n            saveSiteSetupQuestionUserAnswers(state, site.getId());\r\n        }\r\n        scheduleTopRefresh();\r\n        resetPaging(state);\r\n        cleanState(state);\r\n        if (SITE_MODE_HELPER.equals(state.getAttribute(STATE_SITE_MODE))) {\r\n            state.setAttribute(SiteHelper.SITE_CREATE_SITE_ID, site.getId());\r\n            state.setAttribute(STATE_SITE_MODE, SITE_MODE_HELPER_DONE);\r\n        }\r\n        state.setAttribute(STATE_TEMPLATE_INDEX, \"0\");\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doFinish",
	"Comment": "dofinish is called when a site has enough information to be saved as an\tunpublished site",
	"Method": "void doFinish(RunData data){\r\n    if (AliasService.SECURE_ADD_ALIAS.equals(function) || AliasService.SECURE_UPDATE_ALIAS.equals(function)) {\r\n        return SecurityAdvice.ALLOWED;\r\n    }\r\n    return SecurityAdvice.PASS;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doFinish",
	"Comment": "dofinish is called when a site has enough information to be saved as an\tunpublished site",
	"Method": "void doFinish(RunData data){\r\n    return SecurityAdvice.ALLOWED;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.generateStateMap",
	"Comment": "generate a hashmap of all the variables stored within the state.",
	"Method": "HashMap<String, Object> generateStateMap(SessionState state){\r\n    HashMap<String, Object> stateMap = new HashMap();\r\n    for (String name : state.getAttributeNames()) {\r\n        stateMap.put(name, state.getAttribute(name));\r\n    }\r\n    return stateMap;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.PermissionsBean.isAdminAllowed",
	"Comment": "using the current objectservice checks whether admin functions can be\tperformed on the current rwikiobject by the currentuser.",
	"Method": "boolean isAdminAllowed(){\r\n    return objectService.checkAdmin(rwikiObject);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.participant.impl.SiteAddParticipantHandler.init",
	"Comment": "initialization method, just gets the current site in preparation for other calls",
	"Method": "void init(){\r\n    if (site == null) {\r\n        try {\r\n            siteId = sessionManager.getCurrentToolSession().getAttribute(HELPER_ID + \".siteId\").toString();\r\n        } catch (java.lang.NullPointerException npe) {\r\n            log.error(\"Site ID wasn't set in the helper call!!\", npe);\r\n        }\r\n        if (siteId == null) {\r\n            siteId = toolManager.getCurrentPlacement().getContext();\r\n        }\r\n        try {\r\n            site = siteService.getSite(siteId);\r\n            realm = authzGroupService.getAuthzGroup(siteService.siteReference(siteId));\r\n            roles = SiteParticipantHelper.getAllowedRoles(site.getType(), realm.getRoles());\r\n        } catch (IdUnusedException | GroupNotDefinedException e) {\r\n            log.error(\"The siteId we were given was bogus\", e);\r\n        }\r\n    }\r\n    invalidDomains = Arrays.asList(ArrayUtils.nullToEmpty(org.sakaiproject.component.cover.ServerConfigurationService.getStrings(SAK_PROP_INVALID_EMAIL_DOMAINS)));\r\n}"
}, {
	"Path": "org.sakaiproject.provider.user.SampleCandidateDetailProvider.destroy",
	"Comment": "returns to uninitialized state. you can use this method to release resources thet your service allocated when turbine shuts down.",
	"Method": "void destroy(){\r\n    log.info(\"destroy()\");\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.getUserDisplayName",
	"Comment": "gets the display name for a given userdiffers from original above as that one uses the session to get the displayname hence you must know this in advance or be logged in to the web serviceswith that user. this uses a eid as well so we could be logged in as admin and retrieve the display name for any user.",
	"Method": "String getUserDisplayName(String sessionid,String eid){\r\n    Session session = establishSession(sessionid);\r\n    try {\r\n        return userDirectoryService.getUserByEid(eid).getDisplayName();\r\n    } catch (UserNotDefinedException unde) {\r\n        try {\r\n            return userDirectoryService.getUser(eid).getDisplayName();\r\n        } catch (UserNotDefinedException unde2) {\r\n            log.error(\"WS getUserDisplayName() failed for user: \" + eid + \" : \" + unde2.getClass().getName() + \" : \" + unde2.getMessage());\r\n            return \"\";\r\n        }\r\n    } catch (Exception e) {\r\n        log.error(\"WS getUserDisplayName() failed for user: \" + eid + \" : \" + e.getClass().getName() + \" : \" + e.getMessage());\r\n        return \"\";\r\n    }\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ReferencesBean.getReferencingPageLinks",
	"Comment": "gets links to the pages referencing the current rwikiobject.",
	"Method": "List getReferencingPageLinks(){\r\n    List pages = objectService.findReferencingPages(rwikiObject.getName());\r\n    List referencingLinks = new ArrayList(pages.size());\r\n    ViewBean vb = new ViewBean(rwikiObject.getName(), defaultSpace);\r\n    vb.setLocalSpace(vb.getPageSpace());\r\n    for (Iterator it = pages.iterator(); it.hasNext(); ) {\r\n        vb.setPageName((String) it.next());\r\n        String link = \"<a href=\\\"\" + XmlEscaper.xmlEscape(vb.getViewUrl()) + \"\\\">\" + XmlEscaper.xmlEscape(vb.getLocalName()) + \"<\/a>\";\r\n        referencingLinks.add(link);\r\n    }\r\n    return referencingLinks;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.LDAPJSSESecureSocketFactory.createSocket",
	"Comment": "returns the socket connected to the ldap server with the specifiedhost name and port number.the secure connection is established to the server when thiscall returns.this method is called by the constructor of ldapconnection",
	"Method": "java.net.Socket createSocket(String host,int port){\r\n    Socket socket = factory.createSocket();\r\n    socket.connect(new InetSocketAddress(host, port), connectTimeout);\r\n    return socket;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemBean.getSelectedRelativeWidth",
	"Comment": "these give index into the select list, which is 10, 20, 30, etc. 0 for not specified",
	"Method": "String getSelectedRelativeWidth(){\r\n    return Integer.toString(this.relativeWidth / 10);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.QuestionPoolFacadeQueries.getPool",
	"Comment": "get a pool based on poolid. i am not sure why agent is not used though is being parsed.",
	"Method": "QuestionPoolFacade getPool(Long poolId,String agent){\r\n    try {\r\n        QuestionPoolData qpp = (QuestionPoolData) getHibernateTemplate().load(QuestionPoolData.class, poolId);\r\n        setPoolAccessType(qpp, agent);\r\n        populateQuestionPoolItemDatas(qpp);\r\n        return getQuestionPool(qpp);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.assessment.PublishedAssessmentServiceImpl.getBasicInfoOfLastSubmittedAssessments",
	"Comment": "get list of all last submitterd published assessments with only basic info populated.",
	"Method": "List getBasicInfoOfLastSubmittedAssessments(String agentId,String orderBy,boolean ascending){\r\n    try {\r\n        PublishedAssessmentService service = new PublishedAssessmentService();\r\n        return service.getBasicInfoOfLastSubmittedAssessments(agentId, orderBy, ascending);\r\n    } catch (Exception ex) {\r\n        throw new AssessmentServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UserPrefsTool.readTypePrefs",
	"Comment": "read the two context references for defaults for this type from the form.",
	"Method": "void readTypePrefs(String type,String prefix,PreferencesEdit edit,String data){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"readTypePrefs(String \" + type + \", String \" + prefix + \", PreferencesEdit \" + edit + \", String \" + data + \")\");\r\n    }\r\n    ResourcePropertiesEdit props = edit.getPropertiesEdit(NotificationService.PREFS_TYPE + type);\r\n    props.addProperty(Integer.toString(NotificationService.NOTI_OPTIONAL), data);\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiLogin.loginPOST",
	"Comment": "login with the supplied credentials and return the session string which can be used in subsequent web service calls, ie via sakaiscript",
	"Method": "java.lang.String loginPOST(java.lang.String id,java.lang.String pw){\r\n    return login(id, pw);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.chromakeyvideo.ChromaKeyVideoActivity.checkIsSupportedDeviceOrFinish",
	"Comment": "returns false and displays an error message if sceneform can not run, true if sceneform can runon this device.sceneform requires android n on the device as well as opengl 3.0 capabilities.finishes the activity if sceneform can not run",
	"Method": "boolean checkIsSupportedDeviceOrFinish(Activity activity){\r\n    if (Build.VERSION.SDK_INT < VERSION_CODES.N) {\r\n        Log.e(TAG, \"Sceneform requires Android N or later\");\r\n        Toast.makeText(activity, \"Sceneform requires Android N or later\", Toast.LENGTH_LONG).show();\r\n        activity.finish();\r\n        return false;\r\n    }\r\n    String openGlVersionString = ((ActivityManager) activity.getSystemService(Context.ACTIVITY_SERVICE)).getDeviceConfigurationInfo().getGlEsVersion();\r\n    if (Double.parseDouble(openGlVersionString) < MIN_OPENGL_VERSION) {\r\n        Log.e(TAG, \"Sceneform requires OpenGL ES 3.0 later\");\r\n        Toast.makeText(activity, \"Sceneform requires OpenGL ES 3.0 or later\", Toast.LENGTH_LONG).show();\r\n        activity.finish();\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "sf.util.StopWatch.stringify",
	"Comment": "allows for a deferred conversion to a string. useful in logging.",
	"Method": "Supplier<String> stringify(){\r\n    return () -> {\r\n        final StringBuilder buffer = new StringBuilder(1024);\r\n        final LocalTime totalDurationLocal = LocalTime.ofNanoOfDay(totalDuration.toNanos());\r\n        buffer.append(String.format(\"Total time taken for <%s> - %s hours%n\", id, totalDurationLocal.format(df)));\r\n        for (final TaskInfo task : tasks) {\r\n            buffer.append(String.format(\"-%5.1f%% - %s%n\", calculatePercentage(task.getDuration(), totalDuration), task));\r\n        }\r\n        return buffer.toString();\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.JsfUtil.addRedirectSafeInfoMessage",
	"Comment": "adds an info message for display on a page even if faces sends the userto the page via a redirect.",
	"Method": "void addRedirectSafeInfoMessage(String message){\r\n    MessagingBean mb = (MessagingBean) resolveVariable(\"messagingBean\");\r\n    mb.addMessage(new FacesMessage(FacesMessage.SEVERITY_INFO, message, null));\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doSite_information",
	"Comment": "dispatch to different functions based on the option value in the\tparameter",
	"Method": "void doSite_information(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String option = params.getString(\"option\");\r\n    if (option.equalsIgnoreCase(\"continue\")) {\r\n        doContinue(data);\r\n        Site templateSite = (Site) state.getAttribute(STATE_TEMPLATE_SITE);\r\n        if (templateSite != null) {\r\n            state.setAttribute(STATE_TEMPLATE_INDEX, \"18\");\r\n        }\r\n    } else if (option.equalsIgnoreCase(\"back\")) {\r\n        doBack(data);\r\n    } else if (option.equalsIgnoreCase(\"cancel\")) {\r\n        if (getStateSite(state) == null) {\r\n            doCancel_create(data);\r\n        } else {\r\n            doCancel(data);\r\n        }\r\n    } else if (option.equalsIgnoreCase(\"removeSection\")) {\r\n        removeSection(state, params);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.downloadEvents.EventWorksheet.getEventWorkbook",
	"Comment": "obtain the created excel workbook with various worksheets according to\tthe downlaod type",
	"Method": "Workbook getEventWorkbook(List<SignupMeetingWrapper> meetingWrappers,String downloadType){\r\n    if (meetingWrappers != null) {\r\n        if (FULL_VERSION.equals(downloadType)) {\r\n            if (meetingWrappers.size() > 1) {\r\n                createShortVersonWorksheet(meetingWrappers);\r\n            }\r\n            int serialNum = 1;\r\n            boolean hasSerialNum = meetingWrappers.size() > 1;\r\n            for (SignupMeetingWrapper smWrapper : meetingWrappers) {\r\n                if (smWrapper.isToDownload()) {\r\n                    createWorksheet(smWrapper, serialNum, hasSerialNum);\r\n                    serialNum++;\r\n                }\r\n            }\r\n        } else if (FULL_DATA_BOTH_VERSION.equals(downloadType)) {\r\n            List<SignupMeetingWrapper> dataWrappers = new ArrayList<SignupMeetingWrapper>();\r\n            for (SignupMeetingWrapper smWrapper : meetingWrappers) {\r\n                if (smWrapper.isToDownload()) {\r\n                    dataWrappers.add(smWrapper);\r\n                }\r\n            }\r\n            int serialNum = 1;\r\n            boolean hasSerialNum = meetingWrappers.size() > 1;\r\n            if (dataWrappers.size() > 1) {\r\n                createAttendeeDataWorksheet(dataWrappers);\r\n                createShortVersonWorksheet(meetingWrappers);\r\n                for (SignupMeetingWrapper smWrapper : dataWrappers) {\r\n                    createWorksheet(smWrapper, serialNum, hasSerialNum);\r\n                    serialNum++;\r\n                }\r\n                if (isAttendanceOn(dataWrappers)) {\r\n                    createAttendanceDataWorksheet(dataWrappers);\r\n                }\r\n            } else {\r\n                for (SignupMeetingWrapper smWrapper : dataWrappers) {\r\n                    createWorksheet(smWrapper, serialNum, false);\r\n                }\r\n                createAttendeeDataWorksheet(dataWrappers);\r\n                if (isAttendanceOn(dataWrappers)) {\r\n                    createAttendanceDataWorksheet(dataWrappers);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return wb;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getAvailableSiteGroups",
	"Comment": "due to authz bug, we have to share the same createsitesgroups object. it\twill much simple if authz bug is fixed.",
	"Method": "void getAvailableSiteGroups(){\r\n    Utilities.getSignupMeetingsBean().getCreateSitesGroups().resetSiteGroupCheckboxMark();\r\n    currentSite = Utilities.getSignupMeetingsBean().getCreateSitesGroups().getCurrentSite();\r\n    otherSites = Utilities.getSignupMeetingsBean().getCreateSitesGroups().getOtherSites();\r\n}"
}, {
	"Path": "org.sakaiproject.userauditservice.util.UserAuditRegistrationUtil.getBundleLocation",
	"Comment": "get the fully qualified package of where the message bundle is located.",
	"Method": "String getBundleLocation(){\r\n    return bundleLocation;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TranslationController.setAllowedPlaneTypes",
	"Comment": "sets which types of arcore planes this translationcontroller is allowed to translate on.",
	"Method": "void setAllowedPlaneTypes(EnumSet<Plane.Type> allowedPlaneTypes){\r\n    this.allowedPlaneTypes = allowedPlaneTypes;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemBean.getShowMutuallyExclusiveForFinCheckbox",
	"Comment": "for fin, mutually exclusive for multiple answers,for grading?",
	"Method": "boolean getShowMutuallyExclusiveForFinCheckbox(){\r\n    return showMutuallyExclusiveForFinCheckbox;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupUIBaseBean.getIframeId",
	"Comment": "this is a getter method which provide current iframe id for refresh\tiframe purpose.",
	"Method": "String getIframeId(){\r\n    HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\r\n    String iFrameId = (String) request.getAttribute(\"sakai.tool.placement.id\");\r\n    return iFrameId;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.ItemContentsBean.setMaxPoints",
	"Comment": "string representation of the max points available for this question.",
	"Method": "void setMaxPoints(double maxPoints){\r\n    this.maxPoints = maxPoints;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.SkinnableCharonPortal.toolHeaderProperties",
	"Comment": "as it includes these values when it is running in its own frame",
	"Method": "Properties toolHeaderProperties(HttpServletRequest req,String skin,Site site,Placement placement){\r\n    Properties retval = new Properties();\r\n    boolean isInlineReq = ToolUtils.isInlineRequest(req);\r\n    String headCss = CSSUtils.getCssHead(skin, isInlineReq);\r\n    Editor editor = portalService.getActiveEditor(placement);\r\n    String preloadScript = editor.getPreloadScript() == null ? \"\" : \"<script type=\\\"text/javascript\\\">\" + editor.getPreloadScript() + \"<\/script>\\n\";\r\n    String editorScript = editor.getEditorUrl() == null ? \"\" : \"<script type=\\\"text/javascript\\\" src=\\\"\" + PortalUtils.getCDNPath() + editor.getEditorUrl() + PortalUtils.getCDNQuery() + \"\\\"><\/script>\\n\";\r\n    String launchScript = editor.getLaunchUrl() == null ? \"\" : \"<script type=\\\"text/javascript\\\" src=\\\"\" + PortalUtils.getCDNPath() + editor.getLaunchUrl() + PortalUtils.getCDNQuery() + \"\\\"><\/script>\\n\";\r\n    StringBuilder headJs = new StringBuilder();\r\n    if (site != null && MATHJAX_ENABLED_AT_SYSTEM_LEVEL) {\r\n        if (site != null) {\r\n            String strMathJaxEnabledForSite = site.getProperties().getProperty(Site.PROP_SITE_MATHJAX_ALLOWED);\r\n            if (StringUtils.isNotBlank(strMathJaxEnabledForSite)) {\r\n                if (Boolean.valueOf(strMathJaxEnabledForSite)) {\r\n                    headJs.append(\"<script type=\\\"text/x-mathjax-config\\\">\\nMathJax.Hub.Config({\\ntex2jax: { inlineMath: [['\\\\\\\\(','\\\\\\\\)']] }\\n});\\n<\/script>\\n\");\r\n                    headJs.append(\"<script src=\\\"\").append(MATHJAX_SRC_PATH).append(\"\\\"  language=\\\"JavaScript\\\" type=\\\"text/javascript\\\"><\/script>\\n\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    String contentItemUrl = portalService.getContentItemUrl(site);\r\n    headJs.append(\"<script type=\\\"text/javascript\\\" src=\\\"\");\r\n    headJs.append(PortalUtils.getCDNPath());\r\n    headJs.append(\"/library/js/headscripts.js\");\r\n    headJs.append(PortalUtils.getCDNQuery());\r\n    headJs.append(\"\\\"><\/script>\\n\");\r\n    headJs.append(\"<script type=\\\"text/javascript\\\">var sakai = sakai || {}; sakai.editor = sakai.editor || {}; \" + \"sakai.editor.editors = sakai.editor.editors || {}; \" + \"sakai.editor.editors.ckeditor = sakai.editor.editors.ckeditor || {}; \" + \"sakai.locale = sakai.locale || {};\\n\");\r\n    headJs.append(\"sakai.locale.userCountry = '\" + rloader.getLocale().getCountry() + \"';\\n\");\r\n    headJs.append(\"sakai.locale.userLanguage = '\" + rloader.getLocale().getLanguage() + \"';\\n\");\r\n    headJs.append(\"sakai.locale.userLocale = '\" + rloader.getLocale().toString() + \"';\\n\");\r\n    headJs.append(\"sakai.editor.collectionId = '\" + portalService.getBrowserCollectionId(placement) + \"';\\n\");\r\n    headJs.append(\"sakai.editor.enableResourceSearch = \" + EditorConfiguration.enableResourceSearch() + \";\\n\");\r\n    if (contentItemUrl != null) {\r\n        headJs.append(\"sakai.editor.contentItemUrl = '\" + contentItemUrl + \"';\\n\");\r\n    } else {\r\n        headJs.append(\"sakai.editor.contentItemUrl = false;\\n\");\r\n    }\r\n    headJs.append(\"sakai.editor.siteToolSkin = '\" + CSSUtils.getCssToolSkin(skin) + \"';\\n\");\r\n    headJs.append(\"sakai.editor.sitePrintSkin = '\" + CSSUtils.getCssPrintSkin(skin) + \"';\\n\");\r\n    headJs.append(\"sakai.editor.editors.ckeditor.browser = '\" + EditorConfiguration.getCKEditorFileBrowser() + \"';\\n\");\r\n    headJs.append(\"<\/script>\\n\");\r\n    headJs.append(preloadScript);\r\n    headJs.append(editorScript);\r\n    headJs.append(launchScript);\r\n    Session s = SessionManager.getCurrentSession();\r\n    String userWarning = (String) s.getAttribute(\"userWarning\");\r\n    if (StringUtils.isNotEmpty(userWarning)) {\r\n        headJs.append(\"<script type=\\\"text/javascript\\\">\");\r\n        headJs.append(\"if ( window.self !== window.top ) {\");\r\n        headJs.append(\" setTimeout(function(){ window.top.portal_check_pnotify() }, 3000);\");\r\n        headJs.append(\"}<\/script>\");\r\n    }\r\n    String head = headCss + headJs.toString();\r\n    retval.setProperty(\"sakai.html.head\", head);\r\n    retval.setProperty(\"sakai.html.head.css\", headCss);\r\n    retval.setProperty(\"sakai.html.head.lang\", rloader.getLocale().getLanguage());\r\n    retval.setProperty(\"sakai.html.head.css.base\", CSSUtils.getCssToolBaseLink(skin, isInlineReq));\r\n    retval.setProperty(\"sakai.html.head.css.skin\", CSSUtils.getCssToolSkinLink(skin, isInlineReq));\r\n    retval.setProperty(\"sakai.html.head.js\", headJs.toString());\r\n    return retval;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.solarsystem.DemoUtils.checkIsSupportedDeviceOrFinish",
	"Comment": "returns false and displays an error message if sceneform can not run, true if sceneform can runon this device.sceneform requires android n on the device as well as opengl 3.0 capabilities.finishes the activity if sceneform can not run",
	"Method": "boolean checkIsSupportedDeviceOrFinish(Activity activity){\r\n    if (Build.VERSION.SDK_INT < VERSION_CODES.N) {\r\n        Log.e(TAG, \"Sceneform requires Android N or later\");\r\n        Toast.makeText(activity, \"Sceneform requires Android N or later\", Toast.LENGTH_LONG).show();\r\n        activity.finish();\r\n        return false;\r\n    }\r\n    String openGlVersionString = ((ActivityManager) activity.getSystemService(Context.ACTIVITY_SERVICE)).getDeviceConfigurationInfo().getGlEsVersion();\r\n    if (Double.parseDouble(openGlVersionString) < MIN_OPENGL_VERSION) {\r\n        Log.e(TAG, \"Sceneform requires OpenGL ES 3.0 later\");\r\n        Toast.makeText(activity, \"Sceneform requires OpenGL ES 3.0 or later\", Toast.LENGTH_LONG).show();\r\n        activity.finish();\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doMergeArchiveIntoNewSite",
	"Comment": "handles merging an uploaded archive into the newly created site\tthis is done after the site has been created in the site creation workflow",
	"Method": "void doMergeArchiveIntoNewSite(String siteId,SessionState state){\r\n    String currentUserId = userDirectoryService.getCurrentUser().getId();\r\n    try {\r\n        String archivePath = (String) state.getAttribute(STATE_UPLOADED_ARCHIVE_PATH);\r\n        archiveService.mergeFromZip(archivePath, siteId, currentUserId);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        addAlert(state, rb.getString(\"archive.createsite.failedmerge\"));\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.components.SakaiNavigationToolBar.newPagingNavigator",
	"Comment": "factory method used to create the paging navigator that will be used by the datatable",
	"Method": "SakaiPagingNavigator newPagingNavigator(String navigatorId,DataTable table){\r\n    return new SakaiPagingNavigator(navigatorId, table);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.assessment.AssessmentService.escapeResourceName",
	"Comment": "return a string based on id that is valid according to resource name validity rules.",
	"Method": "String escapeResourceName(String id){\r\n    if (id == null)\r\n        return \"\";\r\n    id = id.trim();\r\n    try {\r\n        StringBuilder buf = new StringBuilder();\r\n        for (int i = 0; i < id.length(); i++) {\r\n            char c = id.charAt(i);\r\n            if (MAP_TO_A.indexOf(c) >= 0) {\r\n                buf.append('a');\r\n            } else if (MAP_TO_E.indexOf(c) >= 0) {\r\n                buf.append('e');\r\n            } else if (MAP_TO_I.indexOf(c) >= 0) {\r\n                buf.append('i');\r\n            } else if (MAP_TO_O.indexOf(c) >= 0) {\r\n                buf.append('o');\r\n            } else if (MAP_TO_U.indexOf(c) >= 0) {\r\n                buf.append('u');\r\n            } else if (MAP_TO_Y.indexOf(c) >= 0) {\r\n                buf.append('y');\r\n            } else if (MAP_TO_N.indexOf(c) >= 0) {\r\n                buf.append('n');\r\n            } else if (MAP_TO_B.indexOf(c) >= 0) {\r\n                buf.append('b');\r\n            } else if (MAP_TO_C.indexOf(c) >= 0) {\r\n                buf.append('c');\r\n            } else if (MAP_TO_L.indexOf(c) >= 0) {\r\n                buf.append('l');\r\n            } else if (MAP_TO_X.indexOf(c) >= 0) {\r\n                buf.append('x');\r\n            } else if (c < '\\040') {\r\n                buf.append('_');\r\n            } else if (INVALID_CHARS_IN_RESOURCE_ID.indexOf(c) >= 0 || ESCAPE_CHARS_IN_RESOURCE_ID.indexOf(c) >= 0) {\r\n                buf.append('_');\r\n            } else {\r\n                buf.append(c);\r\n            }\r\n        }\r\n        String rv = buf.toString();\r\n        return rv;\r\n    } catch (Exception e) {\r\n        log.warn(\"escapeResourceName: \", e);\r\n        return id;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingsBean.processSelectedCategory",
	"Comment": "this is a valuechange listener to watch the category filter selection by user.",
	"Method": "String processSelectedCategory(ValueChangeEvent vce){\r\n    String selectedCategory = (String) vce.getNewValue();\r\n    if (!categoryFilter.equals(selectedCategory)) {\r\n        setCategoryFilter(selectedCategory);\r\n        setSignupMeetings(null);\r\n    }\r\n    return \"\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.evaluation.TotalScoresBean.setAnsweredItems",
	"Comment": "this stores a map of which items actually have answers.used by questionscores.",
	"Method": "void setAnsweredItems(Map newItems){\r\n    answeredItems = newItems;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupEvent.setSignupMainEventAttachItems",
	"Comment": "this is a setter. it only holds the attachments,\t which belongs to the entire event, not to individual \t time slot or participant",
	"Method": "void setSignupMainEventAttachItems(List<SignupAttachment> signupMainEventAttachItems){\r\n    this.signupMainEventAttachItems = signupMainEventAttachItems;\r\n}"
}, {
	"Path": "org.sakaiproject.rubrics.security.CustomMethodSecurityExpressionRoot.verifyResourceSpecificReadRules",
	"Comment": "applies resource type specific read access rules, after the broader context checks have occurred.",
	"Method": "boolean verifyResourceSpecificReadRules(T resource){\r\n    boolean result = false;\r\n    if (Rubric.class.isInstance(resource) || Criterion.class.isInstance(resource) || Rating.class.isInstance(resource)) {\r\n        result = true;\r\n    } else if (Evaluation.class.isInstance(resource)) {\r\n        if (authenticatedRequestContext.isEvaluator()) {\r\n            result = true;\r\n        } else if (authenticatedRequestContext.isEvalueeOnly()) {\r\n            result = authenticatedRequestContext.getUserId().equalsIgnoreCase(((Evaluation) resource).getEvaluatedItemOwnerId());\r\n        }\r\n    } else if (ToolItemRubricAssociation.class.isInstance(resource)) {\r\n        result = true;\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.PortalNeochatEnabler.addSettingsToEditToolsConfirmationContext",
	"Comment": "add portalneochat settings to the context for the edit tools confirmation page",
	"Method": "boolean addSettingsToEditToolsConfirmationContext(Context context,Site site,SessionState state){\r\n    if (site == null || context == null || state == null) {\r\n        return false;\r\n    }\r\n    final Boolean isEnabled = (Boolean) state.getAttribute(STATE_KEY);\r\n    if (isEnabled != null && isEnabled) {\r\n        context.put(CONTEXT_ENABLED_KEY, Boolean.TRUE);\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.AuthoringXml.update",
	"Comment": "perform update on this objectbased on method originally in xmlstringbuffer",
	"Method": "Document update(Document document,String xpath,Element element,Document update,Document document,String xpath,String value){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"update(String \" + xpath + \", String \" + value + \")\");\r\n    }\r\n    try {\r\n        Element newElement = null;\r\n        Attr newAttribute = null;\r\n        List newElementList = this.selectNodes(document, xpath);\r\n        int aIndex = xpath.indexOf(\"@\");\r\n        int size = newElementList.size();\r\n        if (size > 1) {\r\n            log.warn(\"UPDATING MORE THAN ONE ELEMENT\");\r\n        }\r\n        if ((aIndex == -1) && (size != 0)) {\r\n            for (int i = 0; i < size; i++) {\r\n                newElement = (Element) newElementList.get(i);\r\n                Node childNode = newElement.getFirstChild();\r\n                if (childNode == null) {\r\n                    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n                    DocumentBuilder db = dbf.newDocumentBuilder();\r\n                    Document core = db.newDocument();\r\n                    Text newElementText = core.createTextNode(newElement.getNodeName());\r\n                    newElementText.setNodeValue(value);\r\n                    Text clonedText = (Text) newElement.getOwnerDocument().importNode(newElementText, true);\r\n                    newElement.appendChild(clonedText);\r\n                } else {\r\n                    CharacterData newElementText = (CharacterData) newElement.getFirstChild();\r\n                    newElementText.setNodeValue(value);\r\n                }\r\n            }\r\n        }\r\n        if ((aIndex != -1) && (size != 0)) {\r\n            newAttribute = (Attr) newElementList.set(0, null);\r\n            if (newAttribute != null) {\r\n                newAttribute.setValue(value);\r\n            }\r\n        }\r\n    } catch (Exception ex) {\r\n        log.error(ex.getMessage(), ex);\r\n    }\r\n    return document;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.model.SignupMeeting.getMaxNumOfSlots",
	"Comment": "get how many slots allowed for one user to sign in in this meeting",
	"Method": "Integer getMaxNumOfSlots(){\r\n    if (maxNumOfSlots == null) {\r\n        maxNumOfSlots = new Integer(1);\r\n    }\r\n    return maxNumOfSlots;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ViewBean.getPublicViewUrl",
	"Comment": "returns a string representation of an url to perma view the current page",
	"Method": "String getPublicViewUrl(String getPublicViewUrl,boolean withBreadcrumbs){\r\n    return getPageUrl(pageName, WikiPageAction.PUBLICVIEW_ACTION.getName(), withBreadcrumbs);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.assessment.PublishedAssessmentServiceImpl.getBasicInfoOfAllPublishedAssessments",
	"Comment": "get list of all active published assessments with basic info populated.",
	"Method": "List getBasicInfoOfAllPublishedAssessments(String agentId,String orderBy,boolean ascending,String siteId){\r\n    try {\r\n        PublishedAssessmentService service = new PublishedAssessmentService();\r\n        return service.getBasicInfoOfAllPublishedAssessments(agentId, orderBy, ascending, siteId);\r\n    } catch (Exception ex) {\r\n        throw new AssessmentServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentFacadeQueries.moveAllItems",
	"Comment": "this method move a set of questions form one section to another",
	"Method": "void moveAllItems(Long sourceSectionId,Long destSectionId){\r\n    SectionData destSection = loadSection(destSectionId);\r\n    List list = loadAllItems(sourceSectionId);\r\n    Set set = destSection.getItemSet();\r\n    if (set == null) {\r\n        set = new HashSet();\r\n    }\r\n    int itemNum = set.size();\r\n    for (int i = 0; i < list.size(); i++) {\r\n        ItemDataIfc a = (ItemDataIfc) list.get(i);\r\n        a.setSection(destSection);\r\n        a.setSequence(Integer.valueOf(++itemNum));\r\n        set.add(a);\r\n    }\r\n    destSection.setItemSet(set);\r\n    int retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n    while (retryCount > 0) {\r\n        try {\r\n            getHibernateTemplate().update(destSection);\r\n            retryCount = 0;\r\n        } catch (Exception e) {\r\n            log.warn(\"problem updating section: \" + e.getMessage());\r\n            retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.vm.ComponentServlet.sendParentRedirect",
	"Comment": "send a redirect so our parent ends up at the url, via javascript.",
	"Method": "void sendParentRedirect(HttpServletResponse resp,String url){\r\n    try {\r\n        resp.setContentType(\"text/html; charset=UTF-8\");\r\n        PrintWriter out = resp.getWriter();\r\n        out.println(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\");\r\n        out.println(\"<html><head><\/head><body>\");\r\n        out.println(\"<script type=\\\"text/javascript\\\" language=\\\"JavaScript\\\">\");\r\n        out.println(\"if (parent)\\n\" + \"{\\n\\tparent.location.replace('\" + url + \"');\\n}\\n\");\r\n        out.println(\"else\\n\" + \"{\\n\\tlocation.replace('\" + url + \"');\\n}\\n\");\r\n        out.println(\"<\/script>\");\r\n        out.println(\"<\/body><\/html>\");\r\n        resp.flushBuffer();\r\n    } catch (IOException e) {\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.rubrics.logic.RubricsServiceImpl.getRubricAssociationResource",
	"Comment": "returns the toolitemrubricassociation resource for the given tool and associated item id, wrapped as an optional.",
	"Method": "Optional<Resource<ToolItemRubricAssociation>> getRubricAssociationResource(String toolId,String associatedToolItemId,String siteId){\r\n    TypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>> resourceParameterizedTypeReference = new TypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>>() {\r\n    };\r\n    URI apiBaseUrl = new URI(serverConfigurationService.getServerUrl() + RBCS_SERVICE_URL_PREFIX);\r\n    Traverson traverson = new Traverson(apiBaseUrl, MediaTypes.HAL_JSON);\r\n    Traverson.TraversalBuilder builder = traverson.follow(\"rubric-associations\", \"search\", \"by-tool-item-ids\");\r\n    HttpHeaders headers = new HttpHeaders();\r\n    if (siteId != null) {\r\n        headers.add(\"Authorization\", String.format(\"Bearer %s\", generateJsonWebToken(toolId, siteId)));\r\n    } else {\r\n        headers.add(\"Authorization\", String.format(\"Bearer %s\", generateJsonWebToken(toolId)));\r\n    }\r\n    builder.withHeaders(headers);\r\n    Map<String, Object> parameters = new HashMap();\r\n    parameters.put(\"toolId\", toolId);\r\n    parameters.put(\"itemId\", associatedToolItemId);\r\n    Resources<Resource<ToolItemRubricAssociation>> associationResources = builder.withTemplateParameters(parameters).toObject(resourceParameterizedTypeReference);\r\n    if (associationResources.getContent().size() > 1) {\r\n        throw new IllegalStateException(String.format(\"Number of rubric association resources greater than one for request: %s\", associationResources.getLink(Link.REL_SELF).toString()));\r\n    }\r\n    Optional<Resource<ToolItemRubricAssociation>> associationResource = associationResources.getContent().stream().findFirst();\r\n    return associationResource;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.KeywordsFormat.update",
	"Comment": "update the given text made of rcs keywords with the appropriaterevision info.",
	"Method": "String update(String text,Object[] revisionInfo){\r\n    String data = text;\r\n    data = substitute(data, ID_RE, Id_FORMAT.format(revisionInfo));\r\n    data = substitute(data, HEADER_RE, Header_FORMAT.format(revisionInfo));\r\n    data = substitute(data, SOURCE_RE, Source_FORMAT.format(revisionInfo));\r\n    data = substitute(data, RCSFILE_RE, RCSFile_FORMAT.format(revisionInfo));\r\n    data = substitute(data, REVISION_RE, Revision_FORMAT.format(revisionInfo));\r\n    data = substitute(data, DATE_RE, Date_FORMAT.format(revisionInfo));\r\n    data = substitute(data, AUTHOR_RE, Author_FORMAT.format(revisionInfo));\r\n    data = substitute(data, STATE_RE, State_FORMAT.format(revisionInfo));\r\n    data = substitute(data, LOCKER_RE, Locker_FORMAT.format(revisionInfo));\r\n    return data;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.SectionFacade.getSectionId",
	"Comment": "org.sakaiproject.tool.assessment.ifc.sectiondataifc",
	"Method": "Long getSectionId(){\r\n    try {\r\n        this.data = (SectionDataIfc) section.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getSectionId();\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.GenericDiffBean.init",
	"Comment": "initialise the bean. to be called after the leftcontent and rightcontent\thave been set.",
	"Method": "void init(){\r\n    MyersDiff diffAlgorithm = new MyersDiff();\r\n    try {\r\n        objectifiedLeft = leftContent.split(\"\\n\");\r\n        objectifiedRight = rightContent.split(\"\\n\");\r\n        difference = diffAlgorithm.diff(objectifiedLeft, objectifiedRight);\r\n    } catch (DifferentiationFailedException e) {\r\n        throw new RuntimeException(\"DifferentiationFailedException occured: \" + \"This should never happen!\", e);\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.tools.integration.graph.GraphvizJavaExecutorUtility.generateGraph",
	"Comment": "need a static method to account for imports of pure java graphvizlibrary.",
	"Method": "void generateGraph(Path dotFile,Path outputFile,GraphOutputFormat graphOutputFormat){\r\n    requireNonNull(dotFile, \"No DOT file provided\");\r\n    requireNonNull(outputFile, \"No graph output file provided\");\r\n    requireNonNull(graphOutputFormat, \"No graph output format provided\");\r\n    try {\r\n        String dotSource = IOUtility.readFully(new FileReader(dotFile.toFile()));\r\n        dotSource = dotSource.replaceAll(\"\\\\R\", \" \");\r\n        final List<GraphvizEngine> engines = loadGraphvizEngines();\r\n        Graphviz.useEngine(engines);\r\n        final Format format = map(graphOutputFormat);\r\n        Graphviz.fromString(dotSource).render(format).toFile(outputFile.toFile());\r\n    } catch (final Throwable e) {\r\n        throw new SchemaCrawlerException(\"Cannot generate graph from \" + dotFile, e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.imsent.user.IMSEntUserDirectoryProvider.copyInfo",
	"Comment": "copy the information from our internal structure into the sakai user structure.",
	"Method": "void copyInfo(UserEdit edit,SakaiIMSUser imsUser){\r\n    edit.setId(imsUser.id);\r\n    edit.setFirstName(imsUser.firstName);\r\n    edit.setLastName(imsUser.lastName);\r\n    edit.setEmail(imsUser.eMail);\r\n    edit.setPassword(imsUser.password);\r\n    edit.setType(\"imsent\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.SectionFacade.setLastModifiedBy",
	"Comment": "set the agentid of the person who last modified sectionfacade",
	"Method": "void setLastModifiedBy(String lastModifiedBy){\r\n    this.lastModifiedBy = lastModifiedBy;\r\n    this.data.setLastModifiedBy(lastModifiedBy);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Node.newBranchVersion",
	"Comment": "returns the version number that should correspond to a newlycreated branch of this node.",
	"Method": "Version newBranchVersion(){\r\n    Version result = new Version(this.version);\r\n    if (branches == null || branches.size() <= 0) {\r\n        result.__addBranch(1);\r\n    } else {\r\n        result.__addBranch(((Integer) branches.lastKey()).intValue());\r\n    }\r\n    result.__addBranch(1);\r\n    return result;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.SectionFacade.getLastModifiedBy",
	"Comment": "get the agentid of the person who last modified sectionfacade",
	"Method": "String getLastModifiedBy(){\r\n    try {\r\n        this.data = (SectionDataIfc) section.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getLastModifiedBy();\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.menu.MenuImpl.getShowdisabled",
	"Comment": "access whether disabled items in this menu should be shown.",
	"Method": "boolean getShowdisabled(){\r\n    return m_showDisabled;\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.servlets.ResolverServlet.init",
	"Comment": "get tinyurlservice bean from the spring componentmanager",
	"Method": "void init(ServletConfig config){\r\n    super.init(config);\r\n    ComponentManager manager = org.sakaiproject.component.cover.ComponentManager.getInstance();\r\n    service = (ShortenedUrlService) manager.get(ShortenedUrlService.class);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TransformationSystem.onTouch",
	"Comment": "dispatches touch events to the gesture recognizers contained by this transformation system.",
	"Method": "void onTouch(HitTestResult hitTestResult,MotionEvent motionEvent){\r\n    for (int i = 0; i < recognizers.size(); i++) {\r\n        recognizers.get(i).onTouch(hitTestResult, motionEvent);\r\n    }\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ViewBean.getInfoUrl",
	"Comment": "returns a string representation of an url to view information about the\tpassed in page",
	"Method": "String getInfoUrl(String getInfoUrl,String name){\r\n    return getPageUrl(NameHelper.globaliseName(name, localSpace), WikiPageAction.INFO_ACTION.getName());\r\n}"
}, {
	"Path": "org.sakaiproject.vm.VelocityServlet.handleRequest",
	"Comment": "main routine to handle a request. called by velocityservlet, your responsibility as programmer is to simply return a valid template",
	"Method": "Template handleRequest(HttpServletRequest request,HttpServletResponse response,Context ctx){\r\n    Enumeration e = request.getAttributeNames();\r\n    while (e.hasMoreElements()) {\r\n        String name = (String) e.nextElement();\r\n        String vName = escapeVmName(name);\r\n        Object value = request.getAttribute(name);\r\n        ctx.put(vName, value);\r\n    }\r\n    String templatePath = (String) request.getAttribute(\"javax.servlet.include.servlet_path\");\r\n    if (templatePath == null) {\r\n        templatePath = (String) request.getAttribute(\"sakai.vm.path\");\r\n    }\r\n    if (templatePath == null) {\r\n        templatePath = request.getServletPath();\r\n    }\r\n    Template template = null;\r\n    try {\r\n        template = getTemplate(templatePath);\r\n    } catch (ParseErrorException ex) {\r\n        log(\"Exception reading vm template: \" + templatePath + \" \" + ex);\r\n    } catch (ResourceNotFoundException ex) {\r\n        log(\"Exception reading vm template: \" + templatePath + \" \" + ex);\r\n    } catch (Exception ex) {\r\n        log(\"Exception reading vm template: \" + templatePath + \" \" + ex);\r\n    }\r\n    return template;\r\n}"
}, {
	"Path": "au.edu.anu.portal.portlets.rss.SimpleRSSPortlet.getPortletModeUrl",
	"Comment": "helper to get the url to take us to a portlet mode.\tthis will end up in dodispatch.",
	"Method": "String getPortletModeUrl(RenderResponse response,PortletMode mode){\r\n    PortletURL url = response.createRenderURL();\r\n    try {\r\n        url.setPortletMode(mode);\r\n    } catch (PortletModeException e) {\r\n        log.error(\"Invalid portlet mode: \" + mode);\r\n        return null;\r\n    }\r\n    return url.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.portal.util.PortalBean.getLatestJQuery",
	"Comment": "returns the text to intelligently include the latest version of jquery",
	"Method": "String getLatestJQuery(){\r\n    return PortalUtils.includeLatestJQuery(caller);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.grading.GradingServiceImpl.getAllSubmissions",
	"Comment": "get all submissions for a published assessment from the back end.",
	"Method": "List getAllSubmissions(String publishedId){\r\n    try {\r\n        GradingService service = new GradingService();\r\n        return service.getAllSubmissions(publishedId);\r\n    } catch (Exception ex) {\r\n        throw new GradingServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupMeetingServiceImpl.hasMeetingWithMultipleCalendarBlocks",
	"Comment": "scan for existing meetings to see whether it has multiple calendar blocks",
	"Method": "boolean hasMeetingWithMultipleCalendarBlocks(SignupMeeting meeting){\r\n    if (!CUSTOM_TIMESLOTS.equals(meeting.getMeetingType())) {\r\n        return false;\r\n    }\r\n    boolean hasMultipleBlocks = false;\r\n    List<SignupSite> sites = meeting.getSignupSites();\r\n    if (sites == null || sites.isEmpty())\r\n        return false;\r\n    for (SignupSite site : sites) {\r\n        String eventId = null;\r\n        if (site.isSiteScope()) {\r\n            eventId = site.getCalendarEventId();\r\n            if (eventId != null && eventId.contains(\"|\")) {\r\n                return true;\r\n            }\r\n        } else {\r\n            List<SignupGroup> signupGroups = site.getSignupGroups();\r\n            for (SignupGroup group : signupGroups) {\r\n                eventId = group.getCalendarEventId();\r\n                if (eventId != null && eventId.contains(\"|\")) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return hasMultipleBlocks;\r\n}"
}, {
	"Path": "org.sakaiproject.sitemanage.impl.SiteManageServiceImpl.transferCopyEntities",
	"Comment": "transfer a copy of all entites from another context for any entityproducer that claims this tool id.",
	"Method": "Map<String, String> transferCopyEntities(String toolId,String fromContext,String toContext,boolean cleanup){\r\n    Map<String, String> transversalMap = new HashMap();\r\n    for (EntityProducer ep : entityManager.getEntityProducers()) {\r\n        if (ep instanceof EntityTransferrer) {\r\n            try {\r\n                EntityTransferrer et = (EntityTransferrer) ep;\r\n                if (ArrayUtil.contains(et.myToolIds(), toolId)) {\r\n                    transactionTemplate.execute(new TransactionCallbackWithoutResult() {\r\n                        @Override\r\n                        protected void doInTransactionWithoutResult(TransactionStatus status) {\r\n                            if (ep instanceof EntityTransferrerRefMigrator) {\r\n                                EntityTransferrerRefMigrator etrm = (EntityTransferrerRefMigrator) ep;\r\n                                Map<String, String> entityMap = etrm.transferCopyEntitiesRefMigrator(fromContext, toContext, new ArrayList(), cleanup);\r\n                                if (entityMap != null) {\r\n                                    transversalMap.putAll(entityMap);\r\n                                }\r\n                            } else {\r\n                                et.transferCopyEntities(fromContext, toContext, new ArrayList());\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            } catch (Exception e) {\r\n                log.error(\"Error encountered while asking EntityTransfer to transferCopyEntities from: {} to: {}, {}\", fromContext, toContext, e.getMessage());\r\n            }\r\n        }\r\n    }\r\n    return transversalMap;\r\n}"
}, {
	"Path": "org.sakaiproject.sitemanage.impl.SiteManageServiceImpl.transferCopyEntities",
	"Comment": "transfer a copy of all entites from another context for any entityproducer that claims this tool id.",
	"Method": "Map<String, String> transferCopyEntities(String toolId,String fromContext,String toContext,boolean cleanup){\r\n    if (ep instanceof EntityTransferrerRefMigrator) {\r\n        EntityTransferrerRefMigrator etrm = (EntityTransferrerRefMigrator) ep;\r\n        Map<String, String> entityMap = etrm.transferCopyEntitiesRefMigrator(fromContext, toContext, new ArrayList(), cleanup);\r\n        if (entityMap != null) {\r\n            transversalMap.putAll(entityMap);\r\n        }\r\n    } else {\r\n        et.transferCopyEntities(fromContext, toContext, new ArrayList());\r\n    }\r\n}"
}, {
	"Path": "edu.amc.sakai.user.MultipleEmailLdapAttributeMapper.setSearchableEmailAttributes",
	"Comment": "assign the list of logical attribute names to search when\tlocating a user entry by email address. if null,\twill have the effect of clearing the current attribute list.\tnote that this configuration option has no bearing on the\temail address which will be mapped to useredit.email",
	"Method": "void setSearchableEmailAttributes(List<String> searchableEmailAttributes){\r\n    if (searchableEmailAttributes == null) {\r\n        this.searchableEmailAttributes.clear();\r\n    } else {\r\n        this.searchableEmailAttributes = searchableEmailAttributes;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UserPrefsTool.stringArrayToMap",
	"Comment": "convenience method to take a string array and put it in a map\tthe key is the value in the array and the data in the map is the position in the array",
	"Method": "Map<String, Integer> stringArrayToMap(String[] array){\r\n    Map<String, Integer> retMap = new HashMap<String, Integer>();\r\n    Integer index = 0;\r\n    if (array != null) {\r\n        for (String key : array) {\r\n            retMap.put(key, index);\r\n            index++;\r\n        }\r\n    }\r\n    return retMap;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.author.CalculatedQuestionExtractListener.validateExtractedNames",
	"Comment": "validateextractednames looks through all of the variable and formula names definedin the instructions and determines if the names are valid, and if the formula andvariable names overlap.",
	"Method": "List<String> validateExtractedNames(List<String> variableNames,List<String> formulaNames){\r\n    List<String> errors = new ArrayList<String>();\r\n    for (String formula : formulaNames) {\r\n        if (formula == null || formula.length() == 0) {\r\n            errors.add(getErrorMessage(\"formula_name_empty\"));\r\n        } else {\r\n            if (!formula.matches(\"[a-zA-Z]\\\\w*\")) {\r\n                errors.add(getErrorMessage(\"formula_name_invalid\"));\r\n            }\r\n        }\r\n    }\r\n    for (String variable : variableNames) {\r\n        if (variable == null || variable.length() == 0) {\r\n            errors.add(getErrorMessage(\"variable_name_empty\"));\r\n        } else {\r\n            if (!variable.matches(\"[a-zA-Z]\\\\w*\")) {\r\n                errors.add(getErrorMessage(\"variable_name_invalid\"));\r\n            }\r\n        }\r\n    }\r\n    if (!Collections.disjoint(formulaNames, variableNames)) {\r\n        errors.add(getErrorMessage(\"unique_names\"));\r\n    }\r\n    return errors;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemConfigBean.isSelectFromQuestionPool",
	"Comment": "can we select items from a question pool?if we are in question pools we cannot select items from pool.if we are not in question pools we can select items from pool.",
	"Method": "boolean isSelectFromQuestionPool(){\r\n    return selectFromQuestionPool;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.ReviewHelperBean.init",
	"Comment": "initialize the bean by setting the interested revision from the request\tand creating the mock.",
	"Method": "void init(){\r\n    if (request != null) {\r\n        interestedRevision = Integer.parseInt(request.getParameter(HistoryBean.REVISION_PARAM));\r\n    }\r\n    if (interestedRevision == rwikiObject.getRevision().intValue()) {\r\n        mock = rwikiObject;\r\n    } else {\r\n        mock = rwikiObjectService.getRWikiHistoryObject(rwikiObject, interestedRevision);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.BeginDeliveryActionListener.populateFeedbackComponent",
	"Comment": "this grabs the assessment feedback & puts it in the feedbackcomponent",
	"Method": "FeedbackComponent populateFeedbackComponent(PublishedAssessmentFacade pubAssessment){\r\n    FeedbackComponent component = new FeedbackComponent();\r\n    AssessmentFeedbackIfc info = pubAssessment.getAssessmentFeedback();\r\n    if (info != null) {\r\n        component.setAssessmentFeedback(info);\r\n    }\r\n    return component;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.JoinableSiteSettings.putCurrentUserInContextForSiteBrowser",
	"Comment": "put the current user object into the context for the site browser",
	"Method": "boolean putCurrentUserInContextForSiteBrowser(Context context){\r\n    User currentUser = userDirectoryService.getCurrentUser();\r\n    if (context == null || currentUser == null) {\r\n        return false;\r\n    }\r\n    context.put(CONTEXT_JOIN_SITE_CURRENT_USER, currentUser);\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.ControllerServlet2.isPageToolDefault",
	"Comment": "check to see if the reques represents the tool default page. this is not\tthe same as the view home. it is the same as first entry into a tool or\twhen the page is refreshed",
	"Method": "boolean isPageToolDefault(HttpServletRequest request){\r\n    if (TITLE_PANEL.equals(request.getParameter(PANEL)))\r\n        return false;\r\n    String pathInfo = request.getPathInfo();\r\n    String queryString = request.getQueryString();\r\n    String method = request.getMethod();\r\n    return (\"GET\".equalsIgnoreCase(method) && (pathInfo == null || request.getPathInfo().length() == 0) && (queryString == null || queryString.length() == 0));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getPageContents",
	"Comment": "gets a contents bean for the current page.really, just a wrapper utility to delegate to whichevermethod handles the format being used.",
	"Method": "ContentsDeliveryBean getPageContents(PublishedAssessmentFacade publishedAssessment,DeliveryBean delivery,Map itemGradingHash,Map publishedAnswerHash){\r\n    if (delivery.getSettings().isFormatByAssessment()) {\r\n        return getPageContentsByAssessment(publishedAssessment, itemGradingHash, delivery, publishedAnswerHash);\r\n    }\r\n    int itemIndex = delivery.getQuestionIndex();\r\n    int sectionIndex = delivery.getPartIndex();\r\n    if (delivery.getSettings().isFormatByPart()) {\r\n        return getPageContentsByPart(publishedAssessment, itemIndex, sectionIndex, itemGradingHash, delivery, publishedAnswerHash);\r\n    } else if (delivery.getSettings().isFormatByQuestion()) {\r\n        return getPageContentsByQuestion(publishedAssessment, itemIndex, sectionIndex, itemGradingHash, delivery, publishedAnswerHash);\r\n    }\r\n    log.warn(\"delivery.getSettings().isFormatBy... is NOT set!\");\r\n    return getPageContentsByAssessment(publishedAssessment, itemGradingHash, delivery, publishedAnswerHash);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.MembershipAction.doToggle_sort",
	"Comment": "toggle the sort ascending vs descending property in main view",
	"Method": "void doToggle_sort(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    if (state.getAttribute(SORT_ASC) != null) {\r\n        state.setAttribute(SORT_ASC, !((Boolean) state.getAttribute(SORT_ASC)));\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.RandomisedUrlService.generateSecure",
	"Comment": "generate a random of randomisedurlservice.secure length",
	"Method": "String generateSecure(){\r\n    return RandomStringUtils.random(SECURE, true, true);\r\n}"
}, {
	"Path": "edu.amc.sakai.user.EntryAttributeToUserTypeMapper.setLogicalAttributeName",
	"Comment": "assign the key to a physical attribute name which will be used\tto resolve sakai user types.",
	"Method": "void setLogicalAttributeName(String logicalAttributeName){\r\n    this.logicalAttributeName = logicalAttributeName;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.GenericDiffBean.getDifference",
	"Comment": "gets a jrcs revision representing the difference between\tthe left and right content",
	"Method": "Revision getDifference(){\r\n    return difference;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.decorator.SectionDecorator.generateSortableDayString",
	"Comment": "generate a string that contains information on the meeting days for a sectionmeeting, and is sortable.",
	"Method": "String generateSortableDayString(MeetingDecorator meeting){\r\n    StringBuilder sb = new StringBuilder();\r\n    if (meeting.isMonday()) {\r\n        sb.append(\"a\");\r\n    }\r\n    if (meeting.isTuesday()) {\r\n        sb.append(\"b\");\r\n    }\r\n    if (meeting.isWednesday()) {\r\n        sb.append(\"c\");\r\n    }\r\n    if (meeting.isThursday()) {\r\n        sb.append(\"d\");\r\n    }\r\n    if (meeting.isFriday()) {\r\n        sb.append(\"e\");\r\n    }\r\n    if (meeting.isSaturday()) {\r\n        sb.append(\"f\");\r\n    }\r\n    if (meeting.isSunday()) {\r\n        sb.append(\"g\");\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.api.report.ReportParams.setWhatLimitedAction",
	"Comment": "set if is configured for reporting only on a specific resource action.",
	"Method": "void setWhatLimitedAction(boolean whatLimitedAction){\r\n    this.whatLimitedAction = whatLimitedAction;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.copySiteContentForTool",
	"Comment": "copy the content from a site to another site for only the content of the specified tool",
	"Method": "String copySiteContentForTool(String sessionid,String sourcesiteid,String destinationsiteid,String toolid){\r\n    Session session = establishSession(sessionid);\r\n    Set<String> toolsCopied = new HashSet<String>();\r\n    Map transversalMap = new HashMap();\r\n    try {\r\n        Site site = siteService.getSite(sourcesiteid);\r\n        site = siteService.getSite(destinationsiteid);\r\n        if (!securityService.isSuperUser(session.getUserId()) && !securityService.unlock(SiteService.SECURE_UPDATE_SITE, site.getReference())) {\r\n            log.warn(\"WS copySiteContentForTool(): Permission denied. Must be super user to copy a site in which you are not a maintainer.\");\r\n            throw new RuntimeException(\"WS copySiteContentForTool(): Permission denied. Must be super user to copy a site in which you are not a maintainer.\");\r\n        }\r\n        Map<String, String> entityMap;\r\n        if (!toolid.equalsIgnoreCase(\"sakai.resources\")) {\r\n            entityMap = transferCopyEntities(toolid, sourcesiteid, destinationsiteid);\r\n        } else {\r\n            entityMap = transferCopyEntities(toolid, contentHostingService.getSiteCollection(sourcesiteid), contentHostingService.getSiteCollection(destinationsiteid));\r\n        }\r\n        if (entityMap != null) {\r\n            transversalMap.putAll(entityMap);\r\n        }\r\n        updateEntityReferences(toolid, destinationsiteid, transversalMap, site);\r\n    } catch (Exception e) {\r\n        log.error(\"WS copySiteContentForTool(): \" + e.getClass().getName() + \" : \" + e.getMessage(), e);\r\n        return e.getClass().getName() + \" : \" + e.getMessage();\r\n    }\r\n    return \"success\";\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.RWikiServlet.isPageRestorable",
	"Comment": "check to see if the request represents a page that can act as a restor\tpoint.",
	"Method": "boolean isPageRestorable(HttpServletRequest request){\r\n    if (RequestHelper.TITLE_PANEL.equals(request.getParameter(RequestHelper.PANEL)))\r\n        return false;\r\n    if (WikiPageAction.PUBLICVIEW_ACTION.getName().equals(request.getParameter(RequestHelper.ACTION)))\r\n        return false;\r\n    if (\"GET\".equalsIgnoreCase(request.getMethod()))\r\n        return true;\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.OrganizerSignupMBean.synchroniseGroupMembership",
	"Comment": "synchronise the users in a timeslot with the users in a group.\tvt customized to allow the user choose the synchronize direction",
	"Method": "String synchroniseGroupMembership(){\r\n    TimeslotWrapper timeslotWrapper = (TimeslotWrapper) timeslotWrapperTable.getRowData();\r\n    String groupId = timeslotWrapper.getGroupId();\r\n    SignupMeeting meeting = null;\r\n    if (StringUtils.isBlank(groupId)) {\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"error.no_group_for_timeslot\"));\r\n        return ORGANIZER_MEETING_PAGE_URL;\r\n    } else {\r\n        List<String> attendeeUserIds = convertAttendeeWrappersToUuids(timeslotWrapper.getAttendeeWrappers());\r\n        if (timeslottoGroup != null && !timeslottoGroup.trim().isEmpty() && !sakaiFacade.addUsersToGroup(attendeeUserIds, currentSiteId(), groupId, timeslottoGroup)) {\r\n            Utilities.addErrorMessage(Utilities.rb.getString(\"error.group_sync_failed\"));\r\n            return ORGANIZER_MEETING_PAGE_URL;\r\n        }\r\n        List<String> groupMembers = sakaiFacade.getGroupMembers(currentSiteId(), groupId);\r\n        if (timeslottoGroup == null || timeslottoGroup.isEmpty()) {\r\n            List<String> commonmem = new ArrayList<String>(attendeeUserIds);\r\n            commonmem.retainAll(groupMembers);\r\n            groupMembers.removeAll(attendeeUserIds);\r\n            try {\r\n                for (String mem : attendeeUserIds) {\r\n                    if (!commonmem.contains(mem)) {\r\n                        CancelAttendee remove = new CancelAttendee(signupMeetingService, currentUserId(), currentSiteId(), true);\r\n                        SignupAttendee removedAttendee = new SignupAttendee(mem, currentSiteId());\r\n                        meeting = remove.cancelSignup(getMeetingWrapper().getMeeting(), timeslotWrapper.getTimeSlot(), removedAttendee);\r\n                        if (sendEmail) {\r\n                            try {\r\n                                signupMeetingService.sendEmailToParticipantsByOrganizerAction(remove.getSignupEventTrackingInfo());\r\n                            } catch (Exception e) {\r\n                                log.error(Utilities.rb.getString(\"email.exception\") + \" - \" + e.getMessage(), e);\r\n                                Utilities.addErrorMessage(Utilities.rb.getString(\"email.exception\"));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (SignupUserActionException ue) {\r\n                Utilities.addErrorMessage(ue.getMessage());\r\n            } catch (Exception e) {\r\n                log.error(Utilities.rb.getString(\"error.occurred_try_again\") + \" - \" + e.getMessage());\r\n                Utilities.addErrorMessage(Utilities.rb.getString(\"error.occurred_try_again\"));\r\n            }\r\n        } else {\r\n            groupMembers.removeAll(attendeeUserIds);\r\n        }\r\n        return addAttendeesToTimeslot(currentSiteId(), timeslotWrapper, groupMembers);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.sortAcademicSessions",
	"Comment": "helper method for sortcmobject \tby order from sakai properties if specified or \tby default of eid, title\tusing velocity sorttool",
	"Method": "Collection sortAcademicSessions(Collection<AcademicSession> sessions){\r\n    String[] keys = ServerConfigurationService.getStrings(SORT_KEY_SESSION);\r\n    String[] orders = ServerConfigurationService.getStrings(SORT_ORDER_SESSION);\r\n    return sortCmObject(sessions, keys, orders);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemBean.getShowMutuallyExclusiveForFibCheckbox",
	"Comment": "for fib, mutually exclusive for multiple answers,for grading?",
	"Method": "boolean getShowMutuallyExclusiveForFibCheckbox(){\r\n    return showMutuallyExclusiveForFibCheckbox;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.model.SignupMeeting.getMaxNumberOfAttendees",
	"Comment": "get the maximum nubmer of the attendees, which is allowed in one time",
	"Method": "int getMaxNumberOfAttendees(){\r\n    if (signupTimeSlots == null || signupTimeSlots.isEmpty()) {\r\n        return 0;\r\n    }\r\n    return signupTimeSlots.get(0).getMaxNoOfAttendees();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingsBean.getSignupMeetings",
	"Comment": "this is a getter method for ui and filters the list according to what has been set.",
	"Method": "List<SignupMeetingWrapper> getSignupMeetings(){\r\n    try {\r\n        if (signupMeetings == null || isRefresh()) {\r\n            loadMeetings(getViewDateRang(), getCategoryFilter());\r\n            setLastUpdatedTime(new Date().getTime());\r\n        }\r\n    } catch (Exception e) {\r\n        log.error(Utilities.rb.getString(\"failed.fetch_allEvents_from_db\") + \" - \" + e.getMessage());\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"failed.fetch_allEvents_from_db\"));\r\n    }\r\n    return signupMeetings;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.business.entity.helper.AuthoringHelperTest.createImportedAssessment",
	"Comment": "copy of method in authoringhelper with persistence turned off.import an xml document in qti format, extract and persist the data.",
	"Method": "AssessmentFacade createImportedAssessment(Document document){\r\n    // log.debug(\r\n    log.info(document == null ? \"DOCUMENT IS NULL IN createPublishedAssessment(  Document)\" : \"createPublishedAssessment(Document)\");\r\n    AssessmentFacade assessment = new AssessmentFacade();\r\n    try {\r\n        ExtractionHelper exHelper = new ExtractionHelper(QTIVersion.VERSION_1_2);\r\n        exHelper.setOverridePath(xslPath);\r\n        String me = \"admin\";\r\n        Assessment assessmentXml = new Assessment(document);\r\n        Map assessmentMap = exHelper.mapAssessment(assessmentXml);\r\n        assessment = new AssessmentFacade();\r\n        exHelper.updateAssessment(assessment, assessmentMap);\r\n        assessment.setCreatedBy(me);\r\n        assessment.setCreatedDate(assessment.getCreatedDate());\r\n        assessment.setLastModifiedBy(me);\r\n        assessment.setLastModifiedDate(assessment.getCreatedDate());\r\n        assessment.setTypeId(TypeIfc.QUIZ);\r\n        assessment.setStatus(Integer.valueOf(1));\r\n        List sectionList = exHelper.getSectionXmlList(assessmentXml);\r\n        log.debug(\"sections=\" + sectionList.size());\r\n        for (int sec = 0; sec < sectionList.size(); sec++) {\r\n            Section sectionXml = (Section) sectionList.get(sec);\r\n            Map sectionMap = exHelper.mapSection(sectionXml);\r\n            log.debug(\"SECTION MAP=\" + sectionMap);\r\n            SectionFacade section = new SectionFacade();\r\n            exHelper.updateSection(section, sectionMap);\r\n            log.debug(\"section \" + section.getTitle() + \"created by '\" + me + \"'.\");\r\n            section.setCreatedBy(me);\r\n            section.setCreatedDate(assessment.getCreatedDate());\r\n            section.setLastModifiedBy(me);\r\n            section.setLastModifiedDate(assessment.getCreatedDate());\r\n            section.setTypeId(TypeIfc.DEFAULT_SECTION);\r\n            section.setStatus(Integer.valueOf(1));\r\n            section.setSequence(Integer.valueOf(sec + 1));\r\n            List itemList = exHelper.getItemXmlList(sectionXml);\r\n            for (int itm = 0; itm < itemList.size(); itm++) {\r\n                log.debug(\"items=\" + itemList.size());\r\n                Item itemXml = (Item) itemList.get(itm);\r\n                Map itemMap = exHelper.mapItem(itemXml);\r\n                log.debug(\"ITEM MAP=\" + itemMap);\r\n                ItemFacade item = new ItemFacade();\r\n                exHelper.updateItem(item, itemXml, itemMap);\r\n                item.setCreatedBy(me);\r\n                item.setCreatedDate(assessment.getCreatedDate());\r\n                item.setLastModifiedBy(me);\r\n                item.setLastModifiedDate(assessment.getCreatedDate());\r\n                log.debug(\"ITEM TYPE IS: \" + item.getTypeId());\r\n                item.setStatus(ItemDataIfc.ACTIVE_STATUS);\r\n                item.setSequence(Integer.valueOf(itm + 1));\r\n                item.setSection(section);\r\n                section.addItem(item);\r\n                log.debug(\"ITEM:  ans key\" + item.getAnswerKey());\r\n                log.debug(\"ITEM:  correct feed\" + item.getCorrectItemFeedback());\r\n                log.debug(\"ITEM:  incorrect feed \" + item.getInCorrectItemFeedback());\r\n                log.debug(\"ITEM:  by \" + item.getCreatedBy());\r\n                log.debug(\"ITEM:  date\" + item.getCreatedDate());\r\n                log.debug(\"ITEM:  desc \" + item.getDescription());\r\n                log.debug(\"ITEM:  duration\" + item.getDuration());\r\n                log.debug(\"ITEM:  general feed \" + item.getGeneralItemFeedback());\r\n                log.debug(\"ITEM:  incorrect \" + item.getInCorrectItemFeedback());\r\n                log.debug(\"ITEM:  is true \" + item.getIsTrue());\r\n                log.debug(\"ITEM DEBUG item text\" + item.getText());\r\n                log.debug(\"ITEM:  item text\" + item.getText());\r\n            }\r\n        }\r\n        log.debug(\"assessment created by '\" + assessment.getCreatedBy() + \"'.\");\r\n        log.debug(\"ASSESSMENT:  meta \" + assessment.getAssessmentMetaDataMap());\r\n        log.debug(\"ASSESSMENT:  feed \" + assessment.getAssessmentFeedback());\r\n        log.debug(\"ASSESSMENT:  comments  \" + assessment.getComments());\r\n        log.debug(\"ASSESSMENT:  by \" + assessment.getCreatedBy());\r\n        log.debug(\"ASSESSMENT:  by date \" + assessment.getCreatedDate());\r\n        log.debug(\"ASSESSMENT:  desc\" + assessment.getDescription());\r\n        log.debug(\"ASSESSMENT:  disp \" + assessment.getDisplayName());\r\n        log.debug(\"ASSESSMENT:  last by \" + assessment.getLastModifiedBy());\r\n        log.debug(\"ASSESSMENT:  last date\" + assessment.getLastModifiedDate());\r\n        log.debug(\"ASSESSMENT:  mult \" + assessment.getMultipartAllowed());\r\n        log.debug(\"ASSESSMENT:  title \" + assessment.getTitle());\r\n        log.debug(\"ASSESSMENT DEBUG title \" + assessment.getTitle());\r\n    } catch (RuntimeException e) {\r\n        log.error(e.getMessage(), e);\r\n        throw new RuntimeException(e);\r\n    }\r\n    return assessment;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.PortalNeochatEnabler.prepareSiteForSave",
	"Comment": "when user selects to enable the portalneochat, update the site property",
	"Method": "boolean prepareSiteForSave(Site site,SessionState state){\r\n    if (site == null || state == null) {\r\n        return false;\r\n    }\r\n    if (state.getAttribute(STATE_KEY) != null) {\r\n        final boolean isEnabled = (Boolean) state.getAttribute(STATE_KEY);\r\n        final ResourcePropertiesEdit props = site.getPropertiesEdit();\r\n        props.removeProperty(Site.PROP_SITE_PORTAL_NEOCHAT);\r\n        if (isEnabled) {\r\n            props.addProperty(Site.PROP_SITE_PORTAL_NEOCHAT, Boolean.TRUE.toString());\r\n        } else {\r\n            props.addProperty(Site.PROP_SITE_PORTAL_NEOCHAT, Boolean.FALSE.toString());\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseArFragment.makeTransformationSystem",
	"Comment": "creates the transformation system used by this fragment. can be overridden to create a customtransformation system.",
	"Method": "TransformationSystem makeTransformationSystem(){\r\n    FootprintSelectionVisualizer selectionVisualizer = new FootprintSelectionVisualizer();\r\n    TransformationSystem transformationSystem = new TransformationSystem(getResources().getDisplayMetrics(), selectionVisualizer);\r\n    ModelRenderable.builder().setSource(getActivity(), R.raw.sceneform_footprint).build().thenAccept(renderable -> {\r\n        if (selectionVisualizer.getFootprintRenderable() == null) {\r\n            selectionVisualizer.setFootprintRenderable(renderable);\r\n        }\r\n    }).exceptionally(throwable -> {\r\n        Toast toast = Toast.makeText(getContext(), \"Unable to load footprint renderable\", Toast.LENGTH_LONG);\r\n        toast.setGravity(Gravity.CENTER, 0, 0);\r\n        toast.show();\r\n        return null;\r\n    });\r\n    return transformationSystem;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.order.impl.SitePageEditHandler.getCurrentPlacementId",
	"Comment": "generates the currentplacementid as used by the portal to name the iframe the tool lives in",
	"Method": "String getCurrentPlacementId(){\r\n    return Web.escapeJavascript(\"Main\" + toolManager.getCurrentPlacement().getId());\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.EntryContainerRdnToUserTypeMapper.mapRdn",
	"Comment": "applies the current mapping configuration to the \trecieved rdn value. if no mapping exists, will\treturn null unless the \treturnliteralrdnvalueifnomapping flag\tis raised, in which case the rdn value itself\twill be returned.",
	"Method": "String mapRdn(String rdnValue){\r\n    log.debug(\"mapRdn(): mapping [rdn value = {}]\", rdnValue);\r\n    if (rdnToSakaiUserTypeMap == null || rdnToSakaiUserTypeMap.isEmpty()) {\r\n        String mappedValue = returnLiteralRdnValueIfNoMapping ? rdnValue : null;\r\n        log.debug(\"mapRdn(): no mappings assigned [rdn value = {}][returning = {}]\", rdnValue, mappedValue);\r\n        return mappedValue;\r\n    }\r\n    String mappedValue = rdnToSakaiUserTypeMap.get(rdnValue);\r\n    if (mappedValue == null) {\r\n        mappedValue = returnLiteralRdnValueIfNoMapping ? rdnValue : null;\r\n        log.debug(\"mapRdn(): no valid mapping [rdn value = {}][returning = {}]\", rdnValue, mappedValue);\r\n    }\r\n    return mappedValue;\r\n}"
}, {
	"Path": "org.sakaiproject.tags.api.Errors.merge",
	"Comment": "combine the errors in this object with the errors in another.",
	"Method": "Errors merge(Errors other){\r\n    errors.addAll(other.toList());\r\n    return this;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.downloadEvents.CSVExport.getValidAttendees",
	"Comment": "clean the list of attendees by checking that each user is valid. this is a duplicate of the signupuibasebean method.",
	"Method": "List<SignupAttendee> getValidAttendees(List<SignupAttendee> attendees){\r\n    List<SignupAttendee> cleanedList = new ArrayList<SignupAttendee>();\r\n    for (SignupAttendee attendee : attendees) {\r\n        if (sakaiFacade.checkForUser(attendee.getAttendeeUserId())) {\r\n            cleanedList.add(attendee);\r\n        }\r\n    }\r\n    return cleanedList;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.JsfUtil.addRedirectSafeWarnMessage",
	"Comment": "adds a warning message for display on a page even if faces sends the userto the page via a redirect.",
	"Method": "void addRedirectSafeWarnMessage(String message){\r\n    MessagingBean mb = (MessagingBean) resolveVariable(\"messagingBean\");\r\n    mb.addMessage(new FacesMessage(FacesMessage.SEVERITY_WARN, message, null));\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaCrawlerOptions.getTableNamePattern",
	"Comment": "gets the table name pattern. a null value indicates do not taketable pattern into account.",
	"Method": "String getTableNamePattern(){\r\n    return tableNamePattern;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.OrganizerSignupMBean.initiateCancelTimeslot",
	"Comment": "this is a jsf action call method by ui to go to cancel confirmation page.",
	"Method": "String initiateCancelTimeslot(){\r\n    TimeslotWrapper timeslotWrapper = (TimeslotWrapper) timeslotWrapperTable.getRowData();\r\n    cancelRestoreTimeslot = new CancelRestoreTimeslot(getMeetingWrapper().getMeeting(), timeslotWrapper.getTimeSlot(), currentUserId(), currentSiteId(), signupMeetingService);\r\n    return cancelRestoreTimeslot();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingsBean.isCurrentUserAllowedUpdateSite",
	"Comment": "is the current user allowed to update the site? used for some permission checks",
	"Method": "boolean isCurrentUserAllowedUpdateSite(){\r\n    String currentUserId = sakaiFacade.getCurrentUserId();\r\n    String currentSiteId = sakaiFacade.getCurrentLocationId();\r\n    boolean isAllowedUpdateSite = (sakaiFacade.isAllowedSite(currentUserId, sakaiFacade.SIGNUP_UPDATE_SITE, currentSiteId) || sakaiFacade.isAllowedSite(currentUserId, sakaiFacade.SIGNUP_CREATE_SITE, currentSiteId));\r\n    return isAllowedUpdateSite;\r\n}"
}, {
	"Path": "sf.util.IOUtility.isFileReadable",
	"Comment": "checks if an input file can be read. the file must contain somedata.",
	"Method": "boolean isFileReadable(Path file){\r\n    if (file == null) {\r\n        return false;\r\n    }\r\n    if (!isReadable(file) || !isRegularFile(file)) {\r\n        return false;\r\n    }\r\n    try {\r\n        if (size(file) == 0) {\r\n            return false;\r\n        }\r\n    } catch (final IOException e) {\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteBrowserAction.sortCmObject",
	"Comment": "custom sort cm collections using properties provided object has getter & setter for \tproperties in keys and orders\tdefaults to eid & title if none specified",
	"Method": "Collection sortCmObject(Collection collection,String[] keys,String[] orders){\r\n    if (collection != null && !collection.isEmpty()) {\r\n        List propsList = new ArrayList();\r\n        if (keys == null || orders == null || keys.length == 0 || orders.length == 0) {\r\n            propsList.add(\"eid\");\r\n            propsList.add(\"title\");\r\n        } else {\r\n            for (int i = 0; i < Math.min(keys.length, orders.length); i++) {\r\n                String key = keys[i];\r\n                String order = orders[i];\r\n                propsList.add(key + \":\" + order);\r\n            }\r\n        }\r\n        SortTool sort = new SortTool();\r\n        return sort.sort(collection, propsList);\r\n    }\r\n    return Collections.emptyList();\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.mailArchiveChannelReference",
	"Comment": "get the mail archive channel reference for the main container placement\tfor this site.",
	"Method": "String mailArchiveChannelReference(String siteId){\r\n    Object m = ComponentManager.get(\"org.sakaiproject.mailarchive.api.MailArchiveService\");\r\n    if (m != null) {\r\n        return \"/mailarchive\" + Entity.SEPARATOR + \"channel\" + Entity.SEPARATOR + siteId + Entity.SEPARATOR + SiteService.MAIN_CONTAINER;\r\n    } else {\r\n        return \"\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.conversion.ProfileConverter.hasPersistentProfile",
	"Comment": "does the given user already have a persistent user profile?",
	"Method": "boolean hasPersistentProfile(String userUuid){\r\n    SakaiPerson sp = sakaiProxy.getSakaiPerson(userUuid);\r\n    if (sp != null) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileImageLogicImpl.getOfficialImageFileSystemPath",
	"Comment": "helper to get the path to the official image on the filesystem. this could be in one of several patterns.",
	"Method": "String getOfficialImageFileSystemPath(String userUuid){\r\n    String basepath = sakaiProxy.getOfficialImagesDirectory();\r\n    String pattern = sakaiProxy.getOfficialImagesFileSystemPattern();\r\n    User user = sakaiProxy.getUserById(userUuid);\r\n    String userEid = user.getEid();\r\n    String filename = null;\r\n    if (StringUtils.equals(pattern, \"ALL_IN_ONE\")) {\r\n        filename = basepath + File.separator + userEid + \".jpg\";\r\n    } else if (StringUtils.equals(pattern, \"ONE_DEEP\")) {\r\n        String firstLetter = userEid.substring(0, 1);\r\n        filename = basepath + File.separator + firstLetter + File.separator + userEid + \".jpg\";\r\n    } else {\r\n        String firstLetter = userEid.substring(0, 1);\r\n        String secondLetter = userEid.substring(1, 2);\r\n        filename = basepath + File.separator + firstLetter + File.separator + secondLetter + File.separator + userEid + \".jpg\";\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Path to official image on filesystem is: \" + filename);\r\n    }\r\n    return filename;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.SimpleLdapConnectionManager.createConnectionWithSocketFactory",
	"Comment": "return a new ldapconnection with the appropriate socket factory set for the connection type.",
	"Method": "LDAPConnection createConnectionWithSocketFactory(){\r\n    LDAPSocketFactory factory;\r\n    if (config.isSecureConnection()) {\r\n        factory = config.getSecureSocketFactory();\r\n        if (factory == null) {\r\n            throw new RuntimeException(\"You must set a 'secureSocketFactory' (in jldap-beans.xml) when using LDAPS\");\r\n        }\r\n    } else {\r\n        factory = config.getSocketFactory();\r\n    }\r\n    if (factory == null) {\r\n        return new LDAPConnection();\r\n    } else {\r\n        return new LDAPConnection(factory);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.ItemFacade.setCreatedBy",
	"Comment": "set createdby for itemfacade. this represents the agentid of the personwho created the record",
	"Method": "void setCreatedBy(String createdBy){\r\n    this.createdBy = createdBy;\r\n    this.data.setCreatedBy(createdBy);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingsBean.getAllCategoriesForFilter",
	"Comment": "ui method to get list of categories for the filter \tfirst item has null value to signal that it is all categories",
	"Method": "List<SelectItem> getAllCategoriesForFilter(){\r\n    List<SelectItem> categories = getAllCategories();\r\n    return categories;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getFeatures",
	"Comment": "this is used after selecting a list of tools for a site to decide if we need to ask the user for options.",
	"Method": "void getFeatures(ParameterParser params,SessionState state,String continuePageIndex){\r\n    List idsSelected = new Vector();\r\n    List existTools = state.getAttribute(STATE_TOOL_REGISTRATION_OLD_SELECTED_LIST) == null ? new Vector() : (List) state.getAttribute(STATE_TOOL_REGISTRATION_OLD_SELECTED_LIST);\r\n    Set multipleToolIdSet = state.getAttribute(STATE_MULTIPLE_TOOL_ID_SET) != null ? (Set) state.getAttribute(STATE_MULTIPLE_TOOL_ID_SET) : new HashSet();\r\n    Map multipleToolIdTitleMap = state.getAttribute(STATE_MULTIPLE_TOOL_ID_TITLE_MAP) != null ? (Map) state.getAttribute(STATE_MULTIPLE_TOOL_ID_TITLE_MAP) : new HashMap();\r\n    Map<String, Map<String, Object>> existingLtiIds = state.getAttribute(STATE_LTITOOL_EXISTING_SELECTED_LIST) != null ? (Map<String, Map<String, Object>>) state.getAttribute(STATE_LTITOOL_EXISTING_SELECTED_LIST) : null;\r\n    HashMap<String, Map<String, Object>> ltiTools = (HashMap<String, Map<String, Object>>) state.getAttribute(STATE_LTITOOL_LIST);\r\n    HashMap<String, Map<String, Object>> ltiSelectedTools = new HashMap<String, Map<String, Object>>();\r\n    boolean goToToolConfigPage = false;\r\n    boolean homeSelected = false;\r\n    boolean ltiToolNeedsConfig = false;\r\n    if (params.getStrings(\"selectedTools\") == null && params.getStrings(\"selectedLtiTools\") == null) {\r\n        addAlert(state, rb.getString(\"atleastonetool\"));\r\n    } else {\r\n        List l = new ArrayList(Arrays.asList(// toolId's of chosen tools\r\n        params.getStrings(\"selectedTools\")));\r\n        for (int i = 0; i < l.size(); i++) {\r\n            String toolId = (String) l.get(i);\r\n            if (toolId.equals(TOOL_ID_HOME)) {\r\n                homeSelected = true;\r\n                if (!idsSelected.contains(toolId))\r\n                    idsSelected.add(toolId);\r\n            } else if (toolId.startsWith(LTITOOL_ID_PREFIX)) {\r\n                String ltiToolId = toolId.substring(LTITOOL_ID_PREFIX.length());\r\n                Map<String, Object> toolMap = ltiTools.get(ltiToolId);\r\n                if (toolMap == null)\r\n                    continue;\r\n                Object showDialog = toolMap.get(LTIService.LTI_SITEINFOCONFIG);\r\n                if (existingLtiIds == null) {\r\n                    ltiToolNeedsConfig = true;\r\n                } else {\r\n                    if (!existingLtiIds.keySet().contains(ltiToolId) && showDialog != null && \"1\".equals(showDialog.toString())) {\r\n                        ltiToolNeedsConfig = true;\r\n                    }\r\n                }\r\n                ltiSelectedTools.put(ltiToolId, toolMap);\r\n            } else {\r\n                String originId = findOriginalToolId(state, toolId);\r\n                if (isMultipleInstancesAllowed(originId)) {\r\n                    if (!existTools.contains(toolId)) {\r\n                        goToToolConfigPage = true;\r\n                        if (!multipleToolIdSet.contains(toolId))\r\n                            multipleToolIdSet.add(toolId);\r\n                        if (!multipleToolIdTitleMap.containsKey(toolId)) {\r\n                            String titleConfig = ServerConfigurationService.getString(CONFIG_TOOL_TITLE + originId);\r\n                            if (titleConfig != null && titleConfig.length() > 0) {\r\n                                multipleToolIdTitleMap.put(toolId, titleConfig);\r\n                            } else {\r\n                                multipleToolIdTitleMap.put(toolId, ToolManager.getTool(originId).getTitle());\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (\"sakai.mailbox\".equals(toolId)) {\r\n                    String alias = getSiteAlias(mailArchiveChannelReference((String) state.getAttribute(STATE_SITE_INSTANCE_ID)));\r\n                    if (alias != null) {\r\n                        state.setAttribute(STATE_TOOL_EMAIL_ADDRESS, alias);\r\n                    }\r\n                    if (!existTools.contains(toolId)) {\r\n                        goToToolConfigPage = true;\r\n                    }\r\n                }\r\n                if (!idsSelected.contains(toolId))\r\n                    idsSelected.add(toolId);\r\n            }\r\n        }\r\n        state.setAttribute(STATE_TOOL_HOME_SELECTED, Boolean.valueOf(homeSelected));\r\n        if (!ltiSelectedTools.isEmpty()) {\r\n            state.setAttribute(STATE_LTITOOL_SELECTED_LIST, ltiSelectedTools);\r\n        } else {\r\n            state.removeAttribute(STATE_LTITOOL_SELECTED_LIST);\r\n        }\r\n    }\r\n    state.setAttribute(STATE_TOOL_REGISTRATION_SELECTED_LIST, idsSelected);\r\n    String importString = params.getString(\"import\");\r\n    if (importString != null && importString.equalsIgnoreCase(Boolean.TRUE.toString())) {\r\n        state.setAttribute(STATE_IMPORT, Boolean.TRUE);\r\n        List importSites = new Vector();\r\n        if (params.getStrings(\"importSites\") != null) {\r\n            importSites = new ArrayList(Arrays.asList(params.getStrings(\"importSites\")));\r\n        }\r\n        if (importSites.size() == 0) {\r\n            addAlert(state, rb.getString(\"java.toimport\") + \" \");\r\n        } else {\r\n            Hashtable sites = new Hashtable();\r\n            for (int index = 0; index < importSites.size(); index++) {\r\n                try {\r\n                    Site s = SiteService.getSite((String) importSites.get(index));\r\n                    if (!sites.containsKey(s)) {\r\n                        sites.put(s, new Vector());\r\n                    }\r\n                } catch (IdUnusedException e) {\r\n                }\r\n            }\r\n            state.setAttribute(STATE_IMPORT_SITES, sites);\r\n        }\r\n    } else {\r\n        state.removeAttribute(STATE_IMPORT);\r\n    }\r\n    if (state.getAttribute(STATE_MESSAGE) == null) {\r\n        if (state.getAttribute(STATE_IMPORT) != null) {\r\n            state.setAttribute(STATE_TEMPLATE_INDEX, \"27\");\r\n        } else if (goToToolConfigPage) {\r\n            state.setAttribute(STATE_MULTIPLE_TOOL_INSTANCE_SELECTED, Boolean.valueOf(goToToolConfigPage));\r\n            state.setAttribute(STATE_TEMPLATE_INDEX, \"26\");\r\n        } else {\r\n            boolean ltiToConfigure = false;\r\n            if (ltiToolNeedsConfig) {\r\n                Site site = getStateSite(state);\r\n                for (String ltiToolId : ltiSelectedTools.keySet()) {\r\n                    if ((existingLtiIds == null || !existingLtiIds.keySet().contains(ltiToolId)) && m_ltiService.getContentModelIfConfigurable(Long.parseLong(ltiToolId), site.getId()) != null) {\r\n                        ltiToConfigure = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (ltiToConfigure) {\r\n                state.setAttribute(STATE_TEMPLATE_INDEX, \"26\");\r\n            } else {\r\n                state.setAttribute(STATE_TEMPLATE_INDEX, continuePageIndex);\r\n            }\r\n        }\r\n        state.setAttribute(STATE_MULTIPLE_TOOL_ID_SET, multipleToolIdSet);\r\n        state.setAttribute(STATE_MULTIPLE_TOOL_ID_TITLE_MAP, multipleToolIdTitleMap);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portal.service.SiteNeighbourhoodServiceImpl.getSiteVisit",
	"Comment": "do the getsitevisit, but if not found and the id is a user site, try\ttranslating from user eid to id.",
	"Method": "Site getSiteVisit(String siteId){\r\n    try {\r\n        return siteService.getSiteVisit(siteId);\r\n    } catch (IdUnusedException e) {\r\n        if (siteService.isUserSite(siteId)) {\r\n            try {\r\n                String userEid = siteService.getSiteUserId(siteId);\r\n                String userId = userDirectoryService.getUserId(userEid);\r\n                String alternateSiteId = siteService.getUserSiteId(userId);\r\n                return siteService.getSiteVisit(alternateSiteId);\r\n            } catch (UserNotDefinedException ee) {\r\n            }\r\n        }\r\n        throw e;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.roster.api.RosterMemberComparator.compare",
	"Comment": "compares two rostermember objects according to the sorting\torder configured in this instance of rostermembercomparator.",
	"Method": "int compare(RosterMember member1,RosterMember member2){\r\n    try {\r\n        RuleBasedCollator collator = new RuleBasedCollator(collator_ini.getRules().replaceAll(\"<'_'\", \"<' '<'_'\"));\r\n        if (firstNameLastName) {\r\n            return collator.compare(member1.getDisplayName(), member2.getDisplayName());\r\n        } else {\r\n            return collator.compare(member1.getSortName(), member2.getSortName());\r\n        }\r\n    } catch (ParseException e) {\r\n        log.error(\"ERROR: EnrollmentTableBean had an issue parsing users: \" + member1.getSortName() + \" and \" + member2.getSortName(), e);\r\n    }\r\n    return Collator.getInstance().compare(member1.getSortName(), member2.getSortName());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.StudentScoreUpdateListener.saveStudentScores",
	"Comment": "persist the results from the actionform in the student page.",
	"Method": "boolean saveStudentScores(StudentScoresBean bean,TotalScoresBean tbean,DeliveryBean delivery){\r\n    GradingService delegate = new GradingService();\r\n    ParameterUtil paramUtil = new ParameterUtil();\r\n    HashSet itemGradingSet = new HashSet();\r\n    AssessmentGradingData adata = null;\r\n    try {\r\n        List<SectionContentsBean> parts = delivery.getPageContents().getPartsContents();\r\n        boolean updateFlag = false;\r\n        for (SectionContentsBean part : parts) {\r\n            List<ItemContentsBean> items = part.getItemContents();\r\n            for (ItemContentsBean question : items) {\r\n                String entityId = RubricsConstants.RBCS_PUBLISHED_ASSESSMENT_ENTITY_PREFIX + tbean.getPublishedId() + \".\" + question.getItemData().getItemId();\r\n                if (rubricsService.hasAssociatedRubric(RubricsConstants.RBCS_TOOL_SAMIGO, entityId)) {\r\n                    String evaluatedItemId = bean.getAssessmentGradingId() + \".\" + question.getItemData().getItemId();\r\n                    rubricsService.saveRubricEvaluation(RubricsConstants.RBCS_TOOL_SAMIGO, entityId, evaluatedItemId, bean.getStudentId(), SessionManager.getCurrentSessionUserId(), paramUtil.getRubricConfigurationParameters(entityId, evaluatedItemId));\r\n                }\r\n                List<ItemGradingData> gradingarray = question.getItemGradingDataArray();\r\n                log.debug(\"****1. pub questionId = \" + question.getItemData().getItemId());\r\n                log.debug(\"****2. Gradingarray length = \" + gradingarray.size());\r\n                if (gradingarray.isEmpty() && (question.getExactPoints() > 0 || (question.getGradingComment() != null && !question.getGradingComment().trim().equals(\"\")))) {\r\n                    question.setReview(false);\r\n                    gradingarray = question.getItemGradingDataArray();\r\n                }\r\n                int fibFinNumCorrect = 0;\r\n                if (question.getItemData().getTypeId().equals(Long.valueOf(8)) || question.getItemData().getTypeId().equals(Long.valueOf(11))) {\r\n                    for (ItemGradingData data : gradingarray) {\r\n                        if (Boolean.TRUE.equals(data.getIsCorrect())) {\r\n                            fibFinNumCorrect++;\r\n                        }\r\n                    }\r\n                }\r\n                log.debug(\"****3a Gradingarray length2 = \" + gradingarray.size());\r\n                log.debug(\"****3b set points = \" + question.getExactPoints() + \", comments to \" + question.getGradingComment());\r\n                for (ItemGradingData data : gradingarray) {\r\n                    if (adata == null && data.getAssessmentGradingId() != null) {\r\n                        adata = delegate.load(data.getAssessmentGradingId().toString());\r\n                    }\r\n                    if (data.getAgentId() == null) {\r\n                        data.setSubmittedDate(null);\r\n                        data.setAgentId(bean.getStudentId());\r\n                    }\r\n                    double newAutoScore = 0;\r\n                    if ((question.getItemData().getTypeId().equals(Long.valueOf(8)) || question.getItemData().getTypeId().equals(Long.valueOf(11))) && fibFinNumCorrect != 0) {\r\n                        if (Boolean.TRUE.equals(data.getIsCorrect())) {\r\n                            newAutoScore = (question.getExactPoints() / (double) fibFinNumCorrect);\r\n                        }\r\n                    } else {\r\n                        newAutoScore = (question.getExactPoints() / (double) gradingarray.size());\r\n                    }\r\n                    double oldAutoScore = 0;\r\n                    if (data.getAutoScore() != null) {\r\n                        oldAutoScore = data.getAutoScore();\r\n                    }\r\n                    String newComments = TextFormat.convertPlaintextToFormattedTextNoHighUnicode(question.getGradingComment());\r\n                    if (newComments != null) {\r\n                        newComments = newComments.trim();\r\n                    } else {\r\n                        newComments = \"\";\r\n                    }\r\n                    String oldComments = data.getComments();\r\n                    if (oldComments != null) {\r\n                        oldComments = oldComments.trim();\r\n                    } else {\r\n                        oldComments = \"\";\r\n                    }\r\n                    boolean updateScore = !(Precision.equalsIncludingNaN(newAutoScore, oldAutoScore, 0.0001));\r\n                    boolean updateComments = !newComments.equals(oldComments);\r\n                    StringBuilder logString = new StringBuilder();\r\n                    logString.append(\"gradedBy=\");\r\n                    logString.append(AgentFacade.getAgentString());\r\n                    logString.append(\", itemGradingId=\");\r\n                    logString.append(data.getItemGradingId());\r\n                    if (updateScore) {\r\n                        data.setAutoScore(newAutoScore);\r\n                        logString.append(\", newAutoScore=\");\r\n                        logString.append(newAutoScore);\r\n                        logString.append(\", oldAutoScore=\");\r\n                        logString.append(oldAutoScore);\r\n                    }\r\n                    if (updateComments) {\r\n                        data.setComments(newComments);\r\n                        logString.append(\", newComments=\");\r\n                        logString.append(newComments);\r\n                        logString.append(\", oldComments=\");\r\n                        logString.append(oldComments);\r\n                    }\r\n                    if (updateScore || updateComments) {\r\n                        updateFlag = true;\r\n                        data.setGradedBy(AgentFacade.getAgentString());\r\n                        data.setGradedDate(new Date());\r\n                        String targetString = \"siteId=\" + AgentFacade.getCurrentSiteId() + \", \" + logString.toString();\r\n                        String safeString = targetString.length() > 255 ? targetString.substring(0, 255) : targetString;\r\n                        eventTrackingService.post(eventTrackingService.newEvent(SamigoConstants.EVENT_ASSESSMENT_STUDENT_SCORE_UPDATE, safeString, true));\r\n                        log.debug(\"****4 itemGradingId=\" + data.getItemGradingId());\r\n                        log.debug(\"****5 set points = \" + data.getAutoScore() + \", comments to \" + data.getComments());\r\n                    }\r\n                    data.setAnswerText(data.getAnswerText());\r\n                    itemGradingSet.add(data);\r\n                }\r\n            }\r\n            if (adata == null) {\r\n                String assessmentGradingId = ContextUtil.lookupParam(\"gradingData\");\r\n                adata = delegate.load(assessmentGradingId);\r\n            }\r\n            adata.setItemGradingSet(itemGradingSet);\r\n        }\r\n        if (adata == null)\r\n            return true;\r\n        String newComments = TextFormat.convertPlaintextToFormattedTextNoHighUnicode(bean.getComments());\r\n        if (newComments != null) {\r\n            newComments = newComments.trim();\r\n        } else {\r\n            newComments = \"\";\r\n        }\r\n        String oldComments = adata.getComments();\r\n        if (oldComments != null) {\r\n            oldComments = oldComments.trim();\r\n        } else {\r\n            oldComments = \"\";\r\n        }\r\n        StringBuilder logString = new StringBuilder();\r\n        logString.append(\"gradedBy=\");\r\n        logString.append(AgentFacade.getAgentString());\r\n        logString.append(\", assessmentGradingId=\");\r\n        logString.append(adata.getAssessmentGradingId());\r\n        if (!newComments.equals(oldComments)) {\r\n            updateFlag = true;\r\n            adata.setComments(newComments);\r\n            adata.setGradedBy(AgentFacade.getAgentString());\r\n            adata.setGradedDate(new Date());\r\n            logString.append(\", newComments=\");\r\n            logString.append(newComments);\r\n            logString.append(\", oldComments=\");\r\n            logString.append(oldComments);\r\n        }\r\n        if (updateFlag) {\r\n            delegate.updateAssessmentGradingScore(adata, tbean.getPublishedAssessment(), newComments, oldComments);\r\n            eventTrackingService.post(eventTrackingService.newEvent(SamigoConstants.EVENT_ASSESSMENT_STUDENT_SCORE_UPDATE, logString.toString(), AgentFacade.getCurrentSiteId(), true, NotificationService.NOTI_OPTIONAL, SamigoLRSStatements.getStatementForStudentScoreUpdate(adata, tbean.getPublishedAssessment())));\r\n        }\r\n        log.debug(\"Saved student scores.\");\r\n        updateAttachment(delivery);\r\n    } catch (GradebookServiceException ge) {\r\n        FacesContext context = FacesContext.getCurrentInstance();\r\n        String err = (String) ContextUtil.getLocalizedString(\"org.sakaiproject.tool.assessment.bundle.AuthorMessages\", \"gradebook_exception_error\");\r\n        context.addMessage(null, new FacesMessage(err));\r\n    } catch (Exception e) {\r\n        log.warn(\"Error saving scores\", e);\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroup.impl.SiteManageGroupHandler.init",
	"Comment": "initialization method, just gets the current site in preperation for other calls",
	"Method": "void init(){\r\n    if (site == null) {\r\n        String siteId = null;\r\n        try {\r\n            siteId = sessionManager.getCurrentToolSession().getAttribute(HELPER_ID + \".siteId\").toString();\r\n        } catch (java.lang.NullPointerException npe) {\r\n        }\r\n        if (siteId == null) {\r\n            siteId = toolManager.getCurrentPlacement().getContext();\r\n        }\r\n        try {\r\n            site = siteService.getSite(siteId);\r\n            update = siteService.allowUpdateSite(site.getId()) || siteService.allowUpdateGroupMembership(site.getId());\r\n        } catch (IdUnusedException e) {\r\n            log.warn(e.getMessage());\r\n        }\r\n    }\r\n    title = \"\";\r\n    if (groupMembers == null) {\r\n        groupMembers = new ArrayList();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.evaluation.TotalScoresBean.getAllSubmissions",
	"Comment": "is this an all submissions or, the highest, or the largestscoring option from assessment settings page",
	"Method": "String getAllSubmissions(){\r\n    return allSubmissions;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.menu.MenuEntry.setIsCurrent",
	"Comment": "if you set this to true, this menu item will be displayed as the current selected item.",
	"Method": "void setIsCurrent(boolean current){\r\n    m_current = current;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.PermissionsBean.isReadAllowed",
	"Comment": "using the current objectservice checks whether the current rwikiobject\tcan be read by the currentuser.",
	"Method": "boolean isReadAllowed(){\r\n    return objectService.checkRead(rwikiObject);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.author.CalculatedQuestionExtractListener.createVariablesFromInstructions",
	"Comment": "createvariablesfrominstructions adds any variables that exist in the listof variablenames but do not already exist in the question",
	"Method": "List<String> createVariablesFromInstructions(ItemBean item,List<String> variableNames){\r\n    List<String> errors = new ArrayList<String>();\r\n    Map<String, CalculatedQuestionFormulaBean> formulas = item.getCalculatedQuestion().getFormulas();\r\n    Map<String, CalculatedQuestionVariableBean> variables = item.getCalculatedQuestion().getVariables();\r\n    Long maxSequenceValue = getMaxSequenceValue(variables, formulas);\r\n    for (String variableName : variableNames) {\r\n        if (!variables.containsKey(variableName)) {\r\n            CalculatedQuestionVariableBean bean = new CalculatedQuestionVariableBean();\r\n            bean.setName(variableName);\r\n            bean.setSequence(++maxSequenceValue);\r\n            item.getCalculatedQuestion().addVariable(bean);\r\n        } else {\r\n            CalculatedQuestionVariableBean bean = variables.get(variableName);\r\n            bean.setActive(true);\r\n        }\r\n    }\r\n    if (item.getCalculatedQuestion().getActiveVariables().size() == 0) {\r\n        errors.add(getErrorMessage(\"no_variables_defined\"));\r\n    }\r\n    return errors;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.VelocityPortletPaneledAction.panelMethodName",
	"Comment": "allow extension classes to control which build method gets called for this pannel",
	"Method": "String panelMethodName(String panel){\r\n    return \"build\" + panel + \"PanelContext\";\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.attendee.AttendeeSignupMBean.getIframeId",
	"Comment": "this is a getter method which provide current iframe id for refresh\tiframe purpose.",
	"Method": "String getIframeId(){\r\n    HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\r\n    String iFrameId = (String) request.getAttribute(\"sakai.tool.placement.id\");\r\n    return iFrameId;\r\n}"
}, {
	"Path": "org.sakaiproject.adminsiteperms.service.SitePermsService.setCurrentUser",
	"Comment": "set a current user for the current thread, create session if needed",
	"Method": "Session setCurrentUser(String userId){\r\n    if (userId == null) {\r\n        throw new IllegalArgumentException(\"userId cannot be null\");\r\n    }\r\n    Session currentSession = sessionManager.getCurrentSession();\r\n    if (currentSession == null) {\r\n        currentSession = sessionManager.startSession(userId);\r\n    }\r\n    currentSession.setUserId(userId);\r\n    currentSession.setActive();\r\n    sessionManager.setCurrentSession(currentSession);\r\n    authzGroupService.refreshUser(userId);\r\n    return currentSession;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.component.service.impl.XSLTTransform.getContentHandler",
	"Comment": "get the content handler of the transform, this method can also be used to\ttest if the transform is valid.",
	"Method": "TransformerHandler getContentHandler(){\r\n    TransformerHandler saxTH = factory.newTransformerHandler(templates);\r\n    return saxTH;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.BeginDeliveryActionListener.populateSettings",
	"Comment": "this grabs the assessment and its assessmentaccesscontrolifc &puts it in the settingsdeliverybean.",
	"Method": "SettingsDeliveryBean populateSettings(PublishedAssessmentIfc pubAssessment){\r\n    SettingsDeliveryBean settings = new SettingsDeliveryBean();\r\n    settings.setAssessmentAccessControl(pubAssessment);\r\n    return settings;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.JLDAPDirectoryProvider.getEidValidator",
	"Comment": "access the service used to verify eids prior to executing\tsearches on those values.",
	"Method": "EidValidator getEidValidator(){\r\n    return eidValidator;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupMeetingServiceImpl.updatePermissions",
	"Comment": "this will obtain the permission for attend, update and delete",
	"Method": "void updatePermissions(String userId,String siteId,List<SignupMeeting> meetings){\r\n    for (SignupMeeting meeting : meetings) {\r\n        boolean attend = isAllowToAttend(userId, siteId, meeting);\r\n        boolean update = isAllowToUpdate(userId, siteId, meeting);\r\n        boolean delete = isAllowToDelete(userId, siteId, meeting);\r\n        Permission permission = new Permission(attend, update, delete);\r\n        meeting.setPermission(permission);\r\n    }\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.DiffHelperBean.init",
	"Comment": "initialise the diffhelperbean, effectively creating a new diffbean for\tthe rwikiobject",
	"Method": "void init(){\r\n    String left = request.getParameter(HistoryBean.LEFT_PARAM);\r\n    String right = request.getParameter(HistoryBean.RIGHT_PARAM);\r\n    diffBean = new DiffBean(rwikiObject, rwikiObjectService, left, right);\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaInfoLevelBuilder.standard",
	"Comment": "creates a new schemainfolevel for standard schema information.",
	"Method": "SchemaInfoLevelBuilder standard(){\r\n    final SchemaInfoLevelBuilder standard = minimum();\r\n    standard.setRetrieveColumnDataTypes(true);\r\n    standard.setRetrieveTableColumns(true);\r\n    standard.setRetrieveForeignKeys(true);\r\n    standard.setRetrieveIndexes(true);\r\n    standard.setRetrieveRoutineColumns(true);\r\n    standard.setTag(\"standard\");\r\n    return standard;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TranslationController.calculateFinalDesiredLocalRotation",
	"Comment": "when translating, the up direction of the node must match the up direction of the plane fromthe hit result. however, we also need to make sure that the original forward direction of thenode is respected.",
	"Method": "Quaternion calculateFinalDesiredLocalRotation(Quaternion desiredLocalRotation){\r\n    Vector3 rotatedUp = Quaternion.rotateVector(desiredLocalRotation, Vector3.up());\r\n    desiredLocalRotation = Quaternion.rotationBetweenVectors(Vector3.up(), rotatedUp);\r\n    Quaternion forwardInLocal = Quaternion.rotationBetweenVectors(Vector3.forward(), initialForwardInLocal);\r\n    desiredLocalRotation = Quaternion.multiply(desiredLocalRotation, forwardInLocal);\r\n    return desiredLocalRotation.normalized();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupTimeslotItem.getWaitingList",
	"Comment": "get a list of signupparticipant objects, who are on the waiting list in\tthe time slot",
	"Method": "List<SignupParticipant> getWaitingList(){\r\n    return waitingList;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaRetrievalOptionsBuilder.withDoesNotSupportSchemas",
	"Comment": "overrides the jdbc driver provided information about whether thedatabase supports schema.",
	"Method": "SchemaRetrievalOptionsBuilder withDoesNotSupportSchemas(){\r\n    overridesSupportSchemas = Optional.of(false);\r\n    return this;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.MembershipAction.doToggle_sortEnrolments",
	"Comment": "toggle the sort ascending vs descending by property in enrolments view",
	"Method": "void doToggle_sortEnrolments(RunData data){\r\n    doToggle_sort(data);\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ENROLMENTS_HANDLER.setSortModeFromMyEnrolments(data, state);\r\n}"
}, {
	"Path": "schemacrawler.crawl.AbstractRetriever.lookupOrCreateColumnDataType",
	"Comment": "creates a data type from the jdbc data type id, and the databasespecific type name, if it does not exist.",
	"Method": "MutableColumnDataType lookupOrCreateColumnDataType(Schema schema,int javaSqlType,String databaseSpecificTypeName,MutableColumnDataType lookupOrCreateColumnDataType,Schema schema,int javaSqlTypeInt,String databaseSpecificTypeName,String mappedClassName){\r\n    MutableColumnDataType columnDataType = catalog.lookupColumnDataType(schema, databaseSpecificTypeName).orElse(catalog.lookupSystemColumnDataType(databaseSpecificTypeName).orElse(null));\r\n    if (columnDataType == null) {\r\n        columnDataType = new MutableColumnDataType(schema, databaseSpecificTypeName);\r\n        final JavaSqlType javaSqlType = retrieverConnection.getJavaSqlTypes().valueOf(javaSqlTypeInt);\r\n        columnDataType.setJavaSqlType(javaSqlType);\r\n        if (isBlank(mappedClassName)) {\r\n            final TypeMap typeMap = retrieverConnection.getTypeMap();\r\n            final Class<?> mappedClass;\r\n            if (typeMap.containsKey(databaseSpecificTypeName)) {\r\n                mappedClass = typeMap.get(databaseSpecificTypeName);\r\n            } else {\r\n                mappedClass = typeMap.get(javaSqlType.getName());\r\n            }\r\n            columnDataType.setTypeMappedClass(mappedClass);\r\n        } else {\r\n            columnDataType.setTypeMappedClass(mappedClassName);\r\n        }\r\n        catalog.addColumnDataType(columnDataType);\r\n    }\r\n    return columnDataType;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.item.ItemTypeExtractionStrategy.isExactType",
	"Comment": "is this one of our exact type strings, or not?ignores case and extra space.",
	"Method": "boolean isExactType(String typeString){\r\n    return getValidType(typeString) != null;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.EditMeetingSignupMBean.reset",
	"Comment": "this method will reset everything to orignal value and also initialize\tthe value to the variables in this uibean, which lives in a session\tscope.",
	"Method": "void reset(){\r\n    maxNumOfAttendees = 0;\r\n    showAttendeeName = false;\r\n    sendEmail = DEFAULT_SEND_EMAIL;\r\n    sendEmailToSelectedPeopleOnly = DEFAULT_SEND_EMAIL_TO_SELECTED_PEOPLE_ONLY;\r\n    unlimited = false;\r\n    editMeeting = null;\r\n    convertToNoRecurrent = false;\r\n    this.signupMeeting = reloadMeeting(meetingWrapper.getMeeting());\r\n    title = this.signupMeeting.getTitle();\r\n    sendEmail = this.signupMeeting.isSendEmailByOwner();\r\n    this.sendEmailByOwner = this.signupMeeting.isSendEmailByOwner();\r\n    this.originalMeetingCopy = reloadMeeting(meetingWrapper.getMeeting());\r\n    this.publishToCalendar = getOriginalMeetingCalendarPublishInfo(this.signupMeeting);\r\n    cleanUpUnusedAttachmentCopies(this.readyToModifyAttachmentCopyList);\r\n    this.readyToModifyAttachmentCopyList = createTempAttachmentCopies(meetingWrapper.getEventMainAttachments());\r\n    this.intentionToModfyAttachment = false;\r\n    List<SignupTimeslot> signupTimeSlots = getSignupMeeting().getSignupTimeSlots();\r\n    if (signupTimeSlots != null && !signupTimeSlots.isEmpty()) {\r\n        SignupTimeslot ts = (SignupTimeslot) signupTimeSlots.get(0);\r\n        maxNumOfAttendees = ts.getMaxNoOfAttendees();\r\n        this.unlimited = ts.isUnlimitedAttendee();\r\n        showAttendeeName = ts.isDisplayAttendees();\r\n        this.numberOfSlots = signupTimeSlots.size();\r\n    } else {\r\n        setNumberOfSlots(1);\r\n    }\r\n    populateDataForBeginDeadline(this.signupMeeting);\r\n    this.someoneSignedUp = initSomeoneSignupInfo();\r\n    this.customTimeSlotWrpList = null;\r\n    this.userDefinedTS = false;\r\n    updateTimeSlotWrappers(this.meetingWrapper);\r\n    if (CUSTOM_TIMESLOTS.equals(this.signupMeeting.getMeetingType())) {\r\n        this.userDefinedTS = true;\r\n        this.customTimeSlotWrpList = getTimeslotWrappers();\r\n        markerTimeslots(this.customTimeSlotWrpList);\r\n    }\r\n    getUserDefineTimeslotBean().init(this.signupMeeting, MODIFY_MEETING_PAGE_URL, this.customTimeSlotWrpList, UserDefineTimeslotBean.MODIFY_MEETING);\r\n    populateDropDown();\r\n    this.creatorUserId = this.signupMeeting.getCreatorUserId();\r\n    this.selectedLocation = this.signupMeeting.getLocation();\r\n    this.selectedCategory = this.signupMeeting.getCategory();\r\n    this.customLocation = \"\";\r\n    this.customCategory = \"\";\r\n    this.categories = null;\r\n    this.locations = null;\r\n    this.allPossibleCoordinators = this.sakaiFacade.getAllPossbileCoordinatorsOnFastTrack(this.signupMeeting);\r\n    populateExistingCoordinators();\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.solarsystem.DemoUtils.displayError",
	"Comment": "creates and shows a toast containing an error message. if there was an exception passed in itwill be appended to the toast. the error will also be written to the log",
	"Method": "void displayError(Context context,String errorMsg,Throwable problem){\r\n    final String tag = context.getClass().getSimpleName();\r\n    final String toastText;\r\n    if (problem != null && problem.getMessage() != null) {\r\n        Log.e(tag, errorMsg, problem);\r\n        toastText = errorMsg + \": \" + problem.getMessage();\r\n    } else if (problem != null) {\r\n        Log.e(tag, errorMsg, problem);\r\n        toastText = errorMsg;\r\n    } else {\r\n        Log.e(tag, errorMsg);\r\n        toastText = errorMsg;\r\n    }\r\n    new Handler(Looper.getMainLooper()).post(() -> {\r\n        Toast toast = Toast.makeText(context, toastText, Toast.LENGTH_LONG);\r\n        toast.setGravity(Gravity.CENTER, 0, 0);\r\n        toast.show();\r\n    });\r\n}"
}, {
	"Path": "org.sakaiproject.site.util.SiteParticipantHelper.getRestrictedRoles",
	"Comment": "get a list of restricted roles, taking into account the current site type",
	"Method": "Set<String> getRestrictedRoles(String siteType){\r\n    Set<String> retVal = new HashSet<String>();\r\n    retVal.addAll(Arrays.asList(ArrayUtils.nullToEmpty(scs.getStrings(SAK_PROP_RESTRICTED_ROLES))));\r\n    if (siteType != null && !\"\".equals(siteType)) {\r\n        retVal.addAll(Arrays.asList(ArrayUtils.nullToEmpty(scs.getStrings(SAK_PROP_RESTRICTED_ROLES + \".\" + siteType))));\r\n    }\r\n    return retVal;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.QuestionPoolFacadeQueries.getItem",
	"Comment": "this method returns an itemfacade that we can use to construct our itemimpl",
	"Method": "ItemFacade getItem(String id){\r\n    ItemData item = (ItemData) getHibernateTemplate().load(ItemData.class, id);\r\n    return new ItemFacade(item);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.CopyMeetingSignupMBean.isMandatorySendEmail",
	"Comment": "this is for ui page to determine whether the email checkbox should be checked and disabled to change",
	"Method": "boolean isMandatorySendEmail(){\r\n    return this.mandatorySendEmail;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.model.RWikiObjectImpl.setSource",
	"Comment": "the name of the source used for loading the object content when injected",
	"Method": "void setSource(String source){\r\n    m_source = source;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.PermissionsBean.isUpdateAllowed",
	"Comment": "using the current objectservice checks whether update can be performed on\tthe current rwikiobject by the currentuser.",
	"Method": "boolean isUpdateAllowed(){\r\n    return objectService.checkUpdate(rwikiObject);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Node.compareTo",
	"Comment": "compares the version number of this node to that of another node.",
	"Method": "int compareTo(Object other){\r\n    if (other == this) {\r\n        return 0;\r\n    } else if (!(other instanceof Node)) {\r\n        return -1;\r\n    } else {\r\n        return version.compareTo(((Node) other).version);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.truncateGroupTitle",
	"Comment": "check whether the title string is within length limit, truncate it if necessary",
	"Method": "String truncateGroupTitle(String oTitle){\r\n    if (oTitle.length() > SiteConstants.SITE_GROUP_TITLE_LIMIT) {\r\n        oTitle = oTitle.substring(0, SiteConstants.SITE_GROUP_TITLE_LIMIT);\r\n    }\r\n    return oTitle.trim();\r\n}"
}, {
	"Path": "org.radeox.macro.Preserved.replace",
	"Comment": "actually replace specials in source. this method can be used by\tsubclassing macros.",
	"Method": "String replace(String source){\r\n    StringBuffer tmp = new StringBuffer();\r\n    StringTokenizer stringTokenizer = new StringTokenizer(source, specialString, true);\r\n    while (stringTokenizer.hasMoreTokens()) {\r\n        String current = stringTokenizer.nextToken();\r\n        if (special.containsKey(current)) {\r\n            current = (String) special.get(current);\r\n        }\r\n        tmp.append(current);\r\n    }\r\n    return tmp.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.facade.sakai.AuthzSakaiImpl.isSectionEnrollmentMangementAllowed",
	"Comment": "the user must have either site.upd or site.upd.grp.mbrshp to update\tsection enrollments in the section info tool.",
	"Method": "boolean isSectionEnrollmentMangementAllowed(String userUid,String siteContext){\r\n    User sakaiUser = UserDirectoryService.getCurrentUser();\r\n    String siteRef = SiteService.siteReference(siteContext);\r\n    boolean canUpdateSite = SecurityService.unlock(sakaiUser, AuthzSakaiImpl.SITE_UPDATE, siteRef);\r\n    boolean canUpdateGroups = SecurityService.unlock(sakaiUser, AuthzSakaiImpl.SITE_UPDATE_GROUP_MEMBERSHIP, siteRef);\r\n    return canUpdateSite || canUpdateGroups;\r\n}"
}, {
	"Path": "org.sakaiproject.portlets.PortletIFrame.getSpecial",
	"Comment": "get the special type of this placement, compensating for legacy patterns",
	"Method": "String getSpecial(Properties config){\r\n    String special = config.getProperty(SPECIAL);\r\n    if (special == null) {\r\n        if (\"true\".equals(config.getProperty(\"site\"))) {\r\n            special = SPECIAL_SITE;\r\n        } else if (\"true\".equals(config.getProperty(\"workspace\"))) {\r\n            special = SPECIAL_WORKSPACE;\r\n        } else if (\"true\".equals(config.getProperty(\"worksite\"))) {\r\n            special = SPECIAL_WORKSITE;\r\n        } else if (\"true\".equals(config.getProperty(\"annotatedurl\"))) {\r\n            special = SPECIAL_ANNOTATEDURL;\r\n        }\r\n    }\r\n    return special;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getMoreInfoUrl",
	"Comment": "using moreinfodir, if toolid is found in the dir return path otherwise return null",
	"Method": "String getMoreInfoUrl(File infoDir,String toolId){\r\n    String moreInfoUrl = null;\r\n    try {\r\n        Collection<File> files = FileUtils.listFiles(infoDir, new WildcardFileFilter(toolId + \"*\"), null);\r\n        if (files.isEmpty() == false) {\r\n            for (File mFile : files) {\r\n                String name = mFile.getName();\r\n                int lastIndexOf = name.lastIndexOf('.');\r\n                String fNameWithOutExtension = name.substring(0, lastIndexOf);\r\n                if (fNameWithOutExtension.equals(toolId)) {\r\n                    moreInfoUrl = libraryPath + mFile.getName();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        log.info(\"unable to read moreinfo\" + e.getMessage());\r\n    }\r\n    return moreInfoUrl;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.NewPagedResourceAction.enableObserver",
	"Comment": "enable the observer, unless we are in search mode, where we want it disabled.",
	"Method": "void enableObserver(SessionState state){\r\n    ObservingCourier observer = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\r\n    if (observer != null) {\r\n        if ((state.getAttribute(STATE_SEARCH) != null) || (state.getAttribute(STATE_MANUAL_REFRESH) != null)) {\r\n            observer.disable();\r\n        } else {\r\n            observer.enable();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.adminsiteperms.service.SitePermsService.getCurrentStatusMessage",
	"Comment": "returns a current status message from the session if there is one to display for a running admin perms process,is the status is complete then the session data will be removed",
	"Method": "String getCurrentStatusMessage(){\r\n    String msg = updateMessage;\r\n    isLockedForUpdates();\r\n    if (STATUS_COMPLETE.equals(updateStatus)) {\r\n        updateStatus = null;\r\n        updateMessage = null;\r\n    }\r\n    return msg;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getSetupRequestReplyToEmailAddress",
	"Comment": "get the setup.request.replyto setting. if missing, use setup.request setting.",
	"Method": "String getSetupRequestReplyToEmailAddress(){\r\n    String rv = ServerConfigurationService.getString(\"setup.request.replyTo\", null);\r\n    if (rv == null) {\r\n        rv = getSetupRequestEmailAddress();\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.getRevisionPath",
	"Comment": "returns the path from the head node to the node identifiedby the given version number.",
	"Method": "Path getRevisionPath(Version vernum){\r\n    if (head == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        Path path = head.pathTo(vernum, true);\r\n        Node revisionFound = path.last();\r\n        if (revisionFound == null) {\r\n            return null;\r\n        }\r\n        if (revisionFound.getVersion().isLessThan(vernum)) {\r\n            return null;\r\n        }\r\n        return path;\r\n    } catch (NodeNotFoundException e) {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Diff.diff",
	"Comment": "compute the difference between the original and a revision.",
	"Method": "Revision diff(Object[] orig,Object[] rev,Revision diff,Object[] orig,Object[] rev,DiffAlgorithm algorithm,Revision diff,Object[] rev){\r\n    if (orig.length == 0 && rev.length == 0)\r\n        return new Revision();\r\n    else\r\n        return algorithm.diff(orig, rev);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.qti.QTIService.createImportedAssessment",
	"Comment": "import an assessment xml document in qti format, extract & persist the data.",
	"Method": "AssessmentFacade createImportedAssessment(Document document,int qtiVersion,AssessmentFacade createImportedAssessment,Document document,int qtiVersion,String unzipLocation,String templateId,AssessmentFacade createImportedAssessment,Document document,int qtiVersion,String unzipLocation,String templateId,String siteId,AssessmentFacade createImportedAssessment,Document document,int qtiVersion,String unzipLocation,AssessmentFacade createImportedAssessment,Document document,int qtiVersion,String unzipLocation,boolean isRespondus,List failedMatchingQuestions,AssessmentFacade createImportedAssessment,String documentPath,int qtiVersion,String siteId){\r\n    try {\r\n        return createImportedAssessment(XmlUtil.readDocument(documentPath, true), qtiVersion, null, null, siteId);\r\n    } catch (Exception e) {\r\n        throw new QTIServiceException(e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingWrapper.resetAvailableStatus",
	"Comment": "it will force to recalculate the current available status.",
	"Method": "void resetAvailableStatus(){\r\n    this.availableStatus = null;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.findOriginalToolId",
	"Comment": "toolid might be of form original tool id concatenated with number\tfind whether there is an counterpart in the the multipletoolidset.\talso only returns tools that are considered valid tools for this site type.",
	"Method": "String findOriginalToolId(SessionState state,String toolId){\r\n    if (toolId.equals(TOOL_ID_HOME) || SiteManageConstants.SITE_INFO_TOOL_ID.equals(toolId)) {\r\n        return toolId;\r\n    } else {\r\n        Set<Tool> toolRegistrationSet = getToolRegistrations(state, (String) state.getAttribute(STATE_SITE_TYPE));\r\n        String rv = null;\r\n        if (toolRegistrationSet != null) {\r\n            for (Iterator i = toolRegistrationSet.iterator(); rv == null && i.hasNext(); ) {\r\n                Tool tool = (Tool) i.next();\r\n                String tId = tool.getId();\r\n                rv = originalToolId(toolId, tId);\r\n            }\r\n        }\r\n        return rv;\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.util.ToString.stringToArray",
	"Comment": "breaks a string into an array of strings.use the value of the line.separator system propertyas the linebreak character.",
	"Method": "String[] stringToArray(String value){\r\n    return (value != null) ? value.split(\"(\\r\\n?)|\\n\") : new String[0];\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.getAllUsers",
	"Comment": "gets all user accounts as xml. currently returns userid, eid, displayname and type.",
	"Method": "String getAllUsers(String sessionid){\r\n    Session session = establishSession(sessionid);\r\n    if (!securityService.isSuperUser(session.getUserId())) {\r\n        log.warn(\"WS getAllUsers() failed. Restricted to admin users.\");\r\n        throw new RuntimeException(\"WS failed. Restricted to admin users.\");\r\n    }\r\n    try {\r\n        String config = serverConfigurationService.getString(\"webservice.specialUsers\", \"admin,postmaster\");\r\n        String[] items = StringUtils.split(config, ',');\r\n        List<String> specialUsers = Arrays.asList(items);\r\n        List<User> allUsers = userDirectoryService.getUsers();\r\n        if (allUsers == null || allUsers.size() == 0) {\r\n            return \"<list/>\";\r\n        }\r\n        Document dom = Xml.createDocument();\r\n        Node list = dom.createElement(\"list\");\r\n        dom.appendChild(list);\r\n        for (Iterator i = allUsers.iterator(); i.hasNext(); ) {\r\n            User user = (User) i.next();\r\n            if (specialUsers.contains(user.getEid())) {\r\n                continue;\r\n            }\r\n            Node item = dom.createElement(\"item\");\r\n            Node userId = dom.createElement(\"userId\");\r\n            userId.appendChild(dom.createTextNode(user.getId()));\r\n            Node eid = dom.createElement(\"eid\");\r\n            eid.appendChild(dom.createTextNode(user.getEid()));\r\n            Node displayName = dom.createElement(\"displayName\");\r\n            displayName.appendChild(dom.createTextNode(user.getDisplayName()));\r\n            Node type = dom.createElement(\"type\");\r\n            type.appendChild(dom.createTextNode(user.getType()));\r\n            item.appendChild(userId);\r\n            item.appendChild(eid);\r\n            item.appendChild(displayName);\r\n            item.appendChild(type);\r\n            list.appendChild(item);\r\n        }\r\n        return Xml.writeDocumentToString(dom);\r\n    } catch (Exception e) {\r\n        log.error(\"WS getAllUsers(): \" + e.getClass().getName() + \" : \" + e.getMessage());\r\n        return \"<exception/>\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentGradingFacadeQueries.getStudentGradingData",
	"Comment": "this returns a hashmap of all the submitted items, keyed byitem id for easy retrieval.",
	"Method": "HashMap getStudentGradingData(String assessmentGradingId,HashMap getStudentGradingData,String assessmentGradingId,boolean loadGradingAttachment){\r\n    try {\r\n        HashMap map = new HashMap();\r\n        AssessmentGradingData gdata = load(new Long(assessmentGradingId), loadGradingAttachment);\r\n        log.debug(\"****#6, gdata=\" + gdata);\r\n        for (ItemGradingData data : gdata.getItemGradingSet()) {\r\n            ArrayList thisone = (ArrayList) map.get(data.getPublishedItemId());\r\n            if (thisone == null)\r\n                thisone = new ArrayList();\r\n            thisone.add(data);\r\n            map.put(data.getPublishedItemId(), thisone);\r\n        }\r\n        return map;\r\n    } catch (Exception e) {\r\n        log.warn(e.getMessage(), e);\r\n        return new HashMap();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.sendSiteNotification",
	"Comment": "notification sent when a course site is set up automatcally",
	"Method": "void sendSiteNotification(SessionState state,Site site,List notifySites){\r\n    boolean courseSite = SiteTypeUtil.isCourseSite(site.getType());\r\n    String term_name = \"\";\r\n    if (state.getAttribute(STATE_TERM_SELECTED) != null) {\r\n        term_name = ((AcademicSession) state.getAttribute(STATE_TERM_SELECTED)).getEid();\r\n    }\r\n    String requestEmail = getSetupRequestEmailAddress();\r\n    User currentUser = UserDirectoryService.getCurrentUser();\r\n    boolean sendSiteNotificationChoice = ServerConfigurationService.getBoolean(\"site.setup.creation.notification\", true);\r\n    if (requestEmail != null && currentUser != null && sendSiteNotificationChoice) {\r\n        userNotificationProvider.notifySiteCreation(site, notifySites, courseSite, term_name, requestEmail);\r\n    }\r\n    rb.setContextLocale(null);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemConfigBean.setShowMultipleChoiceMultipleCorrect",
	"Comment": "set whether multiple choice multiple correct should be shown.",
	"Method": "void setShowMultipleChoiceMultipleCorrect(boolean showMultipleChoiceMultipleCorrect){\r\n    this.showMultipleChoiceMultipleCorrect = showMultipleChoiceMultipleCorrect;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiLogin.loginGET",
	"Comment": "login with the supplied credentials and return the session string which can be used in subsequent web service calls, ie via sakaiscript",
	"Method": "java.lang.String loginGET(java.lang.String id,java.lang.String pw){\r\n    return login(id, pw);\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.RenderBean.publicRenderPage",
	"Comment": "render the rwikiobject as a public page represented by the given name and\trealm",
	"Method": "String publicRenderPage(String name,String defaultRealm,boolean withBreadcrumbs){\r\n    String pageName = NameHelper.globaliseName(name, defaultRealm);\r\n    String pageSpace = NameHelper.localizeSpace(pageName, defaultRealm);\r\n    try {\r\n        RWikiObject page = objectService.getRWikiObject(pageName, pageSpace);\r\n        return toolRenderService.renderPublicPage(page, defaultRealm, withBreadcrumbs);\r\n    } catch (PermissionException e) {\r\n        RWikiObject page = objectService.createNewRWikiCurrentObject();\r\n        page.setName(pageName);\r\n        ResourceLoaderBean rlb = ResourceLoaderHelperBean.getResourceLoaderBean();\r\n        page.setContent(rlb.getString(\"renderbean.permission_problem\", PERMISSION_PROBLEM));\r\n        return toolRenderService.renderPublicPage(page, defaultRealm, withBreadcrumbs);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.addSiteTypesToStateFromPropertyOrToolReg",
	"Comment": "if not yet set, adds the given site type list to the state, either from sakai.properties if available, or from the tool registration configuration",
	"Method": "void addSiteTypesToStateFromPropertyOrToolReg(SessionState state,String stateKey,String[] typesFromProperty,String toolRegKey,PortletConfig config){\r\n    if (state.getAttribute(stateKey) == null) {\r\n        List<String> siteTypes = new ArrayList();\r\n        if (typesFromProperty != null) {\r\n            siteTypes.addAll(Arrays.asList(typesFromProperty));\r\n        } else {\r\n            String toolRegTypes = StringUtils.trimToEmpty(config.getInitParameter(toolRegKey));\r\n            siteTypes.addAll(Arrays.asList(toolRegTypes.split(\",\")));\r\n        }\r\n        state.setAttribute(stateKey, siteTypes);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getAllCategories",
	"Comment": "this method is called to get all categories to populate the dropdown, for new signup creation.",
	"Method": "List<SelectItem> getAllCategories(){\r\n    if (categories == null) {\r\n        categories = new ArrayList<SelectItem>();\r\n        categories.addAll(Utilities.getSignupMeetingsBean().getAllCategories());\r\n        categories.remove(0);\r\n        categories.add(0, new SelectItem(Utilities.rb.getString(\"select_category\")));\r\n    }\r\n    return categories;\r\n}"
}, {
	"Path": "au.edu.anu.portal.portlets.rss.SimpleRSSPortlet.getConfiguredMaxItems",
	"Comment": "get the preferred max number of items, or default from constants",
	"Method": "int getConfiguredMaxItems(RenderRequest request){\r\n    PortletPreferences pref = request.getPreferences();\r\n    return Integer.valueOf(pref.getValue(PREF_MAX_ITEMS, Integer.toString(Constants.MAX_ITEMS)));\r\n}"
}, {
	"Path": "org.sakaiproject.samigo.search.QuestionElasticSearchIndexBuilder.addSearchTerms",
	"Comment": "here we create our specific search query with the parameters that are sent in the additionalsearchinformation",
	"Method": "Pair<SearchRequestBuilder, QueryBuilder> addSearchTerms(Pair<SearchRequestBuilder, QueryBuilder> builders,String searchTerms,Pair<SearchRequestBuilder, QueryBuilder> addSearchTerms,Pair<SearchRequestBuilder, QueryBuilder> builders,String searchTerms,Map<String, String> additionalSearchInformation){\r\n    BoolQueryBuilder query = (BoolQueryBuilder) builders.getRight();\r\n    SearchRequestBuilder searchRequestBuilder = builders.getLeft();\r\n    log.debug(\"Searching the searchterm: \" + searchTerms);\r\n    Source parseSearchTerms = new Source(searchTerms);\r\n    searchTerms = parseSearchTerms.getTextExtractor().toString();\r\n    String regex = \"([+\\\\-!\\\\(\\\\){}\\\\[\\\\]^~*?:\\\\\\\\]|[&\\\\|]{2})\";\r\n    searchTerms = searchTerms.replaceAll(regex, \"\\\\\\\\$1\");\r\n    log.debug(\"Searching the searchterms after escape them: \" + searchTerms);\r\n    if (StringUtils.isNotEmpty(searchTerms)) {\r\n        if (additionalSearchInformation.containsKey(\"logic\") && additionalSearchInformation.get(\"logic\").equals(\"and\")) {\r\n            query = query.must(queryStringQuery(searchTerms).defaultField(\"contents\").defaultOperator(QueryStringQueryBuilder.Operator.AND));\r\n        } else {\r\n            query = query.must(queryStringQuery(searchTerms).defaultField(\"contents\").defaultOperator(QueryStringQueryBuilder.Operator.OR));\r\n        }\r\n    }\r\n    Set<String> keys = additionalSearchInformation.keySet();\r\n    Iterator<String> keysIterator = keys.iterator();\r\n    Boolean oneTimeTagShould = true;\r\n    BoolQueryBuilder tagsQuery = QueryBuilders.boolQuery();\r\n    Boolean tagsFounded = false;\r\n    while (keysIterator.hasNext()) {\r\n        String key = keysIterator.next();\r\n        if (key.startsWith(\"tag_\")) {\r\n            tagsFounded = true;\r\n            String tag = additionalSearchInformation.get(key);\r\n            log.debug(\"We will search this tag:\" + tag);\r\n            if (additionalSearchInformation.containsKey(\"logic\") && additionalSearchInformation.get(\"logic\").equals(\"or\")) {\r\n                tagsQuery = tagsQuery.should(termQuery(\"tags\", tag));\r\n                if (oneTimeTagShould) {\r\n                    tagsQuery.minimumNumberShouldMatch(1);\r\n                }\r\n                oneTimeTagShould = false;\r\n            } else {\r\n                tagsQuery = tagsQuery.must(termQuery(\"tags\", tag));\r\n            }\r\n        }\r\n    }\r\n    if (tagsFounded) {\r\n        query = query.must(tagsQuery);\r\n    }\r\n    if (additionalSearchInformation.containsKey(\"subtype\")) {\r\n        log.debug(\"We will search this subtype:\" + additionalSearchInformation.get(\"subtype\"));\r\n        query = query.must(matchQuery(\"subtype\", additionalSearchInformation.get(\"subtype\")));\r\n    }\r\n    if (additionalSearchInformation.containsKey(\"hash\")) {\r\n        log.debug(\"We will search this hash:\" + additionalSearchInformation.get(\"hash\"));\r\n        query = query.must(matchQuery(\"hash\", additionalSearchInformation.get(\"hash\")));\r\n    }\r\n    if (additionalSearchInformation.containsKey(\"scope\")) {\r\n        if (additionalSearchInformation.get(\"scope\").equals(\"all\")) {\r\n            log.debug(\"we won't filter the results by scope\");\r\n        } else if (additionalSearchInformation.get(\"scope\").equals(\"custom\")) {\r\n            log.debug(\"We have a custom scope request\");\r\n            Set<String> keysForACL = additionalSearchInformation.keySet();\r\n            Iterator<String> keysForACLIterator = keysForACL.iterator();\r\n            while (keysForACLIterator.hasNext()) {\r\n                String key = keysForACLIterator.next();\r\n                List<String> siteIds = new ArrayList();\r\n                List<String> questionPoolsIds = new ArrayList();\r\n                if (key.startsWith(\"site_\")) {\r\n                    String siteId = additionalSearchInformation.get(key);\r\n                    log.debug(\"We have this siteId to add:\" + siteId);\r\n                    siteIds.add(siteId);\r\n                    query = query.should(termsQuery(\"site\", siteIds.toArray(new String[siteIds.size()])));\r\n                }\r\n                if (key.startsWith(\"qp_\")) {\r\n                    String qpId = additionalSearchInformation.get(key);\r\n                    log.debug(\"We have this question Pool to add:\" + qpId);\r\n                    questionPoolsIds.add(qpId);\r\n                    query = query.should(termsQuery(\"questionPoolId\", questionPoolsIds.toArray(new String[questionPoolsIds.size()])));\r\n                    query = query.minimumNumberShouldMatch(1);\r\n                }\r\n            }\r\n        } else {\r\n            if (!(securityService.isSuperUser())) {\r\n                log.debug(\"No superuser.Searching based in permissions\");\r\n                List<String> siteIds = getAllSitesUserHasQuestionAuthorPermissions();\r\n                List<String> questionPoolsIds = getAllUserQuestionPools();\r\n                query = query.should(termsQuery(\"site\", siteIds.toArray(new String[siteIds.size()])));\r\n                query = query.should(termsQuery(\"questionPoolId\", questionPoolsIds.toArray(new String[questionPoolsIds.size()])));\r\n                query = query.minimumNumberShouldMatch(1);\r\n            } else {\r\n                log.debug(\"Superuser, so no filtering\");\r\n            }\r\n        }\r\n        if (additionalSearchInformation.containsKey(\"group\")) {\r\n            log.debug(\"We are going to group results by: \" + additionalSearchInformation.get(\"group\"));\r\n            searchRequestBuilder.setSize(0);\r\n            searchRequestBuilder = addSearchAggregation(searchRequestBuilder, additionalSearchInformation.get(\"group\"));\r\n        }\r\n    }\r\n    return pairOf(searchRequestBuilder, query);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.SectionContentsBean.setNumbering",
	"Comment": "total number of questions to list, based on numbering scheme",
	"Method": "void setNumbering(int newNumbering){\r\n    numbering = newNumbering;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.authz.integrated.AuthzQueriesFacade.getAssessmentsByAgentAndFunction",
	"Comment": "this appears to be unused, it is also dangerous, as it is not in the api",
	"Method": "List<AssessmentBaseData> getAssessmentsByAgentAndFunction(String agentId,String functionId){\r\n    if (agentId == null || functionId == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    HibernateCallback<List<AssessmentBaseData>> hcb = session -> {\r\n        Query query = session.createQuery(HQL_QUERY_ASSESS_BY_AGENT_FUNC);\r\n        query.setString(\"agentId\", agentId);\r\n        query.setString(\"functionId\", functionId);\r\n        return query.list();\r\n    };\r\n    return getHibernateTemplate().execute(hcb);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacadeQueries.getGroupsForSite",
	"Comment": "added by sam ottenhoff feb 2010\treturns all groups for site",
	"Method": "Map getGroupsForSite(String siteId,Map getGroupsForSite){\r\n    String siteId = ToolManager.getCurrentPlacement().getContext();\r\n    return getGroupsForSite(siteId);\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.Messages.getString",
	"Comment": "get a parameterised message from the bundle and perform the parameter substitution on it",
	"Method": "String getString(String key,String getString,String key,Object[] arguments){\r\n    return MessageFormat.format(getMessage(key), arguments);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.print.PDFAssessmentBean.oldschoolIfy",
	"Comment": "converts all nice new school html into old school\tfont tagged up html that htmlworker will actually\tparse right",
	"Method": "String oldschoolIfy(String input){\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"starting oldschoolify with: \" + input);\r\n    StringBuffer text1 = new StringBuffer(\"<div><font color='#01a5cb' size='\");\r\n    int size1 = (int) (baseFontSize * 1.1);\r\n    text1.append(size1);\r\n    text1.append(\"'\");\r\n    input = input.replaceAll(\"<h1\", text1.toString());\r\n    input = input.replaceAll(\"<h2\", text1.toString());\r\n    StringBuffer text2 = new StringBuffer(\"<div><font color='#CCCCCC' size='\");\r\n    int size2 = (int) (baseFontSize * 1);\r\n    text2.append(size2);\r\n    text2.append(\"'\");\r\n    input = input.replaceAll(\"<h3\", text2.toString());\r\n    StringBuffer text3 = new StringBuffer(\"<div><font size='\");\r\n    int size3 = (int) (baseFontSize * .85);\r\n    text3.append(size3);\r\n    text3.append(\"'\");\r\n    input = input.replaceAll(\"<h4\", text3.toString());\r\n    StringBuffer text4 = new StringBuffer(\"<div><font size='\");\r\n    int size4 = (int) (baseFontSize * .8);\r\n    text4.append(size4);\r\n    text4.append(\"'\");\r\n    input = input.replaceAll(\"<h5\", text4.toString());\r\n    StringBuffer text5 = new StringBuffer(\"<div><font color='#333333' size='\");\r\n    int size5 = (int) (baseFontSize * .6);\r\n    text5.append(size5);\r\n    text5.append(\"'\");\r\n    input = input.replaceAll(\"<h6\", text5.toString());\r\n    input = input.replaceAll(\"<\/h.>\", \"<\/font><\/div>\");\r\n    if (!input.startsWith(\"<div><font\")) {\r\n        input = \"<div><font size='\" + baseFontSize + \"'>#<\/font><\/div>\".replace(\"#\", input);\r\n    }\r\n    return input;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.impl.event.EventUtil.getUnionWithAllDefaultToolEvents",
	"Comment": "union between a given event registry with the full event registry.",
	"Method": "List<ToolInfo> getUnionWithAllDefaultToolEvents(List<ToolInfo> eventRegistrySubset,List<ToolInfo> fullEventRegistry){\r\n    List<ToolInfo> union = new ArrayList<ToolInfo>();\r\n    Iterator<ToolInfo> iAll = fullEventRegistry.iterator();\r\n    while (iAll.hasNext()) {\r\n        ToolInfo t1 = iAll.next();\r\n        Iterator<ToolInfo> iPREFS = eventRegistrySubset.iterator();\r\n        boolean foundTool = false;\r\n        ToolInfo t2 = null;\r\n        while (iPREFS.hasNext()) {\r\n            t2 = iPREFS.next();\r\n            if (t2.getToolId().equals(t1.getToolId())) {\r\n                foundTool = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!foundTool) {\r\n            ToolInfo toAdd = t1;\r\n            toAdd.setSelected(false);\r\n            for (int i = 0; i < toAdd.getEvents().size(); i++) toAdd.getEvents().get(i).setSelected(false);\r\n            union.add(toAdd);\r\n        } else {\r\n            Iterator<EventInfo> aPREFS = t1.getEvents().iterator();\r\n            while (aPREFS.hasNext()) {\r\n                EventInfo e1 = aPREFS.next();\r\n                boolean foundEvent = false;\r\n                for (int i = 0; i < t2.getEvents().size(); i++) {\r\n                    EventInfo e2 = t2.getEvents().get(i);\r\n                    if (e2.getEventId().equals(e1.getEventId())) {\r\n                        foundEvent = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!foundEvent) {\r\n                    EventInfo toAdd = e1;\r\n                    e1.setSelected(false);\r\n                    t2.addEvent(toAdd);\r\n                }\r\n            }\r\n            union.add(t2);\r\n        }\r\n    }\r\n    return union;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Chunk.applyAdd",
	"Comment": "add the text of this chunk to the target at the given position.",
	"Method": "void applyAdd(int start,List target){\r\n    Iterator i = chunk.iterator();\r\n    while (i.hasNext()) {\r\n        target.add(start++, i.next());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.accountvalidator.tool.otp.AcountValidationLocator.isLegacyLinksEnabled",
	"Comment": "determines whether account validator sends users to the old validation form or the new ones",
	"Method": "boolean isLegacyLinksEnabled(){\r\n    return serverConfigurationService.getBoolean(\"accountValidator.sendLegacyLinks\", false);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.removeAttendee",
	"Comment": "this is a jsf action call method by ui to let user remove an attendee\tfrom the page.",
	"Method": "String removeAttendee(){\r\n    TimeslotWrapper timeslotWrapper = (TimeslotWrapper) timeslotWrapperTable.getRowData();\r\n    String attendeeUserId = Utilities.getRequestParam(PARAM_NAME_FOR_ATTENDEE_USERID);\r\n    timeslotWrapper.removeAttendee(attendeeUserId);\r\n    return \"\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.AddSectionsBean.isDuplicateSectionTitle",
	"Comment": "checks whether a string is currently being used as a title for another section.",
	"Method": "boolean isDuplicateSectionTitle(String title,Collection existingSections){\r\n    for (Iterator iter = existingSections.iterator(); iter.hasNext(); ) {\r\n        CourseSection section = (CourseSection) iter.next();\r\n        if (section.getTitle().equals(title)) {\r\n            if (log.isDebugEnabled())\r\n                log.debug(\"Conflicting section name found: \" + title);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.EntryContainerRdnToUserTypeMapper.mapRdn",
	"Comment": "applies the current mapping configuration to the \trecieved rdn value. if no mapping exists, will\treturn null unless the \treturnliteralrdnvalueifnomapping flag\tis raised, in which case the rdn value itself\twill be returned.",
	"Method": "String mapRdn(String rdnType,String rdnValue){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"mapRdn(): mapping [rdn type = \" + rdnType + \"][rdn value = \" + rdnValue + \"]\");\r\n    }\r\n    if (rdnToSakaiUserTypeMap == null || rdnToSakaiUserTypeMap.isEmpty()) {\r\n        String mappedValue = returnLiteralRdnValueIfNoMapping ? rdnValue : null;\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"mapRdn(): no mappings assigned [rdn type = \" + rdnType + \"][rdn value = \" + rdnValue + \"][returning = \" + mappedValue + \"]\");\r\n        }\r\n        return mappedValue;\r\n    }\r\n    String mappedValue = rdnToSakaiUserTypeMap.get(rdnValue);\r\n    if (mappedValue == null) {\r\n        mappedValue = returnLiteralRdnValueIfNoMapping ? rdnValue : null;\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"mapRdn(): no valid mapping [rdn type = \" + rdnType + \"][rdn value = \" + rdnValue + \"][returning = \" + mappedValue + \"]\");\r\n        }\r\n    }\r\n    return mappedValue;\r\n}"
}, {
	"Path": "au.edu.anu.portal.portlets.rss.SimpleRSSPortlet.getConfiguredFeedUrl",
	"Comment": "get the preferred portlet height if set, or default from constants",
	"Method": "String getConfiguredFeedUrl(RenderRequest request){\r\n    PortletPreferences pref = request.getPreferences();\r\n    return pref.getValue(PREF_FEED_URL, null);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.AddSectionsBean.outOfRange",
	"Comment": "returns true if the string is longer than len, less than low, or higher than high.",
	"Method": "boolean outOfRange(String str,int len,int low,int high){\r\n    if (str.length() > len) {\r\n        return true;\r\n    }\r\n    try {\r\n        int i = Integer.parseInt(str);\r\n        if (i < low || i > high) {\r\n            return true;\r\n        }\r\n    } catch (NumberFormatException nfe) {\r\n        if (log.isDebugEnabled())\r\n            log.debug(\"time must be a number\");\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.AttendanceSignupBean.init",
	"Comment": "this will initialize all the wrapper objects such as\tsignupmeetingwrapper, signuptimeslotwrapper etc.",
	"Method": "void init(SignupMeetingWrapper meetingWrapper){\r\n    setMeetingWrapper(meetingWrapper);\r\n    super.updateTimeSlotWrappers(meetingWrapper);\r\n}"
}, {
	"Path": "org.sakaiproject.presence.impl.BasePresenceService.checkPresenceForExpiration",
	"Comment": "check current session presences and remove any expired ones",
	"Method": "void checkPresenceForExpiration(){\r\n    Session session = m_sessionManager.getCurrentSession();\r\n    ToolSession ts = session.getToolSession(SESSION_KEY);\r\n    Enumeration locations = ts.getAttributeNames();\r\n    while (locations.hasMoreElements()) {\r\n        String location = (String) locations.nextElement();\r\n        Presence p = (Presence) ts.getAttribute(location);\r\n        if (p != null && p.isExpired()) {\r\n            ts.removeAttribute(location);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.search.elasticsearch.BaseElasticSearchIndexBuilder.processContentQueue",
	"Comment": "searches for any docs in the search index that have not been indexed yet,digests the content and loads it into the index.any docs with empty content will be removed fromthe index.",
	"Method": "void processContentQueue(){\r\n    startTime = System.currentTimeMillis();\r\n    Thread.currentThread().setPriority(Thread.NORM_PRIORITY - 1);\r\n    if (getPendingDocuments() == 0) {\r\n        getLog().trace(\"No pending docs for index builder [\" + getName() + \"]\");\r\n        return;\r\n    }\r\n    SearchResponse response = findContentQueue();\r\n    SearchHit[] hits = response.getHits().hits();\r\n    List<NoContentException> noContentExceptions = new ArrayList();\r\n    getLog().debug(getPendingDocuments() + \" pending docs for index builder [\" + getName() + \"]\");\r\n    BulkRequestBuilder bulkRequest = newContentQueueBulkUpdateRequestBuilder();\r\n    for (SearchHit hit : hits) {\r\n        if (bulkRequest.numberOfActions() < bulkRequestSize) {\r\n            try {\r\n                processContentQueueEntry(hit, bulkRequest);\r\n            } catch (NoContentException e) {\r\n                noContentExceptions.add(e);\r\n            }\r\n        } else {\r\n            executeBulkRequest(bulkRequest);\r\n            bulkRequest = newContentQueueBulkUpdateRequestBuilder();\r\n        }\r\n    }\r\n    if (bulkRequest.numberOfActions() > 0) {\r\n        executeBulkRequest(bulkRequest);\r\n    }\r\n    if (!noContentExceptions.isEmpty()) {\r\n        for (NoContentException noContentException : noContentExceptions) {\r\n            deleteDocument(noContentException);\r\n        }\r\n    }\r\n    lastLoad = System.currentTimeMillis();\r\n    if (hits.length > 0) {\r\n        getLog().info(\"Finished indexing \" + hits.length + \" docs in \" + ((lastLoad - startTime)) + \" ms for index builder \" + getName());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.EditMeeting.checkPreCondition",
	"Comment": "check if there is any update in db before this one is saved into db\tstorage.",
	"Method": "void checkPreCondition(SignupMeeting upTodateMeeting,List<SignupMeeting> upTodateOrginMeetings){\r\n    if (upTodateMeeting == null || !originalMeetingCopy.getTitle().equals(upTodateMeeting.getTitle()) || !originalMeetingCopy.getLocation().equals(upTodateMeeting.getLocation()) || !StringUtils.equals(originalMeetingCopy.getCategory(), upTodateMeeting.getCategory()) || !StringUtils.equals(originalMeetingCopy.getCreatorUserId(), upTodateMeeting.getCreatorUserId()) || originalMeetingCopy.getStartTime().getTime() != upTodateMeeting.getStartTime().getTime() || originalMeetingCopy.getEndTime().getTime() != upTodateMeeting.getEndTime().getTime() || originalMeetingCopy.getSignupBegins().getTime() != upTodateMeeting.getSignupBegins().getTime() || originalMeetingCopy.getSignupDeadline().getTime() != upTodateMeeting.getSignupDeadline().getTime() || !originalMeetingCopy.getMeetingType().equals(upTodateMeeting.getMeetingType()) || !((originalMeetingCopy.getRecurrenceId() == null && upTodateMeeting.getRecurrenceId() == null) || (originalMeetingCopy.getRecurrenceId() != null && originalMeetingCopy.getRecurrenceId().equals(upTodateMeeting.getRecurrenceId()))) || originalMeetingCopy.getNoOfTimeSlots() != upTodateMeeting.getNoOfTimeSlots() || originalMeetingCopy.getMaxNumOfSlots().intValue() != upTodateMeeting.getMaxNumOfSlots().intValue() || originalMeetingCopy.isSendEmailByOwner() != upTodateMeeting.isSendEmailByOwner() || !((originalMeetingCopy.getDescription() == null && upTodateMeeting.getDescription() == null) || (originalMeetingCopy.getDescription() != null && upTodateMeeting.getDescription() != null) && (originalMeetingCopy.getDescription().length() == upTodateMeeting.getDescription().length())) || checkAttachmentsChanges(upTodateMeeting) || checkAdvancedUserDefinedTSCase(originalMeetingCopy, upTodateMeeting, upTodateOrginMeetings)) {\r\n        throw new SignupUserActionException(Utilities.rb.getString(\"someone.modified.event.content\"));\r\n    }\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.PlaneDiscoveryController.show",
	"Comment": "show the plane discovery ux instructions for finding a plane.",
	"Method": "void show(){\r\n    if (planeDiscoveryView == null) {\r\n        return;\r\n    }\r\n    planeDiscoveryView.setVisibility(View.VISIBLE);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getAllLocations",
	"Comment": "this method is called to get all locations to populate the dropdown, for new signup creation.",
	"Method": "List<SelectItem> getAllLocations(){\r\n    if (locations == null) {\r\n        locations = new ArrayList<SelectItem>();\r\n        locations.addAll(Utilities.getSignupMeetingsBean().getAllLocations());\r\n        locations.add(0, new SelectItem(Utilities.rb.getString(\"select_location\")));\r\n    }\r\n    return locations;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.syllabus.SyllabusManagerImpl.findLargestSyllabusPosition",
	"Comment": "findlargestsyllabusposition finds the largest syllabus data position for an item",
	"Method": "Integer findLargestSyllabusPosition(SyllabusItem syllabusItem){\r\n    if (syllabusItem == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    } else {\r\n        HibernateCallback<Integer> hcb = session -> {\r\n            Query q = session.getNamedQuery(QUERY_LARGEST_POSITION);\r\n            q.setParameter(FOREIGN_KEY, syllabusItem.getSurrogateKey(), LongType.INSTANCE);\r\n            Integer position = (Integer) q.uniqueResult();\r\n            if (position == null) {\r\n                return 0;\r\n            } else {\r\n                return position;\r\n            }\r\n        };\r\n        return getHibernateTemplate().execute(hcb);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.evaluation.AgentResults.getItemGradingArrayList",
	"Comment": "added by daisy to support to display answers to file upload question",
	"Method": "List getItemGradingArrayList(){\r\n    return itemGradingArrayList;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupEmailFacadeImpl.generateICS",
	"Comment": "generate an ics file for the user and the email message type and return as an attachment.",
	"Method": "List<Attachment> generateICS(SignupEmailNotification email,User user){\r\n    List<Attachment> attachments = new ArrayList<Attachment>();\r\n    String method = email.isCancellation() ? \"CANCEL\" : \"REQUEST\";\r\n    final List<VEvent> events = email.generateEvents(user, calendarHelper);\r\n    if (events.size() > 0) {\r\n        Attachment a = formatICSAttachment(events, method);\r\n        if (a != null) {\r\n            attachments.add(a);\r\n        }\r\n    }\r\n    return attachments;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.isSiteTypeInToolCategory",
	"Comment": "is the sitetype listed in the tool properties list of categories?",
	"Method": "boolean isSiteTypeInToolCategory(String siteType,Tool tool){\r\n    Set<Tool> tools = ToolManager.findTools(Collections.emptySet(), null);\r\n    Set<String> categories = tool.getCategories();\r\n    Iterator<String> iterator = categories.iterator();\r\n    while (iterator.hasNext()) {\r\n        String nextCat = iterator.next();\r\n        if (nextCat.equals(siteType)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.order.impl.SitePageEditHandler.allowsHide",
	"Comment": "checks to see if a given sitepage is allowed to be hidden.useful for pages with tools that have other requried permissions where setting the page as visible may not make it visible to all users and thus causes someconfusion.",
	"Method": "boolean allowsHide(String toolId,boolean allowsHide,SitePage page){\r\n    if (!(serverConfigurationService.getBoolean(HIDDEN_ENABLED_CFG, true)))\r\n        return false;\r\n    List<ToolConfiguration> tools = page.getTools();\r\n    Iterator<ToolConfiguration> iPt = tools.iterator();\r\n    boolean hideable = true;\r\n    while (hideable && iPt.hasNext()) {\r\n        ToolConfiguration placement = iPt.next();\r\n        if (!allowsHide(placement.getToolId())) {\r\n            hideable = false;\r\n        }\r\n    }\r\n    return hideable;\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.PrivacyBean.processUpdate",
	"Comment": "determines if ready to change status and calls method to do so",
	"Method": "String processUpdate(){\r\n    if (isMyWorkspace() && siteSelected) {\r\n        if (!privacyStatus.equals(\"\")) {\r\n            processChoice(isMyWorkspace() ? curSite : getContextId(), privacyStatus.equals(HIDDEN) ? false : true);\r\n        }\r\n        displayPopup = false;\r\n    }\r\n    privacyManager.setDefaultPrivacyState(getUserId(), defaultPrivacyStatus);\r\n    setUpdateMessage(true);\r\n    return \"main\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.assessment.SecureDeliveryServiceImpl.getInitialHTMLFragments",
	"Comment": "returns the initial html fragments for all active modules. the fragments are inserted into\tthe assessment list.",
	"Method": "String getInitialHTMLFragments(HttpServletRequest request,Locale locale){\r\n    StringBuilder sb = new StringBuilder();\r\n    for (SecureDeliveryModuleIfc module : secureDeliveryModules.values()) {\r\n        if (module.isEnabled()) {\r\n            String fragment = module.getInitialHTMLFragment(request, locale);\r\n            if (fragment != null && !fragment.isEmpty())\r\n                sb.append(fragment);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.FullSearchBean.pageNameFromSearchTitle",
	"Comment": "parse wiki page name from search title obtained from search api",
	"Method": "String pageNameFromSearchTitle(String searchTitle){\r\n    if (searchTitle.startsWith(\" /site/\")) {\r\n        String h = searchTitle.substring(searchTitle.lastIndexOf('/') + 1);\r\n        return h;\r\n    }\r\n    return searchTitle;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.evaluation.TotalScoresBean.getAllAgents",
	"Comment": "this will populate the submissionstatusbean with the data associated with theparticular versioned assessment based on the publishedid.",
	"Method": "List getAllAgents(){\r\n    String publishedId = ContextUtil.lookupParam(\"publishedId\");\r\n    PublishedAssessmentService pubAssessmentService = new PublishedAssessmentService();\r\n    PublishedAssessmentFacade pubAssessment = pubAssessmentService.getPublishedAssessment(publishedId);\r\n    TotalScoreListener totalScoreListener = new TotalScoreListener();\r\n    if (!totalScoreListener.totalScores(pubAssessment, this, false)) {\r\n        throw new RuntimeException(\"failed to call questionScores.\");\r\n    }\r\n    return allAgents;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.EnrolmentsHandler.setSortModeFromMyEnrolments",
	"Comment": "get the requested sort mode from the user and put it into the state.",
	"Method": "void setSortModeFromMyEnrolments(RunData data,SessionState state){\r\n    ParameterParser params = data.getParameters();\r\n    String sortParam = params.get(\"sortParam\");\r\n    if (StringUtils.isNotBlank(sortParam)) {\r\n        state.setAttribute(SORT_MODE, sortParam);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.ShortenedUrl.shortenWithSecurity",
	"Comment": "shorten a url. optionally specify the secure property to get a longer key, 22 chars vs 6.",
	"Method": "String shortenWithSecurity(String sessionid,String url,String secure){\r\n    Session session = establishSession(sessionid);\r\n    boolean isSecure = Boolean.parseBoolean(secure);\r\n    try {\r\n        return shortenedUrlService.shorten(url, isSecure);\r\n    } catch (Exception e) {\r\n        log.warn(\"WS shorten(): \" + e.getClass().getName() + \" : \" + e.getMessage());\r\n        return \"\";\r\n    }\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.RenderBean.getEditUrl",
	"Comment": "returns an url that generate a view string to the current rwikiobject",
	"Method": "String getEditUrl(){\r\n    ViewBean vb = new ViewBean(rwo.getName(), rwo.getRealm());\r\n    return vb.getEditUrl();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.item.ItemTypeExtractionStrategy.getValidType",
	"Comment": "get valid type as long matching typestringignores case and extra space.",
	"Method": "Long getValidType(String typeString){\r\n    Long type = null;\r\n    String[] typeArray = AuthoringConstantStrings.itemTypes;\r\n    for (int i = 0; i < typeArray.length; i++) {\r\n        if (typeString.trim().equalsIgnoreCase(typeArray[i])) {\r\n            type = Long.valueOf(i);\r\n            break;\r\n        }\r\n    }\r\n    return type;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getInstructorName",
	"Comment": "get the instructor name attached to the value currently set for the instructor",
	"Method": "String getInstructorName(){\r\n    return Utilities.getSignupMeetingsBean().getInstructorName(creatorUserId);\r\n}"
}, {
	"Path": "org.radeox.EngineManager.getInstance",
	"Comment": "get an instance of a renderengine. this is a factory method. defaults to\ta default renderengine. currently this is a basic enginemanager with no\tadditional features that is distributed with radeox.",
	"Method": "RenderEngine getInstance(String name,RenderEngine getInstance){\r\n    if (null == availableEngines) {\r\n        availableEngines = new HashMap();\r\n    }\r\n    if (!availableEngines.containsKey(DEFAULT)) {\r\n        RenderEngine engine = new BaseRenderEngine();\r\n        availableEngines.put(engine.getName(), engine);\r\n    }\r\n    return (RenderEngine) availableEngines.get(DEFAULT);\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.createEventRef",
	"Comment": "creates a full profile event reference for a given reference",
	"Method": "String createEventRef(String ref){\r\n    return \"/profile/\" + ref;\r\n}"
}, {
	"Path": "org.sakaiproject.component.kerberos.user.KerberosUserDirectoryProvider.findUserByEmail",
	"Comment": "find a user object who has this email address. update the object with the information found.",
	"Method": "boolean findUserByEmail(UserEdit edit,String email){\r\n    if (m_requirelocalaccount)\r\n        return false;\r\n    String test = email.toLowerCase().trim();\r\n    if (!test.endsWith(m_domain))\r\n        return false;\r\n    String[] parts = StringUtil.splitFirst(test, \"@\");\r\n    edit.setEid(parts[0]);\r\n    return getUser(edit);\r\n}"
}, {
	"Path": "org.sakaiproject.umem.tool.ui.UserListBean.exportAsXls",
	"Comment": "export the data in this user list to the response stream as an excel workbook",
	"Method": "void exportAsXls(ActionEvent event){\r\n    Export.writeAsXls(buildDataTable(userRows), \"UserListing\");\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.OrganizerSignupMBean.isShowEmailAllAttendeesLink",
	"Comment": "helper to check if we need to show the email link\tif we have email addresses, then the link shows up.",
	"Method": "boolean isShowEmailAllAttendeesLink(){\r\n    return StringUtils.isNotBlank(getAllAttendeesEmailAddressesFormatted());\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupEvent.getMaxNumberOfAttendees",
	"Comment": "get the maximum nubmer of the attendees, which is allowed in one time",
	"Method": "int getMaxNumberOfAttendees(){\r\n    if (signupTimeSlotItems == null || signupTimeSlotItems.isEmpty())\r\n        return 0;\r\n    return signupTimeSlotItems.get(0).getMaxNoOfAttendees();\r\n}"
}, {
	"Path": "org.sakaiproject.provider.user.FilterUserDirectoryProvider.destroy",
	"Comment": "returns to uninitialized state. you can use this method to release resources thet your service allocated when turbine shuts down.",
	"Method": "void destroy(){\r\n    log.info(\"destroy()\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.syllabus.entityproviders.SyllabusEntityProvider.getBaseName",
	"Comment": "the following two methods are so we can have our properties file nested in sub directories that the current syllabus bundle already provides",
	"Method": "String getBaseName(){\r\n    return \"org/sakaiproject/tool/syllabus/bundle/syllabus\";\r\n}"
}, {
	"Path": "org.sakaiproject.portal.service.BullhornServiceImpl.unlock",
	"Comment": "supply null to this and everything will be allowed. supplya list of functions and only they will be allowed.",
	"Method": "SecurityAdvisor unlock(String[] functions){\r\n    SecurityAdvisor securityAdvisor = new SecurityAdvisor() {\r\n        public SecurityAdvice isAllowed(String userId, String function, String reference) {\r\n            if (functions != null) {\r\n                if (Arrays.asList(functions).contains(function)) {\r\n                    return SecurityAdvice.ALLOWED;\r\n                } else {\r\n                    return SecurityAdvice.NOT_ALLOWED;\r\n                }\r\n            } else {\r\n                return SecurityAdvice.ALLOWED;\r\n            }\r\n        }\r\n    };\r\n    securityService.pushAdvisor(securityAdvisor);\r\n    return securityAdvisor;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.service.BullhornServiceImpl.unlock",
	"Comment": "supply null to this and everything will be allowed. supplya list of functions and only they will be allowed.",
	"Method": "SecurityAdvisor unlock(String[] functions){\r\n    if (functions != null) {\r\n        if (Arrays.asList(functions).contains(function)) {\r\n            return SecurityAdvice.ALLOWED;\r\n        } else {\r\n            return SecurityAdvice.NOT_ALLOWED;\r\n        }\r\n    } else {\r\n        return SecurityAdvice.ALLOWED;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.MathJaxEnabler.applySettingsToState",
	"Comment": "applies the current mathjax settings defined in the given params to the given state",
	"Method": "boolean applySettingsToState(SessionState state,ParameterParser params){\r\n    if (!ENABLED_AT_SYSTEM_LEVEL || state == null || params == null) {\r\n        return false;\r\n    }\r\n    if (\"on\".equals(params.getString(PARAM_MATHJAX_ENABLED_KEY))) {\r\n        state.setAttribute(STATE_KEY_IS_MATHJAX_ENABLED_FOR_SITE, true);\r\n    } else {\r\n        state.setAttribute(STATE_KEY_IS_MATHJAX_ENABLED_FOR_SITE, false);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.ControllerState.getKey",
	"Comment": "access a unique key for this state, combining the set id and the state id.",
	"Method": "String getKey(){\r\n    return m_setId + m_id;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileConnectionsLogicImpl.getConfirmedConnectionUserIdsForUser",
	"Comment": "helper method to get the list of confirmed connections for a user as a list of uuids.\tfirst checks the cache and then goes to the dao if necessary.",
	"Method": "List<String> getConfirmedConnectionUserIdsForUser(String userUuid){\r\n    List<String> userUuids = null;\r\n    if (cache.containsKey(userUuid)) {\r\n        log.debug(\"Fetching connections from cache for: \" + userUuid);\r\n        userUuids = (List<String>) cache.get(userUuid);\r\n        if (userUuids == null) {\r\n            log.debug(\"Connections cache appears to have expired for \" + userUuid);\r\n            this.cacheManager.evictFromCache(this.cache, userUuid);\r\n        }\r\n    }\r\n    if (userUuids == null) {\r\n        userUuids = dao.getConfirmedConnectionUserIdsForUser(userUuid);\r\n        if (userUuids != null) {\r\n            log.debug(\"Adding connections to cache for: \" + userUuid);\r\n            cache.put(userUuid, userUuids);\r\n        } else {\r\n            userUuids = new ArrayList<String>();\r\n        }\r\n    }\r\n    return userUuids;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.populateEMI",
	"Comment": "this method treats emi in a similar way as multiple mcmr questions",
	"Method": "void populateEMI(ItemDataIfc item,ItemContentsBean bean,Map publishedAnswerHash){\r\n    Iterator itemTextIter = item.getItemTextArraySorted().iterator();\r\n    List beans = new ArrayList();\r\n    List newAnswers = null;\r\n    while (itemTextIter.hasNext()) {\r\n        ItemTextIfc text = (ItemTextIfc) itemTextIter.next();\r\n        if (!text.isEmiQuestionItemText())\r\n            continue;\r\n        MatchingBean mbean = new MatchingBean();\r\n        newAnswers = new ArrayList();\r\n        mbean.setText(text.getText());\r\n        mbean.setItemSequence(text.getSequence() + \"\");\r\n        mbean.setItemText(text);\r\n        mbean.setItemContentsBean(bean);\r\n        Iterator itemTextAnwersIter = text.getAnswerArraySorted().iterator();\r\n        int i = 0;\r\n        ResourceLoader rb = null;\r\n        if (rb == null) {\r\n            rb = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.DeliveryMessages\");\r\n        }\r\n        int responseCount = 0;\r\n        List userResponseLabels = new ArrayList();\r\n        Iterator itemGradingIter = bean.getItemGradingDataArray().iterator();\r\n        while (itemGradingIter.hasNext()) {\r\n            ItemGradingData data = (ItemGradingData) itemGradingIter.next();\r\n            if (data.getPublishedItemTextId().equals(text.getId())) {\r\n                AnswerIfc pubAnswer = (AnswerIfc) publishedAnswerHash.get(data.getPublishedAnswerId());\r\n                if (pubAnswer != null) {\r\n                    userResponseLabels.add(pubAnswer.getLabel());\r\n                    data.setPublishedAnswerId(pubAnswer.getId());\r\n                }\r\n            }\r\n        }\r\n        Collections.sort(userResponseLabels);\r\n        String previousResponse = \"\";\r\n        Iterator sortedLabels = userResponseLabels.iterator();\r\n        while (sortedLabels.hasNext()) {\r\n            previousResponse += sortedLabels.next().toString();\r\n        }\r\n        mbean.setResponse(previousResponse);\r\n        beans.add(mbean);\r\n    }\r\n    bean.setMatchingArray(beans);\r\n    bean.setAnswers(newAnswers);\r\n    bean.setIsMultipleItems(beans.size() > 1);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.QuestionPoolService.removeQuestionFromPool",
	"Comment": "removes a question from the question pool. this does not the question itself",
	"Method": "void removeQuestionFromPool(Long questionId,Long poolId){\r\n    try {\r\n        PersistenceService.getInstance().getQuestionPoolFacadeQueries().removeItemFromPool(questionId, poolId);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "au.edu.anu.portal.portlets.rss.FeedParser.formatLength",
	"Comment": "helper to format the length from bytes into a human readable format eg 126 kb",
	"Method": "String formatLength(long length){\r\n    return FileUtils.byteCountToDisplaySize(length);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.SignupAction.removeAttendeeFromAttendeesList",
	"Comment": "when one attendee is removed from the singup list, the people on waiting\tlist will be promoted into this spot.",
	"Method": "void removeAttendeeFromAttendeesList(SignupMeeting meeting,SignupTimeslot currentTimeslot,SignupAttendee attendee){\r\n    String attendeeUserId = attendee.getAttendeeUserId();\r\n    List<SignupTimeslot> signupTimeSlots = meeting.getSignupTimeSlots();\r\n    int maxAllowedTimeslotsPerAttn = meeting.getMaxNumOfSlots();\r\n    int currentCountForAttn = 1;\r\n    for (SignupTimeslot upToDateTimeslot : signupTimeSlots) {\r\n        if (currentTimeslot.getId().equals(upToDateTimeslot.getId()))\r\n            continue;\r\n        List<SignupAttendee> attendees = upToDateTimeslot.getAttendees();\r\n        boolean foundAttendee = false;\r\n        for (Iterator iter = attendees.iterator(); iter.hasNext(); ) {\r\n            SignupAttendee att = (SignupAttendee) iter.next();\r\n            if (attendeeUserId.equals(att.getAttendeeUserId())) {\r\n                currentCountForAttn++;\r\n                if (currentCountForAttn > maxAllowedTimeslotsPerAttn) {\r\n                    iter.remove();\r\n                    signupEventTrackingInfo.addOrUpdateAttendeeAllocationInfo(att, upToDateTimeslot, SignupEmailFacade.SIGNUP_ATTENDEE_CANCEL, false);\r\n                    promoteAttendeeFromWaitingList(meeting, upToDateTimeslot);\r\n                    foundAttendee = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (foundAttendee) {\r\n            break;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.PagedResourceAction.enableObserver",
	"Comment": "enable the observer, unless we are in search mode, where we want it disabled.",
	"Method": "void enableObserver(SessionState state){\r\n    ObservingCourier observer = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\r\n    if (observer != null) {\r\n        if ((state.getAttribute(STATE_SEARCH) != null) || (state.getAttribute(STATE_MANUAL_REFRESH) != null)) {\r\n            observer.disable();\r\n        } else {\r\n            observer.enable();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.updateCourseSiteSections",
	"Comment": "update course site and related realm based on the roster chosen or requested",
	"Method": "void updateCourseSiteSections(SessionState state,String siteId,ResourcePropertiesEdit rp,AcademicSession term){\r\n    boolean editingSite = ((String) state.getAttribute(STATE_SITE_MODE)).equals(SITE_MODE_SITEINFO) ? true : false;\r\n    List providerCourseList = state.getAttribute(STATE_ADD_CLASS_PROVIDER_CHOSEN) == null ? new ArrayList() : (List) state.getAttribute(STATE_ADD_CLASS_PROVIDER_CHOSEN);\r\n    int manualAddNumber = 0;\r\n    if (state.getAttribute(STATE_MANUAL_ADD_COURSE_NUMBER) != null) {\r\n        manualAddNumber = ((Integer) state.getAttribute(STATE_MANUAL_ADD_COURSE_NUMBER)).intValue();\r\n    }\r\n    List<SectionObject> cmRequestedSections = (List<SectionObject>) state.getAttribute(STATE_CM_REQUESTED_SECTIONS);\r\n    List<SectionObject> cmAuthorizerSections = (List<SectionObject>) state.getAttribute(STATE_CM_AUTHORIZER_SECTIONS);\r\n    String realm = SiteService.siteReference(siteId);\r\n    if ((providerCourseList != null) && (providerCourseList.size() != 0)) {\r\n        try {\r\n            AuthzGroup realmEdit = authzGroupService.getAuthzGroup(realm);\r\n            String providerRealm = buildExternalRealm(siteId, state, providerCourseList, StringUtils.trimToNull(realmEdit.getProviderGroupId()));\r\n            realmEdit.setProviderGroupId(providerRealm);\r\n            authzGroupService.save(realmEdit);\r\n        } catch (GroupNotDefinedException e) {\r\n            log.error(this + \".updateCourseSiteSections: IdUnusedException, not found, or not an AuthzGroup object\", e);\r\n            addAlert(state, rb.getString(\"java.realm\"));\r\n        } catch (AuthzPermissionException e) {\r\n            log.warn(this + rb.getString(\"java.notaccess\"));\r\n            addAlert(state, rb.getString(\"java.notaccess\"));\r\n        }\r\n        sendSiteNotification(state, getStateSite(state), providerCourseList);\r\n        trackRosterChanges(org.sakaiproject.site.api.SiteService.EVENT_SITE_ROSTER_ADD, providerCourseList);\r\n    }\r\n    if (manualAddNumber != 0) {\r\n        String manualSections = rp.getProperty(PROP_SITE_REQUEST_COURSE) != null ? rp.getProperty(PROP_SITE_REQUEST_COURSE) + \"+\" : \"\";\r\n        List manualCourseInputs = (List) state.getAttribute(STATE_MANUAL_ADD_COURSE_FIELDS);\r\n        for (int j = 0; j < manualAddNumber; j++) {\r\n            manualSections = manualSections.concat(sectionFieldProvider.getSectionEid(term.getEid(), (List) manualCourseInputs.get(j))).concat(\"+\");\r\n        }\r\n        manualSections = trimTrailingString(manualSections, \"+\");\r\n        rp.addProperty(PROP_SITE_REQUEST_COURSE, manualSections);\r\n        sendSiteRequest(state, \"new\", manualAddNumber, manualCourseInputs, \"manual\");\r\n    }\r\n    if (cmRequestedSections != null && cmRequestedSections.size() > 0 || state.getAttribute(STATE_CM_SELECTED_SECTIONS) != null) {\r\n        String cmRequestedSectionString = \"\";\r\n        if (!editingSite) {\r\n            for (int j = 0; j < cmRequestedSections.size(); j++) {\r\n                cmRequestedSectionString = cmRequestedSectionString.concat((cmRequestedSections.get(j)).eid).concat(\"+\");\r\n            }\r\n            cmRequestedSectionString = trimTrailingString(cmRequestedSectionString, \"+\");\r\n            sendSiteRequest(state, \"new\", cmRequestedSections.size(), cmRequestedSections, \"cmRequest\");\r\n        } else {\r\n            cmRequestedSectionString = rp.getProperty(STATE_CM_REQUESTED_SECTIONS) != null ? (String) rp.getProperty(STATE_CM_REQUESTED_SECTIONS) : \"\";\r\n            if (state.getAttribute(STATE_CM_SELECTED_SECTIONS) != null) {\r\n                List<SectionObject> cmSelectedSections = (List) state.getAttribute(STATE_CM_SELECTED_SECTIONS);\r\n                if (cmRequestedSectionString.length() != 0) {\r\n                    cmRequestedSectionString = cmRequestedSectionString.concat(\"+\");\r\n                }\r\n                for (int j = 0; j < cmSelectedSections.size(); j++) {\r\n                    cmRequestedSectionString = cmRequestedSectionString.concat((cmSelectedSections.get(j)).eid).concat(\"+\");\r\n                }\r\n                cmRequestedSectionString = trimTrailingString(cmRequestedSectionString, \"+\");\r\n                sendSiteRequest(state, \"new\", cmSelectedSections.size(), cmSelectedSections, \"cmRequest\");\r\n            }\r\n        }\r\n        if (cmRequestedSectionString.length() > 0) {\r\n            rp.addProperty(STATE_CM_REQUESTED_SECTIONS, cmRequestedSectionString);\r\n        } else {\r\n            rp.removeProperty(STATE_CM_REQUESTED_SECTIONS);\r\n        }\r\n    }\r\n    if (cmAuthorizerSections != null && cmAuthorizerSections.size() > 0 || state.getAttribute(STATE_CM_SELECTED_SECTIONS) != null) {\r\n        String cmAuthorizerSectionString = \"\";\r\n        if (!editingSite) {\r\n            for (int j = 0; j < cmAuthorizerSections.size(); j++) {\r\n                cmAuthorizerSectionString = cmAuthorizerSectionString.concat((cmAuthorizerSections.get(j)).eid).concat(\"+\");\r\n            }\r\n            cmAuthorizerSectionString = trimTrailingString(cmAuthorizerSectionString, \"+\");\r\n            sendSiteRequest(state, \"new\", cmAuthorizerSections.size(), cmAuthorizerSections, \"cmRequest\");\r\n        } else {\r\n            cmAuthorizerSectionString = rp.getProperty(STATE_CM_AUTHORIZER_SECTIONS) != null ? (String) rp.getProperty(STATE_CM_AUTHORIZER_SECTIONS) : \"\";\r\n            if (state.getAttribute(STATE_CM_SELECTED_SECTIONS) != null) {\r\n                List<SectionObject> cmSelectedSections = (List) state.getAttribute(STATE_CM_SELECTED_SECTIONS);\r\n                if (cmAuthorizerSectionString.length() != 0) {\r\n                    cmAuthorizerSectionString = cmAuthorizerSectionString.concat(\"+\");\r\n                }\r\n                for (int j = 0; j < cmSelectedSections.size(); j++) {\r\n                    cmAuthorizerSectionString = cmAuthorizerSectionString.concat((cmSelectedSections.get(j)).eid).concat(\"+\");\r\n                }\r\n                cmAuthorizerSectionString = trimTrailingString(cmAuthorizerSectionString, \"+\");\r\n                sendSiteRequest(state, \"new\", cmSelectedSections.size(), cmSelectedSections, \"cmRequest\");\r\n            }\r\n        }\r\n        if (cmAuthorizerSectionString.length() > 0) {\r\n            rp.addProperty(STATE_CM_AUTHORIZER_SECTIONS, cmAuthorizerSectionString);\r\n        } else {\r\n            rp.removeProperty(STATE_CM_AUTHORIZER_SECTIONS);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.evaluation.TotalScoresBean.getAnsweredItems",
	"Comment": "this returns a map of which items actually have answers.used by questionscores.",
	"Method": "Map getAnsweredItems(){\r\n    return answeredItems;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.sortCmObject",
	"Comment": "custom sort cm collections provided object has getter & setter for \t eid & title",
	"Method": "Collection sortCmObject(Collection collection,String[] keys,String[] orders,Collection sortCmObject,Collection collection){\r\n    return sortCmObject(collection, null, null);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.JoinableSiteSettings.putSiteGroupsIntoContext",
	"Comment": "put all the groups for the given site into the context, excluding official rosters.",
	"Method": "boolean putSiteGroupsIntoContext(Site site,Context context){\r\n    if (site == null || context == null) {\r\n        return false;\r\n    }\r\n    Collection<Group> groups = site.getGroups();\r\n    Iterator<Group> itr = groups.iterator();\r\n    while (itr.hasNext()) {\r\n        Group group = itr.next();\r\n        if (group.getProviderGroupId() != null) {\r\n            itr.remove();\r\n        }\r\n    }\r\n    List<Group> sortedGroupsWithoutRosters = new ArrayList<Group>(groups);\r\n    Collections.sort(sortedGroupsWithoutRosters, new GroupTitleComparator());\r\n    groups = sortedGroupsWithoutRosters;\r\n    context.put(CONTEXT_JOIN_SITE_GROUPS, groups);\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.prepareTitle",
	"Comment": "return the title of the 1st section in the chosen list that has an\tenrollment set. no discrimination on section category",
	"Method": "String prepareTitle(List sectionList,List chosenList){\r\n    String title = null;\r\n    HashMap map = new HashMap();\r\n    for (Iterator i = sectionList.iterator(); i.hasNext(); ) {\r\n        SectionObject o = (SectionObject) i.next();\r\n        map.put(o.getEid(), o.getSection());\r\n    }\r\n    for (int j = 0; j < chosenList.size(); j++) {\r\n        String eid = (String) chosenList.get(j);\r\n        Section s = (Section) map.get(eid);\r\n        if (j == 0) {\r\n            title = s.getTitle();\r\n        }\r\n        if (s.getEnrollmentSet() != null) {\r\n            title = s.getTitle();\r\n            break;\r\n        }\r\n    }\r\n    return title;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemBean.getMutuallyExclusiveForFin",
	"Comment": "for fin, mutually exclusive for multiple answers,for grading?",
	"Method": "boolean getMutuallyExclusiveForFin(){\r\n    return mutuallyExclusiveForFin;\r\n}"
}, {
	"Path": "schemacrawler.crawl.ForeignKeyRetriever.lookupOrCreateColumn",
	"Comment": "looks up a column in the database. if the column and table are notfound, they are created, and added to the schema. this is preventforeign key relationships from having a null pointer.",
	"Method": "Column lookupOrCreateColumn(String catalogName,String schemaName,String tableName,String columnName){\r\n    Column column = null;\r\n    final Optional<MutableTable> tableOptional = catalog.lookupTable(Arrays.asList(catalogName, schemaName, tableName));\r\n    if (tableOptional.isPresent()) {\r\n        final Table table = tableOptional.get();\r\n        final Optional<? extends Column> columnOptional = table.lookupColumn(columnName);\r\n        if (columnOptional.isPresent()) {\r\n            column = columnOptional.get();\r\n        }\r\n    }\r\n    if (column == null && !isBlank(columnName)) {\r\n        final Schema schema = new SchemaReference(catalogName, schemaName);\r\n        final Table table = new TablePartial(schema, tableName);\r\n        column = new ColumnPartial(table, columnName);\r\n        ((TablePartial) table).addColumn(column);\r\n        LOGGER.log(Level.FINER, new StringFormat(\"Creating column reference for a column that is referenced by a foreign key <%s>\", column.getFullName()));\r\n    }\r\n    return column;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.VelocityPortletPaneledAction.titlePanelUpdateId",
	"Comment": "compute the courier update html element id for the title panel.",
	"Method": "String titlePanelUpdateId(String toolId){\r\n    return Validator.escapeJavascript(\"Title\" + toolId);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Delta.init",
	"Comment": "initializaes the delta with the given chunks from the original and\trevised texts.",
	"Method": "void init(Chunk orig,Chunk rev){\r\n    original = orig;\r\n    revised = rev;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.conversion.ProfileConverter.enableSecurityAdvisor",
	"Comment": "add the supplied security advisor to the stack for this transaction",
	"Method": "void enableSecurityAdvisor(SecurityAdvisor securityAdvisor){\r\n    securityService.pushAdvisor(securityAdvisor);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.addPhrase",
	"Comment": "add a new phrase to the archive.phrases are used to provide for extensions of the archive format.each phrase has a key and a list of values associated with it.",
	"Method": "void addPhrase(String key,Collection values){\r\n    phrases.put(key, values);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.TypeFacadeQueries.getTypeFacadeById",
	"Comment": "this method returns the typefacade with the specified typeid foundin the typefacademap that lives in cache.",
	"Method": "TypeFacade getTypeFacadeById(Long typeId){\r\n    TypeFacade typeFacade = null;\r\n    Map<Long, TypeFacade> typeMap = getTypeFacadeMap();\r\n    typeFacade = typeMap.get(typeId);\r\n    return typeFacade;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemBean.getMutuallyExclusiveForFib",
	"Comment": "for fib, mutually exclusive for multiple answers,for grading?",
	"Method": "boolean getMutuallyExclusiveForFib(){\r\n    return mutuallyExclusiveForFib;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ViewBean.getViewUrl",
	"Comment": "returns a string representation of an url to view the passed in page",
	"Method": "String getViewUrl(String getViewUrl,String name){\r\n    return getPageUrl(NameHelper.globaliseName(name, localSpace), WikiPageAction.VIEW_ACTION.getName());\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.ControllerServlet2.isPageRestorable",
	"Comment": "check to see if the request represents a page that can act as a restor\tpoint.",
	"Method": "boolean isPageRestorable(HttpServletRequest request){\r\n    if (TITLE_PANEL.equals(request.getParameter(PANEL)))\r\n        return false;\r\n    String pathInfo = request.getPathInfo();\r\n    if (pathInfo != null) {\r\n        if (request.getPathInfo().endsWith(\".gif\")) {\r\n            return false;\r\n        }\r\n        if (request.getPathInfo().endsWith(\".src\")) {\r\n            return false;\r\n        }\r\n    }\r\n    if (\"GET\".equalsIgnoreCase(request.getMethod()))\r\n        return true;\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.site.PortalSiteHelperImpl.getSiteVisit",
	"Comment": "do the getsitevisit, but if not found and the id is a user site, try\ttranslating from user eid to id.",
	"Method": "Site getSiteVisit(String siteId){\r\n    try {\r\n        return SiteService.getSiteVisit(siteId);\r\n    } catch (IdUnusedException e) {\r\n        if (SiteService.isUserSite(siteId)) {\r\n            try {\r\n                String userEid = SiteService.getSiteUserId(siteId);\r\n                String userId = UserDirectoryService.getUserId(userEid);\r\n                String alternateSiteId = SiteService.getUserSiteId(userId);\r\n                return SiteService.getSiteVisit(alternateSiteId);\r\n            } catch (UserNotDefinedException ee) {\r\n            }\r\n        } else {\r\n            String reference = portal.getSiteNeighbourhoodService().parseSiteAlias(siteId);\r\n            if (reference != null) {\r\n                Reference ref = EntityManager.getInstance().newReference(reference);\r\n                try {\r\n                    return SiteService.getSiteVisit(ref.getId());\r\n                } catch (IdUnusedException iue) {\r\n                }\r\n            }\r\n        }\r\n        throw e;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.PortalNeochatEnabler.addToEditToolsContext",
	"Comment": "add portalneochat settings to the context for the edit tools page",
	"Method": "boolean addToEditToolsContext(Context context,Site site,SessionState state){\r\n    if (context == null || site == null || state == null || !isEnabledForSite(site)) {\r\n        return false;\r\n    }\r\n    context.put(CONTEXT_ENABLED_KEY, isEnabledForSite(site));\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.util.SiteTypeUtil.getTargetSiteType",
	"Comment": "returns the site type string to use for sites created based on the template site with sitetype",
	"Method": "String getTargetSiteType(String siteType){\r\n    String rv = siteType;\r\n    if (isCourseSite(siteType)) {\r\n        rv = serverConfigurationService.getString(\"courseSiteTargetType\", siteType);\r\n    } else if (isProjectSite(siteType)) {\r\n        rv = serverConfigurationService.getString(\"projectSiteTargetType\", siteType);\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingWrapper.getStartTime",
	"Comment": "this is mainly used for showing my appointment time frame at ui.",
	"Method": "Date getStartTime(){\r\n    if (!isShowMyAppointmentTimeFrame())\r\n        return meeting.getStartTime();\r\n    return startTime != null ? startTime : meeting.getStartTime();\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TransformationSystem.deselectNode",
	"Comment": "deselects the currently selected node if the node is not currently transforming.",
	"Method": "boolean deselectNode(){\r\n    if (selectedNode == null) {\r\n        return true;\r\n    }\r\n    if (selectedNode.isTransforming()) {\r\n        return false;\r\n    }\r\n    selectionVisualizer.removeSelectionVisual(selectedNode);\r\n    selectedNode = null;\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getPageContentsByQuestion",
	"Comment": "gets a contents bean for the current page if is format by question.",
	"Method": "ContentsDeliveryBean getPageContentsByQuestion(PublishedAssessmentFacade publishedAssessment,int itemIndex,int sectionIndex,Map itemGradingHash,DeliveryBean delivery,Map publishedAnswerHash){\r\n    ContentsDeliveryBean contents = new ContentsDeliveryBean();\r\n    double currentScore = 0;\r\n    double maxScore = 0;\r\n    int sectionCount = 0;\r\n    int questionCount = 0;\r\n    List partSet = publishedAssessment.getSectionArraySorted();\r\n    Iterator iter = partSet.iterator();\r\n    List partsContents = new ArrayList();\r\n    if (itemIndex < 0) {\r\n        sectionIndex--;\r\n        delivery.setPartIndex(sectionIndex);\r\n    }\r\n    while (iter.hasNext()) {\r\n        SectionDataIfc secFacade = (SectionDataIfc) iter.next();\r\n        SectionContentsBean partBean = getPartBean(secFacade, itemGradingHash, delivery, publishedAnswerHash);\r\n        partBean.setNumParts(Integer.toString(partSet.size()));\r\n        currentScore += partBean.getPoints();\r\n        maxScore += partBean.getMaxPoints();\r\n        List<ItemDataIfc> itemlist = secFacade.getItemArray();\r\n        long seed = getSeed(secFacade, delivery, (long) AgentFacade.getAgentString().hashCode());\r\n        List<ItemDataIfc> sortedlist = getItemArraySortedWithRandom(secFacade, itemlist, seed);\r\n        questionCount = sortedlist.size();\r\n        if ((delivery.getNoQuestions() || questionCount != 0) && itemIndex > (questionCount - 1) && sectionCount == sectionIndex) {\r\n            sectionIndex++;\r\n            delivery.setPartIndex(sectionIndex);\r\n            itemIndex = 0;\r\n            delivery.setQuestionIndex(itemIndex);\r\n            delivery.setNoQuestions(false);\r\n        }\r\n        if (itemIndex < 0 && sectionCount == sectionIndex) {\r\n            itemIndex = questionCount - 1;\r\n            delivery.setQuestionIndex(itemIndex);\r\n        }\r\n        if (sectionCount++ == sectionIndex) {\r\n            SectionContentsBean partBeanWithQuestion = this.getPartBeanWithOneQuestion(secFacade, itemIndex, itemGradingHash, delivery, publishedAnswerHash);\r\n            partBeanWithQuestion.setNumParts(Integer.toString(partSet.size()));\r\n            partsContents.add(partBeanWithQuestion);\r\n            if (questionCount == 0) {\r\n                partBeanWithQuestion.setNoQuestions(true);\r\n                delivery.setNoQuestions(true);\r\n            } else {\r\n                partBeanWithQuestion.setNoQuestions(false);\r\n                delivery.setNoQuestions(false);\r\n            }\r\n            if (iter.hasNext() || itemIndex < (questionCount - 1)) {\r\n                delivery.setContinue(true);\r\n            } else {\r\n                delivery.setContinue(false);\r\n            }\r\n            if (itemIndex > 0 || sectionIndex > 0) {\r\n                delivery.setPrevious(true);\r\n            } else {\r\n                delivery.setPrevious(false);\r\n            }\r\n        }\r\n    }\r\n    contents.setCurrentScore(currentScore);\r\n    contents.setMaxScore(maxScore);\r\n    contents.setPartsContents(partsContents);\r\n    contents.setShowStudentScore(delivery.isShowStudentScore());\r\n    return contents;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getPartBeanWithOneQuestion",
	"Comment": "populate a sectioncontentsbean properties and populate with itemcontentsbean",
	"Method": "SectionContentsBean getPartBeanWithOneQuestion(SectionDataIfc part,int itemIndex,Map itemGradingHash,DeliveryBean delivery,Map publishedAnswerHash){\r\n    double maxPoints = 0;\r\n    double points = 0;\r\n    int unansweredQuestions = 0;\r\n    int itemCount = 0;\r\n    SectionContentsBean sec = new SectionContentsBean(part);\r\n    List<ItemDataIfc> itemlist = part.getItemArray();\r\n    long seed = getSeed(part, delivery, (long) AgentFacade.getAgentString().hashCode());\r\n    List<ItemDataIfc> itemSet = getItemArraySortedWithRandom(part, itemlist, seed);\r\n    sec.setQuestions(itemSet.size());\r\n    if (delivery.getSettings().getItemNumbering().equals(AssessmentAccessControl.RESTART_NUMBERING_BY_PART.toString())) {\r\n        sec.setNumbering(itemSet.size());\r\n    } else {\r\n        sec.setNumbering(((Long) itemGradingHash.get(\"items\")).intValue());\r\n    }\r\n    sec.setText(part.getTitle());\r\n    sec.setDescription(part.getDescription());\r\n    sec.setNumber(\"\" + part.getSequence());\r\n    Iterator iter = itemSet.iterator();\r\n    List itemContents = new ArrayList();\r\n    int i = 0;\r\n    while (iter.hasNext()) {\r\n        ItemDataIfc thisitem = (ItemDataIfc) iter.next();\r\n        ItemContentsBean itemBean = getQuestionBean(thisitem, itemGradingHash, delivery, publishedAnswerHash);\r\n        itemBean.setNumber(++i);\r\n        if (delivery.getSettings().getItemNumbering().equals(AssessmentAccessControl.RESTART_NUMBERING_BY_PART.toString())) {\r\n            itemBean.setSequence(Integer.toString(itemBean.getNumber()));\r\n        } else {\r\n            itemBean.setSequence(((Integer) itemGradingHash.get(\"sequence\" + thisitem.getItemId().toString())).toString());\r\n        }\r\n        maxPoints += itemBean.getMaxPoints();\r\n        points += itemBean.getExactPoints();\r\n        itemBean.setShowStudentScore(delivery.isShowStudentScore());\r\n        itemBean.setShowStudentQuestionScore(delivery.isShowStudentQuestionScore());\r\n        if (itemBean.isUnanswered()) {\r\n            unansweredQuestions++;\r\n        }\r\n        if (itemCount++ == itemIndex) {\r\n            itemContents.add(itemBean);\r\n        }\r\n    }\r\n    sec.setMaxPoints(maxPoints);\r\n    sec.setPoints(points);\r\n    sec.setShowStudentQuestionScore(delivery.isShowStudentQuestionScore());\r\n    sec.setUnansweredQuestions(unansweredQuestions);\r\n    sec.setItemContents(itemContents);\r\n    return sec;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.copySite",
	"Comment": "create a new site based on another site. this will copy its tool structure, but not its content",
	"Method": "String copySite(String sessionid,String siteidtocopy,String newsiteid,String title,String description,String shortdesc,String iconurl,String infourl,boolean joinable,String joinerrole,boolean published,boolean publicview,String skin,String type){\r\n    Session session = establishSession(sessionid);\r\n    try {\r\n        Site site = siteService.getSite(siteidtocopy);\r\n        if (!securityService.isSuperUser(session.getUserId()) && !securityService.unlock(SiteService.SECURE_UPDATE_SITE, site.getReference())) {\r\n            log.warn(\"WS copySite(): Permission denied. Must be super user to copy a site in which you are not a maintainer.\");\r\n            throw new RuntimeException(\"WS copySite(): Permission denied. Must be super user to copy a site in which you are not a maintainer.\");\r\n        }\r\n        if (description != null) {\r\n            StringBuilder alertMsg = new StringBuilder();\r\n            description = FormattedText.processFormattedText(description, alertMsg);\r\n            if (description == null) {\r\n                throw new RuntimeException(\"Site description markup rejected: \" + alertMsg.toString());\r\n            }\r\n        }\r\n        Site siteEdit = siteService.addSite(newsiteid, site);\r\n        siteEdit.setTitle(title);\r\n        siteEdit.setDescription(description);\r\n        siteEdit.setShortDescription(shortdesc);\r\n        siteEdit.setIconUrl(iconurl);\r\n        siteEdit.setInfoUrl(infourl);\r\n        siteEdit.setJoinable(joinable);\r\n        siteEdit.setJoinerRole(joinerrole);\r\n        siteEdit.setPublished(published);\r\n        siteEdit.setPubView(publicview);\r\n        siteEdit.setSkin(skin);\r\n        siteEdit.setType(type);\r\n        siteService.save(siteEdit);\r\n    } catch (Exception e) {\r\n        log.error(\"WS copySite(): \" + e.getClass().getName() + \" : \" + e.getMessage());\r\n        return e.getClass().getName() + \" : \" + e.getMessage();\r\n    }\r\n    return \"success\";\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.TimeslotWrapper.getLabel",
	"Comment": "this is a getter method, which gives a formated timeslot period.",
	"Method": "String getLabel(){\r\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat();\r\n    simpleDateFormat.applyPattern(\", EEE\");\r\n    return SignupDateFormat.format_h_mm_a(timeSlot.getStartTime()) + simpleDateFormat.format(timeSlot.getStartTime()) + \" - \" + SignupDateFormat.format_h_mm_a(timeSlot.getEndTime()) + simpleDateFormat.format(timeSlot.getEndTime()) + \", \" + SignupDateFormat.format_date_mm_dd_yy(timeSlot.getEndTime());\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.PrePopulateBean.doPrepopulate",
	"Comment": "populates the current realm, relying on the service for caching etc.",
	"Method": "void doPrepopulate(){\r\n    log.debug(this.getClass().getName() + \" current-user: \" + woksiteOwner + \" pre-populating realm \" + currentPageRealm);\r\n    populateService.populateRealm(woksiteOwner, currentPageRealm, currentGroup);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.InitializableBean.endProcessValidators",
	"Comment": "remember if jsf entered the validations phase. if so, and if we never\treach the update model values phase, then validation failed. that may\tbe of interest to the backing bean. for example, the backing bean\tmay choose not to requery and reload data on a validation error.",
	"Method": "void endProcessValidators(){\r\n    setNotValidated(true);\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"endProcessValidators\");\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingsBean.getInstructors",
	"Comment": "get a list of instructors, defined as those with a given permission. format it as a selectitem list with the\tcurrent instructor, if any, at the top",
	"Method": "List<SelectItem> getInstructors(SignupMeeting meeting){\r\n    List<User> users = sakaiFacade.getUsersWithPermission(SakaiFacade.SIGNUP_CREATE_SITE);\r\n    List<SelectItem> instructors = new ArrayList<SelectItem>();\r\n    if (meeting != null && StringUtils.isNotBlank(meeting.getCreatorUserId())) {\r\n        User currentInstructor = sakaiFacade.getUser(meeting.getCreatorUserId());\r\n        instructors.add(new SelectItem(currentInstructor.getId(), currentInstructor.getDisplayName() + \" (\" + currentInstructor.getEid() + \")\"));\r\n        users.remove(currentInstructor);\r\n    } else {\r\n        User currentUser = sakaiFacade.getUser(sakaiFacade.getCurrentUserId());\r\n        instructors.add(new SelectItem(currentUser.getId(), currentUser.getDisplayName() + \" (\" + currentUser.getEid() + \")\"));\r\n        users.remove(currentUser);\r\n    }\r\n    for (User u : users) {\r\n        instructors.add(new SelectItem(u.getId(), u.getDisplayName() + \" (\" + u.getDisplayId() + \")\"));\r\n    }\r\n    Collections.sort(instructors, SignupSorter.sortSelectItemComparator);\r\n    return instructors;\r\n}"
}, {
	"Path": "sf.util.IOUtility.isFileWritable",
	"Comment": "checks if an output file can be written. the file does not need toexist.",
	"Method": "boolean isFileWritable(Path file){\r\n    if (file == null) {\r\n        return false;\r\n    }\r\n    if (isDirectory(file)) {\r\n        return false;\r\n    }\r\n    final Path parentPath = file.getParent();\r\n    if (parentPath == null || !exists(parentPath) || !isDirectory(parentPath) || !isWritable(parentPath)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.createAvatar",
	"Comment": "creates a square avatar image by taking a segment out of the centre of the original image and resizing to the appropriate dimensions",
	"Method": "byte[] createAvatar(byte[] imageData,String mimeType){\r\n    InputStream in = null;\r\n    byte[] outputBytes = null;\r\n    try {\r\n        in = new ByteArrayInputStream(imageData);\r\n        BufferedImage originalImage = ImageIO.read(in);\r\n        int smallestSide = originalImage.getWidth();\r\n        if (originalImage.getHeight() < originalImage.getWidth()) {\r\n            smallestSide = originalImage.getHeight();\r\n        }\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"smallestSide:\" + smallestSide);\r\n        }\r\n        int startX = (originalImage.getWidth() / 2) - (smallestSide / 2);\r\n        int startY = (originalImage.getHeight() / 2) - (smallestSide / 2);\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"originalImage.getWidth():\" + originalImage.getWidth());\r\n            log.debug(\"originalImage.getHeight():\" + originalImage.getHeight());\r\n            log.debug(\"startX:\" + startX);\r\n            log.debug(\"startY:\" + startY);\r\n        }\r\n        BufferedImage croppedImage = Scalr.crop(originalImage, startX, startY, smallestSide, smallestSide);\r\n        BufferedImage scaledImage = Scalr.resize(croppedImage, 80);\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        ImageIO.write(scaledImage, getInformalFormatForMimeType(mimeType), baos);\r\n        baos.flush();\r\n        outputBytes = baos.toByteArray();\r\n        baos.close();\r\n    } catch (Exception e) {\r\n        log.error(\"Cropping and scaling image failed.\", e);\r\n    } finally {\r\n        if (in != null) {\r\n            try {\r\n                in.close();\r\n                log.debug(\"Image stream closed.\");\r\n            } catch (IOException e) {\r\n                log.error(\"Error closing image stream: \", e);\r\n            }\r\n        }\r\n    }\r\n    return outputBytes;\r\n}"
}, {
	"Path": "org.sakaiproject.vm.VmServlet.includeVm",
	"Comment": "include the velocity template, expanded with the current set of references",
	"Method": "void includeVm(String template,HttpServletRequest request,HttpServletResponse response){\r\n    setVmStdRef(request, response);\r\n    response.setContentType(\"text/html\");\r\n    request.setAttribute(\"sakai.vm.path\", template);\r\n    try {\r\n        RequestDispatcher dispatcher = getServletContext().getNamedDispatcher(\"sakai.vm\");\r\n        dispatcher.include(request, response);\r\n    } catch (IOException e) {\r\n        throw new ServletException(\"includeVm: template: \" + template, e);\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.crawl.MetadataResultSet.getShort",
	"Comment": "reads the value of a column from the result set as a short. if thevalue was null, returns the default.",
	"Method": "short getShort(String columnName,short defaultValue){\r\n    short value = defaultValue;\r\n    if (useColumn(columnName)) {\r\n        try {\r\n            value = results.getShort(columnName);\r\n            if (results.wasNull()) {\r\n                LOGGER.log(Level.FINER, new StringFormat(\"NULL short value for column <%s>, so using default %d\", columnName, defaultValue));\r\n                value = defaultValue;\r\n            }\r\n        } catch (final SQLException e) {\r\n            LOGGER.log(Level.WARNING, new StringFormat(\"Could not read short value for column <%s>\", columnName), e);\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaInfoLevelBuilder.maximum",
	"Comment": "creates a new schemainfolevel for maximum schema information.",
	"Method": "SchemaInfoLevelBuilder maximum(){\r\n    final SchemaInfoLevelBuilder maximum = detailed();\r\n    maximum.setRetrieveAdditionalDatabaseInfo(true);\r\n    maximum.setRetrieveServerInfo(true);\r\n    maximum.setRetrieveAdditionalJdbcDriverInfo(true);\r\n    maximum.setRetrieveTablePrivileges(true);\r\n    maximum.setRetrieveTableColumnPrivileges(true);\r\n    maximum.setRetrieveTableDefinitionsInformation(true);\r\n    maximum.setRetrieveForeignKeyDefinitions(true);\r\n    maximum.setRetrievePrimaryKeyDefinitions(true);\r\n    maximum.setRetrieveAdditionalTableAttributes(true);\r\n    maximum.setRetrieveAdditionalColumnAttributes(true);\r\n    maximum.setRetrieveIndexInformation(true);\r\n    maximum.setRetrieveIndexColumnInformation(true);\r\n    maximum.setRetrieveSequenceInformation(true);\r\n    maximum.setRetrieveSynonymInformation(true);\r\n    maximum.setTag(\"maximum\");\r\n    return maximum;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.evaluation.SubmissionStatusBean.getAnsweredItems",
	"Comment": "this returns a map of which items actually have answers.used by questionscores.",
	"Method": "Map getAnsweredItems(){\r\n    return answeredItems;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.UserDefineTimeslotBean.getIframeId",
	"Comment": "this is a getter method which provide current iframe id for refresh\tiframe purpose.",
	"Method": "String getIframeId(){\r\n    HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\r\n    String iFrameId = (String) request.getAttribute(\"sakai.tool.placement.id\");\r\n    return iFrameId;\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.SearchBeanImpl.extractSiteIdsFromProperties",
	"Comment": "get any site ids that are in the tool property and normalize the string.",
	"Method": "String[] extractSiteIdsFromProperties(Properties props){\r\n    String targetSiteId = StringUtils.trimToNull(props.getProperty(SEARCH_SITE_IDS));\r\n    if (targetSiteId == null)\r\n        return new String[] { \"\" };\r\n    String[] searchSiteIds = StringUtil.split(targetSiteId, \",\");\r\n    for (int i = 0; i < searchSiteIds.length; i++) {\r\n        searchSiteIds[i] = StringUtil.trimToZero(searchSiteIds[i]);\r\n    }\r\n    return searchSiteIds;\r\n}"
}, {
	"Path": "org.sakaiproject.connector.fck.FCKConnectorServlet.findChildren",
	"Comment": "find the next level of decendent entities for a given reference and user",
	"Method": "List<String> findChildren(String reference,String user){\r\n    return entityBroker.findEntityRefs(new String[] { entityBroker.getPropertyValue(reference, \"child_provider\") }, new String[] { \"parentReference\", \"userId\" }, new String[] { reference, user }, true);\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.ReverseHistoryHelperBean.getRwikiObject",
	"Comment": "get the rwikiobject to which the reversed history is associated",
	"Method": "RWikiObject getRwikiObject(){\r\n    return rwikiObject;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.QuestionPoolFacadeQueries.movePool",
	"Comment": "move pool under another pool. the dest pool must not be thedescendant of the source nor can they be the same pool .",
	"Method": "void movePool(String agentId,Long sourcePoolId,Long destPoolId){\r\n    try {\r\n        QuestionPoolFacade sourcePool = getPool(sourcePoolId, agentId);\r\n        if (destPoolId.equals(QuestionPoolFacade.ROOT_POOL) && !sourcePoolId.equals(QuestionPoolFacade.ROOT_POOL)) {\r\n            sourcePool.setParentPoolId(QuestionPoolFacade.ROOT_POOL);\r\n            int retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n            while (retryCount > 0) {\r\n                try {\r\n                    getHibernateTemplate().update((QuestionPoolData) sourcePool.getData());\r\n                    retryCount = 0;\r\n                } catch (DataAccessException e) {\r\n                    log.warn(\"problem moving pool: \" + e.getMessage());\r\n                    retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n                }\r\n            }\r\n        } else {\r\n            QuestionPoolFacade destPool = getPool(destPoolId, agentId);\r\n            sourcePool.setParentPoolId(destPool.getQuestionPoolId());\r\n            int retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n            while (retryCount > 0) {\r\n                try {\r\n                    getHibernateTemplate().update((QuestionPoolData) sourcePool.getData());\r\n                    retryCount = 0;\r\n                } catch (DataAccessException e) {\r\n                    log.warn(\"problem update source pool: \" + e.getMessage());\r\n                    retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n                }\r\n            }\r\n        }\r\n    } catch (RuntimeException e) {\r\n        log.warn(e.getMessage());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileConnectionsLogicImpl.getConnectedUsersInsecurely",
	"Comment": "check auth, privacy and get the list of users that are connected to this user.",
	"Method": "List<User> getConnectedUsersInsecurely(String userUuid){\r\n    return sakaiProxy.getUsers(getConfirmedConnectionUserIdsForUser(userUuid));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentFacadeQueries.loadAllItems",
	"Comment": "this method return a list of itemdata belings to the section with the\tgiven sectionid",
	"Method": "List loadAllItems(Long sectionId){\r\n    return getHibernateTemplate().find(\"from ItemData i where i.section.sectionId=\" + sectionId);\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.UnboundidDirectoryProvider.getEidValidator",
	"Comment": "access the service used to verify eids prior to executing\tsearches on those values.",
	"Method": "EidValidator getEidValidator(){\r\n    return eidValidator;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getTimerId",
	"Comment": "is assigned to timedassessment that we need to attach to timedassessmentgradingmodel",
	"Method": "String getTimerId(DeliveryBean delivery){\r\n    String timerId = (String) ContextUtil.lookupParam(\"timerId\");\r\n    log.debug(\"***timerId=\" + timerId);\r\n    return timerId;\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.MultipleEmailLdapAttributeMapper.getSearchableEmailAttributes",
	"Comment": "access the list of logical attribute names searched when\tlocating a user entry by email address.",
	"Method": "List<String> getSearchableEmailAttributes(){\r\n    return searchableEmailAttributes;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.HistogramListener.sortQuestionScoresByLabel",
	"Comment": "this method sort the detailedstatistics list by question label value",
	"Method": "void sortQuestionScoresByLabel(List<HistogramQuestionScoresBean> detailedStatistics){\r\n    Collections.sort(detailedStatistics, new Comparator<HistogramQuestionScoresBean>() {\r\n        @Override\r\n        public int compare(HistogramQuestionScoresBean arg0, HistogramQuestionScoresBean arg1) {\r\n            HistogramQuestionScoresBean bean1 = (HistogramQuestionScoresBean) arg0;\r\n            HistogramQuestionScoresBean bean2 = (HistogramQuestionScoresBean) arg1;\r\n            int compare = Integer.valueOf(bean1.getPartNumber()) - Integer.valueOf(bean2.getPartNumber());\r\n            if (compare != 0) {\r\n                return compare;\r\n            }\r\n            int number1 = 0;\r\n            int number2 = 0;\r\n            if (bean1.getQuestionNumber().indexOf(\"-\") == -1) {\r\n                number1 = Integer.valueOf(bean1.getQuestionNumber());\r\n            } else {\r\n                number1 = Integer.valueOf(bean1.getQuestionNumber().substring(0, bean1.getQuestionNumber().indexOf(\"-\")));\r\n            }\r\n            if (bean2.getQuestionNumber().indexOf(\"-\") == -1) {\r\n                number2 = Integer.valueOf(bean2.getQuestionNumber());\r\n            } else {\r\n                number2 = Integer.valueOf(bean2.getQuestionNumber().substring(0, bean2.getQuestionNumber().indexOf(\"-\")));\r\n            }\r\n            compare = number1 - number2;\r\n            if (compare != 0) {\r\n                return compare;\r\n            }\r\n            number1 = Integer.valueOf(bean1.getQuestionNumber().substring(bean1.getQuestionNumber().indexOf(\"-\") + 1));\r\n            number2 = Integer.valueOf(bean2.getQuestionNumber().substring(bean2.getQuestionNumber().indexOf(\"-\") + 1));\r\n            return number1 - number2;\r\n        }\r\n    });\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.HistogramListener.sortQuestionScoresByLabel",
	"Comment": "this method sort the detailedstatistics list by question label value",
	"Method": "void sortQuestionScoresByLabel(List<HistogramQuestionScoresBean> detailedStatistics){\r\n    HistogramQuestionScoresBean bean1 = (HistogramQuestionScoresBean) arg0;\r\n    HistogramQuestionScoresBean bean2 = (HistogramQuestionScoresBean) arg1;\r\n    int compare = Integer.valueOf(bean1.getPartNumber()) - Integer.valueOf(bean2.getPartNumber());\r\n    if (compare != 0) {\r\n        return compare;\r\n    }\r\n    int number1 = 0;\r\n    int number2 = 0;\r\n    if (bean1.getQuestionNumber().indexOf(\"-\") == -1) {\r\n        number1 = Integer.valueOf(bean1.getQuestionNumber());\r\n    } else {\r\n        number1 = Integer.valueOf(bean1.getQuestionNumber().substring(0, bean1.getQuestionNumber().indexOf(\"-\")));\r\n    }\r\n    if (bean2.getQuestionNumber().indexOf(\"-\") == -1) {\r\n        number2 = Integer.valueOf(bean2.getQuestionNumber());\r\n    } else {\r\n        number2 = Integer.valueOf(bean2.getQuestionNumber().substring(0, bean2.getQuestionNumber().indexOf(\"-\")));\r\n    }\r\n    compare = number1 - number2;\r\n    if (compare != 0) {\r\n        return compare;\r\n    }\r\n    number1 = Integer.valueOf(bean1.getQuestionNumber().substring(bean1.getQuestionNumber().indexOf(\"-\") + 1));\r\n    number2 = Integer.valueOf(bean2.getQuestionNumber().substring(bean2.getQuestionNumber().indexOf(\"-\") + 1));\r\n    return number1 - number2;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.components.SakaiPagingNavigator.newPagingNavigationLink",
	"Comment": "create a new pagenumber link. may be subclassed to make use of specialized links, e.g.\tajaxian links.",
	"Method": "Link newPagingNavigationLink(String id,IPageable pageable,int pageNumber){\r\n    return new AjaxPagingNavigationLink(id, pageable, pageNumber);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.augmentedimage.AugmentedImageActivity.onUpdateFrame",
	"Comment": "registered with the sceneform scene object, this method is called at the start of each frame.",
	"Method": "void onUpdateFrame(FrameTime frameTime){\r\n    Frame frame = arFragment.getArSceneView().getArFrame();\r\n    if (frame == null || frame.getCamera().getTrackingState() != TrackingState.TRACKING) {\r\n        return;\r\n    }\r\n    Collection<AugmentedImage> updatedAugmentedImages = frame.getUpdatedTrackables(AugmentedImage.class);\r\n    for (AugmentedImage augmentedImage : updatedAugmentedImages) {\r\n        switch(augmentedImage.getTrackingState()) {\r\n            case PAUSED:\r\n                String text = \"Detected Image \" + augmentedImage.getIndex();\r\n                SnackbarHelper.getInstance().showMessage(this, text);\r\n                break;\r\n            case TRACKING:\r\n                fitToScanView.setVisibility(View.GONE);\r\n                if (!augmentedImageMap.containsKey(augmentedImage)) {\r\n                    AugmentedImageNode node = new AugmentedImageNode(this);\r\n                    node.setImage(augmentedImage);\r\n                    augmentedImageMap.put(augmentedImage, node);\r\n                    arFragment.getArSceneView().getScene().addChild(node);\r\n                }\r\n                break;\r\n            case STOPPED:\r\n                augmentedImageMap.remove(augmentedImage);\r\n                break;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Version.isLessOrEqualThan",
	"Comment": "determine if this version is less than or equal to the given one.",
	"Method": "boolean isLessOrEqualThan(Version ver){\r\n    return compareVersions(ver) <= 0;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.setCreatedBy",
	"Comment": "set createdby for assessmentbasefacade. this represents the agentid of the personwho created the record",
	"Method": "void setCreatedBy(String createdBy){\r\n    this.createdBy = createdBy;\r\n    this.data.setCreatedBy(createdBy);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.init",
	"Comment": "initialization method, just gets the current site in preparation for other calls",
	"Method": "void init(){\r\n    if (site == null) {\r\n        String siteId = null;\r\n        try {\r\n            siteId = sessionManager.getCurrentToolSession().getAttribute(HELPER_ID + \".siteId\").toString();\r\n        } catch (NullPointerException npe) {\r\n            log.warn(npe.getMessage());\r\n        }\r\n        if (siteId == null) {\r\n            siteId = toolManager.getCurrentPlacement().getContext();\r\n        }\r\n        try {\r\n            site = siteService.getSite(siteId);\r\n            update = siteService.allowUpdateSite(site.getId()) || siteService.allowUpdateGroupMembership(site.getId());\r\n        } catch (IdUnusedException e) {\r\n            log.warn(e.getMessage());\r\n        }\r\n    }\r\n    title = \"\";\r\n    if (groupMembers == null) {\r\n        groupMembers = new ArrayList();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.RegexpBlacklistEidValidator.isBlackListedEid",
	"Comment": "encapsulates the logic for actually checking a user eid\tagainst the configured blacklist. if no blacklist is\tconfigured, will return false",
	"Method": "boolean isBlackListedEid(String eid){\r\n    if (eidBlacklist == null || eidBlacklist.isEmpty()) {\r\n        return false;\r\n    }\r\n    for (Pattern pattern : eidBlacklist) {\r\n        if (pattern.matcher(eid).matches()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.solarsystem.DemoUtils.shouldShowRequestPermissionRationale",
	"Comment": "check to see if we need to show the rationale for this permission.",
	"Method": "boolean shouldShowRequestPermissionRationale(Activity activity){\r\n    return ActivityCompat.shouldShowRequestPermissionRationale(activity, Manifest.permission.CAMERA);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.CopyMeetingSignupMBean.retrieveRecurrenceData",
	"Comment": "this method only provide a most possible repeattype, not with 100% accuracy",
	"Method": "void retrieveRecurrenceData(List<SignupMeeting> upTodateOrginMeetings){\r\n    if (Utilities.testSignupBeginStartNowType(upTodateOrginMeetings)) {\r\n        setSignupBeginsType(START_NOW);\r\n        setSignupBegins(6);\r\n    }\r\n    Date lastDate = new Date();\r\n    if (upTodateOrginMeetings == null || upTodateOrginMeetings.isEmpty())\r\n        return;\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(this.signupMeeting.getStartTime());\r\n    cal.set(Calendar.MINUTE, 0);\r\n    cal.set(Calendar.SECOND, 0);\r\n    setRepeatUntil(cal.getTime());\r\n    int listSize = upTodateOrginMeetings.size();\r\n    if (listSize > 1) {\r\n        lastDate = upTodateOrginMeetings.get(listSize - 1).getStartTime();\r\n        cal.setTime(lastDate);\r\n        cal.set(Calendar.MINUTE, 0);\r\n        cal.set(Calendar.SECOND, 0);\r\n        setRepeatUntil(cal.getTime());\r\n        String repeatType = upTodateOrginMeetings.get(listSize - 1).getRepeatType();\r\n        if (repeatType != null && !ONCE_ONLY.equals(repeatType)) {\r\n            setRepeatType(repeatType);\r\n            setRepeatTypeUnknown(false);\r\n            return;\r\n        }\r\n        Calendar calFirst = Calendar.getInstance();\r\n        Calendar calSecond = Calendar.getInstance();\r\n        calFirst.setTime(upTodateOrginMeetings.get(listSize - 2).getStartTime());\r\n        calFirst.set(Calendar.SECOND, 0);\r\n        calFirst.set(Calendar.MILLISECOND, 0);\r\n        calSecond.setTime(upTodateOrginMeetings.get(listSize - 1).getStartTime());\r\n        calSecond.set(Calendar.SECOND, 0);\r\n        calSecond.set(Calendar.MILLISECOND, 0);\r\n        int tmp = calSecond.get(Calendar.DATE);\r\n        int daysDiff = (int) (calSecond.getTimeInMillis() - calFirst.getTimeInMillis()) / DAY_IN_MILLISEC;\r\n        setRepeatTypeUnknown(false);\r\n        if (daysDiff == perDay)\r\n            setRepeatType(DAILY);\r\n        else if (daysDiff == perWeek)\r\n            setRepeatType(WEEKLY);\r\n        else if (daysDiff == perBiweek)\r\n            setRepeatType(BIWEEKLY);\r\n        else if (daysDiff == 3 && calFirst.get(Calendar.DAY_OF_WEEK) == Calendar.FRIDAY)\r\n            setRepeatType(WEEKDAYS);\r\n        else {\r\n            setRepeatTypeUnknown(true);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.ItemContentsBean.getMaxPoints",
	"Comment": "string representation of the max points available for this question.",
	"Method": "double getMaxPoints(){\r\n    return maxPoints;\r\n}"
}, {
	"Path": "org.sakaiproject.component.imsent.user.IMSEntUserDirectoryProvider.destroy",
	"Comment": "returns to uninitialized state. you can use this method to release resources thet your service allocated when turbine shuts down.",
	"Method": "void destroy(){\r\n    log.info(\"destroy()\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.ExtractionHelper.isCorrectLabel",
	"Comment": "check to find out it response label is in the list of correct responses",
	"Method": "boolean isCorrectLabel(String testLabel,ArrayList labels){\r\n    if (testLabel == null || labels == null || labels.indexOf(testLabel) == -1) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.existRosterGroup",
	"Comment": "check whether there is already a group within the site containing the roster id",
	"Method": "boolean existRosterGroup(String rosterId){\r\n    boolean rv = false;\r\n    Collection<Group> groups = site.getGroups();\r\n    for (Group group : groups) {\r\n        String groupWSetupCreated = group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED);\r\n        if (groupWSetupCreated != null && groupWSetupCreated.equalsIgnoreCase(Boolean.TRUE.toString())) {\r\n            if (group.getProviderGroupId() != null && group.getProviderGroupId().equals(rosterId)) {\r\n                rv = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateMeetings.postMeetings",
	"Comment": "it will save the signupmeeting list into db and send email to notify\tparticipants",
	"Method": "void postMeetings(List<SignupMeeting> signupMeetings){\r\n    if (isCreateGroups()) {\r\n        log.info(\"Creating groups for each timeslot ...\");\r\n        for (SignupMeeting s : signupMeetings) {\r\n            List<SignupTimeslot> timeslots = s.getSignupTimeSlots();\r\n            int index = 1;\r\n            for (SignupTimeslot t : timeslots) {\r\n                String title = generateGroupTitle(s.getTitle(), t, index);\r\n                String description = generateGroupDescription(s.getTitle(), t);\r\n                List<String> attendees = convertAttendeesToUuids(t.getAttendees());\r\n                String groupId = sakaiFacade.createGroup(sakaiFacade.getCurrentLocationId(), title, description, attendees);\r\n                log.debug(\"Created group for timeslot: \" + groupId);\r\n                t.setGroupId(groupId);\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n    this.signupMeetingService.saveMeetings(signupMeetings, sakaiFacade.getCurrentUserId());\r\n    Utilities.resetMeetingList();\r\n    SignupMeeting firstOne = signupMeetings.get(0);\r\n    if (firstOne.isRecurredMeeting()) {\r\n        Date lastRecurmeetingDate = signupMeetings.get(signupMeetings.size() - 1).getStartTime();\r\n        firstOne.setRepeatUntil(lastRecurmeetingDate);\r\n        firstOne.setApplyToAllRecurMeetings(assignParticitpantsToAllEvents);\r\n    }\r\n    if (sendEmail) {\r\n        try {\r\n            firstOne.setSendEmailToSelectedPeopleOnly(this.sendEmailToSelectedPeopleOnly);\r\n            signupMeetingService.sendEmail(firstOne, SIGNUP_NEW_MEETING);\r\n        } catch (Exception e) {\r\n            log.error(Utilities.rb.getString(\"email.exception\") + \" - \" + e.getMessage(), e);\r\n            Utilities.addErrorMessage(Utilities.rb.getString(\"email.exception\"));\r\n        }\r\n    }\r\n    if (isPublishToCalendar()) {\r\n        for (int i = 0; i < signupMeetings.size(); i++) {\r\n            try {\r\n                signupMeetingService.postToCalendar(signupMeetings.get(i));\r\n            } catch (PermissionException pe) {\r\n                Utilities.addErrorMessage(Utilities.rb.getString(\"error.calendarEvent.posted_failed_due_to_permission\"));\r\n                log.info(Utilities.rb.getString(\"error.calendarEvent.posted_failed_due_to_permission\") + \" - Meeting title:\" + signupMeetings.get(i).getTitle());\r\n            } catch (Exception e) {\r\n                Utilities.addErrorMessage(Utilities.rb.getString(\"error.calendarEvent.posted_failed\"));\r\n                log.info(Utilities.rb.getString(\"error.calendarEvent.posted_failed\") + \" - Meeting title:\" + signupMeetings.get(i).getTitle());\r\n            }\r\n        }\r\n    }\r\n    String recurringInfo = firstOne.isRecurredMeeting() ? \" recur_mtng\" : \"\";\r\n    for (int i = 0; i < signupMeetings.size(); i++) {\r\n        log.info(recurringInfo + \"title:\" + signupMeetings.get(i).getTitle() + \" - UserId:\" + sakaiFacade.getCurrentUserId() + \" - has created  new meeting(s) at meeting startTime:\" + sakaiFacade.getTimeService().newTime(signupMeetings.get(i).getStartTime().getTime()).toStringLocalFull());\r\n        Utilities.postEventTracking(SignupEventTypes.EVENT_SIGNUP_MTNG_ADD, ToolManager.getCurrentPlacement().getContext() + \" meetingId|title:\" + signupMeetings.get(i).getId() + \"|\" + signupMeetings.get(i).getTitle() + \" at startTime:\" + sakaiFacade.getTimeService().newTime(signupMeetings.get(i).getStartTime().getTime()).toStringLocalFull() + recurringInfo);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.velocity.LibraryWebappLoader.adjustName",
	"Comment": "adjust path to look in the skin folder inside the library webapp",
	"Method": "String adjustName(String name){\r\n    String[] parts = name.split(\"/\");\r\n    return \"/skin/\" + getSkin() + \"/\" + parts[parts.length - 1];\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.isMultipleInstancesAllowed",
	"Comment": "read from tool registration whether multiple registration is allowed for this tool",
	"Method": "boolean isMultipleInstancesAllowed(String toolId){\r\n    Tool tool = ToolManager.getTool(toolId);\r\n    if (tool != null) {\r\n        Properties tProperties = tool.getRegisteredConfig();\r\n        return (tProperties.containsKey(\"allowMultipleInstances\") && tProperties.getProperty(\"allowMultipleInstances\").equalsIgnoreCase(Boolean.TRUE.toString())) ? true : false;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.user.detail.ValueEncryptionUtilitiesTest.testEncryptDifferent",
	"Comment": "check that when we encrypt the same value twice we get different outputs.",
	"Method": "void testEncryptDifferent(){\r\n    String o1 = service.encrypt(\"hello\", 10);\r\n    String o2 = service.encrypt(\"hello\", 10);\r\n    Assert.assertNotEquals(o1, o2);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.ExtractionHelper.addMatrixSurveyTextAndAnswers",
	"Comment": "trouble. if someone does a matrix with only one row, we could have a problem.",
	"Method": "void addMatrixSurveyTextAndAnswers(ItemFacade item,Map itemMap){\r\n    List sourceList = (List) itemMap.get(\"itemMatchSourceText\");\r\n    List targetList = (List) itemMap.get(\"itemMatchTargetText\");\r\n    List itemTextList = (List) itemMap.get(\"itemText\");\r\n    sourceList = sourceList == null ? new ArrayList() : sourceList;\r\n    targetList = targetList == null ? new ArrayList() : targetList;\r\n    itemTextList = itemTextList == null ? new ArrayList() : itemTextList;\r\n    String itemTextString = \"\";\r\n    if (itemTextList.size() > 0) {\r\n        itemTextString = XmlUtil.processFormattedText((String) itemTextList.get(0));\r\n    }\r\n    HashSet itemTextSet = new HashSet();\r\n    if (itemTextString == null)\r\n        itemTextString = \"\";\r\n    itemTextString = itemTextString.replaceAll(\"\\\\?\\\\?\", \" \");\r\n    log.debug(\"item.setInstruction itemTextString: \" + itemTextString);\r\n    item.setInstruction(itemTextString);\r\n    for (int i = 0; i < targetList.size(); i++) {\r\n        String sourceText = XmlUtil.processFormattedText((String) targetList.get(i));\r\n        if (sourceText == null)\r\n            sourceText = \"\";\r\n        sourceText = // SAK-2298\r\n        sourceText.replaceAll(\"\\\\?\\\\?\", \" \");\r\n        log.debug(\"sourceText: \" + sourceText);\r\n        ItemText sourceItemText = new ItemText();\r\n        sourceItemText.setText(makeFCKAttachment(sourceText));\r\n        sourceItemText.setItem(item.getData());\r\n        sourceItemText.setSequence(Long.valueOf(i + 1));\r\n        HashSet targetSet = new HashSet();\r\n        char answerLabel = 'A';\r\n        for (int a = 0; a < sourceList.size(); a++) {\r\n            String targetString = XmlUtil.processFormattedText((String) sourceList.get(a));\r\n            if (targetString == null) {\r\n                targetString = \"\";\r\n            }\r\n            targetString = // SAK-2298\r\n            targetString.replaceAll(\"\\\\?\\\\?\", \" \");\r\n            log.debug(\"targetString: \" + targetString);\r\n            Answer target = new Answer();\r\n            HashSet answerFeedbackSet = new HashSet();\r\n            target.setAnswerFeedbackSet(answerFeedbackSet);\r\n            String label = \"\" + answerLabel++;\r\n            target.setLabel(label);\r\n            target.setText(makeFCKAttachment(targetString));\r\n            target.setItemText(sourceItemText);\r\n            target.setItem(item.getData());\r\n            target.setSequence(Long.valueOf(a + 1));\r\n            double score = 0.0d;\r\n            double discount = 0.0d;\r\n            log.debug(\"setting answer \" + a + \" score to:\" + score);\r\n            target.setScore(Double.valueOf(score));\r\n            target.setDiscount(Double.valueOf(discount));\r\n            targetSet.add(target);\r\n        }\r\n        sourceItemText.setAnswerSet(targetSet);\r\n        itemTextSet.add(sourceItemText);\r\n    }\r\n    item.setItemTextSet(itemTextSet);\r\n}"
}, {
	"Path": "edu.amc.sakai.user.MaxLifetimeLdapConnectionLivenessValidator.getMaxTtl",
	"Comment": "get the max connection lifetime, in millis. values\tless than or equals to zero are considered infinite, i.e.\tno ttl.",
	"Method": "long getMaxTtl(){\r\n    return maxTtl;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.data.dao.assessment.ExtendedTime.syncDates",
	"Comment": "sync the dates up to the dates in assessmentaccesscontrolifc",
	"Method": "void syncDates(){\r\n    AssessmentAccessControlIfc ac = null;\r\n    if (assessment != null) {\r\n        ac = assessment.getAssessmentAccessControl();\r\n    } else if (pubAssessment != null) {\r\n        ac = pubAssessment.getAssessmentAccessControl();\r\n    }\r\n    if (ac == null) {\r\n        return;\r\n    }\r\n    if (this.getDueDate() == null) {\r\n        this.setDueDate(ac.getDueDate());\r\n    }\r\n    if (this.getStartDate() == null) {\r\n        this.setStartDate(ac.getStartDate());\r\n    }\r\n    if (this.getRetractDate() == null && ac.getLateHandling() == AssessmentAccessControlIfc.ACCEPT_LATE_SUBMISSION) {\r\n        this.setRetractDate(ac.getRetractDate());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateMeetings.getNumOfRecurrence",
	"Comment": "it will give the number of recurrence for certail time frame",
	"Method": "int getNumOfRecurrence(String recurType,Date effectiveDate,Date untilDate){\r\n    int numOfRecurs = 0;\r\n    long firstMeetingEndTime = effectiveDate.getTime();\r\n    int availDaysForRepeat = 0;\r\n    Calendar untilCal = Calendar.getInstance();\r\n    untilCal.setTime(untilDate);\r\n    untilCal.set(Calendar.HOUR_OF_DAY, 23);\r\n    untilCal.set(Calendar.MINUTE, 59);\r\n    untilCal.set(Calendar.SECOND, 59);\r\n    availDaysForRepeat = (int) ((untilCal.getTimeInMillis() - firstMeetingEndTime) / DAY_IN_MILLISEC);\r\n    if (DAILY.equals(recurType) || WEEKDAYS.equals(recurType)) {\r\n        numOfRecurs = availDaysForRepeat / perDay;\r\n    } else if (WEEKLY.equals(recurType)) {\r\n        numOfRecurs = availDaysForRepeat / perWeek;\r\n    } else if (BIWEEKLY.equals(recurType)) {\r\n        numOfRecurs = availDaysForRepeat / perBiweek;\r\n    }\r\n    if (WEEKDAYS.equals(recurType) && numOfRecurs < 2) {\r\n        Calendar startCal = Calendar.getInstance();\r\n        startCal.setTime(effectiveDate);\r\n        int dayname = startCal.get(Calendar.DAY_OF_WEEK);\r\n        if (dayname == Calendar.SATURDAY)\r\n            numOfRecurs = 0;\r\n    }\r\n    return numOfRecurs;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.getAssessmentBaseId",
	"Comment": "org.sakaiproject.tool.assessment.ifc.assessmentbaseifc",
	"Method": "Long getAssessmentBaseId(){\r\n    try {\r\n        this.data = (AssessmentBaseIfc) assessment.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getAssessmentBaseId();\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.getPagesAndToolsForSite",
	"Comment": "alternative method signature which will first get a session for the given user,and then get the list of pages & tools visible to that user in the site.",
	"Method": "String getPagesAndToolsForSite(String sessionid,String eid,String siteid){\r\n    String newsessionid = getSessionForUser(sessionid, eid, true);\r\n    Session session = establishSession(newsessionid);\r\n    return getPagesAndToolsForSiteForCurrentUser(newsessionid, siteid);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.setAssessmentAccessControl",
	"Comment": "set the accesscontrol of the person who last modified assessmentbasefacade",
	"Method": "void setAssessmentAccessControl(AssessmentAccessControlIfc assessmentAccessControl){\r\n    this.assessmentAccessControl = assessmentAccessControl;\r\n    this.data.setAssessmentAccessControl(assessmentAccessControl);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.EditMeetingSignupMBean.getInstructors",
	"Comment": "get a list of users that have permission, but format it as a selectitem list for the dropdown.\tsince this is a new item there will be no current instructor so it returns the current user at the top of the list\twe send a null signup meeting param as this is a new meeting.",
	"Method": "List<SelectItem> getInstructors(){\r\n    return Utilities.getSignupMeetingsBean().getInstructors(signupMeeting);\r\n}"
}, {
	"Path": "org.sakaiproject.portal.service.AliasingSiteAdvisor.resolvePageName",
	"Comment": "attempt to generate a short name for the page. this could use tool names.",
	"Method": "String resolvePageName(Site site,SitePage page,String title){\r\n    String alias = title.toLowerCase();\r\n    alias = alias.replaceAll(\"[^a-z,0-9,_ ]\", \"\");\r\n    alias = alias.replaceAll(\" \", \"_\");\r\n    alias = alias.replaceAll(\"_+\", \"_\");\r\n    if (alias.length() > maxLength) {\r\n        alias = alias.substring(0, maxLength);\r\n    }\r\n    if (alias.endsWith(\"_\")) {\r\n        alias = alias.substring(0, alias.length() - 1);\r\n    }\r\n    return alias;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.author.DeleteTemplateListener.deleteTemplate",
	"Comment": "this deletes a template with all its associated parts, items, etc..",
	"Method": "boolean deleteTemplate(String deleteId){\r\n    try {\r\n        AssessmentService delegate = new AssessmentService();\r\n        List l = delegate.getAssessmentByTemplate(deleteId);\r\n        if (l.size() == 0) {\r\n            delegate.deleteAssessmentTemplate(new Long(deleteId));\r\n        } else {\r\n            AssessmentTemplateFacade t = delegate.getAssessmentTemplate(deleteId);\r\n            t.setStatus(AssessmentTemplateFacade.INACTIVE_STATUS);\r\n            delegate.save((AssessmentTemplateData) t.getData());\r\n        }\r\n        return true;\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.menu.MenuImpl.getForm",
	"Comment": "access the form name whose values will be used when this item is selected.",
	"Method": "String getForm(){\r\n    return m_form;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.site.PortalSiteHelperImpl.lookupSitePage",
	"Comment": "make sure that we have a proper page selected in the site pageid is\tgenerally the last page used in the site. pageid must be in the site and\tthe user must have permission for the page as well.",
	"Method": "SitePage lookupSitePage(String pageId,Site site){\r\n    List pages = getPermittedPagesInOrder(site);\r\n    if (pages.isEmpty())\r\n        return null;\r\n    SitePage page = site.getPage(pageId);\r\n    if (page == null) {\r\n        page = lookupAliasToPage(pageId, site);\r\n        if (page == null) {\r\n            page = (SitePage) pages.get(0);\r\n            return page;\r\n        }\r\n    }\r\n    boolean found = false;\r\n    for (Iterator i = pages.iterator(); i.hasNext(); ) {\r\n        SitePage p = (SitePage) i.next();\r\n        if (p.getId().equals(page.getId()))\r\n            return page;\r\n    }\r\n    return (SitePage) pages.get(0);\r\n}"
}, {
	"Path": "org.sakaiproject.search.elasticsearch.BaseElasticSearchIndexBuilder.getContentProducers",
	"Comment": "get all the producers registered, as a clone to avoid concurrentmodification exceptions",
	"Method": "List<EntityContentProducer> getContentProducers(){\r\n    return Lists.newArrayList(producers);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.JoinableSiteSettings.putIsSiteBrowserJoinEnabledInContext",
	"Comment": "put the global toggle value for joining with the site browser into the context",
	"Method": "boolean putIsSiteBrowserJoinEnabledInContext(Context context){\r\n    if (context == null) {\r\n        return false;\r\n    }\r\n    context.put(CONTEXT_JOIN_SITE_SITE_BROWSER_JOIN_ENABLED, siteService.isGlobalJoinFromSiteBrowserEnabled());\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupMeetingServiceImpl.screenAllowableMeetings",
	"Comment": "this method will return a list of meetings, which contain all the\tpopulated permission information",
	"Method": "List<SignupMeeting> screenAllowableMeetings(String currentSiteId,String userId,List<SignupMeeting> meetings){\r\n    List<SignupMeeting> allowedMeetings = new ArrayList<SignupMeeting>();\r\n    for (SignupMeeting meeting : meetings) {\r\n        if (isAllowedToView(meeting, userId, currentSiteId)) {\r\n            allowedMeetings.add(meeting);\r\n        }\r\n    }\r\n    updatePermissions(userId, currentSiteId, meetings);\r\n    return allowedMeetings;\r\n}"
}, {
	"Path": "org.sakaiproject.web.tool.IFrameAction.buildMainPanelContext",
	"Comment": "setup the velocity context and choose the template for the response.",
	"Method": "String buildMainPanelContext(VelocityPortlet portlet,Context context,RunData rundata,SessionState state){\r\n    if (MODE_OPTIONS.equals(state.getAttribute(STATE_MODE))) {\r\n        return buildOptionsPanelContext(portlet, context, rundata, state);\r\n    }\r\n    String url = (String) state.getAttribute(URL);\r\n    String special = (String) state.getAttribute(SPECIAL);\r\n    context.put(URL, url);\r\n    context.put(HEIGHT, state.getAttribute(HEIGHT));\r\n    if (url != null && url.startsWith(\"http:\") && ServerConfigurationService.getServerUrl().startsWith(\"https:\")) {\r\n        context.put(\"popup\", true);\r\n    }\r\n    context.put(TARGETPAGE_URL, state.getAttribute(TARGETPAGE_URL));\r\n    context.put(TARGETPAGE_POPUP, state.getAttribute(TARGETPAGE_POPUP));\r\n    context.put(TARGETPAGE_NAME, state.getAttribute(TARGETPAGE_NAME));\r\n    context.put(ANNOTATED_TEXT, state.getAttribute(ANNOTATED_TEXT));\r\n    context.put(\"tlang\", rb);\r\n    String hideOptions = (String) state.getAttribute(HIDE_OPTIONS);\r\n    if (hideOptions != null && \"true\".equalsIgnoreCase(hideOptions)) {\r\n    } else if (SiteService.allowUpdateSite(ToolManager.getCurrentPlacement().getContext())) {\r\n        context.put(\"options_title\", ToolManager.getCurrentPlacement().getTitle() + \" \" + rb.getString(\"gen.options\"));\r\n    }\r\n    String siteId = \"\";\r\n    try {\r\n        Site s = SiteService.getSite(ToolManager.getCurrentPlacement().getContext());\r\n        siteId = s.getId();\r\n    } catch (Throwable e) {\r\n    }\r\n    if (special == null) {\r\n        if (state.getAttribute(EVENT_ACCESS_WEB_CONTENT) == null) {\r\n            m_eventTrackingService.post(m_eventTrackingService.newEvent(EVENT_ACCESS_WEB_CONTENT, url, siteId, false, NotificationService.NOTI_NONE));\r\n        } else {\r\n            m_eventTrackingService.post(m_eventTrackingService.newEvent((String) state.getAttribute(EVENT_ACCESS_WEB_CONTENT), url, siteId, false, NotificationService.NOTI_NONE));\r\n        }\r\n    } else {\r\n        if (state.getAttribute(EVENT_ACCESS_WEB_CONTENT) != null) {\r\n            m_eventTrackingService.post(m_eventTrackingService.newEvent((String) state.getAttribute(EVENT_ACCESS_WEB_CONTENT), url, siteId, false, NotificationService.NOTI_NONE));\r\n        }\r\n    }\r\n    return (String) getContext(rundata).get(\"template\");\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.impl.ServerWideReportManagerImpl.getHourlyUsagePattern",
	"Comment": "in any case, the data is only shown for a 30 day period so you could think about retaining the data for 30 days, perhaps.",
	"Method": "List<ServerWideStatsRecord> getHourlyUsagePattern(){\r\n    String mysql = \"select date(SESSION_START) as session_date, \" + \"hour(session_start) as hour_start, \" + \"count(distinct SESSION_USER) as unique_users \" + \"from SAKAI_SESSION \" + \"where SESSION_START > DATE_SUB(CURDATE(), INTERVAL 30 DAY) \" + \"group by 1, 2\";\r\n    String oracle = \"select trunc(SESSION_START, 'DDD') as session_date,\" + \" to_number(to_char(session_start, 'HH24')) as hour_start,\" + \" count(distinct SESSION_USER) as unique_users\" + \" from SAKAI_SESSION\" + \" where SESSION_START > (SYSDATE - 30)\" + \" group by trunc(SESSION_START, 'DDD'), to_number(to_char(session_start, 'HH24'))\";\r\n    List result = sqlService.dbRead(getSqlForVendor(mysql, oracle), null, new SqlReader() {\r\n        public Object readSqlResultRecord(ResultSet result) {\r\n            ServerWideStatsRecord info = new ServerWideStatsRecordImpl();\r\n            try {\r\n                info.add(result.getDate(1));\r\n                info.add(result.getInt(2));\r\n                info.add(result.getLong(3));\r\n            } catch (SQLException e) {\r\n                log.error(\"getHourlyUsagePattern() exception: \" + e.getClass() + \": \" + e.getMessage());\r\n                return null;\r\n            }\r\n            return info;\r\n        }\r\n    });\r\n    return result;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.impl.ServerWideReportManagerImpl.getHourlyUsagePattern",
	"Comment": "in any case, the data is only shown for a 30 day period so you could think about retaining the data for 30 days, perhaps.",
	"Method": "List<ServerWideStatsRecord> getHourlyUsagePattern(){\r\n    ServerWideStatsRecord info = new ServerWideStatsRecordImpl();\r\n    try {\r\n        info.add(result.getDate(1));\r\n        info.add(result.getInt(2));\r\n        info.add(result.getLong(3));\r\n    } catch (SQLException e) {\r\n        log.error(\"getHourlyUsagePattern() exception: \" + e.getClass() + \": \" + e.getMessage());\r\n        return null;\r\n    }\r\n    return info;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaRetrievalOptionsBuilder.withSupportsSchemas",
	"Comment": "overrides the jdbc driver provided information about whether thedatabase supports schema.",
	"Method": "SchemaRetrievalOptionsBuilder withSupportsSchemas(){\r\n    overridesSupportSchemas = Optional.of(true);\r\n    return this;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.handlers.SiteHandler.parseHtmlParts",
	"Comment": "attempts to find the html head and body in the document and return them back.",
	"Method": "PageParts parseHtmlParts(String responseStr,boolean debug){\r\n    int headStart = StringUtils.indexOfIgnoreCase(responseStr, \"<head\");\r\n    headStart = findEndOfTag(responseStr, headStart);\r\n    int headEnd = StringUtils.indexOfIgnoreCase(responseStr, \"<\/head\");\r\n    int bodyStart = StringUtils.indexOfIgnoreCase(responseStr, \"<body\");\r\n    bodyStart = findEndOfTag(responseStr, bodyStart);\r\n    int bodyEnd = StringUtils.indexOfIgnoreCase(responseStr, \"<\/body\");\r\n    if (bodyEnd < bodyStart)\r\n        bodyEnd = responseStr.length() - 1;\r\n    if (debug)\r\n        log.info(\"Frameless HS=\" + headStart + \" HE=\" + headEnd + \" BS=\" + bodyStart + \" BE=\" + bodyEnd);\r\n    if (bodyEnd > bodyStart && bodyStart > headEnd && headEnd > headStart && headStart > 1) {\r\n        PageParts pp = new PageParts();\r\n        pp.head = responseStr.substring(headStart + 1, headEnd);\r\n        int titleStart = pp.head.indexOf(\"<title\");\r\n        int titleEnd = pp.head.indexOf(\"<\/title\");\r\n        titleEnd = findEndOfTag(pp.head, titleEnd);\r\n        pp.head = (titleStart != -1 && titleEnd != -1) ? pp.head.substring(0, titleStart) + pp.head.substring(titleEnd + 1) : pp.head;\r\n        pp.body = responseStr.substring(bodyStart + 1, bodyEnd);\r\n        return pp;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.util.SamigoExpressionParser.isDelimeter",
	"Comment": "checks if the given char c is a delimeterminus is checked apart, can be unary minus",
	"Method": "boolean isDelimeter(char c){\r\n    return \"&|<>=+/*%^!\".indexOf(c) != -1;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.util.ToolUtils.getToolPopupUrl",
	"Comment": "captures the rules for the various tools and when they want a popup",
	"Method": "String getToolPopupUrl(ToolConfiguration pageTool){\r\n    Properties pro = pageTool.getConfig();\r\n    String source = null;\r\n    if (\"sakai.web.168\".equals(pageTool.getToolId()) && \"true\".equals(pro.getProperty(\"popup\"))) {\r\n        source = pro.getProperty(\"source\");\r\n    } else if (\"sakai.iframe\".equals(pageTool.getToolId()) && \"true\".equals(pro.getProperty(\"popup\"))) {\r\n        source = pro.getProperty(\"source\");\r\n    } else if (\"sakai.basiclti\".equals(pageTool.getToolId()) && \"on\".equals(pro.getProperty(\"imsti.newpage\"))) {\r\n        source = \"/access/basiclti/site/\" + pageTool.getContext() + \"/\" + pageTool.getId();\r\n    }\r\n    return source;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.GradingService.getLastItemGradingData",
	"Comment": "get the last set of itemgradingdata for a student per assessment",
	"Method": "Map getLastItemGradingData(String publishedId,String agentId){\r\n    try {\r\n        return PersistenceService.getInstance().getAssessmentGradingFacadeQueries().getLastItemGradingData(Long.valueOf(publishedId), agentId);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return new HashMap();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.goNext",
	"Comment": "this is a jsf action call method by ui to navigate to the next page.",
	"Method": "String goNext(){\r\n    if (validationError) {\r\n        validationError = false;\r\n        return ADD_MEETING_STEP1_PAGE_URL;\r\n    }\r\n    String step = (String) currentStepHiddenInfo.getValue();\r\n    if (step.equals(\"step1\")) {\r\n        setTimeSlotDuration(0);\r\n        if (isUserDefinedTS()) {\r\n            if (!Utilities.isDataIntegritySafe(isUserDefinedTS(), UserDefineTimeslotBean.NEW_MEETING, getUserDefineTimeslotBean()))\r\n                return ADD_MEETING_STEP1_PAGE_URL;\r\n            this.customTimeSlotWrpList = getUserDefineTimeslotBean().getDestTSwrpList();\r\n        }\r\n        return ADD_MEETING_STEP2_PAGE_URL;\r\n    }\r\n    return ADD_MEETING_STEP1_PAGE_URL;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.render.fragment.FragmentToolRenderService.accept",
	"Comment": "this is called during render to accept the request into this tool. if the\tplacement is handled by the fragmenttoolrenderservice, this should return\ttrue, then the render will be invoked.",
	"Method": "boolean accept(Portal portal,ToolConfiguration configuration,HttpServletRequest request,HttpServletResponse response,ServletContext context){\r\n    return isFragmentTool(configuration);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.SubmissionStatusListener.submissionStatus",
	"Comment": "this will populate the submissionstatusbean with the data associated with theparticular versioned assessment based on the publishedid.",
	"Method": "boolean submissionStatus(String publishedId,SubmissionStatusBean bean,TotalScoresBean totalScoresBean,boolean isValueChange){\r\n    log.debug(\"submissionStatus()\");\r\n    try {\r\n        TotalScoreListener totalScorelistener = new TotalScoreListener();\r\n        GradingService delegate = new GradingService();\r\n        if (ContextUtil.lookupParam(\"sortBy\") != null && !ContextUtil.lookupParam(\"sortBy\").trim().equals(\"\"))\r\n            bean.setSortType(ContextUtil.lookupParam(\"sortBy\"));\r\n        boolean sortAscending = true;\r\n        if (ContextUtil.lookupParam(\"sortAscending\") != null && !ContextUtil.lookupParam(\"sortAscending\").trim().equals(\"\")) {\r\n            sortAscending = Boolean.valueOf(ContextUtil.lookupParam(\"sortAscending\")).booleanValue();\r\n            bean.setSortAscending(sortAscending);\r\n            log.debug(\"submissionStatus() :: sortAscending = \" + sortAscending);\r\n        }\r\n        bean.setPublishedId(publishedId);\r\n        totalScoresBean.setSelectedSectionFilterValue(bean.getSelectedSectionFilterValue());\r\n        List scores = delegate.getLastSubmittedAssessmentGradingList(new Long(publishedId));\r\n        List agents = new ArrayList();\r\n        Iterator iter = scores.iterator();\r\n        if (!iter.hasNext()) {\r\n            bean.setAgents(agents);\r\n            bean.setAllAgents(agents);\r\n            bean.setTotalPeople(Integer.toString(bean.getAgents().size()));\r\n            return true;\r\n        }\r\n        Object next = iter.next();\r\n        Map useridMap = totalScoresBean.getUserIdMap(TotalScoresBean.CALLED_FROM_SUBMISSION_STATUS_LISTENER);\r\n        List agentUserIds = totalScorelistener.getAgentIds(useridMap);\r\n        AgentHelper helper = IntegrationContextFactory.getInstance().getAgentHelper();\r\n        Map userRoles = helper.getUserRolesFromContextRealm(agentUserIds);\r\n        AssessmentGradingData data = (AssessmentGradingData) next;\r\n        PublishedAssessmentService pubService = new PublishedAssessmentService();\r\n        PublishedAssessmentIfc pub = (PublishedAssessmentIfc) pubService.getPublishedAssessment(data.getPublishedAssessmentId().toString());\r\n        if (pub != null) {\r\n            bean.setAssessmentName(pub.getTitle());\r\n        }\r\n        if (ContextUtil.lookupParam(\"roleSelection\") != null) {\r\n            bean.setRoleSelection(ContextUtil.lookupParam(\"roleSelection\"));\r\n        }\r\n        if (bean.getSortType() == null) {\r\n            bean.setSortType(\"agentEid\");\r\n        }\r\n        List students_submitted = new ArrayList();\r\n        iter = scores.iterator();\r\n        Map studentGradingSummaryDataMap = new HashMap();\r\n        RetakeAssessmentBean retakeAssessment = (RetakeAssessmentBean) ContextUtil.lookupBean(\"retakeAssessment\");\r\n        while (iter.hasNext()) {\r\n            AgentResults results = new AgentResults();\r\n            AssessmentGradingData gdata = (AssessmentGradingData) iter.next();\r\n            gdata.setItemGradingSet(new HashSet());\r\n            BeanUtils.copyProperties(results, gdata);\r\n            results.setAssessmentGradingId(gdata.getAssessmentGradingId());\r\n            String agentid = gdata.getAgentId();\r\n            AgentFacade agent = new AgentFacade(agentid);\r\n            results.setLastName(agent.getLastName());\r\n            results.setFirstName(agent.getFirstName());\r\n            results.setEmail(agent.getEmail());\r\n            if (results.getLastName() != null && results.getLastName().length() > 0)\r\n                results.setLastInitial(results.getLastName().substring(0, 1));\r\n            else if (results.getFirstName() != null && results.getFirstName().length() > 0)\r\n                results.setLastInitial(results.getFirstName().substring(0, 1));\r\n            else\r\n                results.setLastInitial(\"A\");\r\n            results.setIdString(agent.getIdString());\r\n            results.setAgentEid(agent.getEidString());\r\n            results.setAgentDisplayId(agent.getDisplayIdString());\r\n            results.setRole((String) userRoles.get(agentid));\r\n            results.setRetakeAllowed(getRetakeAllowed(agent.getIdString(), studentGradingSummaryDataMap, retakeAssessment));\r\n            if (useridMap.containsKey(agentid)) {\r\n                agents.add(results);\r\n                students_submitted.add(agentid);\r\n            }\r\n        }\r\n        retakeAssessment.setStudentGradingSummaryDataMap(studentGradingSummaryDataMap);\r\n        List students_not_submitted = new ArrayList();\r\n        Iterator useridIterator = useridMap.keySet().iterator();\r\n        while (useridIterator.hasNext()) {\r\n            String userid = (String) useridIterator.next();\r\n            if (!students_submitted.contains(userid)) {\r\n                students_not_submitted.add(userid);\r\n            }\r\n        }\r\n        prepareNotSubmittedAgentResult(students_not_submitted.iterator(), agents, userRoles, retakeAssessment, studentGradingSummaryDataMap);\r\n        bs = new BeanSort(agents, bean.getSortType());\r\n        if ((bean.getSortType()).equals(\"assessmentGradingId\")) {\r\n            bs.toNumericSort();\r\n        } else {\r\n            bs.toStringSort();\r\n        }\r\n        if (sortAscending) {\r\n            log.debug(\"TotalScoreListener: setRoleAndSortSection() :: sortAscending\");\r\n            agents = (List) bs.sort();\r\n        } else {\r\n            log.debug(\"TotalScoreListener: setRoleAndSortSection() :: !sortAscending\");\r\n            agents = (List) bs.sortDesc();\r\n        }\r\n        bean.setAgents(agents);\r\n        bean.setAllAgents(agents);\r\n        bean.setTotalPeople(Integer.toString(bean.getAgents().size()));\r\n    } catch (RuntimeException e) {\r\n        log.error(e.getMessage(), e);\r\n        return false;\r\n    } catch (IllegalAccessException e) {\r\n        log.error(e.getMessage(), e);\r\n        return false;\r\n    } catch (InvocationTargetException e) {\r\n        log.error(e.getMessage(), e);\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getIframeId",
	"Comment": "this is a getter method which provide current iframe id for refresh\tiframe purpose.",
	"Method": "String getIframeId(){\r\n    HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\r\n    String iFrameId = (String) request.getAttribute(\"sakai.tool.placement.id\");\r\n    return iFrameId;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.entity.impl.PublishedAssessmentEntityProviderImpl.browseEntities",
	"Comment": "browse for the list of published assessments for a given site for a user",
	"Method": "List<String> browseEntities(String siteId,String userId,List<EntityData> browseEntities,Search search,String userReference,String associatedReference,Map<String, Object> params){\r\n    Vector results = new Vector();\r\n    String siteId = (String) params.get(\"context\");\r\n    Restriction[] restrictions = search.getRestrictions();\r\n    String userId = null;\r\n    for (int r = 0; r < restrictions.length; r++) {\r\n        if (restrictions[r].property.equalsIgnoreCase(\"userId\")) {\r\n            userId = (String) restrictions[r].value;\r\n        }\r\n        if (restrictions[r].property.equalsIgnoreCase(\"context\")) {\r\n            siteId = (String) restrictions[r].value;\r\n        }\r\n    }\r\n    if (userId == null)\r\n        return results;\r\n    if (siteId == null)\r\n        return results;\r\n    String orderBy = \"title\";\r\n    List assessments = null;\r\n    boolean canPublish = false;\r\n    Date currentDate = new Date();\r\n    if (securityService.unlock(CAN_PUBLISH, \"/site/\" + siteId)) {\r\n        publishedAssessmentFacadeQueries.getBasicInfoOfAllActivePublishedAssessments(orderBy, siteId, true);\r\n        assessments = publishedAssessmentFacadeQueries.getBasicInfoOfAllInActivePublishedAssessments(orderBy, siteId, true);\r\n        assessments.addAll(publishedAssessmentFacadeQueries.getBasicInfoOfAllActivePublishedAssessments(orderBy, siteId, true));\r\n        canPublish = true;\r\n    } else if (securityService.unlock(CAN_TAKE, \"/site/\" + siteId)) {\r\n        assessments = publishedAssessmentFacadeQueries.getBasicInfoOfAllActivePublishedAssessments(orderBy, siteId, true);\r\n    }\r\n    Iterator assessmentIterator = assessments.iterator();\r\n    while (assessmentIterator.hasNext()) {\r\n        PublishedAssessmentFacade pub = (PublishedAssessmentFacade) assessmentIterator.next();\r\n        if (canPublish || pub.getStartDate() == null || currentDate.after(pub.getStartDate())) {\r\n            String thisEntityReference = \"/\" + ENTITY_PREFIX + \"/\" + pub.getPublishedAssessmentId();\r\n            String thisEntityTitle = pub.getTitle();\r\n            results.add(new EntityData(new EntityReference(thisEntityReference), thisEntityTitle));\r\n        }\r\n    }\r\n    return results;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.ControllerState.recycle",
	"Comment": "release any resources and restore the object to initial conditions to be reused.",
	"Method": "void recycle(){\r\n    m_id = \"\";\r\n    m_setId = \"\";\r\n    init();\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.order.impl.SitePageEditHandler.isRequired",
	"Comment": "checks if a given toolid is required or not for the current site being edited",
	"Method": "boolean isRequired(String toolId){\r\n    if (site == null) {\r\n        init();\r\n    }\r\n    List<String> requiredTools;\r\n    if (site.getType() == null || siteService.isUserSite(site.getId())) {\r\n        requiredTools = serverConfigurationService.getToolsRequired(\"myworkspace\");\r\n    } else {\r\n        requiredTools = serverConfigurationService.getToolsRequired(site.getType());\r\n    }\r\n    if (requiredTools != null && requiredTools.contains(toolId)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.HistogramListener.calNumStudents",
	"Comment": "calculate the number of students per interval for histograms.",
	"Method": "int[] calNumStudents(double[] scores,double min,double max,int interval){\r\n    if (min > max) {\r\n        max = min;\r\n    }\r\n    min = Math.floor(min);\r\n    max = Math.ceil(max);\r\n    int[] numStudents = new int[(int) Math.ceil((max - min) / interval)];\r\n    if (numStudents.length == 0) {\r\n        numStudents = new int[1];\r\n        numStudents[0] = 0;\r\n    }\r\n    for (int i = 0; i < scores.length; i++) {\r\n        if (scores[i] < (min + interval)) {\r\n            numStudents[0]++;\r\n        } else {\r\n            for (int j = 1; j < (numStudents.length); j++) {\r\n                double lowerEndpoint = min + (j * interval);\r\n                double uppperEndpoint = min + ((j + 1) * interval);\r\n                if (j < (numStudents.length - 1)) {\r\n                    if ((scores[i] >= lowerEndpoint) && (scores[i] < uppperEndpoint)) {\r\n                        numStudents[j]++;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if ((scores[i] >= lowerEndpoint) && (scores[i] <= uppperEndpoint)) {\r\n                        numStudents[j]++;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return numStudents;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.MathJaxEnabler.prepareMathJaxToolSettingsForSave",
	"Comment": "when user selects to enable mathjax in certain tools, update the site property",
	"Method": "boolean prepareMathJaxToolSettingsForSave(Site site,SessionState state){\r\n    if (!ENABLED_AT_SYSTEM_LEVEL || site == null || state == null) {\r\n        return false;\r\n    }\r\n    if (state.getAttribute(STATE_KEY_IS_MATHJAX_ENABLED_FOR_SITE) != null) {\r\n        boolean isMathJaxEnabledForSite = (Boolean) state.getAttribute(STATE_KEY_IS_MATHJAX_ENABLED_FOR_SITE);\r\n        ResourcePropertiesEdit props = site.getPropertiesEdit();\r\n        if (isMathJaxEnabledForSite) {\r\n            props.addProperty(Site.PROP_SITE_MATHJAX_ALLOWED, Boolean.TRUE.toString());\r\n        } else {\r\n            props.removeProperty(Site.PROP_SITE_MATHJAX_ALLOWED);\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.AutoSubmitAssessmentsJob.execute",
	"Comment": "quartz job to check for assessment attempts that should be autosubmitted",
	"Method": "void execute(JobExecutionContext jobInfo){\r\n    loginToSakai(\"admin\");\r\n    String jobName = jobInfo.getJobDetail().getKey().getName();\r\n    String triggerName = jobInfo.getTrigger().getKey().getName();\r\n    Date requestedFire = jobInfo.getScheduledFireTime();\r\n    Date actualfire = jobInfo.getFireTime();\r\n    StringBuffer whoAmI = new StringBuffer(\"AutoSubmitAssessmentsJob $\");\r\n    whoAmI.append(\" Job: \");\r\n    whoAmI.append(jobName);\r\n    whoAmI.append(\" Trigger: \");\r\n    whoAmI.append(triggerName);\r\n    if (requestedFire != null) {\r\n        whoAmI.append(\" Fire scheduled: \");\r\n        whoAmI.append(requestedFire.toString());\r\n    }\r\n    if (actualfire != null) {\r\n        whoAmI.append(\" Fire actual: \");\r\n        whoAmI.append(actualfire.toString());\r\n    }\r\n    EventTrackingService.post(EventTrackingService.newEvent(SamigoConstants.EVENT_AUTO_SUBMIT_JOB, safeEventLength(whoAmI.toString()), true));\r\n    log.info(\"Start Job: \" + whoAmI.toString());\r\n    GradingService gradingService = new GradingService();\r\n    int failures = gradingService.autoSubmitAssessments();\r\n    if (failures > 0) {\r\n        etsProvider.notifyAutoSubmitFailures(failures);\r\n    }\r\n    log.info(\"End Job: \" + whoAmI.toString() + \" (\" + failures + \" failures)\");\r\n    logoutFromSakai();\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.KeywordsFormat.substitute",
	"Comment": "helper method for substitution that will substitute all matches ofa given pattern.",
	"Method": "String substitute(String input,Pattern pattern,String substitution){\r\n    subst.setSubstitution(substitution);\r\n    final String output = Util.substitute(matcher, pattern, subst, input, Util.SUBSTITUTE_ALL);\r\n    subst.setSubstitution(\"\");\r\n    return output;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.QuestionPoolFacade.getQuestionPoolId",
	"Comment": "org.sakaiproject.tool.assessment.ifc.questionpool.questionpooldataifc",
	"Method": "Long getQuestionPoolId(){\r\n    try {\r\n        this.data = (QuestionPoolDataIfc) questionPool.getData();\r\n    } catch (QuestionPoolException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getQuestionPoolId();\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UserPrefsTool.loadRefreshData",
	"Comment": "load refresh data from stored information. this is called when navigated into this page for first time.",
	"Method": "void loadRefreshData(){\r\n    log.debug(\"loadRefreshData()\");\r\n    selectedRefreshItem = \"\";\r\n    refreshUpdated = false;\r\n    if (!hasValue(selectedRefreshItem)) {\r\n        Preferences prefs = (PreferencesEdit) m_preferencesService.getPreferences(getUserId());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.panels.TwitterPrefsPane.setTwitterRequestToken",
	"Comment": "helper to get and set the twitter request token we need for linking accounts",
	"Method": "void setTwitterRequestToken(){\r\n    Map<String, String> config = externalIntegrationLogic.getTwitterOAuthConsumerDetails();\r\n    Twitter twitter = new TwitterFactory().getInstance();\r\n    twitter.setOAuthConsumer(config.get(\"key\"), config.get(\"secret\"));\r\n    try {\r\n        requestToken = twitter.getOAuthRequestToken();\r\n    } catch (TwitterException e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.JoinableSiteSettings.putIsCurrentUserAlreadyMemberInContextForSiteBrowser",
	"Comment": "put a boolean value into the context which indicates if the current user is already a member of the site in question",
	"Method": "boolean putIsCurrentUserAlreadyMemberInContextForSiteBrowser(Context context,String siteID){\r\n    User currentUser = userDirectoryService.getCurrentUser();\r\n    if (currentUser != null && currentUser.getEid() != null) {\r\n        context.put(CONTEXT_JOIN_SITE_ALREADY_MEMBER, siteService.isCurrentUserMemberOfSite(siteID));\r\n        return true;\r\n    } else {\r\n        context.put(CONTEXT_JOIN_SITE_ALREADY_MEMBER, false);\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.web.tool.IFrameAction.checkDigits",
	"Comment": "check if the string from user input contains any characters other than digits",
	"Method": "boolean checkDigits(String height){\r\n    for (int i = 0; i < height.length(); i++) {\r\n        if (VALID_DIGITS.indexOf(height.charAt(i)) == -1)\r\n            return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.provider.user.FilterUserDirectoryProvider.findUserByEmail",
	"Comment": "find a user object who has this email address. update the object with the information found.",
	"Method": "boolean findUserByEmail(UserEdit edit,String email){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"findUserByEmail() edit.getId()=\" + edit.getId() + \"  email=\" + email + \" as \" + providerID);\r\n    }\r\n    if (myProvider.findUserByEmail(edit, email)) {\r\n        return true;\r\n    } else if (nextProvider != null) {\r\n        return nextProvider.findUserByEmail(edit, email);\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateSitesGroups.getMissingGroups",
	"Comment": "provide all the missing groups due to permission difference.",
	"Method": "List<String> getMissingGroups(){\r\n    return missingGroups;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseTransformableNode.isSelected",
	"Comment": "returns true if this node is currently selected by the transformationsystem.",
	"Method": "boolean isSelected(){\r\n    return transformationSystem.getSelectedNode() == this;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.buildLTIToolContextForTemplate",
	"Comment": "prepare lti tool information in context and state variables",
	"Method": "void buildLTIToolContextForTemplate(Context context,SessionState state,Site site,boolean updateToolRegistration){\r\n    List<Map<String, Object>> visibleTools, allTools;\r\n    String siteId = site == null ? UUID.randomUUID().toString() : site.getId();\r\n    visibleTools = m_ltiService.getToolsLaunch(siteId);\r\n    if (site == null) {\r\n        allTools = visibleTools;\r\n    } else {\r\n        allTools = m_ltiService.getToolsLaunch(site.getId());\r\n    }\r\n    if (visibleTools != null && !visibleTools.isEmpty()) {\r\n        HashMap<String, Map<String, Object>> ltiTools = new HashMap();\r\n        HashMap<String, Map<String, Object>> linkedLtiContents = new HashMap();\r\n        if (site != null) {\r\n            List<Map<String, Object>> contents = m_ltiService.getContentsDao(null, null, 0, 0, site.getId(), m_ltiService.isAdmin(site.getId()));\r\n            for (Map<String, Object> content : contents) {\r\n                String ltiToolId = content.get(m_ltiService.LTI_TOOL_ID).toString();\r\n                String ltiSiteId = StringUtils.trimToNull((String) content.get(m_ltiService.LTI_SITE_ID));\r\n                if (siteId != null) {\r\n                    String pstr = (String) content.get(LTIService.LTI_PLACEMENT);\r\n                    if (StringUtils.trimToNull(pstr) != null) {\r\n                        ToolConfiguration toolConfig = SiteService.findTool(pstr);\r\n                        if (toolConfig != null && toolConfig.getSiteId().equals(ltiSiteId)) {\r\n                            Map<String, Object> m = new HashMap();\r\n                            Map<String, Object> ltiToolValues = m_ltiService.getTool(Long.valueOf(ltiToolId), ltiSiteId);\r\n                            if (ltiToolValues != null) {\r\n                                m.put(\"toolTitle\", ltiToolValues.get(LTIService.LTI_TITLE));\r\n                                m.put(\"pageTitle\", ltiToolValues.get(LTIService.LTI_PAGETITLE));\r\n                                m.put(LTIService.LTI_TITLE, (String) content.get(LTIService.LTI_TITLE));\r\n                                m.put(\"contentKey\", content.get(LTIService.LTI_ID));\r\n                                linkedLtiContents.put(ltiToolId, m);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (Map<String, Object> toolMap : visibleTools) {\r\n            String ltiToolId = toolMap.get(\"id\").toString();\r\n            String ltiSiteId = StringUtils.trimToNull((String) toolMap.get(m_ltiService.LTI_SITE_ID));\r\n            toolMap.put(\"selected\", linkedLtiContents.containsKey(ltiSiteId));\r\n            if (ltiSiteId == null || (site != null && siteId.equals(site.getId()))) {\r\n                ltiTools.put(ltiToolId, toolMap);\r\n            }\r\n        }\r\n        for (Map<String, Object> toolMap : allTools) {\r\n            String ltiToolId = toolMap.get(\"id\").toString();\r\n            boolean selected = linkedLtiContents.containsKey(ltiToolId);\r\n            toolMap.put(\"selected\", selected);\r\n            if (selected && ltiTools.get(ltiToolId) == null) {\r\n                ltiTools.put(ltiToolId, toolMap);\r\n            }\r\n        }\r\n        state.setAttribute(STATE_LTITOOL_LIST, ltiTools);\r\n        state.setAttribute(STATE_LTITOOL_EXISTING_SELECTED_LIST, linkedLtiContents);\r\n        context.put(\"ltiTools\", ltiTools);\r\n        context.put(\"selectedLtiTools\", linkedLtiContents);\r\n        if (updateToolRegistration) {\r\n            List<String> idSelected = state.getAttribute(STATE_TOOL_REGISTRATION_SELECTED_LIST) != null ? (List<String>) state.getAttribute(STATE_TOOL_REGISTRATION_SELECTED_LIST) : new ArrayList<String>();\r\n            for (String ltiId : linkedLtiContents.keySet()) {\r\n                idSelected.add(LTITOOL_ID_PREFIX + ltiId);\r\n            }\r\n            state.setAttribute(STATE_TOOL_REGISTRATION_SELECTED_LIST, idSelected);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.addNewSite",
	"Comment": "addnewsite is called when the site has enough information to create a new",
	"Method": "void addNewSite(ParameterParser params,SessionState state){\r\n    if (getStateSite(state) != null) {\r\n        return;\r\n    }\r\n    SiteInfo siteInfo = new SiteInfo();\r\n    if (state.getAttribute(STATE_SITE_INFO) != null) {\r\n        siteInfo = (SiteInfo) state.getAttribute(STATE_SITE_INFO);\r\n    }\r\n    String id = StringUtils.trimToNull(siteInfo.getSiteId());\r\n    if (id == null) {\r\n        id = IdManager.createUuid();\r\n        siteInfo.site_id = id;\r\n    }\r\n    state.setAttribute(STATE_SITE_INFO, siteInfo);\r\n    if (state.getAttribute(STATE_MESSAGE) == null) {\r\n        try {\r\n            Site site = null;\r\n            Site templateSite = (Site) state.getAttribute(STATE_TEMPLATE_SITE);\r\n            if (templateSite != null) {\r\n                site = SiteService.addSite(id, templateSite);\r\n                site.setType(SiteTypeUtil.getTargetSiteType(templateSite.getType()));\r\n            } else {\r\n                site = SiteService.addSite(id, siteInfo.site_type);\r\n            }\r\n            site.addMember(UserDirectoryService.getCurrentUser().getId(), site.getMaintainRole(), true, false);\r\n            String title = StringUtils.trimToNull(siteInfo.title);\r\n            String description = siteInfo.description;\r\n            setAppearance(state, site, siteInfo.iconUrl);\r\n            site.setDescription(description);\r\n            if (title != null) {\r\n                site.setTitle(title);\r\n            }\r\n            ResourcePropertiesEdit rp = site.getPropertiesEdit();\r\n            String locale_string = (String) state.getAttribute(\"locale_string\");\r\n            rp.addProperty(PROP_SITE_LANGUAGE, locale_string);\r\n            site.setShortDescription(siteInfo.short_description);\r\n            site.setPubView(siteInfo.include);\r\n            site.setJoinable(siteInfo.joinable);\r\n            site.setJoinerRole(siteInfo.joinerRole);\r\n            site.setPublished(siteInfo.published);\r\n            rp.addProperty(Site.PROP_SITE_CONTACT_NAME, siteInfo.site_contact_name);\r\n            rp.addProperty(Site.PROP_SITE_CONTACT_EMAIL, siteInfo.site_contact_email);\r\n            rp.addAll(siteInfo.getProperties());\r\n            if (templateSite != null) {\r\n                rp.addProperty(TEMPLATE_USED, templateSite.getId());\r\n            }\r\n            MathJaxEnabler.prepareMathJaxForNewSite(site, state);\r\n            JoinableSiteSettings.updateSitePropertiesFromSiteInfoOnAddNewSite(siteInfo, rp);\r\n            state.setAttribute(STATE_SITE_INSTANCE_ID, site.getId());\r\n            commitSite(site);\r\n        } catch (IdUsedException e) {\r\n            addAlert(state, rb.getFormattedMessage(\"java.sitewithid.exists\", new Object[] { id }));\r\n            log.error(this + \".addNewSite: \" + rb.getFormattedMessage(\"java.sitewithid.exists\", new Object[] { id }), e);\r\n            state.setAttribute(STATE_TEMPLATE_INDEX, params.getString(\"templateIndex\"));\r\n            return;\r\n        } catch (IdInvalidException e) {\r\n            addAlert(state, rb.getFormattedMessage(\"java.sitewithid.notvalid\", new Object[] { id }));\r\n            log.error(this + \".addNewSite: \" + rb.getFormattedMessage(\"java.sitewithid.notvalid\", new Object[] { id }), e);\r\n            state.setAttribute(STATE_TEMPLATE_INDEX, params.getString(\"templateIndex\"));\r\n            return;\r\n        } catch (PermissionException e) {\r\n            addAlert(state, rb.getFormattedMessage(\"java.permission\", new Object[] { id }));\r\n            log.error(this + \".addNewSite: \" + rb.getFormattedMessage(\"java.permission\", new Object[] { id }), e);\r\n            state.setAttribute(STATE_TEMPLATE_INDEX, params.getString(\"templateIndex\"));\r\n            return;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.util.SamigoExpressionParser.parse",
	"Comment": "parses and evaluates the given expressionon error, an error of type error is thrown",
	"Method": "String parse(String new_expr,String parse,String new_expr,int decimals){\r\n    try {\r\n        expr = new_expr.toLowerCase();\r\n        Matcher matcher = oldLogPattern.matcher(expr);\r\n        if (matcher.matches()) {\r\n            expr = expr.replaceAll(\"log\", \"ln\");\r\n        }\r\n        expr = expr.replaceAll(\"sign\", \"sgn\");\r\n        ans = BigDecimal.valueOf(0.0);\r\n        getFirstChar();\r\n        getToken();\r\n        if (token_type == TOKENTYPE.DELIMETER && expr_c == '\\0') {\r\n            throw new SamigoExpressionError(row(), col(), 4);\r\n        }\r\n        Expression e = null;\r\n        try {\r\n            e = new Expression(expr);\r\n            double d = e.calculate();\r\n            ans = new BigDecimal(d, MathContext.DECIMAL64);\r\n        } catch (NumberFormatException nfe) {\r\n            String errorMessage = e != null ? e.getErrorMessage() : expr;\r\n            throw new SamigoExpressionError(401, errorMessage);\r\n        }\r\n        GradingService service = new GradingService();\r\n        ans_str = service.toScientificNotation(ans.toPlainString(), decimals);\r\n        user_var.put(\"ANS\", new BigDecimal(ans_str));\r\n    } catch (SamigoExpressionError err) {\r\n        ans_str = err.get();\r\n        throw err;\r\n    }\r\n    return ans_str;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getEidsForEmail",
	"Comment": "get the eids assocaited with an email address, ie there may be two or more users with the same email address. \twe need to be able to handle this in the ui.",
	"Method": "List<String> getEidsForEmail(String email){\r\n    Collection<User> users = sakaiFacade.getUsersByEmail(email);\r\n    List<String> eids = new ArrayList<String>();\r\n    for (User u : users) {\r\n        eids.add(u.getEid());\r\n    }\r\n    return eids;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.isSiteTitleValid",
	"Comment": "responsible for checking validation status of the original versus stripped site title, and\tadding necessary error messages to the state.",
	"Method": "boolean isSiteTitleValid(String titleOrig,String titleStripped,SessionState state){\r\n    SiteTitleValidationStatus status = SiteService.validateSiteTitle(titleOrig, titleStripped);\r\n    if (null != status)\r\n        switch(status) {\r\n            case STRIPPED_TO_EMPTY:\r\n                addAlert(state, rb.getString(\"siteTitle.htmlStrippedToEmpty\"));\r\n                return false;\r\n            case EMPTY:\r\n                addAlert(state, rb.getString(\"java.specify\"));\r\n                return false;\r\n            case TOO_LONG:\r\n                addAlert(state, rb.getFormattedMessage(\"site_group_title_length_limit\", new Object[] { SiteConstants.SITE_GROUP_TITLE_LIMIT }));\r\n                return false;\r\n        }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.util.ToolUtils.getPageUrl",
	"Comment": "captures the rules for getting the url of a page suitable for a get request",
	"Method": "String getPageUrl(Site site,SitePage page,String getPageUrl,HttpServletRequest req,Site site,SitePage page,String getPageUrl,HttpServletRequest req,Site site,SitePage page,String portalPrefix,String getPageUrl,HttpServletRequest req,Site site,SitePage page,String portalPrefix,boolean reset,String effectiveSiteId,String pageAlias){\r\n    if (page == null)\r\n        return \"\";\r\n    boolean resetSiteProperty = false;\r\n    if (!reset) {\r\n        ResourceProperties siteProperties = site.getProperties();\r\n        try {\r\n            resetSiteProperty = siteProperties.getBooleanProperty(Portal.CONFIG_AUTO_RESET);\r\n        } catch (EntityPropertyNotDefinedException e) {\r\n        } catch (EntityPropertyTypeException e) {\r\n        }\r\n    }\r\n    if (req == null)\r\n        req = getRequestFromThreadLocal();\r\n    if (effectiveSiteId == null)\r\n        effectiveSiteId = site.getId();\r\n    if (pageAlias == null)\r\n        pageAlias = page.getId();\r\n    String pageUrl = Web.returnUrl(req, \"/\" + portalPrefix + \"/\" + Web.escapeUrl(effectiveSiteId) + \"/page/\");\r\n    pageUrl = pageUrl + Web.escapeUrl(pageAlias);\r\n    List<ToolConfiguration> pTools = page.getTools();\r\n    Iterator<ToolConfiguration> toolz = pTools.iterator();\r\n    int count = 0;\r\n    ToolConfiguration pageTool = null;\r\n    while (toolz.hasNext()) {\r\n        count++;\r\n        pageTool = toolz.next();\r\n    }\r\n    if (count != 1)\r\n        return pageUrl;\r\n    if (isPortletPlacement(pageTool))\r\n        return pageUrl;\r\n    boolean trinity = ServerConfigurationService.getBoolean(PORTAL_INLINE_EXPERIMENTAL, PORTAL_INLINE_EXPERIMENTAL_DEFAULT);\r\n    if (!trinity)\r\n        return pageUrl;\r\n    pageUrl = Web.returnUrl(req, \"/\" + portalPrefix + \"/\" + Web.escapeUrl(effectiveSiteId));\r\n    if (reset || resetSiteProperty) {\r\n        pageUrl = pageUrl + \"/tool-reset/\";\r\n    } else {\r\n        pageUrl = pageUrl + \"/tool/\";\r\n    }\r\n    return pageUrl + pageTool.getId();\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.HistoryBean.getDiffToCurrentUrl",
	"Comment": "using the currently set interestedrevision returns an url that will\tgenerate a diff to the current revision from the interested revision",
	"Method": "String getDiffToCurrentUrl(){\r\n    return \"?\" + PAGENAME_URL_ENCODED + \"=\" + urlEncode(getPageName()) + \"&\" + ACTION_URL_ENCODED + \"=\" + urlEncode(WikiPageAction.DIFF_ACTION.getName()) + \"&\" + PANEL_URL_ENCODED + \"=\" + MAIN_URL_ENCODED + \"&\" + LEFT_URL_ENCODED + \"=\" + interestedRevision;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.CopyMeetingSignupMBean.getAllCategories",
	"Comment": "this method is called to get all categories to populate the dropdown",
	"Method": "List<SelectItem> getAllCategories(){\r\n    if (categories == null) {\r\n        categories = new ArrayList<SelectItem>();\r\n        categories.addAll(Utilities.getSignupMeetingsBean().getAllCategories());\r\n        categories.remove(0);\r\n        categories.add(0, new SelectItem(Utilities.rb.getString(\"select_category\")));\r\n    }\r\n    return categories;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doManual_add_course",
	"Comment": "dispatch to different functions based on the option value in the\tparameter",
	"Method": "void doManual_add_course(RunData data){\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    ParameterParser params = data.getParameters();\r\n    String option = params.getString(\"option\");\r\n    if (option.equalsIgnoreCase(\"change\") || option.equalsIgnoreCase(\"add\")) {\r\n        readCourseSectionInfo(state, params);\r\n        String uniqname = StringUtils.trimToNull(params.getString(\"uniqname\"));\r\n        state.setAttribute(STATE_SITE_QUEST_UNIQNAME, uniqname);\r\n        SiteInfo siteInfo = state.getAttribute(STATE_SITE_INFO) != null ? (SiteInfo) state.getAttribute(STATE_SITE_INFO) : new SiteInfo();\r\n        if (params.getString(\"additional\") != null) {\r\n            siteInfo.additional = params.getString(\"additional\");\r\n        }\r\n        state.setAttribute(STATE_SITE_INFO, siteInfo);\r\n        if (option.equalsIgnoreCase(\"add\")) {\r\n            if (state.getAttribute(STATE_FUTURE_TERM_SELECTED) != null && !((Boolean) state.getAttribute(STATE_FUTURE_TERM_SELECTED)).booleanValue()) {\r\n                if (uniqname == null) {\r\n                    addAlert(state, rb.getFormattedMessage(\"java.author\", new Object[] { ServerConfigurationService.getString(\"officialAccountName\") }));\r\n                } else {\r\n                    List instructors = new ArrayList(Arrays.asList(uniqname.split(\",\")));\r\n                    for (Iterator iInstructors = instructors.iterator(); iInstructors.hasNext(); ) {\r\n                        String eid = StringUtils.trimToEmpty((String) iInstructors.next());\r\n                        try {\r\n                            UserDirectoryService.getUserByEid(eid);\r\n                        } catch (UserNotDefinedException e) {\r\n                            addAlert(state, rb.getFormattedMessage(\"java.validAuthor\", new Object[] { ServerConfigurationService.getString(\"officialAccountName\") }));\r\n                            log.error(this + \".doManual_add_course: cannot find user with eid=\" + eid, e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                if (state.getAttribute(STATE_TEMPLATE_SITE) != null) {\r\n                    doFinish(data);\r\n                } else {\r\n                    if (getStateSite(state) == null) {\r\n                        state.setAttribute(STATE_TEMPLATE_INDEX, \"13\");\r\n                    } else {\r\n                        state.setAttribute(STATE_TEMPLATE_INDEX, \"44\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else if (option.equalsIgnoreCase(\"back\")) {\r\n        doBack(data);\r\n    } else if (option.equalsIgnoreCase(\"cancel\")) {\r\n        if (getStateSite(state) == null) {\r\n            doCancel_create(data);\r\n        } else {\r\n            doCancel(data);\r\n        }\r\n    } else if (option.equalsIgnoreCase(\"removeSection\")) {\r\n        removeAnyFlagedSection(state, params);\r\n    } else if (option.equalsIgnoreCase(\"norosters\")) {\r\n        prepareStateForContinueWithNoRoster(state);\r\n    }\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TransformableNode.getRotationController",
	"Comment": "returns the controller that rotates this node using a twist gesture.",
	"Method": "RotationController getRotationController(){\r\n    return rotationController;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Node.newNode",
	"Comment": "creates a new node of the adequate type for the given version number.",
	"Method": "Node newNode(Version vernum,Node rcsnext,Node newNode,Version vernum){\r\n    return newNode(vernum, null);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getInstructors",
	"Comment": "get a list of users that have permission, but format it as a selectitem list for the dropdown.\tsince this is a new item there will be no current instructor so it returns the current user at the top of the list\twe send a null signup meeting param as this is a new meeting.",
	"Method": "List<SelectItem> getInstructors(){\r\n    return Utilities.getSignupMeetingsBean().getInstructors(null);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.EditMeetingSignupMBean.getAllLocations",
	"Comment": "this method is called to get all locations to populate the dropdown",
	"Method": "List<SelectItem> getAllLocations(){\r\n    if (locations == null) {\r\n        locations = new ArrayList<SelectItem>();\r\n        locations.addAll(Utilities.getSignupMeetingsBean().getAllLocations());\r\n        locations.add(0, new SelectItem(Utilities.rb.getString(\"select_location\")));\r\n    }\r\n    return locations;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.existRoleGroup",
	"Comment": "check whether there is already a group within the site containing the role id",
	"Method": "boolean existRoleGroup(String roleId){\r\n    boolean rv = false;\r\n    Collection<Group> groups = site.getGroups();\r\n    for (Group group : groups) {\r\n        String groupWSetupCreated = group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED);\r\n        if (groupWSetupCreated != null && groupWSetupCreated.equalsIgnoreCase(Boolean.TRUE.toString())) {\r\n            String groupRole = group.getProperties().getProperty(SiteConstants.GROUP_PROP_ROLE_PROVIDERID);\r\n            if (groupRole != null && groupRole.equals(roleId)) {\r\n                rv = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.velocity.LibraryWebappLoader.isSourceModified",
	"Comment": "checks to see if a resource has been deleted, moved or modified.",
	"Method": "boolean isSourceModified(Resource resource){\r\n    String fileName = resource.getName();\r\n    Date fileLastLoaded = getCachedFileLastLoaded(fileName);\r\n    if (fileLastLoaded == null) {\r\n        return true;\r\n    }\r\n    if (new Date().getTime() - fileLastLoaded.getTime() > CACHE_EXPIRATION_IN_MILLIS) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.ViewParamsHelperBean.init",
	"Comment": "initializes the bean, gets the parameters out of the request",
	"Method": "void init(){\r\n    String pageName = request.getParameter(ViewBean.PAGE_NAME_PARAM);\r\n    localSpace = request.getParameter(SearchBean.REALM_PARAM);\r\n    defaultRealm = securityService.getSiteReference();\r\n    if (localSpace == null || \"\".equals(localSpace)) {\r\n        localSpace = defaultRealm;\r\n    }\r\n    if (pageName == null || \"\".equals(pageName)) {\r\n        pageName = toolConfigBean.getHomePage();\r\n    }\r\n    globalName = NameHelper.globaliseName(pageName, localSpace);\r\n    search = request.getParameter(SearchBean.SEARCH_PARAM);\r\n    searchPage = request.getParameter(SearchBean.PAGE_PARAM);\r\n    content = request.getParameter(EditBean.CONTENT_PARAM);\r\n    submittedContent = request.getParameter(EditBean.SUBMITTED_CONTENT_PARAM);\r\n    submittedVersion = request.getParameter(EditBean.VERSION_PARAM);\r\n    saveType = getSaveTypeFromParameters(request.getParameterMap());\r\n    String smallChange = request.getParameter(SMALL_CHANGE_PARAM);\r\n    if (smallChange != null && smallChange.equals(SMALL_CHANGE)) {\r\n        ThreadLocalManager.set(RWikiObjectService.SMALL_CHANGE_IN_THREAD, RWikiObjectService.SMALL_CHANGE_IN_THREAD);\r\n    }\r\n    if (saveType != null) {\r\n        saveType = saveType.toLowerCase();\r\n    }\r\n    withBreadcrumbs = \"0\".equals(request.getParameter(ViewBean.PARAM_BREADCRUMB_NAME)) ? \"0\" : \"1\";\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.resetJoinableSetGroupParams",
	"Comment": "utility method to clear our the params for generating additional groups for a joinable set",
	"Method": "void resetJoinableSetGroupParams(){\r\n    joinableSetNumOfMembers = \"\";\r\n    allowPreviewMembership = false;\r\n    allowViewMembership = false;\r\n    joinableSetNumOfGroups = \"\";\r\n    groupsCreated = 0;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.stripAndCleanHtml",
	"Comment": "strips string of html, escaping anything that is left to return plain text.\tdeals better with poorly formed html than just striphtml and is best for xss protection, not for storing actual data.",
	"Method": "String stripAndCleanHtml(String s){\r\n    String stripped = FormattedText.convertFormattedTextToPlaintext(s);\r\n    return StringEscapeUtils.escapeHtml(stripped);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentGradingFacadeQueries.getLastItemGradingData",
	"Comment": "this returns a hashmap of all the latest item entries, keyed byitem id for easy retrieval.",
	"Method": "Map<Long, List<ItemGradingData>> getLastItemGradingData(Long publishedId,String agentId){\r\n    try {\r\n        final HibernateCallback<List<AssessmentGradingData>> hcb = session -> {\r\n            Query q = session.createQuery(\"from AssessmentGradingData a where a.publishedAssessmentId = :id \" + \"and a.agentId = :agent and a.forGrade = :forgrade and a.status <> :status \" + \"order by a.submittedDate DESC\");\r\n            q.setLong(\"id\", publishedId);\r\n            q.setString(\"agent\", agentId);\r\n            q.setBoolean(\"forgrade\", false);\r\n            q.setInteger(\"status\", AssessmentGradingData.NO_SUBMISSION);\r\n            return q.list();\r\n        };\r\n        List<AssessmentGradingData> scores = getHibernateTemplate().execute(hcb);\r\n        if (scores.isEmpty()) {\r\n            return new HashMap();\r\n        }\r\n        HashMap<Long, List<ItemGradingData>> map = new HashMap();\r\n        AssessmentGradingData gdata = scores.get(0);\r\n        gdata.setItemGradingSet(getItemGradingSet(gdata.getAssessmentGradingId()));\r\n        if (gdata.getForGrade()) {\r\n            return new HashMap();\r\n        }\r\n        for (ItemGradingData data : gdata.getItemGradingSet()) {\r\n            List<ItemGradingData> thisone = map.get(data.getPublishedItemId());\r\n            if (thisone == null) {\r\n                thisone = new ArrayList();\r\n            }\r\n            thisone.add(data);\r\n            map.put(data.getPublishedItemId(), thisone);\r\n        }\r\n        return map;\r\n    } catch (Exception e) {\r\n        log.warn(e.getMessage(), e);\r\n        return new HashMap();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.assessment.AssessmentServiceImpl.getBasicInfoOfAllActiveAssessments",
	"Comment": "get list of all active assessments with only basic info populated.",
	"Method": "List getBasicInfoOfAllActiveAssessments(String orderBy,boolean ascending,List getBasicInfoOfAllActiveAssessments,String orderBy){\r\n    try {\r\n        AssessmentService service = new AssessmentService();\r\n        return service.getBasicInfoOfAllActiveAssessments(orderBy);\r\n    } catch (Exception ex) {\r\n        throw new AssessmentServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupUIBaseBean.getValidAttendees",
	"Comment": "clean the list of attendees by checking that each user is valid",
	"Method": "List<SignupAttendee> getValidAttendees(List<SignupAttendee> attendees){\r\n    List<SignupAttendee> cleanedList = new ArrayList<SignupAttendee>();\r\n    for (SignupAttendee attendee : attendees) {\r\n        if (sakaiFacade.checkForUser(attendee.getAttendeeUserId())) {\r\n            cleanedList.add(attendee);\r\n        }\r\n    }\r\n    return cleanedList;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.item.ItemHelperBase.readXMLDocument",
	"Comment": "read an item xml document from a stream into an item xml object",
	"Method": "Item readXMLDocument(InputStream inputStream){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"readDocument(InputStream \" + inputStream);\r\n    }\r\n    Item itemXml = null;\r\n    try {\r\n        AuthoringHelper authoringHelper = new AuthoringHelper(getQtiVersion());\r\n        itemXml = new Item(authoringHelper.readXMLDocument(inputStream).getDocument(), getQtiVersion());\r\n    } catch (ParserConfigurationException e) {\r\n        log.error(e.getMessage(), e);\r\n    } catch (SAXException e) {\r\n        log.error(e.getMessage(), e);\r\n    } catch (IOException e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    return itemXml;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.conversion.ProfileConverter.importProfileImages",
	"Comment": "this imports url profile images into upload profile images.",
	"Method": "void importProfileImages(){\r\n    List<String> allUsers = new ArrayList<String>(dao.getAllSakaiPersonIds());\r\n    if (allUsers.isEmpty()) {\r\n        log.warn(\"Profile2 image converter: No SakaiPersons to process. Nothing to do!\");\r\n        return;\r\n    }\r\n    for (Iterator<String> i = allUsers.iterator(); i.hasNext(); ) {\r\n        String userUuid = i.next();\r\n        ProfileImageUploaded uploadedProfileImage = dao.getCurrentProfileImageRecord(userUuid);\r\n        ci = new ConvertedImage();\r\n        ci.setUserUuid(userUuid);\r\n        if (uploadedProfileImage == null) {\r\n            ProfileImageExternal externalProfileImage = dao.getExternalImageRecordForUser(userUuid);\r\n            if (externalProfileImage == null) {\r\n                log.info(\"No existing external profile images for \" + userUuid);\r\n            } else {\r\n                String mainUrl = externalProfileImage.getMainUrl();\r\n                if (StringUtils.isNotBlank(mainUrl)) {\r\n                    retrieveMainImage(userUuid, mainUrl);\r\n                } else {\r\n                    log.info(\"No URL set for \" + userUuid);\r\n                }\r\n            }\r\n            if (StringUtils.isNotBlank(ci.getMainResourceId())) {\r\n                generateAndPersistThumbnail();\r\n                generateAndPersistAvatar();\r\n            }\r\n        }\r\n        if (ci.isNeedsSaving()) {\r\n            ProfileImageUploaded convertedProfileImage = new ProfileImageUploaded(userUuid, ci.getMainResourceId(), ci.getThumbnailResourceId(), ci.getAvatarResourceId(), true);\r\n            if (dao.addNewProfileImage(convertedProfileImage)) {\r\n                log.info(\"Profile2 image converter: Binary image converted and saved for \" + userUuid);\r\n            } else {\r\n                log.warn(\"Profile2 image converter: Binary image conversion failed for \" + userUuid);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "edu.amc.sakai.user.LdapUserData.setProperty",
	"Comment": "assign a single property to the user, possibly\toverwriting and existing entry.",
	"Method": "void setProperty(String key,String value){\r\n    if (properties == null) {\r\n        properties = new Properties();\r\n    }\r\n    properties.setProperty(key, value);\r\n}"
}, {
	"Path": "org.sakaiproject.poll.tool.entityproviders.PollsEntityProvider.vote",
	"Comment": "allows a user to create multiple vote objects at once, taking one or more\tpolloption parameters.",
	"Method": "void vote(EntityView view,EntityReference ref,String prefix,Search search,OutputStream out,Map<String, Object> params){\r\n    Long pollId = null;\r\n    try {\r\n        pollId = Long.valueOf((String) params.get(\"pollId\"));\r\n    } catch (NumberFormatException nfe) {\r\n        throw new IllegalArgumentException(\"No pollId found.\");\r\n    }\r\n    String userId = userDirectoryService.getCurrentUser().getId();\r\n    Poll poll = pollListManager.getPollById(pollId, false);\r\n    if (poll == null) {\r\n        throw new IllegalArgumentException(\"No poll found to update for the given reference: \" + ref);\r\n    }\r\n    if (!pollVoteManager.isUserAllowedVote(userId, poll.getPollId(), false)) {\r\n        throw new SecurityException(\"User (\" + userId + \") is not allowed to vote in this poll (\" + poll.getPollId() + \")\");\r\n    }\r\n    Set<String> optionIds = new HashSet<String>();\r\n    Object param = params.get(\"pollOption\");\r\n    if (param == null) {\r\n        throw new IllegalArgumentException(\"At least one pollOption parameter must be provided to vote.\");\r\n    } else if (param instanceof String) {\r\n        optionIds.add((String) param);\r\n    } else if (param instanceof Iterable<?>) {\r\n        for (Object o : (Iterable<?>) param) if (o instanceof String)\r\n            optionIds.add((String) o);\r\n        else\r\n            throw new IllegalArgumentException(\"Each pollOption must be a String, not \" + o.getClass().getName());\r\n    } else if (param instanceof Object[]) {\r\n        for (Object o : (Object[]) param) if (o instanceof String)\r\n            optionIds.add((String) o);\r\n        else\r\n            throw new IllegalArgumentException(\"Each pollOption must be a String, not \" + o.getClass().getName());\r\n    } else\r\n        throw new IllegalArgumentException(\"pollOption must be String, String[] or List<String>, not \" + param.getClass().getName());\r\n    Map<Long, Option> options = new HashMap<Long, Option>();\r\n    for (String optionId : optionIds) {\r\n        try {\r\n            Option option = pollListManager.getOptionById(Long.valueOf(optionId));\r\n            if (!poll.getPollId().equals(option.getPollId()))\r\n                throw new Exception();\r\n            options.put(option.getOptionId(), option);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(\"Invalid pollOption: \" + optionId);\r\n        }\r\n    }\r\n    if (options.size() < poll.getMinOptions())\r\n        throw new IllegalArgumentException(\"You must provide at least \" + poll.getMinOptions() + \" options, not \" + options.size() + \".\");\r\n    if (options.size() > poll.getMaxOptions())\r\n        throw new IllegalArgumentException(\"You may provide at most \" + poll.getMaxOptions() + \" options, not \" + options.size() + \".\");\r\n    UsageSession usageSession = usageSessionService.getSession();\r\n    List<Vote> votes = new ArrayList<Vote>();\r\n    for (Option option : options.values()) {\r\n        Vote vote = new Vote();\r\n        vote.setVoteDate(new Date());\r\n        vote.setUserId(userId);\r\n        vote.setPollId(poll.getPollId());\r\n        vote.setPollOption(option.getOptionId());\r\n        if (vote.getSubmissionId() == null) {\r\n            String sid = userId + \":\" + UUID.randomUUID();\r\n            vote.setSubmissionId(sid);\r\n        }\r\n        if (usageSession != null)\r\n            vote.setIp(usageSession.getIpAddress());\r\n        boolean saved = pollVoteManager.saveVote(vote);\r\n        if (!saved) {\r\n            throw new IllegalStateException(\"Unable to save vote (\" + vote + \") for user (\" + userId + \"): \" + ref);\r\n        }\r\n        votes.add(vote);\r\n    }\r\n}"
}, {
	"Path": "org.radeox.regex.MatchResult.create",
	"Comment": "create a new matchresult depending on the used implementation",
	"Method": "MatchResult create(Matcher matcher){\r\n    return new JdkMatchResult(matcher);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.facade.sakai.AuthzSakaiImpl.isSectionManagementAllowed",
	"Comment": "the user must have site.upd to update sections in the section info tool.",
	"Method": "boolean isSectionManagementAllowed(String userUid,String siteContext){\r\n    User sakaiUser = UserDirectoryService.getCurrentUser();\r\n    String siteRef = SiteService.siteReference(siteContext);\r\n    boolean canUpdateSite = SecurityService.unlock(sakaiUser, AuthzSakaiImpl.SITE_UPDATE, siteRef);\r\n    return canUpdateSite;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupTimeslotItem.isAvailable",
	"Comment": "check if current time slot is available for adding more people",
	"Method": "boolean isAvailable(){\r\n    if (attendees == null)\r\n        return true;\r\n    return (attendees.size() < maxNoOfAttendees);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.getRevision",
	"Comment": "get the text belonging to the revision identified by thegiven version number.partial version numbers are ok.set annotate to true to have the lines be annotated with thenumber of the revision in which they were added or changed.",
	"Method": "Object[] getRevision(Object[] getRevision,boolean annotate,Object[] getRevision,String vernum,Object[] getRevision,String vernum,boolean annotate,Object[] getRevision,Version vernum,Object[] getRevision,Version vernum,boolean annotate){\r\n    Path path = getRevisionPath(vernum);\r\n    if (path == null) {\r\n        throw new NodeNotFoundException(vernum);\r\n    }\r\n    Lines lines = new Lines();\r\n    Node revisionFound = path.last();\r\n    path.patch(lines, annotate);\r\n    return doKeywords(lines.toArray(), revisionFound);\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.PrivacyBean.getSites",
	"Comment": "returns an array of selectitem for myworkspace page dropdown list",
	"Method": "SelectItem[] getSites(){\r\n    final List mySites = getSiteList();\r\n    sites = new SelectItem[mySites.toArray().length + 1];\r\n    final Iterator siteIter = mySites.iterator();\r\n    int sitesIndex = 1;\r\n    sites[0] = new SelectItem(\"\", \"\");\r\n    while (siteIter.hasNext()) {\r\n        final Site site = (Site) siteIter.next();\r\n        sites[sitesIndex++] = new SelectItem(\"/site/\" + site.getId(), site.getTitle());\r\n    }\r\n    return sites;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.JoinableSiteSettings.isJoinFromSiteBrowserEnabled",
	"Comment": "helper method to determine if joining from the site browser has been enabled globally",
	"Method": "boolean isJoinFromSiteBrowserEnabled(){\r\n    return siteService.isGlobalJoinFromSiteBrowserEnabled();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.qti.XMLController.displayAssessmentXml",
	"Comment": "sets needed info in xml display bean when id set to assessment id",
	"Method": "String displayAssessmentXml(){\r\n    log.debug(\"XMLController debug getQtiVersion(): \" + this.getQtiVersion());\r\n    documentType = AuthoringXml.ASSESSMENT;\r\n    return display();\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.PagedResourceHelperAction.readAllResources",
	"Comment": "override this to return a list of all the resources that there are to page. sort them as appropriate, and apply search criteria.",
	"Method": "List readAllResources(SessionState state){\r\n    List allResources = new Vector();\r\n    return allResources;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.order.impl.SitePageEditHandler.init",
	"Comment": "initialization method, just gets the current site in preperation for other calls",
	"Method": "void init(){\r\n    if (site == null) {\r\n        String siteId = null;\r\n        try {\r\n            siteId = sessionManager.getCurrentToolSession().getAttribute(HELPER_ID + \".siteId\").toString();\r\n        } catch (java.lang.NullPointerException npe) {\r\n        }\r\n        if (siteId == null) {\r\n            siteId = toolManager.getCurrentPlacement().getContext();\r\n        }\r\n        try {\r\n            site = siteService.getSite(siteId);\r\n            update = siteService.allowUpdateSite(site.getId());\r\n            title = site.getTitle();\r\n        } catch (IdUnusedException e) {\r\n            log.error(e.getMessage(), e);\r\n        }\r\n    }\r\n    String conf = serverConfigurationService.getString(UNHIDEABLES_CFG);\r\n    if (conf != null) {\r\n        unhideables = new HashSet();\r\n        String[] toolIds = conf.split(\",\");\r\n        for (int i = 0; i < toolIds.length; i++) {\r\n            unhideables.add(toolIds[i].trim());\r\n        }\r\n    }\r\n    String uneditablesConfig = serverConfigurationService.getString(UNEDITABLES_CFG, \"\");\r\n    uneditables = new HashSet();\r\n    for (String tool : uneditablesConfig.split(\",\")) {\r\n        uneditables.add(tool);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.assessment.AssessmentHelperBase.updateIPAddressSet",
	"Comment": "if there is ip address set put ip addresses into allowed ip field in xml.",
	"Method": "void updateIPAddressSet(Assessment assessmentXml,Set securedIPAddressSet){\r\n    if (securedIPAddressSet == null || securedIPAddressSet.size() == 0) {\r\n        return;\r\n    }\r\n    Iterator iter = securedIPAddressSet.iterator();\r\n    StringBuilder ipAddressesbuf = new StringBuilder();\r\n    while (iter.hasNext()) {\r\n        SecuredIPAddressIfc sip = (SecuredIPAddressIfc) iter.next();\r\n        String ipAddress = sip.getIpAddress();\r\n        ipAddressesbuf.append(ipAddress + \"\\n\");\r\n    }\r\n    String ipAddresses = ipAddressesbuf.toString();\r\n    assessmentXml.setFieldentry(\"ALLOW_IP\", ipAddresses);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupUIBaseBean.getUserIdForEidOrEmail",
	"Comment": "gets the userid for a user, given an eid or an email address. \twe check if it matches the eid first, then if it matches an email address.\tif nothing, return null.",
	"Method": "String getUserIdForEidOrEmail(String value){\r\n    User u = sakaiFacade.getUserByEid(value);\r\n    if (u == null) {\r\n        u = sakaiFacade.getUserByEmail(value);\r\n    }\r\n    if (u != null) {\r\n        return u.getId();\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "au.edu.anu.portal.portlets.rss.SimpleRSSPortlet.doConfig",
	"Comment": "custom mode handler for config view\tidentical to edit mode.",
	"Method": "void doConfig(RenderRequest request,RenderResponse response){\r\n    log.debug(\"Simple RSS doConfig()\");\r\n    doEdit(request, response);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupTimeslotItem.getMaxNoOfAttendees",
	"Comment": "get the maximum number of attendees, which is allowed in the time slot",
	"Method": "int getMaxNoOfAttendees(){\r\n    return maxNoOfAttendees;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaInfoLevelBuilder.detailed",
	"Comment": "creates a new schemainfolevel for verbose schema information.",
	"Method": "SchemaInfoLevelBuilder detailed(){\r\n    final SchemaInfoLevelBuilder detailed = standard();\r\n    detailed.setRetrieveUserDefinedColumnDataTypes(true);\r\n    detailed.setRetrieveTriggerInformation(true);\r\n    detailed.setRetrieveTableConstraintInformation(true);\r\n    detailed.setRetrieveTableConstraintDefinitions(true);\r\n    detailed.setRetrieveViewInformation(true);\r\n    detailed.setRetrieveRoutineInformation(true);\r\n    detailed.setTag(\"detailed\");\r\n    return detailed;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.JsfUtil.getLocalizedMessage",
	"Comment": "gets a localized message from the message bundle and formats it using theparameter array.",
	"Method": "String getLocalizedMessage(String key,String getLocalizedMessage,String key,String[] params){\r\n    ResourceLoader rl = new ResourceLoader(\"sections\");\r\n    return rl.getFormattedMessage(key, params);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupUIBaseBean.isIcsEnabled",
	"Comment": "is ics calendar generation enabled in the external calendaring service?",
	"Method": "boolean isIcsEnabled(){\r\n    return calendarHelper.isIcsEnabled();\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.participant.impl.SiteAddParticipantHandler.isValidDomain",
	"Comment": "checks if the given domain ends with any of the invalid domains listed in sakai.properties",
	"Method": "boolean isValidDomain(String domain){\r\n    return !StringUtils.endsWithAny(domain, invalidDomains.toArray(new String[invalidDomains.size()]));\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.util.Utilities.getSignupConfigParamVal",
	"Comment": "gets a boolean value for a configuration, instead of a string value.",
	"Method": "String getSignupConfigParamVal(String paramName,String defaultValue,String getSignupConfigParamVal,String paramName,String defaultValue,Set<String> acceptValues,boolean getSignupConfigParamVal,String paramname,boolean defaultValue){\r\n    String stringValue = getSignupConfigParamVal(paramname, String.valueOf(defaultValue));\r\n    return \"true\".equalsIgnoreCase(stringValue);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.order.impl.SitePageEditHandler.resetTitle",
	"Comment": "resets page title to the default and resets titlecustom flag",
	"Method": "String resetTitle(String pageId){\r\n    SitePage page = site.getPage(pageId);\r\n    String oldTitle = page.getTitle();\r\n    page.setTitleCustom(false);\r\n    String newTitle = page.getTitle();\r\n    page.setTitle(newTitle);\r\n    if (page.getTools().size() == 1) {\r\n        ToolConfiguration tool = page.getTools().get(0);\r\n        tool.setTitle(newTitle);\r\n    }\r\n    saveSite(site);\r\n    EventTrackingService.post(EventTrackingService.newEvent(PAGE_RENAME, \"/site/\" + site.getId() + \"/page/\" + page.getId() + \"/old_title/\" + oldTitle + \"/new_title/\" + page.getTitle(), false));\r\n    return newTitle;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.syllabus.SyllabusManagerImpl.removeSyllabusFromSyllabusItem",
	"Comment": "removesyllabustosyllabusitem loads many side of the relationship",
	"Method": "void removeSyllabusFromSyllabusItem(SyllabusItem syllabusItem,SyllabusData syllabusData){\r\n    if (syllabusItem == null || syllabusData == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    HibernateCallback hcb = session -> {\r\n        SyllabusItem returnedItem = (SyllabusItem) session.get(SyllabusItemImpl.class, syllabusItem.getSurrogateKey());\r\n        if (returnedItem != null) {\r\n            returnedItem.getSyllabi().remove(syllabusData);\r\n            returnedItem = (SyllabusItem) session.merge(returnedItem);\r\n        }\r\n        return null;\r\n    };\r\n    getHibernateTemplate().execute(hcb);\r\n}"
}, {
	"Path": "org.sakaiproject.util.MergedList.getAllPermittedChannels",
	"Comment": "forms an array of all channel references to which the user has read access.",
	"Method": "String[] getAllPermittedChannels(ChannelReferenceMaker refMaker){\r\n    List finalList = new ArrayList();\r\n    String[] returnArray = null;\r\n    List siteList = SiteService.getUserSites(false);\r\n    Iterator it = siteList.iterator();\r\n    while (it.hasNext()) {\r\n        Site site = (Site) it.next();\r\n        finalList.add(refMaker.makeReference(site.getId()));\r\n    }\r\n    returnArray = new String[finalList.size()];\r\n    for (int i = 0; i < finalList.size(); i++) {\r\n        returnArray[i] = (String) finalList.get(i);\r\n    }\r\n    return returnArray;\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.BitlyUrlService.shouldCopy",
	"Comment": "this is a placeholder until someone who understands bitly decides what the\tright approach is",
	"Method": "boolean shouldCopy(String url){\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileLinkLogicImpl.getEntityLinkBase",
	"Comment": "helper method to create the link base. we then append more onto it to get the full link.",
	"Method": "String getEntityLinkBase(){\r\n    final StringBuilder base = new StringBuilder();\r\n    base.append(this.sakaiProxy.getServerUrl());\r\n    base.append(ProfileConstants.ENTITY_BROKER_PREFIX);\r\n    base.append(ProfileConstants.LINK_ENTITY_PREFIX);\r\n    return base.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.GradingService.hasDistractors",
	"Comment": "hasdistractors looks at an itemdata object for a matching question and determines\tif all of the choices have correct matches or not.",
	"Method": "boolean hasDistractors(ItemDataIfc item){\r\n    boolean hasDistractor = false;\r\n    Iterator<ItemTextIfc> itemIter = item.getItemTextArraySorted().iterator();\r\n    while (itemIter.hasNext()) {\r\n        ItemTextIfc curItem = itemIter.next();\r\n        if (isDistractor(curItem)) {\r\n            hasDistractor = true;\r\n            break;\r\n        }\r\n    }\r\n    return hasDistractor;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.assessment.PublishedAssessmentServiceImpl.getBasicInfoOfAllActivePublishedAssessments",
	"Comment": "get list of all active published assessments with only basic info populated.",
	"Method": "List getBasicInfoOfAllActivePublishedAssessments(String orderBy,boolean ascending){\r\n    try {\r\n        PublishedAssessmentService service = new PublishedAssessmentService();\r\n        return service.getBasicInfoOfAllActivePublishedAssessments(orderBy, ascending);\r\n    } catch (Exception ex) {\r\n        throw new AssessmentServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Path.patch",
	"Comment": "returns the text that corresponds to applying the patchesin the list of nodes in the path.assume that the text of the first node is plaintext and notdeltatext.",
	"Method": "List patch(List patch,boolean annotate,List patch,List lines,List patch,List lines,boolean annotate){\r\n    Iterator p = path.iterator();\r\n    TrunkNode head = (TrunkNode) p.next();\r\n    head.patch0(lines, annotate);\r\n    while (p.hasNext()) {\r\n        Node n = (Node) p.next();\r\n        n.patch(lines, annotate);\r\n    }\r\n    return lines;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getQuestionBean",
	"Comment": "populate a single itemcontentsbean from an item for delivery",
	"Method": "ItemContentsBean getQuestionBean(ItemDataIfc item,Map itemGradingHash,DeliveryBean delivery,Map publishedAnswerHash){\r\n    ItemContentsBean itemBean = new ItemContentsBean();\r\n    itemBean.setItemData(item);\r\n    itemBean.setMaxPoints(item.getScore().doubleValue());\r\n    itemBean.setPoints((double) 0);\r\n    if (item.getTriesAllowed() != null) {\r\n        itemBean.setTriesAllowed(item.getTriesAllowed());\r\n    }\r\n    if (item.getDuration() != null) {\r\n        itemBean.setDuration(item.getDuration());\r\n    }\r\n    itemBean.setItemGradingDataArray((List) itemGradingHash.get(item.getItemId()));\r\n    if (itemBean.getItemGradingDataArray().size() > 0) {\r\n        itemBean.setItemGradingIdForFilePicker(((ItemGradingData) itemBean.getItemGradingDataArray().get(0)).getItemGradingId());\r\n    }\r\n    Iterator i = itemBean.getItemGradingDataArray().iterator();\r\n    List itemGradingAttachmentList = new ArrayList();\r\n    while (i.hasNext()) {\r\n        ItemGradingData data = (ItemGradingData) i.next();\r\n        itemBean.setGradingComment(data.getComments());\r\n        if (data.getAutoScore() != null) {\r\n            itemBean.setPoints(itemBean.getExactPoints() + data.getAutoScore().doubleValue());\r\n        }\r\n        if (data.getAttemptsRemaining() != null) {\r\n            itemBean.setAttemptsRemaining(data.getAttemptsRemaining());\r\n        }\r\n        if (delivery.getActionMode() == 3 || delivery.getActionMode() == 4) {\r\n            itemGradingAttachmentList.addAll(data.getItemGradingAttachmentList());\r\n        } else {\r\n            itemGradingAttachmentList.addAll(new ArrayList<ItemGradingAttachment>());\r\n        }\r\n    }\r\n    if (Precision.equals(itemBean.getExactPoints(), itemBean.getMaxPoints(), 0.001d)) {\r\n        itemBean.setPoints(itemBean.getMaxPoints());\r\n    }\r\n    itemBean.setItemGradingAttachmentList(itemGradingAttachmentList);\r\n    if (item.getTypeId().equals(TypeIfc.ESSAY_QUESTION) || item.getTypeId().equals(TypeIfc.FILE_UPLOAD) || item.getTypeId().equals(TypeIfc.MULTIPLE_CHOICE_SURVEY) || item.getTypeId().equals(TypeIfc.AUDIO_RECORDING) || item.getTypeId().equals(TypeIfc.MATRIX_CHOICES_SURVEY)) {\r\n        itemBean.setFeedback(item.getGeneralItemFeedback());\r\n    } else if (itemBean.getMaxPoints() > 0 && !item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT)) {\r\n        if (itemBean.getExactPoints() >= itemBean.getMaxPoints()) {\r\n            itemBean.setFeedback(item.getCorrectItemFeedback());\r\n        } else {\r\n            itemBean.setFeedback(item.getInCorrectItemFeedback());\r\n        }\r\n    } else {\r\n        List<ItemGradingData> itemgradingList = itemBean.getItemGradingDataArray();\r\n        Iterator<ItemGradingData> iterAnswer = itemgradingList.iterator();\r\n        boolean haswronganswer = true;\r\n        Map fibmap = new HashMap();\r\n        int mcmc_match_counter = 0;\r\n        if (iterAnswer.hasNext()) {\r\n            haswronganswer = false;\r\n        }\r\n        int correctAnswers = 0;\r\n        if ((item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS)) || (item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT)) || (item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT_SINGLE_SELECTION)) || (item.getTypeId().equals(TypeIfc.MATCHING))) {\r\n            Iterator itemTextIter = item.getItemTextArray().iterator();\r\n            while (itemTextIter.hasNext()) {\r\n                ItemTextIfc itemText = (ItemTextIfc) itemTextIter.next();\r\n                List answerArray = itemText.getAnswerArray();\r\n                if (answerArray != null) {\r\n                    for (int indexAnswer = 0; indexAnswer < answerArray.size(); indexAnswer++) {\r\n                        AnswerIfc a = (AnswerIfc) answerArray.get(indexAnswer);\r\n                        if (a.getIsCorrect().booleanValue())\r\n                            correctAnswers++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        while (iterAnswer.hasNext()) {\r\n            ItemGradingData data = iterAnswer.next();\r\n            AnswerIfc answer = (AnswerIfc) publishedAnswerHash.get(data.getPublishedAnswerId());\r\n            if (item.getTypeId().equals(TypeIfc.FILL_IN_BLANK)) {\r\n                GradingService gs = new GradingService();\r\n                boolean correctanswer = gs.getFIBResult(data, fibmap, item, publishedAnswerHash);\r\n                if (!correctanswer) {\r\n                    haswronganswer = true;\r\n                    break;\r\n                }\r\n            } else if (item.getTypeId().equals(TypeIfc.FILL_IN_NUMERIC)) {\r\n                GradingService gs = new GradingService();\r\n                try {\r\n                    boolean correctanswer = gs.getFINResult(data, item, publishedAnswerHash);\r\n                    if (!correctanswer) {\r\n                        haswronganswer = true;\r\n                        break;\r\n                    }\r\n                } catch (FormatException e) {\r\n                    log.debug(\"should not come to here\");\r\n                }\r\n            } else if ((item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS)) || (item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT)) || (item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT_SINGLE_SELECTION)) || (item.getTypeId().equals(TypeIfc.MATCHING))) {\r\n                if ((answer != null) && (answer.getIsCorrect() == null || !answer.getIsCorrect().booleanValue())) {\r\n                    haswronganswer = true;\r\n                    break;\r\n                } else if (answer != null) {\r\n                    mcmc_match_counter++;\r\n                }\r\n            } else {\r\n                if ((answer != null) && (answer.getIsCorrect() == null || !answer.getIsCorrect().booleanValue())) {\r\n                    haswronganswer = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if ((item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS)) || (item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT)) || (item.getTypeId().equals(TypeIfc.MATCHING))) {\r\n            if (mcmc_match_counter != correctAnswers) {\r\n                haswronganswer = true;\r\n            }\r\n        }\r\n        if (haswronganswer) {\r\n            itemBean.setFeedback(item.getInCorrectItemFeedback());\r\n        } else {\r\n            itemBean.setFeedback(item.getCorrectItemFeedback());\r\n        }\r\n    }\r\n    boolean randomize = false;\r\n    i = item.getItemMetaDataSet().iterator();\r\n    while (i.hasNext()) {\r\n        ItemMetaDataIfc meta = (ItemMetaDataIfc) i.next();\r\n        if (meta.getLabel().equals(ItemMetaDataIfc.RANDOMIZE)) {\r\n            if (meta.getEntry().equals(\"true\")) {\r\n                randomize = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    List myanswers = new ArrayList();\r\n    ResourceLoader rb = null;\r\n    rb = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.DeliveryMessages\");\r\n    String key = \"\";\r\n    Iterator key1 = item.getItemTextArraySorted().iterator();\r\n    int j = 0;\r\n    while (key1.hasNext()) {\r\n        j++;\r\n        myanswers = new ArrayList();\r\n        ItemTextIfc text = (ItemTextIfc) key1.next();\r\n        Iterator key2 = null;\r\n        if (item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS) && text.isEmiQuestionItemText()) {\r\n            int correctAnswerCnt = 0;\r\n            Iterator answersIter = text.getAnswerArraySorted().iterator();\r\n            while (answersIter.hasNext()) {\r\n                AnswerIfc answer = (AnswerIfc) answersIter.next();\r\n                if (answer.getIsCorrect()) {\r\n                    correctAnswerCnt += 1;\r\n                }\r\n            }\r\n            String required = null;\r\n            if (text.getRequiredOptionsCount() != null && text.getRequiredOptionsCount().intValue() < correctAnswerCnt) {\r\n                required = text.getRequiredOptionsCount().toString();\r\n                key += \" | \" + text.getSequence() + \": \" + required + \" \" + rb.getString(\"of\") + \" \";\r\n            } else {\r\n                key += \" | \" + text.getSequence() + \": \";\r\n            }\r\n        }\r\n        List<Long> alwaysRandomizeTypes = Arrays.asList(TypeIfc.MATCHING);\r\n        List<Long> neverRandomizeTypes = Arrays.asList(TypeIfc.FILL_IN_BLANK, TypeIfc.FILL_IN_NUMERIC, TypeIfc.MATRIX_CHOICES_SURVEY, TypeIfc.CALCULATED_QUESTION, TypeIfc.IMAGEMAP_QUESTION);\r\n        if (alwaysRandomizeTypes.contains(item.getTypeId()) || (randomize && !neverRandomizeTypes.contains(item.getTypeId()))) {\r\n            List shuffled = new ArrayList();\r\n            Iterator i1 = text.getAnswerArraySorted().iterator();\r\n            while (i1.hasNext()) {\r\n                shuffled.add(i1.next());\r\n            }\r\n            String agentString = \"\";\r\n            if (delivery.getActionMode() == DeliveryBean.GRADE_ASSESSMENT) {\r\n                StudentScoresBean studentscorebean = (StudentScoresBean) ContextUtil.lookupBean(\"studentScores\");\r\n                agentString = studentscorebean.getStudentId();\r\n            } else {\r\n                agentString = getAgentString();\r\n            }\r\n            String itemText = (item.getText() == null) ? \"\" : item.getText();\r\n            Collections.shuffle(shuffled, new Random((long) itemText.hashCode() + (getAgentString() + \"_\" + item.getItemId().toString()).hashCode()));\r\n            key2 = shuffled.iterator();\r\n        } else {\r\n            key2 = text.getAnswerArraySorted().iterator();\r\n        }\r\n        int k = 0;\r\n        while (key2.hasNext()) {\r\n            AnswerIfc answer = (AnswerIfc) key2.next();\r\n            if ((answer.getText() == null || answer.getText().trim().equals(\"\")) && (item.getTypeId().equals(TypeIfc.MULTIPLE_CHOICE) || item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT) || item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT_SINGLE_SELECTION) || item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS) || item.getTypeId().equals(TypeIfc.MULTIPLE_CHOICE_SURVEY) || item.getTypeId().equals(TypeIfc.MATRIX_CHOICES_SURVEY))) {\r\n            } else {\r\n                if ((!item.getPartialCreditFlag() && item.getTypeId().equals(TypeIfc.MULTIPLE_CHOICE)) || item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT) || item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT_SINGLE_SELECTION) || item.getTypeId().equals(TypeIfc.MATCHING) || item.getTypeId().equals(TypeIfc.IMAGEMAP_QUESTION)) {\r\n                    answer.setLabel(Character.toString(alphabet.charAt(k++)));\r\n                    if (answer.getIsCorrect() != null && answer.getIsCorrect().booleanValue()) {\r\n                        String addition = \"\";\r\n                        if (item.getTypeId().equals(TypeIfc.MATCHING)) {\r\n                            addition = Integer.toString(j) + \":\";\r\n                        }\r\n                        if (\"\".equals(key)) {\r\n                            key += addition + answer.getLabel();\r\n                        } else {\r\n                            key += \", \" + addition + answer.getLabel();\r\n                        }\r\n                    }\r\n                }\r\n                if (item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS) && text.isEmiQuestionItemText() && answer.getIsCorrect()) {\r\n                    key += answer.getLabel();\r\n                }\r\n                if (item.getTypeId().equals(TypeIfc.MULTIPLE_CHOICE) && item.getPartialCreditFlag()) {\r\n                    Double pc = Double.valueOf(answer.getPartialCredit());\r\n                    if (pc == null) {\r\n                        pc = Double.valueOf(0d);\r\n                    }\r\n                    if (pc > 0) {\r\n                        if (rb == null) {\r\n                            rb = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.DeliveryMessages\");\r\n                        }\r\n                        String correct = rb.getString(\"alt_correct\");\r\n                        if ((\"\").equals(key)) {\r\n                            key = answer.getLabel() + \"&nbsp;<span style='color: green'>(\" + pc + \"%&nbsp;\" + correct + \")<\/span>\";\r\n                        } else {\r\n                            key += \",&nbsp;\" + answer.getLabel() + \"&nbsp;<span style='color: green'>(\" + pc + \"%&nbsp;\" + correct + \")<\/span>\";\r\n                        }\r\n                    }\r\n                }\r\n                if (item.getTypeId().equals(TypeIfc.TRUE_FALSE) && answer.getIsCorrect() != null && answer.getIsCorrect().booleanValue()) {\r\n                    if (rb == null) {\r\n                        rb = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.DeliveryMessages\");\r\n                    }\r\n                    if (answer.getText().equalsIgnoreCase(\"true\") || answer.getText().equalsIgnoreCase(rb.getString(\"true_msg\"))) {\r\n                        key = rb.getString(\"true_msg\");\r\n                    } else {\r\n                        key = rb.getString(\"false_msg\");\r\n                    }\r\n                }\r\n                if (item.getTypeId().equals(TypeIfc.FILE_UPLOAD) || item.getTypeId().equals(TypeIfc.ESSAY_QUESTION) || item.getTypeId().equals(TypeIfc.AUDIO_RECORDING)) {\r\n                    key += answer.getText();\r\n                }\r\n                if (item.getTypeId().equals(TypeIfc.FILL_IN_BLANK) || item.getTypeId().equals(TypeIfc.FILL_IN_NUMERIC)) {\r\n                    if (\"\".equals(key)) {\r\n                        key += answer.getText();\r\n                    } else {\r\n                        key += \", \" + answer.getText();\r\n                    }\r\n                }\r\n                if (item.getTypeId().equals(TypeIfc.CALCULATED_QUESTION)) {\r\n                    key = commaDelimtedCalcQuestionAnswers(item, delivery, itemBean);\r\n                }\r\n                myanswers.add(answer);\r\n            }\r\n        }\r\n    }\r\n    if (item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS)) {\r\n        key += \" | \";\r\n    }\r\n    if (item.getTypeId().equals(TypeIfc.MATCHING)) {\r\n        StringBuilder distractorKeys = new StringBuilder();\r\n        for (ItemTextIfc thisItemText : itemBean.getItemData().getItemTextArray()) {\r\n            boolean hasCorrectAnswer = false;\r\n            for (AnswerIfc thisItemAnswer : thisItemText.getAnswerArray()) {\r\n                if (thisItemAnswer.getIsCorrect()) {\r\n                    hasCorrectAnswer = true;\r\n                }\r\n            }\r\n            if (!hasCorrectAnswer) {\r\n                distractorKeys.append(\", \").append(thisItemText.getSequence()).append(\":\").append(Character.toString(alphabet.charAt(myanswers.size())));\r\n            }\r\n        }\r\n        if (distractorKeys.length() > 0) {\r\n            key = key + distractorKeys.toString();\r\n        }\r\n        String[] individualKeys = key.split(\",\");\r\n        for (int k = 0; k < individualKeys.length; k++) {\r\n            String thisIndividualKey = individualKeys[k].trim();\r\n            individualKeys[k] = thisIndividualKey;\r\n        }\r\n        Arrays.sort(individualKeys);\r\n        StringBuilder sortedKeysBuffer = new StringBuilder();\r\n        for (int k = 0; k < individualKeys.length; k++) {\r\n            if (k == individualKeys.length - 1) {\r\n                sortedKeysBuffer.append(\" \").append(individualKeys[k]);\r\n            } else {\r\n                sortedKeysBuffer.append(\" \").append(individualKeys[k]).append(\",\");\r\n            }\r\n        }\r\n        key = sortedKeysBuffer.toString();\r\n    }\r\n    itemBean.setKey(key);\r\n    itemBean.setShuffledAnswers(myanswers);\r\n    List answers = new ArrayList();\r\n    if (item.getTypeId().equals(TypeIfc.MULTIPLE_CHOICE) || item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT) || item.getTypeId().equals(TypeIfc.MULTIPLE_CORRECT_SINGLE_SELECTION) || item.getTypeId().equals(TypeIfc.MULTIPLE_CHOICE_SURVEY) || item.getTypeId().equals(TypeIfc.TRUE_FALSE) || item.getTypeId().equals(TypeIfc.MATCHING)) {\r\n        Iterator iter = myanswers.iterator();\r\n        SelectionBean selectionBean = null;\r\n        while (iter.hasNext()) {\r\n            AnswerIfc answer = (AnswerIfc) iter.next();\r\n            selectionBean = new SelectionBean();\r\n            selectionBean.setItemContentsBean(itemBean);\r\n            selectionBean.setAnswer(answer);\r\n            if (item.getTypeId().equals(TypeIfc.TRUE_FALSE) && answer.getText().equals(\"true\")) {\r\n                if (rb == null) {\r\n                    rb = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.DeliveryMessages\");\r\n                }\r\n                answer.setText(rb.getString(\"true_msg\"));\r\n            }\r\n            if (item.getTypeId().equals(TypeIfc.TRUE_FALSE) && answer.getText().equals(\"false\")) {\r\n                if (rb == null) {\r\n                    rb = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.DeliveryMessages\");\r\n                }\r\n                answer.setText(rb.getString(\"false_msg\"));\r\n            }\r\n            String label = \"\";\r\n            if (answer.getLabel() == null) {\r\n                answer.setLabel(\"\");\r\n            }\r\n            if (!answer.getLabel().equals(\"\")) {\r\n                label += answer.getLabel() + \". \" + answer.getText();\r\n            } else {\r\n                label = answer.getText();\r\n            }\r\n            selectionBean.setResponse(false);\r\n            Iterator iter1 = itemBean.getItemGradingDataArray().iterator();\r\n            while (iter1.hasNext()) {\r\n                ItemGradingData data = (ItemGradingData) iter1.next();\r\n                AnswerIfc pubAnswer = (AnswerIfc) publishedAnswerHash.get(data.getPublishedAnswerId());\r\n                if (pubAnswer != null && (pubAnswer.equals(answer) || data.getPublishedAnswerId().equals(answer.getId()))) {\r\n                    selectionBean.setItemGradingData(data);\r\n                    selectionBean.setResponse(true);\r\n                }\r\n            }\r\n            if (delivery.getFeedbackComponent() != null && delivery.getFeedback().equals(\"true\") && delivery.getFeedbackComponent().getShowSelectionLevel()) {\r\n                if (answer.getIsCorrect() == null) {\r\n                    selectionBean.setFeedback(answer.getGeneralAnswerFeedback());\r\n                } else if (selectionBean.getResponse() && answer.getIsCorrect().booleanValue() || !selectionBean.getResponse() && !answer.getIsCorrect().booleanValue()) {\r\n                    selectionBean.setFeedback(answer.getCorrectAnswerFeedback());\r\n                } else {\r\n                    selectionBean.setFeedback(answer.getInCorrectAnswerFeedback());\r\n                }\r\n            }\r\n            String description = \"\";\r\n            if (delivery.getFeedback().equals(\"true\") && delivery.getFeedbackComponent().getShowCorrectResponse() && answer.getIsCorrect() != null) {\r\n                description = answer.getIsCorrect().toString();\r\n            }\r\n            SelectItem newItem = new SelectItem(answer.getId().toString(), label, description);\r\n            if (item.getTypeId().equals(TypeIfc.TRUE_FALSE)) {\r\n                answers.add(newItem);\r\n            } else {\r\n                answers.add(selectionBean);\r\n            }\r\n        }\r\n    }\r\n    itemBean.setAnswers(answers);\r\n    itemBean.setSelectionArray(answers);\r\n    if (item.getTypeId().equals(TypeIfc.MATCHING)) {\r\n        populateMatching(item, itemBean, publishedAnswerHash);\r\n    } else if (item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS)) {\r\n        populateEMI(item, itemBean, publishedAnswerHash);\r\n    } else if (item.getTypeId().equals(TypeIfc.FILL_IN_BLANK)) {\r\n        populateFib(item, itemBean, publishedAnswerHash);\r\n    } else if (item.getTypeId().equals(TypeIfc.FILL_IN_NUMERIC)) {\r\n        populateFin(item, itemBean, publishedAnswerHash);\r\n    } else if (item.getTypeId().equals(TypeIfc.ESSAY_QUESTION)) {\r\n        String responseText = itemBean.getResponseText();\r\n        itemBean.setResponseText(responseText);\r\n    } else if (item.getTypeId().equals(TypeIfc.MATRIX_CHOICES_SURVEY)) {\r\n        populateMatrixChoices(item, itemBean, publishedAnswerHash);\r\n    } else if (item.getTypeId().equals(TypeIfc.CALCULATED_QUESTION)) {\r\n        populateCalculatedQuestion(item, itemBean, delivery);\r\n    } else if (item.getTypeId().equals(TypeIfc.IMAGEMAP_QUESTION)) {\r\n        populateImageMapQuestion(item, itemBean, publishedAnswerHash);\r\n    }\r\n    return itemBean;\r\n}"
}, {
	"Path": "schemacrawler.utility.Identifiers.getIdentifierQuoteString",
	"Comment": "gets the string used to quote database object identifiers, asprovided by the database server, or as overridden by the caller.",
	"Method": "String getIdentifierQuoteString(){\r\n    return identifierQuoteString;\r\n}"
}, {
	"Path": "org.sakaiproject.component.imsent.user.IMSEntUserDirectoryProvider.getUser",
	"Comment": "access a user object. update the object with the information found.",
	"Method": "boolean getUser(UserEdit edit){\r\n    if (!isReady())\r\n        return false;\r\n    if (edit == null)\r\n        return false;\r\n    String userId = edit.getEid();\r\n    log.info(\"getUser(\" + userId + \")\");\r\n    SakaiIMSUser rv = retrieveUser(userId, false);\r\n    if (rv == null)\r\n        return false;\r\n    copyInfo(edit, rv);\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.isPageOrderAllowed",
	"Comment": "whether the pageorderhelper is allowed to be shown in this site type",
	"Method": "boolean isPageOrderAllowed(String siteType,String overrideSitePageOrderSetting){\r\n    if (overrideSitePageOrderSetting != null && Boolean.valueOf(overrideSitePageOrderSetting)) {\r\n        return true;\r\n    } else {\r\n        boolean rv = true;\r\n        String hidePageOrderSiteTypes = ServerConfigurationService.getString(SiteConstants.SAKAI_PROPERTY_HIDE_PAGEORDER_SITE_TYPES, \"\");\r\n        if (hidePageOrderSiteTypes.length() != 0) {\r\n            if (new ArrayList<String>(Arrays.asList(StringUtils.split(hidePageOrderSiteTypes, \",\"))).contains(siteType)) {\r\n                rv = false;\r\n            }\r\n        }\r\n        return rv;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.jsf.renderer.util.RendererUtil.isDisabledOrReadonly",
	"Comment": "if renderer supports disabled or readonly attributes use this method toobtain an early exit from decode method.good idea to include it anyway,compnent will continue to work when these properties are added.",
	"Method": "boolean isDisabledOrReadonly(UIComponent component){\r\n    boolean disabled = false;\r\n    boolean readOnly = false;\r\n    Object disabledAttr = component.getAttributes().get(\"disabled\");\r\n    if (disabledAttr != null) {\r\n        disabled = disabledAttr.equals(Boolean.TRUE);\r\n    }\r\n    Object readOnlyAttr = component.getAttributes().get(\"readonly\");\r\n    if (readOnlyAttr != null) {\r\n        readOnly = readOnlyAttr.equals(Boolean.TRUE);\r\n    }\r\n    return readOnly | disabled;\r\n}"
}, {
	"Path": "us.fatehi.commandlineparser.CommandLineUtility.loadConfig",
	"Comment": "loads configuration from a number of sources, in order of priority.",
	"Method": "Config loadConfig(Config argsMap,DatabaseConnector dbConnector){\r\n    final Config config = new Config();\r\n    if (dbConnector != null) {\r\n        config.putAll(dbConnector.getConfig());\r\n    }\r\n    try {\r\n        config.putAll(PropertiesUtility.loadConfig(new ClasspathInputResource(\"/schemacrawler.config.properties\")));\r\n    } catch (final IOException e) {\r\n        LOGGER.log(Level.CONFIG, \"schemacrawler.config.properties not found on CLASSPATH\");\r\n    }\r\n    if (argsMap != null) {\r\n        config.putAll(argsMap);\r\n    }\r\n    new ConfigParser(config).loadConfig();\r\n    config.putAll(argsMap);\r\n    new ConfigParser(config).consumeOptions();\r\n    return config;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.authz.integrated.AuthzQueriesFacade.removeAuthorizationByQualifierAndFunction",
	"Comment": "removes an authorization for a specified qualifier and function",
	"Method": "void removeAuthorizationByQualifierAndFunction(String qualifierId,String functionId){\r\n    String query = \"select a from AuthorizationData a where a.qualifierId = :id and a.functionId = :fid\";\r\n    List l = getHibernateTemplate().findByNamedParam(query, new String[] { \"id\", \"fid\" }, new String[] { qualifierId, functionId });\r\n    getHibernateTemplate().deleteAll(l);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentFacadeQueries.removeAllItems",
	"Comment": "this method remove a set of questions form one section that is random",
	"Method": "void removeAllItems(Long sourceSectionId){\r\n    SectionData section = loadSection(sourceSectionId);\r\n    AssessmentData assessment = (AssessmentData) section.getAssessment();\r\n    assessment.setLastModifiedBy(AgentFacade.getAgentString());\r\n    assessment.setLastModifiedDate(new Date());\r\n    Set itemSet = section.getItemSet();\r\n    Iterator iter = itemSet.iterator();\r\n    while (iter.hasNext()) {\r\n        ItemData item = (ItemData) iter.next();\r\n        item.setSection(null);\r\n        int retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n        while (retryCount > 0) {\r\n            try {\r\n                getHibernateTemplate().update(item);\r\n                retryCount = 0;\r\n            } catch (Exception e) {\r\n                log.warn(\"problem updating item: \" + e.getMessage());\r\n                retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n            }\r\n        }\r\n    }\r\n    int retryCount = PersistenceService.getInstance().getPersistenceHelper().getRetryCount();\r\n    while (retryCount > 0) {\r\n        try {\r\n            // sections\r\n            getHibernateTemplate().update(assessment);\r\n            retryCount = 0;\r\n        } catch (Exception e) {\r\n            log.warn(\"problem updating asssessment: \" + e.getMessage());\r\n            retryCount = PersistenceService.getInstance().getPersistenceHelper().retryDeadlock(e, retryCount);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.getAllSitesForUser",
	"Comment": "return xml document listing all sites user has read or write access based on their session id, including my workspace sites",
	"Method": "String getAllSitesForUser(String sessionid,String eid){\r\n    String newsessionid = getSessionForUser(sessionid, eid, true);\r\n    Session session = establishSession(newsessionid);\r\n    return getAllSitesForCurrentUser(newsessionid);\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.RecentlyVisitedHelperBean.getRecentlyVisitedBean",
	"Comment": "retrieve the current recentlyvisitedbean from the passed\tin servletrequest or create one in the default space.",
	"Method": "RecentlyVisitedBean getRecentlyVisitedBean(HttpServletRequest request,String defaultSpace,RecentlyVisitedBean getRecentlyVisitedBean){\r\n    return recentBean;\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.ControllerServlet.isPageToolDefault",
	"Comment": "check to see if the reques represents the tool default page. this is not\tthe same as the view home. it is the same as first entry into a tool or\twhen the page is refreshed",
	"Method": "boolean isPageToolDefault(HttpServletRequest request){\r\n    if (TITLE_PANEL.equals(request.getParameter(PANEL)))\r\n        return false;\r\n    String pathInfo = request.getPathInfo();\r\n    String queryString = request.getQueryString();\r\n    String method = request.getMethod();\r\n    return (\"GET\".equalsIgnoreCase(method) && (pathInfo == null || request.getPathInfo().length() == 0) && (queryString == null || queryString.length() == 0));\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.findNode",
	"Comment": "return the node with the version number that matches the one provided.the given version number may be partial.",
	"Method": "Node findNode(Version vernum){\r\n    Path path = getRevisionPath(vernum);\r\n    return (path == null ? null : path.last());\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.component.service.impl.RWikiObjectServiceImpl.findEntityReferenceMatch",
	"Comment": "see if the reference matches one of the regeistered regex patterns",
	"Method": "EntityHandler findEntityReferenceMatch(String reference){\r\n    if (!reference.startsWith(REFERENCE_ROOT))\r\n        return null;\r\n    for (Iterator i = m_handlers.keySet().iterator(); i.hasNext(); ) {\r\n        String s = (String) i.next();\r\n        EntityHandler eh = (EntityHandler) m_handlers.get(s);\r\n        if (eh.matches(reference))\r\n            return eh;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.SimpleDiff.buildEqSet",
	"Comment": "create a map from each common item in orig and rev to the\tindex of its first occurrence in orig",
	"Method": "Map buildEqSet(Object[] orig,Object[] rev){\r\n    Set items = new HashSet(Arrays.asList(orig));\r\n    items.retainAll(Arrays.asList(rev));\r\n    Map eqs = new HashMap();\r\n    for (int i = 0; i < orig.length; i++) {\r\n        if (items.contains(orig[i])) {\r\n            eqs.put(orig[i], Integer.valueOf(i));\r\n            items.remove(orig[i]);\r\n        }\r\n    }\r\n    return eqs;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacadeQueries.getBasicInfoOfLastSubmittedAssessments",
	"Comment": "return an array list of the last assessmentgradingfacade per assessment\tthat a user has submitted for grade.",
	"Method": "List<AssessmentGradingData> getBasicInfoOfLastSubmittedAssessments(String agentId,String orderBy,boolean ascending){\r\n    final String query = \"select new AssessmentGradingData(\" + \" a.assessmentGradingId, p.publishedAssessmentId, p.title, a.agentId,\" + \" a.submittedDate, a.isLate,\" + \" a.forGrade, a.totalAutoScore, a.totalOverrideScore,a.finalScore,\" + \" a.comments, a.status, a.gradedBy, a.gradedDate, a.attemptDate,\" + \" a.timeElapsed) \" + \" from AssessmentGradingData a, PublishedAssessmentData p\" + \" where a.publishedAssessmentId = p.publishedAssessmentId  and a.forGrade = :forgrade and a.agentId = :agent\" + \" order by p.publishedAssessmentId DESC, a.submittedDate DESC\";\r\n    final HibernateCallback<List<AssessmentGradingData>> hcb = session -> {\r\n        Query q = session.createQuery(query);\r\n        q.setBoolean(\"forgrade\", true);\r\n        q.setString(\"agent\", agentId);\r\n        return q.list();\r\n    };\r\n    List<AssessmentGradingData> list = getHibernateTemplate().execute(hcb);\r\n    List<AssessmentGradingData> assessmentList = new ArrayList();\r\n    Long current = 0L;\r\n    for (AssessmentGradingData a : list) {\r\n        if (!a.getPublishedAssessmentId().equals(current)) {\r\n            current = a.getPublishedAssessmentId();\r\n            AssessmentGradingData f = a;\r\n            assessmentList.add(f);\r\n        }\r\n    }\r\n    return assessmentList;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.QuestionScoreListener.questionScores",
	"Comment": "this will populate the questionscoresbean with the data associated with\tthe particular versioned assessment based on the publishedid.",
	"Method": "boolean questionScores(String publishedId,QuestionScoresBean bean,boolean isValueChange){\r\n    log.debug(\"questionScores()\");\r\n    try {\r\n        PublishedAssessmentService pubService = new PublishedAssessmentService();\r\n        PublishedItemService pubItemService = new PublishedItemService();\r\n        QuestionScoresBean questionBean = (QuestionScoresBean) ContextUtil.lookupBean(\"questionScores\");\r\n        PublishedAssessmentIfc publishedAssessment = questionBean.getPublishedAssessment();\r\n        if (publishedAssessment == null) {\r\n            publishedAssessment = pubService.getPublishedAssessment(publishedId);\r\n            questionBean.setPublishedAssessment(publishedAssessment);\r\n        }\r\n        Map publishedItemHash = pubService.preparePublishedItemHash(publishedAssessment);\r\n        log.debug(\"questionScores(): publishedItemHash.size = \" + publishedItemHash.size());\r\n        Map<Long, ItemTextIfc> publishedItemTextHash = pubService.preparePublishedItemTextHash(publishedAssessment);\r\n        log.debug(\"questionScores(): publishedItemTextHash.size = \" + publishedItemTextHash.size());\r\n        GradingService delegate = new GradingService();\r\n        HashMap<Long, TreeMap<Long, ItemTextIfc>> allItemsHash = new HashMap();\r\n        for (Long thisKey : publishedItemTextHash.keySet()) {\r\n            ItemTextIfc thisItemTextIfc = (ItemTextIfc) publishedItemTextHash.get(thisKey);\r\n            for (AnswerIfc thisAnswerIfc : thisItemTextIfc.getAnswerSet()) {\r\n                log.debug(\"{}\", thisAnswerIfc.getId());\r\n            }\r\n            if (delegate.isDistractor(thisItemTextIfc)) {\r\n                log.debug(\"item is a distractor\");\r\n            }\r\n            TreeMap<Long, ItemTextIfc> thisItemOptions = allItemsHash.get(thisItemTextIfc.getItem().getItemId());\r\n            if (thisItemOptions == null) {\r\n                thisItemOptions = new TreeMap();\r\n                thisItemOptions.put(thisItemTextIfc.getSequence(), thisItemTextIfc);\r\n                allItemsHash.put(thisItemTextIfc.getItem().getItemId(), thisItemOptions);\r\n            } else {\r\n                thisItemOptions.put(thisItemTextIfc.getSequence(), thisItemTextIfc);\r\n                allItemsHash.put(thisItemTextIfc.getItem().getItemId(), thisItemOptions);\r\n            }\r\n            log.debug(\"item = {}:{}-{}\", thisItemTextIfc.getSequence(), thisItemTextIfc.getText(), thisItemTextIfc.getItem().getItemId());\r\n        }\r\n        Map publishedAnswerHash = pubService.preparePublishedAnswerHash(publishedAssessment);\r\n        log.debug(\"questionScores(): publishedAnswerHash.size = \" + publishedAnswerHash.size());\r\n        Map agentResultsByItemGradingIdMap = new HashMap();\r\n        TotalScoresBean totalBean = (TotalScoresBean) ContextUtil.lookupBean(\"totalScores\");\r\n        if (ContextUtil.lookupParam(\"sortBy\") != null && !ContextUtil.lookupParam(\"sortBy\").trim().equals(\"\"))\r\n            bean.setSortType(ContextUtil.lookupParam(\"sortBy\"));\r\n        String itemId = ContextUtil.lookupParam(\"itemId\");\r\n        if (ContextUtil.lookupParam(\"newItemId\") != null && !ContextUtil.lookupParam(\"newItemId\").trim().equals(\"\") && !ContextUtil.lookupParam(\"newItemId\").trim().equals(\"null\"))\r\n            itemId = ContextUtil.lookupParam(\"newItemId\");\r\n        if (ContextUtil.lookupParam(\"sortAscending\") != null && !ContextUtil.lookupParam(\"sortAscending\").trim().equals(\"\")) {\r\n            bean.setSortAscending(Boolean.valueOf(ContextUtil.lookupParam(\"sortAscending\")).booleanValue());\r\n        }\r\n        String which = bean.getAllSubmissions();\r\n        if (which == null && totalBean.getAllSubmissions() != null) {\r\n            which = totalBean.getAllSubmissions();\r\n            bean.setAllSubmissions(which);\r\n        }\r\n        totalBean.setSelectedSectionFilterValue(bean.getSelectedSectionFilterValue());\r\n        if (bean.getSelectedSARationaleView() == null) {\r\n            bean.setSelectedSARationaleView(QuestionScoresBean.SHOW_SA_RATIONALE_RESPONSES_INLINE);\r\n        }\r\n        if (\"true\".equalsIgnoreCase(totalBean.getAnonymous())) {\r\n            boolean groupRelease = publishedAssessment.getAssessmentAccessControl().getReleaseTo().equals(AssessmentAccessControl.RELEASE_TO_SELECTED_GROUPS);\r\n            if (groupRelease) {\r\n                totalBean.setSelectedSectionFilterValue(TotalScoresBean.RELEASED_SECTIONS_GROUPS_SELECT_VALUE);\r\n            } else {\r\n                totalBean.setSelectedSectionFilterValue(TotalScoresBean.ALL_SECTIONS_SELECT_VALUE);\r\n            }\r\n        }\r\n        bean.setPublishedId(publishedId);\r\n        Date dueDate = null;\r\n        Map map = getItemScores(Long.valueOf(publishedId), Long.valueOf(itemId), which, isValueChange);\r\n        log.debug(\"questionScores(): map .size = \" + map.size());\r\n        ResourceLoader rb = null;\r\n        List allscores = new ArrayList();\r\n        Iterator keyiter = map.keySet().iterator();\r\n        while (keyiter.hasNext()) {\r\n            allscores.addAll((List) map.get(keyiter.next()));\r\n        }\r\n        log.debug(\"questionScores(): allscores.size = \" + allscores.size());\r\n        List scores = new ArrayList();\r\n        Map useridMap = totalBean.getUserIdMap(TotalScoresBean.CALLED_FROM_QUESTION_SCORE_LISTENER);\r\n        bean.setUserIdMap(useridMap);\r\n        log.debug(\"questionScores(): useridMap.size = \" + useridMap.size());\r\n        if (totalBean.getReleaseToAnonymous()) {\r\n            scores.addAll(allscores);\r\n        } else {\r\n            Iterator allscores_iter = allscores.iterator();\r\n            while (allscores_iter.hasNext()) {\r\n                ItemGradingData idata = (ItemGradingData) allscores_iter.next();\r\n                String agentid = idata.getAgentId();\r\n                if (useridMap.containsKey(agentid)) {\r\n                    scores.add(idata);\r\n                }\r\n            }\r\n        }\r\n        log.debug(\"questionScores(): scores.size = \" + scores.size());\r\n        Iterator iter = scores.iterator();\r\n        List agents = new ArrayList();\r\n        log.debug(\"questionScores(): calling populateSections \");\r\n        populateSections(// set up the Q1, Q2... links\r\n        publishedAssessment, // set up the Q1, Q2... links\r\n        bean, // set up the Q1, Q2... links\r\n        totalBean, scores, pubService);\r\n        if (!iter.hasNext()) {\r\n            log.debug(\"questionScores(): this section has no students\");\r\n            bean.setAgents(agents);\r\n            bean.setAllAgents(agents);\r\n            bean.setTotalPeople(Integer.toString(agents.size()));\r\n            bean.setAnonymous(totalBean.getAnonymous());\r\n        }\r\n        Map scoresByItem = new HashMap();\r\n        while (iter.hasNext()) {\r\n            ItemGradingData idata = (ItemGradingData) iter.next();\r\n            ItemTextIfc pubItemText = (ItemTextIfc) publishedItemTextHash.get(idata.getPublishedItemTextId());\r\n            AnswerIfc pubAnswer = (AnswerIfc) publishedAnswerHash.get(idata.getPublishedAnswerId());\r\n            List temp = (ArrayList) scoresByItem.get(idata.getAssessmentGradingId() + \":\" + idata.getPublishedItemId());\r\n            if (temp == null)\r\n                temp = new ArrayList();\r\n            Iterator iter2 = temp.iterator();\r\n            List newList = new ArrayList();\r\n            boolean added = false;\r\n            while (iter2.hasNext()) {\r\n                ItemGradingData tmpData = (ItemGradingData) iter2.next();\r\n                ItemTextIfc tmpPublishedText = (ItemTextIfc) publishedItemTextHash.get(tmpData.getPublishedItemTextId());\r\n                AnswerIfc tmpAnswer = (AnswerIfc) publishedAnswerHash.get(tmpData.getPublishedAnswerId());\r\n                if (pubAnswer != null && tmpAnswer != null && !added && (pubItemText.getSequence().intValue() < tmpPublishedText.getSequence().intValue() || (pubItemText.getSequence().intValue() == tmpPublishedText.getSequence().intValue() && pubAnswer.getSequence().intValue() < tmpAnswer.getSequence().intValue()))) {\r\n                    newList.add(idata);\r\n                    added = true;\r\n                }\r\n                newList.add(tmpData);\r\n            }\r\n            if (!added)\r\n                newList.add(idata);\r\n            scoresByItem.put(idata.getAssessmentGradingId() + \":\" + idata.getPublishedItemId(), newList);\r\n        }\r\n        log.debug(\"questionScores(): scoresByItem.size = \" + scoresByItem.size());\r\n        bean.setScoresByItem(scoresByItem);\r\n        try {\r\n            bean.setAnonymous(publishedAssessment.getEvaluationModel().getAnonymousGrading().equals(EvaluationModel.ANONYMOUS_GRADING) ? \"true\" : \"false\");\r\n        } catch (RuntimeException e) {\r\n            bean.setAnonymous(\"false\");\r\n        }\r\n        try {\r\n            bean.setLateHandling(publishedAssessment.getAssessmentAccessControl().getLateHandling().toString());\r\n        } catch (Exception e) {\r\n            bean.setLateHandling(AssessmentAccessControl.NOT_ACCEPT_LATE_SUBMISSION.toString());\r\n        }\r\n        try {\r\n            bean.setDueDate(publishedAssessment.getAssessmentAccessControl().getDueDate().toString());\r\n            dueDate = publishedAssessment.getAssessmentAccessControl().getDueDate();\r\n        } catch (RuntimeException e) {\r\n            bean.setDueDate(new Date().toString());\r\n        }\r\n        try {\r\n            bean.setMaxScore(publishedAssessment.getEvaluationModel().getFixedTotalScore());\r\n        } catch (RuntimeException e) {\r\n            double score = (double) 0.0;\r\n            Iterator iter2 = publishedAssessment.getSectionArraySorted().iterator();\r\n            while (iter2.hasNext()) {\r\n                SectionDataIfc sdata = (SectionDataIfc) iter2.next();\r\n                Iterator iter3 = sdata.getItemArraySortedForGrading().iterator();\r\n                while (iter3.hasNext()) {\r\n                    ItemDataIfc idata = (ItemDataIfc) iter3.next();\r\n                    if (idata.getItemId().equals(Long.valueOf(itemId)))\r\n                        score = idata.getScore().doubleValue();\r\n                }\r\n            }\r\n            bean.setMaxScore(score);\r\n        }\r\n        ItemDataIfc item = (ItemDataIfc) publishedItemHash.get(Long.valueOf(itemId));\r\n        if (item != null) {\r\n            log.debug(\"item!=null steting type id = \" + item.getTypeId().toString());\r\n            bean.setTypeId(item.getTypeId().toString());\r\n            bean.setItemId(item.getItemId().toString());\r\n            bean.setPartName(item.getSection().getSequence().toString());\r\n            bean.setItemName(item.getSequence().toString());\r\n            item.setHint(\"***\");\r\n            if (item.getTypeId().equals(Long.valueOf(5))) {\r\n                Iterator iterator = publishedAnswerHash.values().iterator();\r\n                while (iterator.hasNext()) {\r\n                    PublishedAnswer publishedAnswer = (PublishedAnswer) iterator.next();\r\n                    if (publishedAnswer.getItem().getItemId().equals(item.getItemId())) {\r\n                        if (publishedAnswer.getText() == null || publishedAnswer.getText().equals(\"\")) {\r\n                            bean.setHaveModelShortAnswer(false);\r\n                        } else {\r\n                            bean.setHaveModelShortAnswer(true);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            log.debug(\"item==null \");\r\n        }\r\n        List deliveryItems = new ArrayList();\r\n        if (item != null)\r\n            deliveryItems.add(item);\r\n        bean.setDeliveryItem(deliveryItems);\r\n        if (ContextUtil.lookupParam(\"roleSelection\") != null) {\r\n            bean.setRoleSelection(ContextUtil.lookupParam(\"roleSelection\"));\r\n        }\r\n        if (bean.getSortType() == null) {\r\n            if (bean.getAnonymous().equals(\"true\")) {\r\n                bean.setSortType(\"totalAutoScore\");\r\n            } else {\r\n                bean.setSortType(\"lastName\");\r\n            }\r\n        }\r\n        iter = scoresByItem.values().iterator();\r\n        while (iter.hasNext()) {\r\n            AgentResults results = new AgentResults();\r\n            List answerList = (List) iter.next();\r\n            results.setItemGradingArrayList(answerList);\r\n            if (TypeIfc.CALCULATED_QUESTION.equals(Long.parseLong(bean.getTypeId()))) {\r\n                Collections.sort(answerList, new Comparator<ItemGradingData>() {\r\n                    public int compare(ItemGradingData i1, ItemGradingData i2) {\r\n                        if (i1 == i2) {\r\n                            return 0;\r\n                        } else if (i1 == null || i1.getPublishedAnswerId() == null) {\r\n                            return -1;\r\n                        } else if (i2 == null || i2.getPublishedAnswerId() == null) {\r\n                            return 1;\r\n                        } else {\r\n                            return NumberUtils.compare(i1.getPublishedAnswerId(), i2.getPublishedAnswerId());\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                Collections.sort(answerList, new Comparator<ItemGradingData>() {\r\n                    public int compare(ItemGradingData i1, ItemGradingData i2) {\r\n                        if (i1 == i2) {\r\n                            return 0;\r\n                        } else if (i1 == null || i1.getPublishedItemId() == null) {\r\n                            return -1;\r\n                        } else if (i2 == null || i2.getPublishedItemId() == null) {\r\n                            return 1;\r\n                        } else {\r\n                            return NumberUtils.compare(i1.getPublishedItemId(), i2.getPublishedItemId());\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            Iterator iter2 = answerList.iterator();\r\n            List itemGradingAttachmentList = new ArrayList();\r\n            Map<Long, Set<String>> fibmap = new HashMap<Long, Set<String>>();\r\n            int i = 1;\r\n            Map<Integer, String> answersMap = new HashMap<Integer, String>();\r\n            while (iter2.hasNext()) {\r\n                ItemGradingData gdata = (ItemGradingData) iter2.next();\r\n                results.setItemGrading(gdata);\r\n                delegate.extractCalcQAnswersArray(answersMap, item, gdata.getAssessmentGradingId(), gdata.getAgentId());\r\n                itemGradingAttachmentList.addAll(gdata.getItemGradingAttachmentList());\r\n                agentResultsByItemGradingIdMap.put(gdata.getItemGradingId(), results);\r\n                ItemTextIfc gdataPubItemText = (ItemTextIfc) publishedItemTextHash.get(gdata.getPublishedItemTextId());\r\n                AnswerIfc gdataAnswer = (AnswerIfc) publishedAnswerHash.get(gdata.getPublishedAnswerId());\r\n                String answerText = noAnswer;\r\n                String rationale = \"\";\r\n                String fullAnswerText = noAnswer;\r\n                String answerKey = noAnswer;\r\n                int decimalPlaces;\r\n                if (bean.getTypeId().equals(\"1\") || bean.getTypeId().equals(\"2\") || bean.getTypeId().equals(\"12\") || bean.getTypeId().equals(\"3\") || bean.getTypeId().equals(\"4\") || bean.getTypeId().equals(\"9\") || bean.getTypeId().equals(\"13\")) {\r\n                    if (gdataAnswer != null)\r\n                        answerText = gdataAnswer.getText();\r\n                } else {\r\n                    if ((bean.getTypeId().equals(\"8\") || bean.getTypeId().equals(\"11\") || bean.getTypeId().equals(\"14\")) && gdataAnswer == null) {\r\n                        answerText = \"\";\r\n                    } else if (// gopalrc - EMI\r\n                    bean.getTypeId().equals(\"14\")) {\r\n                        answerText = gdataPubItemText.getSequence() + \": \" + gdataAnswer.getLabel();\r\n                    } else {\r\n                        answerText = gdata.getAnswerText();\r\n                    }\r\n                }\r\n                if (\"4\".equals(bean.getTypeId())) {\r\n                    if (rb == null) {\r\n                        rb = new ResourceLoader(MSG_BUNDLE);\r\n                    }\r\n                    if (\"true\".equals(answerText)) {\r\n                        answerText = rb.getString(\"true_msg\");\r\n                    } else if (\"false\".equals(answerText)) {\r\n                        answerText = rb.getString(\"false_msg\");\r\n                    }\r\n                }\r\n                if (bean.getTypeId().equals(\"9\")) {\r\n                    if (gdataPubItemText == null) {\r\n                        answerText = \"\";\r\n                    } else {\r\n                        answerText = gdataPubItemText.getSequence() + \":\" + answerText;\r\n                    }\r\n                }\r\n                if (bean.getTypeId().equals(\"8\")) {\r\n                    if (gdataAnswer != null && gdataAnswer.getSequence() != null) {\r\n                        answerText = gdataAnswer.getSequence() + \":\" + answerText;\r\n                    }\r\n                }\r\n                if (bean.getTypeId().equals(\"11\")) {\r\n                    if (gdataAnswer != null && gdataAnswer.getSequence() != null) {\r\n                        answerText = gdataAnswer.getSequence() + \":\" + answerText;\r\n                    }\r\n                }\r\n                if (bean.getTypeId().equals(\"13\")) {\r\n                    if (gdataPubItemText == null) {\r\n                        answerText = \"\";\r\n                    } else {\r\n                        int answerNo = gdataPubItemText.getSequence().intValue();\r\n                        answerText = answerNo + \":\" + answerText;\r\n                    }\r\n                }\r\n                if (bean.getTypeId().equals(\"6\")) {\r\n                    gdata.setMediaArray(delegate.getMediaArray2(gdata.getItemGradingId().toString()));\r\n                }\r\n                if (bean.getTypeId().equals(\"7\")) {\r\n                    List<MediaData> mediaList = delegate.getMediaArray2(gdata.getItemGradingId().toString());\r\n                    setDurationIsOver(item, mediaList);\r\n                    gdata.setMediaArray(mediaList);\r\n                }\r\n                if (bean.getTypeId().equals(\"16\")) {\r\n                    if (gdataPubItemText == null) {\r\n                        answerText = \"\";\r\n                    } else {\r\n                        answerText = gdataPubItemText.getSequence() + \":\" + answerText;\r\n                    }\r\n                }\r\n                if (answerText == null)\r\n                    answerText = noAnswer;\r\n                else {\r\n                    if (gdata.getRationale() != null && !gdata.getRationale().trim().equals(\"\"))\r\n                        rationale = \"\\nRationale: \" + gdata.getRationale();\r\n                }\r\n                answerText = answerText.replaceAll(\"(\\r\\n|\\r)\", \"<br/>\");\r\n                rationale = rationale.replaceAll(\"<.*?>\", \"\");\r\n                rationale = rationale.replaceAll(\"(\\r\\n|\\r)\", \"<br/>\");\r\n                fullAnswerText = answerText;\r\n                int answerTextLength = ServerConfigurationService.getInt(\"samigo.questionScore.answerText.length\", 1000);\r\n                if (bean.getTypeId().equals(\"5\")) {\r\n                    answerTextLength = 35;\r\n                }\r\n                log.debug(\"answerText=\" + answerText);\r\n                if (answerText.length() > answerTextLength) {\r\n                    String noHTMLAnswerText;\r\n                    noHTMLAnswerText = answerText.replaceAll(\"<((..?)|([^iI][^mM][^gG].*?))>\", \"\");\r\n                    int index = noHTMLAnswerText.toLowerCase().indexOf(\"<img\");\r\n                    if (index != -1) {\r\n                        answerText = noHTMLAnswerText;\r\n                    } else {\r\n                        if (noHTMLAnswerText.length() > answerTextLength) {\r\n                            answerText = noHTMLAnswerText.substring(0, answerTextLength) + \"...\";\r\n                        } else {\r\n                            answerText = noHTMLAnswerText;\r\n                        }\r\n                    }\r\n                }\r\n                String correct = ContextUtil.getLocalizedString(MSG_BUNDLE, \"alt_correct\");\r\n                String incorrect = ContextUtil.getLocalizedString(MSG_BUNDLE, \"alt_incorrect\");\r\n                String checkmarkGif = String.format(\"<span title=\\\"%s\\\" class=\\\"icon-sakai--check feedBackCheck\\\"><\/span>\", correct);\r\n                String crossmarkGif = String.format(\"<span title=\\\"%s\\\" class=\\\"icon-sakai--delete feedBackCross\\\"><\/span>\", incorrect);\r\n                if (gdataAnswer != null) {\r\n                    answerText = FormattedText.escapeHtml(answerText, true);\r\n                    if (bean.getTypeId().equals(\"8\") || bean.getTypeId().equals(\"11\")) {\r\n                        if (gdata.getIsCorrect() == null) {\r\n                            boolean result = false;\r\n                            if (bean.getTypeId().equals(\"8\")) {\r\n                                result = delegate.getFIBResult(gdata, fibmap, item, publishedAnswerHash);\r\n                            } else {\r\n                                result = delegate.getFINResult(gdata, item, publishedAnswerHash);\r\n                            }\r\n                            if (result) {\r\n                                answerText = checkmarkGif + answerText;\r\n                            } else {\r\n                                answerText = crossmarkGif + answerText;\r\n                            }\r\n                        } else {\r\n                            if (gdata.getIsCorrect().booleanValue()) {\r\n                                answerText = checkmarkGif + answerText;\r\n                            } else {\r\n                                answerText = crossmarkGif + answerText;\r\n                            }\r\n                        }\r\n                    } else if (bean.getTypeId().equals(\"15\")) {\r\n                        answerKey = (String) answersMap.get(i);\r\n                        decimalPlaces = Integer.valueOf(answerKey.substring(answerKey.indexOf(',') + 1, answerKey.length()));\r\n                        answerKey = answerKey.substring(0, answerKey.indexOf(\"|\"));\r\n                        answerKey = delegate.toScientificNotation(answerKey, decimalPlaces);\r\n                        if (delegate.getCalcQResult(gdata, item, answersMap, i++)) {\r\n                            answerText = checkmarkGif + answerText;\r\n                        } else {\r\n                            answerText = crossmarkGif + answerText;\r\n                        }\r\n                    } else if (!bean.getTypeId().equals(\"3\")) {\r\n                        if ((gdataAnswer.getIsCorrect() != null && gdataAnswer.getIsCorrect()) || (gdataAnswer.getPartialCredit() != null && gdataAnswer.getPartialCredit() > 0)) {\r\n                            answerText = checkmarkGif + answerText;\r\n                        } else if (gdataAnswer.getIsCorrect() != null && !gdataAnswer.getIsCorrect()) {\r\n                            answerText = crossmarkGif + answerText;\r\n                        }\r\n                    }\r\n                } else if (bean.getTypeId().equals(\"9\")) {\r\n                    log.debug(\"scoring a type 9 - matching\");\r\n                    boolean itemHasCorrectAnswers = hasCorrectAnswers(gdataPubItemText.getAnswerSet());\r\n                    ItemGradingData thisItemGradingData = null;\r\n                    for (Object thisItem : allscores) {\r\n                        thisItemGradingData = (ItemGradingData) thisItem;\r\n                        log.debug(\"thisItemGradingData.getItemGradingId().intValue()={}\", thisItemGradingData.getItemGradingId().intValue());\r\n                        log.debug(\"gdata.getItemGradingId().intValue()={}\", gdata.getItemGradingId().intValue());\r\n                        log.debug(\"thisItemGradingData.getAnswerText()={}\", thisItemGradingData.getAnswerText());\r\n                        if (thisItemGradingData.getItemGradingId().equals(gdata.getItemGradingId())) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (thisItemGradingData != null) {\r\n                        log.debug(\"thisItemGradingData was found\");\r\n                    }\r\n                    if (answerText.contains(noAnswer) && fullAnswerText.contains(noAnswer)) {\r\n                        log.debug(\"check point A\");\r\n                        if (thisItemGradingData.getPublishedAnswerId() == null) {\r\n                            log.debug(\"null anwser id:thisItemGradingData.getAnswerText()={}\", thisItemGradingData.getAnswerText());\r\n                            if (answerList.size() == 1) {\r\n                                TreeMap<Long, ItemTextIfc> thisItemOptions = allItemsHash.get(item.getItemId());\r\n                                StringBuilder optionsBuffer = new StringBuilder();\r\n                                for (Long thisItemKey : thisItemOptions.keySet()) {\r\n                                    ItemTextIfc thisItemOptionText = (ItemTextIfc) thisItemOptions.get(thisItemKey);\r\n                                    optionsBuffer.append(crossmarkGif).append(\" \").append(thisItemOptionText.getSequence().toString()).append(\":No Response <br/>\");\r\n                                }\r\n                                answerText = optionsBuffer.toString();\r\n                            } else {\r\n                                answerText = crossmarkGif + gdataPubItemText.getSequence() + \":\" + \"No Response\";\r\n                            }\r\n                        } else if (itemHasCorrectAnswers && thisItemGradingData.getPublishedAnswerId() < 0) {\r\n                            answerText = crossmarkGif + gdataPubItemText.getSequence() + \":\" + noneOfTheAbove;\r\n                        } else {\r\n                            answerText = checkmarkGif + gdataPubItemText.getSequence() + \":\" + noneOfTheAbove;\r\n                        }\r\n                        log.debug(\"answerText={}\", answerText);\r\n                        String thisAgentId = gdata.getAgentId();\r\n                        boolean agentFound = false;\r\n                        for (Object thisAgent : bean.getAgents()) {\r\n                            AgentResults thisAgentResult = (AgentResults) thisAgent;\r\n                            if (thisAgentResult.getIdString().compareTo(thisAgentId) == 0) {\r\n                                agentFound = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                log.debug(\"check point B answerText={}\", answerText);\r\n                if (!answerList.get(0).equals(gdata)) {\r\n                    log.debug(\"check point C1\");\r\n                    results.setAnswer(results.getAnswer() + \"<br/>\" + answerText);\r\n                    if (gdata.getAutoScore() != null) {\r\n                        results.setTotalAutoScore(Double.toString((Double.valueOf(results.getExactTotalAutoScore())).doubleValue() + gdata.getAutoScore().doubleValue()));\r\n                    } else {\r\n                        results.setTotalAutoScore(Double.toString((Double.valueOf(results.getExactTotalAutoScore())).doubleValue()));\r\n                    }\r\n                    results.setItemGradingAttachmentList(itemGradingAttachmentList);\r\n                    if (bean.getTypeId().equals(\"15\")) {\r\n                        results.setAnswerKey(results.getAnswerKey() + \" <br/>\" + answerKey);\r\n                    }\r\n                } else {\r\n                    log.debug(\"check point C2\");\r\n                    results.setItemGradingId(gdata.getItemGradingId());\r\n                    results.setAssessmentGradingId(gdata.getAssessmentGradingId());\r\n                    if (gdata.getAutoScore() != null) {\r\n                        results.setTotalAutoScore(gdata.getAutoScore().toString());\r\n                    } else {\r\n                        results.setTotalAutoScore(Double.toString(0));\r\n                    }\r\n                    results.setComments(FormattedText.convertFormattedTextToPlaintext(gdata.getComments()));\r\n                    results.setAnswer(answerText);\r\n                    if (bean.getTypeId().equals(\"15\")) {\r\n                        results.setAnswerKey(answerKey);\r\n                    }\r\n                    results.setFullAnswer(fullAnswerText);\r\n                    results.setRationale(rationale);\r\n                    results.setSubmittedDate(gdata.getSubmittedDate());\r\n                    AgentFacade agent = new AgentFacade(gdata.getAgentId());\r\n                    results.setLastName(agent.getLastName());\r\n                    results.setFirstName(agent.getFirstName());\r\n                    results.setEmail(agent.getEmail());\r\n                    if (results.getLastName() != null && results.getLastName().length() > 0)\r\n                        results.setLastInitial(results.getLastName().substring(0, 1));\r\n                    else if (results.getFirstName() != null && results.getFirstName().length() > 0)\r\n                        results.setLastInitial(results.getFirstName().substring(0, 1));\r\n                    else\r\n                        results.setLastInitial(\"Anonymous\");\r\n                    results.setIdString(agent.getIdString());\r\n                    results.setAgentEid(agent.getEidString());\r\n                    results.setAgentDisplayId(agent.getDisplayIdString());\r\n                    log.debug(\"testing agent getEid agent.getFirstname= \" + agent.getFirstName());\r\n                    log.debug(\"testing agent getEid agent.getid= \" + agent.getIdString());\r\n                    log.debug(\"testing agent getEid agent.geteid = \" + agent.getEidString());\r\n                    log.debug(\"testing agent getDisplayId agent.getdisplayid = \" + agent.getDisplayIdString());\r\n                    results.setRole(agent.getRole());\r\n                    results.setItemGradingAttachmentList(itemGradingAttachmentList);\r\n                    agents.add(results);\r\n                }\r\n            }\r\n        }\r\n        bs = new BeanSort(agents, bean.getSortType());\r\n        log.debug(\"check point D\");\r\n        if ((bean.getSortType()).equals(\"assessmentGradingId\") || (bean.getSortType()).equals(\"totalAutoScore\") || (bean.getSortType()).equals(\"totalOverrideScore\") || (bean.getSortType()).equals(\"finalScore\")) {\r\n            bs.toNumericSort();\r\n        } else {\r\n            bs.toStringSort();\r\n        }\r\n        if (bean.isSortAscending()) {\r\n            log.debug(\"sortAscending\");\r\n            agents = (List) bs.sort();\r\n        } else {\r\n            log.debug(\"!sortAscending\");\r\n            agents = (List) bs.sortDesc();\r\n        }\r\n        if (bean.getTypeId().equals(\"9\")) {\r\n            agents = sortMatching(agents);\r\n        }\r\n        bean.setAgents(agents);\r\n        bean.setAllAgents(agents);\r\n        bean.setTotalPeople(Integer.valueOf(agents.size()).toString());\r\n        bean.setAgentResultsByItemGradingId(agentResultsByItemGradingIdMap);\r\n        bean.setRubricStateDetails(\"\");\r\n        bean.setHasAssociatedRubric(rubricsService.hasAssociatedRubric(RubricsConstants.RBCS_TOOL_SAMIGO, RubricsConstants.RBCS_PUBLISHED_ASSESSMENT_ENTITY_PREFIX + bean.getPublishedId() + \".\" + bean.getItemId()));\r\n    } catch (RuntimeException e) {\r\n        log.error(e.getMessage(), e);\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.QuestionScoreListener.questionScores",
	"Comment": "this will populate the questionscoresbean with the data associated with\tthe particular versioned assessment based on the publishedid.",
	"Method": "boolean questionScores(String publishedId,QuestionScoresBean bean,boolean isValueChange){\r\n    if (i1 == i2) {\r\n        return 0;\r\n    } else if (i1 == null || i1.getPublishedAnswerId() == null) {\r\n        return -1;\r\n    } else if (i2 == null || i2.getPublishedAnswerId() == null) {\r\n        return 1;\r\n    } else {\r\n        return NumberUtils.compare(i1.getPublishedAnswerId(), i2.getPublishedAnswerId());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.QuestionScoreListener.questionScores",
	"Comment": "this will populate the questionscoresbean with the data associated with\tthe particular versioned assessment based on the publishedid.",
	"Method": "boolean questionScores(String publishedId,QuestionScoresBean bean,boolean isValueChange){\r\n    if (i1 == i2) {\r\n        return 0;\r\n    } else if (i1 == null || i1.getPublishedItemId() == null) {\r\n        return -1;\r\n    } else if (i2 == null || i2.getPublishedItemId() == null) {\r\n        return 1;\r\n    } else {\r\n        return NumberUtils.compare(i1.getPublishedItemId(), i2.getPublishedItemId());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.isUnlimited",
	"Comment": "this is a getter method and it checks if the number of attendees is\tlimited.",
	"Method": "boolean isUnlimited(){\r\n    return unlimited;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.model.ProfileImage.getBinary",
	"Comment": "get access to the binary data from either the uploaded image or the base64 encoded data",
	"Method": "byte[] getBinary(){\r\n    if (uploadedImage != null) {\r\n        return uploadedImage;\r\n    }\r\n    if (StringUtils.isNotBlank(officialImageEncoded)) {\r\n        return Base64.decodeBase64(officialImageEncoded);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil.paramLike",
	"Comment": "determine if we have been passed a parameter that contains a given string,else null. typically this would be where you want to check for one of a setof similar commandlinks or commandbuttons, such as the sortby headings inevaluation.",
	"Method": "String paramLike(String paramPart){\r\n    FacesContext context = FacesContext.getCurrentInstance();\r\n    Map requestParams = context.getExternalContext().getRequestParameterMap();\r\n    Iterator iter = requestParams.keySet().iterator();\r\n    while (iter.hasNext()) {\r\n        String currKey = (String) iter.next();\r\n        int location = currKey.indexOf(paramPart);\r\n        if (location > -1) {\r\n            return currKey.substring(location);\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.SearchExecutingLdapConnectionLivenessValidator.init",
	"Comment": "invoke prior to testing any connections. caches a host\tname to include in search terms.",
	"Method": "void init(){\r\n    if (hostName.equals(DEFAULT_HOST_NAME)) {\r\n        hostName = null;\r\n        if (hostName == null) {\r\n            try {\r\n                hostName = getLocalhostName();\r\n            } catch (UnknownHostException e) {\r\n                if (log.isDebugEnabled()) {\r\n                    log.debug(\"Unable to get local host name\", e);\r\n                }\r\n            }\r\n        }\r\n        if (hostName == null && serverConfigService != null) {\r\n            hostName = serverConfigService.getServerName();\r\n        }\r\n        if (hostName == null) {\r\n            hostName = DEFAULT_HOST_NAME;\r\n        }\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"init(): cached hostName [\" + hostName + \"]\");\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.GrantSubmissionListener.processAction",
	"Comment": "increases submissions remaining by 1.gives students an additional attempt.",
	"Method": "void processAction(ActionEvent ae){\r\n    log.debug(\"GrantSubmission LISTENER.\");\r\n    TotalScoresBean totalScores = (TotalScoresBean) ContextUtil.lookupBean(\"totalScores\");\r\n    String deletedStudentId = null;\r\n    String gradingIdParam = ContextUtil.lookupParam(\"gradingData\");\r\n    Long gradingId = new Long(gradingIdParam);\r\n    String publishedAssessmentId = ContextUtil.lookupParam(\"publishedId\");\r\n    GradingService gradingService = new GradingService();\r\n    MediaService mediaService = new MediaService();\r\n    List itemGradingIds = gradingService.getItemGradingIds(gradingId);\r\n    for (int i = 0; i < itemGradingIds.size(); i++) {\r\n        Long itemGradingId = (Long) itemGradingIds.get(i);\r\n        int itemType = gradingService.getTypeId(itemGradingId).intValue();\r\n        if (itemType == 6 || itemType == 7) {\r\n            List<MediaData> mediaDatas = gradingService.getMediaArray(itemGradingId.toString());\r\n            for (int j = 0; j < mediaDatas.size(); j++) {\r\n                String mediaId = ((MediaData) mediaDatas.get(j)).getMediaId().toString();\r\n                mediaService.remove(mediaId);\r\n            }\r\n        }\r\n    }\r\n    AssessmentGradingData ag = (AssessmentGradingData) gradingService.load(gradingIdParam);\r\n    Collection collectionOfOne = new ArrayList();\r\n    collectionOfOne.add(ag);\r\n    gradingService.deleteAll(collectionOfOne);\r\n    Collection agentList = totalScores.getAgents();\r\n    for (Iterator i = agentList.iterator(); i.hasNext(); ) {\r\n        AgentResults a = (AgentResults) i.next();\r\n        if (a.getAssessmentGradingId().equals(gradingId)) {\r\n            deletedStudentId = a.getAgentId();\r\n            i.remove();\r\n        }\r\n    }\r\n    List gradingList = totalScores.getAssessmentGradingList();\r\n    List deletedStudentGradingList = new ArrayList();\r\n    for (int i = 0; i < gradingList.size(); i++) {\r\n        if (((AssessmentGradingData) gradingList.get(i)).getAgentId().equals(deletedStudentId)) {\r\n            deletedStudentGradingList.add(gradingList.get(i));\r\n        }\r\n    }\r\n    if (deletedStudentGradingList.size() == 1) {\r\n        gradingList.clear();\r\n        gradingList.add(deletedStudentGradingList.get(0));\r\n        ((AssessmentGradingData) gradingList.get(0)).setFinalScore(null);\r\n    } else {\r\n        for (int i = 0; i < gradingList.size(); i++) {\r\n            if (((AssessmentGradingData) gradingList.get(i)).getAssessmentGradingId().equals(gradingId)) {\r\n                gradingList.remove(i);\r\n            }\r\n        }\r\n    }\r\n    totalScores.setAssessmentGradingList(gradingList);\r\n    totalScores.setAgents(agentList);\r\n    gradingService.notifyDeleteToGradebook(gradingList, totalScores.getPublishedAssessment(), deletedStudentId);\r\n}"
}, {
	"Path": "edu.amc.sakai.user.SearchExecutingLdapConnectionLivenessValidatorTest.testLivenessTestConvertsNullLDAPEntryToFalseReturnValue",
	"Comment": "not entirely sure that this could actually happen in the wild.",
	"Method": "void testLivenessTestConvertsNullLDAPEntryToFalseReturnValue(){\r\n    expectStandardSearch();\r\n    mockSearchResults.expects(once()).method(\"hasMore\").after(mockConn, \"search\").will(returnValue(true));\r\n    mockSearchResults.expects(once()).method(\"next\").after(\"hasMore\").will(returnValue(null));\r\n    assertFalse(validator.isConnectionAlive(conn));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.GradingService.getAllSubmissions",
	"Comment": "get all submissions for a published assessment from the back end.",
	"Method": "List getAllSubmissions(String publishedId){\r\n    List results = null;\r\n    try {\r\n        results = PersistenceService.getInstance().getAssessmentGradingFacadeQueries().getAllSubmissions(publishedId);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    return results;\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.UnboundidDirectoryProvider.searchDirectoryForSingleEntry",
	"Comment": "searches the directory for at most one entry matching the\tspecified filter.",
	"Method": "Object searchDirectoryForSingleEntry(String filter,LdapEntryMapper mapper,String[] searchResultPhysicalAttributeNames,String searchBaseDn){\r\n    log.debug(\"searchDirectoryForSingleEntry(): [filter = {}]\", filter);\r\n    List<LdapUserData> results = searchDirectory(filter, mapper, searchResultPhysicalAttributeNames, searchBaseDn, 1);\r\n    if (results.isEmpty()) {\r\n        return null;\r\n    }\r\n    return results.iterator().next();\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteBrowserAction.sortAcademicSessions",
	"Comment": "helper method for sortcmobject \tby order from sakai properties if specified or \tby default of eid, title\tusing velocity sorttool",
	"Method": "Collection sortAcademicSessions(Collection<AcademicSession> sessions){\r\n    String[] keys = ServerConfigurationService.getStrings(SORT_KEY_SESSION);\r\n    String[] orders = ServerConfigurationService.getStrings(SORT_ORDER_SESSION);\r\n    return sortCmObject(sessions, keys, orders);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupTrackingItem.getRemovedFromTimeslot",
	"Comment": "get a list of signuptimeslot objects, from which the user is removed",
	"Method": "List<SignupTimeslot> getRemovedFromTimeslot(){\r\n    return removedFromTimeslot;\r\n}"
}, {
	"Path": "org.sakaiproject.tags.impl.rest.TagServiceAdminEntityProvider.startSession",
	"Comment": "return a tags service service token to be passed with subsequent requests.",
	"Method": "String startSession(EntityView view,Map<String, Object> params){\r\n    try {\r\n        assertPermission();\r\n        JSONObject result = new JSONObject();\r\n        String newSessionId = mintSessionId();\r\n        result.put(REQUEST_SESSION_PARAMETER, newSessionId);\r\n        sessionManager.getCurrentSession().setAttribute(SAKAI_SESSION_TOKEN_PROPERTY, newSessionId);\r\n        return result.toJSONString();\r\n    } catch (Exception e) {\r\n        return respondWithError(e);\r\n    }\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.RecentlyVisitedHelperBean.init",
	"Comment": "sets the recently visited bean using the set request and logger and\tdefault space.",
	"Method": "void init(){\r\n    recentBean = RecentlyVisitedHelperBean.getRecentlyVisitedBean((HttpServletRequest) request, defaultSpace);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TransformationSystem.getDragRecognizer",
	"Comment": "gets the gesture recognizer for determining when the user performs a drag motion on the touchscreen.",
	"Method": "DragGestureRecognizer getDragRecognizer(){\r\n    return dragGestureRecognizer;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.processAddGroup",
	"Comment": "adds a new group to the current site, or edits an existing group",
	"Method": "String processAddGroup(){\r\n    resetTargettedMessageList();\r\n    Group group;\r\n    List<String> addedGroupMember = new ArrayList();\r\n    List<String> removedGroupMember = new ArrayList();\r\n    id = StringUtils.trimToNull(id);\r\n    title = StringUtils.trimToNull(title);\r\n    if (title == null) {\r\n        messages.addMessage(new TargettedMessage(\"editgroup.titlemissing\", new Object[] {}, TargettedMessage.SEVERITY_ERROR));\r\n        return null;\r\n    } else if (title.length() > SiteConstants.SITE_GROUP_TITLE_LIMIT) {\r\n        messages.addMessage(new TargettedMessage(\"site_group_title_length_limit\", new Object[] { String.valueOf(SiteConstants.SITE_GROUP_TITLE_LIMIT) }, TargettedMessage.SEVERITY_ERROR));\r\n        return null;\r\n    } else {\r\n        String sameTitleGroupId = GroupHelper.getSiteGroupByTitle(site, title);\r\n        if (!sameTitleGroupId.isEmpty() && (id == null || !sameTitleGroupId.equals(id))) {\r\n            messages.addMessage(new TargettedMessage(\"group.title.same\", null, TargettedMessage.SEVERITY_ERROR));\r\n            return null;\r\n        }\r\n    }\r\n    int joinableSetNumOfMembersInt;\r\n    if (joinableSetName != null && !\"\".equals(joinableSetName.trim())) {\r\n        if (joinableSetNumOfMembers == null || \"\".equals(joinableSetNumOfMembers)) {\r\n            messages.addMessage(new TargettedMessage(\"maxMembers.empty.alert\", \"num-groups\"));\r\n            return null;\r\n        } else {\r\n            try {\r\n                joinableSetNumOfMembersInt = Integer.parseInt(joinableSetNumOfMembers);\r\n                if (joinableSetNumOfMembersInt <= 0) {\r\n                    messages.addMessage(new TargettedMessage(\"maxMembers.zero.alert\", \"num-max-members\"));\r\n                    return null;\r\n                }\r\n            } catch (Exception e) {\r\n                messages.addMessage(new TargettedMessage(\"maxMembers.empty.alert\", \"num-max-members\"));\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    if (id != null) {\r\n        group = site.getGroup(id);\r\n    } else {\r\n        group = site.addGroup();\r\n        group.getProperties().addProperty(Group.GROUP_PROP_WSETUP_CREATED, Boolean.TRUE.toString());\r\n    }\r\n    if (group != null) {\r\n        log.debug(\"Check if the group is locked : {}\", group.isLocked(Group.LockMode.MODIFY));\r\n        if (group.isLocked(Group.LockMode.MODIFY)) {\r\n            messages.addMessage(new TargettedMessage(\"editgroup.group.locked\", new Object[] {}, TargettedMessage.SEVERITY_ERROR));\r\n            return null;\r\n        }\r\n        group.setTitle(title);\r\n        group.setDescription(description);\r\n        group.getProperties().addProperty(Group.GROUP_PROP_VIEW_MEMBERS, Boolean.toString(allowViewMembership));\r\n        if (joinableSetName != null && !\"\".equals(joinableSetName.trim())) {\r\n            group.getProperties().addProperty(Group.GROUP_PROP_JOINABLE_SET, joinableSetName);\r\n            group.getProperties().addProperty(Group.GROUP_PROP_JOINABLE_SET_MAX, joinableSetNumOfMembers);\r\n            group.getProperties().addProperty(Group.GROUP_PROP_JOINABLE_SET_PREVIEW, Boolean.toString(allowPreviewMembership));\r\n            group.getProperties().addProperty(Group.GROUP_PROP_JOINABLE_UNJOINABLE, Boolean.toString(unjoinable));\r\n        } else {\r\n            group.getProperties().removeProperty(Group.GROUP_PROP_JOINABLE_SET);\r\n            group.getProperties().removeProperty(Group.GROUP_PROP_JOINABLE_SET_MAX);\r\n            group.getProperties().removeProperty(Group.GROUP_PROP_JOINABLE_SET_PREVIEW);\r\n            group.getProperties().removeProperty(Group.GROUP_PROP_JOINABLE_UNJOINABLE);\r\n        }\r\n        boolean found;\r\n        Set members = group.getMembers();\r\n        String[] membersSelected = (memberList != null && memberList.length() > 0) ? memberList.split(\"##\") : new String[0];\r\n        for (Iterator iMembers = members.iterator(); iMembers.hasNext(); ) {\r\n            found = false;\r\n            String mId = ((Member) iMembers.next()).getUserId();\r\n            for (int i = 0; !found && i < membersSelected.length; i++) {\r\n                if (mId.equals(membersSelected[i])) {\r\n                    found = true;\r\n                }\r\n            }\r\n            if (!found) {\r\n                try {\r\n                    group.deleteMember(mId);\r\n                    removedGroupMember.add(\"uid=\" + mId + \";groupId=\" + group.getId());\r\n                } catch (IllegalStateException e) {\r\n                    log.error(\".processAddGroup: User with id {} cannot be deleted from group with id {} because the group is locked\", mId, group.getId());\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        List<String> siteRosters = getSiteRosters(null);\r\n        List<String> siteRoles = getSiteRoleIds();\r\n        List<String> selectedRosters = new ArrayList();\r\n        List<String> selectedRoles = new ArrayList();\r\n        for (String memberId : membersSelected) {\r\n            if (siteRosters.contains(memberId)) {\r\n                selectedRosters.add(memberId);\r\n            } else if (siteRoles.contains(memberId)) {\r\n                Set roleUsers = site.getUsersHasRole(memberId);\r\n                for (Iterator iRoleUsers = roleUsers.iterator(); iRoleUsers.hasNext(); ) {\r\n                    String roleUserId = (String) iRoleUsers.next();\r\n                    Member member = site.getMember(roleUserId);\r\n                    try {\r\n                        group.insertMember(roleUserId, memberId, member.isActive(), false);\r\n                        addedGroupMember.add(\"uid=\" + roleUserId + \";role=\" + member.getRole().getId() + \";active=\" + member.isActive() + \";provided=false;groupId=\" + group.getId());\r\n                    } catch (IllegalStateException e) {\r\n                        log.error(\".processAddGroup: User with id {} cannot be inserted in group with id {} because the group is locked\", roleUserId, group.getId());\r\n                        return null;\r\n                    }\r\n                }\r\n                selectedRoles.add(memberId);\r\n            } else {\r\n                String userId = StringUtils.trimToNull(memberId);\r\n                if (userId != null && group.getUserRole(userId) == null) {\r\n                    Member m = site.getMember(userId);\r\n                    if (m != null) {\r\n                        Role memberRole = m.getRole();\r\n                        try {\r\n                            group.addMember(userId, memberRole.getId(), m.isActive(), false);\r\n                            addedGroupMember.add(\"uid=\" + userId + \";role=\" + memberRole.getId() + \";active=\" + m.isActive() + \";provided=false;groupId=\" + group.getId());\r\n                        } catch (IllegalStateException e) {\r\n                            log.error(\".processAddGroup: User with id {} cannot be inserted in group with id {} because the group is locked\", memberId, group.getId());\r\n                            return null;\r\n                        }\r\n                    } else {\r\n                        String displayName;\r\n                        try {\r\n                            displayName = userDirectoryService.getUser(userId).getDisplayName();\r\n                        } catch (UserNotDefinedException e) {\r\n                            displayName = messageLocator.getMessage(\"user.unknown\");\r\n                        }\r\n                        messages.addMessage(new TargettedMessage(\"user.not.member.alert\", new String[] { displayName }, \"groupMembers-selection\"));\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!selectedRosters.isEmpty()) {\r\n            for (String s : selectedRoles) {\r\n                s = s.replaceAll(\"-_p_-\", \".\");\r\n            }\r\n            group.setProviderGroupId(groupProvider.packId(selectedRosters.toArray(new String[selectedRosters.size()])));\r\n        } else {\r\n            group.setProviderGroupId(null);\r\n        }\r\n        if (!selectedRoles.isEmpty()) {\r\n            group.getProperties().addProperty(SiteConstants.GROUP_PROP_ROLE_PROVIDERID, SiteGroupHelper.pack(selectedRoles));\r\n        } else {\r\n            group.getProperties().removeProperty(SiteConstants.GROUP_PROP_ROLE_PROVIDERID);\r\n        }\r\n        try {\r\n            siteService.save(site);\r\n            if (serverConfigurationService.getBoolean(SiteHelper.WSETUP_TRACK_USER_MEMBERSHIP_CHANGE, false)) {\r\n                for (String addedMemberString : addedGroupMember) {\r\n                    EventTrackingService.post(EventTrackingService.newEvent(SiteService.EVENT_USER_GROUP_MEMBERSHIP_ADD, addedMemberString, true));\r\n                }\r\n                for (String removedMemberString : removedGroupMember) {\r\n                    EventTrackingService.post(EventTrackingService.newEvent(SiteService.EVENT_USER_GROUP_MEMBERSHIP_REMOVE, removedMemberString, true));\r\n                }\r\n            }\r\n            resetParams();\r\n        } catch (IdUnusedException | PermissionException e) {\r\n            log.error(this + \".processAddGroup: cannot find site \" + site.getId(), e);\r\n            return null;\r\n        }\r\n    }\r\n    filterByGroupId = \"\";\r\n    return \"success\";\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateSitesGroups.resetSiteGroupCheckboxMark",
	"Comment": "reset all previous user selected check marks since we reuse them.",
	"Method": "void resetSiteGroupCheckboxMark(){\r\n    SignupSiteWrapper siteWrp = getCurrentSite();\r\n    if (siteWrp != null) {\r\n        if (siteWrp.isAllowedToCreate())\r\n            siteWrp.setSelected(true);\r\n        List<SignupGroupWrapper> grpWrpList = siteWrp.getSignupGroupWrappers();\r\n        if (grpWrpList != null)\r\n            for (SignupGroupWrapper grpWrp : grpWrpList) {\r\n                grpWrp.setSelected(false);\r\n            }\r\n    }\r\n    List<SignupSiteWrapper> otherSiteWrpList = getOtherSites();\r\n    if (otherSiteWrpList != null) {\r\n        for (SignupSiteWrapper oSiteWrp : otherSiteWrpList) {\r\n            oSiteWrp.setSelected(false);\r\n            List<SignupGroupWrapper> otherGrpWrpList = oSiteWrp.getSignupGroupWrappers();\r\n            if (otherGrpWrpList != null)\r\n                for (SignupGroupWrapper oGrpWrp : otherGrpWrpList) {\r\n                    oGrpWrp.setSelected(false);\r\n                }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroup.impl.SiteManageGroupHandler.processAddGroup",
	"Comment": "adds a new group to the current site, or edits an existing group",
	"Method": "String processAddGroup(){\r\n    resetTargettedMessageList();\r\n    Group group;\r\n    id = StringUtils.trimToNull(id);\r\n    title = StringUtils.trimToNull(title);\r\n    if (title == null) {\r\n        messages.addMessage(new TargettedMessage(\"editgroup.titlemissing\", new Object[] {}, TargettedMessage.SEVERITY_ERROR));\r\n        return null;\r\n    } else if (title.length() > SiteConstants.SITE_GROUP_TITLE_LIMIT) {\r\n        messages.addMessage(new TargettedMessage(\"site_group_title_length_limit\", new Object[] { String.valueOf(SiteConstants.SITE_GROUP_TITLE_LIMIT) }, TargettedMessage.SEVERITY_ERROR));\r\n        return null;\r\n    } else {\r\n        String sameTitleGroupId = GroupHelper.getSiteGroupByTitle(site, title);\r\n        if (!sameTitleGroupId.isEmpty() && (id == null || !sameTitleGroupId.equals(id))) {\r\n            messages.addMessage(new TargettedMessage(\"group.title.same\", null, TargettedMessage.SEVERITY_ERROR));\r\n            return null;\r\n        }\r\n    }\r\n    if (id != null) {\r\n        group = site.getGroup(id);\r\n    } else {\r\n        group = site.addGroup();\r\n        group.getProperties().addProperty(Group.GROUP_PROP_WSETUP_CREATED, Boolean.TRUE.toString());\r\n    }\r\n    if (group != null) {\r\n        group.setTitle(title);\r\n        group.setDescription(description);\r\n        boolean found;\r\n        Set members = group.getMembers();\r\n        String[] membersSelected = memberList.split(\"##\");\r\n        for (Iterator iMembers = members.iterator(); iMembers.hasNext(); ) {\r\n            found = false;\r\n            String mId = ((Member) iMembers.next()).getUserId();\r\n            for (int i = 0; !found && i < membersSelected.length; i++) {\r\n                if (mId.equals(membersSelected[i])) {\r\n                    found = true;\r\n                }\r\n            }\r\n            if (!found) {\r\n                try {\r\n                    group.deleteMember(mId);\r\n                } catch (IllegalStateException e) {\r\n                    log.error(\".processAddGroup: User with id {} cannot be deleted from group with id {} because the group is locked\", mId, group.getId());\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        for (String memberId : membersSelected) {\r\n            memberId = StringUtils.trimToNull(memberId);\r\n            if (memberId != null && group.getUserRole(memberId) == null) {\r\n                Role r = site.getUserRole(memberId);\r\n                Member m = site.getMember(memberId);\r\n                Role memberRole = m != null ? m.getRole() : null;\r\n                try {\r\n                    group.insertMember(memberId, r != null ? r.getId() : memberRole != null ? memberRole.getId() : \"\", m != null ? m.isActive() : true, false);\r\n                } catch (IllegalStateException e) {\r\n                    log.error(\".processAddGroup: User with id {} cannot be inserted in group with id {} because the group is locked\", memberId, group.getId());\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            siteService.save(site);\r\n            resetParams();\r\n        } catch (IdUnusedException | PermissionException e) {\r\n            log.warn(this + \".processAddGroup: cannot find site \" + site.getId(), e);\r\n            return null;\r\n        }\r\n    }\r\n    return \"success\";\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Delta.toRCSString",
	"Comment": "converts this delta into its rcs style string representation.",
	"Method": "void toRCSString(StringBuffer s,String EOL,String toRCSString,String EOL){\r\n    StringBuffer s = new StringBuffer();\r\n    toRCSString(s, EOL);\r\n    return s.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.ItemFacade.setItemFeedbackSet",
	"Comment": "set the item feedback set for itemfacade and itemfacade.data",
	"Method": "void setItemFeedbackSet(Set itemFeedbackSet){\r\n    this.itemFeedbackSet = itemFeedbackSet;\r\n    this.data.setItemFeedbackSet(itemFeedbackSet);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.business.questionpool.QuestionPoolTreeImpl.poolLevel",
	"Comment": "this returns the level of the pool inside a pool tree, root being 0.",
	"Method": "int poolLevel(Long poolId){\r\n    try {\r\n        Long rootId = poolId;\r\n        int level = 0;\r\n        QuestionPoolFacade tempPool = (QuestionPoolFacade) poolMap.get(rootId.toString());\r\n        while (tempPool != null) {\r\n            if ((tempPool.getParentPoolId() == null) || (((tempPool.getParentPoolId()).toString()).equals(\"0\"))) {\r\n                tempPool = null;\r\n            } else {\r\n                level++;\r\n                rootId = tempPool.getParentPoolId();\r\n                tempPool = (QuestionPoolFacade) poolMap.get(rootId.toString());\r\n            }\r\n        }\r\n        return level;\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.CourseDependentBean.getUsedCategories",
	"Comment": "gets the categories that are currently being used in this site context.",
	"Method": "Set<String> getUsedCategories(){\r\n    Set<String> used = new HashSet<String>();\r\n    List sections = getAllSiteSections();\r\n    List categories = getSectionManager().getSectionCategories(getSiteContext());\r\n    for (Iterator iter = sections.iterator(); iter.hasNext(); ) {\r\n        CourseSection section = (CourseSection) iter.next();\r\n        String cat = section.getCategory();\r\n        if (categories.contains(cat)) {\r\n            used.add(cat);\r\n        }\r\n    }\r\n    return used;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.panels.TwitterPrefsPane.unlinkedFragment",
	"Comment": "fragment which returns the components for the unlinked view",
	"Method": "Fragment unlinkedFragment(){\r\n    Fragment frag = new Fragment(\"fragmentContainer\", \"unlinked\", this);\r\n    StringModel twitterModel = new StringModel();\r\n    final Form<StringModel> twitterForm = new Form<StringModel>(\"twitterForm\", new Model<StringModel>(twitterModel));\r\n    final TextField<String> twitterAuthCode = new TextField<String>(\"twitterAuthCode\", new PropertyModel<String>(twitterModel, \"string\"));\r\n    twitterAuthCode.setMarkupId(\"twitterauthcodeinput\");\r\n    twitterAuthCode.setOutputMarkupId(true);\r\n    twitterAuthCode.setEnabled(false);\r\n    twitterForm.add(twitterAuthCode);\r\n    final IndicatingAjaxButton twitterSubmit = new IndicatingAjaxButton(\"twitterSubmit\", twitterForm) {\r\n        private static final long serialVersionUID = 1L;\r\n        protected void onSubmit(AjaxRequestTarget target, Form<?> form) {\r\n            StringModel stringModel = (StringModel) form.getModelObject();\r\n            String accessCode = stringModel.getString();\r\n            if (StringUtils.isBlank(accessCode)) {\r\n                target.appendJavaScript(\"alert('AccessCode was null.');\");\r\n                return;\r\n            }\r\n            AccessToken accessToken = getOAuthAccessToken(accessCode);\r\n            if (accessToken == null) {\r\n                target.appendJavaScript(\"alert('AccessToken was null.');\");\r\n                return;\r\n            }\r\n            externalIntegrationInfo.setTwitterToken(accessToken.getToken());\r\n            externalIntegrationInfo.setTwitterSecret(accessToken.getTokenSecret());\r\n            if (externalIntegrationLogic.updateExternalIntegrationInfo(externalIntegrationInfo)) {\r\n                switchContentFragments(linkedFragment(), target);\r\n            } else {\r\n                target.appendJavaScript(\"alert('Couldn't save info');\");\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    twitterSubmit.setEnabled(false);\r\n    twitterSubmit.setModel(new ResourceModel(\"button.link\"));\r\n    twitterForm.add(twitterSubmit);\r\n    frag.add(twitterForm);\r\n    final AjaxExternalLink<String> twitterAuthLink = new AjaxExternalLink<String>(\"twitterAuthLink\", getTwitterAuthorisationUrl()) {\r\n        private static final long serialVersionUID = 1L;\r\n        public void onClick(AjaxRequestTarget target) {\r\n            twitterAuthCode.setEnabled(true);\r\n            twitterSubmit.setEnabled(true);\r\n            target.add(twitterAuthCode);\r\n            target.add(twitterSubmit);\r\n        }\r\n    };\r\n    Label twitterAuthLabel = new Label(\"twitterAuthLabel\", new ResourceModel(\"twitter.auth.do\"));\r\n    twitterAuthLink.add(twitterAuthLabel);\r\n    frag.add(twitterAuthLink);\r\n    frag.setOutputMarkupId(true);\r\n    return frag;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.panels.TwitterPrefsPane.unlinkedFragment",
	"Comment": "fragment which returns the components for the unlinked view",
	"Method": "Fragment unlinkedFragment(){\r\n    StringModel stringModel = (StringModel) form.getModelObject();\r\n    String accessCode = stringModel.getString();\r\n    if (StringUtils.isBlank(accessCode)) {\r\n        target.appendJavaScript(\"alert('AccessCode was null.');\");\r\n        return;\r\n    }\r\n    AccessToken accessToken = getOAuthAccessToken(accessCode);\r\n    if (accessToken == null) {\r\n        target.appendJavaScript(\"alert('AccessToken was null.');\");\r\n        return;\r\n    }\r\n    externalIntegrationInfo.setTwitterToken(accessToken.getToken());\r\n    externalIntegrationInfo.setTwitterSecret(accessToken.getTokenSecret());\r\n    if (externalIntegrationLogic.updateExternalIntegrationInfo(externalIntegrationInfo)) {\r\n        switchContentFragments(linkedFragment(), target);\r\n    } else {\r\n        target.appendJavaScript(\"alert('Couldn't save info');\");\r\n        return;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.pages.panels.TwitterPrefsPane.unlinkedFragment",
	"Comment": "fragment which returns the components for the unlinked view",
	"Method": "Fragment unlinkedFragment(){\r\n    twitterAuthCode.setEnabled(true);\r\n    twitterSubmit.setEnabled(true);\r\n    target.add(twitterAuthCode);\r\n    target.add(twitterSubmit);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupMeetingWrapper.getEndTime",
	"Comment": "this is mainly used for showing my appointment time frame at ui.",
	"Method": "Date getEndTime(){\r\n    if (!isShowMyAppointmentTimeFrame())\r\n        return meeting.getEndTime();\r\n    return endTime != null ? endTime : meeting.getEndTime();\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.dataproviders.MessagesDataProvider.iterator",
	"Comment": "retrieves messages from database, gets the sublist and returns an iterator for that sublist",
	"Method": "Iterator<Message> iterator(long first,long count){\r\n    int f = (int) first;\r\n    int c = (int) count;\r\n    try {\r\n        List<Message> slice = messagingLogic.getMessagesInThread(threadId).subList(f, f + c);\r\n        return slice.iterator();\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return Collections.EMPTY_LIST.iterator();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.CopyMeetingSignupMBean.getInstructors",
	"Comment": "get a list of users that have permission, but format it as a selectitem list for the dropdown.\tsince this is a new item there will be no current instructor so it returns the current user at the top of the list\twe send a null signup meeting param as this is a new meeting.",
	"Method": "List<SelectItem> getInstructors(){\r\n    return Utilities.getSignupMeetingsBean().getInstructors(signupMeeting);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.setAssessmentGradingFromItemData",
	"Comment": "look up item grading data and set assesment grading data from it or,if there is none set null if setnullok.",
	"Method": "AssessmentGradingData setAssessmentGradingFromItemData(DeliveryBean delivery,Map itemGradingHash,boolean setNullOK){\r\n    AssessmentGradingData agrading = null;\r\n    Iterator keys = itemGradingHash.keySet().iterator();\r\n    GradingService gradingService = new GradingService();\r\n    if (keys.hasNext()) {\r\n        ItemGradingData igd = (ItemGradingData) ((List) itemGradingHash.get(keys.next())).toArray()[0];\r\n        AssessmentGradingData agd = gradingService.load(igd.getAssessmentGradingId().toString(), false);\r\n        agd.setItemGradingSet(gradingService.getItemGradingSet(agd.getAssessmentGradingId().toString()));\r\n        if (!agd.getForGrade().booleanValue()) {\r\n            log.debug(\"setAssessmentGradingFromItemData agd.getTimeElapsed(): \" + agd.getTimeElapsed());\r\n            log.debug(\"setAssessmentGradingFromItemData delivery.getTimeElapse(): \" + delivery.getTimeElapse());\r\n            agrading = agd;\r\n        } else {\r\n            if (setNullOK)\r\n                agrading = null;\r\n        }\r\n    } else {\r\n        if (setNullOK)\r\n            agrading = null;\r\n    }\r\n    return agrading;\r\n}"
}, {
	"Path": "org.sakaiproject.component.kerberos.user.KerberosUserDirectoryProvider.destroy",
	"Comment": "returns to uninitialized state. you can use this method to release resources that your service allocated when spring shuts down.",
	"Method": "void destroy(){\r\n    log.info(this + \".destroy()\");\r\n}"
}, {
	"Path": "org.sakaiproject.coursemanagement.impl.provider.CourseManagementGroupProvider.getRole",
	"Comment": "this method is not longer in use in sakai.it should be removed from the\tgroupprovider interface.",
	"Method": "String getRole(String id,String user){\r\n    log.error(\"\\n------------------------------------------------------------------\\n\");\r\n    log.error(\"THIS METHOD IS NEVER CALLED IN SAKAI.  WHAT HAPPENED???\");\r\n    log.error(\"\\n------------------------------------------------------------------\\n\");\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.accountvalidator.tool.producers.BaseValidationProducer.getViewParameters",
	"Comment": "overrides the view parameters so that we can grab the validation tokenid",
	"Method": "ViewParameters getViewParameters(){\r\n    return new ValidationViewParams();\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.getUserEmail",
	"Comment": "gets the email address for a given userdiffers from original above as that one uses the session to get the email address hence you must know this in advance or be logged in to the web serviceswith that user. this uses a eid as well so we could be logged in as admin and retrieve the email address for any user.",
	"Method": "String getUserEmail(String sessionid,String eid){\r\n    Session session = establishSession(sessionid);\r\n    try {\r\n        User user = userDirectoryService.getUserByEid(eid);\r\n        return user.getEmail();\r\n    } catch (Exception e) {\r\n        log.error(\"WS getUserEmail() failed for user: \" + eid + \" : \" + e.getClass().getName() + \" : \" + e.getMessage());\r\n        return \"\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.models.DetachableMessageModel.equals",
	"Comment": "used for dataview with reuseifmodelsequalstrategy item reuse strategy",
	"Method": "boolean equals(Object obj){\r\n    if (obj == this) {\r\n        return true;\r\n    } else if (obj == null) {\r\n        return false;\r\n    } else if (obj instanceof DetachableMessageModel) {\r\n        DetachableMessageModel other = (DetachableMessageModel) obj;\r\n        return other.id == id;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.integration.context.IntegrationContextFactory.getInstance",
	"Comment": "static method returning an implementation instance of this factory.",
	"Method": "IntegrationContextFactory getInstance(){\r\n    log.debug(\"IntegrationContextFactory.getInstance()\");\r\n    if (instance == null) {\r\n        try {\r\n            FactoryUtil.setUseLocator(true);\r\n            instance = FactoryUtil.lookup();\r\n        } catch (Exception ex) {\r\n            log.error(\"Unable to read integration context\", ex);\r\n        }\r\n    }\r\n    log.debug(\"instance=\" + instance);\r\n    return instance;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaRetrievalOptionsBuilder.withSupportsCatalogs",
	"Comment": "overrides the jdbc driver provided information about whether thedatabase supports catalogs.",
	"Method": "SchemaRetrievalOptionsBuilder withSupportsCatalogs(){\r\n    overridesSupportsCatalogs = Optional.of(true);\r\n    return this;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.insertTool",
	"Comment": "find the tool in the tool list and insert another tool instance to the list",
	"Method": "void insertTool(SessionState state,String toolId,String defaultTitle,String defaultDescription,int insertTimes){\r\n    List toolList = (List) state.getAttribute(STATE_TOOL_REGISTRATION_LIST);\r\n    HashMap<String, String> toolTitles = state.getAttribute(STATE_TOOL_REGISTRATION_TITLE_LIST) != null ? (HashMap<String, String>) state.getAttribute(STATE_TOOL_REGISTRATION_TITLE_LIST) : new HashMap<String, String>();\r\n    List oTools = state.getAttribute(STATE_TOOL_REGISTRATION_OLD_SELECTED_LIST) == null ? new Vector() : (List) state.getAttribute(STATE_TOOL_REGISTRATION_OLD_SELECTED_LIST);\r\n    Map multipleToolIdTitleMap = state.getAttribute(STATE_MULTIPLE_TOOL_ID_TITLE_MAP) != null ? (Map) state.getAttribute(STATE_MULTIPLE_TOOL_ID_TITLE_MAP) : new HashMap();\r\n    HashMap<String, HashMap<String, String>> multipleToolConfiguration = state.getAttribute(STATE_MULTIPLE_TOOL_CONFIGURATION) != null ? (HashMap<String, HashMap<String, String>>) state.getAttribute(STATE_MULTIPLE_TOOL_CONFIGURATION) : new HashMap<String, HashMap<String, String>>();\r\n    int toolListedTimes = 0;\r\n    int index = 0;\r\n    int insertIndex = 0;\r\n    while (index < toolList.size()) {\r\n        MyTool tListed = (MyTool) toolList.get(index);\r\n        if (tListed.getId().indexOf(toolId) != -1 && !oTools.contains(tListed.getId())) {\r\n            toolListedTimes++;\r\n            insertIndex = index + 1;\r\n        }\r\n        index++;\r\n    }\r\n    List toolSelected = (List) state.getAttribute(STATE_TOOL_REGISTRATION_SELECTED_LIST);\r\n    index = 0;\r\n    int insertSelectedToolIndex = 0;\r\n    while (index < toolSelected.size()) {\r\n        String selectedId = (String) toolSelected.get(index);\r\n        if (selectedId.indexOf(toolId) != -1) {\r\n            insertSelectedToolIndex = index + 1;\r\n        }\r\n        index++;\r\n    }\r\n    for (int i = 0; i < insertTimes; i++) {\r\n        toolSelected.add(insertSelectedToolIndex, toolId + toolListedTimes);\r\n        String newToolId = toolId + toolListedTimes;\r\n        MyTool newTool = new MyTool();\r\n        String titleConfig = ServerConfigurationService.getString(CONFIG_TOOL_TITLE + toolId);\r\n        if (titleConfig != null && titleConfig.length() > 0) {\r\n            defaultTitle = titleConfig;\r\n        }\r\n        newTool.title = defaultTitle;\r\n        newTool.id = newToolId;\r\n        newTool.description = defaultDescription;\r\n        toolList.add(insertIndex, newTool);\r\n        toolListedTimes++;\r\n        multipleToolIdTitleMap.put(newToolId, defaultTitle);\r\n        toolTitles.put(newToolId, defaultTitle);\r\n        HashMap<String, String> attributes = multipleToolConfiguration.get(newToolId);\r\n        if (attributes == null) {\r\n            attributes = getMultiToolConfiguration(toolId, null);\r\n            multipleToolConfiguration.put(newToolId, attributes);\r\n        }\r\n    }\r\n    state.setAttribute(STATE_MULTIPLE_TOOL_ID_TITLE_MAP, multipleToolIdTitleMap);\r\n    state.setAttribute(STATE_MULTIPLE_TOOL_CONFIGURATION, multipleToolConfiguration);\r\n    state.setAttribute(STATE_TOOL_REGISTRATION_LIST, toolList);\r\n    state.setAttribute(STATE_TOOL_REGISTRATION_TITLE_LIST, toolTitles);\r\n    state.setAttribute(STATE_TOOL_REGISTRATION_SELECTED_LIST, toolSelected);\r\n}"
}, {
	"Path": "org.radeox.regex.Matcher.create",
	"Comment": "create a new matcher object, depending on the implementation",
	"Method": "Matcher create(String input,Pattern pattern){\r\n    return new JdkMatcher(input, pattern);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.servlet.qti.ShowQTIServlet.doPost",
	"Comment": "get the faces context and display the contents of the xmldisplay bean",
	"Method": "void doPost(HttpServletRequest req,HttpServletResponse res){\r\n    XMLDisplay xmlDisp = (XMLDisplay) ContextUtil.lookupBeanFromExternalServlet(\"xml\", req, res);\r\n    String xml = xmlDisp.getXml();\r\n    String fileName = xmlDisp.getName() + \".\" + xml;\r\n    res.setHeader(\"Content-Disposition\", \"inline\" + \";filename=\\\"\" + fileName + \"\\\";\");\r\n    PrintWriter out = res.getWriter();\r\n    log.info(\"debug show qti:\");\r\n    log.info(\"xml\");\r\n    out.print(xml);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseArFragment.onRequestPermissionsResult",
	"Comment": "receives the results for permission requests.brings up a dialog to request permissions. the dialog can send the user to the settings app,or finish the activity.",
	"Method": "void onRequestPermissionsResult(int requestCode,String[] permissions,int[] results){\r\n    if (ActivityCompat.checkSelfPermission(requireActivity(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {\r\n        return;\r\n    }\r\n    AlertDialog.Builder builder;\r\n    builder = new AlertDialog.Builder(requireActivity(), android.R.style.Theme_Material_Dialog_Alert);\r\n    builder.setTitle(\"Camera permission required\").setMessage(\"Add camera permission via Settings?\").setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\r\n        @Override\r\n        public void onClick(DialogInterface dialog, int which) {\r\n            Intent intent = new Intent();\r\n            intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\r\n            intent.setData(Uri.fromParts(\"package\", requireActivity().getPackageName(), null));\r\n            requireActivity().startActivity(intent);\r\n            setCanRequestDangerousPermissions(true);\r\n        }\r\n    }).setNegativeButton(android.R.string.cancel, null).setIcon(android.R.drawable.ic_dialog_alert).setOnDismissListener(new OnDismissListener() {\r\n        @Override\r\n        public void onDismiss(final DialogInterface arg0) {\r\n            if (!getCanRequestDangerousPermissions()) {\r\n                requireActivity().finish();\r\n            }\r\n        }\r\n    }).show();\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseArFragment.onRequestPermissionsResult",
	"Comment": "receives the results for permission requests.brings up a dialog to request permissions. the dialog can send the user to the settings app,or finish the activity.",
	"Method": "void onRequestPermissionsResult(int requestCode,String[] permissions,int[] results){\r\n    Intent intent = new Intent();\r\n    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\r\n    intent.setData(Uri.fromParts(\"package\", requireActivity().getPackageName(), null));\r\n    requireActivity().startActivity(intent);\r\n    setCanRequestDangerousPermissions(true);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseArFragment.onRequestPermissionsResult",
	"Comment": "receives the results for permission requests.brings up a dialog to request permissions. the dialog can send the user to the settings app,or finish the activity.",
	"Method": "void onRequestPermissionsResult(int requestCode,String[] permissions,int[] results){\r\n    if (!getCanRequestDangerousPermissions()) {\r\n        requireActivity().finish();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupEmailFacadeImpl.convertSignupEmail",
	"Comment": "helper to convert a signup email notification into a sakai emailmessage, which can encapsulate attachments.\tdue to the way the email objects are created, ie one per email that needs to be sent, not one per user, we cannot store any\tuser specific attachments within the email objects themselves. so this method assembles an emailmessage per user",
	"Method": "EmailMessage convertSignupEmail(SignupEmailNotification email,User recipient){\r\n    EmailMessage message = new EmailMessage();\r\n    message.setHeaders(email.getHeader());\r\n    message.setBody(email.getMessage());\r\n    message.setHeader(\"multipart-subtype\", \"alternative\");\r\n    message.setSubject(email.getSubject());\r\n    log.debug(\"email.getFromAddress(): \" + email.getFromAddress());\r\n    message.setFrom(email.getFromAddress());\r\n    message.setContentType(\"text/html; charset=UTF-8\");\r\n    if (!email.isModifyComment()) {\r\n        for (Attachment a : collectAttachments(email, recipient)) {\r\n            message.addAttachment(a);\r\n        }\r\n    }\r\n    String emailAddress = recipient.getEmail();\r\n    if (StringUtils.isNotBlank(emailAddress) && EmailValidator.getInstance().isValid(emailAddress)) {\r\n        message.addRecipient(EmailAddress.RecipientType.TO, recipient.getDisplayName(), emailAddress);\r\n    } else {\r\n        log.debug(\"Invalid email for user: \" + recipient.getDisplayId() + \". No email will be sent to this user\");\r\n        return null;\r\n    }\r\n    return message;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.asi.ASIBaseClass.escapeXml",
	"Comment": "simple wrapper over commons lang util method, but we may add additionallogic in the future for special qti export purposes.",
	"Method": "String escapeXml(String s){\r\n    if (s == null)\r\n        return \"\";\r\n    return StringEscapeUtils.escapeXml10(s);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.DeliveryBean.setTableOfContents",
	"Comment": "bean with table of contents information anda list of all the sections in the assessmentwhich inturn has a list of all the item contents.",
	"Method": "void setTableOfContents(ContentsDeliveryBean tableOfContents){\r\n    this.tableOfContents = tableOfContents;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.AuthoringHelper.createImportedAssessment",
	"Comment": "import an assessment xml document in qti format, extract & persist the data.",
	"Method": "AssessmentFacade createImportedAssessment(Document document,AssessmentFacade createImportedAssessment,Document document,String unzipLocation,AssessmentFacade createImportedAssessment,Document document,String unzipLocation,boolean isRespondus,List failedMatchingQuestions,AssessmentFacade createImportedAssessment,Document document,String unzipLocation,String templateId,String siteId,AssessmentFacade createImportedAssessment,Document document,String unzipLocation,String templateId,boolean isRespondus,List failedMatchingQuestions,String siteId){\r\n    AssessmentFacade assessment = null;\r\n    AssessmentService assessmentService = new AssessmentService();\r\n    try {\r\n        String me = getAgentString();\r\n        ExtractionHelper exHelper = new ExtractionHelper(this.qtiVersion);\r\n        exHelper.setUnzipLocation(unzipLocation);\r\n        ItemService itemService = new ItemService();\r\n        Document removeNamespace = exHelper.getTransformDocument(exHelper.REMOVE_NAMESPACE_TRANSFORM);\r\n        Document flatNamespaceXml = XmlUtil.transformDocument(document, removeNamespace);\r\n        boolean success = validateImportXml(flatNamespaceXml);\r\n        if (!success) {\r\n            throw (new RuntimeException(\"Invalid QTI XML format.\"));\r\n        }\r\n        Assessment assessmentXml = new Assessment(flatNamespaceXml);\r\n        Map assessmentMap = exHelper.mapAssessment(assessmentXml, isRespondus);\r\n        String description = (String) assessmentMap.get(\"description\");\r\n        String title = TextFormat.convertPlaintextToFormattedTextNoHighUnicode((String) assessmentMap.get(\"title\"));\r\n        assessment = assessmentService.createAssessmentWithoutDefaultSection(title, exHelper.makeFCKAttachment(description), null, templateId, siteId);\r\n        String baseId = assessment.getAssessmentBaseId().toString();\r\n        boolean notUnique = !assessmentService.assessmentTitleIsUnique(baseId, title, false);\r\n        if (notUnique) {\r\n            synchronized (title) {\r\n                log.debug(\"Assessment \" + title + \" is not unique.\");\r\n                int count = 0;\r\n                while (notUnique) {\r\n                    title = exHelper.renameDuplicate(title);\r\n                    log.debug(\"renameDuplicate(title): \" + title);\r\n                    assessment.setTitle(title);\r\n                    notUnique = !assessmentService.assessmentTitleIsUnique(baseId, title, false);\r\n                    if (count++ > 99)\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (isRespondus) {\r\n            AssessmentAccessControl control = (AssessmentAccessControl) assessment.getAssessmentAccessControl();\r\n            if (control == null) {\r\n                control = new AssessmentAccessControl();\r\n                control.setAssessmentBase(assessment.getData());\r\n            }\r\n            EvaluationModel evaluationModel = (EvaluationModel) assessment.getEvaluationModel();\r\n            if (evaluationModel == null) {\r\n                evaluationModel = new EvaluationModel();\r\n                evaluationModel.setAssessmentBase(assessment.getData());\r\n            }\r\n            AssessmentFeedback feedback = (AssessmentFeedback) assessment.getAssessmentFeedback();\r\n            if (feedback == null) {\r\n                feedback = new AssessmentFeedback();\r\n                feedback.setAssessmentBase(assessment.getData());\r\n            }\r\n        } else {\r\n            exHelper.updateAssessment(assessment, assessmentMap);\r\n        }\r\n        assessment.setCreatedBy(me);\r\n        assessment.setCreatedDate(assessment.getCreatedDate());\r\n        assessment.setLastModifiedBy(me);\r\n        assessment.setLastModifiedDate(assessment.getCreatedDate());\r\n        assessment.setTypeId(TypeIfc.QUIZ);\r\n        assessment.setStatus(Integer.valueOf(1));\r\n        String comments = (String) assessmentMap.get(\"comments\");\r\n        assessment.setComments(comments);\r\n        List sectionList = exHelper.getSectionXmlList(assessmentXml);\r\n        int sectionListSize = sectionList.size();\r\n        log.debug(\"sections=\" + sectionListSize);\r\n        for (int sec = 0; sec < sectionListSize; sec++) {\r\n            Section sectionXml = (Section) sectionList.get(sec);\r\n            Map sectionMap = exHelper.mapSection(sectionXml, isRespondus);\r\n            SectionFacade section = assessmentService.addSection(\"\" + assessment.getAssessmentId());\r\n            exHelper.updateSection(section, sectionMap);\r\n            section.setCreatedBy(me);\r\n            section.setCreatedDate(assessment.getCreatedDate());\r\n            section.setLastModifiedBy(me);\r\n            section.setLastModifiedDate(assessment.getCreatedDate());\r\n            section.setTypeId(TypeIfc.DEFAULT_SECTION);\r\n            section.setStatus(Integer.valueOf(1));\r\n            section.setSequence(Integer.valueOf(sec + 1));\r\n            List itemList = exHelper.getItemXmlList(sectionXml);\r\n            for (int itm = 0; itm < itemList.size(); itm++) {\r\n                log.debug(\"items=\" + itemList.size());\r\n                Item itemXml = (Item) itemList.get(itm);\r\n                ItemFacade item = new ItemFacade();\r\n                try {\r\n                    exHelper.updateItem(item, itemXml, isRespondus);\r\n                } catch (RespondusMatchingException rme) {\r\n                    if (failedMatchingQuestions != null) {\r\n                        failedMatchingQuestions.add(itm + 1);\r\n                    }\r\n                }\r\n                item.setCreatedBy(me);\r\n                item.setCreatedDate(assessment.getCreatedDate());\r\n                item.setLastModifiedBy(me);\r\n                item.setLastModifiedDate(assessment.getCreatedDate());\r\n                item.setStatus(ItemDataIfc.ACTIVE_STATUS);\r\n                item.setSequence(Integer.valueOf(itm + 1));\r\n                item.setSection(section);\r\n                item.addItemMetaData(ItemMetaData.PARTID, section.getSectionId().toString());\r\n                exHelper.makeItemAttachmentSet(item);\r\n                section.addItem(item);\r\n                itemService.saveItem(item);\r\n                EventTrackingService.post(EventTrackingService.newEvent(SamigoConstants.EVENT_ASSESSMENT_SAVEITEM, \"/sam/\" + AgentFacade.getCurrentSiteId() + \"/saved itemId=\" + item.getItemId().toString(), true));\r\n            }\r\n            exHelper.makeSectionAttachmentSet(section, sectionMap);\r\n            assessmentService.saveOrUpdateSection(section);\r\n        }\r\n        String allowIp = assessment.getAssessmentMetaDataByLabel(\"ALLOW_IP\");\r\n        if (allowIp != null && !allowIp.trim().equalsIgnoreCase(\"null\")) {\r\n            exHelper.makeSecuredIPAddressSet(assessment, allowIp);\r\n            Set assessmentSet = assessment.getAssessmentMetaDataSet();\r\n            Iterator assessmentSetIterator = assessmentSet.iterator();\r\n            while (assessmentSetIterator.hasNext()) {\r\n                AssessmentMetaData assessmentMetaData = (AssessmentMetaData) assessmentSetIterator.next();\r\n                if (\"ALLOW_IP\".equals(assessmentMetaData.getLabel())) {\r\n                    assessmentSetIterator.remove();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        exHelper.makeAssessmentAttachmentSet(assessment);\r\n        String siteTitle = SiteService.getSite(ToolManager.getCurrentPlacement().getContext()).getTitle();\r\n        if (siteTitle != null && !siteTitle.equals(assessment.getAssessmentAccessControl().getReleaseTo())) {\r\n            assessment.getAssessmentAccessControl().setReleaseTo(siteTitle);\r\n        }\r\n        assessmentService.saveAssessment(assessment);\r\n        return assessment;\r\n    } catch (RespondusMatchingException rme) {\r\n        log.error(rme.getMessage(), rme);\r\n        assessmentService.removeAssessment(assessment.getAssessmentId().toString());\r\n        throw new RespondusMatchingException(rme);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        assessmentService.removeAssessment(assessment.getAssessmentId().toString());\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.userauditservice.tool.servlet.UserAuditJsfTool.init",
	"Comment": "override init to inject necessary components via componentmanager cover",
	"Method": "void init(ServletConfig config){\r\n    super.init(config);\r\n    sessionManager = (SessionManager) ComponentManager.get(\"org.sakaiproject.tool.api.SessionManager\");\r\n    activeToolManager = (ActiveToolManager) ComponentManager.get(\"org.sakaiproject.tool.api.ActiveToolManager\");\r\n    toolManager = (ToolManager) ComponentManager.get(\"org.sakaiproject.tool.api.ToolManager\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.facade.sakai.AuthzSakaiImpl.isSectionOptionsManagementAllowed",
	"Comment": "the user must have site.upd to update section options in the section info tool.",
	"Method": "boolean isSectionOptionsManagementAllowed(String userUid,String siteContext){\r\n    return isSectionManagementAllowed(userUid, siteContext);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getMoreInfoImg",
	"Comment": "using moreinfodir, if toolid is found in the dir return path otherwise return null",
	"Method": "String getMoreInfoImg(File infoDir,String toolId){\r\n    String moreInfoUrl = null;\r\n    try {\r\n        Collection<File> files = FileUtils.listFiles(infoDir, new WildcardFileFilter(toolId + \"*\"), null);\r\n        if (files.isEmpty() == false) {\r\n            File mFile = files.iterator().next();\r\n            moreInfoUrl = libraryPath + mFile.getName();\r\n        }\r\n    } catch (Exception e) {\r\n        log.info(\"unable to read moreinfo: \" + e.getMessage());\r\n    }\r\n    return moreInfoUrl;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.MaxLifetimeLdapConnectionLivenessValidator.setMaxTtl",
	"Comment": "assign the max connection lifetime, in millis. values\tless than or equal to zero are considered infinite, i.e.\tno ttl.",
	"Method": "void setMaxTtl(long maxTtl){\r\n    this.maxTtl = maxTtl;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getGroupName",
	"Comment": "given groupid, return localized name from tools.properties",
	"Method": "String getGroupName(String groupId){\r\n    return ToolManager.getLocalizedToolProperty(groupId, \"title\");\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileLogicImpl.sendProfileChangeEmailNotification",
	"Comment": "sends an email notification when a user changes their profile, if enabled.",
	"Method": "void sendProfileChangeEmailNotification(String userUuid){\r\n    boolean enabled = Boolean.valueOf(sakaiProxy.getServerConfigurationParameter(\"profile2.profile.change.email.enabled\", \"false\"));\r\n    if (!enabled) {\r\n        return;\r\n    }\r\n    String eidTo = sakaiProxy.getServerConfigurationParameter(\"profile2.profile.change.email.eid\", null);\r\n    if (StringUtils.isBlank(eidTo)) {\r\n        log.error(\"Profile change email notification is enabled but no user eid to send it to is set. Please set 'profile2.profile.change.email.eid' in sakai.properties\");\r\n        return;\r\n    }\r\n    String userUuidTo = sakaiProxy.getUserIdForEid(eidTo);\r\n    if (StringUtils.isBlank(userUuidTo)) {\r\n        log.error(\"Profile change email notification is setup with an invalid eid. Please adjust 'profile2.profile.change.email.eid' in sakai.properties\");\r\n        return;\r\n    }\r\n    String emailTemplateKey = ProfileConstants.EMAIL_TEMPLATE_KEY_PROFILE_CHANGE_NOTIFICATION;\r\n    Map<String, String> replacementValues = new HashMap<String, String>();\r\n    replacementValues.put(\"userDisplayName\", sakaiProxy.getUserDisplayName(userUuid));\r\n    replacementValues.put(\"localSakaiName\", sakaiProxy.getServiceName());\r\n    replacementValues.put(\"profileLink\", linkLogic.getEntityLinkToProfileHome(userUuid));\r\n    replacementValues.put(\"localSakaiUrl\", sakaiProxy.getPortalUrl());\r\n    sakaiProxy.sendEmail(userUuidTo, emailTemplateKey, replacementValues);\r\n    return;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.JoinableSiteSettings.doJoinForSiteBrowser",
	"Comment": "prepare for the join context. check all settings first before forwarding to build the context for the join mode",
	"Method": "String doJoinForSiteBrowser(SessionState state,ResourceLoader rb,String siteID){\r\n    String message = \"\";\r\n    try {\r\n        Site site = siteService.getSite(siteID);\r\n        User currentUser = userDirectoryService.getCurrentUser();\r\n        if (!site.isJoinable()) {\r\n            message = rb.getString(MSG_KEY_UNJOINABLE);\r\n        } else if (currentUser == null || currentUser.getId() == null || \"\".equalsIgnoreCase(currentUser.getId())) {\r\n            message = rb.getString(MSG_KEY_LOGIN);\r\n        } else if (siteService.isCurrentUserMemberOfSite(siteID)) {\r\n            message = rb.getString(MSG_KEY_ALREADY_MEMBER_1);\r\n        } else if (siteService.isLimitByAccountTypeEnabled(siteID) && !siteService.isAllowedToJoin(siteID)) {\r\n            message = rb.getString(MSG_KEY_NOT_ALLOWED_TO_JOIN);\r\n        } else {\r\n            state.setAttribute(STATE_JOIN_SITE_SITE_BROWSER_SITE_ID, siteID);\r\n            state.setAttribute(SITE_BROWSER_MODE, SITE_BROWSER_JOIN_MODE);\r\n        }\r\n    } catch (IdUnusedException ex) {\r\n        log.error(\"doJoinForSiteBrowser()\", ex);\r\n        message = rb.getFormattedMessage(MSG_KEY_JOIN_NOT_FOUND, new Object[] { siteID });\r\n    }\r\n    return message;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupUIBaseBean.getEidsForEmail",
	"Comment": "get the eids assocaited with an email address, ie there may be two or more users with the same email address. \twe need to be able to handle this in the ui.",
	"Method": "List<String> getEidsForEmail(String email){\r\n    Collection<User> users = sakaiFacade.getUsersByEmail(email);\r\n    List<String> eids = new ArrayList<String>();\r\n    for (User u : users) {\r\n        eids.add(u.getEid());\r\n    }\r\n    return eids;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.pageMatchesPattern",
	"Comment": "pagematchespattern returns tool id if a sitepage matches a worksite setuppattern\totherwise return null",
	"Method": "List<String> pageMatchesPattern(SessionState state,SitePage page){\r\n    List<String> rv = new Vector<String>();\r\n    List pageToolList = page.getTools();\r\n    if (pageToolList == null) {\r\n        return null;\r\n    }\r\n    List toolList = new Vector();\r\n    int count = pageToolList.size();\r\n    if (isHomePage(page)) {\r\n        rv.add(TOOL_ID_HOME);\r\n        rv.add(TOOL_ID_HOME);\r\n        return rv;\r\n    }\r\n    boolean foundSiteInfoTool = false;\r\n    for (int i = 0; i < count; i++) {\r\n        ToolConfiguration toolConfiguration = (ToolConfiguration) pageToolList.get(i);\r\n        if (toolConfiguration.getToolId().equals(TOOL_ID_SITEINFO)) {\r\n            foundSiteInfoTool = true;\r\n            break;\r\n        }\r\n    }\r\n    if (foundSiteInfoTool) {\r\n        rv.add(TOOL_ID_SITEINFO);\r\n        rv.add(TOOL_ID_SITEINFO);\r\n        return rv;\r\n    }\r\n    if (count != 1) {\r\n        return null;\r\n    } else if (page.getLayout() != SitePage.LAYOUT_SINGLE_COL) {\r\n        return null;\r\n    } else {\r\n        ToolConfiguration toolConfiguration = (ToolConfiguration) pageToolList.get(0);\r\n        toolList = (List) state.getAttribute(STATE_TOOL_REGISTRATION_LIST);\r\n        if (pageToolList != null && pageToolList.size() != 0) {\r\n            String match = null;\r\n            for (ListIterator i = toolList.listIterator(); i.hasNext(); ) {\r\n                MyTool tool = (MyTool) i.next();\r\n                if (toolConfiguration.getTitle() != null) {\r\n                    if (toolConfiguration.getTool() != null && originalToolId(toolConfiguration.getTool().getId(), tool.getId()) != null) {\r\n                        match = tool.getId();\r\n                        rv.add(match);\r\n                        rv.add(toolConfiguration.getId());\r\n                    }\r\n                }\r\n            }\r\n            if (match == null) {\r\n                rv = null;\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacadeQueries.isPublishedAssessmentIdValid",
	"Comment": "this was created for gradebookexternalassessmentservice.\twe just want a quick answer whether samigo is responsible for an id.",
	"Method": "boolean isPublishedAssessmentIdValid(Long publishedAssessmentId){\r\n    List<PublishedAssessmentData> list = (List<PublishedAssessmentData>) getHibernateTemplate().findByNamedParam(\"from PublishedAssessmentData where publishedAssessmentId = :id\", \"id\", publishedAssessmentId);\r\n    if (!list.isEmpty()) {\r\n        PublishedAssessmentData f = list.get(0);\r\n        return f.getPublishedAssessmentId() > 0;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getPageContentsByAssessment",
	"Comment": "gets a contents bean for the current page if is format by assessment.",
	"Method": "ContentsDeliveryBean getPageContentsByAssessment(PublishedAssessmentFacade publishedAssessment,Map itemGradingHash,DeliveryBean delivery,Map publishedAnswerHash){\r\n    ContentsDeliveryBean contents = new ContentsDeliveryBean();\r\n    double currentScore = 0;\r\n    double maxScore = 0;\r\n    List partSet = publishedAssessment.getSectionArraySorted();\r\n    Iterator iter = partSet.iterator();\r\n    List partsContents = new ArrayList();\r\n    while (iter.hasNext()) {\r\n        SectionContentsBean partBean = getPartBean((SectionDataIfc) iter.next(), itemGradingHash, delivery, publishedAnswerHash);\r\n        partBean.setNumParts(Integer.toString(partSet.size()));\r\n        if (partBean.getItemContentsSize().equals(\"0\")) {\r\n            log.debug(\"getPageContentsByAssessment(): no question\");\r\n            partBean.setNoQuestions(true);\r\n        }\r\n        currentScore += partBean.getPoints();\r\n        maxScore += partBean.getMaxPoints();\r\n        partsContents.add(partBean);\r\n    }\r\n    delivery.setPrevious(false);\r\n    delivery.setContinue(false);\r\n    contents.setCurrentScore(currentScore);\r\n    contents.setMaxScore(maxScore);\r\n    contents.setPartsContents(partsContents);\r\n    contents.setShowStudentScore(delivery.isShowStudentScore());\r\n    return contents;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.EditBean.getPreviousRevision",
	"Comment": "get the previous revision number used by the last save, if any",
	"Method": "int getPreviousRevision(){\r\n    return previousRevision;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseTransformableNode.isTransforming",
	"Comment": "returns true if any of the transformation controllers are actively transforming this node.",
	"Method": "boolean isTransforming(){\r\n    for (int i = 0; i < controllers.size(); i++) {\r\n        if (controllers.get(i).isTransforming()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.addSiteTypeFeatures",
	"Comment": "addsitetypetoolsfeatures adds features to a new customized type site",
	"Method": "void addSiteTypeFeatures(SessionState state){\r\n    Site edit = null;\r\n    Site template = null;\r\n    String type = (String) state.getAttribute(STATE_SITE_TYPE);\r\n    HashMap<String, String> templates = siteTypeProvider.getTemplateForSiteTypes();\r\n    if (templates != null && templates.containsKey(type)) {\r\n        String templateId = templates.get(type);\r\n        String id = IdManager.createUuid();\r\n        try {\r\n            template = SiteService.getSite(templateId);\r\n        } catch (Exception e) {\r\n            log.error(this + \".addSiteTypeFeatures:\" + e.getMessage() + templateId, e);\r\n        }\r\n        if (template != null) {\r\n            try {\r\n                edit = SiteService.addSite(id, template);\r\n                edit.setType(SiteTypeUtil.getTargetSiteType(template.getType()));\r\n            } catch (Exception e) {\r\n                log.error(this + \".addSiteTypeFeatures:\" + \" add/edit site id=\" + id, e);\r\n            }\r\n            if (edit != null) {\r\n                SiteInfo siteInfo = (SiteInfo) state.getAttribute(STATE_SITE_INFO);\r\n                edit.setShortDescription(siteInfo.short_description);\r\n                edit.setTitle(siteInfo.title);\r\n                edit.setPublished(true);\r\n                edit.setPubView(false);\r\n                edit.getPropertiesEdit().addProperty(TEMPLATE_USED, templateId);\r\n                try {\r\n                    SiteService.save(edit);\r\n                } catch (Exception e) {\r\n                    log.error(this + \".addSiteTypeFeatures:\" + \" commitEdit site id=\" + id, e);\r\n                }\r\n                User currentUser = UserDirectoryService.getCurrentUser();\r\n                List<String> pList = new ArrayList<String>();\r\n                pList.add(currentUser != null ? currentUser.getEid() : \"\");\r\n                String alias = siteTypeProvider.getSiteAlias(type, pList);\r\n                String channelReference = mailArchiveChannelReference(id);\r\n                try {\r\n                    aliasService.setAlias(alias, channelReference);\r\n                } catch (IdUsedException ee) {\r\n                    addAlert(state, rb.getFormattedMessage(\"java.alias.exists\", new Object[] { alias }));\r\n                    log.error(this + \".addSiteTypeFeatures:\" + rb.getFormattedMessage(\"java.alias.exists\", new Object[] { alias }), ee);\r\n                } catch (IdInvalidException ee) {\r\n                    addAlert(state, rb.getFormattedMessage(\"java.alias.isinval\", new Object[] { alias }));\r\n                    log.error(this + \".addSiteTypeFeatures:\" + rb.getFormattedMessage(\"java.alias.isinval\", new Object[] { alias }), ee);\r\n                } catch (PermissionException ee) {\r\n                    addAlert(state, rb.getString(\"java.addalias\"));\r\n                    log.error(this + \".addSiteTypeFeatures:\" + SessionManager.getCurrentSessionUserId() + \" does not have permission to add alias. \", ee);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.crawl.TableExtRetriever.retrieveAdditionalColumnAttributes",
	"Comment": "retrieves additional column attributes from the database.",
	"Method": "void retrieveAdditionalColumnAttributes(){\r\n    final InformationSchemaViews informationSchemaViews = getRetrieverConnection().getInformationSchemaViews();\r\n    if (!informationSchemaViews.hasQuery(InformationSchemaKey.ADDITIONAL_COLUMN_ATTRIBUTES)) {\r\n        LOGGER.log(Level.INFO, \"Not retrieving additional column attributes, since this was not requested\");\r\n        LOGGER.log(Level.FINE, \"Additional column attributes SQL statement was not provided\");\r\n        return;\r\n    }\r\n    final Query columnAttributesSql = informationSchemaViews.getQuery(InformationSchemaKey.ADDITIONAL_COLUMN_ATTRIBUTES);\r\n    final Connection connection = getDatabaseConnection();\r\n    try (final Statement statement = connection.createStatement();\r\n        final MetadataResultSet results = new MetadataResultSet(columnAttributesSql, statement, getSchemaInclusionRule())) {\r\n        while (results.next()) {\r\n            final String catalogName = normalizeCatalogName(results.getString(\"TABLE_CATALOG\"));\r\n            final String schemaName = normalizeSchemaName(results.getString(\"TABLE_SCHEMA\"));\r\n            final String tableName = results.getString(\"TABLE_NAME\");\r\n            final String columnName = results.getString(\"COLUMN_NAME\");\r\n            LOGGER.log(Level.FINER, \"Retrieving additional column attributes: \" + columnName);\r\n            final Optional<MutableTable> tableOptional = lookupTable(catalogName, schemaName, tableName);\r\n            if (!tableOptional.isPresent()) {\r\n                LOGGER.log(Level.FINE, new StringFormat(\"Cannot find table <%s.%s.%s>\", catalogName, schemaName, tableName));\r\n                continue;\r\n            }\r\n            final MutableTable table = tableOptional.get();\r\n            final Optional<MutableColumn> columnOptional = table.lookupColumn(columnName);\r\n            if (!columnOptional.isPresent()) {\r\n                LOGGER.log(Level.FINE, new StringFormat(\"Cannot find column <%s.%s.%s.%s>\", catalogName, schemaName, tableName, columnName));\r\n                continue;\r\n            } else {\r\n                final MutableColumn column = columnOptional.get();\r\n                column.addAttributes(results.getAttributes());\r\n            }\r\n        }\r\n    } catch (final Exception e) {\r\n        LOGGER.log(Level.WARNING, \"Could not retrieve additional column attributes\", e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portal.util.ToolUtils.getPageUrlForTool",
	"Comment": "look through the pages in a site and get the page url for a tool.",
	"Method": "String getPageUrlForTool(HttpServletRequest req,Site site,ToolConfiguration pageTool){\r\n    if (req == null)\r\n        req = getRequestFromThreadLocal();\r\n    SitePage thePage = getPageForTool(site, pageTool.getId());\r\n    if (thePage == null)\r\n        return null;\r\n    return getPageUrl(req, site, thePage);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.business.entity.RecordingData.getLimit",
	"Comment": "accessor for retry limit.if the number of retries are unlimited, this is 0.",
	"Method": "String getLimit(){\r\n    return limit;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getPartBean",
	"Comment": "populate a sectioncontentsbean properties and populate with itemcontentsbean",
	"Method": "SectionContentsBean getPartBean(SectionDataIfc part,Map itemGradingHash,DeliveryBean delivery,Map publishedAnswerHash){\r\n    double maxPoints = 0;\r\n    double points = 0;\r\n    int unansweredQuestions = 0;\r\n    SectionContentsBean sec = new SectionContentsBean(part);\r\n    List<ItemDataIfc> itemSet = null;\r\n    List<ItemDataIfc> itemlist = part.getItemArray();\r\n    long seed = 0;\r\n    if (delivery.getActionMode() == DeliveryBean.GRADE_ASSESSMENT) {\r\n        StudentScoresBean studentscorebean = (StudentScoresBean) ContextUtil.lookupBean(\"studentScores\");\r\n        seed = getSeed(part, delivery, (long) studentscorebean.getStudentId().hashCode());\r\n    } else {\r\n        seed = getSeed(part, delivery, (long) AgentFacade.getAgentString().hashCode());\r\n    }\r\n    itemSet = getItemArraySortedWithRandom(part, itemlist, seed);\r\n    sec.setQuestions(itemSet.size());\r\n    if (delivery.getSettings().getItemNumbering().equals(AssessmentAccessControl.RESTART_NUMBERING_BY_PART.toString())) {\r\n        sec.setNumbering(itemSet.size());\r\n    } else {\r\n        sec.setNumbering(((Long) itemGradingHash.get(\"items\")).intValue());\r\n    }\r\n    sec.setText(part.getTitle());\r\n    sec.setDescription(part.getDescription());\r\n    sec.setNumber(\"\" + part.getSequence());\r\n    sec.setMetaData(part);\r\n    List<ItemContentsBean> itemContents = new ArrayList();\r\n    int i = 0;\r\n    for (ItemDataIfc thisItem : itemSet) {\r\n        ItemContentsBean itemBean = getQuestionBean(thisItem, itemGradingHash, delivery, publishedAnswerHash);\r\n        itemBean.setNumber(++i);\r\n        if (delivery.getSettings().getItemNumbering().equals(AssessmentAccessControl.RESTART_NUMBERING_BY_PART.toString())) {\r\n            itemBean.setSequence(Integer.toString(itemBean.getNumber()));\r\n        } else {\r\n            itemBean.setSequence(((Integer) itemGradingHash.get(\"sequence\" + thisItem.getItemId().toString())).toString());\r\n        }\r\n        maxPoints += itemBean.getMaxPoints();\r\n        points += itemBean.getExactPoints();\r\n        itemBean.setShowStudentScore(delivery.isShowStudentScore());\r\n        itemBean.setShowStudentQuestionScore(delivery.isShowStudentQuestionScore());\r\n        if (itemBean.isUnanswered()) {\r\n            unansweredQuestions++;\r\n        }\r\n        itemContents.add(itemBean);\r\n    }\r\n    sec.setMaxPoints(maxPoints);\r\n    sec.setPoints(points);\r\n    sec.setShowStudentQuestionScore(delivery.isShowStudentQuestionScore());\r\n    sec.setUnansweredQuestions(unansweredQuestions);\r\n    sec.setItemContents(itemContents);\r\n    sec.setAttachmentList(part.getSectionAttachmentList());\r\n    return sec;\r\n}"
}, {
	"Path": "org.sakaiproject.component.imsent.user.IMSEntUserDirectoryProvider.findUserByEmail",
	"Comment": "find a user object who has this email address. update the object with the information found.",
	"Method": "boolean findUserByEmail(UserEdit edit,String email){\r\n    if (!isReady())\r\n        return false;\r\n    if ((edit == null) || (email == null))\r\n        return false;\r\n    log.info(\"findUserByEmail(\" + email + \")\");\r\n    SakaiIMSUser rv = retrieveUser(email, true);\r\n    if (rv == null)\r\n        return false;\r\n    copyInfo(edit, rv);\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.menu.MenuEntry.getForm",
	"Comment": "access the form name whose values will be used when this item is selected.",
	"Method": "String getForm(){\r\n    return m_form;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ViewBean.getActionUrl",
	"Comment": "given a wikipageaction return an url to the requested page with the\tadditional parameters being set.",
	"Method": "String getActionUrl(WikiPageAction action,String getActionUrl,WikiPageAction action,boolean breadcrumbs,String getActionUrl,String pageName,WikiPageAction action,boolean breadcrumbs,String getActionUrl,WikiPageAction action,Map parameters,String getActionUrl,String pageName,WikiPageAction action,Map parameters){\r\n    return getPageUrl(pageName, action.getName(), parameters);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.util.SamigoExpressionError.get",
	"Comment": "returns the error message, including line and column number",
	"Method": "String get(){\r\n    String res;\r\n    if (row_ == -1) {\r\n        if (col_ == -1) {\r\n            res = String.format(\"Error: %s\", msg_);\r\n        } else {\r\n            res = String.format(\"Error: %s (col %d)\", msg_, col_);\r\n        }\r\n    } else {\r\n        res = String.format(\"Error: %s (ln %d, col %d)\", msg_, row_, col_);\r\n    }\r\n    return res;\r\n}"
}, {
	"Path": "org.sakaiproject.site.util.SiteComparator.compareParticipantName",
	"Comment": "serves as secondary sort by participant name if other criteria returns equal value",
	"Method": "int compareParticipantName(Participant o1,Participant o2){\r\n    return compareString(o1.getName(), o2.getName());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.assessment.PublishedAssessmentService.getBasicInfoOfLastSubmittedAssessments",
	"Comment": "return an array list of the last assessmentgradingfacade per assessment thata user has submitted for grade.",
	"Method": "List<AssessmentGradingData> getBasicInfoOfLastSubmittedAssessments(String agentId,String orderBy,boolean ascending){\r\n    return PersistenceService.getInstance().getPublishedAssessmentFacadeQueries().getBasicInfoOfLastSubmittedAssessments(agentId, orderBy, ascending);\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.addNewPageToSiteWithPosition",
	"Comment": "create a new page in a site. a page holds one or more tools and is shown in the main navigation section. you will still need to add tools to this page.",
	"Method": "String addNewPageToSiteWithPosition(String sessionid,String siteid,String pagetitle,int pagelayout,int position,boolean popup){\r\n    Session session = establishSession(sessionid);\r\n    try {\r\n        Site siteEdit = null;\r\n        SitePage sitePageEdit = null;\r\n        siteEdit = siteService.getSite(siteid);\r\n        sitePageEdit = siteEdit.addPage();\r\n        sitePageEdit.setTitle(pagetitle);\r\n        sitePageEdit.setLayout(pagelayout);\r\n        sitePageEdit.setPosition(position);\r\n        sitePageEdit.setPopup(popup);\r\n        siteService.save(siteEdit);\r\n    } catch (Exception e) {\r\n        return e.getClass().getName() + \" : \" + e.getMessage();\r\n    }\r\n    return \"success\";\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getHomeToolIds",
	"Comment": "what are the tool ids within home page?\tif this is for a newly added home tool, get the tool ids from template site or system set default\telse if this is an existing home tool, get the tool ids from the page",
	"Method": "List<String> getHomeToolIds(SessionState state,boolean newHomeTool,SitePage homePage){\r\n    List<String> rv = new Vector<String>();\r\n    Site site = getStateSite(state);\r\n    String siteType = site != null ? site.getType() : \"\";\r\n    if (ServerConfigurationService.getStrings(\"wsetup.home.toolids.\" + siteType) != null) {\r\n        rv = new ArrayList(Arrays.asList(ServerConfigurationService.getStrings(\"wsetup.home.toolids.\" + siteType)));\r\n    } else if (ServerConfigurationService.getStrings(\"wsetup.home.toolids\") != null) {\r\n        rv = new ArrayList(Arrays.asList(ServerConfigurationService.getStrings(\"wsetup.home.toolids\")));\r\n    }\r\n    if (rv.isEmpty()) {\r\n        Site templateSite = null;\r\n        String templateSiteId = \"\";\r\n        if (SiteService.isUserSite(site.getId())) {\r\n            try {\r\n                User user = UserDirectoryService.getUser(SiteService.getSiteUserId(site.getId()));\r\n                templateSiteId = SiteService.USER_SITE_TEMPLATE + \".\" + user.getType();\r\n                templateSite = SiteService.getSite(templateSiteId);\r\n            } catch (Throwable t) {\r\n                log.debug(this + \": getHomeToolIds cannot find site \" + templateSiteId + t.getMessage());\r\n                try {\r\n                    templateSiteId = SiteService.USER_SITE_TEMPLATE;\r\n                    templateSite = SiteService.getSite(templateSiteId);\r\n                } catch (Throwable tt) {\r\n                    log.debug(this + \": getHomeToolIds cannot find site \" + templateSiteId + tt.getMessage());\r\n                }\r\n            }\r\n        } else {\r\n            templateSite = (Site) state.getAttribute(STATE_TEMPLATE_SITE);\r\n            if (templateSite == null) {\r\n                templateSiteId = SiteService.SITE_TEMPLATE + \".\" + siteType;\r\n                try {\r\n                    templateSite = SiteService.getSite(templateSiteId);\r\n                } catch (Throwable t) {\r\n                    log.debug(this + \": getHomeToolIds cannot find site \" + templateSiteId + t.getMessage());\r\n                    templateSiteId = SiteService.SITE_TEMPLATE;\r\n                    try {\r\n                        templateSite = SiteService.getSite(templateSiteId);\r\n                    } catch (Throwable tt) {\r\n                        log.debug(this + \": getHomeToolIds cannot find site \" + templateSiteId + tt.getMessage());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (templateSite != null) {\r\n            for (SitePage page : (List<SitePage>) templateSite.getPages()) {\r\n                String title = page.getTitle();\r\n                if (isHomePage(page)) {\r\n                    for (ToolConfiguration tConfiguration : (List<ToolConfiguration>) page.getTools()) {\r\n                        String toolId = tConfiguration.getToolId();\r\n                        if (ToolManager.getTool(toolId) != null)\r\n                            rv.add(toolId);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (rv.isEmpty()) {\r\n        if (siteType.equalsIgnoreCase(\"myworkspace\")) {\r\n            if (ToolManager.getTool(\"sakai.motd\") != null)\r\n                rv.add(\"sakai.motd\");\r\n            if (rv.isEmpty()) {\r\n                if (ToolManager.getTool(\"sakai.iframe.myworkspace\") != null)\r\n                    rv.add(\"sakai.iframe.myworkspace\");\r\n            }\r\n        } else {\r\n            if (ToolManager.getTool(\"sakai.iframe.site\") != null)\r\n                rv.add(\"sakai.iframe.site\");\r\n        }\r\n        if (ToolManager.getTool(TOOL_ID_SUMMARY_CALENDAR) != null) {\r\n            rv.add(TOOL_ID_SUMMARY_CALENDAR);\r\n        }\r\n        if (ToolManager.getTool(TOOL_ID_SYNOPTIC_ANNOUNCEMENT) != null) {\r\n            rv.add(TOOL_ID_SYNOPTIC_ANNOUNCEMENT);\r\n        }\r\n        if (ToolManager.getTool(TOOL_ID_SYNOPTIC_CHAT) != null) {\r\n            rv.add(TOOL_ID_SYNOPTIC_CHAT);\r\n        }\r\n        if (ToolManager.getTool(TOOL_ID_SYNOPTIC_MESSAGECENTER) != null) {\r\n            rv.add(TOOL_ID_SYNOPTIC_MESSAGECENTER);\r\n        }\r\n    }\r\n    if (!newHomeTool) {\r\n        for (ToolConfiguration tConfiguration : (List<ToolConfiguration>) homePage.getTools()) {\r\n            String hToolId = tConfiguration.getToolId();\r\n            if (!rv.contains(hToolId)) {\r\n                rv.add(hToolId);\r\n            }\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.dataproviders.MessageThreadsDataProvider.iterator",
	"Comment": "retrieve a sublist from the database, for paging\ttodo make it retrieve only the sublist from the db, this just gets the lot and then returns a sublist.",
	"Method": "Iterator<MessageThread> iterator(long first,long count){\r\n    int f = (int) first;\r\n    int c = (int) count;\r\n    List<MessageThread> slice = messagingLogic.getMessageThreads(userUuid).subList(f, f + c);\r\n    Collections.sort(slice, Collections.reverseOrder());\r\n    return slice.iterator();\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.PrivacyBean.processSiteSelected",
	"Comment": "sets bean variables to affect display when dropdown list\tin myworkspace is changed.",
	"Method": "void processSiteSelected(ValueChangeEvent e){\r\n    allChanged = false;\r\n    noSiteProcessErr = false;\r\n    if (\"\".equals((String) e.getNewValue())) {\r\n        siteSelected = false;\r\n    } else {\r\n        curSite = (String) e.getNewValue();\r\n        siteSelected = true;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portal.service.SiteNeighbourhoodServiceImpl.getAllSites",
	"Comment": "get all sites for the current user. if the user is not logged in we\treturn the list of publically viewable gateway sites.",
	"Method": "List<Site> getAllSites(HttpServletRequest req,Session session,boolean includeMyWorkspace){\r\n    boolean loggedIn = session.getUserId() != null;\r\n    List<Site> mySites;\r\n    if (!loggedIn) {\r\n        mySites = getGatewaySites();\r\n        return mySites;\r\n    }\r\n    List prefExclude = new ArrayList();\r\n    List prefOrder = new ArrayList();\r\n    if (session.getUserId() != null) {\r\n        Preferences prefs = preferencesService.getPreferences(session.getUserId());\r\n        ResourceProperties props = prefs.getProperties(PreferencesService.SITENAV_PREFS_KEY);\r\n        List l = props.getPropertyList(\"exclude\");\r\n        if (l != null) {\r\n            prefExclude = l;\r\n        }\r\n        l = props.getPropertyList(\"order\");\r\n        if (l != null) {\r\n            prefOrder = l;\r\n        }\r\n    }\r\n    mySites = siteService.getUserSites(false, false, prefExclude);\r\n    Vector<Site> ordered = new Vector<Site>();\r\n    Set<String> added = new HashSet<String>();\r\n    List<String> actualOrder = new ArrayList<String>(mySites.size());\r\n    for (Site site : mySites) {\r\n        actualOrder.add(site.getId());\r\n    }\r\n    Site myWorkspace = getMyWorkspace(session);\r\n    if (myWorkspace != null) {\r\n        if (includeMyWorkspace) {\r\n            ordered.add(myWorkspace);\r\n            added.add(myWorkspace.getId());\r\n        } else {\r\n            int pos = actualOrder.indexOf(myWorkspace.getId());\r\n            if (pos != -1) {\r\n                mySites.remove(pos);\r\n                actualOrder.remove(pos);\r\n            }\r\n            ;\r\n        }\r\n    }\r\n    for (Iterator i = prefOrder.iterator(); i.hasNext(); ) {\r\n        String id = (String) i.next();\r\n        int pos = actualOrder.indexOf(id);\r\n        if (pos != -1) {\r\n            Site s = mySites.get(pos);\r\n            if (!added.contains(s.getId())) {\r\n                ordered.add(s);\r\n                added.add(s.getId());\r\n            }\r\n        }\r\n    }\r\n    boolean haveChildren = false;\r\n    int siteCount = mySites.size();\r\n    for (int i = 0; i < mySites.size(); i++) {\r\n        Site s = mySites.get(i);\r\n        if (added.contains(s.getId()))\r\n            continue;\r\n        String ourParent = null;\r\n        if (prefOrder.size() == 0) {\r\n            ResourceProperties rp = s.getProperties();\r\n            ourParent = rp.getProperty(SiteService.PROP_PARENT_ID);\r\n        }\r\n        log.debug(\"Top Site:{} parent={}\", s.getTitle(), ourParent);\r\n        if (siteCount > 200 || ourParent == null) {\r\n            log.debug(\"Added at root\");\r\n            ordered.add(s);\r\n            added.add(s.getId());\r\n        } else {\r\n            haveChildren = true;\r\n        }\r\n    }\r\n    boolean addedSites = true;\r\n    int depth = 0;\r\n    while (depth < 20 && addedSites && haveChildren) {\r\n        depth++;\r\n        addedSites = false;\r\n        haveChildren = false;\r\n        for (int i = mySites.size() - 1; i >= 0; i--) {\r\n            Site s = mySites.get(i);\r\n            if (added.contains(s.getId()))\r\n                continue;\r\n            ResourceProperties rp = s.getProperties();\r\n            String ourParent = rp.getProperty(SiteService.PROP_PARENT_ID);\r\n            if (ourParent == null)\r\n                continue;\r\n            haveChildren = true;\r\n            log.debug(\"Child Site:{} parent={}\", s.getTitle(), ourParent);\r\n            boolean found = false;\r\n            int j = -1;\r\n            for (j = ordered.size() - 1; j >= 0; j--) {\r\n                Site ps = ordered.get(j);\r\n                if (ourParent.equals(ps.getId())) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n                rp = ps.getProperties();\r\n                String peerParent = rp.getProperty(SiteService.PROP_PARENT_ID);\r\n                if (ourParent.equals(peerParent)) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            j = j + 1;\r\n            if (found && j >= 0 && j < ordered.size()) {\r\n                log.debug(\"Added after parent\");\r\n                ordered.insertElementAt(s, j);\r\n                added.add(s.getId());\r\n                addedSites = true;\r\n            }\r\n        }\r\n    }\r\n    if (haveChildren)\r\n        for (int i = 0; i < mySites.size(); i++) {\r\n            Site s = mySites.get(i);\r\n            if (added.contains(s.getId()))\r\n                continue;\r\n            log.debug(\"Orphan Site:{} {}\", s.getId(), s.getTitle());\r\n            ordered.add(s);\r\n        }\r\n    mySites = ordered;\r\n    return mySites;\r\n}"
}, {
	"Path": "org.sakaiproject.site.util.SiteGroupHelper.pack",
	"Comment": "this packs ids into a string. it supports empty ids but not null.",
	"Method": "String pack(Collection<String> ids){\r\n    String packed = null;\r\n    if (ids != null) {\r\n        StringBuilder builder = new StringBuilder();\r\n        String separator = \"\";\r\n        for (String id : ids) {\r\n            builder.append(separator);\r\n            separator = SEPARATOR_STR;\r\n            builder.append(id.replace(ESCAPE_STR, ESCAPE_STR + ESCAPE_STR).replace(SEPARATOR_STR, ESCAPE_STR + SEPARATOR_STR));\r\n        }\r\n        packed = builder.toString();\r\n    }\r\n    return packed;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupEvent.isPassedDeadline",
	"Comment": "this method will check if the current time has already passed the signup\tdeadline",
	"Method": "boolean isPassedDeadline(){\r\n    Date today = new Date();\r\n    int value = today.compareTo(signupDeadline);\r\n    return value > 0;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.utils.NameHelper.localizeName",
	"Comment": "takes a globalised page name and a space name and localises that page\tname within that space.",
	"Method": "String localizeName(String pageName,String space){\r\n    String normalSpace = normalize(space, false);\r\n    String name = globaliseName(pageName, normalSpace);\r\n    int nameLength = name.length();\r\n    int spaceLength = normalSpace.length();\r\n    char[] chars = name.toCharArray();\r\n    int lastSeparator = findLastSeparator(chars, nameLength);\r\n    if (lastSeparator >= findThirdSeparator(chars, nameLength)) {\r\n        boolean capitalise = true;\r\n        for (int i = lastSeparator; i < nameLength; i++) {\r\n            if (chars[i] == SPACE_SEPARATOR || chars[i] == ' ') {\r\n                capitalise = true;\r\n            } else if (capitalise) {\r\n                chars[i] = Character.toUpperCase(chars[i]);\r\n                capitalise = false;\r\n            }\r\n        }\r\n    }\r\n    if (nameLength <= spaceLength + 1) {\r\n        return new String(chars);\r\n    }\r\n    char[] spaceChars = normalSpace.toCharArray();\r\n    for (int i = 0; i < spaceLength; i++) {\r\n        if (chars[i] != spaceChars[i]) {\r\n            return new String(chars);\r\n        }\r\n    }\r\n    if (chars[spaceLength] != SPACE_SEPARATOR) {\r\n        return new String(chars);\r\n    } else {\r\n        return new String(chars, spaceLength + 1, nameLength - spaceLength - 1);\r\n    }\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ViewBean.getEditUrl",
	"Comment": "returns a string representation of an url to edit the current page",
	"Method": "String getEditUrl(String getEditUrl,String name){\r\n    return getPageUrl(NameHelper.globaliseName(name, localSpace), WikiPageAction.EDIT_ACTION.getName());\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ReferencesBean.getReferencedPageLinks",
	"Comment": "get links to the pages referenced by the current rwikiobject.",
	"Method": "List getReferencedPageLinks(){\r\n    String referenced = rwikiObject.getReferenced();\r\n    String[] references = referenced.split(\"::\");\r\n    List referenceLinks = new ArrayList(references.length);\r\n    TreeMap<String, String> tmLinks = new TreeMap<String, String>();\r\n    ViewBean vb = new ViewBean(rwikiObject.getName(), defaultSpace);\r\n    vb.setLocalSpace(vb.getPageSpace());\r\n    for (int i = 0; i < references.length; i++) {\r\n        String pageName = references[i];\r\n        if (pageName != null && !\"\".equals(pageName)) {\r\n            vb.setPageName(pageName);\r\n            tmLinks.put(vb.getLocalName(), vb.getViewUrl());\r\n        }\r\n    }\r\n    Iterator<Entry<String, String>> tmiter = tmLinks.entrySet().iterator();\r\n    while (tmiter.hasNext()) {\r\n        Entry<String, String> entry = tmiter.next();\r\n        String objLocalName = entry.getKey();\r\n        String objViewUrl = entry.getValue();\r\n        String link = \"<a href=\\\"\" + XmlEscaper.xmlEscape(objViewUrl) + \"\\\">\" + XmlEscaper.xmlEscape(objLocalName) + \"<\/a>\";\r\n        referenceLinks.add(link);\r\n    }\r\n    return referenceLinks;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.components.ErrorLevelsFeedbackMessageFilter.accept",
	"Comment": "method accept, only accept feedbackmessages that are not in the list of error levels to filter.",
	"Method": "boolean accept(FeedbackMessage message){\r\n    for (int errorLevel : filteredErrorLevels) {\r\n        if (message.getLevel() == errorLevel) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.EditSectionBean.getRowStyleClasses",
	"Comment": "gets the css to use in the table generated for display.needed for sharing iu\tcode with addsections.",
	"Method": "String getRowStyleClasses(){\r\n    return \"sectionPadRow\";\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.InformationSchemaViews.getQuery",
	"Comment": "gets the additional attributes sql for columns, from the additionalconfiguration.",
	"Method": "Query getQuery(InformationSchemaKey key){\r\n    requireNonNull(key, \"No SQL query key provided\");\r\n    return new Query(key.name(), informationSchemaQueries.get(key));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.ItemFacade.getCreatedBy",
	"Comment": "get createdby for itemfacade. this represents the agentid of the personwho created the record",
	"Method": "String getCreatedBy(){\r\n    try {\r\n        this.data = (ItemDataIfc) item.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getCreatedBy();\r\n}"
}, {
	"Path": "org.sakaiproject.portlets.PortletIFrame.convertReferenceUrl",
	"Comment": "if the url is a valid reference, convert it to a url, else return it unchanged.",
	"Method": "String convertReferenceUrl(String url){\r\n    Reference ref = EntityManager.newReference(url);\r\n    if (ref.isKnownType()) {\r\n        String refUrl = ref.getUrl();\r\n        if (refUrl != null) {\r\n            return refUrl;\r\n        }\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.getLastModifiedDate",
	"Comment": "get the date when assessmentbasefacade where last modified by",
	"Method": "Date getLastModifiedDate(){\r\n    try {\r\n        this.data = (AssessmentBaseIfc) assessment.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getLastModifiedDate();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.model.SignupMeeting.isPassedDeadline",
	"Comment": "this method will check if the current time has already passed the signup\tdeadline",
	"Method": "boolean isPassedDeadline(){\r\n    Date today = new Date();\r\n    int value = today.compareTo(signupDeadline);\r\n    return value > 0;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.attendee.AttendeeSignupMBean.init",
	"Comment": "this will initialize all the wrapper objects such as\tsignupmeetingwrapper, signuptimeslotwrapper etc.",
	"Method": "void init(SignupMeetingWrapper meetingWrapper){\r\n    setMeetingWrapper(meetingWrapper);\r\n    updateTimeSlotWrappers(meetingWrapper);\r\n    this.collapsedMeetingInfo = false;\r\n}"
}, {
	"Path": "schemacrawler.crawl.ResultsRetriever.retrieveResults",
	"Comment": "retrieves a list of columns from the results. there is no attemptto share table objects, since the tables cannot have children thatare resultcolumns. likewise, there is no attempt to share columndata types.",
	"Method": "ResultsColumns retrieveResults(){\r\n    final JavaSqlTypes javaSqlTypes = new JavaSqlTypes();\r\n    final MutableResultsColumns resultColumns = new MutableResultsColumns(\"\");\r\n    final MutableCatalog catalog = new MutableCatalog(\"results\");\r\n    final int columnCount = resultsMetaData.getColumnCount();\r\n    for (int i = 1; i <= columnCount; i++) {\r\n        final String catalogName = resultsMetaData.getCatalogName(i);\r\n        final String schemaName = resultsMetaData.getSchemaName(i);\r\n        String tableName = resultsMetaData.getTableName(i);\r\n        if (isBlank(tableName)) {\r\n            tableName = \"\";\r\n        }\r\n        final Schema schema = catalog.addSchema(catalogName, schemaName);\r\n        final MutableTable table = new MutableTable(schema, tableName);\r\n        catalog.addTable(table);\r\n        final String databaseSpecificTypeName = resultsMetaData.getColumnTypeName(i);\r\n        final int javaSqlType = resultsMetaData.getColumnType(i);\r\n        final String columnClassName = resultsMetaData.getColumnClassName(i);\r\n        final MutableColumnDataType columnDataType = new MutableColumnDataType(schema, databaseSpecificTypeName);\r\n        columnDataType.setJavaSqlType(javaSqlTypes.valueOf(javaSqlType));\r\n        columnDataType.setTypeMappedClass(columnClassName);\r\n        columnDataType.setPrecision(resultsMetaData.getPrecision(i));\r\n        final int scale = resultsMetaData.getScale(i);\r\n        columnDataType.setMaximumScale(scale);\r\n        columnDataType.setMinimumScale(scale);\r\n        final String columnName = resultsMetaData.getColumnName(i);\r\n        final MutableResultsColumn column = new MutableResultsColumn(table, columnName);\r\n        column.setOrdinalPosition(i);\r\n        column.setColumnDataType(columnDataType);\r\n        column.setLabel(resultsMetaData.getColumnLabel(i));\r\n        column.setDisplaySize(resultsMetaData.getColumnDisplaySize(i));\r\n        final boolean isNullable = resultsMetaData.isNullable(i) == ResultSetMetaData.columnNullable;\r\n        column.setAutoIncrement(resultsMetaData.isAutoIncrement(i));\r\n        column.setCaseSensitive(resultsMetaData.isCaseSensitive(i));\r\n        column.setCurrency(resultsMetaData.isCurrency(i));\r\n        column.setDefinitelyWritable(resultsMetaData.isDefinitelyWritable(i));\r\n        column.setNullable(isNullable);\r\n        column.setReadOnly(resultsMetaData.isReadOnly(i));\r\n        column.setSearchable(resultsMetaData.isSearchable(i));\r\n        column.setSigned(resultsMetaData.isSigned(i));\r\n        column.setWritable(resultsMetaData.isWritable(i));\r\n        resultColumns.addColumn(column);\r\n    }\r\n    return resultColumns;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.JoinableSiteSettings.updateSiteInfoFromParams",
	"Comment": "take the joinable site settings from the given parameterparser object and dump them into the siteinfo object",
	"Method": "boolean updateSiteInfoFromParams(ParameterParser params,SiteInfo siteInfo){\r\n    if (params == null || siteInfo == null) {\r\n        return false;\r\n    }\r\n    if (siteService.isGlobalJoinGroupEnabled() && params.getString(SITE_PROP_JOIN_SITE_GROUP_ID) != null) {\r\n        siteInfo.joinerGroup = params.getString(SITE_PROP_JOIN_SITE_GROUP_ID);\r\n    }\r\n    if (siteService.isGlobalJoinExcludedFromPublicListEnabled() && params.getString(SITE_PROP_JOIN_SITE_EXCLUDE_PUBLIC_LIST) != null) {\r\n        siteInfo.joinExcludePublic = Boolean.valueOf(params.getString(SITE_PROP_JOIN_SITE_EXCLUDE_PUBLIC_LIST));\r\n    }\r\n    if (siteService.isGlobalJoinLimitByAccountTypeEnabled() && params.getString(SITE_PROP_JOIN_SITE_LIMIT_BY_ACCOUNT_TYPE) != null) {\r\n        siteInfo.joinLimitByAccountType = Boolean.valueOf(params.getString(SITE_PROP_JOIN_SITE_LIMIT_BY_ACCOUNT_TYPE));\r\n    }\r\n    if (siteService.isGlobalJoinLimitByAccountTypeEnabled() && params.getString(SITE_PROP_JOIN_SITE_ACCOUNT_TYPES) != null) {\r\n        siteInfo.joinLimitedAccountTypes = params.getString(SITE_PROP_JOIN_SITE_ACCOUNT_TYPES);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.Activity.getUserActivityRestVersion",
	"Comment": "returns a list of events of a user between 2 dates. this one allows to pass strings, sothis can be called as a rest service",
	"Method": "String getUserActivityRestVersion(String sessionid,String eid,String startDateString,String endDateString){\r\n    Session session = establishSession(sessionid);\r\n    if (!securityService.isSuperUser()) {\r\n        log.warn(\"WS getUserActivityStringDates(): Permission denied. Restricted to super users.\");\r\n        throw new RuntimeException(\"WS getUserActivityStringDates(): Permission denied. Restricted to super users.\");\r\n    }\r\n    return eventQueryService.getUserActivityRestVersion(eid, startDateString, endDateString);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.SimpleCharStream.adjustBeginLineColumn",
	"Comment": "method to adjust line and column numbers for the start of a token.",
	"Method": "void adjustBeginLineColumn(int newLine,int newCol){\r\n    int start = tokenBegin;\r\n    int len;\r\n    if (bufpos >= tokenBegin) {\r\n        len = bufpos - tokenBegin + inBuf + 1;\r\n    } else {\r\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\r\n    }\r\n    int i = 0, j = 0, k = 0;\r\n    int nextColDiff = 0, columnDiff = 0;\r\n    while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {\r\n        bufline[j] = newLine;\r\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\r\n        bufcolumn[j] = newCol + columnDiff;\r\n        columnDiff = nextColDiff;\r\n        i++;\r\n    }\r\n    if (i < len) {\r\n        bufline[j] = newLine++;\r\n        bufcolumn[j] = newCol + columnDiff;\r\n        while (i++ < len) {\r\n            if (bufline[j = start % bufsize] != bufline[++start % bufsize])\r\n                bufline[j] = newLine++;\r\n            else\r\n                bufline[j] = newLine;\r\n        }\r\n    }\r\n    line = bufline[j];\r\n    column = bufcolumn[j];\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.loadAdditionalRoles",
	"Comment": "load the possible additional roles for this site.\tthis should really all be behind an api.",
	"Method": "Map<String, AdditionalRole> loadAdditionalRoles(){\r\n    Map<String, AdditionalRole> additionalRoles = new HashMap<String, AdditionalRole>();\r\n    for (String roleId : authzGroupService.getAdditionalRoles()) {\r\n        boolean allowedRoleId = ServerConfigurationService.getBoolean(\"sitemanage.grant\" + roleId, false);\r\n        if (!allowedRoleId) {\r\n            continue;\r\n        }\r\n        AdditionalRole role = new AdditionalRole();\r\n        role.id = roleId;\r\n        role.name = authzGroupService.getRoleName(role.id);\r\n        role.editable = true;\r\n        additionalRoles.put(role.id, role);\r\n    }\r\n    return additionalRoles;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.render.portlet.servlet.SakaiServletRequest.getAttribute",
	"Comment": "this causes the placement id to be retrievabl from the request",
	"Method": "Object getAttribute(String attributeName){\r\n    if (PortalService.PLACEMENT_ATTRIBUTE.equals(attributeName)) {\r\n        return state.getId();\r\n    } else {\r\n        return super.getAttribute(attributeName);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.scaleImage",
	"Comment": "scale an image so it is fit within a give width and height, whilst maintaining its original proportions",
	"Method": "byte[] scaleImage(byte[] imageData,int maxSize,String mimeType,byte[] scaleImage,InputStream in,int maxSize,String mimeType){\r\n    byte[] scaledImageBytes = null;\r\n    try {\r\n        BufferedImage originalImage = ImageIO.read(in);\r\n        BufferedImage scaledImage = Scalr.resize(originalImage, maxSize);\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        ImageIO.write(scaledImage, getInformalFormatForMimeType(mimeType), baos);\r\n        baos.flush();\r\n        scaledImageBytes = baos.toByteArray();\r\n        baos.close();\r\n    } catch (Exception e) {\r\n        log.error(\"Scaling image failed.\", e);\r\n    }\r\n    return scaledImageBytes;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.RenderBean.renderPage",
	"Comment": "render the rwikiobject represented by the given name and realm",
	"Method": "String renderPage(String renderPage,String name,String defaultRealm){\r\n    String pageName = NameHelper.globaliseName(name, defaultRealm);\r\n    String pageRealm = NameHelper.localizeSpace(pageName, defaultRealm);\r\n    try {\r\n        RWikiObject page = objectService.getRWikiObject(pageName, pageRealm);\r\n        return toolRenderService.renderPage(page, defaultRealm);\r\n    } catch (PermissionException e) {\r\n        RWikiObject page = objectService.createNewRWikiCurrentObject();\r\n        page.setName(pageName);\r\n        ResourceLoaderBean rlb = ResourceLoaderHelperBean.getResourceLoaderBean();\r\n        page.setContent(rlb.getString(\"renderbean.permission_problem\", PERMISSION_PROBLEM));\r\n        return toolRenderService.renderPage(page, defaultRealm);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.userauditservice.util.UserAuditRegistrationUtil.deleteUserAuditingFromSite",
	"Comment": "method to delete all the user auditing log entries for a site.used when deleting a site",
	"Method": "void deleteUserAuditingFromSite(String siteId){\r\n    String sql = \"delete from user_audits_log where site_id = ?\";\r\n    Object[] fields = new Object[1];\r\n    fields[0] = siteId;\r\n    sqlService.dbWrite(sql, fields);\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.site.PortalSiteHelperImpl.collapseToVariable",
	"Comment": "collapse a string to only allow characters that can be in variables",
	"Method": "String collapseToVariable(String inp){\r\n    if (inp == null)\r\n        return null;\r\n    return inp.replaceAll(\"[^-_.a-zA-Z0-9]\", \"\");\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getAddUserHelper",
	"Comment": "finds the tool id to use for the adding participants to the site.\talso checks that the configured tool is a valid helper.",
	"Method": "String getAddUserHelper(Site site){\r\n    String helperId = site.getProperties().getProperty(\"sitemanage.add.user.tool\");\r\n    if (helperId == null) {\r\n        helperId = ServerConfigurationService.getString(\"sitemanage.add.user.tool\", \"sakai-site-manage-participant-helper\");\r\n    }\r\n    Tool tool = ToolManager.getTool(helperId);\r\n    if (tool == null || !tool.getCategories().contains(\"sakai.helper\")) {\r\n        helperId = \"sakai-site-manage-participant-helper\";\r\n    }\r\n    return helperId;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.sortCourseSets",
	"Comment": "helper method for sortcmobject \tby order from sakai properties if specified or \tby default of eid, title\tusing velocity sorttool",
	"Method": "Collection sortCourseSets(Collection<CourseSet> courses){\r\n    String[] keys = ServerConfigurationService.getStrings(SORT_KEY_COURSE_SET);\r\n    String[] orders = ServerConfigurationService.getStrings(SORT_ORDER_COURSE_SET);\r\n    return sortCmObject(courses, keys, orders);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupUIBaseBean.getAllAttendeesEmailAddressesFormatted",
	"Comment": "helper to get a formatted string of all attendee email addresses for all tineslots\tso we can use them in a mailto link",
	"Method": "String getAllAttendeesEmailAddressesFormatted(){\r\n    Set<String> emails = new HashSet<String>();\r\n    StringBuilder sb = new StringBuilder();\r\n    if (timeslotWrappers != null) {\r\n        for (TimeslotWrapper tsWrapper : timeslotWrappers) {\r\n            for (AttendeeWrapper atWrapper : tsWrapper.getAttendeeWrappers()) {\r\n                String email = atWrapper.getAttendeeEmail();\r\n                if (StringUtils.isNotBlank(email)) {\r\n                    emails.add(email);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (String e : emails) {\r\n        sb.append(e);\r\n        sb.append(';');\r\n    }\r\n    return StringUtils.removeEnd(sb.toString(), \";\");\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.GenericDiffBean.getColorDiffString",
	"Comment": "creates a string containing xhtml representing the differences between\tthe left and right revision contents. this method uses the\tcolordiffrevisionvisitor",
	"Method": "String getColorDiffString(){\r\n    ColorDiffRevisionVisitor rv = new ColorDiffRevisionVisitor();\r\n    difference.accept(rv);\r\n    return rv.getDiffString();\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UserPrefsTool.isPrivacyEnabled",
	"Comment": "pull whether privacy status should be enabled from sakai.properties",
	"Method": "boolean isPrivacyEnabled(){\r\n    if (getPrivacy_selection() == 0) {\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.MathJaxEnabler.addMathJaxSettingsToEditToolsConfirmationContext",
	"Comment": "add mathjax settings to the context for the edit tools confirmation page",
	"Method": "boolean addMathJaxSettingsToEditToolsConfirmationContext(Context context,Site site,SessionState state,String toolTitleListKey){\r\n    if (!ENABLED_AT_SYSTEM_LEVEL || site == null || context == null || state == null || !isMathJaxEnabledForSite(site, state)) {\r\n        return false;\r\n    }\r\n    boolean isMathJaxEnabledForSite = (Boolean) state.getAttribute(STATE_KEY_IS_MATHJAX_ENABLED_FOR_SITE);\r\n    if (isMathJaxEnabledForSite) {\r\n        context.put(CONTEXT_IS_MATHJAX_INSTALLED_KEY, Boolean.TRUE);\r\n        context.put(CONTEXT_DO_ENABLE_MATHJAX_KEY, Boolean.TRUE);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doUploadArchive",
	"Comment": "handles uploading an archive file as part of the site creation workflow",
	"Method": "void doUploadArchive(RunData data){\r\n    ParameterParser params = data.getParameters();\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    FileItem fi = data.getParameters().getFileItem(\"importFile\");\r\n    String archiveUnzipBase = ServerConfigurationService.getString(\"archive.storage.path\", FileUtils.getTempDirectoryPath());\r\n    String zipFilePath = archiveUnzipBase + File.separator + fi.getFileName();\r\n    if (!StringUtils.endsWith(fi.getFileName(), \".zip\")) {\r\n        addAlert(state, rb.getString(\"archive.createsite.failedupload\"));\r\n        return;\r\n    }\r\n    File tempZipFile = new File(zipFilePath);\r\n    if (tempZipFile.exists()) {\r\n        tempZipFile.delete();\r\n    }\r\n    FileOutputStream fileOutputStream = null;\r\n    try {\r\n        fileOutputStream = new FileOutputStream(tempZipFile);\r\n        IOUtils.copyLarge(fi.getInputStream(), fileOutputStream);\r\n        state.setAttribute(STATE_UPLOADED_ARCHIVE_PATH, tempZipFile.getAbsolutePath());\r\n        state.setAttribute(STATE_UPLOADED_ARCHIVE_NAME, tempZipFile.getName());\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        addAlert(state, rb.getString(\"archive.createsite.failedupload\"));\r\n    } finally {\r\n        IOUtils.closeQuietly(fileOutputStream);\r\n    }\r\n    state.setAttribute(STATE_TEMPLATE_INDEX, \"10\");\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileImageLogicImpl.getExternalProfileImageUrl",
	"Comment": "get the url to an image that a user has specified as their profile image",
	"Method": "String getExternalProfileImageUrl(String userUuid,int size){\r\n    ProfileImageExternal externalImage = dao.getExternalImageRecordForUser(userUuid);\r\n    String defaultImageUrl = getUnavailableImageURL();\r\n    if (externalImage == null) {\r\n        return defaultImageUrl;\r\n    }\r\n    String url = null;\r\n    if (size == ProfileConstants.PROFILE_IMAGE_MAIN) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Returning main image url for userId: \" + userUuid);\r\n        }\r\n        url = externalImage.getMainUrl();\r\n    }\r\n    if (size == ProfileConstants.PROFILE_IMAGE_THUMBNAIL) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Returning thumb image url for userId: \" + userUuid);\r\n        }\r\n        url = externalImage.getThumbnailUrl();\r\n    }\r\n    if (size == ProfileConstants.PROFILE_IMAGE_AVATAR) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Returning avatar image url for userId: \" + userUuid);\r\n        }\r\n        url = externalImage.getAvatarUrl();\r\n    }\r\n    if (StringUtils.isNotBlank(url)) {\r\n        return url;\r\n    } else {\r\n        url = externalImage.getMainUrl();\r\n        if (StringUtils.isBlank(url)) {\r\n            url = defaultImageUrl;\r\n        }\r\n    }\r\n    log.info(\"ProfileLogic.getExternalProfileImageUrl. No URL for userId: \" + userUuid + \", imageType: \" + size + \". Returning default.\");\r\n    return defaultImageUrl;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.velocity.LibraryWebappLoader.getResourceStream",
	"Comment": "get an inputstream so that the runtime can build a template with it.",
	"Method": "InputStream getResourceStream(String name){\r\n    InputStream result = null;\r\n    if (name == null || name.length() == 0) {\r\n        throw new ResourceNotFoundException(\"WebappLoader : No template name provided\");\r\n    }\r\n    while (!name.startsWith(\"/\")) {\r\n        name = \"/\" + name;\r\n    }\r\n    String adjustedName = adjustName(name);\r\n    Exception exception = null;\r\n    try {\r\n        result = getLibraryWebappResourceManager().getResourceAsStream(adjustedName);\r\n        if (result != null) {\r\n            templatePaths.put(name, new Date());\r\n        }\r\n    } catch (Exception e) {\r\n        if (exception == null) {\r\n            exception = e;\r\n        }\r\n    }\r\n    if (result == null) {\r\n        String msg;\r\n        if (exception == null) {\r\n            msg = \"WebappLoader : Resource '\" + name + \"' not found.\";\r\n        } else {\r\n            msg = exception.getMessage();\r\n        }\r\n        throw new ResourceNotFoundException(msg);\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "schemacrawler.crawl.MetadataResultSet.getLong",
	"Comment": "reads the value of a column from the result set as a long. if thevalue was null, returns the default.",
	"Method": "long getLong(String columnName,long defaultValue){\r\n    long value = defaultValue;\r\n    if (useColumn(columnName)) {\r\n        try {\r\n            value = results.getLong(columnName);\r\n            if (results.wasNull()) {\r\n                LOGGER.log(Level.FINER, new StringFormat(\"NULL long value for column <%s>, so using default %d\", columnName, defaultValue));\r\n                value = defaultValue;\r\n            }\r\n        } catch (final SQLException e) {\r\n            LOGGER.log(Level.WARNING, new StringFormat(\"Could not read long value for column <%s>\", columnName), e);\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.MultipleEmailLdapAttributeMapper.setSearchableEmailAttributes",
	"Comment": "assign the list of logical attribute names to search when\tlocating a user entry by email address. if null,\twill have the effect of clearing the current attribute list.\tnote that this configuration option has no bearing on the\temail address which will be mapped to useredit.email",
	"Method": "void setSearchableEmailAttributes(List<String> searchableEmailAttributes){\r\n    if (searchableEmailAttributes == null) {\r\n        this.searchableEmailAttributes.clear();\r\n    } else {\r\n        this.searchableEmailAttributes = searchableEmailAttributes;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.grading.GradingServiceImpl.getItemScores",
	"Comment": "get the score information for each item from the assessment score.",
	"Method": "Map getItemScores(Long publishedId,Long itemId,String which){\r\n    try {\r\n        GradingService service = new GradingService();\r\n        return service.getItemScores(publishedId, itemId, which);\r\n    } catch (Exception ex) {\r\n        throw new GradingServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupEmailFacadeImpl.collectAttachments",
	"Comment": "helper method to collect all attachments that need to go out for this email and to this user",
	"Method": "List<Attachment> collectAttachments(SignupEmailNotification email,User user){\r\n    List<Attachment> attachments = new ArrayList<Attachment>();\r\n    attachments.addAll(generateICS(email, user));\r\n    return attachments;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.ContentsDeliveryBean.getPointsDisplayString",
	"Comment": "if we display the current score, return it, otherwise an empty string.not currently used, provided if we need it later.",
	"Method": "String getPointsDisplayString(){\r\n    String pointsDisplayString = \"\";\r\n    if (showStudentScore) {\r\n        pointsDisplayString = \"\" + Precision.round(currentScore, 2);\r\n    }\r\n    return pointsDisplayString;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.attendee.EditCommentSignupMBean.editAttendeeComment",
	"Comment": "method that directs users to the edit comment page when clicked",
	"Method": "String editAttendeeComment(){\r\n    String attUserId = attendeeWrapper.getSignupAttendee().getAttendeeUserId();\r\n    String timeslotId = relatedTimeslotId;\r\n    if (attUserId == null || timeslotId == null)\r\n        return \"\";\r\n    this.init(attendeeWrapper, this.getAttendeeRole(attUserId), getMeetingWrapper(), timeslotId);\r\n    return EDIT_COMMENT_PAGE_URL;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.conversion.ProfileConverter.convertSakaiPersonImage",
	"Comment": "helper to convert an image stored in sakaiperson into a main image",
	"Method": "void convertSakaiPersonImage(){\r\n    String userUuid = ci.getUserUuid();\r\n    byte[] image = sakaiProxy.getSakaiPersonJpegPhoto(userUuid);\r\n    if (image == null || image.length == 0) {\r\n        log.info(\"Profile2 image converter: No image binary to convert for \" + userUuid + \". Skipping user...\");\r\n    } else {\r\n        byte[] imageMain = ProfileUtils.scaleImage(image, ProfileConstants.MAX_IMAGE_XY, DEFAULT_MIME_TYPE);\r\n        String mainResourceId = sakaiProxy.getProfileImageResourcePath(userUuid, ProfileConstants.PROFILE_IMAGE_MAIN);\r\n        log.info(\"Profile2 image converter: mainResourceId: \" + mainResourceId);\r\n        if (!sakaiProxy.saveFile(mainResourceId, userUuid, DEFAULT_FILE_NAME, DEFAULT_MIME_TYPE, imageMain)) {\r\n            log.error(\"Profile2 image converter: Saving main profile image failed.\");\r\n        } else {\r\n            ci.setImage(imageMain);\r\n            ci.setMimeType(DEFAULT_MIME_TYPE);\r\n            ci.setFileName(DEFAULT_FILE_NAME);\r\n            ci.setMainResourceId(mainResourceId);\r\n            ci.setNeedsSaving(true);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.author.EventLogListener.processValueChange",
	"Comment": "process the valuechangeevent for when the assessment filter dropdown changes",
	"Method": "void processValueChange(ValueChangeEvent event){\r\n    log.debug(\"*****Log: inside EventLogListener =debugging ValueChangeEvent: \" + event);\r\n    EventLogBean eventLog = (EventLogBean) ContextUtil.lookupBean(\"eventLog\");\r\n    eventLog.setFilteredAssessmentId((Long) event.getNewValue());\r\n    processPageLoad(eventLog);\r\n}"
}, {
	"Path": "edu.amc.sakai.user.PooledLDAPConnection.finalize",
	"Comment": "protect against pooled connections leaking out of the pool",
	"Method": "void finalize(){\r\n    if (active) {\r\n        if (connectionManager != null) {\r\n            if (log.isWarnEnabled())\r\n                log.warn(\"went out-of-scope without being returned to the pool -- returning myself\");\r\n            connectionManager.returnConnection(this);\r\n        } else {\r\n            log.error(\"went out-of-scope without being returned to the pool -- unable to clean up since no connectionManager is set!\");\r\n            super.finalize();\r\n        }\r\n    } else {\r\n        super.finalize();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.getMetaDataQuestions_isInstructorEditable",
	"Comment": "convenient method to check if question metadata is editable",
	"Method": "String getMetaDataQuestions_isInstructorEditable(){\r\n    return (String) this.assessmentMetaDataMap.get(METADATAQUESTIONS_ISINSTRUCTOREDITABLE);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.ParseException.add_escapes",
	"Comment": "used to convert raw characters to their escaped versionwhen these raw version cannot be used as part of an asciistring literal.",
	"Method": "String add_escapes(String str){\r\n    StringBuffer retval = new StringBuffer();\r\n    char ch;\r\n    for (int i = 0; i < str.length(); i++) {\r\n        switch(str.charAt(i)) {\r\n            case 0:\r\n                continue;\r\n            case '\\b':\r\n                retval.append(\"\\\\b\");\r\n                continue;\r\n            case '\\t':\r\n                retval.append(\"\\\\t\");\r\n                continue;\r\n            case '\\n':\r\n                retval.append(\"\\\\n\");\r\n                continue;\r\n            case '\\f':\r\n                retval.append(\"\\\\f\");\r\n                continue;\r\n            case '\\r':\r\n                retval.append(\"\\\\r\");\r\n                continue;\r\n            case '\\\"':\r\n                retval.append(\"\\\\\\\"\");\r\n                continue;\r\n            case '\\'':\r\n                retval.append(\"\\\\\\'\");\r\n                continue;\r\n            case '\\\\':\r\n                retval.append(\"\\\\\\\\\");\r\n                continue;\r\n            default:\r\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                    String s = \"0000\" + Integer.toString(ch, 16);\r\n                    retval.append(\"\\\%u\" + s.substring(s.length() - 4, s.length()));\r\n                } else {\r\n                    retval.append(ch);\r\n                }\r\n                continue;\r\n        }\r\n    }\r\n    return retval.toString();\r\n}"
}, {
	"Path": "schemacrawler.utility.Query.isQueryOver",
	"Comment": "determines if this query has substitutable parameters, and whetherit should be run once for each table.",
	"Method": "boolean isQueryOver(){\r\n    final Set<String> keys = extractTemplateVariables(query);\r\n    return keys.contains(\"table\");\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.EntryAttributeToUserTypeMapper.setLogicalAttributeName",
	"Comment": "assign the key to a physical attribute name which will be used\tto resolve sakai user types.",
	"Method": "void setLogicalAttributeName(String logicalAttributeName){\r\n    this.logicalAttributeName = logicalAttributeName;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.impl.report.ReportDefEntityProducer.hasContent",
	"Comment": "this implementation simply checks if we have reports in the site. if so, consider it content.",
	"Method": "boolean hasContent(String siteId){\r\n    List<ReportDef> existingReportDefinitions = M_rm.getReportDefinitions(siteId, false, true);\r\n    return !existingReportDefinitions.isEmpty();\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.hellosceneform.HelloSceneformActivity.checkIsSupportedDeviceOrFinish",
	"Comment": "returns false and displays an error message if sceneform can not run, true if sceneform can runon this device.sceneform requires android n on the device as well as opengl 3.0 capabilities.finishes the activity if sceneform can not run",
	"Method": "boolean checkIsSupportedDeviceOrFinish(Activity activity){\r\n    if (Build.VERSION.SDK_INT < VERSION_CODES.N) {\r\n        Log.e(TAG, \"Sceneform requires Android N or later\");\r\n        Toast.makeText(activity, \"Sceneform requires Android N or later\", Toast.LENGTH_LONG).show();\r\n        activity.finish();\r\n        return false;\r\n    }\r\n    String openGlVersionString = ((ActivityManager) activity.getSystemService(Context.ACTIVITY_SERVICE)).getDeviceConfigurationInfo().getGlEsVersion();\r\n    if (Double.parseDouble(openGlVersionString) < MIN_OPENGL_VERSION) {\r\n        Log.e(TAG, \"Sceneform requires OpenGL ES 3.0 later\");\r\n        Toast.makeText(activity, \"Sceneform requires OpenGL ES 3.0 or later\", Toast.LENGTH_LONG).show();\r\n        activity.finish();\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.integration.helper.integrated.AgentHelperImpl.getUserRolesFromContextRealm",
	"Comment": "this gets the current site id and transforms it into the realm. from there it asks the authzgroupservice for the roles of the given users",
	"Method": "Map getUserRolesFromContextRealm(Collection inUsers){\r\n    String thisSiteId = null;\r\n    try {\r\n        thisSiteId = ToolManager.getCurrentPlacement().getContext();\r\n    } catch (Exception ex) {\r\n        log.warn(\"Failure to get site id from ToolManager.  \\n\" + \"Need to fix if not running in unit test.\");\r\n        log.warn(\"getUserRolesFromContextRealm : \" + ex.getMessage());\r\n    }\r\n    if (thisSiteId == null)\r\n        return new HashMap();\r\n    String realmName = \"/site/\" + thisSiteId;\r\n    return authzGroupService.getUsersRole(inUsers, realmName);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.EditMeetingSignupMBean.getAllCategories",
	"Comment": "this method is called to get all categories to populate the dropdown",
	"Method": "List<SelectItem> getAllCategories(){\r\n    if (categories == null) {\r\n        categories = new ArrayList<SelectItem>();\r\n        categories.addAll(Utilities.getSignupMeetingsBean().getAllCategories());\r\n        categories.remove(0);\r\n        categories.add(0, new SelectItem(Utilities.rb.getString(\"select_category\")));\r\n    }\r\n    return categories;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.EditSectionBean.getMeetings",
	"Comment": "this method is needed so we can share ui code with addsections.",
	"Method": "List getMeetings(){\r\n    return section.getMeetings();\r\n}"
}, {
	"Path": "org.sakaiproject.web.tool.IFrameAction.sourceUrl",
	"Comment": "compute the actual url we will used, based on the configuration special and source urls",
	"Method": "String sourceUrl(String special,String source,String context,boolean macroExpansion,boolean passPid,String pid,String sakaiPropertiesUrlKey){\r\n    String rv = StringUtils.trimToNull(source);\r\n    if (SPECIAL_SITE.equals(special)) {\r\n        rv = StringUtils.trimToNull(getLocalizedURL(\"server.info.url\"));\r\n    } else if (SPECIAL_WORKSPACE.equals(special)) {\r\n        rv = StringUtils.trimToNull(getLocalizedURL(\"myworkspace.info.url\"));\r\n    } else if (SPECIAL_WORKSITE.equals(special)) {\r\n        try {\r\n            Site s = SiteService.getSite(context);\r\n            rv = StringUtils.trimToNull(s.getInfoUrlFull());\r\n            if (rv == null) {\r\n                rv = ServerConfigurationService.getAccessUrl() + s.getReference();\r\n            }\r\n        } catch (Exception any) {\r\n        }\r\n    } else if (sakaiPropertiesUrlKey != null && sakaiPropertiesUrlKey.length() > 1) {\r\n        rv = StringUtils.trimToNull(ServerConfigurationService.getString(sakaiPropertiesUrlKey));\r\n    }\r\n    if (rv == null || rv.equals(\"http://\") || rv.equals(\"https://\")) {\r\n        rv = StringUtils.trimToNull(getLocalizedURL(\"webcontent.instructions.url\"));\r\n    }\r\n    if (rv != null) {\r\n        rv = convertReferenceUrl(rv);\r\n        if (passPid) {\r\n            if (rv.indexOf(\"?\") < 0) {\r\n                rv = rv + \"?\";\r\n            } else {\r\n                rv = rv + \"&\";\r\n            }\r\n            rv = rv + \"pid=\" + pid;\r\n        }\r\n        if (macroExpansion) {\r\n            rv = doMacroExpansion(rv);\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.QuestionPoolFacadeQueries.getAllPools",
	"Comment": "get a list of all the pools in the site. note that questions in each pool will notbe populated. we must keep this list updated.",
	"Method": "List getAllPools(QuestionPoolIteratorFacade getAllPools,String agentId){\r\n    List qpList = new ArrayList();\r\n    HibernateCallback<List<QuestionPoolData>> hcb = session -> session.createQuery(\"from QuestionPoolData a where a.ownerId = :id\").setString(\"id\", agentId).list();\r\n    List<QuestionPoolData> poolList = getHibernateTemplate().execute(hcb);\r\n    try {\r\n        Map<Long, Long> counts = getSubPoolSizes(agentId).stream().collect(Collectors.toMap(pool -> pool[0], pool -> pool[1]));\r\n        for (QuestionPoolData qpp : poolList) {\r\n            Long subPoolSize = counts.get(qpp.getQuestionPoolId());\r\n            qpp.setSubPoolSize(subPoolSize == null ? 0L : subPoolSize);\r\n            qpList.add(getQuestionPool(qpp));\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(e.getMessage());\r\n    }\r\n    return new QuestionPoolIteratorFacade(qpList);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.JsfUtil.addInfoMessage",
	"Comment": "adds an info message for display on a page when the page is guaranteednot to be displayed via a redirect.",
	"Method": "void addInfoMessage(String message){\r\n    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, message, null));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.TotalScoreListener.totalScores",
	"Comment": "this will populate the totalscoresbean with the data associated with theparticular versioned assessment based on the publishedid.",
	"Method": "boolean totalScores(PublishedAssessmentFacade pubAssessment,TotalScoresBean bean,boolean isValueChange){\r\n    log.debug(\"TotalScoreListener: totalScores() starts\");\r\n    if (ContextUtil.lookupParam(\"sortBy\") != null && !ContextUtil.lookupParam(\"sortBy\").trim().equals(\"\")) {\r\n        bean.setSortType(ContextUtil.lookupParam(\"sortBy\"));\r\n        log.debug(\"TotalScoreListener: totalScores() :: sortBy = \" + ContextUtil.lookupParam(\"sortBy\"));\r\n    }\r\n    boolean sortAscending = true;\r\n    if (ContextUtil.lookupParam(\"sortAscending\") != null && !ContextUtil.lookupParam(\"sortAscending\").trim().equals(\"\")) {\r\n        sortAscending = Boolean.valueOf(ContextUtil.lookupParam(\"sortAscending\")).booleanValue();\r\n        bean.setSortAscending(sortAscending);\r\n        log.debug(\"TotalScoreListener: totalScores() :: sortAscending = \" + sortAscending);\r\n    }\r\n    log.debug(\"totalScores()\");\r\n    try {\r\n        boolean firstTime = true;\r\n        PublishedAssessmentData p = (PublishedAssessmentData) pubAssessment.getData();\r\n        if (bean.getPublishedId() != null && bean.getPublishedId().equals(p.getPublishedAssessmentId().toString())) {\r\n            firstTime = false;\r\n        }\r\n        if (!isValueChange) {\r\n            bean.setPublishedAssessment(p);\r\n        }\r\n        PublishedAccessControl ac = (PublishedAccessControl) p.getAssessmentAccessControl();\r\n        if (ac.getTimeLimit() != null && ac.getTimeLimit().equals(Integer.valueOf(0))) {\r\n            bean.setIsTimedAssessment(false);\r\n        } else {\r\n            bean.setIsTimedAssessment(true);\r\n        }\r\n        if (ac.getLateHandling() != null && ac.getLateHandling().equals(AssessmentAccessControlIfc.ACCEPT_LATE_SUBMISSION)) {\r\n            bean.setAcceptLateSubmission(true);\r\n        } else {\r\n            bean.setAcceptLateSubmission(false);\r\n        }\r\n        List scores = new ArrayList();\r\n        List students_not_submitted = new ArrayList();\r\n        Map useridMap = bean.getUserIdMap(TotalScoresBean.CALLED_FROM_TOTAL_SCORE_LISTENER);\r\n        List agents = new ArrayList();\r\n        prepareAgentResultList(bean, p, scores, students_not_submitted, useridMap);\r\n        if ((scores.size() == 0) && (students_not_submitted.size() == 0)) {\r\n            bean.setAgents(agents);\r\n            bean.setAllAgents(agents);\r\n            return true;\r\n        }\r\n        if (firstTime) {\r\n            Set sectionSet = PersistenceService.getInstance().getPublishedAssessmentFacadeQueries().getSectionSetForAssessment(p);\r\n            p.setSectionSet(sectionSet);\r\n            Iterator sectionIter = sectionSet.iterator();\r\n            boolean isAutoScored = true;\r\n            boolean hasFileUpload = false;\r\n            while (sectionIter.hasNext()) {\r\n                if (!isAutoScored) {\r\n                    break;\r\n                }\r\n                if (hasFileUpload) {\r\n                    break;\r\n                }\r\n                PublishedSectionData section = (PublishedSectionData) sectionIter.next();\r\n                Set itemSet = section.getItemSet();\r\n                Iterator itemIter = itemSet.iterator();\r\n                while (itemIter.hasNext()) {\r\n                    PublishedItemData item = (PublishedItemData) itemIter.next();\r\n                    Long typeId = item.getTypeId();\r\n                    if (typeId.equals(TypeIfc.ESSAY_QUESTION) || typeId.equals(TypeIfc.AUDIO_RECORDING)) {\r\n                        bean.setIsAutoScored(false);\r\n                        isAutoScored = false;\r\n                        break;\r\n                    }\r\n                    if (typeId.equals(TypeIfc.FILE_UPLOAD)) {\r\n                        bean.setIsAutoScored(false);\r\n                        isAutoScored = false;\r\n                        bean.setHasFileUpload(true);\r\n                        hasFileUpload = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (isAutoScored) {\r\n                bean.setIsAutoScored(true);\r\n            }\r\n            if (!hasFileUpload) {\r\n                bean.setHasFileUpload(false);\r\n            }\r\n            bean.setFirstItem(getFirstItem(p));\r\n            log.debug(\"totallistener: firstItem = \" + bean.getFirstItem());\r\n            bean.setHasRandomDrawPart(hasRandomPart(p));\r\n        }\r\n        if (firstTime || (isValueChange)) {\r\n            bean.setAnsweredItems(getAnsweredItems(scores, p));\r\n        }\r\n        log.debug(\"**firstTime=\" + firstTime);\r\n        log.debug(\"**isValueChange=\" + isValueChange);\r\n        List agentUserIds = getAgentIds(useridMap);\r\n        AgentHelper helper = IntegrationContextFactory.getInstance().getAgentHelper();\r\n        Map userRoles = helper.getUserRolesFromContextRealm(agentUserIds);\r\n        prepareAgentResult(p, scores.iterator(), agents, userRoles);\r\n        prepareNotSubmittedAgentResult(students_not_submitted.iterator(), agents, userRoles);\r\n        bean.setAgents(agents);\r\n        bean.setAllAgents(agents);\r\n        bean.setTotalPeople(Integer.toString(bean.getAgents().size()));\r\n        setRoleAndSortSelection(bean, agents, sortAscending);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.goBack",
	"Comment": "this is a jsf action call method by ui to let user navigate one page\tback.",
	"Method": "String goBack(){\r\n    if (currentStepHiddenInfo == null) {\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"publish.withAttendee.exception\"));\r\n        timeSlotWrappers = null;\r\n        assignParicitpantsToAllRecurEvents = false;\r\n        setEndTimeAutoAdjusted(false);\r\n        return ADD_MEETING_STEP1_PAGE_URL;\r\n    }\r\n    String step = (String) currentStepHiddenInfo.getValue();\r\n    if (step.equals(\"step2\")) {\r\n        return ADD_MEETING_STEP1_PAGE_URL;\r\n    }\r\n    if (step.equals(\"assignAttendee\")) {\r\n        timeSlotWrappers = null;\r\n        assignParicitpantsToAllRecurEvents = false;\r\n        setEndTimeAutoAdjusted(false);\r\n        sendEmailToSelectedPeopleOnly = DEFAULT_SEND_EMAIL_TO_SELECTED_PEOPLE_ONLY;\r\n        return ADD_MEETING_STEP2_PAGE_URL;\r\n    }\r\n    return ADD_MEETING_STEP1_PAGE_URL;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.components.SakaiPagingNavigator.newNavigation",
	"Comment": "create a new pagingnavigation. may be subclassed to make us of specialized pagingnavigation.",
	"Method": "PagingNavigation newNavigation(String id,IPageable pageable,IPagingLabelProvider labelProvider){\r\n    return new PagingNavigation(\"navigation\", pageable, labelProvider) {\r\n        @Override\r\n        public boolean isVisible() {\r\n            return false;\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.components.SakaiPagingNavigator.newNavigation",
	"Comment": "create a new pagingnavigation. may be subclassed to make us of specialized pagingnavigation.",
	"Method": "PagingNavigation newNavigation(String id,IPageable pageable,IPagingLabelProvider labelProvider){\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.SearchBeanImpl.getTimeTaken",
	"Comment": "the time taken to perform the search only, not including rendering",
	"Method": "String getTimeTaken(){\r\n    int tt = (int) timeTaken;\r\n    return String.valueOf(tt);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.author.CalculatedQuestionExtractListener.createFormulasFromInstructions",
	"Comment": "createformulasfrominstructions adds any formulas that exist in the list of formulanamesbut do not already exist in the question",
	"Method": "List<String> createFormulasFromInstructions(ItemBean item,List<String> formulaNames){\r\n    List<String> errors = new ArrayList<String>();\r\n    Map<String, CalculatedQuestionFormulaBean> formulas = item.getCalculatedQuestion().getFormulas();\r\n    Map<String, CalculatedQuestionVariableBean> variables = item.getCalculatedQuestion().getVariables();\r\n    Long maxSequenceValue = getMaxSequenceValue(variables, formulas);\r\n    for (String formulaName : formulaNames) {\r\n        if (!formulas.containsKey(formulaName)) {\r\n            CalculatedQuestionFormulaBean bean = new CalculatedQuestionFormulaBean();\r\n            bean.setName(formulaName);\r\n            bean.setSequence(++maxSequenceValue);\r\n            item.getCalculatedQuestion().addFormula(bean);\r\n        } else {\r\n            CalculatedQuestionFormulaBean bean = formulas.get(formulaName);\r\n            bean.setActive(true);\r\n        }\r\n    }\r\n    if (item.getCalculatedQuestion().getActiveFormulas().size() == 0) {\r\n        errors.add(getErrorMessage(\"no_formulas_defined\"));\r\n    }\r\n    return errors;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.SectionFacade.setCreatedBy",
	"Comment": "set createdby for sectionfacade. this represents the agentid of the personwho created the record",
	"Method": "void setCreatedBy(String createdBy){\r\n    this.createdBy = createdBy;\r\n    this.data.setCreatedBy(createdBy);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateMeetings.processSaveMeetings",
	"Comment": "it will save the signupmeeting list into db and send email to notify\tparticipants",
	"Method": "void processSaveMeetings(){\r\n    Calendar calendar = Calendar.getInstance();\r\n    int numOfRecurs = 0;\r\n    if (!ONCE_ONLY.equals(signupMeeting.getRepeatType())) {\r\n        numOfRecurs = signupMeeting.getRepeatNum();\r\n    }\r\n    calendar.setLenient(true);\r\n    calendar.setTime(signupMeeting.getStartTime());\r\n    if (DAILY.equals(signupMeeting.getRepeatType())) {\r\n        createRecurMeetings(calendar, numOfRecurs, perDay);\r\n    } else if (WEEKDAYS.equals(signupMeeting.getRepeatType())) {\r\n        createRecurMeetings(calendar, numOfRecurs, perDay);\r\n        removeWeekendDays();\r\n    } else if (WEEKLY.equals(signupMeeting.getRepeatType())) {\r\n        createRecurMeetings(calendar, numOfRecurs, perWeek);\r\n    } else if (BIWEEKLY.equals(signupMeeting.getRepeatType())) {\r\n        createRecurMeetings(calendar, numOfRecurs, perBiweek);\r\n    } else\r\n        createRecurMeetings(calendar, numOfRecurs, onceOnly);\r\n    postMeetings(signupMeetings);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentGradingFacadeQueries.saveMediaToContent",
	"Comment": "create or update a contentresource for the media payload of this mediadata.",
	"Method": "String saveMediaToContent(MediaData mediaData){\r\n    String mediaPath = getMediaPath(mediaData);\r\n    if (mediaData.getMedia() != null && ensureMediaPath(mediaPath)) {\r\n        log.debug(\"=====> Saving media: \" + mediaPath);\r\n        SecurityAdvisor resourceAdvisor = pushAdvisor();\r\n        boolean newResource = true;\r\n        try {\r\n            contentHostingService.checkResource(mediaPath);\r\n            newResource = false;\r\n        } catch (PermissionException | IdUnusedException | TypeException e) {\r\n        }\r\n        try {\r\n            ContentResource chsMedia;\r\n            if (newResource) {\r\n                ContentResourceEdit edit = contentHostingService.addResource(mediaPath);\r\n                edit.setContentType(mediaData.getMimeType());\r\n                edit.setContent(mediaData.getMedia());\r\n                ResourcePropertiesEdit props = edit.getPropertiesEdit();\r\n                props.addProperty(ResourceProperties.PROP_DISPLAY_NAME, mediaData.getFilename());\r\n                contentHostingService.commitResource(edit);\r\n                chsMedia = contentHostingService.getResource(mediaPath);\r\n            } else {\r\n                chsMedia = contentHostingService.updateResource(mediaPath, mediaData.getMimeType(), mediaData.getMedia());\r\n            }\r\n            mediaData.setDbMedia(null);\r\n            mediaData.setContentResource(chsMedia);\r\n            return mediaPath;\r\n        } catch (PermissionException | IdUsedException | IdInvalidException | InconsistentException | ServerOverloadException | OverQuotaException | VirusFoundException | IdUnusedException | TypeException | InUseException e) {\r\n            log.warn(\"Exception while saving media to content: \" + e.toString());\r\n        } finally {\r\n            popAdvisor(resourceAdvisor);\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaInfoLevelBuilder.minimum",
	"Comment": "creates a new schemainfolevel for minimum schema information.",
	"Method": "SchemaInfoLevelBuilder minimum(){\r\n    final SchemaInfoLevelBuilder minimum = new SchemaInfoLevelBuilder();\r\n    minimum.setRetrieveDatabaseInfo(true);\r\n    minimum.setRetrieveTables(true);\r\n    minimum.setRetrieveRoutines(true);\r\n    minimum.setTag(\"minimum\");\r\n    return minimum;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.OrganizerSignupMBean.updateTimeSlotWrappers",
	"Comment": "this one overwrites the parent one due to two more stuffs to create",
	"Method": "void updateTimeSlotWrappers(SignupMeetingWrapper meetingWrapper){\r\n    super.updateTimeSlotWrappers(meetingWrapper);\r\n    createUISwapListForEachTimeSlot(getTimeslotWrappers());\r\n    createMoveAvailabelTimeSlots(getTimeslotWrappers());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemBean.getRequireAllOk",
	"Comment": "this question require all answers right to have the full score?",
	"Method": "String getRequireAllOk(){\r\n    return requireAllOk;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.changeLog",
	"Comment": "return the list of nodes between the the given two revisions.",
	"Method": "Node[] changeLog(Node[] changeLog,Version latest,Node[] changeLog,Version latest,Version earliest){\r\n    Node last = findNode(latest);\r\n    if (last == null) {\r\n        throw new NodeNotFoundException(latest.toString());\r\n    }\r\n    Node first = findNode(earliest);\r\n    if (first == null) {\r\n        throw new NodeNotFoundException(earliest.toString());\r\n    }\r\n    List result = new LinkedList();\r\n    Node node = last;\r\n    while (node != null) {\r\n        result.add(0, node);\r\n        if (node == first) {\r\n            break;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    if (node == null) {\r\n        throw new NodeNotFoundException(earliest.toString());\r\n    }\r\n    return (Node[]) result.toArray(new Node[result.size()]);\r\n}"
}, {
	"Path": "edu.amc.sakai.user.JLDAPDirectoryProvider.setEidValidator",
	"Comment": "assign the service used to verify eids prior to executing\tsearches on those values. this field defaults to null\tindicating that all eids are searchable.",
	"Method": "void setEidValidator(EidValidator eidValidator){\r\n    this.eidValidator = eidValidator;\r\n}"
}, {
	"Path": "schemacrawler.utility.JavaSqlTypes.getFromJavaSqlTypeName",
	"Comment": "lookup java.sql.types type, and return more detailed information,including the mapped java class.",
	"Method": "JavaSqlType getFromJavaSqlTypeName(String typeName){\r\n    JavaSqlType sqlDataType = JavaSqlType.UNKNOWN;\r\n    if (isBlank(typeName)) {\r\n        return sqlDataType;\r\n    }\r\n    for (final JavaSqlType javaSqlType : javaSqlTypeMap.values()) {\r\n        if (typeName.equals(javaSqlType.getName())) {\r\n            sqlDataType = javaSqlType;\r\n            break;\r\n        }\r\n    }\r\n    return sqlDataType;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Revision.toString",
	"Comment": "converts this revision into its unix diff style string representation.",
	"Method": "void toString(StringBuffer s){\r\n    Iterator i = deltas_.iterator();\r\n    while (i.hasNext()) {\r\n        ((Delta) i.next()).toString(s);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.kerberos.user.KerberosUserDirectoryProvider.getUser",
	"Comment": "access a user object. update the object with the information found.",
	"Method": "boolean getUser(UserEdit edit){\r\n    if (m_requirelocalaccount)\r\n        return false;\r\n    if (!userKnownToKerberos(edit.getEid()))\r\n        return false;\r\n    edit.setEmail(edit.getEid() + \"@\" + m_domain);\r\n    edit.setType(\"kerberos\");\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.CopyMeetingSignupMBean.getRepeatTypeUnknown",
	"Comment": "this is a getter for ui and it is used for controlling the \trecurring meeting warning message.",
	"Method": "boolean getRepeatTypeUnknown(){\r\n    return repeatTypeUnknown;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.LinkAction.buildMainPanelContext",
	"Comment": "setup the velocity context and choose the template for the response.",
	"Method": "String buildMainPanelContext(VelocityPortlet portlet,Context context,RunData rundata,SessionState state){\r\n    context.put(\"tlang\", rb);\r\n    context.put(\"doSave\", BUTTON + \"doSave\");\r\n    context.put(\"doCancel\", BUTTON + \"doCancel\");\r\n    context.put(\"doRemove\", BUTTON + \"doRemove\");\r\n    try {\r\n        Site site;\r\n        String siteId = getSiteId(state);\r\n        site = SiteService.getSite(siteId);\r\n        String parentId = site.getProperties().getProperty(\"sakai:parent-id\");\r\n        context.put(\"currentSite\", site);\r\n        if (parentId != null) {\r\n            try {\r\n                Site parentSite = SiteService.getSite(parentId);\r\n                context.put(\"parentId\", parentId);\r\n                context.put(\"parentTitle\", parentSite.getTitle());\r\n                return \"sakai_link\";\r\n            } catch (Exception e) {\r\n                addAlert(state, rb.getFormattedMessage(\"alert.parent.removed\", new Object[] { parentId }));\r\n                ResourcePropertiesEdit rpe = site.getPropertiesEdit();\r\n                rpe.removeProperty(\"sakai:parent-id\");\r\n                SiteService.save(site);\r\n            }\r\n        }\r\n        List<Site> sites = SiteService.getSites(org.sakaiproject.site.api.SiteService.SelectionType.UPDATE, null, null, null, SortType.TITLE_ASC, null);\r\n        List<Site> goodSites = new ArrayList<Site>();\r\n        for (Iterator i = sites.iterator(); i.hasNext(); ) {\r\n            Site thisSite = (Site) i.next();\r\n            String pid = thisSite.getProperties().getProperty(\"sakai:parent-id\");\r\n            if (siteId.equals(pid))\r\n                continue;\r\n            if (siteId.equals(thisSite.getId()))\r\n                continue;\r\n            goodSites.add(thisSite);\r\n        }\r\n        if (goodSites.size() > 0)\r\n            context.put(\"sites\", goodSites);\r\n    } catch (Exception e) {\r\n        addAlert(state, rb.getString(\"error.cannot.access\"));\r\n    }\r\n    return \"sakai_link\";\r\n}"
}, {
	"Path": "org.sakaiproject.accountvalidator.tool.producers.BaseValidationProducer.getPasswordResetUrl",
	"Comment": "gets the password reset url. if looks for a configured url, otherwise it looks\tfor the password reset tool in the gateway site and builds a link to that.",
	"Method": "String getPasswordResetUrl(){\r\n    String passwordResetUrl = serverConfigurationService.getString(\"login.password.reset.url\", null);\r\n    if (passwordResetUrl == null) {\r\n        String gatewaySiteId = serverConfigurationService.getGatewaySiteId();\r\n        Site gatewaySite = null;\r\n        try {\r\n            gatewaySite = siteService.getSite(gatewaySiteId);\r\n            ToolConfiguration resetTC = gatewaySite.getToolForCommonId(\"sakai.resetpass\");\r\n            if (resetTC != null) {\r\n                passwordResetUrl = resetTC.getContainingPage().getUrl();\r\n            }\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"No \" + gatewaySiteId + \" site found whilst building password reset url, set password.reset.url\" + \" or create \" + gatewaySiteId + \" and add password reset tool.\");\r\n        }\r\n    }\r\n    return passwordResetUrl;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.participant.impl.SiteAddParticipantHandler.processCancel",
	"Comment": "allows the cancel button to return control to the tool calling this helper",
	"Method": "String processCancel(){\r\n    ToolSession session = sessionManager.getCurrentToolSession();\r\n    session.setAttribute(ATTR_TOP_REFRESH, Boolean.TRUE);\r\n    setNextPage(SiteConstants.SITE_INFO_TEMPLATE_INDEX);\r\n    resetTargettedMessageList();\r\n    reset();\r\n    return \"done\";\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.InclusionRuleWithRegularExpression.getExclusionPattern",
	"Comment": "returns the regular expression for the exclusion rule. not allinclusion rules are based on regular expressions, so this methodindicates that no strings should be considered for exclusion bydefault.",
	"Method": "Pattern getExclusionPattern(){\r\n    return Pattern.compile(\"\");\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.RandomisedUrlService.isKeyUnique",
	"Comment": "checks if a given key is unique by checking for its existence",
	"Method": "boolean isKeyUnique(String key){\r\n    RandomisedUrl randomisedUrl = null;\r\n    HibernateCallback<RandomisedUrl> hcb = session -> {\r\n        Query q = session.getNamedQuery(QUERY_GET_URL);\r\n        q.setParameter(KEY, key, StringType.INSTANCE);\r\n        q.setMaxResults(1);\r\n        return (RandomisedUrl) q.uniqueResult();\r\n    };\r\n    randomisedUrl = getHibernateTemplate().execute(hcb);\r\n    if (randomisedUrl == null) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.myers.MyersDiff.buildPath",
	"Comment": "computes the minimum diffpath that expresses de differences between the\toriginal and revised sequences, according to gene myers differencing\talgorithm.",
	"Method": "PathNode buildPath(Object[] orig,Object[] rev){\r\n    if (orig == null)\r\n        throw new IllegalArgumentException(\"original sequence is null\");\r\n    if (rev == null)\r\n        throw new IllegalArgumentException(\"revised sequence is null\");\r\n    final int N = orig.length;\r\n    final int M = rev.length;\r\n    final int MAX = N + M + 1;\r\n    final int size = 1 + 2 * MAX;\r\n    final int middle = (size + 1) / 2;\r\n    final PathNode[] diagonal = new PathNode[size];\r\n    PathNode path = null;\r\n    diagonal[middle + 1] = new Snake(0, -1, null);\r\n    for (int d = 0; d < MAX; d++) {\r\n        for (int k = -d; k <= d; k += 2) {\r\n            final int kmiddle = middle + k;\r\n            final int kplus = kmiddle + 1;\r\n            final int kminus = kmiddle - 1;\r\n            PathNode prev = null;\r\n            int i;\r\n            if ((k == -d) || (k != d && diagonal[kminus].i < diagonal[kplus].i)) {\r\n                i = diagonal[kplus].i;\r\n                prev = diagonal[kplus];\r\n            } else {\r\n                i = diagonal[kminus].i + 1;\r\n                prev = diagonal[kminus];\r\n            }\r\n            diagonal[kminus] = null;\r\n            int j = i - k;\r\n            PathNode node = new DiffNode(i, j, prev);\r\n            while (i < N && j < M && orig[i].equals(rev[j])) {\r\n                i++;\r\n                j++;\r\n            }\r\n            if (i > node.i)\r\n                node = new Snake(i, j, node);\r\n            diagonal[kmiddle] = node;\r\n            if (i >= N && j >= M) {\r\n                return diagonal[kmiddle];\r\n            }\r\n        }\r\n        diagonal[middle + d - 1] = null;\r\n    }\r\n    throw new DifferentiationFailedException(\"could not find a diff path\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.AddSectionsBean.addSections",
	"Comment": "adds the sections, or generates validation messages for bad inputs.",
	"Method": "String addSections(){\r\n    if (validationFails()) {\r\n        setNotValidated(true);\r\n        return \"failure\";\r\n    }\r\n    String courseUuid = getCourse().getUuid();\r\n    StringBuilder titles = new StringBuilder();\r\n    String sepChar = JsfUtil.getLocalizedMessage(\"section_separator\");\r\n    for (Iterator iter = sections.iterator(); iter.hasNext(); ) {\r\n        LocalSectionModel sectionModel = (LocalSectionModel) iter.next();\r\n        titles.append(sectionModel.getTitle());\r\n        if (iter.hasNext()) {\r\n            titles.append(sepChar);\r\n            titles.append(\" \");\r\n        }\r\n    }\r\n    getSectionManager().addSections(courseUuid, sections);\r\n    String[] params = new String[3];\r\n    params[0] = titles.toString();\r\n    if (sections.size() == 1) {\r\n        params[1] = JsfUtil.getLocalizedMessage(\"add_section_successful_singular\");\r\n        params[2] = JsfUtil.getLocalizedMessage(\"section_singular\");\r\n    } else {\r\n        params[1] = JsfUtil.getLocalizedMessage(\"add_section_successful_plural\");\r\n        params[2] = JsfUtil.getLocalizedMessage(\"section_plural\");\r\n    }\r\n    JsfUtil.addRedirectSafeInfoMessage(JsfUtil.getLocalizedMessage(\"add_section_successful\", params));\r\n    return \"overview\";\r\n}"
}, {
	"Path": "org.sakaiproject.portlets.PortletIFrame.checkDigits",
	"Comment": "check if the string from user input contains any characters other than digits",
	"Method": "boolean checkDigits(String height){\r\n    for (int i = 0; i < height.length(); i++) {\r\n        if (VALID_DIGITS.indexOf(height.charAt(i)) == -1)\r\n            return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.component.service.impl.RWikiObjectServiceImpl.getEntity",
	"Comment": "get the entity, already having looked up the entity handler",
	"Method": "Entity getEntity(Reference ref,Entity getEntity,Reference ref,EntityHandler eh,Entity getEntity,RWikiObject rwo){\r\n    return new RWikiEntityImpl(rwo);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroupsectionrole.impl.SiteManageGroupSectionRoleHandler.createRandomGroupsForRole",
	"Comment": "create random groups of users from the given role.this could be random number of users in specified number of groups,or vice versa.",
	"Method": "void createRandomGroupsForRole(String role,int unit){\r\n    String groupTitle = groupSplit ? groupTitleGroup : groupTitleUser;\r\n    if (StringUtils.isNotBlank(groupTitle) && StringUtils.isNotBlank(role)) {\r\n        List<String> usersList = new ArrayList();\r\n        String siteReference = siteService.siteReference(site.getId());\r\n        try {\r\n            AuthzGroup siteGroup = authzGroupService.getAuthzGroup(siteReference);\r\n            Set<String> usersWithRole = siteGroup.getUsersHasRole(role);\r\n            if (usersWithRole != null) {\r\n                for (String userID : usersWithRole) {\r\n                    usersList.add(userID);\r\n                }\r\n            }\r\n        } catch (GroupNotDefinedException ex) {\r\n            log.debug(this + \".processAutoCreateGroup: no authzgroup found for \" + siteReference, ex);\r\n        }\r\n        createRandomGroups(groupSplit, usersList, groupTitle, unit);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemConfigBean.setShowMultipleChoiceSingleCorrect",
	"Comment": "set whether multiple choice single correct should be shown.",
	"Method": "void setShowMultipleChoiceSingleCorrect(boolean showMultipleChoiceSingleCorrect){\r\n    this.showMultipleChoiceSingleCorrect = showMultipleChoiceSingleCorrect;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.BeginDeliveryActionListener.populateBeanFromPub",
	"Comment": "this takes the published assessment information and puts it in the deliverybean.this is primarily the information that needs to be set up for thebegin assessment page.additional properties will be set when the studentelects to begin taking assessment.",
	"Method": "void populateBeanFromPub(DeliveryBean delivery,PublishedAssessmentFacade pubAssessment){\r\n    AssessmentAccessControlIfc control = (AssessmentAccessControlIfc) pubAssessment.getAssessmentAccessControl();\r\n    populateDelivery(delivery, pubAssessment);\r\n    SettingsDeliveryBean settings = populateSettings(pubAssessment);\r\n    delivery.setSettings(settings);\r\n    FeedbackComponent component = populateFeedbackComponent(pubAssessment);\r\n    delivery.setFeedbackComponent(component);\r\n    if (pubAssessment.getFeedbackComponentOption() != null) {\r\n        delivery.setFeedbackComponentOption(pubAssessment.getFeedbackComponentOption().toString());\r\n    } else {\r\n        delivery.setFeedbackComponentOption(\"1\");\r\n    }\r\n    Date currentDate = new Date();\r\n    if (component.getShowDateFeedback() && control.getFeedbackDate() != null && currentDate.after(control.getFeedbackDate())) {\r\n        delivery.setFeedbackOnDate(true);\r\n    }\r\n    EvaluationModelIfc eval = (EvaluationModelIfc) pubAssessment.getEvaluationModel();\r\n    delivery.setScoringType(eval.getScoringType());\r\n    delivery.setAttachmentList(pubAssessment.getAssessmentAttachmentList());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.business.entity.RecordingData.getCourseAssignmentContext",
	"Comment": "accessor for free form text describing creation context.see usage notes.",
	"Method": "String getCourseAssignmentContext(){\r\n    return courseAssignmentContext;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.addNewPageToSite",
	"Comment": "create a new page in a site. a page holds one or more tools and is shown in the main navigation section. you will still need to add tools to this page.",
	"Method": "String addNewPageToSite(String sessionid,String siteid,String pagetitle,int pagelayout){\r\n    Session session = establishSession(sessionid);\r\n    try {\r\n        Site siteEdit = null;\r\n        SitePage sitePageEdit = null;\r\n        siteEdit = siteService.getSite(siteid);\r\n        sitePageEdit = siteEdit.addPage();\r\n        sitePageEdit.setTitle(pagetitle);\r\n        sitePageEdit.setLayout(pagelayout);\r\n        siteService.save(siteEdit);\r\n    } catch (Exception e) {\r\n        log.error(\"WS addNewPageToSite(): \" + e.getClass().getName() + \" : \" + e.getMessage());\r\n        return e.getClass().getName() + \" : \" + e.getMessage();\r\n    }\r\n    return \"success\";\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.menu.MenuDivider.getForm",
	"Comment": "access the form name whose values will be used when this item is selected.",
	"Method": "String getForm(){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.TimeslotWrapper.removeAttendee",
	"Comment": "this method performs removing attendee from current time slot.",
	"Method": "void removeAttendee(String attendeeUserId){\r\n    if (attendeeWrappers == null)\r\n        return;\r\n    for (Iterator iter = attendeeWrappers.iterator(); iter.hasNext(); ) {\r\n        AttendeeWrapper attendeeWrapper = (AttendeeWrapper) iter.next();\r\n        if (attendeeWrapper.getSignupAttendee().getAttendeeUserId().equals(attendeeUserId)) {\r\n            iter.remove();\r\n            break;\r\n        }\r\n    }\r\n    List<SignupAttendee> attendees = timeSlot.getAttendees();\r\n    for (Iterator iter = attendees.iterator(); iter.hasNext(); ) {\r\n        SignupAttendee attendee = (SignupAttendee) iter.next();\r\n        if (attendee.getAttendeeUserId().equals(attendeeUserId)) {\r\n            iter.remove();\r\n            break;\r\n        }\r\n    }\r\n    updatePositionIndex(attendeeWrappers);\r\n}"
}, {
	"Path": "org.radeox.filter.FilterPipe.filter",
	"Comment": "filter some input and generate ouput. filterpipe pipes the string input\tthrough every filter in the pipe and returns the resulting string.",
	"Method": "String filter(String input,FilterContext context){\r\n    String output = input;\r\n    Iterator filterIterator = filterList.iterator();\r\n    RenderContext renderContext = context.getRenderContext();\r\n    while (filterIterator.hasNext()) {\r\n        Filter f = (Filter) filterIterator.next();\r\n        try {\r\n            String tmp = f.filter(output, context);\r\n            if (null == tmp) {\r\n                log.warn(\"FilterPipe.filter: error while filtering: \" + f);\r\n            } else {\r\n                output = tmp;\r\n            }\r\n        } catch (Exception e) {\r\n            log.warn(\"Filtering exception: \" + f, e);\r\n        }\r\n    }\r\n    return output;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getMeetingTypeRadioBttns",
	"Comment": "this is a getter method for ui and it provides the meeting types for\tradio buttons.",
	"Method": "List<SelectItem> getMeetingTypeRadioBttns(){\r\n    this.meetingTypeRadioBttns = Utilities.getMeetingTypeSelectItems(\"\", false);\r\n    return meetingTypeRadioBttns;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.assessment.PublishedAssessmentServiceImpl.getBasicInfoOfAllInActivePublishedAssessments",
	"Comment": "get list of all inactive published assessments with only basic info populated.",
	"Method": "List getBasicInfoOfAllInActivePublishedAssessments(String orderBy,boolean ascending){\r\n    try {\r\n        PublishedAssessmentService service = new PublishedAssessmentService();\r\n        return service.getBasicInfoOfAllInActivePublishedAssessments(orderBy, ascending);\r\n    } catch (Exception ex) {\r\n        throw new AssessmentServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Delta.newDelta",
	"Comment": "returns a delta that corresponds to the given chunks in the original and\trevised text respectively.",
	"Method": "Delta newDelta(Chunk orig,Chunk rev){\r\n    Class c = DeltaClass[orig.size() > 0 ? 1 : 0][rev.size() > 0 ? 1 : 0];\r\n    Delta result;\r\n    try {\r\n        result = (Delta) c.newInstance();\r\n    } catch (InstantiationException e) {\r\n        return null;\r\n    } catch (IllegalAccessException e) {\r\n        return null;\r\n    }\r\n    result.init(orig, rev);\r\n    return result;\r\n}"
}, {
	"Path": "schemacrawler.utility.TypeMap.get",
	"Comment": "gets the java type mapping for a data type. if no mapping exists,returns null. if a class name is passed in, it overrides themapping in the type map.",
	"Method": "Class<?> get(Object key,Class<?> get,String typeName,String className){\r\n    if (isBlank(className)) {\r\n        return sqlTypeMap.get(typeName);\r\n    } else {\r\n        try {\r\n            return Class.forName(className);\r\n        } catch (final ClassNotFoundException e) {\r\n            LOGGER.log(Level.WARNING, new StringFormat(\"Could not obtain class mapping for data type <%s>\", typeName), e);\r\n            return null;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacadeQueries.getBasicInfoOfLastOrHighestOrAverageSubmittedAssessmentsByScoringOption",
	"Comment": "return an array list of the assessmentgradingdata that a user has\tsubmitted for grade. one per published assessment, when allassessments is false,\tand all submissions per published assessment when allassesments is true. \tif an assessment allows multiple submissions and its grading option is to send highest,\tthen return only the submission with highest finalscore. if an assessment\tallows multiple submissions and its grading option is to send last, then\treturn only the last submission.",
	"Method": "List<AssessmentGradingData> getBasicInfoOfLastOrHighestOrAverageSubmittedAssessmentsByScoringOption(String agentId,String siteId,boolean allAssessments){\r\n    final List<String> groupIds = getSiteGroupIdsForSubmittingAgent(agentId, siteId);\r\n    final String order_last = \" order by p.publishedAssessmentId DESC, a.submittedDate DESC\";\r\n    final String order_highest = \" order by p.publishedAssessmentId DESC, a.finalScore DESC, a.submittedDate DESC\";\r\n    List<AssessmentGradingData> last_list;\r\n    List<AssessmentGradingData> highest_list;\r\n    if (groupIds.size() > 0) {\r\n        final String hql = \"select distinct new AssessmentGradingData(\" + \" a.assessmentGradingId, p.publishedAssessmentId, p.title, a.agentId,\" + \" a.submittedDate, a.isLate,\" + \" a.forGrade, a.totalAutoScore, a.totalOverrideScore,a.finalScore,\" + \" '', a.status, a.gradedBy, a.gradedDate, a.attemptDate,\" + \" a.timeElapsed) \" + \" from AssessmentGradingData a, PublishedAssessmentData p, AuthorizationData az\" + \" where a.publishedAssessmentId = p.publishedAssessmentId\" + \" and a.forGrade=:forGrade and a.agentId=:agentId\" + \" and (az.agentIdString=:siteId or az.agentIdString in (:groupIds)) \" + \" and az.functionId=:functionId and az.qualifierId=p.publishedAssessmentId\" + \" and (p.status=:activeStatus or p.status=:editStatus) \";\r\n        final HibernateCallback<List<AssessmentGradingData>> hcb_last = session -> {\r\n            Query q = session.createQuery(hql + order_last);\r\n            q.setBoolean(\"forGrade\", true);\r\n            q.setString(\"agentId\", agentId);\r\n            q.setString(\"siteId\", siteId);\r\n            q.setParameterList(\"groupIds\", groupIds);\r\n            q.setString(\"functionId\", \"TAKE_PUBLISHED_ASSESSMENT\");\r\n            q.setInteger(\"activeStatus\", 1);\r\n            q.setInteger(\"editStatus\", 3);\r\n            return q.list();\r\n        };\r\n        last_list = getHibernateTemplate().execute(hcb_last);\r\n        final HibernateCallback<List<AssessmentGradingData>> hcb_highest = session -> {\r\n            Query q = session.createQuery(hql + order_highest);\r\n            q.setBoolean(\"forGrade\", true);\r\n            q.setString(\"agentId\", agentId);\r\n            q.setString(\"siteId\", siteId);\r\n            q.setParameterList(\"groupIds\", groupIds);\r\n            q.setString(\"functionId\", \"TAKE_PUBLISHED_ASSESSMENT\");\r\n            q.setInteger(\"activeStatus\", 1);\r\n            q.setInteger(\"editStatus\", 3);\r\n            return q.list();\r\n        };\r\n        highest_list = getHibernateTemplate().execute(hcb_highest);\r\n    } else {\r\n        final String hql = \"select new AssessmentGradingData(\" + \" a.assessmentGradingId, p.publishedAssessmentId, p.title, a.agentId,\" + \" a.submittedDate, a.isLate,\" + \" a.forGrade, a.totalAutoScore, a.totalOverrideScore,a.finalScore,\" + \" a.comments, a.status, a.gradedBy, a.gradedDate, a.attemptDate,\" + \" a.timeElapsed) \" + \" from AssessmentGradingData a, PublishedAssessmentData p, AuthorizationData az\" + \" where a.publishedAssessmentId = p.publishedAssessmentId\" + \" and a.forGrade=:forGrade and a.agentId=:agentId\" + \" and az.agentIdString=:siteId \" + \" and az.functionId=:functionId and az.qualifierId=p.publishedAssessmentId\" + \" order by p.publishedAssessmentId DESC, a.submittedDate DESC\";\r\n        final HibernateCallback<List<AssessmentGradingData>> hcb_last = session -> {\r\n            Query q = session.createQuery(hql + order_last);\r\n            q.setBoolean(\"forGrade\", true);\r\n            q.setString(\"agentId\", agentId);\r\n            q.setString(\"siteId\", siteId);\r\n            q.setString(\"functionId\", \"TAKE_PUBLISHED_ASSESSMENT\");\r\n            return q.list();\r\n        };\r\n        last_list = getHibernateTemplate().execute(hcb_last);\r\n        final HibernateCallback<List<AssessmentGradingData>> hcb_highest = session -> {\r\n            Query q = session.createQuery(hql + order_highest);\r\n            q.setBoolean(\"forGrade\", true);\r\n            q.setString(\"agentId\", agentId);\r\n            q.setString(\"siteId\", siteId);\r\n            q.setString(\"functionId\", \"TAKE_PUBLISHED_ASSESSMENT\");\r\n            return q.list();\r\n        };\r\n        highest_list = getHibernateTemplate().execute(hcb_highest);\r\n    }\r\n    final String query = \"select e.assessment.publishedAssessmentId, e.scoringType, ac.submissionsAllowed  \" + \"from PublishedEvaluationModel e, PublishedAccessControl ac, AuthorizationData az \" + \"where e.assessment.publishedAssessmentId = ac.assessment.publishedAssessmentId \" + \"and az.qualifierId = ac.assessment.publishedAssessmentId and az.agentIdString in (:agentIdString) and az.functionId=:functionId\";\r\n    groupIds.add(siteId);\r\n    final HibernateCallback<List<Object[]>> eval_model = session -> {\r\n        Query q = session.createQuery(query);\r\n        q.setParameterList(\"agentIdString\", groupIds);\r\n        q.setString(\"functionId\", \"TAKE_PUBLISHED_ASSESSMENT\");\r\n        return q.list();\r\n    };\r\n    List<Object[]> l = getHibernateTemplate().execute(eval_model);\r\n    Map<Long, Integer> scoringTypeMap = new HashMap();\r\n    for (Object[] o : l) {\r\n        scoringTypeMap.put((Long) o[0], (Integer) o[1]);\r\n    }\r\n    List<AssessmentGradingData> assessmentList = new ArrayList();\r\n    Long currentid = new Long(\"0\");\r\n    Integer scoringOption;\r\n    for (AssessmentGradingData a : last_list) {\r\n        if (scoringTypeMap.get(a.getPublishedAssessmentId()) != null) {\r\n            scoringOption = scoringTypeMap.get(a.getPublishedAssessmentId());\r\n        } else {\r\n            scoringOption = EvaluationModelIfc.LAST_SCORE;\r\n        }\r\n        if (EvaluationModelIfc.LAST_SCORE.equals(scoringOption)) {\r\n            if (!a.getPublishedAssessmentId().equals(currentid) || allAssessments) {\r\n                if (!a.getPublishedAssessmentId().equals(currentid)) {\r\n                    a.setIsRecorded(true);\r\n                }\r\n                assessmentList.add(a);\r\n                currentid = a.getPublishedAssessmentId();\r\n            }\r\n        }\r\n    }\r\n    currentid = 0L;\r\n    for (AssessmentGradingData a : highest_list) {\r\n        if (scoringTypeMap.get(a.getPublishedAssessmentId()) != null) {\r\n            scoringOption = scoringTypeMap.get(a.getPublishedAssessmentId());\r\n        } else {\r\n            scoringOption = EvaluationModelIfc.LAST_SCORE;\r\n        }\r\n        if (EvaluationModelIfc.HIGHEST_SCORE.equals(scoringOption)) {\r\n            if (!a.getPublishedAssessmentId().equals(currentid) || allAssessments) {\r\n                if (!a.getPublishedAssessmentId().equals(currentid)) {\r\n                    a.setIsRecorded(true);\r\n                }\r\n                assessmentList.add(a);\r\n                currentid = a.getPublishedAssessmentId();\r\n            }\r\n        }\r\n        if (EvaluationModelIfc.AVERAGE_SCORE.equals(scoringOption)) {\r\n            assessmentList.add(a);\r\n        }\r\n    }\r\n    return assessmentList;\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UserPrefsTool.processActionRefreshFrmNoti",
	"Comment": "this is called from notification page for navigation to refresh page",
	"Method": "String processActionRefreshFrmNoti(){\r\n    log.debug(\"processActionRefreshFrmNoti()\");\r\n    loadRefreshData();\r\n    return \"refresh\";\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.SakaiProxyImpl.getFirstInstanceOfTool",
	"Comment": "gets the toolconfiguration of a page in a site containing a given tool",
	"Method": "ToolConfiguration getFirstInstanceOfTool(String siteId,String toolId){\r\n    try {\r\n        return this.siteService.getSite(siteId).getToolForCommonId(toolId);\r\n    } catch (final IdUnusedException e) {\r\n        log.error(\"SakaiProxy.getFirstInstanceOfTool() failed for siteId: \" + siteId + \" and toolId: \" + toolId);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.crawl.DatabaseObjectReference.writeObject",
	"Comment": "write only content of the reference. a reference itself is notserializable.",
	"Method": "void writeObject(ObjectOutputStream out){\r\n    if (out != null) {\r\n        out.writeObject(partial);\r\n        out.writeObject(databaseObjectRef.get());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.FakeBeginDeliveryActionListener.populateFeedbackComponent",
	"Comment": "this grabs the assessment feedback & puts it in the feedbackcomponent",
	"Method": "void populateFeedbackComponent(FeedbackComponent feedback,PublishedAssessmentIfc pubAssessment){\r\n    AssessmentFeedback info = (AssessmentFeedback) pubAssessment.getAssessmentFeedback();\r\n    feedback.setShowCorrectResponse(info.getShowCorrectResponse().booleanValue());\r\n    feedback.setShowGraderComment(info.getShowGraderComments().booleanValue());\r\n    feedback.setShowItemLevel(info.getShowQuestionLevelFeedback().booleanValue());\r\n    feedback.setShowQuestion(info.getShowQuestionText().booleanValue());\r\n    feedback.setShowResponse(info.getShowCorrectResponse().booleanValue());\r\n    feedback.setShowSelectionLevel(info.getShowSelectionLevelFeedback().booleanValue());\r\n    feedback.setShowStats(info.getShowStatistics().booleanValue());\r\n    feedback.setShowStudentScore(info.getShowStudentScore().booleanValue());\r\n    feedback.setShowStudentQuestionScore(info.getShowStudentQuestionScore().booleanValue());\r\n    Integer feedbackDelivery = info.getFeedbackDelivery();\r\n    feedback.setShowDateFeedback(AssessmentFeedbackIfc.FEEDBACK_BY_DATE.equals(feedbackDelivery));\r\n    feedback.setShowImmediate(AssessmentFeedbackIfc.IMMEDIATE_FEEDBACK.equals(feedbackDelivery));\r\n    feedback.setShowNoFeedback(AssessmentFeedbackIfc.NO_FEEDBACK.equals(feedbackDelivery));\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.MathJaxEnabler.isMathJaxEnabledForSite",
	"Comment": "returns whether or not mathjax is allowed in the given site. checks the state first, if settingis not found in state, checks site properties.",
	"Method": "boolean isMathJaxEnabledForSite(Site site,SessionState state){\r\n    if (!ENABLED_AT_SYSTEM_LEVEL || state == null) {\r\n        return false;\r\n    }\r\n    Boolean mathJaxEnabled = (Boolean) state.getAttribute(STATE_KEY_IS_MATHJAX_ENABLED_FOR_SITE);\r\n    if (mathJaxEnabled == null) {\r\n        boolean enabled = Boolean.parseBoolean(site.getProperties().getProperty(Site.PROP_SITE_MATHJAX_ALLOWED));\r\n        state.setAttribute(STATE_KEY_IS_MATHJAX_ENABLED_FOR_SITE, Boolean.valueOf(enabled));\r\n        return enabled;\r\n    }\r\n    return mathJaxEnabled.booleanValue();\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.tool.models.DetachableMessageThreadModel.equals",
	"Comment": "used for dataview with reuseifmodelsequalstrategy item reuse strategy",
	"Method": "boolean equals(Object obj){\r\n    if (obj == this) {\r\n        return true;\r\n    } else if (obj == null) {\r\n        return false;\r\n    } else if (obj instanceof DetachableMessageThreadModel) {\r\n        DetachableMessageThreadModel other = (DetachableMessageThreadModel) obj;\r\n        return other.id == id;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.setLastModifiedBy",
	"Comment": "set the agentid of the person who last modified assessmentbasefacade",
	"Method": "void setLastModifiedBy(String lastModifiedBy){\r\n    this.lastModifiedBy = lastModifiedBy;\r\n    this.data.setLastModifiedBy(lastModifiedBy);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.GradingService.getItemScores",
	"Comment": "get the score information for each item from the assessment score.",
	"Method": "Map getItemScores(Long publishedId,Long itemId,String which,Map getItemScores,Long publishedId,Long itemId,String which,boolean loadItemGradingAttachment,Map getItemScores,Long itemId,List scores,boolean loadItemGradingAttachment){\r\n    try {\r\n        return PersistenceService.getInstance().getAssessmentGradingFacadeQueries().getItemScores(itemId, scores, loadItemGradingAttachment);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return new HashMap();\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.toByteArray",
	"Comment": "return a text image of the archive as a char array.this is useful for writing the archive to a file withouthaving the characters be interpreted by the writer.",
	"Method": "byte[] toByteArray(){\r\n    return toString(Archive.RCS_NEWLINE).getBytes();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.OrganizerSignupMBean.init",
	"Comment": "this will initialize all the wrapper objects such as\tsignupmeetingwrapper, signuptimeslotwrapper etc.",
	"Method": "void init(SignupMeetingWrapper meetingWrapper){\r\n    this.eidInputMode = false;\r\n    this.collapsedMeetingInfo = false;\r\n    reset(meetingWrapper);\r\n    loadAllAttendees(meetingWrapper.getMeeting());\r\n}"
}, {
	"Path": "org.sakaiproject.user.detail.ValueEncryptionUtilities.encrypt",
	"Comment": "this salts and encrypts a value and returns a base64 encoded version of the encrypted value.",
	"Method": "String encrypt(String value,int length){\r\n    try {\r\n        byte[] salt = getSalt();\r\n        SecretKey secret = getSecret(key, salt, getKeyLength());\r\n        Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE);\r\n        cipher.init(Cipher.ENCRYPT_MODE, secret);\r\n        AlgorithmParameters params = cipher.getParameters();\r\n        IvParameterSpec parameterSpec = params.getParameterSpec(IvParameterSpec.class);\r\n        byte[] iv = parameterSpec.getIV();\r\n        byte[] bytes = value.getBytes(StandardCharsets.UTF_8);\r\n        if (length != 0 && bytes.length > length) {\r\n            throw new IllegalArgumentException(\"Can't encode as it's longer than our fixed length.\");\r\n        }\r\n        int finalLength = (length == 0) ? bytes.length : length;\r\n        byte[] source = new byte[finalLength];\r\n        System.arraycopy(bytes, 0, source, 0, bytes.length);\r\n        Arrays.fill(source, bytes.length, source.length, (byte) UTF_8_ILLEGAL);\r\n        byte[] ciphertext = cipher.doFinal(source);\r\n        byte[] finalCiphertext = new byte[ciphertext.length + 2 * 16];\r\n        System.arraycopy(iv, 0, finalCiphertext, 0, 16);\r\n        System.arraycopy(salt, 0, finalCiphertext, 16, 16);\r\n        System.arraycopy(ciphertext, 0, finalCiphertext, 32, ciphertext.length);\r\n        return encoder.encodeToString(finalCiphertext);\r\n    } catch (Exception e) {\r\n        log.error(\"Error while encrypting.\", e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TransformationSystem.getSelectedNode",
	"Comment": "gets the currently selected node. only the currently selected node can be transformed. nodesare selected automatically when they are tapped, or when the user begins to translate the nodewith a drag gesture.",
	"Method": "BaseTransformableNode getSelectedNode(){\r\n    return selectedNode;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.ViewParamsHelperBean.getLocalName",
	"Comment": "get the localised name relating to globalname and localspace",
	"Method": "String getLocalName(){\r\n    return NameHelper.localizeName(globalName, localSpace);\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.servlets.ResolverServlet.doGet",
	"Comment": "process path, get the original url and redirect or return http error response",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    String pathInfo = request.getPathInfo();\r\n    String[] parts = pathInfo.split(\"/\");\r\n    if (parts.length < 2) {\r\n        response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Missing parameter for ShortenedUrlService\");\r\n    } else if (parts.length > 2) {\r\n        response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Malformed URL for ShortenedUrlService\");\r\n    } else {\r\n        String id = parts[1];\r\n        String url = service.resolve(id);\r\n        if (url == null) {\r\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"No resource found matching \" + id);\r\n        } else {\r\n            response.sendRedirect(url);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.model.SignupTimeslot.isAvailable",
	"Comment": "check if current time slot is available for adding more people",
	"Method": "boolean isAvailable(){\r\n    if (attendees == null)\r\n        return true;\r\n    return (attendees.size() < maxNoOfAttendees);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.questionpool.QuestionPoolServiceImpl.removeQuestionFromPool",
	"Comment": "removes a question from the question pool. this does not the question itself",
	"Method": "void removeQuestionFromPool(Long questionId,Long poolId){\r\n    try {\r\n        QuestionPoolService service = new QuestionPoolService();\r\n        service.removeQuestionFromPool(questionId, poolId);\r\n    } catch (Exception ex) {\r\n        throw new QuestionPoolServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.syllabus.SyllabusManagerImpl.createSyllabusDataObject",
	"Comment": "createsyllabusdata creates a persistent syllabusdata object",
	"Method": "SyllabusData createSyllabusDataObject(String title,Integer position,String asset,String view,String status,String emailNotification,Date startDate,Date endDate,boolean linkCalendar,String calendarEventIdStartDate,String calendarEventIdEndDate,SyllabusData createSyllabusDataObject,String title,Integer position,String asset,String view,String status,String emailNotification,Date startDate,Date endDate,boolean linkCalendar,String calendarEventIdStartDate,String calendarEventIdEndDate,SyllabusItem syllabusItem){\r\n    if (position == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    } else {\r\n        SyllabusData data = new SyllabusDataImpl();\r\n        data.setTitle(title);\r\n        data.setPosition(position);\r\n        data.setAsset(asset);\r\n        data.setView(view);\r\n        data.setStatus(status);\r\n        data.setEmailNotification(emailNotification);\r\n        data.setStartDate(startDate);\r\n        data.setEndDate(endDate);\r\n        data.setLinkCalendar(linkCalendar);\r\n        data.setSyllabusItem(syllabusItem);\r\n        data.setCalendarEventIdStartDate(calendarEventIdStartDate);\r\n        data.setCalendarEventIdEndDate(calendarEventIdEndDate);\r\n        saveSyllabus(data);\r\n        return data;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.processSelectedType",
	"Comment": "this is a valuechange listener to watch the meeting type selection by\tuser.",
	"Method": "String processSelectedType(ValueChangeEvent vce){\r\n    String newMeetingType = (String) vce.getNewValue();\r\n    signupMeeting.setMeetingType(newMeetingType);\r\n    if (!INDIVIDUAL.equals(newMeetingType)) {\r\n        setUserDefinedTS(false);\r\n    }\r\n    return \"\";\r\n}"
}, {
	"Path": "schemacrawler.utility.Identifiers.isIdentifier",
	"Comment": "checks if the name is valid database object identifier, accordingto the rules of most databases.",
	"Method": "boolean isIdentifier(String name){\r\n    if (isBlank(name)) {\r\n        return false;\r\n    } else {\r\n        return isIdentifier.matcher(name).matches() && !isAllNumeric.matcher(name).matches();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.putSelectedProviderCourseIntoContext",
	"Comment": "get the titles of list of selected provider courses into context",
	"Method": "boolean putSelectedProviderCourseIntoContext(Context context,SessionState state){\r\n    boolean rv = false;\r\n    if (state.getAttribute(STATE_ADD_CLASS_PROVIDER_CHOSEN) != null) {\r\n        List<String> providerSectionList = (List<String>) state.getAttribute(STATE_ADD_CLASS_PROVIDER_CHOSEN);\r\n        context.put(\"selectedProviderCourse\", providerSectionList);\r\n        context.put(\"selectedProviderCourseDescription\", state.getAttribute(STATE_ADD_CLASS_PROVIDER_DESCRIPTION_CHOSEN));\r\n        if (providerSectionList != null && providerSectionList.size() > 0) {\r\n            rv = true;\r\n        }\r\n        HashMap<String, String> providerSectionListTitles = new HashMap<String, String>();\r\n        if (providerSectionList != null) {\r\n            for (String providerSectionId : providerSectionList) {\r\n                try {\r\n                    Section s = cms.getSection(providerSectionId);\r\n                    if (s != null) {\r\n                        providerSectionListTitles.put(s.getEid(), s.getTitle());\r\n                    }\r\n                } catch (IdNotFoundException e) {\r\n                    providerSectionListTitles.put(providerSectionId, providerSectionId);\r\n                    log.warn(\"putSelectedProviderCourseIntoContext Cannot find section \" + providerSectionId);\r\n                }\r\n            }\r\n            context.put(\"size\", Integer.valueOf(providerSectionList.size() - 1));\r\n        }\r\n        context.put(\"selectedProviderCourseTitles\", providerSectionListTitles);\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "schemacrawler.tools.integration.spring.Main.main",
	"Comment": "get connection parameters, and creates a connection, and crawls theschema.",
	"Method": "void main(String[] args){\r\n    requireNonNull(args, \"No arguments provided\");\r\n    final Config argsMap = CommandLineUtility.parseArgs(args);\r\n    final ApplicationOptionsParser applicationOptionsParser = new ApplicationOptionsParser(argsMap);\r\n    final ApplicationOptions applicationOptions = applicationOptionsParser.getOptions();\r\n    if (applicationOptions.isShowHelp()) {\r\n        final String text = readResourceFully(\"/help/SchemaCrawler.spring.txt\");\r\n        System.out.println(text);\r\n        return;\r\n    }\r\n    applyApplicationLogLevel(applicationOptions.getApplicationLogLevel());\r\n    logSafeArguments(args);\r\n    logSystemClasspath();\r\n    logSystemProperties();\r\n    final SchemaCrawlerSpringCommandLine commandLine = new SchemaCrawlerSpringCommandLine(argsMap);\r\n    commandLine.execute();\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.managegroup.impl.SiteManageGroupHandler.processCancel",
	"Comment": "allows the cancel button to return control to the tool calling this helper",
	"Method": "String processCancel(){\r\n    resetTargettedMessageList();\r\n    ToolSession session = sessionManager.getCurrentToolSession();\r\n    session.setAttribute(ATTR_TOP_REFRESH, Boolean.TRUE);\r\n    return \"done\";\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.ViewBean.getPageUrl",
	"Comment": "given a page name and an action return an url that represents it.",
	"Method": "String getPageUrl(String pageName,String action,String getPageUrl,String pageName,String action,boolean withBreadcrumbs,String getPageUrl,String pageName,String action,Map params){\r\n    StringBuffer url = new StringBuffer();\r\n    url.append(\"?\").append(PAGENAME_URL_ENCODED).append('=').append(urlEncode(pageName));\r\n    url.append('&').append(ACTION_URL_ENCODED).append('=').append(urlEncode(action));\r\n    url.append('&').append(PANEL_URL_ENCODED).append('=').append(MAIN_URL_ENCODED);\r\n    url.append('&').append(REALM_URL_ENCODED).append('=').append(urlEncode(localSpace));\r\n    for (Iterator<Entry<String, String>> it = params.entrySet().iterator(); it.hasNext(); ) {\r\n        Entry<String, String> entry = it.next();\r\n        String key = entry.getKey();\r\n        String value = entry.getValue();\r\n        if (!(PAGE_NAME_PARAM.equals(key) || ACTION_PARAM.equals(key) || PANEL_PARAM.equals(key) || SearchBean.REALM_PARAM.equals(key))) {\r\n            url.append('&').append(urlEncode(key)).append('=').append(urlEncode(value));\r\n        }\r\n    }\r\n    return url.append(getAnchorString()).toString();\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Chunk.toString",
	"Comment": "provide a string image of the chunk using the given prefix and postfix.",
	"Method": "void toString(StringBuffer s,StringBuffer toString,StringBuffer s,String prefix,String postfix){\r\n    if (chunk != null) {\r\n        Iterator i = chunk.iterator();\r\n        while (i.hasNext()) {\r\n            s.append(prefix);\r\n            s.append(i.next());\r\n            s.append(postfix);\r\n        }\r\n    }\r\n    return s;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.api.SamigoApiFactory.getInstance",
	"Comment": "static method returning an implementation instance of this factory.",
	"Method": "SamigoApiFactory getInstance(){\r\n    log.debug(\"SamigoApiFactory.getInstance()\");\r\n    if (instance == null) {\r\n        try {\r\n            FactoryUtil.setUseLocator(true);\r\n            instance = FactoryUtil.lookup();\r\n        } catch (Exception ex) {\r\n            log.error(\"Unable to read integration context: \" + ex);\r\n        }\r\n    }\r\n    log.debug(\"instance=\" + instance);\r\n    return instance;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getDisplayCurrentMeetingType",
	"Comment": "this is for ui purpose and it displays the meeting type, which user can\tredefine in message bundle",
	"Method": "String getDisplayCurrentMeetingType(){\r\n    String mType = \"\";\r\n    if (isIndividualType())\r\n        mType = Utilities.rb.getString(\"label_individaul\");\r\n    else if (isGroupType())\r\n        mType = Utilities.rb.getString(\"label_group\");\r\n    else if (isAnnouncementType())\r\n        mType = Utilities.rb.getString(\"label_announcement\");\r\n    else if (isUserDefinedTS())\r\n        mType = Utilities.rb.getString(\"label_custom_timeslots\");\r\n    return mType;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.model.ExternalIntegrationInfo.isTwitterAlreadyConfigured",
	"Comment": "check if the user has already configured their twitter info.",
	"Method": "boolean isTwitterAlreadyConfigured(){\r\n    return (StringUtils.isNotBlank(getTwitterToken()) && (StringUtils.isNotBlank(getTwitterSecret())));\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.PlaneDiscoveryController.setInstructionView",
	"Comment": "set the instructions view to present over the sceneform view.",
	"Method": "void setInstructionView(View view){\r\n    planeDiscoveryView = view;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.getLastModifiedBy",
	"Comment": "get the agentid of the person who last modified assessmentbasefacade",
	"Method": "String getLastModifiedBy(){\r\n    try {\r\n        this.data = (AssessmentBaseIfc) assessment.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getLastModifiedBy();\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.common.helpers.SnackbarHelper.showError",
	"Comment": "shows a snackbar with a given error message. when dismissed, will finish the activity. usefulfor notifying errors, where no further interaction with the activity is possible.",
	"Method": "void showError(Activity activity,String errorMessage){\r\n    show(activity, errorMessage, DismissBehavior.FINISH);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil.paramArrayLike",
	"Comment": "determine if we have been passed a parameter that contains a given string,return arraylist of these strings, else return empty list.typically this would be where you want to check for one of a setof similar radio buttons commandlinks or commandbuttons.",
	"Method": "ArrayList paramArrayLike(String paramPart){\r\n    FacesContext context = FacesContext.getCurrentInstance();\r\n    Map requestParams = context.getExternalContext().getRequestParameterMap();\r\n    ArrayList list = new ArrayList();\r\n    Iterator iter = requestParams.keySet().iterator();\r\n    while (iter.hasNext()) {\r\n        String currKey = (String) iter.next();\r\n        int location = currKey.indexOf(paramPart);\r\n        if (location > -1) {\r\n            list.add(currKey.substring(location));\r\n        }\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "org.sakaiproject.sitemanage.impl.SiteManageServiceImpl.addToolToSiteIfMissing",
	"Comment": "helper to add a tool to a site if the site does not contain an instance of the tool.note that it does not save the site. the caller must handle this.",
	"Method": "Site addToolToSiteIfMissing(Site site,String toolId){\r\n    if (site.getToolForCommonId(toolId) != null) {\r\n        return site;\r\n    }\r\n    log.debug(\"Adding tool to site: {}, tool: {}\", site.getId(), toolId);\r\n    SitePage page = site.addPage();\r\n    ToolConfiguration tool = page.addTool();\r\n    tool.setTool(toolId, toolManager.getTool(toolId));\r\n    tool.setTitle(toolManager.getTool(toolId).getTitle());\r\n    return site;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.CalculatedQuestionBean.getVariablesList",
	"Comment": "getvariableslist returns a list of all variables, sorted by variable name",
	"Method": "List<CalculatedQuestionVariableBean> getVariablesList(){\r\n    List<CalculatedQuestionVariableBean> beanList = new ArrayList<CalculatedQuestionVariableBean>(variables.values());\r\n    Collections.sort(beanList, new Comparator<CalculatedQuestionVariableBean>() {\r\n        public int compare(CalculatedQuestionVariableBean bean1, CalculatedQuestionVariableBean bean2) {\r\n            return new NullComparator().compare(bean1.getName(), bean2.getName());\r\n        }\r\n    });\r\n    return beanList;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.CalculatedQuestionBean.getVariablesList",
	"Comment": "getvariableslist returns a list of all variables, sorted by variable name",
	"Method": "List<CalculatedQuestionVariableBean> getVariablesList(){\r\n    return new NullComparator().compare(bean1.getName(), bean2.getName());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.AuthoringHelper.createMultipleImportedAssessments",
	"Comment": "import multiple assessment documents in qti format, extract & persist.",
	"Method": "AssessmentFacade[] createMultipleImportedAssessments(Document objectBank,AssessmentFacade[] createMultipleImportedAssessments,Document[] documents){\r\n    AssessmentFacade[] assessments = new AssessmentFacade[documents.length];\r\n    for (int i = 0; i < documents.length; i++) {\r\n        assessments[i] = createImportedAssessment(documents[i]);\r\n    }\r\n    return assessments;\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.ControllerServlet.isPageRestorable",
	"Comment": "check to see if the request represents a page that can act as a restor\tpoint.",
	"Method": "boolean isPageRestorable(HttpServletRequest request){\r\n    if (TITLE_PANEL.equals(request.getParameter(PANEL)))\r\n        return false;\r\n    String pathInfo = request.getPathInfo();\r\n    if (pathInfo != null) {\r\n        if (request.getPathInfo().endsWith(\".gif\")) {\r\n            return false;\r\n        }\r\n        if (request.getPathInfo().endsWith(\".src\")) {\r\n            return false;\r\n        }\r\n    }\r\n    if (\"GET\".equalsIgnoreCase(request.getMethod()))\r\n        return true;\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.EnrolmentsHandler.filterSectionEnrolments",
	"Comment": "filter the enrolments for the current user based on the search term provided.",
	"Method": "void filterSectionEnrolments(String searchText,String currentUserID){\r\n    if (StringUtils.isNotBlank(searchText)) {\r\n        filteredEnrolments.clear();\r\n        if (enrolmentsCacheMap.get(currentUserID) == null) {\r\n            getSectionEnrolments(currentUserID);\r\n        }\r\n        for (Enrolment enrolment : enrolmentsCacheMap.get(currentUserID).getEnrolments()) {\r\n            boolean siteTitleMatchesSearch = false;\r\n            for (SiteTitleUrlWrapper site : enrolment.getSiteWrappers()) {\r\n                if (site.getSiteTitle().toLowerCase().contains(searchText.toLowerCase())) {\r\n                    siteTitleMatchesSearch = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (SESSION_HELPER.getSessionByEID(enrolment.getSessionEID()).getTitle().toLowerCase().contains(searchText.toLowerCase()) || enrolment.getSectionTitle().toLowerCase().contains(searchText.toLowerCase()) || siteTitleMatchesSearch) {\r\n                filteredEnrolments.add(enrolment);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.FakeBeginDeliveryActionListener.populateSettings",
	"Comment": "this grabs the assessment and its assessmentaccesscontrolifc &puts it in the settingsdeliverybean.",
	"Method": "void populateSettings(SettingsDeliveryBean settings,PublishedAssessmentIfc pubAssessment){\r\n    AssessmentAccessControlIfc control = pubAssessment.getAssessmentAccessControl();\r\n    if (control != null)\r\n        constructControlSettings(settings, control);\r\n}"
}, {
	"Path": "edu.amc.sakai.user.JLDAPDirectoryProvider.setMemoryService",
	"Comment": "user caching is done centrally in the userdirectoryservice.callcache",
	"Method": "void setMemoryService(org.sakaiproject.memory.api.MemoryService ignore){\r\n    log.warn(\"DEPRECATION WARNING: memoryService is deprecated. Please remove it from your jldap-beans.xml configuration.\");\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Delta.getOriginal",
	"Comment": "accessor method to return the chunk representing the original sequence of\titems",
	"Method": "Chunk getOriginal(){\r\n    return original;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateSitesGroups.getMissingSites",
	"Comment": "provide all the missing sites due to permission difference.",
	"Method": "List<String> getMissingSites(){\r\n    return missingSites;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil.paramValueLike",
	"Comment": "determine if we have been passed a parameter that contains a given string,else null. typically this would be where you want to check for one of a setof similar commandlinks or commandbuttons, such as the sortby headings inevaluation.",
	"Method": "String paramValueLike(String paramPart){\r\n    FacesContext context = FacesContext.getCurrentInstance();\r\n    Map requestParams = context.getExternalContext().getRequestParameterMap();\r\n    for (Iterator it = requestParams.entrySet().iterator(); it.hasNext(); ) {\r\n        Map.Entry entry = (Map.Entry) it.next();\r\n        String currKey = (String) entry.getKey();\r\n        int location = currKey.indexOf(paramPart);\r\n        if (location > -1) {\r\n            return (String) entry.getValue();\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.delivery.DeliveryActionListener.getPageContentsByPart",
	"Comment": "gets a contents bean for the current page if is format by part.",
	"Method": "ContentsDeliveryBean getPageContentsByPart(PublishedAssessmentFacade publishedAssessment,int itemIndex,int sectionIndex,Map itemGradingHash,DeliveryBean delivery,Map publishedAnswerHash){\r\n    ContentsDeliveryBean contents = new ContentsDeliveryBean();\r\n    double currentScore = 0;\r\n    double maxScore = 0;\r\n    int sectionCount = 0;\r\n    List partSet = publishedAssessment.getSectionArraySorted();\r\n    Iterator iter = partSet.iterator();\r\n    List partsContents = new ArrayList();\r\n    while (iter.hasNext()) {\r\n        SectionContentsBean partBean = getPartBean((SectionDataIfc) iter.next(), itemGradingHash, delivery, publishedAnswerHash);\r\n        partBean.setNumParts(Integer.toString(partSet.size()));\r\n        if (partBean.getItemContentsSize().equals(\"0\")) {\r\n            log.debug(\"getPageContentsByPart(): no question\");\r\n            partBean.setNoQuestions(true);\r\n        }\r\n        currentScore += partBean.getPoints();\r\n        maxScore += partBean.getMaxPoints();\r\n        if (sectionCount++ == sectionIndex) {\r\n            partsContents.add(partBean);\r\n            if (iter.hasNext()) {\r\n                delivery.setContinue(true);\r\n            } else {\r\n                delivery.setContinue(false);\r\n            }\r\n            if (sectionCount > 1) {\r\n                delivery.setPrevious(true);\r\n            } else {\r\n                delivery.setPrevious(false);\r\n            }\r\n        }\r\n    }\r\n    contents.setCurrentScore(currentScore);\r\n    contents.setMaxScore(maxScore);\r\n    contents.setPartsContents(partsContents);\r\n    contents.setShowStudentScore(delivery.isShowStudentScore());\r\n    return contents;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.render.api.ToolRenderException.getThrowable",
	"Comment": "retrieve the exception which caused this exception to be rethrown.",
	"Method": "Throwable getThrowable(){\r\n    return throwable;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Version.isGreaterOrEqualThan",
	"Comment": "determine if this version is greater than or equal to the given one.",
	"Method": "boolean isGreaterOrEqualThan(Version ver){\r\n    return compareVersions(ver) >= 0;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.VelocityPortletPaneledAction.clientWindowId",
	"Comment": "compute the deliver address for the current request. compute the client window id, based on the float state",
	"Method": "String clientWindowId(SessionState state,String toolId){\r\n    Session session = SessionManager.getCurrentSession();\r\n    Placement placement = ToolManager.getCurrentPlacement();\r\n    String deliveryId = session.getId() + placement.getId();\r\n    return deliveryId;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.copySiteContent",
	"Comment": "copy the content from a site to another site. it creates a list of tools in the source site and transfers that contentto the destination site.",
	"Method": "String copySiteContent(String sessionid,String sourcesiteid,String destinationsiteid){\r\n    Session session = establishSession(sessionid);\r\n    try {\r\n        Site site = siteService.getSite(sourcesiteid);\r\n        site = siteService.getSite(destinationsiteid);\r\n        boolean isSuperUser = false;\r\n        if (securityService.isSuperUser(session.getUserId())) {\r\n            isSuperUser = true;\r\n        }\r\n        if (!isSuperUser && !securityService.unlock(SiteService.SECURE_UPDATE_SITE, site.getReference())) {\r\n            log.warn(\"WS copySiteContent(): Permission denied. Must be super user to copy a site in which you are not a maintainer.\");\r\n            throw new RuntimeException(\"WS copySiteContent(): Permission denied. Must be super user to copy a site in which you are not a maintainer.\");\r\n        }\r\n        List<SitePage> pages = site.getPages();\r\n        Set<String> toolIds = new HashSet();\r\n        for (SitePage page : pages) {\r\n            List<ToolConfiguration> tools = page.getTools();\r\n            boolean includePage = true;\r\n            for (ToolConfiguration toolConfig : tools) {\r\n                if (!isSuperUser) {\r\n                    if (!includePage) {\r\n                        continue;\r\n                    }\r\n                    if (!toolManager.isVisible(site, toolConfig)) {\r\n                        includePage = false;\r\n                        break;\r\n                    }\r\n                }\r\n                toolIds.add(toolConfig.getToolId());\r\n            }\r\n        }\r\n        for (String toolId : toolIds) {\r\n            Map<String, String> entityMap;\r\n            Map transversalMap = new HashMap();\r\n            if (!toolId.equalsIgnoreCase(\"sakai.resources\")) {\r\n                entityMap = transferCopyEntities(toolId, sourcesiteid, destinationsiteid);\r\n            } else {\r\n                entityMap = transferCopyEntities(toolId, contentHostingService.getSiteCollection(sourcesiteid), contentHostingService.getSiteCollection(destinationsiteid));\r\n            }\r\n            if (entityMap != null) {\r\n                transversalMap.putAll(entityMap);\r\n            }\r\n            updateEntityReferences(toolId, destinationsiteid, transversalMap, site);\r\n        }\r\n    } catch (Exception e) {\r\n        log.error(\"WS copySiteContent(): \" + e.getClass().getName() + \" : \" + e.getMessage(), e);\r\n        return e.getClass().getName() + \" : \" + e.getMessage();\r\n    }\r\n    return \"success\";\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.order.impl.SitePageEditHandler.setTitle",
	"Comment": "sets the title of a page, and if there is only one tool on a page the title of that tool.also optionally will alter the configuration of a tool",
	"Method": "String setTitle(String pageId,String newTitle){\r\n    SitePage page = site.getPage(pageId);\r\n    String oldTitle = page.getTitle();\r\n    page.setTitle(newTitle);\r\n    page.setTitleCustom(true);\r\n    if (page.getTools().size() == 1) {\r\n        ToolConfiguration tool = page.getTools().get(0);\r\n        tool.setTitle(newTitle);\r\n    }\r\n    saveSite(site);\r\n    EventTrackingService.post(EventTrackingService.newEvent(PAGE_RENAME, \"/site/\" + site.getId() + \"/page/\" + page.getId() + \"/old_title/\" + oldTitle + \"/new_title/\" + page.getTitle(), false));\r\n    return oldTitle;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SakaiFacadeImpl.getAdditionalCalendar",
	"Comment": "returns google calendar if the calendar has been created in google",
	"Method": "Calendar getAdditionalCalendar(String siteId){\r\n    CalendarService additionalCalendarService = null;\r\n    additionalCalendarService = (CalendarService) ComponentManager.get(CalendarService.ADDITIONAL_CALENDAR);\r\n    if (additionalCalendarService != null) {\r\n        if (additionalCalendarService.isCalendarToolInitialized(siteId)) {\r\n            try {\r\n                return additionalCalendarService.getCalendar(siteId);\r\n            } catch (IdUnusedException e) {\r\n                log.error(\"Error retrieving Calendar.\" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil.getLocalizedString",
	"Comment": "gets a localized message string based on the locale determined by the facescontext.",
	"Method": "String getLocalizedString(String bundleName,String key,String getLocalizedString,HttpServletRequest request,String bundleName,String key){\r\n    ResourceLoader rb = new ResourceLoader(bundleName);\r\n    return rb.getString(key);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.restful.SignupEvent.truncateSeconds",
	"Comment": "set the second value to zero. it only need to accurate to minutes level.\totherwise it may cause one minute shorter display confusion",
	"Method": "Date truncateSeconds(Date time){\r\n    if (time == null)\r\n        return null;\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(time);\r\n    cal.set(Calendar.SECOND, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    return cal.getTime();\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.AbstractCXFTest.startServer",
	"Comment": "starts a local cxf server that listens for defined soap operation.\tthis means that each operation should have its own test.",
	"Method": "void startServer(Class<T> type){\r\n    JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\r\n    sf.setResourceClasses(type);\r\n    List<Object> providers = new ArrayList<Object>();\r\n    sf.setProviders(providers);\r\n    AbstractWebService service = MockingAbstractWebService.getMockedAbstractWebService(type);\r\n    addServiceMocks(service);\r\n    sf.setResourceProvider(type, new SingletonResourceProvider(service, true));\r\n    sf.setAddress(getFullEndpointAddress());\r\n    server = sf.create();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.ItemHashUtilTest.newExtendedMatchingItem",
	"Comment": "they really should, but without this method, code duplication becomes an even more serious problem",
	"Method": "ItemData newExtendedMatchingItem(){\r\n    final ItemData item = new ItemData();\r\n    item.setTypeId(TypeIfc.EXTENDED_MATCHING_ITEMS);\r\n    final Set<ItemTextIfc> itemTextSet = Sets.newSet();\r\n    final ItemText themeText = new ItemText(item, ItemTextIfc.EMI_THEME_TEXT_SEQUENCE, resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[0])), Sets.newSet());\r\n    final ItemText leadInText = new ItemText(item, ItemTextIfc.EMI_LEAD_IN_TEXT_SEQUENCE, resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[1])), Sets.newSet());\r\n    itemTextSet.add(themeText);\r\n    itemTextSet.add(leadInText);\r\n    item.setCorrectItemFeedback(resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[2])));\r\n    item.setInCorrectItemFeedback(resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[3])));\r\n    item.setGeneralItemFeedback(resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[4])));\r\n    item.setDescription(resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[5])));\r\n    final ItemMetaDataIfc metaData1 = newItemMetaData(item, ItemMetaDataIfc.RANDOMIZE, 6);\r\n    final ItemMetaDataIfc metaData2 = newItemMetaData(item, ItemMetaDataIfc.REQUIRE_ALL_OK, 7);\r\n    item.setItemMetaDataSet(Sets.newSet(metaData1, metaData2));\r\n    final ItemAttachment attachment1 = new ItemAttachment(1L, item, idForContentResource(CONTENT_RESOURCES[8]), CONTENT_RESOURCES[8][CR_NAME_IDX], null, Long.MAX_VALUE - 1, null, null, null, null, null, null, null, null);\r\n    final ItemAttachment attachment2 = new ItemAttachment(2L, item, idForContentResource(CONTENT_RESOURCES[18]), CONTENT_RESOURCES[18][CR_NAME_IDX], null, Long.MAX_VALUE - 1, null, null, null, null, null, null, null, null);\r\n    item.setItemAttachmentSet(Sets.newSet(attachment1, attachment2));\r\n    final Answer answer1 = new Answer();\r\n    answer1.setItem(item);\r\n    answer1.setSequence(1L);\r\n    answer1.setIsCorrect(true);\r\n    answer1.setLabel(resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[9])));\r\n    answer1.setText(\"Answer Text 1\");\r\n    final Answer answer2 = new Answer();\r\n    answer2.setItem(item);\r\n    answer2.setSequence(2L);\r\n    answer2.setIsCorrect(true);\r\n    answer2.setLabel(resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[10])));\r\n    answer2.setText(\"Answer Text 2\");\r\n    final ItemText answerOptions = new ItemText(item, ItemTextIfc.EMI_ANSWER_OPTIONS_SEQUENCE, resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[11])), Sets.newSet(answer1, answer2));\r\n    answer1.setItemText(answerOptions);\r\n    answer2.setItemText(answerOptions);\r\n    itemTextSet.add(answerOptions);\r\n    final Answer answer3 = new Answer();\r\n    answer3.setItem(item);\r\n    answer3.setSequence(3L);\r\n    answer3.setIsCorrect(true);\r\n    answer3.setLabel(\"Answer Label 3\");\r\n    answer3.setText(\"Answer Text 3\");\r\n    final Answer answer4 = new Answer();\r\n    answer4.setItem(item);\r\n    answer4.setSequence(4L);\r\n    answer4.setIsCorrect(false);\r\n    answer4.setLabel(\"Answer Label 4\");\r\n    answer4.setText(\"Answer Text 4\");\r\n    final Answer answer5 = new Answer();\r\n    answer5.setItem(item);\r\n    answer5.setSequence(5L);\r\n    answer5.setIsCorrect(true);\r\n    answer5.setLabel(\"Answer Label 5\");\r\n    answer5.setText(\"Answer Text 5\");\r\n    final ItemText answerCombination1 = new ItemText(item, Long.MAX_VALUE, resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[12])), Sets.newSet(answer3, answer4, answer5));\r\n    answer3.setItemText(answerCombination1);\r\n    answer4.setItemText(answerCombination1);\r\n    answer5.setItemText(answerCombination1);\r\n    final ItemTextAttachmentIfc itemTextAttachment1 = new ItemTextAttachment(1L, answerOptions, idForContentResource(CONTENT_RESOURCES[13]), CONTENT_RESOURCES[13][CR_NAME_IDX], \"text/text\", 1024L, \"Item Text Attachment Description 1\", \"Location 1\", false, AttachmentIfc.ACTIVE_STATUS, \"admin\", new Date(), \"admin\", new Date());\r\n    final ItemTextAttachmentIfc itemTextAttachment2 = new ItemTextAttachment(2L, answerOptions, idForContentResource(CONTENT_RESOURCES[14]), CONTENT_RESOURCES[14][CR_NAME_IDX], \"text/text\", 1024L, \"Item Text Attachment Description 2\", \"Location 2\", false, AttachmentIfc.ACTIVE_STATUS, \"admin\", new Date(), \"admin\", new Date());\r\n    final Set<ItemTextAttachmentIfc> itemTextAttachmentSet1 = Sets.newSet(itemTextAttachment1, itemTextAttachment2);\r\n    answerCombination1.setItemTextAttachmentSet(itemTextAttachmentSet1);\r\n    itemTextSet.add(answerCombination1);\r\n    final Answer answer6 = new Answer();\r\n    answer6.setItem(item);\r\n    answer6.setSequence(6L);\r\n    answer6.setIsCorrect(true);\r\n    answer6.setLabel(\"Answer Label 6\");\r\n    answer6.setText(\"Answer Text 6\");\r\n    final Answer answer7 = new Answer();\r\n    answer7.setItem(item);\r\n    answer7.setSequence(7L);\r\n    answer7.setIsCorrect(false);\r\n    answer7.setLabel(\"Answer Label 7\");\r\n    answer7.setText(\"Answer Text 7\");\r\n    final Answer answer8 = new Answer();\r\n    answer8.setItem(item);\r\n    answer8.setSequence(8L);\r\n    answer8.setIsCorrect(true);\r\n    answer8.setLabel(\"Answer Label 8\");\r\n    answer8.setText(\"Answer Text 8\");\r\n    final ItemText answerCombination2 = new ItemText(item, Long.MAX_VALUE, resourceDocTemplate1(fullUrlForContentResource(CONTENT_RESOURCES[15])), Sets.newSet(answer6, answer7, answer8));\r\n    answer6.setItemText(answerCombination1);\r\n    answer7.setItemText(answerCombination1);\r\n    answer8.setItemText(answerCombination1);\r\n    final ItemTextAttachmentIfc itemTextAttachment3 = new ItemTextAttachment(3L, answerOptions, idForContentResource(CONTENT_RESOURCES[16]), CONTENT_RESOURCES[16][CR_NAME_IDX], \"text/text\", 1024L, \"Item Text Attachment Description 3\", \"Location 3\", false, AttachmentIfc.ACTIVE_STATUS, \"admin\", new Date(), \"admin\", new Date());\r\n    final ItemTextAttachmentIfc itemTextAttachment4 = new ItemTextAttachment(4L, answerOptions, idForContentResource(CONTENT_RESOURCES[17]), CONTENT_RESOURCES[17][CR_NAME_IDX], \"text/text\", 1024L, \"Item Text Attachment Description 4\", \"Location 4\", false, AttachmentIfc.ACTIVE_STATUS, \"admin\", new Date(), \"admin\", new Date());\r\n    final Set<ItemTextAttachmentIfc> itemTextAttachmentSet2 = Sets.newSet(itemTextAttachment3, itemTextAttachment4);\r\n    answerCombination2.setItemTextAttachmentSet(itemTextAttachmentSet2);\r\n    itemTextSet.add(answerCombination2);\r\n    item.setItemTextSet(itemTextSet);\r\n    final ItemTag itemTag = new ItemTag(item, \"tag1\", \"taglabel1\", \"tagcollection1\", \"tagcollectionname1\");\r\n    item.setItemTagSet(Sets.newSet(itemTag));\r\n    return item;\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.RandomisedUrlService.resolve",
	"Comment": "gets the encoded url for the given shortened url.\tthis is used by the randomisedurlservice servlet to translate short urls back into their original urls.",
	"Method": "String resolve(String key){\r\n    if (StringUtils.isBlank(key)) {\r\n        return null;\r\n    }\r\n    String value = (String) cache.get(key);\r\n    if (value != null) {\r\n        return encodeUrl(value);\r\n    }\r\n    RandomisedUrl randomisedUrl = null;\r\n    HibernateCallback<RandomisedUrl> hcb = session -> {\r\n        Query q = session.getNamedQuery(QUERY_GET_URL);\r\n        q.setParameter(KEY, key, StringType.INSTANCE);\r\n        q.setMaxResults(1);\r\n        return (RandomisedUrl) q.uniqueResult();\r\n    };\r\n    randomisedUrl = getHibernateTemplate().execute(hcb);\r\n    if (randomisedUrl == null) {\r\n        log.warn(\"Request for invalid record: \" + key);\r\n        postEvent(ShortenedUrlService.EVENT_GET_URL_BAD, PREFIX + key, false);\r\n        return null;\r\n    }\r\n    log.debug(\"Request for valid record: \" + key);\r\n    postEvent(ShortenedUrlService.EVENT_GET_URL_OK, PREFIX + key, false);\r\n    String url = randomisedUrl.getUrl();\r\n    addToCache(key, url);\r\n    String encodedUrl = encodeUrl(url);\r\n    if (StringUtils.isBlank(encodedUrl)) {\r\n        return null;\r\n    }\r\n    log.debug(\"URL: \" + encodedUrl);\r\n    return encodedUrl;\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.PrivacyBean.getMessageBundleString",
	"Comment": "pulls the message from the message bundle using the name passed in",
	"Method": "String getMessageBundleString(String key){\r\n    return msgs.getString(key);\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaRetrievalOptionsBuilder.withIdentifierQuoteString",
	"Comment": "overrides the jdbc driver provided information about the identifierquote string.",
	"Method": "SchemaRetrievalOptionsBuilder withIdentifierQuoteString(String identifierQuoteString){\r\n    if (isBlank(identifierQuoteString)) {\r\n        this.identifierQuoteString = \"\";\r\n    } else {\r\n        this.identifierQuoteString = identifierQuoteString;\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.AuthoringHelper.createImportedQuestionPool",
	"Comment": "import an assessment xml document in qti format, extract & persist the data. import process assumes assessment structure, not objectbank or itembank",
	"Method": "QuestionPoolFacade createImportedQuestionPool(Document document){\r\n    QuestionPoolFacade questionpool = new QuestionPoolFacade();\r\n    QuestionPoolService questionPoolService = new QuestionPoolService();\r\n    try {\r\n        String me = AgentFacade.getAgentString();\r\n        ExtractionHelper exHelper = new ExtractionHelper(this.qtiVersion);\r\n        ItemService itemService = new ItemService();\r\n        Document removeNamespace = exHelper.getTransformDocument(exHelper.REMOVE_NAMESPACE_TRANSFORM);\r\n        Document flatNamespaceXml = XmlUtil.transformDocument(document, removeNamespace);\r\n        Assessment assessmentXml = new Assessment(flatNamespaceXml);\r\n        boolean success = validateImportXml(flatNamespaceXml);\r\n        if (!success) {\r\n            throw (new RuntimeException(\"Invalid QTI XML format.\"));\r\n        }\r\n        Map assessmentMap = exHelper.mapAssessment(assessmentXml);\r\n        String title = (String) assessmentMap.get(\"title\");\r\n        questionpool.setOwnerId(me);\r\n        questionpool.setTitle(title);\r\n        questionpool.setLastModifiedById(me);\r\n        questionpool.setAccessTypeId(QuestionPoolFacade.ACCESS_DENIED);\r\n        questionpool = questionPoolService.savePool(questionpool);\r\n        exHelper.updateQuestionPool(questionpool, assessmentMap);\r\n        String baseId = questionpool.getQuestionPoolId().toString();\r\n        boolean isUnique = questionPoolService.poolIsUnique(baseId, title, \"0\", me);\r\n        if (!isUnique) {\r\n            synchronized (title) {\r\n                log.debug(\"Questionpool \" + title + \" is not unique.\");\r\n                int count = 0;\r\n                while (!isUnique) {\r\n                    title = exHelper.renameDuplicate(title);\r\n                    log.debug(\"renameDuplicate(title): \" + title);\r\n                    questionpool.setTitle(title);\r\n                    isUnique = questionPoolService.poolIsUnique(baseId, title, \"0\", me);\r\n                    if (count++ > 99)\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        List sectionList = exHelper.getSectionXmlList(assessmentXml);\r\n        int sectionListSize = sectionList.size();\r\n        log.debug(\"sections=\" + sectionListSize);\r\n        Set itemSet = new HashSet();\r\n        questionpool.setQuestionPoolItems(itemSet);\r\n        for (int sec = 0; sec < sectionListSize; sec++) {\r\n            Section sectionXml = (Section) sectionList.get(sec);\r\n            Map sectionMap = exHelper.mapSection(sectionXml);\r\n            List itemList = exHelper.getItemXmlList(sectionXml);\r\n            for (int itm = 0; itm < itemList.size(); itm++) {\r\n                log.debug(\"items=\" + itemList.size());\r\n                Item itemXml = (Item) itemList.get(itm);\r\n                ItemFacade item = new ItemFacade();\r\n                exHelper.updateItem(item, itemXml);\r\n                item.setCreatedBy(me);\r\n                item.setCreatedDate(questionpool.getLastModified());\r\n                item.setLastModifiedBy(me);\r\n                item.setLastModifiedDate(questionpool.getLastModified());\r\n                item.setStatus(ItemDataIfc.ACTIVE_STATUS);\r\n                itemService.saveItem(item);\r\n                EventTrackingService.post(EventTrackingService.newEvent(SamigoConstants.EVENT_ASSESSMENT_SAVEITEM, \"/sam/\" + AgentFacade.getCurrentSiteId() + \"/saved itemId=\" + item.getItemId().toString(), true));\r\n                QuestionPoolItemData questionPoolItem = new QuestionPoolItemData();\r\n                questionPoolItem.setQuestionPoolId(questionpool.getQuestionPoolId());\r\n                questionPoolItem.setItemId(item.getItemId());\r\n                questionpool.addQuestionPoolItem((QuestionPoolItemIfc) questionPoolItem);\r\n            }\r\n        }\r\n        questionPoolService.savePool(questionpool);\r\n        return questionpool;\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        questionPoolService.deletePool(questionpool.getQuestionPoolId(), AgentFacade.getAgentString(), null);\r\n        throw new RuntimeException(e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.SignupPermissionsUpdateBean.init",
	"Comment": "it will initialize the a list of realmitem objects, which contain all the\trealm information",
	"Method": "void init(){\r\n    this.realmItems = getCurrentSiteRealmItems();\r\n}"
}, {
	"Path": "org.sakaiproject.search.tool.SearchAdminBeanImpl.doRebuildInstance",
	"Comment": "rebuild the index from scratch, this dumps the existing index and reloads\tall entities from the entitycontentproviders",
	"Method": "void doRebuildInstance(String indexBuilderName){\r\n    if (!superUser) {\r\n        throw new PermissionException(userName, \"site.update\", siteCheck);\r\n    }\r\n    searchService.rebuildIndex(indexBuilderName);\r\n    commandFeedback = Messages.getString(\"searchadmin_statok\");\r\n    ;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.authz.AuthorizationBean.addAllPrivilege",
	"Comment": "this info is stored in the authorizationservice hashmap for the entire session.",
	"Method": "void addAllPrivilege(String siteId){\r\n    boolean p1 = canCreateAssessment(siteId);\r\n    boolean p2 = canEditAnyAssessment(siteId);\r\n    boolean p3 = canEditOwnAssessment(siteId);\r\n    boolean p4 = canDeleteAnyAssessment(siteId);\r\n    boolean p5 = canDeleteOwnAssessment(siteId);\r\n    boolean p6 = canPublishAnyAssessment(siteId);\r\n    boolean p7 = canPublishOwnAssessment(siteId);\r\n    boolean p8 = canGradeAnyAssessment(siteId);\r\n    boolean p9 = canGradeOwnAssessment(siteId);\r\n    boolean p10 = canCreateQuestionPool(siteId);\r\n    boolean p11 = canEditOwnQuestionPool(siteId);\r\n    boolean p12 = canDeleteOwnQuestionPool(siteId);\r\n    boolean p13 = canCopyOwnQuestionPool(siteId);\r\n    boolean p14 = canCreateTemplate(siteId);\r\n    boolean p15 = canEditOwnTemplate(siteId);\r\n    boolean p16 = canDeleteOwnTemplate(siteId);\r\n    canTakeAssessment(siteId);\r\n    canSubmitAssessmentForGrade(siteId);\r\n    adminNewAssessmentPrivilege = p1;\r\n    addAdminPrivilege(adminNewAssessmentPrivilege, \"admin.new.assessment\", siteId);\r\n    adminCoreAssessmentPrivilege = p2 || p3 || p4 || p5 || p6 || p7;\r\n    addAdminPrivilege(adminCoreAssessmentPrivilege, \"admin.core.assessment\", siteId);\r\n    adminPublishedAssessmentPrivilege = p8 || p9;\r\n    addAdminPrivilege(adminPublishedAssessmentPrivilege, \"admin.published.assessment\", siteId);\r\n    adminAssessmentPrivilege = p1 || p2 || p3 || p4 || p5 || p6 || p7 || p8 || p9;\r\n    addAdminPrivilege(adminAssessmentPrivilege, \"admin.assessment\", siteId);\r\n    adminQuestionPoolPrivilege = p10 || p11 || p12 || p13;\r\n    addAdminPrivilege(adminQuestionPoolPrivilege, \"admin.questionpool\", siteId);\r\n    adminTemplatePrivilege = p14 || p15 || p16;\r\n    addAdminPrivilege(adminTemplatePrivilege, \"admin.template\", siteId);\r\n    adminPrivilege = adminAssessmentPrivilege || adminQuestionPoolPrivilege || adminTemplatePrivilege;\r\n    addAdminPrivilege(adminPrivilege, \"admin.privilege\", siteId);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.AuthorBean.isInactivePublishedAscending",
	"Comment": "is inactive published assessment table sorted in ascending order",
	"Method": "boolean isInactivePublishedAscending(){\r\n    return inactivePublishedAscending;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.SectionContentsBean.getNumbering",
	"Comment": "total number of questions to list, based on numbering scheme",
	"Method": "int getNumbering(){\r\n    return numbering;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.doSite_copyFromCourseTemplate",
	"Comment": "create course site from template, next step would be select roster",
	"Method": "void doSite_copyFromCourseTemplate(RunData data){\r\n    ParameterParser params = data.getParameters();\r\n    SessionState state = ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\r\n    readCreateSiteTemplateInformation(params, state);\r\n    redirectCourseCreation(params, state, \"selectTermTemplate\");\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.CreateMeetings.createRecurMeetings",
	"Comment": "it will generate a list of signupmeeting object and wrap up with\tcorresponding contents for saving to db",
	"Method": "void createRecurMeetings(Calendar calendar,long numOfRecurs,int intervalOfRecurs){\r\n    int eday, sday, sdday, edday;\r\n    if (!ONCE_ONLY.equals(signupMeeting.getRepeatType()) && numOfRecurs < 1) {\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"event.repeatbeforestart\"));\r\n        return;\r\n    }\r\n    if (!ONCE_ONLY.equals(signupMeeting.getRepeatType()) && \"0\".equals(this.recurLengthDataType))\r\n        numOfRecurs = numOfRecurs - 1;\r\n    for (int i = 0; i <= numOfRecurs; i++) {\r\n        SignupMeeting beta = new SignupMeeting();\r\n        beta = prepareDeepCopy(this.signupMeeting, i * intervalOfRecurs);\r\n        calendar.setTime(this.signupMeeting.getStartTime());\r\n        sday = calendar.get(Calendar.DATE) + i * intervalOfRecurs;\r\n        calendar.set(Calendar.DATE, sday);\r\n        beta.setStartTime(calendar.getTime());\r\n        int makeupOnceDueToWeekend = 0;\r\n        if (WEEKDAYS.equals(signupMeeting.getRepeatType()) && \"0\".equals(this.recurLengthDataType)) {\r\n            int dayOfweek = calendar.get(Calendar.DAY_OF_WEEK);\r\n            if (dayOfweek == Calendar.SATURDAY || dayOfweek == Calendar.SUNDAY)\r\n                makeupOnceDueToWeekend = 1;\r\n        }\r\n        calendar.setTime(this.signupMeeting.getEndTime());\r\n        eday = calendar.get(Calendar.DATE) + i * intervalOfRecurs;\r\n        calendar.set(Calendar.DATE, eday);\r\n        beta.setEndTime(calendar.getTime());\r\n        calendar.setTime(this.signupMeeting.getSignupBegins());\r\n        sdday = calendar.get(Calendar.DATE) + i * intervalOfRecurs;\r\n        calendar.set(Calendar.DATE, sdday);\r\n        if (START_NOW.equals(this.signupBeginType)) {\r\n            beta.setSignupBegins(Utilities.subTractTimeToDate(new Date(), 6, START_NOW));\r\n        } else {\r\n            beta.setSignupBegins(calendar.getTime());\r\n        }\r\n        calendar.setTime(this.signupMeeting.getSignupDeadline());\r\n        edday = calendar.get(Calendar.DATE) + i * intervalOfRecurs;\r\n        calendar.set(Calendar.DATE, edday);\r\n        beta.setSignupDeadline(calendar.getTime());\r\n        beta.setSignupAttachments(copyAttachments(this.signupMeeting, numOfRecurs, i));\r\n        beta.setInMultipleCalendarBlocks(this.signupMeeting.isInMultipleCalendarBlocks());\r\n        if (this.assignParticatpantsToFirstOne) {\r\n            this.assignParticitpantsToAllEvents = false;\r\n            this.assignParticatpantsToFirstOne = false;\r\n        }\r\n        this.signupMeetings.add(beta);\r\n        numOfRecurs += makeupOnceDueToWeekend;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SakaiFacadeImpl.addUserToGroup",
	"Comment": "helper to add a user to a group. this does not save anything. it is merely a helper to add the user to the group object and return it.",
	"Method": "Group addUserToGroup(String userUuid,Group group){\r\n    Site site = group.getContainingSite();\r\n    Role r = site.getUserRole(userUuid);\r\n    Member m = site.getMember(userUuid);\r\n    Role memberRole = m != null ? m.getRole() : null;\r\n    try {\r\n        group.insertMember(userUuid, r != null ? r.getId() : memberRole != null ? memberRole.getId() : \"\", m != null ? m.isActive() : true, false);\r\n    } catch (IllegalStateException e) {\r\n        log.error(\".addUserToGroup: User with id {} cannot be inserted in group with id {} because the group is locked\", userUuid, group.getId());\r\n    }\r\n    return group;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.qti.XMLController.setUpXml",
	"Comment": "logic for set xml string in xml bean with or without xml declaration.",
	"Method": "void setUpXml(String xml,boolean includeXmlDecl){\r\n    boolean hasXmlDecl = false;\r\n    String startDecl = \"<?xml version\";\r\n    String endDecl = \"?>\";\r\n    int endDeclLength = endDecl.length();\r\n    if (xml.startsWith(startDecl)) {\r\n        hasXmlDecl = true;\r\n    }\r\n    if (includeXmlDecl) {\r\n        if (!hasXmlDecl) {\r\n            xml = XML_DECL + xml;\r\n        }\r\n    } else {\r\n        if (hasXmlDecl) {\r\n            int declEndIndex = xml.indexOf(endDecl);\r\n            xml = xml.substring(declEndIndex + endDeclLength);\r\n        }\r\n    }\r\n    xmlBean.setXml(xml);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.sortSections",
	"Comment": "helper method for sortcmobject \tby order from sakai properties if specified or \tby default of eid, title\tusing velocity sorttool",
	"Method": "Collection sortSections(Collection<Section> sections){\r\n    String[] keys = ServerConfigurationService.getStrings(SORT_KEY_SECTION);\r\n    String[] orders = ServerConfigurationService.getStrings(SORT_ORDER_SECTION);\r\n    return sortCmObject(sections, keys, orders);\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.helper.DiffHelperBean.getDiffBean",
	"Comment": "get the diffbean for the current rwikiobject and the request",
	"Method": "DiffBean getDiffBean(){\r\n    return diffBean;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.AttendanceSignupBean.doCancel",
	"Comment": "this is a jsf action call method by ui to cancel the attendance changes",
	"Method": "String doCancel(){\r\n    reset();\r\n    return MAIN_EVENTS_LIST_PAGE_URL;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.PagedResourceActionII.enableObserver",
	"Comment": "enable the observer, unless we are in search mode, where we want it disabled.",
	"Method": "void enableObserver(SessionState state){\r\n    ObservingCourier observer = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\r\n    if (observer != null) {\r\n        if ((state.getAttribute(STATE_SEARCH) != null) || (state.getAttribute(STATE_MANUAL_REFRESH) != null)) {\r\n            observer.disable();\r\n        } else {\r\n            observer.enable();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.crawl.MetadataResultSet.getInt",
	"Comment": "reads the value of a column from the result set as an integer. ifthe value was null, returns the default.",
	"Method": "int getInt(String columnName,int defaultValue){\r\n    int value = defaultValue;\r\n    if (useColumn(columnName)) {\r\n        try {\r\n            value = results.getInt(columnName);\r\n            if (results.wasNull()) {\r\n                LOGGER.log(Level.FINER, new StringFormat(\"NULL int value for column <%s>, so using default %d\", columnName, defaultValue));\r\n                value = defaultValue;\r\n            }\r\n        } catch (final SQLException e) {\r\n            LOGGER.log(Level.WARNING, new StringFormat(\"Could not read integer value for column <%s>\", columnName), e);\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.getStateSite",
	"Comment": "get the site object based on sessionstate attribute values",
	"Method": "Site getStateSite(SessionState state,Site getStateSite,SessionState state,boolean autoContext){\r\n    Site site = null;\r\n    if (state.getAttribute(STATE_SITE_INSTANCE_ID) != null) {\r\n        try {\r\n            site = SiteService.getSite((String) state.getAttribute(STATE_SITE_INSTANCE_ID));\r\n        } catch (Exception ignore) {\r\n        }\r\n    }\r\n    if (site == null && autoContext) {\r\n        String siteId = ToolManager.getCurrentPlacement().getContext();\r\n        try {\r\n            site = SiteService.getSite(siteId);\r\n            state.setAttribute(STATE_SITE_INSTANCE_ID, siteId);\r\n        } catch (Exception ignore) {\r\n        }\r\n    }\r\n    return site;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.SkinnableCharonPortal.sendPortalRedirect",
	"Comment": "send a redirect so our portal window ends up at the url, via javascript.",
	"Method": "void sendPortalRedirect(HttpServletResponse res,String url){\r\n    PortalRenderContext rcontext = startPageContext(\"\", null, null, null, null);\r\n    rcontext.put(\"redirectUrl\", url);\r\n    sendResponse(rcontext, res, \"portal-redirect\", null);\r\n}"
}, {
	"Path": "schemacrawler.utility.Identifiers.isToBeQuoted",
	"Comment": "checks if a given identifier name needs to be quoted. it usesgeneralized rules which are common across the majority ofdatabases.",
	"Method": "boolean isToBeQuoted(String name){\r\n    if (name == null || name.isEmpty() || isQuotedName(name)) {\r\n        return false;\r\n    }\r\n    switch(identifierQuotingStrategy) {\r\n        case quote_none:\r\n            return false;\r\n        case quote_all:\r\n            return true;\r\n        case quote_if_special_characters:\r\n            return !isIdentifier(name);\r\n        case quote_if_special_characters_and_reserved_words:\r\n        default:\r\n            return !isIdentifier(name) || isReservedWord(name);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.TimeslotWrapper.addAttendee",
	"Comment": "this method performs adding attendee into current time slot.",
	"Method": "void addAttendee(SignupAttendee attendee,String displayName){\r\n    if (attendeeWrappers == null)\r\n        attendeeWrappers = new ArrayList<AttendeeWrapper>();\r\n    timeSlot.getAttendees().add(attendee);\r\n    AttendeeWrapper wrapper = new AttendeeWrapper(attendee, displayName);\r\n    attendeeWrappers.add(wrapper);\r\n    wrapper.setPositionIndex(attendeeWrappers.size() - 1);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Diff.randomEdit",
	"Comment": "performs random edits on the input sequence. useful for testing.",
	"Method": "Object[] randomEdit(Object[] text,Object[] randomEdit,Object[] text,long seed){\r\n    List result = new ArrayList(Arrays.asList(text));\r\n    Random r = new Random(seed);\r\n    int nops = r.nextInt(10);\r\n    for (int i = 0; i < nops; i++) {\r\n        boolean del = r.nextBoolean();\r\n        int pos = r.nextInt(result.size() + 1);\r\n        int len = Math.min(result.size() - pos, 1 + r.nextInt(4));\r\n        if (del && result.size() > 0) {\r\n            result.subList(pos, pos + len).clear();\r\n        } else {\r\n            for (int k = 0; k < len; k++, pos++) {\r\n                result.add(pos, \"[\" + i + \"] random edit[\" + i + \"][\" + i + \"]\");\r\n            }\r\n        }\r\n    }\r\n    return result.toArray();\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.handlers.SiteHandler.findPageIdFromToolId",
	"Comment": "if the page id is the mutablepageid then see if can resolve it from the\tthe placement of the tool with a supplied tool id.",
	"Method": "String findPageIdFromToolId(String pageId,String toolContextPath,Site site){\r\n    String toolSegment = \"/tool/\";\r\n    String toolId = null;\r\n    try {\r\n        if (toolContextPath.contains(toolSegment)) {\r\n            toolId = toolContextPath.substring(toolContextPath.lastIndexOf(toolSegment) + toolSegment.length());\r\n            ToolConfiguration toolConfig = site.getToolForCommonId(toolId);\r\n            log.debug(\"trying to resolve page id from toolId: [{}]\", toolId);\r\n            if (toolConfig != null) {\r\n                pageId = toolConfig.getPageId();\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        log.error(\"exception resolving page id from toolid :[\" + toolId + \"]\", e);\r\n    }\r\n    return pageId;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.HistoryBean.getRevertToRevisionUrl",
	"Comment": "using the currently set interestedrevision returns an url that will cause\ta revert to that revision.",
	"Method": "String getRevertToRevisionUrl(){\r\n    return \"?\" + PAGENAME_URL_ENCODED + \"=\" + urlEncode(getPageName()) + \"&\" + ACTION_URL_ENCODED + \"=\" + urlEncode(WikiPageAction.REVERT_ACTION.getName()) + \"&\" + PANEL_URL_ENCODED + \"=\" + MAIN_URL_ENCODED + \"&\" + HistoryBean.REVISION_URL_ENCODED + \"=\" + interestedRevision + \"&\" + VERSION_URL_ENCODED + \"=\" + urlEncode(\"\" + time);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.model.SignupMeeting.getTimeslot",
	"Comment": "this method will obtain the signuptimeslot object according to the\ttimeslot id",
	"Method": "SignupTimeslot getTimeslot(Long timeslotId){\r\n    if (signupTimeSlots == null) {\r\n        return null;\r\n    }\r\n    for (SignupTimeslot timeslot : signupTimeSlots) {\r\n        if (timeslot.getId().equals(timeslotId)) {\r\n            return timeslot;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TranslationController.getAllowedPlaneTypes",
	"Comment": "gets a reference to the enumset that determines which types of arcore planes thistranslationcontroller is allowed to translate on.",
	"Method": "EnumSet<Plane.Type> getAllowedPlaneTypes(){\r\n    return allowedPlaneTypes;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.util.ToolUtils.getPageForTool",
	"Comment": "look through the pages in a site and find the page that corresponds to a tool.",
	"Method": "SitePage getPageForTool(Site site,String toolId){\r\n    if (site == null || toolId == null)\r\n        return null;\r\n    List pages = site.getOrderedPages();\r\n    for (Iterator i = pages.iterator(); i.hasNext(); ) {\r\n        SitePage p = (SitePage) i.next();\r\n        List<ToolConfiguration> pTools = p.getTools();\r\n        Iterator<ToolConfiguration> toolz = pTools.iterator();\r\n        while (toolz.hasNext()) {\r\n            ToolConfiguration tc = toolz.next();\r\n            Tool to = tc.getTool();\r\n            if (toolId.equals(tc.getId())) {\r\n                return p;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.Activity.getUserActivity",
	"Comment": "returns a list of events of a user between 2 dates. as this one requires 2 date objects,it is the one to be called as a normal webservice.",
	"Method": "String getUserActivity(String sessionid,String eid,Date startDate,Date endDate){\r\n    Session session = establishSession(sessionid);\r\n    if (!securityService.isSuperUser()) {\r\n        log.warn(\"WS getUserActivity(): Permission denied. Restricted to super users.\");\r\n        throw new RuntimeException(\"WS getUserActivity(): Permission denied. Restricted to super users.\");\r\n    }\r\n    return eventQueryService.getUserActivity(eid, startDate, endDate);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.attendee.EditCommentSignupMBean.getUserType",
	"Comment": "checks if the user is an organizer and returns the comment note",
	"Method": "String getUserType(){\r\n    boolean isOrganizer = meetingWrapper.getMeeting().getPermission().isUpdate();\r\n    if (isOrganizer)\r\n        return Utilities.rb.getString(ATTENDEE_EDIT_COMMENT_NOTE);\r\n    else\r\n        return Utilities.rb.getString(ORGANIZER_EDIT_COMMENT_NOTE);\r\n}"
}, {
	"Path": "org.sakaiproject.provider.user.SampleUserDirectoryProvider.destroy",
	"Comment": "returns to uninitialized state. you can use this method to release resources thet your service allocated when turbine shuts down.",
	"Method": "void destroy(){\r\n    log.info(\"destroy()\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.resetpass.FormHandler.resetPassClassic",
	"Comment": "the classic method that mails a new password\ttemplate is constructed from strings in resource bundle",
	"Method": "String resetPassClassic(){\r\n    log.info(\"getting password for \" + userBean.getEmail());\r\n    String from = serverConfigurationService.getString(\"setup.request\", null);\r\n    if (from == null) {\r\n        log.warn(this + \" - no 'setup.request' in configuration\");\r\n        from = \"postmaster@\".concat(serverConfigurationService.getServerName());\r\n    }\r\n    SecurityAdvisor sa = new SecurityAdvisor() {\r\n        public SecurityAdvice isAllowed(String userId, String function, String reference) {\r\n            if (SECURE_UPDATE_USER_ANY.equals(function)) {\r\n                return SecurityAdvice.ALLOWED;\r\n            }\r\n            return SecurityAdvice.PASS;\r\n        }\r\n    };\r\n    try {\r\n        securityService.pushAdvisor(sa);\r\n        UserEdit userE = userDirectoryService.editUser(userBean.getUser().getId().trim());\r\n        String pass = getRandPass();\r\n        userE.setPassword(pass);\r\n        userDirectoryService.commitEdit(userE);\r\n        String productionSiteName = serverConfigurationService.getString(\"reset-pass.productionSiteName\", \"\");\r\n        if (productionSiteName == null || \"\".equals(productionSiteName))\r\n            productionSiteName = serverConfigurationService.getString(\"ui.service\", \"\");\r\n        StringBuffer buff = new StringBuffer();\r\n        buff.setLength(0);\r\n        buff.append(messageLocator.getMessage(\"mailBodyPre\", userE.getDisplayName()) + \"\\n\\n\");\r\n        buff.append(messageLocator.getMessage(\"mailBody1\", new Object[] { productionSiteName, serverConfigurationService.getPortalUrl() }) + \"\\n\\n\");\r\n        buff.append(messageLocator.getMessage(\"mailBody2\", new Object[] { userE.getEid() }) + \"\\n\");\r\n        buff.append(messageLocator.getMessage(\"mailBody3\", new Object[] { pass }) + \"\\n\\n\");\r\n        if (serverConfigurationService.getString(\"mail.support\", null) != null)\r\n            buff.append(messageLocator.getMessage(\"mailBody4\", new Object[] { serverConfigurationService.getString(\"mail.support\") }) + \"\\n\\n\");\r\n        log.debug(messageLocator.getMessage(\"mailBody1\", new Object[] { productionSiteName }));\r\n        buff.append(messageLocator.getMessage(\"mailBodySalut\") + \"\\n\");\r\n        buff.append(messageLocator.getMessage(\"mailBodySalut1\", productionSiteName));\r\n        String body = buff.toString();\r\n        List<String> headers = new ArrayList<String>();\r\n        headers.add(\"Precedence: bulk\");\r\n        emailService.send(from, userBean.getUser().getEmail(), messageLocator.getMessage(\"mailSubject\", new Object[] { productionSiteName }), body, userBean.getUser().getEmail(), null, headers);\r\n        log.info(\"New password emailed to: \" + userE.getEid() + \" (\" + userE.getId() + \")\");\r\n        eventService.post(eventService.newEvent(\"user.resetpass\", userE.getReference(), true));\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return null;\r\n    } finally {\r\n        securityService.popAdvisor(sa);\r\n    }\r\n    return \"Success\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.resetpass.FormHandler.resetPassClassic",
	"Comment": "the classic method that mails a new password\ttemplate is constructed from strings in resource bundle",
	"Method": "String resetPassClassic(){\r\n    if (SECURE_UPDATE_USER_ANY.equals(function)) {\r\n        return SecurityAdvice.ALLOWED;\r\n    }\r\n    return SecurityAdvice.PASS;\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.AbstractCXFTest.addCXFClientMocks",
	"Comment": "this is a utility method that contains some mocks that are required for cxf local testing.\tit adds the http.request to the request context.",
	"Method": "void addCXFClientMocks(WebClient client){\r\n    Map<String, Object> requestContext = WebClient.getConfig(client).getRequestContext();\r\n    requestContext.put(LocalConduit.DIRECT_DISPATCH, Boolean.TRUE);\r\n    HashSet<String> include = new HashSet();\r\n    include.add(AbstractHTTPDestination.HTTP_REQUEST);\r\n    requestContext.put(LocalTransportFactory.MESSAGE_INCLUDE_PROPERTIES, include);\r\n    HttpServletRequest mockRequest = mock(HttpServletRequest.class);\r\n    when(mockRequest.getRemoteAddr()).thenReturn(\"127.0.0.1\");\r\n    when(mockRequest.getRequestURL()).thenReturn(new StringBuffer());\r\n    when(mockRequest.getPathInfo()).thenReturn(\"\");\r\n    when(mockRequest.getContextPath()).thenReturn(\"\");\r\n    when(mockRequest.getServletPath()).thenReturn(\"\");\r\n    requestContext.put(AbstractHTTPDestination.HTTP_REQUEST, mockRequest);\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.api.report.ReportParams.isWhatLimitedAction",
	"Comment": "check if is configured for reporting only on a specific resource action.",
	"Method": "boolean isWhatLimitedAction(){\r\n    return whatLimitedAction;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SakaiFacadeImpl.init",
	"Comment": "regist all the permission levels, which signup tool required. place any\tcode that should run when this class is initialized by spring here",
	"Method": "void init(){\r\n    log.debug(\"init\");\r\n    functionManager.registerFunction(SIGNUP_VIEW);\r\n    functionManager.registerFunction(SIGNUP_VIEW_ALL);\r\n    functionManager.registerFunction(SIGNUP_ATTEND);\r\n    functionManager.registerFunction(SIGNUP_ATTEND_ALL);\r\n    functionManager.registerFunction(SIGNUP_CREATE_SITE);\r\n    functionManager.registerFunction(SIGNUP_CREATE_GROUP);\r\n    functionManager.registerFunction(SIGNUP_CREATE_GROUP_ALL);\r\n    functionManager.registerFunction(SIGNUP_DELETE_SITE);\r\n    functionManager.registerFunction(SIGNUP_DELETE_GROUP);\r\n    functionManager.registerFunction(SIGNUP_DELETE_GROUP_ALL);\r\n    functionManager.registerFunction(SIGNUP_UPDATE_SITE);\r\n    functionManager.registerFunction(SIGNUP_UPDATE_GROUP);\r\n    functionManager.registerFunction(SIGNUP_UPDATE_GROUP_ALL);\r\n}"
}, {
	"Path": "org.radeox.macro.table.Table.appendTo",
	"Comment": "serialize table by appending it to a writer. the output format is html.",
	"Method": "Writer appendTo(Writer writer){\r\n    writer.write(\"<table\");\r\n    Set keySet = tableAttributes.keySet();\r\n    String[] toSort = new String[keySet.size()];\r\n    {\r\n        int i = 0;\r\n        for (Iterator it = keySet.iterator(); it.hasNext(); i++) {\r\n            toSort[i] = (String) it.next();\r\n        }\r\n    }\r\n    Arrays.sort(toSort);\r\n    for (int i = 0; i < toSort.length; i++) {\r\n        String key = toSort[i];\r\n        writer.write(' ');\r\n        writer.write(key);\r\n        writer.write(\"=\\\"\");\r\n        writer.write((String) tableAttributes.get(key));\r\n        writer.write(\"\\\"\");\r\n    }\r\n    writer.write(\">\");\r\n    List[] outputRows = (List[]) rows.toArray(new List[rows.size()]);\r\n    int rowSize = outputRows.length;\r\n    boolean odd = true;\r\n    for (int i = 0; i < rowSize; i++) {\r\n        writer.write(\"<tr\");\r\n        if (i == 0) {\r\n            writer.write(\">\");\r\n        } else if (odd) {\r\n            writer.write(\" class=\\\"table-odd\\\">\");\r\n            odd = false;\r\n        } else {\r\n            writer.write(\" class=\\\"table-even\\\">\");\r\n            odd = true;\r\n        }\r\n        String[] outputCols = (String[]) outputRows[i].toArray(new String[outputRows[i].size()]);\r\n        int colSize = outputCols.length;\r\n        for (int j = 0; j < colSize; j++) {\r\n            writer.write(i == 0 ? \"<th scope=\\\"col\\\">\" : \"<td>\");\r\n            if (outputCols[j] == null || outputCols[j].trim().length() == 0) {\r\n                writer.write(\"&#160;\");\r\n            } else {\r\n                writer.write(outputCols[j]);\r\n            }\r\n            writer.write(i == 0 ? \"<\/th>\" : \"<\/td>\");\r\n        }\r\n        writer.write(\"<\/tr>\");\r\n    }\r\n    writer.write(\"<\/table>\");\r\n    return writer;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.BaseArFragment.getPlaneDiscoveryController",
	"Comment": "gets the plane discovery controller, which displays instructions for how to scan for planes.",
	"Method": "PlaneDiscoveryController getPlaneDiscoveryController(){\r\n    return planeDiscoveryController;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.item.ItemHelper12Impl.addIncorrectAnswer",
	"Comment": "flags an answer as incorrect.currently, only used for true false questions.",
	"Method": "void addIncorrectAnswer(String incorrectAnswerLabel,Item itemXml){\r\n    this.flagAnswerCorrect(incorrectAnswerLabel, itemXml, false);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.augmentedimage.AugmentedImageNode.setImage",
	"Comment": "called when the augmentedimage is detected and should be rendered. a sceneform node tree iscreated based on an anchor created from the image. the corners are then positioned based on theextents of the image. there is no need to worry about world coordinates since everything isrelative to the center of the image, which is the parent node of the corners.",
	"Method": "void setImage(AugmentedImage image){\r\n    this.image = image;\r\n    if (!ulCorner.isDone() || !urCorner.isDone() || !llCorner.isDone() || !lrCorner.isDone()) {\r\n        CompletableFuture.allOf(ulCorner, urCorner, llCorner, lrCorner).thenAccept((Void aVoid) -> setImage(image)).exceptionally(throwable -> {\r\n            Log.e(TAG, \"Exception loading\", throwable);\r\n            return null;\r\n        });\r\n    }\r\n    setAnchor(image.createAnchor(image.getCenterPose()));\r\n    Vector3 localPosition = new Vector3();\r\n    Node cornerNode;\r\n    localPosition.set(-0.5f * image.getExtentX(), 0.0f, -0.5f * image.getExtentZ());\r\n    cornerNode = new Node();\r\n    cornerNode.setParent(this);\r\n    cornerNode.setLocalPosition(localPosition);\r\n    cornerNode.setRenderable(ulCorner.getNow(null));\r\n    localPosition.set(0.5f * image.getExtentX(), 0.0f, -0.5f * image.getExtentZ());\r\n    cornerNode = new Node();\r\n    cornerNode.setParent(this);\r\n    cornerNode.setLocalPosition(localPosition);\r\n    cornerNode.setRenderable(urCorner.getNow(null));\r\n    localPosition.set(0.5f * image.getExtentX(), 0.0f, 0.5f * image.getExtentZ());\r\n    cornerNode = new Node();\r\n    cornerNode.setParent(this);\r\n    cornerNode.setLocalPosition(localPosition);\r\n    cornerNode.setRenderable(lrCorner.getNow(null));\r\n    localPosition.set(-0.5f * image.getExtentX(), 0.0f, 0.5f * image.getExtentZ());\r\n    cornerNode = new Node();\r\n    cornerNode.setParent(this);\r\n    cornerNode.setLocalPosition(localPosition);\r\n    cornerNode.setRenderable(llCorner.getNow(null));\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.GenericDiffBean.getColorDiffTable",
	"Comment": "creates the rows for an xhtml table representing the differences between\tthe left and right revision contents. this table is created using\tcolordifftablerevisionvisitor",
	"Method": "String getColorDiffTable(){\r\n    ColorDiffTableRevisionVisitor rv = new ColorDiffTableRevisionVisitor();\r\n    difference.accept(rv);\r\n    return rv.getTableRows();\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.readCourseSectionInfo",
	"Comment": "read the input information of subject, course and section in the manual\tsite creation page",
	"Method": "void readCourseSectionInfo(SessionState state,ParameterParser params){\r\n    String option = params.getString(\"option\");\r\n    int oldNumber = 1;\r\n    if (state.getAttribute(STATE_MANUAL_ADD_COURSE_NUMBER) != null) {\r\n        oldNumber = ((Integer) state.getAttribute(STATE_MANUAL_ADD_COURSE_NUMBER)).intValue();\r\n    }\r\n    int validInputSites = 0;\r\n    boolean validInput = true;\r\n    List multiCourseInputs = new Vector();\r\n    for (int i = 0; i < oldNumber; i++) {\r\n        List requiredFields = sectionFieldProvider.getRequiredFields();\r\n        List aCourseInputs = new Vector();\r\n        int emptyInputNum = 0;\r\n        for (int k = 0; k < requiredFields.size(); k++) {\r\n            SectionField sectionField = (SectionField) requiredFields.get(k);\r\n            String fieldLabel = sectionField.getLabelKey();\r\n            String fieldInput = StringUtils.trimToEmpty(params.getString(fieldLabel + i));\r\n            sectionField.setValue(fieldInput);\r\n            aCourseInputs.add(sectionField);\r\n            if (fieldInput.length() == 0) {\r\n                emptyInputNum++;\r\n            }\r\n        }\r\n        if (emptyInputNum == 0) {\r\n            multiCourseInputs.add(validInputSites++, aCourseInputs);\r\n        } else if (emptyInputNum == requiredFields.size()) {\r\n            if (option.equalsIgnoreCase(\"change\")) {\r\n                multiCourseInputs.add(validInputSites++, aCourseInputs);\r\n            }\r\n        } else {\r\n            validInput = false;\r\n        }\r\n    }\r\n    if (option.equalsIgnoreCase(\"change\")) {\r\n        if (params.getString(\"number\") != null) {\r\n            int newNumber = Integer.parseInt(params.getString(\"number\"));\r\n            state.setAttribute(STATE_MANUAL_ADD_COURSE_NUMBER, Integer.valueOf(oldNumber + newNumber));\r\n            List requiredFields = sectionFieldProvider.getRequiredFields();\r\n            for (int j = 0; j < newNumber; j++) {\r\n                List aCourseInputs = new Vector();\r\n                for (int m = 0; m < requiredFields.size(); m++) {\r\n                    aCourseInputs = sectionFieldProvider.getRequiredFields();\r\n                }\r\n                multiCourseInputs.add(aCourseInputs);\r\n            }\r\n        }\r\n    }\r\n    state.setAttribute(STATE_MANUAL_ADD_COURSE_FIELDS, multiCourseInputs);\r\n    if (!option.equalsIgnoreCase(\"change\")) {\r\n        if (!validInput || validInputSites == 0) {\r\n            addAlert(state, rb.getString(\"java.miss\"));\r\n        }\r\n        state.setAttribute(STATE_MANUAL_ADD_COURSE_NUMBER, Integer.valueOf(validInputSites > 1 ? validInputSites : 1));\r\n    }\r\n    state.setAttribute(FORM_ADDITIONAL, StringUtils.trimToEmpty(params.getString(\"additional\")));\r\n    SiteInfo siteInfo = new SiteInfo();\r\n    if (state.getAttribute(STATE_SITE_INFO) != null) {\r\n        siteInfo = (SiteInfo) state.getAttribute(STATE_SITE_INFO);\r\n    }\r\n    if (siteInfo.title == null || siteInfo.title.length() == 0) {\r\n        siteInfo.title = constructManualAddTitle(state);\r\n        state.setAttribute(STATE_SITE_INFO, siteInfo);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.grading.GradingSectionAwareServiceImpl.getSectionEnrollments",
	"Comment": "the section enrollment list will not be returned unless the user has access to it.",
	"Method": "List getSectionEnrollments(String Uid,String sectionUid,String userUid){\r\n    return helper.getSectionEnrollments(Uid, sectionUid, userUid);\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.PrivacyBean.isShow",
	"Comment": "return true if privacy set to visible, false if set to hidden",
	"Method": "boolean isShow(){\r\n    if (isMyWorkspace()) {\r\n        return privacyManager.isViewable(curSite, getUserId());\r\n    } else {\r\n        return privacyManager.isViewable(getContextId(), getUserId());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupTrackingItem.addToRemovedTimeslotList",
	"Comment": "add to the signuptimeslot object list when a user is removed from that\ttime slot",
	"Method": "void addToRemovedTimeslotList(SignupTimeslot timeslot){\r\n    removedFromTimeslot.add(timeslot);\r\n}"
}, {
	"Path": "org.sakaiproject.vm.VmServlet.getVmReference",
	"Comment": "access the object set in the velocity context for this name, if any.",
	"Method": "Object getVmReference(String name,HttpServletRequest request){\r\n    return request.getAttribute(name);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.DeliveryBean.getTableOfContents",
	"Comment": "bean with table of contents information anda list of all the sections in the assessmentwhich inturn has a list of all the item contents.",
	"Method": "ContentsDeliveryBean getTableOfContents(){\r\n    return tableOfContents;\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.redirectToQuestionVM",
	"Comment": "depend on the setup question setting, redirect the site setup flow",
	"Method": "void redirectToQuestionVM(SessionState state,String type){\r\n    SiteTypeQuestions siteTypeQuestions = questionService.getSiteTypeQuestions(type);\r\n    if (siteTypeQuestions != null) {\r\n        List questionList = siteTypeQuestions.getQuestions();\r\n        if (questionList != null && !questionList.isEmpty()) {\r\n            if (state.getAttribute(STATE_MESSAGE) == null) {\r\n                state.setAttribute(STATE_SITE_SETUP_QUESTION_NEXT_TEMPLATE, state.getAttribute(STATE_TEMPLATE_INDEX));\r\n                state.setAttribute(STATE_TEMPLATE_INDEX, \"54\");\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.author.ItemAddListener.selectAnswers",
	"Comment": "for the current choice, loop through all answers and add unique matches to the list of valid matches for the choice.",
	"Method": "ItemText selectAnswers(MatchItemBean choicebean,List<MatchItemBean> matchItemBeanList,ItemFacade item,ItemBean bean){\r\n    List<MatchItemBean> validAnswers = new ArrayList<MatchItemBean>();\r\n    Iterator<MatchItemBean> validAnswerIter = matchItemBeanList.iterator();\r\n    while (validAnswerIter.hasNext()) {\r\n        MatchItemBean validAnswer = validAnswerIter.next();\r\n        if (MatchItemBean.CONTROLLING_SEQUENCE_DEFAULT.equals(validAnswer.getControllingSequence())) {\r\n            validAnswers.add(validAnswer);\r\n        }\r\n    }\r\n    ItemText choicetext = new ItemText();\r\n    choicetext.setItem(item.getData());\r\n    choicetext.setSequence(choicebean.getSequence());\r\n    choicetext.setText(stripPtags(choicebean.getChoice()));\r\n    Set<AnswerIfc> answerSet = new HashSet<AnswerIfc>();\r\n    for (int i = 0; i < validAnswers.size(); i++) {\r\n        Answer answer = null;\r\n        MatchItemBean answerbean = validAnswers.get(i);\r\n        if (answerbean.getSequence().equals(choicebean.getSequence()) || answerbean.getSequenceStr().equals(choicebean.getControllingSequence())) {\r\n            answer = new Answer(choicetext, stripPtags(answerbean.getMatch()), answerbean.getSequence(), AnswerBean.getChoiceLabels()[i], Boolean.TRUE, null, Double.valueOf(bean.getItemScore()), Double.valueOf(0d), Double.valueOf(bean.getItemDiscount()));\r\n        } else {\r\n            answer = new Answer(choicetext, stripPtags(answerbean.getMatch()), answerbean.getSequence(), AnswerBean.getChoiceLabels()[i], Boolean.FALSE, null, Double.valueOf(bean.getItemScore()), Double.valueOf(0d), Double.valueOf(bean.getItemDiscount()));\r\n        }\r\n        HashSet<AnswerFeedback> answerFeedbackSet = new HashSet<AnswerFeedback>();\r\n        answerFeedbackSet.add(new AnswerFeedback(answer, AnswerFeedbackIfc.CORRECT_FEEDBACK, stripPtags(answerbean.getCorrMatchFeedback())));\r\n        answerFeedbackSet.add(new AnswerFeedback(answer, AnswerFeedbackIfc.INCORRECT_FEEDBACK, stripPtags(answerbean.getIncorrMatchFeedback())));\r\n        answer.setAnswerFeedbackSet(answerFeedbackSet);\r\n        answerSet.add(answer);\r\n    }\r\n    choicetext.setAnswerSet(answerSet);\r\n    return choicetext;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Delta.getRevised",
	"Comment": "accessor method to return the chunk representing the updated sequence of\titems.",
	"Method": "Chunk getRevised(){\r\n    return revised;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.handlers.DirectToolHandler.doDirectTool",
	"Comment": "do direct tool, takes the url, stored the destination and the target\tiframe in the session constructs and outer url and when a request comes\tin that matches the stored iframe it ejects the destination address",
	"Method": "int doDirectTool(HttpServletRequest req,HttpServletResponse res,Session session,String placementId,String toolContextPath,String toolPathInfo){\r\n    if (portal.redirectIfLoggedOut(res))\r\n        return ABORT;\r\n    ToolConfiguration siteTool = SiteService.findTool(placementId);\r\n    if (siteTool == null) {\r\n        portal.doError(req, res, session, Portal.ERROR_WORKSITE);\r\n        return END;\r\n    }\r\n    if (portalService.isResetRequested(req)) {\r\n        Session s = SessionManager.getCurrentSession();\r\n        ToolSession ts = s.getToolSession(placementId);\r\n        ts.clearAttributes();\r\n        portalService.setResetState(null);\r\n        log.debug(\"Tool state reset\");\r\n    }\r\n    ActiveTool tool = ActiveToolManager.getActiveTool(siteTool.getToolId());\r\n    if (tool == null) {\r\n        portal.doError(req, res, session, Portal.ERROR_WORKSITE);\r\n        return END;\r\n    }\r\n    String portalPath = serverConfigurationService.getString(\"portalPath\", \"/portal\");\r\n    if (toolContextPath.startsWith(portalPath + \"/directtool/\")) {\r\n        toolContextPath = portalPath + \"/site/\" + siteTool.getSiteId() + toolContextPath.substring(portalPath.length());\r\n    }\r\n    if (tool.getAccessSecurity() == Tool.AccessSecurity.PORTAL) {\r\n        Site site = null;\r\n        try {\r\n            site = SiteService.getSiteVisit(siteTool.getSiteId());\r\n        } catch (IdUnusedException e) {\r\n            portal.doError(req, res, session, Portal.ERROR_WORKSITE);\r\n            return END;\r\n        } catch (PermissionException e) {\r\n            if (session.getUserId() == null) {\r\n                StoredState ss = portalService.newStoredState(\"directtool\", \"tool\");\r\n                ss.setRequest(req);\r\n                ss.setPlacement(siteTool);\r\n                ss.setToolContextPath(toolContextPath);\r\n                ss.setToolPathInfo(toolPathInfo);\r\n                ss.setSkin(siteTool.getSkin());\r\n                portalService.setStoredState(ss);\r\n                portal.doLogin(req, res, session, portal.getPortalPageUrl(siteTool), false);\r\n            } else {\r\n                portal.doError(req, res, session, Portal.ERROR_WORKSITE);\r\n            }\r\n            return END;\r\n        }\r\n    }\r\n    StoredState ss = portalService.newStoredState(\"directtool\", \"tool\");\r\n    ss.setRequest(req);\r\n    ss.setPlacement(siteTool);\r\n    ss.setToolContextPath(toolContextPath);\r\n    ss.setToolPathInfo(toolPathInfo);\r\n    ss.setSkin(siteTool.getSkin());\r\n    portalService.setStoredState(ss);\r\n    portal.forwardPortal(tool, req, res, siteTool, siteTool.getSkin(), toolContextPath, toolPathInfo);\r\n    return END;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.DiffBean.getGenericDiffBean",
	"Comment": "creates a genericdiffbean using the contents of the left\tand right revisions",
	"Method": "GenericDiffBean getGenericDiffBean(){\r\n    if (db == null) {\r\n        db = new GenericDiffBean(left.getContent(), right.getContent());\r\n    }\r\n    return db;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupCalendarHelperImpl.generateEvent",
	"Comment": "helper to generate a calendar event from some pieces of data",
	"Method": "CalendarEventEdit generateEvent(SignupMeeting m,CalendarEventEdit generateEvent,SignupMeeting m,SignupTimeslot ts,CalendarEventEdit generateEvent,String siteId,Date startTime,Date endTime,String title,String description,String location){\r\n    Calendar calendar;\r\n    CalendarEventEdit event = null;\r\n    try {\r\n        calendar = sakaiFacade.getCalendar(siteId);\r\n        if (calendar == null) {\r\n            return null;\r\n        }\r\n        event = calendar.addEvent();\r\n        event.setType(\"Meeting\");\r\n        TimeService timeService = sakaiFacade.getTimeService();\r\n        Time start = timeService.newTime(startTime.getTime());\r\n        Time end = timeService.newTime(endTime.getTime());\r\n        TimeRange timeRange = timeService.newTimeRange(start, end, true, false);\r\n        event.setRange(timeRange);\r\n        event.setDisplayName(title);\r\n        event.setDescription(PlainTextFormat.convertFormattedHtmlTextToICalText(addWarningMessageForCancellation(description, siteId)));\r\n        event.setLocation(location);\r\n        String url = getSiteAccessUrl(siteId);\r\n        if (StringUtils.isNotBlank(url)) {\r\n            event.setField(\"vevent_url\", url);\r\n        }\r\n    } catch (PermissionException e) {\r\n        log.error(\"SignupCalendarHelperImpl.generateEvent: \" + e);\r\n        return null;\r\n    }\r\n    return event;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.backingbean.EditSectionBean.isDuplicateSectionTitle",
	"Comment": "returns true if the title is a duplicate of another section.",
	"Method": "boolean isDuplicateSectionTitle(){\r\n    for (Iterator iter = getAllSiteSections().iterator(); iter.hasNext(); ) {\r\n        CourseSection sec = (CourseSection) iter.next();\r\n        if (sec.getUuid().equals(sectionUuid)) {\r\n            continue;\r\n        }\r\n        if (sec.getTitle().equals(section.getTitle())) {\r\n            if (log.isDebugEnabled())\r\n                log.debug(\"Conflicting section name found.\");\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.portal.charon.site.PortalSiteHelperImpl.isHidden",
	"Comment": "check to see if a tool placement is hidden.\tcan be used to check is a page should be hidden.",
	"Method": "boolean isHidden(Placement placement){\r\n    return getToolManager().isHidden(placement);\r\n}"
}, {
	"Path": "schemacrawler.tools.databaseconnector.DatabaseConnector.checkDatabaseConnectionOptions",
	"Comment": "checks if the database connection options are valid, the jdbcdriver class can be loaded, and so on. throws an exception if thereis a problem.",
	"Method": "void checkDatabaseConnectionOptions(){\r\n    newDatabaseConnectionOptions(new SingleUseUserCredentials(), null);\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileLogicImpl.transformSakaiPersonToUserProfile",
	"Comment": "convenience method to map a sakaiperson object onto a userprofile object",
	"Method": "UserProfile transformSakaiPersonToUserProfile(UserProfile p,SakaiPerson sp){\r\n    p.setNickname(sp.getNickname());\r\n    p.setDateOfBirth(sp.getDateOfBirth());\r\n    p.setPersonalSummary(sp.getNotes());\r\n    p.setHomepage(sp.getLabeledURI());\r\n    p.setWorkphone(sp.getTelephoneNumber());\r\n    p.setHomephone(sp.getHomePhone());\r\n    p.setMobilephone(sp.getMobile());\r\n    p.setFacsimile(sp.getFacsimileTelephoneNumber());\r\n    p.setDepartment(sp.getOrganizationalUnit());\r\n    p.setPosition(sp.getTitle());\r\n    p.setSchool(sp.getCampus());\r\n    p.setRoom(sp.getRoomNumber());\r\n    p.setStaffProfile(sp.getStaffProfile());\r\n    p.setAcademicProfileUrl(sp.getAcademicProfileUrl());\r\n    p.setUniversityProfileUrl(sp.getUniversityProfileUrl());\r\n    p.setPublications(sp.getPublications());\r\n    p.setCourse(sp.getEducationCourse());\r\n    p.setSubjects(sp.getEducationSubjects());\r\n    p.setFavouriteBooks(sp.getFavouriteBooks());\r\n    p.setFavouriteTvShows(sp.getFavouriteTvShows());\r\n    p.setFavouriteMovies(sp.getFavouriteMovies());\r\n    p.setFavouriteQuotes(sp.getFavouriteQuotes());\r\n    p.setBusinessBiography(sp.getBusinessBiography());\r\n    return p;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.setEvaluationModel",
	"Comment": "set the evaluationmodel of the person who last modified assessmentbasefacade",
	"Method": "void setEvaluationModel(EvaluationModelIfc evaluationModel){\r\n    this.evaluationModel = evaluationModel;\r\n    this.data.setEvaluationModel(evaluationModel);\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.PagedResourceHelperAction.enableObserver",
	"Comment": "enable the observer, unless we are in search mode, where we want it disabled.",
	"Method": "void enableObserver(SessionState state){\r\n    ObservingCourier observer = (ObservingCourier) state.getAttribute(STATE_OBSERVER);\r\n    if (observer != null) {\r\n        if ((state.getAttribute(STATE_SEARCH) != null) || (state.getAttribute(STATE_MANUAL_REFRESH) != null)) {\r\n            observer.disable();\r\n        } else {\r\n            observer.enable();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.portlets.PortletIFrame.sourceUrl",
	"Comment": "compute the actual url we will used, based on the configuration special and source urls",
	"Method": "String sourceUrl(String special,String source,String context,boolean macroExpansion,boolean passPid,String pid,String sakaiPropertiesUrlKey){\r\n    String rv = StringUtils.trimToNull(source);\r\n    if (SPECIAL_SITE.equals(special)) {\r\n        rv = StringUtils.trimToNull(getLocalizedURL(\"server.info.url\"));\r\n    } else if (SPECIAL_WORKSPACE.equals(special)) {\r\n        rv = StringUtils.trimToNull(getLocalizedURL(\"myworkspace.info.url\"));\r\n    } else if (SPECIAL_WORKSITE.equals(special)) {\r\n        try {\r\n            Site s = SiteService.getSite(context);\r\n            rv = StringUtils.trimToNull(s.getInfoUrlFull());\r\n            if (rv == null) {\r\n                rv = ServerConfigurationService.getAccessUrl() + s.getReference();\r\n            }\r\n        } catch (Exception any) {\r\n        }\r\n    } else if (sakaiPropertiesUrlKey != null && sakaiPropertiesUrlKey.length() > 1) {\r\n        rv = StringUtils.trimToNull(ServerConfigurationService.getString(sakaiPropertiesUrlKey));\r\n    }\r\n    if (rv == null || rv.equals(\"http://\") || rv.equals(\"https://\")) {\r\n        rv = StringUtils.trimToNull(getLocalizedURL(\"webcontent.instructions.url\"));\r\n    }\r\n    if (rv != null) {\r\n        rv = convertReferenceUrl(rv);\r\n        if (passPid) {\r\n            if (rv.indexOf(\"?\") < 0) {\r\n                rv = rv + \"?\";\r\n            } else {\r\n                rv = rv + \"&\";\r\n            }\r\n            rv = rv + \"pid=\" + pid;\r\n        }\r\n        if (macroExpansion) {\r\n            rv = doMacroExpansion(rv);\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.toCharArray",
	"Comment": "return a text image of the archive as a char array.this is useful for writing the archive to a file withouthaving the characters be interpreted by the writer.",
	"Method": "char[] toCharArray(){\r\n    return toString(Archive.RCS_NEWLINE).toCharArray();\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Node.nextVersion",
	"Comment": "returns the version number that should correspond tothe revision folowing this node.",
	"Method": "Version nextVersion(){\r\n    return this.version.next();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.MessagingBean.getMessagesAndClear",
	"Comment": "returns the current list of facesmessages, then removes them from the local list.",
	"Method": "List getMessagesAndClear(){\r\n    List list = new ArrayList();\r\n    for (Iterator iter = messages.iterator(); iter.hasNext(); ) {\r\n        list.add(((MessageDecorator) iter.next()).getMessage());\r\n    }\r\n    messages.clear();\r\n    return list;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.logic.ProfileImageLogicImpl.getOfficialImageEncoded",
	"Comment": "get the official image data from the user properties, encoded in base64",
	"Method": "String getOfficialImageEncoded(String userUuid){\r\n    User u = sakaiProxy.getUserById(userUuid);\r\n    return u.getProperties().getProperty(sakaiProxy.getOfficialImageAttribute());\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.impl.event.EventUtil.getIntersectionWithAvailableToolsInSite",
	"Comment": "intersect an event registry subset with tools available in site.",
	"Method": "List<ToolInfo> getIntersectionWithAvailableToolsInSite(SiteService M_ss,List<ToolInfo> eventRegistrySubset,String siteId){\r\n    List<ToolInfo> intersected = new ArrayList<ToolInfo>();\r\n    Site site = null;\r\n    try {\r\n        site = M_ss.getSite(siteId);\r\n    } catch (IdUnusedException e) {\r\n        return eventRegistrySubset;\r\n    }\r\n    List<ToolConfiguration> siteTools = new ArrayList<ToolConfiguration>();\r\n    for (Iterator<SitePage> iPages = site.getPages().iterator(); iPages.hasNext(); ) {\r\n        SitePage page = iPages.next();\r\n        siteTools.addAll(page.getTools());\r\n    }\r\n    Iterator<ToolInfo> iTED = eventRegistrySubset.iterator();\r\n    while (iTED.hasNext()) {\r\n        ToolInfo t = iTED.next();\r\n        Iterator<ToolConfiguration> iST = siteTools.iterator();\r\n        while (iST.hasNext()) {\r\n            if (intersects(iST.next().getToolId(), t)) {\r\n                intersected.add(t);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return intersected;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.widget.WidgetTabTemplate.getFooterMsg",
	"Comment": "gets an optional message that will be displayed at the bottom of the tab.",
	"Method": "Optional<IModel<String>> getFooterMsg(){\r\n    String localSakaiName = Locator.getFacade().getStatsManager().getLocalSakaiName();\r\n    StringResourceModel model = new StringResourceModel(\"widget_server_time_msg\", getPage(), null, new Object[] { localSakaiName });\r\n    return Optional.of(model);\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.helper.order.impl.SitePageEditHandler.cancel",
	"Comment": "allows the cancel button to return control to the tool calling this helper",
	"Method": "String cancel(){\r\n    ToolSession session = sessionManager.getCurrentToolSession();\r\n    session.setAttribute(ATTR_TOP_REFRESH, Boolean.TRUE);\r\n    setNextPage(session, SiteConstants.SITE_INFO_TEMPLATE_INDEX);\r\n    return \"done\";\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.convertDateToString",
	"Comment": "convert a date into a string according to format, or, if format\tis set to null, do a current locale based conversion.",
	"Method": "String convertDateToString(Date date,String format){\r\n    if (date == null || \"\".equals(format)) {\r\n        throw new IllegalArgumentException(\"Null Argument in Profile.convertDateToString()\");\r\n    }\r\n    String dateStr = null;\r\n    if (format != null) {\r\n        SimpleDateFormat dateFormat = new SimpleDateFormat(format);\r\n        dateStr = dateFormat.format(date);\r\n    } else {\r\n        Locale userLocale = (new ResourceLoader()).getLocale();\r\n        DateFormat formatter = DateFormat.getDateInstance(DateFormat.MEDIUM, userLocale);\r\n        dateStr = formatter.format(date);\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Profile.convertDateToString(): Input date: \" + date.toString());\r\n        log.debug(\"Profile.convertDateToString(): Converted date string: \" + dateStr);\r\n    }\r\n    return dateStr;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.getValueFromMapOrDefault",
	"Comment": "method for getting a value from a map based on the given key, but if it does not exist, use the given default",
	"Method": "Object getValueFromMapOrDefault(Map<?, ?> map,Object key,Object defaultValue){\r\n    return (map.containsKey(key) ? map.get(key) : defaultValue);\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Archive.getRevisionVersion",
	"Comment": "return the actual revision number of the active revision.the revision will be the tip of the branch identified asactive, or the head revision of the trunk if no branch is setas active.",
	"Method": "Version getRevisionVersion(Version vernum,Version getRevisionVersion,String vernum,Version getRevisionVersion){\r\n    if (branch != null) {\r\n        return getRevisionVersion(branch);\r\n    } else if (head != null) {\r\n        return head.getVersion();\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.PublishedAssessmentFacadeQueries.getTotalSubmissionForEachAssessment",
	"Comment": "get submission number for the assessment by giving the publishedassessmentidfor assessment deletion safe check",
	"Method": "Integer getTotalSubmissionForEachAssessment(Long publishedAssessmentId){\r\n    final HibernateCallback<List<Number>> hcb = session -> session.createQuery(\"select count(a) from AssessmentGradingData a where a.forGrade = :forgrade and a.publishedAssessmentId = :id\").setBoolean(\"forgrade\", true).setLong(\"id\", publishedAssessmentId).list();\r\n    List<Number> l = getHibernateTemplate().execute(hcb);\r\n    return l.get(0).intValue();\r\n}"
}, {
	"Path": "org.sakaiproject.site.util.SiteSetupQuestionFileParser.populateConfig",
	"Comment": "populate cached values from a configuration xml resource.we always try\tto parse the resource, regardless of any prior success or failure.",
	"Method": "SiteSetupQuestionMap populateConfig(String configurationXml,InputStream stream){\r\n    org.w3c.dom.Document document;\r\n    String value;\r\n    if ((document = parseXmlFromStream(stream)) == null) {\r\n        return null;\r\n    }\r\n    SiteSetupQuestionMap m = new SiteSetupQuestionMap();\r\n    Element rootElement = document.getDocumentElement();\r\n    NodeList childList = rootElement.getChildNodes();\r\n    if (childList == null || childList.getLength() == 0) {\r\n        log.warn(\"Cannot find elements in SiteSetupQuestions\");\r\n    } else {\r\n        for (int i = 0; i < childList.getLength(); i++) {\r\n            Node currentNode = childList.item(i);\r\n            switch(currentNode.getNodeType()) {\r\n                case Node.TEXT_NODE:\r\n                    break;\r\n                case Node.ELEMENT_NODE:\r\n                    if (currentNode.hasAttributes()) {\r\n                        NamedNodeMap nNMap = currentNode.getAttributes();\r\n                        String siteType = nNMap.getNamedItem(\"type\") != null ? nNMap.getNamedItem(\"type\").getNodeValue() : null;\r\n                        if (siteType != null) {\r\n                            SiteTypeQuestions siteTypeQuestions = questionService.newSiteTypeQuestions();\r\n                            siteTypeQuestions.setSiteType(siteType);\r\n                            NodeList qSetList = currentNode.getChildNodes();\r\n                            for (int i2 = 0; i2 < qSetList.getLength(); i2++) {\r\n                                Node qNode = qSetList.item(i2);\r\n                                switch(qNode.getNodeType()) {\r\n                                    case Node.TEXT_NODE:\r\n                                        break;\r\n                                    case Node.ELEMENT_NODE:\r\n                                        if (qNode.getNodeName().equals(\"header\")) {\r\n                                            siteTypeQuestions.setInstruction(qNode.getTextContent());\r\n                                        } else if (qNode.getNodeName().equals(\"url\")) {\r\n                                            NodeList qList = qNode.getChildNodes();\r\n                                            for (int i3 = 0; i3 < qList.getLength(); i3++) {\r\n                                                Node qDetailNode = qList.item(i3);\r\n                                                switch(qDetailNode.getNodeType()) {\r\n                                                    case Node.TEXT_NODE:\r\n                                                        break;\r\n                                                    case Node.ELEMENT_NODE:\r\n                                                        if (qDetailNode.getNodeName().equals(\"a\")) {\r\n                                                            if (qDetailNode.hasAttributes()) {\r\n                                                                NamedNodeMap qDetailMap = qDetailNode.getAttributes();\r\n                                                                if (qDetailMap.getNamedItem(\"href\") != null) {\r\n                                                                    siteTypeQuestions.setUrl(qDetailMap.getNamedItem(\"href\").getNodeValue());\r\n                                                                } else if (qDetailMap.getNamedItem(\"target\") != null) {\r\n                                                                    siteTypeQuestions.setUrlTarget(qDetailMap.getNamedItem(\"target\").getNodeValue());\r\n                                                                }\r\n                                                            }\r\n                                                            siteTypeQuestions.setUrlLabel(qDetailNode.getTextContent());\r\n                                                        }\r\n                                                }\r\n                                            }\r\n                                        } else if (qNode.getNodeName().equals(\"question\")) {\r\n                                            SiteSetupQuestion q = questionService.newSiteSetupQuestion();\r\n                                            if (qNode.hasAttributes()) {\r\n                                                NamedNodeMap qMap = qNode.getAttributes();\r\n                                                if (qMap.getNamedItem(\"required\") != null) {\r\n                                                    q.setRequired(Boolean.valueOf(qMap.getNamedItem(\"required\").getNodeValue()));\r\n                                                } else {\r\n                                                    q.setRequired(false);\r\n                                                }\r\n                                                if (qMap.getNamedItem(\"multiple_answers\") != null) {\r\n                                                    q.setIsMultipleAnswers(Boolean.valueOf(qMap.getNamedItem(\"multiple_answers\").getNodeValue()));\r\n                                                } else {\r\n                                                    q.setIsMultipleAnswers(false);\r\n                                                }\r\n                                                NodeList qList = qNode.getChildNodes();\r\n                                                for (int i3 = 0; i3 < qList.getLength(); i3++) {\r\n                                                    Node qDetailNode = qList.item(i3);\r\n                                                    switch(qDetailNode.getNodeType()) {\r\n                                                        case Node.TEXT_NODE:\r\n                                                            break;\r\n                                                        case Node.ELEMENT_NODE:\r\n                                                            if (qDetailNode.getNodeName().equals(\"q\")) {\r\n                                                                q.setQuestion(qDetailNode.getTextContent());\r\n                                                            } else if (qDetailNode.getNodeName().equals(\"answer\")) {\r\n                                                                SiteSetupQuestionAnswer answer = questionService.newSiteSetupQuestionAnswer();\r\n                                                                if (qDetailNode.hasAttributes()) {\r\n                                                                    NamedNodeMap qDetailMap = qDetailNode.getAttributes();\r\n                                                                    if (qDetailMap.getNamedItem(\"fillin_blank\") != null) {\r\n                                                                        answer.setIsFillInBlank(Boolean.valueOf(qDetailMap.getNamedItem(\"fillin_blank\").getNodeValue()));\r\n                                                                    } else {\r\n                                                                        answer.setIsFillInBlank(false);\r\n                                                                    }\r\n                                                                }\r\n                                                                answer.setAnswer(qDetailNode.getTextContent());\r\n                                                                questionService.saveSiteSetupQuestionAnswer(answer);\r\n                                                                q.addAnswer(answer);\r\n                                                            }\r\n                                                            break;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            q.setCurrent(\"true\");\r\n                                            questionService.saveSiteSetupQuestion(q);\r\n                                            siteTypeQuestions.addQuestion(q);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                            questionService.saveSiteTypeQuestions(siteTypeQuestions);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    return m;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.model.ProfileImage.getUrl",
	"Comment": "get access to the url from either the external image that a user can set, or an official image.",
	"Method": "String getUrl(){\r\n    if (StringUtils.isNotBlank(externalImageUrl)) {\r\n        return externalImageUrl;\r\n    }\r\n    if (StringUtils.isNotBlank(officialImageUrl)) {\r\n        return officialImageUrl;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.EntryAttributeToUserTypeMapper.setReturnLiteralAttributeValueIfNoMapping",
	"Comment": "assign the behavior for calculating sakai user types when\tattribute values fail to map.",
	"Method": "void setReturnLiteralAttributeValueIfNoMapping(boolean returnLiteralAttributeValueIfNoMapping){\r\n    this.returnLiteralAttributeValueIfNoMapping = returnLiteralAttributeValueIfNoMapping;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.setAssessmentMetaDataSet",
	"Comment": "set assessment metadata set in assessmentbasefacade andassessmentbasefacade.data",
	"Method": "void setAssessmentMetaDataSet(Set assessmentMetaDataSet){\r\n    this.assessmentMetaDataSet = assessmentMetaDataSet;\r\n    this.data.setAssessmentMetaDataSet(assessmentMetaDataSet);\r\n    this.assessmentMetaDataMap = getAssessmentMetaDataMap(assessmentMetaDataSet);\r\n}"
}, {
	"Path": "org.sakaiproject.portal.render.portlet.servlet.SakaiServletActionRequest.getAttribute",
	"Comment": "this causes the placement id to be retrievabl from the request",
	"Method": "Object getAttribute(String attributeName){\r\n    if (PortalService.PLACEMENT_ATTRIBUTE.equals(attributeName)) {\r\n        return state.getId();\r\n    } else {\r\n        return super.getAttribute(attributeName);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.conversion.ProfileConverter.transformUserProfileToSakaiPerson",
	"Comment": "convenience method to map a userprofile object onto a sakaiperson object for persisting",
	"Method": "SakaiPerson transformUserProfileToSakaiPerson(UserProfile up){\r\n    log.info(\"Transforming: \" + up.toString());\r\n    String userUuid = up.getUserUuid();\r\n    if (StringUtils.isBlank(userUuid)) {\r\n        log.error(\"Profile was invalid (missing uuid), cannot transform.\");\r\n        return null;\r\n    }\r\n    SakaiPerson sakaiPerson = sakaiProxy.getSakaiPerson(userUuid);\r\n    if (sakaiPerson == null) {\r\n        sakaiPerson = sakaiProxy.createSakaiPerson(userUuid);\r\n        if (sakaiPerson == null) {\r\n            throw new ProfileNotDefinedException(\"Couldn't create a SakaiPerson for \" + userUuid);\r\n        }\r\n    }\r\n    sakaiPerson.setNickname(up.getNickname());\r\n    sakaiPerson.setDateOfBirth(up.getDateOfBirth());\r\n    sakaiPerson.setLabeledURI(up.getHomepage());\r\n    sakaiPerson.setTelephoneNumber(up.getWorkphone());\r\n    sakaiPerson.setHomePhone(up.getHomephone());\r\n    sakaiPerson.setMobile(up.getMobilephone());\r\n    sakaiPerson.setFacsimileTelephoneNumber(up.getFacsimile());\r\n    sakaiPerson.setOrganizationalUnit(up.getDepartment());\r\n    sakaiPerson.setTitle(up.getPosition());\r\n    sakaiPerson.setCampus(up.getSchool());\r\n    sakaiPerson.setRoomNumber(up.getRoom());\r\n    sakaiPerson.setStaffProfile(up.getStaffProfile());\r\n    sakaiPerson.setUniversityProfileUrl(up.getUniversityProfileUrl());\r\n    sakaiPerson.setAcademicProfileUrl(up.getAcademicProfileUrl());\r\n    sakaiPerson.setPublications(up.getPublications());\r\n    sakaiPerson.setEducationCourse(up.getCourse());\r\n    sakaiPerson.setEducationSubjects(up.getSubjects());\r\n    sakaiPerson.setFavouriteBooks(up.getFavouriteBooks());\r\n    sakaiPerson.setFavouriteTvShows(up.getFavouriteTvShows());\r\n    sakaiPerson.setFavouriteMovies(up.getFavouriteMovies());\r\n    sakaiPerson.setFavouriteQuotes(up.getFavouriteQuotes());\r\n    sakaiPerson.setNotes(up.getPersonalSummary());\r\n    return sakaiPerson;\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.truncate",
	"Comment": "trims text to the given maximum number of displayed characters.\tsupports html and preserves formatting.",
	"Method": "String truncate(String s,int maxNumOfChars,boolean isHtml){\r\n    if (StringUtils.isBlank(s)) {\r\n        return \"\";\r\n    }\r\n    if (isHtml) {\r\n        StringBuilder trimmedHtml = new StringBuilder();\r\n        FormattedText.trimFormattedText(s, maxNumOfChars, trimmedHtml);\r\n        return trimmedHtml.toString();\r\n    }\r\n    return StringUtils.substring(s, 0, maxNumOfChars);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.getAssessmentAccessControl",
	"Comment": "get the accesscontrol of the person who last modified assessmentbasefacade",
	"Method": "AssessmentAccessControlIfc getAssessmentAccessControl(){\r\n    try {\r\n        this.data = (AssessmentBaseIfc) assessment.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getAssessmentAccessControl();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.logic.SignupMeetingServiceImpl.isAllowToDelete",
	"Comment": "todo under what condition the organizer can delete the meeting? have to\thave all level permission? across site",
	"Method": "boolean isAllowToDelete(String userId,String siteId,SignupMeeting meeting){\r\n    if (sakaiFacade.isUserAdmin(userId))\r\n        return true;\r\n    SignupSite site = currentSite(meeting, siteId);\r\n    if (site != null) {\r\n        if (site.isSiteScope()) {\r\n            if (sakaiFacade.isAllowedSite(userId, SakaiFacade.SIGNUP_DELETE_SITE, site.getSiteId()))\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n        if (sakaiFacade.isAllowedSite(userId, SakaiFacade.SIGNUP_DELETE_GROUP_ALL, site.getSiteId()) || sakaiFacade.isAllowedSite(userId, SakaiFacade.SIGNUP_DELETE_SITE, site.getSiteId()))\r\n            return true;\r\n        boolean allowedTodelete = true;\r\n        List<SignupGroup> signupGroups = site.getSignupGroups();\r\n        for (SignupGroup group : signupGroups) {\r\n            if (!(sakaiFacade.isAllowedGroup(userId, SakaiFacade.SIGNUP_DELETE_GROUP, site.getSiteId(), group.getGroupId()) || sakaiFacade.isAllowedGroup(userId, SakaiFacade.SIGNUP_DELETE_GROUP_ALL, siteId, group.getGroupId()))) {\r\n                allowedTodelete = false;\r\n                break;\r\n            }\r\n        }\r\n        return allowedTodelete;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.item.ItemTypeExtractionStrategy.guessType",
	"Comment": "try to infer the type of imported question from string, such as title.",
	"Method": "String guessType(String candidate){\r\n    String itemType;\r\n    String lower = candidate.toLowerCase();\r\n    itemType = matchGuess(lower);\r\n    return itemType;\r\n}"
}, {
	"Path": "org.sakaiproject.accountvalidator.tool.producers.BaseValidationProducer.addResetPassLink",
	"Comment": "adds a link to the page for the user to request another validation token",
	"Method": "void addResetPassLink(UIContainer toFill,ValidationAccount va){\r\n    if (toFill == null || va == null) {\r\n        throw new IllegalArgumentException(\"null passed to addResetPassLink()\");\r\n    }\r\n    String url = null;\r\n    try {\r\n        url = getPasswordResetUrl();\r\n    } catch (IllegalArgumentException e) {\r\n        log.warn(\"Couldn't create a link to reset-pass; no instance of reset-pass found on the gateway\");\r\n    }\r\n    if (url != null) {\r\n        UIBranchContainer requestAnotherContainer = UIBranchContainer.make(toFill, \"requestAnotherContainer:\");\r\n        UIMessage.make(requestAnotherContainer, \"request.another.label\", \"validate.requestanother.label\");\r\n        String requestAnother = null;\r\n        if (ValidationAccount.ACCOUNT_STATUS_PASSWORD_RESET == va.getAccountStatus()) {\r\n            requestAnother = messageLocator.getMessage(\"validate.requestanother.reset\");\r\n        } else {\r\n            requestAnother = messageLocator.getMessage(\"validate.requestanother\");\r\n        }\r\n        UILink.make(requestAnotherContainer, \"request.another\", requestAnother, url);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.GradingService.cleanFormula",
	"Comment": "cleans up formula text so that whitespaces are normalized or removed",
	"Method": "String cleanFormula(String formula){\r\n    if (StringUtils.isEmpty(formula)) {\r\n        formula = \"\";\r\n    } else {\r\n        formula = StringUtils.trimToEmpty(formula).replaceAll(\"\\\\s+\", \" \");\r\n    }\r\n    return formula;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemBean.setRequireAllOk",
	"Comment": "this question require all answers right to have the full score?",
	"Method": "void setRequireAllOk(String requireAllOk){\r\n    this.requireAllOk = requireAllOk;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.util.ExtendedTimeDeliveryService.assessmentInitialized",
	"Comment": "depending on the scope the assessment info sometimes is not initialized.",
	"Method": "boolean assessmentInitialized(PublishedAssessmentFacade publishedAssessment){\r\n    if (publishedAssessment == null) {\r\n        return false;\r\n    }\r\n    if (publishedAssessment.getStartDate() != null) {\r\n        return true;\r\n    }\r\n    if (publishedAssessment.getDueDate() != null) {\r\n        return true;\r\n    }\r\n    if (publishedAssessment.getRetractDate() != null) {\r\n        return true;\r\n    }\r\n    return publishedAssessment.getTimeLimit() != null;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.EntryAttributeToUserTypeMapper.setReturnLiteralAttributeValueIfNoMapping",
	"Comment": "assign the behavior for calculating sakai user types when\tattribute values fail to map.",
	"Method": "void setReturnLiteralAttributeValueIfNoMapping(boolean returnLiteralAttributeValueIfNoMapping){\r\n    this.returnLiteralAttributeValueIfNoMapping = returnLiteralAttributeValueIfNoMapping;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.authz.integrated.AuthzQueriesFacade.getAssessments",
	"Comment": "this appears to be unused, it is also dangerous, as it is not in the api",
	"Method": "List<AuthorizationData> getAssessments(String agentId,String functionId){\r\n    if (agentId == null || functionId == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    HibernateCallback<List<AuthorizationData>> hcb = session -> {\r\n        Query query = session.createQuery(HQL_QUERY_BY_AGENT_FUNC);\r\n        query.setString(\"agentId\", agentId);\r\n        query.setString(\"functionId\", functionId);\r\n        return query.list();\r\n    };\r\n    List<AuthorizationData> returnList = getHibernateTemplate().execute(hcb);\r\n    if (returnList == null) {\r\n        returnList = new ArrayList();\r\n    }\r\n    return returnList;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.attendee.EditCommentSignupMBean.attendeeSaveComment",
	"Comment": "when the save button is clicked, this method saves the comment to the database if conditions are met",
	"Method": "String attendeeSaveComment(){\r\n    if (validationError) {\r\n        validationError = false;\r\n        return \"\";\r\n    }\r\n    SignupMeeting meeting = meetingWrapper.getMeeting();\r\n    Long timeslotId = this.tId;\r\n    boolean isOrganizer = meeting.getPermission().isUpdate();\r\n    String attendeeId = attendeeWrapper.getSignupAttendee().getAttendeeUserId();\r\n    try {\r\n        if (!isOrganizer && !sakaiFacade.getCurrentUserId().equals(attendeeId)) {\r\n            Utilities.addErrorMessage(Utilities.rb.getString(\"no.permissoin.do_it\"));\r\n            return \"\";\r\n        } else {\r\n            EditComment editComment = new EditComment(signupMeetingService, attendeeId, sakaiFacade.getCurrentLocationId(), false, meeting, timeslotId, getSakaiFacade());\r\n            meeting = editComment.updateComment(comment);\r\n        }\r\n        if (sendEmail) {\r\n            try {\r\n                SignupEventTrackingInfo trackingInfo = new SignupEventTrackingInfoImpl();\r\n                trackingInfo.setMeeting(meeting);\r\n                trackingInfo.setAttendeeComment(new AttendeeComment(comment, attendeeId, sakaiFacade.getCurrentUserId()));\r\n                signupMeetingService.sendUpdateCommentEmail(trackingInfo);\r\n            } catch (Exception e) {\r\n                log.error(Utilities.rb.getString(\"email.exception\") + \" - \" + e.getMessage(), e);\r\n                Utilities.addErrorMessage(Utilities.rb.getString(\"email.exception\"));\r\n            }\r\n        }\r\n    } catch (PermissionException pe) {\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"no.permissoin.do_it\"));\r\n    } catch (SignupUserActionException ue) {\r\n        Utilities.addErrorMessage(ue.getMessage());\r\n    } catch (Exception e) {\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"db.error_or_event.notExisted\"));\r\n        log.error(Utilities.rb.getString(\"db.error_or_event.notExisted\") + \" - \" + e.getClass() + \":\" + e.getMessage());\r\n        Utilities.resetMeetingList();\r\n        return MAIN_EVENTS_LIST_PAGE_URL;\r\n    }\r\n    if (isOrganizer) {\r\n        reloadMeetingWrapperInOrganizerPage();\r\n    }\r\n    if (Utilities.getSignupMeetingsBean().isShowMyAppointmentTime())\r\n        Utilities.resetMeetingList();\r\n    return updateMeetingwrapper(meeting, checkReturnUrl());\r\n}"
}, {
	"Path": "org.sakaiproject.portal.render.portlet.services.state.PortletStateAccess.getContainer",
	"Comment": "retreive the portlet state container associated with the current session.",
	"Method": "PortletStateContainer getContainer(HttpSession session){\r\n    PortletStateContainer container = (PortletStateContainer) session.getAttribute(PORTLET_STATE_PARAM);\r\n    if (container == null) {\r\n        container = new PortletStateContainer();\r\n        session.setAttribute(PORTLET_STATE_PARAM, container);\r\n    }\r\n    return container;\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TransformableNode.getTranslationController",
	"Comment": "returns the controller that translates this node using a drag gesture.",
	"Method": "TranslationController getTranslationController(){\r\n    return translationController;\r\n}"
}, {
	"Path": "org.sakaiproject.cheftool.AlertImpl.add",
	"Comment": "add a new alert line. a line separator will be appended as needed.",
	"Method": "void add(String alert){\r\n    if (m_msg == null) {\r\n        m_msg = alert;\r\n    } else {\r\n        m_msg = \"\\n\" + alert;\r\n    }\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.SimpleDiff.diff",
	"Comment": "compute the difference between original and revised sequences.",
	"Method": "Revision diff(Object[] orig,Object[] rev){\r\n    Map eqs = buildEqSet(orig, rev);\r\n    int[] indx = buildIndex(eqs, orig, NOT_FOUND_i);\r\n    int[] jndx = buildIndex(eqs, rev, NOT_FOUND_j);\r\n    eqs = null;\r\n    Revision deltas = new Revision();\r\n    int i = 0;\r\n    int j = 0;\r\n    for (; indx[i] != EOS && indx[i] == jndx[j]; i++, j++) {\r\n    }\r\n    while (indx[i] != jndx[j]) {\r\n        int ia = i;\r\n        int ja = j;\r\n        do {\r\n            while (jndx[j] < 0 || jndx[j] < indx[i]) {\r\n                j++;\r\n            }\r\n            while (indx[i] < 0 || indx[i] < jndx[j]) {\r\n                i++;\r\n            }\r\n        } while (indx[i] != jndx[j]);\r\n        while (i > ia && j > ja && indx[i - 1] == jndx[j - 1]) {\r\n            --i;\r\n            --j;\r\n        }\r\n        deltas.addDelta(Delta.newDelta(new Chunk(orig, ia, i - ia), new Chunk(rev, ja, j - ja)));\r\n        for (; indx[i] != EOS && indx[i] == jndx[j]; i++, j++) {\r\n        }\r\n    }\r\n    return deltas;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.UserDefineTimeslotBean.reset",
	"Comment": "reset everything for this bean object called by other beans",
	"Method": "void reset(String whoCalled){\r\n    if (whoCalled.equals(this.placeOrderBean)) {\r\n        this.timeSlotWrpList = null;\r\n        this.destTSwrpList = null;\r\n        this.validationError = false;\r\n        this.placeOrderBean = \"\";\r\n        this.gobackURL = \"\";\r\n        this.someoneSignedUp = false;\r\n        this.userEverCreateCTS = false;\r\n        this.putInMultipleCalendarBlocks = true;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.webservices.SakaiScript.getSiteListXml",
	"Comment": "renders a list of sites as xml to ensure consistency amongst webservice requests",
	"Method": "String getSiteListXml(List<Site> sites){\r\n    Document dom = Xml.createDocument();\r\n    Node list = dom.createElement(\"list\");\r\n    dom.appendChild(list);\r\n    for (Site site : sites) {\r\n        Node item = dom.createElement(\"item\");\r\n        Node siteId = dom.createElement(\"siteId\");\r\n        siteId.appendChild(dom.createTextNode(site.getId()));\r\n        Node siteTitle = dom.createElement(\"siteTitle\");\r\n        siteTitle.appendChild(dom.createTextNode(site.getTitle()));\r\n        item.appendChild(siteId);\r\n        item.appendChild(siteTitle);\r\n        list.appendChild(item);\r\n    }\r\n    return Xml.writeDocumentToString(dom);\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.common.helpers.SnackbarHelper.hide",
	"Comment": "hides the currently showing snackbar, if there is one. safe to call from any thread. safe tocall even if snackbar is not shown.",
	"Method": "void hide(Activity activity){\r\n    activity.runOnUiThread(new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (messageSnackbar != null) {\r\n                messageSnackbar.dismiss();\r\n            }\r\n            messageSnackbar = null;\r\n        }\r\n    });\r\n}"
}, {
	"Path": "com.google.ar.sceneform.samples.common.helpers.SnackbarHelper.hide",
	"Comment": "hides the currently showing snackbar, if there is one. safe to call from any thread. safe tocall even if snackbar is not shown.",
	"Method": "void hide(Activity activity){\r\n    if (messageSnackbar != null) {\r\n        messageSnackbar.dismiss();\r\n    }\r\n    messageSnackbar = null;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.model.SignupMeeting.truncateSeconds",
	"Comment": "set the second value to zero. it only need to accurate to minutes level.\totherwise it may cause one minute shorter display confusion",
	"Method": "Date truncateSeconds(Date time){\r\n    if (time == null) {\r\n        return null;\r\n    }\r\n    Calendar cal = Calendar.getInstance();\r\n    cal.setTime(time);\r\n    cal.set(Calendar.SECOND, 0);\r\n    cal.set(Calendar.MILLISECOND, 0);\r\n    return cal.getTime();\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.sortCourseOfferings",
	"Comment": "helper method for sortcmobject \tby order from sakai properties if specified or \tby default of eid, title\tusing velocity sorttool",
	"Method": "Collection sortCourseOfferings(Collection<CourseOffering> offerings){\r\n    String[] keys = ServerConfigurationService.getStrings(SORT_KEY_COURSE_OFFERING);\r\n    String[] orders = ServerConfigurationService.getStrings(SORT_ORDER_COURSE_OFFERING);\r\n    return sortCmObject(offerings, keys, orders);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.HistogramListener.histogramScores",
	"Comment": "calculate the detailed statisticsthis will populate the histogramscoresbean with the data associated with theparticular versioned assessment based on the publishedid.some of this code will change when we move this to hibernate persistence.",
	"Method": "boolean histogramScores(HistogramScoresBean histogramScores,TotalScoresBean totalScores){\r\n    DeliveryBean delivery = (DeliveryBean) ContextUtil.lookupBean(\"delivery\");\r\n    String publishedId = totalScores.getPublishedId();\r\n    if (publishedId.equals(\"0\")) {\r\n        publishedId = (String) ContextUtil.lookupParam(\"publishedAssessmentId\");\r\n    }\r\n    String actionString = ContextUtil.lookupParam(\"actionString\");\r\n    if (actionString != null && !actionString.equals(\"reviewAssessment\")) {\r\n        log.error(\"SAK-16437 happens!! publishedId = \" + publishedId + \", agentId = \" + AgentFacade.getAgentString());\r\n    }\r\n    ResourceLoader rb = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.EvaluationMessages\");\r\n    ResourceLoader rbEval = new ResourceLoader(\"org.sakaiproject.tool.assessment.bundle.EvaluationMessages\");\r\n    String assessmentName = \"\";\r\n    histogramScores.clearLowerQuartileStudents();\r\n    histogramScores.clearUpperQuartileStudents();\r\n    String which = histogramScores.getAllSubmissions();\r\n    if (which == null && totalScores.getAllSubmissions() != null) {\r\n        which = totalScores.getAllSubmissions();\r\n        histogramScores.setAllSubmissions(which);\r\n    }\r\n    histogramScores.setItemId(ContextUtil.lookupParam(\"itemId\"));\r\n    histogramScores.setHasNav(ContextUtil.lookupParam(\"hasNav\"));\r\n    delegate = new GradingService();\r\n    PublishedAssessmentService pubService = new PublishedAssessmentService();\r\n    List<AssessmentGradingData> allscores = delegate.getTotalScores(publishedId, which);\r\n    for (AssessmentGradingData agd : allscores) {\r\n        agd.setItemGradingSet(delegate.getItemGradingSet(String.valueOf(agd.getAssessmentGradingId())));\r\n    }\r\n    if (allscores.isEmpty()) {\r\n        delivery.setOutcome(\"reviewAssessmentError\");\r\n        delivery.setActionString(actionString);\r\n        return true;\r\n    }\r\n    histogramScores.setPublishedId(publishedId);\r\n    int callerName = TotalScoresBean.CALLED_FROM_HISTOGRAM_LISTENER;\r\n    String isFromStudent = (String) ContextUtil.lookupParam(\"isFromStudent\");\r\n    if (isFromStudent != null && \"true\".equals(isFromStudent)) {\r\n        callerName = TotalScoresBean.CALLED_FROM_HISTOGRAM_LISTENER_STUDENT;\r\n    }\r\n    Map useridMap = null;\r\n    List scores = new ArrayList();\r\n    if (totalScores.getReleaseToAnonymous()) {\r\n        scores.addAll(allscores);\r\n    } else {\r\n        useridMap = totalScores.getUserIdMap(callerName);\r\n        Iterator allscores_iter = allscores.iterator();\r\n        while (allscores_iter.hasNext()) {\r\n            AssessmentGradingData data = (AssessmentGradingData) allscores_iter.next();\r\n            String agentid = data.getAgentId();\r\n            if (useridMap.containsKey(agentid)) {\r\n                scores.add(data);\r\n            }\r\n        }\r\n    }\r\n    Iterator iter = scores.iterator();\r\n    if (!iter.hasNext()) {\r\n        log.info(\"Students who have submitted may have been removed from this site\");\r\n        return false;\r\n    }\r\n    Map assessmentMap = getAssessmentStatisticsMap(scores);\r\n    List submissionsSortedForDiscrim = new ArrayList(scores);\r\n    boolean anonymous = Boolean.valueOf(totalScores.getAnonymous()).booleanValue();\r\n    Collections.sort(submissionsSortedForDiscrim, new AssessmentGradingComparatorByScoreAndUniqueIdentifier(anonymous));\r\n    int numSubmissions = scores.size();\r\n    int percent27 = numSubmissions * 27 / 100;\r\n    if (percent27 == 0)\r\n        percent27 = 1;\r\n    for (int i = 0; i < percent27; i++) {\r\n        histogramScores.addToLowerQuartileStudents(((AssessmentGradingData) submissionsSortedForDiscrim.get(i)).getAgentId());\r\n        histogramScores.addToUpperQuartileStudents(((AssessmentGradingData) submissionsSortedForDiscrim.get(numSubmissions - 1 - i)).getAgentId());\r\n    }\r\n    PublishedAssessmentIfc pub = (PublishedAssessmentIfc) pubService.getPublishedAssessment(publishedId, false);\r\n    if (pub != null) {\r\n        if (actionString != null && actionString.equals(\"reviewAssessment\")) {\r\n            if (AssessmentIfc.RETRACT_FOR_EDIT_STATUS.equals(pub.getStatus())) {\r\n                delivery.setOutcome(\"isRetractedForEdit2\");\r\n                delivery.setActionString(actionString);\r\n                return true;\r\n            } else {\r\n                delivery.setOutcome(\"histogramScores\");\r\n                delivery.setSecureDeliveryHTMLFragment(\"\");\r\n                delivery.setBlockDelivery(false);\r\n                SecureDeliveryServiceAPI secureDelivery = SamigoApiFactory.getInstance().getSecureDeliveryServiceAPI();\r\n                if (secureDelivery.isSecureDeliveryAvaliable()) {\r\n                    String moduleId = pub.getAssessmentMetaDataByLabel(SecureDeliveryServiceAPI.MODULE_KEY);\r\n                    if (moduleId != null && !SecureDeliveryServiceAPI.NONE_ID.equals(moduleId)) {\r\n                        HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\r\n                        PhaseStatus status = secureDelivery.validatePhase(moduleId, Phase.ASSESSMENT_REVIEW, pub, request);\r\n                        delivery.setSecureDeliveryHTMLFragment(secureDelivery.getHTMLFragment(moduleId, pub, request, Phase.ASSESSMENT_REVIEW, status, new ResourceLoader().getLocale()));\r\n                        if (PhaseStatus.FAILURE == status) {\r\n                            delivery.setOutcome(\"secureDeliveryError\");\r\n                            delivery.setActionString(actionString);\r\n                            delivery.setBlockDelivery(true);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        boolean showObjectivesColumn = Boolean.parseBoolean(pub.getAssessmentMetaDataByLabel(AssessmentBaseIfc.HASMETADATAFORQUESTIONS));\r\n        Map<String, Double> objectivesCorrect = new HashMap<String, Double>();\r\n        Map<String, Integer> objectivesCounter = new HashMap<String, Integer>();\r\n        Map<String, Double> keywordsCorrect = new HashMap<String, Double>();\r\n        Map<String, Integer> keywordsCounter = new HashMap<String, Integer>();\r\n        assessmentName = pub.getTitle();\r\n        List<? extends SectionDataIfc> parts = pub.getSectionArraySorted();\r\n        histogramScores.setAssesmentParts((List<PublishedSectionData>) parts);\r\n        List info = new ArrayList();\r\n        Iterator partsIter = parts.iterator();\r\n        int secseq = 1;\r\n        double totalpossible = 0;\r\n        boolean hasRandompart = false;\r\n        boolean isRandompart = false;\r\n        String poolName = null;\r\n        Map itemScoresMap = delegate.getItemScores(Long.valueOf(publishedId), Long.valueOf(0), which);\r\n        Map itemScores = new HashMap();\r\n        if (totalScores.getReleaseToAnonymous()) {\r\n            itemScores.putAll(itemScoresMap);\r\n        } else {\r\n            if (useridMap == null) {\r\n                useridMap = totalScores.getUserIdMap(callerName);\r\n            }\r\n            for (Iterator it = itemScoresMap.entrySet().iterator(); it.hasNext(); ) {\r\n                Map.Entry entry = (Map.Entry) it.next();\r\n                Long itemId = (Long) entry.getKey();\r\n                List itemScoresList = (List) entry.getValue();\r\n                List filteredItemScoresList = new ArrayList();\r\n                Iterator itemScoresIter = itemScoresList.iterator();\r\n                while (itemScoresIter.hasNext()) {\r\n                    ItemGradingData idata = (ItemGradingData) itemScoresIter.next();\r\n                    String agentid = idata.getAgentId();\r\n                    if (useridMap.containsKey(agentid)) {\r\n                        filteredItemScoresList.add(idata);\r\n                    }\r\n                }\r\n                itemScores.put(itemId, filteredItemScoresList);\r\n            }\r\n        }\r\n        while (partsIter.hasNext()) {\r\n            SectionDataIfc section = (SectionDataIfc) partsIter.next();\r\n            String authortype = section.getSectionMetaDataByLabel(SectionDataIfc.AUTHOR_TYPE);\r\n            try {\r\n                if (SectionDataIfc.RANDOM_DRAW_FROM_QUESTIONPOOL.equals(Integer.valueOf(authortype))) {\r\n                    hasRandompart = true;\r\n                    isRandompart = true;\r\n                    poolName = section.getSectionMetaDataByLabel(SectionDataIfc.POOLNAME_FOR_RANDOM_DRAW);\r\n                } else {\r\n                    isRandompart = false;\r\n                    poolName = null;\r\n                }\r\n            } catch (NumberFormatException e) {\r\n                isRandompart = false;\r\n                poolName = null;\r\n            }\r\n            if (section.getSequence() == null)\r\n                section.setSequence(Integer.valueOf(secseq++));\r\n            String title = rb.getString(\"part\") + \" \" + section.getSequence().toString();\r\n            title += \", \" + rb.getString(\"question\") + \" \";\r\n            List<ItemDataIfc> itemset = section.getItemArraySortedForGrading();\r\n            int seq = 1;\r\n            Iterator<ItemDataIfc> itemsIter = itemset.iterator();\r\n            while (itemsIter.hasNext()) {\r\n                HistogramQuestionScoresBean questionScores = new HistogramQuestionScoresBean();\r\n                questionScores.setNumberOfParts(parts.size());\r\n                questionScores.setRandomType(isRandompart);\r\n                questionScores.setPoolName(poolName);\r\n                ItemDataIfc item = itemsIter.next();\r\n                if (showObjectivesColumn) {\r\n                    String obj = item.getItemMetaDataByLabel(ItemMetaDataIfc.OBJECTIVE);\r\n                    questionScores.setObjectives(obj);\r\n                    String key = item.getItemMetaDataByLabel(ItemMetaDataIfc.KEYWORD);\r\n                    questionScores.setKeywords(key);\r\n                }\r\n                String type = getType(item.getTypeId().intValue());\r\n                if (item.getSequence() == null)\r\n                    item.setSequence(Integer.valueOf(seq++));\r\n                questionScores.setPartNumber(section.getSequence().toString());\r\n                if (questionScores.getRandomType() && poolName != null) {\r\n                    if (questionScores.getNumberOfParts() > 1) {\r\n                        questionScores.setQuestionLabelFormat(rb.getString(\"label_question_part_pool\", null));\r\n                    } else {\r\n                        questionScores.setQuestionLabelFormat(rb.getString(\"label_question_pool\", null));\r\n                    }\r\n                } else {\r\n                    if (questionScores.getNumberOfParts() > 1) {\r\n                        questionScores.setQuestionLabelFormat(rb.getString(\"label_question_part\", null));\r\n                    } else {\r\n                        questionScores.setQuestionLabelFormat(rb.getString(\"label_question\", null));\r\n                    }\r\n                }\r\n                questionScores.setQuestionNumber(item.getSequence().toString());\r\n                questionScores.setItemId(item.getItemId());\r\n                questionScores.setTitle(title + item.getSequence().toString() + \" (\" + type + \")\");\r\n                if (// emi question\r\n                item.getTypeId().equals(TypeIfc.EXTENDED_MATCHING_ITEMS)) {\r\n                    questionScores.setQuestionText(item.getLeadInText());\r\n                } else {\r\n                    questionScores.setQuestionText(item.getText());\r\n                }\r\n                questionScores.setQuestionType(item.getTypeId().toString());\r\n                determineResults(pub, questionScores, (List) itemScores.get(item.getItemId()));\r\n                questionScores.setTotalScore(item.getScore().toString());\r\n                questionScores.setN(\"\" + numSubmissions);\r\n                questionScores.setItemId(item.getItemId());\r\n                Set studentsWithAllCorrect = questionScores.getStudentsWithAllCorrect();\r\n                Set studentsResponded = questionScores.getStudentsResponded();\r\n                if (studentsWithAllCorrect == null || studentsResponded == null || studentsWithAllCorrect.isEmpty() || studentsResponded.isEmpty()) {\r\n                    questionScores.setPercentCorrectFromUpperQuartileStudents(\"0\");\r\n                    questionScores.setPercentCorrectFromLowerQuartileStudents(\"0\");\r\n                    questionScores.setDiscrimination(\"0.0\");\r\n                } else {\r\n                    int percent27ForThisQuestion = percent27;\r\n                    Set<String> upperQuartileStudents = histogramScores.getUpperQuartileStudents().keySet();\r\n                    Set<String> lowerQuartileStudents = histogramScores.getLowerQuartileStudents().keySet();\r\n                    if (isRandompart) {\r\n                        upperQuartileStudents = new HashSet<String>();\r\n                        lowerQuartileStudents = new HashSet<String>();\r\n                        percent27ForThisQuestion = questionScores.getNumResponses() * 27 / 100;\r\n                        if (percent27ForThisQuestion == 0)\r\n                            percent27ForThisQuestion = 1;\r\n                        if (questionScores.getNumResponses() != 0) {\r\n                            List<AssessmentGradingData> filteredGradings = filterGradingData(submissionsSortedForDiscrim, questionScores.getItemId());\r\n                            int filteredGradingsSize = filteredGradings.size();\r\n                            percent27ForThisQuestion = filteredGradingsSize * 27 / 100;\r\n                            for (int i = 0; i < percent27ForThisQuestion; i++) {\r\n                                lowerQuartileStudents.add(((AssessmentGradingData) filteredGradings.get(i)).getAgentId());\r\n                                upperQuartileStudents.add(((AssessmentGradingData) filteredGradings.get(filteredGradingsSize - 1 - i)).getAgentId());\r\n                            }\r\n                        }\r\n                    }\r\n                    if (questionScores.getNumResponses() != 0) {\r\n                        int numStudentsWithAllCorrectFromUpperQuartile = 0;\r\n                        int numStudentsWithAllCorrectFromLowerQuartile = 0;\r\n                        Iterator studentsIter = studentsWithAllCorrect.iterator();\r\n                        while (studentsIter.hasNext()) {\r\n                            String agentId = (String) studentsIter.next();\r\n                            if (upperQuartileStudents.contains(agentId)) {\r\n                                numStudentsWithAllCorrectFromUpperQuartile++;\r\n                            }\r\n                            if (lowerQuartileStudents.contains(agentId)) {\r\n                                numStudentsWithAllCorrectFromLowerQuartile++;\r\n                            }\r\n                        }\r\n                        double percentCorrectFromUpperQuartileStudents = ((double) numStudentsWithAllCorrectFromUpperQuartile / (double) percent27ForThisQuestion) * 100d;\r\n                        double percentCorrectFromLowerQuartileStudents = ((double) numStudentsWithAllCorrectFromLowerQuartile / (double) percent27ForThisQuestion) * 100d;\r\n                        questionScores.setPercentCorrectFromUpperQuartileStudents(Integer.toString((int) percentCorrectFromUpperQuartileStudents));\r\n                        questionScores.setPercentCorrectFromLowerQuartileStudents(Integer.toString((int) percentCorrectFromLowerQuartileStudents));\r\n                        double discrimination = ((double) numStudentsWithAllCorrectFromUpperQuartile - (double) numStudentsWithAllCorrectFromLowerQuartile) / (double) percent27ForThisQuestion;\r\n                        if (discrimination > 999999 || discrimination < -999999) {\r\n                            questionScores.setDiscrimination(\"NaN\");\r\n                        } else {\r\n                            discrimination = ((int) (discrimination * 100.00d)) / 100.00d;\r\n                            questionScores.setDiscrimination(Double.toString(discrimination));\r\n                        }\r\n                    } else {\r\n                        questionScores.setPercentCorrectFromUpperQuartileStudents(rbEval.getString(\"na\"));\r\n                        questionScores.setPercentCorrectFromLowerQuartileStudents(rbEval.getString(\"na\"));\r\n                        questionScores.setDiscrimination(rbEval.getString(\"na\"));\r\n                    }\r\n                }\r\n                info.add(questionScores);\r\n            }\r\n            totalpossible = pub.getTotalScore().doubleValue();\r\n        }\r\n        histogramScores.setInfo(info);\r\n        histogramScores.setRandomType(hasRandompart);\r\n        int maxNumOfAnswers = 0;\r\n        List<HistogramQuestionScoresBean> detailedStatistics = new ArrayList<HistogramQuestionScoresBean>();\r\n        Iterator infoIter = info.iterator();\r\n        while (infoIter.hasNext()) {\r\n            HistogramQuestionScoresBean questionScores = (HistogramQuestionScoresBean) infoIter.next();\r\n            if (questionScores.getQuestionType().equals(TypeIfc.MULTIPLE_CHOICE.toString()) || questionScores.getQuestionType().equals(TypeIfc.MULTIPLE_CORRECT.toString()) || questionScores.getQuestionType().equals(TypeIfc.MULTIPLE_CHOICE_SURVEY.toString()) || questionScores.getQuestionType().equals(TypeIfc.TRUE_FALSE.toString()) || questionScores.getQuestionType().equals(TypeIfc.FILL_IN_BLANK.toString()) || questionScores.getQuestionType().equals(TypeIfc.MATCHING.toString()) || questionScores.getQuestionType().equals(TypeIfc.FILL_IN_NUMERIC.toString()) || questionScores.getQuestionType().equals(TypeIfc.MULTIPLE_CORRECT_SINGLE_SELECTION.toString()) || questionScores.getQuestionType().equals(TypeIfc.CALCULATED_QUESTION.toString()) || questionScores.getQuestionType().equals(\"16\")) {\r\n                questionScores.setShowIndividualAnswersInDetailedStatistics(true);\r\n                detailedStatistics.add(questionScores);\r\n                if (questionScores.getHistogramBars() != null) {\r\n                    maxNumOfAnswers = questionScores.getHistogramBars().length > maxNumOfAnswers ? questionScores.getHistogramBars().length : maxNumOfAnswers;\r\n                }\r\n            }\r\n            if (showObjectivesColumn) {\r\n                String obj = questionScores.getObjectives();\r\n                if (obj != null && !\"\".equals(obj)) {\r\n                    String[] objs = obj.split(\",\");\r\n                    for (int i = 0; i < objs.length; i++) {\r\n                        Double pctCorrect = 0.0d;\r\n                        Double newAvg = 0.0d;\r\n                        int divisor = 1;\r\n                        try {\r\n                            if (questionScores.getPercentCorrect() != null && !\"N/A\".equalsIgnoreCase(questionScores.getPercentCorrect())) {\r\n                                pctCorrect = Double.parseDouble(questionScores.getPercentCorrect());\r\n                            }\r\n                        } catch (NumberFormatException nfe) {\r\n                            log.error(\"NFE when looking at metadata and objectives\", nfe);\r\n                        }\r\n                        if (objectivesCorrect.get(objs[i]) != null) {\r\n                            Double objCorrect = objectivesCorrect.get(objs[i]);\r\n                            divisor = objCorrect.intValue() + 1;\r\n                            newAvg = objCorrect + ((pctCorrect - objCorrect) / divisor);\r\n                            newAvg = new BigDecimal(newAvg).setScale(2, RoundingMode.HALF_UP).doubleValue();\r\n                        } else {\r\n                            newAvg = new BigDecimal(pctCorrect).setScale(2, RoundingMode.HALF_UP).doubleValue();\r\n                        }\r\n                        objectivesCounter.put(objs[i], divisor);\r\n                        objectivesCorrect.put(objs[i], newAvg);\r\n                    }\r\n                }\r\n                String key = questionScores.getKeywords();\r\n                if (key != null && !\"\".equals(key)) {\r\n                    String[] keys = key.split(\",\");\r\n                    for (int i = 0; i < keys.length; i++) {\r\n                        if (keywordsCorrect.get(keys[i]) != null) {\r\n                            int divisor = keywordsCounter.get(keys[i]) + 1;\r\n                            Double newAvg = keywordsCorrect.get(keys[i]) + ((Double.parseDouble(questionScores.getPercentCorrect()) - keywordsCorrect.get(keys[i])) / divisor);\r\n                            newAvg = new BigDecimal(newAvg).setScale(2, RoundingMode.HALF_UP).doubleValue();\r\n                            keywordsCounter.put(keys[i], divisor);\r\n                            keywordsCorrect.put(keys[i], newAvg);\r\n                        } else {\r\n                            Double newAvg = Double.parseDouble(questionScores.getPercentCorrect());\r\n                            newAvg = new BigDecimal(newAvg).setScale(2, RoundingMode.HALF_UP).doubleValue();\r\n                            keywordsCounter.put(keys[i], 1);\r\n                            keywordsCorrect.put(keys[i], newAvg);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (questionScores.getQuestionType().equals(TypeIfc.EXTENDED_MATCHING_ITEMS.toString())) {\r\n                questionScores.setShowIndividualAnswersInDetailedStatistics(false);\r\n                detailedStatistics.addAll(questionScores.getInfo());\r\n                Iterator subInfoIter = questionScores.getInfo().iterator();\r\n                while (subInfoIter.hasNext()) {\r\n                    HistogramQuestionScoresBean subQuestionScores = (HistogramQuestionScoresBean) subInfoIter.next();\r\n                    if (subQuestionScores.getHistogramBars() != null) {\r\n                        subQuestionScores.setN(questionScores.getN());\r\n                        maxNumOfAnswers = subQuestionScores.getHistogramBars().length > maxNumOfAnswers ? subQuestionScores.getHistogramBars().length : maxNumOfAnswers;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        sortQuestionScoresByLabel(detailedStatistics);\r\n        histogramScores.setDetailedStatistics(detailedStatistics);\r\n        histogramScores.setMaxNumberOfAnswers(maxNumOfAnswers);\r\n        histogramScores.setShowObjectivesColumn(showObjectivesColumn);\r\n        if (showObjectivesColumn) {\r\n            List<Entry<String, Double>> objectivesList = new ArrayList<Entry<String, Double>>(objectivesCorrect.entrySet());\r\n            Collections.sort(objectivesList, new Comparator<Entry<String, Double>>() {\r\n                public int compare(Entry<String, Double> e1, Entry<String, Double> e2) {\r\n                    return e1.getKey().compareTo(e2.getKey());\r\n                }\r\n            });\r\n            histogramScores.setObjectives(objectivesList);\r\n            List<Entry<String, Double>> keywordsList = new ArrayList<Entry<String, Double>>(keywordsCorrect.entrySet());\r\n            Collections.sort(keywordsList, new Comparator<Entry<String, Double>>() {\r\n                public int compare(Entry<String, Double> e1, Entry<String, Double> e2) {\r\n                    return e1.getKey().compareTo(e2.getKey());\r\n                }\r\n            });\r\n            histogramScores.setKeywords(keywordsList);\r\n        }\r\n        if (assessmentMap.isEmpty()) {\r\n            histogramScores.setNumResponses(0);\r\n        }\r\n        try {\r\n            BeanUtils.populate(histogramScores, assessmentMap);\r\n            histogramScores.setQ1((String) assessmentMap.get(\"q1\"));\r\n            histogramScores.setQ2((String) assessmentMap.get(\"q2\"));\r\n            histogramScores.setQ3((String) assessmentMap.get(\"q3\"));\r\n            histogramScores.setQ4((String) assessmentMap.get(\"q4\"));\r\n            histogramScores.setTotalScore((String) assessmentMap.get(\"totalScore\"));\r\n            histogramScores.setTotalPossibleScore(Double.toString(totalpossible));\r\n            HistogramBarBean[] bars = new HistogramBarBean[histogramScores.getColumnHeight().length];\r\n            for (int i = 0; i < histogramScores.getColumnHeight().length; i++) {\r\n                bars[i] = new HistogramBarBean();\r\n                bars[i].setColumnHeight(Integer.toString(histogramScores.getColumnHeight()[i]));\r\n                bars[i].setNumStudents(histogramScores.getNumStudentCollection()[i]);\r\n                bars[i].setRangeInfo(histogramScores.getRangeCollection()[i]);\r\n            }\r\n            histogramScores.setHistogramBars(bars);\r\n        } catch (IllegalAccessException e) {\r\n            log.warn(\"IllegalAccessException:  unable to populate bean\" + e);\r\n        } catch (InvocationTargetException e) {\r\n            log.warn(\"InvocationTargetException: unable to populate bean\" + e);\r\n        }\r\n        histogramScores.setAssessmentName(assessmentName);\r\n    } else {\r\n        log.error(\"pub is null. publishedId = \" + publishedId);\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.HistogramListener.histogramScores",
	"Comment": "calculate the detailed statisticsthis will populate the histogramscoresbean with the data associated with theparticular versioned assessment based on the publishedid.some of this code will change when we move this to hibernate persistence.",
	"Method": "boolean histogramScores(HistogramScoresBean histogramScores,TotalScoresBean totalScores){\r\n    return e1.getKey().compareTo(e2.getKey());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.evaluation.HistogramListener.histogramScores",
	"Comment": "calculate the detailed statisticsthis will populate the histogramscoresbean with the data associated with theparticular versioned assessment based on the publishedid.some of this code will change when we move this to hibernate persistence.",
	"Method": "boolean histogramScores(HistogramScoresBean histogramScores,TotalScoresBean totalScores){\r\n    return e1.getKey().compareTo(e2.getKey());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.servlet.cp.DownloadCPServlet.doPost",
	"Comment": "get the faces context and display the contents of the xmldisplay bean",
	"Method": "void doPost(HttpServletRequest req,HttpServletResponse res){\r\n    String assessmentId = req.getParameter(\"assessmentId\");\r\n    AssessmentService assessmentService = new AssessmentService();\r\n    int success = assessmentService.updateAllRandomPoolQuestions(assessmentService.getAssessment(assessmentId));\r\n    if (success == AssessmentService.UPDATE_SUCCESS) {\r\n        String agentIdString = getAgentString(req, res);\r\n        String currentSiteId = assessmentService.getAssessmentSiteId(assessmentId);\r\n        String assessmentCreatedBy = assessmentService.getAssessmentCreatedBy(assessmentId);\r\n        boolean accessDenied = true;\r\n        if (canExport(req, res, agentIdString, currentSiteId, assessmentCreatedBy)) {\r\n            accessDenied = false;\r\n        }\r\n        if (accessDenied) {\r\n            String path = \"/jsf/qti/exportDenied.faces\";\r\n            RequestDispatcher dispatcher = req.getRequestDispatcher(path);\r\n            dispatcher.forward(req, res);\r\n        } else {\r\n            res.setContentType(\"application/x-zip-compressed\");\r\n            String zipFilename = \"exportAssessment.zip\";\r\n            res.setHeader(\"Content-Disposition\", \"attachment;filename=\\\"\" + zipFilename + \"\\\";\");\r\n            ServletOutputStream outputStream = null;\r\n            ZipOutputStream zos = null;\r\n            ZipEntry ze = null;\r\n            try {\r\n                byte[] b = null;\r\n                outputStream = res.getOutputStream();\r\n                zos = new ZipOutputStream(outputStream);\r\n                ze = new ZipEntry(\"exportAssessment.xml\");\r\n                zos.putNextEntry(ze);\r\n                XMLController xmlController = (XMLController) ContextUtil.lookupBeanFromExternalServlet(\"xmlController\", req, res);\r\n                xmlController.setId(assessmentId);\r\n                xmlController.setQtiVersion(1);\r\n                xmlController.displayAssessmentXml();\r\n                String qtiString = xmlController.getXmlBean().getXml();\r\n                log.debug(\"qtiString = \" + qtiString);\r\n                b = qtiString.getBytes();\r\n                zos.write(b, 0, b.length);\r\n                zos.closeEntry();\r\n                ze = new ZipEntry(\"imsmanifest.xml\");\r\n                zos.putNextEntry(ze);\r\n                ManifestGenerator manifestGenerator = new ManifestGenerator(assessmentId);\r\n                String manString = manifestGenerator.getManifest();\r\n                log.debug(\"manString = \" + manString);\r\n                b = manString.getBytes();\r\n                zos.write(b, 0, b.length);\r\n                zos.closeEntry();\r\n                HashMap contentMap = manifestGenerator.getContentMap();\r\n                String filename = null;\r\n                for (Iterator it = contentMap.entrySet().iterator(); it.hasNext(); ) {\r\n                    Map.Entry entry = (Map.Entry) it.next();\r\n                    filename = (String) entry.getKey();\r\n                    ze = new ZipEntry(filename.substring(1));\r\n                    zos.putNextEntry(ze);\r\n                    b = (byte[]) entry.getValue();\r\n                    zos.write(b, 0, b.length);\r\n                    zos.closeEntry();\r\n                }\r\n            } catch (IOException e) {\r\n                log.error(e.getMessage());\r\n                throw e;\r\n            } finally {\r\n                if (zos != null) {\r\n                    try {\r\n                        zos.closeEntry();\r\n                    } catch (IOException e) {\r\n                        log.error(e.getMessage());\r\n                    }\r\n                    try {\r\n                        zos.close();\r\n                    } catch (IOException e) {\r\n                        log.error(e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (success == AssessmentService.UPDATE_ERROR_DRAW_SIZE_TOO_LARGE) {\r\n            String err = ContextUtil.getLocalizedString(\"org.sakaiproject.tool.assessment.bundle.AuthorMessages\", \"update_pool_error_size_too_large\");\r\n            req.setAttribute(\"error\", err);\r\n        } else {\r\n            String err = ContextUtil.getLocalizedString(\"org.sakaiproject.tool.assessment.bundle.AuthorMessages\", \"update_pool_error_unknown\");\r\n            req.setAttribute(\"error\", err);\r\n        }\r\n        String path = \"/jsf/qti/poolUpdateError.faces\";\r\n        RequestDispatcher dispatcher = req.getRequestDispatcher(path);\r\n        dispatcher.forward(req, res);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.util.ContextUtil.paramArrayValueLike",
	"Comment": "determine if we have been passed a parameter that contains a given string,return arraylist of the corresponding values, else return empty list.typically this would be where you want to check for one of a setof similar radio buttons commandlinks or commandbuttons.",
	"Method": "ArrayList paramArrayValueLike(String paramPart){\r\n    FacesContext context = FacesContext.getCurrentInstance();\r\n    Map requestParams = context.getExternalContext().getRequestParameterMap();\r\n    ArrayList list = new ArrayList();\r\n    for (Iterator it = requestParams.entrySet().iterator(); it.hasNext(); ) {\r\n        Map.Entry entry = (Map.Entry) it.next();\r\n        String currKey = (String) entry.getKey();\r\n        int location = currKey.indexOf(paramPart);\r\n        if (location > -1) {\r\n            list.add((String) entry.getValue());\r\n        }\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "org.sakaiproject.umem.tool.ui.SiteListBean.doSearch2",
	"Comment": "uses only sakai api for site membership, user role and group membership.",
	"Method": "void doSearch2(){\r\n    long start = (new Date()).getTime();\r\n    userSitesRows = new ArrayList();\r\n    thisUserId = M_session.getCurrentSessionUserId();\r\n    setSakaiSessionUser(userId);\r\n    log.debug(\"Switched CurrentSessionUserId: \" + M_session.getCurrentSessionUserId());\r\n    List siteList = org.sakaiproject.site.cover.SiteService.getSites(SelectionType.ACCESS, null, null, null, SortType.TITLE_ASC, null);\r\n    setSakaiSessionUser(thisUserId);\r\n    Iterator i = siteList.iterator();\r\n    while (i.hasNext()) {\r\n        Site s = (Site) i.next();\r\n        UserSitesRow row = new UserSitesRow(s, getGroups(userId, s.getId()), getActiveUserRoleInSite(userId, s));\r\n        userSitesRows.add(row);\r\n    }\r\n    long end = (new Date()).getTime();\r\n    log.debug(\"doSearch2() took total of \" + ((end - start) / 1000) + \" sec.\");\r\n}"
}, {
	"Path": "org.sakaiproject.umem.tool.ui.SiteListBean.doSearch3",
	"Comment": "uses single simple sql for site membership, uses api for user role and\tgroup membership.\tfor a 12 site users it takes ~30secs!",
	"Method": "void doSearch3(){\r\n    userSitesRows = new ArrayList();\r\n    timeSpentInGroups = 0;\r\n    Connection c = null;\r\n    PreparedStatement pst = null;\r\n    ResultSet rs = null;\r\n    try {\r\n        c = M_sql.borrowConnection();\r\n        String sql = \"select distinct(SAKAI_SITE_USER.SITE_ID) from SAKAI_SITE_USER,SAKAI_SITE where SAKAI_SITE.SITE_ID=SAKAI_SITE_USER.SITE_ID and IS_USER=0 and IS_SPECIAL=0 and USER_ID=?\";\r\n        pst = c.prepareStatement(sql);\r\n        pst.setString(1, userId);\r\n        rs = pst.executeQuery();\r\n        while (rs.next()) {\r\n            String id = rs.getString(\"SITE_ID\");\r\n            try {\r\n                Site site = M_site.getSite(id);\r\n                UserSitesRow row = new UserSitesRow(site, getGroups(userId, site), getActiveUserRoleInSite(userId, site));\r\n                userSitesRows.add(row);\r\n            } catch (IdUnusedException e) {\r\n                log.warn(\"Unable to retrieve site for site id: \" + id, e);\r\n            }\r\n        }\r\n    } catch (SQLException e) {\r\n        log.warn(\"SQL error occurred while retrieving user memberships for user: \" + userId, e);\r\n        log.warn(\"UserMembership will use alternative methods for retrieving user memberships (ONLY Published sites will be listed).\");\r\n        doSearch2();\r\n    } finally {\r\n        try {\r\n            if (rs != null)\r\n                rs.close();\r\n        } finally {\r\n            try {\r\n                if (pst != null)\r\n                    pst.close();\r\n            } finally {\r\n                if (c != null)\r\n                    M_sql.returnConnection(c);\r\n            }\r\n        }\r\n    }\r\n    log.debug(\"Group ops took \" + (timeSpentInGroups / 1000) + \" secs\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.author.CalculatedQuestionExtractListener.processAction",
	"Comment": "this listener will read in the instructions, parse any variables and formula names it finds, and then check to see if there are any errors in the configuration for the question.errors include no variables or formulas named in the instructionsvariables and formulas sharing a namevariables with invalid ranges of valuesformulas that are syntactically wrongany errors are written to the context messagerthe validate formula is also called directly from the itemaddlistner, beforesaving a calculated question, to ensure any last minute changes are caught.",
	"Method": "void processAction(ActionEvent arg0){\r\n    ItemAuthorBean itemauthorbean = (ItemAuthorBean) ContextUtil.lookupBean(\"itemauthor\");\r\n    ItemBean item = itemauthorbean.getCurrentItem();\r\n    List<String> errors = this.validate(item, true);\r\n    if (errors.size() > 0) {\r\n        item.setOutcome(\"calculatedQuestion\");\r\n        item.setPoolOutcome(\"calculatedQuestion\");\r\n        FacesContext context = FacesContext.getCurrentInstance();\r\n        for (String error : errors) {\r\n            context.addMessage(null, new FacesMessage(error));\r\n        }\r\n        context.renderResponse();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.print.PDFAssessmentBean.safeReader",
	"Comment": "turns a string into a stringreader with out the fuss of an ioexception",
	"Method": "Reader safeReader(String input){\r\n    StringReader output = null;\r\n    if (input == null) {\r\n        input = \"\";\r\n    } else {\r\n        input = oldschoolIfy(input);\r\n    }\r\n    try {\r\n        output = new StringReader(input + \"<br/>\");\r\n    } catch (Exception e) {\r\n        log.error(\"could not get StringReader for String \" + input + \" due to : \" + e);\r\n    }\r\n    return output;\r\n}"
}, {
	"Path": "edu.amc.sakai.user.JLDAPDirectoryProvider.searchDirectoryForSingleEntry",
	"Comment": "searches the directory for at most one entry matching the\tspecified filter.",
	"Method": "Object searchDirectoryForSingleEntry(String filter,LDAPConnection conn,LdapEntryMapper mapper,String[] searchResultPhysicalAttributeNames,String searchBaseDn){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"searchDirectoryForSingleEntry(): [filter = \" + filter + \"][reusing conn = \" + (conn != null) + \"]\");\r\n    }\r\n    List<LdapUserData> results = searchDirectory(filter, conn, mapper, searchResultPhysicalAttributeNames, searchBaseDn, 1);\r\n    if (results.isEmpty()) {\r\n        return null;\r\n    }\r\n    return results.iterator().next();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.ItemConfigBean.isShowAllMultipleChoice",
	"Comment": "should we show all multiple choice type question?that means both multiple correct and single correct.",
	"Method": "boolean isShowAllMultipleChoice(){\r\n    return isShowMultipleChoiceSingleCorrect() && isShowMultipleChoiceMultipleCorrect();\r\n}"
}, {
	"Path": "org.sakaiproject.web.tool.IFrameAction.convertReferenceUrl",
	"Comment": "if the url is a valid reference, convert it to a url, else return it unchanged.",
	"Method": "String convertReferenceUrl(String url){\r\n    Reference ref = EntityManager.newReference(url);\r\n    if (ref.isKnownType()) {\r\n        String refUrl = ref.getUrl();\r\n        if (refUrl != null) {\r\n            return refUrl;\r\n        }\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.business.entity.helper.AuthoringHelperTest.createImportedItem",
	"Comment": "version of method in authoringhelper, but with persistence disabled.import an item xml document in qti format, extract & persist the data.",
	"Method": "ItemFacade createImportedItem(Document document){\r\n    log.debug(document == null ? \"DOCUMENT IS NULL IN createImportedItem(Document)\" : \"createImportedItem(Document)\");\r\n    ItemFacade item = new ItemFacade();\r\n    try {\r\n        ExtractionHelper exHelper = new ExtractionHelper(QTIVersion.VERSION_1_2);\r\n        exHelper.setOverridePath(xslPath);\r\n        log.info(\"XSLT Path: \" + exHelper.getTransformPath());\r\n        Item itemXml = new Item(document, QTIVersion.VERSION_1_2);\r\n        Map itemMap = exHelper.mapItem(itemXml);\r\n        exHelper.updateItem(item, itemXml, itemMap);\r\n        log.info(\"updating item\");\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    return item;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.section.jsf.JsfUtil.getStringFromParam",
	"Comment": "gets a value from the request parameter map, as provided by the faces\tcontext.",
	"Method": "String getStringFromParam(String string){\r\n    return (String) FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get(string);\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.CopyMeetingSignupMBean.getAllLocations",
	"Comment": "this method is called to get all locations to populate the dropdown",
	"Method": "List<SelectItem> getAllLocations(){\r\n    if (locations == null) {\r\n        locations = new ArrayList<SelectItem>();\r\n        locations.addAll(Utilities.getSignupMeetingsBean().getAllLocations());\r\n        locations.add(0, new SelectItem(Utilities.rb.getString(\"select_location\")));\r\n    }\r\n    return locations;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaCrawlerOptions.getSchemaInfoLevel",
	"Comment": "gets the schema information level, identifying to what level theschema should be crawled.",
	"Method": "SchemaInfoLevel getSchemaInfoLevel(){\r\n    return schemaInfoLevel;\r\n}"
}, {
	"Path": "org.sakaiproject.rubrics.security.CustomMethodSecurityExpressionRoot.canCopy",
	"Comment": "currently can only be used for rubrics, criterions and ratings.",
	"Method": "boolean canCopy(String resourceId,String resourceType){\r\n    boolean allowed = false;\r\n    if (authenticatedRequestContext.isEditor()) {\r\n        allowed = DEFAULT_RESOURCE_COPY_ID.equalsIgnoreCase(resourceId) || authenticatedRequestContext.isSuperUser();\r\n        if (!allowed) {\r\n            Long id = Long.parseLong(resourceId);\r\n            allowed = canRead(id, resourceType);\r\n        }\r\n    }\r\n    return allowed;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.services.qti.QTIService.createImportedQuestionPool",
	"Comment": "import an assessment xml document in qti format, extract & persist the data.import process assumes assessment structure, not objectbank or itembankbased on usage in other potential migration systems, respondus, blackboard, etc.qti version 2.x will probably focus on content packaging for question pools",
	"Method": "QuestionPoolFacade createImportedQuestionPool(Document document,int qtiVersion){\r\n    testQtiVersion(qtiVersion);\r\n    try {\r\n        AuthoringHelper helper = new AuthoringHelper(qtiVersion);\r\n        return helper.createImportedQuestionPool(document);\r\n    } catch (Exception ex) {\r\n        throw new QTIServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.AdminPrefsTool.getPreferences",
	"Comment": "access the prefs being edited, in keynamevalue collection form.",
	"Method": "Collection getPreferences(){\r\n    setupEdit();\r\n    return m_stuff;\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.tool.wicket.components.SakaiNavigationToolBar.newNavigatorLabel",
	"Comment": "factory method used to create the navigator label that will be used by the datatable",
	"Method": "WebComponent newNavigatorLabel(String navigatorId,DataTable table){\r\n    return new SakaiNavigatorLabel(navigatorId, table);\r\n}"
}, {
	"Path": "org.sakaiproject.umem.tool.ui.UserListBean.buildDataTable",
	"Comment": "build a generic tabular representation of the user membership data export.",
	"Method": "List<List<Object>> buildDataTable(List<UserRow> userRows){\r\n    List<List<Object>> table = new LinkedList<List<Object>>();\r\n    List<Object> header = new ArrayList<Object>();\r\n    header.add(msgs.getString(\"user_id\"));\r\n    header.add(msgs.getString(\"internal_user_id\"));\r\n    header.add(msgs.getString(\"user_name\"));\r\n    header.add(msgs.getString(\"user_email\"));\r\n    header.add(msgs.getString(\"user_type\"));\r\n    header.add(msgs.getString(\"user_authority\"));\r\n    header.add(msgs.getString(\"user_created_on\"));\r\n    header.add(msgs.getString(\"user_modified_on\"));\r\n    table.add(header);\r\n    for (UserRow userRow : userRows) {\r\n        List<Object> currentRow = new ArrayList<Object>();\r\n        currentRow.add(userRow.getUserEID());\r\n        currentRow.add(userRow.getUserID());\r\n        currentRow.add(userRow.getUserName());\r\n        currentRow.add(userRow.getUserEmail());\r\n        currentRow.add(userRow.getUserType());\r\n        currentRow.add(userRow.getAuthority());\r\n        currentRow.add(userRow.getCreatedOn());\r\n        currentRow.add(userRow.getModifiedOn());\r\n        table.add(currentRow);\r\n    }\r\n    return table;\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.component.service.impl.RWikiObjectServiceImpl.extractReferences",
	"Comment": "add page references to the rwiki object.limit length of the \t string to save to a fixed value that will cover the common cases \t without using resources for degenerate cases.",
	"Method": "StringBuffer extractReferences(RWikiCurrentObject rwo,HashSet referenced){\r\n    StringBuffer sb = new StringBuffer();\r\n    Iterator i = referenced.iterator();\r\n    String next = null;\r\n    while (i.hasNext()) {\r\n        next = (String) i.next();\r\n        int referencedLength = sb.length() + 4 + next.length();\r\n        if (referencedLength >= maxReferencesStringSize) {\r\n            break;\r\n        } else {\r\n            // $NON-NLS-1$\r\n            sb.append(\"::\").append(next);\r\n        }\r\n    }\r\n    sb.append(\"::\");\r\n    return sb;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.assessment.PublishedAssessmentServiceImpl.getAllAssessmentsReleasedToAuthenticatedUsers",
	"Comment": "get list of all active published assessmentsreleased to authenticated users.",
	"Method": "Map getAllAssessmentsReleasedToAuthenticatedUsers(){\r\n    try {\r\n        PublishedAssessmentService service = new PublishedAssessmentService();\r\n        return service.getAllAssessmentsReleasedToAuthenticatedUsers();\r\n    } catch (Exception ex) {\r\n        throw new AssessmentServiceException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.redirectCourseCreation",
	"Comment": "redirect course creation process after the term selection step",
	"Method": "void redirectCourseCreation(ParameterParser params,SessionState state,String termFieldName){\r\n    User user = UserDirectoryService.getCurrentUser();\r\n    String currentUserId = user.getEid();\r\n    String userId = params.getString(\"userId\");\r\n    if (userId == null || \"\".equals(userId)) {\r\n        userId = currentUserId;\r\n    } else {\r\n        ArrayList<String> list = new ArrayList();\r\n        list.add(userId);\r\n        state.setAttribute(STATE_CM_AUTHORIZER_LIST, list);\r\n    }\r\n    state.setAttribute(STATE_INSTRUCTOR_SELECTED, userId);\r\n    String academicSessionEid = params.getString(termFieldName);\r\n    if (academicSessionEid != null) {\r\n        AcademicSession t = cms.getAcademicSession(academicSessionEid);\r\n        state.setAttribute(STATE_TERM_SELECTED, t);\r\n        if (t != null) {\r\n            List sections = prepareCourseAndSectionListing(userId, t.getEid(), state);\r\n            isFutureTermSelected(state);\r\n            if (sections != null && sections.size() > 0) {\r\n                state.setAttribute(STATE_TERM_COURSE_LIST, sections);\r\n                state.setAttribute(STATE_TEMPLATE_INDEX, \"36\");\r\n                state.setAttribute(STATE_AUTO_ADD, Boolean.TRUE);\r\n            } else {\r\n                state.removeAttribute(STATE_TERM_COURSE_LIST);\r\n                Boolean skipCourseSectionSelection = ServerConfigurationService.getBoolean(SAK_PROP_SKIP_COURSE_SECTION_SELECTION, Boolean.FALSE);\r\n                if (!skipCourseSectionSelection.booleanValue() && courseManagementIsImplemented()) {\r\n                    state.setAttribute(STATE_TEMPLATE_INDEX, \"53\");\r\n                } else {\r\n                    if (ServerConfigurationService.getBoolean(SAK_PROP_FILTER_TERMS, Boolean.FALSE)) {\r\n                        state.setAttribute(STATE_TEMPLATE_INDEX, \"36\");\r\n                    } else {\r\n                        state.setAttribute(STATE_TEMPLATE_INDEX, \"37\");\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            state.setAttribute(STATE_TEMPLATE_INDEX, \"37\");\r\n        }\r\n    }\r\n    state.setAttribute(VM_CONT_NO_ROSTER_ENABLED, ServerConfigurationService.getBoolean(SAK_PROP_CONT_NO_ROSTER_ENABLED, false));\r\n}"
}, {
	"Path": "org.sakaiproject.sitestats.impl.ServerWideReportManagerImpl.getSqlForVendor",
	"Comment": "helper method to return the appropriate sql for the db vendor\teverything should be lowercase.",
	"Method": "String getSqlForVendor(String mysql,String oracle){\r\n    if (StringUtils.equals(dbVendor, \"mysql\")) {\r\n        return mysql;\r\n    }\r\n    if (StringUtils.equals(dbVendor, \"oracle\")) {\r\n        return oracle;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.qti.helper.AuthoringHelper.getBlankSectionTemplateFileStream",
	"Comment": "get an inputstream to an unpopulated section xml from file system.",
	"Method": "InputStream getBlankSectionTemplateFileStream(){\r\n    InputStream is = ax.getTemplateInputStream(ax.SECTION);\r\n    return is;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Node.pathTo",
	"Comment": "returns the path from the current node to the nodeidentified by the given version.",
	"Method": "Path pathTo(Version vernum,Path pathTo,Version vernum,boolean soft){\r\n    Path path = new Path();\r\n    Node target = this;\r\n    do {\r\n        path.add(target);\r\n        target = target.nextInPathTo(vernum, soft);\r\n    } while (target != null);\r\n    return path;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.rcs.Version.compareVersions",
	"Comment": "compares two versions.the comparison is done the usual way, i.e.,2.0 is greter than 1.99.1,and 0.1.2 is greater than 0.1",
	"Method": "int compareVersions(Version ver){\r\n    int[] nthis = this.numbers;\r\n    int[] nthat = ver.numbers;\r\n    int i;\r\n    for (i = 0; i < nthis.length; i++) {\r\n        if (i >= nthat.length || nthis[i] > nthat[i]) {\r\n            return 1;\r\n        } else if (nthis[i] < nthat[i]) {\r\n            return -1;\r\n        }\r\n    }\r\n    if (nthat.length > i) {\r\n        return -1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.FakeBeginDeliveryActionListener.populateBeanFromPub",
	"Comment": "this takes the published assessment information and puts it in the deliverybean.this is primarily the information that needs to be set up for thebegin assessment page.additional properties will be set when the studentelects to begin taking assessment.",
	"Method": "void populateBeanFromPub(DeliveryBean delivery,PublishedAssessmentFacade pubAssessment){\r\n    log.info(\"** 1. FakeBeginDeliveryActionListener, deliveryBean = \" + delivery);\r\n    log.info(\"** 2. FakeBeginDeliveryActionListener, pubAssessment = \" + pubAssessment);\r\n    log.info(\"** 3. FakeBeginDeliveryActionListener, id= \" + pubAssessment.getAssessmentId());\r\n    log.info(\"** 4. FakeBeginDeliveryActionListener, pubId= \" + pubAssessment.getPublishedAssessmentId());\r\n    delivery.setAssessmentId((pubAssessment.getPublishedAssessmentId()).toString());\r\n    delivery.setAssessmentTitle(pubAssessment.getTitle());\r\n    delivery.setHonorPledge(pubAssessment.getAssessmentAccessControl().getHonorPledge());\r\n    delivery.setInstructorMessage(pubAssessment.getDescription());\r\n    delivery.setCreatorName(pubAssessment.getCreatedBy());\r\n    delivery.setSubmitted(false);\r\n    delivery.setGraded(false);\r\n    delivery.setFeedbackOnDate(false);\r\n    delivery.setItemIndex(0);\r\n    delivery.setSectionIndex(0);\r\n    FeedbackComponent feedback = new FeedbackComponent();\r\n    populateFeedbackComponent(feedback, pubAssessment);\r\n    delivery.setFeedbackComponent(feedback);\r\n    AssessmentAccessControlIfc control = (AssessmentAccessControlIfc) pubAssessment.getAssessmentAccessControl();\r\n    Date currentDate = new Date();\r\n    if (feedback.getShowDateFeedback() && control.getFeedbackDate() != null && currentDate.after(control.getFeedbackDate())) {\r\n        delivery.setFeedbackOnDate(true);\r\n    }\r\n    SettingsDeliveryBean settings = new SettingsDeliveryBean();\r\n    populateSettings(settings, pubAssessment);\r\n    delivery.setSettings(settings);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.shared.impl.qti.QTIServiceImpl.createImportedAssessment",
	"Comment": "import an assessment xml document in qti format, extract & persist the data.",
	"Method": "AssessmentIfc createImportedAssessment(Document document,int qtiVersion,AssessmentIfc createImportedAssessment,Document document,int qtiVersion,String unzipLocation,String templateId,String siteId,AssessmentIfc createImportedAssessment,String documentPath,int qtiVersion,String siteId){\r\n    try {\r\n        QTIService nativeQTIService = new QTIService();\r\n        return (AssessmentIfc) nativeQTIService.createImportedAssessment(documentPath, qtiVersion, siteId);\r\n    } catch (Exception ex) {\r\n        log.warn(\"createImportedAssessment() returning null\");\r\n    }\r\n    log.error(\"createImportedAssessment() returning null\");\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.listener.questionpool.CancelPoolListener.processAction",
	"Comment": "check if the outcome pool is the parent of the current pool or the current outcome pool.",
	"Method": "void processAction(ActionEvent ae){\r\n    QuestionPoolBean qpoolbean = (QuestionPoolBean) cu.lookupBean(\"questionpool\");\r\n    boolean returnToParentPool = \"true\".equals((String) ae.getComponent().getAttributes().get(\"returnToParentPool\"));\r\n    if (qpoolbean.getCurrentPool().getId() != null && qpoolbean.getCurrentPool().getId() == qpoolbean.getOutcomePool() && returnToParentPool) {\r\n        qpoolbean.setOutcomePool(qpoolbean.getCurrentPool().getParentPoolId());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.attendee.EditCommentSignupMBean.reloadMeetingWrapperInOrganizerPage",
	"Comment": "method used to reload the meeting wrapper for the organizer to get the newest updated meeting list",
	"Method": "void reloadMeetingWrapperInOrganizerPage(){\r\n    OrganizerSignupMBean bean = (OrganizerSignupMBean) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(\"OrganizerSignupMBean\");\r\n    SignupMeeting meeting = reloadMeeting(meetingWrapper.getMeeting());\r\n    this.meetingWrapper.setMeeting(meeting);\r\n    this.meetingWrapper.setCreator(sakaiFacade.getUserDisplayName(meeting.getCreatorUserId()));\r\n    bean.reset(meetingWrapper);\r\n}"
}, {
	"Path": "org.sakaiproject.profile2.util.ProfileUtils.checkContentTypeForProfileImage",
	"Comment": "check content type against allowed types. only jpeg,gif and png are support at the moment",
	"Method": "boolean checkContentTypeForProfileImage(String contentType){\r\n    ArrayList<String> allowedTypes = new ArrayList<String>();\r\n    allowedTypes.add(\"image/jpeg\");\r\n    allowedTypes.add(\"image/gif\");\r\n    allowedTypes.add(\"image/png\");\r\n    allowedTypes.add(\"image/x-png\");\r\n    allowedTypes.add(\"image/pjpeg\");\r\n    allowedTypes.add(\"image/jpg\");\r\n    if (allowedTypes.contains(contentType)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.userauditservice.util.UserAuditRegistrationUtil.getLocalResourceLoader",
	"Comment": "gets the resourceloader specified by the bundlelocation.",
	"Method": "ResourceLoader getLocalResourceLoader(){\r\n    if (rl == null) {\r\n        rl = (ResourceLoader) getResourceLoader(getBundleLocation());\r\n    }\r\n    return rl;\r\n}"
}, {
	"Path": "org.apache.commons.jrcs.diff.Revision.applyTo",
	"Comment": "applies the series of deltas in this revision as patches to the given\ttext.",
	"Method": "void applyTo(List target){\r\n    ListIterator i = deltas_.listIterator(deltas_.size());\r\n    while (i.hasPrevious()) {\r\n        Delta delta = (Delta) i.previous();\r\n        delta.patch(target);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.unboundid.LdapUserData.setProperty",
	"Comment": "assign a single property to the user, possibly\toverwriting and existing entry.",
	"Method": "void setProperty(String key,String value){\r\n    if (properties == null) {\r\n        properties = new Properties();\r\n    }\r\n    properties.setProperty(key, value);\r\n}"
}, {
	"Path": "org.sakaiproject.shortenedurl.impl.BitlyUrlService.resolve",
	"Comment": "not implemented and not needed. the short url will be a bit.ly url that will resolve to the original url.",
	"Method": "String resolve(String key){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.addAttendee",
	"Comment": "this is a jsf action call method by ui to let user add an attendee into\tthe page.",
	"Method": "String addAttendee(){\r\n    TimeslotWrapper timeslotWrapper = (TimeslotWrapper) timeslotWrapperTable.getRowData();\r\n    String attendeeEidOrEmail = null;\r\n    if (isEidInputMode()) {\r\n        attendeeEidOrEmail = getEidOrEmailInputByUser();\r\n    } else {\r\n        attendeeEidOrEmail = (String) newAttendeeInput.getValue();\r\n    }\r\n    if (attendeeEidOrEmail == null || attendeeEidOrEmail.length() < 1)\r\n        return PRE_ASSIGN_ATTENDEE_PAGE_URL;\r\n    List<String> associatedEids = getEidsForEmail(attendeeEidOrEmail.trim());\r\n    if (associatedEids.size() > 1) {\r\n        Utilities.addErrorMessage(MessageFormat.format(Utilities.rb.getString(\"exception.multiple.eids\"), new Object[] { attendeeEidOrEmail, StringUtils.join(associatedEids, \", \") }));\r\n        return PRE_ASSIGN_ATTENDEE_PAGE_URL;\r\n    }\r\n    String attendeeUserId = getUserIdForEidOrEmail(attendeeEidOrEmail.trim());\r\n    if (StringUtils.isBlank(attendeeEidOrEmail)) {\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"exception.no.such.user\") + attendeeEidOrEmail);\r\n        return PRE_ASSIGN_ATTENDEE_PAGE_URL;\r\n    }\r\n    SignupUser attendeeSignUser = getSakaiFacade().getSignupUser(this.signupMeeting, attendeeUserId);\r\n    if (attendeeSignUser == null) {\r\n        Utilities.addErrorMessage(MessageFormat.format(Utilities.rb.getString(\"user.has.no.permission.attend\"), new Object[] { attendeeEidOrEmail }));\r\n        return PRE_ASSIGN_ATTENDEE_PAGE_URL;\r\n    }\r\n    SignupAttendee attendee = new SignupAttendee(attendeeUserId, attendeeSignUser.getMainSiteId());\r\n    if (isDuplicateAttendee(timeslotWrapper.getTimeSlot(), attendee)) {\r\n        Utilities.addErrorMessage(Utilities.rb.getString(\"attendee.already.in.timeslot\"));\r\n    } else {\r\n        timeslotWrapper.addAttendee(attendee, sakaiFacade.getUserDisplayLastFirstName(attendeeUserId));\r\n    }\r\n    return PRE_ASSIGN_ATTENDEE_PAGE_URL;\r\n}"
}, {
	"Path": "schemacrawler.schemacrawler.SchemaCrawlerOptions.getTableTypes",
	"Comment": "returns the table types requested for output. this can be null, ifall supported table types are required in the output.",
	"Method": "Collection<String> getTableTypes(){\r\n    if (tableTypes == null) {\r\n        return null;\r\n    } else {\r\n        return new HashSet(tableTypes);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.processCancel",
	"Comment": "this is a jsf action call method by ui to let user cancel the action.",
	"Method": "String processCancel(){\r\n    reset();\r\n    return CANCEL_ADD_MEETING_PAGE_URL;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.AttendanceSignupBean.reset",
	"Comment": "this resets information which contains in the meetings object that lived in a session\tscope",
	"Method": "void reset(){\r\n    this.meetingWrapper.setMeeting(this.signupMeetingService.loadSignupMeeting(meetingWrapper.getMeeting().getId(), sakaiFacade.getCurrentUserId(), sakaiFacade.getCurrentLocationId()));\r\n}"
}, {
	"Path": "org.sakaiproject.site.tool.SiteAction.sendSiteRequest",
	"Comment": "notification sent when a course site needs to be set up by support",
	"Method": "void sendSiteRequest(SessionState state,String request,int requestListSize,List requestFields,String fromContext){\r\n    User cUser = UserDirectoryService.getCurrentUser();\r\n    String sendEmailToRequestee = null;\r\n    StringBuilder buf = new StringBuilder();\r\n    boolean requireAuthorizer = ServerConfigurationService.getString(SAK_PROP_REQUIRE_AUTHORIZER, \"true\").equals(\"true\") ? true : false;\r\n    String emailAuthorizer = ServerConfigurationService.getString(SAK_PROP_EMAIL_AUTHORIZER, \"\");\r\n    String requestEmail = getSetupRequestEmailAddress();\r\n    String requestReplyToEmail = getSetupRequestReplyToEmailAddress();\r\n    if (requestEmail != null) {\r\n        String officialAccountName = ServerConfigurationService.getString(\"officialAccountName\", \"\");\r\n        SiteInfo siteInfo = (SiteInfo) state.getAttribute(STATE_SITE_INFO);\r\n        Site site = getStateSite(state);\r\n        String id = site.getId();\r\n        String title = site.getTitle();\r\n        Time time = TimeService.newTime();\r\n        String local_time = time.toStringLocalTime();\r\n        String local_date = time.toStringLocalDate();\r\n        AcademicSession term = null;\r\n        boolean termExist = false;\r\n        if (state.getAttribute(STATE_TERM_SELECTED) != null) {\r\n            termExist = true;\r\n            term = (AcademicSession) state.getAttribute(STATE_TERM_SELECTED);\r\n        }\r\n        String productionSiteName = ServerConfigurationService.getServerName();\r\n        String from = NULL_STRING;\r\n        String to = NULL_STRING;\r\n        String headerTo = NULL_STRING;\r\n        String replyTo = NULL_STRING;\r\n        String content = NULL_STRING;\r\n        String sessionUserName = cUser.getDisplayName();\r\n        String additional = NULL_STRING;\r\n        if (\"new\".equals(request)) {\r\n            additional = siteInfo.getAdditional();\r\n        } else {\r\n            additional = (String) state.getAttribute(FORM_ADDITIONAL);\r\n        }\r\n        boolean isFutureTerm = false;\r\n        if (state.getAttribute(STATE_FUTURE_TERM_SELECTED) != null && ((Boolean) state.getAttribute(STATE_FUTURE_TERM_SELECTED)).booleanValue()) {\r\n            isFutureTerm = true;\r\n        }\r\n        String requestId = (String) state.getAttribute(STATE_SITE_QUEST_UNIQNAME);\r\n        List<String> authorizerList = (List) state.getAttribute(STATE_CM_AUTHORIZER_LIST);\r\n        if (authorizerList == null) {\r\n            authorizerList = new ArrayList();\r\n        }\r\n        if (requestId != null) {\r\n            List instructors = new ArrayList(Arrays.asList(requestId.split(\",\")));\r\n            for (Iterator iInstructors = instructors.iterator(); iInstructors.hasNext(); ) {\r\n                String instructorId = (String) iInstructors.next();\r\n                authorizerList.add(instructorId);\r\n            }\r\n        }\r\n        String requestSectionInfo = \"\";\r\n        if (\"manual\".equals(fromContext)) {\r\n            requestSectionInfo = addRequestedSectionIntoNotification(state, requestFields);\r\n        } else if (\"cmRequest\".equals(fromContext)) {\r\n            requestSectionInfo = addRequestedCMSectionIntoNotification(state, requestFields);\r\n        }\r\n        String authorizerNotified = \"\";\r\n        String authorizerNotNotified = \"\";\r\n        if (!isFutureTerm) {\r\n            for (Iterator iInstructors = authorizerList.iterator(); iInstructors.hasNext(); ) {\r\n                String instructorId = (String) iInstructors.next();\r\n                if ((\"\".equals(emailAuthorizer) && requireAuthorizer) || \"true\".equals(emailAuthorizer)) {\r\n                    boolean result = userNotificationProvider.notifyCourseRequestAuthorizer(instructorId, requestEmail, requestReplyToEmail, term != null ? term.getTitle() : \"\", requestSectionInfo, title, id, additional, productionSiteName);\r\n                    if (!result) {\r\n                        authorizerNotNotified += instructorId + \", \";\r\n                    } else {\r\n                        authorizerNotified += instructorId + \", \";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        String supportEmailContent = userNotificationProvider.notifyCourseRequestSupport(requestEmail, productionSiteName, request, term != null ? term.getTitle() : \"\", requestListSize, requestSectionInfo, officialAccountName, title, id, additional, requireAuthorizer, authorizerNotified, authorizerNotNotified);\r\n        userNotificationProvider.notifyCourseRequestRequester(requestEmail, supportEmailContent, term != null ? term.getTitle() : \"\");\r\n        rb.setContextLocale(Locale.getDefault());\r\n        state.setAttribute(REQUEST_SENT, Boolean.valueOf(true));\r\n    }\r\n    rb.setContextLocale(null);\r\n}"
}, {
	"Path": "uk.ac.cam.caret.sakai.rwiki.tool.bean.HistoryBean.getViewRevisionUrl",
	"Comment": "using the currently set interestedrevision returns an url that will\tgenerate a view of that revision.",
	"Method": "String getViewRevisionUrl(){\r\n    return \"?\" + PAGENAME_URL_ENCODED + \"=\" + urlEncode(getPageName()) + \"&\" + ACTION_URL_ENCODED + \"=\" + urlEncode(WikiPageAction.REVIEW_ACTION.getName()) + \"&\" + PANEL_URL_ENCODED + \"=\" + MAIN_URL_ENCODED + \"&\" + HistoryBean.REVISION_URL_ENCODED + \"=\" + interestedRevision;\r\n}"
}, {
	"Path": "org.sakaiproject.util.MergedList.getChannelReferenceArrayFromDelimitedString",
	"Comment": "this gets a list of channels from the portlet configuration information.\tchannels here can really be a channel or a schedule from a site.",
	"Method": "String[] getChannelReferenceArrayFromDelimitedString(String primarychannelReference,String mergedInitParameterValue){\r\n    String mergedChannels = null;\r\n    mergedChannels = StringUtils.trimToNull(mergedInitParameterValue);\r\n    String[] mergedChannelArray = null;\r\n    if (mergedChannels != null) {\r\n        mergedChannelArray = mergedChannels.split(ID_DELIMITER);\r\n    } else {\r\n        mergedChannelArray = new String[1];\r\n        mergedChannelArray[0] = primarychannelReference;\r\n    }\r\n    return mergedChannelArray;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.AssessmentBaseFacade.getCreatedBy",
	"Comment": "get createdby for assessmentbasefacade. this represents the agentid of the personwho created the record",
	"Method": "String getCreatedBy(){\r\n    try {\r\n        this.data = (AssessmentBaseIfc) assessment.getData();\r\n    } catch (AssessmentException ex) {\r\n        throw new DataFacadeException(ex.getMessage());\r\n    }\r\n    return this.data.getCreatedBy();\r\n}"
}, {
	"Path": "com.google.ar.sceneform.ux.TransformableNode.getScaleController",
	"Comment": "returns the controller that scales this node using a pinch gesture.",
	"Method": "ScaleController getScaleController(){\r\n    return scaleController;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.integration.helper.integrated.AgentHelperImpl.isFileUploadAvailable",
	"Comment": "this is a kludge to work around a jsf scriptlet dependency introduced by cwenon org.sakaiproject.component.cover.serverconfigurationservice.",
	"Method": "boolean isFileUploadAvailable(){\r\n    String commentOutFileUpload = ServerConfigurationService.getString(\"sam_file_upload_comment_out\");\r\n    if (commentOutFileUpload == null)\r\n        return true;\r\n    return !commentOutFileUpload.equalsIgnoreCase(\"true\");\r\n}"
}, {
	"Path": "org.sakaiproject.sitemembers.ui.WidgetPage.getMembersWithRole",
	"Comment": "get the members with the given role.sorted by online status then display name. maximum returned is 30 but can be overridden.",
	"Method": "List<GridPerson> getMembersWithRole(Site site,SiteRole role,Set<String> hiddenUserIds){\r\n    List<BasicConnection> userList = new ArrayList();\r\n    Set<String> userUuids = site.getUsersIsAllowed(role.getPermissionName());\r\n    userUuids.removeAll(hiddenUserIds);\r\n    final List<User> users = this.userDirectoryService.getUsers(userUuids);\r\n    userList = this.connectionsLogic.getBasicConnections(users);\r\n    Collections.sort(userList, new Comparator<BasicConnection>() {\r\n        @Override\r\n        public int compare(final BasicConnection o1, final BasicConnection o2) {\r\n            return new CompareToBuilder().append(o1.getOnlineStatus() == ProfileConstants.ONLINE_STATUS_OFFLINE ? 2 : 1, o2.getOnlineStatus() == ProfileConstants.ONLINE_STATUS_OFFLINE ? 2 : 1).append(o1.getDisplayName(), o2.getDisplayName()).toComparison();\r\n        }\r\n    });\r\n    userList = userList.stream().limit(this.maxUsers).collect(Collectors.toList());\r\n    List<GridPerson> rval = new ArrayList();\r\n    for (BasicConnection person : userList) {\r\n        GridPerson gridPerson = new GridPerson();\r\n        gridPerson.uuid = person.getUuid();\r\n        gridPerson.displayName = person.getDisplayName();\r\n        gridPerson.role = role.toString();\r\n        gridPerson.onlineStatus = person.getOnlineStatus();\r\n        rval.add(gridPerson);\r\n    }\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.sitemembers.ui.WidgetPage.getMembersWithRole",
	"Comment": "get the members with the given role.sorted by online status then display name. maximum returned is 30 but can be overridden.",
	"Method": "List<GridPerson> getMembersWithRole(Site site,SiteRole role,Set<String> hiddenUserIds){\r\n    return new CompareToBuilder().append(o1.getOnlineStatus() == ProfileConstants.ONLINE_STATUS_OFFLINE ? 2 : 1, o2.getOnlineStatus() == ProfileConstants.ONLINE_STATUS_OFFLINE ? 2 : 1).append(o1.getDisplayName(), o2.getDisplayName()).toComparison();\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.organizer.action.EditComment.checkPrecondition",
	"Comment": "this method checks all the preconditions before saving the data into the database",
	"Method": "void checkPrecondition(SignupMeeting upToDateMeeting,Long timeslotId){\r\n    String originalComment = findUserComment(originalMeeting, timeslotId);\r\n    String upToDateComment = findUserComment(upToDateMeeting, timeslotId);\r\n    if (!originalComment.equals(upToDateComment)) {\r\n        throw new SignupUserActionException(Utilities.rb.getString(\"someone.already.updated.comment\"));\r\n    }\r\n    if (upToDateMeeting.getTimeslot(timeslotId) != null && upToDateMeeting.getTimeslot(timeslotId).getAttendee(userId) != null) {\r\n        upToDateMeeting.getTimeslot(timeslotId).getAttendee(userId).setComments(this.modifiedComment);\r\n    } else\r\n        throw new SignupUserActionException(Utilities.rb.getString(\"someone.already.updated.comment\"));\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.util.Utilities.getRelativeTimeValue",
	"Comment": "get the relative time value according to the time unit type.",
	"Method": "int getRelativeTimeValue(String timeScaleType,long timeLength){\r\n    long rValue = timeLength;\r\n    if (DAYS.equals(timeScaleType))\r\n        rValue = timeLength / DAY_IN_MINUTES;\r\n    if (HOURS.equals(timeScaleType))\r\n        rValue = timeLength / Hour_In_MINUTES;\r\n    return (int) rValue;\r\n}"
}, {
	"Path": "schemacrawler.crawl.DatabaseObjectReference.readObject",
	"Comment": "read saved content of the reference, construct new reference, andthe partial.",
	"Method": "void readObject(ObjectInputStream in){\r\n    if (in != null) {\r\n        partial = (D) in.readObject();\r\n        databaseObjectRef = new WeakReference(in.readObject());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.getUserIdForEidOrEmail",
	"Comment": "gets the userid for a user, given an eid or an email address. \twe check if it matches the eid first, then if it matches an email address.\tif nothing, return null.",
	"Method": "String getUserIdForEidOrEmail(String value){\r\n    User u = sakaiFacade.getUserByEid(value);\r\n    if (u == null) {\r\n        u = sakaiFacade.getUserByEmail(value);\r\n    }\r\n    if (u != null) {\r\n        return u.getId();\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.signup.tool.jsf.NewSignupMeetingBean.init",
	"Comment": "initialize all the default setting for creating new events.",
	"Method": "void init(){\r\n    signupMeeting = new SignupMeeting();\r\n    signupMeeting.setMeetingType(INDIVIDUAL);\r\n    Date date = new Date();\r\n    Calendar startCal = Calendar.getInstance();\r\n    startCal.setTime(date);\r\n    startCal.set(Calendar.MINUTE, 0);\r\n    startCal.set(Calendar.SECOND, 0);\r\n    startCal.set(Calendar.MILLISECOND, 0);\r\n    signupMeeting.setStartTime(startCal.getTime());\r\n    Calendar endCal = startCal;\r\n    endCal.add(Calendar.HOUR, 1);\r\n    signupMeeting.setEndTime(endCal.getTime());\r\n    unlimited = false;\r\n    recurrence = false;\r\n    assignParicitpantsToAllRecurEvents = false;\r\n    numberOfSlots = 4;\r\n    numberOfAttendees = 1;\r\n    maxOfAttendees = 10;\r\n    timeSlotDuration = 0;\r\n    signupBegins = 6;\r\n    deadlineTime = 1;\r\n    signupBeginsType = Utilities.DAYS;\r\n    deadlineTimeType = Utilities.HOURS;\r\n    validationError = false;\r\n    sendEmail = DEFAULT_SEND_EMAIL;\r\n    if (NEW_MEETING_SEND_EMAIL) {\r\n        sendEmail = NEW_MEETING_SEND_EMAIL;\r\n    }\r\n    sendEmailToSelectedPeopleOnly = DEFAULT_SEND_EMAIL_TO_SELECTED_PEOPLE_ONLY;\r\n    receiveEmail = false;\r\n    sendEmailByOwner = DEFAULT_SEND_EMAIL;\r\n    allowComment = DEFAULT_ALLOW_COMMENT;\r\n    allowWaitList = DEFAULT_ALLOW_WAITLIST;\r\n    autoReminder = DEFAULT_AUTO_RIMINDER;\r\n    publishToCalendar = DEFAULT_EXPORT_TO_CALENDAR_TOOL;\r\n    createGroups = DEFAULT_CREATE_GROUPS;\r\n    currentStepHiddenInfo = null;\r\n    eidInputMode = false;\r\n    repeatType = ONCE_ONLY;\r\n    repeatUntil = startCal.getTime();\r\n    recurLengthChoice = \"1\";\r\n    occurrences = 0;\r\n    this.publishedSite = null;\r\n    userDefinedTS = false;\r\n    customTimeSlotWrpList = null;\r\n    otherSitesAvailability = true;\r\n    creatorUserId = null;\r\n    if (this.attachments != null && this.attachments.size() > 0) {\r\n        for (SignupAttachment attach : attachments) {\r\n            getAttachmentHandler().removeAttachmentInContentHost(attach);\r\n        }\r\n        this.attachments.clear();\r\n    } else\r\n        this.attachments = new ArrayList<SignupAttachment>();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.delivery.ItemContentsBean.getRoundedMaxPoints",
	"Comment": "string representation of the max points available for this question.",
	"Method": "double getRoundedMaxPoints(){\r\n    return maxPoints;\r\n}"
}, {
	"Path": "org.sakaiproject.user.tool.UserPrefsTool.processActionRefreshFrmEdit",
	"Comment": "this is called from edit page for navigation to refresh page",
	"Method": "String processActionRefreshFrmEdit(){\r\n    log.debug(\"processActionRefreshFrmEdit()\");\r\n    cancelEdit();\r\n    loadRefreshData();\r\n    return \"refresh\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.facade.authz.integrated.AuthzQueriesFacade.checkAuthorization",
	"Comment": "this appears to be unused, it is also dangerous, as it is not in the api",
	"Method": "boolean checkAuthorization(String agentId,String functionId,String qualifierId){\r\n    if (functionId == null || qualifierId == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    final String queryAgentId = ToolManager.getCurrentPlacement().getContext();\r\n    HibernateCallback hcb = session -> {\r\n        Query query = session.createQuery(HQL_QUERY_CHECK_AUTHZ);\r\n        if (agentId == null) {\r\n            query.setString(\"agentId\", queryAgentId);\r\n        } else {\r\n            query.setString(\"agentId\", agentId);\r\n        }\r\n        query.setString(\"functionId\", functionId);\r\n        query.setString(\"qualifierId\", qualifierId);\r\n        return query.uniqueResult();\r\n    };\r\n    Object result = getHibernateTemplate().execute(hcb);\r\n    if (result != null)\r\n        return true;\r\n    else\r\n        return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.assessment.ui.bean.author.SectionBean.getPoolsAvailable",
	"Comment": "list of available question pools for random draw. returns a list of pools that have not been used by other random drawn parts",
	"Method": "List getPoolsAvailable(){\r\n    List resultPoolList = new ArrayList();\r\n    AssessmentBean assessmentBean = (AssessmentBean) ContextUtil.lookupBean(\"assessmentBean\");\r\n    QuestionPoolService delegate = new QuestionPoolService();\r\n    String agentId = AgentFacade.getAgentString();\r\n    List allpoollist = delegate.getBasicInfoOfAllPools(agentId);\r\n    Map allPoolsMap = new HashMap();\r\n    for (int i = 0; i < allpoollist.size(); i++) {\r\n        QuestionPoolFacade apool = (QuestionPoolFacade) allpoollist.get(i);\r\n        allPoolsMap.put(apool.getQuestionPoolId().toString(), apool);\r\n    }\r\n    AssessmentService assessdelegate = null;\r\n    AuthorBean author = (AuthorBean) ContextUtil.lookupBean(\"author\");\r\n    boolean isEditPendingAssessmentFlow = author.getIsEditPendingAssessmentFlow();\r\n    if (isEditPendingAssessmentFlow) {\r\n        assessdelegate = new AssessmentService();\r\n    } else {\r\n        assessdelegate = new PublishedAssessmentService();\r\n    }\r\n    List sectionList = assessmentBean.getSectionList();\r\n    for (int i = 0; i < sectionList.size(); i++) {\r\n        SelectItem s = (SelectItem) sectionList.get(i);\r\n        SectionDataIfc section = assessdelegate.getSection(s.getValue().toString());\r\n        if ((section != null) && (section.getSectionMetaDataByLabel(SectionDataIfc.AUTHOR_TYPE) != null) && (section.getSectionMetaDataByLabel(SectionDataIfc.AUTHOR_TYPE).equals(SectionDataIfc.RANDOM_DRAW_FROM_QUESTIONPOOL.toString()))) {\r\n            String poolid = section.getSectionMetaDataByLabel(SectionDataIfc.POOLID_FOR_RANDOM_DRAW);\r\n            if (allPoolsMap.containsKey(poolid)) {\r\n                allPoolsMap.remove(poolid);\r\n            }\r\n        }\r\n    }\r\n    Map<Long, Integer> poolQuestionCounts = delegate.getCountItemsForUser(agentId);\r\n    Iterator pooliter = allPoolsMap.keySet().iterator();\r\n    while (pooliter.hasNext()) {\r\n        QuestionPoolFacade pool = (QuestionPoolFacade) allPoolsMap.get(pooliter.next());\r\n        Long poolId = pool.getQuestionPoolId();\r\n        int items = poolQuestionCounts.containsKey(poolId) ? poolQuestionCounts.get(poolId) : 0;\r\n        if (items > 0) {\r\n            resultPoolList.add(new SelectItem((poolId.toString()), getPoolTitleValueForRandomDrawDropDown(pool, items, allpoollist, delegate)));\r\n        }\r\n    }\r\n    if (!(\"\".equals(this.getSelectedPool())) && (this.getSelectedPool() != null)) {\r\n        QuestionPoolFacade currPool = delegate.getPool(new Long(this.getSelectedPool()), AgentFacade.getAgentString());\r\n        if (currPool != null) {\r\n            int currItems = delegate.getCountItems(currPool.getQuestionPoolId());\r\n            if (currItems > 0) {\r\n                resultPoolList.add(new SelectItem((currPool.getQuestionPoolId().toString()), getPoolTitleValueForRandomDrawDropDown(currPool, currItems, allpoollist, delegate)));\r\n            }\r\n        } else {\r\n        }\r\n    }\r\n    Collections.sort(resultPoolList, new ItemComparator());\r\n    return resultPoolList;\r\n}"
}]