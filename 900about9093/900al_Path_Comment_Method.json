[{
	"Path": "simplenlg.syntax.english.NounPhraseHelper.getMinPos",
	"Comment": "determines the minimim position at which this modifier can occur.",
	"Method": "int getMinPos(NLGElement modifier){\r\n    int position = QUALITATIVE_POSITION;\r\n    if (modifier.isA(LexicalCategory.NOUN) || modifier.isA(PhraseCategory.NOUN_PHRASE)) {\r\n        position = NOUN_POSITION;\r\n    } else if (modifier.isA(LexicalCategory.ADJECTIVE) || modifier.isA(PhraseCategory.ADJECTIVE_PHRASE)) {\r\n        WordElement adjective = getHeadWordElement(modifier);\r\n        if (adjective.getFeatureAsBoolean(LexicalFeature.QUALITATIVE).booleanValue()) {\r\n            position = QUALITATIVE_POSITION;\r\n        } else if (adjective.getFeatureAsBoolean(LexicalFeature.COLOUR).booleanValue()) {\r\n            position = COLOUR_POSITION;\r\n        } else if (adjective.getFeatureAsBoolean(LexicalFeature.CLASSIFYING).booleanValue()) {\r\n            position = CLASSIFYING_POSITION;\r\n        }\r\n    }\r\n    return position;\r\n}"
}, {
	"Path": "org.apache.struts.validator.BeanValidatorForm.contains",
	"Comment": "does the specified mapped property contain a value for the specifiedkey value?",
	"Method": "boolean contains(String name,String key){\r\n    return dynaBean.contains(name, key);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.getQuantileLowerBound",
	"Comment": "gets the lower bound of the value interval in which the true quantile of the given rankexists with a confidence of at least 99%.",
	"Method": "double getQuantileLowerBound(double fraction){\r\n    return getQuantile(max(0, fraction - Util.getNormalizedRankError(k_, false)));\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.isPresent",
	"Comment": "return true if there is a defined message for thespecified key in the specified locale.",
	"Method": "boolean isPresent(String key,boolean isPresent,Locale locale,String key){\r\n    String message = getMessage(locale, key);\r\n    if (message == null) {\r\n        return false;\r\n    } else if (message.startsWith(\"???\") && message.endsWith(\"???\")) {\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.hash.MurmurHash3Adaptor.asDouble",
	"Comment": "returns a uniform random double with a minimum inclusive value of zero and a maximum exclusivevalue of 1.0.the double values produced are only as random as the murmurhash3 algorithm, which may beadequate for many applications. however, if you are looking for high guarantees of randomnessyou should turn to more sophisticated random generators such as mersenne twister or wellalgorithms.",
	"Method": "double asDouble(long[] hash){\r\n    return (hash[0] >>> 12) * 0x1.0p-52d;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.util.TagUtils.getScope",
	"Comment": "converts the scope name into its corresponding pagecontext constant value.",
	"Method": "int getScope(String scopeName,int defaultValue,int getScope,String scopeName){\r\n    Integer scope = (Integer) scopes.get(scopeName.toLowerCase());\r\n    if (scope == null) {\r\n        throw new JspException(\"Unable to retrieve the scope \" + scopeName);\r\n    }\r\n    return scope.intValue();\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.IntersectionImpl.heapifyInstance",
	"Comment": "heapify an intersection target from a memory image containing data.",
	"Method": "IntersectionImplR heapifyInstance(Memory srcMem,long seed){\r\n    final IntersectionImpl impl = new IntersectionImpl(null, seed, false);\r\n    final int preLongsMem = srcMem.getByte(PREAMBLE_LONGS_BYTE) & 0X3F;\r\n    final int serVer = srcMem.getByte(SER_VER_BYTE) & 0XFF;\r\n    final int famID = srcMem.getByte(FAMILY_BYTE) & 0XFF;\r\n    final int lgArrLongs = srcMem.getByte(LG_ARR_LONGS_BYTE) & 0XFF;\r\n    final int flags = srcMem.getByte(FLAGS_BYTE) & 0XFF;\r\n    final int curCount = srcMem.getInt(RETAINED_ENTRIES_INT);\r\n    final long thetaLong = srcMem.getLong(THETA_LONG);\r\n    final boolean empty = (flags & EMPTY_FLAG_MASK) > 0;\r\n    if (preLongsMem != CONST_PREAMBLE_LONGS) {\r\n        throw new SketchesArgumentException(\"Memory PreambleLongs must equal \" + CONST_PREAMBLE_LONGS + \": \" + preLongsMem);\r\n    }\r\n    if (serVer != SER_VER) {\r\n        throw new SketchesArgumentException(\"Serialization Version must equal \" + SER_VER);\r\n    }\r\n    Family.INTERSECTION.checkFamilyID(famID);\r\n    if (empty) {\r\n        if (curCount != 0) {\r\n            throw new SketchesArgumentException(\"srcMem empty state inconsistent with curCount: \" + empty + \",\" + curCount);\r\n        }\r\n    }\r\n    impl.lgArrLongs_ = lgArrLongs;\r\n    impl.curCount_ = curCount;\r\n    impl.thetaLong_ = thetaLong;\r\n    impl.empty_ = empty;\r\n    if (!empty) {\r\n        if (curCount > 0) {\r\n            impl.hashTable_ = new long[1 << lgArrLongs];\r\n            srcMem.getLongArray(CONST_PREAMBLE_LONGS << 3, impl.hashTable_, 0, 1 << lgArrLongs);\r\n        }\r\n    }\r\n    return impl;\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.doInclude",
	"Comment": "do an include of specified uri using a requestdispatcher.this method is used by all internal method needing to do aninclude.",
	"Method": "void doInclude(String uri,HttpServletRequest request,HttpServletResponse response){\r\n    RequestDispatcher rd = getServletContext().getRequestDispatcher(uri);\r\n    if (rd == null) {\r\n        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, getInternal().getMessage(\"requestDispatcher\", uri));\r\n        return;\r\n    }\r\n    rd.include(request, response);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.present",
	"Comment": "return true if a message string for the specified message key ispresent for the specified locale and bundle.",
	"Method": "boolean present(PageContext pageContext,String bundle,String locale,String key){\r\n    MessageResources resources = retrieveMessageResources(pageContext, bundle, true);\r\n    Locale userLocale = getUserLocale(pageContext, locale);\r\n    return resources.isPresent(userLocale, key);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.setActionFormBeanClass",
	"Comment": "the default class name to be used when creating action form beaninstances.",
	"Method": "void setActionFormBeanClass(String actionFormBeanClass){\r\n    this.actionFormBeanClass = actionFormBeanClass;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.SelectTag.isMatched",
	"Comment": "does the specified value match one of those we are looking for?",
	"Method": "boolean isMatched(String value){\r\n    if ((this.match == null) || (value == null)) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < this.match.length; i++) {\r\n        if (value.equals(this.match[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.getSharedSketch",
	"Comment": "gets the shared concurrentdirectthetasketch or null if not set.",
	"Method": "SharedThetaSketch getSharedSketch(){\r\n    return bShared;\r\n}"
}, {
	"Path": "simplenlg.lexicon.english.XMLLexiconTest.xmlLexiconImmutabilityTest",
	"Comment": "tests the immutability of the xmllexicon by checking to make sure features \tare not inadvertently propagated to the canonical xmllexicon wordelement object.",
	"Method": "void xmlLexiconImmutabilityTest(){\r\n    NLGFactory factory = new NLGFactory(lexicon);\r\n    Realiser realiser = new Realiser(lexicon);\r\n    NPPhraseSpec wall = factory.createNounPhrase(\"the\", \"wall\");\r\n    Assert.assertEquals(NumberAgreement.SINGULAR, wall.getFeature(Feature.NUMBER));\r\n    wall.setPlural(true);\r\n    SPhraseSpec sentence = factory.createClause(\"motion\", \"observe\");\r\n    sentence.setFeature(Feature.TENSE, Tense.PAST);\r\n    PPPhraseSpec pp = factory.createPrepositionPhrase(\"in\", wall);\r\n    sentence.addPostModifier(pp);\r\n    realiser.realiseSentence(sentence);\r\n    wall = factory.createNounPhrase(\"the\", \"wall\");\r\n    Assert.assertEquals(NumberAgreement.SINGULAR, wall.getFeature(Feature.NUMBER));\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedLessThanTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.DirectUnionTest.checkUnions",
	"Comment": "the task here is to check the transition boundaries as the sketch morphs between list toset to hll modes. the transition points vary as a function of lgconfigk. in addition,this checks that the union operation is operating properly based on the order thesketches are presented to the union.",
	"Method": "void checkUnions(){\r\n    int t1 = 2;\r\n    int t2 = 2;\r\n    int rt = 2;\r\n    println(\"TgtR: \" + TgtHllType.values()[rt].toString());\r\n    int lgK1 = 7;\r\n    int lgK2 = 7;\r\n    int lgMaxK = 7;\r\n    int n1 = 7;\r\n    int n2 = 7;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 8;\r\n    n2 = 7;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 7;\r\n    n2 = 8;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 8;\r\n    n2 = 8;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 7;\r\n    n2 = 14;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    println(\"++END BASE GROUP++\");\r\n    int i = 0;\r\n    for (i = 7; i <= 13; i++) {\r\n        lgK1 = i;\r\n        lgK2 = i;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"--END MINOR GROUP--\");\r\n        lgK1 = i;\r\n        lgK2 = i + 1;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"--END MINOR GROUP--\");\r\n        lgK1 = i + 1;\r\n        lgK2 = i;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"--END MINOR GROUP--\");\r\n        lgK1 = i + 1;\r\n        lgK2 = i + 1;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"++END MAJOR GROUP++\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateByteLocale",
	"Comment": "checks if the field can safely be converted to a byte primitive.",
	"Method": "Object validateByteLocale(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    Locale locale = RequestUtils.getUserLocale(request, null);\r\n    result = GenericTypeValidator.formatByte(value, locale);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testInitModuleFormBeansNullFormType",
	"Comment": "test that initmoduleformbeans throws an exception when a form with anull type is present.",
	"Method": "void testInitModuleFormBeansNullFormType(){\r\n    FormBeanConfig formBean = new FormBeanConfig();\r\n    formBean.setName(\"noTypeForm\");\r\n    moduleConfig.addFormBeanConfig(formBean);\r\n    try {\r\n        actionServlet.initModuleFormBeans(moduleConfig);\r\n        fail(\"An exception should've been thrown here.\");\r\n    } catch (UnavailableException e) {\r\n    } catch (Exception e) {\r\n        fail(\"Unrecognized exception thrown: \" + e);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUnion.update",
	"Comment": "updates the union by adding a set of entries from a given sketch",
	"Method": "void update(ArrayOfDoublesSketch sketchIn){\r\n    if (sketchIn == null) {\r\n        return;\r\n    }\r\n    Util.checkSeedHashes(seedHash_, sketchIn.getSeedHash());\r\n    if (sketch_.getNumValues() != sketchIn.getNumValues()) {\r\n        throw new SketchesArgumentException(\"Incompatible sketches: number of values mismatch \" + sketch_.getNumValues() + \" and \" + sketchIn.getNumValues());\r\n    }\r\n    if (sketchIn.isEmpty()) {\r\n        return;\r\n    }\r\n    if (sketchIn.getThetaLong() < theta_) {\r\n        theta_ = sketchIn.getThetaLong();\r\n    }\r\n    final ArrayOfDoublesSketchIterator it = sketchIn.iterator();\r\n    while (it.next()) {\r\n        sketch_.merge(it.getKey(), it.getValues());\r\n    }\r\n}"
}, {
	"Path": "simplenlg.syntax.english.NounPhraseHelper.getMaxPos",
	"Comment": "determines the maximim position at which this modifier can occur.",
	"Method": "int getMaxPos(NLGElement modifier){\r\n    int position = NOUN_POSITION;\r\n    if (modifier.isA(LexicalCategory.ADJECTIVE) || modifier.isA(PhraseCategory.ADJECTIVE_PHRASE)) {\r\n        WordElement adjective = getHeadWordElement(modifier);\r\n        if (adjective.getFeatureAsBoolean(LexicalFeature.CLASSIFYING).booleanValue()) {\r\n            position = CLASSIFYING_POSITION;\r\n        } else if (adjective.getFeatureAsBoolean(LexicalFeature.COLOUR).booleanValue()) {\r\n            position = COLOUR_POSITION;\r\n        } else if (adjective.getFeatureAsBoolean(LexicalFeature.QUALITATIVE).booleanValue()) {\r\n            position = QUALITATIVE_POSITION;\r\n        } else {\r\n            position = CLASSIFYING_POSITION;\r\n        }\r\n    }\r\n    return position;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.saveException",
	"Comment": "save the specified exception as a request attribute for later use.",
	"Method": "void saveException(PageContext pageContext,Throwable exception){\r\n    pageContext.setAttribute(Globals.EXCEPTION_KEY, exception, PageContext.REQUEST_SCOPE);\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.getSizeThreshold",
	"Comment": "returns the size threshold which determines whether an uploadedfile will be written to disk or cached in memory.",
	"Method": "long getSizeThreshold(ModuleConfig mc){\r\n    return convertSizeToBytes(mc.getControllerConfig().getMemFileSize(), DEFAULT_SIZE_THRESHOLD);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesPlugin.init",
	"Comment": "receive notification that the specified module is beingstarted up.",
	"Method": "void init(ActionServlet servlet,ModuleConfig moduleConfig){\r\n    DefinitionsFactoryConfig factoryConfig = readFactoryConfig(servlet, moduleConfig);\r\n    factoryConfig.setFactoryName(moduleConfig.getPrefix());\r\n    this.initRequestProcessorClass(moduleConfig);\r\n    this.initTilesUtil();\r\n    this.initDefinitionsFactory(servlet.getServletContext(), moduleConfig, factoryConfig);\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.PreambleUtil.getLoFieldOffset",
	"Comment": "returns the defined byte offset from the start of the preamble given a lofield.this only applies to the first 8 bytes of the preamble.",
	"Method": "int getLoFieldOffset(LoField loField){\r\n    return loField.ordinal();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedPresentTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedIterateTag.deriveNestedProperty",
	"Comment": "the only added property to the class. for use in proper nesting.",
	"Method": "String deriveNestedProperty(){\r\n    Object idObj = pageContext.getAttribute(id);\r\n    if (idObj instanceof Map.Entry) {\r\n        return nesting + \"(\" + ((Map.Entry) idObj).getKey() + \")\";\r\n    } else {\r\n        return nesting + \"[\" + this.getIndex() + \"]\";\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.PairTable.introspectiveInsertionSort",
	"Comment": "in applications where the input array is already nearly sorted,insertion sort runs in linear time with a very small constant.this introspective version of insertion sort protects againstthe quadratic cost of sorting bad input arrays.it keeps track of how much work has been done, and if that exceeds aconstant times the array length, it switches to a different sorting algorithm.",
	"Method": "void introspectiveInsertionSort(int[] a,int l,int r){\r\n    final int length = (r - l) + 1;\r\n    long cost = 0;\r\n    final long costLimit = 8L * length;\r\n    for (int i = l + 1; i <= r; i++) {\r\n        int j = i;\r\n        final long v = a[i] & 0XFFFF_FFFFL;\r\n        while ((j >= (l + 1)) && (v < ((a[j - 1]) & 0XFFFF_FFFFL))) {\r\n            a[j] = a[j - 1];\r\n            j -= 1;\r\n        }\r\n        a[j] = (int) v;\r\n        cost += (i - j);\r\n        if (cost > costLimit) {\r\n            final long[] b = new long[a.length];\r\n            for (int m = 0; m < a.length; m++) {\r\n                b[m] = a[m] & 0XFFFF_FFFFL;\r\n            }\r\n            Arrays.sort(b, l, r + 1);\r\n            for (int m = 0; m < a.length; m++) {\r\n                a[m] = (int) b[m];\r\n            }\r\n            return;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.util.TagUtils.getRealValueFromBean",
	"Comment": "locate and return the specified property of the specified bean, froman optionally specified scope, in the specified page context.",
	"Method": "Object getRealValueFromBean(String beanName,String beanProperty,String beanScope,PageContext pageContext){\r\n    try {\r\n        Object realValue;\r\n        Object bean = retrieveBean(beanName, beanScope, pageContext);\r\n        if (bean != null && beanProperty != null) {\r\n            realValue = PropertyUtils.getProperty(bean, beanProperty);\r\n        } else {\r\n            realValue = bean;\r\n        }\r\n        return realValue;\r\n    } catch (NoSuchMethodException ex) {\r\n        throw new JspException(\"Error - component.PutAttributeTag : Error while retrieving value from bean '\" + beanName + \"' with property '\" + beanProperty + \"' in scope '\" + beanScope + \"'. (exception : \" + ex.getMessage(), ex);\r\n    } catch (InvocationTargetException ex) {\r\n        throw new JspException(\"Error - component.PutAttributeTag : Error while retrieving value from bean '\" + beanName + \"' with property '\" + beanProperty + \"' in scope '\" + beanScope + \"'. (exception : \" + ex.getMessage(), ex);\r\n    } catch (IllegalAccessException ex) {\r\n        throw new JspException(\"Error - component.PutAttributeTag : Error while retrieving value from bean '\" + beanName + \"' with property '\" + beanProperty + \"' in scope '\" + beanScope + \"'. (exception : \" + ex.getMessage(), ex);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.getValueAtPosition",
	"Comment": "useful during union operations to avoid copying the items array around if only updating a fewpoints.",
	"Method": "long getValueAtPosition(int pos){\r\n    if (itemsSeen_ == 0) {\r\n        throw new SketchesArgumentException(\"Requested element from empty reservoir.\");\r\n    } else if ((pos < 0) || (pos >= getNumSamples())) {\r\n        throw new SketchesArgumentException(\"Requested position must be between 0 and \" + (getNumSamples() - 1) + \", inclusive. Received: \" + pos);\r\n    }\r\n    return data_[pos];\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.Util.checkIsCompactMemory",
	"Comment": "checks just the flags field of an input memory object. returns true for a compactsketch, false for an update sketch. does not perform additional checks, including sketchfamily.",
	"Method": "boolean checkIsCompactMemory(Memory srcMem){\r\n    final int flags = extractFlags(srcMem);\r\n    final int compactFlags = READ_ONLY_FLAG_MASK | COMPACT_FLAG_MASK;\r\n    return (flags & compactFlags) > 0;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.isPropagationInProgress",
	"Comment": "returns true if a propagation is in progress, otherwise false",
	"Method": "boolean isPropagationInProgress(){\r\n    return sharedPropagationInProgress_.get();\r\n}"
}, {
	"Path": "simplenlg.framework.PhraseElement.addModifier",
	"Comment": "add a modifier to a phrase use heuristics to decide where it goes",
	"Method": "void addModifier(Object modifier){\r\n    if (modifier == null)\r\n        return;\r\n    if (modifier instanceof NLGElement)\r\n        addPreModifier((NLGElement) modifier);\r\n    else\r\n        addPreModifier((String) modifier);\r\n    return;\r\n}"
}, {
	"Path": "simplenlg.lexicon.english.NIHDBLexiconTest.multiThreadAppAccessTest",
	"Comment": "test for nihdblexicon functionality when several threads are using the\tsame lexicon",
	"Method": "void multiThreadAppAccessTest(){\r\n    LexThread runner1 = new LexThread(\"lie\");\r\n    LexThread runner2 = new LexThread(\"bark\");\r\n    ScheduledExecutorService service = Executors.newScheduledThreadPool(2);\r\n    service.schedule(runner1, 0, TimeUnit.MILLISECONDS);\r\n    service.schedule(runner2, 0, TimeUnit.MILLISECONDS);\r\n    try {\r\n        Thread.currentThread().sleep(500);\r\n    } catch (InterruptedException ie) {\r\n        ;\r\n    }\r\n    service.shutdownNow();\r\n    Assert.assertEquals(\"lie\", runner1.word.getBaseForm());\r\n    Assert.assertEquals(\"bark\", runner2.word.getBaseForm());\r\n}"
}, {
	"Path": "org.apache.struts.tiles.DefinitionsFactoryException.getMessage",
	"Comment": "return a detail message for this exception. if there is a embedded exception, and if the definitionsfactoryexception has no detail message of its own, this method will return the detail message from the embedded exception.",
	"Method": "String getMessage(){\r\n    String message = super.getMessage();\r\n    if (message == null && exception != null) {\r\n        return exception.getMessage();\r\n    } else {\r\n        return message;\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedSubmitTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.util.RequestUtils.getAllParametersForMultipartRequest",
	"Comment": "create a map containing all of the parameters suppliedfor a multipart request, keyed by parameter name. in addition to textand file elements from the multipart body, query string parameters areincluded as well.",
	"Method": "Map getAllParametersForMultipartRequest(HttpServletRequest request,MultipartRequestHandler multipartHandler){\r\n    Map parameters = new HashMap();\r\n    Hashtable elements = multipartHandler.getAllElements();\r\n    Enumeration e = elements.keys();\r\n    while (e.hasMoreElements()) {\r\n        String key = (String) e.nextElement();\r\n        parameters.put(key, elements.get(key));\r\n    }\r\n    if (request instanceof MultipartRequestWrapper) {\r\n        request = (HttpServletRequest) ((MultipartRequestWrapper) request).getRequest();\r\n        e = request.getParameterNames();\r\n        while (e.hasMoreElements()) {\r\n            String key = (String) e.nextElement();\r\n            parameters.put(key, request.getParameterValues(key));\r\n        }\r\n    } else {\r\n        log.debug(\"Gathering multipart parameters for unwrapped request\");\r\n    }\r\n    return parameters;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.isSameResource",
	"Comment": "returns true if the backing resource of this is identical with the backing resourceof that. the capacities must be the same.if this is a region,the region offset must also be the same.",
	"Method": "boolean isSameResource(Memory that){\r\n    return false;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.compactShared",
	"Comment": "converts this updatesketch to an ordered compactsketch on the java heap.",
	"Method": "CompactSketch compactShared(boolean dstOrdered,WritableMemory dstMem,CompactSketch compactShared){\r\n    return compact();\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionForm.setMultipartRequestHandler",
	"Comment": "set the handler provided for use in dealing with file uploads.",
	"Method": "void setMultipartRequestHandler(MultipartRequestHandler multipartRequestHandler){\r\n    this.multipartRequestHandler = multipartRequestHandler;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.getAttribute",
	"Comment": "returns the value of the named attribute as an object, or null if noattribute of the given name exists.",
	"Method": "Object getAttribute(String key){\r\n    return attributes.get(key);\r\n}"
}, {
	"Path": "org.apache.struts.config.TestFormBeanConfig.testInheritFrom",
	"Comment": "test a typical form bean configuration extension where variousproperties should be inherited from a base form.this method checksall the properties.",
	"Method": "void testInheritFrom(){\r\n    String baseFormCount = \"1\";\r\n    baseForm.setProperty(\"count\", baseFormCount);\r\n    FormBeanConfig subForm = new FormBeanConfig();\r\n    String subFormName = \"subForm\";\r\n    subForm.setName(subFormName);\r\n    subForm.setExtends(\"baseForm\");\r\n    FormPropertyConfig property = new FormPropertyConfig();\r\n    property.setName(\"score\");\r\n    property.setType(\"java.lang.Integer\");\r\n    subForm.addFormPropertyConfig(property);\r\n    property = new FormPropertyConfig();\r\n    property.setName(\"id\");\r\n    property.setType(\"java.lang.String\");\r\n    property.setInitial(\"unknown\");\r\n    subForm.addFormPropertyConfig(property);\r\n    property = new FormPropertyConfig();\r\n    property.setName(\"message\");\r\n    property.setType(\"java.lang.String\");\r\n    property.setSize(10);\r\n    subForm.addFormPropertyConfig(property);\r\n    config.addFormBeanConfig(subForm);\r\n    subForm.inheritFrom(baseForm);\r\n    assertSame(\"subForm no longer in ModuleConfig\", subForm, config.findFormBeanConfig(\"subForm\"));\r\n    assertNotNull(\"Form bean type was not inherited\", subForm.getType());\r\n    assertEquals(\"Wrong form bean name\", subFormName, subForm.getName());\r\n    assertEquals(\"Wrong form bean type\", baseForm.getType(), subForm.getType());\r\n    assertEquals(\"Wrong restricted value\", baseForm.isRestricted(), subForm.isRestricted());\r\n    FormPropertyConfig[] formPropertyConfigs = subForm.findFormPropertyConfigs();\r\n    assertEquals(\"Wrong prop count\", 4, formPropertyConfigs.length);\r\n    property = subForm.findFormPropertyConfig(\"name\");\r\n    FormPropertyConfig original = baseForm.findFormPropertyConfig(\"name\");\r\n    assertNotNull(\"'name' property was not inherited\", property);\r\n    assertEquals(\"Wrong type for name\", original.getType(), property.getType());\r\n    assertEquals(\"Wrong initial value for name\", original.getInitial(), property.getInitial());\r\n    assertEquals(\"Wrong size value for name\", original.getSize(), property.getSize());\r\n    property = subForm.findFormPropertyConfig(\"id\");\r\n    original = baseForm.findFormPropertyConfig(\"id\");\r\n    assertNotNull(\"'id' property was not found\", property);\r\n    assertEquals(\"Wrong type for id\", original.getType(), property.getType());\r\n    assertEquals(\"Wrong initial value for id\", \"unknown\", property.getInitial());\r\n    assertEquals(\"Wrong size value for id\", original.getSize(), property.getSize());\r\n    property = subForm.findFormPropertyConfig(\"score\");\r\n    original = baseForm.findFormPropertyConfig(\"score\");\r\n    assertNotNull(\"'score' property was not found\", property);\r\n    assertEquals(\"Wrong type for score\", \"java.lang.Integer\", property.getType());\r\n    assertEquals(\"Wrong initial value for score\", original.getInitial(), property.getInitial());\r\n    assertEquals(\"Wrong size value for score\", original.getSize(), property.getSize());\r\n    property = subForm.findFormPropertyConfig(\"message\");\r\n    original = baseForm.findFormPropertyConfig(\"message\");\r\n    assertNotNull(\"'message' property was not found\", property);\r\n    assertEquals(\"Wrong type for message\", original.getType(), property.getType());\r\n    assertEquals(\"Wrong initial value for message\", original.getInitial(), property.getInitial());\r\n    assertEquals(\"Wrong size value for message\", 10, property.getSize());\r\n    property = subForm.findFormPropertyConfig(\"name\");\r\n    original = baseForm.findFormPropertyConfig(\"name\");\r\n    assertEquals(\"Arbitrary property not found\", original.getProperty(\"count\"), property.getProperty(\"count\"));\r\n    String count = subForm.getProperty(\"count\");\r\n    assertEquals(\"Arbitrary property was not inherited\", baseFormCount, count);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.DefinitionsFactoryConfig.linkOldPropertyNames",
	"Comment": "link old property names to new property names.this modifies the map.",
	"Method": "void linkOldPropertyNames(Map properties){\r\n    Set entries = properties.entrySet();\r\n    Map toAdd = new HashMap();\r\n    Iterator i = entries.iterator();\r\n    while (i.hasNext()) {\r\n        Map.Entry entry = (Map.Entry) i.next();\r\n        if (DEFINITIONS_CONFIG_PARAMETER_NAME.equals(entry.getKey())) {\r\n            toAdd.put(\"definitionConfigFiles\", entry.getValue());\r\n        } else if (FACTORY_CLASSNAME_PARAMETER_NAME.equals(entry.getKey())) {\r\n            toAdd.put(\"factoryClassname\", entry.getValue());\r\n        } else if (PARSER_DETAILS_PARAMETER_NAME.equals(entry.getKey())) {\r\n            toAdd.put(\"parserDebugLevel\", entry.getValue());\r\n        } else if (PARSER_VALIDATE_PARAMETER_NAME.equals(entry.getKey())) {\r\n            toAdd.put(\"parserValidate\", entry.getValue());\r\n        } else if (TILES_DETAILS_PARAMETER_NAME.equals(entry.getKey())) {\r\n            toAdd.put(\"debugLevel\", entry.getValue());\r\n        }\r\n    }\r\n    if (toAdd.size() > 0) {\r\n        properties.putAll(toAdd);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.forceIncrementItemsSeen",
	"Comment": "used during union operations to update count of items seen. does not check sign, butwill throw an exception if the final result exceeds the maximum possible items seen value.",
	"Method": "void forceIncrementItemsSeen(long inc){\r\n    itemsSeen_ += inc;\r\n    if (itemsSeen_ > MAX_ITEMS_SEEN) {\r\n        throw new SketchesStateException(\"Sketch has exceeded capacity for total items seen. \" + \"Limit: \" + MAX_ITEMS_SEEN + \", found: \" + itemsSeen_);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.process",
	"Comment": "process an httpservletrequest and create thecorresponding httpservletresponse or dispatch to anotherresource.",
	"Method": "void process(HttpServletRequest request,HttpServletResponse response){\r\n    request = processMultipart(request);\r\n    String path = processPath(request, response);\r\n    if (path == null) {\r\n        return;\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Processing a '\" + request.getMethod() + \"' for path '\" + path + \"'\");\r\n    }\r\n    processLocale(request, response);\r\n    processContent(request, response);\r\n    processNoCache(request, response);\r\n    if (!processPreprocess(request, response)) {\r\n        return;\r\n    }\r\n    this.processCachedMessages(request, response);\r\n    ActionMapping mapping = processMapping(request, response, path);\r\n    if (mapping == null) {\r\n        return;\r\n    }\r\n    if (!processRoles(request, response, mapping)) {\r\n        return;\r\n    }\r\n    ActionForm form = processActionForm(request, response, mapping);\r\n    processPopulate(request, response, form, mapping);\r\n    try {\r\n        if (!processValidate(request, response, form, mapping)) {\r\n            return;\r\n        }\r\n    } catch (InvalidCancelException e) {\r\n        ActionForward forward = processException(request, response, e, form, mapping);\r\n        processForwardConfig(request, response, forward);\r\n        return;\r\n    } catch (IOException e) {\r\n        throw e;\r\n    } catch (ServletException e) {\r\n        throw e;\r\n    }\r\n    if (!processForward(request, response, mapping)) {\r\n        return;\r\n    }\r\n    if (!processInclude(request, response, mapping)) {\r\n        return;\r\n    }\r\n    Action action = processActionCreate(request, response, mapping);\r\n    if (action == null) {\r\n        return;\r\n    }\r\n    ActionForward forward = processActionPerform(request, response, action, form, mapping);\r\n    processForwardConfig(request, response, forward);\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.getAllElements",
	"Comment": "returns a hash table containing both text and file requestparameters.",
	"Method": "Hashtable getAllElements(){\r\n    return this.elementsAll;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilStrutsModulesImpl.getRequestProcessor",
	"Comment": "get tiles requestprocessor associated to the current module.",
	"Method": "TilesRequestProcessor getRequestProcessor(HttpServletRequest request,ServletContext servletContext){\r\n    ModuleConfig moduleConfig = getModuleConfig(request, servletContext);\r\n    return (TilesRequestProcessor) servletContext.getAttribute(Globals.REQUEST_PROCESSOR_KEY + moduleConfig.getPrefix());\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.InsertTag.getController",
	"Comment": "get instantiated controller.return controller denoted by controllertype, or null if controllertypeis null.",
	"Method": "Controller getController(){\r\n    if (controllerType == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return ComponentDefinition.createController(controllerName, controllerType);\r\n    } catch (InstantiationException ex) {\r\n        throw new JspException(ex);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.HllSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of an hllsketch.",
	"Method": "String toString(boolean summary,boolean detail,boolean auxDetail,boolean all,String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.toString(mem);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedTextareaTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketchBuilder.setK",
	"Comment": "sets the parameter k that determines the accuracy and size of the sketch.",
	"Method": "DoublesSketchBuilder setK(int k){\r\n    Util.checkK(k);\r\n    bK = k;\r\n    return this;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createAdjectivePhrase",
	"Comment": "creates an adjective phrase wrapping the given adjective.",
	"Method": "AdjPhraseSpec createAdjectivePhrase(AdjPhraseSpec createAdjectivePhrase,Object adjective){\r\n    AdjPhraseSpec phraseElement = new AdjPhraseSpec(this);\r\n    NLGElement adjectiveElement = createNLGElement(adjective, LexicalCategory.ADJECTIVE);\r\n    setPhraseHead(phraseElement, adjectiveElement);\r\n    return phraseElement;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ActionController.perform",
	"Comment": "method associated to a tile and called immediately before tile isincluded.this implementation calls a struts action. no servlet isset by this method.",
	"Method": "void perform(ComponentContext tileContext,HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){\r\n    try {\r\n        action.execute(null, null, request, response);\r\n    } catch (Exception e) {\r\n        throw new ServletException(e);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedMessagesPresentTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of a doublessketch.",
	"Method": "String toString(String toString,boolean sketchSummary,boolean dataDetail,String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.toString(mem, true);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.getVolatileTheta",
	"Comment": "returns the value of the volatile theta manged by the shared sketch",
	"Method": "long getVolatileTheta(){\r\n    return volatileThetaLong_;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.startPropagation",
	"Comment": "ensures mutual exclusion. no other thread can update the shared sketch while propagation isin progress",
	"Method": "void startPropagation(){\r\n    while (!sharedPropagationInProgress_.compareAndSet(false, true)) {\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.tools.text.utility.org.json.JSONArray.length",
	"Comment": "get the number of elements in the jsonarray, included nulls.",
	"Method": "int length(){\r\n    return myArrayList.size();\r\n}"
}, {
	"Path": "schemacrawler.tools.text.utility.org.json.JSONObject.accumulate",
	"Comment": "accumulate values under a key. it is similar to the put methodexcept that if there is already an object stored under the key thena jsonarray is stored under the key to hold all of the accumulatedvalues. if there is already a jsonarray, then the new value isappended to it. in contrast, the put method replaces the previousvalue. if only one value is accumulated that is not a jsonarray,then the result will be the same as using put. but if multiplevalues are accumulated, then the result will be like append.",
	"Method": "JSONObject accumulate(String key,Object value){\r\n    testValidity(value);\r\n    final Object object = opt(key);\r\n    if (object == null) {\r\n        put(key, value instanceof JSONArray ? new JSONArray().put(value) : value);\r\n    } else if (object instanceof JSONArray) {\r\n        ((JSONArray) object).put(value);\r\n    } else {\r\n        put(key, new JSONArray().put(object).put(value));\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.JaccardSimilarity.exactlyEqual",
	"Comment": "returns true if the two given sketches have exactly the same hash values and the sametheta values. thus, they are equivalent.",
	"Method": "boolean exactlyEqual(Sketch sketchA,Sketch sketchB){\r\n    if ((sketchA == null) || (sketchB == null)) {\r\n        return false;\r\n    }\r\n    if (sketchA == sketchB) {\r\n        return true;\r\n    }\r\n    if (sketchA.isEmpty() && sketchB.isEmpty()) {\r\n        return true;\r\n    }\r\n    if (sketchA.isEmpty() || sketchB.isEmpty()) {\r\n        return false;\r\n    }\r\n    final int countA = sketchA.getRetainedEntries();\r\n    final int countB = sketchB.getRetainedEntries();\r\n    final Union union = SetOperation.builder().setNominalEntries(ceilingPowerOf2(countA + countB)).buildUnion();\r\n    union.update(sketchA);\r\n    union.update(sketchB);\r\n    final Sketch unionAB = union.getResult();\r\n    final long thetaLongUAB = unionAB.getThetaLong();\r\n    final long thetaLongA = sketchA.getThetaLong();\r\n    final long thetaLongB = sketchB.getThetaLong();\r\n    final int countUAB = unionAB.getRetainedEntries();\r\n    if ((countUAB == countA) && (countUAB == countB) && (thetaLongUAB == thetaLongA) && (thetaLongUAB == thetaLongB)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.MessagesTag.doAfterBody",
	"Comment": "make the next collection element available and loop, or finish theiterations if there are no more elements.",
	"Method": "int doAfterBody(){\r\n    if (bodyContent != null) {\r\n        TagUtils.getInstance().writePrevious(pageContext, bodyContent.getString());\r\n        bodyContent.clearBody();\r\n    }\r\n    if (iterator.hasNext()) {\r\n        processMessage((ActionMessage) iterator.next());\r\n        return (EVAL_BODY_TAG);\r\n    } else {\r\n        return (SKIP_BODY);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.NotPresentTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(false));\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.ResourceTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String type = null;\r\n    if (data.getAttribute(\"input\") == null) {\r\n        type = \"java.lang.String\";\r\n    } else {\r\n        type = \"java.io.InputStream\";\r\n    }\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), type, true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.IntersectionImplR.wrapInstance",
	"Comment": "wrap an intersection target around the given source memory containing intersection data.",
	"Method": "IntersectionImplR wrapInstance(Memory srcMem,long seed){\r\n    final IntersectionImplR impl = new IntersectionImplR((WritableMemory) srcMem, seed, false);\r\n    return internalWrapInstance(srcMem, impl);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.InsertTag.createTagHandler",
	"Comment": "process tag attribute and create corresponding tag handler.",
	"Method": "TagHandler createTagHandler(){\r\n    if (definitionName != null) {\r\n        return processDefinitionName(definitionName);\r\n    } else if (attribute != null) {\r\n        return processAttribute(attribute);\r\n    } else if (beanName != null) {\r\n        return processBean(beanName, beanProperty, beanScope);\r\n    } else if (name != null) {\r\n        return processName(name);\r\n    } else if (page != null) {\r\n        return processUrl(page);\r\n    } else {\r\n        throw new JspException(\"Error - Tag Insert : At least one of the following attribute must be defined : template|page|attribute|definition|name|beanName. Check tag syntax\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.RedirectTag.doRedirect",
	"Comment": "redirect to the given url converting exceptions to jspexception.",
	"Method": "void doRedirect(String url){\r\n    HttpServletResponse response = (HttpServletResponse) pageContext.getResponse();\r\n    try {\r\n        response.sendRedirect(url);\r\n    } catch (IOException e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(e.getMessage());\r\n    }\r\n}"
}, {
	"Path": "simplenlg.lexicon.util.NIHLexiconXMLDumpUtil.printErrorArgumentMessage",
	"Comment": "prints arguments error messages if incorrect or not enough parameters have been supplied.",
	"Method": "void printErrorArgumentMessage(){\r\n    System.err.println(\"Insuffient number of arguments supplied. Please supply the following Arguments: \\n\");\r\n    printArgumentsMessage();\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.getUnknown",
	"Comment": "determine whether action is configured as the default one for thismodule.",
	"Method": "boolean getUnknown(){\r\n    return (this.unknown);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedMatchTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.setLexicon",
	"Comment": "sets the lexicon to be used by this factory. passing a parameter of\tnull will remove any existing lexicon from the factory.",
	"Method": "void setLexicon(Lexicon newLexicon){\r\n    this.lexicon = newLexicon;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hllmap.UniqueCountMap.getAverageSketchMemoryPerKey",
	"Comment": "returns the average memory storage per key that is dedicated to sketching the unique counts.",
	"Method": "double getAverageSketchMemoryPerKey(){\r\n    return (double) (getMemoryUsageBytes() - getKeyMemoryUsageBytes()) / getActiveEntries();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.CheckboxTag.doStartTag",
	"Comment": "generate the required input tag.support for indexed property sincestruts 1.1",
	"Method": "int doStartTag(){\r\n    StringBuffer results = new StringBuffer(\"<input type=\\\"checkbox\\\"\");\r\n    prepareAttribute(results, \"name\", prepareName());\r\n    prepareAttribute(results, \"accesskey\", getAccesskey());\r\n    prepareAttribute(results, \"tabindex\", getTabindex());\r\n    prepareAttribute(results, \"value\", getValue());\r\n    if (isChecked()) {\r\n        results.append(\" checked=\\\"checked\\\"\");\r\n    }\r\n    results.append(prepareEventHandlers());\r\n    results.append(prepareStyles());\r\n    prepareOtherAttributes(results);\r\n    results.append(getElementClose());\r\n    TagUtils.getInstance().write(pageContext, results.toString());\r\n    this.text = null;\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionRedirect.initializeParameters",
	"Comment": "initializes the internal objects used to hold parameter values.",
	"Method": "void initializeParameters(){\r\n    parameterValues = new HashMap();\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationBuilder.buildANotB",
	"Comment": "convenience method, returns a configured setoperation anotb withdefault update seed",
	"Method": "AnotB buildANotB(){\r\n    return (AnotB) build(Family.A_NOT_B);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedRootTag.doStartTag",
	"Comment": "overriding method of the heart of the tag. gets the relative propertyand tells the jsp engine to evaluate its body content.",
	"Method": "int doStartTag(){\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    originalName = name;\r\n    originalNesting = NestedPropertyHelper.getCurrentProperty(request);\r\n    originalNestingName = NestedPropertyHelper.getCurrentName(request, this);\r\n    if (name != null) {\r\n        NestedPropertyHelper.setProperty(request, \"\");\r\n        NestedPropertyHelper.setName(request, this.name);\r\n    }\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.getSharedRetainedEntries",
	"Comment": "returns the number of entries that have been retained by the sketch.",
	"Method": "int getSharedRetainedEntries(boolean valid){\r\n    return getRetainedEntries(valid);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsUnion.reset",
	"Comment": "resets this sketch to the empty state, but retains the original value of max k.",
	"Method": "void reset(){\r\n    gadget_.reset();\r\n    n_ = 0;\r\n    outerTauNumer = 0.0;\r\n    outerTauDenom = 0;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.getSamples",
	"Comment": "returns a copy of the items in the reservoir. the returned array length may be smaller than thereservoir capacity.",
	"Method": "long[] getSamples(){\r\n    if (itemsSeen_ == 0) {\r\n        return null;\r\n    }\r\n    final int numSamples = (int) Math.min(reservoirSize_, itemsSeen_);\r\n    return java.util.Arrays.copyOf(data_, numSamples);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsUnion.getMaxK",
	"Comment": "returns the maximum allowed reservoir capacity in this union. the current reservoir capacitymay be lower.",
	"Method": "int getMaxK(){\r\n    return maxK_;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedRadioTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedSizeTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.newInstance",
	"Comment": "construct a varopt sampling sketch with up to k samples using the specified resize factor.",
	"Method": "VarOptItemsSketch<T> newInstance(int k,VarOptItemsSketch<T> newInstance,int k,ResizeFactor rf){\r\n    return new VarOptItemsSketch(k, rf);\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.addForwardConfig",
	"Comment": "add a new forwardconfig instance to the set of globalforwards associated with this action.",
	"Method": "void addForwardConfig(ForwardConfig config){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    forwards.put(config.getName(), config);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.IterateTag.doAfterBody",
	"Comment": "make the next collection element available and loop, or finish theiterations if there are no more elements.",
	"Method": "int doAfterBody(){\r\n    if (bodyContent != null) {\r\n        TagUtils.getInstance().writePrevious(pageContext, bodyContent.getString());\r\n        bodyContent.clearBody();\r\n    }\r\n    if ((lengthValue > 0) && (lengthCount >= lengthValue)) {\r\n        return (SKIP_BODY);\r\n    }\r\n    if (iterator.hasNext()) {\r\n        Object element = iterator.next();\r\n        if (element == null) {\r\n            pageContext.removeAttribute(id);\r\n        } else {\r\n            pageContext.setAttribute(id, element);\r\n        }\r\n        lengthCount++;\r\n        if (indexId != null) {\r\n            pageContext.setAttribute(indexId, new Integer(getIndex()));\r\n        }\r\n        return (EVAL_BODY_TAG);\r\n    } else {\r\n        return (SKIP_BODY);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotMatchTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedDefineTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedFileTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.DocumentElementTest.testEmbedding",
	"Comment": "test whether sents can be embedded in a section without intervening paras",
	"Method": "void testEmbedding(){\r\n    DocumentElement sent = phraseFactory.createSentence(\"This is a test\");\r\n    DocumentElement sent2 = phraseFactory.createSentence(phraseFactory.createClause(\"John\", \"be\", \"missing\"));\r\n    DocumentElement section = phraseFactory.createSection(\"SECTION TITLE\");\r\n    section.addComponent(sent);\r\n    section.addComponent(sent2);\r\n    Assert.assertEquals(\"SECTION TITLE\\nThis is a test.\\n\\nJohn is missing.\\n\\n\", this.realiser.realise(section).getRealisation());\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DirectCompactDoublesSketch.wrapInstance",
	"Comment": "wrap this sketch around the given compact memory image of a doublessketch.",
	"Method": "DirectCompactDoublesSketch wrapInstance(Memory srcMem){\r\n    final long memCap = srcMem.getCapacity();\r\n    final int preLongs = extractPreLongs(srcMem);\r\n    final int serVer = extractSerVer(srcMem);\r\n    final int familyID = extractFamilyID(srcMem);\r\n    final int flags = extractFlags(srcMem);\r\n    final int k = extractK(srcMem);\r\n    final boolean empty = (flags & EMPTY_FLAG_MASK) > 0;\r\n    final long n = empty ? 0 : extractN(srcMem);\r\n    DirectUpdateDoublesSketchR.checkPreLongs(preLongs);\r\n    Util.checkFamilyID(familyID);\r\n    DoublesUtil.checkDoublesSerVer(serVer, MIN_DIRECT_DOUBLES_SER_VER);\r\n    checkCompact(serVer, flags);\r\n    Util.checkK(k);\r\n    checkDirectMemCapacity(k, n, memCap);\r\n    DirectUpdateDoublesSketchR.checkEmptyAndN(empty, n);\r\n    final DirectCompactDoublesSketch dds = new DirectCompactDoublesSketch(k);\r\n    dds.mem_ = (WritableMemory) srcMem;\r\n    return dds;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.ForwardTag.doForward",
	"Comment": "forward to the given path converting exceptions to jspexception.",
	"Method": "void doForward(String path){\r\n    try {\r\n        pageContext.forward(path);\r\n    } catch (Exception e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"forward.forward\", name, e.toString()));\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketchIterator.next",
	"Comment": "advancing the iterator and checking existence of the next entryis combined here for efficiency. this results in an undefinedstate of the iterator before the first call of this method.",
	"Method": "boolean next(){\r\n    if (combinedBuffer_ == null) {\r\n        combinedBuffer_ = sketch_.combinedBuffer_;\r\n        num_ = sketch_.getBaseBufferCount();\r\n    } else {\r\n        i_++;\r\n    }\r\n    if (i_ < num_) {\r\n        return true;\r\n    }\r\n    do {\r\n        level_++;\r\n        if (level_ > 0) {\r\n            bits_ >>>= 1;\r\n        }\r\n        if (bits_ == 0L) {\r\n            return false;\r\n        }\r\n        weight_ *= 2;\r\n    } while ((bits_ & 1L) == 0L);\r\n    i_ = 0;\r\n    offset_ = (2 + level_) * sketch_.getK();\r\n    num_ = sketch_.getK();\r\n    return true;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedMessageTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "simplenlg.phrasespec.VPPhraseSpec.addModifier",
	"Comment": "add a modifier to a verb phrase\tuse heuristics to decide where it goes",
	"Method": "void addModifier(Object modifier){\r\n    if (modifier == null)\r\n        return;\r\n    NLGElement modifierElement = null;\r\n    if (modifier instanceof NLGElement)\r\n        modifierElement = (NLGElement) modifier;\r\n    else if (modifier instanceof String) {\r\n        String modifierString = (String) modifier;\r\n        if (modifierString.length() > 0 && !modifierString.contains(\" \"))\r\n            modifierElement = getFactory().createWord(modifier, LexicalCategory.ANY);\r\n    }\r\n    if (modifierElement == null) {\r\n        addPostModifier((String) modifier);\r\n        return;\r\n    }\r\n    WordElement modifierWord = null;\r\n    if (modifierElement != null && modifierElement instanceof WordElement)\r\n        modifierWord = (WordElement) modifierElement;\r\n    else if (modifierElement != null && modifierElement instanceof InflectedWordElement)\r\n        modifierWord = ((InflectedWordElement) modifierElement).getBaseWord();\r\n    if (modifierWord != null && modifierWord.getCategory() == LexicalCategory.ADVERB) {\r\n        addPreModifier(modifierWord);\r\n        return;\r\n    }\r\n    addPostModifier(modifierElement);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.ResourceTag.doStartTag",
	"Comment": "retrieve the required property and expose it as a scripting variable.",
	"Method": "int doStartTag(){\r\n    InputStream stream = pageContext.getServletContext().getResourceAsStream(name);\r\n    if (stream == null) {\r\n        JspException e = new JspException(messages.getMessage(\"resource.get\", name));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    if (input != null) {\r\n        pageContext.setAttribute(id, stream);\r\n        return (SKIP_BODY);\r\n    }\r\n    try {\r\n        StringBuffer sb = new StringBuffer();\r\n        InputStreamReader reader = new InputStreamReader(stream);\r\n        char[] buffer = new char[BUFFER_SIZE];\r\n        int n = 0;\r\n        while (true) {\r\n            n = reader.read(buffer);\r\n            if (n < 1) {\r\n                break;\r\n            }\r\n            sb.append(buffer, 0, n);\r\n        }\r\n        reader.close();\r\n        pageContext.setAttribute(id, sb.toString());\r\n    } catch (IOException e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"resource.get\", name));\r\n    }\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.getInstance",
	"Comment": "returns a sketch instance of this class from the given string,which must be a string representation of this sketch class.",
	"Method": "LongsSketch getInstance(Memory srcMem,LongsSketch getInstance,String string){\r\n    final String[] tokens = string.split(\",\");\r\n    if (tokens.length < (STR_PREAMBLE_TOKENS + 2)) {\r\n        throw new SketchesArgumentException(\"String not long enough: \" + tokens.length);\r\n    }\r\n    final int serVer = Integer.parseInt(tokens[0]);\r\n    final int famID = Integer.parseInt(tokens[1]);\r\n    final int lgMax = Integer.parseInt(tokens[2]);\r\n    final int flags = Integer.parseInt(tokens[3]);\r\n    final long streamLength = Long.parseLong(tokens[4]);\r\n    final long offset = Long.parseLong(tokens[5]);\r\n    final int numActive = Integer.parseInt(tokens[6]);\r\n    final int lgCur = Integer.numberOfTrailingZeros(Integer.parseInt(tokens[7]));\r\n    if (serVer != SER_VER) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: Bad SerVer: \" + serVer);\r\n    }\r\n    Family.FREQUENCY.checkFamilyID(famID);\r\n    final boolean empty = flags > 0;\r\n    final boolean zeroStream = (streamLength == 0);\r\n    if (empty ^ zeroStream) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: (Empty ^ StreamLength=0) = true : Empty: \" + empty + \", strLen: \" + streamLength);\r\n    }\r\n    final int numTokens = tokens.length;\r\n    if ((2 * numActive) != (numTokens - STR_PREAMBLE_TOKENS - 2)) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: Incorrect # of tokens: \" + numTokens + \", numActive: \" + numActive);\r\n    }\r\n    final LongsSketch sketch = new LongsSketch(lgMax, lgCur);\r\n    sketch.streamLength = streamLength;\r\n    sketch.offset = offset;\r\n    sketch.hashMap = deserializeFromStringArray(tokens);\r\n    return sketch;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.getValueAtPosition",
	"Comment": "useful during union operations to avoid copying the items array around if only updating afew points.",
	"Method": "T getValueAtPosition(int pos){\r\n    if (itemsSeen_ == 0) {\r\n        throw new SketchesArgumentException(\"Requested element from empty reservoir.\");\r\n    } else if ((pos < 0) || (pos >= getNumSamples())) {\r\n        throw new SketchesArgumentException(\"Requested position must be between 0 and \" + getNumSamples() + \", \" + \"inclusive. Received: \" + pos);\r\n    }\r\n    return data_.get(pos);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyTag.setProperty",
	"Comment": "setter method for the property property also, only setting theoriginal property value to those values not set by the nested logic.",
	"Method": "void setProperty(String newProperty){\r\n    property = newProperty;\r\n}"
}, {
	"Path": "simplenlg.framework.InflectedWordElement.getChildren",
	"Comment": "this method returns null as the inflected word has no child components.",
	"Method": "List<NLGElement> getChildren(){\r\n    return null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.setSharedLogNominalEntries",
	"Comment": "sets the log nominal entries for the concurrent shared sketch. the minimum value is 4 and themaximum value is 26. be aware that sketches as large as this maximumvalue have not been thoroughly tested or characterized for performance.",
	"Method": "ConcurrentThetaBuilder setSharedLogNominalEntries(int lgNomEntries){\r\n    bSharedLgNomLongs = lgNomEntries;\r\n    if ((bSharedLgNomLongs > MAX_LG_NOM_LONGS) || (bSharedLgNomLongs < MIN_LG_NOM_LONGS)) {\r\n        throw new SketchesArgumentException(\"Log Nominal Entries must be >= 4 and <= 26: \" + lgNomEntries);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.getUserLocale",
	"Comment": "look up and return current user locale, based on the specifiedparameters.",
	"Method": "Locale getUserLocale(PageContext pageContext,String locale){\r\n    return RequestUtils.getUserLocale((HttpServletRequest) pageContext.getRequest(), locale);\r\n}"
}, {
	"Path": "org.sonar.java.checks.verifier.JavaCheckVerifier.verifyIssueOnFile",
	"Comment": "verifies that the provided file will only raise an issue on the file, with the given message, when analyzed using the given check.",
	"Method": "void verifyIssueOnFile(String filename,String message,JavaFileScanner check){\r\n    JavaCheckVerifier javaCheckVerifier = new JavaCheckVerifier();\r\n    javaCheckVerifier.setExpectedFileIssue(message);\r\n    scanFile(filename, check, javaCheckVerifier);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUpdatableSketchBuilder.setResizeFactor",
	"Comment": "this is to set the resize factor.value of x1 means that the maximum capacity is allocated from the start.default resize factor is x8.",
	"Method": "ArrayOfDoublesUpdatableSketchBuilder setResizeFactor(ResizeFactor resizeFactor){\r\n    resizeFactor_ = resizeFactor;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.servlet.ExecuteAction.execute",
	"Comment": "execute the specified action, and return the resultingactionforward.",
	"Method": "ForwardConfig execute(ActionContext context,Action action,ActionConfig actionConfig,ActionForm actionForm){\r\n    ServletActionContext saContext = (ServletActionContext) context;\r\n    return (action.execute((ActionMapping) actionConfig, actionForm, saContext.getRequest(), saContext.getResponse()));\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.SketchIterator.next",
	"Comment": "advancing the iterator and checking existence of the next entryis combined here for efficiency. this results in an undefinedstate of the iterator before the first call of this method.",
	"Method": "boolean next(){\r\n    if (keys_ == null) {\r\n        return false;\r\n    }\r\n    i_++;\r\n    while (i_ < keys_.length) {\r\n        if (keys_[i_] != 0) {\r\n            return true;\r\n        }\r\n        i_++;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "jadx.core.dex.visitors.ConstInlineVisitor.fixTypes",
	"Comment": "this is method similar to posttypeinference.process method,\tbut contains some expensive operations needed only after constant inline",
	"Method": "void fixTypes(MethodNode mth,InsnNode insn,LiteralArg litArg){\r\n    DexNode dex = mth.dex();\r\n    PostTypeInference.process(mth, insn);\r\n    switch(insn.getType()) {\r\n        case CONST:\r\n            insn.getArg(0).merge(dex, insn.getResult());\r\n            break;\r\n        case MOVE:\r\n            insn.getResult().merge(dex, insn.getArg(0));\r\n            insn.getArg(0).merge(dex, insn.getResult());\r\n            break;\r\n        case IPUT:\r\n        case SPUT:\r\n            IndexInsnNode node = (IndexInsnNode) insn;\r\n            insn.getArg(0).merge(dex, ((FieldInfo) node.getIndex()).getType());\r\n            break;\r\n        case IF:\r\n            {\r\n                InsnArg arg0 = insn.getArg(0);\r\n                InsnArg arg1 = insn.getArg(1);\r\n                if (arg0 == litArg) {\r\n                    arg0.merge(dex, arg1);\r\n                } else {\r\n                    arg1.merge(dex, arg0);\r\n                }\r\n                break;\r\n            }\r\n        case CMP_G:\r\n        case CMP_L:\r\n            InsnArg arg0 = insn.getArg(0);\r\n            InsnArg arg1 = insn.getArg(1);\r\n            if (arg0 == litArg) {\r\n                arg0.merge(dex, arg1);\r\n            } else {\r\n                arg1.merge(dex, arg0);\r\n            }\r\n            break;\r\n        case RETURN:\r\n            if (insn.getArgsCount() != 0) {\r\n                insn.getArg(0).merge(dex, mth.getReturnType());\r\n            }\r\n            break;\r\n        case INVOKE:\r\n            InvokeNode inv = (InvokeNode) insn;\r\n            List<ArgType> types = inv.getCallMth().getArgumentsTypes();\r\n            int count = insn.getArgsCount();\r\n            int k = types.size() == count ? 0 : -1;\r\n            for (int i = 0; i < count; i++) {\r\n                InsnArg arg = insn.getArg(i);\r\n                if (!arg.getType().isTypeKnown()) {\r\n                    ArgType type;\r\n                    if (k >= 0) {\r\n                        type = types.get(k);\r\n                    } else {\r\n                        type = mth.getParentClass().getClassInfo().getType();\r\n                    }\r\n                    arg.merge(dex, type);\r\n                }\r\n                k++;\r\n            }\r\n            break;\r\n        case ARITH:\r\n            litArg.merge(dex, insn.getResult());\r\n            break;\r\n        case APUT:\r\n        case AGET:\r\n            if (litArg == insn.getArg(1)) {\r\n                litArg.merge(dex, ArgType.INT);\r\n            }\r\n            break;\r\n        case NEW_ARRAY:\r\n            if (litArg == insn.getArg(0)) {\r\n                litArg.merge(dex, ArgType.INT);\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createPrepositionPhrase",
	"Comment": "creates a preposition phrase with the given preposition and complement.\tan nlgelement representing the preposition is added as the\thead feature of this phrase while the complement is added as a normal\tphrase complement.",
	"Method": "PPPhraseSpec createPrepositionPhrase(PPPhraseSpec createPrepositionPhrase,Object preposition,PPPhraseSpec createPrepositionPhrase,Object preposition,Object complement){\r\n    PPPhraseSpec phraseElement = new PPPhraseSpec(this);\r\n    NLGElement prepositionalElement = createNLGElement(preposition, LexicalCategory.PREPOSITION);\r\n    setPhraseHead(phraseElement, prepositionalElement);\r\n    if (complement != null) {\r\n        setComplement(phraseElement, complement);\r\n    }\r\n    return phraseElement;\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionForm.get",
	"Comment": "return the value of a mapped property with the specified name, ornull if there is no value for the specified key.",
	"Method": "Object get(String name,Object get,String name,int index,Object get,String name,String key){\r\n    Object value = dynaValues.get(name);\r\n    if (value == null) {\r\n        throw new NullPointerException(\"No mapped value for '\" + name + \"(\" + key + \")'\");\r\n    } else if (value instanceof Map) {\r\n        return (((Map) value).get(key));\r\n    } else {\r\n        throw new IllegalArgumentException(\"Non-mapped property for '\" + name + \"(\" + key + \")'\");\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesUnionBuilder.build",
	"Comment": "returns a new empty union object with the current configuration of this builderand the specified backing destination memory store.",
	"Method": "DoublesUnion build(DoublesUnion build,WritableMemory dstMem){\r\n    return DoublesUnionImpl.directInstance(bMaxK, dstMem);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.IncludeTag.doStartTag",
	"Comment": "define the contents returned for the specified resource as a page scopeattribute.",
	"Method": "int doStartTag(){\r\n    Map params = TagUtils.getInstance().computeParameters(pageContext, null, null, null, null, null, null, null, transaction);\r\n    String urlString = null;\r\n    URL url = null;\r\n    try {\r\n        urlString = TagUtils.getInstance().computeURLWithCharEncoding(pageContext, forward, href, page, null, null, params, anchor, false, useLocalEncoding);\r\n        if (urlString.indexOf(':') < 0) {\r\n            HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n            url = new URL(RequestUtils.requestURL(request), urlString);\r\n        } else {\r\n            url = new URL(urlString);\r\n        }\r\n    } catch (MalformedURLException e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"include.url\", e.toString()));\r\n    }\r\n    URLConnection conn = null;\r\n    try {\r\n        conn = url.openConnection();\r\n        conn.setAllowUserInteraction(false);\r\n        conn.setDoInput(true);\r\n        conn.setDoOutput(false);\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        addCookie(conn, urlString, request);\r\n        conn.connect();\r\n    } catch (Exception e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"include.open\", url.toString(), e.toString()));\r\n    }\r\n    StringBuffer sb = new StringBuffer();\r\n    try {\r\n        BufferedInputStream is = new BufferedInputStream(conn.getInputStream());\r\n        InputStreamReader in = new InputStreamReader(is);\r\n        char[] buffer = new char[BUFFER_SIZE];\r\n        int n = 0;\r\n        while (true) {\r\n            n = in.read(buffer);\r\n            if (n < 1) {\r\n                break;\r\n            }\r\n            sb.append(buffer, 0, n);\r\n        }\r\n        in.close();\r\n    } catch (Exception e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"include.read\", url.toString(), e.toString()));\r\n    }\r\n    pageContext.setAttribute(id, sb.toString());\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.updateVolatileTheta",
	"Comment": "updates the value of the volatile theta by extracting it from the underlying sketch managedby the shared sketch",
	"Method": "void updateVolatileTheta(){\r\n    volatileThetaLong_ = getThetaLong();\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateShortLocale",
	"Comment": "checks if the field can safely be converted to a short primitive.",
	"Method": "Object validateShortLocale(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    Locale locale = RequestUtils.getUserLocale(request, null);\r\n    result = GenericTypeValidator.formatShort(value, locale);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "simplenlg.orthography.english.OrthographyProcessor.stripLeadingCommas",
	"Comment": "remove recursively any leading spaces or commas at the start \tof a sentence.",
	"Method": "void stripLeadingCommas(StringBuffer realisation){\r\n    char character = realisation.charAt(0);\r\n    if (character == ' ' || character == ',') {\r\n        realisation.deleteCharAt(0);\r\n        stripLeadingCommas(realisation);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotPresentTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.jf.util.SparseIntArray.getClosestSmaller",
	"Comment": "gets the int mapped from the specified key, or if not present, theclosest key that is less than the specified key.",
	"Method": "int getClosestSmaller(int key){\r\n    int i = binarySearch(mKeys, 0, mSize, key);\r\n    if (i < 0) {\r\n        i = ~i;\r\n        if (i > 0) {\r\n            i--;\r\n        }\r\n        return mValues[i];\r\n    } else {\r\n        return mValues[i];\r\n    }\r\n}"
}, {
	"Path": "net.csdn.common.Strings.split",
	"Comment": "split a string at the first occurrence of the delimiter.does not include the delimiter in the result.",
	"Method": "String[] split(String toSplit,String delimiter){\r\n    if (!hasLength(toSplit) || !hasLength(delimiter)) {\r\n        return null;\r\n    }\r\n    int offset = toSplit.indexOf(delimiter);\r\n    if (offset < 0) {\r\n        return null;\r\n    }\r\n    String beforeDelimiter = toSplit.substring(0, offset);\r\n    String afterDelimiter = toSplit.substring(offset + delimiter.length());\r\n    return new String[] { beforeDelimiter, afterDelimiter };\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.processRoles",
	"Comment": "if this action is protected by security roles, make sure that thecurrent user possesses at least one of them.return trueto continue normal processing, or false if an appropriateresponse has been created and processing should terminate.",
	"Method": "boolean processRoles(HttpServletRequest request,HttpServletResponse response,ActionMapping mapping){\r\n    String[] roles = mapping.getRoleNames();\r\n    if ((roles == null) || (roles.length < 1)) {\r\n        return (true);\r\n    }\r\n    for (int i = 0; i < roles.length; i++) {\r\n        if (request.isUserInRole(roles[i])) {\r\n            if (log.isDebugEnabled()) {\r\n                log.debug(\" User '\" + request.getRemoteUser() + \"' has role '\" + roles[i] + \"', granting access\");\r\n            }\r\n            return (true);\r\n        }\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\" User '\" + request.getRemoteUser() + \"' does not have any required role, denying access\");\r\n    }\r\n    response.sendError(HttpServletResponse.SC_FORBIDDEN, getInternal().getMessage(\"notAuthorized\", mapping.getPath()));\r\n    return (false);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.UnionImpl.wrapInstance",
	"Comment": "wrap a union object around a union memory object containing data.called by setoperation.",
	"Method": "UnionImpl wrapInstance(Memory srcMem,long seed,UnionImpl wrapInstance,WritableMemory srcMem,long seed){\r\n    Family.UNION.checkFamilyID(srcMem.getByte(FAMILY_BYTE));\r\n    final UpdateSketch gadget = DirectQuickSelectSketch.writableWrap(srcMem, seed);\r\n    final UnionImpl unionImpl = new UnionImpl(gadget, seed);\r\n    unionImpl.unionThetaLong_ = srcMem.getLong(UNION_THETA_LONG);\r\n    return unionImpl;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationTest.getHeapLayout",
	"Comment": "compute offsets for myheap for union, sketch1, sketch2, sketch3, resultsketch, total layout.",
	"Method": "int[] getHeapLayout(int sketchNomEntries,int unionNomEntries){\r\n    int[] heapLayout = new int[6];\r\n    int unionBytes = SetOperation.getMaxUnionBytes(unionNomEntries);\r\n    int sketchBytes = getMaxUpdateSketchBytes(sketchNomEntries);\r\n    int resultBytes = Sketch.getMaxCompactSketchBytes(unionNomEntries);\r\n    heapLayout[0] = 0;\r\n    heapLayout[1] = unionBytes;\r\n    heapLayout[2] = unionBytes + sketchBytes;\r\n    heapLayout[3] = unionBytes + (2 * sketchBytes);\r\n    heapLayout[4] = unionBytes + (3 * sketchBytes);\r\n    heapLayout[5] = unionBytes + (3 * sketchBytes) + resultBytes;\r\n    return heapLayout;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.NounPhraseHelper.createPronoun",
	"Comment": "creates the appropriate pronoun if the subject of the noun phrase is\tpronominal.",
	"Method": "NLGElement createPronoun(SyntaxProcessor parent,PhraseElement phrase){\r\n    String pronoun = \"it\";\r\n    NLGFactory phraseFactory = phrase.getFactory();\r\n    Object personValue = phrase.getFeature(Feature.PERSON);\r\n    if (Person.FIRST.equals(personValue)) {\r\n        pronoun = \"I\";\r\n    } else if (Person.SECOND.equals(personValue)) {\r\n        pronoun = \"you\";\r\n    } else {\r\n        Object genderValue = phrase.getFeature(LexicalFeature.GENDER);\r\n        if (Gender.FEMININE.equals(genderValue)) {\r\n            pronoun = \"she\";\r\n        } else if (Gender.MASCULINE.equals(genderValue)) {\r\n            pronoun = \"he\";\r\n        }\r\n    }\r\n    NLGElement element;\r\n    NLGElement proElement = phraseFactory.createWord(pronoun, LexicalCategory.PRONOUN);\r\n    if (proElement instanceof WordElement) {\r\n        element = new InflectedWordElement((WordElement) proElement);\r\n        element.setFeature(LexicalFeature.GENDER, ((WordElement) proElement).getFeature(LexicalFeature.GENDER));\r\n        element.setFeature(Feature.PERSON, ((WordElement) proElement).getFeature(Feature.PERSON));\r\n    } else {\r\n        element = proElement;\r\n    }\r\n    element.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.SPECIFIER);\r\n    element.setFeature(Feature.POSSESSIVE, phrase.getFeature(Feature.POSSESSIVE));\r\n    element.setFeature(Feature.NUMBER, phrase.getFeature(Feature.NUMBER));\r\n    if (phrase.hasFeature(InternalFeature.DISCOURSE_FUNCTION)) {\r\n        element.setFeature(InternalFeature.DISCOURSE_FUNCTION, phrase.getFeature(InternalFeature.DISCOURSE_FUNCTION));\r\n    }\r\n    return element;\r\n}"
}, {
	"Path": "simplenlg.lexicon.Lexicon.hasWordFromVariant",
	"Comment": "return true if the lexicon contains a wordelement which\tmatches the specified variant form and category",
	"Method": "boolean hasWordFromVariant(String variant,LexicalCategory category,boolean hasWordFromVariant,String variant){\r\n    return !getWordsFromVariant(variant).isEmpty();\r\n}"
}, {
	"Path": "org.apache.struts.chain.contexts.ActionContextBase.addActionMessages",
	"Comment": "add the given messages to a cache stored in this context, underkey.",
	"Method": "void addActionMessages(String key,ActionMessages messages){\r\n    if (messages == null) {\r\n        return;\r\n    }\r\n    ActionMessages requestMessages = (ActionMessages) this.get(key);\r\n    if (requestMessages == null) {\r\n        requestMessages = new ActionMessages();\r\n    }\r\n    requestMessages.add(messages);\r\n    this.remove(key);\r\n    this.saveActionMessages(key, requestMessages);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.estimateSubsetSum",
	"Comment": "computes an estimated subset sum from the entire stream for objects matching a givenpredicate. provides a lower bound, estimate, and upper bound using a target of 2 standarddeviations.this is technically a heuristic method, and tries to err on the conservative side.",
	"Method": "SampleSubsetSummary estimateSubsetSum(Predicate<T> predicate){\r\n    if (n_ == 0) {\r\n        return new SampleSubsetSummary(0.0, 0.0, 0.0, 0.0);\r\n    }\r\n    double totalWtH = 0.0;\r\n    double hTrueWeight = 0.0;\r\n    int idx = 0;\r\n    for (; idx < h_; ++idx) {\r\n        final double wt = weights_.get(idx);\r\n        totalWtH += wt;\r\n        if (predicate.test(data_.get(idx))) {\r\n            hTrueWeight += wt;\r\n        }\r\n    }\r\n    if (r_ == 0) {\r\n        return new SampleSubsetSummary(hTrueWeight, hTrueWeight, hTrueWeight, hTrueWeight);\r\n    }\r\n    final long numSampled = n_ - h_;\r\n    assert numSampled > 0;\r\n    final double effectiveSamplingRate = r_ / (double) numSampled;\r\n    assert effectiveSamplingRate >= 0.0;\r\n    assert effectiveSamplingRate <= 1.0;\r\n    int rTrueCount = 0;\r\n    ++idx;\r\n    for (; idx < (k_ + 1); ++idx) {\r\n        if (predicate.test(data_.get(idx))) {\r\n            ++rTrueCount;\r\n        }\r\n    }\r\n    final double lbTrueFraction = pseudoHypergeometricLBonP(r_, rTrueCount, effectiveSamplingRate);\r\n    final double estimatedTrueFraction = (1.0 * rTrueCount) / r_;\r\n    final double ubTrueFraction = pseudoHypergeometricUBonP(r_, rTrueCount, effectiveSamplingRate);\r\n    return new SampleSubsetSummary(hTrueWeight + (totalWtR_ * lbTrueFraction), hTrueWeight + (totalWtR_ * estimatedTrueFraction), hTrueWeight + (totalWtR_ * ubTrueFraction), totalWtH + totalWtR_);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.UpdatableSketchBuilder.setSamplingProbability",
	"Comment": "this is to set sampling probability.default probability is 1.",
	"Method": "UpdatableSketchBuilder<U, S> setSamplingProbability(float samplingProbability){\r\n    if (samplingProbability < 0 || samplingProbability > 1f) {\r\n        throw new SketchesArgumentException(\"sampling probability must be between 0 and 1\");\r\n    }\r\n    samplingProbability_ = samplingProbability;\r\n    return this;\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.nonePassive",
	"Comment": "check that no element of a give array of sentences is passive.",
	"Method": "boolean nonePassive(NLGElement sentences){\r\n    boolean nopass = true;\r\n    for (int i = 0; i < sentences.length && nopass; i++) {\r\n        nopass = !sentences[i].getFeatureAsBoolean(Feature.PASSIVE);\r\n    }\r\n    return nopass;\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testProcessFormBeanConfigClassOverriddenSubFormClass",
	"Comment": "test the case where the subform has already specified its own form beanconfig class.if the code still attempts to create a new instance, anerror will be thrown.",
	"Method": "void testProcessFormBeanConfigClassOverriddenSubFormClass(){\r\n    CustomFormBeanConfigArg customBase = new CustomFormBeanConfigArg(\"customBase\");\r\n    moduleConfig.addFormBeanConfig(customBase);\r\n    FormBeanConfig customSub = new CustomFormBeanConfigArg(\"customSub\");\r\n    customSub.setExtends(\"customBase\");\r\n    moduleConfig.addFormBeanConfig(customSub);\r\n    try {\r\n        actionServlet.processFormBeanConfigClass(customSub, moduleConfig);\r\n    } catch (Exception e) {\r\n        fail(\"Exception should not be thrown\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedLinkTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(origName);\r\n    setProperty(origProperty);\r\n    setParamProperty(origParamProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractPerformInclude.includePath",
	"Comment": "returns the path to perform the include. override this method to providea different path.",
	"Method": "String includePath(ActionContext actionContext,String include){\r\n    ModuleConfig moduleConfig = actionContext.getModuleConfig();\r\n    return moduleConfig.getPrefix() + include;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.HllSketch.heapify",
	"Comment": "heapify the given memory, which must be a valid hllsketch image and may have data.",
	"Method": "HllSketch heapify(byte[] byteArray,HllSketch heapify,Memory srcMem){\r\n    final CurMode curMode = checkPreamble(srcMem);\r\n    final HllSketch heapSketch;\r\n    if (curMode == CurMode.HLL) {\r\n        final TgtHllType tgtHllType = extractTgtHllType(srcMem);\r\n        if (tgtHllType == TgtHllType.HLL_4) {\r\n            heapSketch = new HllSketch(Hll4Array.heapify(srcMem));\r\n        } else if (tgtHllType == TgtHllType.HLL_6) {\r\n            heapSketch = new HllSketch(Hll6Array.heapify(srcMem));\r\n        } else {\r\n            heapSketch = new HllSketch(Hll8Array.heapify(srcMem));\r\n        }\r\n    } else if (curMode == CurMode.LIST) {\r\n        heapSketch = new HllSketch(CouponList.heapifyList(srcMem));\r\n    } else {\r\n        heapSketch = new HllSketch(CouponHashSet.heapifySet(srcMem));\r\n    }\r\n    return heapSketch;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.pushIfModal",
	"Comment": "pushes the front verb on to the stack if the phrase has a modal.",
	"Method": "NLGElement pushIfModal(boolean hasModal,PhraseElement phrase,NLGElement frontVG,Stack<NLGElement> vgComponents){\r\n    NLGElement newFront = frontVG;\r\n    if (hasModal && !phrase.getFeatureAsBoolean(InternalFeature.IGNORE_MODAL).booleanValue()) {\r\n        if (frontVG != null) {\r\n            frontVG.setFeature(InternalFeature.NON_MORPH, true);\r\n            vgComponents.push(frontVG);\r\n        }\r\n        newFront = null;\r\n    }\r\n    return newFront;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.SelectInclude.execute",
	"Comment": "select and cache the include uri for this actionconfigif specified.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    ActionConfig actionConfig = actionCtx.getActionConfig();\r\n    String include = actionConfig.getInclude();\r\n    if (include != null) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Including \" + include);\r\n        }\r\n        actionCtx.setInclude(include);\r\n    }\r\n    return (false);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.createController",
	"Comment": "create a new instance of controller named in parameter.if controllertype is specified, create controller accordingly.otherwise, if name denote a classname, create an instance of it. if class is subclass of org.apache.struts.action.action, wrap controllerappropriately.otherwise, consider name as an url.",
	"Method": "Controller createController(String name,String controllerType){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Create controller name=\" + name + \", type=\" + controllerType);\r\n    }\r\n    Controller controller = null;\r\n    if (controllerType == null) {\r\n        try {\r\n            return createControllerFromClassname(name);\r\n        } catch (InstantiationException ex) {\r\n            controller = new UrlController(name);\r\n        }\r\n    } else if (\"url\".equalsIgnoreCase(controllerType)) {\r\n        controller = new UrlController(name);\r\n    } else if (\"classname\".equalsIgnoreCase(controllerType)) {\r\n        controller = createControllerFromClassname(name);\r\n    }\r\n    return controller;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.DefinitionTag.putAttribute",
	"Comment": "this method is a convenience for other tags forputting content into the tile definition.content is already typed by caller.",
	"Method": "void putAttribute(String name,Object content){\r\n    definition.putAttribute(name, content);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSketches.heapifyUnion",
	"Comment": "heapify the given memory and seed as an arrayofdoublesunion",
	"Method": "ArrayOfDoublesUnion heapifyUnion(Memory mem,ArrayOfDoublesUnion heapifyUnion,Memory mem,long seed){\r\n    return ArrayOfDoublesUnion.heapify(mem, seed);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.reset",
	"Comment": "resets this sketch back to a virgin empty state.takes care of mutual exclusion with propagation thread",
	"Method": "void reset(){\r\n    advanceEpoch();\r\n    super.reset();\r\n    volatileThetaLong_ = Long.MAX_VALUE;\r\n    volatileEstimate_ = 0;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getAllFeatures",
	"Comment": "retrieves the map containing all the features for this element.",
	"Method": "Map<String, Object> getAllFeatures(){\r\n    return this.features;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExceptionCatcher.execute",
	"Comment": "clear any existing stored exception and pass thecontext on to the remainder of the current chain.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    actionCtx.setException(null);\r\n    return (false);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedSelectTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionRedirect.testActionRedirectAddParameter",
	"Comment": "test all addparameter methods accepting different data types.",
	"Method": "void testActionRedirectAddParameter(){\r\n    ActionRedirect ar = new ActionRedirect(\"/path.do\");\r\n    ar.addParameter(\"st\", \"test\");\r\n    ar.addParameter(\"obj\", new StringBuffer(\"someString\"));\r\n    assertTrue(\"Incorrect path\", ar.getPath().indexOf(\"/path.do\") == 0);\r\n    assertHasParameter(ar.parameterValues, \"st\", \"test\");\r\n    assertHasParameter(ar.parameterValues, \"obj\", \"someString\");\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.equals",
	"Comment": "an nlg element is equal to some object if the object is an nlgelement,\tthey have the same category and the same features.",
	"Method": "boolean equals(String elementRealisation,boolean equals,Object o){\r\n    boolean eq = false;\r\n    if (o instanceof NLGElement) {\r\n        NLGElement element = (NLGElement) o;\r\n        eq = this.category == element.category && this.features.equals(element.features);\r\n    }\r\n    return eq;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseTest.complementationTest_2",
	"Comment": "this tests for the default complement ordering, relative to pre and\tpostmodifiers.",
	"Method": "void complementationTest_2(){\r\n    this.woman.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.INDIRECT_OBJECT);\r\n    this.dog.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.OBJECT);\r\n    this.give.clearComplements();\r\n    this.give.addComplement(this.dog);\r\n    this.give.addComplement(this.woman);\r\n    assertEquals(\"gives the woman the dog\", this.realiser.realise(this.give).getRealisation());\r\n    this.give.addPreModifier(\"slowly\");\r\n    this.give.addPostModifier(this.behindTheCurtain);\r\n    this.give.addPostModifier(this.inTheRoom);\r\n    assertEquals(\"slowly gives the woman the dog behind the curtain in the room\", this.realiser.realise(this.give).getRealisation());\r\n    this.give.clearComplements();\r\n    this.give.addComplement(this.dog);\r\n    CoordinatedPhraseElement womanBoy = new CoordinatedPhraseElement(this.woman, this.boy);\r\n    womanBoy.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.INDIRECT_OBJECT);\r\n    this.give.addComplement(womanBoy);\r\n    this.give.setFeature(Feature.PASSIVE, false);\r\n    assertEquals(\"slowly gives the woman and the boy the dog behind the curtain in the room\", this.realiser.realise(this.give).getRealisation());\r\n    this.give.clearComplements();\r\n    this.give.addComplement(womanBoy);\r\n    this.give.addComplement(this.dog);\r\n    List<NLGElement> complements = this.give.getFeatureAsElementList(InternalFeature.COMPLEMENTS);\r\n    int indirectCount = 0;\r\n    for (NLGElement eachElement : complements) {\r\n        if (DiscourseFunction.INDIRECT_OBJECT.equals(eachElement.getFeature(InternalFeature.DISCOURSE_FUNCTION))) {\r\n            indirectCount++;\r\n        }\r\n    }\r\n    assertEquals(1, indirectCount);\r\n    assertEquals(\"slowly gives the woman and the boy the dog behind the curtain in the room\", this.realiser.realise(this.give).getRealisation());\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.setController",
	"Comment": "set associated controller url.url should be local to webcontainer in order to allow request context followup.url is specified as a string.",
	"Method": "void setController(String url){\r\n    this.controller = url;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesPlugin.setModuleAware",
	"Comment": "set the module aware flag.this flag is only meaningful if the property tilesutilimplclassname is notset.",
	"Method": "void setModuleAware(boolean moduleAware){\r\n    this.moduleAware = moduleAware;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.DefinitionTag.doEndTag",
	"Comment": "process the end tag by putting the definition in appropriate context.",
	"Method": "int doEndTag(){\r\n    TagUtils.setAttribute(pageContext, id, definition, scope);\r\n    releaseInternal();\r\n    return EVAL_PAGE;\r\n}"
}, {
	"Path": "org.apache.struts.util.WildcardHelper.indexOfArray",
	"Comment": "get the offset of a part of an int array within a char array.thismethod return the index in d of the first occurrence after dpos of thatpart of array specified by r, starting at rpos and terminating atrend.",
	"Method": "int indexOfArray(int[] r,int rpos,int rend,char[] d,int dpos){\r\n    if (rend < rpos) {\r\n        throw new IllegalArgumentException(\"rend < rpos\");\r\n    }\r\n    if (rend == rpos) {\r\n        return (d.length);\r\n    }\r\n    if ((rend - rpos) == 1) {\r\n        for (int x = dpos; x < d.length; x++) {\r\n            if (r[rpos] == d[x]) {\r\n                return (x);\r\n            }\r\n        }\r\n    }\r\n    while (((dpos + rend) - rpos) <= d.length) {\r\n        int y = dpos;\r\n        for (int x = rpos; x <= rend; x++) {\r\n            if (x == rend) {\r\n                return (dpos);\r\n            }\r\n            if (r[x] != d[y++]) {\r\n                break;\r\n            }\r\n        }\r\n        dpos++;\r\n    }\r\n    return (-1);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.definition.ReloadableDefinitionsFactory.getDefinition",
	"Comment": "get a definition by its name.call appropriate method on underlying factory instance.throw appropriate exception if definition or definition factory is not found.",
	"Method": "ComponentDefinition getDefinition(String definitionName,ServletRequest request,ServletContext servletContext){\r\n    return factory.getDefinition(definitionName, (HttpServletRequest) request, servletContext);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesRequestProcessor.internalModuleRelativeForward",
	"Comment": "catch the call to a module relative forward.if the specified uri is a tiles definition name, insert it.otherwise, parent processing is called.do a module relative forward to specified uri using request dispatcher.uri is relative to the current module. the real uri is computed byprefixing the module name.this method is used internally and is not part of the publicapi. it is advised to not use it in subclasses.",
	"Method": "void internalModuleRelativeForward(String uri,HttpServletRequest request,HttpServletResponse response){\r\n    if (processTilesDefinition(uri, request, response)) {\r\n        return;\r\n    }\r\n    super.internalModuleRelativeForward(uri, request, response);\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.AesCbcWithIntegrity.encrypt",
	"Comment": "generates a random iv and encrypts this plain text with the given key. then attachesa hashed mac, which is contained in the ciphertextivmac class.",
	"Method": "CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,CipherTextIvMac encrypt,String plaintext,SecretKeys secretKeys,String encoding,CipherTextIvMac encrypt,byte[] plaintext,SecretKeys secretKeys){\r\n    byte[] iv = generateIv();\r\n    Cipher aesCipherForEncryption = Cipher.getInstance(CIPHER_TRANSFORMATION);\r\n    aesCipherForEncryption.init(Cipher.ENCRYPT_MODE, secretKeys.getConfidentialityKey(), new IvParameterSpec(iv));\r\n    iv = aesCipherForEncryption.getIV();\r\n    byte[] byteCipherText = aesCipherForEncryption.doFinal(plaintext);\r\n    byte[] ivCipherConcat = CipherTextIvMac.ivCipherConcat(iv, byteCipherText);\r\n    byte[] integrityMac = generateMac(ivCipherConcat, secretKeys.getIntegrityKey());\r\n    return new CipherTextIvMac(byteCipherText, iv, integrityMac);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.UpdateSketch.update",
	"Comment": "present this sketch with the given long array.if the long array is null or empty no update attempt is made and the method returns.",
	"Method": "UpdateReturnState update(long datum,UpdateReturnState update,double datum,UpdateReturnState update,String datum,UpdateReturnState update,byte[] data,UpdateReturnState update,char[] data,UpdateReturnState update,int[] data,UpdateReturnState update,long[] data){\r\n    if ((data == null) || (data.length == 0)) {\r\n        return RejectedNullOrEmpty;\r\n    }\r\n    return hashUpdate(hash(data, getSeed())[0] >>> 1);\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.getName",
	"Comment": "return name of the form bean, if any, associated with this action.",
	"Method": "String getName(){\r\n    return (this.name);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSamples.getNumSamples",
	"Comment": "returns the length copies items and weights from the sketch, if necessary, and returns thelength ofresulting array. the result will be 0 for an empty sketch.",
	"Method": "int getNumSamples(){\r\n    loadArrays();\r\n    return (sampleLists == null ? 0 : sampleLists.weights.length);\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.processActionForm",
	"Comment": "retrieve and return the actionform associated with thismapping, creating and retaining one if necessary. if there is noactionform associated with this mapping, returnnull.",
	"Method": "ActionForm processActionForm(HttpServletRequest request,HttpServletResponse response,ActionMapping mapping){\r\n    ActionForm instance = RequestUtils.createActionForm(request, mapping, moduleConfig, servlet);\r\n    if (instance == null) {\r\n        return (null);\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\" Storing ActionForm bean instance in scope '\" + mapping.getScope() + \"' under attribute key '\" + mapping.getAttribute() + \"'\");\r\n    }\r\n    if (\"request\".equals(mapping.getScope())) {\r\n        request.setAttribute(mapping.getAttribute(), instance);\r\n    } else {\r\n        HttpSession session = request.getSession();\r\n        session.setAttribute(mapping.getAttribute(), instance);\r\n    }\r\n    return (instance);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.getController",
	"Comment": "get associated controller local url.url should be local to webcontainer in order to allow request context followup.url comes as a string.",
	"Method": "String getController(){\r\n    return controller;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedHiddenTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createDocument",
	"Comment": "creates a new document element with the given title and adds the given\tcomponent.",
	"Method": "DocumentElement createDocument(DocumentElement createDocument,String title,DocumentElement createDocument,String title,List<DocumentElement> components,DocumentElement createDocument,String title,NLGElement component){\r\n    DocumentElement element = new DocumentElement(DocumentCategory.DOCUMENT, title);\r\n    if (component != null) {\r\n        element.addComponent(component);\r\n    }\r\n    return element;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.destroy",
	"Comment": "gracefully shut down this controller servlet, releasing anyresources that were allocated at initialization.",
	"Method": "void destroy(){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(internal.getMessage(\"finalizing\"));\r\n    }\r\n    destroyModules();\r\n    destroyInternal();\r\n    getServletContext().removeAttribute(Globals.ACTION_SERVLET_KEY);\r\n    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\r\n    if (classLoader == null) {\r\n        classLoader = ActionServlet.class.getClassLoader();\r\n    }\r\n    try {\r\n        LogFactory.release(classLoader);\r\n    } catch (Throwable t) {\r\n        ;\r\n    }\r\n    CatalogFactory.clear();\r\n    PropertyUtils.clearDescriptors();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.HiddenTag.doStartTag",
	"Comment": "generate the required input tag, followed by the optional renderedtext. support for write property since struts 1.1.",
	"Method": "int doStartTag(){\r\n    super.doStartTag();\r\n    if (!write) {\r\n        return (EVAL_BODY_TAG);\r\n    }\r\n    String results = null;\r\n    if (value != null) {\r\n        results = TagUtils.getInstance().filter(value);\r\n    } else {\r\n        Object value = TagUtils.getInstance().lookup(pageContext, name, property, null);\r\n        if (value == null) {\r\n            results = \"\";\r\n        } else {\r\n            results = TagUtils.getInstance().filter(value.toString());\r\n        }\r\n    }\r\n    TagUtils.getInstance().write(pageContext, results);\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedMultiboxTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.servlet.PerformForward.perform",
	"Comment": "perform the appropriate processing on the specifiedforwardconfig.",
	"Method": "void perform(ActionContext context,ForwardConfig forwardConfig){\r\n    ServletActionContext sacontext = (ServletActionContext) context;\r\n    String uri = forwardConfig.getPath();\r\n    if (uri == null) {\r\n        ActionServlet servlet = sacontext.getActionServlet();\r\n        MessageResources resources = servlet.getInternal();\r\n        throw new IllegalArgumentException(resources.getMessage(\"forwardPathNull\"));\r\n    }\r\n    HttpServletRequest request = sacontext.getRequest();\r\n    ServletContext servletContext = sacontext.getContext();\r\n    HttpServletResponse response = sacontext.getResponse();\r\n    String actionIdPath = RequestUtils.actionIdURL(forwardConfig, sacontext.getRequest(), sacontext.getActionServlet());\r\n    if (actionIdPath != null) {\r\n        uri = actionIdPath;\r\n        ForwardConfig actionIdForwardConfig = new ForwardConfig(forwardConfig);\r\n        actionIdForwardConfig.setPath(actionIdPath);\r\n        forwardConfig = actionIdForwardConfig;\r\n    }\r\n    if (uri.startsWith(\"/\")) {\r\n        uri = resolveModuleRelativePath(forwardConfig, servletContext, request);\r\n    }\r\n    if (response.isCommitted() && !forwardConfig.getRedirect()) {\r\n        handleAsInclude(uri, servletContext, request, response);\r\n    } else if (forwardConfig.getRedirect()) {\r\n        handleAsRedirect(uri, request, response);\r\n    } else {\r\n        handleAsForward(uri, servletContext, request, response);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.HeapUpdateDoublesSketchTest.sumOfSamplesInSketch",
	"Comment": "computes a checksum of all the samples in the sketch. used in testing the auxiliary",
	"Method": "double sumOfSamplesInSketch(HeapUpdateDoublesSketch sketch){\r\n    double[] combinedBuffer = sketch.getCombinedBuffer();\r\n    int bbCount = sketch.getBaseBufferCount();\r\n    double total = sumOfDoublesInSubArray(combinedBuffer, 0, bbCount);\r\n    long bits = sketch.getBitPattern();\r\n    int k = sketch.getK();\r\n    assert bits == (sketch.getN() / (2L * k));\r\n    for (int lvl = 0; bits != 0L; lvl++, bits >>>= 1) {\r\n        if ((bits & 1L) > 0L) {\r\n            total += sumOfDoublesInSubArray(combinedBuffer, ((2 + lvl) * k), k);\r\n        }\r\n    }\r\n    return total;\r\n}"
}, {
	"Path": "jadx.core.dex.regions.loops.LoopRegion.mergePreCondition",
	"Comment": "move all precondition block instructions before conditionblock instructions",
	"Method": "void mergePreCondition(){\r\n    if (preCondition != null && conditionBlock != null) {\r\n        List<InsnNode> condInsns = conditionBlock.getInstructions();\r\n        List<InsnNode> preCondInsns = preCondition.getInstructions();\r\n        preCondInsns.addAll(condInsns);\r\n        condInsns.clear();\r\n        condInsns.addAll(preCondInsns);\r\n        preCondInsns.clear();\r\n        preCondition = null;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsPmfCdfImpl.internalBuildHistogram",
	"Comment": "shared algorithm for both pmf and cdf functions. the splitpoints must be unique, monotonicallyincreasing values.",
	"Method": "double[] internalBuildHistogram(T[] splitPoints,ItemsSketch<T> sketch){\r\n    final Object[] samples = sketch.getCombinedBuffer();\r\n    final int bbCount = sketch.getBaseBufferCount();\r\n    ItemsUtil.validateValues(splitPoints, sketch.getComparator());\r\n    final int numSplitPoints = splitPoints.length;\r\n    final int numCounters = numSplitPoints + 1;\r\n    final double[] counters = new double[numCounters];\r\n    long weight = 1;\r\n    if (numSplitPoints < 50) {\r\n        ItemsPmfCdfImpl.bilinearTimeIncrementHistogramCounters((T[]) samples, 0, bbCount, weight, splitPoints, counters, sketch.getComparator());\r\n    } else {\r\n        Arrays.sort((T[]) samples, 0, bbCount, sketch.getComparator());\r\n        linearTimeIncrementHistogramCounters((T[]) samples, 0, bbCount, weight, splitPoints, counters, sketch.getComparator());\r\n    }\r\n    long myBitPattern = sketch.getBitPattern();\r\n    final int k = sketch.getK();\r\n    assert myBitPattern == (sketch.getN() / (2L * k));\r\n    for (int lvl = 0; myBitPattern != 0L; lvl++, myBitPattern >>>= 1) {\r\n        weight <<= 1;\r\n        if ((myBitPattern & 1L) > 0L) {\r\n            linearTimeIncrementHistogramCounters((T[]) samples, (2 + lvl) * k, k, weight, splitPoints, counters, sketch.getComparator());\r\n        }\r\n    }\r\n    return counters;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.reset",
	"Comment": "resets this sketch to the empty state, but retains the original value of k.",
	"Method": "void reset(){\r\n    final int ceilingLgK = Util.toLog2(Util.ceilingPowerOf2(k_), \"VarOptItemsSketch\");\r\n    final int initialLgSize = SamplingUtil.startingSubMultiple(ceilingLgK, rf_.lg(), MIN_LG_ARR_ITEMS);\r\n    currItemsAlloc_ = SamplingUtil.getAdjustedSize(k_, 1 << initialLgSize);\r\n    data_ = new ArrayList(currItemsAlloc_);\r\n    weights_ = new ArrayList(currItemsAlloc_);\r\n    if (marks_ != null) {\r\n        marks_ = new ArrayList(currItemsAlloc_);\r\n    }\r\n    n_ = 0;\r\n    h_ = 0;\r\n    m_ = 0;\r\n    r_ = 0;\r\n    numMarksInH_ = 0;\r\n    totalWtR_ = 0.0;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.SelectTag.renderSelectStartElement",
	"Comment": "create an appropriate select start element based on our parameters.",
	"Method": "String renderSelectStartElement(){\r\n    StringBuffer results = new StringBuffer(\"<select\");\r\n    prepareAttribute(results, \"name\", prepareName());\r\n    prepareAttribute(results, \"accesskey\", getAccesskey());\r\n    if (multiple != null) {\r\n        results.append(\" multiple=\\\"multiple\\\"\");\r\n    }\r\n    prepareAttribute(results, \"size\", getSize());\r\n    prepareAttribute(results, \"tabindex\", getTabindex());\r\n    results.append(prepareEventHandlers());\r\n    results.append(prepareStyles());\r\n    prepareOtherAttributes(results);\r\n    results.append(\">\");\r\n    return results.toString();\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.generic.WrappingLookupCommand.execute",
	"Comment": "invoke the command for a context, returning true if processingshould halt.",
	"Method": "boolean execute(Context context){\r\n    if (LOG.isTraceEnabled()) {\r\n        LOG.trace(\"execute [\" + this + \"]\");\r\n    }\r\n    Command command = getCommand(context);\r\n    if (command != null) {\r\n        return command.execute(getContext(context));\r\n    } else {\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseSet.elideRightmost",
	"Comment": "elide the rightmost constituents in the phrase list, that is, all phrases\texcept the first.",
	"Method": "void elideRightmost(){\r\n    for (int i = 1; i < this.phrases.size(); i++) {\r\n        NLGElement phrase = this.phrases.get(i);\r\n        if (phrase != null) {\r\n            phrase.setFeature(Feature.ELIDED, true);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "net.csdn.common.Strings.removeDuplicateStrings",
	"Comment": "remove duplicate strings from the given array.also sorts the array, as it uses a treeset.",
	"Method": "String[] removeDuplicateStrings(String[] array){\r\n    if (isEmpty(array)) {\r\n        return array;\r\n    }\r\n    Set<String> set = new TreeSet<String>();\r\n    set.addAll(Arrays.asList(array));\r\n    return toStringArray(set);\r\n}"
}, {
	"Path": "org.apache.struts.config.PlugInConfig.addProperty",
	"Comment": "add a new property name and value to the set that will be used toconfigure the plugin instance.",
	"Method": "void addProperty(String name,String value){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    properties.put(name, value);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testInitDestroyInternal",
	"Comment": "verify that we can initialize and destroy our internal messageresources object.",
	"Method": "void testInitDestroyInternal(){\r\n    ActionServlet servlet = new ActionServlet();\r\n    try {\r\n        servlet.initInternal();\r\n    } catch (ServletException e) {\r\n        fail(\"initInternal() threw exception: \" + e);\r\n    }\r\n    assertTrue(\"internal was initialized\", servlet.getInternal() != null);\r\n    assertTrue(\"internal of correct type\", servlet.getInternal() instanceof MessageResources);\r\n    servlet.destroyInternal();\r\n    assertTrue(\"internal was destroyed\", servlet.getInternal() == null);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.getQuantileUpperBound",
	"Comment": "gets the upper bound of the value interval in which the true quantile of the given rankexists with a confidence of at least 99%.",
	"Method": "T getQuantileUpperBound(double fraction){\r\n    return getQuantile(min(1.0, fraction + Util.getNormalizedRankError(k_, false)));\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.OptionsTag.getIterator",
	"Comment": "return an iterator for the option labels or values, based on ourconfigured properties.",
	"Method": "Iterator getIterator(String name,String property){\r\n    String beanName = name;\r\n    if (beanName == null) {\r\n        beanName = Constants.BEAN_KEY;\r\n    }\r\n    Object bean = TagUtils.getInstance().lookup(pageContext, beanName, null);\r\n    if (bean == null) {\r\n        throw new JspException(messages.getMessage(\"getter.bean\", beanName));\r\n    }\r\n    Object collection = bean;\r\n    if (property != null) {\r\n        try {\r\n            collection = PropertyUtils.getProperty(bean, property);\r\n            if (collection == null) {\r\n                throw new JspException(messages.getMessage(\"getter.property\", property));\r\n            }\r\n        } catch (IllegalAccessException e) {\r\n            throw new JspException(messages.getMessage(\"getter.access\", property, name));\r\n        } catch (InvocationTargetException e) {\r\n            Throwable t = e.getTargetException();\r\n            throw new JspException(messages.getMessage(\"getter.result\", property, t.toString()));\r\n        } catch (NoSuchMethodException e) {\r\n            throw new JspException(messages.getMessage(\"getter.method\", property, name));\r\n        }\r\n    }\r\n    if (collection.getClass().isArray()) {\r\n        collection = Arrays.asList((Object[]) collection);\r\n    }\r\n    if (collection instanceof Collection) {\r\n        return (((Collection) collection).iterator());\r\n    } else if (collection instanceof Iterator) {\r\n        return ((Iterator) collection);\r\n    } else if (collection instanceof Map) {\r\n        return (((Map) collection).entrySet().iterator());\r\n    } else if (collection instanceof Enumeration) {\r\n        return new IteratorAdapter((Enumeration) collection);\r\n    } else {\r\n        throw new JspException(messages.getMessage(\"optionsTag.iterator\", collection.toString()));\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.PreambleUtil.preambleToString",
	"Comment": "returns a human readable string summary of the preamble state of the given byte array.used primarily in testing.",
	"Method": "String preambleToString(byte[] byteArr,String preambleToString,Memory mem){\r\n    final int preLongs = getAndCheckPreLongs(mem);\r\n    final Family family = Family.idToFamily(mem.getByte(FAMILY_BYTE));\r\n    switch(family) {\r\n        case RESERVOIR:\r\n        case VAROPT:\r\n            return sketchPreambleToString(mem, family, preLongs);\r\n        case RESERVOIR_UNION:\r\n        case VAROPT_UNION:\r\n            return unionPreambleToString(mem, family, preLongs);\r\n        default:\r\n            throw new SketchesArgumentException(\"Inspecting preamble with Sampling family's \" + \"PreambleUtil with object of family \" + family.getFamilyName());\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcCompression.compressSlidingFlavor",
	"Comment": "complicated by the existence of both a left fringe and a right fringe.",
	"Method": "void compressSlidingFlavor(CompressedState target,CpcSketch source){\r\n    compressTheWindow(target, source);\r\n    final PairTable srcPairTable = source.pairTable;\r\n    final int numPairs = srcPairTable.getNumPairs();\r\n    if (numPairs > 0) {\r\n        final int[] pairs = PairTable.unwrappingGetItems(srcPairTable, numPairs);\r\n        final int pseudoPhase = determinePseudoPhase(source.lgK, source.numCoupons);\r\n        assert (pseudoPhase < 16);\r\n        final byte[] permutation = columnPermutationsForEncoding[pseudoPhase];\r\n        final int offset = source.windowOffset;\r\n        assert ((offset > 0) && (offset <= 56));\r\n        for (int i = 0; i < numPairs; i++) {\r\n            final int rowCol = pairs[i];\r\n            final int row = rowCol >>> 6;\r\n            int col = (rowCol & 63);\r\n            col = ((col + 56) - offset) & 63;\r\n            assert (col >= 0) && (col < 56);\r\n            col = permutation[col];\r\n            pairs[i] = (row << 6) | col;\r\n        }\r\n        introspectiveInsertionSort(pairs, 0, numPairs - 1);\r\n        compressTheSurprisingValues(target, source, pairs, numPairs);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.PageTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String type = null;\r\n    String property = data.getAttributeString(\"property\");\r\n    if (\"application\".equalsIgnoreCase(property)) {\r\n        type = \"javax.servlet.ServletContext\";\r\n    } else if (\"config\".equalsIgnoreCase(property)) {\r\n        type = \"javax.servlet.ServletConfig\";\r\n    } else if (\"request\".equalsIgnoreCase(property)) {\r\n        type = \"javax.servlet.ServletRequest\";\r\n    } else if (\"response\".equalsIgnoreCase(property)) {\r\n        type = \"javax.servlet.ServletResponse\";\r\n    } else if (\"session\".equalsIgnoreCase(property)) {\r\n        type = \"javax.servlet.http.HttpSession\";\r\n    } else {\r\n        type = \"java.lang.Object\";\r\n    }\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), type, true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.sameVPArgs",
	"Comment": "check that the sentences supplied have the same complements at vp level.",
	"Method": "boolean sameVPArgs(NLGElement sentences){\r\n    boolean equal = sentences.length >= 2;\r\n    for (int i = 1; i < sentences.length && equal; i++) {\r\n        NLGElement vp1 = sentences[i - 1].getFeatureAsElement(InternalFeature.VERB_PHRASE);\r\n        NLGElement vp2 = sentences[i].getFeatureAsElement(InternalFeature.VERB_PHRASE);\r\n        equal = vp1.getFeatureAsElementList(InternalFeature.COMPLEMENTS).equals(vp2.getFeatureAsElementList(InternalFeature.COMPLEMENTS));\r\n    }\r\n    return equal;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.ImgTag.src",
	"Comment": "return the base source url that will be rendered in thesrc property for this generated element, ornull if there is no such url.",
	"Method": "String src(){\r\n    if (this.page != null) {\r\n        if ((this.src != null) || (this.srcKey != null) || (this.pageKey != null)) {\r\n            throwImgTagSrcException();\r\n        }\r\n        ModuleConfig config = ModuleUtils.getInstance().getModuleConfig(this.module, (HttpServletRequest) pageContext.getRequest(), pageContext.getServletContext());\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        String pageValue = this.page;\r\n        if (!srcDefaultReference(config)) {\r\n            pageValue = TagUtils.getInstance().pageURL(request, this.page, config);\r\n        }\r\n        return (request.getContextPath() + pageValue);\r\n    }\r\n    if (this.pageKey != null) {\r\n        if ((this.src != null) || (this.srcKey != null)) {\r\n            throwImgTagSrcException();\r\n        }\r\n        ModuleConfig config = ModuleUtils.getInstance().getModuleConfig(this.module, (HttpServletRequest) pageContext.getRequest(), pageContext.getServletContext());\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        String pageValue = TagUtils.getInstance().message(pageContext, getBundle(), getLocale(), this.pageKey);\r\n        if (!srcDefaultReference(config)) {\r\n            pageValue = TagUtils.getInstance().pageURL(request, pageValue, config);\r\n        }\r\n        return (request.getContextPath() + pageValue);\r\n    }\r\n    if (this.action != null) {\r\n        if ((this.src != null) || (this.srcKey != null)) {\r\n            throwImgTagSrcException();\r\n        }\r\n        return TagUtils.getInstance().getActionMappingURL(action, module, pageContext, false);\r\n    }\r\n    if (this.src != null) {\r\n        if (this.srcKey != null) {\r\n            throwImgTagSrcException();\r\n        }\r\n        return (this.src);\r\n    }\r\n    if (this.srcKey == null) {\r\n        throwImgTagSrcException();\r\n    }\r\n    return TagUtils.getInstance().message(pageContext, getBundle(), getLocale(), this.srcKey);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hllmap.UniqueCountMap.getEstimate",
	"Comment": "retrieves the current estimate of unique count for a given key.",
	"Method": "double getEstimate(byte[] key){\r\n    if (key == null) {\r\n        return Double.NaN;\r\n    }\r\n    checkMethodKeySize(key);\r\n    final double est = maps_[0].getEstimate(key);\r\n    if (est >= 0.0) {\r\n        return est;\r\n    }\r\n    final int level = -(int) est;\r\n    final Map map = maps_[level];\r\n    return map.getEstimate(key);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.UpdatableSketchBuilder.setResizeFactor",
	"Comment": "this is to set the resize factor.value of x1 means that the maximum capacity is allocated from the start.default resize factor is x8.",
	"Method": "UpdatableSketchBuilder<U, S> setResizeFactor(ResizeFactor resizeFactor){\r\n    resizeFactor_ = resizeFactor;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedWriteNestingTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String id = data.getAttributeString(\"id\");\r\n    VariableInfo[] vi = null;\r\n    if (id != null) {\r\n        vi = new VariableInfo[1];\r\n        vi[0] = new VariableInfo(id, \"java.lang.String\", true, VariableInfo.AT_END);\r\n    } else {\r\n        vi = new VariableInfo[0];\r\n    }\r\n    return vi;\r\n}"
}, {
	"Path": "simplenlg.lexicon.Lexicon.getWord",
	"Comment": "get a wordelement which has the specified base form and category",
	"Method": "WordElement getWord(String baseForm,LexicalCategory category,WordElement getWord,String baseForm){\r\n    List<WordElement> wordElements = getWords(baseForm);\r\n    if (wordElements.isEmpty())\r\n        return createWord(baseForm);\r\n    else\r\n        return selectMatchingWord(wordElements, baseForm);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.getSharedCurrentBytes",
	"Comment": "returns the number of storage bytes required for this sketch in its current state.",
	"Method": "int getSharedCurrentBytes(boolean compact){\r\n    return getCurrentBytes(compact);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtil.setTilesUtil",
	"Comment": "set the real implementation.this method should be called only once.successive calls have no effect.",
	"Method": "void setTilesUtil(TilesUtilImpl tilesUtil){\r\n    if (implAlreadySet) {\r\n        return;\r\n    }\r\n    tilesUtilImpl = tilesUtil;\r\n    implAlreadySet = true;\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testInitModuleFormBeansNullPropType",
	"Comment": "test that initmoduleformbeans throws an exception when a form whoseprop type is null is present.",
	"Method": "void testInitModuleFormBeansNullPropType(){\r\n    moduleConfig.addFormBeanConfig(baseFormBean);\r\n    baseFormBean.findFormPropertyConfig(\"name\").setType(null);\r\n    try {\r\n        actionServlet.initModuleFormBeans(moduleConfig);\r\n        fail(\"An exception should've been thrown here.\");\r\n    } catch (UnavailableException e) {\r\n    } catch (Exception e) {\r\n        fail(\"Unrecognized exception thrown: \" + e);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createWord",
	"Comment": "creates a new element representing a word. if the word passed is already\tan nlgelement then that is returned unchanged. if a\tstring is passed as the word then the factory will look up\tthe lexicon if one exists and use the details found to\tcreate a new wordelement.",
	"Method": "NLGElement createWord(Object word,LexicalCategory category){\r\n    NLGElement wordElement = null;\r\n    if (word instanceof NLGElement) {\r\n        wordElement = (NLGElement) word;\r\n    } else if (word instanceof String && this.lexicon != null) {\r\n        wordElement = lexicon.lookupWord((String) word, category);\r\n        if (PRONOUNS.contains(word)) {\r\n            setPronounFeatures(wordElement, (String) word);\r\n        }\r\n    }\r\n    return wordElement;\r\n}"
}, {
	"Path": "jadx.core.utils.BlockUtils.getNextBlock",
	"Comment": "return first successor which not exception handler and not follow loop back edge",
	"Method": "BlockNode getNextBlock(BlockNode block){\r\n    List<BlockNode> s = block.getCleanSuccessors();\r\n    return s.isEmpty() ? null : s.get(0);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUnion.heapify",
	"Comment": "heapify the given memory and seed as an arrayofdoublesunion",
	"Method": "ArrayOfDoublesUnion heapify(Memory mem,ArrayOfDoublesUnion heapify,Memory mem,long seed){\r\n    return HeapArrayOfDoublesUnion.heapifyUnion(mem, seed);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsBoolean",
	"Comment": "retrieves the value of the feature as a boolean. if the\tfeature does not exist or is not a boolean then\tboolean.false is returned.",
	"Method": "Boolean getFeatureAsBoolean(String featureName){\r\n    Object value = getFeature(featureName);\r\n    Boolean boolValue = Boolean.FALSE;\r\n    if (value instanceof Boolean) {\r\n        boolValue = (Boolean) value;\r\n    }\r\n    return boolValue;\r\n}"
}, {
	"Path": "org.apache.struts.action.Action.generateToken",
	"Comment": "generate a new transaction token, to be used for enforcing a singlerequest for a particular transaction.",
	"Method": "String generateToken(HttpServletRequest request){\r\n    return token.generateToken(request);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.QuickSelectSketch.compact",
	"Comment": "converts the current state of the sketch into a compact sketch",
	"Method": "CompactSketch<S> compact(){\r\n    if (getRetainedEntries() == 0) {\r\n        return new CompactSketch(null, null, theta_, isEmpty_);\r\n    }\r\n    final long[] keys = new long[getRetainedEntries()];\r\n    @SuppressWarnings(\"unchecked\")\r\n    final S[] summaries = (S[]) Array.newInstance(summaries_.getClass().getComponentType(), getRetainedEntries());\r\n    int i = 0;\r\n    for (int j = 0; j < keys_.length; j++) {\r\n        if (summaries_[j] != null) {\r\n            keys[i] = keys_[j];\r\n            summaries[i] = summaries_[j].copy();\r\n            i++;\r\n        }\r\n    }\r\n    return new CompactSketch(keys, summaries, theta_, isEmpty_);\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.getException",
	"Comment": "the runtime jspexception that may be been thrown by a struts tagextension, or compatible presentation extension, and placed in therequest.",
	"Method": "Throwable getException(){\r\n    if (this.request == null) {\r\n        return null;\r\n    }\r\n    return (Throwable) this.request.getAttribute(Globals.EXCEPTION_KEY);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.getCompactStorageBytes",
	"Comment": "returns the number of bytes a doublessketch would require to store in compact formgiven the values of k and n. the compact form is not updatable.",
	"Method": "int getCompactStorageBytes(int getCompactStorageBytes,int k,long n){\r\n    if (n == 0) {\r\n        return 8;\r\n    }\r\n    final int metaPreLongs = DoublesSketch.MAX_PRELONGS + 2;\r\n    return ((metaPreLongs + Util.computeRetainedItems(k, n)) << 3);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedPasswordTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseHelper.addComplementiser",
	"Comment": "checks to see if this clause is a subordinate clause. if it is then the\tcomplementiser is added as a component to the realised element\tunless the complementiser has been suppressed.",
	"Method": "void addComplementiser(PhraseElement phrase,SyntaxProcessor parent,ListElement realisedElement){\r\n    NLGElement currentElement;\r\n    if (ClauseStatus.SUBORDINATE.equals(phrase.getFeature(InternalFeature.CLAUSE_STATUS)) && !phrase.getFeatureAsBoolean(Feature.SUPRESSED_COMPLEMENTISER).booleanValue()) {\r\n        currentElement = parent.realise(phrase.getFeatureAsElement(Feature.COMPLEMENTISER));\r\n        if (currentElement != null) {\r\n            realisedElement.addComponent(currentElement);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.getActionFormBeanClass",
	"Comment": "the default class name to be used when creating action form beaninstances.",
	"Method": "String getActionFormBeanClass(){\r\n    return this.actionFormBeanClass;\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.sameVPModifiers",
	"Comment": "check that the phrases supplied are sentences and have the same vp\tpremodifiers and postmodifiers",
	"Method": "boolean sameVPModifiers(NLGElement sentences){\r\n    boolean equal = sentences.length >= 2;\r\n    for (int i = 1; i < sentences.length && equal; i++) {\r\n        NLGElement vp1 = sentences[i - 1].getFeatureAsElement(InternalFeature.VERB_PHRASE);\r\n        NLGElement vp2 = sentences[i].getFeatureAsElement(InternalFeature.VERB_PHRASE);\r\n        equal = vp1.getFeatureAsElementList(InternalFeature.POSTMODIFIERS).equals(vp2.getFeatureAsElementList(InternalFeature.POSTMODIFIERS)) && vp1.getFeatureAsElementList(InternalFeature.PREMODIFIERS).equals(vp2.getFeatureAsElementList(InternalFeature.PREMODIFIERS));\r\n    }\r\n    return equal;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsUnion.getResult",
	"Comment": "gets the varopt sketch resulting from the union of any input sketches.",
	"Method": "VarOptItemsSketch<T> getResult(){\r\n    if (gadget_.getNumMarksInH() == 0) {\r\n        return simpleGadgetCoercer();\r\n    } else {\r\n        final VarOptItemsSketch<T> tmp = detectAndHandleSubcaseOfPseudoExact();\r\n        if (tmp != null) {\r\n            return tmp;\r\n        } else {\r\n            return migrateMarkedItemsByDecreasingK();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.PreambleUtil.getAndCheckPreLongs",
	"Comment": "checks memory for capacity to hold the preamble and returns the extracted prelongs.",
	"Method": "int getAndCheckPreLongs(Memory mem){\r\n    final long cap = mem.getCapacity();\r\n    if (cap < 8) {\r\n        throwNotBigEnough(cap, 8);\r\n    }\r\n    final int preLongs = extractPreLongs(mem);\r\n    final int required = Math.max(preLongs << 3, 8);\r\n    if (cap < required) {\r\n        throwNotBigEnough(cap, required);\r\n    }\r\n    return preLongs;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseHelper.addSubjectsToFront",
	"Comment": "adds the subjects to the beginning of the clause unless the clause is\tinfinitive, imperative or passive, or the subjects split the verb.",
	"Method": "void addSubjectsToFront(PhraseElement phrase,SyntaxProcessor parent,ListElement realisedElement,NLGElement splitVerb){\r\n    if (!Form.INFINITIVE.equals(phrase.getFeature(Feature.FORM)) && !Form.IMPERATIVE.equals(phrase.getFeature(Feature.FORM)) && !phrase.getFeatureAsBoolean(Feature.PASSIVE).booleanValue() && splitVerb == null) {\r\n        realisedElement.addComponents(realiseSubjects(phrase, parent).getChildren());\r\n    }\r\n}"
}, {
	"Path": "org.sonar.java.model.ExpressionUtils.methodName",
	"Comment": "retrieve the identifier corresponding to the method name associated to the method invocation",
	"Method": "IdentifierTree methodName(MethodInvocationTree mit){\r\n    ExpressionTree methodSelect = mit.methodSelect();\r\n    IdentifierTree id;\r\n    if (methodSelect.is(Tree.Kind.IDENTIFIER)) {\r\n        id = (IdentifierTree) methodSelect;\r\n    } else {\r\n        id = ((MemberSelectExpressionTree) methodSelect).identifier();\r\n    }\r\n    return id;\r\n}"
}, {
	"Path": "schemacrawler.tools.text.operation.DataResultSet.readStream",
	"Comment": "reads data from an input stream into a string. default systemencoding is assumed.",
	"Method": "BinaryData readStream(InputStream stream){\r\n    if (stream == null) {\r\n        return null;\r\n    } else if (showLobs) {\r\n        final BufferedInputStream in = new BufferedInputStream(stream);\r\n        final BinaryData lobData = new BinaryData(readFully(in));\r\n        return lobData;\r\n    } else {\r\n        return new BinaryData();\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.getParameter",
	"Comment": "return general purpose configuration parameter that can be used topass extra information to the action instance selected by this action.struts does not itself use this value in any way.",
	"Method": "String getParameter(){\r\n    return (this.parameter);\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.getSuffix",
	"Comment": "return suffix used to match request parameter names to form beanproperty names, if any.",
	"Method": "String getSuffix(){\r\n    return (this.suffix);\r\n}"
}, {
	"Path": "org.apache.struts.validator.BeanValidatorForm.getDynaClass",
	"Comment": "return the dynaclass instance that describes the set ofproperties available for this dynabean.",
	"Method": "DynaClass getDynaClass(){\r\n    return dynaBean.getDynaClass();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.getScope",
	"Comment": "converts the scope name into its corresponding pagecontext constantvalue.",
	"Method": "int getScope(String scopeName){\r\n    Integer scope = (Integer) scopes.get(scopeName.toLowerCase());\r\n    if (scope == null) {\r\n        throw new JspException(messages.getMessage(\"lookup.scope\", scope));\r\n    }\r\n    return scope.intValue();\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.internalModuleRelativeForward",
	"Comment": "do a module relative forward to specified uri using requestdispatcher. uri is relative to the current module. the real uri iscompute by prefixing the module name. this method is usedinternally and is not part of the public api. it is advised to not useit in subclasses.",
	"Method": "void internalModuleRelativeForward(String uri,HttpServletRequest request,HttpServletResponse response){\r\n    uri = moduleConfig.getPrefix() + uri;\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\" Delegating via forward to '\" + uri + \"'\");\r\n    }\r\n    doForward(uri, request, response);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedIterateTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    super.setName(originalName);\r\n    super.setProperty(originalProperty);\r\n    if (originalNesting == null) {\r\n        NestedPropertyHelper.deleteReference(request);\r\n    } else {\r\n        NestedPropertyHelper.setProperty(request, originalNesting);\r\n        NestedPropertyHelper.setName(request, originalNestingName);\r\n    }\r\n    return i;\r\n}"
}, {
	"Path": "oauth.signpost.signature.SignatureBaseString.normalizeRequestParameters",
	"Comment": "normalizes the set of request parameters this instance was configuredwith, as per oauth spec section 9.1.1.",
	"Method": "String normalizeRequestParameters(){\r\n    if (requestParameters == null) {\r\n        return \"\";\r\n    }\r\n    StringBuilder sb = new StringBuilder();\r\n    Iterator<String> iter = requestParameters.keySet().iterator();\r\n    for (int i = 0; iter.hasNext(); i++) {\r\n        String param = iter.next();\r\n        if (OAuth.OAUTH_SIGNATURE.equals(param) || \"realm\".equals(param)) {\r\n            continue;\r\n        }\r\n        if (i > 0) {\r\n            sb.append(\"&\");\r\n        }\r\n        sb.append(requestParameters.getAsQueryString(param, false));\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketchBuilder.build",
	"Comment": "returns a quantiles updatedoublessketch with the current configuration of this builderand the specified backing destination memory store.",
	"Method": "UpdateDoublesSketch build(UpdateDoublesSketch build,WritableMemory dstMem){\r\n    return DirectUpdateDoublesSketch.newInstance(bK, dstMem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.newInstanceAsGadget",
	"Comment": "construct a varopt sketch for use as a unioning gadget, meaning the array of marked elementsis also initialized.",
	"Method": "VarOptItemsSketch<T> newInstanceAsGadget(int k){\r\n    final VarOptItemsSketch<T> sketch = new VarOptItemsSketch(k, DEFAULT_RESIZE_FACTOR);\r\n    sketch.marks_ = new ArrayList(sketch.currItemsAlloc_);\r\n    return sketch;\r\n}"
}, {
	"Path": "com.yahoo.sketches.BoundsOnRatiosInThetaSketchedSets.getUpperBoundForBoverA",
	"Comment": "gets the approximate upper bound for b over a based on a 95% confidence interval",
	"Method": "double getUpperBoundForBoverA(Sketch sketchA,Sketch sketchB){\r\n    final double thetaA = sketchA.getTheta();\r\n    final double thetaB = sketchB.getTheta();\r\n    checkThetas(thetaA, thetaB);\r\n    final int countB = sketchB.getRetainedEntries(true);\r\n    final int countA = (thetaB == thetaA) ? sketchA.getRetainedEntries(true) : sketchA.getCountLessThanTheta(thetaB);\r\n    if (countA <= 0) {\r\n        return 1.0;\r\n    }\r\n    return BoundsOnRatiosInSampledSets.getUpperBoundForBoverA(countA, countB, thetaB);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionMessages.testAddMessages",
	"Comment": "tests adding an actionmessages object to an actionmessages object.",
	"Method": "void testAddMessages(){\r\n    ActionMessage msg1 = new ActionMessage(\"key\");\r\n    ActionMessage msg2 = new ActionMessage(\"key2\");\r\n    ActionMessage msg3 = new ActionMessage(\"key3\");\r\n    ActionMessages msgs = new ActionMessages();\r\n    ActionMessages add = new ActionMessages();\r\n    msgs.add(\"prop1\", msg1);\r\n    add.add(\"prop1\", msg2);\r\n    add.add(\"prop3\", msg3);\r\n    msgs.add(add);\r\n    assertTrue(msgs.size() == 3);\r\n    assertTrue(msgs.size(\"prop1\") == 2);\r\n    Iterator props = msgs.get();\r\n    int count = 1;\r\n    while (props.hasNext()) {\r\n        ActionMessage msg = (ActionMessage) props.next();\r\n        if (count == 1) {\r\n            assertTrue(msg.getKey().equals(\"key\"));\r\n        } else if (count == 2) {\r\n            assertTrue(msg.getKey().equals(\"key2\"));\r\n        } else {\r\n            assertTrue(msg.getKey().equals(\"key3\"));\r\n        }\r\n        count++;\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.RadioTag.currentValue",
	"Comment": "acquire the current value of the bean specified by thename attribute and the property specified by theproperty attribute. this radio button with this value willbe checked.",
	"Method": "String currentValue(){\r\n    String current = this.lookupProperty(this.name, this.property);\r\n    return (current == null) ? \"\" : current;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.merge",
	"Comment": "this function merges the other sketch into this one.the other sketch may be of a different size.",
	"Method": "ItemsSketch<T> merge(ItemsSketch<T> other){\r\n    if (other == null) {\r\n        return this;\r\n    }\r\n    if (other.isEmpty()) {\r\n        return this;\r\n    }\r\n    final long streamLen = this.streamLength + other.streamLength;\r\n    final ReversePurgeItemHashMap.Iterator<T> iter = other.hashMap.iterator();\r\n    while (iter.next()) {\r\n        this.update(iter.getKey(), iter.getValue());\r\n    }\r\n    this.offset += other.offset;\r\n    this.streamLength = streamLen;\r\n    return this;\r\n}"
}, {
	"Path": "actions.SendingMessages.sendDirectMessageToMultipleUsers",
	"Comment": "this method shows how to send a direct message to multiple users.",
	"Method": "void sendDirectMessageToMultipleUsers(SlackSession session){\r\n    SlackUser killroy = session.findUserByUserName(\"killroy\");\r\n    SlackUser janedoe = session.findUserByUserName(\"janedoe\");\r\n    SlackUser agentsmith = session.findUserByUserName(\"agentsmith\");\r\n    SlackMessageHandle<SlackChannelReply> reply = session.openMultipartyDirectMessageChannel(killroy, janedoe, agentsmith);\r\n    SlackChannel channel = reply.getReply().getSlackChannel();\r\n    session.sendMessage(channel, \"Hi, how are you guys\", null);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedWriteNestingTag.doStartTag",
	"Comment": "overriding method of the heart of the tag. gets the relative propertyand tells the jsp engine to evaluate its body content.",
	"Method": "int doStartTag(){\r\n    originalProperty = property;\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    String nesting = NestedPropertyHelper.getAdjustedProperty(request, property);\r\n    if (id != null) {\r\n        pageContext.setAttribute(id, nesting);\r\n    } else {\r\n        if (this.filter) {\r\n            TagUtils.getInstance().write(pageContext, TagUtils.getInstance().filter(nesting));\r\n        } else {\r\n            TagUtils.getInstance().write(pageContext, nesting);\r\n        }\r\n    }\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "simplenlg.phrasespec.NPPhraseSpec.addModifier",
	"Comment": "add a modifier to an np use heuristics to decide where it goes",
	"Method": "void addModifier(Object modifier){\r\n    if (modifier == null)\r\n        return;\r\n    NLGElement modifierElement = null;\r\n    if (modifier instanceof NLGElement)\r\n        modifierElement = (NLGElement) modifier;\r\n    else if (modifier instanceof String) {\r\n        String modifierString = (String) modifier;\r\n        if (modifierString.length() > 0 && !modifierString.contains(\" \"))\r\n            modifierElement = getFactory().createWord(modifier, LexicalCategory.ANY);\r\n    }\r\n    if (modifierElement == null) {\r\n        addPostModifier((String) modifier);\r\n        return;\r\n    }\r\n    if (modifierElement instanceof AdjPhraseSpec) {\r\n        addPreModifier(modifierElement);\r\n        return;\r\n    }\r\n    WordElement modifierWord = null;\r\n    if (modifierElement != null && modifierElement instanceof WordElement)\r\n        modifierWord = (WordElement) modifierElement;\r\n    else if (modifierElement != null && modifierElement instanceof InflectedWordElement)\r\n        modifierWord = ((InflectedWordElement) modifierElement).getBaseWord();\r\n    if (modifierWord != null && modifierWord.getCategory() == LexicalCategory.ADJECTIVE) {\r\n        addPreModifier(modifierWord);\r\n        return;\r\n    }\r\n    addPostModifier(modifierElement);\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.getInternal",
	"Comment": "return the messageresources instance containing ourinternal message strings.",
	"Method": "MessageResources getInternal(){\r\n    return (servlet.getInternal());\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.estimateSubsetSum",
	"Comment": "computes an estimated subset sum from the entire stream for objects matching a givenpredicate. provides a lower bound, estimate, and upper bound using a target of 2 standarddeviations.this is technically a heuristic method, and tries to err on the conservative side.",
	"Method": "SampleSubsetSummary estimateSubsetSum(Predicate<Long> predicate){\r\n    if (itemsSeen_ == 0) {\r\n        return new SampleSubsetSummary(0.0, 0.0, 0.0, 0.0);\r\n    }\r\n    final long numSamples = getNumSamples();\r\n    final double samplingRate = numSamples / (double) itemsSeen_;\r\n    assert samplingRate >= 0.0;\r\n    assert samplingRate <= 1.0;\r\n    int predTrueCount = 0;\r\n    for (int i = 0; i < numSamples; ++i) {\r\n        if (predicate.test(data_[i])) {\r\n            ++predTrueCount;\r\n        }\r\n    }\r\n    if (itemsSeen_ <= reservoirSize_) {\r\n        return new SampleSubsetSummary(predTrueCount, predTrueCount, predTrueCount, numSamples);\r\n    }\r\n    final double lbTrueFraction = pseudoHypergeometricLBonP(numSamples, predTrueCount, samplingRate);\r\n    final double estimatedTrueFraction = (1.0 * predTrueCount) / numSamples;\r\n    final double ubTrueFraction = pseudoHypergeometricUBonP(numSamples, predTrueCount, samplingRate);\r\n    return new SampleSubsetSummary(itemsSeen_ * lbTrueFraction, itemsSeen_ * estimatedTrueFraction, itemsSeen_ * ubTrueFraction, itemsSeen_);\r\n}"
}, {
	"Path": "com.yahoo.sketches.Util.isPowerOf2",
	"Comment": "returns true if argument is exactly a positive power of 2 and greater than zero.",
	"Method": "boolean isPowerOf2(int v){\r\n    return (v > 0) && ((v & (v - 1)) == 0);\r\n}"
}, {
	"Path": "schemacrawler.tools.text.utility.BaseTextFormattingHelper.writeRowHeader",
	"Comment": "called to handle the header output. handler to be implemented bysubclass.",
	"Method": "void writeRowHeader(String columnNames){\r\n    TextOutputFormat outputFormat = this.outputFormat;\r\n    if (outputFormat == TextOutputFormat.text) {\r\n        outputFormat = TextOutputFormat.tsv;\r\n    }\r\n    final TableRow row = new TableRow(outputFormat);\r\n    for (final String columnName : columnNames) {\r\n        final TableHeaderCell headerCell = new TableHeaderCell(columnName, 0, Alignment.inherit, false, \"\", Color.white, 1, outputFormat);\r\n        row.add(headerCell);\r\n    }\r\n    out.println(row.toString());\r\n}"
}, {
	"Path": "org.jf.dexlib2.util.AnnotatedBytes.writeAnnotations",
	"Comment": "writes the annotated content of this instance to the given writer.",
	"Method": "void writeAnnotations(Writer out,byte[] data){\r\n    int rightWidth = getAnnotationWidth();\r\n    int leftWidth = outputWidth - rightWidth - 1;\r\n    String padding = Strings.repeat(\" \", 1000);\r\n    TwoColumnOutput twoc = new TwoColumnOutput(out, leftWidth, rightWidth, \"|\");\r\n    Integer[] keys = new Integer[annotatations.size()];\r\n    keys = annotatations.keySet().toArray(keys);\r\n    AnnotationEndpoint[] values = new AnnotationEndpoint[annotatations.size()];\r\n    values = annotatations.values().toArray(values);\r\n    for (int i = 0; i < keys.length - 1; i++) {\r\n        int rangeStart = keys[i];\r\n        int rangeEnd = keys[i + 1];\r\n        AnnotationEndpoint annotations = values[i];\r\n        for (AnnotationItem pointAnnotation : annotations.pointAnnotations) {\r\n            String paddingSub = padding.substring(0, pointAnnotation.indentLevel * 2);\r\n            twoc.write(\"\", paddingSub + pointAnnotation.annotation);\r\n        }\r\n        String right;\r\n        AnnotationItem rangeAnnotation = annotations.rangeAnnotation;\r\n        if (rangeAnnotation != null) {\r\n            right = padding.substring(0, rangeAnnotation.indentLevel * 2);\r\n            right += rangeAnnotation.annotation;\r\n        } else {\r\n            right = \"\";\r\n        }\r\n        String left = Hex.dump(data, rangeStart, rangeEnd - rangeStart, rangeStart, hexCols, 6);\r\n        twoc.write(left, right);\r\n    }\r\n    int lastKey = keys[keys.length - 1];\r\n    if (lastKey < data.length) {\r\n        String left = Hex.dump(data, lastKey, data.length - lastKey, lastKey, hexCols, 6);\r\n        twoc.write(left, \"\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.util.PropertyMessageResources.loadLocale",
	"Comment": "load the messages associated with the specified locale key.for thisimplementation, the config property should contain a fullyqualified package and resource name, separated by periods, of a seriesof property resources to be loaded from the class loader that createdthis propertymessageresources instance.this is exactly the same nameformat you would use when utilizing the java.util.propertyresourcebundleclass.",
	"Method": "void loadLocale(String localeKey){\r\n    if (log.isTraceEnabled()) {\r\n        log.trace(\"loadLocale(\" + localeKey + \")\");\r\n    }\r\n    if (locales.get(localeKey) != null) {\r\n        return;\r\n    }\r\n    locales.put(localeKey, localeKey);\r\n    String name = config.replace('.', '/');\r\n    if (localeKey.length() > 0) {\r\n        name += (\"_\" + localeKey);\r\n    }\r\n    name += \".properties\";\r\n    InputStream is = null;\r\n    Properties props = new Properties();\r\n    if (log.isTraceEnabled()) {\r\n        log.trace(\"  Loading resource '\" + name + \"'\");\r\n    }\r\n    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\r\n    if (classLoader == null) {\r\n        classLoader = this.getClass().getClassLoader();\r\n    }\r\n    is = classLoader.getResourceAsStream(name);\r\n    if (is != null) {\r\n        try {\r\n            props.load(is);\r\n        } catch (IOException e) {\r\n            log.error(\"loadLocale()\", e);\r\n        } finally {\r\n            try {\r\n                is.close();\r\n            } catch (IOException e) {\r\n                log.error(\"loadLocale()\", e);\r\n            }\r\n        }\r\n        if (log.isTraceEnabled()) {\r\n            log.trace(\"  Loading resource completed\");\r\n        }\r\n    } else {\r\n        if (log.isWarnEnabled()) {\r\n            log.warn(\"  Resource \" + name + \" Not Found.\");\r\n        }\r\n    }\r\n    if (props.size() < 1) {\r\n        return;\r\n    }\r\n    synchronized (messages) {\r\n        Iterator names = props.keySet().iterator();\r\n        while (names.hasNext()) {\r\n            String key = (String) names.next();\r\n            if (log.isTraceEnabled()) {\r\n                log.trace(\"  Saving message key '\" + messageKey(localeKey, key));\r\n            }\r\n            messages.put(messageKey(localeKey, key), props.getProperty(key));\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.FormTag.renderToken",
	"Comment": "generates a hidden input field with token information, if any. thefield is added within a div element for html 4.01 strict compliance.",
	"Method": "String renderToken(){\r\n    StringBuffer results = new StringBuffer();\r\n    HttpSession session = pageContext.getSession();\r\n    if (session != null) {\r\n        String token = (String) session.getAttribute(Globals.TRANSACTION_TOKEN_KEY);\r\n        if (token != null) {\r\n            results.append(\"<div><input type=\\\"hidden\\\" name=\\\"\");\r\n            results.append(Constants.TOKEN_KEY);\r\n            results.append(\"\\\" value=\\\"\");\r\n            results.append(token);\r\n            if (this.isXhtml()) {\r\n                results.append(\"\\\" />\");\r\n            } else {\r\n                results.append(\"\\\">\");\r\n            }\r\n            results.append(\"<\/div>\");\r\n        }\r\n    }\r\n    return results.toString();\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilStrutsModulesImpl.doForward",
	"Comment": "do a forward using request dispatcher.this method is used by the tiles package anytime a forward is required.",
	"Method": "void doForward(String uri,HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){\r\n    request.getRequestDispatcher(uri).forward(request, response);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotEmptyTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketchTest.testSketchEquality",
	"Comment": "checks 2 doublessketches for equality, triggering an assert if unequal. handles allinput sketches and compares only values on valid levels, allowing it to be used to compareupdate and compact sketches.",
	"Method": "void testSketchEquality(DoublesSketch sketch1,DoublesSketch sketch2){\r\n    assertEquals(sketch1.getK(), sketch2.getK());\r\n    assertEquals(sketch1.getN(), sketch2.getN());\r\n    assertEquals(sketch1.getBitPattern(), sketch2.getBitPattern());\r\n    assertEquals(sketch1.getMinValue(), sketch2.getMinValue());\r\n    assertEquals(sketch1.getMaxValue(), sketch2.getMaxValue());\r\n    final DoublesSketchAccessor accessor1 = DoublesSketchAccessor.wrap(sketch1);\r\n    final DoublesSketchAccessor accessor2 = DoublesSketchAccessor.wrap(sketch2);\r\n    for (int i = 0; i < accessor1.numItems(); ++i) {\r\n        assertEquals(accessor1.get(i), accessor2.get(i));\r\n    }\r\n    long bitPattern = sketch1.getBitPattern();\r\n    for (int lvl = 0; bitPattern != 0; ++lvl, bitPattern >>>= 1) {\r\n        if ((bitPattern & 1) > 0) {\r\n            accessor1.setLevel(lvl);\r\n            accessor2.setLevel(lvl);\r\n            for (int i = 0; i < accessor1.numItems(); ++i) {\r\n                assertEquals(accessor1.get(i), accessor2.get(i));\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.servlet.CreateAction.createAction",
	"Comment": "invoked by getaction when the action actually has to be created. if the instance is already created and cached, this method will not be called.",
	"Method": "Action createAction(ActionContext context,String type){\r\n    log.info(\"Initialize action of type: \" + type);\r\n    return (Action) ClassUtils.getApplicationInstance(type);\r\n}"
}, {
	"Path": "org.apache.struts.validator.validwhen.ValidWhen.validateValidWhen",
	"Comment": "checks if the field matches the boolean expression specified intest parameter.",
	"Method": "boolean validateValidWhen(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object form = validator.getParameterValue(Validator.BEAN_PARAM);\r\n    String value = null;\r\n    boolean valid = false;\r\n    int index = -1;\r\n    if (field.isIndexed()) {\r\n        String key = field.getKey();\r\n        final int leftBracket = key.indexOf(\"[\");\r\n        final int rightBracket = key.indexOf(\"]\");\r\n        if ((leftBracket > -1) && (rightBracket > -1)) {\r\n            index = Integer.parseInt(key.substring(leftBracket + 1, rightBracket));\r\n        }\r\n    }\r\n    if (isString(bean)) {\r\n        value = (String) bean;\r\n    } else {\r\n        value = ValidatorUtils.getValueAsString(bean, field.getProperty());\r\n    }\r\n    String test = null;\r\n    try {\r\n        test = Resources.getVarValue(\"test\", field, validator, request, true);\r\n    } catch (IllegalArgumentException ex) {\r\n        String logErrorMsg = sysmsgs.getMessage(\"validation.failed\", \"validwhen\", field.getProperty(), ex.toString());\r\n        log.error(logErrorMsg);\r\n        String userErrorMsg = sysmsgs.getMessage(\"system.error\");\r\n        errors.add(field.getKey(), new ActionMessage(userErrorMsg, false));\r\n        return false;\r\n    }\r\n    ValidWhenLexer lexer = null;\r\n    try {\r\n        lexer = new ValidWhenLexer(new StringReader(test));\r\n    } catch (Exception ex) {\r\n        String logErrorMsg = \"ValidWhenLexer Error for field ' \" + field.getKey() + \"' - \" + ex;\r\n        log.error(logErrorMsg);\r\n        String userErrorMsg = sysmsgs.getMessage(\"system.error\");\r\n        errors.add(field.getKey(), new ActionMessage(userErrorMsg, false));\r\n        return false;\r\n    }\r\n    ValidWhenParser parser = null;\r\n    try {\r\n        parser = new ValidWhenParser(lexer);\r\n    } catch (Exception ex) {\r\n        String logErrorMsg = \"ValidWhenParser Error for field ' \" + field.getKey() + \"' - \" + ex;\r\n        log.error(logErrorMsg);\r\n        String userErrorMsg = sysmsgs.getMessage(\"system.error\");\r\n        errors.add(field.getKey(), new ActionMessage(userErrorMsg, false));\r\n        return false;\r\n    }\r\n    parser.setForm(form);\r\n    parser.setIndex(index);\r\n    parser.setValue(value);\r\n    try {\r\n        parser.expression();\r\n        valid = parser.getResult();\r\n    } catch (Exception ex) {\r\n        String logErrorMsg = \"ValidWhen Error for field ' \" + field.getKey() + \"' - \" + ex;\r\n        log.error(logErrorMsg);\r\n        String userErrorMsg = sysmsgs.getMessage(\"system.error\");\r\n        errors.add(field.getKey(), new ActionMessage(userErrorMsg, false));\r\n        return false;\r\n    }\r\n    if (!valid) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesByteArrayImpl.convertToByteArray",
	"Comment": "returns a byte array, including preamble, min, max and data extracted from the sketch.",
	"Method": "byte[] convertToByteArray(DoublesSketch sketch,int flags,boolean ordered,boolean compact){\r\n    final int preLongs = 2;\r\n    final int extra = 2;\r\n    final int prePlusExtraBytes = (preLongs + extra) << 3;\r\n    final int k = sketch.getK();\r\n    final long n = sketch.getN();\r\n    final DoublesSketchAccessor dsa = DoublesSketchAccessor.wrap(sketch, !compact);\r\n    final int outBytes = (compact ? sketch.getCompactStorageBytes() : sketch.getUpdatableStorageBytes());\r\n    final byte[] outByteArr = new byte[outBytes];\r\n    final WritableMemory memOut = WritableMemory.wrap(outByteArr);\r\n    insertPre0(memOut, preLongs, flags, k);\r\n    if (sketch.isEmpty()) {\r\n        return outByteArr;\r\n    }\r\n    insertN(memOut, n);\r\n    insertMinDouble(memOut, sketch.getMinValue());\r\n    insertMaxDouble(memOut, sketch.getMaxValue());\r\n    long memOffsetBytes = prePlusExtraBytes;\r\n    final int bbCnt = Util.computeBaseBufferItems(k, n);\r\n    if (bbCnt > 0) {\r\n        final double[] bbItemsArr = dsa.getArray(0, bbCnt);\r\n        if (ordered) {\r\n            Arrays.sort(bbItemsArr);\r\n        }\r\n        memOut.putDoubleArray(memOffsetBytes, bbItemsArr, 0, bbCnt);\r\n    }\r\n    memOffsetBytes += (compact ? bbCnt : 2 * k) << 3;\r\n    final int totalLevels = Util.computeTotalLevels(sketch.getBitPattern());\r\n    for (int lvl = 0; lvl < totalLevels; ++lvl) {\r\n        dsa.setLevel(lvl);\r\n        if (dsa.numItems() > 0) {\r\n            assert dsa.numItems() == k;\r\n            memOut.putDoubleArray(memOffsetBytes, dsa.getArray(0, k), 0, k);\r\n            memOffsetBytes += (k << 3);\r\n        }\r\n    }\r\n    return outByteArr;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.HeaderTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String className = null;\r\n    if (data.getAttribute(\"multiple\") == null) {\r\n        className = \"java.lang.String\";\r\n    } else {\r\n        className = \"java.lang.String[]\";\r\n    }\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), className, true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseHandlerTag.prepareInternationalization",
	"Comment": "prepares the internationalization attribtes, appending them to the the givenstringbuffer.",
	"Method": "void prepareInternationalization(StringBuffer handlers){\r\n    prepareAttribute(handlers, \"lang\", getLang());\r\n    prepareAttribute(handlers, \"dir\", getDir());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.MessagesPresentTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if there is at least one message in the classor for the property specified.",
	"Method": "boolean condition(boolean condition,boolean desired){\r\n    ActionMessages am = null;\r\n    String key = name;\r\n    if ((message != null) && \"true\".equalsIgnoreCase(message)) {\r\n        key = Globals.MESSAGE_KEY;\r\n    }\r\n    try {\r\n        am = TagUtils.getInstance().getActionMessages(pageContext, key);\r\n    } catch (JspException e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    Iterator iterator = (property == null) ? am.get() : am.get(property);\r\n    return (iterator.hasNext() == desired);\r\n}"
}, {
	"Path": "org.apache.struts.config.ExceptionConfig.checkCircularInheritance",
	"Comment": "traces the hierarchy of this object to check if any of the ancestorsare extending this instance.",
	"Method": "boolean checkCircularInheritance(ModuleConfig moduleConfig,ActionConfig actionConfig){\r\n    String ancestorType = getExtends();\r\n    if (ancestorType == null) {\r\n        return false;\r\n    }\r\n    ExceptionConfig ancestor = null;\r\n    if (actionConfig != null) {\r\n        ancestor = actionConfig.findExceptionConfig(ancestorType);\r\n        if (ancestor == this) {\r\n            ancestor = null;\r\n        }\r\n    }\r\n    if (ancestor == null) {\r\n        ancestor = moduleConfig.findExceptionConfig(ancestorType);\r\n        if (ancestor != null) {\r\n            actionConfig = null;\r\n        }\r\n    }\r\n    while (ancestor != null) {\r\n        if (ancestor == this) {\r\n            return true;\r\n        }\r\n        ancestorType = ancestor.getExtends();\r\n        if (ancestor.getType().equals(ancestorType)) {\r\n            if (actionConfig == null) {\r\n                return false;\r\n            } else {\r\n                actionConfig = null;\r\n            }\r\n        }\r\n        ancestor = null;\r\n        if (actionConfig != null) {\r\n            ancestor = actionConfig.findExceptionConfig(ancestorType);\r\n        }\r\n        if (ancestor == null) {\r\n            ancestor = moduleConfig.findExceptionConfig(ancestorType);\r\n            if (ancestor != null) {\r\n                actionConfig = null;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateLong",
	"Comment": "checks if the field can safely be converted to a long primitive.",
	"Method": "Object validateLong(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    result = GenericTypeValidator.formatLong(value);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.definition.ReloadableDefinitionsFactory.createDefaultFactory",
	"Comment": "create default definition factory. factory must have a constructor taking servletcontext and map as parameter. in this implementation, default factory is of class i18nfactoryset",
	"Method": "ComponentDefinitionsFactory createDefaultFactory(ServletContext servletContext,Map properties){\r\n    ComponentDefinitionsFactory factory = new I18nFactorySet(servletContext, properties);\r\n    return factory;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.getNumSamples",
	"Comment": "returns the current number of items in the reservoir, which may be smaller than thereservoir capacity.",
	"Method": "int getNumSamples(){\r\n    return (int) Math.min(reservoirSize_, itemsSeen_);\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.getServlet",
	"Comment": "retrieves the servlet with which this handler is associated.",
	"Method": "ActionServlet getServlet(){\r\n    return this.servlet;\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.addFormPropertyConfig",
	"Comment": "add a new formpropertyconfig instance to the setassociated with this module.",
	"Method": "void addFormPropertyConfig(FormPropertyConfig config){\r\n    throwIfConfigured();\r\n    if (formProperties.containsKey(config.getName())) {\r\n        throw new IllegalArgumentException(\"Property \" + config.getName() + \" already defined\");\r\n    }\r\n    formProperties.put(config.getName(), config);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsDouble",
	"Comment": "retrieves the value of the feature as a double. if the\tfeature does not exist or cannot be converted to a double then\tnull is returned.",
	"Method": "Double getFeatureAsDouble(String featureName){\r\n    Object value = getFeature(featureName);\r\n    Double doubleValue = null;\r\n    if (value instanceof Double) {\r\n        doubleValue = (Double) value;\r\n    } else if (value instanceof Number) {\r\n        doubleValue = new Double(((Number) value).doubleValue());\r\n    } else if (value instanceof String) {\r\n        try {\r\n            doubleValue = new Double((String) value);\r\n        } catch (NumberFormatException exception) {\r\n            doubleValue = null;\r\n        }\r\n    }\r\n    return doubleValue;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGModule.setLexicon",
	"Comment": "sets the lexicon to be used by this module. passing in null\twill remove the existing lexicon and no lexicon will be used.",
	"Method": "void setLexicon(Lexicon newLexicon){\r\n    this.lexicon = newLexicon;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.reset",
	"Comment": "resets this sketch to the empty state, but retains the original value of k.",
	"Method": "void reset(){\r\n    final int ceilingLgK = Util.toLog2(Util.ceilingPowerOf2(reservoirSize_), \"ReservoirItemsSketch\");\r\n    final int initialLgSize = SamplingUtil.startingSubMultiple(ceilingLgK, rf_.lg(), MIN_LG_ARR_ITEMS);\r\n    currItemsAlloc_ = SamplingUtil.getAdjustedSize(reservoirSize_, 1 << initialLgSize);\r\n    data_ = new ArrayList(currItemsAlloc_);\r\n    itemsSeen_ = 0;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.handleGeneralExtensionException",
	"Comment": "general handling for exceptions caught while inheriting configinformation.",
	"Method": "void handleGeneralExtensionException(String configType,String configName,Exception e){\r\n    String errorMessage = internal.getMessage(\"configExtends\", configType, configName);\r\n    log.error(errorMessage, e);\r\n    throw new UnavailableException(errorMessage);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.ParameterTag.doStartTag",
	"Comment": "retrieve the required property and expose it as a scripting variable.",
	"Method": "int doStartTag(){\r\n    if (multiple == null) {\r\n        String value = pageContext.getRequest().getParameter(name);\r\n        if ((value == null) && (this.value != null)) {\r\n            value = this.value;\r\n        }\r\n        if (value == null) {\r\n            JspException e = new JspException(messages.getMessage(\"parameter.get\", name));\r\n            TagUtils.getInstance().saveException(pageContext, e);\r\n            throw e;\r\n        }\r\n        pageContext.setAttribute(id, value);\r\n        return (SKIP_BODY);\r\n    }\r\n    String[] values = pageContext.getRequest().getParameterValues(name);\r\n    if ((values == null) || (values.length == 0)) {\r\n        if (this.value != null) {\r\n            values = new String[] { this.value };\r\n        }\r\n    }\r\n    if ((values == null) || (values.length == 0)) {\r\n        JspException e = new JspException(messages.getMessage(\"parameter.get\", name));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    pageContext.setAttribute(id, values);\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperation.getMaxIntersectionBytes",
	"Comment": "returns the maximum required storage bytes given a nomentries parameter for intersectionoperations",
	"Method": "int getMaxIntersectionBytes(int nomEntries){\r\n    final int nomEnt = ceilingPowerOf2(nomEntries);\r\n    final int bytes = (nomEnt << 4) + (Family.INTERSECTION.getMaxPreLongs() << 3);\r\n    return bytes;\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.getActionForwardClass",
	"Comment": "the default class name to be used when creating action forwardinstances.",
	"Method": "String getActionForwardClass(){\r\n    return this.actionForwardClass;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.createVerbGroup",
	"Comment": "creates a stack of verbs for the verb phrase. additional auxiliary verbs\tare added as required based on the features of the verb phrase.",
	"Method": "Stack<NLGElement> createVerbGroup(SyntaxProcessor parent,PhraseElement phrase){\r\n    String actualModal = null;\r\n    Object formValue = phrase.getFeature(Feature.FORM);\r\n    Tense tenseValue = (Tense) phrase.getFeature(Feature.TENSE);\r\n    String modal = phrase.getFeatureAsString(Feature.MODAL);\r\n    boolean modalPast = false;\r\n    Stack<NLGElement> vgComponents = new Stack<NLGElement>();\r\n    boolean interrogative = phrase.hasFeature(Feature.INTERROGATIVE_TYPE);\r\n    if (Form.GERUND.equals(formValue) || Form.INFINITIVE.equals(formValue)) {\r\n        tenseValue = Tense.PRESENT;\r\n    }\r\n    if (Form.INFINITIVE.equals(formValue)) {\r\n        actualModal = \"to\";\r\n    } else if (formValue == null || Form.NORMAL.equals(formValue)) {\r\n        if (Tense.FUTURE.equals(tenseValue) && modal == null && ((!(phrase.getHead() instanceof CoordinatedPhraseElement)) || (phrase.getHead() instanceof CoordinatedPhraseElement && interrogative))) {\r\n            actualModal = \"will\";\r\n        } else if (modal != null) {\r\n            actualModal = modal;\r\n            if (Tense.PAST.equals(tenseValue)) {\r\n                modalPast = true;\r\n            }\r\n        }\r\n    }\r\n    pushParticles(phrase, parent, vgComponents);\r\n    NLGElement frontVG = grabHeadVerb(phrase, tenseValue, modal != null);\r\n    checkImperativeInfinitive(formValue, frontVG);\r\n    if (phrase.getFeatureAsBoolean(Feature.PASSIVE).booleanValue()) {\r\n        frontVG = addBe(frontVG, vgComponents, Form.PAST_PARTICIPLE);\r\n    }\r\n    if (phrase.getFeatureAsBoolean(Feature.PROGRESSIVE).booleanValue()) {\r\n        frontVG = addBe(frontVG, vgComponents, Form.PRESENT_PARTICIPLE);\r\n    }\r\n    if (phrase.getFeatureAsBoolean(Feature.PERFECT).booleanValue() || modalPast) {\r\n        frontVG = addHave(frontVG, vgComponents, modal, tenseValue);\r\n    }\r\n    frontVG = pushIfModal(actualModal != null, phrase, frontVG, vgComponents);\r\n    frontVG = createNot(phrase, vgComponents, frontVG, modal != null);\r\n    if (frontVG != null) {\r\n        pushFrontVerb(phrase, vgComponents, frontVG, formValue, interrogative);\r\n    }\r\n    pushModal(actualModal, phrase, vgComponents);\r\n    return vgComponents;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionForm.getServletWrapper",
	"Comment": "return the controller servlet instance to which we are attached. asan actionservletwrapper.",
	"Method": "ActionServletWrapper getServletWrapper(){\r\n    return new ActionServletWrapper(getServlet());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.StrutsTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String type = null;\r\n    if (data.getAttribute(\"formBean\") != null) {\r\n        type = \"org.apache.struts.action.ActionFormBean\";\r\n    } else if (data.getAttribute(\"forward\") != null) {\r\n        type = \"org.apache.struts.action.ActionForward\";\r\n    } else if (data.getAttribute(\"mapping\") != null) {\r\n        type = \"org.apache.struts.action.ActionMapping\";\r\n    } else {\r\n        type = \"java.lang.Object\";\r\n    }\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), type, true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionFormClass.testConfigRemove",
	"Comment": "check for ability to remove a property before and after freezing",
	"Method": "void testConfigRemove(){\r\n    FormPropertyConfig prop = null;\r\n    prop = beanConfig.findFormPropertyConfig(\"booleanProperty\");\r\n    assertNotNull(\"booleanProperty found\", prop);\r\n    beanConfig.removeFormPropertyConfig(prop);\r\n    prop = beanConfig.findFormPropertyConfig(\"booleanProperty\");\r\n    assertNull(\"booleanProperty not deleted\", prop);\r\n    beanConfig.freeze();\r\n    prop = beanConfig.findFormPropertyConfig(\"booleanSecond\");\r\n    assertNotNull(\"booleanSecond found\", prop);\r\n    try {\r\n        beanConfig.removeFormPropertyConfig(prop);\r\n        fail(\"booleanSecond remove not prevented\");\r\n    } catch (IllegalStateException e) {\r\n        ;\r\n    }\r\n}"
}, {
	"Path": "net.csdn.common.Strings.concatenateStringArrays",
	"Comment": "concatenate the given string arrays into one,with overlapping array elements included twice.the order of elements in the original arrays is preserved.",
	"Method": "String[] concatenateStringArrays(String[] array1,String[] array2){\r\n    if (isEmpty(array1)) {\r\n        return array2;\r\n    }\r\n    if (isEmpty(array2)) {\r\n        return array1;\r\n    }\r\n    String[] newArr = new String[array1.length + array2.length];\r\n    System.arraycopy(array1, 0, newArr, 0, array1.length);\r\n    System.arraycopy(array2, 0, newArr, array1.length, array2.length);\r\n    return newArr;\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketch.getMaxValue",
	"Comment": "returns the max value of the stream.if the sketch is empty this returns nan.",
	"Method": "float getMaxValue(){\r\n    return maxValue_;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.processFormBeanConfigClass",
	"Comment": "checks if the current beanconfig is using the correct class based onthe class of its ancestor form bean config.",
	"Method": "FormBeanConfig processFormBeanConfigClass(FormBeanConfig beanConfig,ModuleConfig moduleConfig){\r\n    String ancestor = beanConfig.getExtends();\r\n    if (ancestor == null) {\r\n        return beanConfig;\r\n    }\r\n    FormBeanConfig baseConfig = moduleConfig.findFormBeanConfig(ancestor);\r\n    if (baseConfig == null) {\r\n        throw new UnavailableException(\"Unable to find \" + \"form bean '\" + ancestor + \"' to extend.\");\r\n    }\r\n    if (beanConfig.getClass().equals(FormBeanConfig.class)) {\r\n        if (!baseConfig.getClass().equals(beanConfig.getClass())) {\r\n            FormBeanConfig newBeanConfig = null;\r\n            String baseConfigClassName = baseConfig.getClass().getName();\r\n            try {\r\n                newBeanConfig = (FormBeanConfig) RequestUtils.applicationInstance(baseConfigClassName);\r\n                BeanUtils.copyProperties(newBeanConfig, beanConfig);\r\n                FormPropertyConfig[] fpc = beanConfig.findFormPropertyConfigs();\r\n                for (int i = 0; i < fpc.length; i++) {\r\n                    newBeanConfig.addFormPropertyConfig(fpc[i]);\r\n                }\r\n            } catch (Exception e) {\r\n                handleCreationException(baseConfigClassName, e);\r\n            }\r\n            moduleConfig.removeFormBeanConfig(beanConfig);\r\n            moduleConfig.addFormBeanConfig(newBeanConfig);\r\n            beanConfig = newBeanConfig;\r\n        }\r\n    }\r\n    return beanConfig;\r\n}"
}, {
	"Path": "simplenlg.framework.PhraseElement.getFrontModifiers",
	"Comment": "retrieves the current list of frony modifiers for the phrase.",
	"Method": "List<NLGElement> getFrontModifiers(){\r\n    return getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS);\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.messageKey",
	"Comment": "compute and return a key to be used in caching information by localekey and message key.",
	"Method": "String messageKey(Locale locale,String key,String messageKey,String localeKey,String key){\r\n    return (localeKey + \".\" + key);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.getControllerType",
	"Comment": "get associated controller type.type denote a fully qualified classname.",
	"Method": "String getControllerType(){\r\n    return controllerType;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.setControllerType",
	"Comment": "set associated controller type.type denote a fully qualified classname.",
	"Method": "void setControllerType(String controllerType){\r\n    this.controllerType = controllerType;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.DefinitionsUtil.removeActionDefinition",
	"Comment": "remove definition stored in jsp context.mainly used by struts to pass a definition defined in an action to the forward.",
	"Method": "void removeActionDefinition(ServletRequest request,ComponentDefinition definition){\r\n    request.removeAttribute(ACTION_DEFINITION);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.stripMarks",
	"Comment": "strips the mark array from the object, making what had been a gadget indistinguishable forma sketch. avoids an extra copy.",
	"Method": "void stripMarks(){\r\n    assert marks_ != null;\r\n    numMarksInH_ = 0;\r\n    marks_ = null;\r\n}"
}, {
	"Path": "simplenlg.framework.CoordinatedPhraseElement.setConjunction",
	"Comment": "set the conjunction to be used in a coordinatedphraseelement",
	"Method": "void setConjunction(String conjunction){\r\n    setFeature(Feature.CONJUNCTION, conjunction);\r\n}"
}, {
	"Path": "org.apache.struts.chain.ComposableRequestProcessor.setActionContextClassName",
	"Comment": "make sure that the specified classname identfies aclass which can be found and which implements theactioncontext interface.",
	"Method": "void setActionContextClassName(String className){\r\n    if ((className != null) && (className.trim().length() > 0)) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"setActionContextClassName: requested context class: \" + className);\r\n        }\r\n        try {\r\n            Class actionContextClass = RequestUtils.applicationClass(className);\r\n            if (!ActionContext.class.isAssignableFrom(actionContextClass)) {\r\n                throw new UnavailableException(\"ActionContextClass \" + \"[\" + className + \"]\" + \" must implement ActionContext interface.\");\r\n            }\r\n            this.setActionContextClass(actionContextClass);\r\n        } catch (ClassNotFoundException e) {\r\n            throw new UnavailableException(\"ActionContextClass \" + className + \" not found.\");\r\n        }\r\n    } else {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"setActionContextClassName: no className specified\");\r\n        }\r\n        this.setActionContextClass(null);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.PreambleUtil.checkPreambleSize",
	"Comment": "checks memory for capacity to hold the preamble and returns the first 8 bytes.",
	"Method": "long checkPreambleSize(Memory mem){\r\n    final long cap = mem.getCapacity();\r\n    if (cap < 8) {\r\n        throwNotBigEnough(cap, 8);\r\n    }\r\n    final long pre0 = mem.getLong(0);\r\n    final int preLongs = (int) (pre0 & 0X3FL);\r\n    final int required = Math.max(preLongs << 3, 8);\r\n    if (cap < required) {\r\n        throwNotBigEnough(cap, required);\r\n    }\r\n    return pre0;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedMultiboxTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.getUpdatableStorageBytes",
	"Comment": "returns the number of bytes a sketch would require to store in updatable form.this uses roughly 2x the storage of the compact formgiven the values of k and n.",
	"Method": "int getUpdatableStorageBytes(int getUpdatableStorageBytes,int k,long n){\r\n    if (n == 0) {\r\n        return 8;\r\n    }\r\n    final int metaPre = DoublesSketch.MAX_PRELONGS + 2;\r\n    final int totLevels = Util.computeNumLevelsNeeded(k, n);\r\n    if (n <= k) {\r\n        final int ceil = Math.max(ceilingPowerOf2((int) n), DoublesSketch.MIN_K * 2);\r\n        return (metaPre + ceil) << 3;\r\n    }\r\n    return (metaPre + ((2 + totLevels) * k)) << 3;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.FormTag.getAction",
	"Comment": "return the action url to which this form should be submitted.",
	"Method": "String getAction(){\r\n    return (this.action);\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseHelper.addInterrogativeFrontModifiers",
	"Comment": "adds the front modifiers to the end of the clause when dealing with\tinterrogatives.",
	"Method": "void addInterrogativeFrontModifiers(PhraseElement phrase,SyntaxProcessor parent,ListElement realisedElement){\r\n    NLGElement currentElement = null;\r\n    if (phrase.hasFeature(Feature.INTERROGATIVE_TYPE)) {\r\n        for (NLGElement subject : phrase.getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS)) {\r\n            currentElement = parent.realise(subject);\r\n            if (currentElement != null) {\r\n                currentElement.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.FRONT_MODIFIER);\r\n                realisedElement.addComponent(currentElement);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.addExceptionConfig",
	"Comment": "add a new exceptionconfig instance to the setassociated with this module.",
	"Method": "void addExceptionConfig(ExceptionConfig config){\r\n    throwIfConfigured();\r\n    String key = config.getType();\r\n    if (exceptions.containsKey(key)) {\r\n        log.warn(\"Overriding ExceptionConfig of type \" + key);\r\n    }\r\n    exceptions.put(key, config);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.ImgTag.url",
	"Comment": "return the specified src url, modified as necessary with optionalrequest parameters.",
	"Method": "String url(String url){\r\n    if (url == null) {\r\n        return (url);\r\n    }\r\n    String charEncoding = \"UTF-8\";\r\n    if (useLocalEncoding) {\r\n        charEncoding = pageContext.getResponse().getCharacterEncoding();\r\n    }\r\n    StringBuffer src = new StringBuffer(url);\r\n    if ((paramId != null) && (paramName != null)) {\r\n        if (src.toString().indexOf('?') < 0) {\r\n            src.append('?');\r\n        } else {\r\n            src.append(\"&amp;\");\r\n        }\r\n        src.append(paramId);\r\n        src.append('=');\r\n        Object value = TagUtils.getInstance().lookup(pageContext, paramName, paramProperty, paramScope);\r\n        if (value != null) {\r\n            src.append(TagUtils.getInstance().encodeURL(value.toString(), charEncoding));\r\n        }\r\n    }\r\n    if ((property != null) && (name == null)) {\r\n        JspException e = new JspException(messages.getMessage(\"getter.name\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    if (name == null) {\r\n        return (src.toString());\r\n    }\r\n    Object mapObject = TagUtils.getInstance().lookup(pageContext, name, property, scope);\r\n    Map map = null;\r\n    try {\r\n        map = (Map) mapObject;\r\n    } catch (ClassCastException e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"imgTag.type\"));\r\n    }\r\n    boolean question = (src.toString().indexOf(\"?\") >= 0);\r\n    Iterator keys = map.keySet().iterator();\r\n    while (keys.hasNext()) {\r\n        String key = (String) keys.next();\r\n        Object value = map.get(key);\r\n        if (value == null) {\r\n            if (question) {\r\n                src.append(\"&amp;\");\r\n            } else {\r\n                src.append('?');\r\n                question = true;\r\n            }\r\n            src.append(key);\r\n            src.append('=');\r\n        } else if (value instanceof String[]) {\r\n            String[] values = (String[]) value;\r\n            for (int i = 0; i < values.length; i++) {\r\n                if (question) {\r\n                    src.append(\"&amp;\");\r\n                } else {\r\n                    src.append('?');\r\n                    question = true;\r\n                }\r\n                src.append(key);\r\n                src.append('=');\r\n                src.append(TagUtils.getInstance().encodeURL(values[i], charEncoding));\r\n            }\r\n        } else {\r\n            if (question) {\r\n                src.append(\"&amp;\");\r\n            } else {\r\n                src.append('?');\r\n                question = true;\r\n            }\r\n            src.append(key);\r\n            src.append('=');\r\n            src.append(TagUtils.getInstance().encodeURL(value.toString(), charEncoding));\r\n        }\r\n    }\r\n    return (src.toString());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyHelper.calculateRelativeProperty",
	"Comment": "this property, providing the property to be appended, and the parent tag to append the property to, will calculate the stepping of the property and return the qualified nested property",
	"Method": "String calculateRelativeProperty(String property,String parent){\r\n    if (parent == null) {\r\n        parent = \"\";\r\n    }\r\n    if (property == null) {\r\n        property = \"\";\r\n    }\r\n    if (\"./\".equals(property) || \"this/\".equals(property)) {\r\n        return parent;\r\n    }\r\n    String stepping;\r\n    if (property.endsWith(\"/\")) {\r\n        stepping = property;\r\n        property = \"\";\r\n    } else {\r\n        stepping = property.substring(0, property.lastIndexOf('/') + 1);\r\n        property = property.substring(property.lastIndexOf('/') + 1, property.length());\r\n    }\r\n    if (stepping.startsWith(\"/\")) {\r\n        return property;\r\n    } else {\r\n        StringTokenizer proT = new StringTokenizer(parent, \".\");\r\n        int propCount = proT.countTokens();\r\n        StringTokenizer strT = new StringTokenizer(stepping, \"/\");\r\n        int count = strT.countTokens();\r\n        if (count >= propCount) {\r\n            return property;\r\n        } else {\r\n            count = propCount - count;\r\n            StringBuffer result = new StringBuffer();\r\n            for (int i = 0; i < count; i++) {\r\n                result.append(proT.nextToken());\r\n                result.append('.');\r\n            }\r\n            result.append(property);\r\n            if (result.charAt(result.length() - 1) == '.') {\r\n                return result.substring(0, result.length() - 1);\r\n            } else {\r\n                return result.toString();\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractAuthorizeAction.isAuthorizationRequired",
	"Comment": "must authorization rules be consulted?the base implementationreturns true if the given actionconfig hasone or more roles defined.",
	"Method": "boolean isAuthorizationRequired(ActionConfig actionConfig){\r\n    String[] roles = actionConfig.getRoleNames();\r\n    return (roles != null) && (roles.length > 0);\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResourcesFactory.createFactory",
	"Comment": "create and return a messageresourcesfactory instance ofthe appropriate class, which can be used to create customizedmessageresources instances.if no such factory can becreated, return null instead.",
	"Method": "MessageResourcesFactory createFactory(){\r\n    try {\r\n        if (clazz == null) {\r\n            clazz = RequestUtils.applicationClass(factoryClass);\r\n        }\r\n        MessageResourcesFactory factory = (MessageResourcesFactory) clazz.newInstance();\r\n        return (factory);\r\n    } catch (Throwable t) {\r\n        LOG.error(\"MessageResourcesFactory.createFactory\", t);\r\n        return (null);\r\n    }\r\n}"
}, {
	"Path": "jadx.core.dex.regions.loops.LoopRegion.setPreCondition",
	"Comment": "set instructions which must be executed before condition in every loop",
	"Method": "void setPreCondition(BlockNode preCondition){\r\n    this.preCondition = preCondition;\r\n}"
}, {
	"Path": "org.apache.struts.util.RequestUtils.rationalizeMultipleFileProperty",
	"Comment": "if the given form bean can accept multiple formfile objects but the user only uploaded a single, then the property will not match the form bean type.this method performs some simple checks to try to accommodatethat situation.",
	"Method": "Object rationalizeMultipleFileProperty(Object bean,String name,Object parameterValue){\r\n    if (!(parameterValue instanceof FormFile))\r\n        return parameterValue;\r\n    FormFile formFileValue = (FormFile) parameterValue;\r\n    try {\r\n        Class propertyType = PropertyUtils.getPropertyType(bean, name);\r\n        if (propertyType.isAssignableFrom(List.class)) {\r\n            ArrayList list = new ArrayList(1);\r\n            list.add(formFileValue);\r\n            return list;\r\n        }\r\n        if (propertyType.isArray() && propertyType.getComponentType().equals(FormFile.class)) {\r\n            return new FormFile[] { formFileValue };\r\n        }\r\n    } catch (IllegalAccessException e) {\r\n        throw new ServletException(e);\r\n    } catch (InvocationTargetException e) {\r\n        throw new ServletException(e);\r\n    } catch (NoSuchMethodException e) {\r\n        throw new ServletException(e);\r\n    }\r\n    return parameterValue;\r\n}"
}, {
	"Path": "org.sonar.java.ast.parser.TreeFactory.completeMember",
	"Comment": "todo create an intermediate implementation interface for completing modifiers",
	"Method": "JavaTree completeMember(ModifiersTreeImpl modifiers,JavaTree partial){\r\n    if (partial instanceof ClassTreeImpl) {\r\n        ((ClassTreeImpl) partial).completeModifiers(modifiers);\r\n    } else if (partial instanceof VariableDeclaratorListTreeImpl) {\r\n        for (VariableTreeImpl variable : (VariableDeclaratorListTreeImpl) partial) {\r\n            variable.completeModifiers(modifiers);\r\n        }\r\n    } else if (partial instanceof MethodTreeImpl) {\r\n        ((MethodTreeImpl) partial).completeWithModifiers(modifiers);\r\n    } else {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    return partial;\r\n}"
}, {
	"Path": "org.apache.struts.upload.MultipartRequestWrapper.getParameterMap",
	"Comment": "combines the parameters stored here with those in the underlyingrequest. if paramater values in the underlying request take precedenceover those stored here.",
	"Method": "Map getParameterMap(){\r\n    Map map = new HashMap(parameters);\r\n    map.putAll(getRequest().getParameterMap());\r\n    return map;\r\n}"
}, {
	"Path": "jadx.core.dex.visitors.ExtractFieldInit.processStaticFieldAssign",
	"Comment": "remove final field in place initialization if it assign in class init method",
	"Method": "void processStaticFieldAssign(ClassNode cls,IndexInsnNode insn){\r\n    FieldInfo field = (FieldInfo) insn.getIndex();\r\n    String thisClass = cls.getClassInfo().getFullName();\r\n    if (field.getDeclClass().getFullName().equals(thisClass)) {\r\n        FieldNode fn = cls.searchField(field);\r\n        if (fn != null && fn.getAccessFlags().isFinal()) {\r\n            fn.remove(AType.FIELD_INIT);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.getStorageBytes",
	"Comment": "returns the number of bytes required to store this sketch as an array of bytes.",
	"Method": "int getStorageBytes(){\r\n    if (isEmpty()) {\r\n        return 8;\r\n    }\r\n    return (6 * 8) + (16 * getNumActiveItems());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedSizeTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.setActionMappingClass",
	"Comment": "the default class name to be used when creating action mappinginstances.",
	"Method": "void setActionMappingClass(String actionMappingClass){\r\n    this.actionMappingClass = actionMappingClass;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.setLocalLogNominalEntries",
	"Comment": "sets the log nominal entries for a concurrent local sketch. the minimum value is 4 and themaximum value is 26. be aware that sketches as large as this maximumvalue have not been thoroughly tested or characterized for performance.",
	"Method": "ConcurrentThetaBuilder setLocalLogNominalEntries(int lgNomEntries){\r\n    bLocalLgNomLongs = lgNomEntries;\r\n    if ((bLocalLgNomLongs > MAX_LG_NOM_LONGS) || (bLocalLgNomLongs < MIN_LG_NOM_LONGS)) {\r\n        throw new SketchesArgumentException(\"Log Nominal Entries must be >= 4 and <= 26: \" + lgNomEntries);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseHandlerTag.prepareKeyEvents",
	"Comment": "prepares the keyboard event handlers, appending them to the the givenstringbuffer.",
	"Method": "void prepareKeyEvents(StringBuffer handlers){\r\n    prepareAttribute(handlers, \"onkeydown\", getOnkeydown());\r\n    prepareAttribute(handlers, \"onkeyup\", getOnkeyup());\r\n    prepareAttribute(handlers, \"onkeypress\", getOnkeypress());\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.isPropagationInProgress",
	"Comment": "returns true if a propagation is in progress, otherwise false",
	"Method": "boolean isPropagationInProgress(){\r\n    return sharedPropagationInProgress_.get();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesMergeImpl.downSamplingMergeInto",
	"Comment": "also used by doublessketch, doublesunionimpl and heapdoublessketchtest",
	"Method": "void downSamplingMergeInto(DoublesSketch src,UpdateDoublesSketch tgt){\r\n    final int srcK = src.getK();\r\n    final int tgtK = tgt.getK();\r\n    final long tgtN = tgt.getN();\r\n    if ((srcK % tgtK) != 0) {\r\n        throw new SketchesArgumentException(\"source.getK() must equal target.getK() * 2^(nonnegative integer).\");\r\n    }\r\n    final int downFactor = srcK / tgtK;\r\n    checkIfPowerOf2(downFactor, \"source.getK()/target.getK() ratio\");\r\n    final int lgDownFactor = Integer.numberOfTrailingZeros(downFactor);\r\n    if (src.isEmpty()) {\r\n        return;\r\n    }\r\n    final DoublesSketchAccessor srcSketchBuf = DoublesSketchAccessor.wrap(src);\r\n    final long nFinal = tgtN + src.getN();\r\n    for (int i = 0; i < srcSketchBuf.numItems(); i++) {\r\n        tgt.update(srcSketchBuf.get(i));\r\n    }\r\n    final int spaceNeeded = DoublesUpdateImpl.getRequiredItemCapacity(tgtK, nFinal);\r\n    final int curCombBufCap = tgt.getCombinedBufferItemCapacity();\r\n    if (spaceNeeded > curCombBufCap) {\r\n        tgt.growCombinedBuffer(curCombBufCap, spaceNeeded);\r\n    }\r\n    final DoublesArrayAccessor scratch2KAcc = DoublesArrayAccessor.initialize(2 * tgtK);\r\n    final DoublesArrayAccessor downScratchKAcc = DoublesArrayAccessor.initialize(tgtK);\r\n    final DoublesSketchAccessor tgtSketchBuf = DoublesSketchAccessor.wrap(tgt, true);\r\n    long srcBitPattern = src.getBitPattern();\r\n    long newTgtBitPattern = tgt.getBitPattern();\r\n    for (int srcLvl = 0; srcBitPattern != 0L; srcLvl++, srcBitPattern >>>= 1) {\r\n        if ((srcBitPattern & 1L) > 0L) {\r\n            justZipWithStride(srcSketchBuf.setLevel(srcLvl), downScratchKAcc, tgtK, downFactor);\r\n            newTgtBitPattern = // starting level\r\n            DoublesUpdateImpl.inPlacePropagateCarry(srcLvl + lgDownFactor, downScratchKAcc, scratch2KAcc, false, tgtK, tgtSketchBuf, newTgtBitPattern);\r\n            tgt.putBitPattern(newTgtBitPattern);\r\n        }\r\n    }\r\n    if (tgt.isDirect() && (nFinal > 0)) {\r\n        final WritableMemory mem = tgt.getMemory();\r\n        mem.clearBits(FLAGS_BYTE, (byte) EMPTY_FLAG_MASK);\r\n    }\r\n    tgt.putN(nFinal);\r\n    assert (tgt.getN() / (2L * tgtK)) == newTgtBitPattern;\r\n    double srcMax = src.getMaxValue();\r\n    srcMax = Double.isNaN(srcMax) ? Double.NEGATIVE_INFINITY : srcMax;\r\n    double srcMin = src.getMinValue();\r\n    srcMin = Double.isNaN(srcMin) ? Double.POSITIVE_INFINITY : srcMin;\r\n    double tgtMax = tgt.getMaxValue();\r\n    tgtMax = Double.isNaN(tgtMax) ? Double.NEGATIVE_INFINITY : tgtMax;\r\n    double tgtMin = tgt.getMinValue();\r\n    tgtMin = Double.isNaN(tgtMin) ? Double.POSITIVE_INFINITY : tgtMin;\r\n    if (srcMax > tgtMax) {\r\n        tgt.putMaxValue(srcMax);\r\n    }\r\n    if (srcMin < tgtMin) {\r\n        tgt.putMinValue(srcMin);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testInitModuleExceptionConfigsNullFormType",
	"Comment": "test that initmoduleexceptionconfigs throws an exception when a handlerwith a null key is present.",
	"Method": "void testInitModuleExceptionConfigsNullFormType(){\r\n    ExceptionConfig handler = new ExceptionConfig();\r\n    handler.setType(\"java.lang.NullPointerException\");\r\n    moduleConfig.addExceptionConfig(handler);\r\n    try {\r\n        actionServlet.initModuleExceptionConfigs(moduleConfig);\r\n        fail(\"An exception should've been thrown here.\");\r\n    } catch (UnavailableException e) {\r\n    } catch (Exception e) {\r\n        fail(\"Unrecognized exception thrown: \" + e);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createParagraph",
	"Comment": "creates a new paragraph element and adds the given component",
	"Method": "DocumentElement createParagraph(DocumentElement createParagraph,List<DocumentElement> components,DocumentElement createParagraph,NLGElement component){\r\n    DocumentElement paragraph = new DocumentElement(DocumentCategory.PARAGRAPH, null);\r\n    if (component != null) {\r\n        paragraph.addComponent(component);\r\n    }\r\n    return paragraph;\r\n}"
}, {
	"Path": "simplenlg.server.SimpleServer.handleClient",
	"Comment": "handle the incoming client connection by constructing a realisationrequest and starting it in a thread.",
	"Method": "void handleClient(Socket socket){\r\n    if (null == socket)\r\n        return;\r\n    Thread request = new Thread(new RealisationRequest(socket));\r\n    request.setDaemon(true);\r\n    request.start();\r\n}"
}, {
	"Path": "org.apache.struts.action.Action.getResources",
	"Comment": "return the specified message resources for the current module.",
	"Method": "MessageResources getResources(HttpServletRequest request,MessageResources getResources,HttpServletRequest request,String key){\r\n    ServletContext context = getServlet().getServletContext();\r\n    ModuleConfig moduleConfig = ModuleUtils.getInstance().getModuleConfig(request, context);\r\n    return (MessageResources) context.getAttribute(key + moduleConfig.getPrefix());\r\n}"
}, {
	"Path": "jadx.core.dex.nodes.BlockNode.cleanSuccessors",
	"Comment": "return all successor which are not exception handler or followed by loop back edge",
	"Method": "List<BlockNode> cleanSuccessors(BlockNode block){\r\n    List<BlockNode> sucList = block.getSuccessors();\r\n    if (sucList.isEmpty()) {\r\n        return sucList;\r\n    }\r\n    List<BlockNode> toRemove = new LinkedList<BlockNode>();\r\n    for (BlockNode b : sucList) {\r\n        if (BlockUtils.isBlockMustBeCleared(b)) {\r\n            toRemove.add(b);\r\n        }\r\n    }\r\n    if (block.contains(AFlag.LOOP_END)) {\r\n        List<LoopInfo> loops = block.getAll(AType.LOOP);\r\n        for (LoopInfo loop : loops) {\r\n            toRemove.add(loop.getStart());\r\n        }\r\n    }\r\n    IgnoreEdgeAttr ignoreEdgeAttr = block.get(AType.IGNORE_EDGE);\r\n    if (ignoreEdgeAttr != null) {\r\n        toRemove.addAll(ignoreEdgeAttr.getBlocks());\r\n    }\r\n    if (toRemove.isEmpty()) {\r\n        return sucList;\r\n    }\r\n    List<BlockNode> result = new ArrayList<BlockNode>(sucList);\r\n    result.removeAll(toRemove);\r\n    return result;\r\n}"
}, {
	"Path": "net.csdn.modules.compress.bzip2.CBZip2OutputStream.getBlockSize",
	"Comment": "returns the blocksize parameter specified at construction time.",
	"Method": "int getBlockSize(){\r\n    return this.blockSize100k;\r\n}"
}, {
	"Path": "org.apache.struts.config.PlugInConfig.getProperties",
	"Comment": "return the properties that will be used to configure aplugin instance.",
	"Method": "Map getProperties(){\r\n    return (properties);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.Union.copyOrDownsampleHll",
	"Comment": "caller must ultimately manage oooflag, as caller has more info",
	"Method": "HllSketchImpl copyOrDownsampleHll(HllSketchImpl srcImpl,int tgtLgK){\r\n    assert srcImpl.getCurMode() == HLL;\r\n    final AbstractHllArray src = (AbstractHllArray) srcImpl;\r\n    final int srcLgK = src.getLgConfigK();\r\n    if ((srcLgK <= tgtLgK) && (src.getTgtHllType() == TgtHllType.HLL_8)) {\r\n        return src.copy();\r\n    }\r\n    final int minLgK = Math.min(srcLgK, tgtLgK);\r\n    final HllArray tgtHllArr = HllArray.newHeapHll(minLgK, TgtHllType.HLL_8);\r\n    final PairIterator srcItr = src.iterator();\r\n    while (srcItr.nextValid()) {\r\n        tgtHllArr.couponUpdate(srcItr.getPair());\r\n    }\r\n    tgtHllArr.putHipAccum(src.getHipAccum());\r\n    tgtHllArr.putOutOfOrderFlag(src.isOutOfOrderFlag());\r\n    return tgtHllArr;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.NounPhraseHelper.getHeadWordElement",
	"Comment": "retrieves the correct representation of the word from the element. this\tmethod will find the wordelement, if it exists, for the\tgiven phrase or inflected word.",
	"Method": "WordElement getHeadWordElement(NLGElement element){\r\n    WordElement head = null;\r\n    if (element instanceof WordElement)\r\n        head = (WordElement) element;\r\n    else if (element instanceof InflectedWordElement) {\r\n        head = (WordElement) element.getFeature(InternalFeature.BASE_WORD);\r\n    } else if (element instanceof PhraseElement) {\r\n        head = getHeadWordElement(((PhraseElement) element).getHead());\r\n    }\r\n    return head;\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionForm.testGetMappedValues",
	"Comment": "positive and negative tests on getmappedproperty valid arguments.",
	"Method": "void testGetMappedValues(){\r\n    Object value = null;\r\n    value = dynaForm.get(\"mappedProperty\", \"First Key\");\r\n    assertEquals(\"Can find first value\", \"First Value\", value);\r\n    value = dynaForm.get(\"mappedProperty\", \"Second Key\");\r\n    assertEquals(\"Can find second value\", \"Second Value\", value);\r\n    value = dynaForm.get(\"mappedProperty\", \"Third Key\");\r\n    assertNull(\"Can not find third value\", value);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedTextTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSetOperationBuilder.buildIntersection",
	"Comment": "creates an instance of arrayofdoublesintersection based on the current configuration of the builder.the new instance is allocated on the heap if the memory is not provided.the number of nominal entries is not relevant to this, so it is ignored.",
	"Method": "ArrayOfDoublesIntersection buildIntersection(ArrayOfDoublesIntersection buildIntersection,WritableMemory dstMem){\r\n    return new DirectArrayOfDoublesIntersection(numValues_, seed_, dstMem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsUnion.toString",
	"Comment": "returns summary information about the backing sketch. used for debugging.",
	"Method": "String toString(String toString,boolean sketchSummary,boolean dataDetail){\r\n    final StringBuilder sb = new StringBuilder();\r\n    final String thisSimpleName = this.getClass().getSimpleName();\r\n    final int maxK = this.getMaxK();\r\n    final String kStr = String.format(\"%,d\", maxK);\r\n    sb.append(Util.LS).append(\"### Quantiles \").append(thisSimpleName).append(LS);\r\n    sb.append(\"   maxK                         : \").append(kStr);\r\n    if (gadget_ == null) {\r\n        sb.append(ItemsSketch.getInstance(maxK_, comparator_).toString());\r\n        return sb.toString();\r\n    }\r\n    sb.append(gadget_.toString(sketchSummary, dataDetail));\r\n    return sb.toString();\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseHelper.checkSubjectNumberPerson",
	"Comment": "checks the subjects of the phrase to determine if there is more than one\tsubject. this ensures that the verb phrase is correctly set. also set\tperson correctly",
	"Method": "void checkSubjectNumberPerson(PhraseElement phrase,NLGElement verbElement){\r\n    NLGElement currentElement = null;\r\n    List<NLGElement> subjects = phrase.getFeatureAsElementList(InternalFeature.SUBJECTS);\r\n    boolean pluralSubjects = false;\r\n    Person person = null;\r\n    if (subjects != null) {\r\n        switch(subjects.size()) {\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                currentElement = subjects.get(0);\r\n                if (currentElement instanceof CoordinatedPhraseElement && ((CoordinatedPhraseElement) currentElement).checkIfPlural())\r\n                    pluralSubjects = true;\r\n                else if ((currentElement.getFeature(Feature.NUMBER) == NumberAgreement.PLURAL) && !(currentElement instanceof SPhraseSpec))\r\n                    pluralSubjects = true;\r\n                else if (currentElement.isA(PhraseCategory.NOUN_PHRASE)) {\r\n                    NLGElement currentHead = currentElement.getFeatureAsElement(InternalFeature.HEAD);\r\n                    person = (Person) currentElement.getFeature(Feature.PERSON);\r\n                    if (currentHead == null) {\r\n                        pluralSubjects = false;\r\n                    } else if ((currentHead.getFeature(Feature.NUMBER) == NumberAgreement.PLURAL))\r\n                        pluralSubjects = true;\r\n                    else if (currentHead instanceof ListElement) {\r\n                        pluralSubjects = true;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                pluralSubjects = true;\r\n                break;\r\n        }\r\n    }\r\n    if (verbElement != null) {\r\n        verbElement.setFeature(Feature.NUMBER, pluralSubjects ? NumberAgreement.PLURAL : phrase.getFeature(Feature.NUMBER));\r\n        if (person != null)\r\n            verbElement.setFeature(Feature.PERSON, person);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.createActionForm",
	"Comment": "create and return an actionform instance appropriate tothe information in this formbeanconfig.although this method is not formally deprecated yet, where possible,the form which accepts an actioncontext as an argument ispreferred, to help sever direct dependencies on the servlet api.asthe actioncontext becomes more familiar in struts, this method willalmost certainly be deprecated.",
	"Method": "ActionForm createActionForm(ActionServlet servlet,ActionForm createActionForm,ActionContext context){\r\n    ActionServlet actionServlet = null;\r\n    if (context instanceof ServletActionContext) {\r\n        ServletActionContext saContext = (ServletActionContext) context;\r\n        actionServlet = saContext.getActionServlet();\r\n    }\r\n    return createActionForm(actionServlet);\r\n}"
}, {
	"Path": "org.sonar.java.UCFGJavaVisitor.buildFieldReadAccessInvocation",
	"Comment": "field access can be a read or a write access, depending on the context.this method should be called for field read access.",
	"Method": "void buildFieldReadAccessInvocation(BlockBuilder blockBuilder,IdentifierGenerator idGenerator,Tree tree){\r\n    buildFieldAccess(idGenerator, tree).ifPresent(fieldAccess -> {\r\n        Expression.Variable aux = variableWithId(idGenerator.newId());\r\n        blockBuilder.assignTo(aux, call(\"__id\").withArgs(fieldAccess), location(tree));\r\n        idGenerator.varForExpression(tree, aux.id());\r\n    });\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedLessEqualTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractExceptionHandler.execute",
	"Comment": "invoke the appropriate action for this request, andcache the returned actionforward.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    Exception exception = actionCtx.getException();\r\n    if (exception == null) {\r\n        LOG.warn(\"No Exception found in ActionContext\");\r\n        return (true);\r\n    }\r\n    ExceptionConfig exceptionConfig = null;\r\n    ActionConfig actionConfig = actionCtx.getActionConfig();\r\n    ModuleConfig moduleConfig = actionCtx.getModuleConfig();\r\n    if (actionConfig != null) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"See if actionConfig \" + actionConfig + \" has an exceptionConfig for \" + exception.getClass().getName());\r\n        }\r\n        exceptionConfig = actionConfig.findException(exception.getClass());\r\n    } else if (moduleConfig != null) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"No action yet, see if moduleConfig \" + moduleConfig + \" has an exceptionConfig \" + exception.getClass().getName());\r\n        }\r\n        exceptionConfig = moduleConfig.findException(exception.getClass());\r\n    }\r\n    if (exceptionConfig == null) {\r\n        LOG.warn(\"Unhandled exception\", exception);\r\n        throw exception;\r\n    }\r\n    ForwardConfig forwardConfig = handle(actionCtx, exception, exceptionConfig, actionConfig, moduleConfig);\r\n    if (forwardConfig != null) {\r\n        actionCtx.setForwardConfig(forwardConfig);\r\n        return (false);\r\n    } else {\r\n        return (true);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createListItem",
	"Comment": "creates a list item for adding to a list element. the list item has the\tgiven component.",
	"Method": "DocumentElement createListItem(DocumentElement createListItem,NLGElement component){\r\n    DocumentElement listItem = new DocumentElement(DocumentCategory.LIST_ITEM, null);\r\n    listItem.addComponent(component);\r\n    return listItem;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketchAccessor.countValidLevelsBelow",
	"Comment": "counts number of full levels in the sketch below tgtlvl. useful for computing the leveloffset in a compact sketch.",
	"Method": "int countValidLevelsBelow(int tgtLvl){\r\n    int count = 0;\r\n    long bitPattern = ds_.getBitPattern();\r\n    for (int i = 0; (i < tgtLvl) && (bitPattern > 0); ++i, bitPattern >>>= 1) {\r\n        if ((bitPattern & 1L) > 0L) {\r\n            ++count;\r\n        }\r\n    }\r\n    return count;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedLinkTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    origName = super.getName();\r\n    origProperty = super.getProperty();\r\n    origParamProperty = super.getParamProperty();\r\n    boolean doProperty = ((origProperty != null) && (origProperty.length() > 0));\r\n    boolean doParam = ((origParamProperty != null) && (origParamProperty.length() > 0));\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    boolean hasName = ((getName() != null) && (getName().trim().length() > 0));\r\n    String currentName;\r\n    if (hasName) {\r\n        currentName = getName();\r\n    } else {\r\n        currentName = NestedPropertyHelper.getCurrentName(request, this);\r\n    }\r\n    super.setName(currentName);\r\n    if (doProperty && !hasName) {\r\n        super.setProperty(NestedPropertyHelper.getAdjustedProperty(request, origProperty));\r\n    }\r\n    if (doParam) {\r\n        super.setName(null);\r\n        super.setParamName(currentName);\r\n        super.setParamProperty(NestedPropertyHelper.getAdjustedProperty(request, origParamProperty));\r\n    }\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.getKFromEpsilon",
	"Comment": "gets the approximate value of k to use given epsilon, the normalized rank error.",
	"Method": "int getKFromEpsilon(double epsilon,boolean pmf){\r\n    return Util.getKFromEpsilon(epsilon, pmf);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionFormClass.testConfigInitialValues",
	"Comment": "check the configured formpropertyconfig element initial values",
	"Method": "void testConfigInitialValues(){\r\n    assertEquals(\"booleanProperty value\", Boolean.TRUE, beanConfig.findFormPropertyConfig(\"booleanProperty\").initial());\r\n    assertEquals(\"booleanSecond value\", Boolean.TRUE, beanConfig.findFormPropertyConfig(\"booleanSecond\").initial());\r\n    assertEquals(\"doubleProperty value\", new Double(321.0), beanConfig.findFormPropertyConfig(\"doubleProperty\").initial());\r\n    assertEquals(\"floatProperty value\", new Float((float) 123.0), beanConfig.findFormPropertyConfig(\"floatProperty\").initial());\r\n    assertEquals(\"intProperty value\", new Integer(123), beanConfig.findFormPropertyConfig(\"intProperty\").initial());\r\n    assertEquals(\"longProperty value\", new Long(321), beanConfig.findFormPropertyConfig(\"longProperty\").initial());\r\n    assertEquals(\"shortProperty value\", new Short((short) 987), beanConfig.findFormPropertyConfig(\"shortProperty\").initial());\r\n    assertEquals(\"stringProperty value\", \"This is a string\", beanConfig.findFormPropertyConfig(\"stringProperty\").initial());\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.isCopular",
	"Comment": "checks to see if the base form of the word is copular, i.e. be.",
	"Method": "boolean isCopular(NLGElement element){\r\n    boolean copular = false;\r\n    if (element instanceof InflectedWordElement) {\r\n        copular = // $NON-NLS-1$\r\n        \"be\".equalsIgnoreCase(((InflectedWordElement) element).getBaseForm());\r\n    } else if (element instanceof WordElement) {\r\n        copular = // $NON-NLS-1$\r\n        \"be\".equalsIgnoreCase(((WordElement) element).getBaseForm());\r\n    } else if (element instanceof PhraseElement) {\r\n        NLGElement head = element instanceof SPhraseSpec ? ((SPhraseSpec) element).getVerb() : ((PhraseElement) element).getHead();\r\n        if (head != null) {\r\n            copular = (head instanceof WordElement && \"be\".equals(((WordElement) head).getBaseForm()));\r\n        }\r\n    }\r\n    return copular;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotPresentTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExecuteForwardCommand.getCommand",
	"Comment": "return the command specified by the command andcatalog properties of the forwardconfigproperty of the given actioncontext.ifforwardconfig is null, return null.",
	"Method": "Command getCommand(ActionContext context){\r\n    ForwardConfig forwardConfig = context.getForwardConfig();\r\n    if (forwardConfig == null) {\r\n        return null;\r\n    }\r\n    return getCommand(forwardConfig.getCommand(), forwardConfig.getCatalog());\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionFormClass.testConfigProperties",
	"Comment": "check the configured formpropertyconfig element properties",
	"Method": "void testConfigProperties(){\r\n    for (int i = 0; i < dynaProperties.length; i++) {\r\n        FormPropertyConfig dynaProperty = beanConfig.findFormPropertyConfig(dynaProperties[i].getName());\r\n        assertNotNull(\"Found dynaProperty \" + dynaProperties[i].getName(), dynaProperty);\r\n        assertEquals(\"dynaProperty name for \" + dynaProperties[i].getName(), dynaProperties[i].getName(), dynaProperty.getName());\r\n        assertEquals(\"dynaProperty type for \" + dynaProperties[i].getName(), dynaProperties[i].getType(), dynaProperty.getType());\r\n        assertEquals(\"dynaProperty initial for \" + dynaProperties[i].getName(), dynaProperties[i].getInitial(), dynaProperty.getInitial());\r\n    }\r\n}"
}, {
	"Path": "simplenlg.syntax.english.CoordinatedPhraseHelper.setChildFeatures",
	"Comment": "sets the common features from the phrase to the child element.",
	"Method": "void setChildFeatures(CoordinatedPhraseElement phrase,NLGElement child){\r\n    if (phrase.hasFeature(Feature.PROGRESSIVE)) {\r\n        child.setFeature(Feature.PROGRESSIVE, phrase.getFeature(Feature.PROGRESSIVE));\r\n    }\r\n    if (phrase.hasFeature(Feature.PERFECT)) {\r\n        child.setFeature(Feature.PERFECT, phrase.getFeature(Feature.PERFECT));\r\n    }\r\n    if (phrase.hasFeature(InternalFeature.SPECIFIER)) {\r\n        child.setFeature(InternalFeature.SPECIFIER, phrase.getFeature(InternalFeature.SPECIFIER));\r\n    }\r\n    if (phrase.hasFeature(LexicalFeature.GENDER)) {\r\n        child.setFeature(LexicalFeature.GENDER, phrase.getFeature(LexicalFeature.GENDER));\r\n    }\r\n    if (phrase.hasFeature(Feature.NUMBER)) {\r\n        child.setFeature(Feature.NUMBER, phrase.getFeature(Feature.NUMBER));\r\n    }\r\n    if (phrase.hasFeature(Feature.TENSE)) {\r\n        child.setFeature(Feature.TENSE, phrase.getFeature(Feature.TENSE));\r\n    }\r\n    if (phrase.hasFeature(Feature.PERSON)) {\r\n        child.setFeature(Feature.PERSON, phrase.getFeature(Feature.PERSON));\r\n    }\r\n    if (phrase.hasFeature(Feature.NEGATED)) {\r\n        child.setFeature(Feature.NEGATED, phrase.getFeature(Feature.NEGATED));\r\n    }\r\n    if (phrase.hasFeature(Feature.MODAL)) {\r\n        child.setFeature(Feature.MODAL, phrase.getFeature(Feature.MODAL));\r\n    }\r\n    if (phrase.hasFeature(InternalFeature.DISCOURSE_FUNCTION)) {\r\n        child.setFeature(InternalFeature.DISCOURSE_FUNCTION, phrase.getFeature(InternalFeature.DISCOURSE_FUNCTION));\r\n    }\r\n    if (phrase.hasFeature(Feature.FORM)) {\r\n        child.setFeature(Feature.FORM, phrase.getFeature(Feature.FORM));\r\n    }\r\n    if (phrase.hasFeature(InternalFeature.CLAUSE_STATUS)) {\r\n        child.setFeature(InternalFeature.CLAUSE_STATUS, phrase.getFeature(InternalFeature.CLAUSE_STATUS));\r\n    }\r\n    if (phrase.hasFeature(Feature.INTERROGATIVE_TYPE)) {\r\n        child.setFeature(InternalFeature.IGNORE_MODAL, true);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.getNumSamples",
	"Comment": "returns the current number of items in the sketch, which may be smaller than thesketch capacity.",
	"Method": "int getNumSamples(){\r\n    return Math.min(k_, h_ + r_);\r\n}"
}, {
	"Path": "simplenlg.syntax.english.FeatureTest.testComplementiserPassivePerfectFeatures_PastTense",
	"Comment": "tests the use of the complementiser, passive, perfect features in past tense.",
	"Method": "void testComplementiserPassivePerfectFeatures_PastTense(){\r\n    setUp();\r\n    this.realiser.setLexicon(this.lexicon);\r\n    PhraseElement inner = phraseFactory.createClause(\"I\", \"play\", \"poker\");\r\n    inner.setFeature(Feature.TENSE, Tense.PAST);\r\n    inner.setFeature(Feature.COMPLEMENTISER, \"where\");\r\n    PhraseElement house = phraseFactory.createNounPhrase(\"the\", \"house\");\r\n    house.addComplement(inner);\r\n    SPhraseSpec outer = phraseFactory.createClause(null, \"abandon\", house);\r\n    outer.addPostModifier(\"since 1986\");\r\n    outer.setFeature(Feature.PASSIVE, true);\r\n    outer.setFeature(Feature.PERFECT, true);\r\n    DocumentElement sentence = docFactory.createSentence(outer);\r\n    NLGElement realised = realiser.realise(sentence);\r\n    Assert.assertEquals(\"The house where I played poker has been abandoned since 1986.\", realised.getRealisation());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedMessageTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapThetaBuffer.hashUpdate",
	"Comment": "updates buffer with given hash value.triggers propagation to shared sketch if buffer is full.",
	"Method": "UpdateReturnState hashUpdate(long hash){\r\n    HashOperations.checkHashCorruption(hash);\r\n    if (cacheLimit == 0) {\r\n        final long thetaLong = getThetaLong();\r\n        if (HashOperations.continueCondition(thetaLong, hash)) {\r\n            return RejectedOverTheta;\r\n        }\r\n        propagateToSharedSketch(hash);\r\n        return InsertedCountIncremented;\r\n    }\r\n    final UpdateReturnState state = super.hashUpdate(hash);\r\n    if (isOutOfSpace(getRetainedEntries() + 1)) {\r\n        propagateToSharedSketch();\r\n    }\r\n    return state;\r\n}"
}, {
	"Path": "actions.FetchingMessageHistory.fetchTenLastMessagesOfGivenDateFromChannelHistory",
	"Comment": "this method how to get the 10 last message of a given date from the message history of a given channel",
	"Method": "void fetchTenLastMessagesOfGivenDateFromChannelHistory(SlackSession session,SlackChannel slackChannel,LocalDate date){\r\n    ChannelHistoryModule channelHistoryModule = ChannelHistoryModuleFactory.createChannelHistoryModule(session);\r\n    List<SlackMessagePosted> messages = channelHistoryModule.fetchHistoryOfChannel(slackChannel.getId(), date, 10);\r\n}"
}, {
	"Path": "com.yahoo.sketches.BoundsOnRatiosInSampledSets.getLowerBoundForBoverA",
	"Comment": "return the approximate lower bound based on a 95% confidence interval",
	"Method": "double getLowerBoundForBoverA(long a,long b,double f){\r\n    checkInputs(a, b, f);\r\n    if (a == 0) {\r\n        return 0.0;\r\n    }\r\n    if (f == 1.0) {\r\n        return (double) b / a;\r\n    }\r\n    return approximateLowerBoundOnP(a, b, NUM_STD_DEVS * hackyAdjuster(f));\r\n}"
}, {
	"Path": "simplenlg.xmlrealiser.UnWrapper.getNLGSpec",
	"Comment": "create wrapper objects from xml for a request to realise, or the xml for\ta recording. both are elements of nlgspec.",
	"Method": "simplenlg.xmlrealiser.wrapper.NLGSpec getNLGSpec(Reader xmlReader){\r\n    simplenlg.xmlrealiser.wrapper.NLGSpec wt = null;\r\n    try {\r\n        JAXBContext jc = JAXBContext.newInstance(simplenlg.xmlrealiser.wrapper.NLGSpec.class);\r\n        Unmarshaller u = jc.createUnmarshaller();\r\n        Object obj = u.unmarshal(xmlReader);\r\n        if (obj instanceof simplenlg.xmlrealiser.wrapper.NLGSpec) {\r\n            wt = (simplenlg.xmlrealiser.wrapper.NLGSpec) obj;\r\n        }\r\n    } catch (Throwable e) {\r\n        throw new XMLRealiserException(\"XML unmarshal error\", e);\r\n    }\r\n    return wt;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.generic.CopyFormToContext.execute",
	"Comment": "look up an actionform instance based on the configured properties ofthis command and copy it into the context.after thiscommand successfully executes, an actionform instance will exist in thespecified scope and will be available, for example for backing fieldsin an html form.it will also be in the actioncontextavailable for another command to do prepopulation of values or otherpreparation.",
	"Method": "boolean execute(ActionContext actionContext){\r\n    ActionForm form = findOrCreateForm(actionContext);\r\n    if (isEmpty(getToKey())) {\r\n        throw new IllegalStateException(\"Property 'toKey' must be defined.\");\r\n    }\r\n    actionContext.put(getToKey(), form);\r\n    return false;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.getVolatileTheta",
	"Comment": "returns the value of the volatile theta manged by the shared sketch",
	"Method": "long getVolatileTheta(){\r\n    return volatileThetaLong_;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.ConditionalTagBase.doStartTag",
	"Comment": "perform the test required for this particular tag, and either evaluateor skip the body of this tag.",
	"Method": "int doStartTag(){\r\n    if (condition()) {\r\n        return (EVAL_BODY_INCLUDE);\r\n    } else {\r\n        return (SKIP_BODY);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSamples.weights",
	"Comment": "returns a single weight from the samples contained in the sketch. does not perform boundschecking on the input. if this is the first getter call, copies data arrays from the sketch.",
	"Method": "double[] weights(double weights,int i){\r\n    loadArrays();\r\n    return (sampleLists == null ? Double.NaN : sampleLists.weights[i]);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedErrorsTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.MessagesTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String type = \"java.lang.String\";\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), type, true, VariableInfo.NESTED) };\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.getNormalizedRankError",
	"Comment": "gets the approximate rank error of this sketch normalized as a fraction between zero and one.",
	"Method": "double getNormalizedRankError(double getNormalizedRankError,boolean pmf,double getNormalizedRankError,int k,double getNormalizedRankError,int k,boolean pmf){\r\n    return Util.getNormalizedRankError(k, pmf);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.definition.ReloadableDefinitionsFactory.createFactoryFromClassname",
	"Comment": "create definition factory from provided classname. if a factory class name is provided, a factory of this class is created. otherwise, a default factory is created. factory must have a constructor taking servletcontext and map as parameter.",
	"Method": "ComponentDefinitionsFactory createFactoryFromClassname(ServletContext servletContext,Map properties,String classname){\r\n    if (classname == null) {\r\n        return createFactory(servletContext, properties);\r\n    }\r\n    try {\r\n        Class factoryClass = RequestUtils.applicationClass(classname);\r\n        ComponentDefinitionsFactory factory = (ComponentDefinitionsFactory) factoryClass.newInstance();\r\n        factory.initFactory(servletContext, properties);\r\n        return factory;\r\n    } catch (ClassCastException ex) {\r\n        throw new DefinitionsFactoryException(\"Error - createDefinitionsFactory : Factory class '\" + classname + \" must implements 'ComponentDefinitionsFactory'.\", ex);\r\n    } catch (ClassNotFoundException ex) {\r\n        throw new DefinitionsFactoryException(\"Error - createDefinitionsFactory : Bad class name '\" + classname + \"'.\", ex);\r\n    } catch (InstantiationException ex) {\r\n        throw new DefinitionsFactoryException(ex);\r\n    } catch (IllegalAccessException ex) {\r\n        throw new DefinitionsFactoryException(ex);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.UrlController.perform",
	"Comment": "method associated to a tile and called immediately before the tileis included.this implementation calls an action.no servlet is set by this method.",
	"Method": "void perform(ComponentContext tileContext,HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){\r\n    RequestDispatcher rd = servletContext.getRequestDispatcher(url);\r\n    if (rd == null) {\r\n        throw new ServletException(\"Controller can't find url '\" + url + \"'.\");\r\n    }\r\n    rd.include(request, response);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.hasFeature",
	"Comment": "checks the feature map to see if the named feature is present in the map.",
	"Method": "boolean hasFeature(String featureName){\r\n    return featureName != null ? this.features.containsKey(featureName) : false;\r\n}"
}, {
	"Path": "org.sonar.java.resolve.Symbols.enterOperators",
	"Comment": "registers operators as methods, so that they can be found as an usual methods.",
	"Method": "void enterOperators(){\r\n    for (String op : new String[] { \"+\", \"-\", \"*\", \"/\", \"%\" }) {\r\n        for (JavaType type : Arrays.asList(doubleType, floatType, longType, intType)) {\r\n            enterBinop(op, type, type, type);\r\n        }\r\n    }\r\n    for (String op : new String[] { \"&\", \"|\", \"^\" }) {\r\n        for (JavaType type : Arrays.asList(booleanType, longType, intType)) {\r\n            enterBinop(op, type, type, type);\r\n        }\r\n    }\r\n    for (String op : new String[] { \"<<\", \">>\", \">>>\" }) {\r\n        enterBinop(op, longType, longType, longType);\r\n        enterBinop(op, intType, longType, intType);\r\n        enterBinop(op, longType, intType, longType);\r\n        enterBinop(op, intType, intType, intType);\r\n    }\r\n    for (String op : new String[] { \"<\", \">\", \">=\", \"<=\" }) {\r\n        for (JavaType type : Arrays.asList(doubleType, floatType, longType, intType)) {\r\n            enterBinop(op, type, type, booleanType);\r\n        }\r\n    }\r\n    for (String op : new String[] { \"==\", \"!=\" }) {\r\n        for (JavaType type : Arrays.asList(objectType, booleanType, doubleType, floatType, longType, intType)) {\r\n            enterBinop(op, type, type, booleanType);\r\n        }\r\n    }\r\n    enterBinop(\"&&\", booleanType, booleanType, booleanType);\r\n    enterBinop(\"||\", booleanType, booleanType, booleanType);\r\n    for (JavaType type : Arrays.asList(nullType, objectType, booleanType, doubleType, floatType, longType, intType)) {\r\n        enterBinop(\"+\", stringType, type, stringType);\r\n        enterBinop(\"+\", type, stringType, stringType);\r\n    }\r\n    enterBinop(\"+\", stringType, stringType, stringType);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hllmap.UniqueCountMap.update",
	"Comment": "updates the map with a given key and identifier and returns the estimate of the number ofunique identifiers encountered so far for the given key.",
	"Method": "double update(byte[] key,byte[] identifier){\r\n    if (key == null) {\r\n        return Double.NaN;\r\n    }\r\n    checkMethodKeySize(key);\r\n    if (identifier == null) {\r\n        return getEstimate(key);\r\n    }\r\n    final short coupon = (short) Map.coupon16(identifier);\r\n    final int baseMapIndex = maps_[0].findOrInsertKey(key);\r\n    final double baseMapEstimate = maps_[0].update(baseMapIndex, coupon);\r\n    if (baseMapEstimate > 0) {\r\n        return baseMapEstimate;\r\n    }\r\n    final int level = -(int) baseMapEstimate;\r\n    if (level == 0) {\r\n        return promote(key, coupon, maps_[0], baseMapIndex, level, baseMapIndex, 0);\r\n    }\r\n    final Map map = maps_[level];\r\n    final int index = map.findOrInsertKey(key);\r\n    final double estimate = map.update(index, coupon);\r\n    if (estimate > 0) {\r\n        return estimate;\r\n    }\r\n    return promote(key, coupon, map, index, level, baseMapIndex, -estimate);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedDefineTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedErrorsTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.sonar.java.cfg.LiveVariables.analyzeWithFields",
	"Comment": "returns livevariables object with information concerning local variables, parameters and fields",
	"Method": "LiveVariables analyzeWithFields(CFG cfg){\r\n    return analyze(cfg, true);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.removeMessageResourcesConfig",
	"Comment": "remove the specified message resources configuration instance.",
	"Method": "void removeMessageResourcesConfig(MessageResourcesConfig config){\r\n    throwIfConfigured();\r\n    messageResources.remove(config.getKey());\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.Union.update",
	"Comment": "updates the internal set by adding entries from the given sketch",
	"Method": "void update(Sketch<S> sketchIn){\r\n    if (sketchIn == null || sketchIn.isEmpty()) {\r\n        return;\r\n    }\r\n    if (sketchIn.theta_ < theta_) {\r\n        theta_ = sketchIn.theta_;\r\n    }\r\n    final SketchIterator<S> it = sketchIn.iterator();\r\n    while (it.next()) {\r\n        sketch_.merge(it.getKey(), it.getSummary(), summarySetOps_);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.heapify",
	"Comment": "returns a sketch instance of this class from the given srcmem,which must be a memory representation of this sketch class.",
	"Method": "ReservoirItemsSketch<T> heapify(Memory srcMem,ArrayOfItemsSerDe<T> serDe){\r\n    Family.RESERVOIR.checkFamilyID(srcMem.getByte(FAMILY_BYTE));\r\n    final int numPreLongs = extractPreLongs(srcMem);\r\n    final ResizeFactor rf = ResizeFactor.getRF(extractResizeFactor(srcMem));\r\n    final int serVer = extractSerVer(srcMem);\r\n    final boolean isEmpty = (extractFlags(srcMem) & EMPTY_FLAG_MASK) != 0;\r\n    final long itemsSeen = (isEmpty ? 0 : extractN(srcMem));\r\n    int k = extractK(srcMem);\r\n    final boolean preLongsEqMin = (numPreLongs == Family.RESERVOIR.getMinPreLongs());\r\n    final boolean preLongsEqMax = (numPreLongs == Family.RESERVOIR.getMaxPreLongs());\r\n    if (!preLongsEqMin & !preLongsEqMax) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Non-empty sketch with only \" + Family.RESERVOIR.getMinPreLongs() + \" preLong(s)\");\r\n    }\r\n    if (serVer != SER_VER) {\r\n        if (serVer == 1) {\r\n            final short encK = extractEncodedReservoirSize(srcMem);\r\n            k = ReservoirSize.decodeValue(encK);\r\n        } else {\r\n            throw new SketchesArgumentException(\"Possible Corruption: Ser Ver must be \" + SER_VER + \": \" + serVer);\r\n        }\r\n    }\r\n    if (isEmpty) {\r\n        return new ReservoirItemsSketch(k, rf);\r\n    }\r\n    final int preLongBytes = numPreLongs << 3;\r\n    int allocatedItems = k;\r\n    if (itemsSeen < k) {\r\n        final int ceilingLgK = Util.toLog2(Util.ceilingPowerOf2(k), \"heapify\");\r\n        final int minLgSize = Util.toLog2(Util.ceilingPowerOf2((int) itemsSeen), \"heapify\");\r\n        final int initialLgSize = SamplingUtil.startingSubMultiple(ceilingLgK, rf.lg(), Math.max(minLgSize, MIN_LG_ARR_ITEMS));\r\n        allocatedItems = SamplingUtil.getAdjustedSize(k, 1 << initialLgSize);\r\n    }\r\n    final int itemsToRead = (int) Math.min(k, itemsSeen);\r\n    final T[] data = serDe.deserializeFromMemory(srcMem.region(preLongBytes, srcMem.getCapacity() - preLongBytes), itemsToRead);\r\n    final ArrayList<T> dataList = new ArrayList(Arrays.asList(data));\r\n    final ReservoirItemsSketch<T> ris = new ReservoirItemsSketch(dataList, itemsSeen, rf, k);\r\n    ris.data_.ensureCapacity(allocatedItems);\r\n    ris.currItemsAlloc_ = allocatedItems;\r\n    return ris;\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.setRestricted",
	"Comment": "set whether a mutabledynaclass is currently restricted. ifso, no changes to the existing registration of property names, datatypes, readability, or writeability are allowed.",
	"Method": "void setRestricted(boolean restricted){\r\n    this.restricted = restricted;\r\n}"
}, {
	"Path": "jadx.core.dex.nodes.MethodNode.isArgsOverload",
	"Comment": "return true if exists method with same name and arguments count",
	"Method": "boolean isArgsOverload(){\r\n    int argsCount = mthInfo.getArgumentsTypes().size();\r\n    if (argsCount == 0) {\r\n        return false;\r\n    }\r\n    String name = getName();\r\n    for (MethodNode method : parentClass.getMethods()) {\r\n        MethodInfo otherMthInfo = method.mthInfo;\r\n        if (this != method && otherMthInfo.getArgumentsTypes().size() == argsCount && otherMthInfo.getName().equals(name)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.checkCircularInheritance",
	"Comment": "traces the hierarchy of this object to check if any of the ancestorsis extending this instance.",
	"Method": "boolean checkCircularInheritance(ModuleConfig moduleConfig){\r\n    String ancestorPath = getExtends();\r\n    while (ancestorPath != null) {\r\n        if (getPath().equals(ancestorPath)) {\r\n            return true;\r\n        }\r\n        ActionConfig ancestor = moduleConfig.findActionConfig(ancestorPath);\r\n        if (ancestor != null) {\r\n            ancestorPath = ancestor.getExtends();\r\n        } else {\r\n            ancestorPath = null;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.HeapArrayOfDoublesUnion.heapifyUnion",
	"Comment": "this is to create an instance given a serialized form and a custom seed",
	"Method": "ArrayOfDoublesUnion heapifyUnion(Memory mem,long seed){\r\n    final SerializerDeserializer.SketchType type = SerializerDeserializer.getSketchType(mem);\r\n    if (type == SerializerDeserializer.SketchType.ArrayOfDoublesQuickSelectSketch) {\r\n        final ArrayOfDoublesQuickSelectSketch sketch = new HeapArrayOfDoublesQuickSelectSketch(mem, seed);\r\n        return new HeapArrayOfDoublesUnion(sketch);\r\n    }\r\n    final byte version = mem.getByte(SERIAL_VERSION_BYTE);\r\n    if (version != serialVersionUID) {\r\n        throw new SketchesArgumentException(\"Serial version mismatch. Expected: \" + serialVersionUID + \", actual: \" + version);\r\n    }\r\n    SerializerDeserializer.validateFamily(mem.getByte(FAMILY_ID_BYTE), mem.getByte(PREAMBLE_LONGS_BYTE));\r\n    SerializerDeserializer.validateType(mem.getByte(SKETCH_TYPE_BYTE), SerializerDeserializer.SketchType.ArrayOfDoublesUnion);\r\n    final long unionTheta = mem.getLong(THETA_LONG);\r\n    final Memory sketchMem = mem.region(PREAMBLE_SIZE_BYTES, mem.getCapacity() - PREAMBLE_SIZE_BYTES);\r\n    final ArrayOfDoublesQuickSelectSketch sketch = new HeapArrayOfDoublesQuickSelectSketch(sketchMem, seed);\r\n    final ArrayOfDoublesUnion union = new HeapArrayOfDoublesUnion(sketch);\r\n    union.theta_ = unionTheta;\r\n    return union;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.MatchTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(boolean condition,boolean desired){\r\n    String variable = null;\r\n    if (cookie != null) {\r\n        Cookie[] cookies = ((HttpServletRequest) pageContext.getRequest()).getCookies();\r\n        if (cookies == null) {\r\n            cookies = new Cookie[0];\r\n        }\r\n        for (int i = 0; i < cookies.length; i++) {\r\n            if (cookie.equals(cookies[i].getName())) {\r\n                variable = cookies[i].getValue();\r\n                break;\r\n            }\r\n        }\r\n    } else if (header != null) {\r\n        variable = ((HttpServletRequest) pageContext.getRequest()).getHeader(header);\r\n    } else if (name != null) {\r\n        Object value = TagUtils.getInstance().lookup(pageContext, name, property, scope);\r\n        if (value != null) {\r\n            variable = value.toString();\r\n        }\r\n    } else if (parameter != null) {\r\n        variable = pageContext.getRequest().getParameter(parameter);\r\n    } else {\r\n        JspException e = new JspException(messages.getMessage(\"logic.selector\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    if (variable == null) {\r\n        JspException e = new JspException(messages.getMessage(\"logic.variable\", value));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    boolean matched = false;\r\n    if (location == null) {\r\n        matched = (variable.indexOf(value) >= 0);\r\n    } else if (location.equals(\"start\")) {\r\n        matched = variable.startsWith(value);\r\n    } else if (location.equals(\"end\")) {\r\n        matched = variable.endsWith(value);\r\n    } else {\r\n        JspException e = new JspException(messages.getMessage(\"logic.location\", location));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    return (matched == desired);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionRedirect.assertHasParameter",
	"Comment": "assert that the given parameters contains an entry forparamvalue under the paramname key.",
	"Method": "void assertHasParameter(Map parameters,String paramName,String paramValue){\r\n    Object value = parameters.get(paramName);\r\n    if (value == null) {\r\n        throw new AssertionFailedError(\"Parameter [\" + paramName + \"] not found\");\r\n    }\r\n    if (value instanceof String) {\r\n        if (!paramValue.equals(value)) {\r\n            throw new ComparisonFailure(\"Incorrect value found\", paramValue, (String) value);\r\n        }\r\n    } else if (value instanceof String[]) {\r\n        String[] values = (String[]) value;\r\n        for (int i = 0; i < values.length; i++) {\r\n            if (paramValue.equals(values[i])) {\r\n                return;\r\n            }\r\n        }\r\n        throw new AssertionFailedError(\"Expected value not found for parameter [\" + paramName + \"]\");\r\n    } else {\r\n        throw new AssertionFailedError(\"Unexpected type found as parameter value for [\" + paramName + \"]\");\r\n    }\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.TouchImageView.setScrollPosition",
	"Comment": "set the focus point of the zoomed image. the focus points are denoted as a fraction from theleft and top of the view. the focus points can range in value between 0 and 1.",
	"Method": "void setScrollPosition(float focusX,float focusY){\r\n    setZoom(normalizedScale, focusX, focusY);\r\n}"
}, {
	"Path": "jadx.core.dex.visitors.blocksmaker.BlockFinish.fixSplitterBlock",
	"Comment": "for evey exception handler must be only one splitter block,\tselect correct one and remove others if necessary.",
	"Method": "void fixSplitterBlock(BlockNode block){\r\n    ExcHandlerAttr excHandlerAttr = block.get(AType.EXC_HANDLER);\r\n    if (excHandlerAttr == null) {\r\n        return;\r\n    }\r\n    BlockNode handlerBlock = excHandlerAttr.getHandler().getHandlerBlock();\r\n    if (handlerBlock.getPredecessors().size() < 2) {\r\n        return;\r\n    }\r\n    Map<BlockNode, SplitterBlockAttr> splitters = new HashMap<BlockNode, SplitterBlockAttr>();\r\n    for (BlockNode pred : handlerBlock.getPredecessors()) {\r\n        pred = BlockUtils.skipSyntheticPredecessor(pred);\r\n        SplitterBlockAttr splitterAttr = pred.get(AType.SPLITTER_BLOCK);\r\n        if (splitterAttr != null && pred == splitterAttr.getBlock()) {\r\n            splitters.put(pred, splitterAttr);\r\n        }\r\n    }\r\n    if (splitters.size() < 2) {\r\n        return;\r\n    }\r\n    BlockNode topSplitter = BlockUtils.getTopBlock(splitters.keySet());\r\n    if (topSplitter == null) {\r\n        LOG.warn(\"Unknown top splitter block from list: {}\", splitters);\r\n        return;\r\n    }\r\n    for (Map.Entry<BlockNode, SplitterBlockAttr> entry : splitters.entrySet()) {\r\n        BlockNode pred = entry.getKey();\r\n        SplitterBlockAttr splitterAttr = entry.getValue();\r\n        if (pred == topSplitter) {\r\n            block.addAttr(splitterAttr);\r\n        } else {\r\n            pred.remove(AType.SPLITTER_BLOCK);\r\n            for (BlockNode s : pred.getCleanSuccessors()) {\r\n                s.remove(AType.SPLITTER_BLOCK);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.addTextParameter",
	"Comment": "adds a regular text parameter to the set of text parameters forthis request and also to the list of all parameters. handles the caseof multiple values for the same parameter by using an array for theparameter value.",
	"Method": "void addTextParameter(HttpServletRequest request,FileItem item){\r\n    String name = item.getFieldName();\r\n    String value = null;\r\n    boolean haveValue = false;\r\n    String encoding = null;\r\n    if (item instanceof DiskFileItem) {\r\n        encoding = ((DiskFileItem) item).getCharSet();\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"DiskFileItem.getCharSet=[\" + encoding + \"]\");\r\n        }\r\n    }\r\n    if (encoding == null) {\r\n        encoding = request.getCharacterEncoding();\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"request.getCharacterEncoding=[\" + encoding + \"]\");\r\n        }\r\n    }\r\n    if (encoding != null) {\r\n        try {\r\n            value = item.getString(encoding);\r\n            haveValue = true;\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n    if (!haveValue) {\r\n        try {\r\n            value = item.getString(\"ISO-8859-1\");\r\n        } catch (java.io.UnsupportedEncodingException uee) {\r\n            value = item.getString();\r\n        }\r\n        haveValue = true;\r\n    }\r\n    if (request instanceof MultipartRequestWrapper) {\r\n        MultipartRequestWrapper wrapper = (MultipartRequestWrapper) request;\r\n        wrapper.setParameter(name, value);\r\n    }\r\n    String[] oldArray = (String[]) elementsText.get(name);\r\n    String[] newArray;\r\n    if (oldArray != null) {\r\n        newArray = new String[oldArray.length + 1];\r\n        System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);\r\n        newArray[oldArray.length] = value;\r\n    } else {\r\n        newArray = new String[] { value };\r\n    }\r\n    elementsText.put(name, newArray);\r\n    elementsAll.put(name, newArray);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.DirectCouponList.newInstance",
	"Comment": "standard factory for new directcouponlist.this initializes the given writablememory.",
	"Method": "DirectCouponList newInstance(int lgConfigK,TgtHllType tgtHllType,WritableMemory dstMem){\r\n    insertPreInts(dstMem, LIST_PREINTS);\r\n    insertSerVer(dstMem);\r\n    insertFamilyId(dstMem);\r\n    insertLgK(dstMem, lgConfigK);\r\n    insertLgArr(dstMem, LG_INIT_LIST_SIZE);\r\n    insertFlags(dstMem, EMPTY_FLAG_MASK);\r\n    insertListCount(dstMem, 0);\r\n    insertModes(dstMem, tgtHllType, CurMode.LIST);\r\n    return new DirectCouponList(lgConfigK, tgtHllType, CurMode.LIST, dstMem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SingleItemSketch.create",
	"Comment": "create this sketch with the given long array and a seed.if the long array is null or empty no create attempt is made and the method returns null.",
	"Method": "SingleItemSketch create(long datum,SingleItemSketch create,double datum,SingleItemSketch create,String datum,SingleItemSketch create,byte[] data,SingleItemSketch create,char[] data,SingleItemSketch create,int[] data,SingleItemSketch create,long[] data,SingleItemSketch create,long datum,long seed,SingleItemSketch create,double datum,long seed,SingleItemSketch create,String datum,long seed,SingleItemSketch create,byte[] data,long seed,SingleItemSketch create,char[] data,long seed,SingleItemSketch create,int[] data,long seed,SingleItemSketch create,long[] data,long seed){\r\n    if ((data == null) || (data.length == 0)) {\r\n        return null;\r\n    }\r\n    return new SingleItemSketch(hash(data, seed)[0] >>> 1, seed);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.UpdateSketchBuilder.setNominalEntries",
	"Comment": "sets the nominal entries for this sketch. the minimum value is 16 and the maximum value is67,108,864, which is 2^26. be aware that sketches as large as this maximum value have notbeen thoroughly tested or characterized for performance.",
	"Method": "UpdateSketchBuilder setNominalEntries(int nomEntries){\r\n    bLgNomLongs = Integer.numberOfTrailingZeros(ceilingPowerOf2(nomEntries));\r\n    if ((bLgNomLongs > MAX_LG_NOM_LONGS) || (bLgNomLongs < MIN_LG_NOM_LONGS)) {\r\n        throw new SketchesArgumentException(\"Nominal Entries must be >= 16 and <= 67108864: \" + nomEntries);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.ImgTag.srcDefaultReference",
	"Comment": "convenience method to test whether this is the default module.",
	"Method": "boolean srcDefaultReference(ModuleConfig config){\r\n    return (config == null);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedFileTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "jadx.core.utils.BlockUtils.skipSyntheticPredecessor",
	"Comment": "return predecessor of synthetic block or same block otherwise.",
	"Method": "BlockNode skipSyntheticPredecessor(BlockNode block){\r\n    if (block.isSynthetic() && block.getPredecessors().size() == 1) {\r\n        return block.getPredecessors().get(0);\r\n    }\r\n    return block;\r\n}"
}, {
	"Path": "org.apache.struts.validator.Resources.getArgValues",
	"Comment": "gets the message arguments based on the current validatoractionand field.",
	"Method": "String[] getArgValues(ServletContext application,HttpServletRequest request,MessageResources defaultMessages,Locale locale,Arg[] args){\r\n    if ((args == null) || (args.length == 0)) {\r\n        return null;\r\n    }\r\n    String[] values = new String[args.length];\r\n    for (int i = 0; i < args.length; i++) {\r\n        if (args[i] != null) {\r\n            if (args[i].isResource()) {\r\n                MessageResources messages = defaultMessages;\r\n                if (args[i].getBundle() != null) {\r\n                    messages = getMessageResources(application, request, args[i].getBundle());\r\n                }\r\n                values[i] = messages.getMessage(locale, args[i].getKey());\r\n            } else {\r\n                values[i] = args[i].getKey();\r\n            }\r\n        }\r\n    }\r\n    return values;\r\n}"
}, {
	"Path": "org.jf.util.SparseIntArray.get",
	"Comment": "gets the int mapped from the specified key, or the specified valueif no such mapping has been made.",
	"Method": "int get(int key,int get,int key,int valueIfKeyNotFound){\r\n    int i = binarySearch(mKeys, 0, mSize, key);\r\n    if (i < 0) {\r\n        return valueIfKeyNotFound;\r\n    } else {\r\n        return mValues[i];\r\n    }\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.sameFrontMods",
	"Comment": "check that the sentences supplied have identical front modifiers",
	"Method": "boolean sameFrontMods(NLGElement sentences){\r\n    boolean equal = true;\r\n    if (sentences.length >= 2) {\r\n        for (int i = 1; i < sentences.length && equal; i++) {\r\n            if (!sentences[i - 1].hasFeature(Feature.CUE_PHRASE) && !sentences[i].hasFeature(Feature.CUE_PHRASE)) {\r\n                equal = sentences[i - 1].getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS).equals(sentences[i].getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS));\r\n            } else if (sentences[i - 1].hasFeature(Feature.CUE_PHRASE) && sentences[i].hasFeature(Feature.CUE_PHRASE)) {\r\n                equal = sentences[i - 1].getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS).equals(sentences[i].getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS)) && sentences[i].getFeatureAsElementList(Feature.CUE_PHRASE).equals(sentences[i - 1].getFeatureAsElementList(Feature.CUE_PHRASE));\r\n            } else {\r\n                equal = false;\r\n            }\r\n        }\r\n    }\r\n    return equal;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hllmap.Map.nextPrime",
	"Comment": "returns the next prime number that is greater than the given target. there will beno prime numbers less than the returned prime number that are greater than the given target.",
	"Method": "int nextPrime(int target){\r\n    return BigInteger.valueOf(target).nextProbablePrime().intValueExact();\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.DefinitionTagSupport.setControllerName",
	"Comment": "set associated controller name.name denote a fully qualified classname, or an url.exact type can be specified with setcontrollertype.",
	"Method": "void setControllerName(String controller){\r\n    this.controllerName = controller;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Sketch.getRetainedEntries",
	"Comment": "returns the number of entries that have been retained by the sketch.",
	"Method": "int getRetainedEntries(int getRetainedEntries,boolean valid){\r\n    return getRetainedEntries(true);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedGreaterEqualTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "simplenlg.orthography.english.OrthographyProcessor.removePunctSpace",
	"Comment": "removes extra spaces preceding punctuation from a realised element",
	"Method": "void removePunctSpace(NLGElement realisedElement){\r\n    if (realisedElement != null) {\r\n        String realisation = realisedElement.getRealisation();\r\n        if (realisation != null) {\r\n            realisation = realisation.replaceAll(\" ,\", \",\");\r\n            realisation = realisation.replaceAll(\",,+\", \",\");\r\n            realisedElement.setRealisation(realisation);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.setResources",
	"Comment": "set the application and request for this object instance. theservletcontext can be set by any servlet in the application. therequest should be the instant request. most of the other methodsretrieve their own objects by reference to the application, request, orsession attributes. do not call other methods without setting thesefirst! this is also called by the convenience constructor.",
	"Method": "void setResources(ServletContext application,HttpServletRequest request,HttpServletResponse response){\r\n    setApplication(application);\r\n    setRequest(request);\r\n    setResponse(response);\r\n}"
}, {
	"Path": "simplenlg.lexicon.XMLLexicon.convertNodeToWord",
	"Comment": "create a simplenlg wordelement from a word node in a lexicon xml file",
	"Method": "WordElement convertNodeToWord(Node wordNode){\r\n    if (!wordNode.getNodeName().equalsIgnoreCase(XML_WORD))\r\n        return null;\r\n    WordElement word = new WordElement();\r\n    List<Inflection> inflections = new ArrayList<Inflection>();\r\n    NodeList nodes = wordNode.getChildNodes();\r\n    for (int i = 0; i < nodes.getLength(); i++) {\r\n        Node featureNode = nodes.item(i);\r\n        if (featureNode.getNodeType() == Node.ELEMENT_NODE) {\r\n            String feature = featureNode.getNodeName().trim();\r\n            String value = featureNode.getTextContent();\r\n            if (value != null)\r\n                value = value.trim();\r\n            if (feature == null) {\r\n                System.err.println(\"Error in XML lexicon node for \" + word.toString());\r\n                break;\r\n            }\r\n            if (feature.equalsIgnoreCase(XML_BASE)) {\r\n                word.setBaseForm(value);\r\n            } else if (feature.equalsIgnoreCase(XML_CATEGORY))\r\n                word.setCategory(LexicalCategory.valueOf(value.toUpperCase()));\r\n            else if (feature.equalsIgnoreCase(XML_ID))\r\n                word.setId(value);\r\n            else if (value == null || value.equals(\"\")) {\r\n                Inflection infl = Inflection.getInflCode(feature);\r\n                if (infl != null) {\r\n                    inflections.add(infl);\r\n                } else {\r\n                    word.setFeature(feature, true);\r\n                }\r\n            } else\r\n                word.setFeature(feature, value);\r\n        }\r\n    }\r\n    if (inflections.isEmpty()) {\r\n        inflections.add(Inflection.REGULAR);\r\n    }\r\n    Inflection defaultInfl = inflections.contains(Inflection.REGULAR) ? Inflection.REGULAR : inflections.get(0);\r\n    word.setFeature(LexicalFeature.DEFAULT_INFL, defaultInfl);\r\n    word.setDefaultInflectionalVariant(defaultInfl);\r\n    for (Inflection infl : inflections) {\r\n        word.addInflectionalVariant(infl);\r\n    }\r\n    return word;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.RadioTag.doEndTag",
	"Comment": "optionally render the associated label from the body content.",
	"Method": "int doEndTag(){\r\n    if (this.text != null) {\r\n        TagUtils.getInstance().write(pageContext, text);\r\n    }\r\n    return (EVAL_PAGE);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedPasswordTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.TouchImageView.fitImageToView",
	"Comment": "if the normalizedscale is equal to 1, then the image is made to fit the screen. otherwise,it is made to fit the screen according to the dimensions of the previous image matrix. thisallows the image to maintain its zoom after rotation.",
	"Method": "void fitImageToView(){\r\n    Drawable drawable = getDrawable();\r\n    if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {\r\n        return;\r\n    }\r\n    if (matrix == null || prevMatrix == null) {\r\n        return;\r\n    }\r\n    int drawableWidth = drawable.getIntrinsicWidth();\r\n    int drawableHeight = drawable.getIntrinsicHeight();\r\n    float scaleX = (float) viewWidth / drawableWidth;\r\n    float scaleY = (float) viewHeight / drawableHeight;\r\n    switch(mScaleType) {\r\n        case CENTER:\r\n            scaleX = scaleY = 1;\r\n            break;\r\n        case CENTER_CROP:\r\n            scaleX = scaleY = Math.max(scaleX, scaleY);\r\n            break;\r\n        case CENTER_INSIDE:\r\n            scaleX = scaleY = Math.min(1, Math.min(scaleX, scaleY));\r\n        case FIT_CENTER:\r\n            scaleX = scaleY = Math.min(scaleX, scaleY);\r\n            break;\r\n        case FIT_XY:\r\n            break;\r\n        default:\r\n            throw new UnsupportedOperationException(\"TouchImageView does not support FIT_START or FIT_END\");\r\n    }\r\n    float redundantXSpace = viewWidth - (scaleX * drawableWidth);\r\n    float redundantYSpace = viewHeight - (scaleY * drawableHeight);\r\n    matchViewWidth = viewWidth - redundantXSpace;\r\n    matchViewHeight = viewHeight - redundantYSpace;\r\n    if (!isZoomed() && !imageRenderedAtLeastOnce) {\r\n        matrix.setScale(scaleX, scaleY);\r\n        matrix.postTranslate(redundantXSpace / 2, redundantYSpace / 2);\r\n        normalizedScale = 1;\r\n    } else {\r\n        if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {\r\n            savePreviousImageValues();\r\n        }\r\n        prevMatrix.getValues(m);\r\n        m[Matrix.MSCALE_X] = matchViewWidth / drawableWidth * normalizedScale;\r\n        m[Matrix.MSCALE_Y] = matchViewHeight / drawableHeight * normalizedScale;\r\n        float transX = m[Matrix.MTRANS_X];\r\n        float transY = m[Matrix.MTRANS_Y];\r\n        float prevActualWidth = prevMatchViewWidth * normalizedScale;\r\n        float actualWidth = getImageWidth();\r\n        translateMatrixAfterRotate(Matrix.MTRANS_X, transX, prevActualWidth, actualWidth, prevViewWidth, viewWidth, drawableWidth);\r\n        float prevActualHeight = prevMatchViewHeight * normalizedScale;\r\n        float actualHeight = getImageHeight();\r\n        translateMatrixAfterRotate(Matrix.MTRANS_Y, transY, prevActualHeight, actualHeight, prevViewHeight, viewHeight, drawableHeight);\r\n        matrix.setValues(m);\r\n    }\r\n    fixTrans();\r\n    setImageMatrix(matrix);\r\n}"
}, {
	"Path": "org.apache.struts.validator.BeanValidatorForm.initialize",
	"Comment": "perform intialization of the actionform.this method is called when the form is created.",
	"Method": "void initialize(FormBeanConfig formBeanConfig){\r\n    strutsConfigFormName = formBeanConfig.getName();\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.TouchImageView.fixTrans",
	"Comment": "performs boundary checking and fixes the image matrix if itis out of bounds.",
	"Method": "void fixTrans(){\r\n    matrix.getValues(m);\r\n    float transX = m[Matrix.MTRANS_X];\r\n    float transY = m[Matrix.MTRANS_Y];\r\n    float fixTransX = getFixTrans(transX, viewWidth, getImageWidth());\r\n    float fixTransY = getFixTrans(transY, viewHeight, getImageHeight());\r\n    if (fixTransX != 0 || fixTransY != 0) {\r\n        matrix.postTranslate(fixTransX, fixTransY);\r\n    }\r\n}"
}, {
	"Path": "jadx.core.dex.visitors.blocksmaker.BlockFinallyExtract.splitBlock",
	"Comment": "split one block into connected 2 blocks with same connections.",
	"Method": "BlockNode splitBlock(MethodNode mth,BlockNode block,int splitIndex){\r\n    BlockNode newBlock = BlockSplitter.startNewBlock(mth, -1);\r\n    newBlock.getSuccessors().addAll(block.getSuccessors());\r\n    for (BlockNode s : new ArrayList<BlockNode>(block.getSuccessors())) {\r\n        removeConnection(block, s);\r\n        connect(newBlock, s);\r\n    }\r\n    block.getSuccessors().clear();\r\n    connect(block, newBlock);\r\n    block.updateCleanSuccessors();\r\n    newBlock.updateCleanSuccessors();\r\n    List<InsnNode> insns = block.getInstructions();\r\n    int size = insns.size();\r\n    for (int i = splitIndex; i < size; i++) {\r\n        InsnNode insnNode = insns.get(i);\r\n        insnNode.add(AFlag.SKIP);\r\n        newBlock.getInstructions().add(insnNode);\r\n    }\r\n    Iterator<InsnNode> it = insns.iterator();\r\n    while (it.hasNext()) {\r\n        InsnNode insnNode = it.next();\r\n        if (insnNode.contains(AFlag.SKIP)) {\r\n            it.remove();\r\n        }\r\n    }\r\n    for (InsnNode insnNode : newBlock.getInstructions()) {\r\n        insnNode.remove(AFlag.SKIP);\r\n    }\r\n    return newBlock;\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.sameSubjects",
	"Comment": "check that the sentences supplied have identical subjects",
	"Method": "boolean sameSubjects(NLGElement sentences){\r\n    boolean equal = sentences.length >= 2;\r\n    for (int i = 1; i < sentences.length && equal; i++) {\r\n        equal = sentences[i - 1].getFeatureAsElementList(InternalFeature.SUBJECTS).equals(sentences[i].getFeatureAsElementList(InternalFeature.SUBJECTS));\r\n    }\r\n    return equal;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.BaseHllSketch.isEstimationMode",
	"Comment": "this hll family of sketches and operators is always estimating, even for very small values.",
	"Method": "boolean isEstimationMode(){\r\n    return true;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.HeapAuxHashMap.find",
	"Comment": "if the probe comes back to original index, throws an exception.",
	"Method": "int find(int[] auxArr,int lgAuxArrInts,int lgConfigK,int slotNo){\r\n    assert lgAuxArrInts < lgConfigK;\r\n    final int auxArrMask = (1 << lgAuxArrInts) - 1;\r\n    final int configKmask = (1 << lgConfigK) - 1;\r\n    int probe = slotNo & auxArrMask;\r\n    final int loopIndex = probe;\r\n    do {\r\n        final int arrVal = auxArr[probe];\r\n        if (arrVal == EMPTY) {\r\n            return ~probe;\r\n        } else if (slotNo == (arrVal & configKmask)) {\r\n            return probe;\r\n        }\r\n        final int stride = (slotNo >>> lgAuxArrInts) | 1;\r\n        probe = (probe + stride) & auxArrMask;\r\n    } while (probe != loopIndex);\r\n    throw new SketchesArgumentException(\"Key not found and no empty slots!\");\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationBuilder.setSeed",
	"Comment": "sets the long seed value that is require by the hashing function.",
	"Method": "SetOperationBuilder setSeed(long seed){\r\n    bSeed = seed;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyTag.doStartTag",
	"Comment": "overriding method of the heart of the tag. gets the relative propertyand tells the jsp engine to evaluate its body content.",
	"Method": "int doStartTag(){\r\n    originalProperty = property;\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    originalNest = NestedPropertyHelper.getCurrentProperty(request);\r\n    originalName = NestedPropertyHelper.getCurrentName(request, this);\r\n    String nested = NestedPropertyHelper.getAdjustedProperty(request, originalProperty);\r\n    NestedPropertyHelper.setProperty(request, nested);\r\n    NestedPropertyHelper.setName(request, originalName);\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "org.sonar.java.se.constraint.Constraint.copyOver",
	"Comment": "return constraint which should be applied to the rhs of the relation,if this constraint is set on the lhs of the relation.",
	"Method": "Constraint copyOver(RelationalSymbolicValue.Kind kind){\r\n    switch(kind) {\r\n        case EQUAL:\r\n        case METHOD_EQUALS:\r\n            return this;\r\n        default:\r\n            return inverse();\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.Util.computeRetainedItems",
	"Comment": "returns the number of retained valid items in the sketch given k and n.",
	"Method": "int computeRetainedItems(int k,long n){\r\n    final int bbCnt = computeBaseBufferItems(k, n);\r\n    final long bitPattern = computeBitPattern(k, n);\r\n    final int validLevels = computeValidLevels(bitPattern);\r\n    return bbCnt + (validLevels * k);\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateFloatLocale",
	"Comment": "checks if the field can safely be converted to a float primitive.",
	"Method": "Object validateFloatLocale(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    Locale locale = RequestUtils.getUserLocale(request, null);\r\n    result = GenericTypeValidator.formatFloat(value, locale);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "org.sonar.java.checks.ModifiersOrderCheck.skipAnnotations",
	"Comment": "move iterator on the first element which is not an annotation",
	"Method": "void skipAnnotations(ListIterator<ModifierTree> modifiersIterator){\r\n    while (modifiersIterator.hasNext() && modifiersIterator.next().is(Kind.ANNOTATION)) {\r\n    }\r\n    if (modifiersIterator.hasNext()) {\r\n        modifiersIterator.previous();\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.handleValueRequiredException",
	"Comment": "handle errors caused by required fields that were notspecified.",
	"Method": "void handleValueRequiredException(String field,String configType,String configName){\r\n    String errorMessage = internal.getMessage(\"configFieldRequired\", field, configType, configName);\r\n    log.error(errorMessage);\r\n    throw new UnavailableException(errorMessage);\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.generic.CopyFormToContext.findOrCreateForm",
	"Comment": "based on the properties of this command and the givenactioncontext, find or create an actionform instance forpreparation.",
	"Method": "ActionForm findOrCreateForm(ActionContext context,ActionForm findOrCreateForm,ActionContext ctx,String effectiveFormName,String effectiveScope){\r\n    ActionContextBase context;\r\n    try {\r\n        context = (ActionContextBase) ctx;\r\n    } catch (ClassCastException e) {\r\n        throw new IllegalStateException(\"ActionContext [\" + ctx + \"]\" + \" must be subclass of ActionContextBase\");\r\n    }\r\n    ActionForm form = context.findOrCreateActionForm(effectiveFormName, effectiveScope);\r\n    if (form == null) {\r\n        throw new IllegalArgumentException(\"No form found under scope [\" + effectiveScope + \"] and formName [\" + effectiveFormName + \"]\");\r\n    }\r\n    return form;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createNLGElement",
	"Comment": "create an nlgelement from the element, no default lexical category",
	"Method": "NLGElement createNLGElement(Object element,LexicalCategory category,NLGElement createNLGElement,Object element){\r\n    return createNLGElement(element, LexicalCategory.ANY);\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.escape",
	"Comment": "escape any single quote characters that are included in the specifiedmessage string.",
	"Method": "String escape(String string){\r\n    if (!isEscape()) {\r\n        return string;\r\n    }\r\n    if ((string == null) || (string.indexOf('\\'') < 0)) {\r\n        return string;\r\n    }\r\n    int n = string.length();\r\n    StringBuffer sb = new StringBuffer(n);\r\n    for (int i = 0; i < n; i++) {\r\n        char ch = string.charAt(i);\r\n        if (ch == '\\'') {\r\n            sb.append('\\'');\r\n        }\r\n        sb.append(ch);\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.yahoo.sketches.BoundsOnRatiosInSampledSets.hackyAdjuster",
	"Comment": "this hackyadjuster is tightly coupled with the width of the confidence interval normallyspecified with number of standard deviations. to simplify this interface the number ofstandard deviations has been fixed to 2.0, which corresponds to a confidence interval of95%.",
	"Method": "double hackyAdjuster(double f){\r\n    final double tmp = Math.sqrt(1.0 - f);\r\n    return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.HeapUpdateDoublesSketch.heapifyInstance",
	"Comment": "heapifies the given srcmem, which must be a memory image of a doublessketch and may have data.",
	"Method": "HeapUpdateDoublesSketch heapifyInstance(Memory srcMem){\r\n    final long memCapBytes = srcMem.getCapacity();\r\n    if (memCapBytes < 8) {\r\n        throw new SketchesArgumentException(\"Source Memory too small: \" + memCapBytes + \" < 8\");\r\n    }\r\n    final int preLongs = extractPreLongs(srcMem);\r\n    final int serVer = extractSerVer(srcMem);\r\n    final int familyID = extractFamilyID(srcMem);\r\n    final int flags = extractFlags(srcMem);\r\n    final int k = extractK(srcMem);\r\n    final boolean empty = (flags & EMPTY_FLAG_MASK) > 0;\r\n    final long n = empty ? 0 : extractN(srcMem);\r\n    DoublesUtil.checkDoublesSerVer(serVer, MIN_HEAP_DOUBLES_SER_VER);\r\n    Util.checkHeapFlags(flags);\r\n    checkPreLongsFlagsSerVer(flags, serVer, preLongs);\r\n    Util.checkFamilyID(familyID);\r\n    final HeapUpdateDoublesSketch hds = newInstance(k);\r\n    if (empty) {\r\n        return hds;\r\n    }\r\n    final boolean srcIsCompact = (serVer == 2) | ((flags & COMPACT_FLAG_MASK) > 0);\r\n    checkHeapMemCapacity(k, n, srcIsCompact, serVer, memCapBytes);\r\n    hds.n_ = n;\r\n    final int combBufCap = computeCombinedBufferItemCapacity(k, n);\r\n    hds.baseBufferCount_ = computeBaseBufferItems(k, n);\r\n    hds.bitPattern_ = computeBitPattern(k, n);\r\n    hds.srcMemoryToCombinedBuffer(srcMem, serVer, srcIsCompact, combBufCap);\r\n    return hds;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.CookieTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String className = null;\r\n    if (data.getAttribute(\"multiple\") == null) {\r\n        className = \"javax.servlet.http.Cookie\";\r\n    } else {\r\n        className = \"javax.servlet.http.Cookie[]\";\r\n    }\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), className, true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "org.sonar.java.cfg.LiveVariables.analyze",
	"Comment": "returns livevariables object with information concerning local variables and parameters",
	"Method": "LiveVariables analyze(CFG cfg,LiveVariables analyze,CFG cfg,boolean includeFields){\r\n    LiveVariables liveVariables = new LiveVariables(cfg, includeFields);\r\n    Map<CFG.Block, Set<Symbol>> kill = new HashMap();\r\n    Map<CFG.Block, Set<Symbol>> gen = new HashMap();\r\n    for (CFG.Block block : liveVariables.cfg.reversedBlocks()) {\r\n        Set<Symbol> blockKill = new HashSet();\r\n        Set<Symbol> blockGen = new HashSet();\r\n        liveVariables.processBlockElements(block, blockKill, blockGen);\r\n        kill.put(block, blockKill);\r\n        gen.put(block, blockGen);\r\n    }\r\n    liveVariables.analyzeCFG(liveVariables.in, kill, gen);\r\n    if (!liveVariables.out.get(liveVariables.cfg.reversedBlocks().get(0)).isEmpty()) {\r\n        throw new IllegalStateException(\"Out of exit block should be empty\");\r\n    }\r\n    for (Map.Entry<CFG.Block, Set<Symbol>> blockSetEntry : liveVariables.out.entrySet()) {\r\n        blockSetEntry.setValue(ImmutableSet.copyOf(blockSetEntry.getValue()));\r\n    }\r\n    return liveVariables;\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.getMessage",
	"Comment": "look up and return a message string, based on the specifiedparameters.",
	"Method": "String getMessage(String key,String getMessage,String key,Object[] args){\r\n    MessageResources resources = getMessageResources();\r\n    if (resources == null) {\r\n        return null;\r\n    }\r\n    if (args == null) {\r\n        return resources.getMessage(RequestUtils.getUserLocale(request, null), key);\r\n    } else {\r\n        return resources.getMessage(RequestUtils.getUserLocale(request, null), key, args);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.UpdateSketchBuilder.build",
	"Comment": "returns an updatesketch with the current configuration of this builder.",
	"Method": "UpdateSketch build(UpdateSketch build,WritableMemory dstMem){\r\n    UpdateSketch sketch = null;\r\n    switch(bFam) {\r\n        case ALPHA:\r\n            {\r\n                if (dstMem == null) {\r\n                    sketch = HeapAlphaSketch.newHeapInstance(bLgNomLongs, bSeed, bP, bRF);\r\n                } else {\r\n                    throw new SketchesArgumentException(\"AlphaSketch cannot be made Direct to Memory.\");\r\n                }\r\n                break;\r\n            }\r\n        case QUICKSELECT:\r\n            {\r\n                if (dstMem == null) {\r\n                    sketch = new HeapQuickSelectSketch(bLgNomLongs, bSeed, bP, bRF, false);\r\n                } else {\r\n                    sketch = new DirectQuickSelectSketch(bLgNomLongs, bSeed, bP, bRF, bMemReqSvr, dstMem, false);\r\n                }\r\n                break;\r\n            }\r\n        default:\r\n            {\r\n                throw new SketchesArgumentException(\"Given Family cannot be built as a Theta Sketch: \" + bFam.toString());\r\n            }\r\n    }\r\n    return sketch;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.InsertTag.userHasRole",
	"Comment": "parse the list of roles and return true or false based on whetherthe user has that role or not.",
	"Method": "boolean userHasRole(HttpServletRequest request,String role){\r\n    StringTokenizer st = new StringTokenizer(role, \",\");\r\n    while (st.hasMoreTokens()) {\r\n        if (request.isUserInRole(st.nextToken())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of an itemssketch.",
	"Method": "String toString(String toString,boolean sketchSummary,boolean dataDetail,String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.toString(mem, false);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.UpdatableSketchBuilder.build",
	"Comment": "returns an updatablesketch with the current configuration of this builder.",
	"Method": "UpdatableSketch<U, S> build(){\r\n    return new UpdatableSketch<U, S>(nomEntries_, resizeFactor_.lg(), samplingProbability_, summaryFactory_);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.addMessageResourcesConfig",
	"Comment": "add a new messageresourcesconfig instance to the setassociated with this module.",
	"Method": "void addMessageResourcesConfig(MessageResourcesConfig config){\r\n    throwIfConfigured();\r\n    String key = config.getKey();\r\n    if (messageResources.containsKey(key)) {\r\n        log.warn(\"Overriding MessageResources bundle of key \" + key);\r\n    }\r\n    messageResources.put(key, config);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.getOrCreateController",
	"Comment": "get or create controller.get controller, create it if necessary.",
	"Method": "Controller getOrCreateController(){\r\n    if (controllerInstance != null) {\r\n        return controllerInstance;\r\n    }\r\n    if (controller == null && controllerType == null) {\r\n        return null;\r\n    }\r\n    if (controllerType != null && controller == null) {\r\n        throw new InstantiationException(\"Controller name should be defined if controllerType is set\");\r\n    }\r\n    controllerInstance = createController(controller, controllerType);\r\n    return controllerInstance;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.PreambleUtil.preambleToString",
	"Comment": "returns a human readable string summary of the preamble state of the given byte array.used primarily in testing.",
	"Method": "String preambleToString(byte[] byteArr,String preambleToString,Memory mem){\r\n    final int preLongs = getAndCheckPreLongs(mem);\r\n    final ResizeFactor rf = ResizeFactor.getRF(extractLgResizeFactor(mem));\r\n    final int serVer = extractSerVer(mem);\r\n    final Family family = Family.idToFamily(extractFamilyID(mem));\r\n    final int lgNomLongs = extractLgNomLongs(mem);\r\n    final int lgArrLongs = extractLgArrLongs(mem);\r\n    final int flags = extractFlags(mem);\r\n    final String flagsStr = zeroPad(Integer.toBinaryString(flags), 8) + \", \" + (flags);\r\n    final String nativeOrder = ByteOrder.nativeOrder().toString();\r\n    final boolean bigEndian = (flags & BIG_ENDIAN_FLAG_MASK) > 0;\r\n    final boolean readOnly = (flags & READ_ONLY_FLAG_MASK) > 0;\r\n    final boolean empty = (flags & EMPTY_FLAG_MASK) > 0;\r\n    final boolean compact = (flags & COMPACT_FLAG_MASK) > 0;\r\n    final boolean ordered = (flags & ORDERED_FLAG_MASK) > 0;\r\n    final boolean singleItem = !empty && (preLongs == 1);\r\n    final int seedHash = extractSeedHash(mem);\r\n    int curCount = singleItem ? 1 : 0;\r\n    float p = (float) 1.0;\r\n    long thetaLong = Long.MAX_VALUE;\r\n    long thetaULong = thetaLong;\r\n    if (preLongs == 2) {\r\n        curCount = extractCurCount(mem);\r\n        p = extractP(mem);\r\n    } else if (preLongs == 3) {\r\n        curCount = extractCurCount(mem);\r\n        p = extractP(mem);\r\n        thetaLong = extractThetaLong(mem);\r\n        thetaULong = thetaLong;\r\n    } else if (preLongs == 4) {\r\n        curCount = extractCurCount(mem);\r\n        p = extractP(mem);\r\n        thetaLong = extractThetaLong(mem);\r\n        thetaULong = extractUnionThetaLong(mem);\r\n    }\r\n    final double thetaDbl = thetaLong / MAX_THETA_LONG_AS_DOUBLE;\r\n    final String thetaHex = zeroPad(Long.toHexString(thetaLong), 16);\r\n    final double thetaUDbl = thetaULong / MAX_THETA_LONG_AS_DOUBLE;\r\n    final String thetaUHex = zeroPad(Long.toHexString(thetaULong), 16);\r\n    final StringBuilder sb = new StringBuilder();\r\n    sb.append(LS);\r\n    sb.append(\"### SKETCH PREAMBLE SUMMARY:\").append(LS);\r\n    sb.append(\"Byte  0: Preamble Longs       : \").append(preLongs).append(LS);\r\n    sb.append(\"Byte  0: ResizeFactor         : \").append(rf.toString()).append(LS);\r\n    sb.append(\"Byte  1: Serialization Version: \").append(serVer).append(LS);\r\n    sb.append(\"Byte  2: Family               : \").append(family.toString()).append(LS);\r\n    sb.append(\"Byte  3: LgNomLongs           : \").append(lgNomLongs).append(LS);\r\n    sb.append(\"Byte  4: LgArrLongs           : \").append(lgArrLongs).append(LS);\r\n    sb.append(\"Byte  5: Flags Field          : \").append(flagsStr).append(LS);\r\n    sb.append(\"  (Native Byte Order)         : \").append(nativeOrder).append(LS);\r\n    sb.append(\"  BIG_ENDIAN_STORAGE          : \").append(bigEndian).append(LS);\r\n    sb.append(\"  READ_ONLY                   : \").append(readOnly).append(LS);\r\n    sb.append(\"  EMPTY                       : \").append(empty).append(LS);\r\n    sb.append(\"  COMPACT                     : \").append(compact).append(LS);\r\n    sb.append(\"  ORDERED                     : \").append(ordered).append(LS);\r\n    sb.append(\"  SINGLEITEM  (derived)       : \").append(singleItem).append(LS);\r\n    sb.append(\"Bytes 6-7  : Seed Hash        : \").append(Integer.toHexString(seedHash)).append(LS);\r\n    if (preLongs == 1) {\r\n        sb.append(\" --ABSENT, ASSUMED:\").append(LS);\r\n        sb.append(\"Bytes 8-11 : CurrentCount     : \").append(curCount).append(LS);\r\n        sb.append(\"Bytes 12-15: P                : \").append(p).append(LS);\r\n        sb.append(\"Bytes 16-23: Theta (double)   : \").append(thetaDbl).append(LS);\r\n        sb.append(\"             Theta (long)     : \").append(thetaLong).append(LS);\r\n        sb.append(\"             Theta (long,hex) : \").append(thetaHex).append(LS);\r\n    } else if (preLongs == 2) {\r\n        sb.append(\"Bytes 8-11 : CurrentCount     : \").append(curCount).append(LS);\r\n        sb.append(\"Bytes 12-15: P                : \").append(p).append(LS);\r\n        sb.append(\" --ABSENT, ASSUMED:\").append(LS);\r\n        sb.append(\"Bytes 16-23: Theta (double)   : \").append(thetaDbl).append(LS);\r\n        sb.append(\"             Theta (long)     : \").append(thetaLong).append(LS);\r\n        sb.append(\"             Theta (long,hex) : \").append(thetaHex).append(LS);\r\n    } else if (preLongs == 3) {\r\n        sb.append(\"Bytes 8-11 : CurrentCount     : \").append(curCount).append(LS);\r\n        sb.append(\"Bytes 12-15: P                : \").append(p).append(LS);\r\n        sb.append(\"Bytes 16-23: Theta (double)   : \").append(thetaDbl).append(LS);\r\n        sb.append(\"             Theta (long)     : \").append(thetaLong).append(LS);\r\n        sb.append(\"             Theta (long,hex) : \").append(thetaHex).append(LS);\r\n    } else {\r\n        sb.append(\"Bytes 8-11 : CurrentCount     : \").append(curCount).append(LS);\r\n        sb.append(\"Bytes 12-15: P                : \").append(p).append(LS);\r\n        sb.append(\"Bytes 16-23: Theta (double)   : \").append(thetaDbl).append(LS);\r\n        sb.append(\"             Theta (long)     : \").append(thetaLong).append(LS);\r\n        sb.append(\"             Theta (long,hex) : \").append(thetaHex).append(LS);\r\n        sb.append(\"Bytes 25-31: ThetaU (double)  : \").append(thetaUDbl).append(LS);\r\n        sb.append(\"             ThetaU (long)    : \").append(thetaULong).append(LS);\r\n        sb.append(\"             ThetaU (long,hex): \").append(thetaUHex).append(LS);\r\n    }\r\n    sb.append(\"Preamble Bytes                : \").append(preLongs * 8).append(LS);\r\n    sb.append(\"Data Bytes                    : \").append(curCount * 8).append(LS);\r\n    sb.append(\"TOTAL Sketch Bytes            : \").append(mem.getCapacity()).append(LS);\r\n    sb.append(\"### END SKETCH PREAMBLE SUMMARY\").append(LS);\r\n    return sb.toString();\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.UnionTest.checkUnions",
	"Comment": "the task here is to check the transition boundaries as the sketch morphs between list toset to hll modes. the transition points vary as a function of lgconfigk. in addition,this checks that the union operation is operating properly based on the order thesketches are presented to the union.",
	"Method": "void checkUnions(){\r\n    int t1 = 2;\r\n    int t2 = 2;\r\n    int rt = 2;\r\n    println(\"TgtR: \" + TgtHllType.values()[rt].toString());\r\n    int lgK1 = 7;\r\n    int lgK2 = 7;\r\n    int lgMaxK = 7;\r\n    int n1 = 7;\r\n    int n2 = 7;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 8;\r\n    n2 = 7;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 7;\r\n    n2 = 8;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 8;\r\n    n2 = 8;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    n1 = 7;\r\n    n2 = 14;\r\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n    println(\"++END BASE GROUP++\");\r\n    int i = 0;\r\n    for (i = 7; i <= 13; i++) {\r\n        lgK1 = i;\r\n        lgK2 = i;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"--END MINOR GROUP--\");\r\n        lgK1 = i;\r\n        lgK2 = i + 1;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"--END MINOR GROUP--\");\r\n        lgK1 = i + 1;\r\n        lgK2 = i;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"--END MINOR GROUP--\");\r\n        lgK1 = i + 1;\r\n        lgK2 = i + 1;\r\n        lgMaxK = i;\r\n        {\r\n            n1 = ((1 << (i - 3)) * 3) / 4;\r\n            n2 = n1;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 -= 2;\r\n            n2 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n            n1 += 2;\r\n            basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\r\n        }\r\n        println(\"++END MAJOR GROUP++\");\r\n    }\r\n}"
}, {
	"Path": "org.sonar.java.bytecode.loader.SquidClassLoader.getBytesForClass",
	"Comment": "read bytes representing class with name passed as an argument. modify the class version in bytecode so asm can readreturned array without issues.",
	"Method": "byte[] getBytesForClass(String className){\r\n    try (InputStream is = getResourceAsStream(Convert.bytecodeName(className) + \".class\")) {\r\n        if (is == null) {\r\n            return null;\r\n        }\r\n        return ByteStreams.toByteArray(is);\r\n    } catch (IOException e) {\r\n        throw new AnalysisException(\"An IOException occurred in SonarJava classLoader.\", e);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketchIterator.next",
	"Comment": "advancing the iterator and checking existence of the next entryis combined here for efficiency. this results in an undefinedstate of the iterator before the first call of this method.",
	"Method": "boolean next(){\r\n    if (!isInitialized_) {\r\n        level_ = 0;\r\n        i_ = levels_[level_];\r\n        weight_ = 1;\r\n        isInitialized_ = true;\r\n    } else {\r\n        i_++;\r\n    }\r\n    if (i_ < levels_[level_ + 1]) {\r\n        return true;\r\n    }\r\n    do {\r\n        level_++;\r\n        if (level_ == numLevels_) {\r\n            return false;\r\n        }\r\n        weight_ *= 2;\r\n    } while (levels_[level_] == levels_[level_ + 1]);\r\n    i_ = levels_[level_];\r\n    return true;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.DefineTag.doEndTag",
	"Comment": "retrieve the required property and expose it as a scripting variable.",
	"Method": "int doEndTag(){\r\n    int n = 0;\r\n    if (this.body != null) {\r\n        n++;\r\n    }\r\n    if (this.name != null) {\r\n        n++;\r\n    }\r\n    if (this.value != null) {\r\n        n++;\r\n    }\r\n    if (n > 1) {\r\n        JspException e = new JspException(messages.getMessage(\"define.value\", id));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    Object value = this.value;\r\n    if ((value == null) && (name != null)) {\r\n        value = TagUtils.getInstance().lookup(pageContext, name, property, scope);\r\n    }\r\n    if ((value == null) && (body != null)) {\r\n        value = body;\r\n    }\r\n    if (value == null) {\r\n        JspException e = new JspException(messages.getMessage(\"define.null\", id));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    int inScope = PageContext.PAGE_SCOPE;\r\n    try {\r\n        if (toScope != null) {\r\n            inScope = TagUtils.getInstance().getScope(toScope);\r\n        }\r\n    } catch (JspException e) {\r\n        log.warn(\"toScope was invalid name so we default to PAGE_SCOPE\", e);\r\n    }\r\n    pageContext.setAttribute(id, value, inScope);\r\n    return (EVAL_PAGE);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedEmptyTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketch.getNormalizedRankError",
	"Comment": "gets the approximate rank error of this sketch normalized as a fraction between zero and one.",
	"Method": "double getNormalizedRankError(double getNormalizedRankError,boolean pmf,double getNormalizedRankError,int k,double getNormalizedRankError,int k,boolean pmf){\r\n    return pmf ? 2.446 / pow(k, 0.9433) : 2.296 / pow(k, 0.9723);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.HllSketch.copyAs",
	"Comment": "return a deep copy of this sketch onto the java heap with the specified tgthlltype.",
	"Method": "HllSketch copyAs(TgtHllType tgtHllType){\r\n    return new HllSketch(hllSketchImpl.copyAs(tgtHllType));\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUpdatableSketchBuilder.setSamplingProbability",
	"Comment": "this is to set sampling probability.default probability is 1.",
	"Method": "ArrayOfDoublesUpdatableSketchBuilder setSamplingProbability(float samplingProbability){\r\n    if (samplingProbability < 0 || samplingProbability > 1f) {\r\n        throw new SketchesArgumentException(\"sampling probability must be between 0 and 1\");\r\n    }\r\n    samplingProbability_ = samplingProbability;\r\n    return this;\r\n}"
}, {
	"Path": "org.sonar.java.resolve.BytecodeCompleter.constantValue",
	"Comment": "this method reads constant values in bytecode. it should be called when resolving semantics from source.",
	"Method": "Object constantValue(Symbol owner,String constantName){\r\n    if (constantValues.containsKey(owner)) {\r\n        return constantValues.get(owner).get(constantName);\r\n    }\r\n    if (owner.isTypeSymbol()) {\r\n        JavaSymbol.TypeJavaSymbol typeSymbol = (JavaSymbol.TypeJavaSymbol) owner;\r\n        String bytecodeName = typeSymbol.getFullyQualifiedName();\r\n        byte[] bytes = classLoader.getBytesForClass(bytecodeName);\r\n        if (bytes != null) {\r\n            Map<String, Object> valuesByFieldName = new HashMap();\r\n            ClassReader classReader = new ClassReader(bytes);\r\n            classReader.accept(new ClassVisitor(ASM_API_VERSION) {\r\n                @Override\r\n                public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {\r\n                    valuesByFieldName.put(name, value);\r\n                    return super.visitField(access, name, descriptor, signature, value);\r\n                }\r\n            }, ClassReader.SKIP_CODE | ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG);\r\n            constantValues.put(typeSymbol, valuesByFieldName);\r\n            return valuesByFieldName.get(constantName);\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sonar.java.resolve.BytecodeCompleter.constantValue",
	"Comment": "this method reads constant values in bytecode. it should be called when resolving semantics from source.",
	"Method": "Object constantValue(Symbol owner,String constantName){\r\n    valuesByFieldName.put(name, value);\r\n    return super.visitField(access, name, descriptor, signature, value);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.SelectTag.doStartTag",
	"Comment": "render the beginning of this select tag.support for indexedproperty since struts 1.1",
	"Method": "int doStartTag(){\r\n    TagUtils.getInstance().write(pageContext, renderSelectStartElement());\r\n    pageContext.setAttribute(Constants.SELECT_KEY, this);\r\n    this.calculateMatchValues();\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptionsBuilder.withCompressedInputFile",
	"Comment": "sets the name of the input file for compressed input. it isimportant to note that the input encoding should be available atthis point.",
	"Method": "OutputOptionsBuilder withCompressedInputFile(Path inputFile){\r\n    requireNonNull(inputFile, \"No input file provided\");\r\n    inputResource = new CompressedFileInputResource(inputFile, SCHEMACRAWLER_DATA);\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.config.ModuleConfigFactory.getFactoryClass",
	"Comment": "the fully qualified class name that is used for moduleconfigfactoryinstances.",
	"Method": "String getFactoryClass(){\r\n    return (ModuleConfigFactory.factoryClass);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.TextareaTag.doStartTag",
	"Comment": "generate the required input tag. support for indexed since struts 1.1",
	"Method": "int doStartTag(){\r\n    TagUtils.getInstance().write(pageContext, this.renderTextareaElement());\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionForm.contains",
	"Comment": "indicates if the specified mapped property contain a value for thespecified key value.",
	"Method": "boolean contains(String name,String key){\r\n    Object value = dynaValues.get(name);\r\n    if (value == null) {\r\n        throw new NullPointerException(\"No mapped value for '\" + name + \"(\" + key + \")'\");\r\n    } else if (value instanceof Map) {\r\n        return (((Map) value).containsKey(key));\r\n    } else {\r\n        throw new IllegalArgumentException(\"Non-mapped property for '\" + name + \"(\" + key + \")'\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesRequestProcessor.doForward",
	"Comment": "do a forward using request dispatcher.uri is a valid uri. if response has already been commited, do an includeinstead.",
	"Method": "void doForward(String uri,HttpServletRequest request,HttpServletResponse response){\r\n    if (response.isCommitted()) {\r\n        this.doInclude(uri, request, response);\r\n    } else {\r\n        super.doForward(uri, request, response);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.validator.ValidatorForm.getResultValueMap",
	"Comment": "returns a map of values returned from any validation thatreturns a value other than null or booleanwith the key the full property path of the field.",
	"Method": "Map getResultValueMap(){\r\n    return ((validatorResults != null) ? validatorResults.getResultValueMap() : null);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.DefinitionsUtil.setActionDefinition",
	"Comment": "store definition in jsp context.mainly used by struts to pass a definition defined in an action to the forward.",
	"Method": "void setActionDefinition(ServletRequest request,ComponentDefinition definition){\r\n    request.setAttribute(ACTION_DEFINITION, definition);\r\n}"
}, {
	"Path": "org.sonar.java.se.xproc.MethodYield.applicableOnVarArgs",
	"Comment": "for varargs methods, only apply the constraint on single array parameter, in order to not wrongly apply it on all the elements of the array.",
	"Method": "boolean applicableOnVarArgs(int index,List<Type> types){\r\n    if (index < parametersConstraints.size() - 1) {\r\n        return true;\r\n    }\r\n    if (parametersConstraints.size() != types.size()) {\r\n        return false;\r\n    }\r\n    Type argumentType = types.get(index);\r\n    return argumentType.isArray() || argumentType.is(\"<nulltype>\");\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.PutTag.setObjectValue",
	"Comment": "set property value as an object.added because some web containers react badly to value as object.",
	"Method": "void setObjectValue(Object value){\r\n    this.value = value;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.CompareTagBase.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(boolean condition,int desired1,int desired2){\r\n    int type = -1;\r\n    double doubleValue = 0.0;\r\n    long longValue = 0;\r\n    if ((type < 0) && (value.length() > 0)) {\r\n        try {\r\n            doubleValue = Double.parseDouble(value);\r\n            type = DOUBLE_COMPARE;\r\n        } catch (NumberFormatException e) {\r\n            ;\r\n        }\r\n    }\r\n    if ((type < 0) && (value.length() > 0)) {\r\n        try {\r\n            longValue = Long.parseLong(value);\r\n            type = LONG_COMPARE;\r\n        } catch (NumberFormatException e) {\r\n            ;\r\n        }\r\n    }\r\n    if (type < 0) {\r\n        type = STRING_COMPARE;\r\n    }\r\n    Object variable = null;\r\n    if (cookie != null) {\r\n        Cookie[] cookies = ((HttpServletRequest) pageContext.getRequest()).getCookies();\r\n        if (cookies == null) {\r\n            cookies = new Cookie[0];\r\n        }\r\n        for (int i = 0; i < cookies.length; i++) {\r\n            if (cookie.equals(cookies[i].getName())) {\r\n                variable = cookies[i].getValue();\r\n                break;\r\n            }\r\n        }\r\n    } else if (header != null) {\r\n        variable = ((HttpServletRequest) pageContext.getRequest()).getHeader(header);\r\n    } else if (name != null) {\r\n        Object bean = TagUtils.getInstance().lookup(pageContext, name, scope);\r\n        if (property != null) {\r\n            if (bean == null) {\r\n                JspException e = new JspException(messages.getMessage(\"logic.bean\", name));\r\n                TagUtils.getInstance().saveException(pageContext, e);\r\n                throw e;\r\n            }\r\n            try {\r\n                variable = PropertyUtils.getProperty(bean, property);\r\n            } catch (InvocationTargetException e) {\r\n                Throwable t = e.getTargetException();\r\n                if (t == null) {\r\n                    t = e;\r\n                }\r\n                TagUtils.getInstance().saveException(pageContext, t);\r\n                throw new JspException(messages.getMessage(\"logic.property\", name, property, t.toString()));\r\n            } catch (Throwable t) {\r\n                TagUtils.getInstance().saveException(pageContext, t);\r\n                throw new JspException(messages.getMessage(\"logic.property\", name, property, t.toString()));\r\n            }\r\n        } else {\r\n            variable = bean;\r\n        }\r\n    } else if (parameter != null) {\r\n        variable = pageContext.getRequest().getParameter(parameter);\r\n    } else {\r\n        JspException e = new JspException(messages.getMessage(\"logic.selector\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    if (variable == null) {\r\n        variable = \"\";\r\n    }\r\n    int result = 0;\r\n    if (type == DOUBLE_COMPARE) {\r\n        try {\r\n            double doubleVariable = Double.parseDouble(variable.toString());\r\n            if (doubleVariable < doubleValue) {\r\n                result = -1;\r\n            } else if (doubleVariable > doubleValue) {\r\n                result = +1;\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            result = variable.toString().compareTo(value);\r\n        }\r\n    } else if (type == LONG_COMPARE) {\r\n        try {\r\n            long longVariable = Long.parseLong(variable.toString());\r\n            if (longVariable < longValue) {\r\n                result = -1;\r\n            } else if (longVariable > longValue) {\r\n                result = +1;\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            result = variable.toString().compareTo(value);\r\n        }\r\n    } else {\r\n        result = variable.toString().compareTo(value);\r\n    }\r\n    if (result < 0) {\r\n        result = -1;\r\n    } else if (result > 0) {\r\n        result = +1;\r\n    }\r\n    return ((result == desired1) || (result == desired2));\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.PageTag.doStartTag",
	"Comment": "retrieve the required configuration object and expose it as a scriptingvariable.",
	"Method": "int doStartTag(){\r\n    Object object = null;\r\n    if (\"application\".equalsIgnoreCase(property)) {\r\n        object = pageContext.getServletContext();\r\n    } else if (\"config\".equalsIgnoreCase(property)) {\r\n        object = pageContext.getServletConfig();\r\n    } else if (\"request\".equalsIgnoreCase(property)) {\r\n        object = pageContext.getRequest();\r\n    } else if (\"response\".equalsIgnoreCase(property)) {\r\n        object = pageContext.getResponse();\r\n    } else if (\"session\".equalsIgnoreCase(property)) {\r\n        object = pageContext.getSession();\r\n    } else {\r\n        JspException e = new JspException(messages.getMessage(\"page.selector\", property));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    pageContext.setAttribute(id, object);\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.UnionImpl.initNewHeapInstance",
	"Comment": "construct a new union setoperation on the java heap.called by setoperationbuilder.",
	"Method": "UnionImpl initNewHeapInstance(int lgNomLongs,long seed,float p,ResizeFactor rf){\r\n    final UpdateSketch gadget = new // create with UNION family\r\n    HeapQuickSelectSketch(// create with UNION family\r\n    lgNomLongs, // create with UNION family\r\n    seed, // create with UNION family\r\n    p, rf, true);\r\n    final UnionImpl unionImpl = new UnionImpl(gadget, seed);\r\n    unionImpl.unionThetaLong_ = gadget.getThetaLong();\r\n    return unionImpl;\r\n}"
}, {
	"Path": "simplenlg.lexicon.Lexicon.selectMatchingWord",
	"Comment": "choose a single wordelement from a list of wordelements.prefer one\twhich exactly matches the baseform",
	"Method": "WordElement selectMatchingWord(List<WordElement> wordElements,String baseForm){\r\n    if (wordElements == null || wordElements.isEmpty())\r\n        return createWord(baseForm);\r\n    for (WordElement wordElement : wordElements) if (wordElement.getBaseForm().equals(baseForm))\r\n        return wordElement;\r\n    if (wordElements.get(0).getBaseForm().equalsIgnoreCase(baseForm)) {\r\n        return createWord(baseForm, LexicalCategory.ANY);\r\n    }\r\n    return wordElements.get(0);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionForm.testSetIndexedValues",
	"Comment": "positive and negative tests on setindexedproperty valid arguments.",
	"Method": "void testSetIndexedValues(){\r\n    Object value = null;\r\n    dynaForm.set(\"intArray\", 0, new Integer(1));\r\n    value = (Integer) dynaForm.get(\"intArray\", 0);\r\n    assertNotNull(\"Returned new value 0\", value);\r\n    assertTrue(\"Returned Integer new value 0\", value instanceof Integer);\r\n    assertEquals(\"Returned correct new value 0\", 1, ((Integer) value).intValue());\r\n    dynaForm.set(\"intIndexed\", 1, new Integer(11));\r\n    value = (Integer) dynaForm.get(\"intIndexed\", 1);\r\n    assertNotNull(\"Returned new value 1\", value);\r\n    assertTrue(\"Returned Integer new value 1\", value instanceof Integer);\r\n    assertEquals(\"Returned correct new value 1\", 11, ((Integer) value).intValue());\r\n    dynaForm.set(\"listIndexed\", 2, \"New Value 2\");\r\n    value = (String) dynaForm.get(\"listIndexed\", 2);\r\n    assertNotNull(\"Returned new value 2\", value);\r\n    assertTrue(\"Returned String new value 2\", value instanceof String);\r\n    assertEquals(\"Returned correct new value 2\", \"New Value 2\", (String) value);\r\n    dynaForm.set(\"stringArray\", 3, \"New Value 3\");\r\n    value = (String) dynaForm.get(\"stringArray\", 3);\r\n    assertNotNull(\"Returned new value 3\", value);\r\n    assertTrue(\"Returned String new value 3\", value instanceof String);\r\n    assertEquals(\"Returned correct new value 3\", \"New Value 3\", (String) value);\r\n    dynaForm.set(\"stringIndexed\", 4, \"New Value 4\");\r\n    value = (String) dynaForm.get(\"stringIndexed\", 4);\r\n    assertNotNull(\"Returned new value 4\", value);\r\n    assertTrue(\"Returned String new value 4\", value instanceof String);\r\n    assertEquals(\"Returned correct new value 4\", \"New Value 4\", (String) value);\r\n}"
}, {
	"Path": "jadx.core.dex.visitors.regions.LoopRegionVisitor.checkInvoke",
	"Comment": "check if instruction is a interface invoke with corresponding parameters.",
	"Method": "boolean checkInvoke(InsnNode insn,String declClsFullName,String mthId,int argsCount){\r\n    if (insn.getType() == InsnType.INVOKE) {\r\n        InvokeNode inv = (InvokeNode) insn;\r\n        MethodInfo callMth = inv.getCallMth();\r\n        if (callMth.getArgsCount() == argsCount && callMth.getShortId().equals(mthId) && inv.getInvokeType() == InvokeType.INTERFACE) {\r\n            return declClsFullName == null || callMth.getDeclClass().getFullName().equals(declClsFullName);\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "oauth.signpost.OAuth.toMap",
	"Comment": "construct a map containing a copy of the given parameters. if severalparameters have the same name, the map will contain the first value,only.",
	"Method": "Map<String, String> toMap(Collection<T> from){\r\n    HashMap<String, String> map = new HashMap<String, String>();\r\n    if (from != null) {\r\n        for (Map.Entry<String, String> entry : from) {\r\n            String key = entry.getKey();\r\n            if (!map.containsKey(key)) {\r\n                map.put(key, entry.getValue());\r\n            }\r\n        }\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createList",
	"Comment": "creates a new section element with the given title and adds the given\tcomponent.",
	"Method": "DocumentElement createList(DocumentElement createList,List<DocumentElement> textComponents,DocumentElement createList,NLGElement component){\r\n    DocumentElement list = new DocumentElement(DocumentCategory.LIST, null);\r\n    list.addComponent(component);\r\n    return list;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.ImageTag.src",
	"Comment": "return the base source url that will be rendered in thesrc property for this generated element, ornull if there is no such url.",
	"Method": "String src(){\r\n    if (this.page != null) {\r\n        if ((this.src != null) || (this.srcKey != null) || (this.pageKey != null)) {\r\n            JspException e = new JspException(messages.getMessage(\"imgTag.src\"));\r\n            TagUtils.getInstance().saveException(pageContext, e);\r\n            throw e;\r\n        }\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        ModuleConfig config = ModuleUtils.getInstance().getModuleConfig(this.module, request, pageContext.getServletContext());\r\n        String pageValue = this.page;\r\n        if (config != null) {\r\n            pageValue = TagUtils.getInstance().pageURL(request, this.page, config);\r\n        }\r\n        return (request.getContextPath() + pageValue);\r\n    }\r\n    if (this.pageKey != null) {\r\n        if ((this.src != null) || (this.srcKey != null)) {\r\n            JspException e = new JspException(messages.getMessage(\"imgTag.src\"));\r\n            TagUtils.getInstance().saveException(pageContext, e);\r\n            throw e;\r\n        }\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        ModuleConfig config = ModuleUtils.getInstance().getModuleConfig(this.module, request, pageContext.getServletContext());\r\n        String pageValue = TagUtils.getInstance().message(pageContext, getBundle(), getLocale(), this.pageKey);\r\n        if (config != null) {\r\n            pageValue = TagUtils.getInstance().pageURL(request, pageValue, config);\r\n        }\r\n        return (request.getContextPath() + pageValue);\r\n    }\r\n    if (this.src != null) {\r\n        if (this.srcKey != null) {\r\n            JspException e = new JspException(messages.getMessage(\"imgTag.src\"));\r\n            TagUtils.getInstance().saveException(pageContext, e);\r\n            throw e;\r\n        }\r\n        return (this.src);\r\n    }\r\n    if (this.srcKey == null) {\r\n        JspException e = new JspException(messages.getMessage(\"imgTag.src\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    return TagUtils.getInstance().message(pageContext, getBundle(), getLocale(), this.srcKey);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesRequestProcessor.initDefinitionsMapping",
	"Comment": "read component instance mapping configuration file.this is where we read files properties.",
	"Method": "void initDefinitionsMapping(){\r\n    definitionsFactory = ((TilesUtilStrutsImpl) TilesUtil.getTilesUtil()).getDefinitionsFactory(getServletContext(), moduleConfig);\r\n    if (definitionsFactory == null) {\r\n        log.info(\"Definition Factory not found for module '\" + moduleConfig.getPrefix() + \"'. \" + \"Have you declared the appropriate plugin in struts-config.xml ?\");\r\n        return;\r\n    }\r\n    log.info(\"Tiles definition factory found for request processor '\" + moduleConfig.getPrefix() + \"'.\");\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseSet.elideLeftmost",
	"Comment": "elide the leftmost consitutents in the phrase list, that is, all phrases\texcept the rightmost.",
	"Method": "void elideLeftmost(){\r\n    for (int i = this.phrases.size() - 2; i >= 0; i--) {\r\n        NLGElement phrase = this.phrases.get(i);\r\n        if (phrase != null) {\r\n            phrase.setFeature(Feature.ELIDED, true);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "simplenlg.xmlrealiser.UnWrapper.checkFunction",
	"Comment": "utility method to set the discourse function for phrase components,\tunless set by user",
	"Method": "void checkFunction(simplenlg.features.DiscourseFunction function,simplenlg.framework.NLGElement phrase){\r\n    if (!phrase.hasFeature(InternalFeature.DISCOURSE_FUNCTION)) {\r\n        phrase.setFeature(InternalFeature.DISCOURSE_FUNCTION, function);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.getStreamLength",
	"Comment": "returns the sum of the frequencies in the stream seen so far by the sketch",
	"Method": "long getStreamLength(){\r\n    return this.streamLength;\r\n}"
}, {
	"Path": "org.apache.struts.validator.BeanValidatorForm.get",
	"Comment": "return the value of a mapped property with the specified name, ornull if there is no value for the specified key.",
	"Method": "Object get(String name,Object get,String name,int index,Object get,String name,String key){\r\n    return dynaBean.get(name, key);\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseHelper.realise",
	"Comment": "the main method for controlling the syntax realisation of clauses.",
	"Method": "NLGElement realise(SyntaxProcessor parent,PhraseElement phrase){\r\n    ListElement realisedElement = null;\r\n    NLGFactory phraseFactory = phrase.getFactory();\r\n    NLGElement splitVerb = null;\r\n    boolean interrogObj = false;\r\n    if (phrase != null) {\r\n        realisedElement = new ListElement();\r\n        NLGElement verbElement = phrase.getFeatureAsElement(InternalFeature.VERB_PHRASE);\r\n        if (verbElement == null) {\r\n            verbElement = phrase.getHead();\r\n        }\r\n        checkSubjectNumberPerson(phrase, verbElement);\r\n        checkDiscourseFunction(phrase);\r\n        copyFrontModifiers(phrase, verbElement);\r\n        addComplementiser(phrase, parent, realisedElement);\r\n        addCuePhrase(phrase, parent, realisedElement);\r\n        if (phrase.hasFeature(Feature.INTERROGATIVE_TYPE)) {\r\n            Object inter = phrase.getFeature(Feature.INTERROGATIVE_TYPE);\r\n            interrogObj = (InterrogativeType.WHAT_OBJECT.equals(inter) || InterrogativeType.WHO_OBJECT.equals(inter) || InterrogativeType.HOW_PREDICATE.equals(inter) || InterrogativeType.HOW.equals(inter) || InterrogativeType.WHY.equals(inter) || InterrogativeType.WHERE.equals(inter));\r\n            splitVerb = realiseInterrogative(phrase, parent, realisedElement, phraseFactory, verbElement);\r\n        } else {\r\n            PhraseHelper.realiseList(parent, realisedElement, phrase.getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS), DiscourseFunction.FRONT_MODIFIER);\r\n        }\r\n        addSubjectsToFront(phrase, parent, realisedElement, splitVerb);\r\n        NLGElement passiveSplitVerb = addPassiveComplementsNumberPerson(phrase, parent, realisedElement, verbElement);\r\n        if (passiveSplitVerb != null) {\r\n            splitVerb = passiveSplitVerb;\r\n        }\r\n        realiseVerb(phrase, parent, realisedElement, splitVerb, verbElement, interrogObj);\r\n        addPassiveSubjects(phrase, parent, realisedElement, phraseFactory);\r\n        addInterrogativeFrontModifiers(phrase, parent, realisedElement);\r\n        addEndingTo(phrase, parent, realisedElement, phraseFactory);\r\n    }\r\n    return realisedElement;\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionFormClass.introspect",
	"Comment": "introspect our form bean configuration to identify the supportedproperties.",
	"Method": "void introspect(FormBeanConfig config){\r\n    this.config = config;\r\n    try {\r\n        beanClass = RequestUtils.applicationClass(config.getType());\r\n    } catch (Throwable t) {\r\n        throw new IllegalArgumentException(\"Cannot instantiate ActionFormBean class '\" + config.getType() + \"': \" + t);\r\n    }\r\n    if (!DynaActionForm.class.isAssignableFrom(beanClass)) {\r\n        throw new IllegalArgumentException(\"Class '\" + config.getType() + \"' is not a subclass of \" + \"'org.apache.struts.action.DynaActionForm'\");\r\n    }\r\n    this.name = config.getName();\r\n    FormPropertyConfig[] descriptors = config.findFormPropertyConfigs();\r\n    if (descriptors == null) {\r\n        descriptors = new FormPropertyConfig[0];\r\n    }\r\n    properties = new DynaProperty[descriptors.length];\r\n    for (int i = 0; i < descriptors.length; i++) {\r\n        properties[i] = new DynaProperty(descriptors[i].getName(), descriptors[i].getTypeClass());\r\n        propertiesMap.put(properties[i].getName(), properties[i]);\r\n    }\r\n}"
}, {
	"Path": "oauth.signpost.OAuth.toHeaderElement",
	"Comment": "helper method to concatenate a parameter and its value to a pair that canbe used in an http header. this method percent encodes both parts beforejoining them.",
	"Method": "String toHeaderElement(String name,String value){\r\n    return OAuth.percentEncode(name) + \"=\\\"\" + OAuth.percentEncode(value) + \"\\\"\";\r\n}"
}, {
	"Path": "net.csdn.mongo.Criteria.update",
	"Comment": "update attributes of the first matching net.csdn.application.document.",
	"Method": "void update(Map obj){\r\n    collection().update(translateMapToDBObject(selector), translateMapToDBObject(map(\"$set\", obj)));\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.setPronounFeatures",
	"Comment": "a helper method to set the features on newly created pronoun words.",
	"Method": "void setPronounFeatures(NLGElement wordElement,String word){\r\n    wordElement.setCategory(LexicalCategory.PRONOUN);\r\n    if (FIRST_PRONOUNS.contains(word)) {\r\n        wordElement.setFeature(Feature.PERSON, Person.FIRST);\r\n    } else if (SECOND_PRONOUNS.contains(word)) {\r\n        wordElement.setFeature(Feature.PERSON, Person.SECOND);\r\n        if (\"yourself\".equalsIgnoreCase(word)) {\r\n            wordElement.setPlural(false);\r\n        } else if (\"yourselves\".equalsIgnoreCase(word)) {\r\n            wordElement.setPlural(true);\r\n        } else {\r\n            wordElement.setFeature(Feature.NUMBER, NumberAgreement.BOTH);\r\n        }\r\n    } else {\r\n        wordElement.setFeature(Feature.PERSON, Person.THIRD);\r\n    }\r\n    if (REFLEXIVE_PRONOUNS.contains(word)) {\r\n        wordElement.setFeature(LexicalFeature.REFLEXIVE, true);\r\n    } else {\r\n        wordElement.setFeature(LexicalFeature.REFLEXIVE, false);\r\n    }\r\n    if (MASCULINE_PRONOUNS.contains(word)) {\r\n        wordElement.setFeature(LexicalFeature.GENDER, Gender.MASCULINE);\r\n    } else if (FEMININE_PRONOUNS.contains(word)) {\r\n        wordElement.setFeature(LexicalFeature.GENDER, Gender.FEMININE);\r\n    } else {\r\n        wordElement.setFeature(LexicalFeature.GENDER, Gender.NEUTER);\r\n    }\r\n    if (POSSESSIVE_PRONOUNS.contains(word)) {\r\n        wordElement.setFeature(Feature.POSSESSIVE, true);\r\n    } else {\r\n        wordElement.setFeature(Feature.POSSESSIVE, false);\r\n    }\r\n    if (PLURAL_PRONOUNS.contains(word) && !SECOND_PRONOUNS.contains(word)) {\r\n        wordElement.setPlural(true);\r\n    } else if (!EITHER_NUMBER_PRONOUNS.contains(word)) {\r\n        wordElement.setPlural(false);\r\n    }\r\n    if (EXPLETIVE_PRONOUNS.contains(word)) {\r\n        wordElement.setFeature(InternalFeature.NON_MORPH, true);\r\n        wordElement.setFeature(LexicalFeature.EXPLETIVE_SUBJECT, true);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.orthography.english.OrthographyProcessor.capitaliseFirstLetter",
	"Comment": "capitalises the first character of a sentence if it is a lower case\tletter.",
	"Method": "void capitaliseFirstLetter(StringBuffer realisation){\r\n    char character = realisation.charAt(0);\r\n    if (character >= 'a' && character <= 'z') {\r\n        character = (char) ('A' + (character - 'a'));\r\n        realisation.setCharAt(0, character);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.lexicon.Lexicon.hasWord",
	"Comment": "return true if the lexicon contains a wordelement which has\tthe specified base form and category",
	"Method": "boolean hasWord(String baseForm,LexicalCategory category,boolean hasWord,String baseForm){\r\n    return !getWords(baseForm).isEmpty();\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Sketches.getEstimate",
	"Comment": "gets the unique count estimate from a valid memory image of a sketch",
	"Method": "double getEstimate(Memory srcMem){\r\n    checkIfValidThetaSketch(srcMem);\r\n    return Sketch.estimate(getThetaLong(srcMem), getRetainedEntries(srcMem), getEmpty(srcMem));\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.DirectQuickSelectSketch.writableWrap",
	"Comment": "wrap a sketch around the given source memory containing sketch data that originated fromthis sketch.",
	"Method": "DirectQuickSelectSketch writableWrap(WritableMemory srcMem,long seed){\r\n    final int preambleLongs = extractPreLongs(srcMem);\r\n    final int lgNomLongs = extractLgNomLongs(srcMem);\r\n    final int lgArrLongs = extractLgArrLongs(srcMem);\r\n    UpdateSketch.checkUnionQuickSelectFamily(srcMem, preambleLongs, lgNomLongs);\r\n    checkMemIntegrity(srcMem, seed, preambleLongs, lgNomLongs, lgArrLongs);\r\n    final int lgRF = extractLgResizeFactor(srcMem);\r\n    final ResizeFactor myRF = ResizeFactor.getRF(lgRF);\r\n    if ((myRF == ResizeFactor.X1) && (lgArrLongs != Util.startingSubMultiple(lgNomLongs + 1, myRF, MIN_LG_ARR_LONGS))) {\r\n        insertLgResizeFactor(srcMem, ResizeFactor.X2.lg());\r\n    }\r\n    final DirectQuickSelectSketch dqss = new DirectQuickSelectSketch(seed, srcMem);\r\n    dqss.hashTableThreshold_ = setHashTableThreshold(lgNomLongs, lgArrLongs);\r\n    return dqss;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.GreaterEqualTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(+1, 0));\r\n}"
}, {
	"Path": "simplenlg.lexicon.util.NIHLexiconXMLDumpUtil.printArgumentsMessage",
	"Comment": "prints this utility applications arguments requirements.",
	"Method": "void printArgumentsMessage(){\r\n    System.err.println(\"\\t\\t 1. The full path to the NIHDB Lexicon database file e.g. C:\\\\NIHDB\\\\lexAccess2009 \");\r\n    System.err.println(\"\\t\\t 2. The full path to the list of baseforms and POS tags to include in the written out XML Lexicon file\");\r\n    System.err.println(\"\\t\\t 3. The full path to the XML file that the XML Lexicon will be written out to.\");\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.getLowerBound",
	"Comment": "gets the guaranteed lower bound frequency of the given item, which can never benegative.",
	"Method": "long getLowerBound(long item,long getLowerBound){\r\n    return hashMap.get(item);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionForm.testGetIndexedValues",
	"Comment": "positive and negative tests on getindexedproperty valid arguments.",
	"Method": "void testGetIndexedValues(){\r\n    Object value = null;\r\n    for (int i = 0; i < 5; i++) {\r\n        value = dynaForm.get(\"intArray\", i);\r\n        assertNotNull(\"intArray returned value \" + i, value);\r\n        assertTrue(\"intArray returned Integer \" + i, value instanceof Integer);\r\n        assertEquals(\"intArray returned correct \" + i, i * 10, ((Integer) value).intValue());\r\n        value = dynaForm.get(\"intIndexed\", i);\r\n        assertNotNull(\"intIndexed returned value \" + i, value);\r\n        assertTrue(\"intIndexed returned Integer \" + i, value instanceof Integer);\r\n        assertEquals(\"intIndexed returned correct \" + i, i * 100, ((Integer) value).intValue());\r\n        value = dynaForm.get(\"listIndexed\", i);\r\n        assertNotNull(\"listIndexed returned value \" + i, value);\r\n        assertTrue(\"list returned String \" + i, value instanceof String);\r\n        assertEquals(\"listIndexed returned correct \" + i, \"String \" + i, (String) value);\r\n        value = dynaForm.get(\"stringArray\", i);\r\n        assertNotNull(\"stringArray returned value \" + i, value);\r\n        assertTrue(\"stringArray returned String \" + i, value instanceof String);\r\n        assertEquals(\"stringArray returned correct \" + i, \"String \" + i, (String) value);\r\n        value = dynaForm.get(\"stringIndexed\", i);\r\n        assertNotNull(\"stringIndexed returned value \" + i, value);\r\n        assertTrue(\"stringIndexed returned String \" + i, value instanceof String);\r\n        assertEquals(\"stringIndexed returned correct \" + i, \"String \" + i, (String) value);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.lexicon.Lexicon.createWord",
	"Comment": "create a default wordelement. may be overridden by specific types of\tlexicon",
	"Method": "WordElement createWord(String baseForm,LexicalCategory category,WordElement createWord,String baseForm){\r\n    return new WordElement(baseForm);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.setLocalNominalEntries",
	"Comment": "sets the nominal entries for the concurrent local sketch. the minimum value is 16 and themaximum value is 67,108,864, which is 2^26. be aware that sketches as large as this maximumvalue have not been thoroughly tested or characterized for performance.",
	"Method": "ConcurrentThetaBuilder setLocalNominalEntries(int nomEntries){\r\n    bLocalLgNomLongs = Integer.numberOfTrailingZeros(ceilingPowerOf2(nomEntries));\r\n    if ((bLocalLgNomLongs > MAX_LG_NOM_LONGS) || (bSharedLgNomLongs < MIN_LG_NOM_LONGS)) {\r\n        throw new SketchesArgumentException(\"Nominal Entries must be >= 16 and <= 67108864: \" + nomEntries);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.sonar.java.checks.AbstractClassNoFieldShouldBeInterfaceCheck.supportPrivateMethod",
	"Comment": "java 9 introduce private method in interfaces.before java 9, an abstract class with private methods can not be turned into an interface.",
	"Method": "boolean supportPrivateMethod(ClassTree tree){\r\n    return !hasPrivateMethod(tree) || javaVersionAsInt >= 9;\r\n}"
}, {
	"Path": "com.yahoo.sketches.HashOperations.hashArrayInsert",
	"Comment": "inserts the given long array into the given hash table array of the target size,removes any negative input values, ignores duplicates and counts the values inserted.the given hash table may have values, but they must have been inserted by this method or oneof the other oadh insert methods in this class and they may not be dirty.this method performs additional checks against potentially invalid hash values or theta values.returns the count of values actually inserted.",
	"Method": "int hashArrayInsert(long[] srcArr,long[] hashTable,int lgArrLongs,long thetaLong){\r\n    int count = 0;\r\n    final int arrLen = srcArr.length;\r\n    checkThetaCorruption(thetaLong);\r\n    for (int i = 0; i < arrLen; i++) {\r\n        final long hash = srcArr[i];\r\n        checkHashCorruption(hash);\r\n        if (continueCondition(thetaLong, hash)) {\r\n            continue;\r\n        }\r\n        if (hashSearchOrInsert(hashTable, lgArrLongs, hash) < 0) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketch.getSerializedSizeBytes",
	"Comment": "returns the number of bytes this sketch would require to store.",
	"Method": "int getSerializedSizeBytes(int getSerializedSizeBytes,int numLevels,int numRetained){\r\n    if ((numLevels == 1) && (numRetained == 1)) {\r\n        return DATA_START_SINGLE_ITEM + Float.BYTES;\r\n    }\r\n    return DATA_START + (numLevels * Integer.BYTES) + ((numRetained + 2) * Float.BYTES);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesUnionBuilder.setMaxK",
	"Comment": "sets the parameter mask that determines the maximum size of the sketch thatresults from a union and its accuracy.",
	"Method": "DoublesUnionBuilder setMaxK(int maxK){\r\n    Util.checkK(maxK);\r\n    bMaxK = maxK;\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.downSample",
	"Comment": "from an source sketch, create a new sketch that must have a smaller value of k.the original sketch is not modified.",
	"Method": "DoublesSketch downSample(DoublesSketch srcSketch,int smallerK,WritableMemory dstMem){\r\n    return downSampleInternal(srcSketch, smallerK, dstMem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.advanceEpoch",
	"Comment": "advances the epoch while there is no background propagationthis ensures a propagation invoked before the reset cannot affect the sketch after the resetis completed.",
	"Method": "void advanceEpoch(){\r\n    startPropagation();\r\n    epoch_++;\r\n    endPropagation(null);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createSection",
	"Comment": "creates a new section element with the given title and adds the given\tcomponent.",
	"Method": "DocumentElement createSection(DocumentElement createSection,String title,DocumentElement createSection,String title,List<DocumentElement> components,DocumentElement createSection,String title,NLGElement component){\r\n    DocumentElement section = new DocumentElement(DocumentCategory.SECTION, title);\r\n    if (component != null) {\r\n        section.addComponent(component);\r\n    }\r\n    return section;\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcWrapper.getUpperBound",
	"Comment": "returns the best estimate of the upper bound of the confidence interval given kappa,the number of standard deviations from the mean.",
	"Method": "double getUpperBound(int kappa){\r\n    if (!hasHip(mem)) {\r\n        return getIconConfidenceUB(PreambleUtil.getLgK(mem), getNumCoupons(mem), kappa);\r\n    }\r\n    return getHipConfidenceUB(PreambleUtil.getLgK(mem), getNumCoupons(mem), getHipAccum(mem), kappa);\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllHelper.validateValues",
	"Comment": "checks the sequential validity of the given array of float values.they must be unique, monotonically increasing and not nan.",
	"Method": "void validateValues(float[] values){\r\n    for (int i = 0; i < values.length; i++) {\r\n        if (Float.isNaN(values[i])) {\r\n            throw new SketchesArgumentException(\"Values must not be NaN\");\r\n        }\r\n        if ((i < (values.length - 1)) && (values[i] >= values[i + 1])) {\r\n            throw new SketchesArgumentException(\"Values must be unique and monotonically increasing\");\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of a cpcsketch.",
	"Method": "String toString(String toString,boolean detail,String toString,byte[] byteArr,boolean detail,String toString,Memory mem,boolean detail){\r\n    return PreambleUtil.toString(mem, detail);\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResourcesFactory.getFactoryClass",
	"Comment": "the fully qualified class name that is used for messageresourcesfactoryinstances.",
	"Method": "String getFactoryClass(){\r\n    return (MessageResourcesFactory.factoryClass);\r\n}"
}, {
	"Path": "schemacrawler.utility.SchemaCrawlerUtility.buildSchemaRetrievalOptions",
	"Comment": "allows building of database specific options programatically, usingan existing schemacrawler database plugin as a starting point.",
	"Method": "SchemaRetrievalOptionsBuilder buildSchemaRetrievalOptions(Connection connection){\r\n    checkConnection(connection);\r\n    final DatabaseConnectorRegistry registry = new DatabaseConnectorRegistry();\r\n    final DatabaseConnector dbConnector = registry.lookupDatabaseConnector(connection);\r\n    LOGGER.log(Level.INFO, \"Using database plugin for \" + dbConnector.getDatabaseServerType());\r\n    final SchemaRetrievalOptionsBuilder schemaRetrievalOptionsBuilder = dbConnector.getSchemaRetrievalOptionsBuilder(connection);\r\n    return schemaRetrievalOptionsBuilder;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.getCurrentMapCapacity",
	"Comment": "returns the current number of counters the sketch is configured to support.",
	"Method": "int getCurrentMapCapacity(){\r\n    return this.curMapCap;\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.rightPeriphery",
	"Comment": "collect a list of pairs of constituents with the same syntactic function\tfrom the right periphery of two sentences. the right periphery\tencompasses the complements of the main verb, and its postmodifiers.",
	"Method": "List<PhraseSet> rightPeriphery(NLGElement sentences){\r\n    List<PhraseSet> funcsets = new ArrayList<PhraseSet>();\r\n    PhraseSet comps = new PhraseSet(DiscourseFunction.OBJECT);\r\n    PhraseSet pmods = new PhraseSet(DiscourseFunction.POST_MODIFIER);\r\n    for (NLGElement s : sentences) {\r\n        NLGElement vp = s.getFeatureAsElement(InternalFeature.VERB_PHRASE);\r\n        if (vp != null) {\r\n            if (vp.hasFeature(InternalFeature.COMPLEMENTS)) {\r\n                comps.addPhrases(vp.getFeatureAsElementList(InternalFeature.COMPLEMENTS));\r\n            }\r\n            if (vp.hasFeature(InternalFeature.POSTMODIFIERS)) {\r\n                pmods.addPhrases(vp.getFeatureAsElementList(InternalFeature.POSTMODIFIERS));\r\n            }\r\n        }\r\n        if (s.hasFeature(InternalFeature.POSTMODIFIERS)) {\r\n            pmods.addPhrases(s.getFeatureAsElementList(InternalFeature.POSTMODIFIERS));\r\n        }\r\n    }\r\n    funcsets.add(comps);\r\n    funcsets.add(pmods);\r\n    return funcsets;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsList",
	"Comment": "retrieves the value of the feature as a list of java objects. if the feature\tis a single element, the list contains only this element.\tif the feature is a collection each object in the collection is\treturned in the list.\tif the feature does not exist then an empty list is returned.",
	"Method": "List<Object> getFeatureAsList(String featureName){\r\n    List<Object> values = new ArrayList<Object>();\r\n    Object value = getFeature(featureName);\r\n    if (value != null) {\r\n        if (value instanceof Collection<?>) {\r\n            Iterator<?> iterator = ((Collection<?>) value).iterator();\r\n            Object nextObject = null;\r\n            while (iterator.hasNext()) {\r\n                nextObject = iterator.next();\r\n                values.add(nextObject);\r\n            }\r\n        } else {\r\n            values.add(value);\r\n        }\r\n    }\r\n    return values;\r\n}"
}, {
	"Path": "com.yahoo.sketches.QuantilesHelper.chunkContainingPos",
	"Comment": "this is written in terms of a plain array to facilitate testing.",
	"Method": "int chunkContainingPos(long[] arr,long pos){\r\n    final int nominalLength = arr.length - 1;\r\n    assert nominalLength > 0;\r\n    final long n = arr[nominalLength];\r\n    assert 0 <= pos;\r\n    assert pos < n;\r\n    final int l = 0;\r\n    final int r = nominalLength;\r\n    assert l < r;\r\n    assert arr[l] <= pos;\r\n    assert pos < arr[r];\r\n    return searchForChunkContainingPos(arr, pos, l, r);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.startPropagation",
	"Comment": "ensures mutual exclusion. no other thread can update the shared sketch while propagation isin progress",
	"Method": "void startPropagation(){\r\n    while (!sharedPropagationInProgress_.compareAndSet(false, true)) {\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.DirectQuickSelectSketchR.setHashTableThreshold",
	"Comment": "returns the cardinality limit given the current size of the hash table array.",
	"Method": "int setHashTableThreshold(int lgNomLongs,int lgArrLongs){\r\n    final double fraction = (lgArrLongs <= lgNomLongs) ? DQS_RESIZE_THRESHOLD : REBUILD_THRESHOLD;\r\n    return (int) Math.floor(fraction * (1 << lgArrLongs));\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateInteger",
	"Comment": "checks if the field can safely be converted to an int primitive.",
	"Method": "Object validateInteger(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    result = GenericTypeValidator.formatInt(value);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "org.jf.util.LinearSearch.linearSearch",
	"Comment": "performs a linear search in a sorted list for key, starting at initialguess",
	"Method": "int linearSearch(List<? extends T> list,Comparator<T> comparator,T key,int initialGuess){\r\n    int guess = initialGuess;\r\n    if (guess >= list.size()) {\r\n        guess = list.size() - 1;\r\n    }\r\n    int comparison = comparator.compare(list.get(guess), key);\r\n    if (comparison == 0) {\r\n        return guess;\r\n    }\r\n    if (comparison < 0) {\r\n        guess++;\r\n        while (guess < list.size()) {\r\n            comparison = comparator.compare(list.get(guess), key);\r\n            if (comparison == 0) {\r\n                return guess;\r\n            }\r\n            if (comparison > 0) {\r\n                return -(guess + 1);\r\n            }\r\n            guess++;\r\n        }\r\n        return -(list.size() + 1);\r\n    } else {\r\n        guess--;\r\n        while (guess >= 0) {\r\n            comparison = comparator.compare(list.get(guess), key);\r\n            if (comparison == 0) {\r\n                return guess;\r\n            }\r\n            if (comparison < 0) {\r\n                return -(guess + 2);\r\n            }\r\n            guess--;\r\n        }\r\n        return -1;\r\n    }\r\n}"
}, {
	"Path": "simplenlg.phrasespec.NPPhraseSpec.setNounPhraseFeatures",
	"Comment": "a helper method to set the features required for noun phrases, from the\thead noun",
	"Method": "void setNounPhraseFeatures(NLGElement nounElement){\r\n    if (nounElement == null)\r\n        return;\r\n    setFeature(Feature.POSSESSIVE, nounElement != null ? nounElement.getFeatureAsBoolean(Feature.POSSESSIVE) : Boolean.FALSE);\r\n    setFeature(InternalFeature.RAISED, false);\r\n    setFeature(InternalFeature.ACRONYM, false);\r\n    if (nounElement != null && nounElement.hasFeature(Feature.NUMBER)) {\r\n        setFeature(Feature.NUMBER, nounElement.getFeature(Feature.NUMBER));\r\n    } else {\r\n        setPlural(false);\r\n    }\r\n    if (nounElement != null && nounElement.hasFeature(Feature.PERSON)) {\r\n        setFeature(Feature.PERSON, nounElement.getFeature(Feature.PERSON));\r\n    } else {\r\n        setFeature(Feature.PERSON, Person.THIRD);\r\n    }\r\n    if (nounElement != null && nounElement.hasFeature(LexicalFeature.GENDER)) {\r\n        setFeature(LexicalFeature.GENDER, nounElement.getFeature(LexicalFeature.GENDER));\r\n    } else {\r\n        setFeature(LexicalFeature.GENDER, Gender.NEUTER);\r\n    }\r\n    if (nounElement != null && nounElement.hasFeature(LexicalFeature.EXPLETIVE_SUBJECT)) {\r\n        setFeature(LexicalFeature.EXPLETIVE_SUBJECT, nounElement.getFeature(LexicalFeature.EXPLETIVE_SUBJECT));\r\n    }\r\n    setFeature(Feature.ADJECTIVE_ORDERING, true);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsUnion.getResult",
	"Comment": "returns a sketch representing the current state of the union.",
	"Method": "ReservoirLongsSketch getResult(){\r\n    return (gadget_ != null ? gadget_.copy() : null);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionRedirect.getOriginalPath",
	"Comment": "get the original path without the parameters added at runtime.",
	"Method": "String getOriginalPath(){\r\n    return super.getPath();\r\n}"
}, {
	"Path": "org.sonar.java.resolve.Resolve.isAccessible",
	"Comment": "is symbol accessible as a member of given class in given environment?symbol is accessible only if not overridden by another symbol. if overridden, then strictly speaking it is not a member.",
	"Method": "boolean isAccessible(Env env,JavaSymbol.TypeJavaSymbol c,boolean isAccessible,Env env,JavaSymbol.TypeJavaSymbol site,JavaSymbol symbol){\r\n    switch(symbol.flags() & Flags.ACCESS_FLAGS) {\r\n        case Flags.PRIVATE:\r\n            return env.enclosingClass != null && sameOutermostClass(env.enclosingClass, symbol.owner()) && isInheritedIn(symbol, site);\r\n        case 0:\r\n            return (env.packge == symbol.packge()) && isAccessible(env, site) && isInheritedIn(symbol, site) && notOverriddenIn(site, symbol);\r\n        case Flags.PUBLIC:\r\n            return isAccessible(env, site) && notOverriddenIn(site, symbol);\r\n        case Flags.PROTECTED:\r\n            return ((env.packge == symbol.packge()) || isProtectedAccessible(symbol, env.enclosingClass, site)) && isAccessible(env, site) && notOverriddenIn(site, symbol);\r\n        default:\r\n            throw new IllegalStateException();\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DirectCompactDoublesSketch.checkDirectMemCapacity",
	"Comment": "checks the validity of the direct memory capacity assuming n, k.",
	"Method": "void checkDirectMemCapacity(int k,long n,long memCapBytes){\r\n    final int reqBufBytes = getCompactStorageBytes(k, n);\r\n    if (memCapBytes < reqBufBytes) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Memory capacity too small: \" + memCapBytes + \" < \" + reqBufBytes);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.lexicon.english.LexicalVariantsTest.spellingVariantsInNPTest",
	"Comment": "check that spelling variants are preserved during realisation of nps",
	"Method": "void spellingVariantsInNPTest(){\r\n    WordElement asd = lexicon.getWord(\"Adams-Stokes disease\");\r\n    Assert.assertEquals(\"Adams-Stokes disease\", asd.getDefaultSpellingVariant());\r\n    NPPhraseSpec np = this.factory.createNounPhrase(asd);\r\n    np.setSpecifier(lexicon.getWord(\"the\"));\r\n    Assert.assertEquals(\"the Adams-Stokes disease\", this.realiser.realise(np).getRealisation());\r\n    asd.setDefaultSpellingVariant(\"Adams Stokes disease\");\r\n    Assert.assertEquals(\"Adams Stokes disease\", asd.getDefaultSpellingVariant());\r\n    Assert.assertEquals(\"the Adams Stokes disease\", this.realiser.realise(np).getRealisation());\r\n    np.setFeature(Feature.NUMBER, NumberAgreement.PLURAL);\r\n    Assert.assertEquals(\"the Adams Stokes disease\", this.realiser.realise(np).getRealisation());\r\n    asd.setDefaultInflectionalVariant(Inflection.REGULAR);\r\n    Assert.assertEquals(\"the Adams Stokes diseases\", this.realiser.realise(np).getRealisation());\r\n}"
}, {
	"Path": "org.apache.struts.util.PropertyMessageResources.setMode",
	"Comment": "set the compatibility mode this implementation uses for message lookup.",
	"Method": "void setMode(String mode){\r\n    String value = (mode == null ? null : mode.trim());\r\n    if (\"jstl\".equalsIgnoreCase(value)) {\r\n        this.mode = MODE_JSTL;\r\n        if (log.isDebugEnabled()) {\r\n            log.info(\"Operating in JSTL compatible mode [\" + mode + \"]\");\r\n        }\r\n    } else if (\"resource\".equalsIgnoreCase(value)) {\r\n        this.mode = MODE_RESOURCE_BUNDLE;\r\n        if (log.isDebugEnabled()) {\r\n            log.info(\"Operating in PropertyResourceBundle compatible mode [\" + mode + \"]\");\r\n        }\r\n    } else {\r\n        this.mode = MODE_DEFAULT;\r\n        if (log.isDebugEnabled()) {\r\n            log.info(\"Operating in Default mode [\" + mode + \"]\");\r\n        }\r\n    }\r\n}"
}, {
	"Path": "simplenlg.framework.WordElement.hasInflectionalVariant",
	"Comment": "check whether this word has a particular inflectional variant",
	"Method": "boolean hasInflectionalVariant(Inflection infl){\r\n    return this.inflVars.containsKey(infl);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.EmptyTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(boolean condition,boolean desired){\r\n    if (this.name == null) {\r\n        JspException e = new JspException(messages.getMessage(\"empty.noNameAttribute\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    Object value = null;\r\n    if (this.property == null) {\r\n        value = TagUtils.getInstance().lookup(pageContext, name, scope);\r\n    } else {\r\n        value = TagUtils.getInstance().lookup(pageContext, name, property, scope);\r\n    }\r\n    boolean empty = true;\r\n    if (value == null) {\r\n        empty = true;\r\n    } else if (value instanceof String) {\r\n        String strValue = (String) value;\r\n        empty = (strValue.length() < 1);\r\n    } else if (value instanceof Collection) {\r\n        Collection collValue = (Collection) value;\r\n        empty = collValue.isEmpty();\r\n    } else if (value instanceof Map) {\r\n        Map mapValue = (Map) value;\r\n        empty = mapValue.isEmpty();\r\n    } else if (value.getClass().isArray()) {\r\n        empty = Array.getLength(value) == 0;\r\n    } else {\r\n        empty = false;\r\n    }\r\n    return (empty == desired);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedMessagesNotPresentTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilStrutsModulesImpl.getModuleConfig",
	"Comment": "get the current moduleconfig.lookup in the request and do selectmodule if not found. the side effectis, that the moduleconfig object is set in the request if it was not present.",
	"Method": "ModuleConfig getModuleConfig(HttpServletRequest request,ServletContext servletContext){\r\n    ModuleConfig moduleConfig = ModuleUtils.getInstance().getModuleConfig(request);\r\n    if (moduleConfig == null) {\r\n        ModuleUtils.getInstance().selectModule(request, servletContext);\r\n        moduleConfig = ModuleUtils.getInstance().getModuleConfig(request);\r\n    }\r\n    return moduleConfig;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractSetOriginalURI.execute",
	"Comment": "check to original uri is set, and if not, set it for thisrequest.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    if (!actionCtx.getRequestScope().containsKey(Globals.ORIGINAL_URI_KEY)) {\r\n        setOriginalURI(actionCtx);\r\n    }\r\n    return (false);\r\n}"
}, {
	"Path": "org.apache.struts.validator.LazyValidatorForm.getMap",
	"Comment": "return the map containing the property values.provided so that properties can be access using jstl.",
	"Method": "Map getMap(){\r\n    return ((LazyDynaBean) dynaBean).getMap();\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.getInstance",
	"Comment": "returns a sketch instance of this class from the given srcmem,which must be a memory representation of this sketch class.",
	"Method": "ItemsSketch<T> getInstance(Memory srcMem,ArrayOfItemsSerDe<T> serDe){\r\n    final long pre0 = PreambleUtil.checkPreambleSize(srcMem);\r\n    final int maxPreLongs = Family.FREQUENCY.getMaxPreLongs();\r\n    final int preLongs = extractPreLongs(pre0);\r\n    final int serVer = extractSerVer(pre0);\r\n    final int familyID = extractFamilyID(pre0);\r\n    final int lgMaxMapSize = extractLgMaxMapSize(pre0);\r\n    final int lgCurMapSize = extractLgCurMapSize(pre0);\r\n    final boolean empty = (extractFlags(pre0) & EMPTY_FLAG_MASK) != 0;\r\n    final boolean preLongsEq1 = (preLongs == 1);\r\n    final boolean preLongsEqMax = (preLongs == maxPreLongs);\r\n    if (!preLongsEq1 && !preLongsEqMax) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: PreLongs must be 1 or \" + maxPreLongs + \": \" + preLongs);\r\n    }\r\n    if (serVer != SER_VER) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: Ser Ver must be \" + SER_VER + \": \" + serVer);\r\n    }\r\n    final int actFamID = Family.FREQUENCY.getID();\r\n    if (familyID != actFamID) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: FamilyID must be \" + actFamID + \": \" + familyID);\r\n    }\r\n    if (empty ^ preLongsEq1) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: (PreLongs == 1) ^ Empty == True.\");\r\n    }\r\n    if (empty) {\r\n        return new ItemsSketch(lgMaxMapSize, LG_MIN_MAP_SIZE);\r\n    }\r\n    final long[] preArr = new long[preLongs];\r\n    srcMem.getLongArray(0, preArr, 0, preLongs);\r\n    final ItemsSketch<T> fis = new ItemsSketch(lgMaxMapSize, lgCurMapSize);\r\n    fis.streamLength = 0;\r\n    fis.offset = preArr[3];\r\n    final int preBytes = preLongs << 3;\r\n    final int activeItems = extractActiveItems(preArr[1]);\r\n    final long[] countArray = new long[activeItems];\r\n    srcMem.getLongArray(preBytes, countArray, 0, activeItems);\r\n    final int itemsOffset = preBytes + (8 * activeItems);\r\n    final T[] itemArray = serDe.deserializeFromMemory(srcMem.region(itemsOffset, srcMem.getCapacity() - itemsOffset), activeItems);\r\n    for (int i = 0; i < activeItems; i++) {\r\n        fis.update(itemArray[i], countArray[i]);\r\n    }\r\n    fis.streamLength = preArr[2];\r\n    return fis;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesRequestProcessor.internalModuleRelativeInclude",
	"Comment": "do a module relative include to specified uri using request dispatcher.uri is relative to the current module. the real uri is computed byprefixing the module name.this method is used internally and is not part of the publicapi. it is advised to not use it in subclasses.",
	"Method": "void internalModuleRelativeInclude(String uri,HttpServletRequest request,HttpServletResponse response){\r\n    if (processTilesDefinition(uri, request, response)) {\r\n        return;\r\n    }\r\n    super.internalModuleRelativeInclude(uri, request, response);\r\n}"
}, {
	"Path": "net.csdn.jpa.enhancer.EntityEnhancer.processInheritanceEntity",
	"Comment": "jpa inheritance hierarchy is little complex. so we will copy all fields to leaf class and enhance leaf class",
	"Method": "void processInheritanceEntity(ModelClass modelClass){\r\n    CtClass ct = modelClass.originClass;\r\n    List<ModelClass> leafNodes = modelClass.findLeafNodes();\r\n    if (!ct.hasAnnotation(Inheritance.class) && Modifier.isAbstract(ct.getModifiers())) {\r\n        EnhancerHelper.createAnnotation(ct, MappedSuperclass.class, map());\r\n        ConstPool constPool = ct.getClassFile().getConstPool();\r\n        EnumMemberValue strategy = new EnumMemberValue(constPool);\r\n        strategy.setType(\"javax.persistence.InheritanceType\");\r\n        strategy.setValue(\"JOINED\");\r\n        EnhancerHelper.createAnnotation(ct, Inheritance.class, map(\"strategy\", strategy));\r\n    }\r\n    for (ModelClass mc : leafNodes) {\r\n        processLeafEntity(mc);\r\n        autoInjectGetSet(mc);\r\n    }\r\n    autoInjectGetSet(modelClass);\r\n    MappedSuperclass mappedSuperclass = (MappedSuperclass) ct.getAnnotation(MappedSuperclass.class);\r\n    if (mappedSuperclass != null) {\r\n        autoInhanceProperty(modelClass);\r\n        autoInjectGetSet(modelClass);\r\n        AssociationEnhancer associationEnhancer = new AssociationEnhancer(settings);\r\n        for (ModelClass mc : leafNodes) {\r\n            autoInjectProperty(mc);\r\n        }\r\n        associationEnhancer.enhance(list(modelClass));\r\n    } else {\r\n        Inheritance inheritance = (Inheritance) ct.getAnnotation(Inheritance.class);\r\n        if (inheritance.strategy().equals(InheritanceType.JOINED)) {\r\n        } else if (inheritance.strategy().equals(InheritanceType.SINGLE_TABLE)) {\r\n        } else if (inheritance.strategy().equals(InheritanceType.TABLE_PER_CLASS)) {\r\n            autoInjectProperty(modelClass);\r\n            for (ModelClass mc : leafNodes) {\r\n                autoInjectProperty(mc);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.setResponse",
	"Comment": "set the response associated with this isntance. session object isalso set or cleared.",
	"Method": "void setResponse(HttpServletResponse response){\r\n    this.response = response;\r\n}"
}, {
	"Path": "com.yahoo.sketches.Util.nanoSecToString",
	"Comment": "returns the given time in nanoseconds formatted as sec.msec usec nsec",
	"Method": "String nanoSecToString(long nS){\r\n    final long rem_nS = (long) (nS % 1000.0);\r\n    final long rem_uS = (long) ((nS / 1000.0) % 1000.0);\r\n    final long rem_mS = (long) ((nS / 1000000.0) % 1000.0);\r\n    final long sec = (long) (nS / 1000000000.0);\r\n    final String nSstr = zeroPad(Long.toString(rem_nS), 3);\r\n    final String uSstr = zeroPad(Long.toString(rem_uS), 3);\r\n    final String mSstr = zeroPad(Long.toString(rem_mS), 3);\r\n    return String.format(\"%d.%3s_%3s_%3s\", sec, mSstr, uSstr, nSstr);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyHelper.setName",
	"Comment": "sets the provided name into the request object for reference by theother nested tags.",
	"Method": "void setName(HttpServletRequest request,String name){\r\n    NestedReference nr = referenceInstance(request);\r\n    nr.setBeanName(name);\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.setExtends",
	"Comment": "set the path of the actionconfig that this object should inheritproperties from.",
	"Method": "void setExtends(String inherit){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    this.inherit = inherit;\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.getActionForm",
	"Comment": "retrieve and return the actionform bean associated withthis mapping, creating and stashing one if necessary.if there is noform bean associated with this mapping, return null.",
	"Method": "ActionForm getActionForm(){\r\n    ActionMapping mapping = getMapping();\r\n    if (mapping == null) {\r\n        return (null);\r\n    }\r\n    String attribute = mapping.getAttribute();\r\n    if (attribute == null) {\r\n        return (null);\r\n    }\r\n    ActionForm instance;\r\n    if (\"request\".equals(mapping.getScope())) {\r\n        instance = (ActionForm) this.request.getAttribute(attribute);\r\n    } else {\r\n        instance = (ActionForm) this.session.getAttribute(attribute);\r\n    }\r\n    return instance;\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testProcessActionConfigClassOverriddenSubConfigClass",
	"Comment": "test the case where the subconfig has already specified its own configclass.if the code still attempts to create a new instance, an errorwill be thrown.",
	"Method": "void testProcessActionConfigClassOverriddenSubConfigClass(){\r\n    moduleConfig.addActionConfig(baseAction);\r\n    ActionConfig customSub = new CustomActionConfigArg(\"/sub\");\r\n    customSub.setExtends(\"/index\");\r\n    moduleConfig.addActionConfig(customSub);\r\n    try {\r\n        actionServlet.processActionConfigClass(customSub, moduleConfig);\r\n    } catch (Exception e) {\r\n        fail(\"Exception should not be thrown\");\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptions.openNewOutputWriter",
	"Comment": "gets the output reader. if the output resource is null, first setit to console output.",
	"Method": "Writer openNewOutputWriter(Writer openNewOutputWriter,boolean appendOutput){\r\n    return outputResource.openNewOutputWriter(getOutputCharset(), appendOutput);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.getNormalizedRankError",
	"Comment": "gets the approximate rank error of this sketch normalized as a fraction between zero and one.",
	"Method": "double getNormalizedRankError(double getNormalizedRankError,boolean pmf,double getNormalizedRankError,int k,double getNormalizedRankError,int k,boolean pmf){\r\n    return Util.getNormalizedRankError(k, pmf);\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.getPrefix",
	"Comment": "retruns prefix used to match request parameter names to form beanproperty names, if any.",
	"Method": "String getPrefix(){\r\n    return (this.prefix);\r\n}"
}, {
	"Path": "schemacrawler.tools.text.operation.DataTextFormatter.handleAggregateOperationForTable",
	"Comment": "handles an aggregate operation, such as a count, for a given table.",
	"Method": "void handleAggregateOperationForTable(String title,ResultSet results){\r\n    long aggregate = 0;\r\n    try {\r\n        if (results.next()) {\r\n            aggregate = results.getLong(1);\r\n        }\r\n    } catch (final SQLException e) {\r\n        throw new SchemaCrawlerException(\"Could not obtain aggregate data\", e);\r\n    }\r\n    final String message = getMessage(aggregate);\r\n    formattingHelper.writeNameValueRow(title, message, Alignment.right);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hash.MurmurHash3Adaptor.asInteger",
	"Comment": "returns a deterministic uniform random integer with a minimum inclusive value of zero and amaximum exclusive value of n given the input data.the integer values produced are only as random as the murmurhash3 algorithm, which may beadequate for many applications. however, if you are looking for high guarantees of randomnessyou should turn to more sophisticated random generators such as mersenne twister or well19937calgorithms.",
	"Method": "int asInteger(long[] data,int n){\r\n    int t;\r\n    int cnt = 0;\r\n    long seed = 0;\r\n    if (n < 2) {\r\n        throw new SketchesArgumentException(\"Given value of n must be &gt; 1.\");\r\n    }\r\n    if (n > (1 << 30)) {\r\n        while (++cnt < 10000) {\r\n            final long[] h = MurmurHash3.hash(data, seed);\r\n            t = (int) (h[0] & INT_MASK);\r\n            if (t < n) {\r\n                return t;\r\n            }\r\n            t = (int) ((h[0] >>> 33));\r\n            if (t < n) {\r\n                return t;\r\n            }\r\n            t = (int) (h[1] & INT_MASK);\r\n            if (t < n) {\r\n                return t;\r\n            }\r\n            t = (int) ((h[1] >>> 33));\r\n            if (t < n) {\r\n                return t;\r\n            }\r\n            seed += PRIME;\r\n        }\r\n        throw new SketchesStateException(\"Internal Error: Failed to find integer &lt; n within 10000 iterations.\");\r\n    }\r\n    final long mask = ceilingPowerOf2(n) - 1;\r\n    while (++cnt < 10000) {\r\n        final long[] h = MurmurHash3.hash(data, seed);\r\n        t = (int) (h[0] & mask);\r\n        if (t < n) {\r\n            return t;\r\n        }\r\n        t = (int) ((h[0] >>> 33) & mask);\r\n        if (t < n) {\r\n            return t;\r\n        }\r\n        t = (int) (h[1] & mask);\r\n        if (t < n) {\r\n            return t;\r\n        }\r\n        t = (int) ((h[1] >>> 33) & mask);\r\n        if (t < n) {\r\n            return t;\r\n        }\r\n        seed += PRIME;\r\n    }\r\n    throw new SketchesStateException(\"Internal Error: Failed to find integer &lt; n within 10000 iterations.\");\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesQuickSelectSketch.merge",
	"Comment": "not sufficient by itself without keeping track of theta of another sketch",
	"Method": "void merge(long key,double[] values){\r\n    setNotEmpty();\r\n    if (key < theta_) {\r\n        final int index = findOrInsertKey(key);\r\n        if (index < 0) {\r\n            incrementCount();\r\n            setValues(~index, values);\r\n        } else {\r\n            updateValues(index, values);\r\n        }\r\n        rebuildIfNeeded();\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtil.createDefinitionsFactory",
	"Comment": "create definition factory from specified configuration object.create a configurabledefinitionsfactory and initialize it with the configurationobject. this later can contain the factory classname to use.factory is made accessible from tags.fallback of several factory creation methods.",
	"Method": "DefinitionsFactory createDefinitionsFactory(ServletContext servletContext,DefinitionsFactoryConfig factoryConfig){\r\n    return tilesUtilImpl.createDefinitionsFactory(servletContext, factoryConfig);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionMessages.size",
	"Comment": "return the number of messages associated with the specifiedproperty.",
	"Method": "int size(int size,String property){\r\n    ActionMessageItem item = (ActionMessageItem) messages.get(property);\r\n    return (item == null) ? 0 : item.getList().size();\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentContext.addAll",
	"Comment": "add all attributes to this context.copies all of the mappings from the specified attribute map to this context.new attribute mappings will replace any mappings that this context had for any of the keyscurrently in the specified attribute map.",
	"Method": "void addAll(Map newAttributes){\r\n    if (attributes == null) {\r\n        attributes = new HashMap(newAttributes);\r\n        return;\r\n    }\r\n    attributes.putAll(newAttributes);\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ReversePurgeLongHashMap.purge",
	"Comment": "this function is called when a key is processed that is not currently assigned a counter, andall the counters are in use. this function estimates the median of the counters in the sketchvia sampling, decrements all counts by this estimate, throws out all counters that are nolonger positive, and increments offset accordingly.",
	"Method": "long purge(int sampleSize){\r\n    final int limit = Math.min(sampleSize, getNumActive());\r\n    int numSamples = 0;\r\n    int i = 0;\r\n    final long[] samples = new long[limit];\r\n    while (numSamples < limit) {\r\n        if (isActive(i)) {\r\n            samples[numSamples] = values[i];\r\n            numSamples++;\r\n        }\r\n        i++;\r\n    }\r\n    final long val = QuickSelect.select(samples, 0, numSamples - 1, limit / 2);\r\n    adjustAllValuesBy(-1 * val);\r\n    keepOnlyPositiveCounts();\r\n    return val;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUpdatableSketchBuilder.setSeed",
	"Comment": "sets the long seed value that is required by the hashing function.",
	"Method": "ArrayOfDoublesUpdatableSketchBuilder setSeed(long seed){\r\n    seed_ = seed;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.addExceptionConfig",
	"Comment": "add a new exceptionconfig instance to the setassociated with this action.",
	"Method": "void addExceptionConfig(ExceptionConfig config){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    exceptions.put(config.getType(), config);\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcCompression.compressHybridFlavor",
	"Comment": "of a pinned sketch before compressing it. hence the name hybrid.",
	"Method": "void compressHybridFlavor(CompressedState target,CpcSketch source){\r\n    final int srcK = 1 << source.lgK;\r\n    final PairTable srcPairTable = source.pairTable;\r\n    final int srcNumPairs = srcPairTable.getNumPairs();\r\n    final int[] srcPairArr = PairTable.unwrappingGetItems(srcPairTable, srcNumPairs);\r\n    introspectiveInsertionSort(srcPairArr, 0, srcNumPairs - 1);\r\n    final byte[] srcSlidingWindow = source.slidingWindow;\r\n    final int srcWindowOffset = source.windowOffset;\r\n    final long srcNumCoupons = source.numCoupons;\r\n    assert (srcSlidingWindow != null);\r\n    assert (srcWindowOffset == 0);\r\n    final long numPairs = srcNumCoupons - srcNumPairs;\r\n    assert numPairs < Integer.MAX_VALUE;\r\n    final int numPairsFromArray = (int) numPairs;\r\n    assert (numPairsFromArray + srcNumPairs) == srcNumCoupons;\r\n    final int[] allPairs = trickyGetPairsFromWindow(srcSlidingWindow, srcK, numPairsFromArray, srcNumPairs);\r\n    // note the overlapping subarray trick\r\n    PairTable.merge(// note the overlapping subarray trick\r\n    srcPairArr, // note the overlapping subarray trick\r\n    0, // note the overlapping subarray trick\r\n    srcNumPairs, // note the overlapping subarray trick\r\n    allPairs, // note the overlapping subarray trick\r\n    srcNumPairs, // note the overlapping subarray trick\r\n    numPairsFromArray, allPairs, 0);\r\n    compressTheSurprisingValues(target, source, allPairs, (int) srcNumCoupons);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.DoubleSummary.fromMemory",
	"Comment": "creates an instance of the doublesummary given a serialized representation",
	"Method": "DeserializeResult<DoubleSummary> fromMemory(Memory mem){\r\n    return new DeserializeResult<DoubleSummary>(new DoubleSummary(mem.getDouble(VALUE_DOUBLE), Mode.values()[mem.getByte(MODE_BYTE)]), SERIALIZED_SIZE_BYTES);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.process",
	"Comment": "perform the standard request processing for this request, and createthe corresponding response.",
	"Method": "void process(HttpServletRequest request,HttpServletResponse response){\r\n    ModuleUtils.getInstance().selectModule(request, getServletContext());\r\n    ModuleConfig config = getModuleConfig(request);\r\n    RequestProcessor processor = getProcessorForModule(config);\r\n    if (processor == null) {\r\n        processor = getRequestProcessor(config);\r\n    }\r\n    processor.process(request, response);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.getInternal",
	"Comment": "return the messageresources instance containing ourinternal message strings.",
	"Method": "MessageResources getInternal(){\r\n    return (this.internal);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedGreaterThanTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.mock.MockMultipartRequestHandler.getTextElements",
	"Comment": "this method is called on to retrieve all the textinput elements of the request.",
	"Method": "Hashtable getTextElements(){\r\n    return this.elements;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.UseAttributeTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String classname = data.getAttributeString(\"classname\");\r\n    if (classname == null)\r\n        classname = \"java.lang.Object\";\r\n    String id = data.getAttributeString(\"id\");\r\n    if (id == null)\r\n        id = data.getAttributeString(\"name\");\r\n    return new VariableInfo[] { new VariableInfo(id, classname, true, VariableInfo.AT_END) };\r\n}"
}, {
	"Path": "net.csdn.common.io.Streams.copyToString",
	"Comment": "copy the contents of the given reader into a string.closes the reader when done.",
	"Method": "String copyToString(Reader in){\r\n    StringWriter out = new StringWriter();\r\n    copy(in, out);\r\n    return out.toString();\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.processActionCreate",
	"Comment": "return an action instance that will be used to processthe current request, creating a new one if necessary.",
	"Method": "Action processActionCreate(HttpServletRequest request,HttpServletResponse response,ActionMapping mapping){\r\n    String className = mapping.getType();\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\" Looking for Action instance for class \" + className);\r\n    }\r\n    Action instance;\r\n    synchronized (actions) {\r\n        instance = (Action) actions.get(className);\r\n        if (instance != null) {\r\n            if (log.isTraceEnabled()) {\r\n                log.trace(\"  Returning existing Action instance\");\r\n            }\r\n            return (instance);\r\n        }\r\n        if (log.isTraceEnabled()) {\r\n            log.trace(\"  Creating new Action instance\");\r\n        }\r\n        try {\r\n            instance = (Action) RequestUtils.applicationInstance(className);\r\n        } catch (Exception e) {\r\n            log.error(getInternal().getMessage(\"actionCreate\", mapping.getPath()), e);\r\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, getInternal().getMessage(\"actionCreate\", mapping.getPath()));\r\n            return (null);\r\n        }\r\n        actions.put(className, instance);\r\n    }\r\n    if (instance.getServlet() == null) {\r\n        instance.setServlet(this.servlet);\r\n    }\r\n    return (instance);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesPlugin.setTilesUtilImplClassname",
	"Comment": "set tiles util implemention classname.if this property is set, the flag moduleaware will not be used anymore.",
	"Method": "void setTilesUtilImplClassname(String tilesUtilImplClassname){\r\n    this.tilesUtilImplClassname = tilesUtilImplClassname;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.Util.computeTotalLevels",
	"Comment": "computes the total number of logarithmic levels above the base buffer given the bitpattern.",
	"Method": "int computeTotalLevels(long bitPattern){\r\n    return hiBitPos(bitPattern) + 1;\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.inheritFormProperties",
	"Comment": "compare the form properties of this bean with that of the given andcopy those that are not present.",
	"Method": "void inheritFormProperties(FormBeanConfig config){\r\n    throwIfConfigured();\r\n    FormPropertyConfig[] baseFpcs = config.findFormPropertyConfigs();\r\n    for (int i = 0; i < baseFpcs.length; i++) {\r\n        FormPropertyConfig baseFpc = baseFpcs[i];\r\n        FormPropertyConfig prop = this.findFormPropertyConfig(baseFpc.getName());\r\n        if (prop == null) {\r\n            prop = (FormPropertyConfig) RequestUtils.applicationInstance(baseFpc.getClass().getName());\r\n            BeanUtils.copyProperties(prop, baseFpc);\r\n            this.addFormPropertyConfig(prop);\r\n            prop.setProperties(baseFpc.copyProperties());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "simplenlg.morphology.english.DeterminerAgrHelper.checkNum",
	"Comment": "returns true if the number starts with 8, 11 or 18 and is\teither less than 100 or greater than 1000, but excluding 180,000 etc.",
	"Method": "boolean checkNum(int num){\r\n    boolean needsAn = false;\r\n    if (num == 11 || num == 18 || num == 8 || (num >= 80 && num < 90)) {\r\n        needsAn = true;\r\n    } else if (num > 1000) {\r\n        num = Math.round(num / 1000);\r\n        needsAn = checkNum(num);\r\n    }\r\n    return needsAn;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseInputTag.doEndTag",
	"Comment": "process the end of this tag.the default implementation does nothing.",
	"Method": "int doEndTag(){\r\n    return (EVAL_PAGE);\r\n}"
}, {
	"Path": "org.apache.struts.config.ModuleConfigFactory.setFactoryClass",
	"Comment": "set the fully qualified class name that is used formoduleconfigfactory instances.",
	"Method": "void setFactoryClass(String factoryClass){\r\n    ModuleConfigFactory.factoryClass = factoryClass;\r\n    ModuleConfigFactory.clazz = null;\r\n}"
}, {
	"Path": "net.csdn.common.Strings.commaDelimitedListToSet",
	"Comment": "convenience method to convert a csv string list to a set.note that this will suppress duplicates.",
	"Method": "Set<String> commaDelimitedListToSet(String str){\r\n    Set<String> set = new TreeSet<String>();\r\n    String[] tokens = commaDelimitedListToStringArray(str);\r\n    set.addAll(Arrays.asList(tokens));\r\n    return set;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.update",
	"Comment": "randomly decide whether or not to include an item in the sample set.",
	"Method": "void update(long item){\r\n    if (itemsSeen_ == MAX_ITEMS_SEEN) {\r\n        throw new SketchesStateException(\"Sketch has exceeded capacity for total items seen: \" + MAX_ITEMS_SEEN);\r\n    }\r\n    if (itemsSeen_ < reservoirSize_) {\r\n        if (itemsSeen_ >= currItemsAlloc_) {\r\n            growReservoir();\r\n        }\r\n        assert itemsSeen_ < currItemsAlloc_;\r\n        data_[(int) itemsSeen_] = item;\r\n        ++itemsSeen_;\r\n    } else {\r\n        ++itemsSeen_;\r\n        if ((SamplingUtil.rand.nextDouble() * itemsSeen_) < reservoirSize_) {\r\n            final int newSlot = SamplingUtil.rand.nextInt(reservoirSize_);\r\n            data_[newSlot] = item;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.QuantilesHelper.convertToPrecedingCummulative",
	"Comment": "convert the weights into totals of the weights preceding each item",
	"Method": "long convertToPrecedingCummulative(long[] array){\r\n    long subtotal = 0;\r\n    for (int i = 0; i < array.length; i++) {\r\n        final long newSubtotal = subtotal + array[i];\r\n        array[i] = subtotal;\r\n        subtotal = newSubtotal;\r\n    }\r\n    return subtotal;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.grabHeadVerb",
	"Comment": "grabs the head verb of the verb phrase and sets it to future tense if the\tphrase is future tense. it also turns off negation if the group has a\tmodal.",
	"Method": "NLGElement grabHeadVerb(PhraseElement phrase,Tense tenseValue,boolean hasModal){\r\n    NLGElement frontVG = phrase.getHead();\r\n    if (frontVG != null) {\r\n        if (frontVG instanceof WordElement) {\r\n            frontVG = new InflectedWordElement((WordElement) frontVG);\r\n        }\r\n        if (tenseValue != null) {\r\n            frontVG.setFeature(Feature.TENSE, tenseValue);\r\n        }\r\n        if (hasModal) {\r\n            frontVG.setFeature(Feature.NEGATED, false);\r\n        }\r\n    }\r\n    return frontVG;\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.getReturnNull",
	"Comment": "indicates that a null is returned instead of an errormessage string if an unknown locale or key is requested.",
	"Method": "boolean getReturnNull(){\r\n    return (this.returnNull);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.advanceEpoch",
	"Comment": "advances the epoch while there is no background propagationthis ensures a propagation invoked before the reset cannot affect the sketch after the resetis completed.",
	"Method": "void advanceEpoch(){\r\n    startPropagation();\r\n    epoch_++;\r\n    endPropagation(null);\r\n}"
}, {
	"Path": "org.apache.struts.util.WildcardHelper.lastIndexOfArray",
	"Comment": "get the offset of a last occurance of an int array within a char array. this method return the index in d of the last occurrence afterdpos of that part of array specified by r, starting at rpos andterminating at rend.",
	"Method": "int lastIndexOfArray(int[] r,int rpos,int rend,char[] d,int dpos){\r\n    if (rend < rpos) {\r\n        throw new IllegalArgumentException(\"rend < rpos\");\r\n    }\r\n    if (rend == rpos) {\r\n        return (d.length);\r\n    }\r\n    if ((rend - rpos) == 1) {\r\n        for (int x = d.length - 1; x > dpos; x--) {\r\n            if (r[rpos] == d[x]) {\r\n                return (x);\r\n            }\r\n        }\r\n    }\r\n    int l = d.length - (rend - rpos);\r\n    while (l >= dpos) {\r\n        int y = l;\r\n        for (int x = rpos; x <= rend; x++) {\r\n            if (x == rend) {\r\n                return (l);\r\n            }\r\n            if (r[x] != d[y++]) {\r\n                break;\r\n            }\r\n        }\r\n        l--;\r\n    }\r\n    return (-1);\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExceptionCatcher.getCatalogName",
	"Comment": "return the name of the catalog in which to performlookups, or null for the default catalog.",
	"Method": "String getCatalogName(){\r\n    return (this.catalogName);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.processExceptionConfigClass",
	"Comment": "checks if the current exceptionconfig is using the correct classbased on the class of its configuration ancestor. if actionconfig isprovided, then this method will process the exceptionconfig as partof that actionconfig.if actionconfig is null, the exceptionconfigwill be processed as a global forward.",
	"Method": "ExceptionConfig processExceptionConfigClass(ExceptionConfig exceptionConfig,ModuleConfig moduleConfig,ActionConfig actionConfig){\r\n    String ancestor = exceptionConfig.getExtends();\r\n    if (ancestor == null) {\r\n        return exceptionConfig;\r\n    }\r\n    ExceptionConfig baseConfig = null;\r\n    if (actionConfig != null) {\r\n        baseConfig = actionConfig.findExceptionConfig(ancestor);\r\n    }\r\n    if (baseConfig == null) {\r\n        baseConfig = moduleConfig.findExceptionConfig(ancestor);\r\n    }\r\n    if (baseConfig == null) {\r\n        throw new UnavailableException(\"Unable to find \" + \"exception config '\" + ancestor + \"' to extend.\");\r\n    }\r\n    if (exceptionConfig.getClass().equals(ExceptionConfig.class)) {\r\n        if (!baseConfig.getClass().equals(exceptionConfig.getClass())) {\r\n            ExceptionConfig newExceptionConfig = null;\r\n            String baseConfigClassName = baseConfig.getClass().getName();\r\n            try {\r\n                newExceptionConfig = (ExceptionConfig) RequestUtils.applicationInstance(baseConfigClassName);\r\n                BeanUtils.copyProperties(newExceptionConfig, exceptionConfig);\r\n            } catch (Exception e) {\r\n                handleCreationException(baseConfigClassName, e);\r\n            }\r\n            if (actionConfig != null) {\r\n                actionConfig.removeExceptionConfig(exceptionConfig);\r\n                actionConfig.addExceptionConfig(newExceptionConfig);\r\n            } else {\r\n                moduleConfig.removeExceptionConfig(exceptionConfig);\r\n                moduleConfig.addExceptionConfig(newExceptionConfig);\r\n            }\r\n            exceptionConfig = newExceptionConfig;\r\n        }\r\n    }\r\n    return exceptionConfig;\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcSketch.getLowerBound",
	"Comment": "returns the best estimate of the lower bound of the confidence interval given kappa,the number of standard deviations from the mean.",
	"Method": "double getLowerBound(int kappa){\r\n    if (mergeFlag) {\r\n        return CpcConfidence.getIconConfidenceLB(lgK, numCoupons, kappa);\r\n    }\r\n    return CpcConfidence.getHipConfidenceLB(lgK, numCoupons, hipEstAccum, kappa);\r\n}"
}, {
	"Path": "org.sonar.java.bytecode.loader.SquidClassLoader.close",
	"Comment": "closes this class loader, so that it can no longer be used to load new classes or resources.any classes or resources that are already loaded, are still accessible.if class loader is already closed, then invoking this method has no effect.",
	"Method": "void close(){\r\n    for (Loader loader : loaders) {\r\n        loader.close();\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.estimateSubsetSum",
	"Comment": "computes an estimated subset sum from the entire stream for objects matching a givenpredicate. provides a lower bound, estimate, and upper bound using a target of 2 standarddeviations.this is technically a heuristic method, and tries to err on the conservative side.",
	"Method": "SampleSubsetSummary estimateSubsetSum(Predicate<T> predicate){\r\n    if (itemsSeen_ == 0) {\r\n        return new SampleSubsetSummary(0.0, 0.0, 0.0, 0.0);\r\n    }\r\n    final long numSamples = getNumSamples();\r\n    final double samplingRate = numSamples / (double) itemsSeen_;\r\n    assert samplingRate >= 0.0;\r\n    assert samplingRate <= 1.0;\r\n    int trueCount = 0;\r\n    for (int i = 0; i < numSamples; ++i) {\r\n        if (predicate.test(data_.get(i))) {\r\n            ++trueCount;\r\n        }\r\n    }\r\n    if (itemsSeen_ <= reservoirSize_) {\r\n        return new SampleSubsetSummary(trueCount, trueCount, trueCount, numSamples);\r\n    }\r\n    final double lbTrueFraction = pseudoHypergeometricLBonP(numSamples, trueCount, samplingRate);\r\n    final double estimatedTrueFraction = (1.0 * trueCount) / numSamples;\r\n    final double ubTrueFraction = pseudoHypergeometricUBonP(numSamples, trueCount, samplingRate);\r\n    return new SampleSubsetSummary(itemsSeen_ * lbTrueFraction, itemsSeen_ * estimatedTrueFraction, itemsSeen_ * ubTrueFraction, itemsSeen_);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsUnion.toByteArray",
	"Comment": "returns a byte array representation of this union. this method should be used when the arrayelements are subclasses of a common base class.",
	"Method": "byte[] toByteArray(ArrayOfItemsSerDe<T> serDe,byte[] toByteArray,ArrayOfItemsSerDe<T> serDe,Class<?> clazz){\r\n    final int preLongs, outBytes;\r\n    final boolean empty = gadget_.getNumSamples() == 0;\r\n    final byte[] gadgetBytes = (empty ? null : gadget_.toByteArray(serDe, clazz));\r\n    if (empty) {\r\n        preLongs = Family.VAROPT_UNION.getMinPreLongs();\r\n        outBytes = 8;\r\n    } else {\r\n        preLongs = Family.VAROPT_UNION.getMaxPreLongs();\r\n        outBytes = (preLongs << 3) + gadgetBytes.length;\r\n    }\r\n    final byte[] outArr = new byte[outBytes];\r\n    final WritableMemory mem = WritableMemory.wrap(outArr);\r\n    PreambleUtil.insertPreLongs(mem, preLongs);\r\n    PreambleUtil.insertSerVer(mem, SER_VER);\r\n    PreambleUtil.insertFamilyID(mem, Family.VAROPT_UNION.getID());\r\n    if (empty) {\r\n        PreambleUtil.insertFlags(mem, EMPTY_FLAG_MASK);\r\n    } else {\r\n        PreambleUtil.insertFlags(mem, 0);\r\n    }\r\n    PreambleUtil.insertMaxK(mem, maxK_);\r\n    if (!empty) {\r\n        PreambleUtil.insertN(mem, n_);\r\n        PreambleUtil.insertOuterTauNumerator(mem, outerTauNumer);\r\n        PreambleUtil.insertOuterTauDenominator(mem, outerTauDenom);\r\n        final int preBytes = preLongs << 3;\r\n        mem.putByteArray(preBytes, gadgetBytes, 0, gadgetBytes.length);\r\n    }\r\n    return outArr;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.BaseHllSketch.getSerializationVersion",
	"Comment": "returns the current serialization version of the given memory.",
	"Method": "int getSerializationVersion(int getSerializationVersion,Memory mem){\r\n    return mem.getByte(PreambleUtil.SER_VER_BYTE) & 0XFF;\r\n}"
}, {
	"Path": "org.jf.dexlib2.analysis.ClassProto.getDirectInterfaces",
	"Comment": "gets the interfaces directly implemented by this class, or the interfaces they transitively implement.this does not include any interfaces that are only implemented by a superclass",
	"Method": "Iterable<ClassDef> getDirectInterfaces(){\r\n    Iterable<ClassDef> directInterfaces = FluentIterable.from(getInterfaces().values()).filter(Predicates.notNull());\r\n    if (!interfacesFullyResolved) {\r\n        throw new UnresolvedClassException(\"Interfaces for class %s not fully resolved\", getType());\r\n    }\r\n    return directInterfaces;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.NotEmptyTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(false));\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.initModuleConfig",
	"Comment": "initialize the module configuration information for the specifiedmodule.",
	"Method": "ModuleConfig initModuleConfig(String prefix,String paths){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Initializing module path '\" + prefix + \"' configuration from '\" + paths + \"'\");\r\n    }\r\n    ModuleConfigFactory factoryObject = ModuleConfigFactory.createFactory();\r\n    ModuleConfig config = factoryObject.createModuleConfig(prefix);\r\n    Digester digester = initConfigDigester();\r\n    List urls = splitAndResolvePaths(paths);\r\n    URL url;\r\n    for (Iterator i = urls.iterator(); i.hasNext(); ) {\r\n        url = (URL) i.next();\r\n        digester.push(config);\r\n        this.parseModuleConfigFile(digester, url);\r\n    }\r\n    getServletContext().setAttribute(Globals.MODULE_KEY + config.getPrefix(), config);\r\n    return config;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.IncludeTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), \"java.lang.String\", true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "org.jf.util.SparseArray.get",
	"Comment": "gets the object mapped from the specified key, or the specified objectif no such mapping has been made.",
	"Method": "E get(int key,E get,int key,E valueIfKeyNotFound){\r\n    int i = binarySearch(mKeys, 0, mSize, key);\r\n    if (i < 0 || mValues[i] == DELETED) {\r\n        return valueIfKeyNotFound;\r\n    } else {\r\n        return (E) mValues[i];\r\n    }\r\n}"
}, {
	"Path": "simplenlg.framework.StringElement.getChildren",
	"Comment": "the string element contains no children so this method will always return\tan empty list.",
	"Method": "List<NLGElement> getChildren(){\r\n    return new ArrayList<NLGElement>();\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsUnion.newInstance",
	"Comment": "creates an empty union with a maximum reservoir capacity of size k.",
	"Method": "ReservoirItemsUnion<T> newInstance(int maxK){\r\n    return new ReservoirItemsUnion(maxK);\r\n}"
}, {
	"Path": "oauth.signpost.AbstractOAuthConsumer.collectHeaderParameters",
	"Comment": "collects oauth authorization header parameters as per oauth core 1.0 specsection 9.1.1",
	"Method": "void collectHeaderParameters(HttpRequest request,HttpParameters out){\r\n    HttpParameters headerParams = OAuth.oauthHeaderToParamsMap(request.getHeader(OAuth.HTTP_AUTHORIZATION_HEADER));\r\n    out.putAll(headerParams, false);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.getNumSamples",
	"Comment": "returns the current number of items in the reservoir, which may be smaller than the reservoircapacity.",
	"Method": "int getNumSamples(){\r\n    return (int) Math.min(reservoirSize_, itemsSeen_);\r\n}"
}, {
	"Path": "net.csdn.common.scan.component.ClasspathUrlFinder.findClassPaths",
	"Comment": "uses the java.class.path system property to obtain a list of urls that represent the classpathpaths is used as a filter to only include paths that have the specific relative file within it",
	"Method": "URL[] findClassPaths(URL[] findClassPaths,String paths){\r\n    ArrayList<URL> list = new ArrayList<URL>();\r\n    String classpath = System.getProperty(\"java.class.path\");\r\n    StringTokenizer tokenizer = new StringTokenizer(classpath, File.pathSeparator);\r\n    for (int i = 0; i < paths.length; i++) {\r\n        paths[i] = paths[i].trim();\r\n    }\r\n    while (tokenizer.hasMoreTokens()) {\r\n        String path = tokenizer.nextToken().trim();\r\n        boolean found = false;\r\n        for (String wantedPath : paths) {\r\n            if (path.endsWith(File.separator + wantedPath)) {\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found)\r\n            continue;\r\n        File fp = new File(path);\r\n        if (!fp.exists())\r\n            throw new RuntimeException(\"File in java.class.path does not exists: \" + fp);\r\n        try {\r\n            list.add(fp.toURL());\r\n        } catch (MalformedURLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    return list.toArray(new URL[list.size()]);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.DoubleSummaryFactory.fromMemory",
	"Comment": "this is deprecated and exists here just to test compatibility with previous serialization format.in the current serial version of sketches factories are not serialized.creates an instance of the doublesummaryfactory given a serialized representation",
	"Method": "DeserializeResult<DoubleSummaryFactory> fromMemory(Memory mem){\r\n    return new DeserializeResult<DoubleSummaryFactory>(new DoubleSummaryFactory(Mode.values()[mem.getByte(MODE_BYTE)]), SERIALIZED_SIZE_BYTES);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.IterateTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    VariableInfo[] variables = new VariableInfo[2];\r\n    int counter = 0;\r\n    String id = data.getAttributeString(\"id\");\r\n    String type = data.getAttributeString(\"type\");\r\n    if (id != null) {\r\n        if (type == null) {\r\n            type = \"java.lang.Object\";\r\n        }\r\n        variables[counter++] = new VariableInfo(data.getAttributeString(\"id\"), type, true, VariableInfo.NESTED);\r\n    }\r\n    String indexId = data.getAttributeString(\"indexId\");\r\n    if (indexId != null) {\r\n        variables[counter++] = new VariableInfo(indexId, \"java.lang.Integer\", true, VariableInfo.NESTED);\r\n    }\r\n    VariableInfo[] result;\r\n    if (counter > 0) {\r\n        result = new VariableInfo[counter];\r\n        System.arraycopy(variables, 0, result, 0, counter);\r\n    } else {\r\n        result = new VariableInfo[0];\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.sameSurfaceSubjects",
	"Comment": "check whether the sentences have the same surface subjects, that\tis, they are either all active and have the same subjects, or all passive\tand have the same passive raising subjects.",
	"Method": "boolean sameSurfaceSubjects(NLGElement sentences){\r\n    return PhraseChecker.allActive(sentences) && PhraseChecker.sameSubjects(sentences) || PhraseChecker.allPassive(sentences);\r\n}"
}, {
	"Path": "com.yahoo.sketches.ArrayOfBooleansSerDe.computeBytesNeeded",
	"Comment": "computes number of bytes needed for packed bit encoding of the array of booleans. roundspartial bytes up to return a whole number of bytes.",
	"Method": "int computeBytesNeeded(int arrayLength){\r\n    return (arrayLength >>> 3) + ((arrayLength & 0x7) > 0 ? 1 : 0);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.findActionConfigId",
	"Comment": "returns the action configuration for the specifed actionaction identifier.",
	"Method": "ActionConfig findActionConfigId(String actionId){\r\n    if (actionId != null) {\r\n        return (ActionConfig) this.actionConfigIds.get(actionId);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.PairTable.rebuild",
	"Comment": "rebuilds to a larger size. numitems and validbits remain unchanged.",
	"Method": "PairTable rebuild(int newLgSizeInts){\r\n    checkLgSizeInts(newLgSizeInts);\r\n    final int newSize = 1 << newLgSizeInts;\r\n    final int oldSize = 1 << lgSizeInts;\r\n    rtAssert(newSize > numPairs);\r\n    final int[] oldSlotsArr = slotsArr;\r\n    slotsArr = new int[newSize];\r\n    Arrays.fill(slotsArr, -1);\r\n    lgSizeInts = newLgSizeInts;\r\n    for (int i = 0; i < oldSize; i++) {\r\n        final int item = oldSlotsArr[i];\r\n        if (item != -1) {\r\n            mustInsert(this, item);\r\n        }\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketch.getMinValue",
	"Comment": "returns the min value of the stream.if the sketch is empty this returns nan.",
	"Method": "float getMinValue(){\r\n    return minValue_;\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptionsBuilder.withInputResourceName",
	"Comment": "sets the name of the input resource, first from a file, failingwhich from the classpath. it is important to note that the inputencoding should be available at this point.",
	"Method": "OutputOptionsBuilder withInputResourceName(String inputResourceName){\r\n    requireNonNull(inputResourceName, \"No input resource name provided\");\r\n    inputResource = createInputResource(inputResourceName);\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.PreambleUtil.getAndCheckPreLongs",
	"Comment": "checks memory for capacity to hold the preamble and returns the extracted prelongs.",
	"Method": "int getAndCheckPreLongs(Memory mem){\r\n    final long cap = mem.getCapacity();\r\n    if (cap < 8) {\r\n        throwNotBigEnough(cap, 8);\r\n    }\r\n    final int preLongs = mem.getByte(0) & 0x3F;\r\n    final int required = Math.max(preLongs << 3, 8);\r\n    if (cap < required) {\r\n        throwNotBigEnough(cap, required);\r\n    }\r\n    return preLongs;\r\n}"
}, {
	"Path": "org.apache.struts.util.RequestUtils.requestURL",
	"Comment": "return the url representing the current request. this is equivalentto httpservletrequest.getrequesturl in servlet 2.3.",
	"Method": "URL requestURL(HttpServletRequest request){\r\n    StringBuffer url = requestToServerUriStringBuffer(request);\r\n    return (new URL(url.toString()));\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of a varoptitemssketch.",
	"Method": "String toString(String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.preambleToString(mem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.getMaximumMapCapacity",
	"Comment": "returns the maximum number of counters the sketch is configured to support.",
	"Method": "int getMaximumMapCapacity(){\r\n    return (int) ((1 << lgMaxMapSize) * ReversePurgeLongHashMap.getLoadFactor());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.ForwardTag.doEndTag",
	"Comment": "look up the actionforward associated with the specified name, andperform a forward or redirect to that path as indicated.",
	"Method": "int doEndTag(){\r\n    ActionForward forward = null;\r\n    ModuleConfig config = TagUtils.getInstance().getModuleConfig(pageContext);\r\n    if (config != null) {\r\n        forward = (ActionForward) config.findForwardConfig(name);\r\n    }\r\n    if (forward == null) {\r\n        JspException e = new JspException(messages.getMessage(\"forward.lookup\", name));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    String path = forward.getPath();\r\n    path = config.getPrefix() + path;\r\n    if (forward.getRedirect()) {\r\n        this.doRedirect(path);\r\n    } else {\r\n        this.doForward(path);\r\n    }\r\n    return (SKIP_PAGE);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedCheckboxTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.util.ResponseUtils.filter",
	"Comment": "filter the specified string for characters that are senstive to htmlinterpreters, returning the string with these characters replaced bythe corresponding character entities.",
	"Method": "String filter(String value){\r\n    if ((value == null) || (value.length() == 0)) {\r\n        return value;\r\n    }\r\n    StringBuffer result = null;\r\n    String filtered = null;\r\n    for (int i = 0; i < value.length(); i++) {\r\n        filtered = null;\r\n        switch(value.charAt(i)) {\r\n            case '<':\r\n                filtered = \"&lt;\";\r\n                break;\r\n            case '>':\r\n                filtered = \"&gt;\";\r\n                break;\r\n            case '&':\r\n                filtered = \"&amp;\";\r\n                break;\r\n            case '\"':\r\n                filtered = \"&quot;\";\r\n                break;\r\n            case '\\'':\r\n                filtered = \"&#39;\";\r\n                break;\r\n        }\r\n        if (result == null) {\r\n            if (filtered != null) {\r\n                result = new StringBuffer(value.length() + 50);\r\n                if (i > 0) {\r\n                    result.append(value.substring(0, i));\r\n                }\r\n                result.append(filtered);\r\n            }\r\n        } else {\r\n            if (filtered == null) {\r\n                result.append(value.charAt(i));\r\n            } else {\r\n                result.append(filtered);\r\n            }\r\n        }\r\n    }\r\n    return (result == null) ? value : result.toString();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.MultiboxTag.doAfterBody",
	"Comment": "save the body contents of this tag as the constant that we will bereturning.",
	"Method": "int doAfterBody(){\r\n    if (bodyContent != null) {\r\n        this.constant = bodyContent.getString().trim();\r\n    }\r\n    if (\"\".equals(this.constant)) {\r\n        this.constant = null;\r\n    }\r\n    return SKIP_BODY;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.HeapAlphaSketch.getR",
	"Comment": "computes whether there have been 0, 1, or 2 or more actual insertions into the cache in anumerically safe way.",
	"Method": "int getR(double theta,double alpha,double p){\r\n    final double split1 = (p * (alpha + 1.0)) / 2.0;\r\n    if (theta > split1) {\r\n        return 0;\r\n    }\r\n    if (theta > (alpha * split1)) {\r\n        return 1;\r\n    }\r\n    return 2;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.IterateTag.doStartTag",
	"Comment": "construct an iterator for the specified collection, and begin loopingthrough the body once per element.",
	"Method": "int doStartTag(){\r\n    Object collection = this.collection;\r\n    if (collection == null) {\r\n        collection = TagUtils.getInstance().lookup(pageContext, name, property, scope);\r\n    }\r\n    if (collection == null) {\r\n        JspException e = new JspException(messages.getMessage(\"iterate.collection\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    if (collection.getClass().isArray()) {\r\n        try {\r\n            iterator = Arrays.asList((Object[]) collection).iterator();\r\n        } catch (ClassCastException e) {\r\n            int length = Array.getLength(collection);\r\n            ArrayList c = new ArrayList(length);\r\n            for (int i = 0; i < length; i++) {\r\n                c.add(Array.get(collection, i));\r\n            }\r\n            iterator = c.iterator();\r\n        }\r\n    } else if (collection instanceof Collection) {\r\n        iterator = ((Collection) collection).iterator();\r\n    } else if (collection instanceof Iterator) {\r\n        iterator = (Iterator) collection;\r\n    } else if (collection instanceof Map) {\r\n        iterator = ((Map) collection).entrySet().iterator();\r\n    } else if (collection instanceof Enumeration) {\r\n        iterator = new IteratorAdapter((Enumeration) collection);\r\n    } else {\r\n        JspException e = new JspException(messages.getMessage(\"iterate.iterator\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    if (offset == null) {\r\n        offsetValue = 0;\r\n    } else {\r\n        try {\r\n            offsetValue = Integer.parseInt(offset);\r\n        } catch (NumberFormatException e) {\r\n            Integer offsetObject = (Integer) TagUtils.getInstance().lookup(pageContext, offset, null);\r\n            if (offsetObject == null) {\r\n                offsetValue = 0;\r\n            } else {\r\n                offsetValue = offsetObject.intValue();\r\n            }\r\n        }\r\n    }\r\n    if (offsetValue < 0) {\r\n        offsetValue = 0;\r\n    }\r\n    if (length == null) {\r\n        lengthValue = 0;\r\n    } else {\r\n        try {\r\n            lengthValue = Integer.parseInt(length);\r\n        } catch (NumberFormatException e) {\r\n            Integer lengthObject = (Integer) TagUtils.getInstance().lookup(pageContext, length, null);\r\n            if (lengthObject == null) {\r\n                lengthValue = 0;\r\n            } else {\r\n                lengthValue = lengthObject.intValue();\r\n            }\r\n        }\r\n    }\r\n    if (lengthValue < 0) {\r\n        lengthValue = 0;\r\n    }\r\n    lengthCount = 0;\r\n    for (int i = 0; i < offsetValue; i++) {\r\n        if (iterator.hasNext()) {\r\n            iterator.next();\r\n        }\r\n    }\r\n    if (iterator.hasNext()) {\r\n        Object element = iterator.next();\r\n        if (element == null) {\r\n            pageContext.removeAttribute(id);\r\n        } else {\r\n            pageContext.setAttribute(id, element);\r\n        }\r\n        lengthCount++;\r\n        started = true;\r\n        if (indexId != null) {\r\n            pageContext.setAttribute(indexId, new Integer(getIndex()));\r\n        }\r\n        return (EVAL_BODY_TAG);\r\n    } else {\r\n        return (SKIP_BODY);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedIterateTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    return super.getVariableInfo(data);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.init",
	"Comment": "initialize this servlet.most of the processing has been factoredinto support methods so that you can override particular functionalityat a fairly granular level.",
	"Method": "void init(){\r\n    final String configPrefix = \"config/\";\r\n    final int configPrefixLength = configPrefix.length() - 1;\r\n    try {\r\n        initInternal();\r\n        initOther();\r\n        initServlet();\r\n        initChain();\r\n        getServletContext().setAttribute(Globals.ACTION_SERVLET_KEY, this);\r\n        initModuleConfigFactory();\r\n        ModuleConfig moduleConfig = initModuleConfig(\"\", config);\r\n        initModuleMessageResources(moduleConfig);\r\n        initModulePlugIns(moduleConfig);\r\n        initModuleFormBeans(moduleConfig);\r\n        initModuleForwards(moduleConfig);\r\n        initModuleExceptionConfigs(moduleConfig);\r\n        initModuleActions(moduleConfig);\r\n        moduleConfig.freeze();\r\n        Enumeration names = getServletConfig().getInitParameterNames();\r\n        while (names.hasMoreElements()) {\r\n            String name = (String) names.nextElement();\r\n            if (!name.startsWith(configPrefix)) {\r\n                continue;\r\n            }\r\n            String prefix = name.substring(configPrefixLength);\r\n            moduleConfig = initModuleConfig(prefix, getServletConfig().getInitParameter(name));\r\n            initModuleMessageResources(moduleConfig);\r\n            initModulePlugIns(moduleConfig);\r\n            initModuleFormBeans(moduleConfig);\r\n            initModuleForwards(moduleConfig);\r\n            initModuleExceptionConfigs(moduleConfig);\r\n            initModuleActions(moduleConfig);\r\n            moduleConfig.freeze();\r\n        }\r\n        this.initModulePrefixes(this.getServletContext());\r\n        this.destroyConfigDigester();\r\n    } catch (UnavailableException ex) {\r\n        throw ex;\r\n    } catch (Throwable t) {\r\n        log.error(\"Unable to initialize Struts ActionServlet due to an \" + \"unexpected exception or error thrown, so marking the \" + \"servlet as unavailable.  Most likely, this is due to an \" + \"incorrect or missing library dependency.\", t);\r\n        throw new UnavailableException(t.getMessage());\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.removeFormPropertyConfig",
	"Comment": "remove the specified form property configuration instance.",
	"Method": "void removeFormPropertyConfig(FormPropertyConfig config){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    formProperties.remove(config.getName());\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.toByteArray",
	"Comment": "returns a byte array representation of this sketch. copies contents into an array of thespecified class for serialization to allow for polymorphic types.",
	"Method": "byte[] toByteArray(ArrayOfItemsSerDe<? super T> serDe,byte[] toByteArray,ArrayOfItemsSerDe<? super T> serDe,Class<?> clazz){\r\n    final int preLongs, outBytes;\r\n    final boolean empty = itemsSeen_ == 0;\r\n    byte[] bytes = null;\r\n    if (empty) {\r\n        preLongs = 1;\r\n        outBytes = 8;\r\n    } else {\r\n        preLongs = Family.RESERVOIR.getMaxPreLongs();\r\n        bytes = serDe.serializeToByteArray(getSamples(clazz));\r\n        outBytes = (preLongs << 3) + bytes.length;\r\n    }\r\n    final byte[] outArr = new byte[outBytes];\r\n    final WritableMemory mem = WritableMemory.wrap(outArr);\r\n    PreambleUtil.insertPreLongs(mem, preLongs);\r\n    PreambleUtil.insertLgResizeFactor(mem, rf_.lg());\r\n    PreambleUtil.insertSerVer(mem, SER_VER);\r\n    PreambleUtil.insertFamilyID(mem, Family.RESERVOIR.getID());\r\n    if (empty) {\r\n        PreambleUtil.insertFlags(mem, EMPTY_FLAG_MASK);\r\n    } else {\r\n        PreambleUtil.insertFlags(mem, 0);\r\n    }\r\n    PreambleUtil.insertK(mem, reservoirSize_);\r\n    if (!empty) {\r\n        PreambleUtil.insertN(mem, itemsSeen_);\r\n        final int preBytes = preLongs << 3;\r\n        mem.putByteArray(preBytes, bytes, 0, bytes.length);\r\n    }\r\n    return outArr;\r\n}"
}, {
	"Path": "org.apache.struts.config.ModuleConfigFactory.createFactory",
	"Comment": "create and return a moduleconfigfactory instance of theappropriate class, which can be used to create customizedmoduleconfig instances.if no such factory can becreated, return null instead.",
	"Method": "ModuleConfigFactory createFactory(){\r\n    ModuleConfigFactory factory = null;\r\n    try {\r\n        if (clazz == null) {\r\n            clazz = RequestUtils.applicationClass(factoryClass);\r\n        }\r\n        factory = (ModuleConfigFactory) clazz.newInstance();\r\n    } catch (ClassNotFoundException e) {\r\n        LOG.error(\"ModuleConfigFactory.createFactory()\", e);\r\n    } catch (InstantiationException e) {\r\n        LOG.error(\"ModuleConfigFactory.createFactory()\", e);\r\n    } catch (IllegalAccessException e) {\r\n        LOG.error(\"ModuleConfigFactory.createFactory()\", e);\r\n    }\r\n    return factory;\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateLongLocale",
	"Comment": "checks if the field can safely be converted to a long primitive.",
	"Method": "Object validateLongLocale(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    Locale locale = RequestUtils.getUserLocale(request, null);\r\n    result = GenericTypeValidator.formatLong(value, locale);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "org.apache.struts.config.TestActionConfig.testInheritFrom",
	"Comment": "test a typical form bean configuration extension where various forwardsand exception handlers should be inherited from a base form. thismethod checks all the subelements.",
	"Method": "void testInheritFrom(){\r\n    ActionConfig subConfig = new ActionConfig();\r\n    String subConfigPath = \"subConfig\";\r\n    subConfig.setPath(subConfigPath);\r\n    subConfig.setExtends(\"/base\");\r\n    ForwardConfig forward = new ForwardConfig();\r\n    forward.setName(\"success\");\r\n    forward.setPath(\"/newSuccess.jsp\");\r\n    forward.setRedirect(true);\r\n    subConfig.addForwardConfig(forward);\r\n    ExceptionConfig handler = new ExceptionConfig();\r\n    handler.setType(\"java.lang.NullPointerException\");\r\n    handler.setKey(\"msg.exception.npe\");\r\n    subConfig.addExceptionConfig(handler);\r\n    subConfig.setProperty(\"label\", \"sub\");\r\n    config.addActionConfig(subConfig);\r\n    subConfig.inheritFrom(baseConfig);\r\n    assertSame(\"subConfig no longer in ModuleConfig\", subConfig, config.findActionConfig(\"subConfig\"));\r\n    assertNotNull(\"Action type was not inherited\", subConfig.getType());\r\n    assertEquals(\"Wrong config path\", subConfigPath, subConfig.getPath());\r\n    assertEquals(\"Wrong config type\", baseConfig.getType(), subConfig.getType());\r\n    ForwardConfig[] forwards = subConfig.findForwardConfigs();\r\n    assertEquals(\"Wrong forwards count\", 2, forwards.length);\r\n    forward = subConfig.findForwardConfig(\"success\");\r\n    assertNotNull(\"'success' forward was not found\", forward);\r\n    assertEquals(\"Wrong path for success\", \"/newSuccess.jsp\", forward.getPath());\r\n    forward = subConfig.findForwardConfig(\"failure\");\r\n    ForwardConfig origForward = baseConfig.findForwardConfig(\"failure\");\r\n    assertNotNull(\"'failure' forward was not inherited\", forward);\r\n    assertEquals(\"Wrong type for 'failure'\", origForward.getPath(), forward.getPath());\r\n    assertEquals(\"Arbitrary property not copied\", origForward.getProperty(\"forwardCount\"), forward.getProperty(\"forwardCount\"));\r\n    ExceptionConfig[] handlers = subConfig.findExceptionConfigs();\r\n    assertEquals(\"Wrong exception config count\", 2, handlers.length);\r\n    handler = subConfig.findExceptionConfig(\"java.sql.SQLException\");\r\n    ExceptionConfig origHandler = baseConfig.findExceptionConfig(\"java.sql.SQLException\");\r\n    assertNotNull(\"'SQLException' handler was not found\", handler);\r\n    assertEquals(\"Wrong key for 'SQLException'\", origHandler.getKey(), handler.getKey());\r\n    assertEquals(\"Arbitrary property not copied\", origHandler.getProperty(\"exceptionCount\"), handler.getProperty(\"exceptionCount\"));\r\n    handler = subConfig.findExceptionConfig(\"java.lang.NullPointerException\");\r\n    assertNotNull(\"'NullPointerException' handler disappeared\", handler);\r\n    String version = subConfig.getProperty(\"version\");\r\n    assertEquals(\"Arbitrary property 'version' wasn't inherited\", \"1a\", version);\r\n    String label = subConfig.getProperty(\"label\");\r\n    assertEquals(\"Arbitrary property 'label' shouldn't have changed\", \"sub\", label);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.SizeTag.doStartTag",
	"Comment": "retrieve the required property and expose it as a scripting variable.",
	"Method": "int doStartTag(){\r\n    Object value = this.collection;\r\n    if (value == null) {\r\n        if (name == null) {\r\n            JspException e = new JspException(messages.getMessage(\"size.noCollectionOrName\"));\r\n            TagUtils.getInstance().saveException(pageContext, e);\r\n            throw e;\r\n        }\r\n        value = TagUtils.getInstance().lookup(pageContext, name, property, scope);\r\n    }\r\n    int size = 0;\r\n    if (value == null) {\r\n        JspException e = new JspException(messages.getMessage(\"size.collection\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    } else if (value.getClass().isArray()) {\r\n        size = Array.getLength(value);\r\n    } else if (value instanceof Collection) {\r\n        size = ((Collection) value).size();\r\n    } else if (value instanceof Map) {\r\n        size = ((Map) value).size();\r\n    } else {\r\n        JspException e = new JspException(messages.getMessage(\"size.collection\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    pageContext.setAttribute(this.id, new Integer(size), PageContext.PAGE_SCOPE);\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.HarmonicNumbers.getBitMapEstimate",
	"Comment": "this is the estimator you would use for flat bit map random accessed, similar to a bloom filter.",
	"Method": "double getBitMapEstimate(int bitVectorLength,int numBitsSet){\r\n    return (bitVectorLength * (harmonicNumber(bitVectorLength) - harmonicNumber(bitVectorLength - numBitsSet)));\r\n}"
}, {
	"Path": "simplenlg.orthography.english.OrthographyProcessor.realiseCoordinatedPhrase",
	"Comment": "realises coordinated phrases. where there are more than two coordinates,\tthen a comma replaces the conjunction word between all the coordinates\tsave the last two. for example, john and peter and simon becomes\tjohn, peter and simon.",
	"Method": "NLGElement realiseCoordinatedPhrase(List<NLGElement> components){\r\n    StringBuffer realisation = new StringBuffer();\r\n    NLGElement realisedChild = null;\r\n    int length = components.size();\r\n    for (int index = 0; index < length; index++) {\r\n        realisedChild = components.get(index);\r\n        if (index < length - 2 && DiscourseFunction.CONJUNCTION.equals(realisedChild.getFeature(InternalFeature.DISCOURSE_FUNCTION))) {\r\n            // $NON-NLS-1$\r\n            realisation.append(\", \");\r\n        } else {\r\n            realisedChild = realise(realisedChild);\r\n            realisation.append(realisedChild.getRealisation()).append(' ');\r\n        }\r\n    }\r\n    realisation.setLength(realisation.length() - 1);\r\n    return new StringElement(realisation.toString().replace(\" ,\", \",\"));\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseHandlerTag.prepareMouseEvents",
	"Comment": "prepares the mouse event handlers, appending them to the the givenstringbuffer.",
	"Method": "void prepareMouseEvents(StringBuffer handlers){\r\n    prepareAttribute(handlers, \"onclick\", getOnclick());\r\n    prepareAttribute(handlers, \"ondblclick\", getOndblclick());\r\n    prepareAttribute(handlers, \"onmouseover\", getOnmouseover());\r\n    prepareAttribute(handlers, \"onmouseout\", getOnmouseout());\r\n    prepareAttribute(handlers, \"onmousemove\", getOnmousemove());\r\n    prepareAttribute(handlers, \"onmousedown\", getOnmousedown());\r\n    prepareAttribute(handlers, \"onmouseup\", getOnmouseup());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyHelper.getAdjustedProperty",
	"Comment": "get the adjusted property. apply the provided property, to the propertyalready stored in the request object.",
	"Method": "String getAdjustedProperty(HttpServletRequest request,String property){\r\n    String parent = getCurrentProperty(request);\r\n    return calculateRelativeProperty(property, parent);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.FormTag.getEnctype",
	"Comment": "return the content encoding used when submitting this form.",
	"Method": "String getEnctype(){\r\n    return (this.enctype);\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.servlet.PerformInclude.perform",
	"Comment": "perform the appropriate processing on the specified includeuri.",
	"Method": "void perform(ActionContext context,String uri){\r\n    ServletActionContext swcontext = (ServletActionContext) context;\r\n    HttpServletRequest request = swcontext.getRequest();\r\n    RequestDispatcher rd = swcontext.getContext().getRequestDispatcher(uri);\r\n    rd.forward(request, swcontext.getResponse());\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilImpl.makeDefinitionsFactoryAccessible",
	"Comment": "make definition factory accessible to tags.factory is stored in servlet context.",
	"Method": "void makeDefinitionsFactoryAccessible(DefinitionsFactory factory,ServletContext servletContext){\r\n    servletContext.setAttribute(DEFINITIONS_FACTORY, factory);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.writePrevious",
	"Comment": "write the specified text as the response to the writer associated withthe body content for the tag within which we are currently nested.",
	"Method": "void writePrevious(PageContext pageContext,String text){\r\n    JspWriter writer = pageContext.getOut();\r\n    if (writer instanceof BodyContent) {\r\n        writer = ((BodyContent) writer).getEnclosingWriter();\r\n    }\r\n    try {\r\n        writer.print(text);\r\n    } catch (IOException e) {\r\n        saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"write.io\", e.toString()));\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionForm.setupComplexProperties",
	"Comment": "set up the complex properties that cannot be configured from theinitial value expression.",
	"Method": "void setupComplexProperties(){\r\n    List listIndexed = new ArrayList();\r\n    listIndexed.add(\"String 0\");\r\n    listIndexed.add(\"String 1\");\r\n    listIndexed.add(\"String 2\");\r\n    listIndexed.add(\"String 3\");\r\n    listIndexed.add(\"String 4\");\r\n    dynaForm.set(\"listIndexed\", listIndexed);\r\n    Map mappedProperty = new HashMap();\r\n    mappedProperty.put(\"First Key\", \"First Value\");\r\n    mappedProperty.put(\"Second Key\", \"Second Value\");\r\n    dynaForm.set(\"mappedProperty\", mappedProperty);\r\n    Map mappedIntProperty = new HashMap();\r\n    mappedIntProperty.put(\"One\", new Integer(1));\r\n    mappedIntProperty.put(\"Two\", new Integer(2));\r\n    dynaForm.set(\"mappedIntProperty\", mappedIntProperty);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedMessagesTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateShort",
	"Comment": "checks if the field can safely be converted to a short primitive.",
	"Method": "Object validateShort(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    result = GenericTypeValidator.formatShort(value);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "simplenlg.lexicon.english.NIHDBLexiconTest.standardInflectionsTest",
	"Comment": "tests the lexicon for recall of baseforms with their standard inflected forms.",
	"Method": "void standardInflectionsTest(){\r\n    boolean keepInflectionsFlag = lexicon.isKeepStandardInflections();\r\n    lexicon.setKeepStandardInflections(true);\r\n    WordElement dog = lexicon.getWord(\"dog\", LexicalCategory.NOUN);\r\n    Assert.assertEquals(\"dogs\", dog.getFeatureAsString(LexicalFeature.PLURAL));\r\n    lexicon.setKeepStandardInflections(false);\r\n    WordElement cat = lexicon.getWord(\"cat\", LexicalCategory.NOUN);\r\n    Assert.assertEquals(null, cat.getFeatureAsString(LexicalFeature.PLURAL));\r\n    lexicon.setKeepStandardInflections(keepInflectionsFlag);\r\n}"
}, {
	"Path": "org.sonar.java.resolve.BytecodeVisitor.defineInnerClass",
	"Comment": "invoked when current class classified as outer class of some inner class.adds inner class as member.",
	"Method": "void defineInnerClass(String bytecodeName,int flags){\r\n    JavaSymbol.TypeJavaSymbol innerClass = getClassSymbol(classSymbol, bytecodeName, flags);\r\n    innerClass.flags |= Flags.filterAccessBytecodeFlags(flags);\r\n    Preconditions.checkState(innerClass.owner == classSymbol, \"Innerclass: \" + innerClass.owner.getName() + \" and classSymbol: \" + classSymbol.getName() + \" are not the same.\");\r\n    classSymbol.members.enter(innerClass);\r\n}"
}, {
	"Path": "simplenlg.framework.PhraseElement.setHead",
	"Comment": "sets the head, or main component, of this current phrase. for example,\tthe head for a verb phrase should be a verb while the head of a noun\tphrase should be a noun. strings are converted to\tstringelements. if null is passed in as the new\thead then the head feature is removed.",
	"Method": "void setHead(Object newHead){\r\n    if (newHead == null) {\r\n        removeFeature(InternalFeature.HEAD);\r\n        return;\r\n    }\r\n    NLGElement headElement;\r\n    if (newHead instanceof NLGElement)\r\n        headElement = (NLGElement) newHead;\r\n    else\r\n        headElement = new StringElement(newHead.toString());\r\n    setFeature(InternalFeature.HEAD, headElement);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesAuxiliary.tandemMerge",
	"Comment": "performs two merges in tandem. one of them provides the sort keys while the other one passively undergoes the same data motion.",
	"Method": "void tandemMerge(double[] keySrc,long[] valSrc,int arrStart1,int arrLen1,int arrStart2,int arrLen2,double[] keyDst,long[] valDst,int arrStart3){\r\n    final int arrStop1 = arrStart1 + arrLen1;\r\n    final int arrStop2 = arrStart2 + arrLen2;\r\n    int i1 = arrStart1;\r\n    int i2 = arrStart2;\r\n    int i3 = arrStart3;\r\n    while ((i1 < arrStop1) && (i2 < arrStop2)) {\r\n        if (keySrc[i2] < keySrc[i1]) {\r\n            keyDst[i3] = keySrc[i2];\r\n            valDst[i3] = valSrc[i2];\r\n            i2++;\r\n        } else {\r\n            keyDst[i3] = keySrc[i1];\r\n            valDst[i3] = valSrc[i1];\r\n            i1++;\r\n        }\r\n        i3++;\r\n    }\r\n    if (i1 < arrStop1) {\r\n        arraycopy(keySrc, i1, keyDst, i3, arrStop1 - i1);\r\n        arraycopy(valSrc, i1, valDst, i3, arrStop1 - i1);\r\n    } else {\r\n        assert i2 < arrStop2;\r\n        arraycopy(keySrc, i2, keyDst, i3, arrStop2 - i2);\r\n        arraycopy(valSrc, i2, valDst, i3, arrStop2 - i2);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResourcesFactory.setConfig",
	"Comment": "return the configuration information for message resources.",
	"Method": "void setConfig(MessageResourcesConfig config){\r\n    this.config = config;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.definition.ReloadableDefinitionsFactory.reload",
	"Comment": "reload underlying factory.reload is done by creating a new factory instance, and replacing the old instancewith the new one.",
	"Method": "void reload(ServletContext servletContext){\r\n    ComponentDefinitionsFactory newInstance = createFactory(servletContext, properties);\r\n    factory = newInstance;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.splitVerbGroup",
	"Comment": "splits the stack of verb components into two sections. one being the verb\tassociated with the main verb group, the other being associated with the\tauxiliary verb group.",
	"Method": "void splitVerbGroup(Stack<NLGElement> vgComponents,Stack<NLGElement> mainVerbRealisation,Stack<NLGElement> auxiliaryRealisation){\r\n    boolean mainVerbSeen = false;\r\n    for (NLGElement word : vgComponents) {\r\n        if (!mainVerbSeen) {\r\n            mainVerbRealisation.push(word);\r\n            if (!word.equals(\"not\")) {\r\n                mainVerbSeen = true;\r\n            }\r\n        } else {\r\n            auxiliaryRealisation.push(word);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.validator.DynaValidatorForm.getResultValueMap",
	"Comment": "returns a map of values returned from any validation thatreturns a value other than null or booleanwith the key the full property path of the field.",
	"Method": "Map getResultValueMap(){\r\n    return ((validatorResults != null) ? validatorResults.getResultValueMap() : null);\r\n}"
}, {
	"Path": "simplenlg.lexicon.util.NIHLexiconXMLDumpUtil.main",
	"Comment": "this main method reads a list of csv words and pos tags and looks up against \tthe nihdb lexicon for a corresponding entry. if found the baseform is written out into a xml \tfile, which can be used in simplenlg or elsewhere.",
	"Method": "void main(String[] args){\r\n    Lexicon lex = null;\r\n    if (args.length == 3) {\r\n        DB_FILENAME = args[0];\r\n        WORDLIST_FILENAME = args[1];\r\n        XML_FILENAME = args[2];\r\n        boolean dbDriverAvaliable = false;\r\n        try {\r\n            Class<?> driverClass = Class.forName(\"org.hsqldb.jdbc.JDBCDriver\", false, NIHLexiconXMLDumpUtil.class.getClassLoader());\r\n            if (null != driverClass) {\r\n                dbDriverAvaliable = true;\r\n            }\r\n        } catch (ClassNotFoundException cnfe) {\r\n            System.err.println(\"*** Please add the HSQLDB JDBCDriver to your Java classpath and try again.\");\r\n        }\r\n        if ((null != DB_FILENAME && !DB_FILENAME.isEmpty()) && (null != WORDLIST_FILENAME && !WORDLIST_FILENAME.isEmpty()) && (null != XML_FILENAME && !XML_FILENAME.isEmpty()) && dbDriverAvaliable) {\r\n            lex = new NIHDBLexicon(DB_FILENAME);\r\n            try {\r\n                LineNumberReader wordListFile = new LineNumberReader(new FileReader(WORDLIST_FILENAME));\r\n                FileWriter xmlFile = new FileWriter(XML_FILENAME);\r\n                xmlFile.write(String.format(\"<lexicon>%n\"));\r\n                String line = wordListFile.readLine();\r\n                while (line != null) {\r\n                    String[] cols = line.split(\",\");\r\n                    String base = cols[0];\r\n                    String cat = cols[1];\r\n                    WordElement word = null;\r\n                    if (cat.equalsIgnoreCase(\"noun\"))\r\n                        word = lex.getWord(base, LexicalCategory.NOUN);\r\n                    else if (cat.equalsIgnoreCase(\"verb\"))\r\n                        word = lex.getWord(base, LexicalCategory.VERB);\r\n                    else if (cat.equalsIgnoreCase(\"adv\"))\r\n                        word = lex.getWord(base, LexicalCategory.ADVERB);\r\n                    else if (cat.equalsIgnoreCase(\"adj\"))\r\n                        word = lex.getWord(base, LexicalCategory.ADJECTIVE);\r\n                    else if (cat.equalsIgnoreCase(\"det\"))\r\n                        word = lex.getWord(base, LexicalCategory.DETERMINER);\r\n                    else if (cat.equalsIgnoreCase(\"prep\"))\r\n                        word = lex.getWord(base, LexicalCategory.PREPOSITION);\r\n                    else if (cat.equalsIgnoreCase(\"pron\"))\r\n                        word = lex.getWord(base, LexicalCategory.PRONOUN);\r\n                    else if (cat.equalsIgnoreCase(\"conj\"))\r\n                        word = lex.getWord(base, LexicalCategory.CONJUNCTION);\r\n                    else if (cat.equalsIgnoreCase(\"modal\"))\r\n                        word = lex.getWord(base, LexicalCategory.MODAL);\r\n                    else if (cat.equalsIgnoreCase(\"interjection\"))\r\n                        word = lex.getWord(base, LexicalCategory.NOUN);\r\n                    if (word == null)\r\n                        System.out.println(\"*** The following baseform and POS tag is not found: \" + base + \":\" + cat);\r\n                    else\r\n                        xmlFile.write(word.toXML());\r\n                    line = wordListFile.readLine();\r\n                    ;\r\n                }\r\n                xmlFile.write(String.format(\"<\/lexicon>%n\"));\r\n                wordListFile.close();\r\n                xmlFile.close();\r\n                lex.close();\r\n                System.out.println(\"*** XML Lexicon Export Completed.\");\r\n            } catch (Exception e) {\r\n                System.err.println(\"*** An Error occured during the export. The Exception message is below: \");\r\n                System.err.println(e.getMessage());\r\n                System.err.println(\"************************\");\r\n                System.err.println(\"Please make sure you have the correct application arguments: \");\r\n                printArgumentsMessage();\r\n            }\r\n        } else {\r\n            printErrorArgumentMessage();\r\n        }\r\n    } else {\r\n        printErrorArgumentMessage();\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.putMemory",
	"Comment": "puts the current sketch into the given memory if there is sufficient space.otherwise, throws an error.",
	"Method": "void putMemory(WritableMemory dstMem,ArrayOfItemsSerDe<T> serDe){\r\n    final byte[] byteArr = toByteArray(serDe);\r\n    final long memCap = dstMem.getCapacity();\r\n    if (memCap < byteArr.length) {\r\n        throw new SketchesArgumentException(\"Destination Memory not large enough: \" + memCap + \" < \" + byteArr.length);\r\n    }\r\n    dstMem.putByteArray(0, byteArr, 0, byteArr.length);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsUnion.reset",
	"Comment": "resets this union. maxk remains intact, otherwise reverts back to its virgin state.",
	"Method": "void reset(){\r\n    gadget_.reset();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DirectCompactDoublesSketch.createFromUpdateSketch",
	"Comment": "converts the given updatedoublessketch to this compact form.",
	"Method": "DirectCompactDoublesSketch createFromUpdateSketch(UpdateDoublesSketch sketch,WritableMemory dstMem){\r\n    final long memCap = dstMem.getCapacity();\r\n    final int k = sketch.getK();\r\n    final long n = sketch.getN();\r\n    checkDirectMemCapacity(k, n, memCap);\r\n    dstMem.putLong(0, 0L);\r\n    insertPreLongs(dstMem, 2);\r\n    insertSerVer(dstMem, DoublesSketch.DOUBLES_SER_VER);\r\n    insertFamilyID(dstMem, Family.QUANTILES.getID());\r\n    insertK(dstMem, k);\r\n    final int flags = COMPACT_FLAG_MASK | READ_ONLY_FLAG_MASK;\r\n    if (sketch.isEmpty()) {\r\n        insertFlags(dstMem, flags | EMPTY_FLAG_MASK);\r\n    } else {\r\n        insertFlags(dstMem, flags);\r\n        insertN(dstMem, n);\r\n        insertMinDouble(dstMem, sketch.getMinValue());\r\n        insertMaxDouble(dstMem, sketch.getMaxValue());\r\n        final int bbCount = computeBaseBufferItems(k, n);\r\n        final DoublesSketchAccessor inputAccessor = DoublesSketchAccessor.wrap(sketch);\r\n        assert bbCount == inputAccessor.numItems();\r\n        long dstMemOffset = COMBINED_BUFFER;\r\n        final double[] bbArray = inputAccessor.getArray(0, bbCount);\r\n        Arrays.sort(bbArray);\r\n        dstMem.putDoubleArray(dstMemOffset, bbArray, 0, bbCount);\r\n        dstMemOffset += bbCount << 3;\r\n        long bitPattern = computeBitPattern(k, n);\r\n        for (int lvl = 0; bitPattern > 0; ++lvl, bitPattern >>>= 1) {\r\n            if ((bitPattern & 1L) > 0L) {\r\n                inputAccessor.setLevel(lvl);\r\n                dstMem.putDoubleArray(dstMemOffset, inputAccessor.getArray(0, k), 0, k);\r\n                dstMemOffset += k << 3;\r\n            }\r\n        }\r\n    }\r\n    final DirectCompactDoublesSketch dcds = new DirectCompactDoublesSketch(k);\r\n    dcds.mem_ = dstMem;\r\n    return dcds;\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.getMessage",
	"Comment": "returns a text message after parametric replacement of the specifiedparameter placeholders.a null string result will never be returned bythis method.",
	"Method": "String getMessage(String key,String getMessage,String key,Object[] args,String getMessage,String key,Object arg0,String getMessage,String key,Object arg0,Object arg1,String getMessage,String key,Object arg0,Object arg1,Object arg2,String getMessage,String key,Object arg0,Object arg1,Object arg2,Object arg3,String getMessage,Locale locale,String key,String getMessage,Locale locale,String key,Object[] args,String getMessage,Locale locale,String key,Object arg0,String getMessage,Locale locale,String key,Object arg0,Object arg1,String getMessage,Locale locale,String key,Object arg0,Object arg1,Object arg2,String getMessage,Locale locale,String key,Object arg0,Object arg1,Object arg2,Object arg3){\r\n    return this.getMessage(locale, key, new Object[] { arg0, arg1, arg2, arg3 });\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.isString",
	"Comment": "return true if the specified object is a string or anull value.",
	"Method": "boolean isString(Object o){\r\n    return (o == null) ? true : String.class.isInstance(o);\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcUnion.getFamily",
	"Comment": "return the datasketches identifier for this cpc family of sketches.",
	"Method": "Family getFamily(){\r\n    return Family.CPC;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedMessagesNotPresentTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.Union.reset",
	"Comment": "resets the internal set to the initial state, which represents an empty set",
	"Method": "void reset(){\r\n    sketch_ = new QuickSelectSketch<S>(nomEntries_, null);\r\n}"
}, {
	"Path": "net.csdn.modules.compress.lzf.LZFInputStream.readyBuffer",
	"Comment": "fill the uncompressed bytes buffer by reading the underlying inputstream.",
	"Method": "void readyBuffer(){\r\n    if (bufferPosition >= bufferLength) {\r\n        bufferLength = LZFDecoder.decompressChunk(inputStream, _inputBuffer, _decodedBytes);\r\n        bufferPosition = 0;\r\n    }\r\n}"
}, {
	"Path": "simplenlg.lexicon.NIHDBLexicon.addAdjectiveInfo",
	"Comment": "extract adj information from nih adjentry record, and add to a simplenlg\twordelement for now just extract position info",
	"Method": "void addAdjectiveInfo(WordElement wordElement,AdjEntry adjEntry){\r\n    boolean qualitativeAdj = false;\r\n    boolean colourAdj = false;\r\n    boolean classifyingAdj = false;\r\n    boolean predicativeAdj = false;\r\n    List<String> positions = adjEntry.GetPosition();\r\n    for (String position : positions) {\r\n        if (position.startsWith(\"attrib(1)\"))\r\n            qualitativeAdj = true;\r\n        else if (position.startsWith(\"attrib(2)\"))\r\n            colourAdj = true;\r\n        else if (position.startsWith(\"attrib(3)\"))\r\n            classifyingAdj = true;\r\n        else if (position.startsWith(\"pred\"))\r\n            predicativeAdj = true;\r\n    }\r\n    wordElement.setFeature(LexicalFeature.QUALITATIVE, qualitativeAdj);\r\n    wordElement.setFeature(LexicalFeature.COLOUR, colourAdj);\r\n    wordElement.setFeature(LexicalFeature.CLASSIFYING, classifyingAdj);\r\n    wordElement.setFeature(LexicalFeature.PREDICATIVE, predicativeAdj);\r\n    return;\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.getConfig",
	"Comment": "the configuration parameter used to initialize this messageresources.",
	"Method": "String getConfig(){\r\n    return (this.config);\r\n}"
}, {
	"Path": "org.jf.dexlib2.ReferenceType.validateReferenceType",
	"Comment": "validate a specific reference type. note that the none placeholder is specifically not considered valid here.",
	"Method": "void validateReferenceType(int referenceType){\r\n    if (referenceType < 0 || referenceType > 3) {\r\n        throw new InvalidReferenceTypeException(referenceType);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.getSamplesAsArrays",
	"Comment": "returns a varoptitemssketch.result structure containing the items and weights in separatelists. the returned list lengths may be smaller than the total capacity.this method allocates an array of class clazz, which must either match orbe parent of t. this method should be used when objects in the array are all instances of tbut are not necessarily instances of the base class.",
	"Method": "Result getSamplesAsArrays(Result getSamplesAsArrays,Class<?> clazz){\r\n    if ((r_ + h_) == 0) {\r\n        return null;\r\n    }\r\n    final int numSamples = getNumSamples();\r\n    final T[] prunedItems = (T[]) Array.newInstance(clazz, numSamples);\r\n    final double[] prunedWeights = new double[numSamples];\r\n    int j = 0;\r\n    final double rWeight = totalWtR_ / r_;\r\n    for (int i = 0; j < numSamples; ++i) {\r\n        final T item = data_.get(i);\r\n        if (item != null) {\r\n            prunedItems[j] = item;\r\n            prunedWeights[j] = (weights_.get(i) > 0 ? weights_.get(i) : rWeight);\r\n            ++j;\r\n        }\r\n    }\r\n    final Result output = new Result();\r\n    output.items = prunedItems;\r\n    output.weights = prunedWeights;\r\n    return output;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SingleItemSketch.heapify",
	"Comment": "creates a singleitemsketch on the heap given a memory.checks the seed hash of the given memory against a hash of the given seed.",
	"Method": "SingleItemSketch heapify(Memory mem,SingleItemSketch heapify,Memory mem,long seed){\r\n    final long memPre0 = mem.getLong(0);\r\n    checkDefaultBytes0to5(memPre0);\r\n    final short seedHashIn = mem.getShort(6);\r\n    final short seedHashCk = computeSeedHash(seed);\r\n    checkSeedHashes(seedHashIn, seedHashCk);\r\n    return new SingleItemSketch(mem.getLong(8), seed);\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcSketch.getMaxSerializedBytes",
	"Comment": "the actual size of a compressed cpc sketch has a small random variance, but the followingempirically measured size should be large enough for at least 99.9 percent of sketches.for small values of n the size can be much smaller.",
	"Method": "int getMaxSerializedBytes(int lgK){\r\n    checkLgK(lgK);\r\n    if (lgK <= 19) {\r\n        return empiricalMaxBytes[lgK - 4] + 40;\r\n    }\r\n    final int k = 1 << lgK;\r\n    return (int) (0.6 * k) + 40;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.PreambleUtil.toString",
	"Comment": "returns a human readable string summary of the preamble of the given memory. if this memoryimage is from a doublessketch, the minvalue and maxvalue will also be output.used primarily in testing.",
	"Method": "String toString(byte[] byteArr,boolean isDoublesSketch,String toString,Memory mem,boolean isDoublesSketch){\r\n    return memoryToString(mem, isDoublesSketch);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of a reservoiritemssketch.",
	"Method": "String toString(String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.preambleToString(mem);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedSelectTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ReversePurgeLongHashMap.adjustOrPutValue",
	"Comment": "increments the value mapped to the key if the key is present in the map. otherwise,the key is inserted with the putamount.",
	"Method": "void adjustOrPutValue(long key,long adjustAmount){\r\n    final int arrayMask = keys.length - 1;\r\n    int probe = (int) hash(key) & arrayMask;\r\n    int drift = 1;\r\n    while ((states[probe] != 0) && (keys[probe] != key)) {\r\n        probe = (probe + 1) & arrayMask;\r\n        drift++;\r\n        assert (drift < DRIFT_LIMIT) : \"drift: \" + drift + \" >= DRIFT_LIMIT\";\r\n    }\r\n    if (states[probe] == 0) {\r\n        assert (numActive <= loadThreshold) : \"numActive: \" + numActive + \" > loadThreshold : \" + loadThreshold;\r\n        keys[probe] = key;\r\n        values[probe] = adjustAmount;\r\n        states[probe] = (short) drift;\r\n        numActive++;\r\n    } else {\r\n        assert (keys[probe] == key);\r\n        values[probe] += adjustAmount;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSamples.setClass",
	"Comment": "specifies the class to use when copying the item array from the sketch. this method isrequired if the sketch stores heterogeneous item types of some base class, for instance asketch over numbers.",
	"Method": "void setClass(Class<?> clazz){\r\n    if (sampleLists == null) {\r\n        sampleLists = sketch_.getSamplesAsArrays(clazz);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseHandlerTag.prepareAttribute",
	"Comment": "prepares an attribute if the value is not null, appending it to the thegiven stringbuffer.",
	"Method": "void prepareAttribute(StringBuffer handlers,String name,Object value){\r\n    if (value != null) {\r\n        handlers.append(\" \");\r\n        handlers.append(name);\r\n        handlers.append(\"=\\\"\");\r\n        handlers.append(value);\r\n        handlers.append(\"\\\"\");\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUpdatableSketch.heapify",
	"Comment": "heapify the given memory and seed as a arrayofdoublesupdatablesketch",
	"Method": "ArrayOfDoublesUpdatableSketch heapify(Memory mem,ArrayOfDoublesUpdatableSketch heapify,Memory mem,long seed){\r\n    return new HeapArrayOfDoublesQuickSelectSketch(mem, seed);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.getSamples",
	"Comment": "returns a copy of the items in the reservoir as members of class clazz, or nullif empty. the returned array length may be smaller than the reservoir capacity.this method allocates an array of class clazz, which must either match orextend t. this method should be used when objects in the array are all instances of t butare not necessarily instances of the base class.",
	"Method": "T[] getSamples(T[] getSamples,Class<?> clazz){\r\n    if (itemsSeen_ == 0) {\r\n        return null;\r\n    }\r\n    return data_.toArray((T[]) Array.newInstance(clazz, 0));\r\n}"
}, {
	"Path": "org.apache.struts.util.RequestUtils.createServerUriStringBuffer",
	"Comment": "return stringbuffer representing the scheme, server,and port number of the current request.",
	"Method": "StringBuffer createServerUriStringBuffer(String scheme,String server,int port,String uri){\r\n    StringBuffer serverUri = createServerStringBuffer(scheme, server, port);\r\n    serverUri.append(uri);\r\n    return serverUri;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractSelectInput.execute",
	"Comment": "select and cache a forwardconfig for the input page forthe current request.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    Boolean valid = actionCtx.getFormValid();\r\n    if ((valid != null) && valid.booleanValue()) {\r\n        return (false);\r\n    }\r\n    ActionConfig actionConfig = actionCtx.getActionConfig();\r\n    ModuleConfig moduleConfig = actionConfig.getModuleConfig();\r\n    ForwardConfig forwardConfig;\r\n    String input = actionConfig.getInput();\r\n    if (moduleConfig.getControllerConfig().getInputForward()) {\r\n        if (LOG.isTraceEnabled()) {\r\n            LOG.trace(\"Finding ForwardConfig for '\" + input + \"'\");\r\n        }\r\n        forwardConfig = actionConfig.findForwardConfig(input);\r\n        if (forwardConfig == null) {\r\n            forwardConfig = moduleConfig.findForwardConfig(input);\r\n        }\r\n    } else {\r\n        if (LOG.isTraceEnabled()) {\r\n            LOG.trace(\"Delegating to forward() for '\" + input + \"'\");\r\n        }\r\n        forwardConfig = forward(actionCtx, moduleConfig, input);\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Forwarding back to \" + forwardConfig);\r\n    }\r\n    actionCtx.setForwardConfig(forwardConfig);\r\n    return (false);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsFloat",
	"Comment": "retrieves the value of the feature as a float. if the\tfeature does not exist or cannot be converted to a float then\tnull is returned.",
	"Method": "Float getFeatureAsFloat(String featureName){\r\n    Object value = getFeature(featureName);\r\n    Float floatValue = null;\r\n    if (value instanceof Float) {\r\n        floatValue = (Float) value;\r\n    } else if (value instanceof Number) {\r\n        floatValue = new Float(((Number) value).floatValue());\r\n    } else if (value instanceof String) {\r\n        try {\r\n            floatValue = new Float((String) value);\r\n        } catch (NumberFormatException exception) {\r\n            floatValue = null;\r\n        }\r\n    }\r\n    return floatValue;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.pushParticles",
	"Comment": "pushes the particles of the main verb onto the verb group stack.",
	"Method": "void pushParticles(PhraseElement phrase,SyntaxProcessor parent,Stack<NLGElement> vgComponents){\r\n    Object particle = phrase.getFeature(Feature.PARTICLE);\r\n    if (particle instanceof String) {\r\n        vgComponents.push(new StringElement((String) particle));\r\n    } else if (particle instanceof NLGElement) {\r\n        vgComponents.push(parent.realise((NLGElement) particle));\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.PreambleUtil.checkLoPreamble",
	"Comment": "basic checks of server, format, preints, family, ficol, lgk.",
	"Method": "void checkLoPreamble(Memory mem){\r\n    rtAssertEquals(getSerVer(mem), SER_VER & 0XFF);\r\n    final Format fmt = getFormat(mem);\r\n    final int preIntsDef = getDefinedPreInts(fmt) & 0XFF;\r\n    rtAssertEquals(getPreInts(mem), preIntsDef);\r\n    final Family fam = getFamily(mem);\r\n    rtAssert(fam == Family.CPC);\r\n    final int lgK = getLgK(mem);\r\n    rtAssert((lgK >= 4) && (lgK <= 26));\r\n    final int fiCol = getFiCol(mem);\r\n    rtAssert((fiCol <= 63) && (fiCol >= 0));\r\n}"
}, {
	"Path": "org.apache.struts.util.ImageButtonBean.isSelected",
	"Comment": "a convenience method to determine whether or not the correspondingimage element was selected.",
	"Method": "boolean isSelected(){\r\n    return ((x != null) || (y != null));\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.HeapCompactDoublesSketch.createFromUpdateSketch",
	"Comment": "converts the given updatedoublessketch to this compact form.",
	"Method": "HeapCompactDoublesSketch createFromUpdateSketch(UpdateDoublesSketch sketch){\r\n    final int k = sketch.getK();\r\n    final long n = sketch.getN();\r\n    final HeapCompactDoublesSketch hcds = new HeapCompactDoublesSketch(k);\r\n    hcds.n_ = n;\r\n    hcds.bitPattern_ = computeBitPattern(k, n);\r\n    assert hcds.bitPattern_ == sketch.getBitPattern();\r\n    hcds.minValue_ = sketch.getMinValue();\r\n    hcds.maxValue_ = sketch.getMaxValue();\r\n    hcds.baseBufferCount_ = computeBaseBufferItems(k, n);\r\n    assert hcds.baseBufferCount_ == sketch.getBaseBufferCount();\r\n    final int retainedItems = computeRetainedItems(k, n);\r\n    final double[] combinedBuffer = new double[retainedItems];\r\n    final DoublesSketchAccessor accessor = DoublesSketchAccessor.wrap(sketch);\r\n    assert hcds.baseBufferCount_ == accessor.numItems();\r\n    System.arraycopy(accessor.getArray(0, hcds.baseBufferCount_), 0, combinedBuffer, 0, hcds.baseBufferCount_);\r\n    Arrays.sort(combinedBuffer, 0, hcds.baseBufferCount_);\r\n    int combinedBufferOffset = hcds.baseBufferCount_;\r\n    long bitPattern = hcds.bitPattern_;\r\n    for (int lvl = 0; bitPattern > 0; ++lvl, bitPattern >>>= 1) {\r\n        if ((bitPattern & 1L) > 0L) {\r\n            accessor.setLevel(lvl);\r\n            System.arraycopy(accessor.getArray(0, k), 0, combinedBuffer, combinedBufferOffset, k);\r\n            combinedBufferOffset += k;\r\n        }\r\n    }\r\n    hcds.combinedBuffer_ = combinedBuffer;\r\n    return hcds;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.rebuildShared",
	"Comment": "rebuilds the hash table to remove dirty values or to reduce the sizeto nominal entries.",
	"Method": "UpdateSketch rebuildShared(){\r\n    rebuild();\r\n    updateEstimationSnapshot();\r\n    return this;\r\n}"
}, {
	"Path": "org.sonar.java.resolve.Symbols.initType",
	"Comment": "registers builtin types as symbols, so that they can be found as an usual identifiers.",
	"Method": "JavaType initType(int tag,String name){\r\n    JavaSymbol.TypeJavaSymbol symbol = new JavaSymbol.TypeJavaSymbol(Flags.PUBLIC, name, rootPackage);\r\n    symbol.members = new Scope(symbol);\r\n    predefClass.members.enter(symbol);\r\n    ((ClassJavaType) symbol.type).interfaces = ImmutableList.of();\r\n    symbol.type.tag = tag;\r\n    return symbol.type;\r\n}"
}, {
	"Path": "oauth.signpost.AbstractOAuthConsumer.collectQueryParameters",
	"Comment": "collects http get query string parameters as per oauth core 1.0 specsection 9.1.1",
	"Method": "void collectQueryParameters(HttpRequest request,HttpParameters out){\r\n    String url = request.getRequestUrl();\r\n    int q = url.indexOf('?');\r\n    if (q >= 0) {\r\n        out.putAll(OAuth.decodeForm(url.substring(q + 1)), true);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.getUpperBound",
	"Comment": "gets the guaranteed upper bound frequency of the given item.",
	"Method": "long getUpperBound(long item,long getUpperBound){\r\n    return hashMap.get(item) + offset;\r\n}"
}, {
	"Path": "org.apache.struts.util.TokenProcessor.generateToken",
	"Comment": "generate a new transaction token, to be used for enforcing a singlerequest for a particular transaction.",
	"Method": "String generateToken(HttpServletRequest request,String generateToken,String id){\r\n    try {\r\n        long current = System.currentTimeMillis();\r\n        if (current == previous) {\r\n            current++;\r\n        }\r\n        previous = current;\r\n        byte[] now = new Long(current).toString().getBytes();\r\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n        md.update(id.getBytes());\r\n        md.update(now);\r\n        return toHex(md.digest());\r\n    } catch (NoSuchAlgorithmException e) {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.QuickSelectSketch.trim",
	"Comment": "rebuilds reducing the actual number of entries to the nominal number of entries if needed",
	"Method": "void trim(){\r\n    if (count_ > nomEntries_) {\r\n        updateTheta();\r\n        rebuild(keys_.length);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilStrutsModulesImpl.doInclude",
	"Comment": "do an include using request dispatcher.this method is used by the tiles package anytime an include is required.",
	"Method": "void doInclude(String uri,HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){\r\n    request.getRequestDispatcher(uri).include(request, response);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.getQuantileLowerBound",
	"Comment": "gets the lower bound of the value interval in which the true quantile of the given rankexists with a confidence of at least 99%.",
	"Method": "T getQuantileLowerBound(double fraction){\r\n    return getQuantile(max(0, fraction - Util.getNormalizedRankError(k_, false)));\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResourcesFactory.setFactoryClass",
	"Comment": "set the fully qualified class name that is used formessageresourcesfactory instances.",
	"Method": "void setFactoryClass(String factoryClass){\r\n    MessageResourcesFactory.factoryClass = factoryClass;\r\n    MessageResourcesFactory.clazz = null;\r\n}"
}, {
	"Path": "org.apache.struts.util.PropertyMessageResourcesFactory.createResources",
	"Comment": "create and return a newly instansiated messageresources.this method must be implemented by concrete subclasses.",
	"Method": "MessageResources createResources(String config){\r\n    PropertyMessageResources messageResources = new PropertyMessageResources(this, config, this.returnNull);\r\n    String mode = null;\r\n    if (getConfig() != null) {\r\n        mode = getConfig().getProperty(\"mode\");\r\n    }\r\n    messageResources.setMode(mode);\r\n    return messageResources;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedDefineTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String type = (String) data.getAttribute(\"type\");\r\n    if (type == null) {\r\n        type = \"java.lang.Object\";\r\n    }\r\n    VariableInfo[] vinfo = new VariableInfo[1];\r\n    vinfo[0] = new VariableInfo(data.getAttributeString(\"id\"), type, true, VariableInfo.AT_END);\r\n    return vinfo;\r\n}"
}, {
	"Path": "simplenlg.orthography.english.OrthographyProcessor.isCommaSepCuephrase",
	"Comment": "check whether this processor separates cue phrases from a matrix phrase\tusing a comma.",
	"Method": "boolean isCommaSepCuephrase(){\r\n    return commaSepCuephrase;\r\n}"
}, {
	"Path": "simplenlg.framework.CoordinatedPhraseElement.getComplements",
	"Comment": "retrieves the list of complements currently associated with this\tcoordination.",
	"Method": "List<NLGElement> getComplements(){\r\n    return getFeatureAsElementList(InternalFeature.COMPLEMENTS);\r\n}"
}, {
	"Path": "simplenlg.xmlrealiser.Recording.finish",
	"Comment": "ends processing for this recording and writes it to an xml file.",
	"Method": "void finish(){\r\n    if (!recordingOn) {\r\n        return;\r\n    }\r\n    recordingOn = false;\r\n    FileOutputStream os = new FileOutputStream(recordingFile);\r\n    os.getChannel().truncate(0);\r\n    writeRecording(record, os);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseHandlerTag.prepareTextEvents",
	"Comment": "prepares the text event handlers, appending them to the the givenstringbuffer.",
	"Method": "void prepareTextEvents(StringBuffer handlers){\r\n    prepareAttribute(handlers, \"onselect\", getOnselect());\r\n    prepareAttribute(handlers, \"onchange\", getOnchange());\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseTest.testPassiveWithInternalVPComplement",
	"Comment": "test that complements set within the vp are raised when sentence is\tpassivised.",
	"Method": "void testPassiveWithInternalVPComplement(){\r\n    PhraseElement vp = this.phraseFactory.createVerbPhrase(phraseFactory.createWord(\"upset\", LexicalCategory.VERB));\r\n    vp.addComplement(phraseFactory.createNounPhrase(\"the\", \"man\"));\r\n    PhraseElement _s6 = this.phraseFactory.createClause(phraseFactory.createNounPhrase(\"the\", \"child\"), vp);\r\n    _s6.setFeature(Feature.TENSE, Tense.PAST);\r\n    Assert.assertEquals(\"the child upset the man\", this.realiser.realise(_s6).getRealisation());\r\n    _s6.setFeature(Feature.PASSIVE, true);\r\n    Assert.assertEquals(\"the man was upset by the child\", this.realiser.realise(_s6).getRealisation());\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.toByteArray",
	"Comment": "returns a byte array representation of this sketch. copies contents into an array of thespecified class for serialization to allow for polymorphic types.",
	"Method": "byte[] toByteArray(ArrayOfItemsSerDe<? super T> serDe,byte[] toByteArray,ArrayOfItemsSerDe<? super T> serDe,Class<?> clazz){\r\n    final int preLongs, numMarkBytes, outBytes;\r\n    final boolean empty = (r_ == 0) && (h_ == 0);\r\n    byte[] itemBytes = null;\r\n    int flags = marks_ == null ? 0 : GADGET_FLAG_MASK;\r\n    if (empty) {\r\n        preLongs = Family.VAROPT.getMinPreLongs();\r\n        outBytes = Family.VAROPT.getMinPreLongs() << 3;\r\n        flags |= EMPTY_FLAG_MASK;\r\n    } else {\r\n        preLongs = (r_ == 0 ? PreambleUtil.VO_WARMUP_PRELONGS : Family.VAROPT.getMaxPreLongs());\r\n        itemBytes = serDe.serializeToByteArray(getDataSamples(clazz));\r\n        numMarkBytes = marks_ == null ? 0 : ArrayOfBooleansSerDe.computeBytesNeeded(h_);\r\n        outBytes = (preLongs << 3) + (h_ * Double.BYTES) + numMarkBytes + itemBytes.length;\r\n    }\r\n    final byte[] outArr = new byte[outBytes];\r\n    final WritableMemory mem = WritableMemory.wrap(outArr);\r\n    PreambleUtil.insertPreLongs(mem, preLongs);\r\n    PreambleUtil.insertLgResizeFactor(mem, rf_.lg());\r\n    PreambleUtil.insertSerVer(mem, SER_VER);\r\n    PreambleUtil.insertFamilyID(mem, Family.VAROPT.getID());\r\n    PreambleUtil.insertFlags(mem, flags);\r\n    PreambleUtil.insertK(mem, k_);\r\n    if (!empty) {\r\n        PreambleUtil.insertN(mem, n_);\r\n        PreambleUtil.insertHRegionItemCount(mem, h_);\r\n        PreambleUtil.insertRRegionItemCount(mem, r_);\r\n        if (r_ > 0) {\r\n            PreambleUtil.insertTotalRWeight(mem, totalWtR_);\r\n        }\r\n        int offset = preLongs << 3;\r\n        for (int i = 0; i < h_; ++i) {\r\n            mem.putDouble(offset, weights_.get(i));\r\n            offset += Double.BYTES;\r\n        }\r\n        if (marks_ != null) {\r\n            final byte[] markBytes;\r\n            markBytes = MARK_SERDE.serializeToByteArray(marks_.subList(0, h_).toArray(new Boolean[0]));\r\n            mem.putByteArray(offset, markBytes, 0, markBytes.length);\r\n            offset += markBytes.length;\r\n        }\r\n        mem.putByteArray(offset, itemBytes, 0, itemBytes.length);\r\n    }\r\n    return outArr;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.LinkTag.doStartTag",
	"Comment": "render the beginning of the hyperlink.support for indexed propertysince struts 1.1",
	"Method": "int doStartTag(){\r\n    this.text = null;\r\n    this.parameters.clear();\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createNounPhrase",
	"Comment": "creates a noun phrase with the given specifier and subject.",
	"Method": "NPPhraseSpec createNounPhrase(NPPhraseSpec createNounPhrase,Object noun,NPPhraseSpec createNounPhrase,Object specifier,Object noun){\r\n    if (noun instanceof NPPhraseSpec)\r\n        return (NPPhraseSpec) noun;\r\n    NPPhraseSpec phraseElement = new NPPhraseSpec(this);\r\n    NLGElement nounElement = createNLGElement(noun, LexicalCategory.NOUN);\r\n    setPhraseHead(phraseElement, nounElement);\r\n    if (specifier != null)\r\n        phraseElement.setSpecifier(specifier);\r\n    return phraseElement;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractSelectForward.execute",
	"Comment": "select and cache the actionforward for thisactionconfig if specified.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    Boolean valid = actionCtx.getFormValid();\r\n    if ((valid == null) || !valid.booleanValue()) {\r\n        return (false);\r\n    }\r\n    ActionConfig actionConfig = actionCtx.getActionConfig();\r\n    ModuleConfig moduleConfig = actionConfig.getModuleConfig();\r\n    ForwardConfig forwardConfig = null;\r\n    String forward = actionConfig.getForward();\r\n    if (forward != null) {\r\n        forwardConfig = forward(actionCtx, moduleConfig, forward);\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Forwarding to \" + forwardConfig);\r\n        }\r\n        actionCtx.setForwardConfig(forwardConfig);\r\n    }\r\n    return (false);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.setActionForwardClass",
	"Comment": "the default class name to be used when creating action forwardinstances.",
	"Method": "void setActionForwardClass(String actionForwardClass){\r\n    this.actionForwardClass = actionForwardClass;\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.inheritForwards",
	"Comment": "compare the forwards of this action with that of the given and copythose that are not present.",
	"Method": "void inheritForwards(ActionConfig baseConfig){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    ForwardConfig[] baseForwards = baseConfig.findForwardConfigs();\r\n    for (int i = 0; i < baseForwards.length; i++) {\r\n        ForwardConfig baseForward = baseForwards[i];\r\n        ForwardConfig copy = this.findForwardConfig(baseForward.getName());\r\n        if (copy == null) {\r\n            copy = (ForwardConfig) RequestUtils.applicationInstance(baseForward.getClass().getName());\r\n            BeanUtils.copyProperties(copy, baseForward);\r\n            this.addForwardConfig(copy);\r\n            copy.setProperties(baseForward.copyProperties());\r\n        } else {\r\n            copy.processExtends(getModuleConfig(), this);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.setSeed",
	"Comment": "sets the long seed value that is required by the hashing function.",
	"Method": "ConcurrentThetaBuilder setSeed(long seed){\r\n    bSeed = seed;\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.heapify",
	"Comment": "returns a sketch instance of this class from the given srcmem, which must be a memoryrepresentation of this sketch class.",
	"Method": "ReservoirLongsSketch heapify(Memory srcMem){\r\n    Family.RESERVOIR.checkFamilyID(srcMem.getByte(FAMILY_BYTE));\r\n    final int numPreLongs = extractPreLongs(srcMem);\r\n    final ResizeFactor rf = ResizeFactor.getRF(extractResizeFactor(srcMem));\r\n    final int serVer = extractSerVer(srcMem);\r\n    final boolean isEmpty = (extractFlags(srcMem) & EMPTY_FLAG_MASK) != 0;\r\n    final long itemsSeen = (isEmpty ? 0 : extractN(srcMem));\r\n    int k = extractK(srcMem);\r\n    final boolean preLongsEqMin = (numPreLongs == Family.RESERVOIR.getMinPreLongs());\r\n    final boolean preLongsEqMax = (numPreLongs == Family.RESERVOIR.getMaxPreLongs());\r\n    if (!preLongsEqMin & !preLongsEqMax) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Non-empty sketch with only \" + Family.RESERVOIR.getMinPreLongs() + \"preLongs\");\r\n    }\r\n    if (serVer != SER_VER) {\r\n        if (serVer == 1) {\r\n            final short encK = extractEncodedReservoirSize(srcMem);\r\n            k = ReservoirSize.decodeValue(encK);\r\n        } else {\r\n            throw new SketchesArgumentException(\"Possible Corruption: Ser Ver must be \" + SER_VER + \": \" + serVer);\r\n        }\r\n    }\r\n    if (isEmpty) {\r\n        return new ReservoirLongsSketch(k, rf);\r\n    }\r\n    final int preLongBytes = numPreLongs << 3;\r\n    final int numSketchLongs = (int) Math.min(itemsSeen, k);\r\n    int allocatedSize = k;\r\n    if (itemsSeen < k) {\r\n        final int ceilingLgK = Util.toLog2(Util.ceilingPowerOf2(k), \"heapify\");\r\n        final int minLgSize = Util.toLog2(Util.ceilingPowerOf2((int) itemsSeen), \"heapify\");\r\n        final int initialLgSize = SamplingUtil.startingSubMultiple(ceilingLgK, rf.lg(), Math.max(minLgSize, MIN_LG_ARR_LONGS));\r\n        allocatedSize = SamplingUtil.getAdjustedSize(k, 1 << initialLgSize);\r\n    }\r\n    final long[] data = new long[allocatedSize];\r\n    srcMem.getLongArray(preLongBytes, data, 0, numSketchLongs);\r\n    return new ReservoirLongsSketch(data, itemsSeen, rf, k);\r\n}"
}, {
	"Path": "net.csdn.common.Strings.isEmpty",
	"Comment": "return true if the supplied collection is nullor empty. otherwise, return false.",
	"Method": "boolean isEmpty(Object[] array,boolean isEmpty,Collection collection){\r\n    return (collection == null || collection.isEmpty());\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.initModuleConfigFactory",
	"Comment": "initialize the factory used to create the module configuration.",
	"Method": "void initModuleConfigFactory(){\r\n    String configFactory = getServletConfig().getInitParameter(\"configFactory\");\r\n    if (configFactory != null) {\r\n        ModuleConfigFactory.setFactoryClass(configFactory);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionRedirect.countParameters",
	"Comment": "determine the number of values that are available for a specificparameter.",
	"Method": "int countParameters(Map parameters,String paramName){\r\n    Object value = parameters.get(paramName);\r\n    if (value == null) {\r\n        return 0;\r\n    }\r\n    if (value instanceof String) {\r\n        return 1;\r\n    } else if (value instanceof String[]) {\r\n        String[] values = (String[]) value;\r\n        return values.length;\r\n    } else {\r\n        throw new AssertionFailedError(\"Unexpected type found as parameter value for [\" + paramName + \"]\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.retrieveMessageResources",
	"Comment": "returns the appropriate messageresources object for the current moduleand the given bundle.",
	"Method": "MessageResources retrieveMessageResources(PageContext pageContext,String bundle,boolean checkPageScope){\r\n    MessageResources resources = null;\r\n    if (bundle == null) {\r\n        bundle = Globals.MESSAGES_KEY;\r\n    }\r\n    if (checkPageScope) {\r\n        resources = (MessageResources) pageContext.getAttribute(bundle, PageContext.PAGE_SCOPE);\r\n    }\r\n    if (resources == null) {\r\n        resources = (MessageResources) pageContext.getAttribute(bundle, PageContext.REQUEST_SCOPE);\r\n    }\r\n    if (resources == null) {\r\n        ModuleConfig moduleConfig = getModuleConfig(pageContext);\r\n        resources = (MessageResources) pageContext.getAttribute(bundle + moduleConfig.getPrefix(), PageContext.APPLICATION_SCOPE);\r\n    }\r\n    if (resources == null) {\r\n        resources = (MessageResources) pageContext.getAttribute(bundle, PageContext.APPLICATION_SCOPE);\r\n    }\r\n    if (resources == null) {\r\n        JspException e = new JspException(messages.getMessage(\"message.bundle\", bundle));\r\n        saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    return resources;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilStrutsModulesImpl.makeDefinitionsFactoryAccessible",
	"Comment": "make definition factory accessible to tags.factory is stored in servlet context.",
	"Method": "void makeDefinitionsFactoryAccessible(DefinitionsFactory factory,ServletContext servletContext){\r\n    String prefix = factory.getConfig().getFactoryName();\r\n    servletContext.setAttribute(DEFINITIONS_FACTORY + prefix, factory);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.initOther",
	"Comment": "initialize other global characteristics of the controllerservlet.",
	"Method": "void initOther(){\r\n    String value;\r\n    value = getServletConfig().getInitParameter(\"config\");\r\n    if (value != null) {\r\n        config = value;\r\n    }\r\n    value = getServletConfig().getInitParameter(\"convertNull\");\r\n    if (\"true\".equalsIgnoreCase(value) || \"yes\".equalsIgnoreCase(value) || \"on\".equalsIgnoreCase(value) || \"y\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value)) {\r\n        convertNull = true;\r\n    }\r\n    if (convertNull) {\r\n        ConvertUtils.deregister();\r\n        ConvertUtils.register(new BigDecimalConverter(null), BigDecimal.class);\r\n        ConvertUtils.register(new BigIntegerConverter(null), BigInteger.class);\r\n        ConvertUtils.register(new BooleanConverter(null), Boolean.class);\r\n        ConvertUtils.register(new ByteConverter(null), Byte.class);\r\n        ConvertUtils.register(new CharacterConverter(null), Character.class);\r\n        ConvertUtils.register(new DoubleConverter(null), Double.class);\r\n        ConvertUtils.register(new FloatConverter(null), Float.class);\r\n        ConvertUtils.register(new IntegerConverter(null), Integer.class);\r\n        ConvertUtils.register(new LongConverter(null), Long.class);\r\n        ConvertUtils.register(new ShortConverter(null), Short.class);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesPlugin.findStrutsPlugInConfigProperties",
	"Comment": "find original properties set in the struts pluginconfig object.first, we need to find the index of this plugin. then we retrieve the array of configsand then the object for this plugin.",
	"Method": "Map findStrutsPlugInConfigProperties(ActionServlet servlet,ModuleConfig config){\r\n    return currentPlugInConfigObject.getProperties();\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createSentence",
	"Comment": "creates a sentence with the given subject, verb and direct object. the\tphrase factory is used to construct a clause that then forms the\tcomponents of the sentence.",
	"Method": "DocumentElement createSentence(DocumentElement createSentence,List<NLGElement> components,DocumentElement createSentence,NLGElement components,DocumentElement createSentence,Object subject,Object verb,DocumentElement createSentence,Object subject,Object verb,Object complement,DocumentElement createSentence,String cannedSentence){\r\n    DocumentElement sentence = new DocumentElement(DocumentCategory.SENTENCE, null);\r\n    if (cannedSentence != null) {\r\n        sentence.addComponent(createStringElement(cannedSentence));\r\n    }\r\n    return sentence;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Sketch.getMaxCompactSketchBytes",
	"Comment": "returns the maximum number of storage bytes required for a compactsketch with the givennumber of actual entries.",
	"Method": "int getMaxCompactSketchBytes(int numberOfEntries){\r\n    return (numberOfEntries << 3) + (Family.COMPACT.getMaxPreLongs() << 3);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionForm.testSetMappedValues",
	"Comment": "positive and negative tests on setmappedproperty valid arguments.",
	"Method": "void testSetMappedValues(){\r\n    dynaForm.set(\"mappedProperty\", \"First Key\", \"New First Value\");\r\n    assertEquals(\"Can replace old value\", \"New First Value\", (String) dynaForm.get(\"mappedProperty\", \"First Key\"));\r\n    dynaForm.set(\"mappedProperty\", \"Fourth Key\", \"Fourth Value\");\r\n    assertEquals(\"Can set new value\", \"Fourth Value\", (String) dynaForm.get(\"mappedProperty\", \"Fourth Key\"));\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedIterateTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    if ((id == null) || (id.trim().length() == 0)) {\r\n        id = property;\r\n    }\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    originalNesting = NestedPropertyHelper.getCurrentProperty(request);\r\n    originalNestingName = NestedPropertyHelper.getCurrentName(request, this);\r\n    if (getName() == null) {\r\n        nesting = NestedPropertyHelper.getAdjustedProperty(request, getProperty());\r\n    } else {\r\n        nesting = getProperty();\r\n    }\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    int temp = super.doStartTag();\r\n    NestedPropertyHelper.setName(request, getName());\r\n    NestedPropertyHelper.setProperty(request, deriveNestedProperty());\r\n    return temp;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.HeapQuickSelectSketch.heapifyInstance",
	"Comment": "heapify a sketch from a memory updatesketch or union objectcontaining sketch data.",
	"Method": "HeapQuickSelectSketch heapifyInstance(Memory srcMem,long seed){\r\n    final int preambleLongs = extractPreLongs(srcMem);\r\n    final int lgNomLongs = extractLgNomLongs(srcMem);\r\n    final int lgArrLongs = extractLgArrLongs(srcMem);\r\n    checkUnionQuickSelectFamily(srcMem, preambleLongs, lgNomLongs);\r\n    checkMemIntegrity(srcMem, seed, preambleLongs, lgNomLongs, lgArrLongs);\r\n    final float p = extractP(srcMem);\r\n    final int lgRF = extractLgResizeFactor(srcMem);\r\n    ResizeFactor myRF = ResizeFactor.getRF(lgRF);\r\n    final int familyID = extractFamilyID(srcMem);\r\n    final Family family = Family.idToFamily(familyID);\r\n    if ((myRF == ResizeFactor.X1) && (lgArrLongs != Util.startingSubMultiple(lgNomLongs + 1, myRF, MIN_LG_ARR_LONGS))) {\r\n        myRF = ResizeFactor.X2;\r\n    }\r\n    final HeapQuickSelectSketch hqss = new HeapQuickSelectSketch(lgNomLongs, seed, p, myRF, preambleLongs, family);\r\n    hqss.lgArrLongs_ = lgArrLongs;\r\n    hqss.hashTableThreshold_ = setHashTableThreshold(lgNomLongs, lgArrLongs);\r\n    hqss.curCount_ = extractCurCount(srcMem);\r\n    hqss.thetaLong_ = extractThetaLong(srcMem);\r\n    hqss.empty_ = PreambleUtil.isEmpty(srcMem);\r\n    hqss.cache_ = new long[1 << lgArrLongs];\r\n    srcMem.getLongArray(preambleLongs << 3, hqss.cache_, 0, 1 << lgArrLongs);\r\n    return hqss;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedEmptyTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedCheckboxTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.isRestricted",
	"Comment": "indicates whether a mutabledynaclass is currently restricted.if so, no changes to the existing registration of property names,data types, readability, or writeability are allowed.",
	"Method": "boolean isRestricted(){\r\n    return restricted;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedTextTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedImgTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.processActionConfigClass",
	"Comment": "checks if the current actionconfig is using the correct class basedon the class of its ancestor actionconfig.",
	"Method": "ActionConfig processActionConfigClass(ActionConfig actionConfig,ModuleConfig moduleConfig){\r\n    String ancestor = actionConfig.getExtends();\r\n    if (ancestor == null) {\r\n        return actionConfig;\r\n    }\r\n    ActionConfig baseConfig = moduleConfig.findActionConfig(ancestor);\r\n    if (baseConfig == null) {\r\n        throw new UnavailableException(\"Unable to find \" + \"action config for '\" + ancestor + \"' to extend.\");\r\n    }\r\n    if (actionConfig.getClass().equals(ActionMapping.class)) {\r\n        if (!baseConfig.getClass().equals(actionConfig.getClass())) {\r\n            ActionConfig newActionConfig = null;\r\n            String baseConfigClassName = baseConfig.getClass().getName();\r\n            try {\r\n                newActionConfig = (ActionConfig) RequestUtils.applicationInstance(baseConfigClassName);\r\n                BeanUtils.copyProperties(newActionConfig, actionConfig);\r\n                ForwardConfig[] forwards = actionConfig.findForwardConfigs();\r\n                for (int i = 0; i < forwards.length; i++) {\r\n                    newActionConfig.addForwardConfig(forwards[i]);\r\n                }\r\n                ExceptionConfig[] exceptions = actionConfig.findExceptionConfigs();\r\n                for (int i = 0; i < exceptions.length; i++) {\r\n                    newActionConfig.addExceptionConfig(exceptions[i]);\r\n                }\r\n            } catch (Exception e) {\r\n                handleCreationException(baseConfigClassName, e);\r\n            }\r\n            moduleConfig.removeActionConfig(actionConfig);\r\n            moduleConfig.addActionConfig(newActionConfig);\r\n            actionConfig = newActionConfig;\r\n        }\r\n    }\r\n    return actionConfig;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createVerbPhrase",
	"Comment": "creates a verb phrase wrapping the main verb given. if a\tstring is passed in then some parsing is done to see if the\tverb contains a particle, for example fall down. the first word\tis taken to be the verb while all other words are assumed to form the\tparticle.",
	"Method": "VPPhraseSpec createVerbPhrase(VPPhraseSpec createVerbPhrase,Object verb){\r\n    VPPhraseSpec phraseElement = new VPPhraseSpec(this);\r\n    phraseElement.setVerb(verb);\r\n    setPhraseHead(phraseElement, phraseElement.getVerb());\r\n    return phraseElement;\r\n}"
}, {
	"Path": "org.apache.struts.chain.ComposableRequestProcessor.initializeActionContext",
	"Comment": "set common properties on the given actioncontextinstance so that commands in the chain can count on their presence.note that while this method does not require that its argument be aninstance of servletactioncontext, at this time many commonstruts commands will be expecting to receive an actioncontextwhich is also a servletactioncontext.",
	"Method": "void initializeActionContext(ActionContext context){\r\n    if (context instanceof ServletActionContext) {\r\n        ((ServletActionContext) context).setActionServlet(this.servlet);\r\n    }\r\n    context.setModuleConfig(this.moduleConfig);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.IntersectionImplR.checkMaxLgArrLongs",
	"Comment": "returns the correct maximum lgarrlongs given the capacity of the memory. checks that thecapacity is large enough for the minimum sized hash table.",
	"Method": "int checkMaxLgArrLongs(Memory dstMem){\r\n    final int preBytes = CONST_PREAMBLE_LONGS << 3;\r\n    final long cap = dstMem.getCapacity();\r\n    final int maxLgArrLongs = Integer.numberOfTrailingZeros(floorPowerOf2((int) (cap - preBytes)) >>> 3);\r\n    if (maxLgArrLongs < MIN_LG_ARR_LONGS) {\r\n        throw new SketchesArgumentException(\"dstMem not large enough for minimum sized hash table: \" + cap);\r\n    }\r\n    return maxLgArrLongs;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.Union.heapify",
	"Comment": "construct a union operator populated with the given memory image of an hllsketch.",
	"Method": "Union heapify(byte[] byteArray,Union heapify,Memory mem){\r\n    final int lgK = HllUtil.checkLgK(mem.getByte(PreambleUtil.LG_K_BYTE));\r\n    final HllSketch sk = HllSketch.heapify(mem);\r\n    final Union union = new Union(lgK);\r\n    union.update(sk);\r\n    return union;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.IntersectionImplR.getRetainedEntries",
	"Comment": "gets the number of retained entries from this operation. if negative, it is interpretedas the infinite universal set.",
	"Method": "int getRetainedEntries(boolean valid){\r\n    return curCount_;\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateDoubleLocale",
	"Comment": "checks if the field can safely be converted to a double primitive.",
	"Method": "Object validateDoubleLocale(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    Locale locale = RequestUtils.getUserLocale(request, null);\r\n    result = GenericTypeValidator.formatDouble(value, locale);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.UtilTest.testQuadraticTimeIncrementHistogramCounters",
	"Comment": "a couple of basic unit tests for the histogram construction helper functions.",
	"Method": "void testQuadraticTimeIncrementHistogramCounters(){\r\n    final double[] samples = { 0.1, 0.2, 0.3, 0.4, 0.5 };\r\n    final DoublesArrayAccessor accessor = DoublesArrayAccessor.wrap(samples);\r\n    {\r\n        final double[] splitPoints = { 0.25, 0.4 };\r\n        final double[] counters = { 0, 0, 0 };\r\n        final long[] answers = { 200, 100, 200 };\r\n        DoublesPmfCdfImpl.bilinearTimeIncrementHistogramCounters(accessor, 100, splitPoints, counters);\r\n        for (int j = 0; j < counters.length; j++) {\r\n            assertEquals(counters[j], answers[j], 0.00001);\r\n        }\r\n    }\r\n    {\r\n        final double[] splitPoints = { 0.01, 0.02 };\r\n        final double[] counters = { 0, 0, 0 };\r\n        final long[] answers = { 0, 0, 500 };\r\n        DoublesPmfCdfImpl.bilinearTimeIncrementHistogramCounters(accessor, 100, splitPoints, counters);\r\n        for (int j = 0; j < counters.length; j++) {\r\n            assertEquals(counters[j], answers[j], 0.00001);\r\n        }\r\n    }\r\n    {\r\n        final double[] splitPoints = { 0.8, 0.9 };\r\n        final double[] counters = { 0, 0, 0 };\r\n        final long[] answers = { 500, 0, 0 };\r\n        DoublesPmfCdfImpl.bilinearTimeIncrementHistogramCounters(accessor, 100, splitPoints, counters);\r\n        for (int j = 0; j < counters.length; j++) {\r\n            assertEquals(counters[j], answers[j], 0.00001);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesException.getMessage",
	"Comment": "return a detail message for this exception. if there is a embedded exception, and if the tilesexception has no detail message of its own, this method will return the detail message from the embedded exception.",
	"Method": "String getMessage(){\r\n    String message = super.getMessage();\r\n    if (message == null && exception != null) {\r\n        return exception.getMessage();\r\n    } else {\r\n        return message;\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractValidateActionForm.isCancelled",
	"Comment": "helper method to verify the cancel state.if the state is invalid, cancel is unset and aninvalidcancelexception is thrown.",
	"Method": "boolean isCancelled(ActionContext actionCtx,ActionConfig actionConfig){\r\n    Boolean cancel = actionCtx.getCancelled();\r\n    boolean cancelled = ((cancel != null) && cancel.booleanValue());\r\n    boolean cancellable = actionConfig.getCancellable();\r\n    boolean invalidState = (cancelled && !cancellable);\r\n    if (invalidState) {\r\n        actionCtx.setCancelled(Boolean.FALSE);\r\n        actionCtx.setFormValid(Boolean.FALSE);\r\n        throw new InvalidCancelException();\r\n    }\r\n    return cancelled;\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionForm.getDynaClass",
	"Comment": "return the dynaclass instance that describes the set ofproperties available for this dynabean.",
	"Method": "DynaClass getDynaClass(){\r\n    return (this.dynaClass);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationBuilder.setNominalEntries",
	"Comment": "sets the nominal entries for this set operation. the minimum value is 16 and the maximum valueis 67,108,864, which is 2^26. be aware that unions as large as this maximum value have notbeen thoroughly tested or characterized for performance.",
	"Method": "SetOperationBuilder setNominalEntries(int nomEntries){\r\n    bLgNomLongs = Integer.numberOfTrailingZeros(ceilingPowerOf2(nomEntries));\r\n    if ((bLgNomLongs > MAX_LG_NOM_LONGS) || (bLgNomLongs < MIN_LG_NOM_LONGS)) {\r\n        throw new SketchesArgumentException(\"Nominal Entries must be >= 16 and <= 67108864: \" + nomEntries);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.jf.util.SparseIntArray.delete",
	"Comment": "removes the mapping from the specified key, if there was any.",
	"Method": "void delete(int key){\r\n    int i = binarySearch(mKeys, 0, mSize, key);\r\n    if (i >= 0) {\r\n        removeAt(i);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotEmptyTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.message",
	"Comment": "look up and return a message string, based on the specifiedparameters.",
	"Method": "String message(PageContext pageContext,String bundle,String locale,String key,String message,PageContext pageContext,String bundle,String locale,String key,Object[] args){\r\n    MessageResources resources = retrieveMessageResources(pageContext, bundle, false);\r\n    Locale userLocale = getUserLocale(pageContext, locale);\r\n    String message = null;\r\n    if (args == null) {\r\n        message = resources.getMessage(userLocale, key);\r\n    } else {\r\n        message = resources.getMessage(userLocale, key, args);\r\n    }\r\n    if ((message == null) && log.isDebugEnabled()) {\r\n        log.debug(resources.getMessage(\"message.resources\", key, bundle, locale));\r\n    }\r\n    return message;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ReversePurgeItemHashMap.keepOnlyPositiveCounts",
	"Comment": "processes the map arrays and retains only keys with positive counts.",
	"Method": "void keepOnlyPositiveCounts(){\r\n    int firstProbe = states.length - 1;\r\n    while (states[firstProbe] > 0) {\r\n        firstProbe--;\r\n    }\r\n    for (int probe = firstProbe; probe-- > 0; ) {\r\n        if (states[probe] > 0 && values[probe] <= 0) {\r\n            hashDelete(probe);\r\n            numActive--;\r\n        }\r\n    }\r\n    for (int probe = states.length; probe-- > firstProbe; ) {\r\n        if (states[probe] > 0 && values[probe] <= 0) {\r\n            hashDelete(probe);\r\n            numActive--;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.hllmap.UniqueCountMap.getActiveEntries",
	"Comment": "returns the number of active, unique keys across all internal maps",
	"Method": "int getActiveEntries(){\r\n    return maps_[0].getCurrentCountEntries();\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExceptionCatcher.setExceptionCommand",
	"Comment": "set the name of the command to be executed if an exceptionoccurs.",
	"Method": "void setExceptionCommand(String exceptionCommand){\r\n    this.exceptionCommand = exceptionCommand;\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.getActionMappingClass",
	"Comment": "the default class name to be used when creating action mappinginstances.",
	"Method": "String getActionMappingClass(){\r\n    return this.actionMappingClass;\r\n}"
}, {
	"Path": "net.csdn.common.Base64.decodeToObject",
	"Comment": "attempts to decode base64 data and deserialize a javaobject within. returns null if there was an error.if loader is not null, it will be the class loaderused when deserializing.",
	"Method": "Object decodeToObject(String encodedObject,Object decodeToObject,String encodedObject,int options,ClassLoader loader){\r\n    byte[] objBytes = decode(encodedObject, options);\r\n    java.io.ByteArrayInputStream bais = null;\r\n    java.io.ObjectInputStream ois = null;\r\n    Object obj = null;\r\n    try {\r\n        bais = new java.io.ByteArrayInputStream(objBytes);\r\n        if (loader == null) {\r\n            ois = new java.io.ObjectInputStream(bais);\r\n        } else {\r\n            ois = new java.io.ObjectInputStream(bais) {\r\n                @Override\r\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\r\n                    Class c = Class.forName(streamClass.getName(), false, loader);\r\n                    if (c == null) {\r\n                        return super.resolveClass(streamClass);\r\n                    } else {\r\n                        return c;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        obj = ois.readObject();\r\n    } catch (java.io.IOException e) {\r\n        throw e;\r\n    } catch (ClassNotFoundException e) {\r\n        throw e;\r\n    } finally {\r\n        try {\r\n            bais.close();\r\n        } catch (Exception e) {\r\n        }\r\n        try {\r\n            ois.close();\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n    return obj;\r\n}"
}, {
	"Path": "net.csdn.common.Base64.decodeToObject",
	"Comment": "attempts to decode base64 data and deserialize a javaobject within. returns null if there was an error.if loader is not null, it will be the class loaderused when deserializing.",
	"Method": "Object decodeToObject(String encodedObject,Object decodeToObject,String encodedObject,int options,ClassLoader loader){\r\n    Class c = Class.forName(streamClass.getName(), false, loader);\r\n    if (c == null) {\r\n        return super.resolveClass(streamClass);\r\n    } else {\r\n        return c;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsUnion.toByteArray",
	"Comment": "returns a byte array representation of this union. this method should be used when the arrayelements are subclasses of a common base class.",
	"Method": "byte[] toByteArray(ArrayOfItemsSerDe<T> serDe,byte[] toByteArray,ArrayOfItemsSerDe<T> serDe,Class<?> clazz){\r\n    final int preLongs, outBytes;\r\n    final boolean empty = gadget_ == null;\r\n    final byte[] gadgetBytes = (gadget_ != null ? gadget_.toByteArray(serDe, clazz) : null);\r\n    if (empty) {\r\n        preLongs = Family.RESERVOIR_UNION.getMinPreLongs();\r\n        outBytes = 8;\r\n    } else {\r\n        preLongs = Family.RESERVOIR_UNION.getMaxPreLongs();\r\n        outBytes = (preLongs << 3) + gadgetBytes.length;\r\n    }\r\n    final byte[] outArr = new byte[outBytes];\r\n    final WritableMemory mem = WritableMemory.wrap(outArr);\r\n    PreambleUtil.insertPreLongs(mem, preLongs);\r\n    PreambleUtil.insertSerVer(mem, SER_VER);\r\n    PreambleUtil.insertFamilyID(mem, Family.RESERVOIR_UNION.getID());\r\n    if (empty) {\r\n        PreambleUtil.insertFlags(mem, EMPTY_FLAG_MASK);\r\n    } else {\r\n        PreambleUtil.insertFlags(mem, 0);\r\n    }\r\n    PreambleUtil.insertMaxK(mem, maxK_);\r\n    if (!empty) {\r\n        final int preBytes = preLongs << 3;\r\n        mem.putByteArray(preBytes, gadgetBytes, 0, gadgetBytes.length);\r\n    }\r\n    return outArr;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Sketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of a theta sketch.",
	"Method": "String toString(String toString,boolean sketchSummary,boolean dataDetail,int width,boolean hexMode,String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.preambleToString(mem);\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.getExtends",
	"Comment": "returns the path of the actionconfig that this object should inheritproperties from.",
	"Method": "String getExtends(){\r\n    return (this.inherit);\r\n}"
}, {
	"Path": "simplenlg.syntax.english.FeatureTest.testProgressiveAndComplementiserFeatures_FutureTense",
	"Comment": "test the use of the progressive and complementiser features in future tense.",
	"Method": "void testProgressiveAndComplementiserFeatures_FutureTense(){\r\n    this.phraseFactory.setLexicon(this.lexicon);\r\n    PhraseElement inner = phraseFactory.createClause(\"I\", \"make\", \"sentence for\");\r\n    inner.setFeature(Feature.PROGRESSIVE, true);\r\n    inner.setFeature(Feature.COMPLEMENTISER, \"whom\");\r\n    PhraseElement engineer = phraseFactory.createNounPhrase(\"the engineer\");\r\n    engineer.addComplement(inner);\r\n    PhraseElement outer = phraseFactory.createClause(engineer, \"go\", phraseFactory.createPrepositionPhrase(\"to\", \"holidays\"));\r\n    outer.setFeature(Feature.TENSE, Tense.FUTURE);\r\n    outer.setFeature(Feature.PROGRESSIVE, true);\r\n    outer.addPostModifier(\"tomorrow\");\r\n    DocumentElement sentence = docFactory.createSentence(outer);\r\n    NLGElement realised = realiser.realise(sentence);\r\n    Assert.assertEquals(\"The engineer whom I am making sentence for will be going to holidays tomorrow.\", realised.getRealisation());\r\n}"
}, {
	"Path": "net.csdn.common.logging.log4j.ConsoleAppender.getFollow",
	"Comment": "gets whether the appender honors reassignments of system.outor system.err made after configuration.",
	"Method": "boolean getFollow(){\r\n    return follow;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.xmlDefinition.FactorySet.getFactory",
	"Comment": "get a factory by its key.if key is null, return defaultfactory.search in loaded factories. if not found, create factory and store return value inloaded factories.",
	"Method": "DefinitionsFactory getFactory(Object key,ServletRequest request,ServletContext servletContext){\r\n    if (key == null)\r\n        return getDefaultFactory();\r\n    Object factory = factories.get(key);\r\n    if (factory == null) {\r\n        synchronized (factories) {\r\n            factory = factories.get(key);\r\n            if (factory == null) {\r\n                factory = createFactory(key, request, servletContext);\r\n                factories.put(key, factory);\r\n            }\r\n        }\r\n    }\r\n    return (DefinitionsFactory) factory;\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcWrapper.getLowerBound",
	"Comment": "returns the best estimate of the lower bound of the confidence interval given kappa,the number of standard deviations from the mean.",
	"Method": "double getLowerBound(int kappa){\r\n    if (!hasHip(mem)) {\r\n        return getIconConfidenceLB(PreambleUtil.getLgK(mem), getNumCoupons(mem), kappa);\r\n    }\r\n    return getHipConfidenceLB(PreambleUtil.getLgK(mem), getNumCoupons(mem), getHipAccum(mem), kappa);\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.AesCbcWithIntegrity.saltString",
	"Comment": "converts the given salt into a base64 encoded string suitable forstorage.",
	"Method": "String saltString(byte[] salt){\r\n    return Base64.encodeToString(salt, BASE64_FLAGS);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Sketch.checkSketchAndMemoryFlags",
	"Comment": "checks ordered and compact flags for integrity between sketch and memory",
	"Method": "void checkSketchAndMemoryFlags(Sketch sketch){\r\n    final Memory mem = sketch.getMemory();\r\n    if (mem == null) {\r\n        return;\r\n    }\r\n    final int flags = PreambleUtil.extractFlags(mem);\r\n    if (((flags & COMPACT_FLAG_MASK) > 0) ^ sketch.isCompact()) {\r\n        throw new SketchesArgumentException(\"Possible corruption: \" + \"Memory Compact Flag inconsistent with Sketch\");\r\n    }\r\n    if (((flags & ORDERED_FLAG_MASK) > 0) ^ sketch.isOrdered()) {\r\n        throw new SketchesArgumentException(\"Possible corruption: \" + \"Memory Ordered Flag inconsistent with Sketch\");\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesIntersection.reset",
	"Comment": "resets the internal set to the initial state, which represents the universal set",
	"Method": "void reset(){\r\n    isEmpty_ = false;\r\n    theta_ = Long.MAX_VALUE;\r\n    sketch_ = null;\r\n    isFirstCall_ = true;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.update",
	"Comment": "randomly decide whether or not to include an item in the sample set.",
	"Method": "void update(T item){\r\n    if (itemsSeen_ == MAX_ITEMS_SEEN) {\r\n        throw new SketchesStateException(\"Sketch has exceeded capacity for total items seen: \" + MAX_ITEMS_SEEN);\r\n    }\r\n    if (item == null) {\r\n        return;\r\n    }\r\n    if (itemsSeen_ < reservoirSize_) {\r\n        if (itemsSeen_ >= currItemsAlloc_) {\r\n            growReservoir();\r\n        }\r\n        assert itemsSeen_ < currItemsAlloc_;\r\n        data_.add(item);\r\n        ++itemsSeen_;\r\n    } else {\r\n        ++itemsSeen_;\r\n        if ((SamplingUtil.rand.nextDouble() * itemsSeen_) < reservoirSize_) {\r\n            final int newSlot = SamplingUtil.rand.nextInt(reservoirSize_);\r\n            data_.set(newSlot, item);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.leftPeriphery",
	"Comment": "collect a list of pairs of constituents with the same syntactic function\tfrom the left periphery of two sentences. the left periphery encompasses\tthe subjects, front modifiers and cue phrases of the sentences.",
	"Method": "List<PhraseSet> leftPeriphery(NLGElement sentences){\r\n    List<PhraseSet> funcsets = new ArrayList<PhraseSet>();\r\n    PhraseSet cue = new PhraseSet(DiscourseFunction.CUE_PHRASE);\r\n    PhraseSet front = new PhraseSet(DiscourseFunction.FRONT_MODIFIER);\r\n    PhraseSet subj = new PhraseSet(DiscourseFunction.SUBJECT);\r\n    for (NLGElement s : sentences) {\r\n        if (s.hasFeature(Feature.CUE_PHRASE)) {\r\n            cue.addPhrases(s.getFeatureAsElementList(Feature.CUE_PHRASE));\r\n        }\r\n        if (s.hasFeature(InternalFeature.FRONT_MODIFIERS)) {\r\n            front.addPhrases(s.getFeatureAsElementList(InternalFeature.FRONT_MODIFIERS));\r\n        }\r\n        if (s.hasFeature(InternalFeature.SUBJECTS)) {\r\n            subj.addPhrases(s.getFeatureAsElementList(InternalFeature.SUBJECTS));\r\n        }\r\n    }\r\n    funcsets.add(cue);\r\n    funcsets.add(front);\r\n    funcsets.add(subj);\r\n    return funcsets;\r\n}"
}, {
	"Path": "org.apache.struts.util.LabelValueBean.equals",
	"Comment": "labelvaluebeans are equal if their values are both null or equal.",
	"Method": "boolean equals(Object obj){\r\n    if (obj == this) {\r\n        return true;\r\n    }\r\n    if (!(obj instanceof LabelValueBean)) {\r\n        return false;\r\n    }\r\n    LabelValueBean bean = (LabelValueBean) obj;\r\n    int nil = (this.getValue() == null) ? 1 : 0;\r\n    nil += ((bean.getValue() == null) ? 1 : 0);\r\n    if (nil == 2) {\r\n        return true;\r\n    } else if (nil == 1) {\r\n        return false;\r\n    } else {\r\n        return this.getValue().equals(bean.getValue());\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.getProcessorForModule",
	"Comment": "returns the requestprocessor for the given module or null if onedoes not exist.this method will not create a requestprocessor.",
	"Method": "RequestProcessor getProcessorForModule(ModuleConfig config){\r\n    String key = Globals.REQUEST_PROCESSOR_KEY + config.getPrefix();\r\n    return (RequestProcessor) getServletContext().getAttribute(key);\r\n}"
}, {
	"Path": "net.csdn.common.Strings.toStringArray",
	"Comment": "copy the given enumeration into a string array.the enumeration must contain string elements only.",
	"Method": "String[] toStringArray(Collection<String> collection,String[] toStringArray,Enumeration<String> enumeration){\r\n    if (enumeration == null) {\r\n        return null;\r\n    }\r\n    List<String> list = Collections.list(enumeration);\r\n    return list.toArray(new String[list.size()]);\r\n}"
}, {
	"Path": "simplenlg.orthography.english.OrthographyProcessor.realiseSentence",
	"Comment": "performs the realisation on a sentence. this includes adding the\tterminator and capitalising the first letter.",
	"Method": "NLGElement realiseSentence(List<NLGElement> components,NLGElement element){\r\n    NLGElement realisedElement = null;\r\n    if (components != null && components.size() > 0) {\r\n        StringBuffer realisation = new StringBuffer();\r\n        realiseList(realisation, components, \"\");\r\n        stripLeadingCommas(realisation);\r\n        capitaliseFirstLetter(realisation);\r\n        terminateSentence(realisation, element.getFeatureAsBoolean(InternalFeature.INTERROGATIVE).booleanValue());\r\n        ((DocumentElement) element).clearComponents();\r\n        element.setRealisation(realisation.toString());\r\n        realisedElement = element;\r\n    }\r\n    return realisedElement;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.getCurrentMapCapacity",
	"Comment": "returns the current number of counters the sketch is configured to support.",
	"Method": "int getCurrentMapCapacity(){\r\n    return curMapCap;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.Union.toCompactByteArray",
	"Comment": "gets the serialization of this union operator as a byte array in compact form, which isdesigned to be heapified only. it is not directly updatable.for the union operator, this is the serialization of the internal state ofthe union operator as a sketch.",
	"Method": "byte[] toCompactByteArray(){\r\n    return gadget.toCompactByteArray();\r\n}"
}, {
	"Path": "com.yahoo.sketches.hllmap.HllMap.findEmpty",
	"Comment": "find the first empty slot for the given key.only used by resize, where it is known that the key does not exist in the table.throws an exception if no empty slots.",
	"Method": "int findEmpty(byte[] key,int tableEntries,byte[] stateArr){\r\n    final long[] hash = MurmurHash3.hash(key, SEED);\r\n    int entryIndex = getIndex(hash[0], tableEntries);\r\n    final int stride = getStride(hash[1], tableEntries);\r\n    final int loopIndex = entryIndex;\r\n    do {\r\n        if (isBitClear(stateArr, entryIndex)) {\r\n            return entryIndex;\r\n        }\r\n        entryIndex = (entryIndex + stride) % tableEntries;\r\n    } while (entryIndex != loopIndex);\r\n    throw new SketchesArgumentException(\"No empty slots.\");\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.HeapCompactDoublesSketch.heapifyInstance",
	"Comment": "heapifies the given srcmem, which must be a memory image of a doublessketch and may have data.",
	"Method": "HeapCompactDoublesSketch heapifyInstance(Memory srcMem){\r\n    final long memCapBytes = srcMem.getCapacity();\r\n    if (memCapBytes < Long.BYTES) {\r\n        throw new SketchesArgumentException(\"Source Memory too small: \" + memCapBytes + \" < 8\");\r\n    }\r\n    final int preLongs = extractPreLongs(srcMem);\r\n    final int serVer = extractSerVer(srcMem);\r\n    final int familyID = extractFamilyID(srcMem);\r\n    final int flags = extractFlags(srcMem);\r\n    final int k = extractK(srcMem);\r\n    final boolean empty = (flags & EMPTY_FLAG_MASK) > 0;\r\n    final long n = empty ? 0 : extractN(srcMem);\r\n    DoublesUtil.checkDoublesSerVer(serVer, MIN_HEAP_DOUBLES_SER_VER);\r\n    Util.checkHeapFlags(flags);\r\n    HeapUpdateDoublesSketch.checkPreLongsFlagsSerVer(flags, serVer, preLongs);\r\n    Util.checkFamilyID(familyID);\r\n    final HeapCompactDoublesSketch hds = new HeapCompactDoublesSketch(k);\r\n    if (empty) {\r\n        hds.n_ = 0;\r\n        hds.combinedBuffer_ = null;\r\n        hds.baseBufferCount_ = 0;\r\n        hds.bitPattern_ = 0;\r\n        hds.minValue_ = Double.NaN;\r\n        hds.maxValue_ = Double.NaN;\r\n        return hds;\r\n    }\r\n    final boolean srcIsCompact = (serVer == 2) | ((flags & (COMPACT_FLAG_MASK | READ_ONLY_FLAG_MASK)) > 0);\r\n    HeapUpdateDoublesSketch.checkHeapMemCapacity(k, n, srcIsCompact, serVer, memCapBytes);\r\n    hds.n_ = n;\r\n    hds.baseBufferCount_ = computeBaseBufferItems(k, n);\r\n    hds.bitPattern_ = computeBitPattern(k, n);\r\n    hds.minValue_ = srcMem.getDouble(MIN_DOUBLE);\r\n    hds.maxValue_ = srcMem.getDouble(MAX_DOUBLE);\r\n    final int totItems = Util.computeRetainedItems(k, n);\r\n    hds.srcMemoryToCombinedBuffer(srcMem, serVer, srcIsCompact, totItems);\r\n    return hds;\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.processMultipart",
	"Comment": "if this is a multipart request, wrap it with a special wrapper.otherwise, return the request unchanged.",
	"Method": "HttpServletRequest processMultipart(HttpServletRequest request){\r\n    if (!\"POST\".equalsIgnoreCase(request.getMethod())) {\r\n        return (request);\r\n    }\r\n    String contentType = request.getContentType();\r\n    if ((contentType != null) && contentType.startsWith(\"multipart/form-data\")) {\r\n        return (new MultipartRequestWrapper(request));\r\n    } else {\r\n        return (request);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Rebuilder.resize",
	"Comment": "resizes existing hash array into a larger one within a single memory assuming enough space.this assumes a memory preamble of standard form with the correct value of thetalong.the memory lgarrlongs will change.afterwards, the caller must update local copies of lgarrlongs and hashtablethreshold frommemory.",
	"Method": "void resize(WritableMemory mem,int preambleLongs,int srcLgArrLongs,int tgtLgArrLongs){\r\n    final int preBytes = preambleLongs << 3;\r\n    final int srcHTLen = 1 << srcLgArrLongs;\r\n    final long[] srcHTArr = new long[srcHTLen];\r\n    mem.getLongArray(preBytes, srcHTArr, 0, srcHTLen);\r\n    final int dstHTLen = 1 << tgtLgArrLongs;\r\n    final long[] dstHTArr = new long[dstHTLen];\r\n    final long thetaLong = extractThetaLong(mem);\r\n    HashOperations.hashArrayInsert(srcHTArr, dstHTArr, tgtLgArrLongs, thetaLong);\r\n    mem.putLongArray(preBytes, dstHTArr, 0, dstHTLen);\r\n    insertLgArrLongs(mem, tgtLgArrLongs);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.initModuleExceptionConfigs",
	"Comment": "initialize the exception handlers for the specified module.",
	"Method": "void initModuleExceptionConfigs(ModuleConfig config){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Initializing module path '\" + config.getPrefix() + \"' forwards\");\r\n    }\r\n    ExceptionConfig[] exceptions = config.findExceptionConfigs();\r\n    for (int i = 0; i < exceptions.length; i++) {\r\n        ExceptionConfig exception = exceptions[i];\r\n        processExceptionExtension(exception, config, null);\r\n    }\r\n    for (int i = 0; i < exceptions.length; i++) {\r\n        ExceptionConfig exception = exceptions[i];\r\n        if (exception.getKey() == null) {\r\n            handleValueRequiredException(\"key\", exception.getType(), \"global exception config\");\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.setCacheLimit",
	"Comment": "sets the cache limit size for the concurrentheapthetabuffer.",
	"Method": "ConcurrentThetaBuilder setCacheLimit(int cacheLimit){\r\n    bCacheLimit = cacheLimit;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.xmlDefinition.I18nFactorySet.createFactory",
	"Comment": "create a factory for specified key. if creation failes, return default factory and log an error message.",
	"Method": "DefinitionsFactory createFactory(Object key,ServletRequest request,ServletContext servletContext){\r\n    if (key == null) {\r\n        return getDefaultFactory();\r\n    }\r\n    List possiblePostfixes = calculateSuffixes((Locale) key);\r\n    XmlDefinitionsSet lastXmlFile = null;\r\n    DefinitionsFactory factory = null;\r\n    String curPostfix = null;\r\n    int i = 0;\r\n    for (i = possiblePostfixes.size() - 1; i >= 0; i--) {\r\n        curPostfix = (String) possiblePostfixes.get(i);\r\n        factory = (DefinitionsFactory) loaded.get(curPostfix);\r\n        if (factory != null) {\r\n            return factory;\r\n        }\r\n        lastXmlFile = parseXmlFiles(servletContext, curPostfix, null);\r\n        if (lastXmlFile != null) {\r\n            break;\r\n        }\r\n    }\r\n    if (lastXmlFile == null) {\r\n        return getDefaultFactory();\r\n    }\r\n    String lastPostfix = curPostfix;\r\n    XmlDefinitionsSet rootXmlConfig = parseXmlFiles(servletContext, \"\", null);\r\n    for (int j = 0; j < i; j++) {\r\n        curPostfix = (String) possiblePostfixes.get(j);\r\n        parseXmlFiles(servletContext, curPostfix, rootXmlConfig);\r\n    }\r\n    rootXmlConfig.extend(lastXmlFile);\r\n    rootXmlConfig.resolveInheritances();\r\n    factory = new DefinitionsFactory(rootXmlConfig);\r\n    loaded.put(lastPostfix, factory);\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"factory loaded : \" + factory);\r\n    }\r\n    return factory;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.CookieTag.doStartTag",
	"Comment": "retrieve the required property and expose it as a scripting variable.",
	"Method": "int doStartTag(){\r\n    ArrayList values = new ArrayList();\r\n    Cookie[] cookies = ((HttpServletRequest) pageContext.getRequest()).getCookies();\r\n    if (cookies == null) {\r\n        cookies = new Cookie[0];\r\n    }\r\n    for (int i = 0; i < cookies.length; i++) {\r\n        if (name.equals(cookies[i].getName())) {\r\n            values.add(cookies[i]);\r\n        }\r\n    }\r\n    if ((values.size() < 1) && (value != null)) {\r\n        values.add(new Cookie(name, value));\r\n    }\r\n    if (values.size() < 1) {\r\n        JspException e = new JspException(messages.getMessage(\"cookie.get\", name));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    if (multiple == null) {\r\n        Cookie cookie = (Cookie) values.get(0);\r\n        pageContext.setAttribute(id, cookie);\r\n    } else {\r\n        cookies = new Cookie[values.size()];\r\n        pageContext.setAttribute(id, values.toArray(cookies));\r\n    }\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyHelper.getCurrentName",
	"Comment": "returns the bean name from the request object that the propertiesare nesting against.the requirement of the tag itself could be removed in the future,but is required if support for thetag is maintained.",
	"Method": "String getCurrentName(HttpServletRequest request,NestedNameSupport nested){\r\n    NestedReference nr = (NestedReference) request.getAttribute(NESTED_INCLUDES_KEY);\r\n    if (nr != null) {\r\n        return nr.getBeanName();\r\n    } else {\r\n        Tag tag = (Tag) nested;\r\n        Tag formTag = null;\r\n        do {\r\n            tag = tag.getParent();\r\n            if ((tag != null) && tag instanceof FormTag) {\r\n                formTag = tag;\r\n            }\r\n        } while ((formTag == null) && (tag != null));\r\n        if (formTag == null) {\r\n            return \"\";\r\n        }\r\n        return ((FormTag) formTag).getBeanName();\r\n    }\r\n}"
}, {
	"Path": "simplenlg.orthography.english.OrthographyProcessor.isCommaSepPremodifiers",
	"Comment": "check whether this processor separates premodifiers using a comma.",
	"Method": "boolean isCommaSepPremodifiers(){\r\n    return commaSepPremodifiers;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedImageTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "jadx.core.dex.visitors.ModVisitor.replaceInsn",
	"Comment": "replace insn by index i in block,\tfor proper copy attributes, assume attributes are not overlap",
	"Method": "void replaceInsn(BlockNode block,int i,InsnNode insn){\r\n    InsnNode prevInsn = block.getInstructions().get(i);\r\n    insn.copyAttributesFrom(prevInsn);\r\n    insn.setSourceLine(prevInsn.getSourceLine());\r\n    block.getInstructions().set(i, insn);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.Union.getMaxSerializationBytes",
	"Comment": "returns the maximum size in bytes that this union operator can grow to given a lgk.",
	"Method": "int getMaxSerializationBytes(int lgK){\r\n    return HllSketch.getMaxUpdatableSerializationBytes(lgK, TgtHllType.HLL_8);\r\n}"
}, {
	"Path": "org.apache.struts.chain.contexts.WebActionContext.getInitParam",
	"Comment": "return an immutable map that maps context applicationinitialization parameters to their values.",
	"Method": "Map getInitParam(){\r\n    return webContext().getInitParam();\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationBuilder.build",
	"Comment": "returns a setoperation with the current configuration of this builder, the given familyand the given destination memory. note that the destination memory cannot be used with anotb.",
	"Method": "SetOperation build(Family family,SetOperation build,Family family,WritableMemory dstMem){\r\n    SetOperation setOp = null;\r\n    switch(family) {\r\n        case UNION:\r\n            {\r\n                if (dstMem == null) {\r\n                    setOp = UnionImpl.initNewHeapInstance(bLgNomLongs, bSeed, bP, bRF);\r\n                } else {\r\n                    setOp = UnionImpl.initNewDirectInstance(bLgNomLongs, bSeed, bP, bRF, bMemReqSvr, dstMem);\r\n                }\r\n                break;\r\n            }\r\n        case INTERSECTION:\r\n            {\r\n                if (dstMem == null) {\r\n                    setOp = IntersectionImpl.initNewHeapInstance(bSeed);\r\n                } else {\r\n                    setOp = IntersectionImpl.initNewDirectInstance(bSeed, dstMem);\r\n                }\r\n                break;\r\n            }\r\n        case A_NOT_B:\r\n            {\r\n                if (dstMem == null) {\r\n                    setOp = new HeapAnotB(bSeed);\r\n                } else {\r\n                    throw new SketchesArgumentException(\"AnotB is a stateless operation and cannot be persisted.\");\r\n                }\r\n                break;\r\n            }\r\n        default:\r\n            throw new SketchesArgumentException(\"Given Family cannot be built as a SetOperation: \" + family.toString());\r\n    }\r\n    return setOp;\r\n}"
}, {
	"Path": "simplenlg.lexicon.NIHDBLexicon.makeWord",
	"Comment": "make a wordelement from a lexical record. currently just specifies basic\tparams and inflections should do more in the future!",
	"Method": "WordElement makeWord(LexRecord record){\r\n    String baseForm = record.GetBase();\r\n    LexicalCategory category = getSimplenlgCategory(record);\r\n    String id = record.GetEui();\r\n    WordElement wordElement = new WordElement(baseForm, category, id);\r\n    switch(category) {\r\n        case ADJECTIVE:\r\n            addAdjectiveInfo(wordElement, record.GetCatEntry().GetAdjEntry());\r\n            break;\r\n        case ADVERB:\r\n            addAdverbInfo(wordElement, record.GetCatEntry().GetAdvEntry());\r\n            break;\r\n        case NOUN:\r\n            addNounInfo(wordElement, record.GetCatEntry().GetNounEntry());\r\n            break;\r\n        case VERB:\r\n            addVerbInfo(wordElement, record.GetCatEntry().GetVerbEntry());\r\n            break;\r\n    }\r\n    Inflection defaultInfl = (Inflection) wordElement.getDefaultInflectionalVariant();\r\n    for (InflVar inflection : record.GetInflVarsAndAgreements().GetInflValues()) {\r\n        String simplenlgInflection = getSimplenlgInflection(inflection.GetInflection());\r\n        if (simplenlgInflection != null) {\r\n            String inflectedForm = inflection.GetVar();\r\n            Inflection inflType = Inflection.getInflCode(inflection.GetType());\r\n            if (inflType != null && !(Inflection.REGULAR.equals(inflType) && !this.keepStandardInflections)) {\r\n                wordElement.addInflectionalVariant(inflType, simplenlgInflection, inflectedForm);\r\n            }\r\n            if (defaultInfl == null || (defaultInfl.equals(inflType) && !(Inflection.REGULAR.equals(inflType) && !this.keepStandardInflections))) {\r\n                wordElement.setFeature(simplenlgInflection, inflectedForm);\r\n            }\r\n        }\r\n    }\r\n    addAcronymInfo(wordElement, record);\r\n    addSpellingVariants(wordElement, record);\r\n    return wordElement;\r\n}"
}, {
	"Path": "org.apache.struts.action.TestDynaActionFormClass.testConfigAdd",
	"Comment": "check for ability to add a property before and after freezing",
	"Method": "void testConfigAdd(){\r\n    FormPropertyConfig prop = null;\r\n    prop = beanConfig.findFormPropertyConfig(\"fooProperty\");\r\n    assertNull(\"fooProperty not found\", prop);\r\n    beanConfig.addFormPropertyConfig(new FormPropertyConfig(\"fooProperty\", \"java.lang.String\", \"\"));\r\n    prop = beanConfig.findFormPropertyConfig(\"fooProperty\");\r\n    assertNotNull(\"fooProperty found\", prop);\r\n    beanConfig.freeze();\r\n    prop = beanConfig.findFormPropertyConfig(\"barProperty\");\r\n    assertNull(\"barProperty not found\", prop);\r\n    try {\r\n        beanConfig.addFormPropertyConfig(new FormPropertyConfig(\"barProperty\", \"java.lang.String\", \"\"));\r\n        fail(\"barProperty add not prevented\");\r\n    } catch (IllegalStateException e) {\r\n        ;\r\n    }\r\n}"
}, {
	"Path": "simplenlg.aggregation.Aggregator.realise",
	"Comment": "apply aggregation to a single phrase. this will only work if the phrase\tis a coordinated phrase, whose children can be further aggregated.",
	"Method": "NLGElement realise(NLGElement element,List<NLGElement> realise,List<NLGElement> elements){\r\n    for (AggregationRule rule : this._rules) {\r\n        elements = rule.apply(elements);\r\n    }\r\n    return elements;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ReversePurgeLongHashMap.keepOnlyPositiveCounts",
	"Comment": "processes the map arrays and retains only keys with positive counts.",
	"Method": "void keepOnlyPositiveCounts(){\r\n    int firstProbe = keys.length - 1;\r\n    while (states[firstProbe] > 0) {\r\n        firstProbe--;\r\n    }\r\n    for (int probe = firstProbe; probe-- > 0; ) {\r\n        if ((states[probe] > 0) && (values[probe] <= 0)) {\r\n            hashDelete(probe);\r\n            numActive--;\r\n        }\r\n    }\r\n    for (int probe = keys.length; probe-- > firstProbe; ) {\r\n        if ((states[probe] > 0) && (values[probe] <= 0)) {\r\n            hashDelete(probe);\r\n            numActive--;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.validator.ValidatorForm.validate",
	"Comment": "validate the properties that have been set from this http request, andreturn an actionerrors object that encapsulates anyvalidation errors that have been found.if no errors are found, returnnull or an actionerrors object with norecorded error messages.",
	"Method": "ActionErrors validate(ActionMapping mapping,HttpServletRequest request){\r\n    ServletContext application = getServlet().getServletContext();\r\n    ActionErrors errors = new ActionErrors();\r\n    String validationKey = getValidationKey(mapping, request);\r\n    Validator validator = Resources.initValidator(validationKey, this, application, request, errors, page);\r\n    try {\r\n        validatorResults = validator.validate();\r\n    } catch (ValidatorException e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    return errors;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtil.testReset",
	"Comment": "reset internal state.this method is used by test suites to reset the class to its original state.",
	"Method": "void testReset(){\r\n    implAlreadySet = false;\r\n    tilesUtilImpl = new TilesUtilImpl();\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExecuteCommand.shouldProcess",
	"Comment": "evaluate the current context to see if a command should even beexecuted.",
	"Method": "boolean shouldProcess(ActionContext context){\r\n    Boolean valid = context.getFormValid();\r\n    return ((valid != null) && valid.booleanValue());\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsElement",
	"Comment": "retrieves the value of the feature as a nlgelement. if the\tvalue is a string then it is wrapped in a stringelement. if\tthe feature does not exist or is of any other type then null\tis returned.",
	"Method": "NLGElement getFeatureAsElement(String featureName){\r\n    Object value = getFeature(featureName);\r\n    NLGElement elementValue = null;\r\n    if (value instanceof NLGElement) {\r\n        elementValue = (NLGElement) value;\r\n    } else if (value instanceof String) {\r\n        elementValue = new StringElement((String) value);\r\n    }\r\n    return elementValue;\r\n}"
}, {
	"Path": "com.yahoo.sketches.Util.zeroPad",
	"Comment": "prepend the given string with zeros. if the given string is equal or greater than the givenfield length, it will be returned without modification.",
	"Method": "String zeroPad(String s,int fieldLength){\r\n    return characterPad(s, fieldLength, '0', false);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedMatchTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "simplenlg.framework.CoordinatedPhraseElement.addCoordinate",
	"Comment": "adds a new coordinate to this coordination. if the new coordinate is a\tnlgelement then it is added directly to the coordination. if\tthe new coordinate is a string a stringelement\tis created and added to the coordination. stringelements\twill have their complementisers suppressed by default. in the case of\tclauses, complementisers will be suppressed if the clause is not the\tfirst element in the coordination.",
	"Method": "void addCoordinate(Object newCoordinate){\r\n    List<NLGElement> coordinates = getFeatureAsElementList(InternalFeature.COORDINATES);\r\n    if (coordinates == null) {\r\n        coordinates = new ArrayList<NLGElement>();\r\n        setFeature(InternalFeature.COORDINATES, coordinates);\r\n    } else if (coordinates.size() == 0) {\r\n        setFeature(InternalFeature.COORDINATES, coordinates);\r\n    }\r\n    if (newCoordinate instanceof NLGElement) {\r\n        if (((NLGElement) newCoordinate).isA(PhraseCategory.CLAUSE) && coordinates.size() > 0) {\r\n            ((NLGElement) newCoordinate).setFeature(Feature.SUPRESSED_COMPLEMENTISER, true);\r\n        }\r\n        coordinates.add((NLGElement) newCoordinate);\r\n    } else if (newCoordinate instanceof String) {\r\n        NLGElement coordElement = new StringElement((String) newCoordinate);\r\n        coordElement.setFeature(Feature.SUPRESSED_COMPLEMENTISER, true);\r\n        coordinates.add(coordElement);\r\n    }\r\n    setFeature(InternalFeature.COORDINATES, coordinates);\r\n}"
}, {
	"Path": "jadx.core.utils.BlockUtils.isEmptySimplePath",
	"Comment": "return true if on path from start to end no instructions and no branches.",
	"Method": "boolean isEmptySimplePath(BlockNode start,BlockNode end){\r\n    if (start == end && start.getInstructions().isEmpty()) {\r\n        return true;\r\n    }\r\n    if (!start.getInstructions().isEmpty() || start.getCleanSuccessors().size() != 1) {\r\n        return false;\r\n    }\r\n    BlockNode block = getNextBlock(start);\r\n    while (block != null && block != end && block.getCleanSuccessors().size() < 2 && block.getPredecessors().size() == 1 && block.getInstructions().isEmpty()) {\r\n        block = getNextBlock(block);\r\n    }\r\n    return block == end;\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.checkCircularInheritance",
	"Comment": "traces the hierarchy of this object to check if any of the ancestorsis extending this instance.",
	"Method": "boolean checkCircularInheritance(ModuleConfig moduleConfig){\r\n    String ancestorName = getExtends();\r\n    while (ancestorName != null) {\r\n        if (getName().equals(ancestorName)) {\r\n            return true;\r\n        }\r\n        FormBeanConfig ancestor = moduleConfig.findFormBeanConfig(ancestorName);\r\n        ancestorName = ancestor.getExtends();\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSamples.items",
	"Comment": "returns a single item from the samples contained in the sketch. does not perform boundschecking on the input. if this is the first getter call, copies data arrays from the sketch.",
	"Method": "T[] items(T items,int i){\r\n    loadArrays();\r\n    return (sampleLists == null ? null : sampleLists.items[i]);\r\n}"
}, {
	"Path": "com.yahoo.sketches.BoundsOnRatiosInSampledSets.getUpperBoundForBoverA",
	"Comment": "return the approximate upper bound based on a 95% confidence interval",
	"Method": "double getUpperBoundForBoverA(long a,long b,double f){\r\n    checkInputs(a, b, f);\r\n    if (a == 0) {\r\n        return 1.0;\r\n    }\r\n    if (f == 1.0) {\r\n        return (double) b / a;\r\n    }\r\n    return approximateUpperBoundOnP(a, b, NUM_STD_DEVS * hackyAdjuster(f));\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.IntersectionImpl.wrapInstance",
	"Comment": "wrap an intersection target around the given source memory containing intersection data.",
	"Method": "IntersectionImpl wrapInstance(WritableMemory srcMem,long seed){\r\n    final IntersectionImpl impl = new IntersectionImpl(srcMem, seed, false);\r\n    return (IntersectionImpl) internalWrapInstance(srcMem, impl);\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptions.getInputCharset",
	"Comment": "character encoding for input files, such as scripts and templates.",
	"Method": "Charset getInputCharset(){\r\n    return inputEncodingCharset;\r\n}"
}, {
	"Path": "org.sonar.java.checks.verifier.MultipleFilesJavaCheckVerifier.verifyNoIssue",
	"Comment": "verifies that no issues are raised after analyzing all the given files with the given check.",
	"Method": "void verifyNoIssue(List<String> filesToScan,JavaFileScanner check){\r\n    verify(new MultipleFilesJavaCheckVerifier(), filesToScan, check, true, true);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.addForwardConfig",
	"Comment": "add a new forwardconfig instance to the set of globalforwards associated with this module.",
	"Method": "void addForwardConfig(ForwardConfig config){\r\n    throwIfConfigured();\r\n    String key = config.getName();\r\n    if (forwards.containsKey(key)) {\r\n        log.warn(\"Overriding global ActionForward of name \" + key);\r\n    }\r\n    forwards.put(key, config);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedLessThanTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.updateEstimationSnapshot",
	"Comment": "updates the estimation of the number of unique entries by capturing a snapshot of the sketchdata, namely, volatile theta and the num of valid entries in the sketch",
	"Method": "void updateEstimationSnapshot(){\r\n    volatileEstimate_ = getEstimate();\r\n}"
}, {
	"Path": "org.apache.struts.chain.ComposableRequestProcessor.processMultipart",
	"Comment": "if this is a multipart request, wrap it with a special wrapper.otherwise, return the request unchanged.",
	"Method": "HttpServletRequest processMultipart(HttpServletRequest request){\r\n    if (!\"POST\".equalsIgnoreCase(request.getMethod())) {\r\n        return (request);\r\n    }\r\n    String contentType = request.getContentType();\r\n    if ((contentType != null) && contentType.startsWith(\"multipart/form-data\")) {\r\n        return (new MultipartRequestWrapper(request));\r\n    } else {\r\n        return (request);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.reset",
	"Comment": "resets this sketch back to a virgin empty state.takes care of mutual exclusion with propagation thread",
	"Method": "void reset(){\r\n    advanceEpoch();\r\n    super.reset();\r\n    volatileThetaLong_ = Long.MAX_VALUE;\r\n    volatileEstimate_ = 0;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TestTagUtils.testMessageSessionBadKey",
	"Comment": "for why this is a bad idea, instead of ignoring or returning null.",
	"Method": "void testMessageSessionBadKey(){\r\n    putBundleInScope(PageContext.SESSION_SCOPE, true);\r\n    String val = null;\r\n    try {\r\n        val = tagutils.message(pageContext, null, null, \"foo.bar.does.not.exist\");\r\n        fail(\"MessageResources should never be put in session scope.\");\r\n    } catch (JspException e) {\r\n        assertNull(val);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.updateVolatileTheta",
	"Comment": "updates the value of the volatile theta by extracting it from the underlying sketch managedby the shared sketch",
	"Method": "void updateVolatileTheta(){\r\n    volatileThetaLong_ = getThetaLong();\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.addActionConfig",
	"Comment": "ad d a new actionconfig instance to the setassociated with this module.",
	"Method": "void addActionConfig(ActionConfig config){\r\n    throwIfConfigured();\r\n    config.setModuleConfig(this);\r\n    String path = config.getPath();\r\n    if (actionConfigs.containsKey(path)) {\r\n        log.warn(\"Overriding ActionConfig of path \" + path);\r\n    }\r\n    String actionId = config.getActionId();\r\n    if ((actionId != null) && !actionId.equals(\"\")) {\r\n        if (actionConfigIds.containsKey(actionId)) {\r\n            if (log.isWarnEnabled()) {\r\n                ActionConfig otherConfig = (ActionConfig) actionConfigIds.get(actionId);\r\n                StringBuffer msg = new StringBuffer(\"Overriding actionId[\");\r\n                msg.append(actionId);\r\n                msg.append(\"] for path[\");\r\n                msg.append(otherConfig.getPath());\r\n                msg.append(\"] with path[\");\r\n                msg.append(path);\r\n                msg.append(\"]\");\r\n                log.warn(msg);\r\n            }\r\n        }\r\n        actionConfigIds.put(actionId, config);\r\n    }\r\n    actionConfigs.put(path, config);\r\n    actionConfigList.add(config);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Sketch.isSameResource",
	"Comment": "returns true if the backing resource of this is identical with the backing resourceof that. the capacities must be the same.if this is a region,the region offset must also be the same.",
	"Method": "boolean isSameResource(Memory that){\r\n    return false;\r\n}"
}, {
	"Path": "simplenlg.aggregation.Aggregator.addRule",
	"Comment": "add a rule to this aggregator. aggregation rules are applied in the order\tin which they are supplied.",
	"Method": "void addRule(AggregationRule rule){\r\n    rule.setFactory(this._factory);\r\n    this._rules.add(rule);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.getModuleConfig",
	"Comment": "return the module configuration object for the currently selectedmodule.",
	"Method": "ModuleConfig getModuleConfig(HttpServletRequest request){\r\n    ModuleConfig config = (ModuleConfig) request.getAttribute(Globals.MODULE_KEY);\r\n    if (config == null) {\r\n        config = (ModuleConfig) getServletContext().getAttribute(Globals.MODULE_KEY);\r\n    }\r\n    return (config);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hllmap.UniqueCountMap.getActiveMaps",
	"Comment": "returns the number of active internal maps so far.only the base map is initialized in the constructor, so this method would return 1.as more keys are promoted up to higher level maps, the return value would grow until thelast level hll map is allocated.",
	"Method": "int getActiveMaps(){\r\n    int levels = 0;\r\n    final int iMapsLen = maps_.length;\r\n    for (int i = 0; i < iMapsLen; i++) {\r\n        if (maps_[i] != null) {\r\n            levels++;\r\n        }\r\n    }\r\n    return levels;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.getCacheLimit",
	"Comment": "gets the cache limit size for the concurrentheapthetabuffer.",
	"Method": "int getCacheLimit(){\r\n    return bCacheLimit;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.DirectCompactOrderedSketch.wrapInstance",
	"Comment": "wraps the given memory, which must be a server 3, ordered, compact sketch image.must check the validity of the memory before calling.",
	"Method": "DirectCompactOrderedSketch wrapInstance(Memory srcMem,long seed){\r\n    final short memSeedHash = srcMem.getShort(SEED_HASH_SHORT);\r\n    final short computedSeedHash = computeSeedHash(seed);\r\n    checkSeedHashes(memSeedHash, computedSeedHash);\r\n    return new DirectCompactOrderedSketch(srcMem);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.MessagesNotPresentTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(false));\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsLong",
	"Comment": "retrieves the value of the feature as a long. if the feature\tdoes not exist or cannot be converted to a long then null is\treturned.",
	"Method": "Long getFeatureAsLong(String featureName){\r\n    Object value = getFeature(featureName);\r\n    Long longValue = null;\r\n    if (value instanceof Long) {\r\n        longValue = (Long) value;\r\n    } else if (value instanceof Number) {\r\n        longValue = new Long(((Number) value).longValue());\r\n    } else if (value instanceof String) {\r\n        try {\r\n            longValue = new Long((String) value);\r\n        } catch (NumberFormatException exception) {\r\n            longValue = null;\r\n        }\r\n    }\r\n    return longValue;\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptionsBuilder.withOutputFile",
	"Comment": "sets the name of the output file. it is important to note that theoutput encoding should be available at this point.",
	"Method": "OutputOptionsBuilder withOutputFile(Path outputFile){\r\n    requireNonNull(outputFile, \"No output file provided\");\r\n    outputResource = new FileOutputResource(outputFile);\r\n    return this;\r\n}"
}, {
	"Path": "events.ListeningToMessageEvents.slackMessagePostedEventContent",
	"Comment": "this method demonstrate what is available in a slackmessageposted event",
	"Method": "void slackMessagePostedEventContent(SlackSession session){\r\n    session.addMessagePostedListener(new SlackMessagePostedListener() {\r\n        @Override\r\n        public void onEvent(SlackMessagePosted event, SlackSession session1) {\r\n            SlackChannel theChannel = session1.findChannelByName(\"thechannel\");\r\n            if (!theChannel.getId().equals(event.getChannel().getId())) {\r\n                return;\r\n            }\r\n            SlackUser myInterestingUser = session1.findUserByUserName(\"gueststar\");\r\n            if (!myInterestingUser.getId().equals(event.getSender().getId())) {\r\n                return;\r\n            }\r\n            if (session1.sessionPersona().getId().equals(event.getSender().getId())) {\r\n                return;\r\n            }\r\n            String messageContent = event.getMessageContent();\r\n            if (!messageContent.contains(\"keyword\")) {\r\n                return;\r\n            }\r\n            session1.sendMessage(event.getChannel(), \"Message with keyword was sent by the expected user on this channel !\");\r\n        }\r\n    });\r\n}"
}, {
	"Path": "events.ListeningToMessageEvents.slackMessagePostedEventContent",
	"Comment": "this method demonstrate what is available in a slackmessageposted event",
	"Method": "void slackMessagePostedEventContent(SlackSession session){\r\n    SlackChannel theChannel = session1.findChannelByName(\"thechannel\");\r\n    if (!theChannel.getId().equals(event.getChannel().getId())) {\r\n        return;\r\n    }\r\n    SlackUser myInterestingUser = session1.findUserByUserName(\"gueststar\");\r\n    if (!myInterestingUser.getId().equals(event.getSender().getId())) {\r\n        return;\r\n    }\r\n    if (session1.sessionPersona().getId().equals(event.getSender().getId())) {\r\n        return;\r\n    }\r\n    String messageContent = event.getMessageContent();\r\n    if (!messageContent.contains(\"keyword\")) {\r\n        return;\r\n    }\r\n    session1.sendMessage(event.getChannel(), \"Message with keyword was sent by the expected user on this channel !\");\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.isPlural",
	"Comment": "determines if this element is to be treated as a plural. this is a\tconvenience method and not all element types make use of number\tagreement.",
	"Method": "boolean isPlural(){\r\n    return NumberAgreement.PLURAL.equals(getFeature(Feature.NUMBER));\r\n}"
}, {
	"Path": "com.yahoo.sketches.Util.checkProbability",
	"Comment": "checks the given parameter to make sure it is positive and between 0.0 inclusive and 1.0inclusive.",
	"Method": "void checkProbability(double p,String argName){\r\n    if ((p >= 0.0) && (p <= 1.0)) {\r\n        return;\r\n    }\r\n    throw new SketchesArgumentException(\"The value of the parameter \\\"\" + argName + \"\\\" must be between 0.0 inclusive and 1.0 inclusive: \" + p);\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractSetContentType.execute",
	"Comment": "check to see if the content type is set, and if so, set it for thisresponse.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    ModuleConfig moduleConfig = actionCtx.getModuleConfig();\r\n    String contentType = moduleConfig.getControllerConfig().getContentType();\r\n    if (contentType != null) {\r\n        setContentType(actionCtx, contentType);\r\n    }\r\n    return (false);\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractRequestNoCache.execute",
	"Comment": "check to see if the controller is configured to prevent caching, andif so, request no cache flags to be set.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    ModuleConfig moduleConfig = actionCtx.getModuleConfig();\r\n    if (moduleConfig.getControllerConfig().getNocache()) {\r\n        requestNoCache(actionCtx);\r\n    }\r\n    return (false);\r\n}"
}, {
	"Path": "org.apache.struts.mock.MockMultipartRequestHandler.setServlet",
	"Comment": "convienience method to set a reference to a mockactionservlet instance.",
	"Method": "void setServlet(ActionServlet servlet){\r\n    this.servlet = servlet;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.CoordinatedPhraseHelper.raiseSpecifier",
	"Comment": "checks to see if the specifier can be raised and then raises it. in order\tto be raised the specifier must be the same on all coordinates. for\texample, the cat and the dog will be realised as\tthe cat and dog while the cat and any dog will remain\tthe cat and any dog.",
	"Method": "void raiseSpecifier(List<NLGElement> children){\r\n    boolean allMatch = true;\r\n    NLGElement child = children.get(0);\r\n    NLGElement specifier = null;\r\n    String test = null;\r\n    if (child != null) {\r\n        specifier = child.getFeatureAsElement(InternalFeature.SPECIFIER);\r\n        if (specifier != null) {\r\n            test = (specifier instanceof WordElement) ? ((WordElement) specifier).getBaseForm() : specifier.getFeatureAsString(LexicalFeature.BASE_FORM);\r\n        }\r\n        if (test != null) {\r\n            int index = 1;\r\n            while (index < children.size() && allMatch) {\r\n                child = children.get(index);\r\n                if (child == null) {\r\n                    allMatch = false;\r\n                } else {\r\n                    specifier = child.getFeatureAsElement(InternalFeature.SPECIFIER);\r\n                    String childForm = (specifier instanceof WordElement) ? ((WordElement) specifier).getBaseForm() : specifier.getFeatureAsString(LexicalFeature.BASE_FORM);\r\n                    if (!test.equals(childForm)) {\r\n                        allMatch = false;\r\n                    }\r\n                }\r\n                index++;\r\n            }\r\n            if (allMatch) {\r\n                for (int eachChild = 1; eachChild < children.size(); eachChild++) {\r\n                    child = children.get(eachChild);\r\n                    child.setFeature(InternalFeature.RAISED, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.UpdateSketchBuilder.setSeed",
	"Comment": "sets the long seed value that is required by the hashing function.",
	"Method": "UpdateSketchBuilder setSeed(long seed){\r\n    bSeed = seed;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.GreaterThanTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(+1, +1));\r\n}"
}, {
	"Path": "simplenlg.aggregation.AggregationRule.apply",
	"Comment": "performs aggregation on a pair of sentences. this is the only method that\textensions of aggregationrule need to implement.",
	"Method": "List<NLGElement> apply(List<NLGElement> phrases,NLGElement apply,NLGElement phrase,NLGElement apply,NLGElement sentence1,NLGElement sentence2){\r\n    NLGElement result = null;\r\n    if (phrase instanceof CoordinatedPhraseElement) {\r\n        List<NLGElement> children = ((CoordinatedPhraseElement) phrase).getChildren();\r\n        List<NLGElement> aggregated = apply(children);\r\n        if (aggregated.size() == 1) {\r\n            result = aggregated.get(0);\r\n        } else {\r\n            result = this.factory.createCoordinatedPhrase();\r\n            for (NLGElement agg : aggregated) {\r\n                ((CoordinatedPhraseElement) result).addCoordinate(agg);\r\n            }\r\n        }\r\n    }\r\n    if (result != null) {\r\n        for (String feature : phrase.getAllFeatureNames()) {\r\n            result.setFeature(feature, phrase.getFeature(feature));\r\n        }\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketch.getQuantileUpperBound",
	"Comment": "gets the upper bound of the value interval in which the true quantile of the given rankexists with a confidence of at least 99%.",
	"Method": "double getQuantileUpperBound(double fraction){\r\n    return getQuantile(min(1.0, fraction + Util.getNormalizedRankError(k_, false)));\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.NotMatchTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(false));\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.compactShared",
	"Comment": "converts this updatesketch to an ordered compactsketch on the java heap.",
	"Method": "CompactSketch compactShared(CompactSketch compactShared,boolean dstOrdered,WritableMemory dstMem){\r\n    return compact(dstOrdered, dstMem);\r\n}"
}, {
	"Path": "simplenlg.lexicon.NIHDBLexicon.addAdverbInfo",
	"Comment": "extract adv information from nih adventry record, and add to a simplenlg\twordelement for now just extract modifier type",
	"Method": "void addAdverbInfo(WordElement wordElement,AdvEntry advEntry){\r\n    boolean verbModifier = false;\r\n    boolean sentenceModifier = false;\r\n    boolean intensifier = false;\r\n    List<String> modifications = advEntry.GetModification();\r\n    for (String modification : modifications) {\r\n        if (modification.startsWith(\"verb_modifier\"))\r\n            verbModifier = true;\r\n        else if (modification.startsWith(\"sentence_modifier\"))\r\n            sentenceModifier = true;\r\n        else if (modification.startsWith(\"intensifier\"))\r\n            intensifier = true;\r\n    }\r\n    wordElement.setFeature(LexicalFeature.VERB_MODIFIER, verbModifier);\r\n    wordElement.setFeature(LexicalFeature.SENTENCE_MODIFIER, sentenceModifier);\r\n    wordElement.setFeature(LexicalFeature.INTENSIFIER, intensifier);\r\n    return;\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.processForwardConfig",
	"Comment": "forward or redirect to the specified destination, by the specifiedmechanism.this method uses a forwardconfig objectinstead an actionforward.",
	"Method": "void processForwardConfig(HttpServletRequest request,HttpServletResponse response,ForwardConfig forward){\r\n    if (forward == null) {\r\n        return;\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"processForwardConfig(\" + forward + \")\");\r\n    }\r\n    String forwardPath = forward.getPath();\r\n    String uri;\r\n    String actionIdPath = RequestUtils.actionIdURL(forward, request, servlet);\r\n    if (actionIdPath != null) {\r\n        forwardPath = actionIdPath;\r\n        ForwardConfig actionIdForward = new ForwardConfig(forward);\r\n        actionIdForward.setPath(actionIdPath);\r\n        forward = actionIdForward;\r\n    }\r\n    if (forwardPath.startsWith(\"/\")) {\r\n        uri = RequestUtils.forwardURL(request, forward, null);\r\n    } else {\r\n        uri = forwardPath;\r\n    }\r\n    if (forward.getRedirect()) {\r\n        if (uri.startsWith(\"/\")) {\r\n            uri = request.getContextPath() + uri;\r\n        }\r\n        response.sendRedirect(response.encodeRedirectURL(uri));\r\n    } else {\r\n        doForward(uri, request, response);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.Union.getLgConfigK",
	"Comment": "gets the effective lgconfigk for the union operator, which may be less thanlgmaxk.",
	"Method": "int getLgConfigK(){\r\n    return gadget.getLgConfigK();\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionForm.remove",
	"Comment": "remove any existing value for the specified key on the specifiedmapped property.",
	"Method": "void remove(String name,String key){\r\n    Object value = dynaValues.get(name);\r\n    if (value == null) {\r\n        throw new NullPointerException(\"No mapped value for '\" + name + \"(\" + key + \")'\");\r\n    } else if (value instanceof Map) {\r\n        ((Map) value).remove(key);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Non-mapped property for '\" + name + \"(\" + key + \")'\");\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.AbstractHllArray.hipAndKxQIncrementalUpdate",
	"Comment": "called here and by heap and direct 6 and 8 bit implementations",
	"Method": "void hipAndKxQIncrementalUpdate(AbstractHllArray host,int oldValue,int newValue){\r\n    assert newValue > oldValue;\r\n    final int configK = 1 << host.getLgConfigK();\r\n    double kxq0 = host.getKxQ0();\r\n    double kxq1 = host.getKxQ1();\r\n    host.addToHipAccum(configK / (kxq0 + kxq1));\r\n    if (oldValue < 32) {\r\n        host.putKxQ0(kxq0 -= invPow2(oldValue));\r\n    } else {\r\n        host.putKxQ1(kxq1 -= invPow2(oldValue));\r\n    }\r\n    if (newValue < 32) {\r\n        host.putKxQ0(kxq0 += invPow2(newValue));\r\n    } else {\r\n        host.putKxQ1(kxq1 += invPow2(newValue));\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.destroyConfigDigester",
	"Comment": "gracefully release any configdigester instance that we have created.",
	"Method": "void destroyConfigDigester(){\r\n    configDigester = null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.HeapUpdateDoublesSketch.checkHeapMemCapacity",
	"Comment": "checks the validity of the heap memory capacity assuming n, k and the compact state.",
	"Method": "void checkHeapMemCapacity(int k,long n,boolean compact,int serVer,long memCapBytes){\r\n    final int metaPre = Family.QUANTILES.getMaxPreLongs() + ((serVer == 1) ? 3 : 2);\r\n    final int retainedItems = computeRetainedItems(k, n);\r\n    final int reqBufBytes;\r\n    if (compact) {\r\n        reqBufBytes = (metaPre + retainedItems) << 3;\r\n    } else {\r\n        final int totLevels = Util.computeNumLevelsNeeded(k, n);\r\n        reqBufBytes = (totLevels == 0) ? (metaPre + retainedItems) << 3 : (metaPre + ((2 + totLevels) * k)) << 3;\r\n    }\r\n    if (memCapBytes < reqBufBytes) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Memory capacity too small: \" + memCapBytes + \" < \" + reqBufBytes);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.DefinitionsUtil.populateDefinitionsFactoryConfig",
	"Comment": "populate definition factory config from web.xml properties.",
	"Method": "void populateDefinitionsFactoryConfig(DefinitionsFactoryConfig factoryConfig,ServletConfig servletConfig){\r\n    Map properties = new DefinitionsUtil.ServletPropertiesMap(servletConfig);\r\n    factoryConfig.populate(properties);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsUnion.getResult",
	"Comment": "gets the result of this union operation as a copy of the internal state.this enables further union update operations on this state.",
	"Method": "ItemsSketch<T> getResult(){\r\n    if (gadget_ == null) {\r\n        return ItemsSketch.getInstance(maxK_, comparator_);\r\n    }\r\n    return ItemsSketch.copy(gadget_);\r\n}"
}, {
	"Path": "simplenlg.morphology.english.MorphologyProcessor.doMorphology",
	"Comment": "this is the main method for performing the morphology. it effectively\texamines the lexical category of the element and calls the relevant set\tof rules from morphologyrules.",
	"Method": "NLGElement doMorphology(InflectedWordElement element){\r\n    NLGElement realisedElement = null;\r\n    if (element.getFeatureAsBoolean(InternalFeature.NON_MORPH).booleanValue()) {\r\n        realisedElement = new StringElement(element.getBaseForm());\r\n        realisedElement.setFeature(InternalFeature.DISCOURSE_FUNCTION, element.getFeature(InternalFeature.DISCOURSE_FUNCTION));\r\n    } else {\r\n        NLGElement baseWord = element.getFeatureAsElement(InternalFeature.BASE_WORD);\r\n        if (baseWord == null && this.lexicon != null) {\r\n            baseWord = this.lexicon.lookupWord(element.getBaseForm());\r\n        }\r\n        ElementCategory category = element.getCategory();\r\n        if (category instanceof LexicalCategory) {\r\n            switch((LexicalCategory) category) {\r\n                case PRONOUN:\r\n                    realisedElement = MorphologyRules.doPronounMorphology(element);\r\n                    break;\r\n                case NOUN:\r\n                    realisedElement = MorphologyRules.doNounMorphology(element, (WordElement) baseWord);\r\n                    break;\r\n                case VERB:\r\n                    realisedElement = MorphologyRules.doVerbMorphology(element, (WordElement) baseWord);\r\n                    break;\r\n                case ADJECTIVE:\r\n                    realisedElement = MorphologyRules.doAdjectiveMorphology(element, (WordElement) baseWord);\r\n                    break;\r\n                case ADVERB:\r\n                    realisedElement = MorphologyRules.doAdverbMorphology(element, (WordElement) baseWord);\r\n                    break;\r\n                default:\r\n                    realisedElement = new StringElement(element.getBaseForm());\r\n                    realisedElement.setFeature(InternalFeature.DISCOURSE_FUNCTION, element.getFeature(InternalFeature.DISCOURSE_FUNCTION));\r\n            }\r\n        }\r\n    }\r\n    return realisedElement;\r\n}"
}, {
	"Path": "org.sonar.java.se.xproc.BehaviorCache.peek",
	"Comment": "do not trigger any new computation of method behavior, just check if there is a known method behavior for the symbol.",
	"Method": "MethodBehavior peek(String signature){\r\n    MethodBehavior mb = behaviors.get(signature);\r\n    if (mb != null) {\r\n        return mb;\r\n    }\r\n    return bytecodeBehaviors.get(signature);\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.setMapping",
	"Comment": "sets the action mapping with which this handler is associated.",
	"Method": "void setMapping(ActionMapping mapping){\r\n    this.mapping = mapping;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getAllFeatureNames",
	"Comment": "retrieves the set of features currently contained in the feature map.",
	"Method": "Set<String> getAllFeatureNames(){\r\n    return this.features.keySet();\r\n}"
}, {
	"Path": "org.apache.struts.chain.ComposableRequestProcessor.contextInstance",
	"Comment": "provide the initialized actioncontext instance whichwill be used by this request. internally, this simply callscreateactioncontextinstance followed byinitializeactioncontext.",
	"Method": "ActionContext contextInstance(HttpServletRequest request,HttpServletResponse response){\r\n    ActionContext context = createActionContextInstance(getServletContext(), request, response);\r\n    initializeActionContext(context);\r\n    return context;\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateFloat",
	"Comment": "checks if the field can safely be converted to a float primitive.",
	"Method": "Object validateFloat(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    result = GenericTypeValidator.formatFloat(value);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedEqualTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.WriteTag.retrieveFormatString",
	"Comment": "retrieve format string from message bundle and return null if messagenot found or message string.",
	"Method": "String retrieveFormatString(String formatKey){\r\n    String result = TagUtils.getInstance().message(pageContext, this.bundle, this.localeKey, formatKey);\r\n    if ((result != null) && !(result.startsWith(\"???\") && result.endsWith(\"???\"))) {\r\n        return result;\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.xmlDefinition.XmlParser.initDigesterForComponentsDefinitionsSyntax",
	"Comment": "init digester for components syntax. this is an old set of rules, left for backward compatibility.",
	"Method": "void initDigesterForComponentsDefinitionsSyntax(Digester digester){\r\n    String PACKAGE_NAME = \"org.apache.struts.tiles.xmlDefinition\";\r\n    String DEFINITION_TAG = \"component-definitions/definition\";\r\n    String definitionHandlerClass = PACKAGE_NAME + \".XmlDefinition\";\r\n    String PUT_TAG = DEFINITION_TAG + \"/put\";\r\n    String putAttributeHandlerClass = PACKAGE_NAME + \".XmlAttribute\";\r\n    String LIST_TAG = DEFINITION_TAG + \"/putList\";\r\n    String listHandlerClass = PACKAGE_NAME + \".XmlListAttribute\";\r\n    String ADD_LIST_ELE_TAG = LIST_TAG + \"/add\";\r\n    digester.addObjectCreate(DEFINITION_TAG, definitionHandlerClass);\r\n    digester.addSetProperties(DEFINITION_TAG);\r\n    digester.addSetNext(DEFINITION_TAG, \"putDefinition\", definitionHandlerClass);\r\n    digester.addObjectCreate(PUT_TAG, putAttributeHandlerClass);\r\n    digester.addSetNext(PUT_TAG, \"addAttribute\", putAttributeHandlerClass);\r\n    digester.addSetProperties(PUT_TAG);\r\n    digester.addCallMethod(PUT_TAG, \"setBody\", 0);\r\n    digester.addObjectCreate(LIST_TAG, listHandlerClass);\r\n    digester.addSetProperties(LIST_TAG);\r\n    digester.addSetNext(LIST_TAG, \"addAttribute\", putAttributeHandlerClass);\r\n    digester.addObjectCreate(ADD_LIST_ELE_TAG, putAttributeHandlerClass);\r\n    digester.addSetNext(ADD_LIST_ELE_TAG, \"add\", putAttributeHandlerClass);\r\n    digester.addSetProperties(ADD_LIST_ELE_TAG);\r\n    digester.addCallMethod(ADD_LIST_ELE_TAG, \"setBody\", 0);\r\n}"
}, {
	"Path": "simplenlg.framework.CoordinatedPhraseElement.getLastCoordinate",
	"Comment": "a convenience method for retrieving the last coordinate in this\tcoordination.",
	"Method": "NLGElement getLastCoordinate(){\r\n    List<NLGElement> children = getChildren();\r\n    return children != null && children.size() > 0 ? children.get(children.size() - 1) : null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.UpdateSketch.compact",
	"Comment": "converts this updatesketch to an ordered compactsketch on the java heap.",
	"Method": "CompactSketch compact(boolean dstOrdered,WritableMemory dstMem,CompactSketch compact){\r\n    return compact(true, null);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.initModuleMessageResources",
	"Comment": "initialize the application messageresources for thespecified module.",
	"Method": "void initModuleMessageResources(ModuleConfig config){\r\n    MessageResourcesConfig[] mrcs = config.findMessageResourcesConfigs();\r\n    for (int i = 0; i < mrcs.length; i++) {\r\n        if ((mrcs[i].getFactory() == null) || (mrcs[i].getParameter() == null)) {\r\n            continue;\r\n        }\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Initializing module path '\" + config.getPrefix() + \"' message resources from '\" + mrcs[i].getParameter() + \"'\");\r\n        }\r\n        String factory = mrcs[i].getFactory();\r\n        MessageResourcesFactory.setFactoryClass(factory);\r\n        MessageResourcesFactory factoryObject = MessageResourcesFactory.createFactory();\r\n        factoryObject.setConfig(mrcs[i]);\r\n        MessageResources resources = factoryObject.createResources(mrcs[i].getParameter());\r\n        resources.setReturnNull(mrcs[i].getNull());\r\n        resources.setEscape(mrcs[i].isEscape());\r\n        getServletContext().setAttribute(mrcs[i].getKey() + config.getPrefix(), resources);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesUpdateImpl.getRequiredItemCapacity",
	"Comment": "this only increases the size and does not touch or move any data.",
	"Method": "int getRequiredItemCapacity(int k,long newN){\r\n    final int numLevelsNeeded = Util.computeNumLevelsNeeded(k, newN);\r\n    if (numLevelsNeeded == 0) {\r\n        return 2 * k;\r\n    }\r\n    assert newN >= (2L * k);\r\n    assert numLevelsNeeded > 0;\r\n    final int spaceNeeded = (2 + numLevelsNeeded) * k;\r\n    return spaceNeeded;\r\n}"
}, {
	"Path": "simplenlg.aggregation.Aggregator.setFactory",
	"Comment": "set the factory that this aggregator should use to create phrases. the\tfactory will be passed on to all the component rules.",
	"Method": "void setFactory(NLGFactory factory){\r\n    this._factory = factory;\r\n    for (AggregationRule rule : this._rules) {\r\n        rule.setFactory(this._factory);\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.tools.text.operation.OperationCommand.getOperation",
	"Comment": "determine the operation, or whether this command is a query.",
	"Method": "Operation getOperation(){\r\n    Operation operation = null;\r\n    try {\r\n        operation = Operation.valueOf(command);\r\n    } catch (final IllegalArgumentException | NullPointerException e) {\r\n        operation = null;\r\n    }\r\n    return operation;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsByteArrayImpl.combinedBufferToItemsArray",
	"Comment": "returns an array of items in compact form, including min and max extracted from thecombined buffer.",
	"Method": "T[] combinedBufferToItemsArray(ItemsSketch<T> sketch,boolean ordered){\r\n    final int extra = 2;\r\n    final int outArrCap = sketch.getRetainedItems();\r\n    final T minValue = sketch.getMinValue();\r\n    final T[] outArr = (T[]) Array.newInstance(minValue.getClass(), outArrCap + extra);\r\n    outArr[0] = minValue;\r\n    outArr[1] = sketch.getMaxValue();\r\n    final int baseBufferCount = sketch.getBaseBufferCount();\r\n    final Object[] combinedBuffer = sketch.getCombinedBuffer();\r\n    System.arraycopy(combinedBuffer, 0, outArr, extra, baseBufferCount);\r\n    long bitPattern = sketch.getBitPattern();\r\n    if (bitPattern > 0) {\r\n        final int k = sketch.getK();\r\n        int index = extra + baseBufferCount;\r\n        for (int level = 0; bitPattern != 0L; level++, bitPattern >>>= 1) {\r\n            if ((bitPattern & 1L) > 0L) {\r\n                System.arraycopy(combinedBuffer, (2 + level) * k, outArr, index, k);\r\n                index += k;\r\n            }\r\n        }\r\n    }\r\n    if (ordered) {\r\n        Arrays.sort(outArr, extra, baseBufferCount + extra, sketch.getComparator());\r\n    }\r\n    return outArr;\r\n}"
}, {
	"Path": "org.sonar.java.checks.verifier.MultipleFilesJavaCheckVerifier.verifyNoIssueWithoutSemantic",
	"Comment": "verifies that no issues are raised after analyzing all given files with the given check when semantic is not available.",
	"Method": "void verifyNoIssueWithoutSemantic(List<String> filesToScan,JavaFileScanner check){\r\n    MultipleFilesJavaCheckVerifier verifier = new MultipleFilesJavaCheckVerifier() {\r\n        @Override\r\n        public String getExpectedIssueTrigger() {\r\n            return \"// NOSEMANTIC_ISSUE\";\r\n        }\r\n    };\r\n    verify(verifier, filesToScan, check, true, false);\r\n}"
}, {
	"Path": "org.sonar.java.checks.verifier.MultipleFilesJavaCheckVerifier.verifyNoIssueWithoutSemantic",
	"Comment": "verifies that no issues are raised after analyzing all given files with the given check when semantic is not available.",
	"Method": "void verifyNoIssueWithoutSemantic(List<String> filesToScan,JavaFileScanner check){\r\n    return \"// NOSEMANTIC_ISSUE\";\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.handleCreationException",
	"Comment": "handle errors related to creating an instance of the specifiedclass.",
	"Method": "void handleCreationException(String className,Exception e){\r\n    String errorMessage = internal.getMessage(\"configExtends.creation\", className);\r\n    log.error(errorMessage, e);\r\n    throw new UnavailableException(errorMessage);\r\n}"
}, {
	"Path": "org.apache.struts.mock.MockActionServlet.initInternal",
	"Comment": "expose as public so that test classes can exercise things whichretrieve messages.",
	"Method": "void initInternal(){\r\n    super.initInternal();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.PresentTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(boolean condition,boolean desired){\r\n    boolean present = false;\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    if (cookie != null) {\r\n        present = this.isCookiePresent(request);\r\n    } else if (header != null) {\r\n        String value = request.getHeader(header);\r\n        present = (value != null);\r\n    } else if (name != null) {\r\n        present = this.isBeanPresent();\r\n    } else if (parameter != null) {\r\n        String value = request.getParameter(parameter);\r\n        present = (value != null);\r\n    } else if (role != null) {\r\n        StringTokenizer st = new StringTokenizer(role, ROLE_DELIMITER, false);\r\n        while (!present && st.hasMoreTokens()) {\r\n            present = request.isUserInRole(st.nextToken());\r\n        }\r\n    } else if (user != null) {\r\n        Principal principal = request.getUserPrincipal();\r\n        present = (principal != null) && user.equals(principal.getName());\r\n    } else {\r\n        JspException e = new JspException(messages.getMessage(\"logic.selector\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    return (present == desired);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesPmfCdfImpl.internalBuildHistogram",
	"Comment": "shared algorithm for both pmf and cdf functions. the splitpoints must be unique, monotonicallyincreasing values.",
	"Method": "double[] internalBuildHistogram(DoublesSketch sketch,double[] splitPoints){\r\n    final DoublesSketchAccessor sketchAccessor = DoublesSketchAccessor.wrap(sketch);\r\n    Util.validateValues(splitPoints);\r\n    final int numSplitPoints = splitPoints.length;\r\n    final int numCounters = numSplitPoints + 1;\r\n    final double[] counters = new double[numCounters];\r\n    long weight = 1;\r\n    sketchAccessor.setLevel(DoublesSketchAccessor.BB_LVL_IDX);\r\n    if (numSplitPoints < 50) {\r\n        DoublesPmfCdfImpl.bilinearTimeIncrementHistogramCounters(sketchAccessor, weight, splitPoints, counters);\r\n    } else {\r\n        sketchAccessor.sort();\r\n        DoublesPmfCdfImpl.linearTimeIncrementHistogramCounters(sketchAccessor, weight, splitPoints, counters);\r\n    }\r\n    long myBitPattern = sketch.getBitPattern();\r\n    final int k = sketch.getK();\r\n    assert myBitPattern == sketch.getN() / (2L * k);\r\n    for (int lvl = 0; myBitPattern != 0L; lvl++, myBitPattern >>>= 1) {\r\n        weight <<= 1;\r\n        if ((myBitPattern & 1L) > 0L) {\r\n            sketchAccessor.setLevel(lvl);\r\n            DoublesPmfCdfImpl.linearTimeIncrementHistogramCounters(sketchAccessor, weight, splitPoints, counters);\r\n        }\r\n    }\r\n    return counters;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionRedirect.getPath",
	"Comment": "get the path for this object, including any parameters that may havebeen added at runtime.",
	"Method": "String getPath(){\r\n    String originalPath = getOriginalPath();\r\n    String parameterString = getParameterString();\r\n    String anchorString = getAnchorString();\r\n    StringBuffer result = new StringBuffer(originalPath);\r\n    if ((parameterString != null) && (parameterString.length() > 0)) {\r\n        String paramSeparator = \"?\";\r\n        boolean needsParamSeparator = true;\r\n        int paramStartIndex = originalPath.indexOf(\"?\");\r\n        if (paramStartIndex > 0) {\r\n            needsParamSeparator = (paramStartIndex != (originalPath.length() - 1));\r\n            if (needsParamSeparator) {\r\n                paramSeparator = \"&\";\r\n            }\r\n        }\r\n        if (needsParamSeparator) {\r\n            result.append(paramSeparator);\r\n        }\r\n        result.append(parameterString);\r\n    }\r\n    result.append(anchorString);\r\n    return result.toString();\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionForm.getDynaProperty",
	"Comment": "return the property descriptor for the specified property name.",
	"Method": "DynaProperty getDynaProperty(String name){\r\n    DynaProperty descriptor = getDynaClass().getDynaProperty(name);\r\n    if (descriptor == null) {\r\n        throw new IllegalArgumentException(\"Invalid property name '\" + name + \"'\");\r\n    }\r\n    return (descriptor);\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.getAction",
	"Comment": "return the url for the specified actionmapping, otherwise returnnull.",
	"Method": "String getAction(String path){\r\n    return getEncodeURL(getActionMappingURL(path));\r\n}"
}, {
	"Path": "actions.FetchingMessageHistory.fetchTenLastMessagesFromChannelHistory",
	"Comment": "this method how to get the 10 last messages from the message history of a given channel",
	"Method": "void fetchTenLastMessagesFromChannelHistory(SlackSession session,SlackChannel slackChannel){\r\n    ChannelHistoryModule channelHistoryModule = ChannelHistoryModuleFactory.createChannelHistoryModule(session);\r\n    List<SlackMessagePosted> messages = channelHistoryModule.fetchHistoryOfChannel(slackChannel.getId(), 10);\r\n}"
}, {
	"Path": "jadx.core.utils.BlockUtils.traverseWhileDominates",
	"Comment": "search for first node which not dominated by dom, starting from start",
	"Method": "BlockNode traverseWhileDominates(BlockNode dom,BlockNode start){\r\n    for (BlockNode node : start.getCleanSuccessors()) {\r\n        if (!node.isDominator(dom)) {\r\n            return node;\r\n        } else {\r\n            BlockNode out = traverseWhileDominates(dom, node);\r\n            if (out != null) {\r\n                return out;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.LessThanTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(-1, -1));\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseHelper.realiseInterrogativeKeyWord",
	"Comment": "realises the key word of the interrogative. for example, who,\twhat",
	"Method": "void realiseInterrogativeKeyWord(String keyWord,LexicalCategory cat,SyntaxProcessor parent,ListElement realisedElement,NLGFactory phraseFactory){\r\n    if (keyWord != null) {\r\n        NLGElement question = phraseFactory.createWord(keyWord, cat);\r\n        NLGElement currentElement = parent.realise(question);\r\n        if (currentElement != null) {\r\n            realisedElement.addComponent(currentElement);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "jadx.core.dex.visitors.regions.RegionMaker.processHandlersOutBlocks",
	"Comment": "search handlers successor blocks not included in any region.",
	"Method": "IRegion processHandlersOutBlocks(MethodNode mth,Set<TryCatchBlock> tcs){\r\n    Set<IBlock> allRegionBlocks = new HashSet<IBlock>();\r\n    RegionUtils.getAllRegionBlocks(mth.getRegion(), allRegionBlocks);\r\n    Set<IBlock> succBlocks = new HashSet<IBlock>();\r\n    for (TryCatchBlock tc : tcs) {\r\n        for (ExceptionHandler handler : tc.getHandlers()) {\r\n            IContainer region = handler.getHandlerRegion();\r\n            if (region != null) {\r\n                IBlock lastBlock = RegionUtils.getLastBlock(region);\r\n                if (lastBlock instanceof BlockNode) {\r\n                    succBlocks.addAll(((BlockNode) lastBlock).getSuccessors());\r\n                }\r\n                RegionUtils.getAllRegionBlocks(region, allRegionBlocks);\r\n            }\r\n        }\r\n    }\r\n    succBlocks.removeAll(allRegionBlocks);\r\n    if (succBlocks.isEmpty()) {\r\n        return null;\r\n    }\r\n    Region excOutRegion = new Region(mth.getRegion());\r\n    for (IBlock block : succBlocks) {\r\n        if (block instanceof BlockNode) {\r\n            excOutRegion.add(makeRegion((BlockNode) block, new RegionStack(mth)));\r\n        }\r\n    }\r\n    return excOutRegion;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSetOperationBuilder.buildAnotB",
	"Comment": "creates an instance of arrayofdoublesanotb based on the current configuration of the builder.the memory is not relevant to this, so it is ignored if set.the number of nominal entries is not relevant to this, so it is ignored.",
	"Method": "ArrayOfDoublesAnotB buildAnotB(){\r\n    return new HeapArrayOfDoublesAnotB(numValues_, seed_);\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ReversePurgeItemHashMap.purge",
	"Comment": "this function is called when a key is processed that is not currently assigned a counter, andall the counters are in use. this function estimates the median of the counters in the sketchvia sampling, decrements all counts by this estimate, throws out all counters that are nolonger positive, and increments offset accordingly.",
	"Method": "long purge(int sampleSize){\r\n    final int limit = Math.min(sampleSize, getNumActive());\r\n    int numSamples = 0;\r\n    int i = 0;\r\n    final long[] samples = new long[limit];\r\n    while (numSamples < limit) {\r\n        if (isActive(i)) {\r\n            samples[numSamples] = values[i];\r\n            numSamples++;\r\n        }\r\n        i++;\r\n    }\r\n    final long val = QuickSelect.select(samples, 0, numSamples - 1, limit / 2);\r\n    adjustAllValuesBy(-1 * val);\r\n    keepOnlyPositiveCounts();\r\n    return val;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedRadioTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.QuickSelectSketch.merge",
	"Comment": "not sufficient by itself without keeping track of theta of another sketch",
	"Method": "void merge(long key,S summary,SummarySetOperations<S> summarySetOps){\r\n    isEmpty_ = false;\r\n    if (key < theta_) {\r\n        final int index = findOrInsert(key);\r\n        if (index < 0) {\r\n            insertSummary(~index, summary.copy());\r\n        } else {\r\n            insertSummary(index, summarySetOps.union(summaries_[index], summary));\r\n        }\r\n        rebuildIfNeeded();\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedOptionsTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    originalLabelProperty = getLabelProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    if (originalLabelProperty != null) {\r\n        if ((getName() == null) || Constants.BEAN_KEY.equals(getName())) {\r\n            super.setLabelProperty(NestedPropertyHelper.getAdjustedProperty(request, originalLabelProperty));\r\n        } else {\r\n            super.setLabelProperty(originalLabelProperty);\r\n        }\r\n    }\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "simplenlg.framework.PhraseElement.setDeterminer",
	"Comment": "sets the determiner for the phrase. this only has real meaning on noun\tphrases and is added here for convenience. determiners are some times\treferred to as specifiers.",
	"Method": "void setDeterminer(Object newDeterminer){\r\n    NLGFactory factory = new NLGFactory();\r\n    NLGElement determinerElement = factory.createWord(newDeterminer, LexicalCategory.DETERMINER);\r\n    if (determinerElement != null) {\r\n        determinerElement.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.SPECIFIER);\r\n        setFeature(InternalFeature.SPECIFIER, determinerElement);\r\n        determinerElement.setParent(this);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseHelper.addEndingTo",
	"Comment": "adds to to the end of interrogatives concerning indirect\tobjects. for example, who did john give the flower to.",
	"Method": "void addEndingTo(PhraseElement phrase,SyntaxProcessor parent,ListElement realisedElement,NLGFactory phraseFactory){\r\n    if (InterrogativeType.WHO_INDIRECT_OBJECT.equals(phrase.getFeature(Feature.INTERROGATIVE_TYPE))) {\r\n        NLGElement word = phraseFactory.createWord(\"to\", LexicalCategory.PREPOSITION);\r\n        realisedElement.addComponent(parent.realise(word));\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.validateEpoch",
	"Comment": "validates the shared sketch is in the context of the given epoch",
	"Method": "boolean validateEpoch(long epoch){\r\n    return epoch_ == epoch;\r\n}"
}, {
	"Path": "org.jf.dexlib2.util.AnnotatedBytes.annotate",
	"Comment": "add an annotation of the given length at the current location.the location",
	"Method": "void annotate(int length,String msg,Object formatArgs){\r\n    if (startLimit != -1 && endLimit != -1 && (cursor < startLimit || cursor >= endLimit)) {\r\n        throw new ExceptionWithContext(\"Annotating outside the parent bounds\");\r\n    }\r\n    String formattedMsg;\r\n    if (formatArgs != null && formatArgs.length > 0) {\r\n        formattedMsg = String.format(msg, formatArgs);\r\n    } else {\r\n        formattedMsg = msg;\r\n    }\r\n    int exclusiveEndOffset = cursor + length;\r\n    AnnotationEndpoint endPoint = null;\r\n    AnnotationEndpoint startPoint = annotatations.get(cursor);\r\n    if (startPoint == null) {\r\n        Map.Entry<Integer, AnnotationEndpoint> previousEntry = annotatations.lowerEntry(cursor);\r\n        if (previousEntry != null) {\r\n            AnnotationEndpoint previousAnnotations = previousEntry.getValue();\r\n            AnnotationItem previousRangeAnnotation = previousAnnotations.rangeAnnotation;\r\n            if (previousRangeAnnotation != null) {\r\n                throw new ExceptionWithContext(\"Cannot add annotation %s, due to existing annotation %s\", formatAnnotation(cursor, cursor + length, formattedMsg), formatAnnotation(previousEntry.getKey(), previousRangeAnnotation.annotation));\r\n            }\r\n        }\r\n    } else if (length > 0) {\r\n        AnnotationItem existingRangeAnnotation = startPoint.rangeAnnotation;\r\n        if (existingRangeAnnotation != null) {\r\n            throw new ExceptionWithContext(\"Cannot add annotation %s, due to existing annotation %s\", formatAnnotation(cursor, cursor + length, formattedMsg), formatAnnotation(cursor, existingRangeAnnotation.annotation));\r\n        }\r\n    }\r\n    if (length > 0) {\r\n        Map.Entry<Integer, AnnotationEndpoint> nextEntry = annotatations.higherEntry(cursor);\r\n        if (nextEntry != null) {\r\n            int nextKey = nextEntry.getKey();\r\n            if (nextKey < exclusiveEndOffset) {\r\n                AnnotationEndpoint nextEndpoint = nextEntry.getValue();\r\n                AnnotationItem nextRangeAnnotation = nextEndpoint.rangeAnnotation;\r\n                if (nextRangeAnnotation != null) {\r\n                    throw new ExceptionWithContext(\"Cannot add annotation %s, due to existing annotation %s\", formatAnnotation(cursor, cursor + length, formattedMsg), formatAnnotation(nextKey, nextRangeAnnotation.annotation));\r\n                }\r\n                if (nextEndpoint.pointAnnotations.size() > 0) {\r\n                    throw new ExceptionWithContext(\"Cannot add annotation %s, due to existing annotation %s\", formatAnnotation(cursor, cursor + length, formattedMsg), formatAnnotation(nextKey, nextKey, nextEndpoint.pointAnnotations.get(0).annotation));\r\n                }\r\n                throw new ExceptionWithContext(\"Cannot add annotation %s, due to existing annotation endpoint at %d\", formatAnnotation(cursor, cursor + length, formattedMsg), nextKey);\r\n            }\r\n            if (nextKey == exclusiveEndOffset) {\r\n                endPoint = nextEntry.getValue();\r\n            }\r\n        }\r\n    }\r\n    if (startPoint == null) {\r\n        startPoint = new AnnotationEndpoint();\r\n        annotatations.put(cursor, startPoint);\r\n    }\r\n    if (length == 0) {\r\n        startPoint.pointAnnotations.add(new AnnotationItem(indentLevel, formattedMsg));\r\n    } else {\r\n        startPoint.rangeAnnotation = new AnnotationItem(indentLevel, formattedMsg);\r\n        if (endPoint == null) {\r\n            endPoint = new AnnotationEndpoint();\r\n            annotatations.put(exclusiveEndOffset, endPoint);\r\n        }\r\n    }\r\n    cursor += length;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.Util.checkPreLongsFlagsCap",
	"Comment": "checks the consistency of the flag bits and the state of preamblelong and the memorycapacity and returns the empty state.",
	"Method": "boolean checkPreLongsFlagsCap(int preambleLongs,int flags,long memCapBytes){\r\n    final boolean empty = (flags & EMPTY_FLAG_MASK) > 0;\r\n    final int minPre = Family.QUANTILES.getMinPreLongs();\r\n    final int maxPre = Family.QUANTILES.getMaxPreLongs();\r\n    final boolean valid = ((preambleLongs == minPre) && empty) || ((preambleLongs == maxPre) && !empty);\r\n    if (!valid) {\r\n        throw new SketchesArgumentException(\"Possible corruption: PreambleLongs inconsistent with empty state: \" + preambleLongs);\r\n    }\r\n    checkHeapFlags(flags);\r\n    if (memCapBytes < (preambleLongs << 3)) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Insufficient capacity for preamble: \" + memCapBytes);\r\n    }\r\n    return empty;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedEqualTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtil.doForward",
	"Comment": "do a forward using request dispatcher.this method is used by the tiles package anytime a forward is required.",
	"Method": "void doForward(String uri,HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){\r\n    tilesUtilImpl.doForward(uri, request, response, servletContext);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.Util.validateValues",
	"Comment": "checks the sequential validity of the given array of double values.they must be unique, monotonically increasing and not nan.",
	"Method": "void validateValues(double[] values){\r\n    if (values == null) {\r\n        throw new SketchesArgumentException(\"Values cannot be null.\");\r\n    }\r\n    final int lenM1 = values.length - 1;\r\n    for (int j = 0; j < lenM1; j++) {\r\n        if (values[j] < values[j + 1]) {\r\n            continue;\r\n        }\r\n        throw new SketchesArgumentException(\"Values must be unique, monotonically increasing and not NaN.\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.SubmitTag.doEndTag",
	"Comment": "process the end of this tag.support for indexed property sincestruts 1.1",
	"Method": "int doEndTag(){\r\n    StringBuffer results = new StringBuffer();\r\n    results.append(getElementOpen());\r\n    prepareAttribute(results, \"name\", prepareName());\r\n    prepareButtonAttributes(results);\r\n    results.append(prepareEventHandlers());\r\n    results.append(prepareStyles());\r\n    prepareOtherAttributes(results);\r\n    results.append(getElementClose());\r\n    TagUtils.getInstance().write(pageContext, results.toString());\r\n    return (EVAL_PAGE);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsUnion.getResult",
	"Comment": "returns a sketch representing the current state of the union.",
	"Method": "ReservoirItemsSketch<T> getResult(){\r\n    return (gadget_ != null ? gadget_.copy() : null);\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of a reservoirlongssketch.",
	"Method": "String toString(String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.preambleToString(mem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUpdatableSketchBuilder.setNumberOfValues",
	"Comment": "this is to set the number of double values associated with each key",
	"Method": "ArrayOfDoublesUpdatableSketchBuilder setNumberOfValues(int numValues){\r\n    numValues_ = numValues;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.IncludeTag.addCookie",
	"Comment": "add a session id cookie if appropriate. can be overloaded to support acluster.",
	"Method": "void addCookie(URLConnection conn,String urlString,HttpServletRequest request){\r\n    if ((conn instanceof HttpURLConnection) && urlString.startsWith(request.getContextPath()) && (request.getRequestedSessionId() != null) && request.isRequestedSessionIdFromCookie()) {\r\n        StringBuffer sb = new StringBuffer(\"JSESSIONID=\");\r\n        sb.append(request.getRequestedSessionId());\r\n        conn.setRequestProperty(\"Cookie\", sb.toString());\r\n    }\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseTest.testSubordination",
	"Comment": "test what happens when a sentence is subordinated as complement of a\tverb.",
	"Method": "void testSubordination(){\r\n    this.say.addComplement(this.s3);\r\n    Assert.assertEquals(ClauseStatus.SUBORDINATE, this.s3.getFeature(InternalFeature.CLAUSE_STATUS));\r\n    // $NON-NLS-1$\r\n    Assert.assertEquals(\"says that the man gives the woman John's flower\", this.realiser.realise(this.say).getRealisation());\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.getRawSamplesAsList",
	"Comment": "returns the actual list backing the reservoir. any changes to this list will corruptthe reservoir sample.this method should be used only when making a copy of the returned samples, to avoidan extraneous array copy.",
	"Method": "ArrayList<T> getRawSamplesAsList(){\r\n    return data_;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExceptionCatcher.getExceptionCommand",
	"Comment": "return the name of the command to be executed if an exceptionoccurs.",
	"Method": "String getExceptionCommand(){\r\n    return (this.exceptionCommand);\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.getRoleNames",
	"Comment": "get array of security role names used to authorize access to thisaction.",
	"Method": "String[] getRoleNames(){\r\n    return (this.roleNames);\r\n}"
}, {
	"Path": "org.apache.struts.validator.DynaValidatorForm.validate",
	"Comment": "validate the properties that have been set from this http request, andreturn an actionerrors object that encapsulates anyvalidation errors that have been found.if no errors are found, returnnull or an actionerrors object with norecorded error messages.",
	"Method": "ActionErrors validate(ActionMapping mapping,HttpServletRequest request){\r\n    this.setPageFromDynaProperty();\r\n    ServletContext application = getServlet().getServletContext();\r\n    ActionErrors errors = new ActionErrors();\r\n    String validationKey = getValidationKey(mapping, request);\r\n    Validator validator = Resources.initValidator(validationKey, this, application, request, errors, page);\r\n    try {\r\n        validatorResults = validator.validate();\r\n    } catch (ValidatorException e) {\r\n        log.error(e.getMessage(), e);\r\n    }\r\n    return errors;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesIntersection.update",
	"Comment": "updates the internal set by intersecting it with the given sketch.",
	"Method": "void update(ArrayOfDoublesSketch sketchIn,ArrayOfDoublesCombiner combiner){\r\n    final boolean isFirstCall = isFirstCall_;\r\n    isFirstCall_ = false;\r\n    if (sketchIn == null) {\r\n        isEmpty_ = true;\r\n        sketch_ = null;\r\n        return;\r\n    }\r\n    Util.checkSeedHashes(seedHash_, sketchIn.getSeedHash());\r\n    theta_ = min(theta_, sketchIn.getThetaLong());\r\n    isEmpty_ |= sketchIn.isEmpty();\r\n    if (isEmpty_ || sketchIn.getRetainedEntries() == 0) {\r\n        sketch_ = null;\r\n        return;\r\n    }\r\n    if (isFirstCall) {\r\n        sketch_ = createSketch(sketchIn.getRetainedEntries(), numValues_, seed_);\r\n        final ArrayOfDoublesSketchIterator it = sketchIn.iterator();\r\n        while (it.next()) {\r\n            sketch_.insert(it.getKey(), it.getValues());\r\n        }\r\n    } else {\r\n        final int matchSize = min(sketch_.getRetainedEntries(), sketchIn.getRetainedEntries());\r\n        final long[] matchKeys = new long[matchSize];\r\n        final double[][] matchValues = new double[matchSize][];\r\n        int matchCount = 0;\r\n        final ArrayOfDoublesSketchIterator it = sketchIn.iterator();\r\n        while (it.next()) {\r\n            final double[] values = sketch_.find(it.getKey());\r\n            if (values != null) {\r\n                matchKeys[matchCount] = it.getKey();\r\n                matchValues[matchCount] = combiner.combine(values, it.getValues());\r\n                matchCount++;\r\n            }\r\n        }\r\n        sketch_ = null;\r\n        if (matchCount > 0) {\r\n            sketch_ = createSketch(matchCount, numValues_, seed_);\r\n            for (int i = 0; i < matchCount; i++) {\r\n                sketch_.insert(matchKeys[i], matchValues[i]);\r\n            }\r\n        }\r\n        if (sketch_ != null) {\r\n            sketch_.setThetaLong(theta_);\r\n            sketch_.setNotEmpty();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyHelper.getCurrentProperty",
	"Comment": "returns the current nesting property from the request object.",
	"Method": "String getCurrentProperty(HttpServletRequest request){\r\n    NestedReference nr = (NestedReference) request.getAttribute(NESTED_INCLUDES_KEY);\r\n    return (nr == null) ? null : nr.getNestedProperty();\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.deserializeFromStringArray",
	"Comment": "deserializes an array of string tokens into a hash map object of this class.",
	"Method": "ReversePurgeLongHashMap deserializeFromStringArray(String[] tokens){\r\n    final int ignore = STR_PREAMBLE_TOKENS;\r\n    final int numActive = Integer.parseInt(tokens[ignore]);\r\n    final int length = Integer.parseInt(tokens[ignore + 1]);\r\n    final ReversePurgeLongHashMap hashMap = new ReversePurgeLongHashMap(length);\r\n    int j = 2 + ignore;\r\n    for (int i = 0; i < numActive; i++) {\r\n        final long key = Long.parseLong(tokens[j++]);\r\n        final long value = Long.parseLong(tokens[j++]);\r\n        hashMap.adjustOrPutValue(key, value);\r\n    }\r\n    return hashMap;\r\n}"
}, {
	"Path": "simplenlg.phrasespec.SPhraseSpec.addModifier",
	"Comment": "add a modifier to a clause use heuristics to decide where it goes",
	"Method": "void addModifier(Object modifier){\r\n    if (modifier == null)\r\n        return;\r\n    NLGElement modifierElement = null;\r\n    if (modifier instanceof NLGElement)\r\n        modifierElement = (NLGElement) modifier;\r\n    else if (modifier instanceof String) {\r\n        String modifierString = (String) modifier;\r\n        if (modifierString.length() > 0 && !modifierString.contains(\" \"))\r\n            modifierElement = getFactory().createWord(modifier, LexicalCategory.ANY);\r\n    }\r\n    if (modifierElement == null) {\r\n        addPostModifier((String) modifier);\r\n        return;\r\n    }\r\n    if (modifierElement instanceof AdvPhraseSpec) {\r\n        addPreModifier(modifierElement);\r\n        return;\r\n    }\r\n    WordElement modifierWord = null;\r\n    if (modifierElement != null && modifierElement instanceof WordElement)\r\n        modifierWord = (WordElement) modifierElement;\r\n    else if (modifierElement != null && modifierElement instanceof InflectedWordElement)\r\n        modifierWord = ((InflectedWordElement) modifierElement).getBaseWord();\r\n    if (modifierWord != null && modifierWord.getCategory() == LexicalCategory.ADVERB) {\r\n        if (modifierWord.getFeatureAsBoolean(LexicalFeature.SENTENCE_MODIFIER))\r\n            addFrontModifier(modifierWord);\r\n        else\r\n            addPreModifier(modifierWord);\r\n        return;\r\n    }\r\n    addPostModifier(modifierElement);\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.getServletContext",
	"Comment": "return the servletcontext for the web application inwhich we are running.",
	"Method": "ServletContext getServletContext(){\r\n    return (servlet.getServletContext());\r\n}"
}, {
	"Path": "net.csdn.common.Strings.addStringToArray",
	"Comment": "append the given string to the given string array, returning a new arrayconsisting of the input array contents plus the given string.",
	"Method": "String[] addStringToArray(String[] array,String str){\r\n    if (isEmpty(array)) {\r\n        return new String[] { str };\r\n    }\r\n    String[] newArr = new String[array.length + 1];\r\n    System.arraycopy(array, 0, newArr, 0, array.length);\r\n    newArr[array.length] = str;\r\n    return newArr;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.getMaximumMapCapacity",
	"Comment": "returns the maximum number of counters the sketch is configured to support.",
	"Method": "int getMaximumMapCapacity(){\r\n    return (int) ((1 << lgMaxMapSize) * ReversePurgeLongHashMap.getLoadFactor());\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.DirectAuxHashMap.find",
	"Comment": "if the probe comes back to original index, throws an exception.",
	"Method": "int find(DirectHllArray host,int slotNo){\r\n    final int lgAuxArrInts = extractLgArr(host.mem);\r\n    assert lgAuxArrInts < host.lgConfigK : lgAuxArrInts;\r\n    final int auxInts = 1 << lgAuxArrInts;\r\n    final int auxArrMask = auxInts - 1;\r\n    final int configKmask = (1 << host.lgConfigK) - 1;\r\n    int probe = slotNo & auxArrMask;\r\n    final int loopIndex = probe;\r\n    do {\r\n        final int arrVal = host.mem.getInt(host.auxStart + (probe << 2));\r\n        if (arrVal == EMPTY) {\r\n            return ~probe;\r\n        } else if (slotNo == (arrVal & configKmask)) {\r\n            return probe;\r\n        }\r\n        final int stride = (slotNo >>> lgAuxArrInts) | 1;\r\n        probe = (probe + stride) & auxArrMask;\r\n    } while (probe != loopIndex);\r\n    throw new SketchesArgumentException(\"Key not found and no empty slots!\");\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.processMapping",
	"Comment": "select the mapping used to process the selection path for thisrequest. if no mapping can be identified, create an error response andreturn null.",
	"Method": "ActionMapping processMapping(HttpServletRequest request,HttpServletResponse response,String path){\r\n    ActionMapping mapping = (ActionMapping) moduleConfig.findActionConfig(path);\r\n    if (mapping != null) {\r\n        request.setAttribute(Globals.MAPPING_KEY, mapping);\r\n        return (mapping);\r\n    }\r\n    ActionConfig[] configs = moduleConfig.findActionConfigs();\r\n    for (int i = 0; i < configs.length; i++) {\r\n        if (configs[i].getUnknown()) {\r\n            mapping = (ActionMapping) configs[i];\r\n            request.setAttribute(Globals.MAPPING_KEY, mapping);\r\n            return (mapping);\r\n        }\r\n    }\r\n    String msg = getInternal().getMessage(\"processInvalid\");\r\n    log.error(msg + \" \" + path);\r\n    response.sendError(HttpServletResponse.SC_NOT_FOUND, msg);\r\n    return null;\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.getLink",
	"Comment": "return the path for the specified forward, otherwise returnnull.",
	"Method": "String getLink(String name){\r\n    ActionForward forward = getActionForward(name);\r\n    if (forward == null) {\r\n        return null;\r\n    }\r\n    StringBuffer path = new StringBuffer(this.request.getContextPath());\r\n    path.append(forward.getPath());\r\n    return getEncodeURL(path.toString());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.ForwardTag.doRedirect",
	"Comment": "redirect to the given path converting exceptions to jspexception.",
	"Method": "void doRedirect(String path){\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    HttpServletResponse response = (HttpServletResponse) pageContext.getResponse();\r\n    try {\r\n        if (path.startsWith(\"/\")) {\r\n            path = request.getContextPath() + path;\r\n        }\r\n        response.sendRedirect(response.encodeRedirectURL(path));\r\n    } catch (Exception e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"forward.redirect\", name, e.toString()));\r\n    }\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.haveSameVoice",
	"Comment": "check that the sentences supplied are either all active or all passive.",
	"Method": "boolean haveSameVoice(NLGElement sentences){\r\n    boolean samePassive = true;\r\n    boolean prevIsPassive = false;\r\n    if (sentences.length > 1) {\r\n        prevIsPassive = sentences[0].getFeatureAsBoolean(Feature.PASSIVE);\r\n        for (int i = 1; i < sentences.length && samePassive; i++) {\r\n            samePassive = sentences[i].getFeatureAsBoolean(Feature.PASSIVE) == prevIsPassive;\r\n        }\r\n    }\r\n    return samePassive;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ReversePurgeLongHashMap.getInstance",
	"Comment": "returns an instance of this class from the given string,which must be a string representation of this class.",
	"Method": "ReversePurgeLongHashMap getInstance(String string){\r\n    final String[] tokens = string.split(\",\");\r\n    if (tokens.length < 2) {\r\n        throw new SketchesArgumentException(\"String not long enough to specify length and capacity.\");\r\n    }\r\n    final int numActive = Integer.parseInt(tokens[0]);\r\n    final int length = Integer.parseInt(tokens[1]);\r\n    final ReversePurgeLongHashMap table = new ReversePurgeLongHashMap(length);\r\n    int j = 2;\r\n    for (int i = 0; i < numActive; i++) {\r\n        final long key = Long.parseLong(tokens[j++]);\r\n        final long value = Long.parseLong(tokens[j++]);\r\n        table.adjustOrPutValue(key, value);\r\n    }\r\n    return table;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.destroyInternal",
	"Comment": "gracefully terminate use of the internal messageresources.",
	"Method": "void destroyInternal(){\r\n    internal = null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSetOperationBuilder.buildUnion",
	"Comment": "creates an instance of arrayofdoublesunion based on the current configuration of the builderand the given memory.",
	"Method": "ArrayOfDoublesUnion buildUnion(ArrayOfDoublesUnion buildUnion,WritableMemory dstMem){\r\n    return new DirectArrayOfDoublesUnion(nomEntries_, numValues_, seed_, dstMem);\r\n}"
}, {
	"Path": "simplenlg.lexicon.Lexicon.hasWordByID",
	"Comment": "return true if the lexicon contains a wordelement which the\tspecified id",
	"Method": "boolean hasWordByID(String id){\r\n    return !getWordsByID(id).isEmpty();\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExceptionCatcher.setCatalogName",
	"Comment": "set the name of the catalog in which to performlookups, or null for the default catalog.",
	"Method": "void setCatalogName(String catalogName){\r\n    this.catalogName = catalogName;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.MessagesTag.doStartTag",
	"Comment": "construct an iterator for the specified collection, and begin loopingthrough the body once per element.",
	"Method": "int doStartTag(){\r\n    processed = false;\r\n    ActionMessages messages = null;\r\n    String name = this.name;\r\n    if ((message != null) && \"true\".equalsIgnoreCase(message)) {\r\n        name = Globals.MESSAGE_KEY;\r\n    }\r\n    try {\r\n        messages = TagUtils.getInstance().getActionMessages(pageContext, name);\r\n    } catch (JspException e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    this.iterator = (property == null) ? messages.get() : messages.get(property);\r\n    if (!this.iterator.hasNext()) {\r\n        return SKIP_BODY;\r\n    }\r\n    processMessage((ActionMessage) iterator.next());\r\n    if ((header != null) && (header.length() > 0)) {\r\n        String headerMessage = TagUtils.getInstance().message(pageContext, bundle, locale, header);\r\n        if (headerMessage != null) {\r\n            TagUtils.getInstance().write(pageContext, headerMessage);\r\n        }\r\n    }\r\n    processed = true;\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.addRuleSets",
	"Comment": "add any custom ruleset instances to configdigester that have beenspecified in the rulesets init parameter.",
	"Method": "void addRuleSets(){\r\n    String rulesets = getServletConfig().getInitParameter(\"rulesets\");\r\n    if (rulesets == null) {\r\n        rulesets = \"\";\r\n    }\r\n    rulesets = rulesets.trim();\r\n    String ruleset;\r\n    while (rulesets.length() > 0) {\r\n        int comma = rulesets.indexOf(\",\");\r\n        if (comma < 0) {\r\n            ruleset = rulesets.trim();\r\n            rulesets = \"\";\r\n        } else {\r\n            ruleset = rulesets.substring(0, comma).trim();\r\n            rulesets = rulesets.substring(comma + 1).trim();\r\n        }\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Configuring custom Digester Ruleset of type \" + ruleset);\r\n        }\r\n        try {\r\n            RuleSet instance = (RuleSet) RequestUtils.applicationInstance(ruleset);\r\n            this.configDigester.addRuleSet(instance);\r\n        } catch (Exception e) {\r\n            log.error(\"Exception configuring custom Digester RuleSet\", e);\r\n            throw new ServletException(e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilStrutsModulesImpl.getDefinitionsFactory",
	"Comment": "get definition factory for the module attached to specified moduleconfig.",
	"Method": "DefinitionsFactory getDefinitionsFactory(ServletRequest request,ServletContext servletContext,DefinitionsFactory getDefinitionsFactory,ServletContext servletContext,ModuleConfig moduleConfig){\r\n    return (DefinitionsFactory) servletContext.getAttribute(DEFINITIONS_FACTORY + moduleConfig.getPrefix());\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcSketch.reset",
	"Comment": "resets this sketch to empty but retains the original lgk and seed.",
	"Method": "void reset(){\r\n    numCoupons = 0;\r\n    mergeFlag = false;\r\n    fiCol = 0;\r\n    windowOffset = 0;\r\n    slidingWindow = null;\r\n    pairTable = null;\r\n    kxp = 1 << lgK;\r\n    hipEstAccum = 0;\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSketches.heapifyUpdatableSketch",
	"Comment": "heapify the given memory and seed as a arrayofdoublesupdatablesketch",
	"Method": "ArrayOfDoublesUpdatableSketch heapifyUpdatableSketch(Memory mem,ArrayOfDoublesUpdatableSketch heapifyUpdatableSketch,Memory mem,long seed){\r\n    return ArrayOfDoublesUpdatableSketch.heapify(mem, seed);\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.addServletMapping",
	"Comment": "remember a servlet mapping from our web application deploymentdescriptor, if it is for this servlet.",
	"Method": "void addServletMapping(String servletName,String urlPattern){\r\n    if (servletName == null) {\r\n        return;\r\n    }\r\n    if (servletName.equals(this.servletName)) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Process servletName=\" + servletName + \", urlPattern=\" + urlPattern);\r\n        }\r\n        this.servletMapping = urlPattern;\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.freeze",
	"Comment": "freeze the configuration of this module.after this methodreturns, any attempt to modify the configuration will return anillegalstateexception.",
	"Method": "void freeze(){\r\n    super.freeze();\r\n    ActionConfig[] aconfigs = findActionConfigs();\r\n    for (int i = 0; i < aconfigs.length; i++) {\r\n        aconfigs[i].freeze();\r\n    }\r\n    matcher = new ActionConfigMatcher(aconfigs);\r\n    getControllerConfig().freeze();\r\n    ExceptionConfig[] econfigs = findExceptionConfigs();\r\n    for (int i = 0; i < econfigs.length; i++) {\r\n        econfigs[i].freeze();\r\n    }\r\n    FormBeanConfig[] fbconfigs = findFormBeanConfigs();\r\n    for (int i = 0; i < fbconfigs.length; i++) {\r\n        fbconfigs[i].freeze();\r\n    }\r\n    ForwardConfig[] fconfigs = findForwardConfigs();\r\n    for (int i = 0; i < fconfigs.length; i++) {\r\n        fconfigs[i].freeze();\r\n    }\r\n    MessageResourcesConfig[] mrconfigs = findMessageResourcesConfigs();\r\n    for (int i = 0; i < mrconfigs.length; i++) {\r\n        mrconfigs[i].freeze();\r\n    }\r\n    PlugInConfig[] piconfigs = findPlugInConfigs();\r\n    for (int i = 0; i < piconfigs.length; i++) {\r\n        piconfigs[i].freeze();\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.validator.BeanValidatorForm.remove",
	"Comment": "remove any existing value for the specified key on the specified mappedproperty.",
	"Method": "void remove(String name,String key){\r\n    dynaBean.remove(name, key);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtil.getDefinition",
	"Comment": "get a definition by its name.first, retrieve definition factory and then get requested definition.throw appropriate exception if definition or definition factory is not found.",
	"Method": "ComponentDefinition getDefinition(String definitionName,ServletRequest request,ServletContext servletContext){\r\n    try {\r\n        return getDefinitionsFactory(request, servletContext).getDefinition(definitionName, (HttpServletRequest) request, servletContext);\r\n    } catch (NullPointerException ex) {\r\n        throw new FactoryNotFoundException(\"Can't get definitions factory from context.\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractAuthorizeAction.execute",
	"Comment": "determine whether the requested action is authorized for the currentuser.if not, abort chain processing and perferably, return an errormessage of some kind.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    ActionConfig actionConfig = actionCtx.getActionConfig();\r\n    if (!isAuthorizationRequired(actionConfig)) {\r\n        return (false);\r\n    }\r\n    boolean throwEx;\r\n    try {\r\n        throwEx = !(isAuthorized(actionCtx, actionConfig.getRoleNames(), actionConfig));\r\n    } catch (UnauthorizedActionException ex) {\r\n        throw ex;\r\n    } catch (Exception ex) {\r\n        throwEx = true;\r\n        LOG.error(\"Unable to complete authorization process\", ex);\r\n    }\r\n    if (throwEx) {\r\n        throw new UnauthorizedActionException(getErrorMessage(actionCtx, actionConfig));\r\n    } else {\r\n        return (false);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.xmlDefinition.I18nFactorySet.createDefaultFactory",
	"Comment": "create default factory .create instancesmapper for specified locale.if creation failes, use default mapper and log error message.",
	"Method": "DefinitionsFactory createDefaultFactory(ServletContext servletContext){\r\n    XmlDefinitionsSet rootXmlConfig = parseXmlFiles(servletContext, \"\", null);\r\n    if (rootXmlConfig == null) {\r\n        throw new FileNotFoundException();\r\n    }\r\n    rootXmlConfig.resolveInheritances();\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(rootXmlConfig);\r\n    }\r\n    DefinitionsFactory factory = new DefinitionsFactory(rootXmlConfig);\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"factory loaded : \" + factory);\r\n    }\r\n    return factory;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.getLowerBound",
	"Comment": "gets the guaranteed lower bound frequency of the given item, which can never benegative.",
	"Method": "long getLowerBound(T item,long getLowerBound){\r\n    return hashMap.get(item);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSketches.heapifySketch",
	"Comment": "heapify the given memory and seed as a arrayofdoublessketch",
	"Method": "ArrayOfDoublesSketch heapifySketch(Memory mem,ArrayOfDoublesSketch heapifySketch,Memory mem,long seed){\r\n    return ArrayOfDoublesSketch.heapify(mem, seed);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUpdatableSketch.wrap",
	"Comment": "wrap the given writablememory and seed as a arrayofdoublesupdatablesketch",
	"Method": "ArrayOfDoublesUpdatableSketch wrap(WritableMemory mem,ArrayOfDoublesUpdatableSketch wrap,WritableMemory mem,long seed){\r\n    return new DirectArrayOfDoublesQuickSelectSketch(mem, seed);\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateDouble",
	"Comment": "checks if the field can safely be converted to a double primitive.",
	"Method": "Object validateDouble(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    result = GenericTypeValidator.formatDouble(value);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "net.csdn.modules.compress.bzip2.CBZip2OutputStream.chooseBlockSize",
	"Comment": "chooses a blocksize based on the given length of the data to compress.",
	"Method": "int chooseBlockSize(long inputLength){\r\n    return (inputLength > 0) ? (int) Math.min((inputLength / 132000) + 1, 9) : MAX_BLOCKSIZE;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationBuilder.buildIntersection",
	"Comment": "convenience method, returns a configured setoperation intersection withdefault nominal entriesand the given destination memory.",
	"Method": "Intersection buildIntersection(Intersection buildIntersection,WritableMemory dstMem){\r\n    return (Intersection) build(Family.INTERSECTION, dstMem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.Intersection.reset",
	"Comment": "resets the internal set to the initial state, which represents the universal set",
	"Method": "void reset(){\r\n    isEmpty_ = false;\r\n    theta_ = Long.MAX_VALUE;\r\n    sketch_ = null;\r\n    isFirstCall_ = true;\r\n}"
}, {
	"Path": "org.apache.struts.mock.MockMultipartRequestHandler.getFileElements",
	"Comment": "this method is called on to retrieve all the formfileinput elements of the request.",
	"Method": "Hashtable getFileElements(){\r\n    return new Hashtable();\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionMapping.findForward",
	"Comment": "find and return the forwardconfig instance defining howforwarding to the specified logical name should be handled. this isperformed by checking local and then global configurations for thespecified forwarding configuration. if no forwarding configuration canbe found, return null.",
	"Method": "ActionForward findForward(String forwardName){\r\n    ForwardConfig config = findForwardConfig(forwardName);\r\n    if (config == null) {\r\n        config = getModuleConfig().findForwardConfig(forwardName);\r\n    }\r\n    if (config == null) {\r\n        if (log.isWarnEnabled()) {\r\n            log.warn(\"Unable to find '\" + forwardName + \"' forward.\");\r\n        }\r\n    }\r\n    return ((ActionForward) config);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedGreaterThanTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.chain.ComposableRequestProcessor.process",
	"Comment": "process an httpservletrequest and create thecorresponding httpservletresponse.",
	"Method": "void process(HttpServletRequest request,HttpServletResponse response){\r\n    request = processMultipart(request);\r\n    ActionContext context = contextInstance(request, response);\r\n    try {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Using processing chain for this request\");\r\n        }\r\n        command.execute(context);\r\n    } catch (Exception e) {\r\n        throw new ServletException(e);\r\n    }\r\n    context.release();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseInputTag.doStartTag",
	"Comment": "process the start of this tag.the default implementation doesnothing.",
	"Method": "int doStartTag(){\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedOptionsCollectionTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.AesCbcWithIntegrity.fixPrng",
	"Comment": "ensures that the prng is fixed. should be used before generating any keys.will only run once, and every subsequent call should return immediately.",
	"Method": "void fixPrng(){\r\n    if (!prngFixed.get()) {\r\n        synchronized (PrngFixes.class) {\r\n            if (!prngFixed.get()) {\r\n                PrngFixes.apply();\r\n                prngFixed.set(true);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.config.ForwardConfig.checkCircularInheritance",
	"Comment": "traces the hierarchy of this object to check if any of the ancestorsare extending this instance.",
	"Method": "boolean checkCircularInheritance(ModuleConfig moduleConfig,ActionConfig actionConfig){\r\n    String ancestorName = getExtends();\r\n    if (ancestorName == null) {\r\n        return false;\r\n    }\r\n    ForwardConfig ancestor = null;\r\n    if (actionConfig != null) {\r\n        ancestor = actionConfig.findForwardConfig(ancestorName);\r\n        if (ancestor == this) {\r\n            ancestor = null;\r\n        }\r\n    }\r\n    if (ancestor == null) {\r\n        ancestor = moduleConfig.findForwardConfig(ancestorName);\r\n        if (ancestor != null) {\r\n            actionConfig = null;\r\n        }\r\n    }\r\n    while (ancestor != null) {\r\n        if (ancestor == this) {\r\n            return true;\r\n        }\r\n        ancestorName = ancestor.getExtends();\r\n        if (ancestor.getName().equals(ancestorName)) {\r\n            if (actionConfig == null) {\r\n                return false;\r\n            } else {\r\n                actionConfig = null;\r\n            }\r\n        }\r\n        ancestor = null;\r\n        if (actionConfig != null) {\r\n            ancestor = actionConfig.findForwardConfig(ancestorName);\r\n        }\r\n        if (ancestor == null) {\r\n            ancestor = moduleConfig.findForwardConfig(ancestorName);\r\n            if (ancestor != null) {\r\n                actionConfig = null;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.IntersectionImpl.initNewDirectInstance",
	"Comment": "construct a new intersection target direct to the given destination memory.called by setoperation.builder.",
	"Method": "IntersectionImpl initNewDirectInstance(long seed,WritableMemory dstMem){\r\n    final IntersectionImpl impl = new IntersectionImpl(dstMem, seed, true);\r\n    insertPreLongs(dstMem, CONST_PREAMBLE_LONGS);\r\n    insertSerVer(dstMem, SER_VER);\r\n    insertFamilyID(dstMem, Family.INTERSECTION.getID());\r\n    insertLgArrLongs(dstMem, MIN_LG_ARR_LONGS);\r\n    insertFlags(dstMem, 0);\r\n    insertCurCount(dstMem, -1);\r\n    insertP(dstMem, (float) 1.0);\r\n    insertThetaLong(dstMem, Long.MAX_VALUE);\r\n    impl.lgArrLongs_ = MIN_LG_ARR_LONGS;\r\n    impl.curCount_ = -1;\r\n    impl.thetaLong_ = Long.MAX_VALUE;\r\n    impl.empty_ = false;\r\n    impl.maxLgArrLongs_ = checkMaxLgArrLongs(dstMem);\r\n    return impl;\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.setActionId",
	"Comment": "the internal name of this action mapping. the name is not inheritable,may not contain a forward slash, and must be unique within a module.",
	"Method": "void setActionId(String actionId){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    if ((actionId != null) && (actionId.indexOf(\"/\") > -1)) {\r\n        throw new IllegalArgumentException(\"actionId '\" + actionId + \"' may not contain a forward slash\");\r\n    }\r\n    this.actionId = actionId;\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.PreambleUtil.getHiFieldOffset",
	"Comment": "returns the defined byte offset from the start of the preamble given the hifieldand the format.note this can not be used to obtain the stream offsets.",
	"Method": "long getHiFieldOffset(Format format,HiField hiField){\r\n    final int formatIdx = format.ordinal();\r\n    final int hiFieldIdx = hiField.ordinal();\r\n    final long fieldOffset = hiFieldOffset[formatIdx][hiFieldIdx] & 0xFF;\r\n    if (fieldOffset == 0) {\r\n        throw new SketchesStateException(\"Undefined preamble field given the Format: \" + \"Format: \" + format.toString() + \", HiField: \" + hiField.toString());\r\n    }\r\n    return fieldOffset;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsMergeImpl.tandemMerge",
	"Comment": "performs two merges in tandem. one of them provides the sort keys while the other one passively undergoes the same data motion.",
	"Method": "void tandemMerge(T[] keySrc,long[] valSrc,int arrStart1,int arrLen1,int arrStart2,int arrLen2,T[] keyDst,long[] valDst,int arrStart3,Comparator<? super T> comparator){\r\n    final int arrStop1 = arrStart1 + arrLen1;\r\n    final int arrStop2 = arrStart2 + arrLen2;\r\n    int i1 = arrStart1;\r\n    int i2 = arrStart2;\r\n    int i3 = arrStart3;\r\n    while ((i1 < arrStop1) && (i2 < arrStop2)) {\r\n        if (comparator.compare(keySrc[i2], keySrc[i1]) < 0) {\r\n            keyDst[i3] = keySrc[i2];\r\n            valDst[i3] = valSrc[i2];\r\n            i3++;\r\n            i2++;\r\n        } else {\r\n            keyDst[i3] = keySrc[i1];\r\n            valDst[i3] = valSrc[i1];\r\n            i3++;\r\n            i1++;\r\n        }\r\n    }\r\n    if (i1 < arrStop1) {\r\n        arraycopy(keySrc, i1, keyDst, i3, arrStop1 - i1);\r\n        arraycopy(valSrc, i1, valDst, i3, arrStop1 - i1);\r\n    } else {\r\n        assert i2 < arrStop2;\r\n        arraycopy(keySrc, i2, keyDst, i3, arrStop2 - i2);\r\n        arraycopy(valSrc, i2, valDst, i3, arrStop2 - i2);\r\n    }\r\n}"
}, {
	"Path": "org.jf.util.SparseIntArray.put",
	"Comment": "adds a mapping from the specified key to the specified value,replacing the previous mapping from the specified key if therewas one.",
	"Method": "void put(int key,int value){\r\n    int i = binarySearch(mKeys, 0, mSize, key);\r\n    if (i >= 0) {\r\n        mValues[i] = value;\r\n    } else {\r\n        i = ~i;\r\n        if (mSize >= mKeys.length) {\r\n            int n = Math.max(mSize + 1, mKeys.length * 2);\r\n            int[] nkeys = new int[n];\r\n            int[] nvalues = new int[n];\r\n            System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);\r\n            System.arraycopy(mValues, 0, nvalues, 0, mValues.length);\r\n            mKeys = nkeys;\r\n            mValues = nvalues;\r\n        }\r\n        if (mSize - i != 0) {\r\n            System.arraycopy(mKeys, i, mKeys, i + 1, mSize - i);\r\n            System.arraycopy(mValues, i, mValues, i + 1, mSize - i);\r\n        }\r\n        mKeys[i] = key;\r\n        mValues[i] = value;\r\n        mSize++;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketch.getQuantileUpperBound",
	"Comment": "gets the upper bound of the value interval in which the true quantile of the given rankexists with a confidence of at least 99%.",
	"Method": "float getQuantileUpperBound(double fraction){\r\n    return getQuantile(min(1.0, fraction + getNormalizedRankError(minK_, false)));\r\n}"
}, {
	"Path": "com.yahoo.sketches.Util.characterPad",
	"Comment": "prepend or postpend the given string with the given character to fill the given field length.if the given string is equal or greater than the given field length, it will be returnedwithout modification.",
	"Method": "String characterPad(String s,int fieldLength,char padChar,boolean postpend){\r\n    final char[] chArr = s.toCharArray();\r\n    final int sLen = chArr.length;\r\n    if (sLen < fieldLength) {\r\n        final char[] out = new char[fieldLength];\r\n        final int blanks = fieldLength - sLen;\r\n        if (postpend) {\r\n            for (int i = 0; i < sLen; i++) {\r\n                out[i] = chArr[i];\r\n            }\r\n            for (int i = sLen; i < fieldLength; i++) {\r\n                out[i] = padChar;\r\n            }\r\n        } else {\r\n            for (int i = 0; i < blanks; i++) {\r\n                out[i] = padChar;\r\n            }\r\n            for (int i = blanks; i < fieldLength; i++) {\r\n                out[i] = chArr[i - blanks];\r\n            }\r\n        }\r\n        return String.valueOf(out);\r\n    }\r\n    return s;\r\n}"
}, {
	"Path": "org.apache.struts.validator.Resources.getArgs",
	"Comment": "gets the message arguments based on the current validatoractionand field.",
	"Method": "String[] getArgs(String actionName,MessageResources messages,Locale locale,Field field){\r\n    String[] argMessages = new String[4];\r\n    Arg[] args = new Arg[] { field.getArg(actionName, 0), field.getArg(actionName, 1), field.getArg(actionName, 2), field.getArg(actionName, 3) };\r\n    for (int i = 0; i < args.length; i++) {\r\n        if (args[i] == null) {\r\n            continue;\r\n        }\r\n        if (args[i].isResource()) {\r\n            argMessages[i] = getMessage(messages, locale, args[i].getKey());\r\n        } else {\r\n            argMessages[i] = args[i].getKey();\r\n        }\r\n    }\r\n    return argMessages;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.HeapCompactDoublesSketch.srcMemoryToCombinedBuffer",
	"Comment": "loads the combined buffer from the given source memory.the resulting combined buffer is allocated in this method and is always in compact form.",
	"Method": "void srcMemoryToCombinedBuffer(Memory srcMem,int serVer,boolean srcIsCompact,int combBufCap){\r\n    final int preLongs = 2;\r\n    final int extra = (serVer == 1) ? 3 : 2;\r\n    final int preBytes = (preLongs + extra) << 3;\r\n    final int k = getK();\r\n    combinedBuffer_ = new double[combBufCap];\r\n    if (srcIsCompact) {\r\n        srcMem.getDoubleArray(preBytes, combinedBuffer_, 0, combBufCap);\r\n        if (serVer == 2) {\r\n            Arrays.sort(combinedBuffer_, 0, baseBufferCount_);\r\n        }\r\n    } else {\r\n        srcMem.getDoubleArray(preBytes, combinedBuffer_, 0, baseBufferCount_);\r\n        Arrays.sort(combinedBuffer_, 0, baseBufferCount_);\r\n        int srcOffset = preBytes + ((2 * k) << 3);\r\n        int dstOffset = baseBufferCount_;\r\n        long bitPattern = bitPattern_;\r\n        for (; bitPattern != 0; srcOffset += (k << 3), bitPattern >>>= 1) {\r\n            if ((bitPattern & 1L) > 0L) {\r\n                srcMem.getDoubleArray(srcOffset, combinedBuffer_, dstOffset, k);\r\n                dstOffset += k;\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedOptionsCollectionTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptionsBuilder.withInputEncoding",
	"Comment": "set character encoding for input files, such as scripts andtemplates.",
	"Method": "OutputOptionsBuilder withInputEncoding(Charset inputCharset,OutputOptionsBuilder withInputEncoding,String inputEncoding){\r\n    try {\r\n        inputEncodingCharset = Charset.forName(inputEncoding);\r\n    } catch (final IllegalArgumentException e) {\r\n        inputEncodingCharset = UTF_8;\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedGreaterEqualTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.util.ModuleUtils.getModuleConfig",
	"Comment": "return the moduleconfig object is it exists, null otherwise.",
	"Method": "ModuleConfig getModuleConfig(HttpServletRequest request,ModuleConfig getModuleConfig,String prefix,ServletContext context,ModuleConfig getModuleConfig,String prefix,HttpServletRequest request,ServletContext context,ModuleConfig getModuleConfig,HttpServletRequest request,ServletContext context){\r\n    ModuleConfig moduleConfig = this.getModuleConfig(request);\r\n    if (moduleConfig == null) {\r\n        moduleConfig = this.getModuleConfig(\"\", context);\r\n        request.setAttribute(Globals.MODULE_KEY, moduleConfig);\r\n    }\r\n    return moduleConfig;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseHandlerTag.prepareFocusEvents",
	"Comment": "prepares the focus event handlers, appending them to the the givenstringbuffer.",
	"Method": "void prepareFocusEvents(StringBuffer handlers){\r\n    prepareAttribute(handlers, \"onblur\", getOnblur());\r\n    prepareAttribute(handlers, \"onfocus\", getOnfocus());\r\n    FormTag formTag = null;\r\n    if ((doDisabled && !getDisabled()) || (doReadonly && !getReadonly())) {\r\n        formTag = (FormTag) pageContext.getAttribute(Constants.FORM_KEY, PageContext.REQUEST_SCOPE);\r\n    }\r\n    if (doDisabled) {\r\n        boolean formDisabled = (formTag == null) ? false : formTag.isDisabled();\r\n        if (formDisabled || getDisabled()) {\r\n            handlers.append(\" disabled=\\\"disabled\\\"\");\r\n        }\r\n    }\r\n    if (doReadonly) {\r\n        boolean formReadOnly = (formTag == null) ? false : formTag.isReadonly();\r\n        if (formReadOnly || getReadonly()) {\r\n            handlers.append(\" readonly=\\\"readonly\\\"\");\r\n        }\r\n    }\r\n}"
}, {
	"Path": "oauth.signpost.signature.SignatureBaseString.generate",
	"Comment": "builds the signature base string from the data this instance wasconfigured with.",
	"Method": "String generate(){\r\n    try {\r\n        String normalizedUrl = normalizeRequestUrl();\r\n        String normalizedParams = normalizeRequestParameters();\r\n        return request.getMethod() + '&' + OAuth.percentEncode(normalizedUrl) + '&' + OAuth.percentEncode(normalizedParams);\r\n    } catch (Exception e) {\r\n        throw new OAuthMessageSignerException(e);\r\n    }\r\n}"
}, {
	"Path": "simplenlg.lexicon.Lexicon.getWords",
	"Comment": "returns all words which have the specified base form and category",
	"Method": "List<WordElement> getWords(String baseForm,LexicalCategory category,List<WordElement> getWords,String baseForm){\r\n    return getWords(baseForm, LexicalCategory.ANY);\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.hasPluralComplement",
	"Comment": "checks to see if any of the complements to the phrase are plural.",
	"Method": "boolean hasPluralComplement(List<NLGElement> complements){\r\n    boolean plural = false;\r\n    Iterator<NLGElement> complementIterator = complements.iterator();\r\n    NLGElement eachComplement = null;\r\n    Object numberValue = null;\r\n    while (complementIterator.hasNext() && !plural) {\r\n        eachComplement = complementIterator.next();\r\n        if (eachComplement != null && eachComplement.isA(PhraseCategory.NOUN_PHRASE)) {\r\n            numberValue = eachComplement.getFeature(Feature.NUMBER);\r\n            if (numberValue != null && NumberAgreement.PLURAL.equals(numberValue)) {\r\n                plural = true;\r\n            }\r\n        }\r\n    }\r\n    return plural;\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.TouchImageView.transformCoordTouchToBitmap",
	"Comment": "this function will transform the coordinates in the touch event to the coordinatesystem of the drawable that the imageview contain",
	"Method": "PointF transformCoordTouchToBitmap(float x,float y,boolean clipToBitmap){\r\n    matrix.getValues(m);\r\n    float origW = getDrawable().getIntrinsicWidth();\r\n    float origH = getDrawable().getIntrinsicHeight();\r\n    float transX = m[Matrix.MTRANS_X];\r\n    float transY = m[Matrix.MTRANS_Y];\r\n    float finalX = ((x - transX) * origW) / getImageWidth();\r\n    float finalY = ((y - transY) * origH) / getImageHeight();\r\n    if (clipToBitmap) {\r\n        finalX = Math.min(Math.max(finalX, 0), origW);\r\n        finalY = Math.min(Math.max(finalY, 0), origH);\r\n    }\r\n    return new PointF(finalX, finalY);\r\n}"
}, {
	"Path": "simplenlg.xmlrealiser.UnWrapper.UnwrapNLGElement",
	"Comment": "unwrap a simplenlg.xmlrealiser.wrapper.nlgelement and map it\tto a simplenlg.framework.nlgelement",
	"Method": "simplenlg.framework.NLGElement UnwrapNLGElement(simplenlg.xmlrealiser.wrapper.XmlNLGElement wps){\r\n    if (wps == null) {\r\n        return null;\r\n    }\r\n    if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlDocumentElement) {\r\n        return (NLGElement) UnwrapDocumentElement((simplenlg.xmlrealiser.wrapper.XmlDocumentElement) wps);\r\n    }\r\n    NLGElement cp = UnwrapCoordinatePhraseSpec(wps);\r\n    if (cp != null) {\r\n        return cp;\r\n    }\r\n    if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlStringElement) {\r\n        simplenlg.xmlrealiser.wrapper.XmlStringElement wp = (simplenlg.xmlrealiser.wrapper.XmlStringElement) wps;\r\n        NLGElement p = factory.createStringElement(wp.getVal());\r\n        return p;\r\n    }\r\n    if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlWordElement) {\r\n        return UnwrapWordElement((simplenlg.xmlrealiser.wrapper.XmlWordElement) wps);\r\n    } else if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlSPhraseSpec) {\r\n        simplenlg.xmlrealiser.wrapper.XmlSPhraseSpec wp = (simplenlg.xmlrealiser.wrapper.XmlSPhraseSpec) wps;\r\n        SPhraseSpec sp = factory.createClause();\r\n        NLGElement vp = null;\r\n        ArrayList<NLGElement> subjects = new ArrayList<NLGElement>();\r\n        for (simplenlg.xmlrealiser.wrapper.XmlNLGElement p : wp.getSubj()) {\r\n            NLGElement p1 = UnwrapNLGElement(p);\r\n            checkFunction(simplenlg.features.DiscourseFunction.SUBJECT, p1);\r\n            subjects.add(p1);\r\n        }\r\n        if (subjects.size() > 0) {\r\n            sp.setFeature(InternalFeature.SUBJECTS, subjects);\r\n        }\r\n        if (wp.getVp() != null) {\r\n            vp = UnwrapNLGElement(wp.getVp());\r\n            sp.setVerbPhrase(vp);\r\n        }\r\n        if (wp.getCuePhrase() != null) {\r\n            NLGElement cue = UnwrapNLGElement(wp.getCuePhrase());\r\n            cue.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.CUE_PHRASE);\r\n            sp.setFeature(Feature.CUE_PHRASE, cue);\r\n        }\r\n        if (wp.getCOMPLEMENTISER() != null) {\r\n            sp.setFeature(Feature.COMPLEMENTISER, wp.getCOMPLEMENTISER());\r\n        }\r\n        setSFeatures(wp, sp, vp);\r\n        UnwrapPhraseComponents(sp, wps);\r\n        return sp;\r\n    } else if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlPhraseElement) {\r\n        simplenlg.xmlrealiser.wrapper.XmlPhraseElement we = (simplenlg.xmlrealiser.wrapper.XmlPhraseElement) wps;\r\n        PhraseElement hp = null;\r\n        XmlWordElement w = we.getHead();\r\n        NLGElement head = UnwrapWordElement(w);\r\n        if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlNPPhraseSpec) {\r\n            simplenlg.xmlrealiser.wrapper.XmlNPPhraseSpec wp = (simplenlg.xmlrealiser.wrapper.XmlNPPhraseSpec) wps;\r\n            NPPhraseSpec p = factory.createNounPhrase(head);\r\n            hp = p;\r\n            if (wp.getSpec() != null) {\r\n                simplenlg.xmlrealiser.wrapper.XmlNLGElement spec = wp.getSpec();\r\n                if (spec instanceof simplenlg.xmlrealiser.wrapper.XmlWordElement) {\r\n                    WordElement specifier = (WordElement) UnwrapWordElement((simplenlg.xmlrealiser.wrapper.XmlWordElement) spec);\r\n                    if (specifier != null) {\r\n                        p.setSpecifier(specifier);\r\n                    }\r\n                } else {\r\n                    p.setSpecifier(UnwrapNLGElement(spec));\r\n                }\r\n            }\r\n            setNPFeatures(wp, p);\r\n        } else if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlAdjPhraseSpec) {\r\n            simplenlg.xmlrealiser.wrapper.XmlAdjPhraseSpec wp = (simplenlg.xmlrealiser.wrapper.XmlAdjPhraseSpec) wps;\r\n            AdjPhraseSpec p = factory.createAdjectivePhrase(head);\r\n            hp = p;\r\n            p.setFeature(Feature.IS_COMPARATIVE, wp.isISCOMPARATIVE());\r\n            p.setFeature(Feature.IS_SUPERLATIVE, wp.isISSUPERLATIVE());\r\n        } else if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlPPPhraseSpec) {\r\n            PPPhraseSpec p = factory.createPrepositionPhrase(head);\r\n            hp = p;\r\n        } else if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlAdvPhraseSpec) {\r\n            simplenlg.xmlrealiser.wrapper.XmlAdvPhraseSpec wp = (simplenlg.xmlrealiser.wrapper.XmlAdvPhraseSpec) wps;\r\n            AdvPhraseSpec p = factory.createAdverbPhrase();\r\n            p.setHead(head);\r\n            hp = p;\r\n            p.setFeature(Feature.IS_COMPARATIVE, wp.isISCOMPARATIVE());\r\n            p.setFeature(Feature.IS_SUPERLATIVE, wp.isISSUPERLATIVE());\r\n        } else if (wps instanceof simplenlg.xmlrealiser.wrapper.XmlVPPhraseSpec) {\r\n            simplenlg.xmlrealiser.wrapper.XmlVPPhraseSpec wp = (simplenlg.xmlrealiser.wrapper.XmlVPPhraseSpec) wps;\r\n            VPPhraseSpec p = factory.createVerbPhrase(head);\r\n            hp = p;\r\n            setVPFeatures(wp, p);\r\n        }\r\n        UnwrapPhraseComponents(hp, wps);\r\n        if (we.getDiscourseFunction() != null) {\r\n            hp.setFeature(InternalFeature.DISCOURSE_FUNCTION, Enum.valueOf(simplenlg.features.DiscourseFunction.class, we.getDiscourseFunction().toString()));\r\n        }\r\n        Boolean appositive = we.isAppositive();\r\n        if (appositive != null) {\r\n            hp.setFeature(Feature.APPOSITIVE, appositive);\r\n        }\r\n        return hp;\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsSketch.reset",
	"Comment": "resets this sketch to the empty state, but retains the original value of k.",
	"Method": "void reset(){\r\n    final int ceilingLgK = Util.toLog2(Util.ceilingPowerOf2(reservoirSize_), \"ReservoirLongsSketch\");\r\n    final int initialLgSize = SamplingUtil.startingSubMultiple(ceilingLgK, rf_.lg(), MIN_LG_ARR_LONGS);\r\n    currItemsAlloc_ = SamplingUtil.getAdjustedSize(reservoirSize_, 1 << initialLgSize);\r\n    data_ = new long[currItemsAlloc_];\r\n    itemsSeen_ = 0;\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.doForward",
	"Comment": "do a forward to specified uri using a requestdispatcher.this method is used by all internal method needing to do aforward.",
	"Method": "void doForward(String uri,HttpServletRequest request,HttpServletResponse response){\r\n    RequestDispatcher rd = getServletContext().getRequestDispatcher(uri);\r\n    if (rd == null) {\r\n        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, getInternal().getMessage(\"requestDispatcher\", uri));\r\n        return;\r\n    }\r\n    rd.forward(request, response);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesRequestProcessor.processTilesDefinition",
	"Comment": "process a tile definition name.this method tries to process the parameter definitionnameas a definition name.it returns true if a definition has been processed, orfalse otherwise.",
	"Method": "boolean processTilesDefinition(String definitionName,boolean contextRelative,HttpServletRequest request,HttpServletResponse response,boolean processTilesDefinition,String definitionName,HttpServletRequest request,HttpServletResponse response){\r\n    boolean doInclude = false;\r\n    Controller controller = null;\r\n    String uri = null;\r\n    ComponentContext tileContext = null;\r\n    try {\r\n        tileContext = ComponentContext.getContext(request);\r\n        doInclude = (tileContext != null);\r\n        ComponentDefinition definition = null;\r\n        if (definitionsFactory != null) {\r\n            try {\r\n                definition = definitionsFactory.getDefinition(definitionName, request, getServletContext());\r\n            } catch (NoSuchDefinitionException ex) {\r\n                log.debug(\"NoSuchDefinitionException \" + ex.getMessage());\r\n            }\r\n            if (definition != null) {\r\n                uri = definition.getPath();\r\n                controller = definition.getOrCreateController();\r\n                if (tileContext == null) {\r\n                    tileContext = new ComponentContext(definition.getAttributes());\r\n                    ComponentContext.setContext(tileContext, request);\r\n                } else {\r\n                    tileContext.addMissing(definition.getAttributes());\r\n                }\r\n            }\r\n        }\r\n        definition = DefinitionsUtil.getActionDefinition(request);\r\n        if (definition != null) {\r\n            if (definition.getPath() != null) {\r\n                uri = definition.getPath();\r\n            }\r\n            if (definition.getOrCreateController() != null) {\r\n                controller = definition.getOrCreateController();\r\n            }\r\n            if (tileContext == null) {\r\n                tileContext = new ComponentContext(definition.getAttributes());\r\n                ComponentContext.setContext(tileContext, request);\r\n            } else {\r\n                tileContext.addMissing(definition.getAttributes());\r\n            }\r\n        }\r\n    } catch (java.lang.InstantiationException ex) {\r\n        log.error(\"Can't create associated controller\", ex);\r\n        throw new ServletException(\"Can't create associated controller\", ex);\r\n    } catch (DefinitionsFactoryException ex) {\r\n        throw new ServletException(ex);\r\n    }\r\n    if (uri == null) {\r\n        return false;\r\n    }\r\n    if (controller != null) {\r\n        try {\r\n            controller.execute(tileContext, request, response, getServletContext());\r\n        } catch (Exception e) {\r\n            throw new ServletException(e);\r\n        }\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"uri=\" + uri + \" doInclude=\" + doInclude);\r\n    }\r\n    if (doInclude) {\r\n        doInclude(uri, request, response);\r\n    } else {\r\n        doForward(uri, request, response);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.TouchImageView.savePreviousImageValues",
	"Comment": "save the current matrix and view dimensionsin the prevmatrix and prevview variables.",
	"Method": "void savePreviousImageValues(){\r\n    if (matrix != null && viewHeight != 0 && viewWidth != 0) {\r\n        matrix.getValues(m);\r\n        prevMatrix.setValues(m);\r\n        prevMatchViewHeight = matchViewHeight;\r\n        prevMatchViewWidth = matchViewWidth;\r\n        prevViewHeight = viewHeight;\r\n        prevViewWidth = viewWidth;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsUnion.getMaxK",
	"Comment": "returns the maximum allowed reservoir capacity in this union. the current reservoir capacitymay be lower.",
	"Method": "int getMaxK(){\r\n    return maxK_;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.FeatureTest.testProgressiveComplementiserFeatures_PastTense",
	"Comment": "tests the user of the progressive and complementiser featuers in past tense.",
	"Method": "void testProgressiveComplementiserFeatures_PastTense(){\r\n    this.phraseFactory.setLexicon(this.lexicon);\r\n    NLGElement sandwich = phraseFactory.createNounPhrase(LexicalCategory.NOUN, \"sandwich\");\r\n    sandwich.setPlural(true);\r\n    PhraseElement first = phraseFactory.createClause(\"I\", \"make\", sandwich);\r\n    first.setFeature(Feature.TENSE, Tense.PAST);\r\n    first.setFeature(Feature.PROGRESSIVE, true);\r\n    first.setPlural(false);\r\n    PhraseElement second = phraseFactory.createClause(\"the mayonnaise\", \"run out\");\r\n    second.setFeature(Feature.TENSE, Tense.PAST);\r\n    second.setFeature(Feature.COMPLEMENTISER, \"when\");\r\n    first.addComplement(second);\r\n    DocumentElement sentence = docFactory.createSentence(first);\r\n    NLGElement realised = realiser.realise(sentence);\r\n    Assert.assertEquals(\"I was making sandwiches when the mayonnaise ran out.\", realised.getRealisation());\r\n}"
}, {
	"Path": "net.csdn.common.Strings.splitArrayElementsIntoProperties",
	"Comment": "take an array strings and split each element based on the given delimiter.a properties instance is then generated, with the left of thedelimiter providing the key, and the right of the delimiter providing the value.will trim both the key and value before adding them to theproperties instance.",
	"Method": "Properties splitArrayElementsIntoProperties(String[] array,String delimiter,Properties splitArrayElementsIntoProperties,String[] array,String delimiter,String charsToDelete){\r\n    if (isEmpty(array)) {\r\n        return null;\r\n    }\r\n    Properties result = new Properties();\r\n    for (String element : array) {\r\n        if (charsToDelete != null) {\r\n            element = deleteAny(element, charsToDelete);\r\n        }\r\n        String[] splittedElement = split(element, delimiter);\r\n        if (splittedElement == null) {\r\n            continue;\r\n        }\r\n        result.setProperty(splittedElement[0].trim(), splittedElement[1].trim());\r\n    }\r\n    return result;\r\n}"
}, {
	"Path": "simplenlg.lexicon.english.LexicalVariantsTest.spellingVariantsInVPTest",
	"Comment": "check that spelling variants are preserved during realisation of vps",
	"Method": "void spellingVariantsInVPTest(){\r\n    WordElement eth = (WordElement) factory.createWord(\"etherise\", LexicalCategory.VERB);\r\n    Assert.assertEquals(\"etherize\", eth.getDefaultSpellingVariant());\r\n    eth.setDefaultSpellingVariant(\"etherise\");\r\n    Assert.assertEquals(\"etherise\", eth.getDefaultSpellingVariant());\r\n    SPhraseSpec s = this.factory.createClause(this.factory.createNounPhrase(\"the\", \"doctor\"), eth, this.factory.createNounPhrase(\"the patient\"));\r\n    Assert.assertEquals(\"the doctor etherises the patient\", this.realiser.realise(s).getRealisation());\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.getMapping",
	"Comment": "the org.apache.struts.actionmapping instance for thisrequest.",
	"Method": "ActionMapping getMapping(){\r\n    if (this.request == null) {\r\n        return null;\r\n    }\r\n    return (ActionMapping) this.request.getAttribute(Globals.MAPPING_KEY);\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionForm.isDynaAssignable",
	"Comment": "indicates if an object of the source class is assignable to thedestination class.",
	"Method": "boolean isDynaAssignable(Class dest,Class source){\r\n    if (dest.isAssignableFrom(source) || ((dest == Boolean.TYPE) && (source == Boolean.class)) || ((dest == Byte.TYPE) && (source == Byte.class)) || ((dest == Character.TYPE) && (source == Character.class)) || ((dest == Double.TYPE) && (source == Double.class)) || ((dest == Float.TYPE) && (source == Float.class)) || ((dest == Integer.TYPE) && (source == Integer.class)) || ((dest == Long.TYPE) && (source == Long.class)) || ((dest == Short.TYPE) && (source == Short.class))) {\r\n        return (true);\r\n    } else {\r\n        return (false);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.util.PropertyMessageResources.getMessage",
	"Comment": "returns a text message for the specified key, for the specified or defaultlocale. a null string result will be returned by this method if no relevantmessage resource is found for this key or locale, if thereturnnull property is set.otherwise, an appropriateerror message will be returned.this method must be implemented bya concrete subclass.",
	"Method": "String getMessage(Locale locale,String key){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"getMessage(\" + locale + \",\" + key + \")\");\r\n    }\r\n    String localeKey = localeKey(locale);\r\n    String originalKey = messageKey(localeKey, key);\r\n    String message = null;\r\n    message = findMessage(locale, key, originalKey);\r\n    if (message != null) {\r\n        return message;\r\n    }\r\n    if (mode == MODE_JSTL) {\r\n    } else if (mode == MODE_RESOURCE_BUNDLE) {\r\n        if (!defaultLocale.equals(locale)) {\r\n            message = findMessage(defaultLocale, key, originalKey);\r\n        }\r\n    } else {\r\n        if (!defaultLocale.equals(locale)) {\r\n            localeKey = localeKey(defaultLocale);\r\n            message = findMessage(localeKey, key, originalKey);\r\n        }\r\n    }\r\n    if (message != null) {\r\n        return message;\r\n    }\r\n    message = findMessage(\"\", key, originalKey);\r\n    if (message != null) {\r\n        return message;\r\n    }\r\n    if (returnNull) {\r\n        return (null);\r\n    } else {\r\n        return (\"???\" + messageKey(locale, key) + \"???\");\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSketches.wrapUpdatableSketch",
	"Comment": "wrap the given writablememory and seed as a arrayofdoublesupdatablesketch",
	"Method": "ArrayOfDoublesUpdatableSketch wrapUpdatableSketch(WritableMemory mem,ArrayOfDoublesUpdatableSketch wrapUpdatableSketch,WritableMemory mem,long seed){\r\n    return ArrayOfDoublesUpdatableSketch.wrap(mem, seed);\r\n}"
}, {
	"Path": "simplenlg.framework.ListElement.setComponents",
	"Comment": "replaces the current components in the list element with the given list.",
	"Method": "void setComponents(List<NLGElement> newComponents){\r\n    setFeature(InternalFeature.COMPONENTS, newComponents);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSetOperationBuilder.setSeed",
	"Comment": "sets the long seed value that is required by the hashing function.",
	"Method": "ArrayOfDoublesSetOperationBuilder setSeed(long seed){\r\n    seed_ = seed;\r\n    return this;\r\n}"
}, {
	"Path": "simplenlg.framework.WordElement.getInflectionalVariants",
	"Comment": "convenience method to get all the inflectional forms of the word.",
	"Method": "Map<Inflection, InflectionSet> getInflectionalVariants(){\r\n    return this.inflVars;\r\n}"
}, {
	"Path": "org.jf.util.SparseArray.delete",
	"Comment": "removes the mapping from the specified key, if there was any.",
	"Method": "void delete(int key){\r\n    int i = binarySearch(mKeys, 0, mSize, key);\r\n    if (i >= 0) {\r\n        if (mValues[i] != DELETED) {\r\n            mValues[i] = DELETED;\r\n            mGarbage = true;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.checkImperativeInfinitive",
	"Comment": "checks to see if the phrase is in imperative, infinitive or bare\tinfinitive form. if it is then no morphology is done on the main verb.",
	"Method": "void checkImperativeInfinitive(Object formValue,NLGElement frontVG){\r\n    if ((Form.IMPERATIVE.equals(formValue) || Form.INFINITIVE.equals(formValue) || Form.BARE_INFINITIVE.equals(formValue)) && frontVG != null) {\r\n        frontVG.setFeature(InternalFeature.NON_MORPH, true);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.getMessageResources",
	"Comment": "create and return an instance of messageresources for thecreated by the default messageresourcesfactory.",
	"Method": "MessageResources getMessageResources(String config){\r\n    if (defaultFactory == null) {\r\n        defaultFactory = MessageResourcesFactory.createFactory();\r\n    }\r\n    return defaultFactory.createResources(config);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testInitModuleForwardsNullFormType",
	"Comment": "test that initmoduleforwards throws an exception when a forward with anull path is present.",
	"Method": "void testInitModuleForwardsNullFormType(){\r\n    ActionForward forward = new ActionForward(\"success\", null, false);\r\n    moduleConfig.addForwardConfig(forward);\r\n    try {\r\n        actionServlet.initModuleForwards(moduleConfig);\r\n        fail(\"An exception should've been thrown here.\");\r\n    } catch (UnavailableException e) {\r\n    } catch (Exception e) {\r\n        fail(\"Unrecognized exception thrown: \" + e);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.BaseFieldTag.doStartTag",
	"Comment": "generate the required input tag.support for indexed property sincestruts 1.1",
	"Method": "int doStartTag(){\r\n    TagUtils.getInstance().write(this.pageContext, this.renderInputElement());\r\n    return (EVAL_BODY_TAG);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.addFormBeanConfig",
	"Comment": "add a new formbeanconfig instance to the setassociated with this module.",
	"Method": "void addFormBeanConfig(FormBeanConfig config){\r\n    throwIfConfigured();\r\n    String key = config.getName();\r\n    if (formBeans.containsKey(key)) {\r\n        log.warn(\"Overriding ActionForm of name \" + key);\r\n    }\r\n    formBeans.put(key, config);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketchIterator.next",
	"Comment": "advancing the iterator and checking existence of the next entryis combined here for efficiency. this results in an undefinedstate of the iterator before the first call of this method.",
	"Method": "boolean next(){\r\n    if (sketchAccessor_ == null) {\r\n        sketchAccessor_ = DoublesSketchAccessor.wrap(sketch_);\r\n    } else {\r\n        i_++;\r\n    }\r\n    if (i_ < sketchAccessor_.numItems()) {\r\n        return true;\r\n    }\r\n    do {\r\n        level_++;\r\n        if (level_ > 0) {\r\n            bits_ >>>= 1;\r\n        }\r\n        if (bits_ == 0L) {\r\n            return false;\r\n        }\r\n        weight_ *= 2;\r\n    } while ((bits_ & 1L) == 0L);\r\n    i_ = 0;\r\n    sketchAccessor_.setLevel(level_);\r\n    return true;\r\n}"
}, {
	"Path": "simplenlg.framework.WordElement.getChildren",
	"Comment": "this method returns an empty list as words do not have child\telements.",
	"Method": "List<NLGElement> getChildren(){\r\n    return new ArrayList<NLGElement>();\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.newInstance",
	"Comment": "construct a mergeable sampling sketch with up to k samples using a specified resize factor.",
	"Method": "ReservoirItemsSketch<T> newInstance(int k,ReservoirItemsSketch<T> newInstance,int k,ResizeFactor rf,ReservoirItemsSketch<T> newInstance,ArrayList<T> data,long itemsSeen,ResizeFactor rf,int k){\r\n    return new ReservoirItemsSketch(data, itemsSeen, rf, k);\r\n}"
}, {
	"Path": "com.yahoo.sketches.Util.checkIfMultipleOf8AndGT0",
	"Comment": "checks if parameter v is a multiple of 8 and greater than zero.",
	"Method": "void checkIfMultipleOf8AndGT0(long v,String argName){\r\n    if (((v & 0X7L) == 0L) && (v > 0L)) {\r\n        return;\r\n    }\r\n    throw new SketchesArgumentException(\"The value of the parameter \\\"\" + argName + \"\\\" must be a positive multiple of 8 and greater than zero: \" + v);\r\n}"
}, {
	"Path": "org.apache.struts.config.impl.ModuleConfigImpl.getConfigured",
	"Comment": "has this module been completely configured yet.once this flaghas been set, any attempt to modify the configuration will return anillegalstateexception.",
	"Method": "boolean getConfigured(){\r\n    return (this.configured);\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.DirectCouponHashSet.find",
	"Comment": "if the probe comes back to original index, throws an exception.",
	"Method": "int find(Memory mem,int lgArr,int coupon){\r\n    final int arrMask = (1 << lgArr) - 1;\r\n    int probe = coupon & arrMask;\r\n    final int loopIndex = probe;\r\n    do {\r\n        final int couponAtIndex = extractInt(mem, HASH_SET_INT_ARR_START + (probe << 2));\r\n        if (couponAtIndex == EMPTY) {\r\n            return ~probe;\r\n        } else if (coupon == couponAtIndex) {\r\n            return probe;\r\n        }\r\n        final int stride = ((coupon & KEY_MASK_26) >>> lgArr) | 1;\r\n        probe = (probe + stride) & arrMask;\r\n    } while (probe != loopIndex);\r\n    throw new SketchesArgumentException(\"Key not found and no empty slots!\");\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesPlugin.setCurrentPlugInConfigObject",
	"Comment": "method used by the actionservlet initializing this plugin.set the plugin config object read from module config.",
	"Method": "void setCurrentPlugInConfigObject(PlugInConfig plugInConfigObject){\r\n    this.currentPlugInConfigObject = plugInConfigObject;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.DefineTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String type = (String) data.getAttribute(\"type\");\r\n    Object name = data.getAttribute(\"name\");\r\n    Object value = data.getAttribute(\"value\");\r\n    if (type == null) {\r\n        if ((value != null) || (name == null)) {\r\n            type = \"java.lang.String\";\r\n        } else {\r\n            type = \"java.lang.Object\";\r\n        }\r\n    }\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), type, true, VariableInfo.AT_END) };\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsUpdateImpl.maybeGrowLevels",
	"Comment": "this only increases the size and does not touch or move any data.",
	"Method": "void maybeGrowLevels(ItemsSketch<T> sketch,long newN){\r\n    final int k = sketch.getK();\r\n    final int numLevelsNeeded = Util.computeNumLevelsNeeded(k, newN);\r\n    if (numLevelsNeeded == 0) {\r\n        return;\r\n    }\r\n    assert newN >= 2L * k;\r\n    assert numLevelsNeeded > 0;\r\n    final int spaceNeeded = (2 + numLevelsNeeded) * k;\r\n    if (spaceNeeded <= sketch.getCombinedBufferAllocatedCount()) {\r\n        return;\r\n    }\r\n    sketch.combinedBuffer_ = Arrays.copyOf(sketch.getCombinedBuffer(), spaceNeeded);\r\n    sketch.combinedBufferItemCapacity_ = spaceNeeded;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.forceIncrementItemsSeen",
	"Comment": "used during union operations to update count of items seen. does not check sign,but will throw an exception if the final result exceeds the maximum possible items seenvalue.",
	"Method": "void forceIncrementItemsSeen(long inc){\r\n    itemsSeen_ += inc;\r\n    if (itemsSeen_ > MAX_ITEMS_SEEN) {\r\n        throw new SketchesStateException(\"Sketch has exceeded capacity for total items seen. \" + \"Limit: \" + MAX_ITEMS_SEEN + \", found: \" + itemsSeen_);\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtil.isTilesUtilImplSet",
	"Comment": "getter to know if the underlying implementation is already set to anothervalue than the default value.",
	"Method": "boolean isTilesUtilImplSet(){\r\n    return implAlreadySet;\r\n}"
}, {
	"Path": "jadx.core.dex.instructions.args.RegisterArg.getConstValue",
	"Comment": "return constant value from register assign or null if not constant",
	"Method": "Object getConstValue(DexNode dex){\r\n    InsnNode parInsn = getAssignInsn();\r\n    if (parInsn == null) {\r\n        return null;\r\n    }\r\n    return InsnUtils.getConstValueByInsn(dex, parInsn);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.LessEqualTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(-1, 0));\r\n}"
}, {
	"Path": "com.yahoo.sketches.HashOperations.countPart",
	"Comment": "counts the cardinality of the first log2 values of the given source array.",
	"Method": "int countPart(long[] srcArr,int lgArrLongs,long thetaLong){\r\n    int cnt = 0;\r\n    final int len = 1 << lgArrLongs;\r\n    for (int i = len; i-- > 0; ) {\r\n        final long hash = srcArr[i];\r\n        if (continueCondition(thetaLong, hash)) {\r\n            continue;\r\n        }\r\n        cnt++;\r\n    }\r\n    return cnt;\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfigMatcher.replaceProperties",
	"Comment": "replaces placeholders from one properties values set to another.",
	"Method": "void replaceProperties(Properties orig,Properties props,Map vars){\r\n    Map.Entry entry = null;\r\n    for (Iterator i = orig.entrySet().iterator(); i.hasNext(); ) {\r\n        entry = (Map.Entry) i.next();\r\n        props.setProperty((String) entry.getKey(), convertParam((String) entry.getValue(), vars));\r\n    }\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createClause",
	"Comment": "creates a clause with the given subject, verb or verb phrase and direct\tobject but no indirect object.",
	"Method": "SPhraseSpec createClause(SPhraseSpec createClause,Object subject,Object verb,SPhraseSpec createClause,Object subject,Object verb,Object directObject){\r\n    SPhraseSpec phraseElement = new SPhraseSpec(this);\r\n    if (verb != null) {\r\n        if (verb instanceof PhraseElement) {\r\n            phraseElement.setVerbPhrase((PhraseElement) verb);\r\n        } else {\r\n            phraseElement.setVerb(verb);\r\n        }\r\n    }\r\n    if (subject != null)\r\n        phraseElement.setSubject(subject);\r\n    if (directObject != null) {\r\n        phraseElement.setObject(directObject);\r\n    }\r\n    return phraseElement;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.toString",
	"Comment": "returns a human readable string of the preamble of a memory image of a itemssketch.",
	"Method": "String toString(String toString,String toString,byte[] byteArr,String toString,Memory mem){\r\n    return PreambleUtil.preambleToString(mem);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testProcessExceptionConfigClassOverriddenSubFormClass",
	"Comment": "test the case where the subconfig has already specified its own configclass.if the code still attempts to create a new instance, an errorwill be thrown.",
	"Method": "void testProcessExceptionConfigClassOverriddenSubFormClass(){\r\n    moduleConfig.addExceptionConfig(baseException);\r\n    ExceptionConfig customSub = new CustomExceptionConfigArg(\"java.lang.IllegalStateException\");\r\n    customSub.setExtends(\"java.lang.NullPointerException\");\r\n    moduleConfig.addExceptionConfig(customSub);\r\n    try {\r\n        actionServlet.processExceptionConfigClass(customSub, moduleConfig, null);\r\n    } catch (Exception e) {\r\n        fail(\"Exception should not be thrown\");\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.HeapQuickSelectSketch.setHashTableThreshold",
	"Comment": "returns the cardinality limit given the current size of the hash table array.",
	"Method": "int setHashTableThreshold(int lgNomLongs,int lgArrLongs){\r\n    final double fraction = (lgArrLongs <= lgNomLongs) ? RESIZE_THRESHOLD : REBUILD_THRESHOLD;\r\n    return (int) Math.floor(fraction * (1 << lgArrLongs));\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Sketch.getTheta",
	"Comment": "gets the value of theta as a double with a value between zero and one",
	"Method": "double getTheta(){\r\n    return getThetaLong() / MAX_THETA_LONG_AS_DOUBLE;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsInteger",
	"Comment": "retrieves the value of the feature as an integer. if the\tfeature does not exist or cannot be converted to an integer then\tnull is returned.",
	"Method": "Integer getFeatureAsInteger(String featureName){\r\n    Object value = getFeature(featureName);\r\n    Integer intValue = null;\r\n    if (value instanceof Integer) {\r\n        intValue = (Integer) value;\r\n    } else if (value instanceof Number) {\r\n        intValue = new Integer(((Number) value).intValue());\r\n    } else if (value instanceof String) {\r\n        try {\r\n            intValue = new Integer((String) value);\r\n        } catch (NumberFormatException exception) {\r\n            intValue = null;\r\n        }\r\n    }\r\n    return intValue;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractExecuteAction.execute",
	"Comment": "execute the specified action, and return the resultingforwardconfig.",
	"Method": "boolean execute(ActionContext actionCtx,ForwardConfig execute,ActionContext context,Action action,ActionConfig actionConfig,ActionForm actionForm){\r\n    Boolean valid = actionCtx.getFormValid();\r\n    if ((valid == null) || !valid.booleanValue()) {\r\n        return (false);\r\n    }\r\n    Action action = actionCtx.getAction();\r\n    if (action == null) {\r\n        return (false);\r\n    }\r\n    ActionConfig actionConfig = actionCtx.getActionConfig();\r\n    ActionForm actionForm = actionCtx.getActionForm();\r\n    ForwardConfig forwardConfig = execute(actionCtx, action, actionConfig, actionForm);\r\n    actionCtx.setForwardConfig(forwardConfig);\r\n    return (false);\r\n}"
}, {
	"Path": "schemacrawler.tools.text.operation.DataJsonFormatter.handleAggregateOperationForTable",
	"Comment": "handles an aggregate operation, such as a count, for a given table.",
	"Method": "long handleAggregateOperationForTable(ResultSet results){\r\n    try {\r\n        long aggregate = 0;\r\n        if (results.next()) {\r\n            aggregate = results.getLong(1);\r\n        }\r\n        return aggregate;\r\n    } catch (final SQLException e) {\r\n        throw new SchemaCrawlerException(\"Could not obtain aggregate data\", e);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.getInstance",
	"Comment": "heapifies the given srcmem, which must be a memory image of a itemssketch",
	"Method": "ItemsSketch<T> getInstance(Comparator<? super T> comparator,ItemsSketch<T> getInstance,int k,Comparator<? super T> comparator,ItemsSketch<T> getInstance,Memory srcMem,Comparator<? super T> comparator,ArrayOfItemsSerDe<T> serDe){\r\n    final long memCapBytes = srcMem.getCapacity();\r\n    if (memCapBytes < 8) {\r\n        throw new SketchesArgumentException(\"Memory too small: \" + memCapBytes);\r\n    }\r\n    final int preambleLongs = extractPreLongs(srcMem);\r\n    final int serVer = extractSerVer(srcMem);\r\n    final int familyID = extractFamilyID(srcMem);\r\n    final int flags = extractFlags(srcMem);\r\n    final int k = extractK(srcMem);\r\n    ItemsUtil.checkItemsSerVer(serVer);\r\n    if ((serVer == 3) && ((flags & COMPACT_FLAG_MASK) == 0)) {\r\n        throw new SketchesArgumentException(\"Non-compact Memory images are not supported.\");\r\n    }\r\n    final boolean empty = Util.checkPreLongsFlagsCap(preambleLongs, flags, memCapBytes);\r\n    Util.checkFamilyID(familyID);\r\n    final ItemsSketch<T> qs = getInstance(k, comparator);\r\n    if (empty) {\r\n        return qs;\r\n    }\r\n    final long n = extractN(srcMem);\r\n    final int extra = 2;\r\n    final int numMemItems = Util.computeRetainedItems(k, n) + extra;\r\n    qs.n_ = n;\r\n    qs.combinedBufferItemCapacity_ = Util.computeCombinedBufferItemCapacity(k, n);\r\n    qs.baseBufferCount_ = computeBaseBufferItems(k, n);\r\n    qs.bitPattern_ = computeBitPattern(k, n);\r\n    qs.combinedBuffer_ = new Object[qs.combinedBufferItemCapacity_];\r\n    final int srcMemItemsOffsetBytes = preambleLongs * Long.BYTES;\r\n    final Memory mReg = srcMem.region(srcMemItemsOffsetBytes, srcMem.getCapacity() - srcMemItemsOffsetBytes);\r\n    final T[] itemsArray = serDe.deserializeFromMemory(mReg, numMemItems);\r\n    qs.itemsArrayToCombinedBuffer(itemsArray);\r\n    return qs;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirLongsUnion.newInstance",
	"Comment": "creates an empty union with a maximum reservoir capacity of size k.",
	"Method": "ReservoirLongsUnion newInstance(int maxK){\r\n    return new ReservoirLongsUnion(maxK);\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.addFileParameter",
	"Comment": "adds a file parameter to the set of file parameters for thisrequest and also to the list of all parameters.",
	"Method": "void addFileParameter(FileItem item){\r\n    FormFile formFile = new CommonsFormFile(item);\r\n    String name = item.getFieldName();\r\n    if (elementsFile.containsKey(name)) {\r\n        Object o = elementsFile.get(name);\r\n        if (o instanceof List) {\r\n            ((List) o).add(formFile);\r\n        } else {\r\n            List list = new ArrayList();\r\n            list.add((FormFile) o);\r\n            list.add(formFile);\r\n            elementsFile.put(name, list);\r\n            elementsAll.put(name, list);\r\n        }\r\n    } else {\r\n        elementsFile.put(name, formFile);\r\n        elementsAll.put(name, formFile);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcSketch.validate",
	"Comment": "convience function that this sketch is valid. this is a troubleshooting toolfor sketches that have been heapified from serialized images.if you are starting with a serialized image as a byte array, first heapifythe byte array to a sketch, which performs a number of checks. then use thisfunction as one additional check on the sketch.",
	"Method": "boolean validate(){\r\n    final long[] bitMatrix = bitMatrixOfSketch(this);\r\n    final long matrixCoupons = countBitsSetInMatrix(bitMatrix);\r\n    return matrixCoupons == numCoupons;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.DefinitionsUtil.createDefinitionsFactory",
	"Comment": "create definition factory.if a factory class name is provided, a factory of this class is created. otherwise,default factory is created.",
	"Method": "DefinitionsFactory createDefinitionsFactory(ServletContext servletContext,Map properties,String classname,DefinitionsFactory createDefinitionsFactory,ServletContext servletContext,Map properties,DefinitionsFactory createDefinitionsFactory,ServletContext servletContext,ServletConfig servletConfig,DefinitionsFactory createDefinitionsFactory,ServletContext servletContext,ServletConfig servletConfig,boolean checkIfExist){\r\n    if (checkIfExist) {\r\n        DefinitionsFactory factory = getDefinitionsFactory(servletContext);\r\n        if (factory != null)\r\n            return factory;\r\n    }\r\n    return createDefinitionsFactory(servletContext, servletConfig);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationBuilder.buildUnion",
	"Comment": "convenience method, returns a configured setoperation union withdefault nominal entriesand the given destination memory.",
	"Method": "Union buildUnion(Union buildUnion,WritableMemory dstMem){\r\n    return (Union) build(Family.UNION, dstMem);\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ItemsSketch.getUpperBound",
	"Comment": "gets the guaranteed upper bound frequency of the given item.",
	"Method": "long getUpperBound(T item,long getUpperBound){\r\n    return hashMap.get(item) + offset;\r\n}"
}, {
	"Path": "org.apache.struts.util.RequestUtils.createActionForm",
	"Comment": "create and return an actionform instance appropriate tothe information in config.does not perform any checks to see if an existing actionform existswhich could be reused.",
	"Method": "ActionForm createActionForm(HttpServletRequest request,ActionMapping mapping,ModuleConfig moduleConfig,ActionServlet servlet,ActionForm createActionForm,FormBeanConfig config,ActionServlet servlet){\r\n    if (config == null) {\r\n        return (null);\r\n    }\r\n    ActionForm instance = null;\r\n    try {\r\n        instance = config.createActionForm(servlet);\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\" Creating new \" + (config.getDynamic() ? \"DynaActionForm\" : \"ActionForm\") + \" instance of type '\" + config.getType() + \"'\");\r\n            log.trace(\" --> \" + instance);\r\n        }\r\n    } catch (Throwable t) {\r\n        log.error(servlet.getInternal().getMessage(\"formBean\", config.getType()), t);\r\n    }\r\n    return (instance);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.propagate",
	"Comment": "propagate the concurrentheapthetabuffer into this sketch",
	"Method": "void propagate(AtomicBoolean localPropagationInProgress,Sketch sketchIn,long singleHash){\r\n    final long epoch = epoch_;\r\n    final long k = 1 << getLgNomLongs();\r\n    if ((singleHash != NOT_SINGLE_HASH) && (getRetainedEntries(false) < (2 * k))) {\r\n        startPropagation();\r\n        if (!validateEpoch(epoch)) {\r\n            endPropagation(null);\r\n            return;\r\n        }\r\n        updateSingle(singleHash);\r\n        endPropagation(localPropagationInProgress);\r\n        return;\r\n    }\r\n    final BackgroundThetaPropagation job = new BackgroundThetaPropagation(this, localPropagationInProgress, sketchIn, singleHash, epoch);\r\n    BackgroundThetaPropagation.propagationExecutorService.execute(job);\r\n}"
}, {
	"Path": "net.csdn.modules.compress.lzf.ChunkEncoder.encodeAndWriteChunk",
	"Comment": "method for encoding individual chunk, writing it to given output stream.",
	"Method": "void encodeAndWriteChunk(byte[] data,int offset,int len,OutputStream out){\r\n    byte[] headerBuf = _headerBuffer;\r\n    if (headerBuf == null) {\r\n        _headerBuffer = headerBuf = new byte[LZFChunk.MAX_HEADER_LEN];\r\n    }\r\n    if (len >= MIN_BLOCK_TO_COMPRESS) {\r\n        int compLen = tryCompress(data, offset, offset + len, _encodeBuffer, 0);\r\n        if (compLen < (len - 2)) {\r\n            LZFChunk.writeCompressedHeader(len, compLen, out, headerBuf);\r\n            out.write(_encodeBuffer, 0, compLen);\r\n            return;\r\n        }\r\n    }\r\n    LZFChunk.writeNonCompressedHeader(len, out, headerBuf);\r\n    out.write(data, offset, len);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedTextareaTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.tiles.definition.ComponentDefinitionsFactoryWrapper.createConfigMap",
	"Comment": "create map of configuration attributes from configuration object.mapping is done between old names and new names.",
	"Method": "Map createConfigMap(DefinitionsFactoryConfig config){\r\n    Map map = new HashMap(config.getAttributes());\r\n    map.put(DefinitionsFactoryConfig.DEFINITIONS_CONFIG_PARAMETER_NAME, config.getDefinitionConfigFiles());\r\n    map.put(DefinitionsFactoryConfig.PARSER_VALIDATE_PARAMETER_NAME, (config.getParserValidate() ? Boolean.TRUE.toString() : Boolean.FALSE.toString()));\r\n    if (!\"org.apache.struts.tiles.xmlDefinition.I18nFactorySet\".equals(config.getFactoryClassname())) {\r\n        map.put(DefinitionsFactoryConfig.FACTORY_CLASSNAME_PARAMETER_NAME, config.getFactoryClassname());\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsUtil.validateValues",
	"Comment": "checks the sequential validity of the given array of values.they must be unique, monotonically increasing and not null.",
	"Method": "void validateValues(T[] values,Comparator<? super T> comparator){\r\n    final int lenM1 = values.length - 1;\r\n    for (int j = 0; j < lenM1; j++) {\r\n        if ((values[j] != null) && (values[j + 1] != null) && (comparator.compare(values[j], values[j + 1]) < 0)) {\r\n            continue;\r\n        }\r\n        throw new SketchesArgumentException(\"Values must be unique, monotonically increasing and not null.\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.SizeTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), \"java.lang.Integer\", true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "simplenlg.framework.WordElement.setFeatures",
	"Comment": "sets features from another existing wordelement into this wordelement.",
	"Method": "void setFeatures(WordElement currentWord){\r\n    if (null != currentWord && null != currentWord.getAllFeatures()) {\r\n        for (String feature : currentWord.getAllFeatureNames()) {\r\n            this.setFeature(feature, currentWord.getFeature(feature));\r\n        }\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.BinomialBoundsN.computeApproxBinoLB",
	"Comment": "a frequentist confidence interval based on the tails of the binomial distribution.",
	"Method": "double computeApproxBinoLB(long numSamplesI,double theta,int numSDev){\r\n    if (theta == 1.0) {\r\n        return (numSamplesI);\r\n    } else if (numSamplesI == 0) {\r\n        return (0.0);\r\n    } else if (numSamplesI == 1) {\r\n        final double delta = deltaOfNumSDev[numSDev];\r\n        final double rawLB = (Math.log(1.0 - delta)) / (Math.log(1.0 - theta));\r\n        return (Math.floor(rawLB));\r\n    } else if (numSamplesI > 120) {\r\n        final double rawLB = contClassicLB(numSamplesI, theta, numSDev);\r\n        return (rawLB - 0.5);\r\n    } else if (theta > (1.0 - 1e-5)) {\r\n        return (numSamplesI);\r\n    } else if (theta < ((numSamplesI) / 360.0)) {\r\n        final int index;\r\n        final double rawLB;\r\n        index = (3 * ((int) numSamplesI)) + (numSDev - 1);\r\n        rawLB = contClassicLB(numSamplesI, theta, EquivTables.getLB(index));\r\n        return (rawLB - 0.5);\r\n    } else {\r\n        final double delta = deltaOfNumSDev[numSDev];\r\n        final long nstar = specialNStar(numSamplesI, theta, delta);\r\n        return (nstar);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.HllSketch.iterator",
	"Comment": "returns a pairiterator over the key, value pairs of the hll array.",
	"Method": "PairIterator iterator(){\r\n    return hllSketchImpl.iterator();\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.VarOptItemsSketch.heapify",
	"Comment": "returns a sketch instance of this class from the given srcmem,which must be a memory representation of this sketch class.",
	"Method": "VarOptItemsSketch<T> heapify(Memory srcMem,ArrayOfItemsSerDe<T> serDe){\r\n    final int numPreLongs = getAndCheckPreLongs(srcMem);\r\n    final ResizeFactor rf = ResizeFactor.getRF(extractResizeFactor(srcMem));\r\n    final int serVer = extractSerVer(srcMem);\r\n    final int familyId = extractFamilyID(srcMem);\r\n    final int flags = extractFlags(srcMem);\r\n    final boolean isEmpty = (flags & EMPTY_FLAG_MASK) != 0;\r\n    final boolean isGadget = (flags & GADGET_FLAG_MASK) != 0;\r\n    if ((numPreLongs != Family.VAROPT.getMinPreLongs()) && (numPreLongs != Family.VAROPT.getMaxPreLongs()) && (numPreLongs != PreambleUtil.VO_WARMUP_PRELONGS)) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Must have \" + Family.VAROPT.getMinPreLongs() + \", \" + PreambleUtil.VO_WARMUP_PRELONGS + \", or \" + Family.VAROPT.getMaxPreLongs() + \" preLongs. Found: \" + numPreLongs);\r\n    }\r\n    if (serVer != SER_VER) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: Ser Ver must be \" + SER_VER + \": \" + serVer);\r\n    }\r\n    final int reqFamilyId = Family.VAROPT.getID();\r\n    if (familyId != reqFamilyId) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: FamilyID must be \" + reqFamilyId + \": \" + familyId);\r\n    }\r\n    final int k = extractK(srcMem);\r\n    if (k < 1) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: k must be at least 1: \" + k);\r\n    }\r\n    if (isEmpty) {\r\n        assert numPreLongs == Family.VAROPT.getMinPreLongs();\r\n        return new VarOptItemsSketch(k, rf);\r\n    }\r\n    final long n = extractN(srcMem);\r\n    if (n < 0) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: n cannot be negative: \" + n);\r\n    }\r\n    final int hCount = extractHRegionItemCount(srcMem);\r\n    final int rCount = extractRRegionItemCount(srcMem);\r\n    if (hCount < 0) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: H region count cannot be \" + \"negative: \" + hCount);\r\n    }\r\n    if (rCount < 0) {\r\n        throw new SketchesArgumentException(\"Possible Corruption: R region count cannot be \" + \"negative: \" + rCount);\r\n    }\r\n    double totalRWeight = 0.0;\r\n    if (numPreLongs == Family.VAROPT.getMaxPreLongs()) {\r\n        if (rCount > 0) {\r\n            totalRWeight = extractTotalRWeight(srcMem);\r\n        } else {\r\n            throw new SketchesArgumentException(\"Possible Corruption: \" + Family.VAROPT.getMaxPreLongs() + \" preLongs but no items in R region\");\r\n        }\r\n    }\r\n    final int preLongBytes = numPreLongs << 3;\r\n    final int totalItems = hCount + rCount;\r\n    int allocatedItems = k + 1;\r\n    if (rCount == 0) {\r\n        final int ceilingLgK = Util.toLog2(Util.ceilingPowerOf2(k), \"heapify\");\r\n        final int minLgSize = Util.toLog2(Util.ceilingPowerOf2(hCount), \"heapify\");\r\n        final int initialLgSize = SamplingUtil.startingSubMultiple(ceilingLgK, rf.lg(), Math.max(minLgSize, MIN_LG_ARR_ITEMS));\r\n        allocatedItems = SamplingUtil.getAdjustedSize(k, 1 << initialLgSize);\r\n        if (allocatedItems == k) {\r\n            ++allocatedItems;\r\n        }\r\n    }\r\n    final long weightOffsetBytes = TOTAL_WEIGHT_R_DOUBLE + (rCount > 0 ? Double.BYTES : 0);\r\n    final ArrayList<Double> weightList = new ArrayList(allocatedItems);\r\n    final double[] wts = new double[allocatedItems];\r\n    srcMem.getDoubleArray(weightOffsetBytes, wts, 0, hCount);\r\n    for (int i = 0; i < hCount; ++i) {\r\n        if (wts[i] <= 0.0) {\r\n            throw new SketchesArgumentException(\"Possible Corruption: \" + \"Non-positive weight in heapify(): \" + wts[i]);\r\n        }\r\n        weightList.add(wts[i]);\r\n    }\r\n    long markBytes = 0;\r\n    int markCount = 0;\r\n    ArrayList<Boolean> markList = null;\r\n    if (isGadget) {\r\n        final long markOffsetBytes = preLongBytes + ((long) hCount * Double.BYTES);\r\n        markBytes = ArrayOfBooleansSerDe.computeBytesNeeded(hCount);\r\n        markList = new ArrayList(allocatedItems);\r\n        final ArrayOfBooleansSerDe booleansSerDe = new ArrayOfBooleansSerDe();\r\n        final Boolean[] markArray = booleansSerDe.deserializeFromMemory(srcMem.region(markOffsetBytes, (hCount >>> 3) + 1), hCount);\r\n        for (Boolean mark : markArray) {\r\n            if (mark) {\r\n                ++markCount;\r\n            }\r\n        }\r\n        markList.addAll(Arrays.asList(markArray));\r\n    }\r\n    final long offsetBytes = preLongBytes + ((long) hCount * Double.BYTES) + markBytes;\r\n    final T[] data = serDe.deserializeFromMemory(srcMem.region(offsetBytes, srcMem.getCapacity() - offsetBytes), totalItems);\r\n    final List<T> wrappedData = Arrays.asList(data);\r\n    final ArrayList<T> dataList = new ArrayList(allocatedItems);\r\n    dataList.addAll(wrappedData.subList(0, hCount));\r\n    if (rCount > 0) {\r\n        weightList.add(-1.0);\r\n        if (isGadget) {\r\n            markList.add(false);\r\n        }\r\n        for (int i = 0; i < rCount; ++i) {\r\n            weightList.add(-1.0);\r\n            if (isGadget) {\r\n                markList.add(false);\r\n            }\r\n        }\r\n        dataList.add(null);\r\n        dataList.addAll(wrappedData.subList(hCount, totalItems));\r\n    }\r\n    final VarOptItemsSketch<T> sketch = new VarOptItemsSketch(dataList, weightList, k, n, allocatedItems, rf, hCount, rCount, totalRWeight);\r\n    if (isGadget) {\r\n        sketch.marks_ = markList;\r\n        sketch.numMarksInH_ = markCount;\r\n    }\r\n    return sketch;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedFormTag.doStartTag",
	"Comment": "overriding to allow the chance to set the details of the system, sothat dynamic includes can be possible",
	"Method": "int doStartTag(){\r\n    int temp = super.doStartTag();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    originalNesting = NestedPropertyHelper.getCurrentProperty(request);\r\n    originalNestingName = NestedPropertyHelper.getCurrentName(request, this);\r\n    NestedPropertyHelper.setProperty(request, null);\r\n    NestedPropertyHelper.setName(request, super.getBeanName());\r\n    return temp;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.DefinitionTagSupport.setControllerType",
	"Comment": "set associated controller type.type denotes a fully qualified classname.",
	"Method": "void setControllerType(String controllerType){\r\n    this.controllerType = controllerType;\r\n}"
}, {
	"Path": "org.apache.struts.util.TestPropertyMessageResources.testJstlMode",
	"Comment": "test jstl compatible propertymessageresources behaviour",
	"Method": "void testJstlMode(){\r\n    Locale.setDefault(Locale.US);\r\n    MessageResources resources = createMessageResources(FOO_RESOURCES, true, \"JSTL\");\r\n    assertEquals(\"key.lang FRANCE\", \"LANG default\", resources.getMessage(Locale.FRANCE, \"key.lang\"));\r\n    assertEquals(\"key.lang English\", \"LANG en\", resources.getMessage(Locale.ENGLISH, \"key.lang\"));\r\n    assertEquals(\"key.lang US\", \"LANG en\", resources.getMessage(Locale.US, \"key.lang\"));\r\n    assertEquals(\"key.lang ITALY\", \"LANG default\", resources.getMessage(Locale.ITALY, \"key.lang\"));\r\n    assertEquals(\"key.lang German\", \"LANG de\", resources.getMessage(Locale.GERMAN, \"key.lang\"));\r\n    assertEquals(\"key.lang GERMANY\", \"LANG de\", resources.getMessage(Locale.GERMANY, \"key.lang\"));\r\n    assertEquals(\"key.country FRANCE\", \"COUNTRY default\", resources.getMessage(Locale.FRANCE, \"key.country\"));\r\n    assertEquals(\"key.country English\", \"COUNTRY default\", resources.getMessage(Locale.ENGLISH, \"key.country\"));\r\n    assertEquals(\"key.country US\", \"COUNTRY en_US\", resources.getMessage(Locale.US, \"key.country\"));\r\n    assertEquals(\"key.country ITALY\", \"COUNTRY default\", resources.getMessage(Locale.ITALY, \"key.country\"));\r\n    assertEquals(\"key.country German\", \"COUNTRY default\", resources.getMessage(Locale.GERMAN, \"key.country\"));\r\n    assertEquals(\"key.country GERMANY\", \"COUNTRY de_DE\", resources.getMessage(Locale.GERMANY, \"key.country\"));\r\n    assertEquals(\"Wrong Locale en only\", null, resources.getMessage(Locale.GERMAN, \"key.en\"));\r\n    assertEquals(\"Wrong Locale en_US only\", null, resources.getMessage(Locale.GERMANY, \"key.en_US\"));\r\n    commonTests(resources);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilStrutsImpl.getDefinitionsFactory",
	"Comment": "get definition factory for the module attached to the specified moduleconfig.",
	"Method": "DefinitionsFactory getDefinitionsFactory(ServletContext servletContext,ModuleConfig moduleConfig){\r\n    return (DefinitionsFactory) servletContext.getAttribute(DEFINITIONS_FACTORY);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGModule.getLexicon",
	"Comment": "retrieves the lexicon currently being used by this module.",
	"Method": "Lexicon getLexicon(){\r\n    return this.lexicon;\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionFormClass.createDynaActionFormClass",
	"Comment": "return the dynaactionformclass instance for the specifiedform bean configuration instance.",
	"Method": "DynaActionFormClass createDynaActionFormClass(FormBeanConfig config){\r\n    return config.getDynaActionFormClass();\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.handleRequest",
	"Comment": "parses the input stream and partitions the parsed items into a setof form fields and a set of file items. in the process, the parseditems are translated from commons fileupload fileiteminstances to struts formfile instances.",
	"Method": "void handleRequest(HttpServletRequest request){\r\n    ModuleConfig ac = (ModuleConfig) request.getAttribute(Globals.MODULE_KEY);\r\n    DiskFileUpload upload = new DiskFileUpload();\r\n    upload.setHeaderEncoding(request.getCharacterEncoding());\r\n    upload.setSizeMax(getSizeMax(ac));\r\n    upload.setSizeThreshold((int) getSizeThreshold(ac));\r\n    upload.setRepositoryPath(getRepositoryPath(ac));\r\n    elementsText = new Hashtable();\r\n    elementsFile = new Hashtable();\r\n    elementsAll = new Hashtable();\r\n    List items = null;\r\n    try {\r\n        items = upload.parseRequest(request);\r\n    } catch (DiskFileUpload.SizeLimitExceededException e) {\r\n        request.setAttribute(MultipartRequestHandler.ATTRIBUTE_MAX_LENGTH_EXCEEDED, Boolean.TRUE);\r\n        return;\r\n    } catch (FileUploadException e) {\r\n        log.error(\"Failed to parse multipart request\", e);\r\n        throw new ServletException(e);\r\n    }\r\n    Iterator iter = items.iterator();\r\n    while (iter.hasNext()) {\r\n        FileItem item = (FileItem) iter.next();\r\n        if (item.isFormField()) {\r\n            addTextParameter(request, item);\r\n        } else {\r\n            addFileParameter(item);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "simplenlg.syntax.english.CoordinationTest.testNegationFeature",
	"Comment": "check that the negation feature on a child of a coordinate phrase remains\tas set, unless explicitly set otherwise at the parent level.",
	"Method": "void testNegationFeature(){\r\n    SPhraseSpec s1 = this.phraseFactory.createClause(\"he\", \"have\", \"asthma\");\r\n    SPhraseSpec s2 = this.phraseFactory.createClause(\"he\", \"have\", \"diabetes\");\r\n    s1.setFeature(Feature.NEGATED, true);\r\n    CoordinatedPhraseElement coord = this.phraseFactory.createCoordinatedPhrase(s1, s2);\r\n    String realisation = this.realiser.realise(coord).getRealisation();\r\n    System.out.println(realisation);\r\n    Assert.assertEquals(\"he does not have asthma and he has diabetes\", realisation);\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketch.getQuantileLowerBound",
	"Comment": "gets the lower bound of the value interval in which the true quantile of the given rankexists with a confidence of at least 99%.",
	"Method": "float getQuantileLowerBound(double fraction){\r\n    return getQuantile(max(0, fraction - getNormalizedRankError(minK_, false)));\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcSketch.getUpperBound",
	"Comment": "returns the best estimate of the upper bound of the confidence interval given kappa,the number of standard deviations from the mean.",
	"Method": "double getUpperBound(int kappa){\r\n    if (mergeFlag) {\r\n        return CpcConfidence.getIconConfidenceUB(lgK, numCoupons, kappa);\r\n    }\r\n    return CpcConfidence.getHipConfidenceUB(lgK, numCoupons, hipEstAccum, kappa);\r\n}"
}, {
	"Path": "simplenlg.framework.NLGFactory.createEnumeratedList",
	"Comment": "creates a new section element with the given title and adds the given\tcomponent.",
	"Method": "DocumentElement createEnumeratedList(DocumentElement createEnumeratedList,List<DocumentElement> textComponents,DocumentElement createEnumeratedList,NLGElement component){\r\n    DocumentElement list = new DocumentElement(DocumentCategory.ENUMERATED_LIST, null);\r\n    list.addComponent(component);\r\n    return list;\r\n}"
}, {
	"Path": "org.apache.struts.action.DynaActionForm.setDynaActionFormClass",
	"Comment": "set the dynaactionformclass instance with which we areassociated.",
	"Method": "void setDynaActionFormClass(DynaActionFormClass dynaClass){\r\n    this.dynaClass = dynaClass;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.downSample",
	"Comment": "from an existing sketch, this creates a new sketch that can have a smaller value of k.the original sketch is not modified.",
	"Method": "ItemsSketch<T> downSample(int newK){\r\n    final ItemsSketch<T> newSketch = ItemsSketch.getInstance(newK, comparator_);\r\n    ItemsMergeImpl.downSamplingMergeInto(this, newSketch);\r\n    return newSketch;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.handleConfigException",
	"Comment": "simplifies exception handling in the parsemoduleconfigfilemethod.",
	"Method": "void handleConfigException(String path,Exception e){\r\n    String msg = internal.getMessage(\"configParse\", path);\r\n    log.error(msg, e);\r\n    throw new UnavailableException(msg);\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesUnion.heapify",
	"Comment": "returns a heap union object that has been initialized with the data from the given memoryimage of a sketch.",
	"Method": "DoublesUnion heapify(DoublesSketch sketch,DoublesUnion heapify,Memory srcMem){\r\n    return DoublesUnionImpl.heapifyInstance(srcMem);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.ComponentDefinition.getAttributes",
	"Comment": "access method for the attributes property.if there is no attributes, return an empty map.",
	"Method": "Map getAttributes(){\r\n    return attributes;\r\n}"
}, {
	"Path": "simplenlg.framework.InflectedWordElement.getBaseForm",
	"Comment": "retrieves the base form for this element. the base form is the originally\tsupplied word.",
	"Method": "String getBaseForm(){\r\n    return getFeatureAsString(LexicalFeature.BASE_FORM);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedSubmitTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotMatchTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.ExecuteCommand.getCommand",
	"Comment": "retrieve the specified command from the specified catalog.",
	"Method": "Command getCommand(ActionContext context,Command getCommand,String commandName,String catalogName){\r\n    if (commandName == null) {\r\n        return null;\r\n    }\r\n    Catalog catalog;\r\n    if (catalogName != null) {\r\n        catalog = CatalogFactory.getInstance().getCatalog(catalogName);\r\n        if (catalog == null) {\r\n            LOG.warn(\"When looking up \" + commandName + \",\" + \" no catalog found under \" + catalogName);\r\n            return null;\r\n        }\r\n    } else {\r\n        catalogName = \"the default catalog\";\r\n        catalog = CatalogFactory.getInstance().getCatalog();\r\n        if (catalog == null) {\r\n            LOG.warn(\"When looking up \" + commandName + \",\" + \" no default catalog found.\");\r\n            return null;\r\n        }\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"looking up command \" + commandName + \" in \" + catalogName);\r\n    }\r\n    return catalog.getCommand(commandName);\r\n}"
}, {
	"Path": "org.apache.struts.validator.TestValidWhen.doParseFail",
	"Comment": "parse the expression and check that an exception is throw. failes if noexpection is thrown.",
	"Method": "void doParseFail(String test,Object bean,int index,String property){\r\n    try {\r\n        boolean result = doParse(test, bean, index, property);\r\n        fail(\"Parsing \" + test + \" didn't throw exception as expected \" + result);\r\n    } catch (Exception expected) {\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedMessagesTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesSketchBuilder.toString",
	"Comment": "creates a human readable string that describes the current configuration of this builder.",
	"Method": "String toString(){\r\n    final StringBuilder sb = new StringBuilder();\r\n    sb.append(\"QuantileSketchBuilder configuration:\").append(LS);\r\n    sb.append(\"K     : \").append(TAB).append(bK).append(LS);\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateByte",
	"Comment": "checks if the field can safely be converted to a byte primitive.",
	"Method": "Object validateByte(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    result = GenericTypeValidator.formatByte(value);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedLessEqualTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptionsBuilder.withInputFile",
	"Comment": "sets the name of the input file. it is important to note that theinput encoding should be available at this point.",
	"Method": "OutputOptionsBuilder withInputFile(Path inputFile){\r\n    requireNonNull(inputFile, \"No input file provided\");\r\n    inputResource = new FileInputResource(inputFile);\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.getSharedCurrentBytes",
	"Comment": "returns the number of storage bytes required for this sketch in its current state.",
	"Method": "int getSharedCurrentBytes(boolean compact){\r\n    return getCurrentBytes(compact);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.Intersection.update",
	"Comment": "updates the internal set by intersecting it with the given sketch",
	"Method": "void update(Sketch<S> sketchIn){\r\n    final boolean isFirstCall = isFirstCall_;\r\n    isFirstCall_ = false;\r\n    if (sketchIn == null) {\r\n        isEmpty_ = true;\r\n        sketch_ = null;\r\n        return;\r\n    }\r\n    theta_ = min(theta_, sketchIn.getThetaLong());\r\n    isEmpty_ |= sketchIn.isEmpty();\r\n    if (isEmpty_ || (sketchIn.getRetainedEntries() == 0)) {\r\n        sketch_ = null;\r\n        return;\r\n    }\r\n    if (isFirstCall) {\r\n        sketch_ = new QuickSelectSketch(sketchIn.getRetainedEntries(), ResizeFactor.X1.lg(), null);\r\n        final SketchIterator<S> it = sketchIn.iterator();\r\n        while (it.next()) {\r\n            final S summary = it.getSummary().copy();\r\n            sketch_.insert(it.getKey(), summary);\r\n        }\r\n    } else {\r\n        if (sketch_ == null) {\r\n            return;\r\n        }\r\n        final int matchSize = min(sketch_.getRetainedEntries(), sketchIn.getRetainedEntries());\r\n        final long[] matchKeys = new long[matchSize];\r\n        S[] matchSummaries = null;\r\n        int matchCount = 0;\r\n        final SketchIterator<S> it = sketchIn.iterator();\r\n        while (it.next()) {\r\n            final S summary = sketch_.find(it.getKey());\r\n            if (summary != null) {\r\n                matchKeys[matchCount] = it.getKey();\r\n                if (matchSummaries == null) {\r\n                    matchSummaries = (S[]) Array.newInstance(summary.getClass(), matchSize);\r\n                }\r\n                matchSummaries[matchCount] = summarySetOps_.intersection(summary, it.getSummary());\r\n                matchCount++;\r\n            }\r\n        }\r\n        sketch_ = null;\r\n        if (matchCount > 0) {\r\n            sketch_ = new QuickSelectSketch(matchCount, ResizeFactor.X1.lg(), null);\r\n            for (int i = 0; i < matchCount; i++) {\r\n                sketch_.insert(matchKeys[i], matchSummaries[i]);\r\n            }\r\n        }\r\n    }\r\n    if (sketch_ != null) {\r\n        sketch_.setThetaLong(theta_);\r\n        sketch_.setNotEmpty();\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.LongsSketch.merge",
	"Comment": "this function merges the other sketch into this one.the other sketch may be of a different size.",
	"Method": "LongsSketch merge(LongsSketch other){\r\n    if (other == null) {\r\n        return this;\r\n    }\r\n    if (other.isEmpty()) {\r\n        return this;\r\n    }\r\n    final long streamLen = streamLength + other.streamLength;\r\n    final ReversePurgeLongHashMap.Iterator iter = other.hashMap.iterator();\r\n    while (iter.next()) {\r\n        this.update(iter.getKey(), iter.getValue());\r\n    }\r\n    offset += other.offset;\r\n    streamLength = streamLen;\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentHeapQuickSelectSketch.rebuildShared",
	"Comment": "rebuilds the hash table to remove dirty values or to reduce the sizeto nominal entries.",
	"Method": "UpdateSketch rebuildShared(){\r\n    rebuild();\r\n    updateEstimationSnapshot();\r\n    return this;\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptions.openNewInputReader",
	"Comment": "gets the input reader. if the input resource is null, first set itto a value based off the output format value.",
	"Method": "Reader openNewInputReader(){\r\n    return inputResource.openNewInputReader(inputEncodingCharset);\r\n}"
}, {
	"Path": "simplenlg.lexicon.NIHDBLexicon.notEmpty",
	"Comment": "convenience method to test that a list is not null and not empty",
	"Method": "boolean notEmpty(List<?> list){\r\n    return list != null && !list.isEmpty();\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperationBuilder.setP",
	"Comment": "sets the upfront uniform sampling probability, p. although this functionality isimplemented for unions only, it rarely makes sense to use it. the proper use of upfrontsampling is when building the sketches.",
	"Method": "SetOperationBuilder setP(float p){\r\n    if ((p <= 0.0) || (p > 1.0)) {\r\n        throw new SketchesArgumentException(\"p must be > 0 and <= 1.0: \" + p);\r\n    }\r\n    bP = p;\r\n    return this;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DirectUpdateDoublesSketchR.checkDirectMemCapacity",
	"Comment": "checks the validity of the direct memory capacity assuming n, k.",
	"Method": "void checkDirectMemCapacity(int k,long n,long memCapBytes){\r\n    final int reqBufBytes = getUpdatableStorageBytes(k, n);\r\n    if (memCapBytes < reqBufBytes) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Memory capacity too small: \" + memCapBytes + \" < \" + reqBufBytes);\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.DirectCompactUnorderedSketch.wrapInstance",
	"Comment": "wraps the given memory, which must be a server 3, unordered, compact sketch image.must check the validity of the memory before calling.",
	"Method": "DirectCompactUnorderedSketch wrapInstance(Memory srcMem,long seed){\r\n    final short memSeedHash = srcMem.getShort(SEED_HASH_SHORT);\r\n    final short computedSeedHash = computeSeedHash(seed);\r\n    checkSeedHashes(memSeedHash, computedSeedHash);\r\n    return new DirectCompactUnorderedSketch(srcMem);\r\n}"
}, {
	"Path": "simplenlg.lexicon.NIHDBLexicon.getSimplenlgInflection",
	"Comment": "convert an inflection type in nih lexicon into one used by simplenlg\treturn null if no simplenlg equivalent to nih inflection type",
	"Method": "String getSimplenlgInflection(String NIHInflection){\r\n    if (NIHInflection == null)\r\n        return null;\r\n    else if (NIHInflection.equalsIgnoreCase(\"comparative\"))\r\n        return LexicalFeature.COMPARATIVE;\r\n    else if (NIHInflection.equalsIgnoreCase(\"superlative\"))\r\n        return LexicalFeature.SUPERLATIVE;\r\n    else if (NIHInflection.equalsIgnoreCase(\"plural\"))\r\n        return LexicalFeature.PLURAL;\r\n    else if (NIHInflection.equalsIgnoreCase(\"pres3s\"))\r\n        return LexicalFeature.PRESENT3S;\r\n    else if (NIHInflection.equalsIgnoreCase(\"past\"))\r\n        return LexicalFeature.PAST;\r\n    else if (NIHInflection.equalsIgnoreCase(\"pastPart\"))\r\n        return LexicalFeature.PAST_PARTICIPLE;\r\n    else if (NIHInflection.equalsIgnoreCase(\"presPart\"))\r\n        return LexicalFeature.PRESENT_PARTICIPLE;\r\n    else\r\n        return null;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.PutTag.getRealValue",
	"Comment": "get real value according to tag attribute.real value is the value computed after attribute processing.",
	"Method": "Object getRealValue(){\r\n    if (realValue == null) {\r\n        computeRealValue();\r\n    }\r\n    return realValue;\r\n}"
}, {
	"Path": "schemacrawler.tools.options.OutputOptionsBuilder.withCompressedOutputFile",
	"Comment": "sets the name of the output file for compressed output. it isimportant to note that the output encoding should be available atthis point.",
	"Method": "OutputOptionsBuilder withCompressedOutputFile(Path outputFile){\r\n    requireNonNull(outputFile, \"No output file provided\");\r\n    outputResource = new CompressedFileOutputResource(outputFile, SCHEMACRAWLER_DATA);\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionMessages.get",
	"Comment": "return the set of messages related to a specific property. if thereare no such messages, an empty enumeration is returned.",
	"Method": "Iterator get(Iterator get,String property){\r\n    this.accessed = true;\r\n    ActionMessageItem item = (ActionMessageItem) messages.get(property);\r\n    if (item == null) {\r\n        return (Collections.EMPTY_LIST.iterator());\r\n    } else {\r\n        return (item.getList().iterator());\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.validator.FieldChecks.validateIntegerLocale",
	"Comment": "checks if the field can safely be converted to an int primitive.",
	"Method": "Object validateIntegerLocale(Object bean,ValidatorAction va,Field field,ActionMessages errors,Validator validator,HttpServletRequest request){\r\n    Object result = null;\r\n    String value = null;\r\n    value = evaluateBean(bean, field);\r\n    if (GenericValidator.isBlankOrNull(value)) {\r\n        return Boolean.TRUE;\r\n    }\r\n    Locale locale = RequestUtils.getUserLocale(request, null);\r\n    result = GenericTypeValidator.formatInt(value, locale);\r\n    if (result == null) {\r\n        errors.add(field.getKey(), Resources.getActionMessage(validator, request, va, field));\r\n    }\r\n    return (result == null) ? Boolean.FALSE : result;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.getKFromEpsilon",
	"Comment": "gets the approximate value of k to use given epsilon, the normalized rank error.",
	"Method": "int getKFromEpsilon(double epsilon,boolean pmf){\r\n    return Util.getKFromEpsilon(epsilon, pmf);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.SetOperation.getMaxUnionBytes",
	"Comment": "returns the maximum required storage bytes given a nomentries parameter for union operations",
	"Method": "int getMaxUnionBytes(int nomEntries){\r\n    final int nomEnt = ceilingPowerOf2(nomEntries);\r\n    return (nomEnt << 4) + (Family.UNION.getMaxPreLongs() << 3);\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.TouchImageView.isZoomed",
	"Comment": "returns false if image is in initial, unzoomed state. false, otherwise.",
	"Method": "boolean isZoomed(){\r\n    return normalizedScale != 1;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.NotEqualTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(-1, +1));\r\n}"
}, {
	"Path": "actions.SendingMessages.sendDirectMessageToAUserTheHardWay",
	"Comment": "this method shows how to send a direct message to a user, but this time it shows how it can be done using thedirect message channels",
	"Method": "void sendDirectMessageToAUserTheHardWay(SlackSession session){\r\n    SlackUser user = session.findUserByUserName(\"killroy\");\r\n    SlackMessageHandle<SlackChannelReply> reply = session.openDirectMessageChannel(user);\r\n    SlackChannel channel = reply.getReply().getSlackChannel();\r\n    session.sendMessage(channel, \"Hi, how are you\", null);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.HeapAlphaSketch.setHashTableThreshold",
	"Comment": "returns the cardinality limit given the current size of the hash table array.",
	"Method": "int setHashTableThreshold(int lgNomLongs,int lgArrLongs){\r\n    final double fraction = (lgArrLongs <= lgNomLongs) ? RESIZE_THRESHOLD : REBUILD_THRESHOLD;\r\n    return (int) Math.floor(fraction * (1 << lgArrLongs));\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesSetOperationBuilder.setNumberOfValues",
	"Comment": "this is to set the number of double values associated with each key",
	"Method": "ArrayOfDoublesSetOperationBuilder setNumberOfValues(int numValues){\r\n    numValues_ = numValues;\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.JavascriptValidatorTag.doStartTag",
	"Comment": "render the javascript for to perform validations based on the formname.",
	"Method": "int doStartTag(){\r\n    JspWriter writer = pageContext.getOut();\r\n    try {\r\n        writer.print(this.renderJavascript());\r\n    } catch (IOException e) {\r\n        throw new JspException(e.getMessage());\r\n    }\r\n    return EVAL_BODY_TAG;\r\n}"
}, {
	"Path": "org.apache.struts.config.ConfigHelper.setRequest",
	"Comment": "set the request associated with this object. session object is alsoset or cleared.",
	"Method": "void setRequest(HttpServletRequest request){\r\n    this.request = request;\r\n    if (this.request == null) {\r\n        setSession(null);\r\n    } else {\r\n        setSession(this.request.getSession());\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.util.TokenProcessor.toHex",
	"Comment": "convert a byte array to a string of hexadecimal digits and return it.",
	"Method": "String toHex(byte[] buffer){\r\n    StringBuffer sb = new StringBuffer(buffer.length * 2);\r\n    for (int i = 0; i < buffer.length; i++) {\r\n        sb.append(Character.forDigit((buffer[i] & 0xf0) >> 4, 16));\r\n        sb.append(Character.forDigit(buffer[i] & 0x0f, 16));\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.StrutsTag.doStartTag",
	"Comment": "retrieve the required configuration object and expose it as a scriptingvariable.",
	"Method": "int doStartTag(){\r\n    int n = 0;\r\n    if (formBean != null) {\r\n        n++;\r\n    }\r\n    if (forward != null) {\r\n        n++;\r\n    }\r\n    if (mapping != null) {\r\n        n++;\r\n    }\r\n    if (n != 1) {\r\n        JspException e = new JspException(messages.getMessage(\"struts.selector\"));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    ModuleConfig config = TagUtils.getInstance().getModuleConfig(pageContext);\r\n    Object object = null;\r\n    String selector = null;\r\n    if (formBean != null) {\r\n        selector = formBean;\r\n        object = config.findFormBeanConfig(formBean);\r\n    } else if (forward != null) {\r\n        selector = forward;\r\n        object = config.findForwardConfig(forward);\r\n    } else if (mapping != null) {\r\n        selector = mapping;\r\n        object = config.findActionConfig(mapping);\r\n    }\r\n    if (object == null) {\r\n        JspException e = new JspException(messages.getMessage(\"struts.missing\", selector));\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw e;\r\n    }\r\n    pageContext.setAttribute(id, object);\r\n    return (SKIP_BODY);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.FormTag.lookup",
	"Comment": "look up values for the name, scope, andtype properties if necessary.",
	"Method": "void lookup(){\r\n    moduleConfig = TagUtils.getInstance().getModuleConfig(pageContext);\r\n    if (moduleConfig == null) {\r\n        JspException e = new JspException(messages.getMessage(\"formTag.collections\"));\r\n        pageContext.setAttribute(Globals.EXCEPTION_KEY, e, PageContext.REQUEST_SCOPE);\r\n        throw e;\r\n    }\r\n    String calcAction = this.action;\r\n    if (this.action == null) {\r\n        HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n        postbackAction = (String) request.getAttribute(Globals.ORIGINAL_URI_KEY);\r\n        String prefix = moduleConfig.getPrefix();\r\n        if (postbackAction != null && prefix.length() > 0 && postbackAction.startsWith(prefix)) {\r\n            postbackAction = postbackAction.substring(prefix.length());\r\n        }\r\n        calcAction = postbackAction;\r\n    } else {\r\n        ActionConfig actionConfig = moduleConfig.findActionConfigId(this.action);\r\n        if (actionConfig != null) {\r\n            this.action = actionConfig.getPath();\r\n            calcAction = this.action;\r\n        }\r\n    }\r\n    servlet = (ActionServlet) pageContext.getServletContext().getAttribute(Globals.ACTION_SERVLET_KEY);\r\n    String mappingName = TagUtils.getInstance().getActionMappingName(calcAction);\r\n    mapping = (ActionMapping) moduleConfig.findActionConfig(mappingName);\r\n    if (mapping == null) {\r\n        JspException e = new JspException(messages.getMessage(\"formTag.mapping\", mappingName));\r\n        pageContext.setAttribute(Globals.EXCEPTION_KEY, e, PageContext.REQUEST_SCOPE);\r\n        throw e;\r\n    }\r\n    FormBeanConfig formBeanConfig = moduleConfig.findFormBeanConfig(mapping.getName());\r\n    if (formBeanConfig == null) {\r\n        JspException e = null;\r\n        if (mapping.getName() == null) {\r\n            e = new JspException(messages.getMessage(\"formTag.name\", calcAction));\r\n        } else {\r\n            e = new JspException(messages.getMessage(\"formTag.formBean\", mapping.getName(), calcAction));\r\n        }\r\n        pageContext.setAttribute(Globals.EXCEPTION_KEY, e, PageContext.REQUEST_SCOPE);\r\n        throw e;\r\n    }\r\n    beanName = mapping.getAttribute();\r\n    beanScope = mapping.getScope();\r\n    beanType = formBeanConfig.getType();\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedHiddenTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "simplenlg.aggregation.PhraseChecker.sameVP",
	"Comment": "check that the sentences supplied have identical verb phrases",
	"Method": "boolean sameVP(NLGElement sentences){\r\n    boolean equal = sentences.length >= 2;\r\n    for (int i = 1; i < sentences.length && equal; i++) {\r\n        equal = sentences[i - 1].getFeatureAsElement(InternalFeature.VERB_PHRASE).equals(sentences[i].getFeatureAsElement(InternalFeature.VERB_PHRASE));\r\n    }\r\n    return equal;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.VerbPhraseHelper.determineNumber",
	"Comment": "determines the number agreement for the phrase ensuring that any number\tagreement on the parent element is inherited by the phrase.",
	"Method": "NumberAgreement determineNumber(NLGElement parent,PhraseElement phrase){\r\n    Object numberValue = phrase.getFeature(Feature.NUMBER);\r\n    NumberAgreement number = null;\r\n    if (numberValue != null && numberValue instanceof NumberAgreement) {\r\n        number = (NumberAgreement) numberValue;\r\n    } else {\r\n        number = NumberAgreement.SINGULAR;\r\n    }\r\n    if (parent instanceof PhraseElement) {\r\n        if (parent.isA(PhraseCategory.CLAUSE) && (PhraseHelper.isExpletiveSubject((PhraseElement) parent) || InterrogativeType.WHO_SUBJECT.equals(parent.getFeature(Feature.INTERROGATIVE_TYPE)) || InterrogativeType.WHAT_SUBJECT.equals(parent.getFeature(Feature.INTERROGATIVE_TYPE))) && isCopular(phrase.getHead())) {\r\n            if (hasPluralComplement(phrase.getFeatureAsElementList(InternalFeature.COMPLEMENTS))) {\r\n                number = NumberAgreement.PLURAL;\r\n            } else {\r\n                number = NumberAgreement.SINGULAR;\r\n            }\r\n        }\r\n    }\r\n    return number;\r\n}"
}, {
	"Path": "org.apache.struts.config.ActionConfig.setParameter",
	"Comment": "general purpose configuration parameter that can be used to passextra information to the action instance selected by this action.struts does not itself use this value in any way.",
	"Method": "void setParameter(String parameter){\r\n    if (configured) {\r\n        throw new IllegalStateException(\"Configuration is frozen\");\r\n    }\r\n    this.parameter = parameter;\r\n}"
}, {
	"Path": "org.apache.struts.upload.CommonsMultipartRequestHandler.getMapping",
	"Comment": "retrieves the action mapping with which this handler is associated.",
	"Method": "ActionMapping getMapping(){\r\n    return this.mapping;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotEqualTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionMessages.isEmpty",
	"Comment": "return true if there are no messages recorded in thiscollection, or false otherwise.",
	"Method": "boolean isEmpty(){\r\n    return (messages.isEmpty());\r\n}"
}, {
	"Path": "com.njlabs.showjava.utils.TouchImageView.getCurrentZoom",
	"Comment": "get the current zoom. this is the zoom relative to the initialscale, not the original resource.",
	"Method": "float getCurrentZoom(){\r\n    return normalizedScale;\r\n}"
}, {
	"Path": "com.yahoo.sketches.hll.BaseHllSketch.toString",
	"Comment": "human readable summary with optional detail. does not list empty entries.",
	"Method": "String toString(String toString,boolean summary,boolean detail,boolean auxDetail,String toString,boolean summary,boolean detail,boolean auxDetail,boolean all){\r\n    return toString(summary, detail, auxDetail, false);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUpdatableSketchBuilder.build",
	"Comment": "returns an arrayofdoublesupdatablesketch with the current configuration of this builder.",
	"Method": "ArrayOfDoublesUpdatableSketch build(ArrayOfDoublesUpdatableSketch build,WritableMemory dstMem){\r\n    return new DirectArrayOfDoublesQuickSelectSketch(nomEntries_, resizeFactor_.lg(), samplingProbability_, numValues_, seed_, dstMem);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.bean.NestedWriteTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsSketch.copy",
	"Comment": "used during union operations to ensure we do not overwrite an existing reservoir. creates ashallow copy of the reservoir.",
	"Method": "ReservoirItemsSketch<T> copy(){\r\n    return new ReservoirItemsSketch(reservoirSize_, currItemsAlloc_, itemsSeen_, rf_, (ArrayList<T>) data_.clone());\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedImgTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "simplenlg.syntax.english.ClauseTest.testTenses",
	"Comment": "tests for setting tense, aspect and passive from the sentence interface.",
	"Method": "void testTenses(){\r\n    this.s3.setFeature(Feature.TENSE, Tense.PAST);\r\n    // $NON-NLS-1$\r\n    Assert.assertEquals(\"the man gave the woman John's flower\", this.realiser.realise(this.s3).getRealisation());\r\n    this.s3.setFeature(Feature.PERFECT, true);\r\n    // $NON-NLS-1$\r\n    Assert.assertEquals(\"the man had given the woman John's flower\", this.realiser.realise(this.s3).getRealisation());\r\n    this.s3.setFeature(Feature.NEGATED, true);\r\n    // $NON-NLS-1$\r\n    Assert.assertEquals(\"the man had not given the woman John's flower\", this.realiser.realise(this.s3).getRealisation());\r\n    this.s3.setFeature(Feature.PROGRESSIVE, true);\r\n    Assert.assertEquals(\"the man had not been giving the woman John's flower\", this.realiser.realise(this.s3).getRealisation());\r\n    this.s3.setFeature(Feature.PASSIVE, true);\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcWrapper.getFamily",
	"Comment": "return the datasketches identifier for this cpc family of sketches.",
	"Method": "Family getFamily(){\r\n    return Family.CPC;\r\n}"
}, {
	"Path": "org.apache.struts.util.RequestUtils.getUserLocale",
	"Comment": "look up and return current user locale, based on the specifiedparameters.",
	"Method": "Locale getUserLocale(HttpServletRequest request,String locale){\r\n    Locale userLocale = null;\r\n    HttpSession session = request.getSession(false);\r\n    if (locale == null) {\r\n        locale = Globals.LOCALE_KEY;\r\n    }\r\n    if (session != null) {\r\n        userLocale = (Locale) session.getAttribute(locale);\r\n    }\r\n    if (userLocale == null) {\r\n        userLocale = request.getLocale();\r\n    }\r\n    return userLocale;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.xmlDefinition.XmlParser.parse",
	"Comment": "parse input reader and add encountered definitions to definitions set.",
	"Method": "void parse(InputStream in,XmlDefinitionsSet definitions){\r\n    try {\r\n        digester.push(definitions);\r\n        digester.parse(in);\r\n        in.close();\r\n    } catch (SAXException e) {\r\n        throw e;\r\n    }\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.Util.checkHeapFlags",
	"Comment": "checks just the flags field of the preamble. allowed flags are read only, empty, compact, andordered.",
	"Method": "void checkHeapFlags(int flags){\r\n    final int allowedFlags = READ_ONLY_FLAG_MASK | EMPTY_FLAG_MASK | COMPACT_FLAG_MASK | ORDERED_FLAG_MASK;\r\n    final int flagsMask = ~allowedFlags;\r\n    if ((flags & flagsMask) > 0) {\r\n        throw new SketchesArgumentException(\"Possible corruption: Invalid flags field: \" + Integer.toBinaryString(flags));\r\n    }\r\n}"
}, {
	"Path": "org.sonar.java.model.AbstractTypedTree.isTypeSet",
	"Comment": "this method is intended for internal use only during semantic analysis.",
	"Method": "boolean isTypeSet(){\r\n    return type != null;\r\n}"
}, {
	"Path": "org.jf.util.SparseArray.ensureCapacity",
	"Comment": "increases the size of the underlying storage if needed, to ensure that it canhold the specified number of items without having to allocate additional memory",
	"Method": "void ensureCapacity(int capacity){\r\n    if (mGarbage && mSize >= mKeys.length) {\r\n        gc();\r\n    }\r\n    if (mKeys.length < capacity) {\r\n        int[] nkeys = new int[capacity];\r\n        Object[] nvalues = new Object[capacity];\r\n        System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);\r\n        System.arraycopy(mValues, 0, nvalues, 0, mValues.length);\r\n        mKeys = nkeys;\r\n        mValues = nvalues;\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedMessagesPresentTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    return i;\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.ReservoirItemsUnion.reset",
	"Comment": "resets this union. maxk remains intact, otherwise reverts back to its virgin state.",
	"Method": "void reset(){\r\n    gadget_.reset();\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentThetaBuilder.setSharedNominalEntries",
	"Comment": "sets the nominal entries for the concurrent shared sketch. the minimum value is 16 and themaximum value is 67,108,864, which is 2^26. be aware that sketches as large as this maximumvalue have not been thoroughly tested or characterized for performance.",
	"Method": "ConcurrentThetaBuilder setSharedNominalEntries(int nomEntries){\r\n    bSharedLgNomLongs = Integer.numberOfTrailingZeros(ceilingPowerOf2(nomEntries));\r\n    if ((bSharedLgNomLongs > MAX_LG_NOM_LONGS) || (bSharedLgNomLongs < MIN_LG_NOM_LONGS)) {\r\n        throw new SketchesArgumentException(\"Nominal Entries must be >= 16 and <= 67108864: \" + nomEntries);\r\n    }\r\n    return this;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.getModuleConfig",
	"Comment": "return the specified moduleconfig object for the given prefix if itexists, otherwise a nullpointerexception will be thrown.",
	"Method": "ModuleConfig getModuleConfig(PageContext pageContext,ModuleConfig getModuleConfig,String module,PageContext pageContext){\r\n    ModuleConfig config = ModuleUtils.getInstance().getModuleConfig(module, (HttpServletRequest) pageContext.getRequest(), pageContext.getServletContext());\r\n    if (config == null) {\r\n        throw new NullPointerException(\"Module '\" + module + \"' not found.\");\r\n    }\r\n    return config;\r\n}"
}, {
	"Path": "jadx.core.utils.BlockUtils.skipSyntheticSuccessor",
	"Comment": "return successor of synthetic block or same block otherwise.",
	"Method": "BlockNode skipSyntheticSuccessor(BlockNode block){\r\n    if (block.isSynthetic() && block.getSuccessors().size() == 1) {\r\n        return block.getSuccessors().get(0);\r\n    }\r\n    return block;\r\n}"
}, {
	"Path": "org.sonar.java.resolve.TypeVariableJavaType.erasure",
	"Comment": "erasure of a type variable is the erasure of its leftmost bound.",
	"Method": "JavaType erasure(){\r\n    return bounds.get(0).erasure();\r\n}"
}, {
	"Path": "net.csdn.common.logging.log4j.ConsoleAppender.setFollow",
	"Comment": "sets whether the appender honors reassignments of system.outor system.err made after configuration.",
	"Method": "void setFollow(boolean newValue){\r\n    follow = newValue;\r\n}"
}, {
	"Path": "simplenlg.syntax.english.PhraseHelper.realiseComplements",
	"Comment": "realises the complements of the phrase adding and where\tappropriate.",
	"Method": "void realiseComplements(SyntaxProcessor parent,PhraseElement phrase,ListElement realisedElement){\r\n    boolean firstProcessed = false;\r\n    NLGElement currentElement = null;\r\n    for (NLGElement complement : phrase.getFeatureAsElementList(InternalFeature.COMPLEMENTS)) {\r\n        currentElement = parent.realise(complement);\r\n        if (currentElement != null) {\r\n            currentElement.setFeature(InternalFeature.DISCOURSE_FUNCTION, DiscourseFunction.COMPLEMENT);\r\n            if (firstProcessed) {\r\n                realisedElement.addComponent(new // $NON-NLS-1$\r\n                InflectedWordElement(\"and\", LexicalCategory.CONJUNCTION));\r\n            } else {\r\n                firstProcessed = true;\r\n            }\r\n            realisedElement.addComponent(currentElement);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "schemacrawler.utility.SchemaCrawlerUtility.matchSchemaRetrievalOptions",
	"Comment": "returns database specific options using an existing schemacrawlerdatabase plugin.",
	"Method": "SchemaRetrievalOptions matchSchemaRetrievalOptions(Connection connection){\r\n    final SchemaRetrievalOptionsBuilder schemaRetrievalOptionsBuilder = buildSchemaRetrievalOptions(connection);\r\n    final SchemaRetrievalOptions schemaRetrievalOptions = schemaRetrievalOptionsBuilder.toOptions();\r\n    return schemaRetrievalOptions;\r\n}"
}, {
	"Path": "org.apache.struts.action.RequestProcessor.internalModuleRelativeInclude",
	"Comment": "do a module relative include to specified uri using requestdispatcher. uri is relative to the current module. the real uri iscompute by prefixing the module name. this method is usedinternally and is not part of the public api. it is advised to not useit in subclasses.",
	"Method": "void internalModuleRelativeInclude(String uri,HttpServletRequest request,HttpServletResponse response){\r\n    uri = moduleConfig.getPrefix() + uri;\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\" Delegating via include to '\" + uri + \"'\");\r\n    }\r\n    doInclude(uri, request, response);\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.util.TagUtils.saveException",
	"Comment": "save the specified exception as a request attribute for later use.",
	"Method": "void saveException(PageContext pageContext,Throwable exception){\r\n    pageContext.setAttribute(Globals.EXCEPTION_KEY, exception, PageContext.REQUEST_SCOPE);\r\n}"
}, {
	"Path": "simplenlg.framework.PhraseElement.getPostModifiers",
	"Comment": "retrieves the current list of post modifiers for the phrase.",
	"Method": "List<NLGElement> getPostModifiers(){\r\n    return getFeatureAsElementList(InternalFeature.POSTMODIFIERS);\r\n}"
}, {
	"Path": "org.apache.struts.config.FormBeanConfig.getDynaActionFormClass",
	"Comment": "return the dynaactionformclass associated with adynaactionform.",
	"Method": "DynaActionFormClass getDynaActionFormClass(){\r\n    if (dynamic == false) {\r\n        throw new IllegalArgumentException(\"ActionForm is not dynamic\");\r\n    }\r\n    synchronized (lock) {\r\n        if (dynaActionFormClass == null) {\r\n            dynaActionFormClass = new DynaActionFormClass(this);\r\n        }\r\n    }\r\n    return dynaActionFormClass;\r\n}"
}, {
	"Path": "simplenlg.framework.DocumentElement.removeComponent",
	"Comment": "removes the specified component from the list of child components.",
	"Method": "boolean removeComponent(NLGElement textComponent){\r\n    boolean removed = false;\r\n    if (textComponent != null) {\r\n        List<NLGElement> components = getComponents();\r\n        if (components != null) {\r\n            removed = components.remove(textComponent);\r\n        }\r\n    }\r\n    return removed;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.Rebuilder.quickSelectAndRebuild",
	"Comment": "rebuild the hashtable in the given memory at its current size. changes theta and thus count.this assumes a memory preamble of standard form with correct values of curcount and thetalong.thetalong and curcount will change.afterwards, caller must update local class members curcount and thetalong from memory.",
	"Method": "void quickSelectAndRebuild(WritableMemory mem,int preambleLongs,int lgNomLongs){\r\n    final int lgArrLongs = extractLgArrLongs(mem);\r\n    final int curCount = extractCurCount(mem);\r\n    final int arrLongs = 1 << lgArrLongs;\r\n    final long[] tmpArr = new long[arrLongs];\r\n    final int preBytes = preambleLongs << 3;\r\n    mem.getLongArray(preBytes, tmpArr, 0, arrLongs);\r\n    final int pivot = (1 << lgNomLongs) + 1;\r\n    final long newThetaLong = selectExcludingZeros(tmpArr, curCount, pivot);\r\n    insertThetaLong(mem, newThetaLong);\r\n    final long[] tgtArr = new long[arrLongs];\r\n    final int newCurCount = HashOperations.hashArrayInsert(tmpArr, tgtArr, lgArrLongs, newThetaLong);\r\n    insertCurCount(mem, newCurCount);\r\n    mem.putLongArray(preBytes, tgtArr, 0, arrLongs);\r\n}"
}, {
	"Path": "simplenlg.syntax.english.PhraseHelper.isExpletiveSubject",
	"Comment": "determines if the given phrase has an expletive as a subject.",
	"Method": "boolean isExpletiveSubject(PhraseElement phrase){\r\n    List<NLGElement> subjects = phrase.getFeatureAsElementList(InternalFeature.SUBJECTS);\r\n    boolean expletive = false;\r\n    if (subjects.size() == 1) {\r\n        NLGElement subjectNP = subjects.get(0);\r\n        if (subjectNP.isA(PhraseCategory.NOUN_PHRASE)) {\r\n            expletive = subjectNP.getFeatureAsBoolean(LexicalFeature.EXPLETIVE_SUBJECT).booleanValue();\r\n        } else if (subjectNP.isA(PhraseCategory.CANNED_TEXT)) {\r\n            expletive = // $NON-NLS-1$\r\n            \"there\".equalsIgnoreCase(subjectNP.getRealisation());\r\n        }\r\n    }\r\n    return expletive;\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.DoublesUnionBuilder.heapify",
	"Comment": "returns a heap union object that has been initialized with the data from the given memoryimage of a sketch.",
	"Method": "DoublesUnion heapify(DoublesSketch sketch,DoublesUnion heapify,Memory srcMem){\r\n    return DoublesUnionImpl.heapifyInstance(srcMem);\r\n}"
}, {
	"Path": "org.apache.struts.util.MessageResources.setReturnNull",
	"Comment": "indicates that a null is returned instead of an errormessage string if an unknown locale or key is requested.",
	"Method": "void setReturnNull(boolean returnNull){\r\n    this.returnNull = returnNull;\r\n}"
}, {
	"Path": "events.ListeningToMessageEvents.registeringAListener",
	"Comment": "this method shows how to register a listener on a slacksession",
	"Method": "void registeringAListener(SlackSession session){\r\n    SlackMessagePostedListener messagePostedListener = new SlackMessagePostedListener() {\r\n        @Override\r\n        public void onEvent(SlackMessagePosted event, SlackSession session) {\r\n            SlackChannel channelOnWhichMessageWasPosted = event.getChannel();\r\n            String messageContent = event.getMessageContent();\r\n            SlackUser messageSender = event.getSender();\r\n        }\r\n    };\r\n    session.addMessagePostedListener(messagePostedListener);\r\n}"
}, {
	"Path": "events.ListeningToMessageEvents.registeringAListener",
	"Comment": "this method shows how to register a listener on a slacksession",
	"Method": "void registeringAListener(SlackSession session){\r\n    SlackChannel channelOnWhichMessageWasPosted = event.getChannel();\r\n    String messageContent = event.getMessageContent();\r\n    SlackUser messageSender = event.getSender();\r\n}"
}, {
	"Path": "org.apache.struts.mock.MockMultipartRequestHandler.setMapping",
	"Comment": "convienience method to set a reference to a mockactionmapping instance.",
	"Method": "void setMapping(ActionMapping mapping){\r\n    this.mapping = mapping;\r\n}"
}, {
	"Path": "com.yahoo.sketches.BoundsOnRatiosInThetaSketchedSets.getLowerBoundForBoverA",
	"Comment": "gets the approximate lower bound for b over a based on a 95% confidence interval",
	"Method": "double getLowerBoundForBoverA(Sketch sketchA,Sketch sketchB){\r\n    final double thetaA = sketchA.getTheta();\r\n    final double thetaB = sketchB.getTheta();\r\n    checkThetas(thetaA, thetaB);\r\n    final int countB = sketchB.getRetainedEntries(true);\r\n    final int countA = (thetaB == thetaA) ? sketchA.getRetainedEntries(true) : sketchA.getCountLessThanTheta(thetaB);\r\n    if (countA <= 0) {\r\n        return 0;\r\n    }\r\n    return BoundsOnRatiosInSampledSets.getLowerBoundForBoverA(countA, countB, thetaB);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.html.LinkTag.calculateURL",
	"Comment": "return the complete url to which this hyperlink will direct the user.support for indexed property since struts 1.1",
	"Method": "String calculateURL(){\r\n    Map params = TagUtils.getInstance().computeParameters(pageContext, paramId, paramName, paramProperty, paramScope, name, property, scope, transaction);\r\n    if (!this.parameters.isEmpty()) {\r\n        if (params == null) {\r\n            params = new HashMap();\r\n        }\r\n        params.putAll(this.parameters);\r\n    }\r\n    if (indexed) {\r\n        int indexValue = getIndexValue();\r\n        if (params == null) {\r\n            params = new HashMap();\r\n        }\r\n        if (indexId != null) {\r\n            params.put(indexId, Integer.toString(indexValue));\r\n        } else {\r\n            params.put(\"index\", Integer.toString(indexValue));\r\n        }\r\n    }\r\n    String url = null;\r\n    try {\r\n        url = TagUtils.getInstance().computeURLWithCharEncoding(pageContext, forward, href, page, action, module, params, anchor, false, useLocalEncoding);\r\n    } catch (MalformedURLException e) {\r\n        TagUtils.getInstance().saveException(pageContext, e);\r\n        throw new JspException(messages.getMessage(\"rewrite.url\", e.toString()));\r\n    }\r\n    return (url);\r\n}"
}, {
	"Path": "com.yahoo.sketches.kll.KllFloatsSketch.compressWhileUpdating",
	"Comment": "it cannot be used while merging, while reducing k, or anything else.",
	"Method": "void compressWhileUpdating(){\r\n    final int level = findLevelToCompact();\r\n    if (level == (numLevels_ - 1)) {\r\n        addEmptyTopLevelToCompletelyFullSketch();\r\n    }\r\n    final int rawBeg = levels_[level];\r\n    final int rawLim = levels_[level + 1];\r\n    final int popAbove = levels_[level + 2] - rawLim;\r\n    final int rawPop = rawLim - rawBeg;\r\n    final boolean oddPop = KllHelper.isOdd(rawPop);\r\n    final int adjBeg = oddPop ? rawBeg + 1 : rawBeg;\r\n    final int adjPop = oddPop ? rawPop - 1 : rawPop;\r\n    final int halfAdjPop = adjPop / 2;\r\n    if (level == 0) {\r\n        Arrays.sort(items_, adjBeg, adjBeg + adjPop);\r\n    }\r\n    if (popAbove == 0) {\r\n        KllHelper.randomlyHalveUp(items_, adjBeg, adjPop);\r\n    } else {\r\n        KllHelper.randomlyHalveDown(items_, adjBeg, adjPop);\r\n        KllHelper.mergeSortedArrays(items_, adjBeg, halfAdjPop, items_, rawLim, popAbove, items_, adjBeg + halfAdjPop);\r\n    }\r\n    levels_[level + 1] -= halfAdjPop;\r\n    if (oddPop) {\r\n        levels_[level] = levels_[level + 1] - 1;\r\n        items_[levels_[level]] = items_[rawBeg];\r\n    } else {\r\n        levels_[level] = levels_[level + 1];\r\n    }\r\n    assert levels_[level] == (rawBeg + halfAdjPop);\r\n    if (level > 0) {\r\n        final int amount = rawBeg - levels_[0];\r\n        System.arraycopy(items_, levels_[0], items_, levels_[0] + halfAdjPop, amount);\r\n        for (int lvl = 0; lvl < level; lvl++) {\r\n            levels_[lvl] += halfAdjPop;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.PresentTag.isBeanPresent",
	"Comment": "returns true if the bean given in the name attribute isfound.",
	"Method": "boolean isBeanPresent(){\r\n    Object value = null;\r\n    try {\r\n        if (this.property != null) {\r\n            value = TagUtils.getInstance().lookup(pageContext, name, this.property, scope);\r\n        } else {\r\n            value = TagUtils.getInstance().lookup(pageContext, name, scope);\r\n        }\r\n    } catch (JspException e) {\r\n        value = null;\r\n    }\r\n    return (value != null);\r\n}"
}, {
	"Path": "org.apache.struts.action.TestActionServlet.testProcessForwardConfigClassOverriddenSubConfigClass",
	"Comment": "test the case where the subconfig has already specified its own configclass.if the code still attempts to create a new instance, an errorwill be thrown.",
	"Method": "void testProcessForwardConfigClassOverriddenSubConfigClass(){\r\n    moduleConfig.addForwardConfig(baseForward);\r\n    ForwardConfig customSub = new CustomForwardConfigArg(\"failure\", \"/failure.jsp\");\r\n    customSub.setExtends(\"success\");\r\n    moduleConfig.addForwardConfig(customSub);\r\n    try {\r\n        actionServlet.processForwardConfigClass(customSub, moduleConfig, null);\r\n    } catch (Exception e) {\r\n        fail(\"Exception should not be thrown\");\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedNotEqualTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.sampling.SamplingUtil.getAdjustedSize",
	"Comment": "checks if target sampling allocation is more than 50% of max sampling size. if so, returnsmax sampling size, otherwise passes through the target size.",
	"Method": "int getAdjustedSize(int maxSize,int resizeTarget){\r\n    if (maxSize - (resizeTarget << 1) < 0L) {\r\n        return maxSize;\r\n    }\r\n    return resizeTarget;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.logic.NestedPresentTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalName = getName();\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "org.sonar.java.resolve.Resolve.isInnerSubClass",
	"Comment": "is given class a subclass of given base class, or an inner class of a subclass?",
	"Method": "boolean isInnerSubClass(JavaSymbol.TypeJavaSymbol c,JavaSymbol base){\r\n    while (c != null && isSubClass(c, base)) {\r\n        c = c.owner().enclosingClass();\r\n    }\r\n    return c != null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.ConcurrentDirectThetaSketch.updateEstimationSnapshot",
	"Comment": "updates the estimation of the number of unique entries by capturing a snapshot of the sketchdata, namely, volatile theta and the num of valid entries in the sketch",
	"Method": "void updateEstimationSnapshot(){\r\n    volatileEstimate_ = getEstimate();\r\n}"
}, {
	"Path": "simplenlg.syntax.english.StringElementTest.nullAndEmptyStringElementTest",
	"Comment": "tests that no empty space is added when a stringelement is instantiated with an empty string\tor null object.",
	"Method": "void nullAndEmptyStringElementTest(){\r\n    NLGElement nullStringElement = this.phraseFactory.createStringElement(null);\r\n    NLGElement emptyStringElement = this.phraseFactory.createStringElement(\"\");\r\n    NLGElement beautiful = this.phraseFactory.createStringElement(\"beautiful\");\r\n    NLGElement horseLike = this.phraseFactory.createStringElement(\"horse-like\");\r\n    NLGElement creature = this.phraseFactory.createStringElement(\"creature\");\r\n    SPhraseSpec test1 = this.phraseFactory.createClause(\"a unicorn\", \"be\", \"regarded as a\");\r\n    test1.addPostModifier(emptyStringElement);\r\n    test1.addPostModifier(beautiful);\r\n    test1.addPostModifier(horseLike);\r\n    test1.addPostModifier(creature);\r\n    System.out.println(realiser.realiseSentence(test1));\r\n    Assert.assertEquals(\"A unicorn is regarded as a beautiful horse-like creature.\", realiser.realiseSentence(test1));\r\n    SPhraseSpec test2 = this.phraseFactory.createClause(\"a unicorn\", \"be\", \"regarded as a\");\r\n    test2.addPostModifier(beautiful);\r\n    test2.addPostModifier(horseLike);\r\n    test2.addPostModifier(creature);\r\n    test2.addPostModifier(nullStringElement);\r\n    System.out.println(realiser.realiseSentence(test2));\r\n    Assert.assertEquals(\"A unicorn is regarded as a beautiful horse-like creature.\", realiser.realiseSentence(test2));\r\n    SPhraseSpec test3 = this.phraseFactory.createClause(\"a unicorn\", \"be\", \"regarded as a\");\r\n    test3.addPostModifier(\"beautiful\");\r\n    test3.addPostModifier(\"horse-like\");\r\n    test3.addPostModifier(\"\");\r\n    test3.addPostModifier(\"creature\");\r\n    System.out.println(realiser.realiseSentence(test3));\r\n    Assert.assertEquals(\"A unicorn is regarded as a beautiful horse-like creature.\", realiser.realiseSentence(test3));\r\n    SPhraseSpec test4 = this.phraseFactory.createClause(\"a unicorn\", \"be\", \"regarded as a\");\r\n    test4.addPostModifier(\"\");\r\n    test4.addPostModifier(\"beautiful\");\r\n    test4.addPostModifier(\"horse-like\");\r\n    test4.addPostModifier(nullStringElement);\r\n    test4.addPostModifier(\"creature\");\r\n    System.out.println(realiser.realiseSentence(test4));\r\n    Assert.assertEquals(\"A unicorn is regarded as a beautiful horse-like creature.\", realiser.realiseSentence(test4));\r\n}"
}, {
	"Path": "org.apache.struts.action.ActionServlet.isValidating",
	"Comment": "check the status of the validating initializationparameter.",
	"Method": "boolean isValidating(){\r\n    boolean validating = true;\r\n    String value = getServletConfig().getInitParameter(\"validating\");\r\n    if (\"false\".equalsIgnoreCase(value) || \"no\".equalsIgnoreCase(value) || \"n\".equalsIgnoreCase(value) || \"0\".equalsIgnoreCase(value)) {\r\n        validating = false;\r\n    }\r\n    return validating;\r\n}"
}, {
	"Path": "org.apache.struts.chain.commands.AbstractSelectAction.execute",
	"Comment": "cache the actionconfig instance for the action to beused for processing this request.",
	"Method": "boolean execute(ActionContext actionCtx){\r\n    String path = getPath(actionCtx);\r\n    ModuleConfig moduleConfig = actionCtx.getModuleConfig();\r\n    ActionConfig actionConfig = moduleConfig.findActionConfig(path);\r\n    if (actionConfig == null) {\r\n        ActionConfig[] configs = moduleConfig.findActionConfigs();\r\n        for (int i = 0; i < configs.length; i++) {\r\n            if (configs[i].getUnknown()) {\r\n                actionConfig = configs[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (actionConfig == null) {\r\n        throw new InvalidPathException(\"No action config found for the specified url.\", path);\r\n    }\r\n    actionCtx.setActionConfig(actionConfig);\r\n    return (false);\r\n}"
}, {
	"Path": "org.apache.struts.validator.ValidatorPlugIn.destroy",
	"Comment": "gracefully shut down, releasing any resources that were allocated atinitialization.",
	"Method": "void destroy(){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Destroying ValidatorPlugin\");\r\n    }\r\n    servlet = null;\r\n    config = null;\r\n    destroyResources();\r\n}"
}, {
	"Path": "org.apache.struts.config.BaseConfig.inheritProperties",
	"Comment": "compare the properties of this config with that of the given andcopy those that are not present.this method is used by subclassesthat support configuration inheritance.",
	"Method": "void inheritProperties(BaseConfig baseConfig){\r\n    throwIfConfigured();\r\n    Properties baseProperties = baseConfig.getProperties();\r\n    Enumeration keys = baseProperties.propertyNames();\r\n    while (keys.hasMoreElements()) {\r\n        String key = (String) keys.nextElement();\r\n        String value = this.getProperty(key);\r\n        if (value == null) {\r\n            value = baseProperties.getProperty(key);\r\n            setProperty(key, value);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.tiles.TilesUtilImpl.doForward",
	"Comment": "do a forward using request dispatcher.this method is used by the tiles package anytime a forward is required.",
	"Method": "void doForward(String uri,HttpServletRequest request,HttpServletResponse response,ServletContext servletContext){\r\n    request.getRequestDispatcher(uri).forward(request, response);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.ParameterTei.getVariableInfo",
	"Comment": "return information about the scripting variables to be created.",
	"Method": "VariableInfo[] getVariableInfo(TagData data){\r\n    String className = null;\r\n    if (data.getAttribute(\"multiple\") == null) {\r\n        className = \"java.lang.String\";\r\n    } else {\r\n        className = \"java.lang.String[]\";\r\n    }\r\n    return new VariableInfo[] { new VariableInfo(data.getAttributeString(\"id\"), className, true, VariableInfo.AT_BEGIN) };\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedImageTag.doStartTag",
	"Comment": "overriding method of the heart of the matter. gets the relativeproperty and leaves the rest up to the original tag implementation.sweet.",
	"Method": "int doStartTag(){\r\n    originalProperty = getProperty();\r\n    HttpServletRequest request = (HttpServletRequest) pageContext.getRequest();\r\n    NestedPropertyHelper.setNestedProperties(request, this);\r\n    return super.doStartTag();\r\n}"
}, {
	"Path": "com.yahoo.sketches.quantiles.ItemsSketch.reset",
	"Comment": "resets this sketch to a virgin state, but retains the original value of k.",
	"Method": "void reset(){\r\n    n_ = 0;\r\n    combinedBufferItemCapacity_ = 2 * Math.min(DoublesSketch.MIN_K, k_);\r\n    combinedBuffer_ = new Object[combinedBufferItemCapacity_];\r\n    baseBufferCount_ = 0;\r\n    bitPattern_ = 0;\r\n    minValue_ = null;\r\n    maxValue_ = null;\r\n}"
}, {
	"Path": "com.yahoo.sketches.cpc.CpcSketch.getFamily",
	"Comment": "return the datasketches identifier for this cpc family of sketches.",
	"Method": "Family getFamily(){\r\n    return Family.CPC;\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.DirectQuickSelectSketchR.readOnlyWrap",
	"Comment": "wrap a sketch around the given source memory containing sketch data that originated fromthis sketch.",
	"Method": "DirectQuickSelectSketchR readOnlyWrap(Memory srcMem,long seed){\r\n    final int preambleLongs = extractPreLongs(srcMem);\r\n    final int lgNomLongs = extractLgNomLongs(srcMem);\r\n    final int lgArrLongs = extractLgArrLongs(srcMem);\r\n    UpdateSketch.checkUnionQuickSelectFamily(srcMem, preambleLongs, lgNomLongs);\r\n    checkMemIntegrity(srcMem, seed, preambleLongs, lgNomLongs, lgArrLongs);\r\n    final DirectQuickSelectSketchR dqssr = new DirectQuickSelectSketchR(seed, (WritableMemory) srcMem);\r\n    dqssr.hashTableThreshold_ = setHashTableThreshold(lgNomLongs, lgArrLongs);\r\n    return dqssr;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.NestedPropertyHelper.setNestedProperties",
	"Comment": "helper method that will set all the relevant nesting properties for theprovided tag reference depending on the implementation.",
	"Method": "void setNestedProperties(HttpServletRequest request,NestedPropertySupport tag){\r\n    boolean adjustProperty = true;\r\n    if (tag instanceof NestedNameSupport) {\r\n        NestedNameSupport nameTag = (NestedNameSupport) tag;\r\n        if ((nameTag.getName() == null) || Constants.BEAN_KEY.equals(nameTag.getName())) {\r\n            nameTag.setName(getCurrentName(request, (NestedNameSupport) tag));\r\n        } else {\r\n            adjustProperty = false;\r\n        }\r\n    }\r\n    String property = tag.getProperty();\r\n    if (adjustProperty) {\r\n        property = getAdjustedProperty(request, property);\r\n    }\r\n    tag.setProperty(property);\r\n}"
}, {
	"Path": "org.apache.struts.taglib.logic.EqualTag.condition",
	"Comment": "evaluate the condition that is being tested by this particular tag, andreturn true if the nested body content of this tag shouldbe evaluated, or false if it should be skipped. thismethod must be implemented by concrete subclasses.",
	"Method": "boolean condition(){\r\n    return (condition(0, 0));\r\n}"
}, {
	"Path": "org.jf.dexlib2.analysis.ClassProto.isInterface",
	"Comment": "returns true if this class is an interface.if this class is not defined, then this will throw an unresolvedclassexception",
	"Method": "boolean isInterface(){\r\n    ClassDef classDef = getClassDef();\r\n    return (classDef.getAccessFlags() & AccessFlags.INTERFACE.getValue()) != 0;\r\n}"
}, {
	"Path": "com.yahoo.sketches.frequencies.ReversePurgeItemHashMap.adjustOrPutValue",
	"Comment": "increments the value mapped to the key if the key is present in the map. otherwise,the key is inserted with the putamount.",
	"Method": "void adjustOrPutValue(T key,long adjustAmount){\r\n    final int arrayMask = keys.length - 1;\r\n    int probe = (int) hash(key.hashCode()) & arrayMask;\r\n    int drift = 1;\r\n    while (states[probe] != 0 && !keys[probe].equals(key)) {\r\n        probe = (probe + 1) & arrayMask;\r\n        drift++;\r\n        assert (drift < DRIFT_LIMIT) : \"drift: \" + drift + \" >= DRIFT_LIMIT\";\r\n    }\r\n    if (states[probe] == 0) {\r\n        assert (numActive <= loadThreshold) : \"numActive: \" + numActive + \" > loadThreshold: \" + loadThreshold;\r\n        keys[probe] = key;\r\n        values[probe] = adjustAmount;\r\n        states[probe] = (short) drift;\r\n        numActive++;\r\n    } else {\r\n        assert (keys[probe].equals(key));\r\n        values[probe] += adjustAmount;\r\n    }\r\n}"
}, {
	"Path": "org.apache.struts.taglib.bean.HeaderTag.doStartTag",
	"Comment": "retrieve the required property and expose it as a scripting variable.",
	"Method": "int doStartTag(){\r\n    if (this.multiple == null) {\r\n        this.handleSingleHeader();\r\n    } else {\r\n        this.handleMultipleHeaders();\r\n    }\r\n    return SKIP_BODY;\r\n}"
}, {
	"Path": "org.apache.struts.tiles.taglib.InsertTag.doEndTag",
	"Comment": "process the end tag by including the template.simply call the handler doendtag",
	"Method": "int doEndTag(int doEndTag,int doEndTag,int doEndTag){\r\n    if (!processEndTag) {\r\n        releaseInternal();\r\n        return EVAL_PAGE;\r\n    }\r\n    int res = tagHandler.doEndTag();\r\n    releaseInternal();\r\n    return res;\r\n}"
}, {
	"Path": "simplenlg.framework.NLGElement.getFeatureAsElementList",
	"Comment": "retrieves the value of the feature as a list of elements. if the feature\tis a single nlgelement then it is wrapped in a list. if the\tfeature is a collection then each object in the collection\tis checked and only nlgelements are returned in the list.\tif the feature does not exist then an empty list is returned.",
	"Method": "List<NLGElement> getFeatureAsElementList(String featureName){\r\n    List<NLGElement> list = new ArrayList<NLGElement>();\r\n    Object value = getFeature(featureName);\r\n    if (value instanceof NLGElement) {\r\n        list.add((NLGElement) value);\r\n    } else if (value instanceof Collection<?>) {\r\n        Iterator<?> iterator = ((Collection<?>) value).iterator();\r\n        Object nextObject = null;\r\n        while (iterator.hasNext()) {\r\n            nextObject = iterator.next();\r\n            if (nextObject instanceof NLGElement) {\r\n                list.add((NLGElement) nextObject);\r\n            }\r\n        }\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.nested.html.NestedOptionsTag.doEndTag",
	"Comment": "complete the processing of the tag. the nested tags here will restoreall the original value for the tag itself and the nesting context.",
	"Method": "int doEndTag(){\r\n    int i = super.doEndTag();\r\n    setName(originalName);\r\n    setProperty(originalProperty);\r\n    setLabelProperty(originalLabelProperty);\r\n    return i;\r\n}"
}, {
	"Path": "org.apache.struts.taglib.TagUtils.filter",
	"Comment": "filter the specified string for characters that are senstive to htmlinterpreters, returning the string with these characters replaced bythe corresponding character entities.",
	"Method": "String filter(String value){\r\n    return ResponseUtils.filter(value);\r\n}"
}, {
	"Path": "com.yahoo.sketches.tuple.ArrayOfDoublesUnion.wrap",
	"Comment": "wrap the given writablememory and seed as an arrayofdoublesunion",
	"Method": "ArrayOfDoublesUnion wrap(Memory mem,ArrayOfDoublesUnion wrap,Memory mem,long seed,ArrayOfDoublesUnion wrap,WritableMemory mem,ArrayOfDoublesUnion wrap,WritableMemory mem,long seed){\r\n    return wrapUnionImpl(mem, seed, true);\r\n}"
}, {
	"Path": "com.yahoo.sketches.theta.HeapAlphaSketch.heapifyInstance",
	"Comment": "heapify a sketch from a memory object containing sketch data.",
	"Method": "HeapAlphaSketch heapifyInstance(Memory srcMem,long seed){\r\n    final int preambleLongs = extractPreLongs(srcMem);\r\n    final int lgNomLongs = extractLgNomLongs(srcMem);\r\n    final int lgArrLongs = extractLgArrLongs(srcMem);\r\n    checkAlphaFamily(srcMem, preambleLongs, lgNomLongs);\r\n    checkMemIntegrity(srcMem, seed, preambleLongs, lgNomLongs, lgArrLongs);\r\n    final float p = extractP(srcMem);\r\n    final int lgRF = extractLgResizeFactor(srcMem);\r\n    final ResizeFactor myRF = ResizeFactor.getRF(lgRF);\r\n    final double nomLongs = (1L << lgNomLongs);\r\n    final double alpha = nomLongs / (nomLongs + 1.0);\r\n    final long split1 = (long) (((p * (alpha + 1.0)) / 2.0) * MAX_THETA_LONG_AS_DOUBLE);\r\n    if ((myRF == ResizeFactor.X1) && (lgArrLongs != Util.startingSubMultiple(lgNomLongs + 1, myRF, MIN_LG_ARR_LONGS))) {\r\n        throw new SketchesArgumentException(\"Possible corruption: ResizeFactor X1, but provided \" + \"array too small for sketch size\");\r\n    }\r\n    final HeapAlphaSketch has = new HeapAlphaSketch(lgNomLongs, seed, p, myRF, alpha, split1);\r\n    has.lgArrLongs_ = lgArrLongs;\r\n    has.hashTableThreshold_ = setHashTableThreshold(lgNomLongs, lgArrLongs);\r\n    has.curCount_ = extractCurCount(srcMem);\r\n    has.thetaLong_ = extractThetaLong(srcMem);\r\n    has.empty_ = PreambleUtil.isEmpty(srcMem);\r\n    has.cache_ = new long[1 << lgArrLongs];\r\n    srcMem.getLongArray(preambleLongs << 3, has.cache_, 0, 1 << lgArrLongs);\r\n    return has;\r\n}"
}]