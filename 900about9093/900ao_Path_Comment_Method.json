[{
	"Path": "org.sakaiproject.tool.impl.RebuildBreakdownServiceImpl.handleMySessionSpecialKey",
	"Comment": "performs any special processing for keys found in the session cache.these keys couldbe attributes of the session itself, or objects like toolsessions or contextsessions",
	"Method": "boolean handleMySessionSpecialKey(MySession s,String key,Serializable object){\r\n    if (object != null) {\r\n        if (SESSION_USER_ID_KEY.equals(key)) {\r\n            s.setUserId((String) object);\r\n            return true;\r\n        } else if (SESSION_USER_EID_KEY.equals(key)) {\r\n            s.setUserEid((String) object);\r\n            return true;\r\n        } else if (SESSION_CREATION_TIME_KEY.equals(key)) {\r\n            if (object instanceof Long) {\r\n                s.m_created = (Long) object;\r\n            }\r\n        } else if (SESSION_LAST_ACCESSED_TIME_KEY.equals(key)) {\r\n            if (object instanceof Long) {\r\n                s.m_accessed = (Long) object;\r\n            }\r\n        } else if (SESSION_TOOL_SESSIONS_KEY.equals(key)) {\r\n            if (isObjectMap(object)) {\r\n                rebuildToolSessions(s, (Map<String, Serializable>) object);\r\n            }\r\n            return true;\r\n        } else if (SESSION_CONTEXT_SESSIONS_KEY.equals(key)) {\r\n            if (isObjectMap(object)) {\r\n                rebuildContextSessions(s, (Map<String, Serializable>) object);\r\n            }\r\n            return true;\r\n        } else if (SESSION_CURRENT_TOOLSESSION_PLACEMENT_KEY.equals(key)) {\r\n            return true;\r\n        } else if (sessionAttributeBlacklist.contains(key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionAreaBean.getAutoMarkThreadsRead",
	"Comment": "returns whether or not the forum automatically marks messages in topics as read.",
	"Method": "String getAutoMarkThreadsRead(){\r\n    log.debug(\"getAutoMarkThreadsRead()\");\r\n    if (area == null || area.getAutoMarkThreadsRead() == null || !area.getAutoMarkThreadsRead()) {\r\n        return Boolean.FALSE.toString();\r\n    } else {\r\n        return Boolean.TRUE.toString();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.message.util.BaseMessage.channelReference",
	"Comment": "access the internal reference which can be used to access the channel from within the system.",
	"Method": "String channelReference(String context,String id){\r\n    return getAccessPoint(true) + Entity.SEPARATOR + REF_TYPE_CHANNEL + Entity.SEPARATOR + context + Entity.SEPARATOR + id;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.stats.CourseGradeStatistics.calculateStatistics",
	"Comment": "calculates stats based on the calculated course grade values, excluding any empty grades",
	"Method": "DescriptiveStatistics calculateStatistics(){\r\n    final List<Double> grades = this.courseGradeMap.values().stream().filter(c -> StringUtils.isNotBlank(c.getMappedGrade())).map(c -> NumberUtils.toDouble(c.getCalculatedGrade())).collect(Collectors.toList());\r\n    final DescriptiveStatistics stats = new DescriptiveStatistics();\r\n    grades.forEach(g -> stats.addValue(g));\r\n    return stats;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.JForumEntity.findObject",
	"Comment": "objectid is titles of category, forum, topic. find the topic and return a string with its id",
	"Method": "String findObject(String objectid,Map<String, String> objectMap,String siteid){\r\n    if (!haveJforum || !objectid.startsWith(\"jforum_topic/\")) {\r\n        if (nextEntity != null)\r\n            return nextEntity.findObject(objectid, objectMap, siteid);\r\n        else\r\n            return null;\r\n    }\r\n    Site site = null;\r\n    try {\r\n        site = SiteService.getSite(siteid);\r\n    } catch (Exception impossible) {\r\n        return null;\r\n    }\r\n    ToolConfiguration siteTool = site.getToolForCommonId(\"sakai.jforum.tool\");\r\n    if (siteTool == null)\r\n        return null;\r\n    int i = objectid.indexOf(\"\\n\");\r\n    if (i <= 0)\r\n        return null;\r\n    final String category = objectid.substring(\"jforum_topic/\".length(), i);\r\n    int j = objectid.indexOf(\"\\n\", i + 1);\r\n    if (j <= 0)\r\n        return null;\r\n    final String forum = objectid.substring(i + 1, j);\r\n    final String topic = objectid.substring(j + 1);\r\n    List<LessonEntity> ret = new ArrayList<LessonEntity>();\r\n    String sql = \"select b.categories_id, b.title from jforum_sakai_course_categories a, jforum_categories b where a.course_id=? and a.categories_id = b.categories_id order by b.display_order\";\r\n    Object[] fields = new Object[1];\r\n    fields[0] = siteid;\r\n    List<Integer> categories = SqlService.dbRead(sql, fields, new SqlReader() {\r\n        public Object readSqlResultRecord(ResultSet result) {\r\n            try {\r\n                if (result.getString(2).equals(category))\r\n                    return result.getInt(1);\r\n            } catch (Exception ignore) {\r\n            }\r\n            ;\r\n            return null;\r\n        }\r\n    });\r\n    if (categories == null || categories.size() < 1)\r\n        return null;\r\n    List<Integer> forums = null;\r\n    for (Integer c : categories) {\r\n        if (c != null) {\r\n            sql = \"select forum_id,forum_name from jforum_forums where categories_id = ? order by forum_order\";\r\n            fields[0] = c;\r\n            forums = SqlService.dbRead(sql, fields, new SqlReader() {\r\n                public Object readSqlResultRecord(ResultSet result) {\r\n                    try {\r\n                        if (result.getString(2).equals(forum))\r\n                            return result.getInt(1);\r\n                    } catch (Exception ignore) {\r\n                    }\r\n                    ;\r\n                    return null;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (forums == null || forums.size() < 1)\r\n        return null;\r\n    List<Integer> topics = null;\r\n    for (Integer f : forums) {\r\n        if (f != null) {\r\n            sql = \"select topic_id,topic_title from jforum_topics where forum_id = ? order by topic_time\";\r\n            fields[0] = f;\r\n            topics = SqlService.dbRead(sql, fields, new SqlReader() {\r\n                public Object readSqlResultRecord(ResultSet result) {\r\n                    try {\r\n                        if (result.getString(2).equals(topic))\r\n                            return result.getInt(1);\r\n                    } catch (Exception ignore) {\r\n                    }\r\n                    ;\r\n                    return null;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if (topics == null || topics.size() < 1)\r\n        return null;\r\n    for (Integer t : topics) {\r\n        if (t != null) {\r\n            return \"/jforum_topic/\" + t;\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.JForumEntity.findObject",
	"Comment": "objectid is titles of category, forum, topic. find the topic and return a string with its id",
	"Method": "String findObject(String objectid,Map<String, String> objectMap,String siteid){\r\n    try {\r\n        if (result.getString(2).equals(category))\r\n            return result.getInt(1);\r\n    } catch (Exception ignore) {\r\n    }\r\n    ;\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.JForumEntity.findObject",
	"Comment": "objectid is titles of category, forum, topic. find the topic and return a string with its id",
	"Method": "String findObject(String objectid,Map<String, String> objectMap,String siteid){\r\n    try {\r\n        if (result.getString(2).equals(forum))\r\n            return result.getInt(1);\r\n    } catch (Exception ignore) {\r\n    }\r\n    ;\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.JForumEntity.findObject",
	"Comment": "objectid is titles of category, forum, topic. find the topic and return a string with its id",
	"Method": "String findObject(String objectid,Map<String, String> objectMap,String siteid){\r\n    try {\r\n        if (result.getString(2).equals(topic))\r\n            return result.getInt(1);\r\n    } catch (Exception ignore) {\r\n    }\r\n    ;\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.devhelper.AbstractDeveloperHelperService.isEntityRequestInternal",
	"Comment": "checks to see if a request is internal and therefore can bypass some or all security",
	"Method": "boolean isEntityRequestInternal(String reference){\r\n    boolean internal = false;\r\n    String origin = (String) requestStorage.getStoredValue(RequestStorage.ReservedKeys._requestOrigin.name());\r\n    if (RequestStorage.RequestOrigin.INTERNAL.name().equals(origin)) {\r\n        internal = true;\r\n    } else {\r\n        if (reference != null) {\r\n            String ref = (String) requestStorage.getStoredValue(RequestStorage.ReservedKeys._requestEntityReference.name());\r\n            if (reference.equals(ref)) {\r\n                internal = false;\r\n            } else {\r\n                internal = true;\r\n            }\r\n        }\r\n    }\r\n    return internal;\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.BasicConfigurationService.addConfigItem",
	"Comment": "internaladds the config item if it does not exist or updates it if it does",
	"Method": "ConfigItemImpl addConfigItem(ConfigItemImpl configItem,String source){\r\n    ConfigItemImpl ci = null;\r\n    if (configItem != null) {\r\n        ConfigItemImpl currentCI = null;\r\n        if (configurationItems.containsKey(configItem.getName())) {\r\n            currentCI = configurationItems.get(configItem.getName());\r\n        }\r\n        boolean haltProcessing = false;\r\n        if (this.listeners != null && !this.listeners.isEmpty()) {\r\n            for (Entry<String, WeakReference<ConfigurationListener>> entry : this.listeners.entrySet()) {\r\n                ConfigurationListener listener = entry.getValue().get();\r\n                if (listener != null) {\r\n                    try {\r\n                        ConfigItem rvci = listener.changing(currentCI, configItem);\r\n                        if (rvci == null) {\r\n                        } else if (rvci instanceof BlockingConfigItem) {\r\n                            haltProcessing = true;\r\n                            log.info(\"add configItem (\" + configItem + \") processing halted by \" + listener);\r\n                            break;\r\n                        } else {\r\n                            configItem.merge(rvci);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        log.warn(\"Exception when calling listener (\" + listener + \"): \" + e);\r\n                    }\r\n                } else {\r\n                    this.listeners.remove(entry.getKey());\r\n                }\r\n            }\r\n        }\r\n        if (!haltProcessing) {\r\n            boolean changed = false;\r\n            if (currentCI != null) {\r\n                if (!SOURCE_GET_STRINGS.equals(source)) {\r\n                    currentCI.changed(configItem.getValue(), source);\r\n                    changed = true;\r\n                    if (!currentCI.isRegistered() && configItem.isRegistered()) {\r\n                        currentCI.registered = true;\r\n                    }\r\n                }\r\n                ci = currentCI;\r\n            } else {\r\n                configItem.setSource(source);\r\n                if (secureConfigurationKeys.contains(configItem.getName())) {\r\n                    configItem.secured = true;\r\n                }\r\n                configurationItems.put(configItem.getName(), configItem);\r\n                ci = configItem;\r\n                changed = true;\r\n            }\r\n            if (changed) {\r\n                if (this.listeners != null && !this.listeners.isEmpty()) {\r\n                    for (Entry<String, WeakReference<ConfigurationListener>> entry : this.listeners.entrySet()) {\r\n                        ConfigurationListener listener = entry.getValue().get();\r\n                        if (listener != null) {\r\n                            try {\r\n                                listener.changed(ci, currentCI);\r\n                            } catch (Exception e) {\r\n                                log.warn(\"Exception when calling listener (\" + listener + \"): \" + e);\r\n                            }\r\n                        } else {\r\n                            this.listeners.remove(entry.getKey());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ci;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere5Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere5Sql(){\r\n    return \"SAKAI_SITE.TYPE = ? and \";\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.model.EmailEntry.setOtherRecipientsList",
	"Comment": "rsf has a problem with overloaded setters so we force it to use the string one.",
	"Method": "void setOtherRecipientsList(List<String> otherRecipients){\r\n    this.otherRecipients = otherRecipients;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.EntityHttpServletRequest.setRequestValues",
	"Comment": "set all the values from a request on this request object and set this requestas the one which the values were copied from",
	"Method": "void setRequestValues(HttpServletRequest req){\r\n    if (req == null) {\r\n        throw new IllegalArgumentException(\"request cannot be null\");\r\n    }\r\n    Enumeration<String> attribNames = req.getAttributeNames();\r\n    while (attribNames.hasMoreElements()) {\r\n        String name = (String) attribNames.nextElement();\r\n        Object obj = req.getAttribute(name);\r\n        if (obj != null) {\r\n            attributes.put(name, obj);\r\n        }\r\n    }\r\n    Cookie[] ck = req.getCookies();\r\n    if (ck != null) {\r\n        for (int i = 0; i < ck.length; i++) {\r\n            cookies.add(ck[i]);\r\n        }\r\n    }\r\n    Enumeration<String> headerNames = req.getHeaderNames();\r\n    while (headerNames.hasMoreElements()) {\r\n        String name = headerNames.nextElement();\r\n        Enumeration<String> henum = req.getHeaders(name);\r\n        Vector<String> v = new Vector<String>(1);\r\n        while (henum.hasMoreElements()) {\r\n            String h = henum.nextElement();\r\n            v.add(h);\r\n        }\r\n    }\r\n    for (Entry<String, String[]> entry : (Set<Entry<String, String[]>>) req.getParameterMap().entrySet()) {\r\n        parameters.put(entry.getKey(), entry.getValue());\r\n    }\r\n    this.locale = req.getLocale();\r\n    this.method = req.getMethod();\r\n    this.contentType = req.getContentType();\r\n    this.characterEncoding = req.getCharacterEncoding() == null ? \"UTF-8\" : req.getCharacterEncoding();\r\n    this.contentLength = req.getContentLength();\r\n    this.contextPath = req.getContextPath();\r\n    this.pathInfo = req.getPathInfo();\r\n    this.queryString = req.getQueryString();\r\n    this.requestURI = req.getRequestURI();\r\n    this.servletPath = req.getServletPath();\r\n    this.scheme = req.getScheme();\r\n    this.protocol = req.getProtocol();\r\n    this.serverName = req.getServerName();\r\n    this.serverPort = req.getServerPort();\r\n    this.remoteAddr = req.getRemoteAddr();\r\n    this.remoteHost = req.getRemoteHost();\r\n    this.realDispatcher = true;\r\n}"
}, {
	"Path": "org.sakaiproject.util.StringUtil.splitFirst",
	"Comment": "split the source into two strings at the first occurrence of the splitter subsequent occurrences are not treated specially, and may be part of the second string.",
	"Method": "String[] splitFirst(String source,String splitter){\r\n    Vector rv = new Vector();\r\n    int last = 0;\r\n    int next = 0;\r\n    next = source.indexOf(splitter, last);\r\n    if (next != -1) {\r\n        rv.add(source.substring(last, next));\r\n        last = next + splitter.length();\r\n    }\r\n    if (last < source.length()) {\r\n        rv.add(source.substring(last, source.length()));\r\n    }\r\n    return (String[]) rv.toArray(new String[rv.size()]);\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDoubleStorage.setDoubleStorageSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setDoubleStorageSql(String vendor){\r\n    this.doubleStorageSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.util.StringUtil.containsIgnoreCase",
	"Comment": "determine if a string is contained in a string collection, ignoring case",
	"Method": "boolean containsIgnoreCase(String target,String substring,boolean containsIgnoreCase,Collection stringCollection,String value,boolean containsIgnoreCase,String[] stringCollection,String value){\r\n    if (stringCollection == null || value == null)\r\n        return false;\r\n    if ((stringCollection.length == 0) || (value.length() == 0))\r\n        return false;\r\n    for (String s : stringCollection) {\r\n        if (value.equalsIgnoreCase(s))\r\n            return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.editTitle",
	"Comment": "called by edit title dialog to change attributes of the page such as the title",
	"Method": "String editTitle(){\r\n    if (pageTitle == null || pageTitle.equals(\"\")) {\r\n        return \"notitle\";\r\n    }\r\n    if (!canEditPage()) {\r\n        return \"permission-failed\";\r\n    }\r\n    if (!checkCsrf())\r\n        return \"permission-failed\";\r\n    Placement placement = toolManager.getCurrentPlacement();\r\n    SimplePage page = getCurrentPage();\r\n    SimplePageItem pageItem = getCurrentPageItem(null);\r\n    Site site = getCurrentSite();\r\n    boolean needRecompute = false;\r\n    boolean isOwner = false;\r\n    if (!isStudentPage(page) && getEditPrivs() == 0) {\r\n        Double currentPoints = page.getGradebookPoints();\r\n        Double newPoints = null;\r\n        if (points != null) {\r\n            try {\r\n                newPoints = Double.parseDouble(points);\r\n                if (newPoints == 0.0)\r\n                    newPoints = null;\r\n            } catch (Exception ignore) {\r\n                newPoints = null;\r\n            }\r\n        }\r\n        boolean add = false;\r\n        if (newPoints == null && currentPoints != null) {\r\n            add = gradebookIfc.removeExternalAssessment(site.getId(), \"lesson-builder:\" + page.getPageId());\r\n        } else if (newPoints != null && currentPoints == null) {\r\n            add = gradebookIfc.addExternalAssessment(site.getId(), \"lesson-builder:\" + page.getPageId(), null, pageTitle, newPoints, null, \"Lesson Builder\");\r\n            if (!add) {\r\n                setErrMessage(messageLocator.getMessage(\"simplepage.no-gradebook\"));\r\n            } else\r\n                needRecompute = true;\r\n        } else if (currentPoints != null && (!currentPoints.equals(newPoints) || !pageTitle.equals(page.getTitle()))) {\r\n            add = gradebookIfc.updateExternalAssessment(site.getId(), \"lesson-builder:\" + page.getPageId(), null, pageTitle, newPoints, null);\r\n            if (!add) {\r\n                setErrMessage(messageLocator.getMessage(\"simplepage.no-gradebook\"));\r\n            } else if (!currentPoints.equals(newPoints))\r\n                needRecompute = true;\r\n        }\r\n        if (add)\r\n            page.setGradebookPoints(newPoints);\r\n        isOwner = currentUserId != null && currentUserId.equals(page.getOwner());\r\n        if (newOwner == null) {\r\n            page.setOwner(newOwner);\r\n            page.setOwned(false);\r\n        } else {\r\n            Set<String> siteMembers = site.getUsers();\r\n            boolean ownerIsMember = siteMembers.contains(newOwner);\r\n            if (ownerIsMember) {\r\n                page.setOwner(newOwner);\r\n                page.setOwned(true);\r\n            } else {\r\n                User user = null;\r\n                try {\r\n                    user = UserDirectoryService.getUser(newOwner);\r\n                    String displayName = user.getDisplayName();\r\n                    setErrMessage(messageLocator.getMessage(\"simplepage.not-member\").replace(\"{}\", displayName));\r\n                } catch (UserNotDefinedException e) {\r\n                    log.warn(\"Can't find user from owner:{}\", newOwner);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (pageTitle != null && pageItem.getPageId() == 0) {\r\n        SecurityAdvisor siteUpdAdvisor = new SecurityAdvisor() {\r\n            public SecurityAdvice isAllowed(String userId, String function, String reference) {\r\n                if (function.equals(SITE_UPD) && reference.equals(\"/site/\" + getCurrentSiteId())) {\r\n                    return SecurityAdvice.ALLOWED;\r\n                } else {\r\n                    return SecurityAdvice.PASS;\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            securityService.pushAdvisor(siteUpdAdvisor);\r\n            SitePage sitePage = site.getPage(page.getToolId());\r\n            for (ToolConfiguration t : sitePage.getTools()) {\r\n                if (t.getId().equals(placement.getId()))\r\n                    t.setTitle(pageTitle);\r\n            }\r\n            sitePage.setTitle(pageTitle);\r\n            try {\r\n                siteService.save(site);\r\n            } catch (Exception e) {\r\n                setErrMessage(messageLocator.getMessage(\"simplepage.title_too_long\"));\r\n                return (\"failed\");\r\n            }\r\n            page.setTitle(pageTitle);\r\n            page.setHidden(hidePage);\r\n            if (hasReleaseDate)\r\n                page.setReleaseDate(releaseDate);\r\n            else\r\n                page.setReleaseDate(null);\r\n            update(page, !isOwner);\r\n            updateCurrentPage(!isOwner);\r\n            placement.setTitle(pageTitle);\r\n            placement.save();\r\n            pageVisibilityHelper(site, page.getToolId(), !hidePage);\r\n            pageItem.setPrerequisite(prerequisite);\r\n            pageItem.setRequired(required);\r\n            pageItem.setName(pageTitle);\r\n            update(pageItem, !isOwner);\r\n        } catch (Exception e) {\r\n            log.error(e.getMessage(), e);\r\n        } finally {\r\n            securityService.popAdvisor(siteUpdAdvisor);\r\n        }\r\n    } else if (pageTitle != null) {\r\n        page.setTitle(pageTitle);\r\n        page.setHidden(hidePage);\r\n        if (hasReleaseDate)\r\n            page.setReleaseDate(releaseDate);\r\n        else\r\n            page.setReleaseDate(null);\r\n        update(page, !isOwner);\r\n    }\r\n    if (pageTitle != null) {\r\n        if (pageItem.getType() == SimplePageItem.STUDENT_CONTENT) {\r\n            SimpleStudentPage student = simplePageToolDao.findStudentPageByPageId(page.getPageId());\r\n            student.setTitle(pageTitle);\r\n            update(student, false);\r\n        } else {\r\n            pageItem.setName(pageTitle);\r\n            update(pageItem, !isOwner);\r\n        }\r\n        adjustPath(\"\", pageItem.getPageId(), pageItem.getId(), pageTitle);\r\n    }\r\n    String collectionId = contentHostingService.getSiteCollection(getCurrentSiteId()) + \"LB-CSS/\";\r\n    String uploadId = uploadFile(collectionId);\r\n    if (uploadId != null) {\r\n        page.setCssSheet(uploadId);\r\n        resourceCache.remove(collectionId);\r\n        resourceCache.remove(uploadId);\r\n    } else {\r\n        page.setCssSheet(dropDown);\r\n    }\r\n    update(page, !isOwner);\r\n    if (needRecompute)\r\n        recomputeGradebookEntries(page.getPageId(), points);\r\n    if (pageItem.getPageId() == 0) {\r\n        return \"reload\";\r\n    } else {\r\n        return \"success\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.editTitle",
	"Comment": "called by edit title dialog to change attributes of the page such as the title",
	"Method": "String editTitle(){\r\n    if (function.equals(SITE_UPD) && reference.equals(\"/site/\" + getCurrentSiteId())) {\r\n        return SecurityAdvice.ALLOWED;\r\n    } else {\r\n        return SecurityAdvice.PASS;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.processCreateTrigger",
	"Comment": "creates a trigger for the currently selected jobdetailwrapper. this method redirects to uito override configured properties if the job is configurable.",
	"Method": "String processCreateTrigger(){\r\n    Scheduler scheduler = schedulerManager.getScheduler();\r\n    if (scheduler == null) {\r\n        log.error(\"Scheduler is down!\");\r\n        return \"error\";\r\n    }\r\n    try {\r\n        JobDetail jobDetail = selectedJobDetailWrapper.getJobDetail();\r\n        Trigger trigger = TriggerBuilder.newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(CronScheduleBuilder.cronSchedule(triggerExpression)).forJob(jobDetail.getKey()).build();\r\n        TriggerWrapper tempTriggerWrapper = new TriggerWrapperImpl();\r\n        tempTriggerWrapper.setTrigger(trigger);\r\n        JobBeanWrapper jobWrapper = getSchedulerManager().getJobBeanWrapper(selectedJobDetailWrapper.getJobType());\r\n        if (jobWrapper != null) {\r\n            if (ConfigurableJobBeanWrapper.class.isAssignableFrom(jobWrapper.getClass())) {\r\n                final ConfigurableJobBeanWrapper configurableJob = (ConfigurableJobBeanWrapper) jobWrapper;\r\n                setJobDetail(jobDetail);\r\n                setConfigurableJobBeanWrapper(configurableJob);\r\n                setTriggerWrapper(tempTriggerWrapper);\r\n                return \"edit_trigger_properties\";\r\n            } else {\r\n                setConfigurableJobBeanWrapper(null);\r\n                setJobDetail(null);\r\n                setTriggerWrapper(null);\r\n            }\r\n        }\r\n        scheduleTrigger(tempTriggerWrapper);\r\n        return \"edit_triggers\";\r\n    } catch (Exception e) {\r\n        log.error(\"Failed to create trigger.\", e);\r\n        return \"error\";\r\n    } finally {\r\n        triggerName = null;\r\n        triggerExpression = null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionTopicBean.setRestrictPermissionsForGroups",
	"Comment": "set the restrictpermissionsforgroups setting for the topic.",
	"Method": "void setRestrictPermissionsForGroups(String restrictPermissionsForGroups){\r\n    log.debug(\"setRestrictPermissionsForGroups()\");\r\n    topic.setRestrictPermissionsForGroups(Boolean.parseBoolean(restrictPermissionsForGroups));\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder4Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder4Sql(){\r\n    return \"SAKAI_SITE.TITLE DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.javax.PagingPosition.adjustPostition",
	"Comment": "adjust the first and list item position by distance, positive or negative.",
	"Method": "void adjustPostition(int distance){\r\n    m_first += distance;\r\n    m_last += distance;\r\n    validate();\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.EditGradeCommentPanel.getComment",
	"Comment": "getter for the comment string so we can update components on the parent page when the comment is saved here",
	"Method": "String getComment(){\r\n    return this.comment;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf2.renderer.PagerRenderer.getString",
	"Comment": "get a named attribute from the component or the widget resource bundle.",
	"Method": "String getString(FacesContext context,UIComponent component,String attrName,String def){\r\n    String ret = (String) getFromAttributeOrBundle(context, component, attrName);\r\n    if (ret != null)\r\n        return ret;\r\n    return def;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.filterOutExcludedSites",
	"Comment": "removes all sites user does not want message info about and\treturns all sites left",
	"Method": "List filterOutExcludedSites(List allSites){\r\n    final List excludedSites = getExcludedSitesFromTabs();\r\n    if (excludedSites != null) {\r\n        for (Iterator excludeIter = excludedSites.iterator(); excludeIter.hasNext(); ) {\r\n            final String siteId = (String) excludeIter.next();\r\n            allSites.remove(siteId);\r\n        }\r\n    }\r\n    return allSites;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.processDeletePodcast",
	"Comment": "used to call podcastservice to actually delete selected podcast.",
	"Method": "String processDeletePodcast(){\r\n    try {\r\n        podcastService.removePodcast(selectedPodcast.getResourceId());\r\n        return \"cancel\";\r\n    } catch (PermissionException e) {\r\n        log.error(\"PermissionException while deleting podcast \" + selectedPodcast.title + \" from site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(PERMISSION_ALERT);\r\n    } catch (InUseException e) {\r\n        log.warn(\"InUseException while deleting podcast \" + selectedPodcast.title + \" from site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(INTERNAL_ERROR_ALERT);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage() + \" while deleting podcast \" + selectedPodcast.title + \" from site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(INTERNAL_ERROR_ALERT);\r\n    }\r\n    return \"podcastDelete\";\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder16Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder16Sql(){\r\n    return \"SAKAI_SITE.MODIFIEDON DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.help.HelpManagerImpl.registerHelpContent",
	"Comment": "register help content either locally or externally\tindex resources in lucene",
	"Method": "void registerHelpContent(){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"registerHelpContent()\");\r\n    }\r\n    if (!\"\".equals(EXTERNAL_URL)) {\r\n        registerExternalHelpContent(EXTERNAL_URL + \"/\" + DEFAULT_HELP_FILE);\r\n    } else {\r\n        registerStaticContent();\r\n    }\r\n    for (String key : toc.keySet()) {\r\n        String luceneIndexPath = getHelpIndexPath() + File.separator + key;\r\n        TableOfContentsBean currentToc = toc.get(key);\r\n        IndexWriter writer = null;\r\n        Date start = new Date();\r\n        try {\r\n            FSDirectory directory = FSDirectory.open(new File(luceneIndexPath));\r\n            IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_40, new StandardAnalyzer(Version.LUCENE_40));\r\n            writer = new IndexWriter(directory, config);\r\n        } catch (IOException e) {\r\n            log.error(\"failed to create IndexWriter \" + e.getMessage(), e);\r\n            return;\r\n        }\r\n        indexRecursive(writer, currentToc.getCategories());\r\n        try {\r\n            writer.commit();\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            log.error(\"failed to close writer \" + e.getMessage(), e);\r\n        }\r\n        Date end = new Date();\r\n        log.info(\"finished initializing lucene for '\" + key + \"' in \" + (end.getTime() - start.getTime()) + \" total milliseconds\");\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.truncate",
	"Comment": "truncates the blob to the specified position.\t the blob will have the given number of bytes left.",
	"Method": "void truncate(int len){\r\n    if (len == size) {\r\n        return;\r\n    }\r\n    if (!between(len, 0, size)) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    int currIndex = seek(len);\r\n    curr.size = currIndex;\r\n    size = len;\r\n    curr.next = null;\r\n    tail = curr;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.processPermissions",
	"Comment": "constructs call to permissions helper and redirects to it to display\t podcasts folder permissions page.",
	"Method": "String processPermissions(){\r\n    ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();\r\n    ToolSession toolSession = SessionManager.getCurrentToolSession();\r\n    try {\r\n        String url = \"sakai.permissions.helper.helper/tool?session.\" + PermissionsHelper.DESCRIPTION + \"=\" + getPermissionsMessage() + \"&session.\" + PermissionsHelper.TARGET_REF + \"=\" + podcastService.getPodcastsFolderRef() + \"&session.\" + PermissionsHelper.PREFIX + \"=\" + CONTENT + \"&session.\" + PermissionsHelper.ROLES_REF + \"=\" + \"/site/\" + podcastService.getSiteId();\r\n        if (toolSession != null) {\r\n            ResourceLoader pRb = new ResourceLoader(\"org.sakaiproject.api.podcasts.bundle.permissions\");\r\n            HashMap<String, String> pRbValues = new HashMap<String, String>();\r\n            for (Iterator<Entry<String, String>> mapIter = pRb.entrySet().iterator(); mapIter.hasNext(); ) {\r\n                Entry<String, String> entry = mapIter.next();\r\n                pRbValues.put(entry.getKey(), entry.getValue());\r\n            }\r\n            toolSession.setAttribute(\"permissionDescriptions\", pRbValues);\r\n        }\r\n        context.redirect(url);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(\"Failed to redirect to helper\", e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getAssignment",
	"Comment": "get an gradebookassignment in the specified site given the assignment name this should be avoided where possible but is required for the\timport process to allow modification of assignment point values",
	"Method": "Assignment getAssignment(long assignmentId,Assignment getAssignment,String siteId,long assignmentId,Assignment getAssignment,String assignmentName,Assignment getAssignment,String siteId,String assignmentName){\r\n    final Gradebook gradebook = getGradebook(siteId);\r\n    if (gradebook != null) {\r\n        return this.gradebookService.getAssignment(gradebook.getUid(), assignmentName);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.ToolComponent.matchCriteria",
	"Comment": "check the target values for a match in the criteria. if criteria is empty or null, the target is a match.",
	"Method": "boolean matchCriteria(Set criteria,Set target){\r\n    if ((criteria == null) || (criteria.isEmpty()))\r\n        return true;\r\n    for (Iterator i = target.iterator(); i.hasNext(); ) {\r\n        String t = (String) i.next();\r\n        if (criteria.contains(t))\r\n            return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.HierDataTableRender.getColumnClasses",
	"Comment": "return an array of stylesheet classes to be applied to each column in the table in the order specified. every column may or may not have a stylesheet.",
	"Method": "String[] getColumnClasses(UIData data){\r\n    String values = (String) data.getAttributes().get(\"columnClasses\");\r\n    if (values == null) {\r\n        return (new String[0]);\r\n    }\r\n    values = values.trim();\r\n    ArrayList<String> list = new ArrayList<String>();\r\n    while (values.length() > 0) {\r\n        int comma = values.indexOf(\",\");\r\n        if (comma >= 0) {\r\n            list.add(values.substring(0, comma).trim());\r\n            values = values.substring(comma + 1);\r\n        } else {\r\n            list.add(values.trim());\r\n            values = \"\";\r\n        }\r\n    }\r\n    String[] results = new String[list.size()];\r\n    return ((String[]) list.toArray(results));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.setErrorMessage",
	"Comment": "passes an error message to the spring framework to display on page.",
	"Method": "void setErrorMessage(String alertMsg){\r\n    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Alert: \" + getErrorMessageString(alertMsg)));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.execute",
	"Comment": "implement the quartz job interface, which is called by the scheduler when a trigger associated with the job fires. this quartz job removes course sites that are more than a specified number of terms old.",
	"Method": "void execute(JobExecutionContext context){\r\n    synchronized (this) {\r\n        log.info(\"execute()\");\r\n        String actionStr = CourseSiteRemovalService.Action.remove.equals(action) ? \" course sites were removed.\" : \" course sites were unpublished.\";\r\n        if (user == null) {\r\n            log.error(\"The scheduled job to remove course sites can not be run with an invalid user.  No{}\", actionStr);\r\n        } else {\r\n            try {\r\n                Session sakaiSesson = sessionManager.getCurrentSession();\r\n                sakaiSesson.setUserId(user.getId());\r\n                int numSitesRemoved = courseSiteRemovalService.removeCourseSites(action, numDaysAfterTermEnds);\r\n                log.info(\"{}{}\", numSitesRemoved, actionStr);\r\n            } catch (Exception ex) {\r\n                log.error(ex.getMessage(), ex);\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere12Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere12Sql(){\r\n    return \"SITE_ID not in (select SITE_ID from SAKAI_SITE_USER where USER_ID = ? and PERMISSION <= PUBLISHED) and \";\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.PasswordPolicyProviderDefaultImpl.isOtherCharacterTypePresentInPassword",
	"Comment": "determine if any other characters are present in the given password stringfor example letters with accents, chinese or arabic characters.",
	"Method": "int isOtherCharacterTypePresentInPassword(String password){\r\n    for (int i = 0; i < password.length(); i++) {\r\n        if (!ArrayUtils.contains(allCharacterSets, password.charAt(i))) {\r\n            return 1;\r\n        }\r\n    }\r\n    return 0;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.UsageSessionServiceAdaptor.setUsageSessionServiceSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setUsageSessionServiceSql(String vendor){\r\n    this.usageSessionServiceSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBeanLite.isToolInSite",
	"Comment": "return true if tool with id passed in exists in site passed in\tfalse otherwise.",
	"Method": "boolean isToolInSite(Site thisSite,String toolId){\r\n    final Collection toolsInSite = thisSite.getTools(toolId);\r\n    return !toolsInSite.isEmpty();\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.putCourseGradesInMatrix",
	"Comment": "adds course grade info into the matrix specified in the first param",
	"Method": "void putCourseGradesInMatrix(Map<String, GbStudentGradeInfo> matrix,List<GbUser> gbStudents,List<String> studentUuids,Gradebook gradebook,GbRole role,boolean isCourseGradeVisible,GradebookUiSettings settings){\r\n    final Map<String, CourseGrade> courseGrades = getCourseGrades(studentUuids);\r\n    final CourseGradeFormatter courseGradeFormatter = new CourseGradeFormatter(gradebook, role, isCourseGradeVisible, settings.getShowPoints(), true);\r\n    for (final GbUser student : gbStudents) {\r\n        final GbStudentGradeInfo sg = new GbStudentGradeInfo(student);\r\n        String uid = student.getUserUuid();\r\n        final CourseGrade courseGrade = courseGrades.get(uid);\r\n        final GbCourseGrade gbCourseGrade = new GbCourseGrade(courseGrades.get(uid));\r\n        gbCourseGrade.setDisplayString(courseGradeFormatter.format(courseGrade));\r\n        sg.setCourseGrade(gbCourseGrade);\r\n        matrix.put(uid, sg);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.FormatHelper.formatDoubleToMatch",
	"Comment": "convert a double score to match the number of decimal places exhibited in the tomatch string representation of a number",
	"Method": "String formatDoubleToMatch(Double score,String toMatch){\r\n    int numberOfDecimalPlaces = 0;\r\n    if (toMatch.contains(\".\")) {\r\n        numberOfDecimalPlaces = toMatch.split(\"\\\\.\")[1].length();\r\n    }\r\n    if (toMatch.contains(\",\")) {\r\n        numberOfDecimalPlaces = toMatch.split(\"\\\\,\")[1].length();\r\n    }\r\n    return FormatHelper.formatDoubleToDecimal(score, numberOfDecimalPlaces);\r\n}"
}, {
	"Path": "org.sakaiproject.util.PasswordCheck.getPasswordStrength",
	"Comment": "compute the strength of the given password and return it as one of the constant values.",
	"Method": "int getPasswordStrength(String passwd){\r\n    int upper = 0, lower = 0, numbers = 0, special = 0, length = 0, strength = 0;\r\n    Pattern p;\r\n    Matcher m;\r\n    if (StringUtils.isBlank(passwd)) {\r\n        log.debug(\"Password null\");\r\n        return NONE;\r\n    }\r\n    length = passwd.length();\r\n    if (length < 5) {\r\n        strength = (strength + 3);\r\n        log.debug(\"3 points for length (\" + length + \")\");\r\n    } else if (length > 4 && passwd.length() < 8) {\r\n        strength = (strength + 6);\r\n        log.debug(\"6 points for length (\" + length + \")\");\r\n    } else if (length > 7 && passwd.length() < 16) {\r\n        strength = (strength + 12);\r\n        log.debug(\"12 points for length (\" + length + \")\");\r\n    } else if (length > 15) {\r\n        strength = (strength + 18);\r\n        log.debug(\"18 points for length (\" + length + \")\");\r\n    }\r\n    p = Pattern.compile(\".??[a-z]\");\r\n    m = p.matcher(passwd);\r\n    while (m.find()) {\r\n        lower++;\r\n    }\r\n    if (lower > 0) {\r\n        strength = (strength + 1);\r\n        log.debug(\"1 point for a lower case character\");\r\n    }\r\n    p = Pattern.compile(\".??[A-Z]\");\r\n    m = p.matcher(passwd);\r\n    while (m.find()) {\r\n        upper++;\r\n    }\r\n    if (upper > 0) {\r\n        strength = (strength + 5);\r\n        log.debug(\"5 points for an upper case character\");\r\n    }\r\n    p = Pattern.compile(\".??[0-9]\");\r\n    m = p.matcher(passwd);\r\n    while (m.find()) {\r\n        numbers += 1;\r\n    }\r\n    if (numbers > 0) {\r\n        strength = (strength + 5);\r\n        log.debug(\"5 points for a number\");\r\n        if (numbers > 1) {\r\n            strength = (strength + 2);\r\n            log.debug(\"2 points for at least two numbers\");\r\n            if (numbers > 2) {\r\n                strength = (strength + 3);\r\n                log.debug(\"3 points for at least three numbers\");\r\n            }\r\n        }\r\n    }\r\n    p = Pattern.compile(\".??[:,!,@,#,$,%,^,&,*,?,_,~]\");\r\n    m = p.matcher(passwd);\r\n    while (m.find()) {\r\n        special += 1;\r\n    }\r\n    if (special > 0) {\r\n        strength = (strength + 5);\r\n        log.debug(\"5 points for a special character\");\r\n        if (special > 1) {\r\n            strength += (strength + 5);\r\n            log.debug(\"5 points for at least two special characters\");\r\n        }\r\n    }\r\n    if (upper > 0 && lower > 0) {\r\n        strength = (strength + 2);\r\n        log.debug(\"2 combo points for upper and lower letters\");\r\n    }\r\n    if ((upper > 0 || lower > 0) && numbers > 0) {\r\n        strength = (strength + 2);\r\n        log.debug(\"2 combo points for letters and numbers\");\r\n    }\r\n    if ((upper > 0 || lower > 0) && numbers > 0 && special > 0) {\r\n        strength = (strength + 2);\r\n        log.debug(\"2 combo points for letters, numbers and special chars\");\r\n    }\r\n    if (upper > 0 && lower > 0 && numbers > 0 && special > 0) {\r\n        strength = (strength + 2);\r\n        log.debug(\"2 combo points for upper and lower case letters, numbers and special chars\");\r\n    }\r\n    if (strength < 16) {\r\n        log.debug(\"very weak\");\r\n        return VERY_WEAK;\r\n    } else if (strength > 15 && strength < 25) {\r\n        log.debug(\"weak\");\r\n        return WEAK;\r\n    } else if (strength > 24 && strength < 35) {\r\n        log.debug(\"mediocre\");\r\n        return MEDIOCRE;\r\n    } else if (strength > 34 && strength < 45) {\r\n        log.debug(\"strong\");\r\n        return STRONG;\r\n    } else {\r\n        log.debug(\"very strong\");\r\n        return VERY_STRONG;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.hierarchy.impl.HierarchyServiceImpl.saveNodeAndMetaData",
	"Comment": "convenience method to save a node and metadata in one transaction",
	"Method": "void saveNodeAndMetaData(HierarchyPersistentNode pNode,HierarchyNodeMetaData metaData){\r\n    Set<HierarchyPersistentNode> pNodes = new HashSet<HierarchyPersistentNode>();\r\n    pNodes.add(pNode);\r\n    Set<HierarchyNodeMetaData> metaDatas = new HashSet<HierarchyNodeMetaData>();\r\n    metaDatas.add(metaData);\r\n    Set[] entitySets = new Set[] { pNodes, metaDatas };\r\n    dao.saveMixedSet(entitySets);\r\n    if (metaData.getId() == null) {\r\n        if (pNode.getId() != null) {\r\n            dao.delete(pNode);\r\n        }\r\n        throw new RuntimeException(\"Metadata didn't save, node was removed: \" + pNode);\r\n    } else if (pNode.getId() == null) {\r\n        if (metaData.getId() != null) {\r\n            dao.delete(metaData);\r\n        }\r\n        throw new RuntimeException(\"Metadata didn't save, metaData was removed: \" + metaData);\r\n    } else if (!metaData.getId().equals(pNode.getId())) {\r\n        int i = 0;\r\n        if (pNode.getId() > metaData.getId()) {\r\n            while (i < 100 && metaData.getId() != null && pNode.getId() != metaData.getId()) {\r\n                dao.delete(metaData);\r\n                metaData.setId(null);\r\n                dao.save(metaData);\r\n                i++;\r\n            }\r\n        } else {\r\n            while (i < 100 && pNode.getId() != null && pNode.getId() != metaData.getId()) {\r\n                dao.delete(pNode);\r\n                pNode.setId(null);\r\n                dao.save(pNode);\r\n                i++;\r\n            }\r\n        }\r\n        if (pNode.getId() == null || metaData.getId() == null || pNode.getId() != metaData.getId()) {\r\n            throw new RuntimeException(\"Node ID: \" + pNode.getId() + \" doesn't match Metadata ID: \" + metaData.getId());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.groupCollectionContainsRefString",
	"Comment": "test a collection of group object for the specified group reference",
	"Method": "boolean groupCollectionContainsRefString(Collection<Group> groups,String groupRef){\r\n    for (Iterator<Group> i = groups.iterator(); i.hasNext(); ) {\r\n        Group group = (Group) i.next();\r\n        if (group.getReference().equals(groupRef))\r\n            return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Validator.escapeZipEntry",
	"Comment": "return a string based on id that is fully escaped to create a zip entry",
	"Method": "String escapeZipEntry(String id){\r\n    if (id == null)\r\n        return \"\";\r\n    try {\r\n        StringBuilder buf = new StringBuilder();\r\n        for (int i = 0; i < id.length(); i++) {\r\n            char c = id.charAt(i);\r\n            if (INVALID_CHARS_IN_ZIP_ENTRY.indexOf(c) != -1) {\r\n                buf.append('_');\r\n            } else {\r\n                buf.append(c);\r\n            }\r\n        }\r\n        String rv = buf.toString();\r\n        return rv;\r\n    } catch (Exception e) {\r\n        log.warn(\"Validator.escapeZipEntry: \", e);\r\n        return \"\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDoubleStorage.valuesParams",
	"Comment": "form a string of n question marks with commas, for sql value statements, one for each item in the values array, or an empty string if null.",
	"Method": "String valuesParams(String[] fields){\r\n    if ((fields == null) || (fields.length == 0))\r\n        return \"\";\r\n    StringBuilder buf = new StringBuilder();\r\n    for (int i = 0; i < fields.length; i++) {\r\n        buf.append(\" ?,\");\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getContainingCollectionId",
	"Comment": "access the resource id of the collection which contains this collection or resource.",
	"Method": "String getContainingCollectionId(String id){\r\n    return isolateContainingId(id);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.chart.AssignmentGradeChart.buildRangeLabel",
	"Comment": "range labels are standard labels but use a translation key here",
	"Method": "String buildRangeLabel(int start,int end){\r\n    return new StringResourceModel(\"label.statistics.chart.range\", null, start, end).getString();\r\n}"
}, {
	"Path": "org.sakaiproject.alias.impl.BaseAliasService.aliasReference",
	"Comment": "access the internal reference which can be used to access the resource from within the system.",
	"Method": "String aliasReference(String id){\r\n    return getAccessPoint(true) + Entity.SEPARATOR + id;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.entityproviders.ForumsEntityProviderImpl.checkSiteAndToolAccess",
	"Comment": "checks whether the current user can access this site and whether they can\tsee the forums tool.",
	"Method": "void checkSiteAndToolAccess(String siteId){\r\n    Site site;\r\n    try {\r\n        site = siteService.getSiteVisit(siteId);\r\n    } catch (IdUnusedException e) {\r\n        throw new EntityException(\"Invalid siteId: \" + siteId, \"\", HttpServletResponse.SC_BAD_REQUEST);\r\n    } catch (PermissionException e) {\r\n        throw new EntityException(\"No access to site: \" + siteId, \"\", HttpServletResponse.SC_UNAUTHORIZED);\r\n    }\r\n    ToolConfiguration toolConfig = site.getToolForCommonId(\"sakai.forums\");\r\n    if (!toolManager.isVisible(site, toolConfig)) {\r\n        throw new EntityException(\"No access to tool in site: \" + siteId, \"\", HttpServletResponse.SC_UNAUTHORIZED);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.DbSiteService.setSiteServiceSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setSiteServiceSql(String vendor){\r\n    this.siteServiceSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.PodcastServiceImpl.getAResourceEdit",
	"Comment": "pulls a contentresourceedit from contenthostingservice.",
	"Method": "ContentResourceEdit getAResourceEdit(String resourceId){\r\n    ContentResourceEdit crEdit = null;\r\n    try {\r\n        enablePodcastSecurityAdvisor();\r\n        crEdit = contentHostingService.editResource(resourceId);\r\n    } catch (TypeException e) {\r\n        log.error(\"TypeException while attempting to pull resource: \" + resourceId + \" for site: \" + getSiteId() + \". \" + e.getMessage(), e);\r\n        throw new PodcastException(e);\r\n    } catch (InUseException e) {\r\n        return null;\r\n    } finally {\r\n        securityService.popAdvisor();\r\n    }\r\n    return crEdit;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.tag.MultiColumnTag.setProperties",
	"Comment": "set the properties.analogous to a datatable.however, acts as one or more columns.",
	"Method": "void setProperties(UIComponent component){\r\n    super.setProperties(component);\r\n    FacesContext context = getFacesContext();\r\n    TagUtil.setInteger(component, \"first\", first);\r\n    TagUtil.setInteger(component, \"rows\", rows);\r\n    TagUtil.setString(component, \"value\", value);\r\n    TagUtil.setString(component, \"var\", var);\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlOracle.getXmlSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table and limits the result set.",
	"Method": "String getXmlSql(String field,String table,int first,int last){\r\n    return \"select XML from (select XML, RANK() OVER (order by \" + field + \") as rank from \" + table + \" order by \" + field + \" asc) where rank between ? and ?\";\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.removeBytes",
	"Comment": "removes a number of bytes from the blob at the requested position.\t everything else is moved up.",
	"Method": "void removeBytes(int pos,int len){\r\n    if (!(between(pos, 0, (size - 1)) && between((pos + len), 0, size))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    BlobNode startNode, endNode;\r\n    int startPos, endPos;\r\n    startPos = seek(pos);\r\n    startNode = curr;\r\n    endPos = seek(pos + len);\r\n    endNode = curr;\r\n    if (startNode == endNode) {\r\n        System.arraycopy(curr.data, endPos, curr.data, startPos, (curr.size - endPos));\r\n        curr.size -= len;\r\n    } else {\r\n        BlobNode newNode = new BlobNode(Math.max(nodeSize, (startPos + (endNode.size - endPos))));\r\n        System.arraycopy(startNode.data, 0, newNode.data, 0, startPos);\r\n        System.arraycopy(endNode.data, endPos, newNode.data, startPos, (endNode.size - endPos));\r\n        newNode.size = (startPos + 1) + (endNode.size - endPos);\r\n        newNode.next = endNode.next;\r\n        BlobNode before = findBefore(startNode);\r\n        if (before == null) {\r\n            head = newNode;\r\n        } else {\r\n            before.next = newNode;\r\n        }\r\n    }\r\n    size -= len;\r\n}"
}, {
	"Path": "org.sakaiproject.util.EmailNotification.findHeaderValue",
	"Comment": "find the header value whose name matches with the header parameter",
	"Method": "String findHeaderValue(String header,List headers){\r\n    String line = findHeader(header, headers);\r\n    if (line == null)\r\n        return null;\r\n    String value = line.substring(header.length() + 2);\r\n    return value;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.OrphanPageFinder.getOrphanStringsIds",
	"Comment": "simple page bean expects an array of string instead of a collection of long so need to do the conversion",
	"Method": "String[] getOrphanStringsIds(){\r\n    List<String> orphans = new ArrayList<String>();\r\n    for (Long pageId : orphanedPages) {\r\n        orphans.add(Long.toString(pageId));\r\n    }\r\n    return orphans.toArray(new String[orphans.size()]);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.getRequestParamArrayValueLike",
	"Comment": "determine if we have been passed a parameter that contains a given string, return arraylist of the corresponding values,\telse return empty list.",
	"Method": "ArrayList getRequestParamArrayValueLike(String paramPart){\r\n    FacesContext context = FacesContext.getCurrentInstance();\r\n    Map requestParams = context.getExternalContext().getRequestParameterMap();\r\n    ArrayList list = new ArrayList();\r\n    for (Iterator it = requestParams.entrySet().iterator(); it.hasNext(); ) {\r\n        Map.Entry entry = (Map.Entry) it.next();\r\n        String currKey = (String) entry.getKey();\r\n        int location = currKey.indexOf(paramPart);\r\n        if (location > -1) {\r\n            list.add((String) entry.getValue());\r\n        }\r\n    }\r\n    return list;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.model.ProcessedGradeItem.isSelectable",
	"Comment": "helper to determine if an items is in a state that can be selected",
	"Method": "boolean isSelectable(){\r\n    return this.status == Status.NEW || this.status == Status.UPDATE || this.status == Status.MODIFIED;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.request.RequestStorageImpl.setRequestValue",
	"Comment": "allows user to set the value of a key directly, including reserved keys",
	"Method": "void setRequestValue(String key,Object value){\r\n    HttpServletRequest request = requestGetter.getRequest();\r\n    if (request != null) {\r\n        if (value instanceof String) {\r\n            request.setAttribute(key, value);\r\n        }\r\n    }\r\n    getInternalMap().put(key, value);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.isStudentNumberVisible",
	"Comment": "are student numbers visible to the current user in the current site?",
	"Method": "boolean isStudentNumberVisible(){\r\n    if (getCandidateDetailProvider() == null) {\r\n        return false;\r\n    }\r\n    final User user = getCurrentUser();\r\n    final Optional<Site> site = getCurrentSite();\r\n    return user != null && site.isPresent() && getCandidateDetailProvider().isInstitutionalNumericIdEnabled(site.get()) && this.gradebookService.currentUserHasViewStudentNumbersPerm(getGradebook().getUid());\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.setCourseSitePublishService",
	"Comment": "called by the spring framework to initialize the coursesitepublishservice data member specified in the components.xml file via ioc.",
	"Method": "void setCourseSitePublishService(CourseSitePublishService courseSitePublishService){\r\n    this.courseSitePublishService = courseSitePublishService;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.PodcastServiceImpl.checkForFeedInfo",
	"Comment": "checks if podcast feed title and description exists and if not, add them",
	"Method": "void checkForFeedInfo(String podcastsCollection,String siteId){\r\n    try {\r\n        final ContentCollection podcasts = contentHostingService.getCollection(podcastsCollection);\r\n        final ResourceProperties rp = podcasts.getProperties();\r\n        final String podfeedTitle = rp.getProperty(PODFEED_TITLE);\r\n        if (podfeedTitle == null) {\r\n            final ContentCollectionEdit podcastsEdit = contentHostingService.editCollection(podcastsCollection);\r\n            final ResourcePropertiesEdit resourceProperties = podcastsEdit.getPropertiesEdit();\r\n            resourceProperties.addProperty(ResourceProperties.PROP_DISPLAY_NAME, COLLECTION_PODCASTS_TITLE);\r\n            resourceProperties.addProperty(ResourceProperties.PROP_DESCRIPTION, COLLECTION_PODCASTS_DESCRIPTION);\r\n            try {\r\n                resourceProperties.addProperty(PODFEED_TITLE, siteService.getSite(siteId).getTitle() + \"'s Official Podcasts\");\r\n                final String feedDescription = \"This is the official podcast for course \" + siteService.getSite(siteId).getTitle() + \". Please check back throughout the semester for updates.\";\r\n                resourceProperties.addProperty(PODFEED_DESCRIPTION, feedDescription);\r\n                commitContentCollection(podcastsEdit);\r\n            } catch (IdUnusedException e) {\r\n                log.error(\"IdUnusedException attempting to get site info to set feed title and description for site \" + siteId, e);\r\n            }\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        log.error(\"IdUnusedException attempting to retrive podcast folder collection to check \" + \"if feed info exists for site \" + siteId, e);\r\n    } catch (TypeException e) {\r\n        log.error(\"TypeException attempting to retrive podcast folder collection to check \" + \"if feed info exists for site \" + siteId, e);\r\n    } catch (PermissionException e) {\r\n        log.error(\"PermissionException attempting to retrive podcast folder collection to check \" + \"if feed info exists for site \" + siteId, e);\r\n    } catch (InUseException e) {\r\n        log.info(\"InUsedException attempting to retrive podcast folder collection to check \" + \"if feed info exists for site \" + siteId, e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.RSSPodfeedServlet.doGet",
	"Comment": "the doget method of the servlet. \tthis method is called when a form has its tag value method equals to get.",
	"Method": "void doGet(HttpServletRequest request,HttpServletResponse response){\r\n    String reqURL = request.getPathInfo();\r\n    String siteId;\r\n    if (reqURL != null) {\r\n        siteId = reqURL.substring(reqURL.lastIndexOf(\"/\") + 1);\r\n    } else {\r\n        reqURL = request.getRequestURI();\r\n        siteId = reqURL.substring(1, reqURL.lastIndexOf(\"/\"));\r\n    }\r\n    log.debug(\"Podcast feed requested for site: \" + siteId);\r\n    final String podcastsCollection = podfeedService.retrievePodcastFolderId(siteId);\r\n    if (podcastsCollection == null) {\r\n        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n        return;\r\n    }\r\n    final boolean pubView = ContentHostingService.isPubView(podcastsCollection);\r\n    if (!pubView) {\r\n        final Evidence e = getBasicAuthEvidence(request);\r\n        if ((e != null)) {\r\n            try {\r\n                log.info(\"Authenticating \" + e);\r\n                final Authentication a = AuthenticationManager.authenticate(e);\r\n                if (!UsageSessionService.login(a, request)) {\r\n                    sendErrorResponse(response);\r\n                    return;\r\n                }\r\n            } catch (final Exception exc) {\r\n                sendErrorResponse(response);\r\n                return;\r\n            }\r\n        } else {\r\n            sendErrorResponse(response);\r\n            return;\r\n        }\r\n        if (!podfeedService.allowAccess(podcastsCollection)) {\r\n            response.sendError(403);\r\n        }\r\n    }\r\n    response.setContentType(RESPONSE_MIME_TYPE);\r\n    final String podcastFeed = podfeedService.generatePodcastRSS(siteId, request.getParameter(FEED_TYPE));\r\n    if (podcastFeed == null || podcastFeed.equals(\"\")) {\r\n        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\r\n    } else {\r\n        response.getWriter().write(podcastFeed);\r\n        Event event = null;\r\n        if (pubView) {\r\n            event = EventTrackingService.newEvent(EVENT_PUBLIC_FEED, podcastsCollection, false, NotificationService.NOTI_NONE);\r\n        } else {\r\n            event = EventTrackingService.newEvent(EVENT_PRIVATE_FEED, podcastsCollection, false, NotificationService.NOTI_NONE);\r\n        }\r\n        EventTrackingService.post(event);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.HierPvtMsgDataTableRender.getColumns",
	"Comment": "return an iterator over the uicolumn children of the\tspecified uidata that have a rendered\tproperty of true.",
	"Method": "Iterator getColumns(UIData data){\r\n    List results = new ArrayList();\r\n    Iterator kids = data.getChildren().iterator();\r\n    while (kids.hasNext()) {\r\n        UIComponent kid = (UIComponent) kids.next();\r\n        if ((kid instanceof UIColumn) && kid.isRendered()) {\r\n            results.add(kid);\r\n        }\r\n    }\r\n    return (results.iterator());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.sortGroups",
	"Comment": "takes groups defined and sorts them alphabetically by titleso will be in some order when displayed on permission widget.",
	"Method": "Collection sortGroups(Collection groups){\r\n    List sortGroupsList = new ArrayList();\r\n    sortGroupsList.addAll(groups);\r\n    final GroupComparator groupComparator = new GroupComparator(\"title\", true);\r\n    Collections.sort(sortGroupsList, groupComparator);\r\n    groups.clear();\r\n    groups.addAll(sortGroupsList);\r\n    return groups;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.PermissionManagerImpl.getTopicMessagePermissionForRole",
	"Comment": "get the topic message permission for a given role.this provides the permissionsthat the role currently has.",
	"Method": "MessagePermissions getTopicMessagePermissionForRole(Topic topic,String role,String typeId){\r\n    MessagePermissions permissions = topic == null || topic.getId() == null ? null : getMessagePermissionByKeyValue(role, \"topicId\", topic.getId().toString(), false);\r\n    MessagePermissions mp = new MessagePermissionsImpl();\r\n    if (permissions == null) {\r\n        return null;\r\n    } else {\r\n        mp.setDeleteAny(permissions.getDeleteAny());\r\n        mp.setDeleteOwn(permissions.getDeleteOwn());\r\n        mp.setRead(permissions.getRead());\r\n        mp.setReadDrafts(permissions.getReadDrafts());\r\n        mp.setReviseAny(permissions.getReviseAny());\r\n        mp.setReviseOwn(permissions.getReviseOwn());\r\n        mp.setMarkAsRead(permissions.getMarkAsRead());\r\n    }\r\n    mp.setRole(role);\r\n    return mp;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.SamigoEntity.editItemSettingsUrl",
	"Comment": "contents and settings. this will be null except in that situation",
	"Method": "String editItemSettingsUrl(SimplePageBean bean){\r\n    String tool = bean.getCurrentTool(\"sakai.samigo\");\r\n    if (tool == null)\r\n        return null;\r\n    if (samigo_linked)\r\n        return ServerConfigurationService.getToolUrl() + \"/\" + tool + \"/jsf/author/editLink?publishedId=\" + id + \"&settings=true\";\r\n    else\r\n        return ServerConfigurationService.getToolUrl() + \"/\" + tool + \"/jsf/index/mainIndex\";\r\n}"
}, {
	"Path": "org.sakaiproject.util.MultiSingleStorageSqlOracle.getXmlFields",
	"Comment": "returns an array of objects needed for the getxmlsql statement with limits.",
	"Method": "Object[] getXmlFields(int first,int last){\r\n    Object[] fields = new Object[2];\r\n    fields[0] = Long.valueOf(first);\r\n    fields[1] = Long.valueOf(last);\r\n    return fields;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getURL",
	"Comment": "returns the url to point your podcatcher to in order to grab the feed.",
	"Method": "String getURL(){\r\n    URL = ServerConfigurationService.getServerUrl() + Entity.SEPARATOR + FEED_URL_MIDDLE + podcastService.getSiteId();\r\n    return URL;\r\n}"
}, {
	"Path": "org.sakaiproject.hierarchy.impl.utils.HierarchyImplUtils.makeSingleEncodedNodeIdString",
	"Comment": "method to allow us to easily build an encoded string for a single node without having to create a set first",
	"Method": "String makeSingleEncodedNodeIdString(String nodeId){\r\n    if (nodeId == null || nodeId.length() == 0) {\r\n        return null;\r\n    }\r\n    return HierarchyImplUtils.SEPERATOR + nodeId + HierarchyImplUtils.SEPERATOR;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.getSessionManager",
	"Comment": "returns the instance of the sessionmanager injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "SessionManager getSessionManager(){\r\n    return sessionManager;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsMessageManagerImpl.findUnreadViewableMessageCountByTopicIdByUserId",
	"Comment": "returns count of all unread msgs for given user that have been approved or were authored by user",
	"Method": "int findUnreadViewableMessageCountByTopicIdByUserId(Long topicId,String userId){\r\n    if (topicId == null) {\r\n        log.error(\"findUnreadViewableMessageCountByTopicIdByUserId failed with topicId: null and userid: \" + userId);\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    log.debug(\"findUnreadViewableMessageCountByTopicIdByUserId executing with topicId: \" + topicId + \" userId: \" + userId);\r\n    return findViewableMessageCountByTopicIdByUserId(topicId, userId) - findReadViewableMessageCountByTopicIdByUserId(topicId, userId);\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.setSessionManager",
	"Comment": "called by the spring framework to initialize the sessionmanager data member specified in the components.xml file via ioc.",
	"Method": "void setSessionManager(SessionManager sessionManager){\r\n    this.sessionManager = sessionManager;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.removeByte",
	"Comment": "removes a byte from the blob at the requested position.\t everything else is moved up.",
	"Method": "void removeByte(int pos){\r\n    removeBytes(pos, 1);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionForumBean.getAutoMarkThreadsRead",
	"Comment": "return whether or not the forum automatically marks all posts in a topic as read.",
	"Method": "String getAutoMarkThreadsRead(){\r\n    log.debug(\"getAutoMarkThreadsRead()\");\r\n    return Boolean.toString(forum.getAutoMarkThreadsRead());\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbFlatStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be gotten.",
	"Method": "Edit editResource(String id,Edit editResource,Connection conn,String id){\r\n    Edit edit = null;\r\n    if (!m_locking) {\r\n        return (Edit) getResource(conn, id);\r\n    }\r\n    if (m_locksAreInTable) {\r\n        Entity entry = getResource(conn, id);\r\n        if (entry == null)\r\n            return null;\r\n        String statement = flatStorageSql.getInsertLockSql();\r\n        String sessionId = UsageSessionService.getSessionId();\r\n        if (sessionId == null) {\r\n            sessionId = \"\";\r\n        }\r\n        Object[] fields = new Object[4];\r\n        fields[0] = m_resourceTableName;\r\n        fields[1] = internalRecordId(caseId(id));\r\n        fields[2] = TimeService.newTime();\r\n        fields[3] = sessionId;\r\n        boolean ok = m_sql.dbWriteFailQuiet(null, statement, fields);\r\n        if (!ok) {\r\n            return null;\r\n        }\r\n        edit = (Edit) entry;\r\n    } else {\r\n        Entity entry = getResource(conn, id);\r\n        if (entry == null)\r\n            return null;\r\n        synchronized (m_locks) {\r\n            if (m_locks.containsKey(entry.getReference()))\r\n                return null;\r\n            edit = (Edit) entry;\r\n            m_locks.put(entry.getReference(), edit);\r\n        }\r\n    }\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.util.SiteEmailNotification.getResourceAbility",
	"Comment": "get the additional security function string needed for the resource that is the target of the notification \tusers who get notified need to have this ability with this resource, too.",
	"Method": "String getResourceAbility(){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.filterMessageCountsByRole",
	"Comment": "need to grab the correct count for the role user has for each site.\tuse for sites where user is not part of any group within a site.",
	"Method": "List filterMessageCountsByRole(List dfCounts){\r\n    if (dfCounts.isEmpty()) {\r\n        return dfCounts;\r\n    }\r\n    List resultList = new ArrayList();\r\n    List roles;\r\n    for (Iterator dfCountIter = dfCounts.iterator(); dfCountIter.hasNext(); ) {\r\n        final Object[] aCount = (Object[]) dfCountIter.next();\r\n        roles = getCurrentUserMembershipsBySite((String) aCount[0]);\r\n        String roleId = ((String) roles.get(0));\r\n        if (roleId.equals((String) aCount[1])) {\r\n            resultList.add(aCount);\r\n        }\r\n    }\r\n    return resultList;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BasicContentTypeImageService.getMimeSubtypes",
	"Comment": "access an ordered list of all mimetype subtypes for a particular category.",
	"Method": "List<String> getMimeSubtypes(String category){\r\n    List<String> rv = new Vector<String>();\r\n    Set<String> subtypes = (Set<String>) m_mimetypes.get(category);\r\n    if (subtypes != null) {\r\n        rv.addAll(subtypes);\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.shortAt",
	"Comment": "returns a short int reconstructed from two bytes at a specific\t location.",
	"Method": "short shortAt(int pos){\r\n    if (!between(pos, 0, (size - 2))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    short ret = 0x0, temp;\r\n    beginEnumeration(pos);\r\n    for (int x = 0; x < 2; x++) {\r\n        temp = (short) ((nextByte() << (1 * 8)) >>> (1 * 8));\r\n        ret |= (temp << (8 * (1 - x)));\r\n    }\r\n    return ret;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.isUseAnonymousId",
	"Comment": "determines whether the current user should see anonymous ids in the context of the specified topic.",
	"Method": "boolean isUseAnonymousId(Topic topic){\r\n    if (topic == null) {\r\n        throw new IllegalArgumentException(\"isUseAnonymousId invoked with null topic\");\r\n    }\r\n    if (!isAnonymousEnabled()) {\r\n        return false;\r\n    }\r\n    return topic.getPostAnonymous() && (!topic.getRevealIDsToRoles() || !uiPermissionsManager.isIdentifyAnonAuthors(topic));\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.JForumEntity.editItemSettingsUrl",
	"Comment": "contents and settings. this will be null except in that situation",
	"Method": "String editItemSettingsUrl(SimplePageBean bean){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.entityprovider.MailArchiveEntityProvider.converToDecoratedMailArchiveMessages",
	"Comment": "convert raw mailarchivemessages into decorated mailarchivemessages",
	"Method": "List<Object> converToDecoratedMailArchiveMessages(String currentUserId,String siteTitle,List<Message> mailArchiveMessages){\r\n    List<DecoratedMailArchiveMessage> DecoratedMailArchiveMessages = new ArrayList<DecoratedMailArchiveMessage>();\r\n    for (Message m : mailArchiveMessages) {\r\n        MailArchiveMessage a = (MailArchiveMessage) m;\r\n        DecoratedMailArchiveMessage da = createDecoratedMailArchiveMessage(a, siteTitle);\r\n        DecoratedMailArchiveMessages.add(da);\r\n    }\r\n    Collections.sort(DecoratedMailArchiveMessages);\r\n    Collections.reverse(DecoratedMailArchiveMessages);\r\n    List<Object> rv = new ArrayList<Object>();\r\n    rv.addAll(DecoratedMailArchiveMessages);\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.getPendingMessages",
	"Comment": "returns all messages in the site that are pending and curr user hasmoderate perm to view",
	"Method": "List getPendingMessages(){\r\n    if (refreshPendingMsgs) {\r\n        refreshPendingMessages();\r\n    }\r\n    return pendingMsgs;\r\n}"
}, {
	"Path": "org.sakaiproject.message.util.BaseMessage.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : m_serverConfigurationService.getAccessUrl()) + getReferenceRoot();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.SchedulerManagerImpl.initQuartzConfiguration",
	"Comment": "this loads the configurations for quartz.it loads the defaults from the classpath and then loads override values fromsakai.home.",
	"Method": "Properties initQuartzConfiguration(){\r\n    InputStream propertiesInputStream = null;\r\n    Properties properties = new Properties();\r\n    try {\r\n        propertiesInputStream = this.getClass().getResourceAsStream(qrtzPropFile);\r\n        properties.load(propertiesInputStream);\r\n    } finally {\r\n        if (propertiesInputStream != null) {\r\n            try {\r\n                propertiesInputStream.close();\r\n            } catch (IOException e) {\r\n                log.debug(\"Failed to close stream.\", e);\r\n            }\r\n        }\r\n    }\r\n    File file = new File(serverConfigurationService.getSakaiHomePath(), qrtzPropFileSakai);\r\n    if (file.exists() && file.isFile()) {\r\n        try {\r\n            propertiesInputStream = new FileInputStream(file);\r\n            properties.load(propertiesInputStream);\r\n            log.info(\"Loaded extra configuration from: \" + file.getAbsolutePath());\r\n        } catch (IOException e) {\r\n            log.warn(\"Failed to load file: \" + file, e);\r\n        } finally {\r\n            if (propertiesInputStream != null) {\r\n                try {\r\n                    propertiesInputStream.close();\r\n                } catch (IOException e) {\r\n                    log.debug(\"Failed to close stream.\", e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return properties;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.HttpClientWrapper.resetState",
	"Comment": "resets the http client state between requests,this is not necessarily required but might be a good idea",
	"Method": "void resetState(){\r\n    if (initialHttpState != null) {\r\n        httpClient.setState(initialHttpState);\r\n    } else {\r\n        httpClient.setState(new HttpState());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.ScormEntity.editItemSettingsUrl",
	"Comment": "contents and settings. this will be null except in that situation",
	"Method": "String editItemSettingsUrl(SimplePageBean bean){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.BasicPodfeedService.retrievePropValue",
	"Comment": "returns the property value for the property requested if stored within the\tpodcasts folder resource of the site id passed in. if not stored, retrieves\tthe value from the message bundle.",
	"Method": "String retrievePropValue(String propName,String siteId,String bundleName){\r\n    String propValue = null;\r\n    ResourceProperties rp = getPodcastCollectionProperties(siteId);\r\n    propValue = rp.getProperty(propName);\r\n    if (propValue == null || \"\".equals(propValue)) {\r\n        propValue = getMessageBundleString(bundleName);\r\n    }\r\n    return propValue;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.SakaiSecurity.unlockUsers",
	"Comment": "access the list the users who can unlock the lock for use with this resource.",
	"Method": "List<User> unlockUsers(String lock,String reference){\r\n    if (reference == null) {\r\n        log.warn(\"unlockUsers(): null resource: \" + lock);\r\n        return new Vector<User>();\r\n    }\r\n    Reference ref = entityManager().newReference(reference);\r\n    Collection<String> realms = ref.getAuthzGroups();\r\n    List<String> ids = new Vector<String>();\r\n    ids.addAll(authzGroupService().getUsersIsAllowed(lock, realms));\r\n    List<User> users = userDirectoryService().getUsers(ids);\r\n    Collections.sort(users);\r\n    return users;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.model.GbModalWindow.getAssignmentToReturnFocusTo",
	"Comment": "get the assignment to return focus to upon closing the window.",
	"Method": "String getAssignmentToReturnFocusTo(){\r\n    return this.assignmentIdToReturnFocusTo;\r\n}"
}, {
	"Path": "org.sakaiproject.login.tool.SkinnableLogin.getPasswordResetUrl",
	"Comment": "gets the password reset url. if looks for a configured url, otherwise it looks\tfor the password reset tool in the gateway site and builds a link to that.",
	"Method": "String getPasswordResetUrl(){\r\n    String passwordResetUrl = serverConfigurationService.getString(\"login.password.reset.url\", null);\r\n    if (passwordResetUrl == null) {\r\n        String gatewaySiteId = serverConfigurationService.getGatewaySiteId();\r\n        try {\r\n            Site gatewaySite = siteService.getSite(gatewaySiteId);\r\n            ToolConfiguration resetTC = gatewaySite.getToolForCommonId(\"sakai.resetpass\");\r\n            if (resetTC != null) {\r\n                passwordResetUrl = resetTC.getContainingPage().getUrl();\r\n            }\r\n        } catch (IdUnusedException iue) {\r\n            log.warn(\"No \" + gatewaySiteId + \" site found whilst building password reset url, set password.reset.url\" + \" or create \" + gatewaySiteId + \" and add password reset tool.\");\r\n        }\r\n    }\r\n    return passwordResetUrl;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityEncodingManager.internalOutputFormatter",
	"Comment": "format entities for output based on the reference into a format,use the provided list or get the entities",
	"Method": "void internalOutputFormatter(EntityReference ref,String format,List<EntityData> entities,Map<String, Object> params,OutputStream output,EntityView view){\r\n    if (format == null) {\r\n        format = Outputable.HTML;\r\n    }\r\n    if (!ReflectUtils.contains(HANDLED_OUTPUT_FORMATS, format)) {\r\n        throw new FormatUnsupportedException(\"Internal output formatter cannot handle format (\" + format + \") for ref (\" + ref + \")\", ref + \"\", format);\r\n    }\r\n    if (view == null) {\r\n        view = entityBrokerManager.makeEntityView(ref, null, null);\r\n    }\r\n    if (entities == null) {\r\n        entities = entityBrokerManager.getEntitiesData(ref, new Search(), params);\r\n    }\r\n    if (entities.isEmpty()) {\r\n        log.debug(\"EntityEncodingManager: No entities to format (\" + format + \") and output for ref (\" + ref + \")\");\r\n    }\r\n    String replacementEncoding = null;\r\n    if (Formats.FORM.equals(format) && !entityBrokerManager.getExternalIntegrationProvider().getConfigurationSetting(EntityBatchHandler.CONFIG_BATCH_ENABLE, EntityBatchHandler.CONFIG_BATCH_DEFAULT)) {\r\n        String msg = \"FORM editing is not enabled because the batch provider is disabled by sakai config: \" + EntityBatchHandler.CONFIG_BATCH_ENABLE + \"=false. Enable this config setting with \" + EntityBatchHandler.CONFIG_BATCH_ENABLE + \"=true to enable batch handling. See SAK-22619 for details.\";\r\n        replacementEncoding = \"<div style=\\\"font-weight:bold;color:red;\\\">\" + msg + \"<\/div>\";\r\n    }\r\n    String encoded = null;\r\n    if (EntityView.VIEW_LIST.equals(view.getViewKey()) || ref.getId() == null) {\r\n        StringBuilder sb = new StringBuilder(40);\r\n        if (Formats.HTML.equals(format) || Formats.FORM.equals(format)) {\r\n            sb.append(\"<h1>\" + ref.getPrefix() + COLLECTION + \"<\/h1>\\n\");\r\n        } else if (Formats.JSON.equals(format) || Formats.JSONP.equals(format)) {\r\n            sb.append(\"{\\\"\" + ENTITY_PREFIX + \"\\\": \\\"\" + ref.getPrefix() + \"\\\", \\\"\" + ref.getPrefix() + COLLECTION + \"\\\": [\\n\");\r\n        } else if (Formats.XML.equals(format)) {\r\n            sb.append(\"<\" + ref.getPrefix() + COLLECTION + \" \" + ENTITY_PREFIX + \"=\\\"\" + ref.getPrefix() + \"\\\">\\n\");\r\n        } else {\r\n            sb.append(ref.getPrefix() + COLLECTION + \"\\n\");\r\n        }\r\n        int encodedEntities = 0;\r\n        if (replacementEncoding != null) {\r\n            sb.append(replacementEncoding);\r\n        } else {\r\n            for (EntityData entity : entities) {\r\n                try {\r\n                    String encode = encodeEntity(ref.getPrefix(), format, entity, view);\r\n                    if (encode.length() > 3) {\r\n                        if ((Formats.JSON.equals(format) || Formats.JSONP.equals(format)) && encodedEntities > 0) {\r\n                            sb.append(\",\");\r\n                        }\r\n                        sb.append(encode);\r\n                        encodedEntities++;\r\n                    }\r\n                } catch (RuntimeException e) {\r\n                    throw new EntityEncodingException(\"Failure during internal output encoding of entity set on entity: \" + ref, ref.toString(), e);\r\n                }\r\n            }\r\n        }\r\n        if (Formats.HTML.equals(format) || Formats.FORM.equals(format)) {\r\n            sb.append(\"\\n<b>Collection size:<\/b> \" + encodedEntities + \"\\n\");\r\n        } else if (Formats.JSON.equals(format) || Formats.JSONP.equals(format)) {\r\n            sb.append(\"\\n]}\");\r\n        } else if (Formats.XML.equals(format)) {\r\n            sb.append(\"<\/\" + ref.getPrefix() + COLLECTION + \">\");\r\n        } else {\r\n            sb.append(\"\\nSize: \" + encodedEntities + \"\\n\");\r\n        }\r\n        encoded = sb.toString();\r\n    } else {\r\n        EntityData toEncode = entities.get(0);\r\n        if (replacementEncoding != null) {\r\n            encoded = replacementEncoding;\r\n        } else {\r\n            if (toEncode == null) {\r\n                throw new EntityEncodingException(\"Failed to encode data for entity (\" + ref + \"), entity object to encode could not be found (null object in list)\", ref.toString());\r\n            } else {\r\n                try {\r\n                    encoded = encodeEntity(ref.getPrefix(), format, toEncode, view);\r\n                } catch (RuntimeException e) {\r\n                    throw new EntityEncodingException(\"Failure during internal output encoding of entity: \" + ref, ref.toString(), e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (Formats.FORM.equals(format)) {\r\n        String title = view.getViewKey() + \":\" + ref;\r\n        encoded = XML_HEADER + XHTML_HEADER.replace(\"{title}\", title) + encoded + XHTML_FOOTER;\r\n    } else if (Formats.XML.equals(format)) {\r\n        encoded = XML_HEADER + encoded;\r\n    } else if (Formats.JSONP.equals(format)) {\r\n        String callback = JSON_DEFAULT_CALLBACK;\r\n        if (params != null && params.containsKey(JSON_CALLBACK_PARAM)) {\r\n            callback = sanitizeJsonCallback(params.get(JSON_CALLBACK_PARAM));\r\n        }\r\n        encoded = callback + \"(\" + encoded + \")\";\r\n    }\r\n    try {\r\n        byte[] b = encoded.getBytes(Formats.UTF_8);\r\n        output.write(b);\r\n    } catch (UnsupportedEncodingException e) {\r\n        throw new EntityEncodingException(\"Failed to encode UTF-8: \" + ref, ref.toString(), e);\r\n    } catch (IOException e) {\r\n        throw new EntityEncodingException(\"Failed to encode into output stream: \" + ref, ref.toString(), e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.Validator.escapeQuestionMark",
	"Comment": "return a string based on id that is fully escaped the question mark.",
	"Method": "String escapeQuestionMark(String id){\r\n    if (id == null)\r\n        return \"\";\r\n    try {\r\n        StringBuilder buf = new StringBuilder();\r\n        for (int i = 0; i < id.length(); i++) {\r\n            char c = id.charAt(i);\r\n            if (c == '?') {\r\n                buf.append('_');\r\n            } else {\r\n                buf.append(c);\r\n            }\r\n        }\r\n        String rv = buf.toString();\r\n        return rv;\r\n    } catch (Exception e) {\r\n        log.warn(\"Validator.escapeQuestionMark: \", e);\r\n        return \"\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionTopicBean.getRestrictPermissionsForGroups",
	"Comment": "return whether or not the topic will use specific group permissions.",
	"Method": "String getRestrictPermissionsForGroups(){\r\n    log.debug(\"getRestrictPermissionsForGroups()\");\r\n    return Boolean.toString(topic.getRestrictPermissionsForGroups());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.isAnyMFToolInSite",
	"Comment": "determines if any mf tool in site. variable is transient to be per request.",
	"Method": "boolean isAnyMFToolInSite(){\r\n    if (anyMFToolInSite == null) {\r\n        anyMFToolInSite = isMessageForumsPageInSite() || isMessagesPageInSite() || isForumsPageInSite();\r\n    }\r\n    return anyMFToolInSite;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ExternalLogicImpl.isEmailArchiveAddedToSite",
	"Comment": "check that the email archive has been added to the current site",
	"Method": "boolean isEmailArchiveAddedToSite(){\r\n    boolean hasEmailArchive = false;\r\n    String toolid = \"sakai.mailbox\";\r\n    try {\r\n        String siteId = toolManager.getCurrentPlacement().getContext();\r\n        Site site = siteService.getSite(siteId);\r\n        Collection<?> toolsInSite = site.getTools(toolid);\r\n        if (!toolsInSite.isEmpty()) {\r\n            hasEmailArchive = true;\r\n        }\r\n    } catch (Exception e) {\r\n        log.debug(\"Exception: OptionsBean.isEmailArchiveAddedToSite(), \" + e.getMessage());\r\n    }\r\n    return hasEmailArchive;\r\n}"
}, {
	"Path": "org.sakaiproject.util.PasswordCheck.isAcceptableLength",
	"Comment": "method for checking the length of a password is within the bounds",
	"Method": "boolean isAcceptableLength(String passwd,int min,int max){\r\n    if (StringUtils.isBlank(passwd)) {\r\n        return false;\r\n    }\r\n    if (min > max) {\r\n        log.error(\"Invalid bounds supplied, min (\" + min + \") is greater than max (\" + max + \")\");\r\n    }\r\n    int length = passwd.length();\r\n    IntRange range = new IntRange(min, max);\r\n    if (range.containsInteger(length)) {\r\n        log.debug(\"Range ok\");\r\n        return true;\r\n    }\r\n    log.debug(\"Range bad; min=\" + min + \", max=\" + max + \", length=\" + length);\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere3Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere3Sql(){\r\n    return \"SAKAI_SITE.IS_SPECIAL = '0' and \";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getPodcastFolderExists",
	"Comment": "determines if the podcast folder exists. if it does not, it will attempt\tto create it.",
	"Method": "boolean getPodcastFolderExists(){\r\n    boolean podcastFolderExists = false;\r\n    if (getResourceToolExists()) {\r\n        try {\r\n            podcastFolderExists = podcastService.checkPodcastFolder();\r\n        } catch (InUseException e) {\r\n            log.info(\"InUseException while attempting to determine if podcast folder exists.\" + \" for site \" + podcastService.getSiteId(), e);\r\n            setErrorMessage(INTERNAL_ERROR_ALERT);\r\n        } catch (PermissionException e) {\r\n            log.warn(\"PermissionException while attempting to determine if podcast folder exists.\" + \" for site \" + podcastService.getSiteId(), e);\r\n            setErrorMessage(PERMISSION_ALERT);\r\n        }\r\n    } else if (!getCanUpdateSite()) {\r\n        podcastFolderExists = true;\r\n    }\r\n    return podcastFolderExists;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.model.GbGradebookData.buildCategoryMap",
	"Comment": "helper to build a map of category id to category, so we can find the correct category to be displayed in the table later",
	"Method": "void buildCategoryMap(){\r\n    this.categories.forEach(c -> {\r\n        this.categoryMap.put(c.getId(), c);\r\n    });\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.SimplePageItemImpl.getAttribute",
	"Comment": "this is the getter i want everyone else to use for attributes.",
	"Method": "String getAttribute(String attr){\r\n    return (String) attributes.get(attr);\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ConfigLogicImpl.isDisplayEmptyGroups",
	"Comment": "retrieve the display empty groups option from the tool config.",
	"Method": "boolean isDisplayEmptyGroups(Properties props){\r\n    boolean displayEmptyGroups = true;\r\n    String displayemptygroups = props.getProperty(ConfigParams.displayemptygroups.name());\r\n    if (displayemptygroups != null) {\r\n        displayEmptyGroups = parseConfigBoolean(displayemptygroups);\r\n    } else {\r\n        displayEmptyGroups = serverConfigurationService.getBoolean(DISPLAY_EMPTY_GROUPS, true);\r\n    }\r\n    return displayEmptyGroups;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.enumerateBytes",
	"Comment": "returns an enumeration of the bytes in this blob.\t the objects returned from the calls to nextelement are\t of type byte.",
	"Method": "Enumeration enumerateBytes(int pos){\r\n    if (!between(pos, 0, (size - 1))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    final int cep = seek(pos);\r\n    final BlobNode cen = curr;\r\n    return new Enumeration() {\r\n        int currEnumerationPos = cep;\r\n        BlobNode currEnumerationNode = cen;\r\n        public synchronized boolean hasMoreElements() {\r\n            return (currEnumerationNode != null);\r\n        }\r\n        public synchronized Object nextElement() {\r\n            if (currEnumerationNode == null) {\r\n                throw new NoSuchElementException(\"Past end of current Enumeration\");\r\n            }\r\n            byte ret = currEnumerationNode.data[currEnumerationPos++];\r\n            if (currEnumerationPos == currEnumerationNode.size) {\r\n                currEnumerationNode = currEnumerationNode.next;\r\n                currEnumerationPos = 0;\r\n            }\r\n            return Byte.valueOf(ret);\r\n        }\r\n    };\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.enumerateBytes",
	"Comment": "returns an enumeration of the bytes in this blob.\t the objects returned from the calls to nextelement are\t of type byte.",
	"Method": "Enumeration enumerateBytes(int pos){\r\n    return (currEnumerationNode != null);\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.enumerateBytes",
	"Comment": "returns an enumeration of the bytes in this blob.\t the objects returned from the calls to nextelement are\t of type byte.",
	"Method": "Enumeration enumerateBytes(int pos){\r\n    if (currEnumerationNode == null) {\r\n        throw new NoSuchElementException(\"Past end of current Enumeration\");\r\n    }\r\n    byte ret = currEnumerationNode.data[currEnumerationPos++];\r\n    if (currEnumerationPos == currEnumerationNode.size) {\r\n        currEnumerationNode = currEnumerationNode.next;\r\n        currEnumerationPos = 0;\r\n    }\r\n    return Byte.valueOf(ret);\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.PermissionLevelManagerImpl.createDefaultPermissionLevel",
	"Comment": "populates the permission level data for the case when the default permission levels\tare being created, not the custom levels",
	"Method": "PermissionLevel createDefaultPermissionLevel(String name,String typeUuid,PermissionsMask mask){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"createDefaultPermissionLevel executing(\" + name + \",\" + typeUuid + \",\" + mask + \")\");\r\n    }\r\n    if (name == null || typeUuid == null || mask == null) {\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    PermissionLevel newPermissionLevel = new PermissionLevelImpl();\r\n    Date now = new Date();\r\n    newPermissionLevel.setName(name);\r\n    newPermissionLevel.setUuid(idManager.createUuid());\r\n    newPermissionLevel.setCreated(now);\r\n    newPermissionLevel.setCreatedBy(\"admin\");\r\n    newPermissionLevel.setModified(now);\r\n    newPermissionLevel.setModifiedBy(\"admin\");\r\n    newPermissionLevel.setTypeUuid(typeUuid);\r\n    for (Iterator<Entry<String, Boolean>> i = mask.entrySet().iterator(); i.hasNext(); ) {\r\n        Entry<String, Boolean> entry = i.next();\r\n        String key = entry.getKey();\r\n        Boolean value = entry.getValue();\r\n        try {\r\n            PropertyUtils.setSimpleProperty(newPermissionLevel, key, value);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    return newPermissionLevel;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.util.StorageConverter.getFileSystemHandler",
	"Comment": "creates the filesystemhandler and set all its properties.will also call the init method if it exists.",
	"Method": "FileSystemHandler getFileSystemHandler(Properties p,String fileSystemHandlerName){\r\n    String clazz = p.getProperty(fileSystemHandlerName);\r\n    log.info(\"Building FileSystemHandler: \" + clazz);\r\n    Class<? extends FileSystemHandler> fshClass = Class.forName(clazz).asSubclass(FileSystemHandler.class);\r\n    FileSystemHandler fsh = fshClass.newInstance();\r\n    Enumeration<String> propertyNames = (Enumeration<String>) p.propertyNames();\r\n    while (propertyNames.hasMoreElements()) {\r\n        String fullProperty = propertyNames.nextElement();\r\n        if (fullProperty.startsWith(fileSystemHandlerName + \".\")) {\r\n            String property = fullProperty.substring(fullProperty.indexOf(\".\") + 1);\r\n            log.info(\"Setting property: \" + property);\r\n            BeanUtils.setProperty(fsh, property, p.getProperty(fullProperty));\r\n        }\r\n    }\r\n    try {\r\n        log.info(\"Check if there is a init method...\");\r\n        MethodUtils.invokeExactMethod(fsh, \"init\", (Object[]) null);\r\n        log.info(\"init method invoked...\");\r\n    } catch (NoSuchMethodException e) {\r\n        log.info(\"No init method...\");\r\n    }\r\n    log.info(\"Done with FileSystemHandler: \" + clazz);\r\n    return fsh;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlService.setDatabaseBeans",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setDatabaseBeans(Map databaseBeans){\r\n    this.databaseBeans = databaseBeans;\r\n}"
}, {
	"Path": "org.sakaiproject.util.ComponentBuilder.isUseable",
	"Comment": "verifies that this builder has a reasonable chance at performing\tits work, i.e. can at least attempt to compile generated source code.",
	"Method": "boolean isUseable(){\r\n    return compiler.isUseable();\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.ClusterEventTracking.postEvent",
	"Comment": "cause this new event to get to wherever it has to go for persistence, etc.",
	"Method": "void postEvent(Event event){\r\n    ((BaseEvent) event).m_time = new Date();\r\n    try {\r\n        notifyObservers(event, true);\r\n    } catch (Exception t) {\r\n        log.warn(\"postEvent, notifyObservers(), event: {}\", event.toString(), t);\r\n    }\r\n    if (m_batchWrite) {\r\n        synchronized (m_eventQueue) {\r\n            m_eventQueue.add(event);\r\n        }\r\n    } else {\r\n        writeEvent(event, null);\r\n    }\r\n    log.debug(\"{}{}\", m_logId, event);\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseRole.exportToSimpleRole",
	"Comment": "exports the contents of baserole to a primitive map, which can be serialized\tif necessary to support terracotta cluster caching.baserole cannot be serialized by\tterracotta because of classloader issues.",
	"Method": "SimpleRole exportToSimpleRole(){\r\n    SimpleRole role = new SimpleRole();\r\n    role.setId(m_id);\r\n    role.setLocks(m_locks);\r\n    role.setDescription(m_description);\r\n    role.setProviderOnly(m_providerOnly);\r\n    role.setActive(m_active);\r\n    return role;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.importExport.GradeItemImportSelectionStep.createCommentMap",
	"Comment": "map a gradebook item to its comment column, if any. all gb items will have an entry, the value may be null if there are no comments.\tentries are keyed on the gradebook item title.",
	"Method": "Map<String, ProcessedGradeItem> createCommentMap(List<ProcessedGradeItem> items){\r\n    final List<ProcessedGradeItem> gbItems = filterListByType(items, Type.GB_ITEM);\r\n    final List<ProcessedGradeItem> commentItems = filterListByType(items, Type.COMMENT);\r\n    final Map<String, ProcessedGradeItem> rval = new HashMap();\r\n    gbItems.forEach(gbItem -> {\r\n        final ProcessedGradeItem commentItem = commentItems.stream().filter(item -> StringUtils.equalsIgnoreCase(item.getItemTitle(), gbItem.getItemTitle())).findFirst().orElse(null);\r\n        rval.put(gbItem.getItemTitle(), commentItem);\r\n    });\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere14Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere14Sql(){\r\n    return \"SAKAI_SITE.CREATEDBY = SAKAI_USER_ID_MAP.USER_ID and \";\r\n}"
}, {
	"Path": "org.sakaiproject.memory.util.EhCacheFactoryBean.setDiskSpoolBufferSize",
	"Comment": "set the amount of memory to allocate the write buffer for puts to the disk store.\tdefault is 0.",
	"Method": "void setDiskSpoolBufferSize(int diskSpoolBufferSize){\r\n    this.diskSpoolBufferSize = diskSpoolBufferSize;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.AjaxServer.groupErrors",
	"Comment": "argument is comma separated list, locale, site, group, group ...",
	"Method": "String groupErrors(String siteId,String locale,String groupString){\r\n    locale = locale.trim();\r\n    if (locale.length() == 0)\r\n        locale = null;\r\n    if (siteId == null)\r\n        siteId = \"\";\r\n    siteId = siteId.trim();\r\n    String ref = \"/site/\" + siteId;\r\n    if (!SecurityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref))\r\n        return getMessage(\"simplepage.nowrite\", locale);\r\n    if (groupString == null)\r\n        groupString = \"\";\r\n    Map<String, Set<String>> user2groups = new HashMap<String, Set<String>>();\r\n    Set<String> overlapGroups = new HashSet<String>();\r\n    String[] groupIdArray = groupString.trim().split(\",\");\r\n    List<String> groupIds = new ArrayList<String>();\r\n    for (String g : groupIdArray) {\r\n        g = g.trim();\r\n        if (g.length() > 0)\r\n            groupIds.add(g);\r\n    }\r\n    Site site = null;\r\n    Collection<String> users = null;\r\n    Collection<Group> groups = null;\r\n    try {\r\n        site = siteService.getSite(siteId);\r\n        String siteRef = site.getReference();\r\n        HashSet<String> siteGroup = new HashSet<String>();\r\n        siteGroup.add(\"/site/\" + siteId);\r\n        List<User> userList = SecurityService.unlockUsers(\"section.role.student\", siteRef);\r\n        for (User user : userList) {\r\n            user2groups.put(user.getId(), null);\r\n        }\r\n        if (groupIds.size() > 0) {\r\n            groups = new HashSet<Group>();\r\n            for (String groupId : groupIds) {\r\n                groups.add(site.getGroup(groupId));\r\n            }\r\n        } else\r\n            groups = site.getGroups();\r\n        for (Group group : groups) {\r\n            users = group.getUsers();\r\n            for (String groupUser : users) {\r\n                Set<String> userGroups = user2groups.get(groupUser);\r\n                if (userGroups != null) {\r\n                    userGroups.add(group.getId());\r\n                    overlapGroups.addAll(userGroups);\r\n                } else {\r\n                    userGroups = new HashSet<String>();\r\n                    userGroups.add(group.getId());\r\n                    user2groups.put(groupUser, userGroups);\r\n                }\r\n            }\r\n        }\r\n        String retmessage = null;\r\n        if (overlapGroups.size() > 0) {\r\n            String overlaps = \"\";\r\n            for (String groupId : overlapGroups) {\r\n                Group group = site.getGroup(groupId);\r\n                overlaps += \", \" + group.getTitle();\r\n            }\r\n            retmessage = getMessage(\"simplepage.groupcheckoverlaps\", locale).replace(\"{}\", overlaps.substring(2));\r\n        }\r\n        String missing = \"\";\r\n        for (Map.Entry<String, Set<String>> entry : user2groups.entrySet()) {\r\n            if (entry.getValue() == null) {\r\n                String eid = UserDirectoryService.getUserEid(entry.getKey());\r\n                missing += \", \" + eid;\r\n            }\r\n        }\r\n        if (missing.length() > 1) {\r\n            if (retmessage == null)\r\n                retmessage = \"\";\r\n            else\r\n                retmessage += \"\\n\\n\";\r\n            retmessage += getMessage(\"simplepage.groupchecknogroups\", locale).replace(\"{}\", missing.substring(2));\r\n        }\r\n        if (retmessage != null)\r\n            return \"\\n\\n\" + retmessage + \"\\n\\n\" + getMessage(\"simplepage.insist\", locale);\r\n        else\r\n            return \"ok\";\r\n    } catch (Exception e) {\r\n        return getMessage(\"simplepage.groupcheckfailed\", locale).replace(\"{}\", e.toString());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.SakaiMessageHandlerTest.testMultipleSiteIdAccept",
	"Comment": "check that sending to multiple addressess at the same time works.",
	"Method": "void testMultipleSiteIdAccept(){\r\n    User sender = mock(User.class);\r\n    when(userDirectoryService.findUsersByEmail(\"sender@example.com\")).thenReturn(Collections.singleton(sender));\r\n    MailArchiveChannel channel1 = mock(MailArchiveChannel.class);\r\n    when(channel1.getEnabled()).thenReturn(true);\r\n    when(channel1.getOpen()).thenReturn(false);\r\n    when(channel1.allowAddMessage(sender)).thenReturn(true);\r\n    when(channel1.getId()).thenReturn(\"channelId\");\r\n    when(channel1.getContext()).thenReturn(\"siteId1\");\r\n    MailArchiveChannel channel2 = mock(MailArchiveChannel.class);\r\n    when(channel2.getEnabled()).thenReturn(true);\r\n    when(channel2.getOpen()).thenReturn(false);\r\n    when(channel2.allowAddMessage(sender)).thenReturn(true);\r\n    when(channel2.getId()).thenReturn(\"channelId\");\r\n    when(channel2.getContext()).thenReturn(\"siteId2\");\r\n    when(mailArchiveService.channelReference(\"siteId1\", SiteService.MAIN_CONTAINER)).thenReturn(\"/site/siteId1\");\r\n    when(mailArchiveService.getMailArchiveChannel(\"/site/siteId1\")).thenReturn(channel1);\r\n    when(mailArchiveService.channelReference(\"siteId2\", SiteService.MAIN_CONTAINER)).thenReturn(\"/site/siteId2\");\r\n    when(mailArchiveService.getMailArchiveChannel(\"/site/siteId2\")).thenReturn(channel2);\r\n    SmartClient client = createClient();\r\n    client.from(\"sender@example.com\");\r\n    client.to(\"siteId1@sakai.example.com\");\r\n    client.to(\"siteId2@sakai.example.com\");\r\n    writeData(client, \"/simple-email.txt\");\r\n    verify(channel1, times(1)).addMailArchiveMessage(anyString(), eq(\"sender@example.com\"), any(), any(), any(), any());\r\n    verify(channel2, times(1)).addMailArchiveMessage(anyString(), eq(\"sender@example.com\"), any(), any(), any(), any());\r\n}"
}, {
	"Path": "org.sakaiproject.calendaring.ExternalCalendaringServiceTest.testGeneratingEvent",
	"Comment": "ensure the event generation works and returns a usable object. internal test method, but useful.",
	"Method": "void testGeneratingEvent(){\r\n    CalendarEvent event = generateEvent();\r\n    Assert.assertNotNull(event);\r\n    Assert.assertEquals(LOCATION, event.getLocation());\r\n    Assert.assertEquals(DESCRIPTION, event.getDescription());\r\n    Assert.assertEquals(EVENT_NAME, event.getDisplayName());\r\n    Assert.assertEquals(CREATOR, event.getCreator());\r\n}"
}, {
	"Path": "org.sakaiproject.util.EditorConfiguration.getWysiwigEditor",
	"Comment": "access the identifier for the editor currently in use.this value is\tsupplied by the serverconfigurationservice and uniquely identifies a \tparticular editor supported by sakai.",
	"Method": "String getWysiwigEditor(){\r\n    return ServerConfigurationService.getString(\"wysiwyg.editor\");\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getGradebook",
	"Comment": "helper to get a reference to the gradebook for the specified site",
	"Method": "Gradebook getGradebook(Gradebook getGradebook,String siteId){\r\n    Gradebook gradebook = null;\r\n    try {\r\n        gradebook = (Gradebook) this.gradebookService.getGradebook(siteId);\r\n    } catch (final GradebookNotFoundException e) {\r\n        log.debug(\"Request made for inaccessible, adding gradebookUid={}\", siteId);\r\n        this.gradebookFrameworkService.addGradebook(siteId, siteId);\r\n        try {\r\n            gradebook = (Gradebook) this.gradebookService.getGradebook(siteId);\r\n        } catch (final GradebookNotFoundException e2) {\r\n            log.error(\"Request made and could not add inaccessible gradebookUid={}\", siteId);\r\n        }\r\n    }\r\n    return gradebook;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere10Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere10Sql(){\r\n    return \"SAKAI_SITE_USER.PERMISSION <= -1 and \";\r\n}"
}, {
	"Path": "org.sakaiproject.component.cover.TestComponentManagerContainer.generateSiteId",
	"Comment": "convenience method to create a somewhat unique site id for testing.useful\tin tests that need to create a site to run tests upon.",
	"Method": "String generateSiteId(){\r\n    return \"site-\" + getClass().getName() + \"-\" + Math.floor(Math.random() * 100000);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.getShowShortDescription",
	"Comment": "returns if the property mc.showshortdescription is set to true or false. default value is true",
	"Method": "boolean getShowShortDescription(){\r\n    return showShortDescription;\r\n}"
}, {
	"Path": "org.sakaiproject.test.SakaiKernelTestBase.getService",
	"Comment": "get a service bean from the component manager by its unique interface.",
	"Method": "Object getService(String beanId,T getService,Class<T> clazz){\r\n    return (T) testComponentManagerContainer.getService(clazz.getName());\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseUsageSession.invalidate",
	"Comment": "called when logging out, when timed out, and when being\tcleaned up after a server crash.",
	"Method": "void invalidate(){\r\n    if (!isClosed()) {\r\n        close();\r\n        this.usageSessionServiceAdaptor.logoutEvent(this);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionForumBean.getRestrictPermissionsForGroups",
	"Comment": "return whether or not the forum will use specific group permissions.",
	"Method": "String getRestrictPermissionsForGroups(){\r\n    log.debug(\"getRestrictPermissionsForGroups()\");\r\n    return Boolean.toString(forum.getRestrictPermissionsForGroups());\r\n}"
}, {
	"Path": "org.sakaiproject.util.ToolListenerTest.testMultipleRegistrations",
	"Comment": "check multiple registrations work across multiple locations.",
	"Method": "void testMultipleRegistrations(){\r\n    when(context.getResourcePaths(\"/tools/\")).thenReturn(Stream.of(\"/tools/\", \"/tools/sakai-tool.xml\").collect(Collectors.toSet()));\r\n    when(context.getResourcePaths(\"/WEB-INF/tools/\")).thenReturn(Stream.of(\"/WEB-INF/tools/\", \"/WEB-INF/tools/sakai-tool.xml\", \"/WEB-INF/tools/another-tool.xml\").collect(Collectors.toSet()));\r\n    InputStream inputStream = mock(InputStream.class);\r\n    when(context.getResourceAsStream(anyString())).thenReturn(inputStream);\r\n    listener.contextInitialized(event);\r\n    verify(activeToolManager, times(3)).register(inputStream, context);\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.model.TreeLevel.addChild",
	"Comment": "utility reciprocal method to add a child when it chooses this as its parent.",
	"Method": "int addChild(TreeLevel child){\r\n    childList.add(child);\r\n    return childList.size();\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.getExtension",
	"Comment": "return lowercase version, since we want uppercase versiosns to match",
	"Method": "String getExtension(String name){\r\n    int i = name.lastIndexOf(\"/\");\r\n    if (i >= 0)\r\n        name = name.substring(i + 1);\r\n    String extension = \"\";\r\n    i = name.lastIndexOf(\".\");\r\n    if (i > 0)\r\n        extension = name.substring(i + 1);\r\n    extension = extension.trim();\r\n    extension = extension.toLowerCase();\r\n    return extension;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsMessageManagerImpl.findReadViewableMessageCountByTopicIdByUserId",
	"Comment": "returns count of all read msgs for given user that have been approved orwere authored by user",
	"Method": "int findReadViewableMessageCountByTopicIdByUserId(Long topicId,String userId){\r\n    if (topicId == null || userId == null) {\r\n        log.error(\"findReadViewableMessageCountByTopicIdByUserId failed with topicId: \" + topicId + \" and userId: \" + userId);\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    log.debug(\"findReadViewableMessageCountByTopicIdByUserId executing with topicId: \" + topicId + \" and userId: \" + userId);\r\n    HibernateCallback<Number> hcb = session -> {\r\n        Query q = session.getNamedQuery(QUERY_COUNT_READ_VIEWABLE_BY_TOPIC_ID);\r\n        q.setLong(\"topicId\", topicId);\r\n        q.setString(\"userId\", userId);\r\n        return (Number) q.uniqueResult();\r\n    };\r\n    return getHibernateTemplate().execute(hcb).intValue();\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.insertByte",
	"Comment": "inserts a byte into the blob at the position pos.\t everything else is moved back.",
	"Method": "void insertByte(int pos,byte b){\r\n    byte[] arr = new byte[1];\r\n    arr[0] = b;\r\n    insertBytes(pos, arr, 0, 1);\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.DbAuthzGroupService.setDbAuthzGroupSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setDbAuthzGroupSql(String vendor){\r\n    this.dbAuthzGroupSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.canModifyComment",
	"Comment": "admins can always edit.authors can edit for 30 minutes.\t the second parameter is only used to distinguish this method from\t the one directly below it.allowing commentsproducer to cache whether\t or not the current user can edit the page, without having to hit the\t database each time.",
	"Method": "boolean canModifyComment(SimplePageComment c,boolean canEditPage,boolean canModifyComment,SimplePageComment c){\r\n    return canModifyComment(c, canEditPage());\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getAssignmentSortOrder",
	"Comment": "get the sort order of an assignment. if the assignment has a sort order, use that. otherwise we determine the order of the assignment\tin the list of assignments\tthis means that we can always determine the most current sort order for an assignment, even if the list has never been sorted.",
	"Method": "int getAssignmentSortOrder(long assignmentId){\r\n    final String siteId = getCurrentSiteId();\r\n    final Gradebook gradebook = getGradebook(siteId);\r\n    if (gradebook != null) {\r\n        final Assignment assignment = this.gradebookService.getAssignment(gradebook.getUid(), assignmentId);\r\n        if (assignment.getSortOrder() != null) {\r\n            return assignment.getSortOrder();\r\n        }\r\n        final List<Assignment> assignments = this.getGradebookAssignments(siteId);\r\n        for (int i = 0; i < assignments.size(); i++) {\r\n            final Assignment a = assignments.get(i);\r\n            if (assignmentId == a.getId() && a.getSortOrder() != null) {\r\n                return a.getSortOrder();\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseNotificationService.notificationUrl",
	"Comment": "access the external url which can be used to access the resource from outside the system.",
	"Method": "String notificationUrl(String id){\r\n    return getAccessPoint(false) + Entity.SEPARATOR + id;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.isInDropbox",
	"Comment": "check whether an id would identify an entity in a dropbox.does not determine existence of the entity, just whether its id indicates it is a dropbox or contained within a dropbox.",
	"Method": "boolean isInDropbox(String entityId){\r\n    return entityId.startsWith(\"/group-user\");\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.ClusterEventTracking.initLastEvent",
	"Comment": "check the db for the largest event seq number, and set this as the one after which we will next get event.",
	"Method": "void initLastEvent(){\r\n    String statement = clusterEventTrackingServiceSql.getMaxEventIdSql();\r\n    sqlService().dbRead(statement, null, new SqlReader() {\r\n        public Object readSqlResultRecord(ResultSet result) {\r\n            try {\r\n                m_lastEventSeq = result.getLong(1);\r\n            } catch (SQLException ignore) {\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n    log.debug(\"Starting (after) Event #: {}\", m_lastEventSeq);\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.ClusterEventTracking.initLastEvent",
	"Comment": "check the db for the largest event seq number, and set this as the one after which we will next get event.",
	"Method": "void initLastEvent(){\r\n    try {\r\n        m_lastEventSeq = result.getLong(1);\r\n    } catch (SQLException ignore) {\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.hierarchy.impl.utils.HierarchyImplUtils.makeNodeIdSet",
	"Comment": "make a set of node ids from an encoded string of nodeids,will not throw exception or return null",
	"Method": "Set<String> makeNodeIdSet(String encodedNodeIds){\r\n    Set<String> s = new TreeSet<String>();\r\n    if (encodedNodeIds != null) {\r\n        String[] split = encodedNodeIds.split(String.valueOf(SEPERATOR));\r\n        if (split.length > 0) {\r\n            for (int i = 0; i < split.length; i++) {\r\n                if (split[i] != null && !split[i].equals(\"\")) {\r\n                    s.add(split[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return s;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.DbContentService.setContentServiceSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setContentServiceSql(String vendor){\r\n    this.contentServiceSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.HierDataTableRender.getRowClasses",
	"Comment": "return an array of stylesheet classes to be applied to each row in the table, in the order specified. every row may or may not have a stylesheet.",
	"Method": "String[] getRowClasses(UIData data){\r\n    String values = (String) data.getAttributes().get(\"rowClasses\");\r\n    if (values == null) {\r\n        return (new String[0]);\r\n    }\r\n    values = values.trim();\r\n    ArrayList<String> list = new ArrayList<String>();\r\n    while (values.length() > 0) {\r\n        int comma = values.indexOf(\",\");\r\n        if (comma >= 0) {\r\n            list.add(values.substring(0, comma).trim());\r\n            values = values.substring(comma + 1);\r\n        } else {\r\n            list.add(values.trim());\r\n            values = \"\";\r\n        }\r\n    }\r\n    String[] results = new String[list.size()];\r\n    return ((String[]) list.toArray(results));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getCanUpdateSite",
	"Comment": "returns boolean if user can update podcasts. used to display modification\toptions on main page.",
	"Method": "boolean getCanUpdateSite(){\r\n    return podcastPermissionsService.canUpdateSite();\r\n}"
}, {
	"Path": "org.sakaiproject.login.tool.SkinnableLogin.isImpersonating",
	"Comment": "helper to see if this session has used sutool to become another user\treturns true if the user is currently impersonating.",
	"Method": "boolean isImpersonating(){\r\n    Session s = SessionManager.getCurrentSession();\r\n    String userId = s.getUserId();\r\n    UsageSession session = (UsageSession) s.getAttribute(UsageSessionService.USAGE_SESSION_KEY);\r\n    if (session != null) {\r\n        if (userId != null) {\r\n            if (userId.equals(session.getUserId())) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            log.error(\"null userId in check isImpersonating\");\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.JoinSiteDelegate.getGlobalJoinExcludeFromPublicListEnabled",
	"Comment": "get the global join exclude from public list enabled setting",
	"Method": "boolean getGlobalJoinExcludeFromPublicListEnabled(){\r\n    return JoinSiteDelegate.GLOBAL_JOIN_EXCLUDE_FROM_PUBLIC_ENABLED;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.util.StorageConverter.readProperties",
	"Comment": "read the properties file. return null of the file is not found.",
	"Method": "Properties readProperties(String[] args){\r\n    Properties p = new Properties() {\r\n        @Override\r\n        public String getProperty(String key) {\r\n            String prop = super.getProperty(key);\r\n            log.info(\"- Property \" + key + \"='\" + prop + \"'\");\r\n            return prop;\r\n        }\r\n    };\r\n    for (int i = 0; i < args.length; i++) {\r\n        if (\"-p\".equals(args[i])) {\r\n            p.load(new FileInputStream(new File(args[++i])));\r\n        }\r\n        if (args[i].startsWith(\"-\")) {\r\n            p.put(args[i].substring(1), args[++i]);\r\n        }\r\n    }\r\n    return p;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.util.StorageConverter.readProperties",
	"Comment": "read the properties file. return null of the file is not found.",
	"Method": "Properties readProperties(String[] args){\r\n    String prop = super.getProperty(key);\r\n    log.info(\"- Property \" + key + \"='\" + prop + \"'\");\r\n    return prop;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.util.StorageConverter.convertStorage",
	"Comment": "transfer the resources from the source file system handler to thedestination.",
	"Method": "void convertStorage(){\r\n    log.info(\"Start converting storage....\");\r\n    setupDataSource();\r\n    if (sourceFileSystemHandler == null) {\r\n        throw new IllegalStateException(\"The source FileSystemHandler must be set!\");\r\n    }\r\n    if (destinationFileSystemHandler == null) {\r\n        throw new IllegalStateException(\"The destination FileSystemHandler must be set!\");\r\n    }\r\n    final AtomicInteger counter = new AtomicInteger(0);\r\n    JdbcTemplate template = new JdbcTemplate(dataSource);\r\n    template.query(contentSql, new RowCallbackHandler() {\r\n        public void processRow(ResultSet resultSet) throws SQLException {\r\n            counter.incrementAndGet();\r\n            String id = resultSet.getString(1);\r\n            String path = resultSet.getString(2);\r\n            try {\r\n                InputStream input = sourceFileSystemHandler.getInputStream(id, sourceBodyPath, path);\r\n                if (input != null) {\r\n                    destinationFileSystemHandler.saveInputStream(id, destinationBodyPath, path, input);\r\n                }\r\n                if (deleteFromSource) {\r\n                    sourceFileSystemHandler.delete(id, sourceBodyPath, path);\r\n                }\r\n            } catch (IOException e) {\r\n                if (ignoreMissing) {\r\n                    log.info(\"Missing file: \" + id);\r\n                } else {\r\n                    log.error(\"Failed to read or write resources from or to the FileSystemHandlers\", e);\r\n                    throw new SQLException(\"Failed to read or write resources from or to the FileSystemHandlers\", e);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    log.info(\"Converted \" + counter.get() + \" records....\");\r\n    log.info(\"Finished converting storage....\");\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.util.StorageConverter.convertStorage",
	"Comment": "transfer the resources from the source file system handler to thedestination.",
	"Method": "void convertStorage(){\r\n    counter.incrementAndGet();\r\n    String id = resultSet.getString(1);\r\n    String path = resultSet.getString(2);\r\n    try {\r\n        InputStream input = sourceFileSystemHandler.getInputStream(id, sourceBodyPath, path);\r\n        if (input != null) {\r\n            destinationFileSystemHandler.saveInputStream(id, destinationBodyPath, path, input);\r\n        }\r\n        if (deleteFromSource) {\r\n            sourceFileSystemHandler.delete(id, sourceBodyPath, path);\r\n        }\r\n    } catch (IOException e) {\r\n        if (ignoreMissing) {\r\n            log.info(\"Missing file: \" + id);\r\n        } else {\r\n            log.error(\"Failed to read or write resources from or to the FileSystemHandlers\", e);\r\n            throw new SQLException(\"Failed to read or write resources from or to the FileSystemHandlers\", e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getGradeableUsers",
	"Comment": "get a list of all users in the given site, filtered by the given group, that can have grades",
	"Method": "List<String> getGradeableUsers(List<String> getGradeableUsers,String siteId,List<String> getGradeableUsers,GbGroup groupFilter,List<String> getGradeableUsers,String siteId,GbGroup groupFilter){\r\n    try {\r\n        String givenSiteId = siteId;\r\n        if (StringUtils.isBlank(givenSiteId)) {\r\n            givenSiteId = getCurrentSiteId();\r\n        }\r\n        final Set<String> userUuids = this.siteService.getSite(givenSiteId).getUsersIsAllowed(GbRole.STUDENT.getValue());\r\n        if (groupFilter != null && groupFilter.getType() != GbGroup.Type.ALL) {\r\n            final Set<String> groupMembers = new HashSet();\r\n            if (groupFilter.getType() == GbGroup.Type.GROUP) {\r\n                final Set<Member> members = this.siteService.getSite(givenSiteId).getGroup(groupFilter.getId()).getMembers();\r\n                for (final Member m : members) {\r\n                    if (userUuids.contains(m.getUserId())) {\r\n                        groupMembers.add(m.getUserId());\r\n                    }\r\n                }\r\n            }\r\n            userUuids.retainAll(groupMembers);\r\n        }\r\n        final GbRole role = this.getUserRole(givenSiteId);\r\n        if (role == GbRole.TA) {\r\n            final User user = getCurrentUser();\r\n            final List<PermissionDefinition> perms = getPermissionsForUser(user.getId(), siteId);\r\n            if (!perms.isEmpty()) {\r\n                final Gradebook gradebook = this.getGradebook(givenSiteId);\r\n                final List<CourseSection> courseSections = this.gradebookService.getViewableSections(gradebook.getUid());\r\n                List<String> viewableStudents = new ArrayList();\r\n                Map<String, Set<Member>> groupMembers = getGroupMembers(givenSiteId);\r\n                if (courseSections != null && !courseSections.isEmpty() && groupMembers != null) {\r\n                    for (CourseSection section : courseSections) {\r\n                        if (groupMembers.containsKey(section.getUuid())) {\r\n                            Set<Member> members = groupMembers.get(section.getUuid());\r\n                            for (Member member : members) {\r\n                                if (givenSiteId != null && member.getUserId() != null && securityService.unlock(member.getUserId(), GbPortalPermission.VIEW_OWN_GRADES.getValue(), siteService.siteReference(givenSiteId))) {\r\n                                    viewableStudents.add(member.getUserId());\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (!viewableStudents.isEmpty()) {\r\n                    // retain only\r\n                    userUuids.retainAll(viewableStudents);\r\n                } else {\r\n                    userUuids.clear();\r\n                }\r\n            }\r\n        }\r\n        return new ArrayList(userUuids);\r\n    } catch (final IdUnusedException e) {\r\n        log.warn(\"IdUnusedException trying to getGradeableUsers\", e);\r\n        return null;\r\n    } catch (final GbAccessDeniedException e) {\r\n        log.warn(\"GbAccessDeniedException trying to getGradeableUsers\", e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.RendererUtil.getFormId",
	"Comment": "return the form id of the form containing the given component",
	"Method": "String getFormId(FacesContext context,UIComponent component){\r\n    while (component != null && !(component instanceof UIForm)) {\r\n        component = component.getParent();\r\n    }\r\n    if (component instanceof UIForm)\r\n        return ((UIForm) component).getId();\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesJoin3Sql",
	"Comment": "returns the sql statement which is part of the join clause to retrieve sites.",
	"Method": "String getSitesJoin3Sql(){\r\n    return \"SAKAI_USER_ID_MAP\";\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.floatAt",
	"Comment": "returns a floating point number reconstructed from four bytes\t at a specific\t location.",
	"Method": "float floatAt(int pos){\r\n    return Float.intBitsToFloat(intAt(pos));\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityBatchHandler.applyOverallHeaders",
	"Comment": "apply the headers to the batched response,these headers are applied to all responses",
	"Method": "void applyOverallHeaders(HttpServletResponse res,Map<String, ResponseBase> results){\r\n    int count = 0;\r\n    for (Entry<String, ResponseBase> entry : results.entrySet()) {\r\n        String refKey = entry.getKey();\r\n        ResponseBase refResp = entry.getValue();\r\n        if (count == 0) {\r\n            res.setHeader(HEADER_BATCH_KEYS, refKey);\r\n            res.setHeader(HEADER_BATCH_REFS, refResp.getReference());\r\n            res.setHeader(HEADER_BATCH_URLS, refResp.getEntityURL());\r\n            res.setHeader(HEADER_BATCH_MAPPING, refKey + \"=\" + refResp.getReference());\r\n        } else {\r\n            res.addHeader(HEADER_BATCH_KEYS, refKey);\r\n            res.addHeader(HEADER_BATCH_REFS, refResp.getReference());\r\n            res.addHeader(HEADER_BATCH_URLS, refResp.getEntityURL());\r\n            res.addHeader(HEADER_BATCH_MAPPING, refKey + \"=\" + refResp.getReference());\r\n        }\r\n        if (refResp.isFailure()) {\r\n            res.addHeader(HEADER_BATCH_ERRORS, refKey);\r\n            res.addHeader(HEADER_BATCH_STATUS, INTERNAL_SERVER_ERROR_STATUS_STRING);\r\n        } else {\r\n            int status = ((ResponseResult) refResp).getStatus();\r\n            res.addHeader(HEADER_BATCH_STATUS, Integer.toString(status));\r\n        }\r\n        count++;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ConfigLogicImpl.combinedProps",
	"Comment": "get properties associated with the current placement and registration of this tool.",
	"Method": "Properties combinedProps(){\r\n    Properties toolProps = toolManager.getCurrentPlacement().getConfig();\r\n    return toolProps;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder6Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder6Sql(){\r\n    return \"SAKAI_SITE.TYPE DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.findCollection",
	"Comment": "access the collection with this local resource id. internal find does the guts of finding without security or event tracking. the collection internal members and properties are accessible from the returned colelction object.",
	"Method": "ContentCollection findCollection(String id){\r\n    ContentCollection collection = null;\r\n    try {\r\n        collection = (ContentCollection) threadLocalManager.get(\"findCollection@\" + id);\r\n    } catch (ClassCastException e) {\r\n        throw new TypeException(id);\r\n    }\r\n    if (collection == null) {\r\n        collection = m_storage.getCollection(id);\r\n        if (collection != null) {\r\n            threadLocalManager.set(\"findCollection@\" + id, collection);\r\n        }\r\n    } else {\r\n        collection = new BaseCollectionEdit(collection);\r\n    }\r\n    return collection;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.removeRecursive",
	"Comment": "used to remove any members of a collection whoes add was canceled.",
	"Method": "void removeRecursive(ContentCollection parent){\r\n    List members = parent.getMemberResources();\r\n    for (Iterator i = members.iterator(); i.hasNext(); ) {\r\n        Object resource = i.next();\r\n        try {\r\n            if (resource instanceof ContentResource) {\r\n                removeResource(((ContentResource) resource).getId());\r\n            } else if (resource instanceof ContentCollection) {\r\n                ContentCollection collection = (ContentCollection) resource;\r\n                removeRecursive(collection);\r\n                removeCollection(collection.getId());\r\n            }\r\n        } catch (IdUnusedException e) {\r\n            log.error(\"failed to removed canceled collection child\", e);\r\n        } catch (TypeException e) {\r\n            log.error(\"failed to removed canceled collection child\", e);\r\n        } catch (PermissionException e) {\r\n            log.error(\"failed to removed canceled collection child\", e);\r\n        } catch (InUseException e) {\r\n            log.error(\"failed to removed canceled collection child\", e);\r\n        } catch (ServerOverloadException e) {\r\n            log.error(\"failed to removed canceled collection child\", e);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.memory.impl.HazelcastMemoryService.addKeyValueToConfig",
	"Comment": "simple code duplication reductionhelps with generating the config strings",
	"Method": "boolean addKeyValueToConfig(StringBuilder buf,String key,Object value,boolean first){\r\n    if (!first) {\r\n        buf.append(\",\");\r\n    } else {\r\n        first = false;\r\n    }\r\n    buf.append(key).append(\"=\").append(value);\r\n    return first;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getGradebookSettings",
	"Comment": "get the settings for this gradebook. note that this cannot be called by a student. safe to use from an entityprovider.",
	"Method": "GradebookInformation getGradebookSettings(GradebookInformation getGradebookSettings,String siteId){\r\n    final Gradebook gradebook = getGradebook(siteId);\r\n    final GradebookInformation settings = this.gradebookService.getGradebookInformation(gradebook.getUid());\r\n    Collections.sort(settings.getCategories(), CategoryDefinition.orderComparator);\r\n    return settings;\r\n}"
}, {
	"Path": "org.sakaiproject.util.ToolListenerTest.testMessageBundleWebInf",
	"Comment": "check that locale files are loaded out of the new tools folder.",
	"Method": "void testMessageBundleWebInf(){\r\n    when(context.getResourcePaths(\"/WEB-INF/tools/\")).thenReturn(Stream.of(\"/WEB-INF/tools/\", \"/WEB-INF/tools/sakai-tool.xml\", \"/WEB-INF/tools/sakai-tool.properties\", \"/WEB-INF/tools/sakai-tool_fr.properties\").collect(Collectors.toSet()));\r\n    listener.contextInitialized(event);\r\n    verify(activeToolManager).setResourceBundle(\"sakai-tool\", \"/webapp/WEB-INF/tools/sakai-tool.properties\");\r\n    verify(activeToolManager).setResourceBundle(\"sakai-tool\", \"/webapp/WEB-INF/tools/sakai-tool_fr.properties\");\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.impl.EntityBrokerManagerImpl.parseEntityURL",
	"Comment": "parses an entity url into an entity view object,handles custom parsing templates",
	"Method": "EntityView parseEntityURL(String entityURL){\r\n    if (entityURL == null || \"\".equals(entityURL)) {\r\n        throw new IllegalArgumentException(\"entityURL cannot be null or empty\");\r\n    }\r\n    if (entityURL.startsWith(EntityView.DIRECT_PREFIX)) {\r\n        entityURL = entityURL.substring(EntityView.DIRECT_PREFIX.length());\r\n    }\r\n    EntityView view = null;\r\n    String prefix = EntityReference.getPrefix(entityURL);\r\n    EntityProvider provider = entityProviderManager.getProviderByPrefix(prefix);\r\n    if (provider != null) {\r\n        EntityViewUrlCustomizable custom = (EntityViewUrlCustomizable) entityProviderManager.getProviderByPrefixAndCapability(prefix, EntityViewUrlCustomizable.class);\r\n        if (custom == null) {\r\n            view = new EntityView(entityURL);\r\n        } else {\r\n            view = new EntityView();\r\n            view.loadParseTemplates(custom.getParseTemplates());\r\n            view.parseEntityURL(entityURL);\r\n        }\r\n    }\r\n    return view;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.help.SizedList.add",
	"Comment": "add an item to the list, if the list is already full then and item is also removed from theend of the list.",
	"Method": "boolean add(T item){\r\n    if (this.contains(item)) {\r\n        this.remove(item);\r\n    }\r\n    super.add(0, item);\r\n    if (this.size() > size) {\r\n        this.remove(this.size() - 1);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.isSitesToView",
	"Comment": "returns true if there is at least one site user can access\tand user has not set it to be excluded",
	"Method": "boolean isSitesToView(){\r\n    if (sitesToViewSet) {\r\n        return sitesToView;\r\n    } else {\r\n        return !filterOutExcludedSites(getSiteList()).isEmpty();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlHSql.setTimestamp",
	"Comment": "sets the value of a timestamp field in the specified column.",
	"Method": "PreparedStatement setTimestamp(PreparedStatement pstmt,Timestamp timestamp,GregorianCalendar calendar,int pos){\r\n    pstmt.setTimestamp(pos, timestamp, null);\r\n    return pstmt;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.authzGroupId",
	"Comment": "access the azgroup id extracted from an authzgroup reference.",
	"Method": "String authzGroupId(String ref){\r\n    String start = getAccessPoint(true) + Entity.SEPARATOR;\r\n    int i = ref.indexOf(start);\r\n    if (i == -1)\r\n        return ref;\r\n    String id = ref.substring(i + start.length());\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere1Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere1Sql(){\r\n    return \"SAKAI_SITE.SITE_ID = SAKAI_SITE_USER.SITE_ID and SAKAI_SITE_USER.USER_ID = ? and \";\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbFlatStorage.caseId",
	"Comment": "fix the case of resource ids to support case insensitive ids if enabled",
	"Method": "String caseId(String id){\r\n    if (m_caseInsensitive) {\r\n        return id.toLowerCase();\r\n    }\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.getUserDirectoryService",
	"Comment": "returns the instance of the userdirectoryservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "UserDirectoryService getUserDirectoryService(){\r\n    return userDirectoryService;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.getContentType",
	"Comment": "only makes sense for simplepageitem.resource or .multimedia",
	"Method": "String getContentType(SimplePageItem item){\r\n    String mimeType = item.getHtml();\r\n    if (mimeType != null && (mimeType.startsWith(\"http\")))\r\n        mimeType = null;\r\n    if (mimeType == null || mimeType.equals(\"\")) {\r\n        String mmDisplayType = item.getAttribute(\"multimediaDisplayType\");\r\n        if (mmDisplayType == null || \"\".equals(mmDisplayType) || \"2\".equals(mmDisplayType)) {\r\n            try {\r\n                ContentResource res = contentHostingService.getResource(item.getSakaiId());\r\n                mimeType = res.getContentType();\r\n            } catch (Exception ignore) {\r\n            }\r\n        }\r\n    }\r\n    if (\"application/octet-stream\".equals(mimeType)) {\r\n        mimeType = null;\r\n    }\r\n    if (mimeType == null || mimeType.equals(\"\")) {\r\n        String s = item.getSakaiId();\r\n        int j = s.lastIndexOf(\".\");\r\n        if (j >= 0)\r\n            s = s.substring(j + 1);\r\n        mimeType = ContentTypeImageService.getContentType(s);\r\n    }\r\n    if (mimeType == null || mimeType.equals(\"\"))\r\n        mimeType = \"application/octet-stream\";\r\n    return mimeType;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlService.setSqlServiceSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setSqlServiceSql(String vendor){\r\n    this.sqlServiceSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.processAdd",
	"Comment": "performs the actual adding of a podcast. calls podcastservice to actually\tadd the podcast.",
	"Method": "String processAdd(){\r\n    byte[] fileContents = new byte[(int) fileSize];\r\n    String whereToGo = \"podcastAdd\";\r\n    if (OKtoAdd()) {\r\n        try {\r\n            fileAsStream.read(fileContents);\r\n        } catch (IOException e) {\r\n            log.error(\"IOException while attempting the actual upload file \" + filename + \" during processAdd \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            setErrorMessage(IO_ALERT);\r\n            return \"podcastAdd\";\r\n        } finally {\r\n            try {\r\n                if (fileAsStream != null)\r\n                    fileAsStream.close();\r\n            } catch (IOException ioe) {\r\n                log.warn(\"IOException error while closing the stream:\" + ioe);\r\n            }\r\n        }\r\n        try {\r\n            Date displayDate = null;\r\n            try {\r\n                displayDate = DateFormatterUtil.parseISODate(date);\r\n            } catch (DateTimeParseException e1) {\r\n                log.warn(\"DateTimeParseException attempting to convert \" + date + \" both valid ways. \" + e1.getMessage(), e1);\r\n                displayInvalidDateErrMsg = true;\r\n                return \"podcastAdd\";\r\n            }\r\n            podcastService.addPodcast(title, displayDate, description, fileContents, filename, fileContentType);\r\n            displayNoFileErrMsg = false;\r\n            displayNoDateErrMsg = false;\r\n            displayNoTitleErrMsg = false;\r\n            displayInvalidDateErrMsg = false;\r\n            title = \"\";\r\n            date = null;\r\n            description = \"\";\r\n            filename = \"\";\r\n            try {\r\n                fileAsStream = null;\r\n            } catch (Exception e) {\r\n                log.warn(\"Exception error while setting the stream to null: \" + e);\r\n            } finally {\r\n                try {\r\n                    if (fileAsStream != null)\r\n                        fileAsStream.close();\r\n                } catch (IOException ioe) {\r\n                    log.warn(\"IOException error while closing the stream:\" + ioe);\r\n                }\r\n            }\r\n            whereToGo = \"cancel\";\r\n        } catch (OverQuotaException e) {\r\n            log.warn(\"OverQuotaException while attempting to actually add the new podcast \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            setErrorMessage(QUOTA_ALERT);\r\n        } catch (ServerOverloadException e) {\r\n            log.info(\"ServerOverloadException while attempting to actually add the new podcast \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            setErrorMessage(INTERNAL_ERROR_ALERT);\r\n        } catch (InconsistentException e) {\r\n            log.error(\"InconsistentException while attempting to actually add the new podcast \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            throw new PodcastException(e);\r\n        } catch (IdInvalidException e) {\r\n            log.error(\"IdInvalidException while attempting to actually add the new podcast \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            setErrorMessage(ID_INVALID_ALERT);\r\n        } catch (IdLengthException e) {\r\n            log.warn(\"IdLengthException while attempting to actually add the new podcast \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            setErrorMessage(LENGTH_ALERT);\r\n        } catch (PermissionException e) {\r\n            log.warn(\"PermissionException while attempting to actually add the new podcast \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            setErrorMessage(PERMISSION_ALERT);\r\n        } catch (IdUniquenessException e) {\r\n            log.error(\"IdUniquenessException while attempting to actually add the new podcast \" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n            setErrorMessage(ID_USED_ALERT);\r\n        }\r\n    }\r\n    return whereToGo;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.MnemeEntity.editItemSettingsUrl",
	"Comment": "contents and settings. this will be null except in that situation",
	"Method": "String editItemSettingsUrl(SimplePageBean bean){\r\n    String tool = bean.getCurrentTool(\"sakai.mneme\");\r\n    if (tool == null)\r\n        return null;\r\n    return ServerConfigurationService.getToolUrl() + \"/\" + tool + \"/assessment_settings/\" + id + \"/1\";\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ConfigLogicImpl.isDisplayInvalidEmailAddrs",
	"Comment": "retrieve the display invalid email addresses option from the tool config",
	"Method": "boolean isDisplayInvalidEmailAddrs(Properties props){\r\n    String displayinvalidemailaddrs = props.getProperty(ConfigParams.displayinvalidemailaddrs.name());\r\n    boolean displayInvalidEmails = parseConfigBoolean(displayinvalidemailaddrs);\r\n    return displayInvalidEmails;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder8Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder8Sql(){\r\n    return \"SAKAI_SITE.PUBLISHED DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesJoin1Sql",
	"Comment": "returns the sql statement which is part of the join clause to retrieve sites.",
	"Method": "String getSitesJoin1Sql(){\r\n    return \"SAKAI_SITE_USER\";\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.backfilltool.BackFillToolJob.processSites",
	"Comment": "this processes all sites looking for extra roles to add back.",
	"Method": "void processSites(JobExecutionContext context,String type,int interval){\r\n    List<String> siteIds = siteService.getSiteIds(SiteService.SelectionType.ANY, type, null, null, SiteService.SortType.NONE, null);\r\n    boolean skipUserSites = context.getMergedJobDataMap().getBoolean(\"skip.user.sites\");\r\n    int updated = 0, examined = 0, special = 0, user = 0;\r\n    for (String siteId : siteIds) {\r\n        if (!run) {\r\n            break;\r\n        }\r\n        Site site;\r\n        if (siteService.isSpecialSite(siteId)) {\r\n            special++;\r\n            continue;\r\n        }\r\n        if (siteService.isUserSite(siteId)) {\r\n            user++;\r\n            if (skipUserSites) {\r\n                continue;\r\n            }\r\n        }\r\n        try {\r\n            site = siteService.getSite(siteId);\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"Couldn't load site: \" + siteId);\r\n            continue;\r\n        }\r\n        examined++;\r\n        if (interval != 0 && examined % interval == 0) {\r\n            log.info(\"Processed: \" + examined);\r\n        }\r\n        boolean saved = updateSite(context, site);\r\n        if (saved) {\r\n            updated++;\r\n        }\r\n    }\r\n    log.info(String.format(\"%s: Examined %d, Updated %d, Special %d, User %d\", (run) ? \"Completed\" : \"Stopped early\", examined, updated, special, user));\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.removePage",
	"Comment": "this and addpages checks only edit page permission. should it check site.upd?",
	"Method": "String removePage(){\r\n    if (getEditPrivs() != 0) {\r\n        return \"permission-failed\";\r\n    }\r\n    if (!checkCsrf())\r\n        return \"permission-failed\";\r\n    SimplePage page = getPage(removeId);\r\n    if (page == null)\r\n        return \"no-such-page\";\r\n    if (!isStudentPage(page)) {\r\n        return \"failure\";\r\n    } else {\r\n        SimpleStudentPage studentPage = simplePageToolDao.findStudentPageByPageId(page.getPageId());\r\n        if (studentPage != null) {\r\n            studentPage.setDeleted(true);\r\n            update(studentPage, false);\r\n            String[] path = split(adjustPath(\"pop\", null, null, null), \",\");\r\n            Long itemId = Long.valueOf(path[path.length - 1]);\r\n            try {\r\n                SimplePageItem item = simplePageToolDao.findItem(itemId);\r\n                updatePageObject(Long.valueOf(item.getSakaiId()));\r\n                updatePageItem(itemId);\r\n            } catch (PermissionException e) {\r\n                return \"failure\";\r\n            }\r\n            return \"success\";\r\n        } else {\r\n            return \"failure\";\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.isDisplayForumDeleteOption",
	"Comment": "prevents users from trying to delete the forum they are currently creating",
	"Method": "boolean isDisplayForumDeleteOption(){\r\n    if (selectedForum == null) {\r\n        setupForum();\r\n        return false;\r\n    }\r\n    OpenForum forum = selectedForum.getForum();\r\n    if (forum == null || forum.getId() == null)\r\n        return false;\r\n    OpenForum forumInDb = forumManager.getForumById(forum.getId());\r\n    return forumInDb != null;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf2.util.RendererUtil.getDefaultedAttribute",
	"Comment": "same as getattribute, but if not found, we return a default value.",
	"Method": "Object getDefaultedAttribute(FacesContext context,UIComponent component,String name,Object defaultValue){\r\n    Object o = getAttribute(context, component, name);\r\n    if (o == null)\r\n        o = defaultValue;\r\n    return o;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.indexOf",
	"Comment": "searches for a byte and returns an index to the first one found.\t search starts at given index and includes that index.",
	"Method": "int indexOf(byte b,int indexOf,byte b,int pos){\r\n    if (!between(pos, 0, (size - 1))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    beginEnumeration(pos);\r\n    int currentPos = pos;\r\n    while (hasMoreBytes()) {\r\n        if (nextByte() == b) {\r\n            return currentPos;\r\n        }\r\n        currentPos++;\r\n    }\r\n    return -1;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.HierPvtMsgDataTableRender.getColumnClasses",
	"Comment": "return an array of stylesheet classes to be applied to each column in the\ttable in the order specified. every column may or may not have a\tstylesheet.",
	"Method": "String[] getColumnClasses(UIData data){\r\n    String values = (String) data.getAttributes().get(\"columnClasses\");\r\n    if (values == null) {\r\n        return (new String[0]);\r\n    }\r\n    values = values.trim();\r\n    ArrayList list = new ArrayList();\r\n    while (values.length() > 0) {\r\n        int comma = values.indexOf(\",\");\r\n        if (comma >= 0) {\r\n            list.add(values.substring(0, comma).trim());\r\n            values = values.substring(comma + 1);\r\n        } else {\r\n            list.add(values.trim());\r\n            values = \"\";\r\n        }\r\n    }\r\n    String[] results = new String[list.size()];\r\n    return ((String[]) list.toArray(results));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsForumManagerImpl.getRecentOpenForumMessages",
	"Comment": "returns a given number of open forum messages if available in the timeprovided",
	"Method": "List getRecentOpenForumMessages(int numberMessages,int numberDaysInPast){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BasicEventTracking.postEvent",
	"Comment": "cause this new event to get to wherever it has to go for persistence, etc.",
	"Method": "void postEvent(Event event){\r\n    String reportId = null;\r\n    if (event.getSessionId() != null) {\r\n        reportId = event.getSessionId();\r\n    } else {\r\n        reportId = \"~\" + event.getUserId();\r\n    }\r\n    log.info(m_logId + reportId + \"@\" + event);\r\n    notifyObservers(event, true);\r\n}"
}, {
	"Path": "org.sakaiproject.util.StringUtil.trimToNullLower",
	"Comment": "trim blanks, and if nothing left, make null, else lowercase.",
	"Method": "String trimToNullLower(String value){\r\n    if (value == null)\r\n        return null;\r\n    value = value.trim();\r\n    if (value.length() == 0)\r\n        return null;\r\n    return value.toLowerCase();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.BasicPodfeedService.convertToDavUrl",
	"Comment": "if site is display to site, need to retrieve files thru dav servlet.\tthis converts a podcast url to accomplish this.",
	"Method": "String convertToDavUrl(String fileUrl){\r\n    Pattern pattern = Pattern.compile(\"access/content/group\");\r\n    Matcher matcher = pattern.matcher(fileUrl);\r\n    fileUrl = matcher.replaceAll(\"dav\");\r\n    return fileUrl;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.isAllowedAnon",
	"Comment": "is the current user allowed to grant .anon access to the site?",
	"Method": "boolean isAllowedAnon(){\r\n    return serverConfigurationService().getBoolean(\"sitemanage.grant.anon\", false);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityHandlerImpl.handleClassLoaderAccess",
	"Comment": "wrap this in an appropriate classloader before handling the request to ensure wedo not get ugly classloader failures",
	"Method": "void handleClassLoaderAccess(EntityViewAccessProvider accessProvider,HttpServletRequest req,HttpServletResponse res,EntityView view){\r\n    ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\r\n    try {\r\n        Object classloaderIndicator = accessProvider;\r\n        ClassLoader newClassLoader = classloaderIndicator.getClass().getClassLoader();\r\n        if (classloaderIndicator instanceof ClassLoaderReporter) {\r\n            newClassLoader = ((ClassLoaderReporter) classloaderIndicator).getSuitableClassLoader();\r\n        }\r\n        Thread.currentThread().setContextClassLoader(newClassLoader);\r\n        accessProvider.handleAccess(view, req, res);\r\n    } finally {\r\n        Thread.currentThread().setContextClassLoader(currentClassLoader);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ConfigLogicImpl.isSendMeACopy",
	"Comment": "retrieve the send me a copy option from the tool configuration",
	"Method": "boolean isSendMeACopy(Properties props){\r\n    String sendmecopy = props.getProperty(ConfigParams.sendmecopy.name());\r\n    boolean sendMeACopy = parseConfigBoolean(sendmecopy);\r\n    return sendMeACopy;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.EntityHttpServletRequest.getContent",
	"Comment": "gets the content data out of the request, ensures that the data can be retrieved somehow",
	"Method": "ServletInputStream getContent(){\r\n    ServletInputStream sis = null;\r\n    if (contentStream != null) {\r\n        sis = new EntityServletInputStream(contentStream);\r\n    } else if (copy != null) {\r\n        sis = new LazyRequestInputStream(copy);\r\n    } else {\r\n        sis = new EntityServletInputStream(\"\");\r\n    }\r\n    return sis;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.PermissionManagerImpl.getDefaultForumMessagePermissionForRole",
	"Comment": "get the default forum message permission for a given role.this provides the permissions that the role currently has.",
	"Method": "MessagePermissions getDefaultForumMessagePermissionForRole(BaseForum forum,String role,String typeId){\r\n    MessagePermissions permissions = forum == null || forum.getId() == null ? null : getMessagePermissionByKeyValue(role, \"forumId\", forum.getId().toString(), true);\r\n    MessagePermissions mp = new MessagePermissionsImpl();\r\n    if (permissions == null) {\r\n        return null;\r\n    } else {\r\n        mp.setDeleteAny(permissions.getDeleteAny());\r\n        mp.setDeleteOwn(permissions.getDeleteOwn());\r\n        mp.setRead(permissions.getRead());\r\n        mp.setReadDrafts(permissions.getReadDrafts());\r\n        mp.setReviseAny(permissions.getReviseAny());\r\n        mp.setReviseOwn(permissions.getReviseOwn());\r\n        mp.setMarkAsRead(permissions.getMarkAsRead());\r\n    }\r\n    mp.setRole(role);\r\n    return mp;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getResourceToolExists",
	"Comment": "determines if resource tool part of the site. needed to store podcasts.",
	"Method": "boolean getResourceToolExists(){\r\n    boolean resourceToolExists = false;\r\n    String toolId = ToolManager.getTool(RESOURCE_TOOL_ID).getTitle();\r\n    try {\r\n        log.debug(\"Checking for presence of Sakai Resources tool using RESOURCE_TOOL_ID = \" + RESOURCE_TOOL_ID);\r\n        Site thisSite = SiteService.getSite(ToolManager.getCurrentPlacement().getContext());\r\n        Collection toolsInSite = thisSite.getTools(RESOURCE_TOOL_ID);\r\n        if (!toolsInSite.isEmpty()) {\r\n            resourceToolExists = true;\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        log.error(\"No Site found while trying to check if site has Resources tool.\", e);\r\n        if (getCanUpdateSite()) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Alert: \" + getMessageFromBundle(\"no_resource_alert\", new String[] { toolId })));\r\n        }\r\n    }\r\n    if (!resourceToolExists && (!FacesContext.getCurrentInstance().getMessages().hasNext())) {\r\n        if (getCanUpdateSite()) {\r\n            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Alert: \" + getMessageFromBundle(\"no_resource_alert\", new String[] { toolId })));\r\n        }\r\n    }\r\n    return resourceToolExists;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.sortRoles",
	"Comment": "takes roles defined and sorts them alphabetically by idso when displayed will be in order.",
	"Method": "List sortRoles(Set roles){\r\n    final List rolesList = new ArrayList();\r\n    rolesList.addAll(roles);\r\n    final AuthzGroupComparator authzGroupComparator = new AuthzGroupComparator(\"id\", true);\r\n    Collections.sort(rolesList, authzGroupComparator);\r\n    return rolesList;\r\n}"
}, {
	"Path": "org.sakaiproject.util.UserNotificationPreferencesRegistrationImpl.getLocalResourceLoader",
	"Comment": "gets the resourceloader specified by the bundlelocation.",
	"Method": "ResourceLoader getLocalResourceLoader(){\r\n    if (rl == null) {\r\n        rl = (ResourceLoader) getResourceLoader(getBundleLocation());\r\n    }\r\n    return rl;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.producers.ShowPageProducer.abbrevUrl",
	"Comment": "produce abbreviated versions of urls, for use in constructing titles",
	"Method": "String abbrevUrl(String url){\r\n    if (url.startsWith(\"/\")) {\r\n        int suffix = url.lastIndexOf(\"/\");\r\n        if (suffix > 0) {\r\n            url = url.substring(suffix + 1);\r\n        }\r\n        if (url.startsWith(\"http:__\")) {\r\n            url = url.substring(7);\r\n            suffix = url.indexOf(\"_\");\r\n            if (suffix > 0) {\r\n                url = messageLocator.getMessage(\"simplepage.fromhost\").replace(\"{}\", url.substring(0, suffix));\r\n            }\r\n        } else if (url.startsWith(\"https:__\")) {\r\n            url = url.substring(8);\r\n            suffix = url.indexOf(\"_\");\r\n            if (suffix > 0) {\r\n                url = messageLocator.getMessage(\"simplepage.fromhost\").replace(\"{}\", url.substring(0, suffix));\r\n            }\r\n        }\r\n    } else {\r\n        try {\r\n            URL u = new URL(url);\r\n            url = messageLocator.getMessage(\"simplepage.fromhost\").replace(\"{}\", u.getHost());\r\n        } catch (Exception ignore) {\r\n            log.error(\"exception in abbrevurl \" + ignore);\r\n        }\r\n        ;\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseNotificationService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : serverConfigurationService().getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.util.ByteStorageConversion.toByte",
	"Comment": "convert the char array into signed byte starting at cstart for length\tchars into b starting at bstart",
	"Method": "void toByte(char[] c,int cstart,byte[] b,int bstart,int length){\r\n    int bi = bstart;\r\n    int ci = cstart;\r\n    for (int i = 0; i < length; i++, bi++, ci++) {\r\n        if (c[ci] > 127) {\r\n            b[bi] = (byte) (c[ci] - 256);\r\n        } else {\r\n            b[bi] = (byte) (c[ci]);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.completeSave",
	"Comment": "complete the saving of the group, once id and security checks have been cleared.",
	"Method": "void completeSave(AuthzGroup azGroup){\r\n    addLiveUpdateProperties((BaseAuthzGroup) azGroup);\r\n    for (AuthzGroupAdvisor authzGroupAdvisor : authzGroupAdvisors) {\r\n        try {\r\n            authzGroupAdvisor.update(azGroup);\r\n        } catch (Exception e) {\r\n            log.error(\"Advisor error during completeSave()\", e);\r\n        }\r\n    }\r\n    m_storage.save(azGroup);\r\n    String event = ((BaseAuthzGroup) azGroup).getEvent();\r\n    if (event == null)\r\n        event = SECURE_UPDATE_AUTHZ_GROUP;\r\n    if (SECURE_UPDATE_AUTHZ_GROUP.equals(event)) {\r\n        try {\r\n            HashSet<String> roles = null;\r\n            HashSet<String> permissions = null;\r\n            Set<DbAuthzGroupService.DbStorage.RoleAndFunction> lastChangedPerms = ((BaseAuthzGroup) azGroup).m_lastChangedRlFn;\r\n            if (lastChangedPerms != null && !lastChangedPerms.isEmpty()) {\r\n                roles = new HashSet<String>();\r\n                permissions = new HashSet<String>(lastChangedPerms.size());\r\n                for (DbAuthzGroupService.DbStorage.RoleAndFunction rf : lastChangedPerms) {\r\n                    permissions.add(rf.function);\r\n                    roles.add(rf.role);\r\n                }\r\n                if (log.isDebugEnabled()) {\r\n                    log.debug(\"Changed permissions for roles (\" + roles + \") in \" + azGroup.getId() + \": \" + permissions);\r\n                }\r\n            }\r\n            ((SakaiSecurity) securityService()).notifyRealmChanged(azGroup.getId(), roles, permissions);\r\n        } catch (Exception e) {\r\n            log.warn(\"Failure while trying to notify SS about realm changes for AZG(\" + azGroup.getId() + \"): \" + e, e);\r\n        }\r\n    }\r\n    eventTrackingService().post(eventTrackingService().newEvent(event, azGroup.getReference(), true));\r\n    ((BaseAuthzGroup) azGroup).closeEdit();\r\n    ((BaseAuthzGroup) azGroup).m_lastChangedRlFn = null;\r\n    BaseAuthzGroup updatedRealm = (BaseAuthzGroup) m_storage.get(azGroup.getId());\r\n    updateSiteSecurity(updatedRealm);\r\n    ((BaseAuthzGroup) azGroup).setEvent(null);\r\n}"
}, {
	"Path": "org.sakaiproject.util.UserNotificationPreferencesRegistrationImpl.getSectionDescriptionBundleKey",
	"Comment": "get the key used to look up the text in the bundle for the section description.",
	"Method": "String getSectionDescriptionBundleKey(){\r\n    return sectionDescriptionBundleKey;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.ServerConfigEntityProvider.getKnownSettings",
	"Comment": "retrieves the known values in scs which are not actually strings and properties",
	"Method": "Map<String, Object> getKnownSettings(){\r\n    Map<String, Object> m = new HashMap<String, Object>();\r\n    m.put(\"accessPath\", serverConfigurationService.getAccessPath());\r\n    m.put(\"accessUrl\", serverConfigurationService.getAccessUrl());\r\n    m.put(\"gatewaySiteId\", serverConfigurationService.getGatewaySiteId());\r\n    m.put(\"loggedOutUrl\", serverConfigurationService.getLoggedOutUrl());\r\n    m.put(\"portalUrl\", serverConfigurationService.getPortalUrl());\r\n    m.put(\"serverId\", serverConfigurationService.getServerId());\r\n    m.put(\"serverIdInstance\", serverConfigurationService.getServerIdInstance());\r\n    m.put(\"serverInstance\", serverConfigurationService.getServerInstance());\r\n    m.put(\"serverName\", serverConfigurationService.getServerName());\r\n    m.put(\"serverUrl\", serverConfigurationService.getServerUrl());\r\n    m.put(\"toolUrl\", serverConfigurationService.getToolUrl());\r\n    m.put(\"userHomeUrl\", serverConfigurationService.getUserHomeUrl());\r\n    try {\r\n        InetAddress i4 = Inet4Address.getLocalHost();\r\n        m.put(\"serverHostName\", i4.getHostName());\r\n        m.put(\"serverHostAddress\", i4.getHostAddress());\r\n    } catch (UnknownHostException e) {\r\n    }\r\n    Object o = getConfigValue(\"vendor@org.sakaiproject.db.api.SqlService\");\r\n    if (o != null)\r\n        m.put(\"database.vendor\", o);\r\n    o = getConfigValue(\"webdav.ignore\");\r\n    if (o != null)\r\n        m.put(\"webdav.ignore\", o);\r\n    for (int i = 0; i < includedStringSettings.length; i++) {\r\n        String name = includedStringSettings[i];\r\n        String value = serverConfigurationService.getString(name);\r\n        if (value != null) {\r\n            m.put(name, value);\r\n        }\r\n    }\r\n    for (int i = 0; i < includedBooleanSettings.length; i++) {\r\n        String name = includedBooleanSettings[i];\r\n        boolean value = serverConfigurationService.getBoolean(name, false);\r\n        m.put(name, value);\r\n    }\r\n    return m;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getAlternateReferenceRoot",
	"Comment": "compute an alternate root for a reference, based on the value of the specified property.",
	"Method": "String getAlternateReferenceRoot(String id,String rootProperty,String getAlternateReferenceRoot,String rootProperty){\r\n    if (rootProperty == null)\r\n        return \"\";\r\n    if ((id == null) || id.equals(\"/\") || id.equals(\"\"))\r\n        return \"\";\r\n    String alternateRoot = null;\r\n    try {\r\n        alternateRoot = StringUtils.trimToNull(getProperties(id).getProperty(rootProperty));\r\n    } catch (PermissionException e) {\r\n    } catch (IdUnusedException e) {\r\n    }\r\n    if (alternateRoot == null)\r\n        return \"\";\r\n    if (!alternateRoot.startsWith(Entity.SEPARATOR))\r\n        alternateRoot = Entity.SEPARATOR + alternateRoot;\r\n    if (alternateRoot.endsWith(Entity.SEPARATOR))\r\n        alternateRoot = alternateRoot.substring(0, alternateRoot.length() - Entity.SEPARATOR.length());\r\n    return alternateRoot;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityDescriptionManager.getEntityDescription",
	"Comment": "get the descriptions for an entity or its capabilities or custom actions",
	"Method": "String getEntityDescription(String prefix,String descriptionkey,Locale locale){\r\n    String value = null;\r\n    if (locale == null) {\r\n        locale = entityProperties.getLocale();\r\n    }\r\n    DescribeDefineable describer = entityProviderManager.getProviderByPrefixAndCapability(prefix, DescribeDefineable.class);\r\n    if (describer != null) {\r\n        value = describer.getDescription(locale, descriptionkey);\r\n    }\r\n    if (value == null) {\r\n        String key = prefix;\r\n        if (descriptionkey != null) {\r\n            key += \".\" + descriptionkey;\r\n        }\r\n        value = entityProperties.getProperty(prefix, key, locale);\r\n    }\r\n    if (\"\".equals(value)) {\r\n        value = null;\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.mergeCollection",
	"Comment": "merge in a collection from an xml dom definition. take whole if not defined already. ignore if already here.",
	"Method": "ContentCollection mergeCollection(Element element){\r\n    BaseCollectionEdit collectionFromXml = new BaseCollectionEdit(element);\r\n    String id = collectionFromXml.getId();\r\n    BaseCollectionEdit edit = null;\r\n    try {\r\n        edit = (BaseCollectionEdit) addCollection(id);\r\n    } catch (IdUsedException e) {\r\n        return null;\r\n    }\r\n    edit.set(collectionFromXml);\r\n    try {\r\n        Time createTime = edit.getProperties().getTimeProperty(ResourceProperties.PROP_CREATION_DATE);\r\n    } catch (EntityPropertyNotDefinedException epnde) {\r\n        String now = timeService.newTime().toString();\r\n        edit.getProperties().addProperty(ResourceProperties.PROP_CREATION_DATE, now);\r\n    } catch (EntityPropertyTypeException epte) {\r\n        log.error(epte.getMessage(), epte);\r\n    }\r\n    edit.setEvent(EVENT_RESOURCE_ADD);\r\n    commitCollection(edit);\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.BaseSiteService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : serverConfigurationService().getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getGradebookAssignments",
	"Comment": "get a list of assignments in the gradebook in the specified site that the current user is allowed to access, sorted by sort order",
	"Method": "List<Assignment> getGradebookAssignments(List<Assignment> getGradebookAssignments,String siteId,List<Assignment> getGradebookAssignments,SortType sortBy,List<Assignment> getGradebookAssignments,String siteId,SortType sortBy){\r\n    final List<Assignment> assignments = new ArrayList();\r\n    final Gradebook gradebook = getGradebook(siteId);\r\n    if (gradebook != null) {\r\n        assignments.addAll(this.gradebookService.getViewableAssignmentsForCurrentUser(gradebook.getUid(), sortBy));\r\n    }\r\n    return assignments;\r\n}"
}, {
	"Path": "org.sakaiproject.tomcat.jdbc.pool.SakaiBasicDataSource.setDefaultTransactionIsolationString",
	"Comment": "set the default transaction isolation level from a string value, based on the settings and values in java.sql.connection",
	"Method": "void setDefaultTransactionIsolationString(String defaultTransactionIsolation){\r\n    if ((defaultTransactionIsolation == null) || (defaultTransactionIsolation.trim().length() == 0)) {\r\n        setDefaultTransactionIsolation(DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_NONE\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_NONE);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_READ_UNCOMMITTED\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_READ_COMMITTED\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_REPEATABLE_READ\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_SERIALIZABLE\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\r\n    } else {\r\n        setDefaultTransactionIsolation(DataSourceFactory.UNKNOWN_TRANSACTIONISOLATION);\r\n        log.warn(\"invalid transaction isolation level: \" + defaultTransactionIsolation);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbBinarySingleStorage.caseId",
	"Comment": "fix the case of resource ids to support case insensitive ids if enabled",
	"Method": "String caseId(String id){\r\n    if (m_caseInsensitive) {\r\n        return id.toLowerCase();\r\n    }\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.util.EntityCollections.isIntersectionEntityRefsToEntities",
	"Comment": "see if the collection of entity reference strings has at least one entity that is in the collection of entity objects.",
	"Method": "boolean isIntersectionEntityRefsToEntities(Collection<String> entityRefs,Collection<Entity> entities){\r\n    for (Iterator<String> iRefs = entityRefs.iterator(); iRefs.hasNext(); ) {\r\n        String findThisEntityRef = iRefs.next();\r\n        for (Iterator<Entity> iEntities = entities.iterator(); iEntities.hasNext(); ) {\r\n            String thisEntityRef = ((Entity) iEntities.next()).getReference();\r\n            if (thisEntityRef.equals(findThisEntityRef)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.memory.util.EhCacheFactoryBean.setTimeToLive",
	"Comment": "set the time in seconds to live for an element before it expires,\ti.e. the maximum time between creation time and when an element expires.\tthis is only used if the element is not eternal. default is 120 seconds.",
	"Method": "void setTimeToLive(int timeToLive){\r\n    this.timeToLive = timeToLive;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityHandlerImpl.makeLastModified",
	"Comment": "make a last modified long from this object if possible or return null",
	"Method": "Long makeLastModified(Object lm){\r\n    Long lastModified = null;\r\n    if (lm != null) {\r\n        Class<?> c = lm.getClass();\r\n        if (Date.class.isAssignableFrom(c)) {\r\n            lastModified = ((Date) lm).getTime();\r\n        } else if (Long.class.isAssignableFrom(c)) {\r\n            lastModified = ((Long) lm);\r\n        } else if (String.class.isAssignableFrom(c)) {\r\n            try {\r\n                lastModified = new Long((String) lm);\r\n            } catch (NumberFormatException e) {\r\n            }\r\n        } else {\r\n            log.warn(\"EntityRequestHandler: Unknown type returned for 'lastModified' (not Date, Long, String): \" + lm.getClass() + \", using the default value of current time instead\");\r\n        }\r\n    }\r\n    return lastModified;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonBuilderAccessService.copyRange",
	"Comment": "copy the partial contents of the specified input stream to the specifiedoutput stream.",
	"Method": "IOException copyRange(InputStream istream,OutputStream ostream,long start,long end){\r\n    try {\r\n        istream.skip(start);\r\n    } catch (IOException e) {\r\n        return e;\r\n    }\r\n    IOException exception = null;\r\n    long bytesToRead = end - start + 1;\r\n    byte[] buffer = new byte[STREAM_BUFFER_SIZE];\r\n    int len = buffer.length;\r\n    while ((bytesToRead > 0) && (len >= buffer.length)) {\r\n        try {\r\n            len = istream.read(buffer);\r\n            if (bytesToRead >= len) {\r\n                ostream.write(buffer, 0, len);\r\n                bytesToRead -= len;\r\n            } else {\r\n                ostream.write(buffer, 0, (int) bytesToRead);\r\n                bytesToRead = 0;\r\n            }\r\n        } catch (IOException e) {\r\n            exception = e;\r\n            len = -1;\r\n        }\r\n        if (len < buffer.length)\r\n            break;\r\n    }\r\n    return exception;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder9Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder9Sql(){\r\n    return \"SAKAI_USER_ID_MAP.EID ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.DbContentService.setFileSystemHandler",
	"Comment": "set the file system handler to use when files are not stored in the database.this can be null if files are stored in the database.the default is defaultfilesystemhandler.",
	"Method": "void setFileSystemHandler(FileSystemHandler fileSystemHandler){\r\n    this.fileSystemHandler = fileSystemHandler;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.test.ContentHostingServiceRecycleTest.testRestoreOnOverquota",
	"Comment": "this is to check that when a restore is attempted and the file exceed quotathe file is not restored and we correctly unlock it.",
	"Method": "void testRestoreOnOverquota(){\r\n    ContentHostingService ch = getService(ContentHostingService.class);\r\n    SessionManager sm = getService(SessionManager.class);\r\n    ThreadLocalManager tl = getService(ThreadLocalManager.class);\r\n    reset(tl, sm);\r\n    ResourcePropertiesEdit props = ch.newResourceProperties();\r\n    props.addProperty(ResourceProperties.PROP_COLLECTION_BODY_QUOTA, \"1\");\r\n    ContentCollection c = ch.addCollection(SAMPLE_FOLDER, props);\r\n    ContentCollectionEdit ce = ch.editCollection(SAMPLE_FOLDER);\r\n    ch.commitCollection(ce);\r\n    long quota = ch.getQuota(ch.getCollection(SAMPLE_FOLDER));\r\n    Assert.assertEquals(\"The quota is set to 1\", 1, quota);\r\n    String filename = SAMPLE_FOLDER + UUID.randomUUID().toString();\r\n    try {\r\n        ContentResourceEdit resource = ch.addResource(filename);\r\n        resource.setContent(new byte[1048]);\r\n        ch.commitResource(resource);\r\n        Assert.fail(\"We should have exceed the quota.\");\r\n    } catch (OverQuotaException oqe) {\r\n    }\r\n    try {\r\n        ch.getResource(filename);\r\n        Assert.fail(\"We shouldn't be able to find: \" + filename);\r\n    } catch (IdUnusedException e) {\r\n    }\r\n    try {\r\n        ch.restoreResource(filename);\r\n        Assert.fail(\"We shouldn't be able to restore: \" + filename);\r\n    } catch (OverQuotaException e) {\r\n    }\r\n    try {\r\n        ch.getResource(filename);\r\n        Assert.fail(\"We shouldn't be able to find: \" + filename);\r\n    } catch (IdUnusedException e) {\r\n    }\r\n    List<ContentResource> allDeleted = ch.getAllDeletedResources(SAMPLE_FOLDER);\r\n    Assert.assertEquals(\"There should only be one copy of the file in the recycle bin.\", 1, allDeleted.size());\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.isToolInSite",
	"Comment": "return true if tool with id passed in exists in site passed in\tfalse otherwise.",
	"Method": "boolean isToolInSite(Site thisSite,String toolId){\r\n    final Collection toolsInSite = thisSite.getTools(toolId);\r\n    return !toolsInSite.isEmpty();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.processAddCommentToDeniedMsg",
	"Comment": "moderators may add a comment that is prepended to the textof the denied msg",
	"Method": "String processAddCommentToDeniedMsg(){\r\n    if (selectedTopic == null) {\r\n        log.debug(\"selectedTopic is null in processAddCommentToDeniedMsg\");\r\n        return gotoMain();\r\n    }\r\n    if (!selectedTopic.getIsModeratedAndHasPerm()) {\r\n        setErrorMessage(getResourceBundleString(INSUFFICIENT_PRIVILEGES_TO_ADD_COMMENT));\r\n        return ADD_COMMENT;\r\n    }\r\n    if (moderatorComments == null || moderatorComments.trim().length() < 1) {\r\n        setErrorMessage(getResourceBundleString(INVALID_COMMENT));\r\n        return ADD_COMMENT;\r\n    }\r\n    Message currMessage = selectedMessage.getMessage();\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"<div class=\\\"messageCommentWrap\\\">\");\r\n    sb.append(\"<div class=\\\"messageCommentMD\\\">\");\r\n    if (selectedTopic.getTopic().getPostAnonymous()) {\r\n        sb.append(getResourceBundleString(MOD_COMMENT_TEXT_ANON));\r\n    } else {\r\n        sb.append(getResourceBundleString(MOD_COMMENT_TEXT)).append(\" \");\r\n        sb.append(userDirectoryService.getCurrentUser().getDisplayName());\r\n    }\r\n    sb.append(\"<\/div>\");\r\n    sb.append(\"<div class=\\\"messageCommentBody\\\">\");\r\n    sb.append(moderatorComments);\r\n    sb.append(\"<\/div>\");\r\n    sb.append(\"<\/div>\");\r\n    String originalText = currMessage.getBody();\r\n    currMessage.setBody(sb.toString() + originalText);\r\n    currMessage.setTopic((DiscussionTopic) forumManager.getTopicByIdWithMessages(selectedTopic.getTopic().getId()));\r\n    forumManager.saveMessage(currMessage, true, true);\r\n    if (displayDeniedMsg) {\r\n        setSuccessMessage(getResourceBundleString(\"cdfm_denied_alert\"));\r\n        displayDeniedMsg = false;\r\n    }\r\n    forumManager.markMessageReadStatusForUser(currMessage, false, currMessage.getCreatedBy());\r\n    return MESSAGE_VIEW;\r\n}"
}, {
	"Path": "org.sakaiproject.hierarchy.dao.ResourceFinder.getResources",
	"Comment": "resolves a list of paths into resources within the current classloader",
	"Method": "Resource[] getResources(List<String> paths){\r\n    return makeResources(paths).toArray(new Resource[] {});\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.SettingsGradingSchemaPanel.updateModel",
	"Comment": "sync up the custom list we are using for the list view, back into the gradebookinformation object",
	"Method": "void updateModel(){\r\n    final List<GbGradingSchemaEntry> schemaEntries = this.schemaView.getModelObject();\r\n    final Map<String, Double> bottomPercents = new HashMap();\r\n    for (final GbGradingSchemaEntry schemaEntry : schemaEntries) {\r\n        bottomPercents.put(schemaEntry.getGrade(), schemaEntry.getMinPercent());\r\n    }\r\n    this.model.getObject().getGradebookInformation().setSelectedGradingScaleBottomPercents(bottomPercents);\r\n    this.configuredGradeMappingId = this.currentGradeMappingId;\r\n}"
}, {
	"Path": "org.sakaiproject.util.DoubleStorageSqlMySql.addLimitToQuery",
	"Comment": "mysql supports the limit operation at the end of the query so this is pretty easy",
	"Method": "String addLimitToQuery(String sqlIn,int startRec,int endRec){\r\n    int recordCount = (endRec - startRec) + 1;\r\n    return sqlIn + \" limit \" + startRec + \",\" + recordCount;\r\n}"
}, {
	"Path": "org.sakaiproject.feedback.tool.FeedbackTool.overrideSiteId",
	"Comment": "this allows the site id be overridden from the session or request.",
	"Method": "String overrideSiteId(HttpServletRequest request,String siteId){\r\n    if (siteId.equals(\"!error\")) {\r\n        return request.getContextPath();\r\n    }\r\n    return siteId;\r\n}"
}, {
	"Path": "org.sakaiproject.memory.util.EhCacheFactoryBean.createCache",
	"Comment": "create a raw cache object based on the configuration of this factorybean.",
	"Method": "Cache createCache(){\r\n    Cache cache = (!this.clearOnFlush) ? new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy, this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle, this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null, this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize, this.clearOnFlush) : new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy, this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle, this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null, this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize);\r\n    if (this.cacheEventListeners != null) {\r\n        for (CacheEventListener listener : this.cacheEventListeners) {\r\n            cache.getCacheEventNotificationService().registerListener(listener);\r\n        }\r\n    }\r\n    if (this.disabled) {\r\n        cache.setDisabled(true);\r\n    }\r\n    net.sf.ehcache.config.CacheConfiguration config = cache.getCacheConfiguration();\r\n    config.setMaxEntriesLocalHeap(maxElementsInMemory);\r\n    return cache;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityDescriptionManager.generateMethodDetails",
	"Comment": "generates the details listing which shows the response types for a view method",
	"Method": "String generateMethodDetails(String methodType,Locale locale){\r\n    return \"          <div style='font-style:italic;font-size:0.9em;padding-left:1.5em;'>\" + entityProperties.getProperty(DESCRIBE, \"describe.details.header\", locale) + \" \" + entityProperties.getProperty(DESCRIBE, \"describe.entity.\" + methodType + \".details\", locale) + \"<\/div>\\n\";\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getGbUsers",
	"Comment": "gets a list of gbusers for the specified useruuids without any filtering.\tappropriate only for back end business like grade exports, statistics, etc.",
	"Method": "List<GbUser> getGbUsers(List<String> userUuids){\r\n    final List<GbUser> gbUsers = new ArrayList(userUuids.size());\r\n    final List<User> users = getUsers(userUuids);\r\n    final Site site = getCurrentSite().orElse(null);\r\n    for (final User u : users) {\r\n        gbUsers.add(new GbUser(u, getStudentNumber(u, site)));\r\n    }\r\n    return gbUsers;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.backfillrole.BackFillRoleJob.processSites",
	"Comment": "this processes all sites looking for extra roles to add back.",
	"Method": "void processSites(AuthzGroup defaultTemplate,String type,int interval,String role){\r\n    List<String> siteIds = siteService.getSiteIds(SiteService.SelectionType.ANY, type, null, null, SiteService.SortType.NONE, null);\r\n    int updated = 0, examined = 0, special = 0, user = 0;\r\n    for (String siteId : siteIds) {\r\n        if (!run) {\r\n            break;\r\n        }\r\n        Site site;\r\n        if (siteService.isSpecialSite(siteId)) {\r\n            special++;\r\n            continue;\r\n        }\r\n        if (siteService.isUserSite(siteId)) {\r\n            user++;\r\n            continue;\r\n        }\r\n        try {\r\n            site = siteService.getSite(siteId);\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"Couldn't load site: \" + siteId);\r\n            continue;\r\n        }\r\n        examined++;\r\n        if (interval != 0 && examined % interval == 0) {\r\n            log.info(\"Processed: \" + examined);\r\n        }\r\n        boolean saved = updateSite(defaultTemplate, site, role);\r\n        if (saved) {\r\n            updated++;\r\n        }\r\n    }\r\n    log.info(String.format(\"%s: Examined %d, Updated %d, Special %d, User %d\", (run) ? \"Completed\" : \"Stopped early\", examined, updated, special, user));\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlOracle.canReadAndUpdateBlob",
	"Comment": "returns whether the the database supports reading and updating blobs.",
	"Method": "boolean canReadAndUpdateBlob(){\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.deletePages",
	"Comment": "external method for deleting pages for the tool csrf protected",
	"Method": "String deletePages(){\r\n    if (getEditPrivs() != 0)\r\n        return \"permission-failed\";\r\n    if (!checkCsrf())\r\n        return \"permission-failed\";\r\n    return deletePagesInternal();\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbFlatStorage.setFlatStorageSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setFlatStorageSql(String vendor){\r\n    this.flatStorageSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.writeObject",
	"Comment": "a specialized object write routine.\t this is because java gets a stack overflow error when\t trying to write the linked list.damn!",
	"Method": "void writeObject(ObjectOutputStream out){\r\n    out.defaultWriteObject();\r\n    byte[] a = getBytes();\r\n    out.writeObject(a);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.SettingsHelper.asList",
	"Comment": "convert map into list of objects which is easier to work with in the views",
	"Method": "List<GbGradingSchemaEntry> asList(Map<String, Double> bottomPercents){\r\n    final List<GbGradingSchemaEntry> rval = new ArrayList();\r\n    bottomPercents.forEach((k, v) -> rval.add(new GbGradingSchemaEntry(k, v)));\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.getMCPageURL",
	"Comment": "returns the url using a helper to go to mc home page directly.",
	"Method": "String getMCPageURL(String getMCPageURL,String siteId){\r\n    ToolConfiguration mcTool = null;\r\n    String url = null;\r\n    try {\r\n        String toolId = \"\";\r\n        final Site site = getSite(siteId);\r\n        if (isMessageForumsPageInSite(site)) {\r\n            toolId = DiscussionForumService.MESSAGE_CENTER_ID;\r\n        } else if (isForumsPageInSite(site)) {\r\n            toolId = DiscussionForumService.FORUMS_TOOL_ID;\r\n        } else if (isMessagesPageInSite(site)) {\r\n            toolId = DiscussionForumService.MESSAGES_TOOL_ID;\r\n        }\r\n        mcTool = site.getToolForCommonId(toolId);\r\n        if (mcTool != null) {\r\n            if (toolId == DiscussionForumService.MESSAGE_CENTER_ID) {\r\n                url = ServerConfigurationService.getPortalUrl() + \"/directtool/\" + mcTool.getId() + \"/sakai.messageforums.helper.helper/main\";\r\n            } else if (toolId == DiscussionForumService.FORUMS_TOOL_ID) {\r\n                url = ServerConfigurationService.getPortalUrl() + \"/directtool/\" + mcTool.getId() + \"/sakai.messageforums.helper.helper/discussionForum/forumsOnly/dfForums\";\r\n            } else if (toolId == DiscussionForumService.MESSAGES_TOOL_ID) {\r\n                url = ServerConfigurationService.getPortalUrl() + \"/directtool/\" + mcTool.getId() + \"/sakai.messageforums.helper.helper/privateMsg/pvtMsgHpView\";\r\n            }\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        log.error(\"IdUnusedException while trying to check if site has MF tool.\");\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.addAssignment",
	"Comment": "or update an existing item, depending upon whether itemid is set",
	"Method": "String addAssignment(){\r\n    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, new ResourceLoader().getLocale());\r\n    df.setTimeZone(TimeService.getLocalTimeZone());\r\n    if (!itemOk(itemId))\r\n        return \"permission-failed\";\r\n    if (!canEditPage())\r\n        return \"permission-failed\";\r\n    if (!checkCsrf())\r\n        return \"permission-failed\";\r\n    if (selectedAssignment == null) {\r\n        return \"failure\";\r\n    } else {\r\n        try {\r\n            LessonEntity selectedObject = assignmentEntity.getEntity(selectedAssignment);\r\n            if (selectedObject == null)\r\n                return \"failure\";\r\n            SimplePageItem i;\r\n            if (itemId != null && itemId != -1) {\r\n                i = findItem(itemId);\r\n                LessonEntity existing = assignmentEntity.getEntity(i.getSakaiId());\r\n                String ref = null;\r\n                if (existing != null)\r\n                    ref = existing.getReference();\r\n                if ((existing == null) || !ref.equals(selectedAssignment)) {\r\n                    if (i.isPrerequisite()) {\r\n                        if (existing != null) {\r\n                            i.setPrerequisite(false);\r\n                            checkControlGroup(i, false);\r\n                        }\r\n                        i.setSakaiId(selectedAssignment);\r\n                        i.setName(selectedObject.getTitle());\r\n                        i.setPrerequisite(true);\r\n                        checkControlGroup(i, true);\r\n                    } else {\r\n                        i.setSakaiId(selectedAssignment);\r\n                        i.setName(selectedObject.getTitle());\r\n                    }\r\n                    update(i);\r\n                }\r\n            } else {\r\n                i = appendItem(selectedAssignment, selectedObject.getTitle(), SimplePageItem.ASSIGNMENT);\r\n                i.setDescription(null);\r\n                saveItem(i);\r\n            }\r\n            return \"success\";\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return \"failure\";\r\n        } finally {\r\n            selectedAssignment = null;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.getNeedToPostFirst",
	"Comment": "takes a list of userids and returns a filtered list of users who need to post first",
	"Method": "boolean getNeedToPostFirst(List<String> getNeedToPostFirst,List<String> userIds,DiscussionTopic topic,List messages){\r\n    List returnList = new ArrayList<String>();\r\n    if (topic != null && topic.getPostFirst()) {\r\n        for (String userId : userIds) {\r\n            boolean needToPost = true;\r\n            for (Object messageObj : messages) {\r\n                Message message = null;\r\n                if (messageObj instanceof DiscussionMessageBean) {\r\n                    message = ((DiscussionMessageBean) messageObj).getMessage();\r\n                } else if (messageObj instanceof Message) {\r\n                    message = (Message) messageObj;\r\n                }\r\n                if (message != null && message.getCreatedBy().equals(userId) && !message.getDraft() && ((message.getApproved() != null && message.getApproved()) || !topic.getModerated()) && !message.getDeleted()) {\r\n                    needToPost = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (needToPost && !(uiPermissionsManager.isChangeSettings(topic, (DiscussionForum) topic.getBaseForum(), userId) || uiPermissionsManager.isPostToGradebook(topic, (DiscussionForum) topic.getBaseForum(), userId) || uiPermissionsManager.isModeratePostings(topic, (DiscussionForum) topic.getBaseForum(), userId))) {\r\n                returnList.add(userId);\r\n            }\r\n        }\r\n    }\r\n    return returnList;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.filterNoAccessMessages",
	"Comment": "removes from message counts messages that the user currently\tdoes not have read access to.",
	"Method": "List filterNoAccessMessages(List currentList,List removeList){\r\n    final List resultList = new ArrayList();\r\n    if (currentList.isEmpty() || removeList.isEmpty()) {\r\n        return currentList;\r\n    }\r\n    final Iterator currentIter = currentList.iterator();\r\n    while (currentIter.hasNext()) {\r\n        final Object[] resultValues = new Object[3];\r\n        Object[] removeValues;\r\n        Object[] currentValues = null;\r\n        if (currentIter.hasNext()) {\r\n            currentValues = (Object[]) currentIter.next();\r\n        }\r\n        if (currentValues == null)\r\n            throw new IllegalStateException(\"currentValues == null\");\r\n        final int pos = indexOf((String) currentValues[0], getSiteIds(removeList));\r\n        if (pos != -1) {\r\n            removeValues = (Object[]) removeList.get(pos);\r\n            if (((String) currentValues[1]).equals(removeValues[1])) {\r\n                resultValues[0] = currentValues[0];\r\n                resultValues[2] = Integer.valueOf(((Integer) currentValues[2]).intValue() - ((Integer) removeValues[2]).intValue());\r\n            }\r\n            resultList.add(resultValues);\r\n            removeList.remove(pos);\r\n        } else {\r\n            resultList.add(currentValues);\r\n        }\r\n    }\r\n    return resultList;\r\n}"
}, {
	"Path": "org.sakaiproject.util.EntityCollections.refCollectionContainsEntity",
	"Comment": "test a collection of entity reference strings for the specified entity",
	"Method": "boolean refCollectionContainsEntity(Collection<String> refs,Entity entity){\r\n    String targetRef = entity.getReference();\r\n    for (Iterator<String> i = refs.iterator(); i.hasNext(); ) {\r\n        String entityRef = i.next();\r\n        if (entityRef.equals(targetRef))\r\n            return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumStatisticsBean.getGradeFromStat",
	"Comment": "gets the grade from a statistics if possible, otherwise returns null",
	"Method": "Double getGradeFromStat(DecoratedCompiledMessageStatistics stat){\r\n    if (stat == null) {\r\n        return null;\r\n    }\r\n    DecoratedGradebookAssignment asn = stat.getGradebookAssignment();\r\n    if (asn == null || !asn.isAllowedToGrade()) {\r\n        return null;\r\n    }\r\n    String score = asn.getScore();\r\n    if (StringUtils.isBlank(score) || !isNumber(score)) {\r\n        return null;\r\n    }\r\n    try {\r\n        return Double.valueOf(score);\r\n    } catch (NumberFormatException e) {\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.toHex",
	"Comment": "returns the hex representation of the characters of a string.",
	"Method": "String toHex(byte b,String toHex,short s,String toHex,int i,String toHex,long l,String toHex,String s){\r\n    StringBuilder sb = new StringBuilder();\r\n    char[] chars = s.toCharArray();\r\n    for (int x = 0; x < chars.length; x++) {\r\n        sb.append(toHex((byte) chars[x]));\r\n        if (x != (chars.length - 1)) {\r\n            sb.append(' ');\r\n        }\r\n    }\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.util.ResponseHeaderFilter.addHeader",
	"Comment": "adds a header or replaces an existing one or clears a header if the value is null",
	"Method": "String addHeader(String name,String value){\r\n    if (name == null || \"\".equals(name)) {\r\n        throw new IllegalArgumentException(\"header name cannot be null or blank\");\r\n    }\r\n    if (this.headerMap != null) {\r\n        if (value == null) {\r\n            return this.headerMap.remove(name);\r\n        } else {\r\n            return this.headerMap.put(name, value);\r\n        }\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.api.Errors.merge",
	"Comment": "combine the errors in this object with the errors in another.",
	"Method": "Errors merge(Errors other){\r\n    errors.addAll(other.toList());\r\n    return this;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.EntityDataUtils.translateStandardSearch",
	"Comment": "translate the search into one using the standard search params",
	"Method": "Search translateStandardSearch(Search search){\r\n    Search togo = search;\r\n    if (search == null) {\r\n        togo = new Search();\r\n    } else {\r\n        EntityDataUtils.translateSearchReference(search, CollectionResolvable.SEARCH_USER_REFERENCE, new String[] { \"userReference\", \"userId\", \"userEid\", \"user\" }, \"/user/\");\r\n        EntityDataUtils.translateSearchReference(search, CollectionResolvable.SEARCH_LOCATION_REFERENCE, new String[] { \"locationReference\", \"locationId\", \"location\", \"siteReference\", \"siteId\", \"site\", \"groupReference\", \"groupId\", \"group\" }, \"/site/\");\r\n        EntityDataUtils.translateSearchReference(search, CollectionResolvable.SEARCH_TAGS, new String[] { \"tag\", \"tags\" }, \"\");\r\n    }\r\n    return togo;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.core.EntityProviderMethodStoreImpl.validateDefineableTemplates",
	"Comment": "validates the provided url templates in an entity provider and outputs theurl redirect objects as an array",
	"Method": "URLRedirect[] validateDefineableTemplates(RedirectDefinable configDefinable){\r\n    List<URLRedirect> redirects = new ArrayList<URLRedirect>();\r\n    TemplateMap[] urlMappings = configDefinable.defineURLMappings();\r\n    if (urlMappings == null || urlMappings.length == 0) {\r\n        log.warn(\"RedirectDefinable: no templates defined for url redirect\");\r\n    } else {\r\n        for (TemplateMap templateMap : urlMappings) {\r\n            String incomingTemplate = templateMap.getIncomingTemplate();\r\n            String outgoingTemplate = templateMap.getOutgoingTemplate();\r\n            URLRedirect redirect = null;\r\n            try {\r\n                redirect = new URLRedirect(incomingTemplate, outgoingTemplate);\r\n            } catch (RuntimeException e) {\r\n                throw new IllegalArgumentException(\"Failed to validate defined redirect templates for prefix (\" + configDefinable.getEntityPrefix() + \"): \" + e.getMessage(), e);\r\n            }\r\n            if (incomingTemplate.equals(outgoingTemplate)) {\r\n                throw new IllegalArgumentException(\"Invalid outgoing redirect template (\" + outgoingTemplate + \") for entity prefix (\" + configDefinable.getEntityPrefix() + \"), template is identical to incoming template (\" + incomingTemplate + \") and would cause an infinite redirect\");\r\n            }\r\n            List<String> incomingVars = new ArrayList<String>(redirect.preProcessedTemplate.variableNames);\r\n            incomingVars.add(TemplateParseUtil.PREFIX);\r\n            incomingVars.add(TemplateParseUtil.EXTENSION);\r\n            incomingVars.add(TemplateParseUtil.DOT_EXTENSION);\r\n            incomingVars.add(TemplateParseUtil.QUERY_STRING);\r\n            incomingVars.add(TemplateParseUtil.QUESTION_QUERY_STRING);\r\n            List<String> outgoingVars = redirect.outgoingPreProcessedTemplate.variableNames;\r\n            if (incomingVars.containsAll(outgoingVars)) {\r\n                redirects.add(redirect);\r\n            } else {\r\n                throw new IllegalArgumentException(\"Outgoing template (\" + outgoingTemplate + \") has variables which do not occur in \" + \"incoming template (\" + incomingTemplate + \") and \" + TemplateParseUtil.PREFIX + \", please make sure your outgoing template only includes variables\" + \" which can be found in the incoming template and \" + TemplateParseUtil.PREFIX);\r\n            }\r\n        }\r\n    }\r\n    return redirects.toArray(new URLRedirect[redirects.size()]);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.MessageHelper.getString",
	"Comment": "get a parameterised message from the bundle and perform the parameter substitution on it",
	"Method": "String getString(String key,String getString,String key,Object arguments){\r\n    return MessageFormat.format(getString(key), arguments);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getDisplayInvalidDateErrMsg",
	"Comment": "returns whether an invalid date error message is displayed",
	"Method": "boolean getDisplayInvalidDateErrMsg(){\r\n    return displayInvalidDateErrMsg;\r\n}"
}, {
	"Path": "org.sakaiproject.memory.util.EhCacheFactoryBean.setMaxElementsInMemory",
	"Comment": "specify the maximum number of cached objects in memory.\tdefault is 10000 elements.",
	"Method": "void setMaxElementsInMemory(int maxElementsInMemory){\r\n    this.maxElementsInMemory = maxElementsInMemory;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.RebuildBreakdownServiceImpl.handleMLSessionSpecialKey",
	"Comment": "performs any special processing for keys found in the session cache.these keys couldbe attributes of the session itself, or objects like toolsessions or contextsessions",
	"Method": "boolean handleMLSessionSpecialKey(MyLittleSession s,String key,Serializable object){\r\n    if (object != null) {\r\n        if (SESSION_CREATION_TIME_KEY.equals(key)) {\r\n            if (object instanceof Long) {\r\n                s.m_created = (Long) object;\r\n            }\r\n            return true;\r\n        } else if (SESSION_LAST_ACCESSED_TIME_KEY.equals(key)) {\r\n            if (object instanceof Long) {\r\n                s.m_accessed = (Long) object;\r\n            }\r\n            return true;\r\n        } else if (sessionAttributeBlacklist.contains(key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.EntityHttpServletResponse.getHeaders",
	"Comment": "return the primary value for the given header, if any,will return the first value in case of multiple values",
	"Method": "List<String> getHeaders(String name,Map<String, String[]> getHeaders){\r\n    Map<String, String[]> m = new ArrayOrderedMap<String, String[]>();\r\n    if (this.headers != null && this.headers.size() > 0) {\r\n        Set<String> keysSet = this.headers.keySet();\r\n        ArrayList<String> keysList = new ArrayList<String>(keysSet);\r\n        Collections.sort(keysList);\r\n        for (String key : keysList) {\r\n            Vector<String> values = this.headers.get(key);\r\n            if (values != null && values.size() > 0) {\r\n                String[] value = values.toArray(new String[values.size()]);\r\n                m.put(key, value);\r\n            }\r\n        }\r\n    }\r\n    return m;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.util.RendererUtil.isDisabledOrReadonly",
	"Comment": "if renderer supports disabled or readonly attributes use this method toobtain an early exit from decode method. good idea to include it anyway,compnent will continue to work when these properties are added.",
	"Method": "boolean isDisabledOrReadonly(FacesContext context,UIComponent component){\r\n    boolean disabled = false;\r\n    boolean readOnly = false;\r\n    Object disabledAttr = getAttribute(context, component, \"disabled\");\r\n    if (disabledAttr != null) {\r\n        disabled = disabledAttr.equals(Boolean.TRUE);\r\n    }\r\n    Object readOnlyAttr = getAttribute(context, component, \"readonly\");\r\n    if (readOnlyAttr != null) {\r\n        readOnly = readOnlyAttr.equals(Boolean.TRUE);\r\n    }\r\n    return readOnly | disabled;\r\n}"
}, {
	"Path": "org.sakaiproject.email.impl.BaseDigestService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : serverConfigurationService.getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf2.renderer.InputRichTextRenderer.makeToolbarScript",
	"Comment": "built toolbar part of configuration script for a list of button commands.",
	"Method": "String makeToolbarScript(String buttonList){\r\n    StringBuilder script = new StringBuilder();\r\n    String q = \"\\\"\";\r\n    script.append(\"[[\");\r\n    StringTokenizer st = new StringTokenizer(buttonList, \",\", false);\r\n    while (st.hasMoreTokens()) {\r\n        String command = st.nextToken();\r\n        if (!\"linebreak\".equals(command)) {\r\n            script.append(q + command + q + \", \");\r\n        } else {\r\n            script.append(\"],[\");\r\n        }\r\n    }\r\n    script.append(\"]]\");\r\n    return script.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.setSessionManager",
	"Comment": "called by the spring framework to initialize the sessionmanager data member specified in the components.xml file via ioc.",
	"Method": "void setSessionManager(SessionManager sessionManager){\r\n    this.sessionManager = sessionManager;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getDirectLinkToAsset",
	"Comment": "return a direct link to the asset so we can bypass streaming the asset in the jvm",
	"Method": "URI getDirectLinkToAsset(ContentResource resource){\r\n    return m_storage.getDirectLink(resource);\r\n}"
}, {
	"Path": "org.sakaiproject.util.BasicAuth.init",
	"Comment": "initialise the patterns, since some of the spring stuf may not be up when\tthe bean is created, this is here to make certain that init is performed\twhen spring is ready",
	"Method": "void init(){\r\n    ArrayList<Pattern> pat = new ArrayList<Pattern>();\r\n    ArrayList<String> mat = new ArrayList<String>();\r\n    String[] morepatterns = null;\r\n    try {\r\n        morepatterns = ServerConfigurationService.getStrings(\"login.browser.user.agent\");\r\n    } catch (Exception ex) {\r\n    }\r\n    if (morepatterns != null) {\r\n        for (int i = 0; i < morepatterns.length; i++) {\r\n            String line = morepatterns[i];\r\n            if (line != null && line.length() > 0) {\r\n                String check = line.substring(0, 1);\r\n                mat.add(check);\r\n                line = line.substring(1);\r\n                pat.add(Pattern.compile(line));\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < matchPatterns.length; i++) {\r\n        String line = matchPatterns[i];\r\n        String check = line.substring(0, 1);\r\n        mat.add(check);\r\n        line = line.substring(1);\r\n        pat.add(Pattern.compile(line));\r\n    }\r\n    patterns = new Pattern[pat.size()];\r\n    patterns = (Pattern[]) pat.toArray(patterns);\r\n    match = new String[mat.size()];\r\n    match = (String[]) mat.toArray(match);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getIconClassMap",
	"Comment": "helper to determine the icon class for possible external app names",
	"Method": "Map<String, String> getIconClassMap(){\r\n    final Map<String, String> mapping = new HashMap();\r\n    mapping.put(this.toolManager.getLocalizedToolProperty(\"sakai.assignment\", \"title\"), getAssignmentsIconClass());\r\n    mapping.put(this.toolManager.getLocalizedToolProperty(\"sakai.samigo\", \"title\"), getSamigoIconClass());\r\n    mapping.put(\"Lesson Builder\", getLessonBuilderIconClass());\r\n    return mapping;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.getSessionManager",
	"Comment": "returns the instance of the sessionmanager injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "SessionManager getSessionManager(){\r\n    return sessionManager;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDoubleStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be gotten.",
	"Method": "Edit editResource(Entity container,String id){\r\n    Edit edit = null;\r\n    if (m_locksAreInDb) {\r\n        if (\"oracle\".equals(m_sql.getVendor())) {\r\n            String statement = doubleStorageSql.getSelectXml6Sql(m_resourceTableName, m_resourceTableIdField, m_resourceTableContainerIdField, StorageUtils.escapeSql(id), StorageUtils.escapeSql(container.getReference()));\r\n            StringBuilder result = new StringBuilder();\r\n            Connection lock = m_sql.dbReadLock(statement, result);\r\n            if ((lock == null) || (result.length() == 0))\r\n                return null;\r\n            Entity entry = readResource(container, result.toString());\r\n            edit = m_user.newResourceEdit(container, entry);\r\n            m_locks.put(entry.getReference(), lock);\r\n        } else {\r\n            throw new UnsupportedOperationException(\"Record locking only available when configured with Oracle database\");\r\n        }\r\n    } else if (m_locksAreInTable) {\r\n        Entity entry = getResource(container, id);\r\n        if (entry == null)\r\n            return null;\r\n        String statement = doubleStorageSql.getInsertSql2();\r\n        String sessionId = UsageSessionService.getSessionId();\r\n        if (sessionId == null) {\r\n            sessionId = \"\";\r\n        }\r\n        Object[] fields = new Object[4];\r\n        fields[0] = m_resourceTableName;\r\n        fields[1] = doubleStorageSql.getRecordId(container.getReference() + \"/\" + id);\r\n        fields[2] = TimeService.newTime();\r\n        fields[3] = sessionId;\r\n        boolean ok = m_sql.dbWriteFailQuiet(null, statement, fields);\r\n        if (!ok) {\r\n            return null;\r\n        }\r\n        edit = m_user.newResourceEdit(container, entry);\r\n    } else {\r\n        Entity entry = getResource(container, id);\r\n        if (entry == null)\r\n            return null;\r\n        synchronized (m_locks) {\r\n            if (m_locks.containsKey(entry.getReference()))\r\n                return null;\r\n            edit = m_user.newResourceEdit(container, entry);\r\n            m_locks.put(entry.getReference(), edit);\r\n        }\r\n    }\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.DefaultFileSystemHandler.getFile",
	"Comment": "a helper method to get the file object for the parameters.this method will look at the property useidforfilepath to see if theid must be used in the file path.",
	"Method": "File getFile(String id,String root,String filePath){\r\n    if (useIdForFilePath) {\r\n        return new File(root, id);\r\n    } else {\r\n        return new File(root, filePath);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.Validator.cleanFilename",
	"Comment": "return a safe filename by replacing all whitespace and invalid characters",
	"Method": "String cleanFilename(String filename){\r\n    String cleanFilename = filename.replaceAll(\"\\\\s\", \"_\");\r\n    final int len = cleanFilename.length();\r\n    StringBuilder buf = new StringBuilder();\r\n    for (int i = 0; i < len; i++) {\r\n        char c = cleanFilename.charAt(i);\r\n        if (INVALID_CHARS_IN_FILENAME.indexOf(c) != -1) {\r\n            buf.append(\"_\");\r\n        } else {\r\n            buf.append(c);\r\n        }\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsMessageManagerImpl.findReadViewableMessageCountByTopicId",
	"Comment": "returns count of all read msgs for current user that have been approved orwere authored by user",
	"Method": "int findReadViewableMessageCountByTopicId(Long topicId){\r\n    if (topicId == null) {\r\n        log.error(\"findReadViewableMessageCountByTopicId failed with topicId: null\");\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    if (getCurrentUser() != null) {\r\n        return findReadViewableMessageCountByTopicIdByUserId(topicId, getCurrentUser());\r\n    } else\r\n        return 0;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder10Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder10Sql(){\r\n    return \"SAKAI_USER_ID_MAP.EID DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.util.UserNotificationPreferencesRegistrationImpl.getOverrideSectionTitleBundleKey",
	"Comment": "get the key used to look up the site override section title in the bundle",
	"Method": "String getOverrideSectionTitleBundleKey(){\r\n    return overrideSectionTitleBundleKey;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumStatisticsBean.filterToAnonAwareMessages",
	"Comment": "filters out messages associated with anonymous topics for which the user is not permitted to see ids",
	"Method": "List<Message> filterToAnonAwareMessages(List<Message> messages){\r\n    if (!isAnonymousEnabled() || m_displayAnonIds) {\r\n        return messages;\r\n    }\r\n    List<Message> filtered = new ArrayList<Message>();\r\n    Map<Topic, Boolean> topicToUseAnon = new HashMap();\r\n    for (Message message : messages) {\r\n        Topic topic = message.getTopic();\r\n        Boolean useAnon = topicToUseAnon.get(topic);\r\n        if (useAnon == null) {\r\n            useAnon = Boolean.valueOf(isUseAnonymousId(topic));\r\n            topicToUseAnon.put(topic, useAnon);\r\n        }\r\n        if (!useAnon) {\r\n            filtered.add(message);\r\n        }\r\n    }\r\n    return filtered;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlDefault.canReadAndUpdateBlob",
	"Comment": "returns whether the the database supports reading and updating blobs.",
	"Method": "boolean canReadAndUpdateBlob(){\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.getCourseSitePublishService",
	"Comment": "returns the instance of the siteremovalservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "CourseSitePublishService getCourseSitePublishService(){\r\n    return courseSitePublishService;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionTopicBean.setTopicAutoMarkThreadsRead",
	"Comment": "set the boolean automarkthreadsread value for this discussion topic.",
	"Method": "void setTopicAutoMarkThreadsRead(Boolean autoMarkThreadsRead){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"setTopicAutoMarkThreadsRead(String \" + autoMarkThreadsRead + \")\");\r\n    }\r\n    topic.setAutoMarkThreadsRead(autoMarkThreadsRead);\r\n}"
}, {
	"Path": "org.sakaiproject.util.MultiSingleStorageSqlOracle.getXmlSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table and limits the result set.",
	"Method": "String getXmlSql(String field,String table,int first,int last){\r\n    return \"select \" + storageFields + \" from (select \" + storageFields + \" , RANK() OVER (order by \" + field + \") as rank from \" + table + \" order by \" + field + \" asc) where rank between ? and ?\";\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.removeMemberFromGroup",
	"Comment": "add member to a group, once id and security checks have been cleared.",
	"Method": "void removeMemberFromGroup(AuthzGroup azGroup,String userId){\r\n    addLiveUpdateProperties((BaseAuthzGroup) azGroup);\r\n    for (AuthzGroupAdvisor authzGroupAdvisor : authzGroupAdvisors) {\r\n        try {\r\n            authzGroupAdvisor.groupUpdate(azGroup, userId, azGroup.getMember(userId).getRole().getId());\r\n        } catch (Exception e) {\r\n            log.error(\"Advisor error during removeMemberFromGroup()\", e);\r\n        }\r\n    }\r\n    m_storage.removeUser(azGroup, userId);\r\n    eventTrackingService().post(eventTrackingService().newEvent(SECURE_UNJOIN_AUTHZ_GROUP, azGroup.getReference(), true));\r\n    ((BaseAuthzGroup) azGroup).closeEdit();\r\n    BaseAuthzGroup updatedRealm = (BaseAuthzGroup) m_storage.get(azGroup.getId());\r\n    updateSiteSecurity(updatedRealm);\r\n    ((BaseAuthzGroup) azGroup).setEvent(null);\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.execute",
	"Comment": "implement the quartz job interface, which is called by the scheduler when a trigger associated with the job fires. this quartz job removes course sites that are more than a specified number of terms old.",
	"Method": "void execute(JobExecutionContext context){\r\n    synchronized (this) {\r\n        log.info(\"execute()\");\r\n        if (user == null) {\r\n            log.error(\"The scheduled job to remove course sites can not be run with an invalid user.  No courses were published.\");\r\n        } else {\r\n            try {\r\n                Session sakaiSesson = sessionManager.getCurrentSession();\r\n                sakaiSesson.setUserId(user.getId());\r\n                int numSitesPublished = courseSitePublishService.publishCourseSites(numDaysBeforeTermStarts);\r\n                log.info(numSitesPublished + \" course sites were published.\");\r\n            } catch (Exception ex) {\r\n                log.error(ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BasicContentTypeImageService.isUnknownType",
	"Comment": "is the type one of the known types used when the file type is unknown?",
	"Method": "boolean isUnknownType(String contentType){\r\n    if (contentType.equals(UNKNOWN_TYPE))\r\n        return true;\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.EntityHttpServletResponse.getHeader",
	"Comment": "return the primary value for the given header, if any,will return the first value in case of multiple values",
	"Method": "String getHeader(String name){\r\n    if (name == null || \"\".equals(name)) {\r\n        throw new IllegalArgumentException(\"name cannot be null\");\r\n    }\r\n    String value = null;\r\n    if (this.headers.containsKey(name)) {\r\n        Vector<String> v = this.headers.get(name);\r\n        if (v == null) {\r\n            this.headers.remove(name);\r\n        } else {\r\n            if (v.size() > 0) {\r\n                value = v.get(0);\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.renderer.InputRichTextRenderer.makeToolbarScript",
	"Comment": "built toolbar part of configuration script for a list of button commands.",
	"Method": "String makeToolbarScript(String buttonList){\r\n    StringBuilder script = new StringBuilder();\r\n    String q = \"\\\"\";\r\n    script.append(\"[[\");\r\n    StringTokenizer st = new StringTokenizer(buttonList, \",\", false);\r\n    while (st.hasMoreTokens()) {\r\n        String command = st.nextToken();\r\n        if (!\"linebreak\".equals(command)) {\r\n            script.append(q + command + q + \", \");\r\n        } else {\r\n            script.append(\"],[\");\r\n        }\r\n    }\r\n    script.append(\"]]\");\r\n    return script.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.util.EmailNotification.isImmediateDeliveryOption",
	"Comment": "filter the preference option based on the notification resource type.",
	"Method": "boolean isImmediateDeliveryOption(int option,Notification notification,boolean isImmediateDeliveryOption,int option,String resourceFilter){\r\n    if (option == NotificationService.PREF_IMMEDIATE) {\r\n        return true;\r\n    } else {\r\n        if (option == NotificationService.PREF_NONE) {\r\n            String type = getType(resourceFilter);\r\n            if (type != null) {\r\n                if (\"org.sakaiproject.mailarchive.api.MailArchiveService\".equals(type)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.pages.BasePage.clearFeedback",
	"Comment": "helper to clear the feedback panel display from any child component",
	"Method": "void clearFeedback(){\r\n    this.feedbackPanel.clear();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getProperties",
	"Comment": "access the properties of a resource with this resource id, either collection or resource.",
	"Method": "ResourceProperties getProperties(String id,ResourceProperties getProperties,ResourceProperties getProperties){\r\n    unlock(AUTH_RESOURCE_READ, id);\r\n    boolean collectionHint = id.endsWith(Entity.SEPARATOR);\r\n    Entity o = null;\r\n    try {\r\n        if (collectionHint) {\r\n            o = findCollection(id);\r\n        } else {\r\n            o = findResource(id);\r\n        }\r\n    } catch (TypeException ignore) {\r\n    }\r\n    if (o == null)\r\n        throw new IdUnusedException(id);\r\n    return o.getProperties();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.ContentHostingHandlerResolverImpl.getVirtualEntity",
	"Comment": "convert the contententity into its virtual shadow via its contenthostinghandler bean. if no bean is defined for the contententity, no resolution is performed. if the contententity is null, no resolution is performed.",
	"Method": "ContentEntity getVirtualEntity(ContentEntity ce,String finalId){\r\n    if (ce == null) {\r\n        return null;\r\n    }\r\n    ResourceProperties p = ce.getProperties();\r\n    String chhbeanname = p.getProperty(CHH_BEAN_NAME);\r\n    if (chhbeanname != null && chhbeanname.length() > 0) {\r\n        try {\r\n            ContentHostingHandler chh = (ContentHostingHandler) ComponentManager.get(chhbeanname);\r\n            return chh.getVirtualContentEntity(ce, finalId);\r\n        } catch (Exception e) {\r\n            log.warn(\"Failed to find CHH Bean \" + chhbeanname + \" or bean failed to resolve virtual entity ID\", e);\r\n            return ce;\r\n        }\r\n    }\r\n    return ce;\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlMySql.getXmlSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table and limits the result set.",
	"Method": "String getXmlSql(String field,String table,int first,int last){\r\n    return \"select XML from \" + table + \" order by \" + field + \" asc limit \" + (last - first + 1) + \" offset \" + (first - 1);\r\n}"
}, {
	"Path": "org.sakaiproject.util.EntityCollections.isEqualEntityRefsToEntities",
	"Comment": "see if the collection of entity reference strings matches completely the collection of entity objects.",
	"Method": "boolean isEqualEntityRefsToEntities(Collection<String> entityRefs,Collection<Entity> entities){\r\n    if (entityRefs.size() != entities.size())\r\n        return false;\r\n    for (Iterator<String> iRefs = entityRefs.iterator(); iRefs.hasNext(); ) {\r\n        String entityRef = iRefs.next();\r\n        if (!entityCollectionContainsRefString(entities, entityRef)) {\r\n            return false;\r\n        }\r\n    }\r\n    for (Iterator<Entity> iEntities = entities.iterator(); iEntities.hasNext(); ) {\r\n        String findThisEntityRef = iEntities.next().getReference();\r\n        if (!entityRefs.contains(findThisEntityRef)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDualSingleStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be\tgotten.",
	"Method": "Edit editResource(String id){\r\n    Edit edit = null;\r\n    if (m_locksAreInDb) {\r\n        if (\"oracle\".equals(m_sql.getVendor())) {\r\n            final List<Entity> l = new ArrayList<Entity>();\r\n            Connection lock = null;\r\n            if (m_user instanceof EntityReaderHandler) {\r\n                String statement = \"select XML from \" + m_resourceTableName + \" where ( \" + m_resourceTableIdField + \" = '\" + StorageUtils.escapeSql(caseId(id)) + \"' )\" + \" for update nowait\";\r\n                lock = m_sql.dbReadLock(statement, new SqlReader() {\r\n                    public Object readSqlResultRecord(ResultSet result) {\r\n                        try {\r\n                            l.add(readResource(result.getString(1), result.getBytes(2)));\r\n                        } catch (SQLException e) {\r\n                            log.warn(\"Failed to retrieve record \", e);\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            } else {\r\n                String statement = \"select BENTRY, XML from \" + m_resourceTableName + \" where ( \" + m_resourceTableIdField + \" = '\" + StorageUtils.escapeSql(caseId(id)) + \"' )\" + \" for update nowait\";\r\n                lock = m_sql.dbReadLock(statement, new SqlReader() {\r\n                    public Object readSqlResultRecord(ResultSet result) {\r\n                        try {\r\n                            l.add(readResource(result.getString(1), result.getBytes(2)));\r\n                        } catch (SQLException e) {\r\n                            log.warn(\"Failed to retrieve record \", e);\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            }\r\n            if ((lock == null) || (l.size() == 0))\r\n                return null;\r\n            Entity entry = l.get(0);\r\n            edit = m_user.newResourceEdit(null, entry);\r\n            m_locks.put(entry.getReference(), lock);\r\n        } else {\r\n            throw new UnsupportedOperationException(\"Record locking only available when configured with Oracle database\");\r\n        }\r\n    } else if (m_locksAreInTable) {\r\n        Entity entry = getResource(id);\r\n        if (entry == null)\r\n            return null;\r\n        String statement = singleStorageSql.getInsertLocks();\r\n        String sessionId = UsageSessionService.getSessionId();\r\n        if (sessionId == null) {\r\n            sessionId = \"\";\r\n        }\r\n        Object[] fields = new Object[4];\r\n        fields[0] = m_resourceTableName;\r\n        fields[1] = internalRecordId(caseId(id));\r\n        fields[2] = TimeService.newTime();\r\n        fields[3] = sessionId;\r\n        boolean ok = m_sql.dbWriteFailQuiet(null, statement, fields);\r\n        if (!ok) {\r\n            return null;\r\n        }\r\n        edit = m_user.newResourceEdit(null, entry);\r\n    } else {\r\n        Entity entry = getResource(id);\r\n        if (entry == null)\r\n            return null;\r\n        synchronized (m_locks) {\r\n            if (m_locks.containsKey(entry.getReference()))\r\n                return null;\r\n            edit = m_user.newResourceEdit(null, entry);\r\n            m_locks.put(entry.getReference(), edit);\r\n        }\r\n    }\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDualSingleStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be\tgotten.",
	"Method": "Edit editResource(String id){\r\n    try {\r\n        l.add(readResource(result.getString(1), result.getBytes(2)));\r\n    } catch (SQLException e) {\r\n        log.warn(\"Failed to retrieve record \", e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDualSingleStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be\tgotten.",
	"Method": "Edit editResource(String id){\r\n    try {\r\n        l.add(readResource(result.getString(1), result.getBytes(2)));\r\n    } catch (SQLException e) {\r\n        log.warn(\"Failed to retrieve record \", e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.impl.EntityTaggingService.diffEntityTags",
	"Comment": "finds the current tags and then diffs them to get the tags which need to be added and the tags which need to be deleted",
	"Method": "void diffEntityTags(String reference,String[] tags,Set<String> addTags,Set<String> removeTags){\r\n    Set<String> curTags = new HashSet<String>();\r\n    List<EntityTagApplication> results = dao.findBySearch(EntityTagApplication.class, new Search(\"entityRef\", reference));\r\n    for (EntityTagApplication entityTagApplication : results) {\r\n        curTags.add(entityTagApplication.getTag());\r\n    }\r\n    Set<String> setTags = new HashSet<String>();\r\n    for (String tag : tags) {\r\n        setTags.add(tag);\r\n        if (curTags.contains(tag)) {\r\n            continue;\r\n        } else {\r\n            addTags.add(tag);\r\n        }\r\n    }\r\n    curTags.removeAll(setTags);\r\n    removeTags.clear();\r\n    removeTags.addAll(curTags);\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder12Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder12Sql(){\r\n    return \"SAKAI_USER_ID_MAP.EID DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.processFileUpload",
	"Comment": "creates a bufferedinputstream to get ready to upload file selected. used\tby add podcast and revise podcast pages.",
	"Method": "void processFileUpload(ValueChangeEvent event){\r\n    UIComponent component = event.getComponent();\r\n    Object newValue = event.getNewValue();\r\n    Object oldValue = event.getOldValue();\r\n    PhaseId phaseId = event.getPhaseId();\r\n    Object source = event.getSource();\r\n    if (newValue instanceof String)\r\n        return;\r\n    if (newValue == null)\r\n        return;\r\n    FileItem item = (FileItem) event.getNewValue();\r\n    String fieldName = item.getFieldName();\r\n    filename = Validator.getFileName(item.getName());\r\n    fileSize = item.getSize();\r\n    fileContentType = item.getContentType();\r\n    try {\r\n        fileAsStream = new BufferedInputStream(item.getInputStream());\r\n    } catch (IOException e) {\r\n        log.warn(\"IOException while attempting to set BufferedInputStream to upload \" + filename + \" from site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(INTERNAL_ERROR_ALERT);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.isAllowedAuth",
	"Comment": "is the current user allowed to grant .auth access to the site?",
	"Method": "boolean isAllowedAuth(){\r\n    return serverConfigurationService().getBoolean(\"sitemanage.grant.auth\", false);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.model.GbModalWindow.setAssignmentToReturnFocusTo",
	"Comment": "set the assignment to return focus to upon closing the window.",
	"Method": "void setAssignmentToReturnFocusTo(String assignmentId){\r\n    this.assignmentIdToReturnFocusTo = assignmentId;\r\n}"
}, {
	"Path": "org.sakaiproject.util.conversion.SchemaConversionDriver.getSelectValidateRecord",
	"Comment": "sql to select the final set of objects for validation processing",
	"Method": "String getSelectValidateRecord(){\r\n    return p.getProperty(base + \".select.validate.record\");\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.help.HelpManagerImpl.registerExternalHelpContent",
	"Comment": "register external help content\tbuild document from external reg file",
	"Method": "void registerExternalHelpContent(String helpFile){\r\n    Set<Category> categories = new TreeSet<Category>();\r\n    URL urlResource = null;\r\n    InputStream ism = null;\r\n    BufferedInputStream bis = null;\r\n    try {\r\n        try {\r\n            urlResource = new URL(EXTERNAL_URL + \"/\" + helpFile);\r\n            ism = urlResource.openStream();\r\n        } catch (IOException e) {\r\n            helpFile = DEFAULT_HELP_FILE;\r\n            urlResource = new URL(EXTERNAL_URL + \"/\" + helpFile);\r\n            ism = urlResource.openStream();\r\n        }\r\n        bis = new BufferedInputStream(ism);\r\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n        dbf.setNamespaceAware(true);\r\n        DocumentBuilder builder = dbf.newDocumentBuilder();\r\n        InputSource is = new org.xml.sax.InputSource(bis);\r\n        org.w3c.dom.Document xmlDocument = builder.parse(is);\r\n        Node helpRegNode = (Node) xmlDocument.getDocumentElement();\r\n        recursiveExternalReg(helpRegNode, null, categories);\r\n        if (!getRestConfiguration().getOrganization().equals(\"sakai\")) {\r\n            String corpusXml = getRestConfiguration().getCorpusDocument();\r\n            DocumentBuilderFactory dbfCorpus = DocumentBuilderFactory.newInstance();\r\n            dbfCorpus.setNamespaceAware(true);\r\n            DocumentBuilder builderCorpus = dbfCorpus.newDocumentBuilder();\r\n            StringReader sReader = new StringReader(corpusXml);\r\n            InputSource isCorpus = new org.xml.sax.InputSource(sReader);\r\n            org.w3c.dom.Document xmlDocumentCorpus = builderCorpus.parse(isCorpus);\r\n            registerCorpusDocs(xmlDocumentCorpus);\r\n            sReader.close();\r\n        }\r\n    } catch (MalformedURLException e) {\r\n        log.warn(\"Unable to load external URL: \" + EXTERNAL_URL + \"/\" + helpFile, e);\r\n    } catch (IOException e) {\r\n        log.warn(\"I/O error opening external URL: \" + EXTERNAL_URL + \"/\" + helpFile, e);\r\n    } catch (ParserConfigurationException e) {\r\n        log.error(e.getMessage(), e);\r\n    } catch (SAXException e) {\r\n        log.error(e.getMessage(), e);\r\n    } finally {\r\n        try {\r\n            if (bis != null) {\r\n                bis.close();\r\n            }\r\n        } catch (IOException e) {\r\n            log.error(\"error closing stream\", e);\r\n        }\r\n    }\r\n    TableOfContentsBean externalToc = new TableOfContentsBean();\r\n    externalToc.setCategories(categories);\r\n    setTableOfContents(externalToc);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podFeedBean.processRevisePodcast",
	"Comment": "determine if revisions made to global feed info and apply changes.",
	"Method": "String processRevisePodcast(){\r\n    String whereToGo = \"cancel\";\r\n    final String oldTitle = podfeedService.getPodfeedTitle();\r\n    if (podfeedTitle != null && !podfeedTitle.equals(oldTitle)) {\r\n        if (podfeedTitle.equals(\"\")) {\r\n            setErrorMessage(NO_TITLE_ALERT);\r\n            whereToGo = \"podfeedRevise\";\r\n        } else {\r\n            podfeedService.setPodfeedTitle(podfeedTitle);\r\n        }\r\n    }\r\n    final String oldDescription = podfeedService.getPodfeedDescription();\r\n    if (podfeedDescription != null && !podfeedDescription.equals(oldDescription)) {\r\n        podfeedService.setPodfeedDescription(podfeedDescription);\r\n    }\r\n    if (feedCopyright != null || !\"\".equals(feedCopyright)) {\r\n        podfeedService.setPodfeedCopyright(feedCopyright);\r\n    }\r\n    if (feedGenerator != null || !\"\".equals(feedGenerator)) {\r\n        podfeedService.setPodfeedGenerator(feedGenerator);\r\n    }\r\n    return whereToGo;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Xml.encodeAttribute",
	"Comment": "place a string into the attribute of the element , encoded so special characters can be used.",
	"Method": "void encodeAttribute(Element el,String tag,String value){\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    try {\r\n        String encoded = new String(Base64.encodeBase64(value.getBytes(\"UTF-8\")), \"UTF-8\");\r\n        el.setAttribute(tag, encoded);\r\n    } catch (Exception e) {\r\n        log.warn(\"encodeAttribute: \" + e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityEncodingManager.encodeData",
	"Comment": "encode data into a given format, can handle any java object,note that unsupported formats will result in an exception",
	"Method": "String encodeData(Object data,String format,String name,Map<String, Object> properties){\r\n    if (format == null) {\r\n        format = Formats.XML;\r\n    }\r\n    String encoded = \"\";\r\n    if (data != null) {\r\n        int maxDepth = 0;\r\n        if (name != null) {\r\n            DepthLimitable provider = (DepthLimitable) entityProviderManager.getProviderByPrefixAndCapability(name, DepthLimitable.class);\r\n            if (provider != null) {\r\n                maxDepth = provider.getMaxDepth();\r\n            }\r\n        }\r\n        Transcoder transcoder = getTranscoder(format);\r\n        try {\r\n            if (maxDepth == 0) {\r\n                encoded = transcoder.encode(data, name, properties);\r\n            } else {\r\n                encoded = transcoder.encode(data, name, properties, maxDepth);\r\n            }\r\n        } catch (RuntimeException e) {\r\n            throw new UnsupportedOperationException(\"Failure encoding data (\" + data + \") of type (\" + data.getClass() + \"): \" + e.getMessage(), e);\r\n        }\r\n    }\r\n    return encoded;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlDefault.getBooleanConstant",
	"Comment": "returns a databases representation of the specified java boolean value.",
	"Method": "String getBooleanConstant(boolean value){\r\n    return value ? \"1\" : \"0\";\r\n}"
}, {
	"Path": "org.apache.commons.dbcp.SakaiBasicDataSource.setDefaultTransactionIsolationString",
	"Comment": "set the default transaction isolation level from a string value, based on the settings and values in java.sql.connection",
	"Method": "void setDefaultTransactionIsolationString(String defaultTransactionIsolation){\r\n    if ((defaultTransactionIsolation == null) || (defaultTransactionIsolation.trim().length() == 0)) {\r\n        setDefaultTransactionIsolation(PoolableConnectionFactory.UNKNOWN_TRANSACTIONISOLATION);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_NONE\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_NONE);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_READ_UNCOMMITTED\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_READ_COMMITTED\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_REPEATABLE_READ\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_SERIALIZABLE\")) {\r\n        setDefaultTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\r\n    } else {\r\n        setDefaultTransactionIsolation(PoolableConnectionFactory.UNKNOWN_TRANSACTIONISOLATION);\r\n        log.warn(\"invalid transaction isolation level: {}\", defaultTransactionIsolation);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.SakaiProperties.getSeparateProperties",
	"Comment": "gets the individual properties from each properties file which is read in",
	"Method": "Map<String, Properties> getSeparateProperties(){\r\n    LinkedHashMap<String, Properties> m = new LinkedHashMap<String, Properties>();\r\n    for (Entry<String, Properties> entry : propertiesFactoryBean.getLoadedProperties().entrySet()) {\r\n        m.put(entry.getKey(), dereferenceProperties(entry.getValue()));\r\n    }\r\n    return m;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.PrivateMessagesTool.sortGroups",
	"Comment": "takes groups defined and sorts them alphabetically by title\tso will be in some order when displayed on permission widget.",
	"Method": "Collection sortGroups(Collection groups){\r\n    List sortGroupsList = new ArrayList();\r\n    sortGroupsList.addAll(groups);\r\n    final GroupComparator groupComparator = new GroupComparator(\"title\", true);\r\n    Collections.sort(sortGroupsList, groupComparator);\r\n    groups.clear();\r\n    groups.addAll(sortGroupsList);\r\n    return groups;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.importExport.CommentValidator.validate",
	"Comment": "validate the comments contained within the list of imported rows.",
	"Method": "CommentValidationReport validate(List<ImportedRow> rows,List<ImportedColumn> columns){\r\n    report = new CommentValidationReport();\r\n    for (ImportedColumn column : columns) {\r\n        Type columnType = column.getType();\r\n        String columnTitle = column.getColumnTitle();\r\n        if (columnType == Type.COMMENTS) {\r\n            for (ImportedRow row : rows) {\r\n                ImportedCell cell = row.getCellMap().get(columnTitle);\r\n                if (cell != null) {\r\n                    String studentIdentifier = row.getStudentEid();\r\n                    validateComment(columnTitle, studentIdentifier, cell.getComment());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return report;\r\n}"
}, {
	"Path": "org.sakaiproject.email.api.EmailMessage.getRecipients",
	"Comment": "get recipients of this message that are associated to a certain type",
	"Method": "Map<RecipientType, List<EmailAddress>> getRecipients(List<EmailAddress> getRecipients,RecipientType type){\r\n    List<EmailAddress> retval = null;\r\n    if (recipients != null) {\r\n        retval = recipients.get(type);\r\n    }\r\n    return retval;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Validator.getResourceTarget",
	"Comment": "determine whether a file resource should be opened in the current window or a new window.",
	"Method": "String getResourceTarget(String contentType){\r\n    String rv = \"_blank\";\r\n    if (contentType != null) {\r\n        if (!letBrowserInline(contentType)) {\r\n            rv = \"_self\";\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.generatePrivateTopicMessagesUrl",
	"Comment": "construct the url to bring up the private message section\tfor the site whose id is passed in",
	"Method": "String generatePrivateTopicMessagesUrl(String contextId){\r\n    if (pvtTopicMessageUrl != null && pvtTopicMessageUrl.contains(contextId)) {\r\n        return pvtTopicMessageUrl;\r\n    } else {\r\n        Topic receivedTopic = null;\r\n        String receivedTopicUuid = null;\r\n        if ((receivedTopicUuid = getUuidFromMap(contextId)) == null) {\r\n            Area area = areaManager.getAreaByContextIdAndTypeId(contextId, typeManager.getPrivateMessageAreaType());\r\n            if (area != null) {\r\n                if (isMessagesPageInSite() || area.getEnabled().booleanValue() || pvtMessageManager.isInstructor()) {\r\n                    PrivateForum pf = pvtMessageManager.initializePrivateMessageArea(area, new ArrayList());\r\n                    pf = pvtMessageManager.initializationHelper(pf, area);\r\n                    List pvtTopics = pf.getTopics();\r\n                    Collections.sort(pvtTopics, PrivateTopicImpl.TITLE_COMPARATOR);\r\n                    receivedTopic = (Topic) pvtTopics.iterator().next();\r\n                    receivedTopicUuid = receivedTopic.getUuid();\r\n                    receivedFolderUuidByContextId.put(contextId, receivedTopicUuid);\r\n                }\r\n            }\r\n        }\r\n        ToolConfiguration mcTool = null;\r\n        String url = null;\r\n        try {\r\n            String toolId = \"\";\r\n            final Site site = getSite(contextId);\r\n            if (isMessageForumsPageInSite(site)) {\r\n                toolId = DiscussionForumService.MESSAGE_CENTER_ID;\r\n            } else if (isMessagesPageInSite(site)) {\r\n                toolId = DiscussionForumService.MESSAGES_TOOL_ID;\r\n            } else if (isForumsPageInSite(site)) {\r\n                toolId = DiscussionForumService.FORUMS_TOOL_ID;\r\n            }\r\n            mcTool = site.getToolForCommonId(toolId);\r\n            if (mcTool != null) {\r\n                pvtTopicMessageUrl = ServerConfigurationService.getPortalUrl() + \"/directtool/\" + mcTool.getId() + \"/sakai.messageforums.helper.helper/privateMsg/pvtMsg?pvtMsgTopicId=\" + receivedTopicUuid + \"&contextId=\" + contextId + \"&selectedTopic=\" + PrivateMessagesTool.PVTMSG_MODE_RECEIVED;\r\n                return pvtTopicMessageUrl;\r\n            }\r\n        } catch (IdUnusedException e) {\r\n            log.error(\"IdUnusedException attempting to move to Private Messages for a site. Site id used is: \" + contextId);\r\n        }\r\n    }\r\n    return \"\";\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.SakaiMessageHandlerFactory.fromInvalidUser",
	"Comment": "check if the fromaddr email address is recognized as belonging to a user who has permission to add to the channel.",
	"Method": "boolean fromInvalidUser(String fromAddr,MailArchiveChannel channel){\r\n    if ((fromAddr == null) || (fromAddr.length() == 0))\r\n        return true;\r\n    Collection<User> users = userDirectoryService.findUsersByEmail(fromAddr);\r\n    return !users.stream().anyMatch(channel::allowAddMessage);\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.PermissionManagerImpl.getForumMessagePermissionForRole",
	"Comment": "get the forum message permission for a given role.this provides the permissionsthat the role currently has.",
	"Method": "MessagePermissions getForumMessagePermissionForRole(BaseForum forum,String role,String typeId){\r\n    MessagePermissions permissions = forum == null || forum.getId() == null ? null : getMessagePermissionByKeyValue(role, \"forumId\", forum.getId().toString(), false);\r\n    MessagePermissions mp = new MessagePermissionsImpl();\r\n    if (permissions == null) {\r\n        return null;\r\n    } else {\r\n        mp.setDeleteAny(permissions.getDeleteAny());\r\n        mp.setDeleteOwn(permissions.getDeleteOwn());\r\n        mp.setRead(permissions.getRead());\r\n        mp.setReadDrafts(permissions.getReadDrafts());\r\n        mp.setReviseAny(permissions.getReviseAny());\r\n        mp.setReviseOwn(permissions.getReviseOwn());\r\n        mp.setMarkAsRead(permissions.getMarkAsRead());\r\n    }\r\n    mp.setRole(role);\r\n    return mp;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.UserEntityProvider.convertUser",
	"Comment": "this checks how what details the current user should be able to see about user.",
	"Method": "EntityUser convertUser(EntityReference ref,User user,boolean hasProfile){\r\n    if (developerHelperService.getCurrentUserId() == null) {\r\n        throw new SecurityException(\"Anonymous access is not permitted to user information: \" + ref);\r\n    }\r\n    if (developerHelperService.getConfigurationSetting(\"entity.users.viewall\", false) || developerHelperService.isEntityRequestInternal(ref.toString()) || developerHelperService.isUserAdmin(developerHelperService.getCurrentUserReference()) || user.getId().equals(developerHelperService.getCurrentUserId())) {\r\n        EntityUser eu = new EntityUser(user);\r\n        return eu;\r\n    } else if (hasProfile) {\r\n        EntityUser eu = new EntityUser(user.getEid(), user.getEmail(), user.getFirstName(), user.getLastName(), user.getDisplayName(), user.getDisplayId(), null, user.getType());\r\n        eu.setId(user.getId());\r\n        return eu;\r\n    }\r\n    throw new SecurityException(\"Current user (\" + developerHelperService.getCurrentUserReference() + \") cannot access information for: \" + ref);\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.addMemberToGroup",
	"Comment": "add member to a group, once id and security checks have been cleared.",
	"Method": "void addMemberToGroup(AuthzGroup azGroup,String userId,String roleId,int maxSize){\r\n    addLiveUpdateProperties((BaseAuthzGroup) azGroup);\r\n    for (AuthzGroupAdvisor authzGroupAdvisor : authzGroupAdvisors) {\r\n        try {\r\n            authzGroupAdvisor.groupUpdate(azGroup, userId, roleId);\r\n        } catch (Exception e) {\r\n            log.error(\"Advisor error during addMemberToGroup()\", e);\r\n        }\r\n    }\r\n    m_storage.addNewUser(azGroup, userId, roleId, maxSize);\r\n    eventTrackingService().post(eventTrackingService().newEvent(SECURE_JOIN_AUTHZ_GROUP, azGroup.getReference(), true));\r\n    ((BaseAuthzGroup) azGroup).closeEdit();\r\n    BaseAuthzGroup updatedRealm = (BaseAuthzGroup) m_storage.get(azGroup.getId());\r\n    updateSiteSecurity(updatedRealm);\r\n    ((BaseAuthzGroup) azGroup).setEvent(null);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.processActionDuplicateForumMainConfirm",
	"Comment": "action for the duplicate option present the main forums page",
	"Method": "String processActionDuplicateForumMainConfirm(){\r\n    log.debug(\"processActionDuplicateForumMainConfirm()\");\r\n    String forumId = getExternalParameterByKey(FORUM_ID);\r\n    DiscussionForum forum = forumManager.getForumById(Long.valueOf(forumId));\r\n    selectedForum = new DiscussionForumBean(forum, uiPermissionsManager, forumManager);\r\n    selectedForum.getForum().setTitle(getResourceBundleString(DUPLICATE_COPY_TITLE, new Object[] { selectedForum.getForum().getTitle() }));\r\n    selectedForum.setMarkForDuplication(true);\r\n    return FORUM_SETTING;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbFlatStorage.getSelectedResources",
	"Comment": "get all resources matching an sql where clause, with sorting and ordering, using a specialized reader.\tthis is provided for specialized cases, where a known operation should make some optimizations or\tapply transformations to given fields during row retrieval. for example, reading clobs may be the\tdefault, but in some cases like long descriptions in simple search results, they are not relevant\tand could hurt performance. note that specialized readers should have the same return type and\texpect the same indices as the default reader.",
	"Method": "List getSelectedResources(String where,Object[] values,List getSelectedResources,String where,String order,Object[] values,List getSelectedResources,String where,String order,Object[] values,String join,List getSelectedResources,String where,String order,Object[] values,String join,SqlReader reader,List getSelectedResources,String where,Object[] values,int first,int last,List getSelectedResources,String where,String order,Object[] values,int first,int last,List getSelectedResources,String where,String order,Object[] values,int first,int last,String join,List getSelectedResources,String where,String order,Object[] values,int first,int last,String join,SqlReader reader){\r\n    Object[] params = getPagedParameters(values, first, last);\r\n    String sql = getResourceSql(where, order, values, first, last, join);\r\n    List rv = m_sql.dbRead(sql, params, reader);\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.EntityDataUtils.getEntityIdField",
	"Comment": "gets the fieldname of the identifier field for an entity class type",
	"Method": "String getEntityIdField(Class<?> type){\r\n    String entityIdField = ReflectUtils.getInstance().getFieldNameWithAnnotation(type, EntityId.class);\r\n    if (entityIdField == null) {\r\n        try {\r\n            ReflectUtils.getInstance().getFieldType(type, \"id\");\r\n            entityIdField = \"id\";\r\n        } catch (FieldnameNotFoundException e) {\r\n            entityIdField = null;\r\n        }\r\n    }\r\n    return entityIdField;\r\n}"
}, {
	"Path": "org.sakaiproject.email.api.EmailMessage.addHeader",
	"Comment": "add a header to this message. if the key is found in the headers of this message, the value\tis appended to the previous value found and separated by a space. a key of null will not be\tadded. if value is null, previous entries of the matching key will be removed.",
	"Method": "void addHeader(String key,String value){\r\n    if (headers == null || headers.get(key) == null) {\r\n        setHeader(key, value);\r\n    } else if (key != null && value != null) {\r\n        String prevVal = headers.get(key);\r\n        prevVal += \" \" + value;\r\n        headers.put(key, prevVal);\r\n    } else if (value == null) {\r\n        removeHeader(key);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.longAt",
	"Comment": "returns a long int reconstructed from eight bytes at a specific\t location.",
	"Method": "long longAt(int pos){\r\n    if (!between(pos, 0, (size - 8))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    long ret = 0x0, temp;\r\n    beginEnumeration(pos);\r\n    for (int x = 0; x < 8; x++) {\r\n        temp = ((long) nextByte() << (7 * 8)) >>> (7 * 8);\r\n        ret |= (temp << (8 * (7 - x)));\r\n    }\r\n    return ret;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.help.RestContentProvider.createErrorDocument",
	"Comment": "given any error condition, create an error document including css",
	"Method": "Document createErrorDocument(){\r\n    Document errorDocument = createDocument();\r\n    Element html = errorDocument.createElement(\"html\");\r\n    Element head = errorDocument.createElement(\"head\");\r\n    Element body = errorDocument.createElement(\"body\");\r\n    Element p = errorDocument.createElement(\"p\");\r\n    Text textNode = errorDocument.createTextNode(\"An error retrieving document from knowledge base has occurred.\");\r\n    p.appendChild(textNode);\r\n    body.appendChild(p);\r\n    html.appendChild(head);\r\n    html.appendChild(body);\r\n    errorDocument.appendChild(html);\r\n    return errorDocument;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbSingleStorage.caseId",
	"Comment": "fix the case of resource ids to support case insensitive ids if enabled",
	"Method": "String caseId(String id){\r\n    if (m_caseInsensitive) {\r\n        return id.toLowerCase();\r\n    }\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.request.RequestStorageImpl.getStorageMapCopy",
	"Comment": "special version which allows getting only the parts that are desired",
	"Method": "Map<String, Object> getStorageMapCopy(Map<String, Object> getStorageMapCopy,boolean includeInternal,boolean includeHeaders,boolean includeParams,boolean includeAttributes){\r\n    HashMap<String, Object> m = new HashMap<String, Object>();\r\n    m.putAll(getRequestValues(includeHeaders, includeParams, includeAttributes));\r\n    if (includeInternal) {\r\n        m.putAll(getInternalMap());\r\n    }\r\n    return m;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Xml.processStream",
	"Comment": "process a stream of xml using sax and a supplied default handler",
	"Method": "void processStream(InputStream in,DefaultHandler dh){\r\n    processReader(new InputStreamReader(in), dh);\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.entityprovider.MailArchiveEntityProvider.getChannels",
	"Comment": "helper to get the channels for a site.\tif user site and not superuser, returns all available channels for this\tuser.",
	"Method": "List<String> getChannels(String siteId){\r\n    List<String> channels = new ArrayList<String>();\r\n    Site site = null;\r\n    try {\r\n        site = siteService.getSite(siteId);\r\n    } catch (IdUnusedException e) {\r\n        return channels;\r\n    }\r\n    if (site != null) {\r\n        ToolConfiguration toolConfig = site.getToolForCommonId(\"sakai.mailbox\");\r\n        if (toolConfig != null) {\r\n            Properties props = toolConfig.getPlacementConfig();\r\n            if (props.isEmpty()) {\r\n                props = toolConfig.getConfig();\r\n            }\r\n            if (props != null) {\r\n                channels = Collections.singletonList(mailArchiveService.channelReference(siteId, SiteService.MAIN_CONTAINER));\r\n            }\r\n        }\r\n    }\r\n    return channels;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf2.util.RendererUtil.isDisabledOrReadonly",
	"Comment": "if renderer supports disabled or readonly attributes use this method toobtain an early exit from decode method. good idea to include it anyway,compnent will continue to work when these properties are added.",
	"Method": "boolean isDisabledOrReadonly(FacesContext context,UIComponent component){\r\n    boolean disabled = false;\r\n    boolean readOnly = false;\r\n    Object disabledAttr = getAttribute(context, component, \"disabled\");\r\n    if (disabledAttr != null) {\r\n        disabled = disabledAttr.equals(Boolean.TRUE);\r\n    }\r\n    Object readOnlyAttr = getAttribute(context, component, \"readonly\");\r\n    if (readOnlyAttr != null) {\r\n        readOnly = readOnlyAttr.equals(Boolean.TRUE);\r\n    }\r\n    return readOnly | disabled;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere8Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere8Sql(){\r\n    return \"SAKAI_SITE.PUBVIEW = '1' and \";\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getInsertUserSql",
	"Comment": "returns the sql statement which inserts a user into a given site.",
	"Method": "String getInsertUserSql(){\r\n    return \"insert into SAKAI_SITE_USER (SITE_ID, USER_ID, PERMISSION) values (?, ?, ?)\";\r\n}"
}, {
	"Path": "org.sakaiproject.calendaring.api.ExternalCalendaringServiceImpl.addAttendeesToEventWithRole",
	"Comment": "adds attendees to an existing event with a given role\tcommon logic for addattendeestoevent and addchairattendeestoevent",
	"Method": "VEvent addAttendeesToEventWithRole(VEvent vevent,Set<User> attendees,Role role){\r\n    if (!isIcsEnabled()) {\r\n        log.debug(\"ExternalCalendaringService is disabled. Enable via calendar.ics.generation.enabled=true in sakai.properties\");\r\n        return null;\r\n    }\r\n    if (attendees != null) {\r\n        for (User u : attendees) {\r\n            Attendee a = new Attendee(createMailURI(u.getEmail()));\r\n            a.getParameters().add(role);\r\n            a.getParameters().add(new Cn(u.getDisplayName()));\r\n            a.getParameters().add(PartStat.ACCEPTED);\r\n            a.getParameters().add(Rsvp.FALSE);\r\n            vevent.getProperties().add(a);\r\n        }\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"VEvent with attendees:\" + vevent);\r\n    }\r\n    return vevent;\r\n}"
}, {
	"Path": "org.sakaiproject.util.EmailNotification.getTag",
	"Comment": "get the message tag, the text to display at the bottom of the message.",
	"Method": "String getTag(String title,boolean shouldUseHtml){\r\n    return \"\";\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.producers.ShowPageProducer.handleStatusImage",
	"Comment": "return true if the item is required and not completed, i.e. if we need to\tupdate the status after the user views the item",
	"Method": "Status handleStatusImage(UIContainer container,SimplePageItem i){\r\n    if (i.getType() != SimplePageItem.TEXT && i.getType() != SimplePageItem.MULTIMEDIA) {\r\n        if (!i.isRequired()) {\r\n            addStatusImage(Status.NOT_REQUIRED, container, \"status\", i.getName());\r\n            return Status.NOT_REQUIRED;\r\n        } else if (simplePageBean.isItemComplete(i)) {\r\n            addStatusImage(Status.COMPLETED, container, \"status\", i.getName());\r\n            return Status.COMPLETED;\r\n        } else {\r\n            addStatusImage(Status.REQUIRED, container, \"status\", i.getName());\r\n            return Status.REQUIRED;\r\n        }\r\n    }\r\n    return Status.NOT_REQUIRED;\r\n}"
}, {
	"Path": "org.sakaiproject.memory.util.EhCacheFactoryBean.setTimeToIdle",
	"Comment": "set the time in seconds to idle for an element before it expires, that is,\tthe maximum amount of time between accesses before an element expires.\tthis is only used if the element is not eternal. default is 120 seconds.",
	"Method": "void setTimeToIdle(int timeToIdle){\r\n    this.timeToIdle = timeToIdle;\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.SpringCompMgr.loadComponents",
	"Comment": "locate the component loader, and load any available components.",
	"Method": "void loadComponents(){\r\n    File overrideFolder = new File(System.getProperty(\"sakai.home\"), \"override\");\r\n    ComponentsLoader loader = new ComponentsLoader(overrideFolder);\r\n    String componentsRoot = System.getProperty(SAKAI_COMPONENTS_ROOT_SYS_PROP);\r\n    if (componentsRoot == null) {\r\n        String catalina = getCatalina();\r\n        if (catalina != null) {\r\n            componentsRoot = catalina + File.separatorChar + \"components\" + File.separatorChar;\r\n        }\r\n    }\r\n    if (componentsRoot == null) {\r\n        log.warn(\"loadComponents: cannot establish a root directory for the components packages\");\r\n        return;\r\n    }\r\n    System.setProperty(SAKAI_COMPONENTS_ROOT_SYS_PROP, componentsRoot);\r\n    loader.load(m_ac, componentsRoot);\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.DbContentService.getFileSystemHandler",
	"Comment": "get the file system handler to use when files are not stored in the database.this can be null if files are stored in the database.the default is defaultfilesystemhandler.",
	"Method": "FileSystemHandler getFileSystemHandler(){\r\n    return fileSystemHandler;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.convertLockIfDropbox",
	"Comment": "if the id is for a resource in a dropbox, change the function to a dropbox check, which is to check for write.\tyou have full or no access to a dropbox.",
	"Method": "String convertLockIfDropbox(String lock,String id){\r\n    if (id == null) {\r\n        return null;\r\n    }\r\n    if (id.startsWith(COLLECTION_DROPBOX)) {\r\n        String[] parts = StringUtil.split(id, \"/\");\r\n        if (parts.length >= 3) {\r\n            boolean authDropboxGroupsCheck = true;\r\n            String ref = getReference(id);\r\n            if (parts.length >= 4) {\r\n                String userId = parts[3];\r\n                if ((userId == null) || isDropboxMaintainer(parts[2]) || (!isDropboxOwnerInCurrentUserGroups(ref, userId))) {\r\n                    authDropboxGroupsCheck = false;\r\n                }\r\n            }\r\n            if (m_securityService.unlock(AUTH_DROPBOX_GROUPS, ref)) {\r\n                if (authDropboxGroupsCheck) {\r\n                    return AUTH_DROPBOX_GROUPS;\r\n                } else {\r\n                    return AUTH_DROPBOX_MAINTAIN;\r\n                }\r\n            } else {\r\n                return AUTH_DROPBOX_MAINTAIN;\r\n            }\r\n        }\r\n    }\r\n    return lock;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.printContents",
	"Comment": "prints the contents of this blob.\t formats the data neatly and debug it.",
	"Method": "void printContents(){\r\n    int x, bytesPast;\r\n    String holdStr;\r\n    char[] rep = new char[16];\r\n    byte b;\r\n    long cksum = checksum();\r\n    int currWidth = 86;\r\n    holdStr = (\"Blob: length = \" + size + \" -- Checksum = \" + toHex(cksum) + \" \");\r\n    log.debug(\"{}{}\", holdStr, strstr((currWidth - holdStr.length()), '-'));\r\n    if (size == 0) {\r\n        log.debug(strstr(currWidth, '-'));\r\n        return;\r\n    }\r\n    log.debug(\"     0 | \");\r\n    bytesPast = 0;\r\n    beginEnumeration(0);\r\n    while (hasMoreBytes()) {\r\n        b = nextByte();\r\n        log.debug(toHex(b));\r\n        if (between(b, 32, 126)) {\r\n            rep[bytesPast % 16] = (char) b;\r\n        } else {\r\n            rep[bytesPast % 16] = '.';\r\n        }\r\n        bytesPast++;\r\n        if ((bytesPast % 16) == 0) {\r\n            log.debug(\"   <\");\r\n            for (x = 0; x < 16; x++) {\r\n                log.debug(\"{}\", rep[x]);\r\n            }\r\n            log.debug(\">\");\r\n            if (hasMoreBytes()) {\r\n                holdStr = Integer.toString(bytesPast);\r\n                log.debug(spaces(6 - holdStr.length()));\r\n                log.debug(holdStr);\r\n                log.debug(\" | \");\r\n            }\r\n        } else if ((bytesPast % 4) == 0) {\r\n            log.debug(\"   \");\r\n        } else {\r\n            log.debug(\" \");\r\n        }\r\n    }\r\n    if ((bytesPast % 16) != 0) {\r\n        for (x = (bytesPast % 16); x < 16; x++) {\r\n            log.debug(\"  \");\r\n            rep[x] = ' ';\r\n            if ((x % 4) == 0) {\r\n                log.debug(\"   \");\r\n            } else {\r\n                log.debug(\" \");\r\n            }\r\n        }\r\n        log.debug(\"   <\");\r\n        for (x = 0; x < 16; x++) {\r\n            log.debug(\"{}\", rep[x]);\r\n        }\r\n        log.debug(\">\");\r\n    }\r\n    holdStr = (\"---------------\" + strstr(String.valueOf(size).length(), '-') + \"--- Checksum = \" + toHex(cksum) + \" \");\r\n    log.debug(holdStr);\r\n    log.debug(strstr((currWidth - holdStr.length()), '-'));\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.buildGradeMatrixForImportExport",
	"Comment": "build the matrix of assignments and grades for the export process",
	"Method": "List<GbStudentGradeInfo> buildGradeMatrixForImportExport(List<Assignment> assignments,GbGroup groupFilter){\r\n    final GbStopWatch stopwatch = new GbStopWatch();\r\n    stopwatch.start();\r\n    stopwatch.timeWithContext(\"buildGradeMatrixForImportExport\", \"buildGradeMatrix start\", stopwatch.getTime());\r\n    final Gradebook gradebook = this.getGradebook();\r\n    if (gradebook == null) {\r\n        return Collections.EMPTY_LIST;\r\n    }\r\n    stopwatch.timeWithContext(\"buildGradeMatrixForImportExport\", \"getGradebook\", stopwatch.getTime());\r\n    final String currentUserUuid = getCurrentUser().getId();\r\n    GbRole role;\r\n    try {\r\n        role = this.getUserRole();\r\n    } catch (final GbAccessDeniedException e) {\r\n        throw new GbException(\"Error getting role for current user\", e);\r\n    }\r\n    final GradebookUiSettings settings = new GradebookUiSettings();\r\n    final List<String> studentUUIDs = getGradeableUsers(groupFilter);\r\n    final List<GbUser> gbStudents = getGbUsers(studentUUIDs);\r\n    stopwatch.timeWithContext(\"buildGradeMatrixForImportExport\", \"getGbUsersForUiSettings\", stopwatch.getTime());\r\n    final Map<String, GbStudentGradeInfo> matrix = new LinkedHashMap();\r\n    putCourseGradesInMatrix(matrix, gbStudents, studentUUIDs, gradebook, role, isCourseGradeVisible(currentUserUuid), settings);\r\n    stopwatch.timeWithContext(\"buildGradeMatrixForImportExport\", \"putCourseGradesInMatrix\", stopwatch.getTime());\r\n    putAssignmentsInMatrixForExport(matrix, gbStudents, studentUUIDs, assignments, gradebook, currentUserUuid, role);\r\n    stopwatch.timeWithContext(\"buildGradeMatrixForImportExport\", \"putAssignmentsInMatrix\", stopwatch.getTime());\r\n    List<GbStudentGradeInfo> items = sortGradeMatrix(matrix, settings);\r\n    stopwatch.timeWithContext(\"buildGradeMatrixForImportExport\", \"sortGradeMatrix\", stopwatch.getTime());\r\n    return items;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.help.HelpFrameSetRender.getWelcomePage",
	"Comment": "gets localized welcome page if it exists or fall back on default",
	"Method": "String getWelcomePage(FacesContext context){\r\n    String page = ServerConfigurationService.getString(\"help.welcomepage\");\r\n    if (\"\".equals(page)) {\r\n        page = DEFAULT_WELCOME_PAGE;\r\n    }\r\n    URL urlResource = null;\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(page.substring(0, page.lastIndexOf(\".\")));\r\n    sb.append(\"_\");\r\n    sb.append(getSelectedLocale().toString());\r\n    sb.append(page.substring(page.lastIndexOf(\".\")));\r\n    try {\r\n        urlResource = FacesContext.getCurrentInstance().getExternalContext().getResource(\"/\" + sb.toString());\r\n    } catch (MalformedURLException e) {\r\n    }\r\n    if (urlResource != null) {\r\n        page = sb.toString();\r\n    }\r\n    return page;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.ContentHostingHandlerResolverImpl.getRealParent",
	"Comment": "find the closest real ancestor to the requested id, this recurses into itself",
	"Method": "ContentEntity getRealParent(String id){\r\n    ContentEntity ce = storage.getCollection(id);\r\n    if (ce == null) {\r\n        try {\r\n            ce = storage.getResource(id);\r\n        } catch (TypeException e) {\r\n            log.debug(\"Type Exception \", e);\r\n        }\r\n    }\r\n    if (ce == null) {\r\n        if (id.equals(Entity.SEPARATOR)) {\r\n            log.error(\"Unable to get Root node of the repository\");\r\n            throw new AssertionError(\"Unable to Get Root repository \" + Entity.SEPARATOR);\r\n        }\r\n        int lastSlash = id.lastIndexOf(Entity.SEPARATOR, id.length() - 2);\r\n        if (lastSlash > 0) {\r\n            String parentId = id.substring(0, lastSlash + 1);\r\n            ce = getRealParent(parentId);\r\n        }\r\n    }\r\n    return ce;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.setUserDirectoryService",
	"Comment": "called by the spring framework to initialize the userdirectoryservice data member specified in the components.xml file via ioc.",
	"Method": "void setUserDirectoryService(UserDirectoryService userDirectoryService){\r\n    this.userDirectoryService = userDirectoryService;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere15Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere15Sql(){\r\n    return \"SAKAI_SITE.MODIFIEDBY = SAKAI_USER_ID_MAP.USER_ID and \";\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityBatchHandler.reintegrateDataContent",
	"Comment": "takes the overall data and reintegrates any content data that is waiting to be merged,this may do nothing if there is no content to merge",
	"Method": "String reintegrateDataContent(String format,HashMap<String, String> dataMap,String overallData){\r\n    StringBuilder sb = new StringBuilder();\r\n    int curLoc = 0;\r\n    for (Entry<String, String> entry : dataMap.entrySet()) {\r\n        if (entry.getKey() != null && !\"\".equals(entry.getKey())) {\r\n            String key = entry.getKey();\r\n            String value = entry.getValue();\r\n            if (Formats.XML.equals(format)) {\r\n                value = \"\\n\" + value;\r\n            } else if (Formats.JSON.equals(format)) {\r\n                key = '\"' + key + '\"';\r\n            }\r\n            int keyLoc = overallData.indexOf(key);\r\n            if (keyLoc > -1) {\r\n                sb.append(overallData.subSequence(curLoc, keyLoc));\r\n                sb.append(value);\r\n                curLoc = keyLoc + key.length();\r\n            }\r\n        }\r\n    }\r\n    sb.append(overallData.subSequence(curLoc, overallData.length()));\r\n    return sb.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.processCancelDelete",
	"Comment": "resets selectedpodcast bean since no deletion is to be made",
	"Method": "String processCancelDelete(){\r\n    selectedPodcast = null;\r\n    return \"cancel\";\r\n}"
}, {
	"Path": "org.sakaiproject.event.api.SimpleEvent.getModify",
	"Comment": "is this event one that caused a modify to the resource, or just an access.",
	"Method": "boolean getModify(){\r\n    return modify;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.util.RendererUtil.getDefaultedAttribute",
	"Comment": "same as getattribute, but if not found, we return a default value.",
	"Method": "Object getDefaultedAttribute(FacesContext context,UIComponent component,String name,Object defaultValue){\r\n    Object o = getAttribute(context, component, name);\r\n    if (o == null)\r\n        o = defaultValue;\r\n    return o;\r\n}"
}, {
	"Path": "org.sakaiproject.site.cover.SiteService.validateSiteTitle",
	"Comment": "given the original and stripped site titles, determine that validation status of the stripped string.",
	"Method": "SiteTitleValidationStatus validateSiteTitle(String orig,String stripped){\r\n    org.sakaiproject.site.api.SiteService service = getInstance();\r\n    if (service == null) {\r\n        return null;\r\n    }\r\n    return service.validateSiteTitle(orig, stripped);\r\n}"
}, {
	"Path": "org.sakaiproject.alias.impl.BaseAliasService.getTarget",
	"Comment": "find the target resource reference string associated with this alias.",
	"Method": "String getTarget(String alias,String getTarget){\r\n    String ref = aliasReference(alias);\r\n    BaseAliasEdit a = (BaseAliasEdit) m_storage.get(alias);\r\n    if (a == null)\r\n        throw new IdUnusedException(alias);\r\n    return a.getTarget();\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.test.UserDirectoryServiceGetTest.testLongEid",
	"Comment": "we should get a predicatable error on trying to create a user with an eid longer than supported",
	"Method": "void testLongEid(){\r\n    String eidr\n    try {\r\n        userDirectoryService.addUser(null, eid);\r\n        Assert.fail();\r\n    } catch (UserIdInvalidException e) {\r\n        log.error(e.getMessage(), e);\r\n    } catch (UserAlreadyDefinedException e) {\r\n        Assert.fail();\r\n    } catch (UserPermissionException e) {\r\n        Assert.fail();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseResourceProperties.toXml",
	"Comment": "serialize the resource into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element toXml(Document doc,Stack stack){\r\n    Element properties = doc.createElement(\"properties\");\r\n    ((Element) stack.peek()).appendChild(properties);\r\n    Enumeration props = m_props.keys();\r\n    while (props.hasMoreElements()) {\r\n        String name = (String) props.nextElement();\r\n        Object value = m_props.get(name);\r\n        if (value instanceof String) {\r\n            Element propElement = doc.createElement(\"property\");\r\n            properties.appendChild(propElement);\r\n            propElement.setAttribute(\"name\", name);\r\n            Xml.encodeAttribute(propElement, \"value\", (String) value);\r\n            propElement.setAttribute(\"enc\", \"BASE64\");\r\n        } else if (value instanceof List) {\r\n            for (Iterator iValues = ((List) value).iterator(); iValues.hasNext(); ) {\r\n                Object val = iValues.next();\r\n                if (val instanceof String) {\r\n                    Element propElement = doc.createElement(\"property\");\r\n                    properties.appendChild(propElement);\r\n                    propElement.setAttribute(\"name\", name);\r\n                    Xml.encodeAttribute(propElement, \"value\", (String) val);\r\n                    propElement.setAttribute(\"enc\", \"BASE64\");\r\n                    propElement.setAttribute(\"list\", \"list\");\r\n                } else {\r\n                    log.warn(\".toXml: in list not string: \" + name);\r\n                }\r\n            }\r\n        } else {\r\n            log.warn(\".toXml: not a string, not a value: \" + name);\r\n        }\r\n    }\r\n    return properties;\r\n}"
}, {
	"Path": "org.sakaiproject.javax.Search.isConjunction",
	"Comment": "if true then all restrictions are run using and, if false then all restrictions are run using or",
	"Method": "boolean isConjunction(){\r\n    return conjunction;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.ClusterEventTracking.insertStatement",
	"Comment": "form the proper event insert statement for the database technology.",
	"Method": "String insertStatement(){\r\n    return clusterEventTrackingServiceSql.getInsertEventSql();\r\n}"
}, {
	"Path": "org.sakaiproject.content.util.BaseInteractionAction.getHelperId",
	"Comment": "access the unique identifier for the tool that will handle this action. this is the identifier by which the helper is registered with the toolmanager.",
	"Method": "String getHelperId(){\r\n    return helperId;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseNotificationService.notificationId",
	"Comment": "access the notification id extracted from a notification reference.",
	"Method": "String notificationId(String ref){\r\n    String start = getAccessPoint(true) + Entity.SEPARATOR;\r\n    int i = ref.indexOf(start);\r\n    if (i == -1)\r\n        return ref;\r\n    String id = ref.substring(i + start.length());\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.util.EntityCollections.isContainedEntityRefsToEntities",
	"Comment": "see if the collection of entity reference strings is contained in the collection of entities.",
	"Method": "boolean isContainedEntityRefsToEntities(Collection<String> entityRefs,Collection<Entity> entities){\r\n    for (Iterator<String> iRefs = entityRefs.iterator(); iRefs.hasNext(); ) {\r\n        String findThisEntityRef = iRefs.next();\r\n        if (!entityCollectionContainsRefString(entities, findThisEntityRef))\r\n            return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.TestImportGradesHelper.testProcessImportedGrades",
	"Comment": "this test is broken. the order of the lists needs to be adjusted. the code is very convoluted.\ttodo fix this failing test",
	"Method": "void testProcessImportedGrades(){\r\n    final List<Assignment> assignments = mockAssignments();\r\n    final List<GbStudentGradeInfo> existingGrades = mockExistingStudentGrades();\r\n    final ImportedSpreadsheetWrapper importedSpreadsheetWrapper = mockImportedSpreadsheetData();\r\n    final List<ProcessedGradeItem> processedGradeItems = ImportGradesHelper.processImportedGrades(importedSpreadsheetWrapper, assignments, existingGrades);\r\n    Assert.assertNotNull(processedGradeItems);\r\n    Assert.assertEquals(\"Wrong number of columns\", 4, processedGradeItems.size());\r\n    final ProcessedGradeItem item1 = processedGradeItems.get(0);\r\n    Assert.assertEquals(\"Incorrect title: \" + \"GradebookAssignment 1\", item1.getItemTitle());\r\n    Assert.assertEquals(\"wrong status\", Status.SKIP, item1.getStatus());\r\n    final ProcessedGradeItem item2 = processedGradeItems.get(1);\r\n    Assert.assertEquals(\"Incorrect title: \" + \"GradebookAssignment 2\", item2.getItemTitle());\r\n    Assert.assertEquals(\"wrong status\", Status.MODIFIED, item2.getStatus());\r\n    final ProcessedGradeItem item3 = processedGradeItems.get(2);\r\n    Assert.assertEquals(\"Incorrect title: \" + \"GradebookAssignment 3\", item3.getItemTitle());\r\n    Assert.assertEquals(\"wrong status\", Status.NEW, item3.getStatus());\r\n    final ProcessedGradeItem item4 = processedGradeItems.get(3);\r\n    Assert.assertEquals(\"Incorrect title: \" + \"GradebookAssignment Ext\", item4.getItemTitle());\r\n    Assert.assertEquals(\"wrong status\", Status.EXTERNAL, item4.getStatus());\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.Assignment2Entity.editItemSettingsUrl",
	"Comment": "contents and settings. this will be null except in that situation",
	"Method": "String editItemSettingsUrl(SimplePageBean bean){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.PrivateMessagesTool.isDispError",
	"Comment": "property created rather than seterrormessage for design requirement",
	"Method": "boolean isDispError(){\r\n    if (isInstructor() && !getPvtAreaEnabled()) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.SettingsGradingSchemaPanel.getTotalCourseGrades",
	"Comment": "get the total number of course grades, excluding empty grades",
	"Method": "int getTotalCourseGrades(Map<String, CourseGrade> map){\r\n    return map.values().stream().filter(c -> StringUtils.isNotBlank(c.getMappedGrade())).collect(Collectors.toList()).size();\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlDefault.getNextSequenceSql",
	"Comment": "returns the sql statement which returns the next number in a sequence.",
	"Method": "String getNextSequenceSql(String table){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.HierPvtMsgDataTableRender.getRowClasses",
	"Comment": "return an array of stylesheet classes to be applied to each row in the\ttable, in the order specified. every row may or may not have a\tstylesheet.",
	"Method": "String[] getRowClasses(UIData data){\r\n    String values = (String) data.getAttributes().get(\"rowClasses\");\r\n    if (values == null) {\r\n        return (new String[0]);\r\n    }\r\n    values = values.trim();\r\n    ArrayList list = new ArrayList();\r\n    while (values.length() > 0) {\r\n        int comma = values.indexOf(\",\");\r\n        if (comma >= 0) {\r\n            list.add(values.substring(0, comma).trim());\r\n            values = values.substring(comma + 1);\r\n        } else {\r\n            list.add(values.trim());\r\n            values = \"\";\r\n        }\r\n    }\r\n    String[] results = new String[list.size()];\r\n    return ((String[]) list.toArray(results));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getAPodcast",
	"Comment": "receives a particular podcast and packages it as a decoratedpodcastbean",
	"Method": "DecoratedPodcastBean getAPodcast(ContentResource podcastResource,boolean folderHidden){\r\n    ResourceProperties podcastProperties = podcastResource.getProperties();\r\n    DecoratedPodcastBean podcastInfo = null;\r\n    Date tempDate = null;\r\n    if (podcastResource.getReleaseInstant() == null) {\r\n        tempDate = podcastService.getGMTdate(podcastProperties.getInstantProperty(PodcastService.DISPLAY_DATE).toEpochMilli());\r\n    } else {\r\n        tempDate = new Date(podcastResource.getReleaseInstant().toEpochMilli());\r\n    }\r\n    final boolean uiHidden = folderHidden || hiddenInUI(podcastResource, tempDate);\r\n    if (!uiHidden || getHasHidden()) {\r\n        podcastInfo = new DecoratedPodcastBean();\r\n        podcastInfo.setDisplayDate(DateFormatterUtil.format(tempDate, getErrorMessageString(PUBLISH_DATE_FORMAT), rb.getLocale()));\r\n        podcastInfo.setEditDate(tempDate);\r\n        podcastInfo.setResourceId(podcastResource.getId());\r\n        podcastInfo.setTitle(podcastProperties.getPropertyFormatted(ResourceProperties.PROP_DISPLAY_NAME));\r\n        podcastInfo.setDescription(podcastProperties.getPropertyFormatted(ResourceProperties.PROP_DESCRIPTION));\r\n        podcastInfo.setHidden(uiHidden);\r\n        if (uiHidden) {\r\n            podcastInfo.setStyleClass(\"inactive\");\r\n        }\r\n        String filename = null;\r\n        try {\r\n            String url = podcastService.getPodcastFileURL(podcastResource.getId());\r\n            filename = url.substring(url.lastIndexOf(\"/\") + 1);\r\n        } catch (PermissionException e) {\r\n            log.warn(\"PermissionException getting podcast with id \" + podcastResource.getId() + \" while constructing DecoratedPodcastBean for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        } catch (IdUnusedException e) {\r\n            log.warn(\"IdUnusedException getting podcast with id \" + podcastResource.getId() + \" while constructing DecoratedPodcastBean for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        }\r\n        if (filename == null)\r\n            return null;\r\n        podcastInfo.setFilename(filename);\r\n        podcastInfo.setFileContentType(podcastProperties.getProperty(ResourceProperties.PROP_CONTENT_TYPE));\r\n        final long size = Long.parseLong(podcastProperties.getProperty(ResourceProperties.PROP_CONTENT_LENGTH));\r\n        podcastInfo.setFileSize(size);\r\n        final double sizeMB = size / (1024.0 * 1024.0);\r\n        final DecimalFormat df = new DecimalFormat(MB_NUMBER_FORMAT);\r\n        String sizeString;\r\n        if (sizeMB > 0.3) {\r\n            sizeString = df.format(sizeMB) + MB;\r\n        } else {\r\n            df.applyPattern(BYTE_NUMBER_FORMAT);\r\n            sizeString = \"\" + df.format(size) + \" \" + BYTES;\r\n        }\r\n        podcastInfo.setSize(sizeString);\r\n        final String extn = Validator.getFileExtension(filename);\r\n        if (!\"\".equals(extn)) {\r\n            podcastInfo.setType(Validator.getFileExtension(filename).toUpperCase());\r\n        } else {\r\n            podcastInfo.setType(\"UNK\");\r\n        }\r\n        tempDate = podcastProperties.getDateProperty(ResourceProperties.PROP_MODIFIED_DATE);\r\n        podcastInfo.setPostedDatetime(DateFormatterUtil.format(tempDate, getErrorMessageString(PUBLISH_DATE_FORMAT), rb.getLocale()));\r\n        podcastInfo.setAuthor(podcastProperties.getPropertyFormatted(ResourceProperties.PROP_CREATOR));\r\n    }\r\n    return podcastInfo;\r\n}"
}, {
	"Path": "org.sakaiproject.util.UserNotificationPreferencesRegistrationImpl.init",
	"Comment": "init method which will go through all the properties that had bundle keys and look up the actual texts, then register the object.",
	"Method": "void init(){\r\n    log.info(\"UserPreferencesRegistrationImpl.init()\");\r\n    Map<String, String> processedOptions = processOptionsMap(getRawOptions());\r\n    ResourceLoader loader = getLocalResourceLoader();\r\n    if (loader != null) {\r\n        this.sectionTitle = loader.getString(getSectionTitleBundleKey());\r\n        this.sectionDescription = loader.getString(getSectionDescriptionBundleKey());\r\n        this.sectionTitleOverride = loader.getString(getOverrideSectionTitleBundleKey());\r\n    }\r\n    this.options = processedOptions;\r\n    getUserNotificationPreferencesRegistrationService().register(this);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getEditingNotifications",
	"Comment": "get a list of edit events for this gradebook. excludes any events for the current user",
	"Method": "List<GbGradeCell> getEditingNotifications(String gradebookUid,Date since){\r\n    final User currentUser = getCurrentUser();\r\n    final List<GbGradeCell> rval = new ArrayList();\r\n    final List<Assignment> assignments = this.gradebookService.getViewableAssignmentsForCurrentUser(gradebookUid, SortType.SORT_BY_SORTING);\r\n    final List<Long> assignmentIds = assignments.stream().map(a -> a.getId()).collect(Collectors.toList());\r\n    final List<GradingEvent> events = this.gradebookService.getGradingEvents(assignmentIds, since);\r\n    final Map<String, GbUser> users = new HashMap();\r\n    for (final GradingEvent event : events) {\r\n        if (!event.getGraderId().equals(currentUser.getId())) {\r\n            users.putIfAbsent(event.getGraderId(), getUser(event.getGraderId()));\r\n            final GbUser updatedBy = users.get(event.getGraderId());\r\n            rval.add(new GbGradeCell(event.getStudentId(), event.getGradableObject().getId(), updatedBy.getDisplayName()));\r\n        }\r\n    }\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.getMessages",
	"Comment": "returns list of decoratedmessagebean objects, ie, the messages",
	"Method": "List getMessages(){\r\n    List messages = new ArrayList();\r\n    if (selectedTopic == null) {\r\n        log.debug(\"selectedTopic is null in getMessages\");\r\n        return messages;\r\n    }\r\n    messages = selectedTopic.getMessages();\r\n    if (messages != null && !messages.isEmpty())\r\n        messages = filterModeratedMessages(messages, selectedTopic.getTopic(), selectedForum.getForum());\r\n    return messages;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.findBefore",
	"Comment": "finds the node before the given node.\t this is the one whose next pointer is the given node.",
	"Method": "BlobNode findBefore(BlobNode target){\r\n    BlobNode bn;\r\n    if (target == head) {\r\n        return null;\r\n    }\r\n    bn = head;\r\n    while (bn.next != target) {\r\n        if (bn.next == null) {\r\n            throw new NoSuchElementException(\"Couldn't find BlobNode\");\r\n        }\r\n        bn = bn.next;\r\n    }\r\n    return bn;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.processRunJobNow",
	"Comment": "this method runs the current job only once, right now. it will set properties on the job execution if thejob has configurable properties.",
	"Method": "String processRunJobNow(){\r\n    Scheduler scheduler = schedulerManager.getScheduler();\r\n    if (scheduler == null) {\r\n        log.error(\"Scheduler is down!\");\r\n        return \"error\";\r\n    }\r\n    try {\r\n        JobDetail jd = getJobDetail();\r\n        JobBeanWrapper job = getSchedulerManager().getJobBeanWrapper(selectedJobDetailWrapper.getJobType());\r\n        JobDataMap dataMap = null;\r\n        if (job != null) {\r\n            if (ConfigurableJobBeanWrapper.class.isAssignableFrom(job.getClass())) {\r\n                configurableJobErrorMessages = new LinkedList<String>();\r\n                final List<ConfigurablePropertyWrapper> properties = getConfigurableProperties();\r\n                dataMap = new JobDataMap(jd.getJobDataMap());\r\n                for (ConfigurablePropertyWrapper wrapper : properties) {\r\n                    final ConfigurableJobProperty property = wrapper.getJobProperty();\r\n                    final String label = property.getLabelResourceKey(), value = wrapper.getValue();\r\n                    dataMap.put(label, value);\r\n                }\r\n            }\r\n        }\r\n        if (dataMap == null) {\r\n            scheduler.triggerJob(selectedJobDetailWrapper.getJobDetail().getKey());\r\n        } else {\r\n            scheduler.triggerJob(selectedJobDetailWrapper.getJobDetail().getKey(), dataMap);\r\n        }\r\n        return \"success\";\r\n    } catch (Exception e) {\r\n        log.error(\"Failed to trigger job now\", e);\r\n        return \"error\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.email.impl.BasicEmailService.setContent",
	"Comment": "sets the content for a message. also attaches files to the message.",
	"Method": "void setContent(String content,List<Attachment> attachments,MimeMessage msg,String contentType,String charset,String multipartSubtype){\r\n    ArrayList<MimeBodyPart> embeddedAttachments = new ArrayList<MimeBodyPart>();\r\n    if (attachments != null && attachments.size() > 0) {\r\n        int maxAttachmentSize = serverConfigurationService.getInt(MAIL_SENDFROMSAKAI_MAXSIZE, 25000000);\r\n        int attachmentRunningTotal = 0;\r\n        for (Attachment attachment : attachments) {\r\n            MimeBodyPart mbp = createAttachmentPart(attachment);\r\n            int mbpSize = mbp.getSize();\r\n            if ((attachmentRunningTotal + mbpSize) < maxAttachmentSize) {\r\n                embeddedAttachments.add(mbp);\r\n                attachmentRunningTotal = attachmentRunningTotal + mbpSize;\r\n            } else {\r\n                log.debug(\"Removed attachment from mail message because it was too large: \" + mbpSize);\r\n            }\r\n        }\r\n    }\r\n    if (embeddedAttachments.size() == 0) {\r\n        if (contentType == null)\r\n            msg.setText(content, charset);\r\n        else\r\n            msg.setContent(content, contentType);\r\n    } else {\r\n        Multipart multipart = (multipartSubtype != null) ? new MimeMultipart(multipartSubtype) : new MimeMultipart();\r\n        MimeBodyPart msgBodyPart = new MimeBodyPart();\r\n        if (contentType == null)\r\n            msgBodyPart.setText(content, charset);\r\n        else\r\n            msgBodyPart.setContent(content, contentType);\r\n        multipart.addBodyPart(msgBodyPart);\r\n        for (MimeBodyPart attachPart : embeddedAttachments) {\r\n            multipart.addBodyPart(attachPart);\r\n        }\r\n        msg.setContent(multipart);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.entityproviders.utils.MessageUtils.setupCounts",
	"Comment": "recursively iterates over the messages and increments the counts accumulator if any of them\tare a reply to the parent. the idea is to finally exit with a set of totals for an ancestor.",
	"Method": "void setupCounts(SparseMessage parent,List<SparseMessage> messages,Map<Long, Boolean> readStati,Counts counts){\r\n    for (SparseMessage message : messages) {\r\n        if (message.isDraft() || message.isDeleted()) {\r\n            continue;\r\n        }\r\n        if (message.getReplyTo() != null && message.getReplyTo().equals(parent.getMessageId())) {\r\n            counts.total = counts.total + 1;\r\n            if (readStati.get(message.getMessageId())) {\r\n                counts.read = counts.read + 1;\r\n            }\r\n            setupCounts(message, messages, readStati, counts);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.PermissionManagerImpl.getDefaultTopicMessagePermissionForRole",
	"Comment": "get the default topic message permission for a given role.this provides the permissions that the role currently has.",
	"Method": "MessagePermissions getDefaultTopicMessagePermissionForRole(Topic topic,String role,String typeId){\r\n    MessagePermissions permissions = topic == null || topic.getId() == null ? null : getMessagePermissionByKeyValue(role, \"topicId\", topic.getId().toString(), true);\r\n    MessagePermissions mp = new MessagePermissionsImpl();\r\n    if (permissions == null) {\r\n        return null;\r\n    } else {\r\n        mp.setDeleteAny(permissions.getDeleteAny());\r\n        mp.setDeleteOwn(permissions.getDeleteOwn());\r\n        mp.setRead(permissions.getRead());\r\n        mp.setReadDrafts(permissions.getReadDrafts());\r\n        mp.setReviseAny(permissions.getReviseAny());\r\n        mp.setReviseOwn(permissions.getReviseOwn());\r\n        mp.setMarkAsRead(permissions.getMarkAsRead());\r\n    }\r\n    mp.setRole(role);\r\n    return mp;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseEventTrackingService.addObserver",
	"Comment": "add an observer of events. the observer will be notified whenever there are new events.",
	"Method": "void addObserver(Observer observer){\r\n    m_priorityObservableHelper.deleteObserver(observer);\r\n    m_localObservableHelper.deleteObserver(observer);\r\n    m_observableHelper.addObserver(observer);\r\n}"
}, {
	"Path": "org.sakaiproject.email.impl.BaseDigestService.digestReference",
	"Comment": "access the internal reference which can be used to access the resource from within the system.",
	"Method": "String digestReference(String id){\r\n    return getAccessPoint(true) + Entity.SEPARATOR + id;\r\n}"
}, {
	"Path": "org.sakaiproject.hierarchy.utils.HierarchyUtils.getUniqueChildNodes",
	"Comment": "create a set of all the unique child node ids based on the set of supplied nodes, can optionally be limited to return only direct children and to include the supplied node ids",
	"Method": "Set<String> getUniqueChildNodes(Collection<HierarchyNode> nodes,boolean includeSuppliedNodeIds,boolean directOnly){\r\n    Set<String> s = new HashSet<String>();\r\n    for (HierarchyNode hierarchyNode : nodes) {\r\n        if (includeSuppliedNodeIds) {\r\n            s.add(hierarchyNode.id);\r\n        }\r\n        if (directOnly) {\r\n            s.addAll(hierarchyNode.directChildNodeIds);\r\n        } else {\r\n            s.addAll(hierarchyNode.childNodeIds);\r\n        }\r\n    }\r\n    return s;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.dao.impl.EntityBrokerDaoImpl.deleteProperties",
	"Comment": "remove properties from an entity without wasting time doing a lookup first",
	"Method": "int deleteProperties(String entityReference,String name){\r\n    Search search = new Search(\"entityRef\", entityReference);\r\n    if (name != null && name.length() > 0) {\r\n        search.addRestriction(new Restriction(\"propertyName\", name));\r\n    }\r\n    QueryData sd = makeQueryFromSearch(EntityProperty.class, search);\r\n    String sql = makeSQL(getDeleteTemplate(EntityProperty.class), getTableNameFromClass(EntityProperty.class), StatementMapper.WHERE, sd.getAfterTableSQL());\r\n    return getJdbcTemplate().update(sql, sd.getArgs());\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getUserRoleOrNone",
	"Comment": "get the role of the current user in the given site or gbrole.none if the user does not have access",
	"Method": "GbRole getUserRoleOrNone(){\r\n    try {\r\n        return getUserRole();\r\n    } catch (GbAccessDeniedException e) {\r\n        return GbRole.NONE;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.test.ContentHostingServiceRecycleTest.testDeleteResourceRestoreOnTop",
	"Comment": "this is to check check that when a restore is attempted and the file already existswe correctly unlock the file we are attempting to restore ontop of.",
	"Method": "void testDeleteResourceRestoreOnTop(){\r\n    ContentHostingService ch = getService(ContentHostingService.class);\r\n    SessionManager sm = getService(SessionManager.class);\r\n    ThreadLocalManager tl = getService(ThreadLocalManager.class);\r\n    reset(tl, sm);\r\n    String filename = \"/\" + UUID.randomUUID().toString();\r\n    ContentResourceEdit resource = ch.addResource(filename);\r\n    resource.setContent(\"First\".getBytes());\r\n    ch.commitResource(resource);\r\n    ch.removeResource(filename);\r\n    ContentResourceEdit resource2 = ch.addResource(filename);\r\n    resource2.setContent(\"Second\".getBytes());\r\n    ch.commitResource(resource2);\r\n    try {\r\n        ch.restoreResource(filename);\r\n        Assert.fail(\"We should have thrown an exception as the file has been re-created.\");\r\n    } catch (IdUsedException iue) {\r\n    }\r\n    ch.removeResource(filename);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityBatchHandler.extractReferenceParams",
	"Comment": "this will decode the set of params into a group of reference params based on the set of references",
	"Method": "Map<String, Map<String, String[]>> extractReferenceParams(HttpServletRequest req,Method method,String[] refs){\r\n    ArrayOrderedMap<String, Map<String, String[]>> referencedParams = null;\r\n    if (Method.POST.equals(method) || Method.PUT.equals(method)) {\r\n        referencedParams = new ArrayOrderedMap<String, Map<String, String[]>>();\r\n        Map<String, String[]> params = req.getParameterMap();\r\n        referencedParams.put(UNREFERENCED_PARAMS, new ArrayOrderedMap<String, String[]>(params.size()));\r\n        for (int i = 0; i < refs.length; i++) {\r\n            String refKey = \"ref\" + i + '.';\r\n            referencedParams.put(refKey, new ArrayOrderedMap<String, String[]>(params.size()));\r\n        }\r\n        for (Entry<String, String[]> entry : params.entrySet()) {\r\n            if (REFS_PARAM_NAME.equals(entry.getKey())) {\r\n                continue;\r\n            }\r\n            boolean found = false;\r\n            for (String refKey : referencedParams.keySet()) {\r\n                if (entry.getKey().startsWith(refKey)) {\r\n                    String key = entry.getKey();\r\n                    key = key.substring(refKey.length());\r\n                    if (key.length() == 0) {\r\n                        log.warn(\"EntityBatchHandler: \" + \"Skipping invalid reference param name (\" + entry.getKey() + \"), \" + \"name must start with ref#. but MUST have the actual name of the param after that\");\r\n                    } else {\r\n                        referencedParams.get(refKey).put(key, entry.getValue());\r\n                    }\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                referencedParams.get(UNREFERENCED_PARAMS).put(entry.getKey(), entry.getValue());\r\n            }\r\n        }\r\n    }\r\n    return referencedParams;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : m_serverConfigurationService.getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.addBlti",
	"Comment": "or update an existing item, depending upon whether itemid is set",
	"Method": "String addBlti(){\r\n    if (!itemOk(itemId))\r\n        return \"permission-failed\";\r\n    if (!canEditPage())\r\n        return \"permission-failed\";\r\n    if (!checkCsrf())\r\n        return \"permission-failed\";\r\n    if (selectedBlti == null || bltiEntity == null) {\r\n        return \"failure\";\r\n    } else {\r\n        try {\r\n            LessonEntity selectedObject = bltiEntity.getEntity(selectedBlti);\r\n            if (selectedObject == null)\r\n                return \"failure\";\r\n            SimplePageItem i;\r\n            if (itemId != null && itemId != -1) {\r\n                i = findItem(itemId);\r\n                LessonEntity existing = bltiEntity.getEntity(i.getSakaiId());\r\n                String ref = null;\r\n                if (existing != null)\r\n                    ref = existing.getReference();\r\n                if ((existing == null) || !ref.equals(selectedBlti)) {\r\n                    i.setSakaiId(selectedBlti);\r\n                    i.setName(selectedObject.getTitle());\r\n                    if (format == null || format.trim().equals(\"\"))\r\n                        i.setFormat(\"\");\r\n                    else\r\n                        i.setFormat(format);\r\n                    if (\"window\".equals(format))\r\n                        i.setSameWindow(false);\r\n                    else\r\n                        i.setSameWindow(true);\r\n                    i.setHeight(height);\r\n                    setItemGroups(i, selectedGroups);\r\n                    update(i);\r\n                }\r\n            } else {\r\n                i = appendItem(selectedBlti, selectedObject.getTitle(), SimplePageItem.BLTI);\r\n                BltiInterface blti = (BltiInterface) bltiEntity.getEntity(selectedBlti);\r\n                if (blti != null) {\r\n                    int height = blti.frameSize();\r\n                    if (height > 0)\r\n                        i.setHeight(Integer.toString(height));\r\n                    else\r\n                        i.setHeight(\"\");\r\n                    if (format == null || format.trim().equals(\"\"))\r\n                        i.setFormat(\"\");\r\n                    else\r\n                        i.setFormat(format);\r\n                }\r\n                saveItem(i);\r\n            }\r\n            return \"success\";\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return \"failure\";\r\n        } finally {\r\n            selectedBlti = null;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.getContents",
	"Comment": "returns list of decoratedcompiledmessagestats. called by\tjsp page and main processing of list to be displayed.\tused by both myworkspace and site home page.",
	"Method": "List getContents(){\r\n    if (isMyWorkspace()) {\r\n        return getMyWorkspaceContents();\r\n    } else {\r\n        return new ArrayList();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.refreshPendingMessages",
	"Comment": "retrieve pending msgs from db and make discussionmessagebeans",
	"Method": "void refreshPendingMessages(){\r\n    pendingMsgs = new ArrayList();\r\n    numPendingMessages = 0;\r\n    List messages = forumManager.getPendingMsgsInSiteByMembership(uiPermissionsManager.getCurrentUserMemberships());\r\n    if (messages != null && !messages.isEmpty()) {\r\n        messages = messageManager.sortMessageByDate(messages, true);\r\n        Map<Topic, Boolean> topicUseAnonIdMap = new HashMap();\r\n        Map<String, List<DiscussionMessageBean>> userIdAnonMessagesMap = new HashMap();\r\n        Iterator msgIter = messages.iterator();\r\n        while (msgIter.hasNext()) {\r\n            Message msg = (Message) msgIter.next();\r\n            Topic topic = msg.getTopic();\r\n            Boolean useAnonId = topicUseAnonIdMap.get(topic);\r\n            if (useAnonId == null) {\r\n                useAnonId = isUseAnonymousId(topic);\r\n                topicUseAnonIdMap.put(topic, useAnonId);\r\n            }\r\n            DiscussionMessageBean decoMsg = new DiscussionMessageBean(msg, messageManager);\r\n            decoMsg.setUseAnonymousId(useAnonId);\r\n            if (useAnonId) {\r\n                String userId = msg.getAuthorId();\r\n                List<DiscussionMessageBean> userAnonymousMessages = userIdAnonMessagesMap.get(userId);\r\n                if (userAnonymousMessages == null) {\r\n                    userAnonymousMessages = new ArrayList();\r\n                    userIdAnonMessagesMap.put(userId, userAnonymousMessages);\r\n                }\r\n                userAnonymousMessages.add(decoMsg);\r\n            }\r\n            pendingMsgs.add(decoMsg);\r\n            numPendingMessages++;\r\n        }\r\n        String siteId = toolManager.getCurrentPlacement().getContext();\r\n        List<String> userIdList = new ArrayList();\r\n        userIdList.addAll(userIdAnonMessagesMap.keySet());\r\n        Map<String, String> userIdAnonIdMap = anonymousManager.getOrCreateUserIdAnonIdMap(siteId, userIdList);\r\n        for (String userId : userIdList) {\r\n            String anonId = userIdAnonIdMap.get(userId);\r\n            List<DiscussionMessageBean> userMessages = userIdAnonMessagesMap.get(userId);\r\n            for (DiscussionMessageBean decoMsg : userMessages) {\r\n                decoMsg.setAnonId(anonId);\r\n            }\r\n        }\r\n    }\r\n    refreshPendingMsgs = false;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbBinarySingleStorage.getAllResourcesWhere",
	"Comment": "get all resources where the given field matches the given value.",
	"Method": "List getAllResourcesWhere(String field,String value,List getAllResourcesWhere,String selectBy,String selectByValue,String orderBy,int first,int maxCount){\r\n    String sql = singleStorageSql.getXmlWhereLimitSql(selectBy, orderBy, m_resourceTableName, first, maxCount);\r\n    Object[] fields = new Object[1];\r\n    fields[0] = selectByValue;\r\n    return loadResources(sql, fields);\r\n}"
}, {
	"Path": "org.sakaiproject.entity.impl.ReferenceComponent.getUrl",
	"Comment": "access the url which can be used to access the referenced resource.",
	"Method": "String getUrl(){\r\n    String url = null;\r\n    if (m_service != null) {\r\n        url = m_service.getEntityUrl(this);\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.entityproviders.ForumsEntityProviderImpl.getForum",
	"Comment": "this will return a sparseforum populated down to the topics with their\tattachments.",
	"Method": "Object getForum(Long forumId,String siteId,String userId){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"getForum(\" + forumId + \",\" + siteId + \",\" + userId + \")\");\r\n    }\r\n    DiscussionForum fatForum = forumManager.getForumByIdWithTopicsAttachmentsAndMessages(forumId);\r\n    if (checkAccess(fatForum, userId, siteId)) {\r\n        SparseForum sparseForum = new SparseForum(fatForum, developerHelperService);\r\n        List<DiscussionTopic> fatTopics = (List<DiscussionTopic>) fatForum.getTopics();\r\n        List<Long> topicIds = new ArrayList<Long>();\r\n        for (DiscussionTopic topic : fatTopics) {\r\n            topicIds.add(topic.getId());\r\n        }\r\n        List<Object[]> topicTotals = forumManager.getMessageCountsForMainPage(topicIds);\r\n        List<Object[]> topicReadTotals = forumManager.getReadMessageCountsForMainPage(topicIds);\r\n        int totalForumMessages = 0;\r\n        for (Object[] topicTotal : topicTotals) {\r\n            totalForumMessages += ((Long) topicTotal[1]).intValue();\r\n        }\r\n        sparseForum.setTotalMessages(totalForumMessages);\r\n        int totalForumReadMessages = 0;\r\n        for (Object[] topicReadTotal : topicReadTotals) {\r\n            totalForumReadMessages += ((Long) topicReadTotal[1]).intValue();\r\n        }\r\n        sparseForum.setReadMessages(totalForumReadMessages);\r\n        List<SparsestTopic> sparseTopics = new ArrayList<SparsestTopic>();\r\n        for (DiscussionTopic fatTopic : fatTopics) {\r\n            if (!uiPermissionsManager.isRead(fatTopic, fatForum, userId, siteId)) {\r\n                continue;\r\n            }\r\n            SparsestTopic sparseTopic = new SparsestTopic(fatTopic);\r\n            for (Object[] topicTotal : topicTotals) {\r\n                if (topicTotal[0].equals(sparseTopic.getId())) {\r\n                    sparseTopic.setTotalMessages(((Long) topicTotal[1]).intValue());\r\n                }\r\n            }\r\n            for (Object[] topicReadTotal : topicReadTotals) {\r\n                if (topicReadTotal[0].equals(sparseTopic.getId())) {\r\n                    sparseTopic.setReadMessages(((Long) topicReadTotal[1]).intValue());\r\n                }\r\n            }\r\n            List<SparseAttachment> attachments = new ArrayList<SparseAttachment>();\r\n            for (Attachment attachment : (List<Attachment>) fatTopic.getAttachments()) {\r\n                String url = developerHelperService.getServerURL() + \"/access/content\" + attachment.getAttachmentId();\r\n                attachments.add(new SparseAttachment(attachment.getAttachmentName(), url));\r\n            }\r\n            sparseTopic.setAttachments(attachments);\r\n            sparseTopics.add(sparseTopic);\r\n        }\r\n        sparseForum.setTopics(sparseTopics);\r\n        return sparseForum;\r\n    } else {\r\n        log.error(\"Not authorised to access forum '\" + forumId + \"'\");\r\n        throw new EntityException(\"You are not authorised to access this forum.\", \"\", HttpServletResponse.SC_UNAUTHORIZED);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.expandMacros",
	"Comment": "expands a url that may contain a set of predefined macros, into the full url. this should only ever happen when its about to be redirected to, ie never stored and never displayedso that people dont accidentally send an expanded url containing personally identifying information to someone else, for example.",
	"Method": "String expandMacros(String url){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Original url: \" + url);\r\n    }\r\n    if (!StringUtils.contains(url, \"${\")) {\r\n        return url;\r\n    }\r\n    String allowedMacros = m_serverConfigurationService.getString(\"content.allowed.macros\", MACRO_DEFAULT_ALLOWED);\r\n    List<String> macros = new ArrayList<String>();\r\n    if (StringUtils.isNotBlank(allowedMacros)) {\r\n        macros = Arrays.asList(StringUtils.split(allowedMacros, ','));\r\n    }\r\n    for (String macro : macros) {\r\n        url = StringUtils.replace(url, macro, getMacroValue(macro));\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Expanded url: \" + url);\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.sakaiproject.util.ByteStorageConversion.toChar",
	"Comment": "convert the signed byte array b into char starting at bstart for length\tbytes into c starting at cstart",
	"Method": "void toChar(byte[] b,int bstart,char[] c,int cstart,int length){\r\n    int bi = bstart;\r\n    int ci = cstart;\r\n    for (int i = 0; i < length; i++, bi++, ci++) {\r\n        if (b[bi] >= 0) {\r\n            c[ci] = (char) (b[bi]);\r\n        } else {\r\n            c[ci] = (char) (256 + b[bi]);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.getSiteList",
	"Comment": "returns a list of site ids as well as populating a map of site objects",
	"Method": "List getSiteList(){\r\n    if (siteList == null) {\r\n        siteList = new ArrayList();\r\n        if (sitesMap == null) {\r\n            sitesMap = new HashMap();\r\n        }\r\n        List mySites = siteService.getSites(org.sakaiproject.site.api.SiteService.SelectionType.ACCESS, null, null, null, org.sakaiproject.site.api.SiteService.SortType.TITLE_ASC, null);\r\n        Iterator lsi = mySites.iterator();\r\n        if (!lsi.hasNext()) {\r\n            log.debug(\"User \" + sessionManager.getCurrentSessionUserId() + \" does not belong to any sites.\");\r\n            return mySites;\r\n        }\r\n        while (lsi.hasNext()) {\r\n            Site site = (Site) lsi.next();\r\n            if (site.isPublished()) {\r\n                siteList.add(site.getId());\r\n                sitesMap.put(site.getId(), site);\r\n            }\r\n        }\r\n    }\r\n    return siteList;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere6Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere6Sql(){\r\n    return \"SAKAI_SITE.TYPE IN (?\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.setJobDetail",
	"Comment": "sets the jobdetail object for the job presently being editted or sor which properties or triggers are being editted.",
	"Method": "void setJobDetail(JobDetail detail){\r\n    jobDetail = detail;\r\n    refreshProperties();\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.entityproviders.utils.MessageUtils.addReplies",
	"Comment": "does a depth first recursion into the messages list, looking for replies\tto the specified parent.",
	"Method": "void addReplies(SparseMessage parent,List<SparseMessage> messages,Map<Long, Boolean> readStati,Counts counts){\r\n    for (SparseMessage message : messages) {\r\n        if (message.isDraft() || message.isDeleted()) {\r\n            continue;\r\n        }\r\n        if (message.getReplyTo() != null && message.getReplyTo().equals(parent.getMessageId())) {\r\n            counts.total = counts.total + 1;\r\n            boolean read = readStati.get(message.getMessageId());\r\n            message.setRead(read);\r\n            if (read) {\r\n                counts.read = counts.read + 1;\r\n            }\r\n            parent.addReply(message);\r\n            addReplies(message, messages, readStati, counts);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.AnonymousManagerImpl.findMappingsBySiteAndUsers",
	"Comment": "gets a list of anonymousmapping objects from the database for the specified users in the specified site.",
	"Method": "List<AnonymousMapping> findMappingsBySiteAndUsers(String siteId,List<String> userIds){\r\n    if (CollectionUtils.isEmpty(userIds)) {\r\n        return Collections.emptyList();\r\n    }\r\n    HibernateCallback<List<AnonymousMapping>> hcb = new HibernateCallback<List<AnonymousMapping>>() {\r\n        public List<AnonymousMapping> doInHibernate(Session session) throws HibernateException {\r\n            List<AnonymousMapping> mappings = new ArrayList();\r\n            int minUser = 0;\r\n            int maxUser = Math.min(userIds.size(), MAX_IN_CLAUSE_SIZE);\r\n            while (minUser < userIds.size()) {\r\n                Query q = session.getNamedQuery(QUERY_BY_SITE_AND_USERS);\r\n                q.setParameter(\"siteId\", siteId, StringType.INSTANCE);\r\n                q.setParameterList(\"userIds\", userIds.subList(minUser, maxUser));\r\n                mappings.addAll(q.list());\r\n                minUser += MAX_IN_CLAUSE_SIZE;\r\n                maxUser = Math.min(userIds.size(), minUser + MAX_IN_CLAUSE_SIZE);\r\n            }\r\n            return mappings;\r\n        }\r\n    };\r\n    return getHibernateTemplate().execute(hcb);\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.AnonymousManagerImpl.findMappingsBySiteAndUsers",
	"Comment": "gets a list of anonymousmapping objects from the database for the specified users in the specified site.",
	"Method": "List<AnonymousMapping> findMappingsBySiteAndUsers(String siteId,List<String> userIds){\r\n    List<AnonymousMapping> mappings = new ArrayList();\r\n    int minUser = 0;\r\n    int maxUser = Math.min(userIds.size(), MAX_IN_CLAUSE_SIZE);\r\n    while (minUser < userIds.size()) {\r\n        Query q = session.getNamedQuery(QUERY_BY_SITE_AND_USERS);\r\n        q.setParameter(\"siteId\", siteId, StringType.INSTANCE);\r\n        q.setParameterList(\"userIds\", userIds.subList(minUser, maxUser));\r\n        mappings.addAll(q.list());\r\n        minUser += MAX_IN_CLAUSE_SIZE;\r\n        maxUser = Math.min(userIds.size(), minUser + MAX_IN_CLAUSE_SIZE);\r\n    }\r\n    return mappings;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlService.debug",
	"Comment": "append a message about this sql statement to the debug string in progress, if any",
	"Method": "void debug(String str,String sql,Object[] fields){\r\n    try {\r\n        StringBuilder buf = new StringBuilder(2048);\r\n        buf.append(str);\r\n        buf.append(\" binds: \");\r\n        buf.append(debugFields(fields));\r\n        buf.append(\" sql: \");\r\n        buf.append(sql);\r\n        log.info(buf.toString());\r\n    } catch (Exception ignore) {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Ignored Exception: \" + ignore.getMessage(), ignore);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BasicContentTypeImageService.getContentType",
	"Comment": "get the content type string that is used for this file extension.",
	"Method": "String getContentType(String extension){\r\n    String type = UNKNOWN_TYPE;\r\n    if (m_contentTypes != null) {\r\n        type = m_contentTypes.getProperty(extension.toLowerCase());\r\n        if (type == null)\r\n            type = UNKNOWN_TYPE;\r\n    }\r\n    return type;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.intAt",
	"Comment": "returns an int reconstructed from four bytes at a specific\t location.",
	"Method": "int intAt(int pos){\r\n    if (!between(pos, 0, (size - 4))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    int ret = 0x0, temp;\r\n    beginEnumeration(pos);\r\n    for (int x = 0; x < 4; x++) {\r\n        temp = ((int) nextByte() << (3 * 8)) >>> (3 * 8);\r\n        ret |= (temp << (8 * (3 - x)));\r\n    }\r\n    return ret;\r\n}"
}, {
	"Path": "org.sakaiproject.util.UserNotificationPreferencesRegistrationImpl.getUserNotificationPreferencesRegistrationService",
	"Comment": "gets the usernotificationpreferencesregistrationservice",
	"Method": "UserNotificationPreferencesRegistrationService getUserNotificationPreferencesRegistrationService(){\r\n    return userNotificationPreferencesRegistrationService;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlDefault.setTimestamp",
	"Comment": "sets the value of a timestamp field in the specified column.",
	"Method": "PreparedStatement setTimestamp(PreparedStatement pstmt,Timestamp timestamp,GregorianCalendar calendar,int pos){\r\n    pstmt.setTimestamp(pos, timestamp, calendar);\r\n    return pstmt;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.ui.PrivateMessageManagerImpl.addAttachToPvtMsg",
	"Comment": "before saving a message, we need to add all the attachmnets to a perticular message",
	"Method": "void addAttachToPvtMsg(PrivateMessage pvtMsgData,Attachment pvtMsgAttach){\r\n    pvtMsgData.addAttachment(pvtMsgAttach);\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbSingleStorage.valuesParams",
	"Comment": "form a string of n question marks with commas, for sql value statements, one for each item in the values array, or an empty string if null.",
	"Method": "String valuesParams(String[] fields){\r\n    if ((fields == null) || (fields.length == 0))\r\n        return \"\";\r\n    StringBuilder buf = new StringBuilder();\r\n    for (int i = 0; i < fields.length; i++) {\r\n        buf.append(\" ?,\");\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsForumManagerImpl.getRecentDiscussionForumMessages",
	"Comment": "returns a given number of discussion forum messages if available in thetime provided",
	"Method": "List getRecentDiscussionForumMessages(int numberMessages,int numberDaysInPast){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.pages.GradebookPage.getUiSettings",
	"Comment": "getter for the gradebookuisettings. used to store a few ui related settings for the current session only.",
	"Method": "GradebookUiSettings getUiSettings(){\r\n    GradebookUiSettings settings = (GradebookUiSettings) Session.get().getAttribute(\"GBNG_UI_SETTINGS\");\r\n    if (settings == null) {\r\n        settings = new GradebookUiSettings();\r\n        settings.setCategoriesEnabled(this.businessService.categoriesAreEnabled());\r\n        settings.initializeCategoryColors(this.businessService.getGradebookCategories());\r\n        settings.setCategoryColor(getString(GradebookPage.UNCATEGORISED), GradebookUiSettings.generateRandomRGBColorString(null));\r\n        setUiSettings(settings);\r\n    }\r\n    return settings;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getUnpublishedSitesOnlySql",
	"Comment": "returns part of the where clause to retrieve sites that are unpublished",
	"Method": "String getUnpublishedSitesOnlySql(){\r\n    return \"SAKAI_SITE.PUBLISHED = '0' and \";\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.impl.BaseMailArchiveService.newResource",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Entity newResource(Entity container,String id,Object[] others,Entity newResource,Entity container,Element element,Entity newResource,Entity container,Entity other){\r\n    return new BaseMailArchiveMessageEdit((MessageChannel) container, (Message) other);\r\n}"
}, {
	"Path": "org.sakaiproject.alias.impl.BaseAliasService.newResource",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Entity newResource(Entity container,String id,Object[] others,Entity newResource,Entity container,Element element,Entity newResource,Entity container,Entity other){\r\n    return new BaseAliasEdit((BaseAliasEdit) other);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.importExport.GradeValidator.validateGrade",
	"Comment": "validates the given grade for the user. grades are expected to be numeric.",
	"Method": "void validateGrade(String columnTitle,String userID,String grade){\r\n    if (StringUtils.isBlank(grade)) {\r\n        return;\r\n    }\r\n    if (!bus.isValidNumericGrade(grade)) {\r\n        report.addInvalidNumericGrade(columnTitle, userID, grade);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityHandlerImpl.handleAccessProvider",
	"Comment": "will choose whichever access provider is currently available to handle the request",
	"Method": "boolean handleAccessProvider(EntityView view,HttpServletRequest req,HttpServletResponse res){\r\n    EntityViewAccessProvider evAccessProvider = entityViewAccessProviderManager.getProvider(view.getEntityReference().getPrefix());\r\n    if (evAccessProvider == null) {\r\n        if (accessProviderManager != null) {\r\n            HttpServletAccessProvider httpAccessProvider = accessProviderManager.getProvider(view.getEntityReference().getPrefix());\r\n            if (httpAccessProvider == null) {\r\n                return false;\r\n            } else {\r\n                ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\r\n                try {\r\n                    Object thing = httpAccessProvider;\r\n                    ClassLoader newClassLoader = thing.getClass().getClassLoader();\r\n                    if (thing instanceof ClassLoaderReporter) {\r\n                        newClassLoader = ((ClassLoaderReporter) thing).getSuitableClassLoader();\r\n                    }\r\n                    Thread.currentThread().setContextClassLoader(newClassLoader);\r\n                    httpAccessProvider.handleAccess(req, res, view.getEntityReference());\r\n                } finally {\r\n                    Thread.currentThread().setContextClassLoader(currentClassLoader);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (AccessViews.class.isAssignableFrom(evAccessProvider.getClass())) {\r\n            String[] entityViewKeys = ((AccessViews) evAccessProvider).getHandledEntityViews();\r\n            if (entityViewKeys != null && !ReflectUtils.contains(entityViewKeys, view.getViewKey())) {\r\n                throw new EntityException(\"Access provider for \" + view.getEntityReference().getPrefix() + \" will not handle this view (\" + view.getViewKey() + \"): \" + view, view.getEntityReference() + \"\", HttpServletResponse.SC_BAD_REQUEST);\r\n            }\r\n        }\r\n        if (AccessFormats.class.isAssignableFrom(evAccessProvider.getClass())) {\r\n            String[] accessFormats = ((AccessFormats) evAccessProvider).getHandledAccessFormats();\r\n            if (accessFormats != null && !ReflectUtils.contains(accessFormats, view.getFormat())) {\r\n                throw new FormatUnsupportedException(\"Access provider for \" + view.getEntityReference().getPrefix() + \" will not handle this format (\" + view.getFormat() + \")\", view.getEntityReference() + \"\", view.getFormat());\r\n            }\r\n        }\r\n        handleClassLoaderAccess(evAccessProvider, req, res, view);\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.pages.SettingsPage.getSettingsGradeReleasePanel",
	"Comment": "getters for these panels as we need to interact with them from the child panels",
	"Method": "SettingsGradeReleasePanel getSettingsGradeReleasePanel(){\r\n    return this.gradeReleasePanel;\r\n}"
}, {
	"Path": "org.sakaiproject.email.api.EmailMessage.setAttachments",
	"Comment": "set the attachments of this message. will replace any existing attachments.",
	"Method": "void setAttachments(List<Attachment> attachments){\r\n    this.attachments = attachments;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonBuilderEntityProducer.getEventKeys",
	"Comment": "return an array of all the event keys which should be tracked for statistics",
	"Method": "String[] getEventKeys(){\r\n    return EVENT_KEYS;\r\n}"
}, {
	"Path": "org.sakaiproject.config.impl.StoredConfigService.createConfigItem",
	"Comment": "creates an equivalent configitem from a hibernateconfigitem",
	"Method": "ConfigItem createConfigItem(HibernateConfigItem hItem){\r\n    if (hItem == null) {\r\n        return null;\r\n    }\r\n    String value;\r\n    if (serverConfigurationService.getBoolean(SAKAI_CONFIG_USE_RAW, false) && StringUtils.isNotBlank(hItem.getRawValue())) {\r\n        value = hItem.getRawValue();\r\n    } else {\r\n        value = hItem.getValue();\r\n    }\r\n    ConfigItem item = new // requested\r\n    ConfigItemImpl(// requested\r\n    hItem.getName(), // requested\r\n    deSerializeValue(value, hItem.getType(), hItem.isSecured()), // requested\r\n    hItem.getType(), // requested\r\n    hItem.getDescription(), // requested\r\n    this.getClass().getName(), deSerializeValue(hItem.getDefaultValue(), hItem.getType(), hItem.isSecured()), 0, 0, null, hItem.isRegistered(), hItem.isDefaulted(), hItem.isSecured(), hItem.isDynamic());\r\n    log.debug(\"{}\", item);\r\n    return item;\r\n}"
}, {
	"Path": "org.sakaiproject.alias.impl.BaseAliasService.removeTargetAliases",
	"Comment": "remove all aliases for this target resource reference, if any.",
	"Method": "void removeTargetAliases(String target){\r\n    if (!unlockTargetCheck(target)) {\r\n        throw new PermissionException(sessionManager().getCurrentSessionUserId(), SECURE_REMOVE_ALIAS, target);\r\n    }\r\n    List<Alias> all = getAliases(target);\r\n    for (Iterator<Alias> iAll = all.iterator(); iAll.hasNext(); ) {\r\n        Alias alias = (Alias) iAll.next();\r\n        try {\r\n            AliasEdit a = m_storage.edit(alias.getId());\r\n            if (a != null) {\r\n                m_storage.remove(a);\r\n                eventTrackingService().post(eventTrackingService().newEvent(SECURE_REMOVE_ALIAS, a.getReference(), true));\r\n            }\r\n        } catch (Exception ignore) {\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlDefault.getXmlSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table and limits the result set.",
	"Method": "String getXmlSql(String table,String getXmlSql,String field,String table,String getXmlSql,String field,String table,int first,int last){\r\n    return \"select limit \" + (first - 1) + \" \" + (last - first + 1) + \" XML from \" + table + \" order by \" + field + \" asc\";\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.pages.BasePage.renderHead",
	"Comment": "this block adds the required wrapper markup to style it like a sakai tool. add to this any additional css or js references that you\tneed.",
	"Method": "void renderHead(IHeaderResponse response){\r\n    super.renderHead(response);\r\n    final String version = ServerConfigurationService.getString(\"portal.cdn.version\", \"\");\r\n    final HttpServletRequest request = (HttpServletRequest) getRequest().getContainerRequest();\r\n    response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forReference(getApplication().getJavaScriptLibrarySettings().getJQueryReference())));\r\n    response.render(StringHeaderItem.forString((String) request.getAttribute(\"sakai.html.head\")));\r\n    response.render(OnLoadHeaderItem.forScript(\"setMainFrameHeight( window.name )\"));\r\n    response.render(StringHeaderItem.forString(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\"));\r\n    response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forUrl(String.format(\"/library/webjars/jquery/1.12.4/jquery.min.js?version=%s\", version))));\r\n    response.render(new PriorityHeaderItem(JavaScriptHeaderItem.forUrl(String.format(\"/library/webjars/bootstrap/3.3.7/js/bootstrap.min.js?version=%s\", version))));\r\n    response.render(CssHeaderItem.forUrl(String.format(\"/gradebookng-tool/styles/gradebook-shared.css?version=%s\", version)));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.getServerConfigurationService",
	"Comment": "returns the instance of the serverconfigurationservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "ServerConfigurationService getServerConfigurationService(){\r\n    return serverConfigurationService;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.getCurrentTool",
	"Comment": "ids are sakai.assignment.grades, sakai.samigo, sakai.mneme, sakai.forums, sakai.jforum.tool",
	"Method": "String getCurrentTool(String commonToolId){\r\n    Site site = getCurrentSite();\r\n    ToolConfiguration tool = site.getToolForCommonId(commonToolId);\r\n    if (tool == null)\r\n        return null;\r\n    return tool.getId();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getCollectionMap",
	"Comment": "return a map of worksite collections roots that the user has access to.",
	"Method": "Map<String, String> getCollectionMap(){\r\n    Map<String, String> rv = new HashMap<String, String>();\r\n    List<Site> mySites = m_siteService.getSites(org.sakaiproject.site.api.SiteService.SelectionType.ACCESS, null, null, null, org.sakaiproject.site.api.SiteService.SortType.TITLE_ASC, null);\r\n    String userId = sessionManager.getCurrentSessionUserId();\r\n    if (userId != null) {\r\n        try {\r\n            mySites.add(m_siteService.getSite(m_siteService.getUserSiteId(userId)));\r\n        } catch (IdUnusedException e) {\r\n        }\r\n    }\r\n    for (Iterator<Site> i = mySites.iterator(); i.hasNext(); ) {\r\n        Site site = (Site) i.next();\r\n        if (site.getToolForCommonId(\"sakai.dropbox\") != null) {\r\n            String collectionId = getDropboxCollection(site.getId());\r\n            String title = site.getTitle() + \" \" + rb.getString(\"gen.drop\");\r\n            rv.put(collectionId, title);\r\n        }\r\n        if (site.getToolForCommonId(\"sakai.resources\") != null) {\r\n            String collectionId = getSiteCollection(site.getId());\r\n            String title = site.getTitle() + \" \" + rb.getString(\"gen.reso\");\r\n            rv.put(collectionId, title);\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.alias.impl.BaseAliasService.newResourceEdit",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Edit newResourceEdit(Entity container,String id,Object[] others,Edit newResourceEdit,Entity container,Element element,Edit newResourceEdit,Entity container,Entity other){\r\n    BaseAliasEdit e = new BaseAliasEdit((BaseAliasEdit) other);\r\n    e.activate();\r\n    return e;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.checkExplicitLock",
	"Comment": "throws a permissionexception if the resource with the given id is explicitly locked",
	"Method": "void checkExplicitLock(String id){\r\n    String uuid = this.getUuid(id);\r\n    if (uuid != null && this.isLocked(uuid)) {\r\n        throw new PermissionException(sessionManager.getCurrentSessionUserId(), \"remove\", id);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder2Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder2Sql(){\r\n    return \"SAKAI_SITE.SITE_ID DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseNotificationService.newResource",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Entity newResource(Entity container,String id,Object[] others,Entity newResource,Entity container,Element element,Entity newResource,Entity container,Entity other){\r\n    return new BaseNotification((Notification) other);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.RebuildBreakdownServiceImpl.storeSubSession",
	"Comment": "checks if a subsession should be processed and stored in the distributed store",
	"Method": "boolean storeSubSession(MyLittleSession subSession){\r\n    if (subSession == null) {\r\n        return false;\r\n    }\r\n    if (MyLittleSession.TYPE_TOOL.equals(subSession.getSessionType())) {\r\n        if (subSession.getSessionToolId() == null) {\r\n            return false;\r\n        } else if (StringUtils.contains(subSession.getSessionToolId(), \"synoptic\")) {\r\n            return false;\r\n        }\r\n    }\r\n    if (subSession.getContextId() != null && subSession.getContextId().equals(serverConfigurationService.getGatewaySiteId())) {\r\n        return false;\r\n    }\r\n    if (!subSession.getAttributeNames().hasMoreElements()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder14Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder14Sql(){\r\n    return \"SAKAI_SITE.CREATEDON DESC\";\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.BaseUserDirectoryService.destroy",
	"Comment": "returns to uninitialized state. you can use this method to release resources thet your service allocated when turbine shuts down.",
	"Method": "void destroy(){\r\n    m_storage.close();\r\n    m_storage = null;\r\n    m_provider = null;\r\n    m_anon = null;\r\n    m_passwordPolicyProvider = null;\r\n    m_callCache.close();\r\n    m_userCacheObserver = null;\r\n    log.info(\"destroy()\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.getCollapsePermissionPanel",
	"Comment": "returns property value of mc.collapsepermissionpanel, default is false",
	"Method": "String getCollapsePermissionPanel(){\r\n    if (collapsePermissionPanel) {\r\n        return \"true\";\r\n    }\r\n    return \"false\";\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.ConfigItemImpl.copy",
	"Comment": "duplicate this config itemthis is mostly used to ensure we do not send the internal objects out where they could be changed",
	"Method": "ConfigItem copy(){\r\n    @SuppressWarnings(\"UnnecessaryLocalVariable\")\r\n    ConfigItem ci = new ConfigItemImpl(this.name, this.value, this.type, this.description, this.source, this.defaultValue, this.requested, this.changed, this.history, this.registered, this.defaulted, this.secured, this.dynamic);\r\n    return ci;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.addNextLink",
	"Comment": "on and when we go from a page to an item, the page has to be popped off.",
	"Method": "void addNextLink(UIContainer tofill,SimplePageItem item){\r\n    SimplePageItem nextItem = findNextPage(item);\r\n    if (nextItem == item) {\r\n        List<PathEntry> path = (List<PathEntry>) sessionManager.getCurrentToolSession().getAttribute(LESSONBUILDER_PATH);\r\n        int top;\r\n        if (path == null)\r\n            top = -1;\r\n        else\r\n            top = path.size() - 1;\r\n        if (item.getType() == SimplePageItem.PAGE)\r\n            top--;\r\n        if (top >= 0) {\r\n            PathEntry e = path.get(top);\r\n            GeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\r\n            view.setSendingPage(e.pageId);\r\n            view.setItemId(e.pageItemId);\r\n            view.setPath(Integer.toString(top));\r\n            UIInternalLink.make(tofill, \"next\", messageLocator.getMessage(\"simplepage.next\"), view);\r\n            UIInternalLink.make(tofill, \"next1\", messageLocator.getMessage(\"simplepage.next\"), view);\r\n        }\r\n    } else if (nextItem != null) {\r\n        GeneralViewParameters view = new GeneralViewParameters();\r\n        int itemType = nextItem.getType();\r\n        if (itemType == SimplePageItem.PAGE) {\r\n            view.setSendingPage(Long.valueOf(nextItem.getSakaiId()));\r\n            view.viewID = ShowPageProducer.VIEW_ID;\r\n            if (item.getType() == SimplePageItem.PAGE)\r\n                view.setPath(\"next\");\r\n            else\r\n                view.setPath(\"push\");\r\n        } else if (itemType == SimplePageItem.RESOURCE) {\r\n            view.setSendingPage(item.getPageId());\r\n            if (!isItemAvailable(nextItem, nextItem.getPageId()))\r\n                view.setRecheck(\"true\");\r\n            view.viewID = ShowItemProducer.VIEW_ID;\r\n        } else {\r\n            view.setSendingPage(item.getPageId());\r\n            if (!isItemAvailable(nextItem, nextItem.getPageId()))\r\n                view.setRecheck(\"true\");\r\n            if (item.getType() == SimplePageItem.PAGE)\r\n                view.setPath(\"pop\");\r\n            view.viewID = ShowItemProducer.VIEW_ID;\r\n        }\r\n        view.setItemId(nextItem.getId());\r\n        view.setBackPath(\"push\");\r\n        UIInternalLink.make(tofill, \"next\", messageLocator.getMessage(\"simplepage.next\"), view);\r\n        UIInternalLink.make(tofill, \"next1\", messageLocator.getMessage(\"simplepage.next\"), view);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere13Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere13Sql(){\r\n    return \"SAKAI_SITE.SITE_ID in (select SITE_ID from SAKAI_SITE_PROPERTY where NAME = ? and UPPER(VALUE) like UPPER(?)) and \";\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.cc.PrintHandler.getFileName",
	"Comment": "return the href attribute, otherwise return the href value of a file child",
	"Method": "String getFileName(Element resource){\r\n    String href = resource.getAttributeValue(HREF);\r\n    if (href == null) {\r\n        Element file = resource.getChild(FILE, ns.getNs());\r\n        return file.getAttributeValue(HREF);\r\n    }\r\n    return href;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionForumBean.getForumAutoMarkThreadsRead",
	"Comment": "return boolean, whether or not the forum automatically marks all posts in a topic as read.",
	"Method": "Boolean getForumAutoMarkThreadsRead(){\r\n    log.debug(\"getForumAutoMarkThreadsRead()\");\r\n    return forum.getAutoMarkThreadsRead();\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseEventTrackingService.ensureBaseEvent",
	"Comment": "ensure that the provided event is an instance of baseevent.if not, create a new baseevent\tand transfer state.",
	"Method": "BaseEvent ensureBaseEvent(Event e){\r\n    BaseEvent event = null;\r\n    if (e instanceof BaseEvent) {\r\n        event = (BaseEvent) e;\r\n    } else {\r\n        event = new BaseEvent(e.getEvent(), e.getResource(), e.getModify(), e.getPriority(), null);\r\n        event.setSessionId(e.getSessionId());\r\n        event.setUserId(e.getUserId());\r\n    }\r\n    return event;\r\n}"
}, {
	"Path": "org.sakaiproject.test.SakaiKernelTestBase.oneTimeTearDown",
	"Comment": "pull the component manager down. this is done quietly so as not to alarm users.",
	"Method": "void oneTimeTearDown(){\r\n    if (testComponentManagerContainer != null) {\r\n        testComponentManagerContainer.getComponentManager().close();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.PrivateMessagesTool.setPrevNextTopicDetails",
	"Comment": "add prev and next topic uuid value and booleans for display of links",
	"Method": "void setPrevNextTopicDetails(String msgNavMode){\r\n    for (int i = 0; i < pvtTopics.size(); i++) {\r\n        Topic el = (Topic) pvtTopics.get(i);\r\n        if (el.getTitle().equals(msgNavMode)) {\r\n            setSelectedTopic(new PrivateTopicDecoratedBean(el));\r\n            if (i == 0) {\r\n                getSelectedTopic().setHasPreviousTopic(false);\r\n                if (i == (pvtTopics.size() - 1)) {\r\n                    getSelectedTopic().setHasNextTopic(false);\r\n                } else {\r\n                    getSelectedTopic().setHasNextTopic(true);\r\n                    Topic nt = (Topic) pvtTopics.get(i + 1);\r\n                    if (nt != null) {\r\n                        getSelectedTopic().setNextTopicTitle(nt.getTitle());\r\n                    }\r\n                }\r\n            } else if (i == (pvtTopics.size() - 1)) {\r\n                getSelectedTopic().setHasPreviousTopic(true);\r\n                getSelectedTopic().setHasNextTopic(false);\r\n                Topic pt = (Topic) pvtTopics.get(i - 1);\r\n                if (pt != null) {\r\n                    getSelectedTopic().setPreviousTopicTitle(pt.getTitle());\r\n                }\r\n            } else {\r\n                getSelectedTopic().setHasNextTopic(true);\r\n                getSelectedTopic().setHasPreviousTopic(true);\r\n                Topic nt = (Topic) pvtTopics.get(i + 1);\r\n                if (nt != null) {\r\n                    getSelectedTopic().setNextTopicTitle(nt.getTitle());\r\n                }\r\n                Topic pt = (Topic) pvtTopics.get(i - 1);\r\n                if (pt != null) {\r\n                    getSelectedTopic().setPreviousTopicTitle(pt.getTitle());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.ClusterEventTracking.bindValues",
	"Comment": "bind the event values into an array of fields for inserting.",
	"Method": "void bindValues(Event event,Object[] fields){\r\n    String reportId = null;\r\n    if (event.getSessionId() != null) {\r\n        reportId = event.getSessionId();\r\n    } else {\r\n        reportId = \"~\" + serverConfigurationService().getServerId() + \"~\" + event.getUserId();\r\n    }\r\n    fields[0] = ((BaseEvent) event).m_time;\r\n    fields[1] = event.getEvent() != null && event.getEvent().length() > 32 ? event.getEvent().substring(0, 32) : event.getEvent();\r\n    fields[2] = event.getResource() != null && event.getResource().length() > 255 ? event.getResource().substring(0, 255) : event.getResource();\r\n    fields[3] = reportId;\r\n    fields[4] = (event.getModify() ? \"m\" : \"a\");\r\n    fields[5] = event.getContext() != null && event.getContext().length() > 255 ? event.getContext().substring(0, 255) : event.getContext();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.PermissionManagerImpl.getDefaultAreaMessagePermissionForRole",
	"Comment": "get the default area message permission for a given role.this provides the permissions that the role currently has.",
	"Method": "MessagePermissions getDefaultAreaMessagePermissionForRole(String role,String typeId){\r\n    MessagePermissions mp = new MessagePermissionsImpl();\r\n    mp.setRole(role);\r\n    mp.setDeleteAny(Boolean.valueOf(defaultPermissionsManager.isDeleteAny(role)));\r\n    mp.setDeleteOwn(Boolean.valueOf(defaultPermissionsManager.isDeleteOwn(role)));\r\n    mp.setRead(Boolean.valueOf(defaultPermissionsManager.isRead(role)));\r\n    mp.setReadDrafts(Boolean.valueOf(false));\r\n    mp.setReviseAny(Boolean.valueOf(defaultPermissionsManager.isReviseAny(role)));\r\n    mp.setReviseOwn(Boolean.valueOf(defaultPermissionsManager.isReviseOwn(role)));\r\n    mp.setMarkAsRead(Boolean.valueOf(defaultPermissionsManager.isMarkAsRead(role)));\r\n    return mp;\r\n}"
}, {
	"Path": "org.sakaiproject.util.RequestFilter.detectToolPlacement",
	"Comment": "detect a tool placement from the url, and if found, setup the placement attribute and current tool session based on that id.",
	"Method": "ToolSession detectToolPlacement(Session s,HttpServletRequest req){\r\n    if (this.m_toolPlacement == false)\r\n        return null;\r\n    ToolSession toolSession = null;\r\n    String placementId = (String) req.getParameter(Tool.PLACEMENT_ID);\r\n    if (placementId != null) {\r\n        toolSession = s.getToolSession(placementId);\r\n        req.setAttribute(Tool.TOOL_SESSION, toolSession);\r\n        sessionManager.setCurrentToolSession(toolSession);\r\n        req.setAttribute(Tool.PLACEMENT_ID, placementId);\r\n    }\r\n    return toolSession;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.NoSecurity.unlock",
	"Comment": "can the user in the security context unlock the lock for use with this resource?",
	"Method": "boolean unlock(String lock,String resource,boolean unlock,User user,String lock,String resource,boolean unlock,String userId,String lock,String resource){\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"unlock() true user: \" + userId + \" lock: \" + lock + \" resource: \" + resource);\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseUsageSession.setBrowserId",
	"Comment": "set the browser id for this session, decoded from the user agent string.",
	"Method": "void setBrowserId(String agent){\r\n    if (agent == null) {\r\n        m_browserId = UNKNOWN;\r\n    } else if (agent.indexOf(\"Netscape\") >= 0 && agent.indexOf(\"Mac\") >= 0) {\r\n        m_browserId = MAC_NN;\r\n    } else if (agent.indexOf(\"Netscape\") >= 0 && agent.indexOf(\"Windows\") >= 0) {\r\n        m_browserId = WIN_NN;\r\n    } else if (agent.indexOf(\"MSIE\") >= 0 && agent.indexOf(\"Mac\") >= 0) {\r\n        m_browserId = MAC_IE;\r\n    } else if (agent.indexOf(\"MSIE\") >= 0 && agent.indexOf(\"Windows\") >= 0) {\r\n        m_browserId = WIN_IE;\r\n    } else if (agent.indexOf(\"Camino\") >= 0 && agent.indexOf(\"Macintosh\") >= 0) {\r\n        m_browserId = MAC_CM;\r\n    } else if (agent.startsWith(\"Mozilla\") && agent.indexOf(\"Windows\") >= 0) {\r\n        m_browserId = WIN_MZ;\r\n    } else if (agent.startsWith(\"Mozilla\") && agent.indexOf(\"Macintosh\") >= 0) {\r\n        m_browserId = MAC_MZ;\r\n    } else if (agent.startsWith(\"Mozilla\") && agent.indexOf(\"Linux\") >= 0) {\r\n        m_browserId = LIN_MZ;\r\n    } else if (agent.startsWith(\"Mozilla\") && agent.indexOf(\"Android\") >= 0) {\r\n        m_browserId = LIN_MZ;\r\n    } else if (agent.startsWith(\"Mozilla\") && agent.indexOf(\"iPad\") >= 0) {\r\n        m_browserId = IOS_MZ;\r\n    } else if (agent.startsWith(\"Mozilla\") && agent.indexOf(\"iPhone\") >= 0) {\r\n        m_browserId = IOS_MZ;\r\n    } else {\r\n        m_browserId = UNKNOWN;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getIconClass",
	"Comment": "helper to determine the icon class to use depending on the assignment external source",
	"Method": "String getIconClass(Assignment assignment){\r\n    final String externalAppName = assignment.getExternalAppName();\r\n    String iconClass = getDefaultIconClass();\r\n    if (StringUtils.equals(externalAppName, this.toolManager.getLocalizedToolProperty(\"sakai.assignment\", \"title\"))) {\r\n        iconClass = getAssignmentsIconClass();\r\n    } else if (StringUtils.equals(externalAppName, this.toolManager.getLocalizedToolProperty(\"sakai.samigo\", \"title\"))) {\r\n        iconClass = getSamigoIconClass();\r\n    } else if (StringUtils.equals(externalAppName, \"Lesson Builder\")) {\r\n        iconClass = getLessonBuilderIconClass();\r\n    }\r\n    return iconClass;\r\n}"
}, {
	"Path": "org.sakaiproject.component.cover.ServerConfigurationService.getToolCategoriesAsMap",
	"Comment": "access the map of tool categories to tool ids for this site type",
	"Method": "Map<String, List<String>> getToolCategoriesAsMap(String category){\r\n    org.sakaiproject.component.api.ServerConfigurationService service = getInstance();\r\n    if (service == null)\r\n        return null;\r\n    return service.getToolCategoriesAsMap(category);\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.doubleAt",
	"Comment": "returns a double precision floating point number reconstructed\t from eight bytes at a specific",
	"Method": "double doubleAt(int pos){\r\n    return Double.longBitsToDouble(longAt(pos));\r\n}"
}, {
	"Path": "org.sakaiproject.util.Validator.escapeResourceName",
	"Comment": "return a string based on id that is valid according to resource name validity rules.",
	"Method": "String escapeResourceName(String id){\r\n    if (id == null)\r\n        return \"\";\r\n    id = id.trim();\r\n    try {\r\n        StringBuilder buf = new StringBuilder();\r\n        for (int i = 0; i < id.length(); i++) {\r\n            char c = id.charAt(i);\r\n            if (MAP_TO_A.indexOf(c) >= 0) {\r\n                buf.append('a');\r\n            } else if (MAP_TO_E.indexOf(c) >= 0) {\r\n                buf.append('e');\r\n            } else if (MAP_TO_I.indexOf(c) >= 0) {\r\n                buf.append('i');\r\n            } else if (MAP_TO_O.indexOf(c) >= 0) {\r\n                buf.append('o');\r\n            } else if (MAP_TO_U.indexOf(c) >= 0) {\r\n                buf.append('u');\r\n            } else if (MAP_TO_Y.indexOf(c) >= 0) {\r\n                buf.append('y');\r\n            } else if (MAP_TO_N.indexOf(c) >= 0) {\r\n                buf.append('n');\r\n            } else if (MAP_TO_B.indexOf(c) >= 0) {\r\n                buf.append('b');\r\n            } else if (MAP_TO_C.indexOf(c) >= 0) {\r\n                buf.append('c');\r\n            } else if (MAP_TO_L.indexOf(c) >= 0) {\r\n                buf.append('l');\r\n            } else if (MAP_TO_X.indexOf(c) >= 0) {\r\n                buf.append('x');\r\n            } else if (c < '\\040') {\r\n                buf.append('_');\r\n            } else if (INVALID_CHARS_IN_RESOURCE_ID.indexOf(c) >= 0 || ESCAPE_CHARS_IN_RESOURCE_ID.indexOf(c) >= 0) {\r\n                buf.append('_');\r\n            } else {\r\n                buf.append(c);\r\n            }\r\n        }\r\n        String rv = buf.toString();\r\n        return rv;\r\n    } catch (Exception e) {\r\n        log.warn(\"Validator.escapeResourceName: \", e);\r\n        return \"\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.cc.PrintHandler.fixupInlineReferences",
	"Comment": "fix external references in an htmlstring to point to the correct location",
	"Method": "String fixupInlineReferences(String htmlString){\r\n    if (htmlString.startsWith(\"<!--fixups:\")) {\r\n        int fixend = htmlString.indexOf(\"-->\");\r\n        String fixString = htmlString.substring(11, fixend);\r\n        htmlString = htmlString.substring(fixend + 3);\r\n        String[] fixups = fixString.split(\",\");\r\n        for (int i = (fixups.length - 1); i >= 0; i--) {\r\n            String fixup = fixups[i];\r\n            try {\r\n                int offset = Integer.parseInt(fixup);\r\n                htmlString = htmlString.substring(0, offset) + baseUrl + htmlString.substring(offset + 3);\r\n            } catch (Exception e) {\r\n                log.info(\"exception \" + e);\r\n            }\r\n        }\r\n    } else {\r\n        org.jsoup.nodes.Document doc = Jsoup.parseBodyFragment(htmlString);\r\n        org.jsoup.select.Elements hrefs = doc.select(\"[href]\");\r\n        org.jsoup.select.Elements srcs = doc.select(\"[src]\");\r\n        log.debug(\"BaseURL is: {}\", baseUrl);\r\n        for (org.jsoup.nodes.Element element : srcs) {\r\n            String src = element.attr(\"src\");\r\n            if (src != null && !src.startsWith(\"http\")) {\r\n                for (Map.Entry<String, String> entry : fileNames.entrySet()) {\r\n                    if (entry.getKey() != null && entry.getValue() != null && entry.getValue().contains(src)) {\r\n                        log.debug(String.format(\"Updating tag %s: <%s> to <%s>\", element.tagName(), src, baseUrl + src));\r\n                        element.attr(\"src\", baseUrl + entry.getValue());\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (org.jsoup.nodes.Element element : hrefs) {\r\n            String href = element.attr(\"href\");\r\n            if (href != null && !href.startsWith(\"http\")) {\r\n                for (Map.Entry<String, String> entry : fileNames.entrySet()) {\r\n                    if (entry.getKey() != null && entry.getValue() != null && entry.getValue().contains(href)) {\r\n                        log.debug(String.format(\"Updating a: <%s> to <%s> (%s)\", href, baseUrl + href, element.text()));\r\n                        element.attr(\"href\", baseUrl + entry.getValue());\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        htmlString = doc.body().html();\r\n    }\r\n    return htmlString;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumStatisticsBean.convertNameToAnonIdAndSort",
	"Comment": "replace the name for each membership item with the anonid, then sort. sorting by default uses the name attribute",
	"Method": "List<MembershipItem> convertNameToAnonIdAndSort(Map<String, MembershipItem> memberMap){\r\n    Map<String, String> userIdToAnonIdMap = anonymousManager.getUserIdAnonIdMap(toolManager.getCurrentPlacement().getContext());\r\n    List<MembershipItem> list = new ArrayList();\r\n    for (MembershipItem item : memberMap.values()) {\r\n        User u = item.getUser();\r\n        if (u != null) {\r\n            String anonId = userIdToAnonIdMap.get(u.getId());\r\n            if (anonId != null) {\r\n                item.setName(anonId);\r\n                list.add(item);\r\n            }\r\n        }\r\n    }\r\n    Collections.sort(list);\r\n    return list;\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.tool.forms.PopupForm.getTemplateStream",
	"Comment": "if a template has been provided, return a stream for it.on update, this can be empty.",
	"Method": "Optional<TemplateStream> getTemplateStream(){\r\n    try {\r\n        if (templateItem.isPresent() && templateItem.get().getSize() > 0) {\r\n            return Optional.of(new TemplateStream(templateItem.get().getInputStream(), templateItem.get().getSize()));\r\n        }\r\n    } catch (IOException e) {\r\n        log.error(\"IOException while fetching template stream\", e);\r\n    }\r\n    return Optional.empty();\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.producers.ShowPageProducer.createTwitterDialog",
	"Comment": "get the twitter widget hashtag and other settings from the user.",
	"Method": "void createTwitterDialog(UIContainer tofill,SimplePage currentPage){\r\n    UIOutput.make(tofill, \"add-twitter-dialog\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.twitter\")));\r\n    UIForm form = UIForm.make(tofill, \"add-twitter-form\");\r\n    makeCsrf(form, \"csrf13\");\r\n    UIInput.make(form, \"twitterEditId\", \"#{simplePageBean.itemId}\");\r\n    UIInput.make(form, \"twitter-addBefore\", \"#{simplePageBean.addBefore}\");\r\n    UIInput.make(form, \"twitter-username\", \"#{simplePageBean.twitterUsername}\");\r\n    UIOutput.make(form, \"twitter-username-label\", messageLocator.getMessage(\"simplepage.twitter-username\"));\r\n    UIInput.make(form, \"widget-height\", \"#{simplePageBean.twitterWidgetHeight}\");\r\n    UIOutput.make(form, \"height-label\", messageLocator.getMessage(\"simplepage.twitter.height_label\"));\r\n    String[] options = { \"5\", \"10\", \"25\", \"50\", \"100\", \"1000\" };\r\n    String[] labels = { \"5\", \"10\", \"25\", \"50\", \"100\", \"1000\" };\r\n    UIOutput.make(form, \"numberDropdownLabel\", messageLocator.getMessage(\"simplepage.number-dropdown-label\"));\r\n    UISelect.make(form, \"numberDropdown\", options, labels, \"#{simplePageBean.twitterDropDown}\", \"5\");\r\n    UICommand.make(form, \"twitter-add-item\", messageLocator.getMessage(\"simplepage.save_message\"), \"#{simplePageBean.addTwitterTimeline}\");\r\n    UICommand.make(form, \"twitter-cancel\", messageLocator.getMessage(\"simplepage.cancel\"), null);\r\n    UICommand.make(form, \"delete-twitter-item\", messageLocator.getMessage(\"simplepage.delete\"), \"#{simplePageBean.deleteItem}\");\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.PodcastServiceImpl.getPodcastsFolderRef",
	"Comment": "returns a reference to podcasts folder in resources to pass to\tpermissions page.",
	"Method": "String getPodcastsFolderRef(){\r\n    try {\r\n        ContentCollection podcastFolder = getContentCollection(getSiteId());\r\n        return podcastFolder.getReference();\r\n    } catch (Exception e) {\r\n        log.error(\"Exception thrown while attempting to retrieve podcast folder reference.\", e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.getCssForCurrentPage",
	"Comment": "first checks if a sheet has been explicitly set.then checks for a default\tat the site level.it then finally checks to see if there is a default on the\tsystem level.\tcaches lookups to prevent too many lookups in the database.",
	"Method": "ContentResource getCssForCurrentPage(){\r\n    ContentResource resource;\r\n    String collectionId = getCurrentPage().getCssSheet();\r\n    if (getCurrentPage().getCssSheet() != null) {\r\n        try {\r\n            ArrayList<ContentResource> resources = (ArrayList<ContentResource>) resourceCache.get(collectionId);\r\n            if (resources == null) {\r\n                resource = contentHostingService.getResource(collectionId);\r\n                resources = new ArrayList();\r\n                resources.add(resource);\r\n                resourceCache.put(collectionId, resources);\r\n            }\r\n            if (resources.size() > 0) {\r\n                return resources.get(0);\r\n            } else {\r\n                throw new Exception();\r\n            }\r\n        } catch (Exception ex) {\r\n            resourceCache.put(collectionId, new ArrayList());\r\n        }\r\n    }\r\n    collectionId = contentHostingService.getSiteCollection(getCurrentSiteId()) + \"LB-CSS/\" + ServerConfigurationService.getString(\"lessonbuilder.default.css\", \"default.css\");\r\n    try {\r\n        ArrayList<ContentResource> resources = (ArrayList<ContentResource>) resourceCache.get(collectionId);\r\n        if (resources == null) {\r\n            resource = contentHostingService.getResource(collectionId);\r\n            resources = new ArrayList();\r\n            resources.add(resource);\r\n            resourceCache.put(collectionId, resources);\r\n        }\r\n        if (resources.size() > 0) {\r\n            return resources.get(0);\r\n        }\r\n    } catch (Exception ignore) {\r\n        resourceCache.put(collectionId, new ArrayList());\r\n    }\r\n    collectionId = \"/public/LB-CSS/\" + ServerConfigurationService.getString(\"lessonbuilder.default.css\", \"default.css\");\r\n    try {\r\n        ArrayList<ContentResource> resources = (ArrayList<ContentResource>) resourceCache.get(collectionId);\r\n        if (resources == null) {\r\n            resource = contentHostingService.getResource(collectionId);\r\n            resources = new ArrayList();\r\n            resources.add(resource);\r\n            resourceCache.put(collectionId, resources);\r\n        }\r\n        if (resources.size() > 0) {\r\n            return resources.get(0);\r\n        }\r\n    } catch (Exception ignore) {\r\n        resourceCache.put(collectionId, new ArrayList());\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.refresh",
	"Comment": "get a new value for this key whose value has already expired in the cache.",
	"Method": "Object refresh(Object key,Object oldValue,Event event){\r\n    Object rv = null;\r\n    Reference ref = m_entityManager.newReference((String) key);\r\n    String id = ref.getId();\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"refresh(): key \" + key + \" id : \" + ref.getId());\r\n    boolean collectionHint = id.endsWith(Entity.SEPARATOR);\r\n    if (collectionHint) {\r\n        rv = m_storage.getCollection(id);\r\n    } else {\r\n        try {\r\n            rv = m_storage.getResource(id);\r\n        } catch (TypeException e) {\r\n            log.error(\"Type Exception\", e);\r\n        }\r\n    }\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ComposeLogicImpl.setIgnoreRoles",
	"Comment": "inject method for setting any roles that should be ignored.",
	"Method": "void setIgnoreRoles(String ignoreRoles){\r\n    if (ignoreRoles != null) {\r\n        this.ignoreRoles.clear();\r\n        String[] roles = StringUtils.split(ignoreRoles, \",\");\r\n        for (String role : roles) {\r\n            this.ignoreRoles.add(role.trim());\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.cover.ContentHostingService.isContentHostingHandlersEnabled",
	"Comment": "access flag indicating whether contenthostinghandlers are enabled in this content hosting service.",
	"Method": "boolean isContentHostingHandlersEnabled(){\r\n    org.sakaiproject.content.api.ContentHostingService service = getInstance();\r\n    if (service == null)\r\n        return false;\r\n    return service.isContentHostingHandlersEnabled();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.BasicPodfeedService.populatePodcastArray",
	"Comment": "this pulls the podcasts from resourses and stuffs it in a list to be\tadded to the feed",
	"Method": "List populatePodcastArray(String siteId){\r\n    List podEntries = null;\r\n    List entries = new ArrayList();\r\n    try {\r\n        enablePodfeedSecurityAdvisor();\r\n        if (podcastService.isPodcastFolderHidden(siteId)) {\r\n            return entries;\r\n        } else {\r\n            podEntries = podcastService.getPodcasts(siteId);\r\n            securityService.popAdvisor();\r\n            podEntries = podcastService.filterPodcasts(podEntries, siteId);\r\n        }\r\n    } catch (PermissionException e) {\r\n        log.error(\"PermissionException getting podcasts in order to generate podfeed for site: \" + siteId + \". \" + e.getMessage(), e);\r\n        throw new PodcastException(e);\r\n    } catch (Exception e) {\r\n        log.info(e.getMessage() + \"for site: \" + siteId, e);\r\n        throw new PodcastException(e);\r\n    } finally {\r\n        securityService.popAdvisor();\r\n    }\r\n    if (podEntries != null) {\r\n        Iterator podcastIter = podEntries.iterator();\r\n        while (podcastIter.hasNext()) {\r\n            ContentResource podcastResource = (ContentResource) podcastIter.next();\r\n            ResourceProperties podcastProperties = podcastResource.getProperties();\r\n            Date publishDate = null;\r\n            Date compareDate = null;\r\n            try {\r\n                if (podcastResource.getReleaseDate() != null) {\r\n                    compareDate = new Date(podcastResource.getReleaseDate().getTime());\r\n                    publishDate = podcastService.getGMTdate(podcastResource.getReleaseDate().getTime());\r\n                } else {\r\n                    compareDate = new Date(podcastProperties.getTimeProperty(PodcastService.DISPLAY_DATE).getTime());\r\n                    publishDate = podcastService.getGMTdate(podcastProperties.getTimeProperty(PodcastService.DISPLAY_DATE).getTime());\r\n                }\r\n            } catch (Exception e) {\r\n                log.warn(e.getMessage() + \" generating podfeed getting DISPLAY_DATE for entry for site: \" + siteId + \"while building feed. SKIPPING... \" + e.getMessage(), e);\r\n            }\r\n            if (publishDate != null && !hiddenInUI(podcastResource, compareDate)) {\r\n                try {\r\n                    Map podcastMap = new HashMap();\r\n                    podcastMap.put(\"date\", publishDate);\r\n                    podcastMap.put(\"title\", podcastProperties.getPropertyFormatted(ResourceProperties.PROP_DISPLAY_NAME));\r\n                    enablePodfeedSecurityAdvisor();\r\n                    String fileUrl = podcastService.getPodcastFileURL(podcastResource.getId());\r\n                    podcastMap.put(\"guid\", fileUrl);\r\n                    final String podcastFolderId = podcastService.retrievePodcastFolderId(siteId);\r\n                    securityService.popAdvisor();\r\n                    if (!podcastService.isPublic(podcastFolderId)) {\r\n                        fileUrl = convertToDavUrl(fileUrl);\r\n                    }\r\n                    podcastMap.put(\"url\", fileUrl);\r\n                    podcastMap.put(\"description\", podcastProperties.getPropertyFormatted(ResourceProperties.PROP_DESCRIPTION));\r\n                    podcastMap.put(\"author\", podcastProperties.getPropertyFormatted(ResourceProperties.PROP_CREATOR));\r\n                    podcastMap.put(\"len\", Long.parseLong(podcastProperties.getProperty(ResourceProperties.PROP_CONTENT_LENGTH)));\r\n                    podcastMap.put(\"type\", podcastProperties.getProperty(ResourceProperties.PROP_CONTENT_TYPE));\r\n                    entries.add(addPodcast(podcastMap));\r\n                } catch (PermissionException e) {\r\n                    log.error(\"PermissionException generating podfeed while adding entry for site: \" + siteId + \". SKIPPING... \" + e.getMessage(), e);\r\n                } catch (IdUnusedException e) {\r\n                    log.warn(\"IdUnusedException generating podfeed while adding entry for site: \" + siteId + \".  SKIPPING... \" + e.getMessage(), e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    securityService.popAdvisor();\r\n    return entries;\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.ToolConfigurationService.loadToolOrder",
	"Comment": "load this single file as a registration file, loading tools and locks.",
	"Method": "void loadToolOrder(InputStream in){\r\n    Document doc = Xml.readDocumentFromStream(in);\r\n    Element root = doc.getDocumentElement();\r\n    if (!root.getTagName().equals(\"toolOrder\")) {\r\n        log.info(\"loadToolOrder: invalid root element (expecting \\\"toolOrder\\\"): \" + root.getTagName());\r\n        return;\r\n    }\r\n    NodeList rootNodes = root.getChildNodes();\r\n    final int rootNodesLength = rootNodes.getLength();\r\n    for (int i = 0; i < rootNodesLength; i++) {\r\n        Node rootNode = rootNodes.item(i);\r\n        if (rootNode.getNodeType() != Node.ELEMENT_NODE)\r\n            continue;\r\n        Element rootElement = (Element) rootNode;\r\n        if (rootElement.getTagName().equals(\"category\")) {\r\n            String name = StringUtils.trimToNull(rootElement.getAttribute(\"name\"));\r\n            if (name != null) {\r\n                List<String> order = m_toolOrders.get(name);\r\n                if (order == null) {\r\n                    order = new Vector();\r\n                    m_toolOrders.put(name, order);\r\n                    List<String> required = new Vector();\r\n                    m_toolsRequired.put(name, required);\r\n                    List<String> defaultTools = new Vector();\r\n                    m_defaultTools.put(name, defaultTools);\r\n                    List<String> toolCategories = new Vector();\r\n                    m_toolCategoriesList.put(name, toolCategories);\r\n                    Map<String, List<String>> toolCategoryMappings = new HashMap();\r\n                    m_toolCategoriesMap.put(name, toolCategoryMappings);\r\n                    Map<String, String> toolToCategoryMap = new HashMap();\r\n                    m_toolToToolCategoriesMap.put(name, toolToCategoryMap);\r\n                    NodeList nodes = rootElement.getChildNodes();\r\n                    final int nodesLength = nodes.getLength();\r\n                    for (int c = 0; c < nodesLength; c++) {\r\n                        Node node = nodes.item(c);\r\n                        if (node.getNodeType() != Node.ELEMENT_NODE)\r\n                            continue;\r\n                        Element element = (Element) node;\r\n                        if (element.getTagName().equals(\"tool\")) {\r\n                            processTool(element, order, required, defaultTools);\r\n                        } else if (element.getTagName().equals(\"toolCategory\")) {\r\n                            processCategory(element, order, required, defaultTools, toolCategories, toolCategoryMappings, toolToCategoryMap);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.impl.EntityBrokerManagerImpl.parseReference",
	"Comment": "parses an entity reference into the appropriate reference form",
	"Method": "EntityReference parseReference(String reference){\r\n    String prefix = EntityReference.getPrefix(reference);\r\n    EntityReference ref = null;\r\n    if (entityProviderManager.getProviderByPrefix(prefix) != null) {\r\n        ReferenceParseable provider = entityProviderManager.getProviderByPrefixAndCapability(prefix, ReferenceParseable.class);\r\n        if (provider == null) {\r\n            ref = new EntityReference(reference);\r\n        } else {\r\n            EntityReference exemplar = provider.getParsedExemplar();\r\n            if (exemplar == null) {\r\n                ref = new EntityReference(reference);\r\n            } else {\r\n                if (exemplar.getClass() == EntityReference.class) {\r\n                    ref = new EntityReference(reference);\r\n                } else {\r\n                    try {\r\n                        Constructor<? extends Object> m = exemplar.getClass().getConstructor(String.class);\r\n                        ref = (EntityReference) m.newInstance(reference);\r\n                    } catch (SecurityException e) {\r\n                        throw new RuntimeException(\"Failed to invoke a constructor which takes a single string \" + \"(reference=\" + reference + \") for class: \" + exemplar.getClass(), e);\r\n                    } catch (IllegalArgumentException e) {\r\n                        throw new RuntimeException(\"Failed to invoke a constructor which takes a single string \" + \"(reference=\" + reference + \") for class: \" + exemplar.getClass(), e);\r\n                    } catch (NoSuchMethodException e) {\r\n                        throw new RuntimeException(\"Failed to invoke a constructor which takes a single string \" + \"(reference=\" + reference + \") for class: \" + exemplar.getClass(), e);\r\n                    } catch (InstantiationException e) {\r\n                        throw new RuntimeException(\"Failed to invoke a constructor which takes a single string \" + \"(reference=\" + reference + \") for class: \" + exemplar.getClass(), e);\r\n                    } catch (IllegalAccessException e) {\r\n                        throw new RuntimeException(\"Failed to invoke a constructor which takes a single string \" + \"(reference=\" + reference + \") for class: \" + exemplar.getClass(), e);\r\n                    } catch (InvocationTargetException e) {\r\n                        throw new RuntimeException(\"Failed to invoke a constructor which takes a single string \" + \"(reference=\" + reference + \") for class: \" + exemplar.getClass(), e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ref;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.processSetTriggerProperties",
	"Comment": "validates and sets the properties for a trigger once the property configuration ui has been completed.",
	"Method": "String processSetTriggerProperties(){\r\n    Scheduler scheduler = schedulerManager.getScheduler();\r\n    if (scheduler == null) {\r\n        log.error(\"Scheduler is down!\");\r\n        return \"error\";\r\n    }\r\n    configurableJobErrorMessages = new LinkedList<String>();\r\n    try {\r\n        final JobDetail jd = selectedJobDetailWrapper.getJobDetail();\r\n        final ConfigurableJobBeanWrapper configurableJob = getConfigurableJobBeanWrapper();\r\n        final TriggerWrapper triggerWrapper = getTriggerWrapper();\r\n        final Trigger trigger = triggerWrapper.getTrigger();\r\n        final List<ConfigurablePropertyWrapper> properties = getConfigurableProperties();\r\n        final ResourceBundle jobRb = ResourceBundle.getBundle(configurableJob.getResourceBundleBase());\r\n        final ConfigurableJobPropertyValidator validator = configurableJob.getConfigurableJobPropertyValidator();\r\n        final JobDataMap dataMap = trigger.getJobDataMap();\r\n        for (ConfigurablePropertyWrapper wrapper : properties) {\r\n            final ConfigurableJobProperty property = wrapper.getJobProperty();\r\n            final String label = property.getLabelResourceKey(), value = wrapper.getValue();\r\n            if (property.isRequired() && (value == null || value.trim().length() == 0)) {\r\n                String propName = (jobRb != null) ? jobRb.getString(label) : label, msg = null;\r\n                if (propName == null)\r\n                    propName = label;\r\n                try {\r\n                    msg = rb.getString(\"properties_required\");\r\n                } catch (MissingResourceException mre) {\r\n                    msg = \"&lt;Missing resource string: properties_required&gt;\";\r\n                }\r\n                configurableJobErrorMessages.add(msg + \": \" + propName);\r\n            } else {\r\n                try {\r\n                    validator.assertValid(label, value);\r\n                } catch (ConfigurableJobPropertyValidationException cjpve) {\r\n                    String errorKey = cjpve.getMessage(), errorMessage = jobRb.getString(errorKey);\r\n                    configurableJobErrorMessages.add((errorMessage == null) ? errorKey : errorMessage);\r\n                    continue;\r\n                }\r\n                dataMap.put(property.getLabelResourceKey(), value);\r\n            }\r\n        }\r\n        if (!configurableJobErrorMessages.isEmpty()) {\r\n            return null;\r\n        }\r\n        scheduleTrigger(triggerWrapper);\r\n    } catch (Exception e) {\r\n        log.error(\"Failed to create job.\", e);\r\n        return \"error\";\r\n    }\r\n    return \"edit_triggers\";\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder3Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder3Sql(){\r\n    return \"SAKAI_SITE.TITLE ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonBuilderEntityProducer.translateFormattedData",
	"Comment": "put request will send a zip file for cc input. return the input stream so we can load it",
	"Method": "Object translateFormattedData(EntityReference ref,String format,InputStream input,Map<String, Object> params){\r\n    return input;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.ccexport.CCExport.relFixup",
	"Comment": "fixups will get a list of offsets where fixups were done, for loader to reconstitute html",
	"Method": "String relFixup(String s,Resource resource,StringBuilder fixups,String relFixup,String s,Resource resource){\r\n    return relFixup(s, resource, null);\r\n}"
}, {
	"Path": "org.sakaiproject.util.UserNotificationPreferencesRegistrationImpl.getBundleLocation",
	"Comment": "get the fully qualified package of where the message bundle is located.",
	"Method": "String getBundleLocation(){\r\n    return bundleLocation;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlHSql.getNextSequenceSql",
	"Comment": "returns the sql statement which returns the next number in a sequence.",
	"Method": "String getNextSequenceSql(String table){\r\n    return \"SELECT NEXT VALUE FOR \" + table + \" FROM DUAL\";\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.PodcastPermissionsServiceImpl.canAccessViaGroups",
	"Comment": "determine if current user can access this group restricted entity",
	"Method": "boolean canAccessViaGroups(Collection groups,String siteId){\r\n    final String userId = sessionManager.getCurrentSessionUserId();\r\n    Site site = null;\r\n    try {\r\n        site = siteService.getSite(siteId);\r\n    } catch (IdUnusedException e) {\r\n        return false;\r\n    }\r\n    for (Iterator groupIter = groups.iterator(); groupIter.hasNext(); ) {\r\n        final String currentGroupId = (String) groupIter.next();\r\n        final Group currentGroup = site.getGroup(currentGroupId);\r\n        if (currentGroup != null) {\r\n            final Member member = currentGroup.getMember(userId);\r\n            if (member != null && member.getUserId().equals(userId)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder15Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder15Sql(){\r\n    return \"SAKAI_SITE.MODIFIEDON ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.util.BasicAuth.requestedBasicAuth",
	"Comment": "this method looks at the returnurl and if there is a request parameter in\tthe url requesting basic authentication, this method returns true",
	"Method": "boolean requestedBasicAuth(HttpServletRequest request){\r\n    String queryString = request.getQueryString();\r\n    if (queryString == null) {\r\n        return false;\r\n    } else {\r\n        boolean ret = (queryString.indexOf(BASIC_AUTH_LOGIN_REQUEST) != -1);\r\n        return ret;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.PrivateMessagesTool.setPrevNextMessageDetails",
	"Comment": "set previous and next message details with each privatemessagedecoratedbean",
	"Method": "void setPrevNextMessageDetails(){\r\n    List tempMsgs = decoratedPvtMsgs;\r\n    for (int i = 0; i < tempMsgs.size(); i++) {\r\n        PrivateMessageDecoratedBean dmb = (PrivateMessageDecoratedBean) tempMsgs.get(i);\r\n        if (i == 0) {\r\n            dmb.setHasPre(false);\r\n            if (i == (tempMsgs.size() - 1)) {\r\n                dmb.setHasNext(false);\r\n            } else {\r\n                dmb.setHasNext(true);\r\n            }\r\n        } else if (i == (tempMsgs.size() - 1)) {\r\n            dmb.setHasPre(true);\r\n            dmb.setHasNext(false);\r\n        } else {\r\n            dmb.setHasNext(true);\r\n            dmb.setHasPre(true);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.HttpRESTUtils.parseURL",
	"Comment": "parses a url string into component pieces,unlike the java url class, this will work with partial urls",
	"Method": "URLData parseURL(String urlString){\r\n    return new URLData(urlString);\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getCollection",
	"Comment": "access the collection with this local resource id. the collection internal members and properties are accessible from the returned colelction object.",
	"Method": "ContentCollection getCollection(String id,ContentCollection getCollection,String id){\r\n    unlock(AUTH_RESOURCE_READ, id);\r\n    ContentCollection collection = findCollection(id);\r\n    if (collection == null)\r\n        throw new IdUnusedException(id);\r\n    return collection;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.getUrl",
	"Comment": "access the alternate url which can be used to access the entity.",
	"Method": "String getUrl(String id,String getUrl,String id,String rootProperty,String getUrl,boolean relative,String getUrl,String getUrl,String rootProperty,String getUrl,String getUrl,boolean relative,String getUrl,boolean relative,String rootProperty,String getUrl,String rootProperty){\r\n    return m_serverConfigurationService.getAccessUrl() + getAlternateReferenceRoot(id, rootProperty) + m_relativeAccessPoint + Validator.escapeUrl(convertIdToUserEid(id));\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroup.isActiveEdit",
	"Comment": "check to see if the azgroup is still active, or has already been closed.",
	"Method": "boolean isActiveEdit(){\r\n    return m_active;\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.impl.BaseMailArchiveService.newResourceEdit",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Edit newResourceEdit(Entity container,String id,Object[] others,Edit newResourceEdit,Entity container,Element element,Edit newResourceEdit,Entity container,Entity other){\r\n    BaseMailArchiveMessageEdit rv = new BaseMailArchiveMessageEdit((MessageChannel) container, (Message) other);\r\n    rv.activate();\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.PermissionManagerImpl.getAreaMessagePermissionForRole",
	"Comment": "get the area message permission for a given role.this provides the permissionsthat the role currently has.",
	"Method": "MessagePermissions getAreaMessagePermissionForRole(String role,String typeId){\r\n    MessagePermissions permissions = getAreaMessagePermissionByRoleAndType(role, typeId, false);\r\n    MessagePermissions mp = new MessagePermissionsImpl();\r\n    if (permissions == null) {\r\n        return getDefaultAreaMessagePermissionForRole(role, typeId);\r\n    } else {\r\n        mp.setDeleteAny(permissions.getDeleteAny());\r\n        mp.setDeleteOwn(permissions.getDeleteOwn());\r\n        mp.setRead(permissions.getRead());\r\n        mp.setReadDrafts(permissions.getReadDrafts());\r\n        mp.setReviseAny(permissions.getReviseAny());\r\n        mp.setReviseOwn(permissions.getReviseOwn());\r\n        mp.setMarkAsRead(permissions.getMarkAsRead());\r\n    }\r\n    mp.setRole(role);\r\n    return mp;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf2.util.RendererUtil.getFormId",
	"Comment": "return the form id of the form containing the given component",
	"Method": "String getFormId(FacesContext context,UIComponent component){\r\n    while (component != null && !(component instanceof UIForm)) {\r\n        component = component.getParent();\r\n    }\r\n    if (component != null)\r\n        return ((UIForm) component).getId();\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.charAt",
	"Comment": "returns a character reconstructed from one or two bytes at a\t specific location.",
	"Method": "char charAt(int pos,char charAt,boolean useHighByte,int pos){\r\n    if (!between(pos, 0, (size - (useHighByte ? 2 : 1)))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    char ret;\r\n    if (useHighByte) {\r\n        ret = (char) shortAt(pos);\r\n    } else {\r\n        ret = (char) byteAt(pos);\r\n    }\r\n    return ret;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.renderer.InputRichTextRenderer.writeAdditionalConfig",
	"Comment": "subclasses can override to provide additonal configuration such as add buttons, etc",
	"Method": "void writeAdditionalConfig(FacesContext context,UIComponent component,String configVar,String clientId,String toolbar,int widthPx,int heightPx,Locale locale,ResponseWriter writer){\r\n    writeAttachedFiles(context, component, configVar, writer, toolbar);\r\n    registerWithParent(component, configVar, clientId);\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDualSingleStorage.setSingleStorageSql",
	"Comment": "sets which bean containing database dependent code should be used\tdepending on the database vendor.",
	"Method": "void setSingleStorageSql(String vendor){\r\n    this.singleStorageSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.PodcastServiceImpl.checkPodcastFolder",
	"Comment": "tests whether the podcasts folder exists and create it if it does not",
	"Method": "boolean checkPodcastFolder(){\r\n    return (retrievePodcastFolderId(getSiteId()) != null);\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.util.RendererUtil.getFormId",
	"Comment": "return the form id of the form containing the given component",
	"Method": "String getFormId(FacesContext context,UIComponent component){\r\n    while (component != null && !(component instanceof UIForm)) {\r\n        component = component.getParent();\r\n    }\r\n    if (component != null)\r\n        return ((UIForm) component).getId();\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlOracle.getNextSequenceSql",
	"Comment": "returns the sql statement which returns the next number in a sequence.",
	"Method": "String getNextSequenceSql(String table){\r\n    return \"SELECT \" + table + \".NEXTVAL FROM DUAL\";\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.FormatHelper.decode",
	"Comment": "helper to decode a string and avoid the ridiculous exception that is never thrown",
	"Method": "String decode(String s){\r\n    if (StringUtils.isBlank(s)) {\r\n        return s;\r\n    }\r\n    try {\r\n        return URLDecoder.decode(s, \"UTF-8\");\r\n    } catch (final UnsupportedEncodingException e) {\r\n        throw new AssertionError(\"UTF-8 not supported\");\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.getConfigurableJobBeanWrapper",
	"Comment": "returns the configurablejobbeanwrapper currently the focus for editting properties either to create a jobor to schedule a trigger for a job.",
	"Method": "ConfigurableJobBeanWrapper getConfigurableJobBeanWrapper(){\r\n    return configurableJobBeanWrapper;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ConfigLogicImpl.isAppendRecipientList",
	"Comment": "retrieve the append recipient list option from the tool configuration",
	"Method": "boolean isAppendRecipientList(Properties props){\r\n    String appendrecipientlist = props.getProperty(ConfigParams.appendrecipientlist.name());\r\n    boolean appendRecipientList = parseConfigBoolean(appendrecipientlist);\r\n    return appendRecipientList;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.addForum",
	"Comment": "update an existing item, depending upon whether itemid is set",
	"Method": "String addForum(){\r\n    if (!itemOk(itemId))\r\n        return \"permission-failed\";\r\n    if (!canEditPage())\r\n        return \"permission-failed\";\r\n    if (!checkCsrf())\r\n        return \"permission-failed\";\r\n    if (selectedEntity == null) {\r\n        return \"failure\";\r\n    } else {\r\n        try {\r\n            LessonEntity selectedObject = forumEntity.getEntity(selectedEntity);\r\n            if (selectedObject == null) {\r\n                return \"failure\";\r\n            }\r\n            SimplePageItem i;\r\n            if (itemId != null && itemId != -1) {\r\n                i = findItem(itemId);\r\n                if (!i.getSakaiId().equals(selectedEntity)) {\r\n                    if (i.isPrerequisite()) {\r\n                        i.setPrerequisite(false);\r\n                        checkControlGroup(i, false);\r\n                        i.setSakaiId(selectedEntity);\r\n                        i.setName(selectedObject.getTitle());\r\n                        i.setPrerequisite(true);\r\n                        checkControlGroup(i, true);\r\n                    } else {\r\n                        i.setSakaiId(selectedEntity);\r\n                        i.setName(selectedObject.getTitle());\r\n                    }\r\n                    i.setDescription(\"\");\r\n                    update(i);\r\n                }\r\n            } else {\r\n                i = appendItem(selectedEntity, selectedObject.getTitle(), SimplePageItem.FORUM);\r\n                i.setDescription(\"\");\r\n                saveItem(i);\r\n            }\r\n            return \"success\";\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return \"failure\";\r\n        } finally {\r\n            selectedEntity = null;\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.StringUtil.different",
	"Comment": "compare two strings for differences, either may be null, ignore case if specified",
	"Method": "boolean different(String a,String b,boolean different,String a,String b,boolean ignoreCase,boolean different,String[] a,String[] b,boolean different,byte[] a,byte[] b){\r\n    if ((a == null) && (b == null))\r\n        return false;\r\n    if ((a == null) || (b == null))\r\n        return true;\r\n    if (a.length != b.length)\r\n        return true;\r\n    for (int i = 0; i < a.length; i++) {\r\n        if (a[i] != b[i])\r\n            return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.stats.AssignmentStatistics.calculateStatistics",
	"Comment": "calculates stats based on the calculated course grade values, excluding any empty grades",
	"Method": "DescriptiveStatistics calculateStatistics(){\r\n    final DescriptiveStatistics stats = new DescriptiveStatistics();\r\n    for (int i = 0; i < this.gradeInfo.size(); i++) {\r\n        final GbStudentGradeInfo studentGradeInfo = this.gradeInfo.get(i);\r\n        final Map<Long, GbGradeInfo> studentGrades = studentGradeInfo.getGrades();\r\n        final GbGradeInfo grade = studentGrades.get(this.assignmentId);\r\n        if (grade != null && grade.getGrade() != null) {\r\n            stats.addValue(Double.valueOf(grade.getGrade()));\r\n        }\r\n    }\r\n    return stats;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere4Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere4Sql(String getSitesWhere4Sql,PublishedFilter publishedFilter){\r\n    if (PublishedFilter.ALL == publishedFilter) {\r\n        return \"\";\r\n    }\r\n    String filterValue = PublishedFilter.PUBLISHED_ONLY == publishedFilter ? \"1 and \" : \"0 and \";\r\n    return \"SAKAI_SITE.PUBLISHED = \" + filterValue;\r\n}"
}, {
	"Path": "org.sakaiproject.util.EditorConfiguration.getCKEditorFileBrowser",
	"Comment": "get the file browser that should be used when picking a file in ckeditor.",
	"Method": "String getCKEditorFileBrowser(){\r\n    return ServerConfigurationService.getString(\"wysiwyg.editor.ckeditor.browser\", \"elfinder\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.processSetProperties",
	"Comment": "processes the properties which have been set during creation of a job.",
	"Method": "String processSetProperties(){\r\n    Scheduler scheduler = schedulerManager.getScheduler();\r\n    if (scheduler == null) {\r\n        log.error(\"Scheduler is down!\");\r\n        return \"error\";\r\n    }\r\n    configurableJobErrorMessages = new LinkedList<String>();\r\n    try {\r\n        JobDetail jd = getJobDetail();\r\n        JobBeanWrapper job = getSchedulerManager().getJobBeanWrapper(selectedClass);\r\n        final ConfigurableJobBeanWrapper configurableJob = getConfigurableJobBeanWrapper();\r\n        final List<ConfigurablePropertyWrapper> properties = getConfigurableProperties();\r\n        final ResourceBundle jobRb = ResourceBundle.getBundle(configurableJob.getResourceBundleBase());\r\n        final ConfigurableJobPropertyValidator validator = configurableJob.getConfigurableJobPropertyValidator();\r\n        if (jd != null) {\r\n            final JobDataMap dataMap = jd.getJobDataMap();\r\n            for (ConfigurablePropertyWrapper wrapper : properties) {\r\n                final ConfigurableJobProperty property = wrapper.getJobProperty();\r\n                final String label = property.getLabelResourceKey(), value = wrapper.getValue();\r\n                if (property.isRequired() && (value == null || value.trim().length() == 0)) {\r\n                    String propName = (jobRb != null) ? jobRb.getString(label) : label, msg = null;\r\n                    if (propName == null)\r\n                        propName = label;\r\n                    try {\r\n                        msg = rb.getString(\"properties_required\");\r\n                    } catch (MissingResourceException mre) {\r\n                        msg = \"&lt;Missing resource string: properties_required&gt;\";\r\n                    }\r\n                    configurableJobErrorMessages.add(msg + \": \" + propName);\r\n                } else {\r\n                    try {\r\n                        validator.assertValid(label, value);\r\n                    } catch (ConfigurableJobPropertyValidationException cjpve) {\r\n                        String errorKey = cjpve.getMessage(), errorMessage = jobRb.getString(errorKey);\r\n                        configurableJobErrorMessages.add((errorMessage == null) ? errorKey : errorMessage);\r\n                        continue;\r\n                    }\r\n                    dataMap.put(property.getLabelResourceKey(), value);\r\n                }\r\n            }\r\n            if (!configurableJobErrorMessages.isEmpty()) {\r\n                return null;\r\n            }\r\n        } else {\r\n            setJobDetail(createJobDetail(job));\r\n            return null;\r\n        }\r\n        scheduler.addJob(jd, false);\r\n        jobName = null;\r\n        jobDetail = null;\r\n        processRefreshJobs();\r\n        return \"jobs\";\r\n    } catch (Exception e) {\r\n        log.error(\"Failed to create job.\", e);\r\n        return \"error\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder5Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder5Sql(){\r\n    return \"SAKAI_SITE.TYPE ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.spring.ResourceFinder.getResources",
	"Comment": "resolves a list of paths into resources relative to environmental defaults or relative paths or the classloader",
	"Method": "Resource[] getResources(List<String> paths){\r\n    return makeResources(paths).toArray(new Resource[paths.size()]);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.servlet.DirectServlet.sendError",
	"Comment": "handles sending back servlet errors to the client,feel free to override this if you like to handle errors in a particular way",
	"Method": "void sendError(HttpServletResponse res,int code,String message){\r\n    try {\r\n        res.reset();\r\n        res.sendError(code, message);\r\n    } catch (Exception e) {\r\n        log.warn(\"Error sending http servlet error code ({}) and message ({}): {}\", code, message, e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.EntityHttpServletRequest.setParameters",
	"Comment": "set a large number of params at once,replaces existing params",
	"Method": "void setParameters(Map<String, String[]> params){\r\n    if (params != null && params.size() > 0) {\r\n        this.parameters.putAll(params);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.MyNonPortableSession.getAttribute",
	"Comment": "returns the object bound with the specified name in this session, or null if no object is bound under the name.",
	"Method": "Object getAttribute(String name){\r\n    return m_attributes.get(name);\r\n}"
}, {
	"Path": "org.sakaiproject.config.impl.StoredConfigService.learnConfig",
	"Comment": "creates a hibernateconfigitem for every item in the list and persists it for this node.",
	"Method": "void learnConfig(List<ConfigItem> items){\r\n    if (items == null) {\r\n        return;\r\n    }\r\n    int total = items.size();\r\n    int updated = 0;\r\n    int created = 0;\r\n    for (ConfigItem item : items) {\r\n        if (item == null) {\r\n            continue;\r\n        }\r\n        HibernateConfigItem hItem = null;\r\n        int rows = countByName(item.getName());\r\n        if (rows == 0) {\r\n            hItem = createHibernateConfigItem(item);\r\n            created++;\r\n        } else {\r\n            if (!serverConfigurationService.getBoolean(SAKAI_CONFIG_PROVIDE_ENABLE, SAKAI_CONFIG_PROVIDE_ENABLE_DEFAULT)) {\r\n                hItem = findByName(item.getName());\r\n                hItem = updateHibernateConfigItem(hItem, item);\r\n                if (hItem != null) {\r\n                    updated++;\r\n                }\r\n            }\r\n        }\r\n        saveOrUpdate(hItem);\r\n    }\r\n    log.info(\"processed {} config items, updated {} created {}\", total, updated, created);\r\n}"
}, {
	"Path": "org.sakaiproject.util.Web.escapeJsQuoted",
	"Comment": "return a string based on value that is safe to place into a javascript value that is in single quiotes.",
	"Method": "String escapeJsQuoted(String value){\r\n    return FormattedText.escapeJsQuoted(value);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podFeedBean.getErrorMessageString",
	"Comment": "sets the faces error message by pulling the message from the\tmessagebundle using the name passed in",
	"Method": "String getErrorMessageString(String key){\r\n    return rb.getString(key);\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.BasicConfigurationService.addProperties",
	"Comment": "internaladds a set of config items using the data from a set of properties",
	"Method": "void addProperties(Properties p,String source){\r\n    if (p != null) {\r\n        if (source == null || \"\".equals(source)) {\r\n            source = UNKNOWN;\r\n        }\r\n        log.info(\"Adding \" + p.size() + \" properties from \" + source);\r\n        for (Enumeration<Object> e = p.keys(); e.hasMoreElements(); ) {\r\n            String name = (String) e.nextElement();\r\n            String value = p.getProperty(name);\r\n            if (name != null && name.endsWith(SAKAI_SYSTEM_PROPERTY_SUFFIX) && name.length() > SAKAI_SYSTEM_PROPERTY_SUFFIX.length()) {\r\n                name = name.substring(0, name.length() - SAKAI_SYSTEM_PROPERTY_SUFFIX.length());\r\n                System.setProperty(name, value);\r\n                log.info(\"Promoted to system property: \" + name);\r\n                continue;\r\n            }\r\n            ConfigItemImpl ci = new ConfigItemImpl(name, value, source);\r\n            this.addConfigItem(ci, source);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.PasswordPolicyProviderDefaultImpl.isCharacterSetPresentInPassword",
	"Comment": "determine if the given character set is present in the given password string.",
	"Method": "int isCharacterSetPresentInPassword(char[] characterSet,String password){\r\n    for (int i = 0; i < password.length(); i++) {\r\n        if (Arrays.binarySearch(characterSet, password.charAt(i)) >= 0) {\r\n            return 1;\r\n        }\r\n    }\r\n    return 0;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.ContentServiceSqlDefault.getCollectionIdSql",
	"Comment": "returns the sql statement which retrieves the collection id from the specified table.",
	"Method": "String getCollectionIdSql(String table){\r\n    return \"select COLLECTION_ID from \" + table + \" where IN_COLLECTION = ?\";\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.rest.GradebookNgEntityProvider.updateAssignmentOrder",
	"Comment": "update the order of an assignment in the gradebook this is a per site setting.",
	"Method": "void updateAssignmentOrder(EntityReference ref,Map<String, Object> params){\r\n    final String siteId = (String) params.get(\"siteId\");\r\n    final long assignmentId = NumberUtils.toLong((String) params.get(\"assignmentId\"));\r\n    final int order = NumberUtils.toInt((String) params.get(\"order\"));\r\n    if (StringUtils.isBlank(siteId) || assignmentId == 0 || order < 0) {\r\n        throw new IllegalArgumentException(\"Request data was missing / invalid\");\r\n    }\r\n    checkValidSite(siteId);\r\n    checkInstructor(siteId);\r\n    this.businessService.updateAssignmentOrder(siteId, assignmentId, order);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.RendererUtil.getDefaultedAttribute",
	"Comment": "same as getattribute, but if not found, we return a default value.",
	"Method": "Object getDefaultedAttribute(FacesContext context,UIComponent component,String name,Object defaultValue){\r\n    Object o = getAttribute(context, component, name);\r\n    if (o == null)\r\n        o = defaultValue;\r\n    return o;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbFlatStorage.setSortField",
	"Comment": "set the sort field to be something perhaps other than the default of the id field.",
	"Method": "void setSortField(String sortField1,String sortField2){\r\n    m_resourceTableSortField1 = sortField1;\r\n    m_resourceTableSortField2 = sortField2;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.RSSPodfeedServlet.doPost",
	"Comment": "the dopost method of the servlet. \tthis method is called when a form has its tag value method equals to\tpost.",
	"Method": "void doPost(HttpServletRequest request,HttpServletResponse response){\r\n    doGet(request, response);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getGradesForStudent",
	"Comment": "get a map of grades for the given student. safe to call when logged in as a student.",
	"Method": "Map<Long, GbGradeInfo> getGradesForStudent(String studentUuid){\r\n    final String siteId = getCurrentSiteId();\r\n    final Gradebook gradebook = getGradebook(siteId);\r\n    final List<Assignment> assignments = getGradebookAssignmentsForStudent(studentUuid);\r\n    final Map<Long, GbGradeInfo> rval = new LinkedHashMap();\r\n    GbRole role;\r\n    try {\r\n        role = this.getUserRole(siteId);\r\n    } catch (final GbAccessDeniedException e) {\r\n        log.warn(\"GbAccessDeniedException trying to getGradesForStudent\", e);\r\n        return rval;\r\n    }\r\n    if (role == GbRole.STUDENT) {\r\n        final boolean released = gradebook.isAssignmentsDisplayed();\r\n        if (!released) {\r\n            return rval;\r\n        }\r\n    }\r\n    for (final Assignment assignment : assignments) {\r\n        final GradeDefinition def = this.gradebookService.getGradeDefinitionForStudentForItem(gradebook.getUid(), assignment.getId(), studentUuid);\r\n        rval.put(assignment.getId(), new GbGradeInfo(def));\r\n    }\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.api.StoreableBreakdown.makeStash",
	"Comment": "adds stash data to this storablestash data is not serialized",
	"Method": "String makeStash(String sessionId,String attributeKey){\r\n    this.sessionId = sessionId;\r\n    this.attributeKey = attributeKey;\r\n    return makeStashKey(sessionId, attributeKey);\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDualSingleStorage.getAllResourcesWhere",
	"Comment": "get all resources where the given field matches the given value.",
	"Method": "List getAllResourcesWhere(String field,String value,List getAllResourcesWhere,String selectBy,String selectByValue,String orderBy,int first,int pageSize){\r\n    String sql = singleStorageSql.getXmlWhereLimitSql(selectBy, orderBy, m_resourceTableName, first, pageSize);\r\n    Object[] fields = new Object[1];\r\n    fields[0] = selectByValue;\r\n    return loadResources(sql, fields);\r\n}"
}, {
	"Path": "org.sakaiproject.util.MultiSingleStorageSqlDefault.getXmlWhereSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table.",
	"Method": "String getXmlWhereSql(String table,String where){\r\n    return \"select \" + storageFields + \" from \" + table + \" \" + where;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.isDisplayTopicDeleteOption",
	"Comment": "prevents users from trying to delete the topic they are currently creating",
	"Method": "boolean isDisplayTopicDeleteOption(){\r\n    if (selectedTopic == null) {\r\n        log.debug(\"selectedTopic is null in isDisplayTopicDeleteOption()\");\r\n        return false;\r\n    }\r\n    DiscussionTopic topic = selectedTopic.getTopic();\r\n    if (topic == null || topic.getId() == null)\r\n        return false;\r\n    Topic topicInDb = forumManager.getTopicById(topic.getId());\r\n    return topicInDb != null && selectedForum != null && uiPermissionsManager != null && uiPermissionsManager.isChangeSettings(topic, selectedForum.getForum());\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.updateUngradedItems",
	"Comment": "updates ungraded items in the given assignment for students within a particular group and with the given grade",
	"Method": "boolean updateUngradedItems(long assignmentId,double grade,boolean updateUngradedItems,long assignmentId,double grade,GbGroup group){\r\n    final String siteId = getCurrentSiteId();\r\n    final Gradebook gradebook = getGradebook(siteId);\r\n    final List<String> studentUuids = (group == null) ? this.getGradeableUsers() : this.getGradeableUsers(group);\r\n    final List<GradeDefinition> defs = this.gradebookService.getGradesForStudentsForItem(gradebook.getUid(), assignmentId, studentUuids);\r\n    for (final GradeDefinition def : defs) {\r\n        if (StringUtils.isNotBlank(def.getGrade())) {\r\n            studentUuids.remove(def.getStudentUid());\r\n        }\r\n    }\r\n    if (studentUuids.isEmpty()) {\r\n        log.debug(\"Setting default grade. No students are ungraded.\");\r\n    }\r\n    try {\r\n        for (final String studentUuid : studentUuids) {\r\n            log.debug(\"Setting default grade. Values of assignmentId: {}, studentUuid: {}, grade: {}\", assignmentId, studentUuid, grade);\r\n            this.gradebookService.saveGradeAndCommentForStudent(gradebook.getUid(), assignmentId, studentUuid, FormatHelper.formatGradeForDisplay(String.valueOf(grade)), null);\r\n        }\r\n        EventHelper.postUpdateUngradedEvent(gradebook, assignmentId, String.valueOf(grade), getUserRoleOrNone());\r\n        return true;\r\n    } catch (final Exception e) {\r\n        log.error(\"An error occurred updating the assignment\", e);\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.model.GbChartData.add",
	"Comment": "if label present then increment its count, otherwise add it",
	"Method": "void add(String label){\r\n    this.dataset.computeIfPresent(label, (k, v) -> v + 1);\r\n    this.dataset.computeIfAbsent(label, value -> 1);\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlMySql.getBooleanConstant",
	"Comment": "returns a databases representation of the specified java boolean value.",
	"Method": "String getBooleanConstant(boolean value){\r\n    return value ? \"true\" : \"false\";\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.getServerConfigurationService",
	"Comment": "returns the instance of the serverconfigurationservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "ServerConfigurationService getServerConfigurationService(){\r\n    return serverConfigurationService;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.importExport.CreateGradeItemStep.assignmentNameIsUnique",
	"Comment": "checks if an assignment is unique given a list of existing assignments",
	"Method": "boolean assignmentNameIsUnique(List<Assignment> assignments,String name,boolean assignmentNameIsUnique,Assignment newAssignment,Collection<Assignment> assignmentsToCreate){\r\n    boolean retVal = true;\r\n    for (final Assignment assignmentToCreate : assignmentsToCreate) {\r\n        if (!newAssignment.equals(assignmentToCreate) && StringUtils.equals(newAssignment.getName(), assignmentToCreate.getName())) {\r\n            retVal = false;\r\n            break;\r\n        }\r\n    }\r\n    return retVal;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.compileDFMessageCount",
	"Comment": "determines the number of unread messages for each site.\tfilters out messages user does not have read permission for.",
	"Method": "List compileDFMessageCount(List siteList){\r\n    if (compiledDFMessageCounts == null) {\r\n        compiledDFMessageCounts = new ArrayList();\r\n        final List roleList = getUserRoles(siteList);\r\n        final List<Object[]> nonMICounts = computeNonMICounts(siteList);\r\n        final List siteListMinusGrouped = new ArrayList();\r\n        siteListMinusGrouped.addAll(siteList);\r\n        final List groupedSites = getMultiMembershipSites(siteList);\r\n        siteListMinusGrouped.removeAll(groupedSites);\r\n        final List groupedSitesCounts = getGroupedSitesCounts(groupedSites);\r\n        if (!siteListMinusGrouped.isEmpty()) {\r\n            List discussionForumMessageCounts = messageManager.findDiscussionForumMessageCountsForAllSitesByPermissionLevelId(siteListMinusGrouped, roleList);\r\n            discussionForumMessageCounts.addAll(messageManager.findDiscussionForumMessageCountsForAllSitesByPermissionLevelName(siteListMinusGrouped, roleList));\r\n            discussionForumMessageCounts = filterMessageCountsByRole(discussionForumMessageCounts);\r\n            if (!discussionForumMessageCounts.isEmpty()) {\r\n                List discussionForumReadMessageCounts = messageManager.findDiscussionForumReadMessageCountsForAllSitesByPermissionLevelId(siteListMinusGrouped, roleList);\r\n                discussionForumReadMessageCounts.addAll(messageManager.findDiscussionForumReadMessageCountsForAllSitesByPermissionLevelName(siteListMinusGrouped, roleList));\r\n                if (discussionForumReadMessageCounts.isEmpty()) {\r\n                    for (Iterator iter = discussionForumMessageCounts.iterator(); iter.hasNext(); ) {\r\n                        Object[] count = (Object[]) iter.next();\r\n                        Object[] finalCount = new Object[2];\r\n                        finalCount[0] = count[0];\r\n                        finalCount[1] = count[2];\r\n                        compiledDFMessageCounts.add(finalCount);\r\n                    }\r\n                } else {\r\n                    discussionForumReadMessageCounts = filterMessageCountsByRole(discussionForumReadMessageCounts);\r\n                    compiledDFMessageCounts = computeUnreadDFMessages(discussionForumMessageCounts, discussionForumReadMessageCounts);\r\n                }\r\n            }\r\n        }\r\n        compiledDFMessageCounts.addAll(groupedSitesCounts);\r\n        addNonMICounts(nonMICounts, compiledDFMessageCounts);\r\n    }\r\n    return compiledDFMessageCounts;\r\n}"
}, {
	"Path": "org.sakaiproject.util.MultiSingleStorageSqlDefault.getXmlFields",
	"Comment": "returns an array of objects needed for the getxmlsql statement with limits.",
	"Method": "Object[] getXmlFields(int first,int last){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.getFromPage",
	"Comment": "since delete message can be called from 2 places, thisparameter determines where to navigate back to",
	"Method": "String getFromPage(){\r\n    return (fromPage != null) ? fromPage : \"\";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionAreaBean.getNumPendingMsgs",
	"Comment": "returns number of msgs pending in moderated topics in which\tuser has moderate perm",
	"Method": "int getNumPendingMsgs(){\r\n    return numPendingMsgs;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getCourseGrade",
	"Comment": "get the course grade for a student. safe to call when logged in as a student.",
	"Method": "CourseGrade getCourseGrade(String studentUuid){\r\n    final Gradebook gradebook = this.getGradebook();\r\n    final CourseGrade courseGrade = this.gradebookService.getCourseGradeForStudent(gradebook.getUid(), studentUuid);\r\n    if (courseGrade != null && (courseGrade.getTotalPointsPossible() == null || courseGrade.getTotalPointsPossible() == -1)) {\r\n        courseGrade.setTotalPointsPossible(null);\r\n        courseGrade.setPointsEarned(null);\r\n    }\r\n    return courseGrade;\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.api.Banner.calculateAcknowledgementType",
	"Comment": "determine the default acknowledgement type for this banner.",
	"Method": "AcknowledgementType calculateAcknowledgementType(){\r\n    if (type.equals(BannerType.MEDIUM)) {\r\n        return AcknowledgementType.TEMPORARY;\r\n    } else {\r\n        return AcknowledgementType.PERMANENT;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.jsf.renderer.util.RendererUtil.isDisabledOrReadonly",
	"Comment": "if renderer supports disabled or readonly attributes use this method toobtain an early exit from decode method.good idea to include it anyway,compnent will continue to work when these properties are added.",
	"Method": "boolean isDisabledOrReadonly(UIComponent component){\r\n    boolean disabled = false;\r\n    boolean readOnly = false;\r\n    Object disabledAttr = component.getAttributes().get(\"disabled\");\r\n    if (disabledAttr != null) {\r\n        disabled = disabledAttr.equals(Boolean.TRUE);\r\n    }\r\n    Object readOnlyAttr = component.getAttributes().get(\"readonly\");\r\n    if (readOnlyAttr != null) {\r\n        readOnly = readOnlyAttr.equals(Boolean.TRUE);\r\n    }\r\n    return readOnly | disabled;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.importExport.GradeValidator.validate",
	"Comment": "validate the grades contained within the list of imported rows.",
	"Method": "GradeValidationReport validate(List<ImportedRow> rows,List<ImportedColumn> columns){\r\n    report = new GradeValidationReport();\r\n    for (ImportedColumn column : columns) {\r\n        Type columnType = column.getType();\r\n        String columnTitle = column.getColumnTitle();\r\n        if (columnType == Type.GB_ITEM_WITH_POINTS || columnType == Type.GB_ITEM_WITHOUT_POINTS) {\r\n            for (ImportedRow row : rows) {\r\n                ImportedCell cell = row.getCellMap().get(columnTitle);\r\n                if (cell != null) {\r\n                    String studentIdentifier = row.getStudentEid();\r\n                    validateGrade(columnTitle, studentIdentifier, cell.getRawScore());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return report;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.getString",
	"Comment": "returns a string reconstructed from bytes at a specific location.",
	"Method": "String getString(String getString,int pos,int len,String getString,boolean useHighByte,int pos,int len){\r\n    if ((pos == 0) && (len == 0)) {\r\n        return \"\";\r\n    }\r\n    if (!(between(pos, 0, (size - 1)) && between((pos + (len * (useHighByte ? 2 : 1))), 0, size))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    StringBuilder ret = new StringBuilder(len);\r\n    char c;\r\n    beginEnumeration(pos);\r\n    for (int x = 0; x < len; x++) {\r\n        if (useHighByte) {\r\n            c = (char) (nextByte() << 8);\r\n            c |= nextByte();\r\n        } else {\r\n            c = (char) nextByte();\r\n        }\r\n        ret.append(c);\r\n    }\r\n    return ret.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.util.EmailNotification.getRecipients",
	"Comment": "get the list of user objects who are eligible to receive the notification email.",
	"Method": "List getRecipients(Event event){\r\n    return new Vector();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.ContentHostingHandlerResolverImpl.cancelCollection",
	"Comment": "cancel collection, using storage if real, or the contenthostinghandler if present.",
	"Method": "void cancelCollection(ContentCollectionEdit edit){\r\n    ContentHostingHandler chh = edit.getContentHandler();\r\n    if (chh != null) {\r\n        chh.cancel(edit);\r\n    } else {\r\n        storage.cancelCollection(edit);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.memory.impl.EhcacheMemoryService.addKeyValueToConfig",
	"Comment": "simple code duplication reductionhelps with generating the config strings",
	"Method": "boolean addKeyValueToConfig(StringBuilder buf,String key,Object value,boolean first){\r\n    if (!first) {\r\n        buf.append(\",\");\r\n    } else {\r\n        first = false;\r\n    }\r\n    buf.append(key).append(\"=\").append(value);\r\n    return first;\r\n}"
}, {
	"Path": "org.sakaiproject.content.util.BaseInteractionAction.setRequiredPropertyKeys",
	"Comment": "set a list of properties that should be provided to the helper if they are defined.",
	"Method": "void setRequiredPropertyKeys(List<String> requiredPropertyKeys){\r\n    this.requiredPropertyKeys = requiredPropertyKeys;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.SynopticMsgcntrManagerImpl.getSite",
	"Comment": "returns the site object for this id, if it exists.\tif not, returns idunusedexception",
	"Method": "Site getSite(String siteId){\r\n    if (sitesMap == null) {\r\n        sitesMap = new HashMap();\r\n    }\r\n    if (sitesMap.get(siteId) == null) {\r\n        Site site = siteService.getSite(siteId);\r\n        sitesMap.put(site.getId(), site);\r\n        return site;\r\n    } else {\r\n        return (Site) sitesMap.get(siteId);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.login.tool.ContainerLogin.getUrl",
	"Comment": "gets a url from the session, if not found returns the portal url.",
	"Method": "String getUrl(Session session,String sessionAttribute){\r\n    String url = (String) session.getAttribute(sessionAttribute);\r\n    if (url == null || url.length() == 0) {\r\n        log.debug(\"No \" + sessionAttribute + \" URL, redirecting to portal URL.\");\r\n        url = defaultReturnUrl;\r\n    }\r\n    return url;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.core.EntityProviderMethodStoreImpl.validateActionParamTypes",
	"Comment": "validates the parameter types on a method to make sure they are valid",
	"Method": "Class<?>[] validateActionParamTypes(Class<?>[] paramTypes,String methodName){\r\n    try {\r\n        return validateParamTypes(paramTypes, validActionParamTypes);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new IllegalArgumentException(\"Invalid custom action method (\" + methodName + \"): \" + e.getMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.DropboxNotification.getRecipients",
	"Comment": "get the list of user objects who are eligible to receive the notification email.",
	"Method": "List getRecipients(Event event){\r\n    List recipients = new ArrayList();\r\n    String resourceRef = event.getResource();\r\n    Reference ref = entityManager.newReference(resourceRef);\r\n    String siteId = (getSite() != null) ? getSite() : ref.getContext();\r\n    Site site;\r\n    try {\r\n        site = siteService.getSite(siteId);\r\n    } catch (IdUnusedException e) {\r\n        log.warn(\"Could not getSite for \" + siteId + \" not returning any recipients.\");\r\n        return recipients;\r\n    }\r\n    ResourceProperties props = ref.getProperties();\r\n    String modifiedBy = props.getProperty(ResourceProperties.PROP_MODIFIED_BY);\r\n    String[] parts = resourceRef.split(\"/\");\r\n    if (parts.length >= 4) {\r\n        String dropboxOwnerId = parts[4];\r\n        if (modifiedBy != null && modifiedBy.equals(dropboxOwnerId)) {\r\n            StringBuilder buf = new StringBuilder();\r\n            buf.append(\"/content/group-user/\");\r\n            buf.append(parts[3]);\r\n            buf.append(\"/\");\r\n            String siteDropbox = buf.toString();\r\n            recipients.addAll(securityService.unlockUsers(contentHostingService.AUTH_DROPBOX_MAINTAIN, siteDropbox));\r\n            refineToSiteMembers(recipients, site);\r\n        } else {\r\n            try {\r\n                User user = userDirectoryService.getUser(dropboxOwnerId);\r\n                recipients.add(user);\r\n            } catch (UserNotDefinedException e0) {\r\n                try {\r\n                    User user = userDirectoryService.getUserByEid(dropboxOwnerId);\r\n                    recipients.add(user);\r\n                } catch (UserNotDefinedException e1) {\r\n                    log.warn(\"UserNotDefinedException trying to get user: \" + dropboxOwnerId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return recipients;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlService.dbReadLock",
	"Comment": "read a single field from the db, from a single record, return the value found, and lock for update.",
	"Method": "Connection dbReadLock(String sql,StringBuilder field,Connection dbReadLock,String sql,SqlReader reader){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"dbReadLock(String \" + sql + \")\");\r\n    }\r\n    Connection conn = null;\r\n    Statement stmt = null;\r\n    ResultSet result = null;\r\n    boolean autoCommit = false;\r\n    boolean resetAutoCommit = false;\r\n    boolean closeConn = false;\r\n    try {\r\n        conn = borrowConnection();\r\n        autoCommit = conn.getAutoCommit();\r\n        if (autoCommit) {\r\n            conn.setAutoCommit(false);\r\n            resetAutoCommit = true;\r\n        }\r\n        if (log.isDebugEnabled())\r\n            log.debug(\"Sql.dbReadLock():\\n\" + sql);\r\n        stmt = conn.createStatement();\r\n        result = stmt.executeQuery(sql);\r\n        if (result.next()) {\r\n            reader.readSqlResultRecord(result);\r\n        } else {\r\n            closeConn = true;\r\n        }\r\n    } catch (SQLException e) {\r\n        closeConn = true;\r\n    } catch (SqlReaderFinishedException e) {\r\n        log.warn(\"Sql.dbReadLock(): \" + e);\r\n        closeConn = true;\r\n    } finally {\r\n        if (null != result) {\r\n            try {\r\n                result.close();\r\n            } catch (SQLException e) {\r\n                log.warn(\"Sql.dbReadBinary(): \" + e);\r\n            }\r\n        }\r\n        if (null != stmt) {\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException e) {\r\n                log.warn(\"Sql.dbReadBinary(): \" + e);\r\n            }\r\n        }\r\n        if ((closeConn) && (conn != null)) {\r\n            try {\r\n                conn.rollback();\r\n            } catch (SQLException e) {\r\n                log.warn(\"Sql.dbReadBinary(): \" + e);\r\n            }\r\n            if (resetAutoCommit)\r\n                try {\r\n                    conn.setAutoCommit(autoCommit);\r\n                } catch (SQLException e) {\r\n                    log.warn(\"Sql.dbReadBinary(): \" + e);\r\n                }\r\n        }\r\n        if (conn != null) {\r\n            returnConnection(conn);\r\n        }\r\n    }\r\n    return conn;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.updateSiteSecurity",
	"Comment": "update the site security based on the values in the authzgroup, if it is a site authzgroup.",
	"Method": "void updateSiteSecurity(AuthzGroup azGroup){\r\n    Reference ref = entityManager().newReference(azGroup.getId());\r\n    if (SiteService.APPLICATION_ID.equals(ref.getType()) && SiteService.SITE_SUBTYPE.equals(ref.getSubType())) {\r\n        Set updUsers = azGroup.getUsersIsAllowed(SiteService.SECURE_UPDATE_SITE);\r\n        Set unpUsers = azGroup.getUsersIsAllowed(SiteService.SITE_VISIT_UNPUBLISHED);\r\n        Set visitUsers = azGroup.getUsersIsAllowed(SiteService.SITE_VISIT);\r\n        siteService.setSiteSecurity(ref.getId(), updUsers, unpUsers, visitUsers);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.model.GbChartData.addZeroed",
	"Comment": "add the label but keep the count as zero. useful for adding increments to axes without affecting the stats.",
	"Method": "void addZeroed(String label){\r\n    this.dataset.put(label, 0);\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesJoin2Sql",
	"Comment": "returns the sql statement which is part of the join clause to retrieve sites.",
	"Method": "String getSitesJoin2Sql(){\r\n    return \", SAKAI_USER_ID_MAP\";\r\n}"
}, {
	"Path": "org.sakaiproject.feedback.util.SakaiProxy.getCurrentSiteId",
	"Comment": "this gets the current site id from the placement, if the tool is running outside the portalthis will return null.",
	"Method": "String getCurrentSiteId(){\r\n    return toolManager.getCurrentPlacement().getContext();\r\n}"
}, {
	"Path": "org.sakaiproject.util.Validator.hexDigit",
	"Comment": "returns the hex digit cooresponding to a number between 0 and 15.",
	"Method": "char hexDigit(int i){\r\n    switch(i) {\r\n        case 0:\r\n            return '0';\r\n        case 1:\r\n            return '1';\r\n        case 2:\r\n            return '2';\r\n        case 3:\r\n            return '3';\r\n        case 4:\r\n            return '4';\r\n        case 5:\r\n            return '5';\r\n        case 6:\r\n            return '6';\r\n        case 7:\r\n            return '7';\r\n        case 8:\r\n            return '8';\r\n        case 9:\r\n            return '9';\r\n        case 10:\r\n            return 'A';\r\n        case 11:\r\n            return 'B';\r\n        case 12:\r\n            return 'C';\r\n        case 13:\r\n            return 'D';\r\n        case 14:\r\n            return 'E';\r\n        case 15:\r\n            return 'F';\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid digit:\" + i);\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.updateResource",
	"Comment": "update the body and or content type of an existing resource with the given resource id.",
	"Method": "ContentResource updateResource(String id,String type,byte[] content){\r\n    ContentResourceEdit edit = editResource(id);\r\n    edit.setContentType(type);\r\n    edit.setContent(content);\r\n    commitResource(edit, NotificationService.NOTI_NONE);\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.model.EntityMember.makeId",
	"Comment": "constructs a membership id from the user and member references",
	"Method": "String makeId(String userId,String locationReference){\r\n    if (userId == null || locationReference == null || \"\".equals(locationReference)) {\r\n        throw new IllegalArgumentException(\"userId (\" + userId + \") and locationReference (\" + locationReference + \") cannot be null when creating an id for a membership\");\r\n    }\r\n    if (locationReference.charAt(0) != '/') {\r\n        throw new IllegalArgumentException(\"locationReference (\" + locationReference + \") must be a reference like '/site/siteId'\");\r\n    }\r\n    if (userId.charAt(0) == '/') {\r\n        userId = userId.substring(1);\r\n    }\r\n    if (userId.indexOf('/') > 0) {\r\n        userId = userId.replace('/', ':');\r\n    }\r\n    if (locationReference.charAt(0) == '/') {\r\n        locationReference = locationReference.substring(1);\r\n    }\r\n    if (locationReference.indexOf('/') > 0) {\r\n        locationReference = locationReference.replace('/', ':');\r\n    }\r\n    String id = userId + \"::\" + locationReference;\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.hierarchy.utils.HierarchyUtils.getUniqueParentNodes",
	"Comment": "create a set of all the unique parent node ids based on the set of supplied nodes, can optionally be limited to return only direct parents and to include the supplied node ids",
	"Method": "Set<String> getUniqueParentNodes(Collection<HierarchyNode> nodes,boolean includeSuppliedNodeIds,boolean directOnly){\r\n    Set<String> s = new HashSet<String>();\r\n    for (HierarchyNode hierarchyNode : nodes) {\r\n        if (includeSuppliedNodeIds) {\r\n            s.add(hierarchyNode.id);\r\n        }\r\n        if (directOnly) {\r\n            s.addAll(hierarchyNode.directParentNodeIds);\r\n        } else {\r\n            s.addAll(hierarchyNode.parentNodeIds);\r\n        }\r\n    }\r\n    return s;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionForumBean.getForumModerated",
	"Comment": "returns boolean value, whether the forum is moderated or not",
	"Method": "Boolean getForumModerated(){\r\n    log.debug(\"getForumModerated()\");\r\n    if (moderated == null) {\r\n        if (forum == null || forum.getModerated() == null || forum.getModerated().booleanValue() == false) {\r\n            moderated = Boolean.FALSE.toString();\r\n        } else {\r\n            moderated = Boolean.TRUE.toString();\r\n        }\r\n    }\r\n    return Boolean.parseBoolean(moderated);\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.isAttachmentResource",
	"Comment": "check whether a resource id or collection id references an entity in the attachments collection. this method makes no guarantees that a resource actually exists with this id.",
	"Method": "boolean isAttachmentResource(String id){\r\n    if (id == null) {\r\n        return false;\r\n    }\r\n    return id.startsWith(ATTACHMENTS_COLLECTION);\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.hexDigit",
	"Comment": "returns the hex digit cooresponding to a number between 0 and 15.",
	"Method": "char hexDigit(int i){\r\n    switch(i) {\r\n        case 0:\r\n            return '0';\r\n        case 1:\r\n            return '1';\r\n        case 2:\r\n            return '2';\r\n        case 3:\r\n            return '3';\r\n        case 4:\r\n            return '4';\r\n        case 5:\r\n            return '5';\r\n        case 6:\r\n            return '6';\r\n        case 7:\r\n            return '7';\r\n        case 8:\r\n            return '8';\r\n        case 9:\r\n            return '9';\r\n        case 10:\r\n            return 'A';\r\n        case 11:\r\n            return 'B';\r\n        case 12:\r\n            return 'C';\r\n        case 13:\r\n            return 'D';\r\n        case 14:\r\n            return 'E';\r\n        case 15:\r\n            return 'F';\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid digit:\" + i);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.model.EntitySite.copyInfo",
	"Comment": "copies the info items from the supplied site. useful when you want asparse object, for json purposes for example.",
	"Method": "void copyInfo(Site site){\r\n    this.site = site;\r\n    this.id = site.getId();\r\n    this.title = site.getTitle();\r\n    this.shortDescription = site.getShortDescription();\r\n    this.htmlShortDescription = site.getHtmlShortDescription();\r\n    this.description = site.getDescription();\r\n    ResourceProperties rp = site.getProperties();\r\n    this.contactName = rp.getProperty(PROP_SITE_CONTACT_NAME);\r\n    this.contactEmail = rp.getProperty(PROP_SITE_CONTACT_EMAIL);\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlOracle.getRecordAlreadyExists",
	"Comment": "returns whether the sql exception indicates that a record already exists in a table.",
	"Method": "boolean getRecordAlreadyExists(SQLException ex){\r\n    return ex.getErrorCode() == 1;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseLearningResourceStoreService.getEventStatement",
	"Comment": "convenience method to turn events into statements,this can only work for simple events where there is little student interaction",
	"Method": "LRS_Statement getEventStatement(Event event){\r\n    LRS_Statement statement = null;\r\n    LRS_Verb verb = null;\r\n    LRS_Actor actor = null;\r\n    LRS_Context context = null;\r\n    LRS_Object object = null;\r\n    LRS_Result result = null;\r\n    if (event.getLrsStatement() != null) {\r\n        statement = event.getLrsStatement();\r\n        if (statement.isPopulated() && statement.getContext() != null) {\r\n            return statement;\r\n        }\r\n        verb = statement.getVerb();\r\n        actor = statement.getActor();\r\n        context = statement.getContext();\r\n        object = statement.getObject();\r\n        result = statement.getResult();\r\n    }\r\n    try {\r\n        if (verb == null) {\r\n            verb = getEventVerb(event);\r\n        }\r\n        if (object == null) {\r\n            object = getEventObject(event);\r\n        }\r\n        if (actor == null) {\r\n            actor = getEventActor(event);\r\n        }\r\n        if (context == null) {\r\n            context = getEventContext(event);\r\n        }\r\n        statement = new LRS_Statement(actor, verb, object, result, context);\r\n    } catch (Exception e) {\r\n        log.debug(\"LRS Unable to convert event ({}) into statement.\", event, e);\r\n        statement = null;\r\n    }\r\n    return statement;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere2Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere2Sql(){\r\n    return \"SAKAI_SITE.IS_USER = '0' and \";\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.api.Popup.create",
	"Comment": "return a popup for an existing uuid that replaces its template.",
	"Method": "Popup create(String descriptor,long startTime,long endTime,boolean isOpenCampaign,Popup create,String uuid,String descriptor,long startTime,long endTime,boolean isOpenCampaign,Popup create,String uuid,String descriptor,long startTime,long endTime,boolean isOpenCampaign,String template){\r\n    return new Popup(uuid, descriptor, startTime, endTime, isOpenCampaign, template);\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.spreadsheet.SpreadsheetUtil.downloadSpreadsheetData",
	"Comment": "download a spreadsheet file containing the input list of data.",
	"Method": "void downloadSpreadsheetData(List<List<Object>> spreadsheetData,String fileName,SpreadsheetDataFileWriter fileWriter){\r\n    FacesContext faces = FacesContext.getCurrentInstance();\r\n    HttpServletResponse response = (HttpServletResponse) faces.getExternalContext().getResponse();\r\n    protectAgainstInstantDeletion(response);\r\n    fileWriter.writeDataToResponse(spreadsheetData, fileName, response);\r\n    faces.responseComplete();\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlOracle.getXmlFields",
	"Comment": "returns an array of objects needed for the getxmlsql statement with limits.",
	"Method": "Object[] getXmlFields(int first,int last){\r\n    Object[] fields = new Object[2];\r\n    fields[0] = Long.valueOf(first);\r\n    fields[1] = Long.valueOf(last);\r\n    return fields;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.importExport.GradeItemImportSelectionStep.createGradeItemMap",
	"Comment": "create a map of item title to item. only gb items are in this map.",
	"Method": "Map<String, ProcessedGradeItem> createGradeItemMap(List<ProcessedGradeItem> items){\r\n    final List<ProcessedGradeItem> gbItems = filterListByType(items, Type.GB_ITEM);\r\n    final Map<String, ProcessedGradeItem> rval = gbItems.stream().collect(Collectors.toMap(ProcessedGradeItem::getItemTitle, Function.identity()));\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getErrorMessageString",
	"Comment": "sets the faces error message by pulling the message from the\tmessagebundle using the name passed in",
	"Method": "String getErrorMessageString(String key){\r\n    return getMessageFromBundle(key);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getGradebookCategories",
	"Comment": "get a list of categories in the gradebook in the specified site",
	"Method": "List<CategoryDefinition> getGradebookCategories(List<CategoryDefinition> getGradebookCategories,String siteId){\r\n    final Gradebook gradebook = getGradebook(siteId);\r\n    List<CategoryDefinition> rval = new ArrayList();\r\n    if (gradebook == null) {\r\n        return rval;\r\n    }\r\n    if (categoriesAreEnabled()) {\r\n        rval = this.gradebookService.getCategoryDefinitions(gradebook.getUid());\r\n    }\r\n    GbRole role;\r\n    try {\r\n        role = this.getUserRole(siteId);\r\n    } catch (final GbAccessDeniedException e) {\r\n        log.warn(\"GbAccessDeniedException trying to getGradebookCategories\", e);\r\n        return rval;\r\n    }\r\n    if (role == GbRole.TA) {\r\n        final User user = getCurrentUser();\r\n        final List<Long> allCategoryIds = new ArrayList();\r\n        for (final CategoryDefinition cd : rval) {\r\n            allCategoryIds.add(cd.getId());\r\n        }\r\n        if (allCategoryIds.isEmpty()) {\r\n            return Collections.emptyList();\r\n        }\r\n        List<Long> viewableCategoryIds = this.gradebookPermissionService.getCategoriesForUser(gradebook.getId(), user.getId(), allCategoryIds);\r\n        if (viewableCategoryIds.isEmpty() && !this.getPermissionsForUser(user.getId()).isEmpty()) {\r\n            viewableCategoryIds = allCategoryIds;\r\n        }\r\n        final Iterator<CategoryDefinition> iter = rval.iterator();\r\n        while (iter.hasNext()) {\r\n            final CategoryDefinition categoryDefinition = iter.next();\r\n            if (!viewableCategoryIds.contains(categoryDefinition.getId())) {\r\n                iter.remove();\r\n            }\r\n        }\r\n    }\r\n    Collections.sort(rval, CategoryDefinition.orderComparator);\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.SakaiMessageHandlerFactory.getServer",
	"Comment": "get the started smtp server. this is mainly here so that in set setup we can query it.",
	"Method": "SMTPServer getServer(){\r\n    return server;\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlDefault.getXmlWhereSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table.",
	"Method": "String getXmlWhereSql(String table,String where){\r\n    return \"select XML from \" + table + \" \" + where;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseEventTrackingService.addPriorityObserver",
	"Comment": "add an observer of events. the observer will be notified whenever there are new events. priority observers get notified first, before normal observers.",
	"Method": "void addPriorityObserver(Observer observer){\r\n    m_observableHelper.deleteObserver(observer);\r\n    m_localObservableHelper.deleteObserver(observer);\r\n    m_priorityObservableHelper.addObserver(observer);\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDualSingleStorage.valuesParams",
	"Comment": "form a string of n question marks with commas, for sql value statements,\tone for each item in the values array, or an empty string if null.",
	"Method": "String valuesParams(String[] fields){\r\n    if ((fields == null) || (fields.length == 0))\r\n        return \"\";\r\n    StringBuilder buf = new StringBuilder();\r\n    for (int i = 0; i < fields.length; i++) {\r\n        buf.append(\" ?,\");\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.util.Xml.propertiesToXml",
	"Comment": "serialize the properties into xml, adding an element to the doc under the top of the stack element.",
	"Method": "Element propertiesToXml(Properties propsToSerialize,Document doc,Stack<Element> stack){\r\n    Element properties = doc.createElement(\"properties\");\r\n    ((Element) stack.peek()).appendChild(properties);\r\n    Enumeration<?> props = propsToSerialize.propertyNames();\r\n    while (props.hasMoreElements()) {\r\n        String name = (String) props.nextElement();\r\n        String value = propsToSerialize.getProperty(name);\r\n        Element propElement = doc.createElement(\"property\");\r\n        properties.appendChild(propElement);\r\n        propElement.setAttribute(\"name\", name);\r\n        Xml.encodeAttribute(propElement, \"value\", (String) value);\r\n        propElement.setAttribute(\"enc\", \"BASE64\");\r\n    }\r\n    return properties;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.setCourseSiteRemovalService",
	"Comment": "called by the spring framework to initialize the coursesiteremovalservice data member specified in the components.xml file via ioc.",
	"Method": "void setCourseSiteRemovalService(CourseSiteRemovalService courseSiteRemovalService){\r\n    this.courseSiteRemovalService = courseSiteRemovalService;\r\n}"
}, {
	"Path": "org.sakaiproject.component.cover.TestComponentManagerContainer.getServiceProxy",
	"Comment": "returns a dynamic proxy for a service interface.useful for testing with\tcustomized service implementations without needing to write custom stubs.",
	"Method": "Object getServiceProxy(Class clazz,InvocationHandler handler){\r\n    return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { clazz }, handler);\r\n}"
}, {
	"Path": "org.sakaiproject.message.util.BaseMessage.messageReference",
	"Comment": "access the internal reference which can be used to access the message from within the system.",
	"Method": "String messageReference(String context,String channelId,String id,String messageReference,String channelRef,String id){\r\n    StringBuilder buf = new StringBuilder();\r\n    buf.append(channelRef);\r\n    int pos = buf.indexOf(REF_TYPE_CHANNEL);\r\n    buf.replace(pos, pos + REF_TYPE_CHANNEL.length(), REF_TYPE_MESSAGE);\r\n    buf.append(Entity.SEPARATOR);\r\n    buf.append(id);\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.util.Web.returnUrl",
	"Comment": "compute the url that would return to this servlet based on the current request, with the optional path and parameters",
	"Method": "String returnUrl(HttpServletRequest req,String path){\r\n    StringBuilder url = new StringBuilder();\r\n    url.append(serverUrl(req));\r\n    url.append(req.getContextPath());\r\n    url.append(req.getServletPath());\r\n    if (path != null)\r\n        url.append(path);\r\n    return url.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbBinarySingleStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be\tgotten.",
	"Method": "Edit editResource(String id){\r\n    Edit edit = null;\r\n    if (m_locksAreInDb) {\r\n        if (\"oracle\".equals(m_sql.getVendor())) {\r\n            final List<Entity> l = new ArrayList<Entity>();\r\n            Connection lock = null;\r\n            if (m_user instanceof EntityReaderHandler) {\r\n                String statement = \"select XML from \" + m_resourceTableName + \" where ( \" + m_resourceTableIdField + \" = '\" + StorageUtils.escapeSql(caseId(id)) + \"' )\" + \" for update nowait\";\r\n                lock = m_sql.dbReadLock(statement, new SqlReader() {\r\n                    public Object readSqlResultRecord(ResultSet result) {\r\n                        try {\r\n                            l.add(readResource(result.getBytes(1)));\r\n                        } catch (SQLException e) {\r\n                            log.warn(\"Failed to retrieve record \", e);\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            } else {\r\n                String statement = \"select BENTRY, XML from \" + m_resourceTableName + \" where ( \" + m_resourceTableIdField + \" = '\" + StorageUtils.escapeSql(caseId(id)) + \"' )\" + \" for update nowait\";\r\n                lock = m_sql.dbReadLock(statement, new SqlReader() {\r\n                    public Object readSqlResultRecord(ResultSet result) {\r\n                        try {\r\n                            l.add(readResource(result.getBytes(1)));\r\n                        } catch (SQLException e) {\r\n                            log.warn(\"Failed to retrieve record \", e);\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            }\r\n            if ((lock == null) || (l.size() == 0))\r\n                return null;\r\n            Entity entry = l.get(0);\r\n            edit = m_user.newResourceEdit(null, entry);\r\n            m_locks.put(entry.getReference(), lock);\r\n        } else {\r\n            throw new UnsupportedOperationException(\"Record locking only available when configured with Oracle database\");\r\n        }\r\n    } else if (m_locksAreInTable) {\r\n        Entity entry = getResource(id);\r\n        if (entry == null)\r\n            return null;\r\n        String statement = singleStorageSql.getInsertLocks();\r\n        String sessionId = UsageSessionService.getSessionId();\r\n        if (sessionId == null) {\r\n            sessionId = \"\";\r\n        }\r\n        Object[] fields = new Object[4];\r\n        fields[0] = m_resourceTableName;\r\n        fields[1] = internalRecordId(caseId(id));\r\n        fields[2] = TimeService.newTime();\r\n        fields[3] = sessionId;\r\n        boolean ok = m_sql.dbWriteFailQuiet(null, statement, fields);\r\n        if (!ok) {\r\n            return null;\r\n        }\r\n        edit = m_user.newResourceEdit(null, entry);\r\n    } else {\r\n        Entity entry = getResource(id);\r\n        if (entry == null)\r\n            return null;\r\n        synchronized (m_locks) {\r\n            if (m_locks.containsKey(entry.getReference()))\r\n                return null;\r\n            edit = m_user.newResourceEdit(null, entry);\r\n            m_locks.put(entry.getReference(), edit);\r\n        }\r\n    }\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbBinarySingleStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be\tgotten.",
	"Method": "Edit editResource(String id){\r\n    try {\r\n        l.add(readResource(result.getBytes(1)));\r\n    } catch (SQLException e) {\r\n        log.warn(\"Failed to retrieve record \", e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbBinarySingleStorage.editResource",
	"Comment": "get a lock on the resource with this id, or null if a lock cannot be\tgotten.",
	"Method": "Edit editResource(String id){\r\n    try {\r\n        l.add(readResource(result.getBytes(1)));\r\n    } catch (SQLException e) {\r\n        log.warn(\"Failed to retrieve record \", e);\r\n    }\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.processSingleResource",
	"Comment": "this method is written to enable user to select multiple resources from the tool",
	"Method": "String processSingleResource(Reference reference,int type,boolean isWebSite,boolean isCaption,Long itemId){\r\n    String id = reference.getId();\r\n    String description = reference.getProperties().getProperty(ResourceProperties.PROP_DESCRIPTION);\r\n    String name = this.name;\r\n    if (name == null || name.equals(\"\"))\r\n        name = reference.getProperties().getProperty(\"DAV:displayname\");\r\n    String mimeType = reference.getProperties().getProperty(\"DAV:getcontenttype\");\r\n    if (mimeType.equals(\"text/url\")) {\r\n        mimeType = null;\r\n        String url = null;\r\n        SecurityAdvisor editUrlAdvisor = null;\r\n        try {\r\n            editUrlAdvisor = pushAdvisor();\r\n            ContentResourceEdit res = contentHostingService.editResource(id);\r\n            res.setContentType(\"text/url\");\r\n            res.setResourceType(\"org.sakaiproject.content.types.urlResource\");\r\n            url = new String(res.getContent());\r\n            contentHostingService.commitResource(res, NotificationService.NOTI_NONE);\r\n        } catch (Exception ignore) {\r\n            return \"no-reference\";\r\n        } finally {\r\n            popAdvisor(editUrlAdvisor);\r\n        }\r\n        if (url != null)\r\n            mimeType = getTypeOfUrl(url);\r\n    } else if (isCaption) {\r\n        SecurityAdvisor editAdvisor = null;\r\n        try {\r\n            editAdvisor = pushAdvisor();\r\n            ContentResourceEdit res = contentHostingService.editResource(id);\r\n            res.setContentType(\"text/vtt\");\r\n            contentHostingService.commitResource(res, NotificationService.NOTI_NONE);\r\n        } catch (Exception ignore) {\r\n            return \"no-reference\";\r\n        } finally {\r\n            popAdvisor(editAdvisor);\r\n        }\r\n    }\r\n    try {\r\n        contentHostingService.checkResource(id);\r\n    } catch (PermissionException e) {\r\n        return \"permission-exception\";\r\n    } catch (IdUnusedException e) {\r\n        return \"cancel\";\r\n    } catch (TypeException e) {\r\n        return \"type-exception\";\r\n    }\r\n    String[] split = id.split(\"/\");\r\n    if (\"application/zip\".equals(mimeType) && isWebSite) {\r\n        if (split[split.length - 1].lastIndexOf(\".\") < 1) {\r\n            setErrMessage(messageLocator.getMessage(\"simplepage.website.noextension\"));\r\n            return \"importing\";\r\n        }\r\n        id = expandZippedResource(id);\r\n        if (id == null)\r\n            return \"importing\";\r\n        mimeType = \"LBWEBSITE\";\r\n        if (name == null) {\r\n            name = split[split.length - 1];\r\n        }\r\n        if (name.lastIndexOf(\".\") > 0)\r\n            name = name.substring(0, name.lastIndexOf(\".\"));\r\n    }\r\n    SimplePageItem i;\r\n    if (itemId != null && itemId != -1 && isCaption) {\r\n        i = findItem(itemId);\r\n        i.setAttribute(\"captionfile\", id);\r\n    } else if (itemId != null && itemId != -1) {\r\n        i = findItem(itemId);\r\n        ResourceHelper resHelp = new ResourceHelper(getContentResource(i.getSakaiId()));\r\n        boolean hasCustomName = !isWebsite && resHelp.isNameCustom(i.getName());\r\n        boolean hasCustomDesc = resHelp.isDescCustom(i.getDescription());\r\n        i.setSakaiId(id);\r\n        if (mimeType != null)\r\n            i.setHtml(mimeType);\r\n        if (!hasCustomName) {\r\n            i.setName(name != null ? name : split[split.length - 1]);\r\n        }\r\n        if (!hasCustomDesc) {\r\n            i.setDescription(description);\r\n        }\r\n        clearImageSize(i);\r\n        i.removeAttribute(\"captionfile\");\r\n        i.removeAttribute(\"multimediaUrl\");\r\n    } else {\r\n        i = appendItem(id, (name != null ? name : split[split.length - 1]), type);\r\n        if (mimeType != null) {\r\n            i.setHtml(mimeType);\r\n        }\r\n        i.setDescription(description);\r\n        i.setSameWindow(false);\r\n    }\r\n    i.setAttribute(\"addedby\", getCurrentUserId());\r\n    saveOrUpdate(i);\r\n    return \"importing\";\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.bytes2k",
	"Comment": "convert bytes to kbytes, rounding up, and counting even 0 bytes as 1 k.",
	"Method": "long bytes2k(long bytes){\r\n    return ((bytes - 1) / 1024) + 1;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.FormatHelper.formatStringAsPercentage",
	"Comment": "format the given string as a percentage with two decimal precision. string should be something that can be converted to a number.",
	"Method": "String formatStringAsPercentage(String string){\r\n    if (StringUtils.isBlank(string)) {\r\n        return null;\r\n    }\r\n    final BigDecimal decimal = new BigDecimal(string).setScale(2, RoundingMode.HALF_UP);\r\n    return formatDoubleAsPercentage(decimal.doubleValue());\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsForumManagerImpl.getRecentPrivateMessages",
	"Comment": "returns a given number of messages if available in the time provided",
	"Method": "List getRecentPrivateMessages(int numberMessages,int numberDaysInPast){\r\n    throw new UnsupportedOperationException();\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.user.prefs.ExternalEmailUserNotificationPreferencesRegistrationImpl.init",
	"Comment": "conditionally enables the user preferences for external email notification posting.",
	"Method": "void init(){\r\n    if (developerHelperService.getConfigurationSetting(NOTIFY_POST_ENABLED, false)) {\r\n        super.init();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.PodcastServiceImpl.getMessageBundleString",
	"Comment": "sets the faces error message by pulling the message from the\tmessagebundle using the name passed in",
	"Method": "String getMessageBundleString(String key){\r\n    return resbud.getString(key);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.RendererUtil.isDisabledOrReadonly",
	"Comment": "if renderer supports disabled or readonly attributes use this method toobtain an early exit from decode method. good idea to include it anyway,compnent will continue to work when these properties are added.",
	"Method": "boolean isDisabledOrReadonly(FacesContext context,UIComponent component){\r\n    boolean disabled = false;\r\n    boolean readOnly = false;\r\n    Object disabledAttr = getAttribute(context, component, \"disabled\");\r\n    if (disabledAttr != null) {\r\n        disabled = disabledAttr.equals(Boolean.TRUE);\r\n    }\r\n    Object readOnlyAttr = getAttribute(context, component, \"readonly\");\r\n    if (readOnlyAttr != null) {\r\n        readOnly = readOnlyAttr.equals(Boolean.TRUE);\r\n    }\r\n    return readOnly | disabled;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.model.ImportedColumn.equals",
	"Comment": "column titles are the only thing we care about for comparisons so that we can filter out duplicates. must also match type and exclude\tignore",
	"Method": "boolean equals(Object o){\r\n    final ImportedColumn other = (ImportedColumn) o;\r\n    if (StringUtils.isBlank(this.columnTitle) || StringUtils.isBlank(other.columnTitle)) {\r\n        return false;\r\n    }\r\n    if (this.type == Type.IGNORE || other.type == Type.IGNORE) {\r\n        return false;\r\n    }\r\n    return StringUtils.equals(this.columnTitle, other.getColumnTitle()) && this.type == other.getType();\r\n}"
}, {
	"Path": "org.sakaiproject.message.util.BaseMessage.archiveSynopticOptions",
	"Comment": "try to add synoptic options for this tool to the archive, if they exist",
	"Method": "void archiveSynopticOptions(String siteId,Document doc,Element element){\r\n    try {\r\n        Site site = m_siteService.getSite(siteId);\r\n        ToolConfiguration synTool = site.getToolForCommonId(\"sakai.synoptic.\" + getLabel());\r\n        Properties synProp = synTool.getPlacementConfig();\r\n        if (synProp != null && synProp.size() > 0) {\r\n            Element synElement = doc.createElement(SYNOPTIC_TOOL);\r\n            Element synProps = doc.createElement(PROPERTIES);\r\n            Set synPropSet = synProp.keySet();\r\n            Iterator propIter = synPropSet.iterator();\r\n            while (propIter.hasNext()) {\r\n                String propName = (String) propIter.next();\r\n                Element synPropEl = doc.createElement(PROPERTY);\r\n                synPropEl.setAttribute(NAME, propName);\r\n                synPropEl.setAttribute(VALUE, synProp.getProperty(propName));\r\n                synProps.appendChild(synPropEl);\r\n            }\r\n            synElement.appendChild(synProps);\r\n            element.appendChild(synElement);\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(\"archive: exception archiving synoptic options for service: \" + serviceName());\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.setupMembershipItemPermission",
	"Comment": "using a permissionbean, constructs a permissionmask, then constructs a permissionlevel, and assigns it to a membershipitem",
	"Method": "void setupMembershipItemPermission(DBMembershipItem membershipItem,PermissionBean permBean){\r\n    PermissionsMask mask = new PermissionsMask();\r\n    mask.put(PermissionLevel.NEW_FORUM, Boolean.valueOf(permBean.getNewForum()));\r\n    mask.put(PermissionLevel.NEW_TOPIC, Boolean.valueOf(permBean.getNewTopic()));\r\n    mask.put(PermissionLevel.NEW_RESPONSE, Boolean.valueOf(permBean.getNewResponse()));\r\n    mask.put(PermissionLevel.NEW_RESPONSE_TO_RESPONSE, Boolean.valueOf(permBean.getResponseToResponse()));\r\n    mask.put(PermissionLevel.MOVE_POSTING, Boolean.valueOf(permBean.getMovePosting()));\r\n    mask.put(PermissionLevel.CHANGE_SETTINGS, Boolean.valueOf(permBean.getChangeSettings()));\r\n    mask.put(PermissionLevel.POST_TO_GRADEBOOK, Boolean.valueOf(permBean.getPostToGradebook()));\r\n    mask.put(PermissionLevel.READ, Boolean.valueOf(permBean.getRead()));\r\n    mask.put(PermissionLevel.MARK_AS_READ, Boolean.valueOf(permBean.getMarkAsRead()));\r\n    mask.put(PermissionLevel.MODERATE_POSTINGS, Boolean.valueOf(permBean.getModeratePostings()));\r\n    mask.put(PermissionLevel.IDENTIFY_ANON_AUTHORS, Boolean.valueOf(permBean.getIdentifyAnonAuthors()));\r\n    mask.put(PermissionLevel.DELETE_OWN, Boolean.valueOf(permBean.getDeleteOwn()));\r\n    mask.put(PermissionLevel.DELETE_ANY, Boolean.valueOf(permBean.getDeleteAny()));\r\n    mask.put(PermissionLevel.REVISE_OWN, Boolean.valueOf(permBean.getReviseOwn()));\r\n    mask.put(PermissionLevel.REVISE_ANY, Boolean.valueOf(permBean.getReviseAny()));\r\n    PermissionLevel level = permissionLevelManager.createPermissionLevel(permBean.getSelectedLevel(), typeManager.getCustomLevelType(), mask);\r\n    membershipItem.setPermissionLevel(level);\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseXmlFileStorage.editResource",
	"Comment": "return a lock on the entry with this id, or null if a lock cannot be made.",
	"Method": "Edit editResource(String container,String id){\r\n    if (container == null)\r\n        container = \"\";\r\n    Container c = ((Container) m_store.get(container));\r\n    if (c == null)\r\n        return null;\r\n    Entity entry = (Entity) c.contained.get(caseId(id));\r\n    if (entry == null)\r\n        return null;\r\n    synchronized (m_locks) {\r\n        if (m_locks.get(entry.getReference()) != null)\r\n            return null;\r\n        Edit edit = m_user.newResourceEdit(c.container, entry);\r\n        m_locks.put(entry.getReference(), edit);\r\n        return edit;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBeanLite.isAnyMFToolInSite",
	"Comment": "determines if any mf tool in site. variable is transient to be per request.",
	"Method": "boolean isAnyMFToolInSite(){\r\n    if (anyMFToolInSite == null) {\r\n        anyMFToolInSite = isMessageForumsPageInSite() || isMessagesPageInSite() || isForumsPageInSite();\r\n    }\r\n    return anyMFToolInSite;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getCategoryScoreForStudent",
	"Comment": "get the category score for the given student. safe to call when logged in as a student.",
	"Method": "Optional<CategoryScoreData> getCategoryScoreForStudent(Long categoryId,String studentUuid){\r\n    final Gradebook gradebook = getGradebook();\r\n    final Optional<CategoryScoreData> result = gradebookService.calculateCategoryScore(gradebook.getId(), studentUuid, categoryId);\r\n    log.info(\"Category score for category: {}, student: {}:{}\", categoryId, studentUuid, result.map(r -> r.score).orElse(null));\r\n    return result;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.enableDropbox",
	"Comment": "make sure a home in resources for dropbox exists for the site.",
	"Method": "void enableDropbox(String context){\r\n    createDropboxCollection(context);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.rest.GradebookNgEntityProvider.isAnotherUserEditing",
	"Comment": "endpoint for getting the list of cells that have been edited. this is designed to be polled on a regular basis so must be lightweight",
	"Method": "List<GbGradeCell> isAnotherUserEditing(EntityView view,Map<String, Object> params){\r\n    final String siteId = view.getPathSegment(2);\r\n    if (StringUtils.isBlank(siteId)) {\r\n        throw new IllegalArgumentException(\"Site ID must be set in order to access GBNG data.\");\r\n    }\r\n    checkValidSite(siteId);\r\n    checkInstructorOrTA(siteId);\r\n    if (!params.containsKey(\"since\")) {\r\n        throw new IllegalArgumentException(\"Since timestamp (in milliseconds) must be set in order to access GBNG data.\");\r\n    }\r\n    final long millis = NumberUtils.toLong((String) params.get(\"since\"));\r\n    final Date since = new Date(millis);\r\n    return this.businessService.getEditingNotifications(siteId, since);\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsMessageManagerImpl.findViewableMessageCountByTopicId",
	"Comment": "returns count of all msgs in a topic that have been approved or were authored by curr user",
	"Method": "int findViewableMessageCountByTopicId(Long topicId){\r\n    if (topicId == null) {\r\n        log.error(\"findViewableMessageCountByTopicId failed with topicId: null\");\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    log.debug(\"findViewableMessageCountByTopicId executing with topicId: \" + topicId);\r\n    if (getCurrentUser() != null) {\r\n        return findViewableMessageCountByTopicIdByUserId(topicId, getCurrentUser());\r\n    } else\r\n        return 0;\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.BasicConfigurationService.findConfigItem",
	"Comment": "internalfinds a config item by name, use this whenever retrieving the item for lookup",
	"Method": "ConfigItemImpl findConfigItem(String name,Object defaultValue){\r\n    ConfigItemImpl ci = null;\r\n    if (name != null && !\"\".equals(name)) {\r\n        ci = configurationItems.get(name);\r\n        if (ci == null) {\r\n            ConfigItemImpl configItemImpl = new ConfigItemImpl(name);\r\n            configItemImpl.setDefaultValue(defaultValue);\r\n            configItemImpl.setSource(\"get\");\r\n            this.addConfigItem(configItemImpl, \"get\");\r\n        } else {\r\n            ci.requested();\r\n            if (ServerConfigurationService.TYPE_STRING.equals(ci.type)) {\r\n                ci.defaulted = !(defaultValue == null || \"\".equals(defaultValue));\r\n            } else if (defaultValue != null) {\r\n                ci.defaulted = true;\r\n            }\r\n            if (!ci.isRegistered()) {\r\n                ci = null;\r\n            }\r\n        }\r\n    }\r\n    return ci;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonBuilderAccessService.unlockCheck",
	"Comment": "specialized version for resources only. assumes it is called with advisor in place",
	"Method": "boolean unlockCheck(String lock,String id,String siteId){\r\n    boolean isAllowed = securityService.isSuperUser();\r\n    if (!isAllowed) {\r\n        String ref = null;\r\n        if (id != null) {\r\n            ref = getReference(id);\r\n        }\r\n        if (canSeeAll(siteId) && id.startsWith(\"/group/\" + siteId))\r\n            return true;\r\n        isAllowed = ref != null && securityService.unlock(lock, ref);\r\n        if (isAllowed) {\r\n            boolean pushedAdvisor = false;\r\n            ContentResource resource = null;\r\n            try {\r\n                securityService.pushAdvisor(allowReadAdvisor);\r\n                pushedAdvisor = true;\r\n                resource = contentHostingService.getResource(id);\r\n                isAllowed = isAvailable(resource);\r\n                securityService.popAdvisor();\r\n                pushedAdvisor = false;\r\n            } catch (Exception e) {\r\n                isAllowed = false;\r\n            } finally {\r\n                if (pushedAdvisor)\r\n                    securityService.popAdvisor();\r\n            }\r\n        }\r\n    }\r\n    return isAllowed;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.getCourseSiteRemovalService",
	"Comment": "returns the instance of the siteremovalservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "CourseSiteRemovalService getCourseSiteRemovalService(){\r\n    return courseSiteRemovalService;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ComposeLogicImpl.findConfigRole",
	"Comment": "look through configroles to find a role that matches realmid, roleid",
	"Method": "EmailRole findConfigRole(String realmId,String roleId,List<EmailRole> configRoles){\r\n    EmailRole retRole = null;\r\n    for (EmailRole role : configRoles) {\r\n        if (role.getRealmId().equals(realmId) && role.getRoleId().equals(roleId)) {\r\n            retRole = role;\r\n            break;\r\n        }\r\n    }\r\n    return retRole;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityActionsManager.handleCustomActionExecution",
	"Comment": "handles the execution of custom actions based on a request for execution",
	"Method": "ActionReturn handleCustomActionExecution(ActionsExecutable actionProvider,EntityReference ref,String action,Map<String, Object> actionParams,OutputStream outputStream,EntityView view,Map<String, Object> searchParams){\r\n    if (actionProvider == null || ref == null || action == null || \"\".equals(action)) {\r\n        throw new IllegalArgumentException(\"actionProvider and ref and action must not be null\");\r\n    }\r\n    if (outputStream == null) {\r\n        outputStream = new ByteArrayOutputStream();\r\n    }\r\n    String prefix = ref.getPrefix();\r\n    CustomAction customAction = entityProviderMethodStore.getCustomAction(prefix, action);\r\n    if (customAction == null) {\r\n        throw new UnsupportedOperationException(\"Invalid action (\" + action + \"), this action is not a supported custom action for prefix (\" + prefix + \")\");\r\n    }\r\n    ActionReturn actionReturn = null;\r\n    Object result = null;\r\n    if (ActionsExecutionControllable.class.isAssignableFrom(actionProvider.getClass())) {\r\n        result = ((ActionsExecutionControllable) actionProvider).executeActions(new EntityView(ref, null, null), action, actionParams, outputStream);\r\n    } else {\r\n        if (customAction.methodName == null) {\r\n            throw new IllegalStateException(\"The custom action must have the method name set, null is not allowed: \" + customAction);\r\n        }\r\n        Method method = customAction.getMethod();\r\n        if (method == null) {\r\n            try {\r\n                method = actionProvider.getClass().getMethod(customAction.methodName, customAction.methodArgTypes);\r\n            } catch (SecurityException e1) {\r\n                throw new RuntimeException(\"Fatal error trying to get custom action method: \" + customAction, e1);\r\n            } catch (NoSuchMethodException e1) {\r\n                throw new RuntimeException(\"Fatal error trying to get custom action method: \" + customAction, e1);\r\n            }\r\n            customAction.setMethod(method);\r\n        }\r\n        Object[] args = new Object[customAction.methodArgTypes.length];\r\n        for (int i = 0; i < customAction.methodArgTypes.length; i++) {\r\n            Class<?> argType = customAction.methodArgTypes[i];\r\n            if (EntityReference.class.equals(argType)) {\r\n                args[i] = ref;\r\n            } else if (EntityView.class.equals(argType)) {\r\n                if (view == null) {\r\n                    view = new EntityView(ref, customAction.viewKey, null);\r\n                }\r\n                args[i] = view;\r\n            } else if (String.class.equals(argType)) {\r\n                args[i] = actionProvider.getEntityPrefix();\r\n            } else if (Search.class.equals(argType)) {\r\n                Search search = null;\r\n                if (searchParams == null || searchParams.isEmpty()) {\r\n                    search = new Search();\r\n                } else {\r\n                    search = RequestUtils.makeSearchFromRequestParams(searchParams);\r\n                }\r\n                args[i] = search;\r\n            } else if (OutputStream.class.equals(argType)) {\r\n                args[i] = outputStream;\r\n            } else if (Map.class.equals(argType)) {\r\n                args[i] = actionParams;\r\n            } else {\r\n                throw new IllegalStateException(\"custom action (\" + customAction + \") contains an invalid methodArgTypes, \" + \"only valid types allowed: EntityReference, EntityView, Search, String, OutputStream, Map\");\r\n            }\r\n        }\r\n        try {\r\n            result = method.invoke(actionProvider, args);\r\n        } catch (IllegalArgumentException e) {\r\n            throw new RuntimeException(\"Fatal error trying to execute custom action method: \" + customAction, e);\r\n        } catch (IllegalAccessException e) {\r\n            throw new RuntimeException(\"Fatal error trying to execute custom action method: \" + customAction, e);\r\n        } catch (InvocationTargetException e) {\r\n            if (e.getCause() != null) {\r\n                if (e.getCause().getClass().isAssignableFrom(IllegalArgumentException.class)) {\r\n                    throw new IllegalArgumentException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                } else if (e.getCause().getClass().isAssignableFrom(EntityNotFoundException.class)) {\r\n                    throw new EntityNotFoundException(e.getCause().getMessage() + \" (rethrown)\", ref + \"\", e.getCause());\r\n                } else if (e.getCause().getClass().isAssignableFrom(FormatUnsupportedException.class)) {\r\n                    String format = ((FormatUnsupportedException) e.getCause()).format;\r\n                    throw new FormatUnsupportedException(e.getCause().getMessage() + \" (rethrown)\", e.getCause(), ref + \"\", format);\r\n                } else if (e.getCause().getClass().isAssignableFrom(UnsupportedOperationException.class)) {\r\n                    throw new UnsupportedOperationException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                } else if (e.getCause().getClass().isAssignableFrom(EntityException.class)) {\r\n                    int code = ((EntityException) e.getCause()).responseCode;\r\n                    throw new EntityException(e.getCause().getMessage() + \" (rethrown)\", ref + \"\", code);\r\n                } else if (e.getCause().getClass().isAssignableFrom(IllegalStateException.class)) {\r\n                    throw new IllegalStateException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                } else if (e.getCause().getClass().isAssignableFrom(SecurityException.class)) {\r\n                    throw new SecurityException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                }\r\n            }\r\n            throw new RuntimeException(\"Fatal error trying to execute custom action method: \" + customAction, e);\r\n        }\r\n    }\r\n    if (result != null) {\r\n        Class<?> resultClass = result.getClass();\r\n        if (Boolean.class.isAssignableFrom(resultClass)) {\r\n            boolean bool = ((Boolean) result).booleanValue();\r\n            if (bool) {\r\n                result = null;\r\n            } else {\r\n                throw new EntityNotFoundException(\"Could not find data for ref (\" + ref + \") from custom action (\" + action + \"), (returned boolean false)\", ref + \"\");\r\n            }\r\n        } else if (ActionReturn.class.isAssignableFrom(resultClass)) {\r\n            actionReturn = (ActionReturn) result;\r\n        } else if (OutputStream.class.isAssignableFrom(resultClass)) {\r\n            actionReturn = new ActionReturn(outputStream);\r\n        } else if (String.class.isAssignableFrom(resultClass)) {\r\n            actionReturn = new ActionReturn((String) result);\r\n        } else if (List.class.isAssignableFrom(resultClass)) {\r\n            List<EntityData> data = EntityDataUtils.convertToEntityData((List<?>) result, ref);\r\n            actionReturn = new ActionReturn(data, (String) null);\r\n        } else if (EntityData.class.isAssignableFrom(resultClass)) {\r\n            actionReturn = new ActionReturn((EntityData) result, (String) null);\r\n        } else {\r\n            EntityData ed = EntityDataUtils.makeEntityData(ref, result);\r\n            actionReturn = new ActionReturn(ed, (String) null);\r\n        }\r\n    }\r\n    return actionReturn;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.SessionComponent.isCurrentToolClusterable",
	"Comment": "checks the current tool id to determine if this tool is marked for clustering.",
	"Method": "boolean isCurrentToolClusterable(){\r\n    ToolManager toolManager = toolManager();\r\n    Tool tool = null;\r\n    if (toolManager != null) {\r\n        tool = toolManager.getCurrentTool();\r\n        if (tool != null) {\r\n            String toolId = tool.getId();\r\n            if (toolId != null) {\r\n                return clusterableTools.contains(toolId);\r\n            } else {\r\n                log.error(\"SessionComponent.isCurrentToolClusterable(): toolId was null.\");\r\n            }\r\n        }\r\n    } else {\r\n        log.error(\"SessionComponent.isCurrentToolClusterable(): toolManager was null.\");\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ComposeLogicImpl.compileUsers",
	"Comment": "compile a list of users based on user ids. does not include the current user.",
	"Method": "void compileUsers(ArrayList<User> users,Set<String> userIds){\r\n    for (String userId : userIds) {\r\n        try {\r\n            users.add(userDirectoryService.getUser(userId));\r\n        } catch (UserNotDefinedException e) {\r\n            log.warn(\"Unable to retrieve user: \" + userId);\r\n        }\r\n    }\r\n    Collections.sort(users, new UserComparator());\r\n}"
}, {
	"Path": "org.sakaiproject.content.util.ZipContentUtil.compressFolder",
	"Comment": "compresses a contentcollection to a new zip archive with the same folder name",
	"Method": "void compressFolder(Reference reference){\r\n    File temp = null;\r\n    FileInputStream fis = null;\r\n    ToolSession toolSession = SessionManager.getCurrentToolSession();\r\n    try {\r\n        ZipOutputStream out = null;\r\n        try {\r\n            temp = File.createTempFile(\"sakai_content-\", \".tmp\");\r\n            ContentCollection collection = ContentHostingService.getCollection(reference.getId());\r\n            out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(temp), BUFFER_SIZE), java.nio.charset.StandardCharsets.UTF_8);\r\n            storeContentCollection(reference.getId(), collection, out);\r\n        } finally {\r\n            if (out != null) {\r\n                try {\r\n                    out.close();\r\n                } catch (IOException e) {\r\n                }\r\n            }\r\n        }\r\n        String resourceId = reference.getId().substring(0, reference.getId().lastIndexOf(Entity.SEPARATOR));\r\n        String resourceName = extractName(resourceId);\r\n        String homeCollectionId = (String) toolSession.getAttribute(STATE_HOME_COLLECTION_ID);\r\n        if (homeCollectionId != null && homeCollectionId.equals(reference.getId())) {\r\n            resourceId = reference.getId() + resourceName;\r\n            String homeName = (String) toolSession.getAttribute(STATE_HOME_COLLECTION_DISPLAY_NAME);\r\n            if (homeName != null) {\r\n                resourceName = homeName;\r\n            }\r\n        }\r\n        int count = 0;\r\n        ContentResourceEdit resourceEdit = null;\r\n        String displayName = \"\";\r\n        while (true) {\r\n            try {\r\n                String newResourceId = resourceId;\r\n                String newResourceName = resourceName;\r\n                displayName = newResourceName;\r\n                count++;\r\n                if (count > 1) {\r\n                    newResourceId += \"_\" + count;\r\n                    newResourceName += \"_\" + count;\r\n                }\r\n                newResourceId += ZIP_EXTENSION;\r\n                newResourceName += ZIP_EXTENSION;\r\n                ContentCollectionEdit currentEdit;\r\n                if (reference.getId().split(Entity.SEPARATOR).length > 3) {\r\n                    currentEdit = (ContentCollectionEdit) ContentHostingService.getCollection(resourceId + Entity.SEPARATOR);\r\n                    displayName = currentEdit.getProperties().getProperty(ResourcePropertiesEdit.PROP_DISPLAY_NAME);\r\n                    if (displayName != null && displayName.length() > 0) {\r\n                        displayName += ZIP_EXTENSION;\r\n                    } else {\r\n                        displayName = newResourceName;\r\n                    }\r\n                }\r\n                resourceEdit = ContentHostingService.addResource(newResourceId);\r\n                resourceId = newResourceId;\r\n                resourceName = newResourceName;\r\n                break;\r\n            } catch (IdUsedException e) {\r\n            } catch (Exception e) {\r\n                throw new Exception(e);\r\n            }\r\n        }\r\n        fis = new FileInputStream(temp);\r\n        resourceEdit.setContent(fis);\r\n        resourceEdit.setContentType(mime.getContentType(resourceId));\r\n        ResourcePropertiesEdit props = resourceEdit.getPropertiesEdit();\r\n        props.addProperty(ResourcePropertiesEdit.PROP_DISPLAY_NAME, displayName);\r\n        ContentHostingService.commitResource(resourceEdit, NotificationService.NOTI_NONE);\r\n    } catch (PermissionException pE) {\r\n        addAlert(toolSession, rb.getString(\"permission_error_zip\"));\r\n        log.warn(pE.getMessage(), pE);\r\n    } catch (Exception e) {\r\n        addAlert(toolSession, rb.getString(\"generic_error_zip\"));\r\n        log.error(e.getMessage(), e);\r\n    } finally {\r\n        if (fis != null) {\r\n            try {\r\n                fis.close();\r\n            } catch (IOException e) {\r\n            }\r\n        }\r\n        if (temp != null && temp.exists()) {\r\n            if (!temp.delete()) {\r\n                log.warn(\"failed to remove temp file\");\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.EntityDataUtils.getResourceDetails",
	"Comment": "produces a summary of an content entity for display in entitybroker.",
	"Method": "EntityContent getResourceDetails(ContentEntity entity){\r\n    EntityContent tempRd = new EntityContent();\r\n    ResourceProperties properties = entity.getProperties();\r\n    Iterator propertyNames = properties.getPropertyNames();\r\n    while (propertyNames.hasNext()) {\r\n        String key = (String) propertyNames.next();\r\n        if (!directPropertyNames.contains(key)) {\r\n            String value = properties.getProperty(key);\r\n            if (null != value) {\r\n                tempRd.setProperty(key, value);\r\n            }\r\n        }\r\n    }\r\n    tempRd.setResourceId(entity.getId());\r\n    tempRd.setName(properties.getPropertyFormatted(ResourceProperties.PROP_DISPLAY_NAME));\r\n    tempRd.setDescription(properties.getProperty(ResourceProperties.PROP_DESCRIPTION));\r\n    tempRd.setCreator(properties.getProperty(ResourceProperties.PROP_CREATOR));\r\n    tempRd.setModifiedBy(properties.getProperty(ResourceProperties.PROP_MODIFIED_BY));\r\n    tempRd.setMimeType(properties.getProperty(ResourceProperties.PROP_CONTENT_TYPE));\r\n    tempRd.setPriority(properties.getProperty(ResourceProperties.PROP_CONTENT_PRIORITY));\r\n    tempRd.setSize(properties.getProperty(ResourceProperties.PROP_CONTENT_LENGTH));\r\n    tempRd.setReference(entity.getReference());\r\n    tempRd.setType(entity.getResourceType());\r\n    tempRd.setUrl(entity.getUrl());\r\n    tempRd.setRelease(entity.getReleaseDate());\r\n    tempRd.setRetract(entity.getRetractDate());\r\n    tempRd.setHidden(entity.isHidden());\r\n    try {\r\n        tempRd.setCreated(properties.getTimeProperty(ResourceProperties.PROP_CREATION_DATE));\r\n        tempRd.setModified(properties.getTimeProperty(ResourceProperties.PROP_MODIFIED_DATE));\r\n    } catch (EntityPropertyNotDefinedException e) {\r\n        log.warn(\"Failed to get property on \" + entity.getId(), e);\r\n    } catch (EntityPropertyTypeException e) {\r\n        log.warn(\"Incorrect property type on \" + entity.getId(), e);\r\n    }\r\n    return tempRd;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbBinarySingleStorage.valuesParams",
	"Comment": "form a string of n question marks with commas, for sql value statements,\tone for each item in the values array, or an empty string if null.",
	"Method": "String valuesParams(String[] fields){\r\n    if ((fields == null) || (fields.length == 0))\r\n        return \"\";\r\n    StringBuilder buf = new StringBuilder();\r\n    for (int i = 0; i < fields.length; i++) {\r\n        buf.append(\" ?,\");\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.producers.ShowPageProducer.createForumSummaryDialog",
	"Comment": "create a latest forum conversations dialog where user can enter other settings for the forum summary div",
	"Method": "void createForumSummaryDialog(UIContainer tofill,SimplePage currentPage){\r\n    UIOutput.make(tofill, \"add-forum-summary-dialog\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.forumSummaryLinkText\")));\r\n    UIForm form = UIForm.make(tofill, \"add-forum-summary-form\");\r\n    makeCsrf(form, \"csrf24\");\r\n    if (simplePageBean.getCurrentTool(simplePageBean.FORUMS_TOOL_ID) == null) {\r\n        UIOutput.make(tofill, \"forum-summary-error-div\");\r\n        UIOutput.make(tofill, \"forum-summary-error-span\", messageLocator.getMessage(\"simplepage.no_forum_tools\"));\r\n        UICommand.make(form, \"forum-summary-cancel\", messageLocator.getMessage(\"simplepage.cancel\"), null);\r\n        return;\r\n    }\r\n    UIInput.make(form, \"forumSummaryEditId\", \"#{simplePageBean.itemId}\");\r\n    String[] options = { \"5\", \"10\", \"15\", \"20\", \"30\", \"50\" };\r\n    String[] labels = { \"5\", \"10\", \"15\", \"20\", \"30\", \"50\" };\r\n    UIOutput.make(form, \"forumNumberDropdownLabel\", messageLocator.getMessage(\"simplepage.forum-number-dropdown-label\"));\r\n    UISelect.make(form, \"forumNumberDropdown\", options, labels, \"#{simplePageBean.forumSummaryDropDown}\", \"5\");\r\n    UICommand.make(form, \"forum-summary-add-item\", messageLocator.getMessage(\"simplepage.save_message\"), \"#{simplePageBean.addForumSummary}\");\r\n    UIInput.make(form, \"forum-summary-add-before\", \"#{simplePageBean.addBefore}\");\r\n    UICommand.make(form, \"forum-summary-cancel\", messageLocator.getMessage(\"simplepage.cancel\"), null);\r\n    UICommand.make(form, \"delete-forum-summary-item\", messageLocator.getMessage(\"simplepage.delete\"), \"#{simplePageBean.deleteItem}\");\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getContents",
	"Comment": "construct a list of decoratedpodcastbeans for display on main page",
	"Method": "List getContents(){\r\n    boolean folderHidden = false;\r\n    try {\r\n        if (podcastService.isPodcastFolderHidden(podcastService.getSiteId())) {\r\n            if (!podcastPermissionsService.hasPerm(PodcastPermissionsService.HIDDEN_PERMISSIONS, podcastService.retrievePodcastFolderId(podcastService.getSiteId()))) {\r\n                return new ArrayList();\r\n            } else {\r\n                folderHidden = true;\r\n            }\r\n        }\r\n        contents = podcastService.getPodcasts();\r\n        if (!podcastPermissionsService.canUpdateSite(podcastService.getSiteId())) {\r\n            contents = podcastService.filterPodcasts(contents);\r\n        }\r\n        EventTrackingService ets = (EventTrackingService) ComponentManager.get(EventTrackingService.class);\r\n        String podcastFolderId = podcastService.retrievePodcastFolderId(podcastService.getSiteId());\r\n        if (ets != null && podcastFolderId != null) {\r\n            ets.post(ets.newEvent(\"podcast.read\", podcastFolderId, false));\r\n        }\r\n    } catch (PermissionException e) {\r\n        log.warn(\"PermissionException getting podcasts for display in site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(PERMISSION_ALERT);\r\n    } catch (InUseException e) {\r\n        log.warn(\"InUseException while getting podcasts for display\" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(INTERNAL_ERROR_ALERT);\r\n    } catch (IdInvalidException e) {\r\n        log.error(\"IdInvalidException while getting podcasts for display \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(ID_INVALID_ALERT);\r\n    } catch (InconsistentException e) {\r\n        log.error(\"InconsistentException while getting podcasts for display \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(INTERNAL_ERROR_ALERT);\r\n        return null;\r\n    } catch (IdUsedException e) {\r\n        log.warn(\"IdUsedException while gettting podcasts for display \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n        setErrorMessage(ID_UNUSED_ALERT);\r\n    } catch (IdUnusedException e) {\r\n        log.warn(\"IdUnusedException while determining if Podcasts folder has HIDDEN permission set\" + \" for site \" + podcastService.getSiteId() + \". \" + e.getMessage(), e);\r\n    }\r\n    ArrayList decoratedPodcasts = new ArrayList();\r\n    if (contents != null) {\r\n        Iterator podcastIter = contents.iterator();\r\n        while (podcastIter.hasNext()) {\r\n            try {\r\n                final ContentResource podcastResource = (ContentResource) podcastIter.next();\r\n                ResourceProperties podcastProperties = podcastResource.getProperties();\r\n                DecoratedPodcastBean podcastInfo = getAPodcast(podcastResource, folderHidden);\r\n                if (podcastInfo != null)\r\n                    decoratedPodcasts.add(podcastInfo);\r\n            } catch (EntityPropertyNotDefinedException e) {\r\n                log.error(\"EntityPropertyNotDefinedException while creating DecoratedPodcastBean \" + \" for site \" + podcastService.getSiteId() + \". SKIPPING...\" + e.getMessage(), e);\r\n            } catch (EntityPropertyTypeException e) {\r\n                log.error(\"EntityPropertyTypeException while creating DecoratedPodcastBean \" + \" for site \" + podcastService.getSiteId() + \". SKIPPING...\" + e.getMessage(), e);\r\n            }\r\n        }\r\n    }\r\n    return decoratedPodcasts;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteCacheImpl.updateSiteCacheStatistics",
	"Comment": "note that events happen only when there is a change to the contents of the cache \tso with an efficient cache configuration the tracking of the events will not be expensive.\tif the cache configuration is not efficient then you want to know about it.",
	"Method": "void updateSiteCacheStatistics(){\r\n    if (cacheEventReportInterval == 0) {\r\n        return;\r\n    }\r\n    ++cacheEventCount;\r\n    if (cacheEventCount % cacheEventReportInterval != 0) {\r\n        return;\r\n    }\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"SiteCacheSafe:\" + \" eventCount: \" + cacheEventCount + \" tools: \" + m_tools.size() + \" pages: \" + m_pages.size() + \" groups: \" + m_groups.size());\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.test.ContentHostingServiceTest.testMimeDetection",
	"Comment": "test mime type detector, might be useful to test it off as well",
	"Method": "void testMimeDetection(){\r\n    List<String> fileNames = Arrays.asList(\"testEXCEL.mp3\", \"testWORD.doc\", \"testHTML.html\", \"testEXCEL\", \"LSNBLDR-359-snippet.html\", \"testCSS.css\", \"testHTMLbody.html\", \"jquery-1.6.1.min.js\");\r\n    List<String> expectedMimes = Arrays.asList(\"application/vnd.ms-excel\", \"application/msword\", \"text/html\", \"application/vnd.ms-excel\", \"text/html\", \"text/css\", \"text/html\", \"application/javascript\");\r\n    ServerConfigurationService serv = getService(ServerConfigurationService.class);\r\n    serv.registerConfigItem(BasicConfigItem.makeConfigItem(\"content.useMimeMagic\", \"true\", ServerConfigurationService.UNKNOWN));\r\n    serv.registerConfigItem(BasicConfigItem.makeConfigItem(\"content.mimeMagic.ignorecontent.extensions.count\", \"1\", ServerConfigurationService.UNKNOWN));\r\n    serv.registerConfigItem(BasicConfigItem.makeConfigItem(\"content.mimeMagic.ignorecontent.extensions.1\", \"js\", ServerConfigurationService.UNKNOWN));\r\n    ContentHostingService ch = getService(ContentHostingService.class);\r\n    SessionManager sm = getService(SessionManager.class);\r\n    Session session = sm.getCurrentSession();\r\n    session.setUserEid(\"admin\");\r\n    session.setUserId(\"admin\");\r\n    ContentResource cr;\r\n    InputStream stream;\r\n    for (int i = 0; i < fileNames.size(); i++) {\r\n        String fileName = fileNames.get(i);\r\n        String CHSfileName = \"/\" + fileName;\r\n        log.debug(\"Loading up file: {}\", fileName);\r\n        stream = this.getClass().getResourceAsStream(\"/test-documents\" + CHSfileName);\r\n        Assert.assertNotNull(stream);\r\n        ResourcePropertiesEdit props = ch.newResourceProperties();\r\n        props.addProperty(ResourceProperties.PROP_DISPLAY_NAME, fileName);\r\n        ch.addResource(CHSfileName, \"\", stream, props, 0);\r\n        cr = ch.getResource(CHSfileName);\r\n        log.debug(\"Expecting mime:{} and got {}\", expectedMimes.get(i), cr.getContentType());\r\n        Assert.assertEquals(cr.getContentType(), expectedMimes.get(i));\r\n        stream.close();\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityDescriptionManager.makeRedirectLink",
	"Comment": "turn a redirect template into html for a link if it has no variables in it,otherwise output the text of the template in a span with bold",
	"Method": "String makeRedirectLink(String redirect,String prefixURL){\r\n    String html = redirect;\r\n    if (redirect.indexOf(\"{\") > 0 && redirect.indexOf(\"}\") > 0) {\r\n        html = \"<span style='font-weight:bold;'>\" + redirect + \"<\/span>\";\r\n    } else {\r\n        html = \"<a style='font-weight:bold;' href='\" + prefixURL + redirect + \"'>\" + redirect + \"<\/a>\";\r\n    }\r\n    return html;\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlDefault.getRecordAlreadyExists",
	"Comment": "returns whether the sql exception indicates that a record already exists in a table.",
	"Method": "boolean getRecordAlreadyExists(SQLException ex){\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.entity.impl.ReferenceVectorComponent.contains",
	"Comment": "is this resource referred to in any of the references in the vector? accept any resource, or a string assumed to be a resource reference.",
	"Method": "boolean contains(Object o){\r\n    if ((o instanceof Entity) || (o instanceof String) || (o instanceof Reference)) {\r\n        String ref = null;\r\n        if (o instanceof Entity) {\r\n            ref = ((Entity) o).getReference();\r\n        } else if (o instanceof String) {\r\n            ref = (String) o;\r\n        } else {\r\n            ref = ((Reference) o).getReference();\r\n        }\r\n        Iterator it = iterator();\r\n        while (it.hasNext()) {\r\n            Reference de = (Reference) it.next();\r\n            if (de.getReference().equals(ref))\r\n                return true;\r\n        }\r\n        return false;\r\n    } else\r\n        return super.contains(o);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.importExport.GradeImportConfirmationStep.makeAssignmentsToCreateListView",
	"Comment": "helper to create a listview for what needs to be shown for new assignments",
	"Method": "ListView<Assignment> makeAssignmentsToCreateListView(String markupId,List<Assignment> itemList){\r\n    final ListView<Assignment> rval = new ListView<Assignment>(markupId, itemList) {\r\n        @Override\r\n        protected void populateItem(final ListItem<Assignment> item) {\r\n            final Assignment assignment = item.getModelObject();\r\n            String extraCredit = assignment.isExtraCredit() ? yes : no;\r\n            String dueDate = FormatHelper.formatDate(assignment.getDueDate(), \"\");\r\n            String releaseToStudents = assignment.isReleased() ? yes : no;\r\n            String includeInCourseGrades = assignment.isCounted() ? yes : no;\r\n            item.add(new Label(\"title\", assignment.getName()));\r\n            item.add(new Label(\"points\", assignment.getPoints()));\r\n            item.add(new Label(\"extraCredit\", extraCredit));\r\n            item.add(new Label(\"dueDate\", dueDate));\r\n            item.add(new Label(\"releaseToStudents\", releaseToStudents));\r\n            item.add(new Label(\"includeInCourseGrades\", includeInCourseGrades));\r\n        }\r\n    };\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.importExport.GradeImportConfirmationStep.makeAssignmentsToCreateListView",
	"Comment": "helper to create a listview for what needs to be shown for new assignments",
	"Method": "ListView<Assignment> makeAssignmentsToCreateListView(String markupId,List<Assignment> itemList){\r\n    final Assignment assignment = item.getModelObject();\r\n    String extraCredit = assignment.isExtraCredit() ? yes : no;\r\n    String dueDate = FormatHelper.formatDate(assignment.getDueDate(), \"\");\r\n    String releaseToStudents = assignment.isReleased() ? yes : no;\r\n    String includeInCourseGrades = assignment.isCounted() ? yes : no;\r\n    item.add(new Label(\"title\", assignment.getName()));\r\n    item.add(new Label(\"points\", assignment.getPoints()));\r\n    item.add(new Label(\"extraCredit\", extraCredit));\r\n    item.add(new Label(\"dueDate\", dueDate));\r\n    item.add(new Label(\"releaseToStudents\", releaseToStudents));\r\n    item.add(new Label(\"includeInCourseGrades\", includeInCourseGrades));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.BasicPodfeedService.storeProperty",
	"Comment": "stores the property propvalue in the podcasts folder resource under the name propname",
	"Method": "void storeProperty(String propName,String propValue,String siteId){\r\n    ContentCollectionEdit contentCollection = null;\r\n    try {\r\n        contentCollection = podcastService.getContentCollectionEditable(siteId);\r\n        ResourcePropertiesEdit rp = contentCollection.getPropertiesEdit();\r\n        if (rp.getProperty(propName) != null) {\r\n            rp.removeProperty(propName);\r\n        }\r\n        rp.addProperty(propName, propValue);\r\n        podcastService.commitContentCollection(contentCollection);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage() + \" attempting to add property \" + propName + \" for site: \" + siteId + \". \" + e.getMessage(), e);\r\n        podcastService.cancelContentCollection(contentCollection);\r\n        throw new PodcastException(e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.impl.EntityBrokerManagerImpl.fetchEntity",
	"Comment": "get an entity object of some kind for this reference if it has an id,will simply return null if no id is available in this reference",
	"Method": "Object fetchEntity(EntityReference ref){\r\n    if (ref == null) {\r\n        throw new IllegalArgumentException(\"ref cannot be null\");\r\n    }\r\n    Object entity = fetchEntityObject(ref);\r\n    if (entity != null) {\r\n        entity = EntityDataUtils.convertToEntity(entity);\r\n    }\r\n    return entity;\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.BaseUserDirectoryService.assureUuid",
	"Comment": "make sure we have a good uuid for a user record. if id is specified, use that. otherwise get one from the provider or allocate a uuid.",
	"Method": "String assureUuid(String id,String eid){\r\n    if (!m_separateIdEid)\r\n        return eid;\r\n    if (id != null)\r\n        return id;\r\n    id = idManager().createUuid();\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.util.ToolListener.getToolsFolders",
	"Comment": "this locates the tool registration folder inside the webapp.",
	"Method": "Collection<String> getToolsFolders(ServletContext context){\r\n    String path = context.getInitParameter(PATH);\r\n    Collection<String> paths;\r\n    if (path == null) {\r\n        Collection<String> defaultPaths = new LinkedList();\r\n        defaultPaths.add(\"/WEB-INF/tools/\");\r\n        defaultPaths.add(\"/tools/\");\r\n        paths = defaultPaths;\r\n    } else {\r\n        if (!path.startsWith(\"/\")) {\r\n            path = \"/\" + path;\r\n        }\r\n        if (!path.endsWith(\"/\")) {\r\n            path = path + \"/\";\r\n        }\r\n        paths = Collections.singleton(path);\r\n    }\r\n    return paths;\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.BaseUserDirectoryService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : serverConfigurationService().getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder7Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder7Sql(){\r\n    return \"SAKAI_SITE.PUBLISHED ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.editMultimedia",
	"Comment": "called by edit multimedia dialog to change parameters in a multimedia item",
	"Method": "String editMultimedia(){\r\n    if (!itemOk(itemId))\r\n        return \"permission-failed\";\r\n    if (!canEditPage())\r\n        return \"permission-failed\";\r\n    if (!checkCsrf())\r\n        return \"permission-failed\";\r\n    SimplePageItem i = findItem(itemId);\r\n    if (i != null && i.getType() == SimplePageItem.MULTIMEDIA) {\r\n        i.setHeight(height);\r\n        i.setWidth(width);\r\n        i.setAlt(alt);\r\n        i.setDescription(description);\r\n        i.setHtml(mimetype);\r\n        i.setPrerequisite(this.prerequisite);\r\n        setItemGroups(i, selectedGroups);\r\n        update(i);\r\n        return \"success\";\r\n    } else {\r\n        log.warn(\"editMultimedia Could not find multimedia object: {}\", itemId);\r\n        return \"cancel\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.MultiSingleStorageSqlDefault.getNumRowsSql",
	"Comment": "returns the sql statement which retrieves the number of rows in the specified table.",
	"Method": "String getNumRowsSql(String table,String getNumRowsSql,String table,String where){\r\n    return \"select count(1) from \" + table + \" \" + where;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.getConfigurableJobErrorMessages",
	"Comment": "returns validation errors which have occured during the editting of properties for a configurablejobbeanwrapper.",
	"Method": "List<String> getConfigurableJobErrorMessages(){\r\n    return configurableJobErrorMessages;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.BasicPodfeedService.getPodfeedTitle",
	"Comment": "returns the podfeed global title from content hosting via the podcastservice",
	"Method": "String getPodfeedTitle(String getPodfeedTitle,String siteId){\r\n    String feedTitle = null;\r\n    try {\r\n        ResourceProperties rp = getPodcastCollectionProperties(siteId);\r\n        feedTitle = rp.getProperty(PODFEED_TITLE);\r\n        if (feedTitle == null) {\r\n            feedTitle = siteService.getSite(siteId).getTitle() + getMessageBundleString(FEED_TITLE_STRING);\r\n            log.info(\"No saved feed title found for site: \" + siteId + \". Using \" + feedTitle);\r\n        }\r\n    } catch (IdUnusedException e) {\r\n        log.error(\"IdUnusedException attempting to get feed title (getting podcast folder) \" + \"for site: \" + siteId + \". \" + e.getMessage(), e);\r\n        throw new PodcastException(e);\r\n    }\r\n    return feedTitle;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.canEditPage",
	"Comment": "returns true if user has site.upd, simplepage.upd, or is page owner.\tfalse otherwise.",
	"Method": "boolean canEditPage(){\r\n    return getEditPrivs() <= 1;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ConfigLogicImpl.isAddToArchive",
	"Comment": "retrieve the add to email archive option from the tool configuration",
	"Method": "boolean isAddToArchive(Properties props){\r\n    String emailarchive = props.getProperty(ConfigParams.emailarchive.name());\r\n    boolean addToArchive = parseConfigBoolean(emailarchive);\r\n    return addToArchive;\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.entityprovider.MailArchiveEntityProvider.getMailArchiveMessage",
	"Comment": "get a decoratedmailarchivemessage given the siteid, channelid and\tmailarchivemessageid",
	"Method": "DecoratedMailArchiveMessage getMailArchiveMessage(String siteId,String channelId,String mailArchiveMessageId){\r\n    if (mailArchiveMessageId == null || mailArchiveMessageId.length() == 0) {\r\n        throw new IllegalArgumentException(\"You must supply an mailArchiveMessageId\");\r\n    }\r\n    if (siteId == null || siteId.length() == 0) {\r\n        throw new IllegalArgumentException(\"You must supply the siteId.\");\r\n    }\r\n    if (channelId == null || channelId.length() == 0) {\r\n        throw new IllegalArgumentException(\"You must supply an channelId\");\r\n    }\r\n    String ref = mailArchiveService.channelReference(siteId, channelId);\r\n    try {\r\n        MailArchiveChannel channel = mailArchiveService.getMailArchiveChannel(ref);\r\n        MailArchiveMessage message = channel.getMailArchiveMessage(mailArchiveMessageId);\r\n        return createDecoratedMailArchiveMessage(message, null);\r\n    } catch (IdUnusedException e) {\r\n        throw new EntityNotFoundException(\"Couldn't find: \" + e.getId(), e.getId());\r\n    } catch (PermissionException e) {\r\n        throw new EntityException(\"You don't have permissions to access this channel.\", e.getResource(), 403);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.HttpRESTUtils.fireRequest",
	"Comment": "fire off a request to a url using the specified method but reuse the client for efficiency,include optional params and data in the request,the response data will be returned in the object if the request can be carried out",
	"Method": "HttpResponse fireRequest(String URL,Method method,HttpResponse fireRequest,String URL,Method method,Map<String, String> params,HttpResponse fireRequest,String URL,Method method,Map<String, String> params,Object data,boolean guaranteeSSL,HttpResponse fireRequest,String URL,Method method,Map<String, String> params,Map<String, String> headers,Object data,boolean guaranteeSSL,HttpResponse fireRequest,HttpClientWrapper httpClientWrapper,String URL,Method method,Map<String, String> params,Object data,boolean guaranteeSSL,HttpResponse fireRequest,HttpClientWrapper httpClientWrapper,String URL,Method method,Map<String, String> params,Map<String, String> headers,Object data,boolean guaranteeSSL){\r\n    if (guaranteeSSL) {\r\n        Protocol myhttps = new Protocol(\"https\", new EasySSLProtocolSocketFactory(), 443);\r\n        Protocol.registerProtocol(\"https\", myhttps);\r\n    }\r\n    if (httpClientWrapper == null || httpClientWrapper.getHttpClient() == null) {\r\n        httpClientWrapper = makeReusableHttpClient(false, 0, null);\r\n    }\r\n    HttpMethod httpMethod = null;\r\n    if (method.equals(Method.GET)) {\r\n        GetMethod gm = new GetMethod(URL);\r\n        gm.setQueryString(mergeQueryStringWithParams(gm.getQueryString(), params));\r\n        if (data != null) {\r\n            log.warn(\"Data cannot be passed in GET requests, data will be ignored (org.sakaiproject.entitybroker.util.http.HttpUtils#fireRequest)\");\r\n        }\r\n        gm.setFollowRedirects(true);\r\n        httpMethod = gm;\r\n    } else if (method.equals(Method.POST)) {\r\n        PostMethod pm = new PostMethod(URL);\r\n        if (params != null) {\r\n            for (Entry<String, String> entry : params.entrySet()) {\r\n                if (entry.getKey() == null || entry.getValue() == null) {\r\n                    log.warn(\"null value supplied for param name (\" + entry.getKey() + \") or value (\" + entry.getValue() + \") (org.sakaiproject.entitybroker.util.http.HttpUtils#fireRequest)\");\r\n                }\r\n                pm.addParameter(entry.getKey(), entry.getValue());\r\n            }\r\n        }\r\n        handleRequestData(pm, data);\r\n        httpMethod = pm;\r\n    } else if (method.equals(Method.PUT)) {\r\n        PutMethod pm = new PutMethod(URL);\r\n        pm.setQueryString(mergeQueryStringWithParams(pm.getQueryString(), params));\r\n        handleRequestData(pm, data);\r\n        httpMethod = pm;\r\n    } else if (method.equals(Method.DELETE)) {\r\n        DeleteMethod dm = new DeleteMethod(URL);\r\n        dm.setQueryString(mergeQueryStringWithParams(dm.getQueryString(), params));\r\n        if (data != null) {\r\n            log.warn(\"Data cannot be passed in DELETE requests, data will be ignored (org.sakaiproject.entitybroker.util.http.HttpUtils#fireRequest)\");\r\n        }\r\n        httpMethod = dm;\r\n    } else {\r\n        throw new IllegalArgumentException(\"Cannot handle method: \" + method);\r\n    }\r\n    if (headers != null) {\r\n        for (Entry<String, String> entry : headers.entrySet()) {\r\n            httpMethod.addRequestHeader(entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n    HttpResponse response = null;\r\n    try {\r\n        int responseCode = httpClientWrapper.getHttpClient().executeMethod(httpMethod);\r\n        response = new HttpResponse(responseCode);\r\n        InputStream is = httpMethod.getResponseBodyAsStream();\r\n        StringBuffer out = new StringBuffer();\r\n        byte[] b = new byte[4096];\r\n        for (int n; (n = is.read(b)) != -1; ) {\r\n            out.append(new String(b, 0, n));\r\n            if (out.length() > MAX_RESPONSE_SIZE_CHARS) {\r\n                throw new HttpRequestException(\"Response size (\" + out.length() + \" chars) from url (\" + URL + \") exceeded the maximum allowed batch response size (\" + MAX_RESPONSE_SIZE_CHARS + \" chars) while processing the response\");\r\n            }\r\n        }\r\n        String body = out.toString();\r\n        response.setResponseBody(body);\r\n        response.setResponseMessage(httpMethod.getStatusText());\r\n        HashMap<String, String[]> responseHeaders = new HashMap<String, String[]>();\r\n        Header[] respHeaders = httpMethod.getResponseHeaders();\r\n        for (int i = 0; i < respHeaders.length; i++) {\r\n            Header header = respHeaders[i];\r\n            HeaderElement[] elements = header.getElements();\r\n            if (elements == null || elements.length == 0) {\r\n                continue;\r\n            } else if (elements.length >= 1) {\r\n                String[] values = new String[elements.length];\r\n                StringBuilder sb = new StringBuilder();\r\n                for (int j = 0; j < elements.length; j++) {\r\n                    sb.setLength(0);\r\n                    sb.append(elements[j].getName());\r\n                    if (elements[j].getValue() != null) {\r\n                        sb.append(\"=\");\r\n                        sb.append(elements[j].getValue());\r\n                    }\r\n                    values[j] = sb.toString();\r\n                }\r\n                responseHeaders.put(header.getName(), values);\r\n            }\r\n        }\r\n        response.setResponseHeaders(responseHeaders);\r\n    } catch (HttpException he) {\r\n        throw new HttpRequestException(\"Fatal HTTP Request Error: \" + \"Could not sucessfully fire request to url (\" + URL + \") using method (\" + method + \")  :: \" + he.getMessage(), he);\r\n    } catch (IOException ioe) {\r\n        throw new HttpIOException(\"IOException (transport/connection) Error: \" + \"Could not sucessfully fire request to url (\" + URL + \") using method (\" + method + \")  :: \" + ioe.getMessage(), ioe);\r\n    } finally {\r\n        httpMethod.releaseConnection();\r\n    }\r\n    return response;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.SettingsGradingSchemaPanel.getBottomPercents",
	"Comment": "helper to determine and return the applicable grading schema bottom percents, depending on current state",
	"Method": "Map<String, Double> getBottomPercents(){\r\n    Map<String, Double> bottomPercents;\r\n    this.gradingSchemaName = getGradingSchema(this.currentGradeMappingId).getName();\r\n    if (StringUtils.equals(this.currentGradeMappingId, this.configuredGradeMappingId)) {\r\n        bottomPercents = this.model.getObject().getGradebookInformation().getSelectedGradingScaleBottomPercents();\r\n    } else {\r\n        bottomPercents = GradeMappingDefinition.sortGradeMapping(getGradingSchema(this.currentGradeMappingId).getDefaultBottomPercents());\r\n    }\r\n    return bottomPercents;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.hardDelete",
	"Comment": "implementation of harddeleteaware to allow content to be fully purged",
	"Method": "void hardDelete(String siteId){\r\n    if (m_siteService.isSpecialSite(siteId)) {\r\n        log.error(\"hardDelete rejected special site: {}\", siteId);\r\n        return;\r\n    }\r\n    String collectionId = getSiteCollection(siteId);\r\n    if (!isSiteLevelCollection(collectionId)) {\r\n        log.error(\"hardDelete rejected on non site collection: {}\", collectionId);\r\n        return;\r\n    }\r\n    log.info(\"hardDelete proceeding on collectionId: {}\", collectionId);\r\n    try {\r\n        List<ContentResource> resources = getAllResources(collectionId);\r\n        for (ContentResource resource : resources) {\r\n            log.debug(\"Removing resource: \" + resource.getId());\r\n            removeResource(resource.getId());\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(\"Failed to remove content.\", e);\r\n    }\r\n    try {\r\n        List<ContentResource> deletedResources = getAllDeletedResources(collectionId);\r\n        for (ContentResource deletedResource : deletedResources) {\r\n            log.debug(\"Removing deleted resource: \" + deletedResource.getId());\r\n            removeDeletedResource(deletedResource.getId());\r\n        }\r\n    } catch (Exception e) {\r\n        log.warn(\"Failed to remove some content.\", e);\r\n    }\r\n    try {\r\n        log.debug(\"Removing collection: \" + collectionId);\r\n        removeCollection(collectionId);\r\n    } catch (Exception e) {\r\n        log.warn(\"Failed to remove collection {}.\", collectionId, e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDualSingleStorage.caseId",
	"Comment": "fix the case of resource ids to support case insensitive ids if enabled",
	"Method": "String caseId(String id){\r\n    if (m_caseInsensitive) {\r\n        return id.toLowerCase();\r\n    }\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere11Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere11Sql(){\r\n    return \"SAKAI_SITE_USER.PERMISSION <= SAKAI_SITE.PUBLISHED and \";\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.updateMovie",
	"Comment": "used by edit dialog to update properties of a multimedia object",
	"Method": "void updateMovie(){\r\n    if (!itemOk(itemId))\r\n        return;\r\n    if (!canEditPage())\r\n        return;\r\n    if (!checkCsrf())\r\n        return;\r\n    SimplePageItem item = findItem(itemId);\r\n    item.setHeight(height);\r\n    item.setWidth(width);\r\n    item.setDescription(description);\r\n    item.setPrerequisite(prerequisite);\r\n    item.setHtml(mimetype);\r\n    setItemGroups(item, selectedGroups);\r\n    update(item);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getDisplayNoFileErrMsg",
	"Comment": "returns whether a no file selected error message is displayed",
	"Method": "boolean getDisplayNoFileErrMsg(){\r\n    return displayNoFileErrMsg;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.core.EntityProviderMethodStoreImpl.validateRedirectParamTypes",
	"Comment": "validates the parameter types on a method to make sure they are valid",
	"Method": "Class<?>[] validateRedirectParamTypes(Class<?>[] paramTypes,String methodName){\r\n    try {\r\n        return validateParamTypes(paramTypes, validRedirectParamTypes);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new IllegalArgumentException(\"Invalid redirect method (\" + methodName + \"): \" + e.getMessage(), e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.getUserRoles",
	"Comment": "returns a list of all roles a user has for all sites\tthey are a member of",
	"Method": "List getUserRoles(List siteList){\r\n    if (userRoles == null) {\r\n        userRoles = new UniqueArrayList();\r\n        final Iterator siteIter = siteList.iterator();\r\n        List roles;\r\n        while (siteIter.hasNext()) {\r\n            String siteId = (String) siteIter.next();\r\n            roles = getCurrentUserMembershipsBySite(siteId);\r\n            for (Iterator i = roles.iterator(); i.hasNext(); ) {\r\n                String roleGroupName = (String) i.next();\r\n                if (!userRoles.contains(roleGroupName)) {\r\n                    userRoles.addAll(roles);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return userRoles;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.HttpRESTUtils.parseURLintoParams",
	"Comment": "get the query parameters out of a query string and return them as a map,this can be",
	"Method": "Map<String, String> parseURLintoParams(String urlString){\r\n    if (urlString == null) {\r\n        throw new IllegalArgumentException(\"URLstring must not be null\");\r\n    }\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    int questionLoc = urlString.indexOf('?');\r\n    if (questionLoc >= 0) {\r\n        if (questionLoc + 1 < urlString.length()) {\r\n            urlString = urlString.substring(questionLoc + 1);\r\n        }\r\n    }\r\n    if (urlString.indexOf('=') > 0) {\r\n        String[] params = urlString.split(\"&\");\r\n        for (String param : params) {\r\n            int eqLoc = param.indexOf('=');\r\n            if (eqLoc > 0 && eqLoc < param.length()) {\r\n                String name = param.substring(0, eqLoc);\r\n                String value = param.substring(eqLoc + 1);\r\n                map.put(name, value);\r\n            }\r\n        }\r\n    }\r\n    return map;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.jsf.HierPvtMsgDataTableRender.getFacetCount",
	"Comment": "return the number of child uicolumn components nested in\tthe specified uidata that have a facet with the specified\tname.",
	"Method": "int getFacetCount(UIData data,String name){\r\n    int n = 0;\r\n    Iterator kids = getColumns(data);\r\n    while (kids.hasNext()) {\r\n        UIComponent kid = (UIComponent) kids.next();\r\n        if (getFacet(kid, name) != null) {\r\n            n++;\r\n        }\r\n    }\r\n    return (n);\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhereSoftlyDeletedOnlySql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites which are softly deleted",
	"Method": "String getSitesWhereSoftlyDeletedOnlySql(){\r\n    return \"SAKAI_SITE.IS_SOFTLY_DELETED = '1' and \";\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.MyNonPortableSession.removeAttribute",
	"Comment": "removes the object bound with the specified name from this session. if the session does not have an object bound with the specified name, this method does nothing.\tafter this method executes, and if the object implements sessionbindinglistener, sakai calls sessionbindinglistener.valueunbound.",
	"Method": "Object removeAttribute(String name){\r\n    return m_attributes.remove(name);\r\n}"
}, {
	"Path": "org.sakaiproject.cluster.impl.SakaiClusterService.setClusterServiceSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setClusterServiceSql(String vendor){\r\n    this.clusterServiceSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.copyRanges",
	"Comment": "copy the contents of the specified input stream to the specifiedoutput stream in a set of chunks as per the specified ranges.",
	"Method": "void copyRanges(ContentResource content,OutputStream out,Iterator ranges,String contentType){\r\n    IOException exception = null;\r\n    while ((exception == null) && (ranges.hasNext())) {\r\n        Range currentRange = (Range) ranges.next();\r\n        IOUtils.write(\"\\r\\n--\" + MIME_SEPARATOR + \"\\r\\n\", out);\r\n        if (contentType != null)\r\n            IOUtils.write(\"Content-Type: \" + contentType + \"\\r\\n\", out);\r\n        IOUtils.write(\"Content-Range: bytes \" + currentRange.start + \"-\" + currentRange.end + \"/\" + currentRange.length + \"\\r\\n\", out);\r\n        IOUtils.write(\"\\r\\n\", out);\r\n        InputStream in = null;\r\n        try {\r\n            in = content.streamContent();\r\n        } catch (ServerOverloadException se) {\r\n            exception = new IOException(\"ServerOverloadException reported getting inputstream\");\r\n            throw exception;\r\n        }\r\n        InputStream istream = new BufferedInputStream(in, STREAM_BUFFER_SIZE);\r\n        exception = copyRange(istream, out, currentRange.start, currentRange.end);\r\n        try {\r\n            istream.close();\r\n        } catch (IOException e) {\r\n        }\r\n    }\r\n    IOUtils.write(\"\\r\\n--\" + MIME_SEPARATOR + \"--\\r\\n\", out);\r\n    if (exception != null) {\r\n        throw exception;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.processPrepRunJobNow",
	"Comment": "determines if the job has configuration properties which might need to be overriden when thejob is run. if so this redirects to a property configuration screen. otherwise it simply continuesto a confirmation screen.",
	"Method": "String processPrepRunJobNow(){\r\n    Scheduler scheduler = schedulerManager.getScheduler();\r\n    if (scheduler == null) {\r\n        log.error(\"Scheduler is down!\");\r\n        return \"error\";\r\n    }\r\n    try {\r\n        JobDetail jd = selectedJobDetailWrapper.getJobDetail();\r\n        JobBeanWrapper job = getSchedulerManager().getJobBeanWrapper(selectedJobDetailWrapper.getJobType());\r\n        if (job != null) {\r\n            if (ConfigurableJobBeanWrapper.class.isAssignableFrom(job.getClass())) {\r\n                final ConfigurableJobBeanWrapper configurableJob = (ConfigurableJobBeanWrapper) job;\r\n                setJobDetail(jd);\r\n                setConfigurableJobBeanWrapper(configurableJob);\r\n                return \"edit_runnow_properties\";\r\n            } else {\r\n                setConfigurableJobBeanWrapper(null);\r\n                setJobDetail(null);\r\n            }\r\n        }\r\n        return \"run_job_confirm\";\r\n    } catch (Exception e) {\r\n        log.error(\"Failed to run job now.\", e);\r\n        return \"error\";\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonBuilderEntityProducer.fixItems",
	"Comment": "fix up items on page. does any updates that need the whole page and item map",
	"Method": "void fixItems(Element element,String oldServer,String siteId,String fromSiteId,Map<Long, Long> pageMap,Map<Long, Long> itemMap){\r\n    String oldSiteId = element.getAttribute(\"siteid\");\r\n    String oldPageIdString = element.getAttribute(\"pageid\");\r\n    Long oldPageId = Long.valueOf(oldPageIdString);\r\n    Long pageId = pageMap.get(oldPageId);\r\n    Site site = null;\r\n    List<SimplePageItem> items = simplePageToolDao.findItemsOnPage(pageId);\r\n    if (items == null)\r\n        return;\r\n    for (SimplePageItem item : items) {\r\n        if (item.getType() == SimplePageItem.TEXT) {\r\n            String s = item.getHtml();\r\n            if (s != null) {\r\n                String fixed = fixUrls(s, oldServer, siteId, fromSiteId, itemMap);\r\n                if (!s.equals(fixed)) {\r\n                    item.setHtml(fixed);\r\n                    simplePageToolDao.quickUpdate(item);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.EntityDataUtils.translateSearchReference",
	"Comment": "adds in a search restriction based on existing restrictions,this is ideally setup to convert restrictions into one that the developers expect",
	"Method": "boolean translateSearchReference(Search search,String key,String[] keys,String valuePrefix){\r\n    boolean added = false;\r\n    if (search.getRestrictionByProperty(key) == null) {\r\n        Restriction r = findSearchRestriction(search, key, keys, valuePrefix);\r\n        if (r != null) {\r\n            search.addRestriction(r);\r\n        }\r\n    }\r\n    return added;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.processCancelRevise",
	"Comment": "resets selectedpodcast bean since no revision is to be made",
	"Method": "String processCancelRevise(){\r\n    selectedPodcast = null;\r\n    date = null;\r\n    title = \"\";\r\n    description = \"\";\r\n    try {\r\n        fileAsStream = null;\r\n    } catch (Exception e) {\r\n        log.warn(\"Exception error while setting the stream to null: \" + e);\r\n    } finally {\r\n        try {\r\n            if (fileAsStream != null)\r\n                fileAsStream.close();\r\n        } catch (IOException ioe) {\r\n            log.warn(\"IOException error while closing the stream:\" + ioe);\r\n        }\r\n    }\r\n    filename = \"\";\r\n    displayInvalidDateErrMsg = false;\r\n    displayNoTitleErrMsg = false;\r\n    return \"cancel\";\r\n}"
}, {
	"Path": "org.sakaiproject.util.BasicConfigItem.makeDefaultedConfigItem",
	"Comment": "create a config item which stores a default value but does not have an actual value",
	"Method": "ConfigItem makeDefaultedConfigItem(String name,Object defaultValue,String source){\r\n    return new BasicConfigItem(name, null, defaultValue, null, source, false);\r\n}"
}, {
	"Path": "org.sakaiproject.util.MultiSingleStorageSqlDefault.getXmlLikeSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table.",
	"Method": "String getXmlLikeSql(String field,String table){\r\n    return \"select \" + storageFields + \" from \" + table + \" where \" + field + \" like ?\";\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.BasePreferencesService.preferencesId",
	"Comment": "access the preferences id extracted from a preferences reference.",
	"Method": "String preferencesId(String ref){\r\n    String start = getAccessPoint(true) + Entity.SEPARATOR;\r\n    int i = ref.indexOf(start);\r\n    if (i == -1)\r\n        return ref;\r\n    String id = ref.substring(i + start.length());\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ConfigLogicImpl.getSubjectPrefixType",
	"Comment": "determines the type of subject prefix by comparing the prefix to null and to the default,\tsystem wide prefix.",
	"Method": "String getSubjectPrefixType(Properties props){\r\n    String prefixType = SubjectPrefixType.system.name();\r\n    String subjectPrefix = props.getProperty(ConfigParams.subjectprefix.name());\r\n    if (StringUtils.trimToNull(subjectPrefix) != null && !getDefaultSubjectPrefix().equals(subjectPrefix)) {\r\n        prefixType = SubjectPrefixType.custom.name();\r\n    }\r\n    return prefixType;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.equals",
	"Comment": "returns true if the blob is equal to the given object.\t true only if supplied object is a blob and the two contain\t exactly the same data.",
	"Method": "boolean equals(Object o){\r\n    if ((o == null) || !(o instanceof Blob)) {\r\n        return false;\r\n    }\r\n    Blob b = (Blob) o;\r\n    if (size != b.size) {\r\n        return false;\r\n    }\r\n    beginEnumeration(0);\r\n    b.beginEnumeration(0);\r\n    while (hasMoreBytes()) {\r\n        if (nextByte() != b.nextByte()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.content.cover.ContentHostingService.getIndividualDropboxId",
	"Comment": "access the name of the individual dropbox that contains a particular entity, or null if the entity is not inside an individual dropbox.",
	"Method": "String getIndividualDropboxId(String entityId){\r\n    org.sakaiproject.content.api.ContentHostingService service = getInstance();\r\n    if (service == null)\r\n        return null;\r\n    return service.getIndividualDropboxId(entityId);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.scheduleTrigger",
	"Comment": "convenience method for scheduling a trigger with the quartz scheduler object.",
	"Method": "void scheduleTrigger(TriggerWrapper wrapper){\r\n    Trigger trigger = wrapper.getTrigger();\r\n    Scheduler scheduler = schedulerManager.getScheduler();\r\n    scheduler.scheduleJob(trigger);\r\n    selectedJobDetailWrapper.getTriggerWrapperList().add(wrapper);\r\n    int currentTriggerCount = selectedJobDetailWrapper.getTriggerCount().intValue();\r\n    selectedJobDetailWrapper.setTriggerCount(Integer.valueOf(currentTriggerCount + 1));\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.BasicConfigurationService.dereferenceValue",
	"Comment": "this will search for any values in the string which need to be replacedwith actual values from the current known set of properties which areavailable to the config service",
	"Method": "String dereferenceValue(String value){\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"dereferenceValue(\" + value + \")\");\r\n    String drValue = value;\r\n    if (value != null && value.length() >= 4) {\r\n        Matcher matcher = referencePattern.matcher(value);\r\n        if (matcher.find()) {\r\n            if (log.isDebugEnabled())\r\n                log.debug(\"dereferenceValue(\" + value + \"), found refs to replace\");\r\n            matcher.reset();\r\n            StringBuilder sb = new StringBuilder();\r\n            int pointer = 0;\r\n            while (matcher.find()) {\r\n                String name = matcher.group(1);\r\n                if (StringUtils.isNotBlank(name)) {\r\n                    String replacementValue = null;\r\n                    ConfigItemImpl ci = findConfigItem(name, null);\r\n                    if (ci != null) {\r\n                        replacementValue = \"\";\r\n                        if (ci.getValue() != null) {\r\n                            replacementValue = StringUtils.trimToEmpty(ci.getValue().toString());\r\n                        }\r\n                    }\r\n                    sb.append(value.substring(pointer, matcher.start()));\r\n                    if (replacementValue == null) {\r\n                        replacementValue = matcher.group();\r\n                    } else {\r\n                        replacementValue = dereferenceValue(replacementValue);\r\n                    }\r\n                    sb.append(replacementValue);\r\n                    pointer = matcher.end();\r\n                }\r\n            }\r\n            sb.append(value.substring(pointer, value.length()));\r\n            drValue = sb.toString();\r\n        }\r\n    }\r\n    if (log.isDebugEnabled())\r\n        log.debug(\"dereferenceValue(\" + value + \"): return=\" + drValue);\r\n    return drValue;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.beginEnumeration",
	"Comment": "sets up an enumeration of the bytes of the blob\t starting from a particular point.",
	"Method": "void beginEnumeration(int pos){\r\n    enumerationNode = null;\r\n    if (!between(pos, 0, (size - 1))) {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n    enumerationPos = seek(pos);\r\n    enumerationNode = curr;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.FormatHelper.encode",
	"Comment": "helper to encode a string and avoid the ridiculous exception that is never thrown",
	"Method": "String encode(String s){\r\n    if (StringUtils.isBlank(s)) {\r\n        return s;\r\n    }\r\n    try {\r\n        return URLEncoder.encode(s, \"UTF-8\");\r\n    } catch (final UnsupportedEncodingException e) {\r\n        throw new AssertionError(\"UTF-8 not supported\");\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.config.impl.StoredConfigService.createHibernateConfigItem",
	"Comment": "creates an equivalent hibernateconfigitem from a configitem",
	"Method": "HibernateConfigItem createHibernateConfigItem(ConfigItem item){\r\n    if (item == null || neverPersistItems.contains(item.getName())) {\r\n        return null;\r\n    }\r\n    log.debug(\"New ConfigItem = {}\", item);\r\n    String serialValue;\r\n    String serialDefaultValue;\r\n    String serialRawValue;\r\n    try {\r\n        serialValue = serializeValue(item.getValue(), item.getType(), item.isSecured());\r\n        serialDefaultValue = serializeValue(item.getDefaultValue(), item.getType(), item.isSecured());\r\n        serialRawValue = serializeValue(getRawProperty(item.getName()), ServerConfigurationService.TYPE_STRING, item.isSecured());\r\n    } catch (IllegalClassException ice) {\r\n        log.error(\"Skip ConfigItem {}, {}\", item, ice.getMessage());\r\n        return null;\r\n    }\r\n    HibernateConfigItem hItem = new HibernateConfigItem(node, item.getName(), serialValue, serialRawValue, item.getType(), item.getDescription(), item.getSource(), serialDefaultValue, item.isRegistered(), item.isDefaulted(), item.isSecured(), item.isDynamic());\r\n    log.debug(\"Created HibernateConfigItem = {}\", hItem);\r\n    return hItem;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseEventTrackingService.addLocalObserver",
	"Comment": "add an observer of events. the observer will be notified whenever there are new events. local observers get notified only of event generated on this application server, not on those generated elsewhere.",
	"Method": "void addLocalObserver(Observer observer){\r\n    m_observableHelper.deleteObserver(observer);\r\n    m_priorityObservableHelper.deleteObserver(observer);\r\n    m_localObservableHelper.addObserver(observer);\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.addTwitterTimeline",
	"Comment": "to add twitter timeline with given parameters in a lessons page",
	"Method": "String addTwitterTimeline(){\r\n    if (!itemOk(itemId) || !checkCsrf()) {\r\n        return \"permission-failed\";\r\n    }\r\n    if (StringUtils.isBlank(twitterUsername)) {\r\n        return \"failure\";\r\n    }\r\n    if (StringUtils.isBlank(twitterWidgetHeight)) {\r\n        twitterWidgetHeight = TWITTER_WIDGET_DEFAULT_HEIGHT;\r\n    }\r\n    if (twitterUsername.contains(\"@\")) {\r\n        twitterUsername = StringUtils.remove(twitterUsername, \"@\");\r\n    }\r\n    String status = \"success\";\r\n    if (canEditPage()) {\r\n        SimplePageItem item;\r\n        if (itemId != null && itemId != -1) {\r\n            item = findItem(itemId);\r\n        } else {\r\n            item = appendItem(\"\", \"\", SimplePageItem.TWITTER);\r\n        }\r\n        item.setAttribute(\"height\", twitterWidgetHeight);\r\n        item.setAttribute(\"username\", twitterUsername);\r\n        item.setAttribute(\"numberOfTweets\", twitterDropDown);\r\n        item.setPrerequisite(this.prerequisite);\r\n        setItemGroups(item, selectedGroups);\r\n        update(item);\r\n    } else {\r\n        status = \"cancel\";\r\n    }\r\n    return status;\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlDefault.getXmlFields",
	"Comment": "returns an array of objects needed for the getxmlsql statement with limits.",
	"Method": "Object[] getXmlFields(int first,int last){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSitePublishJob.setServerConfigurationService",
	"Comment": "called by the spring framework to initialize the serverconfigurationservice data member specified in the components.xml file via ioc.",
	"Method": "void setServerConfigurationService(ServerConfigurationService serverConfigurationService){\r\n    this.serverConfigurationService = serverConfigurationService;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.providers.UserEntityProvider.getUserById",
	"Comment": "allows for easy retrieval of the user objectjust used by membership entity provider.",
	"Method": "EntityUser getUserById(String userId){\r\n    userId = findAndCheckUserId(userId, null);\r\n    if (userId == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return new EntityUser(userDirectoryService.getUser(userId));\r\n    } catch (UserNotDefinedException e) {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.impl.EntityBrokerManagerImpl.getSampleEntityObject",
	"Comment": "safely get the sample entity object which is defined for a prefix,if there is not one then return null",
	"Method": "Object getSampleEntityObject(String prefix,String id){\r\n    Object entity = null;\r\n    if (id != null) {\r\n        try {\r\n            Resolvable resolvable = entityProviderManager.getProviderByPrefixAndCapability(prefix, Resolvable.class);\r\n            if (resolvable != null) {\r\n                entity = resolvable.getEntity(new EntityReference(prefix, id));\r\n            }\r\n        } catch (RuntimeException e) {\r\n            entity = null;\r\n        }\r\n    }\r\n    if (entity == null) {\r\n        try {\r\n            Sampleable sampleable = entityProviderManager.getProviderByPrefixAndCapability(prefix, Sampleable.class);\r\n            if (sampleable != null) {\r\n                entity = sampleable.getSampleEntity();\r\n            }\r\n        } catch (RuntimeException e) {\r\n            entity = null;\r\n        }\r\n        if (entity == null) {\r\n            try {\r\n                Resolvable resolvable = entityProviderManager.getProviderByPrefixAndCapability(prefix, Resolvable.class);\r\n                if (resolvable != null) {\r\n                    entity = resolvable.getEntity(new EntityReference(prefix, \"\"));\r\n                }\r\n            } catch (RuntimeException e) {\r\n                entity = null;\r\n            }\r\n        }\r\n    }\r\n    return entity;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonBuilderAccessService.copyRanges",
	"Comment": "copy the contents of the specified input stream to the specifiedoutput stream in a set of chunks as per the specified ranges.",
	"Method": "void copyRanges(ContentResource content,OutputStream out,Iterator ranges,String contentType){\r\n    IOException exception = null;\r\n    while ((exception == null) && (ranges.hasNext())) {\r\n        Range currentRange = (Range) ranges.next();\r\n        IOUtils.write(\"\\r\\n--\" + MIME_SEPARATOR + \"\\r\\n\", out);\r\n        if (contentType != null)\r\n            IOUtils.write(\"Content-Type: \" + contentType + \"\\r\\n\", out);\r\n        IOUtils.write(\"Content-Range: bytes \" + currentRange.start + \"-\" + currentRange.end + \"/\" + currentRange.length + \"\\r\\n\", out);\r\n        IOUtils.write(\"\\r\\n\", out);\r\n        InputStream in = null;\r\n        try {\r\n            in = content.streamContent();\r\n        } catch (ServerOverloadException se) {\r\n            exception = new IOException(\"ServerOverloadException reported getting inputstream\");\r\n        }\r\n        InputStream istream = new BufferedInputStream(in, STREAM_BUFFER_SIZE);\r\n        exception = copyRange(istream, out, currentRange.start, currentRange.end);\r\n        IOUtils.closeQuietly(istream);\r\n    }\r\n    IOUtils.write(\"\\r\\n--\" + MIME_SEPARATOR + \"--\\r\\n\", out);\r\n    if (exception != null) {\r\n        throw exception;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.hikaricp.jdbc.pool.SakaiBasicDataSource.setDefaultTransactionIsolationString",
	"Comment": "set the default transaction isolation level from a string value, based on the settings and values in java.sql.connection",
	"Method": "void setDefaultTransactionIsolationString(String defaultTransactionIsolation){\r\n    if ((defaultTransactionIsolation == null) || (defaultTransactionIsolation.trim().length() == 0)) {\r\n        setDefaultTransactionIsolation(null);\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_NONE\")) {\r\n        setDefaultTransactionIsolation(\"TRANSACTION_NONE\");\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_READ_UNCOMMITTED\")) {\r\n        setDefaultTransactionIsolation(\"TRANSACTION_READ_UNCOMMITTED\");\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_READ_COMMITTED\")) {\r\n        setDefaultTransactionIsolation(\"TRANSACTION_READ_COMMITTED\");\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_REPEATABLE_READ\")) {\r\n        setDefaultTransactionIsolation(\"TRANSACTION_REPEATABLE_READ\");\r\n    } else if (defaultTransactionIsolation.trim().equalsIgnoreCase(\"TRANSACTION_SERIALIZABLE\")) {\r\n        setDefaultTransactionIsolation(\"TRANSACTION_SERIALIZABLE\");\r\n    } else {\r\n        setDefaultTransactionIsolation(null);\r\n        log.warn(\"invalid transaction isolation level: \" + defaultTransactionIsolation);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlService.dbRead",
	"Comment": "process a query, filling in with fields, and return the results as a list, one per record read. if a reader is provided, it will be called for\teach record to prepare the object placed into the list. otherwise, the first field of each record, as a string, will be placed in the list.",
	"Method": "List<String> dbRead(String sql,List dbRead,String sql,Object[] fields,SqlReader reader,List dbRead,Connection callerConn,String sql,Object[] fields,SqlReader reader){\r\n    if (callerConn == null) {\r\n        callerConn = (Connection) threadLocalManager().get(TRANSACTION_CONNECTION);\r\n    }\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"dbRead(Connection \" + callerConn + \", String \" + sql + \", Object[] \" + Arrays.toString(fields) + \", SqlReader \" + reader + \")\");\r\n    }\r\n    long start = 0;\r\n    long connectionTime = 0;\r\n    int lenRead = 0;\r\n    long stmtTime = 0;\r\n    long resultsTime = 0;\r\n    int count = 0;\r\n    if (log.isDebugEnabled()) {\r\n        String userId = usageSessionService().getSessionId();\r\n        StringBuilder buf = new StringBuilder();\r\n        if (fields != null) {\r\n            buf.append(fields[0]);\r\n            for (int i = 1; i < fields.length; i++) {\r\n                buf.append(\", \");\r\n                buf.append(fields[i]);\r\n            }\r\n        }\r\n        log.debug(\"Sql.dbRead: \" + userId + \"\\n\" + sql + \"\\n\" + buf);\r\n    }\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    ResultSet result = null;\r\n    ResultSetMetaData meta = null;\r\n    List rv = new Vector();\r\n    try {\r\n        if (m_showSql) {\r\n            start = System.currentTimeMillis();\r\n        }\r\n        if (callerConn != null) {\r\n            conn = callerConn;\r\n        } else {\r\n            conn = borrowConnection();\r\n        }\r\n        if (m_showSql) {\r\n            connectionTime = System.currentTimeMillis() - start;\r\n        }\r\n        if (m_showSql) {\r\n            start = System.currentTimeMillis();\r\n        }\r\n        pstmt = conn.prepareStatement(sql);\r\n        prepareStatement(pstmt, fields);\r\n        result = pstmt.executeQuery();\r\n        if (m_showSql) {\r\n            stmtTime = System.currentTimeMillis() - start;\r\n        }\r\n        if (m_showSql) {\r\n            start = System.currentTimeMillis();\r\n        }\r\n        while (result.next()) {\r\n            if (m_showSql) {\r\n                count++;\r\n            }\r\n            if (reader == null) {\r\n                String s;\r\n                ResultSetMetaData metadataResult = result.getMetaData();\r\n                if (metadataResult != null && Types.CLOB == metadataResult.getColumnType(1)) {\r\n                    Clob clobResult = result.getClob(1);\r\n                    s = clobResult.getSubString(1, (int) clobResult.length());\r\n                } else {\r\n                    s = result.getString(1);\r\n                }\r\n                if (s != null) {\r\n                    rv.add(s);\r\n                }\r\n            } else {\r\n                try {\r\n                    Object obj = reader.readSqlResultRecord(result);\r\n                    if (obj != null) {\r\n                        rv.add(obj);\r\n                    }\r\n                } catch (SqlReaderFinishedException e) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } catch (SQLException e) {\r\n        log.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\r\n    } catch (UnsupportedEncodingException e) {\r\n        log.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\r\n    } finally {\r\n        if (m_showSql) {\r\n            resultsTime = System.currentTimeMillis() - start;\r\n        }\r\n        if (null != result) {\r\n            try {\r\n                result.close();\r\n            } catch (SQLException e) {\r\n                log.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\r\n            }\r\n        }\r\n        if (null != pstmt) {\r\n            try {\r\n                pstmt.close();\r\n            } catch (SQLException e) {\r\n                log.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\r\n            }\r\n        }\r\n        if (callerConn == null) {\r\n            if (null != conn) {\r\n                if (m_commitAfterRead) {\r\n                    try {\r\n                        conn.commit();\r\n                    } catch (SQLException e) {\r\n                        log.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\r\n                    }\r\n                }\r\n                returnConnection(conn);\r\n            }\r\n        }\r\n    }\r\n    if (m_showSql)\r\n        debug(\"Sql.dbRead: time: \" + connectionTime + \" / \" + stmtTime + \" / \" + resultsTime + \" #: \" + count, sql, fields);\r\n    return rv;\r\n}"
}, {
	"Path": "org.sakaiproject.calendaring.ExternalCalendaringServiceTest.testGeneratingCalendarWithMultipleVEvents",
	"Comment": "ensure we can get a ical4j calendar from the list of vevents.",
	"Method": "void testGeneratingCalendarWithMultipleVEvents(){\r\n    List<net.fortuna.ical4j.model.component.VEvent> vevents = new ArrayList<net.fortuna.ical4j.model.component.VEvent>();\r\n    for (int i = 0; i < 10; i++) {\r\n        vevents.add(service.createEvent(generateEvent()));\r\n    }\r\n    net.fortuna.ical4j.model.Calendar calendar = service.createCalendar(vevents);\r\n    log.debug(\"testGeneratingCalendarWithMultipleVEvents\");\r\n    log.debug(\"#########################################\");\r\n    log.debug(\"{}\", calendar);\r\n    Assert.assertNotNull(calendar);\r\n    Assert.assertEquals(Version.VERSION_2_0, calendar.getVersion());\r\n    Assert.assertEquals(CalScale.GREGORIAN, calendar.getCalendarScale());\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhereNotSoftlyDeletedSql",
	"Comment": "returns the sql statement which is part of the where clause to only retrieve sites that are not softly deleted",
	"Method": "String getSitesWhereNotSoftlyDeletedSql(){\r\n    return \"SAKAI_SITE.IS_SOFTLY_DELETED = '0' and \";\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.BasePreferencesService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : serverConfigurationService().getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.util.SakaiApplicationContext.onRefresh",
	"Comment": "load initial beans before going through the default logic.",
	"Method": "void onRefresh(){\r\n    if (initialSingletonNames != null) {\r\n        for (int i = 0; i < initialSingletonNames.length; i++) {\r\n            getBean(initialSingletonNames[i]);\r\n        }\r\n    }\r\n    super.onRefresh();\r\n}"
}, {
	"Path": "org.sakaiproject.util.ResourceLoader.getString",
	"Comment": "return string value for specified property in current locale specific resourcebundle",
	"Method": "String getString(String key,String getString,String key,String dflt){\r\n    if (getLocale().toString().equals(DEBUG_LOCALE))\r\n        return formatDebugPropertiesString(key);\r\n    try {\r\n        return getBundle().getString(key);\r\n    } catch (MissingResourceException e) {\r\n        return dflt;\r\n    } catch (NullPointerException e) {\r\n        return dflt;\r\n    } catch (ClassCastException e) {\r\n        return dflt;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.ServerCookie.maybeQuote2",
	"Comment": "quotes values using rules that vary depending on cookie version.",
	"Method": "int maybeQuote2(int version,StringBuffer buf,String value,int maybeQuote2,int version,StringBuffer buf,String value,boolean allowVersionSwitch,int maybeQuote2,int version,StringBuffer buf,String value,String literals,boolean allowVersionSwitch){\r\n    if (value == null || value.length() == 0) {\r\n        buf.append(\"\\\"\\\"\");\r\n    } else if (containsCTL(value, version))\r\n        throw new IllegalArgumentException(\"Control character in cookie value, consider BASE64 encoding your value\");\r\n    else if (alreadyQuoted(value)) {\r\n        buf.append('\"');\r\n        buf.append(escapeDoubleQuotes(value, 1, value.length() - 1));\r\n        buf.append('\"');\r\n    } else if (allowVersionSwitch && (!STRICT_SERVLET_COMPLIANCE) && version == 0 && !isToken2(value, literals)) {\r\n        buf.append('\"');\r\n        buf.append(escapeDoubleQuotes(value, 0, value.length()));\r\n        buf.append('\"');\r\n        version = 1;\r\n    } else if (version == 0 && !isToken(value, literals)) {\r\n        buf.append('\"');\r\n        buf.append(escapeDoubleQuotes(value, 0, value.length()));\r\n        buf.append('\"');\r\n    } else if (version == 1 && !isToken2(value, literals)) {\r\n        buf.append('\"');\r\n        buf.append(escapeDoubleQuotes(value, 0, value.length()));\r\n        buf.append('\"');\r\n    } else {\r\n        buf.append(value);\r\n    }\r\n    return version;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.ContentHostingComparator.compare",
	"Comment": "compare these objects based on my property and ascending settings. collections sort lower than resources.",
	"Method": "int compare(Object o1,Object o2){\r\n    String property = m_property;\r\n    if (property.equals(ResourceProperties.PROP_CONTENT_PRIORITY)) {\r\n        Entity entity1 = (Entity) o1;\r\n        Entity entity2 = (Entity) o2;\r\n        Integer rank1 = null;\r\n        Integer rank2 = null;\r\n        try {\r\n            rank1 = new Integer(entity1.getProperties().getProperty(property));\r\n        } catch (NumberFormatException e) {\r\n        }\r\n        try {\r\n            rank2 = new Integer(entity2.getProperties().getProperty(property));\r\n        } catch (NumberFormatException e) {\r\n        }\r\n        if (rank1 != null && rank2 != null) {\r\n            return m_ascending ? rank1.compareTo(rank2) : rank2.compareTo(rank1);\r\n        }\r\n        if (rank1 != null) {\r\n            return m_ascending ? -1 : 1;\r\n        }\r\n        if (rank2 != null) {\r\n            return m_ascending ? 1 : -1;\r\n        }\r\n        property = ResourceProperties.PROP_DISPLAY_NAME;\r\n    }\r\n    if ((o1 instanceof ContentCollection) && (o2 instanceof ContentResource)) {\r\n        return (m_ascending ? -1 : 1);\r\n    }\r\n    if ((o1 instanceof ContentResource) && (o2 instanceof ContentCollection)) {\r\n        return (m_ascending ? 1 : -1);\r\n    }\r\n    if (property.equals(ResourceProperties.PROP_CONTENT_LENGTH) && o1 instanceof ContentCollection) {\r\n        int size1 = ((ContentCollection) o1).getMemberCount();\r\n        int size2 = ((ContentCollection) o2).getMemberCount();\r\n        int rv = ((size1 < size2) ? -1 : ((size1 > size2) ? 1 : 0));\r\n        if (!m_ascending)\r\n            rv = -rv;\r\n        return rv;\r\n    }\r\n    try {\r\n        long l1 = ((Entity) o1).getProperties().getLongProperty(property);\r\n        long l2 = ((Entity) o2).getProperties().getLongProperty(property);\r\n        int rv = ((l1 < l2) ? -1 : ((l1 > l2) ? 1 : 0));\r\n        if (!m_ascending)\r\n            rv = -rv;\r\n        return rv;\r\n    } catch (Exception ignore) {\r\n    }\r\n    try {\r\n        Time t1 = ((Entity) o1).getProperties().getTimeProperty(property);\r\n        Time t2 = ((Entity) o2).getProperties().getTimeProperty(property);\r\n        int rv = t1.compareTo(t2);\r\n        if (!m_ascending)\r\n            rv = -rv;\r\n        return rv;\r\n    } catch (Exception ignore) {\r\n    }\r\n    int rv = 0;\r\n    if (m_smart_sort) {\r\n        rv = compareLikeMacFinder(((Entity) o1).getProperties().getPropertyFormatted(property), ((Entity) o2).getProperties().getPropertyFormatted(property));\r\n    } else {\r\n        rv = ((Entity) o1).getProperties().getPropertyFormatted(property).compareTo(((Entity) o2).getProperties().getPropertyFormatted(property));\r\n    }\r\n    return m_ascending ? rv : -rv;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.http.EntityHttpServletResponse.getHeaderNames",
	"Comment": "return the names of all specified headers as a set of strings.",
	"Method": "Set getHeaderNames(){\r\n    return this.headers.keySet();\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.ui.PrivateMessageManagerImpl.removePvtMsgAttachment",
	"Comment": "when you reply to a message, you do have option to edit attachments to a message",
	"Method": "void removePvtMsgAttachment(Attachment o){\r\n    o.getMessage().removeAttachment(o);\r\n}"
}, {
	"Path": "org.sakaiproject.util.Blob.toString",
	"Comment": "returns a string representation of the blob.\t includes length and checksum.",
	"Method": "String toString(){\r\n    return \"Blob[length=\" + size + \";checksum=\" + toHex(checksum()) + \"]\";\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbBinarySingleStorage.setSingleStorageSql",
	"Comment": "sets which bean containing database dependent code should be used\tdepending on the database vendor.",
	"Method": "void setSingleStorageSql(String vendor){\r\n    this.singleStorageSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.SynopticMsgcntrManagerImpl.isToolInSite",
	"Comment": "return true if tool with id passed in exists in site passed in\tfalse otherwise.",
	"Method": "boolean isToolInSite(Site thisSite,String toolId){\r\n    final Collection toolsInSite = thisSite.getTools(toolId);\r\n    return !toolsInSite.isEmpty();\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.api.Banner.isActiveNow",
	"Comment": "whether or not this banner should be displayed at this moment in time.",
	"Method": "boolean isActiveNow(){\r\n    if (!isActive()) {\r\n        return false;\r\n    }\r\n    if (startTime == 0 && endTime == 0) {\r\n        return isActive();\r\n    }\r\n    Date now = new Date();\r\n    return (now.after(new Date(startTime)) && (endTime == 0 || now.before(new Date(endTime))));\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.pages.BasePage.buildFlagWithPopover",
	"Comment": "helper to build a notification flag with a bootstrap popover",
	"Method": "WebMarkupContainer buildFlagWithPopover(String componentId,String message){\r\n    final WebMarkupContainer flagWithPopover = new WebMarkupContainer(componentId);\r\n    flagWithPopover.add(new AttributeModifier(\"title\", message));\r\n    flagWithPopover.add(new AttributeModifier(\"aria-label\", message));\r\n    flagWithPopover.add(new AttributeModifier(\"data-toggle\", \"popover\"));\r\n    flagWithPopover.add(new AttributeModifier(\"data-trigger\", \"manual\"));\r\n    flagWithPopover.add(new AttributeModifier(\"data-placement\", \"bottom\"));\r\n    flagWithPopover.add(new AttributeModifier(\"data-html\", \"true\"));\r\n    flagWithPopover.add(new AttributeModifier(\"data-container\", \"#gradebookGrades\"));\r\n    flagWithPopover.add(new AttributeModifier(\"data-template\", \"<div class=\\\"gb-popover popover\\\" role=\\\"tooltip\\\"><div class=\\\"arrow\\\"><\/div><div class=\\\"popover-content\\\"><\/div><\/div>\"));\r\n    flagWithPopover.add(new AttributeModifier(\"data-content\", generatePopoverContent(message)));\r\n    flagWithPopover.add(new AttributeModifier(\"tabindex\", \"0\"));\r\n    return flagWithPopover;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.BasePanel.getUserRole",
	"Comment": "helper to get the user role, via the business service. handles the access denied scenario.",
	"Method": "GbRole getUserRole(){\r\n    GbRole role;\r\n    try {\r\n        role = this.businessService.getUserRole();\r\n    } catch (final GbAccessDeniedException e) {\r\n        final PageParameters params = new PageParameters();\r\n        params.add(\"message\", MessageHelper.getString(\"error.role\"));\r\n        throw new RestartResponseException(AccessDeniedPage.class, params);\r\n    }\r\n    return role;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.util.ImportGradesHelper.processImportedGrades",
	"Comment": "process the data.\ttodo enhance this to have better returns ie gbexceptions",
	"Method": "List<ProcessedGradeItem> processImportedGrades(ImportedSpreadsheetWrapper spreadsheetWrapper,List<Assignment> assignments,List<GbStudentGradeInfo> currentGrades){\r\n    final List<ProcessedGradeItem> processedGradeItems = new ArrayList();\r\n    final Map<Long, AssignmentStudentGradeInfo> transformedGradeMap = transformCurrentGrades(currentGrades);\r\n    final Map<String, Assignment> assignmentMap = assignments.stream().collect(Collectors.toMap(Assignment::getName, Function.identity()));\r\n    final List<String> commentColumns = new ArrayList();\r\n    for (final ImportedColumn column : spreadsheetWrapper.getColumns()) {\r\n        if (column.isIgnorable()) {\r\n            continue;\r\n        }\r\n        final String columnTitle = StringUtils.trim(column.getColumnTitle());\r\n        final ProcessedGradeItem processedGradeItem = new ProcessedGradeItem();\r\n        final Assignment assignment = assignmentMap.get(columnTitle);\r\n        if (assignment != null) {\r\n            processedGradeItem.setItemId(assignment.getId());\r\n        }\r\n        final Status status = determineStatus(column, assignment, spreadsheetWrapper, transformedGradeMap);\r\n        processedGradeItem.setStatus(status);\r\n        processedGradeItem.setItemTitle(columnTitle);\r\n        log.debug(\"Column name: {}, type: {}, status: {}\", columnTitle, column.getType(), status);\r\n        switch(column.getType()) {\r\n            case COMMENTS:\r\n                processedGradeItem.setType(ProcessedGradeItem.Type.COMMENT);\r\n                commentColumns.add(columnTitle);\r\n                break;\r\n            case GB_ITEM_WITHOUT_POINTS:\r\n                processedGradeItem.setType(ProcessedGradeItem.Type.GB_ITEM);\r\n                break;\r\n            case GB_ITEM_WITH_POINTS:\r\n                processedGradeItem.setType(ProcessedGradeItem.Type.GB_ITEM);\r\n                processedGradeItem.setItemPointValue(column.getPoints());\r\n                break;\r\n            case IGNORE:\r\n                break;\r\n            case USER_ID:\r\n                break;\r\n            case USER_NAME:\r\n                break;\r\n            default:\r\n                log.warn(\"Bad column. Type: {}, header: {}.  Skipping.\", column.getType(), columnTitle);\r\n                break;\r\n        }\r\n        final List<ProcessedGradeItemDetail> processedGradeItemDetails = new ArrayList();\r\n        for (final ImportedRow row : spreadsheetWrapper.getRows()) {\r\n            log.debug(\"row: {}\", row.getStudentEid());\r\n            log.debug(\"columnTitle: {}\", columnTitle);\r\n            final ImportedCell cell = row.getCellMap().get(columnTitle);\r\n            if (cell != null) {\r\n                if (row.getUser().isValid()) {\r\n                    final ProcessedGradeItemDetail processedGradeItemDetail = new ProcessedGradeItemDetail();\r\n                    processedGradeItemDetail.setUser(row.getUser());\r\n                    processedGradeItemDetail.setGrade(cell.getScore());\r\n                    processedGradeItemDetail.setComment(cell.getComment());\r\n                    processedGradeItemDetails.add(processedGradeItemDetail);\r\n                }\r\n            }\r\n        }\r\n        processedGradeItem.setProcessedGradeItemDetails(processedGradeItemDetails);\r\n        processedGradeItems.add(processedGradeItem);\r\n    }\r\n    HeadingValidationReport report = spreadsheetWrapper.getHeadingReport();\r\n    List<String> itemTitles = processedGradeItems.stream().filter(item -> item.getType() == ProcessedGradeItem.Type.GB_ITEM).map(ProcessedGradeItem::getItemTitle).collect(Collectors.toList());\r\n    commentColumns.forEach(c -> {\r\n        final boolean matchingItemExists = itemTitles.stream().anyMatch(c::contains);\r\n        if (!matchingItemExists) {\r\n            report.addOrphanedCommentHeading(c);\r\n        }\r\n    });\r\n    return processedGradeItems;\r\n}"
}, {
	"Path": "org.sakaiproject.email.impl.BaseDigestService.processQueue",
	"Comment": "attempt to process all the queued digest requests. ones that cannot be processed now will be returned to the queue.",
	"Method": "void processQueue(){\r\n    log.debug(\"Processing mail digest queue...\");\r\n    List retry = new Vector();\r\n    List queue = new Vector();\r\n    synchronized (m_digestQueue) {\r\n        queue.addAll(m_digestQueue);\r\n        m_digestQueue.clear();\r\n    }\r\n    for (Iterator iQueue = queue.iterator(); iQueue.hasNext(); ) {\r\n        DigestMessage message = (DigestMessage) iQueue.next();\r\n        try {\r\n            DigestEdit edit = edit(message.getTo());\r\n            edit.add(message);\r\n            commit(edit);\r\n        } catch (InUseException e) {\r\n            log.warn(\"digest in use, will try send again at next digest attempt: \" + e.getMessage());\r\n            retry.add(message);\r\n        }\r\n    }\r\n    if (retry.size() > 0) {\r\n        synchronized (m_digestQueue) {\r\n            m_digestQueue.addAll(retry);\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.getCourseGrades",
	"Comment": "get a map of course grades for the given gradebook, users and optionally the grademap you want to use.",
	"Method": "Map<String, CourseGrade> getCourseGrades(String siteId,Map<String, CourseGrade> getCourseGrades,String siteId,Map<String, Double> schema,Map<String, CourseGrade> getCourseGrades,List<String> studentUuids,Map<String, CourseGrade> getCourseGrades,Gradebook gradebook,List<String> studentUuids,Map<String, Double> gradeMap){\r\n    Map<String, CourseGrade> rval = new HashMap();\r\n    if (gradebook != null) {\r\n        if (gradeMap != null) {\r\n            rval = this.gradebookService.getCourseGradeForStudents(gradebook.getUid(), studentUuids, gradeMap);\r\n        } else {\r\n            rval = this.gradebookService.getCourseGradeForStudents(gradebook.getUid(), studentUuids);\r\n        }\r\n    }\r\n    return rval;\r\n}"
}, {
	"Path": "org.sakaiproject.config.impl.StoredConfigService.findByName",
	"Comment": "find a hibernateconfigitem with a matching name for this node",
	"Method": "HibernateConfigItem findByName(String name){\r\n    HibernateConfigItem item = null;\r\n    List<HibernateConfigItem> list = dao.findAllByCriteriaByNode(node, name, null, null, null, null);\r\n    if (list.size() == 1) {\r\n        item = list.get(0);\r\n    }\r\n    return item;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.test.ContentHostingServiceRecycleTest.reset",
	"Comment": "clear out any threadlocals and reset the session to be admin.",
	"Method": "void reset(ThreadLocalManager tl,SessionManager sm){\r\n    tl.clear();\r\n    Session session = sm.getCurrentSession();\r\n    session.setUserId(\"admin\");\r\n    session.setUserEid(\"admin\");\r\n}"
}, {
	"Path": "org.sakaiproject.util.impl.FormattedTextImpl.hexDigit",
	"Comment": "returns the hex digit corresponding to a number between 0 and 15.",
	"Method": "char hexDigit(int i){\r\n    switch(i) {\r\n        case 0:\r\n            return '0';\r\n        case 1:\r\n            return '1';\r\n        case 2:\r\n            return '2';\r\n        case 3:\r\n            return '3';\r\n        case 4:\r\n            return '4';\r\n        case 5:\r\n            return '5';\r\n        case 6:\r\n            return '6';\r\n        case 7:\r\n            return '7';\r\n        case 8:\r\n            return '8';\r\n        case 9:\r\n            return '9';\r\n        case 10:\r\n            return 'A';\r\n        case 11:\r\n            return 'B';\r\n        case 12:\r\n            return 'C';\r\n        case 13:\r\n            return 'D';\r\n        case 14:\r\n            return 'E';\r\n        case 15:\r\n            return 'F';\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid digit:\" + i);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.getJobDetail",
	"Comment": "returns the jobdetail object for the job presently being editted or sor which properties or triggers are being editted.",
	"Method": "JobDetail getJobDetail(){\r\n    return jobDetail;\r\n}"
}, {
	"Path": "org.sakaiproject.util.UserNotificationPreferencesRegistrationImpl.setUserNotificationPreferencesRegistrationService",
	"Comment": "setter for the usernotificationpreferencesregistrationservice",
	"Method": "void setUserNotificationPreferencesRegistrationService(UserNotificationPreferencesRegistrationService userNotificationPreferencesRegistrationService){\r\n    this.userNotificationPreferencesRegistrationService = userNotificationPreferencesRegistrationService;\r\n}"
}, {
	"Path": "org.sakaiproject.hikaricp.jdbc.pool.SakaiBasicDataSource.getValidationQuery",
	"Comment": "validationquery in hikari is called connectiontestquery, map to it",
	"Method": "String getValidationQuery(){\r\n    return super.getConnectionTestQuery();\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.ClusterEventTracking.setClusterEventTrackingServiceSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setClusterEventTrackingServiceSql(String vendor){\r\n    this.clusterEventTrackingServiceSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.exception.PermissionExceptionTest.checkExceptionMessage",
	"Comment": "check that we get a sensible message from a permission exception.",
	"Method": "void checkExceptionMessage(){\r\n    PermissionException pe = new PermissionException(\"userId\", \"a.lock.that.failed\", \"/some/sakai/reference\");\r\n    assertNotNull(pe.getMessage());\r\n    assertNotSame(\"\", pe.getMessage());\r\n    assertNotNull(pe.toString());\r\n    assertNotSame(\"\", pe.toString());\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.stats.CourseGradeStatistics.getAverageGPA",
	"Comment": "calculates the average gpa for the course\tthis is only applicable if grade points is the grading schema in use. however this is not currently checked.",
	"Method": "String getAverageGPA(DescriptiveStatistics stats){\r\n    if (!StringUtils.equals(this.gradingSchemaName, \"Grade Points\")) {\r\n        return null;\r\n    }\r\n    if (this.bottomPercents == null || this.bottomPercents.isEmpty()) {\r\n        return null;\r\n    }\r\n    if (stats.getN() == 0) {\r\n        return \"-\";\r\n    }\r\n    final List<String> mappedGrades = this.courseGradeMap.values().stream().filter(c -> c.getMappedGrade() != null).map(c -> (c.getMappedGrade())).collect(Collectors.toList());\r\n    Double averageGPA = 0.0;\r\n    for (final String mappedGrade : mappedGrades) {\r\n        final Double grade = this.bottomPercents.get(mappedGrade);\r\n        if (grade != null) {\r\n            averageGPA += grade;\r\n        } else {\r\n            log.debug(\"Grade skipped when calculating course average GPA: {}. Calculated value will be incorrect.\", mappedGrade);\r\n        }\r\n    }\r\n    averageGPA /= mappedGrades.size();\r\n    return String.format(\"%.2f\", averageGPA);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.isPodcastFolderHidden",
	"Comment": "returns whether the podcasts folder should be considered hidden in ui",
	"Method": "boolean isPodcastFolderHidden(){\r\n    boolean hidden;\r\n    try {\r\n        return podcastService.isPodcastFolderHidden(podcastService.getSiteId());\r\n    } catch (Exception e) {\r\n        return true;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.JoinSiteDelegate.isLimitByAccountTypeEnabled",
	"Comment": "checks if the system and the provided site allows account types of joining users to be limited",
	"Method": "boolean isLimitByAccountTypeEnabled(String siteID){\r\n    if (StringUtils.isBlank(siteID)) {\r\n        return false;\r\n    }\r\n    if (GLOBAL_JOIN_LIMIT_BY_ACCOUNT_TYPE_ENABLED) {\r\n        return getBooleanSiteProperty(siteID, SITE_PROP_JOIN_LIMIT_OFFICIAL);\r\n    } else {\r\n        return false;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonsAccess.canEditPage",
	"Comment": "shoud be the same as caneditpage in simplepagebean, but without the caching from the bean.",
	"Method": "boolean canEditPage(String siteId,SimplePage page){\r\n    String ref = \"/site/\" + siteId;\r\n    if (securityService.unlock(SimplePage.PERMISSION_LESSONBUILDER_UPDATE, ref))\r\n        return true;\r\n    if (page != null && isPageOwner(page))\r\n        return true;\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.EntityDataUtils.makeEntityData",
	"Comment": "make an entity data object out of whatever entity is given,use the given reference, if there is no id then this will attempt to get one otherwise it will use prefix only",
	"Method": "EntityData makeEntityData(EntityReference ref,Object entity){\r\n    EntityData ed = null;\r\n    if (entity != null) {\r\n        if (ref == null) {\r\n            throw new IllegalArgumentException(\"ref must not be null or no entity data object can be created\");\r\n        }\r\n        Class<?> resultClass = entity.getClass();\r\n        if (EntityData.class.isAssignableFrom(resultClass)) {\r\n            ed = (EntityData) entity;\r\n        } else {\r\n            if (ref.getId() == null) {\r\n                String entityId = getEntityId(entity);\r\n                if (entityId != null) {\r\n                    ref = new EntityReference(ref.getPrefix(), entityId);\r\n                }\r\n            }\r\n            Object entityObject = entity;\r\n            if (ActionReturn.class.isAssignableFrom(resultClass)) {\r\n                ActionReturn ar = (ActionReturn) entity;\r\n                if (ar.entityData == null) {\r\n                    if (ar.outputString != null) {\r\n                        entityObject = ar.outputString;\r\n                    } else if (ar.output != null) {\r\n                        entityObject = ar.output;\r\n                    }\r\n                } else {\r\n                    ed = ar.entityData;\r\n                }\r\n            }\r\n            if (ed == null) {\r\n                ed = new EntityData(ref, null, entityObject, null);\r\n            }\r\n        }\r\n    }\r\n    return ed;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.isContentHostingHandlersEnabled",
	"Comment": "content hosting handlers are not implemented in the base content service",
	"Method": "boolean isContentHostingHandlersEnabled(){\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.jsf2.renderer.InputRichTextRenderer.writeAdditionalConfig",
	"Comment": "subclasses can override to provide additonal configuration such as add buttons, etc",
	"Method": "void writeAdditionalConfig(FacesContext context,UIComponent component,String configVar,String clientId,String toolbar,int widthPx,int heightPx,Locale locale,ResponseWriter writer){\r\n    writeAttachedFiles(context, component, configVar, writer, toolbar);\r\n    registerWithParent(component, configVar, clientId);\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.model.SimplePageToolDaoImpl.findStudentPage",
	"Comment": "null groups means there are no permitted groups, so the answer is obviously null",
	"Method": "SimpleStudentPage findStudentPage(long itemId,String owner,SimpleStudentPage findStudentPage,long itemId,Collection<String> groups,SimpleStudentPage findStudentPage,long id){\r\n    DetachedCriteria d = DetachedCriteria.forClass(SimpleStudentPage.class).add(Restrictions.eq(\"id\", id));\r\n    List<SimpleStudentPage> list = (List<SimpleStudentPage>) getHibernateTemplate().findByCriteria(d);\r\n    if (list.size() > 0) {\r\n        return list.get(0);\r\n    } else {\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.user.impl.DbUserService.setUserServiceSql",
	"Comment": "sets which bean containing database dependent code should be used depending on the database vendor.",
	"Method": "void setUserServiceSql(String vendor){\r\n    this.userServiceSql = (databaseBeans.containsKey(vendor) ? databaseBeans.get(vendor) : databaseBeans.get(\"default\"));\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.getUserDirectoryService",
	"Comment": "returns the instance of the userdirectoryservice injected by the spring framework specified in the components.xml file via ioc.",
	"Method": "UserDirectoryService getUserDirectoryService(){\r\n    return userDirectoryService;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.scheduler.jobs.coursepublish.CourseSiteRemovalJob.setServerConfigurationService",
	"Comment": "called by the spring framework to initialize the serverconfigurationservice data member specified in the components.xml file via ioc.",
	"Method": "void setServerConfigurationService(ServerConfigurationService serverConfigurationService){\r\n    this.serverConfigurationService = serverConfigurationService;\r\n}"
}, {
	"Path": "org.sakaiproject.event.impl.BaseNotificationService.newResourceEdit",
	"Comment": "construct a new resource from another resource of the same type.",
	"Method": "Edit newResourceEdit(Entity container,String id,Object[] others,Edit newResourceEdit,Entity container,Element element,Edit newResourceEdit,Entity container,Entity other){\r\n    BaseNotificationEdit e = new BaseNotificationEdit((Notification) other);\r\n    e.activate();\r\n    return e;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.request.RequestUtils.containsQueryString",
	"Comment": "simple check to see if a url appears to contain a query string,true if it does, false otherwise",
	"Method": "boolean containsQueryString(String URL){\r\n    int lastEquals = URL.lastIndexOf('=');\r\n    int qMark = URL.indexOf('?');\r\n    if (lastEquals > 0 && qMark > 0 && lastEquals > qMark) {\r\n        return true;\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.ContentServiceSqlDefault.getResourceId3Sql",
	"Comment": "returns the sql statement which retrieves the resource id from the specified table.",
	"Method": "String getResourceId3Sql(String table){\r\n    return \"select RESOURCE_ID from \" + table + \" where IN_COLLECTION = ?\";\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseExtensionResourceFilter.setViewAll",
	"Comment": "boolean to indicate if all resources should be viewable. if this is false, then the viewable resources will be based on the mime types and extention set in the other properties.",
	"Method": "void setViewAll(boolean viewAll){\r\n    this.viewAll = viewAll;\r\n}"
}, {
	"Path": "org.sakaiproject.mailarchive.impl.BaseMailArchiveService.getReferenceRoot",
	"Comment": "return the reference rooot for use in resource references and urls.",
	"Method": "String getReferenceRoot(){\r\n    return REFERENCE_ROOT;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere9Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere9Sql(){\r\n    return \"UPPER(SAKAI_SITE.TITLE) like UPPER(?) and \";\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.NoSecurity.unlockUsers",
	"Comment": "access the list of users who can unlock the lock for use with this resource.",
	"Method": "List<User> unlockUsers(String lock,String reference){\r\n    return new Vector<User>();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.copyRange",
	"Comment": "copy the partial contents of the specified input stream to the specifiedoutput stream.",
	"Method": "IOException copyRange(InputStream istream,OutputStream ostream,long start,long end){\r\n    try {\r\n        istream.skip(start);\r\n    } catch (IOException e) {\r\n        return e;\r\n    }\r\n    IOException exception = null;\r\n    long bytesToRead = end - start + 1;\r\n    byte[] buffer = new byte[STREAM_BUFFER_SIZE];\r\n    int len = buffer.length;\r\n    while ((bytesToRead > 0) && (len >= buffer.length)) {\r\n        try {\r\n            len = istream.read(buffer);\r\n            if (bytesToRead >= len) {\r\n                ostream.write(buffer, 0, len);\r\n                bytesToRead -= len;\r\n            } else {\r\n                ostream.write(buffer, 0, (int) bytesToRead);\r\n                bytesToRead = 0;\r\n            }\r\n        } catch (IOException e) {\r\n            exception = e;\r\n            len = -1;\r\n        }\r\n        if (len < buffer.length)\r\n            break;\r\n    }\r\n    return exception;\r\n}"
}, {
	"Path": "org.sakaiproject.util.StringUtil.fullReference",
	"Comment": "create a full reference from a relative reference merged with a root reference.",
	"Method": "String fullReference(String root,String relative){\r\n    String full = referencePath(root);\r\n    full += relative;\r\n    return full;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.EntityDataUtils.extractMapProperties",
	"Comment": "get the values from a map and convert them to strings,nulls pass through",
	"Method": "Map<String, Object> extractMapProperties(Map m){\r\n    Map<String, Object> props = null;\r\n    if (m == null || m.isEmpty()) {\r\n        props = null;\r\n    } else {\r\n        props = new HashMap<String, Object>();\r\n        for (Entry entry : (Set<Entry>) m.entrySet()) {\r\n            Object key = entry.getKey();\r\n            if (key != null) {\r\n                Object value = entry.getValue();\r\n                if (value != null) {\r\n                    if (Serializable.class.isAssignableFrom(key.getClass())) {\r\n                        props.put(key.toString(), value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionForumBean.setForumAutoMarkThreadsRead",
	"Comment": "set the boolean automarkthreadsread setting for the forum.",
	"Method": "void setForumAutoMarkThreadsRead(Boolean autoMarkThreadsRead){\r\n    log.debug(\"setForumAutoMarkThreadsRead()\");\r\n    forum.setAutoMarkThreadsRead(autoMarkThreadsRead);\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlDefault.getNumRowsSql",
	"Comment": "returns the sql statement which retrieves the number of rows in the specified table.",
	"Method": "String getNumRowsSql(String table,String getNumRowsSql,String table,String where){\r\n    return \"select count(1) from \" + table + \" \" + where;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionTopicBean.setAutoMarkThreadsRead",
	"Comment": "set the automarkthreadsread value for this discussion topic.",
	"Method": "void setAutoMarkThreadsRead(String autoMarkThreadsRead){\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"setAutoMarkThreadsRead(String \" + autoMarkThreadsRead + \")\");\r\n    }\r\n    topic.setAutoMarkThreadsRead(Boolean.parseBoolean(autoMarkThreadsRead));\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityActionsManagerTest.testActionsEntityProviderMock",
	"Comment": "ensure that the mock for testing the custom actions works correctly",
	"Method": "void testActionsEntityProviderMock(){\r\n    ActionsEntityProviderMock aep = td.entityProviderA1;\r\n    MyEntity me = (MyEntity) aep.getEntity(new EntityReference(TestData.REFA1));\r\n    int num = me.getNumber();\r\n    ActionReturn ar = (ActionReturn) aep.doubleCustomAction(new EntityView(new EntityReference(TestData.REFA1), null, null));\r\n    MyEntity doubleMe = (MyEntity) ar.entityData.getData();\r\n    assertEquals(doubleMe.getNumber(), num * 2);\r\n    assertEquals(me.getId(), doubleMe.getId());\r\n    ar = (ActionReturn) aep.doubleCustomAction(new EntityView(new EntityReference(TestData.REFA1), null, null));\r\n    doubleMe = (MyEntity) ar.entityData.getData();\r\n    assertEquals(doubleMe.getNumber(), num * 2);\r\n    MyEntity me1 = (MyEntity) aep.getEntity(new EntityReference(TestData.REFA1));\r\n    assertFalse(\"xxx\".equals(me1.extra));\r\n    assertFalse(\"xxx\".equals(me1.getStuff()));\r\n    aep.xxxAction(new EntityReference(TestData.REFA1));\r\n    MyEntity xxxMe = (MyEntity) aep.getEntity(new EntityReference(TestData.REFA1));\r\n    assertEquals(me1.getId(), xxxMe.getId());\r\n    assertTrue(\"xxx\".equals(xxxMe.extra));\r\n    assertTrue(\"xxx\".equals(xxxMe.getStuff()));\r\n    assertEquals(2, aep.myEntities.size());\r\n    aep.clear();\r\n    assertEquals(0, aep.myEntities.size());\r\n}"
}, {
	"Path": "org.sakaiproject.util.ComponentsLoaderTest.testJarLoadOrder",
	"Comment": "this test verifies that when there are multiple jars within a components folder the jars are\tprocessed in a alphabetical order. this test may not break as we might get the correct order back\tfrom the filesystem.",
	"Method": "void testJarLoadOrder(){\r\n    if (!(builder.isUseable())) {\r\n        sayUnusableBuilder(\"testLoadComponentPackageDispatch()\");\r\n        return;\r\n    }\r\n    Component component = builder.buildComponent(\"jarloadorder\", \"Jar1\", \"Jar2\", \"Jar3\");\r\n    final List<String> expectedJournal = new ArrayList<String>() {\r\n        {\r\n            add(\"Jar1.jar\");\r\n            add(\"Jar2.jar\");\r\n            add(\"Jar3.jar\");\r\n        }\r\n    };\r\n    final Queue<String> journal = new LinkedList<String>();\r\n    loader = new ComponentsLoader() {\r\n        @Override\r\n        protected ClassLoader newPackageClassLoader(File dir) {\r\n            URLClassLoader classLoader = (URLClassLoader) super.newPackageClassLoader(dir);\r\n            for (URL url : classLoader.getURLs()) {\r\n                if (url.getFile().endsWith(\".jar\")) {\r\n                    journal.add(url.getFile());\r\n                }\r\n            }\r\n            return classLoader;\r\n        }\r\n    };\r\n    loader.load(componentMgr.getApplicationContext(), builder.getComponentsRootDir().getAbsolutePath());\r\n    for (String jar : expectedJournal) {\r\n        Assert.assertTrue(\"Didn't find the expected jar at the correct position.\", journal.poll().endsWith(jar));\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.ComponentsLoaderTest.testJarLoadOrder",
	"Comment": "this test verifies that when there are multiple jars within a components folder the jars are\tprocessed in a alphabetical order. this test may not break as we might get the correct order back\tfrom the filesystem.",
	"Method": "void testJarLoadOrder(){\r\n    URLClassLoader classLoader = (URLClassLoader) super.newPackageClassLoader(dir);\r\n    for (URL url : classLoader.getURLs()) {\r\n        if (url.getFile().endsWith(\".jar\")) {\r\n            journal.add(url.getFile());\r\n        }\r\n    }\r\n    return classLoader;\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.generateCollections",
	"Comment": "attempt to create any collections needed so that the parameter collection exists.",
	"Method": "void generateCollections(String target){\r\n    try {\r\n        String[] parts = StringUtil.split(target, \"/\");\r\n        String id = \"/\";\r\n        StringBuilder idBuilder = new StringBuilder();\r\n        idBuilder.append(id);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            idBuilder.append(parts[i] + \"/\");\r\n            ContentCollection collection = findCollection(idBuilder.toString());\r\n            if (collection == null) {\r\n                ContentCollectionEdit edit = addValidPermittedCollection(idBuilder.toString());\r\n                edit.getPropertiesEdit().addProperty(ResourceProperties.PROP_DISPLAY_NAME, parts[i]);\r\n                commitCollection(edit);\r\n            }\r\n        }\r\n    } catch (Exception any) {\r\n        log.error(\"generateCollections: \" + any.getMessage(), any);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.processReadAll",
	"Comment": "this marks all private messages as read for a particular site",
	"Method": "void processReadAll(ActionEvent e){\r\n    final String typeUuid = typeManager.getReceivedPrivateMessageType();\r\n    if (isMyWorkspace()) {\r\n        final FacesContext context = FacesContext.getCurrentInstance();\r\n        final Map requestParams = context.getExternalContext().getRequestParameterMap();\r\n        final String contextId = (String) requestParams.get(CONTEXTID);\r\n        final List privateMessages = pvtMessageManager.getMessagesByTypeByContext(typeUuid, contextId);\r\n        if (privateMessages == null) {\r\n            log.error(\"No messages found while attempting to mark all as read \" + \"from synoptic Message Center tool.\");\r\n        } else {\r\n            for (Iterator iter = privateMessages.iterator(); iter.hasNext(); ) {\r\n                pvtMessageManager.markMessageAsReadForUser((PrivateMessage) iter.next(), contextId);\r\n            }\r\n        }\r\n    } else {\r\n        List privateMessages = pvtMessageManager.getMessagesByType(typeUuid, PrivateMessageManager.SORT_COLUMN_DATE, PrivateMessageManager.SORT_DESC);\r\n        if (privateMessages == null) {\r\n            log.error(\"No messages found while attempting to mark all as read \" + \"from synoptic Message Center tool.\");\r\n        } else {\r\n            for (Iterator iter = privateMessages.iterator(); iter.hasNext(); ) {\r\n                pvtMessageManager.markMessageAsReadForUser((PrivateMessage) iter.next());\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.OKtoAdd",
	"Comment": "performs validation of input when attempting to add a podcast.\tchecks filename, date, and title fields since those are the\trequired ones. if errors, sets boolean flags so proper error \tmessages appear on the page.",
	"Method": "boolean OKtoAdd(){\r\n    boolean OKtoAdd = true;\r\n    if (filename == null) {\r\n        displayNoFileErrMsg = true;\r\n        OKtoAdd = false;\r\n    } else if (filename.trim().equals(\"\")) {\r\n        displayNoFileErrMsg = true;\r\n        OKtoAdd = false;\r\n    } else {\r\n        displayNoFileErrMsg = false;\r\n    }\r\n    Map<String, String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();\r\n    date = params.get(POD_ADD_ISO_HIDDEN_DATE);\r\n    if (date == null) {\r\n        displayNoDateErrMsg = true;\r\n        OKtoAdd = false;\r\n    } else if (date.trim().equals(\"\")) {\r\n        displayNoDateErrMsg = true;\r\n        OKtoAdd = false;\r\n    } else {\r\n        displayNoDateErrMsg = false;\r\n        if (DateFormatterUtil.isValidISODate(date)) {\r\n            displayInvalidDateErrMsg = false;\r\n        } else {\r\n            displayInvalidDateErrMsg = true;\r\n            OKtoAdd = false;\r\n        }\r\n    }\r\n    if (title == null) {\r\n        displayNoTitleErrMsg = true;\r\n        OKtoAdd = false;\r\n    } else if (title.trim().equals(\"\")) {\r\n        displayNoTitleErrMsg = true;\r\n        OKtoAdd = false;\r\n    } else {\r\n        displayNoTitleErrMsg = false;\r\n    }\r\n    return OKtoAdd;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.BaseSiteService.getCachedUserSites",
	"Comment": "get the list of sites that are accessible to a given user from the cache.",
	"Method": "List<Site> getCachedUserSites(String userId){\r\n    List<Site> userSites = null;\r\n    if (m_userSiteCache != null && userId != null) {\r\n        userSites = (List<Site>) m_userSiteCache.get(userId);\r\n    }\r\n    return userSites;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsMessageManagerImpl.findViewableMessageCountByTopicIdByUserId",
	"Comment": "returns count of all messages in a topic that have been approved or were authored by given user",
	"Method": "int findViewableMessageCountByTopicIdByUserId(Long topicId,String userId){\r\n    if (topicId == null || userId == null) {\r\n        log.error(\"findViewableMessageCountByTopicIdByUserId failed with topicId: \" + topicId + \" and userId: \" + userId);\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    log.debug(\"findViewableMessageCountByTopicIdByUserId executing with topicId: \" + topicId + \" and userId: \" + userId);\r\n    HibernateCallback<Number> hcb = session -> {\r\n        Query q = session.getNamedQuery(QUERY_COUNT_VIEWABLE_BY_TOPIC_ID);\r\n        q.setLong(\"topicId\", topicId);\r\n        q.setString(\"userId\", userId);\r\n        return (Number) q.uniqueResult();\r\n    };\r\n    return getHibernateTemplate().execute(hcb).intValue();\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.maybeUpdateLinks",
	"Comment": "only works if you have lessons write permission. caller shold check",
	"Method": "void maybeUpdateLinks(){\r\n    String needsFixup = getCurrentSite().getProperties().getProperty(\"lessonbuilder-needsfixup\");\r\n    if (needsFixup != null && needsFixup.length() != 0) {\r\n        int updated = 0;\r\n        try {\r\n            updated = simplePageToolDao.clearNeedsFixup(getCurrentSiteId());\r\n        } catch (Exception e) {\r\n            log.warn(\"clearneedsfixup {}\", e.toString());\r\n        }\r\n        if (updated != 0) {\r\n            lessonBuilderEntityProducer.updateEntityReferences(getCurrentSiteId());\r\n            currentSite = null;\r\n        }\r\n    }\r\n    int fixupType = simplePageToolDao.clearNeedsGroupFixup(getCurrentSiteId());\r\n    if (fixupType != 0)\r\n        lessonBuilderEntityProducer.fixupGroupRefs(getCurrentSiteId(), this, fixupType);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getDisplayNoTitleErrMsg",
	"Comment": "returns whether a no title entered error message is displayed",
	"Method": "boolean getDisplayNoTitleErrMsg(){\r\n    return displayNoTitleErrMsg;\r\n}"
}, {
	"Path": "org.sakaiproject.content.util.ZipContentUtil.exportResourceToFile",
	"Comment": "exports a the contentresource zip file to the operating system",
	"Method": "File exportResourceToFile(ContentResource resource){\r\n    File temp = null;\r\n    FileOutputStream out = null;\r\n    try {\r\n        temp = File.createTempFile(\"sakai_content-\", \".tmp\");\r\n        temp.deleteOnExit();\r\n        out = new FileOutputStream(temp);\r\n        IOUtils.copy(resource.streamContent(), out);\r\n        out.flush();\r\n    } catch (IOException e) {\r\n        log.error(e.getMessage(), e);\r\n    } catch (ServerOverloadException e) {\r\n        log.error(e.getMessage(), e);\r\n    } finally {\r\n        if (out != null) {\r\n            try {\r\n                out.close();\r\n            } catch (IOException e) {\r\n            }\r\n        }\r\n    }\r\n    return temp;\r\n}"
}, {
	"Path": "org.sakaiproject.email.api.EmailMessage.setHeader",
	"Comment": "sets a header to this message. any previous value for this key will be replaced. if value is\tnull, previous entries of the matching key will be removed.",
	"Method": "void setHeader(String key,String value){\r\n    if (key != null && value != null) {\r\n        if (headers == null) {\r\n            headers = new HashMap<String, String>();\r\n        }\r\n        headers.put(key, value);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder11Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder11Sql(){\r\n    return \"SAKAI_USER_ID_MAP.EID ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.addLiveUpdateProperties",
	"Comment": "update the live properties for an authzgroup for when modified.",
	"Method": "void addLiveUpdateProperties(BaseAuthzGroup azGroup){\r\n    String current = sessionManager().getCurrentSessionUserId();\r\n    azGroup.m_lastModifiedUserId = current;\r\n    azGroup.m_lastModifiedTime = timeService().newTime();\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.impl.rest.PASystemAdminEntityProvider.startSession",
	"Comment": "return a pa system service token to be passed with subsequent requests.",
	"Method": "String startSession(EntityView view,Map<String, Object> params){\r\n    try {\r\n        assertPermission();\r\n        JSONObject result = new JSONObject();\r\n        String newSessionId = mintSessionId();\r\n        result.put(REQUEST_SESSION_PARAMETER, newSessionId);\r\n        SessionManager.getCurrentSession().setAttribute(SAKAI_SESSION_TOKEN_PROPERTY, newSessionId);\r\n        return result.toJSONString();\r\n    } catch (Exception e) {\r\n        return respondWithError(e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityEncodingManager.sanitizeJsonCallback",
	"Comment": "clean the jsonp callback parameter to make sure it is sensible",
	"Method": "String sanitizeJsonCallback(Object param){\r\n    if (param == null || !(param instanceof String))\r\n        return JSON_DEFAULT_CALLBACK;\r\n    else\r\n        return \"/**/\" + param.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.util.Web.unEscapeHtml",
	"Comment": "returns a string with html entity references converted to characters suitable for processing as formatted text.",
	"Method": "String unEscapeHtml(String value){\r\n    if (value == null)\r\n        return \"\";\r\n    if (value.equals(\"\"))\r\n        return \"\";\r\n    value = value.replaceAll(\"&lt;\", \"<\");\r\n    value = value.replaceAll(\"&gt;\", \">\");\r\n    value = value.replaceAll(\"&amp;\", \"&\");\r\n    value = value.replaceAll(\"&quot;\", \"\\\"\");\r\n    return value;\r\n}"
}, {
	"Path": "org.sakaiproject.util.conversion.SchemaConversionDriver.getNewColumnNames",
	"Comment": "an array of strings identifying the names of columns that need to be\tadded before the conversion can proceed. null if no new columns need to\tbe added.",
	"Method": "String[] getNewColumnNames(){\r\n    String nameStr = p.getProperty(base + \".new.columns.names\");\r\n    log.debug(\"{}.new.columns.names == {}\", base, nameStr);\r\n    String[] names = null;\r\n    if (nameStr != null && !nameStr.trim().equals(\"\")) {\r\n        names = nameStr.split(\",\");\r\n    }\r\n    log.debug(\"{}.new.columns.names == {}\", base, names);\r\n    return names;\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.SettingsGradingSchemaPanel.isModified",
	"Comment": "has the stored grade mapping been modified from the defaults?",
	"Method": "boolean isModified(){\r\n    final GradeMappingDefinition gradeMapping = getGradingSchema(this.currentGradeMappingId);\r\n    return gradeMapping.isModified();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.WrappedInputStream.getExtraLength",
	"Comment": "returns the number of extra bytes we are adding to the stream.",
	"Method": "long getExtraLength(){\r\n    check();\r\n    if (isWrapping()) {\r\n        return header.getBytes().length + footer.getBytes().length;\r\n    } else {\r\n        return 0;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseXmlFileStorage.editContainer",
	"Comment": "return a lock on the container with this id, or null if a lock cannot be made.",
	"Method": "Edit editContainer(String ref){\r\n    Container c = (Container) m_store.get(ref);\r\n    if (c == null)\r\n        return null;\r\n    synchronized (m_locks) {\r\n        if (m_locks.get(c.container.getReference()) != null)\r\n            return null;\r\n        Edit edit = m_user.newContainerEdit(c.container);\r\n        m_locks.put(edit.getReference(), edit);\r\n        return edit;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityRedirectsManager.checkForTemplateMatch",
	"Comment": "do a check to see if the current incoming url is a match to any of the redirect templates forthe given entity provider",
	"Method": "String checkForTemplateMatch(EntityProvider entityProvider,String incomingURL,String queryString){\r\n    String prefix = entityProvider.getEntityPrefix();\r\n    String targetURL = null;\r\n    List<URLRedirect> redirects = entityProviderMethodStore.getURLRedirects(prefix);\r\n    if (redirects.size() > 0) {\r\n        List<PreProcessedTemplate> preprocessed = new ArrayList<PreProcessedTemplate>();\r\n        for (URLRedirect redirect : redirects) {\r\n            preprocessed.add(redirect.preProcessedTemplate);\r\n        }\r\n        ProcessedTemplate processedTemplate;\r\n        try {\r\n            processedTemplate = TemplateParseUtil.parseTemplate(incomingURL, preprocessed);\r\n        } catch (IllegalArgumentException e) {\r\n            processedTemplate = null;\r\n        }\r\n        if (processedTemplate != null) {\r\n            URLRedirect redirect = null;\r\n            for (URLRedirect urlRedirect : redirects) {\r\n                if (processedTemplate.template.equals(urlRedirect.template)) {\r\n                    redirect = urlRedirect;\r\n                    break;\r\n                }\r\n            }\r\n            if (redirect == null) {\r\n                throw new IllegalStateException(\"Failed to find a matching redirect for the matched template (\" + processedTemplate.template + \") for the incoming URL (\" + incomingURL + \")\");\r\n            } else {\r\n                Map<String, String> segmentValues = new HashMap<String, String>(processedTemplate.segmentValues);\r\n                segmentValues.put(TemplateParseUtil.PREFIX, prefix);\r\n                if (processedTemplate.extension == null || \"\".equals(processedTemplate.extension)) {\r\n                    segmentValues.put(TemplateParseUtil.EXTENSION, \"\");\r\n                    segmentValues.put(TemplateParseUtil.DOT_EXTENSION, \"\");\r\n                } else {\r\n                    segmentValues.put(TemplateParseUtil.EXTENSION, processedTemplate.extension);\r\n                    segmentValues.put(TemplateParseUtil.DOT_EXTENSION, TemplateParseUtil.PERIOD + processedTemplate.extension);\r\n                }\r\n                if (queryString != null && queryString.length() > 2) {\r\n                    segmentValues.put(TemplateParseUtil.QUERY_STRING, queryString);\r\n                    segmentValues.put(TemplateParseUtil.QUESTION_QUERY_STRING, '?' + queryString);\r\n                } else {\r\n                    segmentValues.put(TemplateParseUtil.QUERY_STRING, \"\");\r\n                    segmentValues.put(TemplateParseUtil.QUESTION_QUERY_STRING, \"\");\r\n                }\r\n                for (Entry<String, String> entry : segmentValues.entrySet()) {\r\n                    try {\r\n                        requestStorage.setStoredValue(entry.getKey(), entry.getValue());\r\n                    } catch (IllegalArgumentException e) {\r\n                        log.warn(\"EntityRedirectsManager: Had to skip key (\" + entry.getKey() + \") while adding keys to request storage: \" + e);\r\n                    }\r\n                }\r\n                if (redirect.controllable) {\r\n                    if (RedirectControllable.class.isAssignableFrom(entityProvider.getClass())) {\r\n                        targetURL = ((RedirectControllable) entityProvider).handleRedirects(processedTemplate.template, incomingURL, processedTemplate.variableNames.toArray(new String[processedTemplate.variableNames.size()]), segmentValues);\r\n                    } else {\r\n                        throw new IllegalStateException(\"Invalid URL Redirect Object, marked as controllable when this entity broker does not have the capability: \" + RedirectControllable.class);\r\n                    }\r\n                } else if (redirect.methodName != null) {\r\n                    Object result = null;\r\n                    Method method = redirect.getMethod();\r\n                    if (method == null) {\r\n                        try {\r\n                            method = entityProvider.getClass().getMethod(redirect.methodName, redirect.methodArgTypes);\r\n                        } catch (SecurityException e1) {\r\n                            throw new RuntimeException(\"Fatal error trying to get URL redirect method: \" + redirect, e1);\r\n                        } catch (NoSuchMethodException e1) {\r\n                            throw new RuntimeException(\"Fatal error trying to get URL redirect method: \" + redirect, e1);\r\n                        }\r\n                        redirect.setMethod(method);\r\n                    }\r\n                    Object[] args = new Object[redirect.methodArgTypes.length];\r\n                    for (int i = 0; i < redirect.methodArgTypes.length; i++) {\r\n                        Class<?> argType = redirect.methodArgTypes[i];\r\n                        if (String.class.equals(argType)) {\r\n                            args[i] = incomingURL;\r\n                        } else if (String[].class.equals(argType)) {\r\n                            args[i] = processedTemplate.variableNames.toArray(new String[processedTemplate.variableNames.size()]);\r\n                        } else if (Map.class.equals(argType)) {\r\n                            args[i] = segmentValues;\r\n                        } else {\r\n                            throw new IllegalStateException(\"URL redirect method (\" + redirect + \") contains an invalid methodArgTypes, \" + \"only valid types allowed: String, String[], Map\");\r\n                        }\r\n                    }\r\n                    try {\r\n                        result = method.invoke(entityProvider, args);\r\n                    } catch (IllegalArgumentException e) {\r\n                        throw new RuntimeException(\"Fatal error trying to execute URL redirect method: \" + redirect, e);\r\n                    } catch (IllegalAccessException e) {\r\n                        throw new RuntimeException(\"Fatal error trying to execute URL redirect method: \" + redirect, e);\r\n                    } catch (InvocationTargetException e) {\r\n                        String reference = incomingURL;\r\n                        if (e.getCause() != null) {\r\n                            if (e.getCause().getClass().isAssignableFrom(IllegalArgumentException.class)) {\r\n                                throw new IllegalArgumentException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                            } else if (e.getCause().getClass().isAssignableFrom(EntityNotFoundException.class)) {\r\n                                throw new EntityNotFoundException(e.getCause().getMessage() + \" (rethrown)\", reference, e.getCause());\r\n                            } else if (e.getCause().getClass().isAssignableFrom(FormatUnsupportedException.class)) {\r\n                                String format = ((FormatUnsupportedException) e.getCause()).format;\r\n                                throw new FormatUnsupportedException(e.getCause().getMessage() + \" (rethrown)\", e.getCause(), reference, format);\r\n                            } else if (e.getCause().getClass().isAssignableFrom(UnsupportedOperationException.class)) {\r\n                                throw new UnsupportedOperationException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                            } else if (e.getCause().getClass().isAssignableFrom(EntityException.class)) {\r\n                                int code = ((EntityException) e.getCause()).responseCode;\r\n                                throw new EntityException(e.getCause().getMessage() + \" (rethrown)\", reference, code);\r\n                            } else if (e.getCause().getClass().isAssignableFrom(IllegalStateException.class)) {\r\n                                throw new IllegalStateException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                            } else if (e.getCause().getClass().isAssignableFrom(SecurityException.class)) {\r\n                                throw new SecurityException(e.getCause().getMessage() + \" (rethrown)\", e.getCause());\r\n                            }\r\n                        }\r\n                        throw new RuntimeException(\"Fatal error trying to execute URL redirect method: \" + redirect, e);\r\n                    }\r\n                    if (result != null) {\r\n                        targetURL = result.toString();\r\n                    } else {\r\n                        targetURL = null;\r\n                    }\r\n                } else if (redirect.outgoingTemplate != null) {\r\n                    try {\r\n                        targetURL = TemplateParseUtil.mergeTemplate(redirect.outgoingTemplate, segmentValues);\r\n                    } catch (IllegalArgumentException e) {\r\n                        targetURL = null;\r\n                        log.warn(\"EntityRedirectsManager: Unable to merge target template (\" + redirect.outgoingTemplate + \") with available variables: \" + e);\r\n                    }\r\n                } else {\r\n                    throw new IllegalStateException(\"Invalid URL Redirect Object, could not determine operation: \" + redirect);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (targetURL != null && targetURL.length() > 0) {\r\n        if (targetURL.charAt(0) == TemplateParseUtil.SEPARATOR || targetURL.startsWith(\"http:\") || targetURL.startsWith(\"https:\")) {\r\n        } else {\r\n            targetURL = getServletContext() + TemplateParseUtil.SEPARATOR + targetURL;\r\n        }\r\n    }\r\n    return targetURL;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : serverConfigurationService().getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.email.api.EmailMessage.removeHeader",
	"Comment": "remove a header from this message. does nothing if header is not found.",
	"Method": "void removeHeader(String key){\r\n    if (headers != null && !headers.isEmpty() && headers.containsKey(key)) {\r\n        headers.remove(key);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.setFromPage",
	"Comment": "if deleting, the parameter determines where to navigate back to",
	"Method": "void setFromPage(String fromPage){\r\n    this.fromPage = fromPage;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBean.getGroupedSitesCounts",
	"Comment": "returns unread message counts for sites this user is a \tmember of a group. need this since memberships caused\toverlapping access and counts too high.",
	"Method": "List getGroupedSitesCounts(List groupedSites){\r\n    if (groupedSitesCounts == null) {\r\n        if (groupedSites.isEmpty()) {\r\n            groupedSitesCounts = groupedSites;\r\n        } else {\r\n            List results;\r\n            final List roleList = getUserRoles(groupedSites);\r\n            List dfTopicCounts = messageManager.findDiscussionForumMessageCountsForGroupedSitesByTopic(groupedSites, roleList);\r\n            List dfTopicReadCounts = messageManager.findDiscussionForumReadMessageCountsForGroupedSitesByTopic(groupedSites, roleList);\r\n            dfTopicCounts = filterAndAggragateGroupCounts(dfTopicCounts);\r\n            dfTopicReadCounts = filterAndAggragateGroupCounts(dfTopicReadCounts);\r\n            groupedSitesCounts = computeGroupedSitesUnreadCounts(dfTopicCounts, dfTopicReadCounts);\r\n        }\r\n    }\r\n    return groupedSitesCounts;\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean.pageVisibilityHelper",
	"Comment": "adds or removes the requirement to have site.upd in order to see a page\ti.e. hide or unhide a page",
	"Method": "boolean pageVisibilityHelper(Site site,String pageId,boolean visible){\r\n    SitePage page = site.getPage(pageId);\r\n    List<ToolConfiguration> tools = page.getTools();\r\n    Iterator<ToolConfiguration> iterator = tools.iterator();\r\n    while (iterator.hasNext()) {\r\n        ToolConfiguration placement = iterator.next();\r\n        Properties roleConfig = placement.getPlacementConfig();\r\n        String roleList = roleConfig.getProperty(\"functions.require\");\r\n        boolean saveChanges = false;\r\n        if (roleList == null) {\r\n            roleList = \"\";\r\n        }\r\n        if (!roleList.contains(SITE_UPD) && !visible) {\r\n            if (roleList.length() > 0) {\r\n                roleList += \",\";\r\n            }\r\n            roleList += SITE_UPD;\r\n            saveChanges = true;\r\n        } else if ((roleList.contains(SITE_UPD)) && visible) {\r\n            roleList = roleList.replaceAll(\",\" + SITE_UPD, \"\");\r\n            roleList = roleList.replaceAll(SITE_UPD, \"\");\r\n            saveChanges = true;\r\n        }\r\n        if (saveChanges) {\r\n            roleConfig.setProperty(\"functions.require\", roleList);\r\n            if (visible)\r\n                roleConfig.remove(\"sakai-portal:visible\");\r\n            else\r\n                roleConfig.setProperty(\"sakai-portal:visible\", \"false\");\r\n            placement.save();\r\n            siteService.save(site);\r\n        }\r\n    }\r\n    return true;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.spring.ResourceFinder.getResource",
	"Comment": "resolve a path into a resource relative to environmental defaults or relative paths or the classloader",
	"Method": "Resource getResource(String path){\r\n    return makeResource(path);\r\n}"
}, {
	"Path": "org.sakaiproject.util.MultiSingleStorageSqlDefault.getXmlAndFieldSql",
	"Comment": "returns the sql statement which retrieves the specified field and the xml field from the specified table.",
	"Method": "String getXmlAndFieldSql(String field,String table){\r\n    return \"select \" + field + \", \" + storageFields + \" from \" + table;\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseDbDoubleStorage.editContainer",
	"Comment": "get a lock on the container with this id, or null if a lock cannot be gotten.",
	"Method": "Edit editContainer(String ref){\r\n    Edit edit = null;\r\n    if (m_locksAreInDb) {\r\n        if (\"oracle\".equals(m_sql.getVendor())) {\r\n            String statement = doubleStorageSql.getSelectXml3Sql(m_containerTableName, m_containerTableIdField, StorageUtils.escapeSql(ref));\r\n            StringBuilder result = new StringBuilder();\r\n            Connection lock = m_sql.dbReadLock(statement, result);\r\n            if ((lock == null) || (result.length() == 0))\r\n                return null;\r\n            Entity entry = readContainer(result.toString());\r\n            edit = m_user.newContainerEdit(entry);\r\n            m_locks.put(entry.getReference(), lock);\r\n        } else {\r\n            throw new UnsupportedOperationException(\"Record locking only available when configured with Oracle database\");\r\n        }\r\n    } else if (m_locksAreInTable) {\r\n        Entity entry = getContainer(ref);\r\n        if (entry == null)\r\n            return null;\r\n        String statement = doubleStorageSql.getInsertSql2();\r\n        String sessionId = UsageSessionService.getSessionId();\r\n        if (sessionId == null) {\r\n            sessionId = \"\";\r\n        }\r\n        Object[] fields = new Object[4];\r\n        fields[0] = m_containerTableName;\r\n        fields[1] = doubleStorageSql.getRecordId(ref);\r\n        fields[2] = TimeService.newTime();\r\n        fields[3] = sessionId;\r\n        boolean ok = m_sql.dbWriteFailQuiet(null, statement, fields);\r\n        if (!ok) {\r\n            return null;\r\n        }\r\n        edit = m_user.newContainerEdit(entry);\r\n    } else {\r\n        Entity entry = getContainer(ref);\r\n        if (entry == null)\r\n            return null;\r\n        synchronized (m_locks) {\r\n            if (m_locks.containsKey(entry.getReference()))\r\n                return null;\r\n            edit = m_user.newContainerEdit(entry);\r\n            m_locks.put(entry.getReference(), edit);\r\n        }\r\n    }\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.EntityDataUtils.putAllNewInMap",
	"Comment": "puts the values of 2 maps together such that the values from the newstuff map are added to theoriginal map only if they are not already in the the original",
	"Method": "void putAllNewInMap(Map<T, S> original,Map<T, S> newStuff){\r\n    if (original == null) {\r\n        throw new IllegalArgumentException(\"original map cannot be null\");\r\n    }\r\n    if (newStuff != null) {\r\n        if (original.isEmpty()) {\r\n            original.putAll(newStuff);\r\n        } else {\r\n            for (Entry<T, S> entry : newStuff.entrySet()) {\r\n                if (original.containsKey(entry.getKey())) {\r\n                    continue;\r\n                }\r\n                original.put(entry.getKey(), entry.getValue());\r\n            }\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.tool.beans.EmailBean.compileEmailList",
	"Comment": "compiles a list of email recipients from role, group and section selections.",
	"Method": "HashSet<String> compileEmailList(String fromEmail,HashMap<String, String> emailusers){\r\n    HashSet<String> badEmails = new HashSet<String>();\r\n    if (emailEntry.isAllIds()) {\r\n        try {\r\n            addEmailUsers(fromEmail, emailusers, composeLogic.getUsers());\r\n        } catch (IdUnusedException e) {\r\n            log.warn(e.getMessage(), e);\r\n            badEmails.add(e.getMessage());\r\n        }\r\n    } else {\r\n        for (String roleId : emailEntry.getRoleIds().keySet()) {\r\n            try {\r\n                List<User> users = composeLogic.getUsersByRole(roleId);\r\n                addEmailUsers(fromEmail, emailusers, users);\r\n            } catch (IdUnusedException e) {\r\n                log.warn(e.getMessage(), e);\r\n                badEmails.add(roleId);\r\n            }\r\n        }\r\n        for (String sectionId : emailEntry.getSectionIds().keySet()) {\r\n            try {\r\n                List<User> users = composeLogic.getUsersByGroup(sectionId);\r\n                addEmailUsers(fromEmail, emailusers, users);\r\n            } catch (IdUnusedException e) {\r\n                log.warn(e.getMessage(), e);\r\n            }\r\n        }\r\n        for (String groupId : emailEntry.getGroupIds().keySet()) {\r\n            try {\r\n                List<User> users = composeLogic.getUsersByGroup(groupId);\r\n                addEmailUsers(fromEmail, emailusers, users);\r\n            } catch (IdUnusedException e) {\r\n                log.warn(e.getMessage(), e);\r\n            }\r\n        }\r\n        for (String userId : emailEntry.getUserIds().keySet()) {\r\n            User user = externalLogic.getUser(userId);\r\n            addEmailUser(fromEmail, emailusers, user);\r\n        }\r\n    }\r\n    return badEmails;\r\n}"
}, {
	"Path": "org.sakaiproject.email.api.EmailMessage.getAllRecipients",
	"Comment": "get all recipients as a flattened list. this is intended to be used for determining the\trecipients for an smtp route.",
	"Method": "List<EmailAddress> getAllRecipients(){\r\n    List<EmailAddress> rcpts = new ArrayList<EmailAddress>();\r\n    if (recipients.containsKey(RecipientType.TO)) {\r\n        rcpts.addAll(recipients.get(RecipientType.TO));\r\n    }\r\n    if (recipients.containsKey(RecipientType.CC)) {\r\n        rcpts.addAll(recipients.get(RecipientType.CC));\r\n    }\r\n    if (recipients.containsKey(RecipientType.BCC)) {\r\n        rcpts.addAll(recipients.get(RecipientType.BCC));\r\n    }\r\n    if (recipients.containsKey(RecipientType.ACTUAL)) {\r\n        rcpts.addAll(recipients.get(RecipientType.ACTUAL));\r\n    }\r\n    return rcpts;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder13Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder13Sql(){\r\n    return \"SAKAI_SITE.CREATEDON ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.content.util.BaseInteractionAction.getRequiredPropertyKeys",
	"Comment": "access a list of properties that should be provided to the helper if they are defined. returning null or empty list indicates no properties are needed by the helper.",
	"Method": "List<String> getRequiredPropertyKeys(){\r\n    return requiredPropertyKeys;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesOrder1Sql",
	"Comment": "returns the sql statement which is part of the order clause to retrieve sites.",
	"Method": "String getSitesOrder1Sql(){\r\n    return \"SAKAI_SITE.SITE_ID ASC\";\r\n}"
}, {
	"Path": "org.sakaiproject.config.impl.ConfigurationMBean.addAttribute",
	"Comment": "called through reflection on this class to add a new attribute",
	"Method": "void addAttribute(String key,String value){\r\n    ConfigItem config = new BasicConfigItem(key, value, null, null, null, true);\r\n    serverConfigurationService.registerConfigItem(config);\r\n    Notification notification = new Notification(\"jmx.mbean.info.changed\", this, notificationSeq.getAndIncrement());\r\n    notification.setUserData(getMBeanInfo());\r\n    sendNotification(notification);\r\n}"
}, {
	"Path": "org.sakaiproject.db.impl.BasicSqlServiceSqlHSql.getRecordAlreadyExists",
	"Comment": "returns whether the sql exception indicates that a record already exists in a table.",
	"Method": "boolean getRecordAlreadyExists(SQLException ex){\r\n    return ex.getErrorCode() == -104 || ex.getErrorCode() == -9;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.DiscussionForumBean.setRestrictPermissionsForGroups",
	"Comment": "set the restrictpermissionsforgroups setting for the forum.",
	"Method": "void setRestrictPermissionsForGroups(String restrictPermissionsForGroups){\r\n    log.debug(\"setRestrictPermissionsForGroups()\");\r\n    forum.setRestrictPermissionsForGroups(Boolean.parseBoolean(restrictPermissionsForGroups));\r\n}"
}, {
	"Path": "org.sakaiproject.memory.util.EhCacheFactoryBean.setCacheName",
	"Comment": "set a name for which to retrieve or create a cache instance.\tdefault is the bean name of this ehcachefactorybean.",
	"Method": "void setCacheName(String cacheName){\r\n    this.cacheName = cacheName;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Validator.getFileName",
	"Comment": "isolate and return just the file name part of a full drive and path file name.",
	"Method": "String getFileName(String fullName){\r\n    StringBuilder buf = new StringBuilder();\r\n    int index = fullName.length() - 1;\r\n    while (index >= 0) {\r\n        char c = fullName.charAt(index--);\r\n        if ((c == '\\\\') || (c == '/') || (c == ':'))\r\n            break;\r\n        buf.insert(0, c);\r\n    }\r\n    return buf.toString();\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.isDropboxGroups",
	"Comment": "determine whether the user has the dropbox.groups permission",
	"Method": "boolean isDropboxGroups(String siteId){\r\n    String dropboxId = null;\r\n    if (m_siteService.isUserSite(siteId) || m_siteService.isSpecialSite(siteId)) {\r\n        return false;\r\n    }\r\n    return m_securityService.unlock(AUTH_DROPBOX_GROUPS, m_siteService.siteReference(siteId));\r\n}"
}, {
	"Path": "org.sakaiproject.message.util.BaseMessage.getMessage",
	"Comment": "get a message, given a reference. this call avoids the need to have channel security, as long as the user has permissions to the message.",
	"Method": "Message getMessage(Reference ref,Message getMessage,String messageId,Message getMessage,MessageChannel channel,String messageId){\r\n    if (!ref.getSubType().equals(REF_TYPE_MESSAGE)) {\r\n        throw new IdUnusedException(ref.getReference());\r\n    }\r\n    MessageChannel c = findChannel(channelReference(ref.getContext(), ref.getContainer()));\r\n    if (c == null) {\r\n        throw new IdUnusedException(ref.getContainer());\r\n    }\r\n    Message m = ((BaseMessageChannelEdit) c).findMessage(ref.getId());\r\n    if (m.getProperties().getProperty(ResourceProperties.PROP_PUBVIEW) == null || !m.getProperties().getProperty(ResourceProperties.PROP_PUBVIEW).equals(Boolean.TRUE.toString())) {\r\n        boolean isDraft = m.getHeader().getDraft();\r\n        if (!allowGetMessage(channelReference(ref.getContext(), ref.getContainer()), ref.getReference(), isDraft)) {\r\n            if (isDraft)\r\n                throw new PermissionException(m_sessionManager.getCurrentSessionUserId(), eventId(SECURE_READ_DRAFT), ref.getReference());\r\n            else\r\n                throw new PermissionException(m_sessionManager.getCurrentSessionUserId(), eventId(SECURE_READ), ref.getReference());\r\n        }\r\n    }\r\n    return m;\r\n}"
}, {
	"Path": "org.sakaiproject.mailsender.logic.impl.ComposeLogicImpl.includeRole",
	"Comment": "should this role be included in the list which users can send messages to?",
	"Method": "boolean includeRole(String rolename){\r\n    return !(rolename.startsWith(\".\") || ignoreRoles.contains(rolename));\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podOptionsBean.setErrorMessage",
	"Comment": "passes an error message to the spring framework to display on page.",
	"Method": "void setErrorMessage(String alertMsg){\r\n    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(\"Alert: \" + rb.getString(alertMsg)));\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.AssignmentEntity.editItemSettingsUrl",
	"Comment": "contents and settings. this will be null except in that situation",
	"Method": "String editItemSettingsUrl(SimplePageBean bean){\r\n    return null;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere16Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere16Sql(int size){\r\n    StringBuilder values = new StringBuilder();\r\n    for (int i = 0; i < size; i++) {\r\n        if (i > 0) {\r\n            values.append(\",\");\r\n        }\r\n        values.append(\"?\");\r\n    }\r\n    return \"SAKAI_SITE.SITE_ID not in (\" + values.toString() + \") and \";\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.pages.BasePage.generatePopoverContent",
	"Comment": "helper to generate content for a bootstrap popover with close button",
	"Method": "String generatePopoverContent(String message){\r\n    final String popoverHTML = \"<a href='javascript:void(0);' class='gb-popover-close'><\/a><ul class='gb-popover-notifications'><li class='text-info'>%s<\/li><\/ul>\";\r\n    final String wrappedPopoverContent = String.format(popoverHTML, message);\r\n    return wrappedPopoverContent;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.MyNonPortableSession.getAllAttributes",
	"Comment": "get all the attributes in this session.the returned data structure is a copy of all the attributes in this session and does not\trepresent the backing data structure of the session itself.",
	"Method": "Map<String, Object> getAllAttributes(){\r\n    return new HashMap<String, Object>(m_attributes);\r\n}"
}, {
	"Path": "org.sakaiproject.message.util.BaseMessage.isIntersectionGroupRefsToGroups",
	"Comment": "see if the collection of group reference strings has at least one group that is in the collection of group objects.",
	"Method": "boolean isIntersectionGroupRefsToGroups(Collection groupRefs,Collection groups){\r\n    for (Iterator iRefs = groupRefs.iterator(); iRefs.hasNext(); ) {\r\n        String findThisGroupRef = (String) iRefs.next();\r\n        for (Iterator iGroups = groups.iterator(); iGroups.hasNext(); ) {\r\n            String thisGroupRef = ((Group) iGroups.next()).getReference();\r\n            if (thisGroupRef.equals(findThisGroupRef)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.springframework.orm.hibernate.AddableSessionFactoryBean.init",
	"Comment": "this method is called after the localsessionfactory is instantiated",
	"Method": "void init(){\r\n    Configuration config = getConfiguration();\r\n    config.addSqlFunction(\"count\", StandardAnsiSqlAggregationFunctions.CountFunction.INSTANCE);\r\n    config.addSqlFunction(\"avg\", StandardAnsiSqlAggregationFunctions.AvgFunction.INSTANCE);\r\n    config.addSqlFunction(\"sum\", StandardAnsiSqlAggregationFunctions.SumFunction.INSTANCE);\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.util.core.EntityProviderMethodStoreImpl.validateControllableTemplates",
	"Comment": "execute this validate and get the templates so they can be registered",
	"Method": "URLRedirect[] validateControllableTemplates(RedirectControllable configControllable){\r\n    List<URLRedirect> redirects = new ArrayList<URLRedirect>();\r\n    String[] templates = configControllable.defineHandledTemplatePatterns();\r\n    if (templates == null || templates.length == 0) {\r\n        throw new IllegalArgumentException(\"RedirectControllable: invalid defineHandledTemplatePatterns: \" + \"this should return a non-empty array of templates or the capability should not be used\");\r\n    } else {\r\n        for (String template : templates) {\r\n            URLRedirect redirect = null;\r\n            try {\r\n                redirect = new URLRedirect(template);\r\n            } catch (RuntimeException e) {\r\n                throw new IllegalArgumentException(\"Failed to validate redirect templates from handled template patterns for prefix (\" + configControllable.getEntityPrefix() + \"): \" + e.getMessage(), e);\r\n            }\r\n            redirects.add(redirect);\r\n        }\r\n    }\r\n    return redirects.toArray(new URLRedirect[redirects.size()]);\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.mergeResource",
	"Comment": "merge in a resource from an xml dom definition and a body bytes array. ignore if already defined. take whole if not.",
	"Method": "ContentResource mergeResource(Element element,ContentResource mergeResource,Element element,InputStream in){\r\n    BaseResourceEdit resourceFromXml = new BaseResourceEdit(element);\r\n    String id = resourceFromXml.getId();\r\n    BaseResourceEdit edit = null;\r\n    try {\r\n        edit = (BaseResourceEdit) addResource(id);\r\n    } catch (IdUsedException e) {\r\n        return null;\r\n    }\r\n    edit.setContentType(resourceFromXml.getContentType());\r\n    ResourcePropertiesEdit p = edit.getPropertiesEdit();\r\n    p.clear();\r\n    p.addAll(resourceFromXml.getProperties());\r\n    if (in != null) {\r\n        edit.setContent(in);\r\n    }\r\n    edit.setEvent(EVENT_RESOURCE_ADD);\r\n    assureResourceProperties(edit);\r\n    if (overQuota(edit)) {\r\n        throw new OverQuotaException(edit.getReference());\r\n    }\r\n    m_storage.commitResource(edit);\r\n    if (!readyToUseFilesizeColumn()) {\r\n        addSizeCache(edit);\r\n    }\r\n    String ref = edit.getReference(null);\r\n    eventTrackingService.post(eventTrackingService.newEvent(((BaseResourceEdit) edit).getEvent(), ref, true, NotificationService.NOTI_NONE));\r\n    postAvailableEvent(edit, ref, NotificationService.NOTI_NONE);\r\n    ((BaseResourceEdit) edit).closeEdit();\r\n    return edit;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsMessageManagerImpl.findUnreadViewableMessageCountByTopicId",
	"Comment": "returns count of all unread msgs for current user that have been approved or were authored by current user",
	"Method": "int findUnreadViewableMessageCountByTopicId(Long topicId){\r\n    if (topicId == null) {\r\n        log.error(\"findUnreadViewableMessageCountByTopicId failed with topicId: null\");\r\n        throw new IllegalArgumentException(\"Null Argument\");\r\n    }\r\n    log.debug(\"findUnreadViewableMessageCountByTopicId executing with topicId: \" + topicId);\r\n    if (getCurrentUser() != null) {\r\n        return findUnreadViewableMessageCountByTopicIdByUserId(topicId, getCurrentUser());\r\n    } else\r\n        return 0;\r\n}"
}, {
	"Path": "org.sakaiproject.util.Web.hexDigit",
	"Comment": "returns the hex digit cooresponding to a number between 0 and 15.",
	"Method": "char hexDigit(int i){\r\n    switch(i) {\r\n        case 0:\r\n            return '0';\r\n        case 1:\r\n            return '1';\r\n        case 2:\r\n            return '2';\r\n        case 3:\r\n            return '3';\r\n        case 4:\r\n            return '4';\r\n        case 5:\r\n            return '5';\r\n        case 6:\r\n            return '6';\r\n        case 7:\r\n            return '7';\r\n        case 8:\r\n            return '8';\r\n        case 9:\r\n            return '9';\r\n        case 10:\r\n            return 'A';\r\n        case 11:\r\n            return 'B';\r\n        case 12:\r\n            return 'C';\r\n        case 13:\r\n            return 'D';\r\n        case 14:\r\n            return 'E';\r\n        case 15:\r\n            return 'F';\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid digit:\" + i);\r\n}"
}, {
	"Path": "org.sakaiproject.content.impl.BaseContentService.removeProperty",
	"Comment": "remove a property from a resource, either collection or resource.",
	"Method": "ResourceProperties removeProperty(String id,String name){\r\n    checkExplicitLock(id);\r\n    if (!allowRemoveProperty(id))\r\n        throw new PermissionException(sessionManager.getCurrentSessionUserId(), AUTH_RESOURCE_WRITE_ANY, getReference(id));\r\n    boolean collectionHint = id.endsWith(Entity.SEPARATOR);\r\n    Edit o = null;\r\n    if (collectionHint) {\r\n        o = editCollection(id);\r\n    } else {\r\n        o = editResource(id);\r\n    }\r\n    if (o == null)\r\n        throw new IdUnusedException(id);\r\n    ResourcePropertiesEdit props = o.getPropertiesEdit();\r\n    if (props.isLiveProperty(name))\r\n        throw new TypeException(name);\r\n    props.removeProperty(name);\r\n    if (o instanceof ContentResourceEdit) {\r\n        commitResourceEdit((ContentResourceEdit) o, NotificationService.NOTI_NONE);\r\n    }\r\n    if (o instanceof ContentCollectionEdit) {\r\n        commitCollection((ContentCollectionEdit) o);\r\n    }\r\n    return props;\r\n}"
}, {
	"Path": "org.sakaiproject.memory.util.EhCacheFactoryBean.setDiskExpiryThreadIntervalSeconds",
	"Comment": "set the number of seconds between runs of the disk expiry thread.\tdefault is 120 seconds.",
	"Method": "void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds){\r\n    this.diskExpiryThreadIntervalSeconds = diskExpiryThreadIntervalSeconds;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.podcasts.BasicPodfeedService.getMessageBundleString",
	"Comment": "sets the faces error message by pulling the message from the\tmessagebundle using the name passed in",
	"Method": "String getMessageBundleString(String key){\r\n    return resbud.getString(key);\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.api.Banner.isActiveForHost",
	"Comment": "true if this banner is active now and assigned to the current server.",
	"Method": "boolean isActiveForHost(String hostname){\r\n    if (!isActiveNow()) {\r\n        return false;\r\n    }\r\n    if (hosts == null || hosts.isEmpty()) {\r\n        return true;\r\n    }\r\n    return Arrays.asList(hosts.split(\",\")).contains(hostname);\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.tool.panels.SettingsGradingSchemaPanel.getGradingSchemaEntries",
	"Comment": "helper to determine and return the applicable grading schema entries, depending on current state",
	"Method": "List<GbGradingSchemaEntry> getGradingSchemaEntries(){\r\n    return SettingsHelper.asList(getBottomPercents());\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getSitesWhere7Sql",
	"Comment": "returns the sql statement which is part of the where clause to retrieve sites.",
	"Method": "String getSitesWhere7Sql(){\r\n    return \"SAKAI_SITE.JOINABLE = '1' and \";\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.LessonsEntityContentProducer.idFromRef",
	"Comment": "seems like there should be a method for this, but is what most of the code does, lessons length is 4",
	"Method": "long idFromRef(String reference,int length,long idFromRef,String reference){\r\n    return idFromRef(reference, 4);\r\n}"
}, {
	"Path": "org.sakaiproject.calendaring.api.ExternalCalendaringServiceImpl.getEndDate",
	"Comment": "helper to extract the enddate of a timerange into a java.util.calendar object.",
	"Method": "java.util.Calendar getEndDate(TimeRange range){\r\n    java.util.Calendar c = new GregorianCalendar();\r\n    c.setTimeInMillis(range.lastTime().getTime());\r\n    return c;\r\n}"
}, {
	"Path": "org.sakaiproject.component.app.messageforums.MessageForumsMessageManagerImpl.isToolInSite",
	"Comment": "return true if tool with id passed in exists in site passed in\tfalse otherwise.",
	"Method": "boolean isToolInSite(String siteId,String toolId){\r\n    Site thisSite;\r\n    try {\r\n        thisSite = siteService.getSite(siteId);\r\n        Collection toolsInSite = thisSite.getTools(toolId);\r\n        return !toolsInSite.isEmpty();\r\n    } catch (IdUnusedException e) {\r\n        log.error(\"IdUnusedException attempting to get site for id \" + siteId + \" to check if tool \" + \"with id \" + toolId + \" is in it.\", e);\r\n    }\r\n    return false;\r\n}"
}, {
	"Path": "org.sakaiproject.authz.impl.BaseAuthzGroupService.removeSiteSecurity",
	"Comment": "update the site security when an authzgroup is deleted, if it is a site authzgroup.",
	"Method": "void removeSiteSecurity(AuthzGroup azGroup){\r\n    Reference ref = entityManager().newReference(azGroup.getId());\r\n    if (SiteService.APPLICATION_ID.equals(ref.getType()) && SiteService.SITE_SUBTYPE.equals(ref.getSubType())) {\r\n        Set empty = new HashSet();\r\n        siteService.setSiteSecurity(ref.getId(), empty, empty, empty);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.ToolListenerTest.testMessageBundle",
	"Comment": "check that locale files are loaded out of the old tools folder.",
	"Method": "void testMessageBundle(){\r\n    when(context.getResourcePaths(\"/tools/\")).thenReturn(Stream.of(\"/tools/\", \"/tools/sakai-tool.xml\", \"/tools/sakai-tool.properties\", \"/tools/sakai-tool_fr.properties\").collect(Collectors.toSet()));\r\n    listener.contextInitialized(event);\r\n    verify(activeToolManager).setResourceBundle(\"sakai-tool\", \"/webapp/tools/sakai-tool.properties\");\r\n    verify(activeToolManager).setResourceBundle(\"sakai-tool\", \"/webapp/tools/sakai-tool_fr.properties\");\r\n}"
}, {
	"Path": "org.sakaiproject.util.BasicConfigItem.makeConfigItem",
	"Comment": "create a complete config item with default value and a description which can be dynamic",
	"Method": "ConfigItem makeConfigItem(String name,Object value,String source,ConfigItem makeConfigItem,String name,Object value,String source,boolean dynamic,ConfigItem makeConfigItem,String name,Object value,String description,String source,boolean dynamic,ConfigItem makeConfigItem,String name,Object value,Object defaultValue,String description,String source,boolean dynamic){\r\n    return new BasicConfigItem(name, value, defaultValue, description, source, dynamic);\r\n}"
}, {
	"Path": "org.sakaiproject.tool.impl.MySession.destroy",
	"Comment": "testing onlyspecial method to destroy a session without purging the sessions storage data",
	"Method": "void destroy(){\r\n    m_valid = false;\r\n    String sessionId = getId();\r\n    synchronized (this) {\r\n        clear();\r\n        sessionStore.remove(sessionId);\r\n    }\r\n    if (this.equals(this.sessionManager.getCurrentSession())) {\r\n        this.sessionManager.setCurrentSession(null);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.config.impl.StoredConfigService.getConfigItems",
	"Comment": "get all registered hibernateconfigitem as configitems for this node",
	"Method": "List<ConfigItem> getConfigItems(){\r\n    List<ConfigItem> configItems = new ArrayList<ConfigItem>();\r\n    List<HibernateConfigItem> regItems = findRegistered();\r\n    for (HibernateConfigItem hItem : regItems) {\r\n        ConfigItem item = createConfigItem(hItem);\r\n        if (item != null) {\r\n            configItems.add(item);\r\n            log.debug(\"{}\", item);\r\n        }\r\n    }\r\n    return configItems;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.impl.EntityBrokerManagerImpl.makeEntityView",
	"Comment": "reduce code duplication and ensure custom templates are used",
	"Method": "EntityView makeEntityView(EntityReference ref,String viewKey,String extension){\r\n    if (ref == null) {\r\n        throw new IllegalArgumentException(\"ref cannot be null\");\r\n    }\r\n    EntityView view = new EntityView();\r\n    EntityViewUrlCustomizable custom = (EntityViewUrlCustomizable) entityProviderManager.getProviderByPrefixAndCapability(ref.getPrefix(), EntityViewUrlCustomizable.class);\r\n    if (custom != null) {\r\n        view.loadParseTemplates(custom.getParseTemplates());\r\n    }\r\n    view.setEntityReference(ref);\r\n    if (viewKey != null) {\r\n        view.setViewKey(viewKey);\r\n    }\r\n    if (extension != null) {\r\n        view.setExtension(extension);\r\n    }\r\n    return view;\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlDefault.getXmlLikeSql",
	"Comment": "returns the sql statement which retrieves the xml field from the specified table.",
	"Method": "String getXmlLikeSql(String field,String table){\r\n    return \"select XML from \" + table + \" where \" + field + \" like ?\";\r\n}"
}, {
	"Path": "org.sakaiproject.gradebookng.business.GradebookNgBusinessService.buildGradeMatrix",
	"Comment": "build the matrix of assignments and grades for the given users with the specified sort order",
	"Method": "List<GbStudentGradeInfo> buildGradeMatrix(List<Assignment> assignments,List<GbStudentGradeInfo> buildGradeMatrix,List<Assignment> assignments,List<String> studentUuids,List<GbStudentGradeInfo> buildGradeMatrix,List<Assignment> assignments,GradebookUiSettings uiSettings,List<GbStudentGradeInfo> buildGradeMatrix,List<Assignment> assignments,List<String> studentUuids,GradebookUiSettings uiSettings){\r\n    final GradebookUiSettings settings = (uiSettings != null) ? uiSettings : new GradebookUiSettings();\r\n    final GbStopWatch stopwatch = new GbStopWatch();\r\n    stopwatch.start();\r\n    stopwatch.timeWithContext(\"buildGradeMatrix\", \"buildGradeMatrix start\", stopwatch.getTime());\r\n    final Gradebook gradebook = this.getGradebook();\r\n    if (gradebook == null) {\r\n        return null;\r\n    }\r\n    stopwatch.timeWithContext(\"buildGradeMatrix\", \"getGradebook\", stopwatch.getTime());\r\n    final String currentUserUuid = getCurrentUser().getId();\r\n    GbRole role;\r\n    try {\r\n        role = this.getUserRole();\r\n    } catch (final GbAccessDeniedException e) {\r\n        throw new GbException(\"Error getting role for current user\", e);\r\n    }\r\n    final Site site = getCurrentSite().orElse(null);\r\n    final List<GbUser> gbStudents = getGbUsersForUiSettings(studentUuids, settings, site);\r\n    stopwatch.timeWithContext(\"buildGradeMatrix\", \"sortUsers\", stopwatch.getTime());\r\n    final Map<String, GbStudentGradeInfo> matrix = new LinkedHashMap();\r\n    putCourseGradesInMatrix(matrix, gbStudents, studentUuids, gradebook, role, isCourseGradeVisible(currentUserUuid), settings);\r\n    stopwatch.timeWithContext(\"buildGradeMatrix\", \"putCourseGradesInMatrix\", stopwatch.getTime());\r\n    putAssignmentsAndCategoryItemsInMatrix(matrix, gbStudents, studentUuids, assignments, gradebook, currentUserUuid, role, settings);\r\n    stopwatch.timeWithContext(\"buildGradeMatrix\", \"putAssignmentsAndCategoryItemsInMatrix\", stopwatch.getTime());\r\n    List<GbStudentGradeInfo> items = sortGradeMatrix(matrix, settings);\r\n    stopwatch.timeWithContext(\"buildGradeMatrix\", \"sortGradeMatrix\", stopwatch.getTime());\r\n    return items;\r\n}"
}, {
	"Path": "org.sakaiproject.alias.impl.BaseAliasService.getAccessPoint",
	"Comment": "access the partial url that forms the root of resource urls.",
	"Method": "String getAccessPoint(boolean relative){\r\n    return (relative ? \"\" : serverConfigurationService().getAccessUrl()) + m_relativeAccessPoint;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.DiscussionForumTool.processDfMsgDeleteConfirmYes",
	"Comment": "deletes the message by setting boolean deleted switch to true.",
	"Method": "String processDfMsgDeleteConfirmYes(){\r\n    if (!checkPermissionsForUser(\"processDfReplyTopicSaveDraft\", false, false, false, true)) {\r\n        return gotoMain();\r\n    }\r\n    if (selectedTopic == null) {\r\n        log.debug(\"selectedTopic is null in processDfMsgDeleteConfirmYes\");\r\n        return gotoMain();\r\n    }\r\n    DiscussionTopic topic = selectedTopic.getTopic();\r\n    DiscussionForum forum = selectedForum.getForum();\r\n    HashMap<String, Integer> beforeChangeHM = null;\r\n    Long forumId = selectedTopic.getTopic().getBaseForum().getId();\r\n    Long topicId = selectedTopic.getTopic().getId();\r\n    beforeChangeHM = SynopticMsgcntrManagerCover.getUserToNewMessagesForForumMap(getSiteId(), forumId, topicId);\r\n    if (!uiPermissionsManager.isDeleteAny(topic, forum) && !(selectedMessage.getIsOwn() && uiPermissionsManager.isDeleteOwn(topic, forum))) {\r\n        setErrorMessage(getResourceBundleString(INSUFFICIENT_PRIVILEGES_TO_DELETE));\r\n        this.deleteMsg = false;\r\n        return null;\r\n    }\r\n    Message message = selectedMessage.getMessage();\r\n    message.setDeleted(Boolean.TRUE);\r\n    message.setTopic((DiscussionTopic) forumManager.getTopicByIdWithMessages(selectedTopic.getTopic().getId()));\r\n    forumManager.saveMessage(message, false);\r\n    selectedTopic = getDecoratedTopic(selectedTopic.getTopic());\r\n    setSelectedForumForCurrentTopic((DiscussionTopic) forumManager.getTopicByIdWithMessages(selectedTopic.getTopic().getId()));\r\n    selectedTopic.getTopic().setBaseForum(selectedForum.getForum());\r\n    this.deleteMsg = false;\r\n    if (beforeChangeHM != null)\r\n        updateSynopticMessagesForForumComparingOldMessagesCount(getSiteId(), forumId, topicId, beforeChangeHM, SynopticMsgcntrManager.NUM_OF_ATTEMPTS);\r\n    eventTrackingService.post(eventTrackingService.newEvent(DiscussionForumService.EVENT_FORUMS_REMOVE, getEventReference(message), true));\r\n    log.info(\"Forum message \" + message.getId() + \" has been deleted by \" + getUserId());\r\n    if (!\"\".equals(fromPage)) {\r\n        final String where = fromPage;\r\n        fromPage = null;\r\n        processActionGetDisplayThread();\r\n        return where;\r\n    } else {\r\n        return ALL_MESSAGES;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.pasystem.impl.common.DB.transaction",
	"Comment": "run some database queries within a transaction with a helpful message if something goes wrong.",
	"Method": "E transaction(DBAction<E> action,E transaction,String actionDescription,DBAction<E> action){\r\n    try {\r\n        Connection db = SqlService.borrowConnection();\r\n        DBConnection dbc = new DBConnection(db);\r\n        boolean autocommit = db.getAutoCommit();\r\n        try {\r\n            db.setAutoCommit(false);\r\n            return action.call(dbc);\r\n        } finally {\r\n            if (!dbc.wasResolved()) {\r\n                log.warn(\"**************\\nDB Transaction was neither committed nor rolled back.  Committing for you.\");\r\n                dbc.commit();\r\n            }\r\n            if (autocommit) {\r\n                db.setAutoCommit(true);\r\n            }\r\n            SqlService.returnConnection(db);\r\n        }\r\n    } catch (SQLException e) {\r\n        throw new RuntimeException(\"Failure in database action: \" + actionDescription, e);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.jsf.renderer.PagerRenderer.getString",
	"Comment": "get a named attribute from the component or the widget resource bundle.",
	"Method": "String getString(FacesContext context,UIComponent component,String attrName,String def){\r\n    String ret = (String) getFromAttributeOrBundle(context, component, attrName);\r\n    if (ret != null)\r\n        return ret;\r\n    return def;\r\n}"
}, {
	"Path": "org.sakaiproject.util.SiteEmailNotification.refineToSiteMembers",
	"Comment": "refine the recipients list to only users that are actually members\tof the given site.",
	"Method": "void refineToSiteMembers(List<User> users,Site site){\r\n    Set<Member> members = site.getMembers();\r\n    Set<String> memberUserIds = getUserIds(members);\r\n    for (Iterator<User> i = users.listIterator(); i.hasNext(); ) {\r\n        User user = i.next();\r\n        if (!memberUserIds.contains(user.getId())) {\r\n            i.remove();\r\n        }\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.tool.podcasts.podHomeBean.getSelectedPodcast",
	"Comment": "returns the current decoratedpodcastbean set as selectedpodcast.",
	"Method": "DecoratedPodcastBean getSelectedPodcast(){\r\n    return selectedPodcast;\r\n}"
}, {
	"Path": "org.sakaiproject.entitybroker.rest.EntityBatchHandler.checkContent",
	"Comment": "checks that the content is in the correct format and is not too large,if it is too large it will not be processed and if it is in the wrong format it will be encoded as a data chunk,it is ok it will be placed into the datamap and reintegrated after encoding",
	"Method": "String checkContent(String format,String content,String refKey,HashMap<String, String> dataMap){\r\n    String dataKey = null;\r\n    if (content != null) {\r\n        content = content.trim();\r\n        if (!\"\".equals(content)) {\r\n            if (entityEncodingManager.validateFormat(content, format)) {\r\n                if (Formats.XML.equals(format) || Formats.HTML.equals(format)) {\r\n                    content = stripOutXMLTag(content, \"<?\", \"?>\");\r\n                    content = stripOutXMLTag(content, \"<!DOCTYPE\", \">\");\r\n                }\r\n                dataKey = UNIQUE_DATA_PREFIX + refKey;\r\n                dataMap.put(dataKey, content);\r\n            }\r\n        }\r\n    }\r\n    return dataKey;\r\n}"
}, {
	"Path": "org.sakaiproject.component.impl.SakaiContextLoader.loadParentContext",
	"Comment": "spring allows a parent applicationcontext to be set during the creation of a new applicationcontext\tsakai sets the sakaiapplicationcontext as the parent which managed by the componentmanager",
	"Method": "ApplicationContext loadParentContext(ServletContext servletContext){\r\n    ConfigurableApplicationContext sharedAc = ((SpringCompMgr) ComponentManager.getInstance()).getApplicationContext();\r\n    return sharedAc;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.app.scheduler.SchedulerTool.setConfigurableJobBeanWrapper",
	"Comment": "sets the configurablejobbeanwrapper to establish the job whose properties are being edittedduring a job or trigger creation process.",
	"Method": "void setConfigurableJobBeanWrapper(ConfigurableJobBeanWrapper job){\r\n    configurableJobBeanWrapper = job;\r\n    if (job != null) {\r\n        final String rbBase = job.getResourceBundleBase();\r\n        final ResourceBundle rb = ResourceBundle.getBundle(rbBase);\r\n        if (rb != null) {\r\n            configurableJobResources = new HashMap<String, String>();\r\n            final Enumeration keyIt = rb.getKeys();\r\n            while (keyIt.hasMoreElements()) {\r\n                final String key = (String) keyIt.nextElement();\r\n                configurableJobResources.put(key, rb.getString(key));\r\n            }\r\n        } else {\r\n            configurableJobResources = null;\r\n        }\r\n    } else {\r\n        configurableJobResources = null;\r\n    }\r\n    refreshProperties();\r\n}"
}, {
	"Path": "org.sakaiproject.util.BaseXmlFileStorage.caseId",
	"Comment": "fix the case of resource ids to support case insensitive ids if enabled",
	"Method": "String caseId(String id){\r\n    if (m_caseInsensitive) {\r\n        return id.toLowerCase();\r\n    }\r\n    return id;\r\n}"
}, {
	"Path": "org.sakaiproject.tool.messageforums.ui.MessageForumSynopticBeanLite.getSite",
	"Comment": "returns the site object for this id, if it exists.\tif not, returns idunusedexception",
	"Method": "Site getSite(String siteId){\r\n    if (sitesMap == null) {\r\n        sitesMap = new HashMap();\r\n    }\r\n    if (sitesMap.get(siteId) == null) {\r\n        Site site = siteService.getSite(siteId);\r\n        sitesMap.put(site.getId(), site);\r\n        return site;\r\n    } else {\r\n        return (Site) sitesMap.get(siteId);\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.util.SingleStorageSqlDefault.getXmlAndFieldSql",
	"Comment": "returns the sql statement which retrieves the specified field and the xml field from the specified table.",
	"Method": "String getXmlAndFieldSql(String field,String table){\r\n    return \"select \" + field + \", XML from \" + table;\r\n}"
}, {
	"Path": "org.sakaiproject.site.impl.SiteServiceSqlDefault.getDeleteUserSql",
	"Comment": "returns the sql statement which deletes a user from a given site.",
	"Method": "String getDeleteUserSql(){\r\n    return \"delete from SAKAI_SITE_USER where SITE_ID = ? and USER_ID = ?\";\r\n}"
}, {
	"Path": "org.sakaiproject.component.cover.TestComponentManagerContainer.getService",
	"Comment": "convenience method to get a service bean from the sakai component manager.",
	"Method": "Object getService(String beanId){\r\n    try {\r\n        return componentManager.get(beanId);\r\n    } catch (Exception e) {\r\n        log.error(e.getMessage(), e);\r\n        return null;\r\n    }\r\n}"
}, {
	"Path": "org.sakaiproject.lessonbuildertool.service.BltiEntity.editItemSettingsUrl",
	"Comment": "contents and settings. this will be null except in that situation",
	"Method": "String editItemSettingsUrl(SimplePageBean bean){\r\n    return null;\r\n}"
}]